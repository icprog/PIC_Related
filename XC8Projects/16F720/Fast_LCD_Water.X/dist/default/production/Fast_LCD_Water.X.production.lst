

Microchip Technology PIC LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sat Dec 05 00:41:52 2015

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	16F720
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	dabs	1,0x7E,2
    30  0000                     	;# 
    31  0001                     	;# 
    32  0002                     	;# 
    33  0003                     	;# 
    34  0004                     	;# 
    35  0005                     	;# 
    36  0006                     	;# 
    37  0007                     	;# 
    38  000A                     	;# 
    39  000B                     	;# 
    40  000C                     	;# 
    41  000E                     	;# 
    42  000E                     	;# 
    43  000F                     	;# 
    44  0010                     	;# 
    45  0011                     	;# 
    46  0012                     	;# 
    47  0013                     	;# 
    48  0014                     	;# 
    49  0015                     	;# 
    50  0015                     	;# 
    51  0016                     	;# 
    52  0017                     	;# 
    53  0018                     	;# 
    54  0019                     	;# 
    55  001A                     	;# 
    56  001E                     	;# 
    57  001F                     	;# 
    58  0081                     	;# 
    59  0085                     	;# 
    60  0086                     	;# 
    61  0087                     	;# 
    62  008C                     	;# 
    63  008E                     	;# 
    64  008F                     	;# 
    65  0090                     	;# 
    66  0091                     	;# 
    67  0092                     	;# 
    68  0093                     	;# 
    69  0093                     	;# 
    70  0094                     	;# 
    71  0095                     	;# 
    72  0096                     	;# 
    73  0098                     	;# 
    74  0099                     	;# 
    75  009D                     	;# 
    76  009F                     	;# 
    77  010C                     	;# 
    78  010D                     	;# 
    79  010E                     	;# 
    80  010F                     	;# 
    81  0115                     	;# 
    82  0116                     	;# 
    83  0185                     	;# 
    84  0186                     	;# 
    85  0187                     	;# 
    86  018C                     	;# 
    87  018D                     	;# 
    88  0000                     	;# 
    89  0001                     	;# 
    90  0002                     	;# 
    91  0003                     	;# 
    92  0004                     	;# 
    93  0005                     	;# 
    94  0006                     	;# 
    95  0007                     	;# 
    96  000A                     	;# 
    97  000B                     	;# 
    98  000C                     	;# 
    99  000E                     	;# 
   100  000E                     	;# 
   101  000F                     	;# 
   102  0010                     	;# 
   103  0011                     	;# 
   104  0012                     	;# 
   105  0013                     	;# 
   106  0014                     	;# 
   107  0015                     	;# 
   108  0015                     	;# 
   109  0016                     	;# 
   110  0017                     	;# 
   111  0018                     	;# 
   112  0019                     	;# 
   113  001A                     	;# 
   114  001E                     	;# 
   115  001F                     	;# 
   116  0081                     	;# 
   117  0085                     	;# 
   118  0086                     	;# 
   119  0087                     	;# 
   120  008C                     	;# 
   121  008E                     	;# 
   122  008F                     	;# 
   123  0090                     	;# 
   124  0091                     	;# 
   125  0092                     	;# 
   126  0093                     	;# 
   127  0093                     	;# 
   128  0094                     	;# 
   129  0095                     	;# 
   130  0096                     	;# 
   131  0098                     	;# 
   132  0099                     	;# 
   133  009D                     	;# 
   134  009F                     	;# 
   135  010C                     	;# 
   136  010D                     	;# 
   137  010E                     	;# 
   138  010F                     	;# 
   139  0115                     	;# 
   140  0116                     	;# 
   141  0185                     	;# 
   142  0186                     	;# 
   143  0187                     	;# 
   144  018C                     	;# 
   145  018D                     	;# 
   146  0000                     	;# 
   147  0001                     	;# 
   148  0002                     	;# 
   149  0003                     	;# 
   150  0004                     	;# 
   151  0005                     	;# 
   152  0006                     	;# 
   153  0007                     	;# 
   154  000A                     	;# 
   155  000B                     	;# 
   156  000C                     	;# 
   157  000E                     	;# 
   158  000E                     	;# 
   159  000F                     	;# 
   160  0010                     	;# 
   161  0011                     	;# 
   162  0012                     	;# 
   163  0013                     	;# 
   164  0014                     	;# 
   165  0015                     	;# 
   166  0015                     	;# 
   167  0016                     	;# 
   168  0017                     	;# 
   169  0018                     	;# 
   170  0019                     	;# 
   171  001A                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  0087                     	;# 
   178  008C                     	;# 
   179  008E                     	;# 
   180  008F                     	;# 
   181  0090                     	;# 
   182  0091                     	;# 
   183  0092                     	;# 
   184  0093                     	;# 
   185  0093                     	;# 
   186  0094                     	;# 
   187  0095                     	;# 
   188  0096                     	;# 
   189  0098                     	;# 
   190  0099                     	;# 
   191  009D                     	;# 
   192  009F                     	;# 
   193  010C                     	;# 
   194  010D                     	;# 
   195  010E                     	;# 
   196  010F                     	;# 
   197  0115                     	;# 
   198  0116                     	;# 
   199  0185                     	;# 
   200  0186                     	;# 
   201  0187                     	;# 
   202  018C                     	;# 
   203  018D                     	;# 
   204  0000                     	;# 
   205  0001                     	;# 
   206  0002                     	;# 
   207  0003                     	;# 
   208  0004                     	;# 
   209  0005                     	;# 
   210  0006                     	;# 
   211  0007                     	;# 
   212  000A                     	;# 
   213  000B                     	;# 
   214  000C                     	;# 
   215  000E                     	;# 
   216  000E                     	;# 
   217  000F                     	;# 
   218  0010                     	;# 
   219  0011                     	;# 
   220  0012                     	;# 
   221  0013                     	;# 
   222  0014                     	;# 
   223  0015                     	;# 
   224  0015                     	;# 
   225  0016                     	;# 
   226  0017                     	;# 
   227  0018                     	;# 
   228  0019                     	;# 
   229  001A                     	;# 
   230  001E                     	;# 
   231  001F                     	;# 
   232  0081                     	;# 
   233  0085                     	;# 
   234  0086                     	;# 
   235  0087                     	;# 
   236  008C                     	;# 
   237  008E                     	;# 
   238  008F                     	;# 
   239  0090                     	;# 
   240  0091                     	;# 
   241  0092                     	;# 
   242  0093                     	;# 
   243  0093                     	;# 
   244  0094                     	;# 
   245  0095                     	;# 
   246  0096                     	;# 
   247  0098                     	;# 
   248  0099                     	;# 
   249  009D                     	;# 
   250  009F                     	;# 
   251  010C                     	;# 
   252  010D                     	;# 
   253  010E                     	;# 
   254  010F                     	;# 
   255  0115                     	;# 
   256  0116                     	;# 
   257  0185                     	;# 
   258  0186                     	;# 
   259  0187                     	;# 
   260  018C                     	;# 
   261  018D                     	;# 
   262  0000                     	;# 
   263  0001                     	;# 
   264  0002                     	;# 
   265  0003                     	;# 
   266  0004                     	;# 
   267  0005                     	;# 
   268  0006                     	;# 
   269  0007                     	;# 
   270  000A                     	;# 
   271  000B                     	;# 
   272  000C                     	;# 
   273  000E                     	;# 
   274  000E                     	;# 
   275  000F                     	;# 
   276  0010                     	;# 
   277  0011                     	;# 
   278  0012                     	;# 
   279  0013                     	;# 
   280  0014                     	;# 
   281  0015                     	;# 
   282  0015                     	;# 
   283  0016                     	;# 
   284  0017                     	;# 
   285  0018                     	;# 
   286  0019                     	;# 
   287  001A                     	;# 
   288  001E                     	;# 
   289  001F                     	;# 
   290  0081                     	;# 
   291  0085                     	;# 
   292  0086                     	;# 
   293  0087                     	;# 
   294  008C                     	;# 
   295  008E                     	;# 
   296  008F                     	;# 
   297  0090                     	;# 
   298  0091                     	;# 
   299  0092                     	;# 
   300  0093                     	;# 
   301  0093                     	;# 
   302  0094                     	;# 
   303  0095                     	;# 
   304  0096                     	;# 
   305  0098                     	;# 
   306  0099                     	;# 
   307  009D                     	;# 
   308  009F                     	;# 
   309  010C                     	;# 
   310  010D                     	;# 
   311  010E                     	;# 
   312  010F                     	;# 
   313  0115                     	;# 
   314  0116                     	;# 
   315  0185                     	;# 
   316  0186                     	;# 
   317  0187                     	;# 
   318  018C                     	;# 
   319  018D                     	;# 
   320                           
   321                           	psect	idataBANK0
   322  00E0                     __pidataBANK0:	
   323                           
   324                           ;initializer for ___cgram
   325  00E0  340C               	retlw	12
   326  00E1  3412               	retlw	18
   327  00E2  3412               	retlw	18
   328  00E3  340C               	retlw	12
   329  00E4  3400               	retlw	0
   330  00E5  3400               	retlw	0
   331  00E6  3400               	retlw	0
   332  00E7  3400               	retlw	0
   333                           
   334                           ;initializer for _hh
   335  00E8  3401               	retlw	1
   336                           
   337                           ;initializer for _t
   338  00E9  3403               	retlw	3
   339  001F                     _ADCON0	set	31
   340  001E                     _ADRES	set	30
   341  0005                     _PORTA	set	5
   342  0006                     _PORTB	set	6
   343  0007                     _PORTC	set	7
   344  0001                     _TMR0	set	1
   345  00F8                     _ADON	set	248
   346  00F9                     _GO_nDONE	set	249
   347  002A                     _RA2	set	42
   348  002D                     _RA5	set	45
   349  0036                     _RB6	set	54
   350  0037                     _RB7	set	55
   351  003C                     _RC4	set	60
   352  003D                     _RC5	set	61
   353  003E                     _RC6	set	62
   354  005A                     _TMR0IF	set	90
   355  009F                     _ADCON1	set	159
   356  009D                     _FVRCON	set	157
   357  0081                     _OPTION_REG	set	129
   358  0091                     _OSCTUNE	set	145
   359  0085                     _TRISA	set	133
   360  0086                     _TRISB	set	134
   361  0087                     _TRISC	set	135
   362  0087                     _TRISCbits	set	135
   363  0095                     _WPUA	set	149
   364  0484                     _IRCF0	set	1156
   365  0485                     _IRCF1	set	1157
   366  0115                     _WPUB	set	277
   367  0185                     _ANSELA	set	389
   368  0186                     _ANSELB	set	390
   369  0187                     _ANSELC	set	391
   370                           
   371                           	psect	strings
   372  0001                     __pstrings:	
   373  0001                     stringtab:	
   374  0001                     __stringtab:	
   375  0001                     stringcode:	
   376                           ;	String table - string pointers are 1 byte each
   377                           
   378  0001                     stringdir:	
   379  0001  3000               	movlw	high stringdir
   380  0002  008A               	movwf	10
   381  0003  0804               	movf	4,w
   382  0004  0A84               	incf	4,f
   383  0005  0782               	addwf	2,f
   384  0006                     __stringbase:	
   385  0006  3400               	retlw	0
   386  0007                     __end_of__stringtab:	
   387  0007                     STR_4:	
   388  0007  3420               	retlw	32	;' '
   389  0008  3420               	retlw	32	;' '
   390  0009  3453               	retlw	83	;'S'
   391  000A  3445               	retlw	69	;'E'
   392  000B  3454               	retlw	84	;'T'
   393  000C  3450               	retlw	80	;'P'
   394  000D  344F               	retlw	79	;'O'
   395  000E  3449               	retlw	73	;'I'
   396  000F  344E               	retlw	78	;'N'
   397  0010  3454               	retlw	84	;'T'
   398  0011  343A               	retlw	58	;':'
   399  0012  3420               	retlw	32	;' '
   400  0013  3420               	retlw	32	;' '
   401  0014  3400               	retlw	0
   402  0015                     STR_6:	
   403  0015  3457               	retlw	87	;'W'
   404  0016  3461               	retlw	97	;'a'
   405  0017  3474               	retlw	116	;'t'
   406  0018  3465               	retlw	101	;'e'
   407  0019  3472               	retlw	114	;'r'
   408  001A  3465               	retlw	101	;'e'
   409  001B  3464               	retlw	100	;'d'
   410  001C  3420               	retlw	32	;' '
   411  001D  3420               	retlw	32	;' '
   412  001E  3400               	retlw	0
   413  001F                     STR_7:	
   414  001F  3457               	retlw	87	;'W'
   415  0020  3461               	retlw	97	;'a'
   416  0021  3469               	retlw	105	;'i'
   417  0022  3474               	retlw	116	;'t'
   418  0023  3469               	retlw	105	;'i'
   419  0024  346E               	retlw	110	;'n'
   420  0025  3467               	retlw	103	;'g'
   421  0026  3420               	retlw	32	;' '
   422  0027  3420               	retlw	32	;' '
   423  0028  3400               	retlw	0
   424  0029                     STR_5:	
   425  0029  3457               	retlw	87	;'W'
   426  002A  3461               	retlw	97	;'a'
   427  002B  3474               	retlw	116	;'t'
   428  002C  3465               	retlw	101	;'e'
   429  002D  3472               	retlw	114	;'r'
   430  002E  3469               	retlw	105	;'i'
   431  002F  346E               	retlw	110	;'n'
   432  0030  3467               	retlw	103	;'g'
   433  0031  3420               	retlw	32	;' '
   434  0032  3400               	retlw	0
   435  0033                     STR_8:	
   436  0033  344E               	retlw	78	;'N'
   437  0034  346F               	retlw	111	;'o'
   438  0035  3420               	retlw	32	;' '
   439  0036  3457               	retlw	87	;'W'
   440  0037  3461               	retlw	97	;'a'
   441  0038  3474               	retlw	116	;'t'
   442  0039  3465               	retlw	101	;'e'
   443  003A  3472               	retlw	114	;'r'
   444  003B  3420               	retlw	32	;' '
   445  003C  3400               	retlw	0
   446  003D                     STR_10:	
   447  003D  3454               	retlw	84	;'T'
   448  003E  3449               	retlw	73	;'I'
   449  003F  344D               	retlw	77	;'M'
   450  0040  3445               	retlw	69	;'E'
   451  0041  3420               	retlw	32	;' '
   452  0042  3400               	retlw	0
   453  0043                     STR_9:	
   454  0043  342F               	retlw	47	;'/'
   455  0044  3400               	retlw	0
   456  0045                     STR_11:	
   457  0045  343A               	retlw	58	;':'
   458  0046  3400               	retlw	0
   459  0013                     
   460                           ; #config settings
   461  0000                     
   462                           	psect	cinit
   463  07E5                     start_initialization:	
   464  07E5                     __initialization:	
   465                           
   466                           ; Clear objects allocated to BANK0
   467  07E5  1383               	bcf	3,7	;select IRP bank0
   468  07E6  3020               	movlw	low __pbssBANK0
   469  07E7  0084               	movwf	4
   470  07E8  3037               	movlw	low (__pbssBANK0+23)
   471  07E9  20CF               	fcall	clear_ram0
   472                           
   473                           ; Initialize objects allocated to BANK0
   474  07EA  20E0               	fcall	__pidataBANK0	;fetch initializer
   475  07EB  00C6               	movwf	__pdataBANK0& (0+127)
   476  07EC  20E1               	fcall	__pidataBANK0+1	;fetch initializer
   477  07ED  00C7               	movwf	(__pdataBANK0+1)& (0+127)
   478  07EE  20E2               	fcall	__pidataBANK0+2	;fetch initializer
   479  07EF  00C8               	movwf	(__pdataBANK0+2)& (0+127)
   480  07F0  20E3               	fcall	__pidataBANK0+3	;fetch initializer
   481  07F1  00C9               	movwf	(__pdataBANK0+3)& (0+127)
   482  07F2  20E4               	fcall	__pidataBANK0+4	;fetch initializer
   483  07F3  00CA               	movwf	(__pdataBANK0+4)& (0+127)
   484  07F4  20E5               	fcall	__pidataBANK0+5	;fetch initializer
   485  07F5  00CB               	movwf	(__pdataBANK0+5)& (0+127)
   486  07F6  20E6               	fcall	__pidataBANK0+6	;fetch initializer
   487  07F7  00CC               	movwf	(__pdataBANK0+6)& (0+127)
   488  07F8  20E7               	fcall	__pidataBANK0+7	;fetch initializer
   489  07F9  00CD               	movwf	(__pdataBANK0+7)& (0+127)
   490  07FA  20E8               	fcall	__pidataBANK0+8	;fetch initializer
   491  07FB  00CE               	movwf	(__pdataBANK0+8)& (0+127)
   492  07FC  20E9               	fcall	__pidataBANK0+9	;fetch initializer
   493  07FD  00CF               	movwf	(__pdataBANK0+9)& (0+127)
   494  07FE                     end_of_initialization:	
   495                           ;End of C runtime variable initialization code
   496                           
   497  07FE                     __end_of__initialization:	
   498  07FE  0183               	clrf	3
   499  07FF  2D80               	ljmp	_main	;jump to C main() function
   500                           
   501                           	psect	bssBANK0
   502  0020                     __pbssBANK0:	
   503  0020                     LCDWriteInt@F1077:	
   504  0020                     	ds	5
   505  0025                     _bres:	
   506  0025                     	ds	2
   507  0027                     _num:	
   508  0027                     	ds	2
   509  0029                     _ofnum:	
   510  0029                     	ds	2
   511  002B                     _Setpoint:	
   512  002B                     	ds	1
   513  002C                     _Watered:	
   514  002C                     	ds	1
   515  002D                     _a:	
   516  002D                     	ds	1
   517  002E                     _c:	
   518  002E                     	ds	1
   519  002F                     _dd:	
   520  002F                     	ds	1
   521  0030                     _e:	
   522  0030                     	ds	1
   523  0031                     _g:	
   524  0031                     	ds	1
   525  0032                     _hl:	
   526  0032                     	ds	1
   527  0033                     _mh:	
   528  0033                     	ds	1
   529  0034                     _ml:	
   530  0034                     	ds	1
   531  0035                     _sh:	
   532  0035                     	ds	1
   533  0036                     _sl:	
   534  0036                     	ds	1
   535                           
   536                           	psect	dataBANK0
   537  0046                     __pdataBANK0:	
   538  0046                     ___cgram:	
   539  0046                     	ds	8
   540  004E                     _hh:	
   541  004E                     	ds	1
   542  004F                     _t:	
   543  004F                     	ds	1
   544                           
   545                           	psect	clrtext
   546  00CF                     clear_ram0:	
   547                           ;	Called with FSR containing the base address, and
   548                           ;	W with the last address+1
   549                           
   550  00CF  0064               	clrwdt	;clear the watchdog before getting into this loop
   551  00D0                     clrloop0:	
   552  00D0  0180               	clrf	0	;clear RAM location pointed to by FSR
   553  00D1  0A84               	incf	4,f	;increment pointer
   554  00D2  0604               	xorwf	4,w	;XOR with final address
   555  00D3  1903               	btfsc	3,2	;have we reached the end yet?
   556  00D4  3400               	retlw	0	;all done for this memory range, return
   557  00D5  0604               	xorwf	4,w	;XOR again to restore value
   558  00D6  28D0               	goto	clrloop0	;do the next byte
   559                           
   560                           	psect	cstackCOMMON
   561  0070                     __pcstackCOMMON:	
   562  0070                     ?_LCDBusyLoop:	
   563  0070                     ??_LCDBusyLoop:	
   564                           ; 0 bytes @ 0x0
   565                           
   566  0070                     ?_ConfigureOscillator:	
   567                           ; 0 bytes @ 0x0
   568                           
   569  0070                     ??_ConfigureOscillator:	
   570                           ; 0 bytes @ 0x0
   571                           
   572  0070                     ?_Init:	
   573                           ; 0 bytes @ 0x0
   574                           
   575  0070                     ??_Init:	
   576                           ; 0 bytes @ 0x0
   577                           
   578  0070                     ??_ADCRead:	
   579                           ; 0 bytes @ 0x0
   580                           
   581  0070                     ?_MoistureCheck:	
   582                           ; 0 bytes @ 0x0
   583                           
   584  0070                     ?_ADCInit:	
   585                           ; 0 bytes @ 0x0
   586                           
   587  0070                     ??_ADCInit:	
   588                           ; 0 bytes @ 0x0
   589                           
   590  0070                     ?_LCDReset:	
   591                           ; 0 bytes @ 0x0
   592                           
   593  0070                     ?_LCDInit:	
   594                           ; 0 bytes @ 0x0
   595                           
   596  0070                     ?_LCDWriteString:	
   597                           ; 0 bytes @ 0x0
   598                           
   599  0070                     ?_main:	
   600                           ; 0 bytes @ 0x0
   601                           
   602  0070                     ?_ADCRead:	
   603                           ; 0 bytes @ 0x0
   604                           
   605  0070                     ?_Median:	
   606                           ; 1 bytes @ 0x0
   607                           
   608  0070                     ?___wmul:	
   609                           ; 1 bytes @ 0x0
   610                           
   611  0070                     ?___awdiv:	
   612                           ; 2 bytes @ 0x0
   613                           
   614  0070                     ?___awmod:	
   615                           ; 2 bytes @ 0x0
   616                           
   617  0070                     Median@c:	
   618                           ; 2 bytes @ 0x0
   619                           
   620  0070                     ___wmul@multiplier:	
   621                           ; 1 bytes @ 0x0
   622                           
   623  0070                     ___awdiv@divisor:	
   624                           ; 2 bytes @ 0x0
   625                           
   626  0070                     ___awmod@divisor:	
   627                           ; 2 bytes @ 0x0
   628                           
   629                           
   630                           ; 2 bytes @ 0x0
   631  0070                     	ds	1
   632  0071                     ADCRead@ch:	
   633  0071                     Median@e:	
   634                           ; 1 bytes @ 0x1
   635                           
   636                           
   637                           ; 1 bytes @ 0x1
   638  0071                     	ds	1
   639  0072                     ??_Median:	
   640  0072                     LCDBusyLoop@busy:	
   641                           ; 0 bytes @ 0x2
   642                           
   643  0072                     ___wmul@multiplicand:	
   644                           ; 1 bytes @ 0x2
   645                           
   646  0072                     ___awdiv@dividend:	
   647                           ; 2 bytes @ 0x2
   648                           
   649  0072                     ___awmod@dividend:	
   650                           ; 2 bytes @ 0x2
   651                           
   652                           
   653                           ; 2 bytes @ 0x2
   654  0072                     	ds	1
   655  0073                     LCDBusyLoop@temp:	
   656  0073                     Median@f:	
   657                           ; 1 bytes @ 0x3
   658                           
   659                           
   660                           ; 1 bytes @ 0x3
   661  0073                     	ds	1
   662  0074                     ??___wmul:	
   663  0074                     ??___awdiv:	
   664                           ; 0 bytes @ 0x4
   665                           
   666  0074                     ??___awmod:	
   667                           ; 0 bytes @ 0x4
   668                           
   669  0074                     LCDBusyLoop@status:	
   670                           ; 0 bytes @ 0x4
   671                           
   672  0074                     Median@a:	
   673                           ; 1 bytes @ 0x4
   674                           
   675  0074                     ___wmul@product:	
   676                           ; 1 bytes @ 0x4
   677                           
   678                           
   679                           ; 2 bytes @ 0x4
   680  0074                     	ds	1
   681  0075                     ?_LCDByte:	
   682  0075                     LCDByte@isdata:	
   683                           ; 0 bytes @ 0x5
   684                           
   685  0075                     Median@b:	
   686                           ; 1 bytes @ 0x5
   687                           
   688  0075                     ___awdiv@counter:	
   689                           ; 1 bytes @ 0x5
   690                           
   691  0075                     ___awmod@counter:	
   692                           ; 1 bytes @ 0x5
   693                           
   694                           
   695                           ; 1 bytes @ 0x5
   696  0075                     	ds	1
   697  0076                     ??_LCDByte:	
   698  0076                     Median@d:	
   699                           ; 0 bytes @ 0x6
   700                           
   701  0076                     ___awdiv@sign:	
   702                           ; 1 bytes @ 0x6
   703                           
   704  0076                     ___awmod@sign:	
   705                           ; 1 bytes @ 0x6
   706                           
   707                           
   708                           ; 1 bytes @ 0x6
   709  0076                     	ds	1
   710  0077                     ??_MoistureCheck:	
   711  0077                     ___awdiv@quotient:	
   712                           ; 0 bytes @ 0x7
   713                           
   714                           
   715                           ; 2 bytes @ 0x7
   716  0077                     	ds	1
   717  0078                     LCDByte@hn:	
   718                           
   719                           ; 1 bytes @ 0x8
   720  0078                     	ds	1
   721  0079                     LCDByte@ln:	
   722                           
   723                           ; 1 bytes @ 0x9
   724  0079                     	ds	1
   725  007A                     LCDByte@c:	
   726                           
   727                           ; 1 bytes @ 0xA
   728  007A                     	ds	1
   729  007B                     LCDByte@temp:	
   730                           
   731                           ; 1 bytes @ 0xB
   732  007B                     	ds	1
   733  007C                     ??_LCDReset:	
   734  007C                     ??_LCDWriteString:	
   735                           ; 0 bytes @ 0xC
   736                           
   737  007C                     ??_LCDWriteInt:	
   738                           ; 0 bytes @ 0xC
   739                           
   740  007C                     ?_LCDGotoXY:	
   741                           ; 0 bytes @ 0xC
   742                           
   743  007C                     LCDReset@style:	
   744                           ; 0 bytes @ 0xC
   745                           
   746  007C                     LCDInit@style:	
   747                           ; 1 bytes @ 0xC
   748                           
   749  007C                     LCDGotoXY@y:	
   750                           ; 1 bytes @ 0xC
   751                           
   752                           
   753                           ; 1 bytes @ 0xC
   754  007C                     	ds	1
   755  007D                     ??_LCDGotoXY:	
   756  007D                     LCDInit@__i:	
   757                           ; 0 bytes @ 0xD
   758                           
   759  007D                     LCDGotoXY@x:	
   760                           ; 1 bytes @ 0xD
   761                           
   762                           
   763                           ; 1 bytes @ 0xD
   764  007D                     	ds	1
   765                           
   766                           	psect	cstackBANK0
   767  0037                     __pcstackBANK0:	
   768  0037                     ??_LCDInit:	
   769  0037                     ?_LCDWriteInt:	
   770                           ; 0 bytes @ 0x0
   771                           
   772  0037                     LCDWriteString@cc:	
   773                           ; 0 bytes @ 0x0
   774                           
   775  0037                     LCDWriteInt@val:	
   776                           ; 1 bytes @ 0x0
   777                           
   778                           
   779                           ; 2 bytes @ 0x0
   780  0037                     	ds	1
   781  0038                     LCDWriteString@msg:	
   782                           
   783                           ; 1 bytes @ 0x1
   784  0038                     	ds	1
   785  0039                     LCDWriteInt@field_length:	
   786                           
   787                           ; 1 bytes @ 0x2
   788  0039                     	ds	1
   789  003A                     LCDWriteInt@str:	
   790                           
   791                           ; 5 bytes @ 0x3
   792  003A                     	ds	5
   793  003F                     LCDWriteInt@j:	
   794                           
   795                           ; 2 bytes @ 0x8
   796  003F                     	ds	2
   797  0041                     LCDWriteInt@i:	
   798                           
   799                           ; 2 bytes @ 0xA
   800  0041                     	ds	2
   801  0043                     ??_main:	
   802                           
   803                           ; 0 bytes @ 0xC
   804  0043                     	ds	3
   805                           
   806                           	psect	maintext
   807  0580                     __pmaintext:	
   808 ;;
   809 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   810 ;;
   811 ;; *************** function _main *****************
   812 ;; Defined at:
   813 ;;		line 32 in file "main.c"
   814 ;; Parameters:    Size  Location     Type
   815 ;;		None
   816 ;; Auto vars:     Size  Location     Type
   817 ;;		None
   818 ;; Return value:  Size  Location     Type
   819 ;;		None               void
   820 ;; Registers used:
   821 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   822 ;; Tracked objects:
   823 ;;		On entry : B00/0
   824 ;;		On exit  : 0/0
   825 ;;		Unchanged: 0/0
   826 ;; Data sizes:     COMMON   BANK0   BANK1
   827 ;;      Params:         0       0       0
   828 ;;      Locals:         0       0       0
   829 ;;      Temps:          0       3       0
   830 ;;      Totals:         0       3       0
   831 ;;Total ram usage:        3 bytes
   832 ;; Hardware stack levels required when called:    3
   833 ;; This function calls:
   834 ;;		_ADCRead
   835 ;;		_ConfigureOscillator
   836 ;;		_Init
   837 ;;		_LCDByte
   838 ;;		_LCDGotoXY
   839 ;;		_LCDInit
   840 ;;		_LCDReset
   841 ;;		_LCDWriteInt
   842 ;;		_LCDWriteString
   843 ;;		_MoistureCheck
   844 ;;		___wmul
   845 ;; This function is called by:
   846 ;;		Startup code after reset
   847 ;; This function uses a non-reentrant model
   848 ;;
   849                           
   850                           
   851                           ;psect for function _main
   852  0580                     _main:	
   853                           
   854                           ;main.c: 34: ConfigureOscillator();
   855                           
   856                           ;incstack = 0
   857                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   858  0580  20EA               	fcall	_ConfigureOscillator
   859                           
   860                           ;main.c: 36: Init();
   861  0581  216D               	fcall	_Init
   862                           
   863                           ;main.c: 38: _delay((unsigned long)((1000)*(2000000L/4000.0)));
   864  0582  3003               	movlw	3
   865  0583  1283               	bcf	3,5	;RP0=0, select bank0
   866  0584  1303               	bcf	3,6	;RP1=0, select bank0
   867  0585  00C5               	movwf	??_main+2
   868  0586  308A               	movlw	138
   869  0587  00C4               	movwf	??_main+1
   870  0588  3056               	movlw	86
   871  0589  00C3               	movwf	??_main
   872  058A                     u1637:	
   873  058A  0BC3               	decfsz	??_main,f
   874  058B  2D8A               	goto	u1637
   875  058C  0BC4               	decfsz	??_main+1,f
   876  058D  2D8A               	goto	u1637
   877  058E  0BC5               	decfsz	??_main+2,f
   878  058F  2D8A               	goto	u1637
   879  0590  2D91               	nop2
   880                           
   881                           ;main.c: 39: LCDInit(0x00);
   882  0591  3000               	movlw	0
   883  0592  229D               	fcall	_LCDInit
   884                           
   885                           ;main.c: 40: (LCDByte(0b00000001,0));
   886  0593  01F5               	clrf	LCDByte@isdata
   887  0594  3001               	movlw	1
   888  0595  21CD               	fcall	_LCDByte
   889  0596                     l1628:	
   890                           ;main.c: 42: while (1)
   891                           
   892                           
   893                           ;main.c: 43: {
   894                           ;main.c: 44: if (TMR0IF)
   895  0596  1D0B               	btfss	11,2	;volatile
   896  0597  2DA1               	goto	l148
   897                           
   898                           ;main.c: 45: {
   899                           ;main.c: 46: bres += 256;
   900  0598  3000               	movlw	0
   901  0599  1283               	bcf	3,5	;RP0=0, select bank0
   902  059A  1303               	bcf	3,6	;RP1=0, select bank0
   903  059B  07A5               	addwf	_bres,f
   904  059C  1803               	skipnc
   905  059D  0AA6               	incf	_bres+1,f
   906  059E  3001               	movlw	1
   907  059F  07A6               	addwf	_bres+1,f
   908                           
   909                           ;main.c: 47: TMR0IF = 0;
   910  05A0  110B               	bcf	11,2	;volatile
   911  05A1                     l148:	
   912                           
   913                           ;main.c: 48: }
   914                           ;main.c: 50: if(bres >= 1953)
   915  05A1  3007               	movlw	7
   916  05A2  1283               	bcf	3,5	;RP0=0, select bank0
   917  05A3  1303               	bcf	3,6	;RP1=0, select bank0
   918  05A4  0226               	subwf	_bres+1,w
   919  05A5  30A1               	movlw	161
   920  05A6  1903               	skipnz
   921  05A7  0225               	subwf	_bres,w
   922  05A8  1C03               	skipc
   923  05A9  2D96               	goto	l1628
   924                           
   925                           ;main.c: 51: {
   926                           ;main.c: 52: bres -= 1953;
   927  05AA  30A1               	movlw	161
   928  05AB  02A5               	subwf	_bres,f
   929  05AC  3007               	movlw	7
   930  05AD  1C03               	skipc
   931  05AE  03A6               	decf	_bres+1,f
   932  05AF  02A6               	subwf	_bres+1,f
   933                           
   934                           ;main.c: 53: ++sl;
   935  05B0  3001               	movlw	1
   936  05B1  00C3               	movwf	??_main
   937  05B2  0843               	movf	??_main,w
   938  05B3  07B6               	addwf	_sl,f
   939                           
   940                           ;main.c: 55: if(sl>9)
   941  05B4  0836               	movf	_sl,w
   942  05B5  3A80               	xorlw	128
   943  05B6  3E76               	addlw	-138
   944  05B7  1C03               	skipc
   945  05B8  2DCB               	goto	l1648
   946                           
   947                           ;main.c: 56: {
   948                           ;main.c: 57: sl -= 10;
   949  05B9  30F6               	movlw	246
   950  05BA  00C3               	movwf	??_main
   951  05BB  0843               	movf	??_main,w
   952  05BC  07B6               	addwf	_sl,f
   953                           
   954                           ;main.c: 58: sh++;
   955  05BD  3001               	movlw	1
   956  05BE  00C3               	movwf	??_main
   957  05BF  0843               	movf	??_main,w
   958  05C0  07B5               	addwf	_sh,f
   959                           
   960                           ;main.c: 60: if(sh>5)
   961  05C1  0835               	movf	_sh,w
   962  05C2  3A80               	xorlw	128
   963  05C3  3E7A               	addlw	-134
   964  05C4  1C03               	skipc
   965  05C5  2DCB               	goto	l1648
   966                           
   967                           ;main.c: 61: {
   968                           ;main.c: 62: sh=0;
   969  05C6  01B5               	clrf	_sh
   970                           
   971                           ;main.c: 63: ml++;
   972  05C7  3001               	movlw	1
   973  05C8  00C3               	movwf	??_main
   974  05C9  0843               	movf	??_main,w
   975  05CA  07B4               	addwf	_ml,f
   976  05CB                     l1648:	
   977                           
   978                           ;main.c: 64: }
   979                           ;main.c: 65: }
   980                           ;main.c: 67: if(ml>9)
   981  05CB  0834               	movf	_ml,w
   982  05CC  3A80               	xorlw	128
   983  05CD  3E76               	addlw	-138
   984  05CE  1C03               	skipc
   985  05CF  2DE2               	goto	l1660
   986                           
   987                           ;main.c: 68: {
   988                           ;main.c: 69: ++mh;
   989  05D0  3001               	movlw	1
   990  05D1  00C3               	movwf	??_main
   991  05D2  0843               	movf	??_main,w
   992  05D3  07B3               	addwf	_mh,f
   993                           
   994                           ;main.c: 70: ml = 0;
   995  05D4  01B4               	clrf	_ml
   996                           
   997                           ;main.c: 72: if (mh%2 ==0)
   998  05D5  0833               	movf	_mh,w
   999  05D6  00C3               	movwf	??_main
  1000  05D7  01C4               	clrf	??_main+1
  1001  05D8  1BC3               	btfsc	??_main,7
  1002  05D9  03C4               	decf	??_main+1,f
  1003  05DA  1843               	btfsc	??_main,0
  1004  05DB  2DE0               	goto	l1658
  1005                           
  1006                           ;main.c: 73: {
  1007                           ;main.c: 74: sl -= 2;
  1008  05DC  30FE               	movlw	254
  1009  05DD  00C3               	movwf	??_main
  1010  05DE  0843               	movf	??_main,w
  1011  05DF  07B6               	addwf	_sl,f
  1012  05E0                     l1658:	
  1013                           
  1014                           ;main.c: 75: }
  1015                           ;main.c: 77: LCDReset(0x00);
  1016  05E0  3000               	movlw	0
  1017  05E1  20D7               	fcall	_LCDReset
  1018  05E2                     l1660:	
  1019                           
  1020                           ;main.c: 78: }
  1021                           ;main.c: 80: if(mh>5)
  1022  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  1023  05E3  1303               	bcf	3,6	;RP1=0, select bank0
  1024  05E4  0833               	movf	_mh,w
  1025  05E5  3A80               	xorlw	128
  1026  05E6  3E7A               	addlw	-134
  1027  05E7  1C03               	skipc
  1028  05E8  2E0B               	goto	l1678
  1029                           
  1030                           ;main.c: 81: {
  1031                           ;main.c: 82: mh = 0;
  1032  05E9  01B3               	clrf	_mh
  1033                           
  1034                           ;main.c: 83: ++hl;
  1035  05EA  3001               	movlw	1
  1036  05EB  00C3               	movwf	??_main
  1037  05EC  0843               	movf	??_main,w
  1038  05ED  07B2               	addwf	_hl,f
  1039                           
  1040                           ;main.c: 85: sl += 1;
  1041  05EE  3001               	movlw	1
  1042  05EF  00C3               	movwf	??_main
  1043  05F0  0843               	movf	??_main,w
  1044  05F1  07B6               	addwf	_sl,f
  1045                           
  1046                           ;main.c: 87: if(Watered == 0)
  1047  05F2  082C               	movf	_Watered,w
  1048  05F3  1D03               	btfss	3,2
  1049  05F4  2DFB               	goto	l1672
  1050                           
  1051                           ;main.c: 88: {
  1052                           ;main.c: 89: ++ofnum;
  1053  05F5  3001               	movlw	1
  1054  05F6  07A9               	addwf	_ofnum,f
  1055  05F7  1803               	skipnc
  1056  05F8  0AAA               	incf	_ofnum+1,f
  1057  05F9  3000               	movlw	0
  1058  05FA  07AA               	addwf	_ofnum+1,f
  1059  05FB                     l1672:	
  1060                           
  1061                           ;main.c: 90: }
  1062                           ;main.c: 92: if(Watered ==1)
  1063  05FB  032C               	decf	_Watered,w
  1064  05FC  1D03               	btfss	3,2
  1065  05FD  2E0B               	goto	l1678
  1066                           
  1067                           ;main.c: 93: {
  1068                           ;main.c: 94: ++num;
  1069  05FE  3001               	movlw	1
  1070  05FF  07A7               	addwf	_num,f
  1071  0600  1803               	skipnc
  1072  0601  0AA8               	incf	_num+1,f
  1073  0602  3000               	movlw	0
  1074  0603  07A8               	addwf	_num+1,f
  1075                           
  1076                           ;main.c: 95: ++ofnum;
  1077  0604  3001               	movlw	1
  1078  0605  07A9               	addwf	_ofnum,f
  1079  0606  1803               	skipnc
  1080  0607  0AAA               	incf	_ofnum+1,f
  1081  0608  3000               	movlw	0
  1082  0609  07AA               	addwf	_ofnum+1,f
  1083                           
  1084                           ;main.c: 96: Watered = 0;
  1085  060A  01AC               	clrf	_Watered
  1086  060B                     l1678:	
  1087                           
  1088                           ;main.c: 97: }
  1089                           ;main.c: 98: }
  1090                           ;main.c: 100: if(hl>9)
  1091  060B  0832               	movf	_hl,w
  1092  060C  3A80               	xorlw	128
  1093  060D  3E76               	addlw	-138
  1094  060E  1C03               	skipc
  1095  060F  2E15               	goto	l1684
  1096                           
  1097                           ;main.c: 101: {
  1098                           ;main.c: 102: hl = 0;
  1099  0610  01B2               	clrf	_hl
  1100                           
  1101                           ;main.c: 103: ++hh;
  1102  0611  3001               	movlw	1
  1103  0612  00C3               	movwf	??_main
  1104  0613  0843               	movf	??_main,w
  1105  0614  07CE               	addwf	_hh,f
  1106  0615                     l1684:	
  1107                           
  1108                           ;main.c: 104: }
  1109                           ;main.c: 106: if(hh >=2 && hl>3)
  1110  0615  084E               	movf	_hh,w
  1111  0616  3A80               	xorlw	128
  1112  0617  3E7E               	addlw	-130
  1113  0618  1C03               	skipc
  1114  0619  2E29               	goto	l1694
  1115  061A  0832               	movf	_hl,w
  1116  061B  3A80               	xorlw	128
  1117  061C  3E7C               	addlw	-132
  1118  061D  1C03               	skipc
  1119  061E  2E29               	goto	l1694
  1120                           
  1121                           ;main.c: 107: {
  1122                           ;main.c: 108: hh = 0;
  1123  061F  01CE               	clrf	_hh
  1124                           
  1125                           ;main.c: 109: hl = 0;
  1126  0620  01B2               	clrf	_hl
  1127                           
  1128                           ;main.c: 110: ++dd;
  1129  0621  3001               	movlw	1
  1130  0622  00C3               	movwf	??_main
  1131  0623  0843               	movf	??_main,w
  1132  0624  07AF               	addwf	_dd,f
  1133                           
  1134                           ;main.c: 111: sl -= 2;
  1135  0625  30FE               	movlw	254
  1136  0626  00C3               	movwf	??_main
  1137  0627  0843               	movf	??_main,w
  1138  0628  07B6               	addwf	_sl,f
  1139  0629                     l1694:	
  1140                           
  1141                           ;main.c: 112: }
  1142                           ;main.c: 114: Setpoint = ADCRead(3);
  1143  0629  3003               	movlw	3
  1144  062A  210F               	fcall	_ADCRead
  1145  062B  1283               	bcf	3,5	;RP0=0, select bank0
  1146  062C  1303               	bcf	3,6	;RP1=0, select bank0
  1147  062D  00C3               	movwf	??_main
  1148  062E  0843               	movf	??_main,w
  1149  062F  00AB               	movwf	_Setpoint
  1150                           
  1151                           ;main.c: 115: MoistureCheck();
  1152  0630  23E0               	fcall	_MoistureCheck
  1153                           
  1154                           ;main.c: 117: if(RA2 == 0)
  1155  0631  1283               	bcf	3,5	;RP0=0, select bank0
  1156  0632  1303               	bcf	3,6	;RP1=0, select bank0
  1157  0633  1905               	btfsc	5,2	;volatile
  1158  0634  2E9D               	goto	l1726
  1159                           
  1160                           ;main.c: 118: {
  1161                           ;main.c: 120: { LCDGotoXY(0,0); LCDWriteInt(c,3);};
  1162  0635  01FC               	clrf	LCDGotoXY@y
  1163  0636  3000               	movlw	0
  1164  0637  20FA               	fcall	_LCDGotoXY
  1165  0638  1283               	bcf	3,5	;RP0=0, select bank0
  1166  0639  1303               	bcf	3,6	;RP1=0, select bank0
  1167  063A  082E               	movf	_c,w
  1168  063B  00C3               	movwf	??_main
  1169  063C  01C4               	clrf	??_main+1
  1170  063D  0843               	movf	??_main,w
  1171  063E  00B7               	movwf	LCDWriteInt@val
  1172  063F  0844               	movf	??_main+1,w
  1173  0640  00B8               	movwf	LCDWriteInt@val+1
  1174  0641  3003               	movlw	3
  1175  0642  00C5               	movwf	??_main+2
  1176  0643  0845               	movf	??_main+2,w
  1177  0644  00B9               	movwf	LCDWriteInt@field_length
  1178  0645  2346               	fcall	_LCDWriteInt
  1179                           
  1180                           ;main.c: 121: { LCDGotoXY(3,0); LCDWriteString(" ");};
  1181  0646  01FC               	clrf	LCDGotoXY@y
  1182  0647  3003               	movlw	3
  1183  0648  20FA               	fcall	_LCDGotoXY
  1184  0649  300D               	movlw	(low (((STR_4+12)-__stringbase)| (0+32768)))& (0+255)
  1185  064A  2195               	fcall	_LCDWriteString
  1186                           
  1187                           ;main.c: 122: { LCDGotoXY(4,0); LCDWriteInt(e,3);};
  1188  064B  01FC               	clrf	LCDGotoXY@y
  1189  064C  3004               	movlw	4
  1190  064D  20FA               	fcall	_LCDGotoXY
  1191  064E  1283               	bcf	3,5	;RP0=0, select bank0
  1192  064F  1303               	bcf	3,6	;RP1=0, select bank0
  1193  0650  0830               	movf	_e,w
  1194  0651  00C3               	movwf	??_main
  1195  0652  01C4               	clrf	??_main+1
  1196  0653  0843               	movf	??_main,w
  1197  0654  00B7               	movwf	LCDWriteInt@val
  1198  0655  0844               	movf	??_main+1,w
  1199  0656  00B8               	movwf	LCDWriteInt@val+1
  1200  0657  3003               	movlw	3
  1201  0658  00C5               	movwf	??_main+2
  1202  0659  0845               	movf	??_main+2,w
  1203  065A  00B9               	movwf	LCDWriteInt@field_length
  1204  065B  2346               	fcall	_LCDWriteInt
  1205                           
  1206                           ;main.c: 123: { LCDGotoXY(7,0); LCDWriteString(" ");};
  1207  065C  01FC               	clrf	LCDGotoXY@y
  1208  065D  3007               	movlw	7
  1209  065E  20FA               	fcall	_LCDGotoXY
  1210  065F  300D               	movlw	(low (((STR_4+12)-__stringbase)| (0+32768)))& (0+255)
  1211  0660  2195               	fcall	_LCDWriteString
  1212                           
  1213                           ;main.c: 124: { LCDGotoXY(8,0); LCDWriteInt(a,3);};
  1214  0661  01FC               	clrf	LCDGotoXY@y
  1215  0662  3008               	movlw	8
  1216  0663  20FA               	fcall	_LCDGotoXY
  1217  0664  1283               	bcf	3,5	;RP0=0, select bank0
  1218  0665  1303               	bcf	3,6	;RP1=0, select bank0
  1219  0666  082D               	movf	_a,w
  1220  0667  00C3               	movwf	??_main
  1221  0668  01C4               	clrf	??_main+1
  1222  0669  0843               	movf	??_main,w
  1223  066A  00B7               	movwf	LCDWriteInt@val
  1224  066B  0844               	movf	??_main+1,w
  1225  066C  00B8               	movwf	LCDWriteInt@val+1
  1226  066D  3003               	movlw	3
  1227  066E  00C5               	movwf	??_main+2
  1228  066F  0845               	movf	??_main+2,w
  1229  0670  00B9               	movwf	LCDWriteInt@field_length
  1230  0671  2346               	fcall	_LCDWriteInt
  1231                           
  1232                           ;main.c: 125: { LCDGotoXY(11,0); LCDWriteString(" ");};
  1233  0672  01FC               	clrf	LCDGotoXY@y
  1234  0673  300B               	movlw	11
  1235  0674  20FA               	fcall	_LCDGotoXY
  1236  0675  300D               	movlw	(low (((STR_4+12)-__stringbase)| (0+32768)))& (0+255)
  1237  0676  2195               	fcall	_LCDWriteString
  1238                           
  1239                           ;main.c: 126: { LCDGotoXY(12,0); LCDWriteInt(num,4);};
  1240  0677  01FC               	clrf	LCDGotoXY@y
  1241  0678  300C               	movlw	12
  1242  0679  20FA               	fcall	_LCDGotoXY
  1243  067A  1283               	bcf	3,5	;RP0=0, select bank0
  1244  067B  1303               	bcf	3,6	;RP1=0, select bank0
  1245  067C  0828               	movf	_num+1,w
  1246  067D  00B8               	movwf	LCDWriteInt@val+1
  1247  067E  0827               	movf	_num,w
  1248  067F  00B7               	movwf	LCDWriteInt@val
  1249  0680  3004               	movlw	4
  1250  0681  00C3               	movwf	??_main
  1251  0682  0843               	movf	??_main,w
  1252  0683  00B9               	movwf	LCDWriteInt@field_length
  1253  0684  2346               	fcall	_LCDWriteInt
  1254                           
  1255                           ;main.c: 129: { LCDGotoXY(0,1); LCDWriteString("  SETPOINT:  ");};
  1256  0685  01FC               	clrf	LCDGotoXY@y
  1257  0686  0AFC               	incf	LCDGotoXY@y,f
  1258  0687  3000               	movlw	0
  1259  0688  20FA               	fcall	_LCDGotoXY
  1260  0689  3001               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1261  068A  2195               	fcall	_LCDWriteString
  1262                           
  1263                           ;main.c: 130: { LCDGotoXY(13,1); LCDWriteInt(Setpoint,3);};
  1264  068B  01FC               	clrf	LCDGotoXY@y
  1265  068C  0AFC               	incf	LCDGotoXY@y,f
  1266  068D  300D               	movlw	13
  1267  068E  20FA               	fcall	_LCDGotoXY
  1268  068F  1283               	bcf	3,5	;RP0=0, select bank0
  1269  0690  1303               	bcf	3,6	;RP1=0, select bank0
  1270  0691  082B               	movf	_Setpoint,w
  1271  0692  00C3               	movwf	??_main
  1272  0693  01C4               	clrf	??_main+1
  1273  0694  0843               	movf	??_main,w
  1274  0695  00B7               	movwf	LCDWriteInt@val
  1275  0696  0844               	movf	??_main+1,w
  1276  0697  00B8               	movwf	LCDWriteInt@val+1
  1277  0698  3003               	movlw	3
  1278  0699  00C5               	movwf	??_main+2
  1279  069A  0845               	movf	??_main+2,w
  1280  069B  00B9               	movwf	LCDWriteInt@field_length
  1281  069C  2346               	fcall	_LCDWriteInt
  1282  069D                     l1726:	
  1283                           
  1284                           ;main.c: 131: }
  1285                           ;main.c: 133: if(RA2 == 1)
  1286  069D  1283               	bcf	3,5	;RP0=0, select bank0
  1287  069E  1303               	bcf	3,6	;RP1=0, select bank0
  1288  069F  1D05               	btfss	5,2	;volatile
  1289  06A0  2D96               	goto	l1628
  1290                           
  1291                           ;main.c: 134: {
  1292                           ;main.c: 135: if(Watered == 1 && mh *10 + ml <=46)
  1293  06A1  032C               	decf	_Watered,w
  1294  06A2  1D03               	btfss	3,2
  1295  06A3  2ECB               	goto	l1734
  1296  06A4  0833               	movf	_mh,w
  1297  06A5  00F0               	movwf	___wmul@multiplier
  1298  06A6  01F1               	clrf	___wmul@multiplier+1
  1299  06A7  1BF0               	btfsc	___wmul@multiplier,7
  1300  06A8  03F1               	decf	___wmul@multiplier+1,f
  1301  06A9  300A               	movlw	10
  1302  06AA  00F2               	movwf	___wmul@multiplicand
  1303  06AB  3000               	movlw	0
  1304  06AC  00F3               	movwf	___wmul@multiplicand+1
  1305  06AD  214C               	fcall	___wmul
  1306  06AE  1283               	bcf	3,5	;RP0=0, select bank0
  1307  06AF  1303               	bcf	3,6	;RP1=0, select bank0
  1308  06B0  0834               	movf	_ml,w
  1309  06B1  0770               	addwf	?___wmul,w
  1310  06B2  00C3               	movwf	??_main
  1311  06B3  3000               	movlw	0
  1312  06B4  1BB4               	btfsc	_ml,7
  1313  06B5  30FF               	movlw	255
  1314  06B6  1803               	skipnc
  1315  06B7  3E01               	addlw	1
  1316  06B8  0771               	addwf	?___wmul+1,w
  1317  06B9  00C4               	movwf	??_main+1
  1318  06BA  0844               	movf	??_main+1,w
  1319  06BB  3A80               	xorlw	128
  1320  06BC  00FF               	movwf	127
  1321  06BD  3080               	movlw	128
  1322  06BE  027F               	subwf	127,w
  1323  06BF  1D03               	skipz
  1324  06C0  2EC3               	goto	u1565
  1325  06C1  302F               	movlw	47
  1326  06C2  0243               	subwf	??_main,w
  1327  06C3                     u1565:	
  1328  06C3  1803               	skipnc
  1329  06C4  2ECB               	goto	l1734
  1330                           
  1331                           ;main.c: 136: {
  1332                           ;main.c: 137: { LCDGotoXY(0,1); LCDWriteString("Watering ");};
  1333  06C5  01FC               	clrf	LCDGotoXY@y
  1334  06C6  0AFC               	incf	LCDGotoXY@y,f
  1335  06C7  3000               	movlw	0
  1336  06C8  20FA               	fcall	_LCDGotoXY
  1337  06C9  3023               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1338  06CA  2195               	fcall	_LCDWriteString
  1339  06CB                     l1734:	
  1340                           
  1341                           ;main.c: 138: }
  1342                           ;main.c: 140: if(Watered == 1 && mh *10 + ml >=46)
  1343  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  1344  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  1345  06CD  032C               	decf	_Watered,w
  1346  06CE  1D03               	btfss	3,2
  1347  06CF  2EF7               	goto	l1740
  1348  06D0  0833               	movf	_mh,w
  1349  06D1  00F0               	movwf	___wmul@multiplier
  1350  06D2  01F1               	clrf	___wmul@multiplier+1
  1351  06D3  1BF0               	btfsc	___wmul@multiplier,7
  1352  06D4  03F1               	decf	___wmul@multiplier+1,f
  1353  06D5  300A               	movlw	10
  1354  06D6  00F2               	movwf	___wmul@multiplicand
  1355  06D7  3000               	movlw	0
  1356  06D8  00F3               	movwf	___wmul@multiplicand+1
  1357  06D9  214C               	fcall	___wmul
  1358  06DA  1283               	bcf	3,5	;RP0=0, select bank0
  1359  06DB  1303               	bcf	3,6	;RP1=0, select bank0
  1360  06DC  0834               	movf	_ml,w
  1361  06DD  0770               	addwf	?___wmul,w
  1362  06DE  00C3               	movwf	??_main
  1363  06DF  3000               	movlw	0
  1364  06E0  1BB4               	btfsc	_ml,7
  1365  06E1  30FF               	movlw	255
  1366  06E2  1803               	skipnc
  1367  06E3  3E01               	addlw	1
  1368  06E4  0771               	addwf	?___wmul+1,w
  1369  06E5  00C4               	movwf	??_main+1
  1370  06E6  0844               	movf	??_main+1,w
  1371  06E7  3A80               	xorlw	128
  1372  06E8  00FF               	movwf	127
  1373  06E9  3080               	movlw	128
  1374  06EA  027F               	subwf	127,w
  1375  06EB  1D03               	skipz
  1376  06EC  2EEF               	goto	u1585
  1377  06ED  302E               	movlw	46
  1378  06EE  0243               	subwf	??_main,w
  1379  06EF                     u1585:	
  1380  06EF  1C03               	skipc
  1381  06F0  2EF7               	goto	l1740
  1382                           
  1383                           ;main.c: 141: {
  1384                           ;main.c: 142: { LCDGotoXY(0,1); LCDWriteString("Watered  ");};
  1385  06F1  01FC               	clrf	LCDGotoXY@y
  1386  06F2  0AFC               	incf	LCDGotoXY@y,f
  1387  06F3  3000               	movlw	0
  1388  06F4  20FA               	fcall	_LCDGotoXY
  1389  06F5  300F               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1390  06F6  2195               	fcall	_LCDWriteString
  1391  06F7                     l1740:	
  1392                           
  1393                           ;main.c: 143: }
  1394                           ;main.c: 145: if(Watered == 0 && mh * 10 + ml <= 45)
  1395  06F7  1283               	bcf	3,5	;RP0=0, select bank0
  1396  06F8  1303               	bcf	3,6	;RP1=0, select bank0
  1397  06F9  082C               	movf	_Watered,w
  1398  06FA  1D03               	btfss	3,2
  1399  06FB  2F23               	goto	l1746
  1400  06FC  0833               	movf	_mh,w
  1401  06FD  00F0               	movwf	___wmul@multiplier
  1402  06FE  01F1               	clrf	___wmul@multiplier+1
  1403  06FF  1BF0               	btfsc	___wmul@multiplier,7
  1404  0700  03F1               	decf	___wmul@multiplier+1,f
  1405  0701  300A               	movlw	10
  1406  0702  00F2               	movwf	___wmul@multiplicand
  1407  0703  3000               	movlw	0
  1408  0704  00F3               	movwf	___wmul@multiplicand+1
  1409  0705  214C               	fcall	___wmul
  1410  0706  1283               	bcf	3,5	;RP0=0, select bank0
  1411  0707  1303               	bcf	3,6	;RP1=0, select bank0
  1412  0708  0834               	movf	_ml,w
  1413  0709  0770               	addwf	?___wmul,w
  1414  070A  00C3               	movwf	??_main
  1415  070B  3000               	movlw	0
  1416  070C  1BB4               	btfsc	_ml,7
  1417  070D  30FF               	movlw	255
  1418  070E  1803               	skipnc
  1419  070F  3E01               	addlw	1
  1420  0710  0771               	addwf	?___wmul+1,w
  1421  0711  00C4               	movwf	??_main+1
  1422  0712  0844               	movf	??_main+1,w
  1423  0713  3A80               	xorlw	128
  1424  0714  00FF               	movwf	127
  1425  0715  3080               	movlw	128
  1426  0716  027F               	subwf	127,w
  1427  0717  1D03               	skipz
  1428  0718  2F1B               	goto	u1605
  1429  0719  302E               	movlw	46
  1430  071A  0243               	subwf	??_main,w
  1431  071B                     u1605:	
  1432  071B  1803               	skipnc
  1433  071C  2F23               	goto	l1746
  1434                           
  1435                           ;main.c: 146: {
  1436                           ;main.c: 147: { LCDGotoXY(0,1); LCDWriteString("Waiting  ");};
  1437  071D  01FC               	clrf	LCDGotoXY@y
  1438  071E  0AFC               	incf	LCDGotoXY@y,f
  1439  071F  3000               	movlw	0
  1440  0720  20FA               	fcall	_LCDGotoXY
  1441  0721  3019               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1442  0722  2195               	fcall	_LCDWriteString
  1443  0723                     l1746:	
  1444                           
  1445                           ;main.c: 148: }
  1446                           ;main.c: 150: if(Watered == 0 && mh * 10 + ml >= 45)
  1447  0723  1283               	bcf	3,5	;RP0=0, select bank0
  1448  0724  1303               	bcf	3,6	;RP1=0, select bank0
  1449  0725  082C               	movf	_Watered,w
  1450  0726  1D03               	btfss	3,2
  1451  0727  2F4F               	goto	l164
  1452  0728  0833               	movf	_mh,w
  1453  0729  00F0               	movwf	___wmul@multiplier
  1454  072A  01F1               	clrf	___wmul@multiplier+1
  1455  072B  1BF0               	btfsc	___wmul@multiplier,7
  1456  072C  03F1               	decf	___wmul@multiplier+1,f
  1457  072D  300A               	movlw	10
  1458  072E  00F2               	movwf	___wmul@multiplicand
  1459  072F  3000               	movlw	0
  1460  0730  00F3               	movwf	___wmul@multiplicand+1
  1461  0731  214C               	fcall	___wmul
  1462  0732  1283               	bcf	3,5	;RP0=0, select bank0
  1463  0733  1303               	bcf	3,6	;RP1=0, select bank0
  1464  0734  0834               	movf	_ml,w
  1465  0735  0770               	addwf	?___wmul,w
  1466  0736  00C3               	movwf	??_main
  1467  0737  3000               	movlw	0
  1468  0738  1BB4               	btfsc	_ml,7
  1469  0739  30FF               	movlw	255
  1470  073A  1803               	skipnc
  1471  073B  3E01               	addlw	1
  1472  073C  0771               	addwf	?___wmul+1,w
  1473  073D  00C4               	movwf	??_main+1
  1474  073E  0844               	movf	??_main+1,w
  1475  073F  3A80               	xorlw	128
  1476  0740  00FF               	movwf	127
  1477  0741  3080               	movlw	128
  1478  0742  027F               	subwf	127,w
  1479  0743  1D03               	skipz
  1480  0744  2F47               	goto	u1625
  1481  0745  302D               	movlw	45
  1482  0746  0243               	subwf	??_main,w
  1483  0747                     u1625:	
  1484  0747  1C03               	skipc
  1485  0748  2F4F               	goto	l164
  1486                           
  1487                           ;main.c: 151: {
  1488                           ;main.c: 152: { LCDGotoXY(0,1); LCDWriteString("No Water ");};
  1489  0749  01FC               	clrf	LCDGotoXY@y
  1490  074A  0AFC               	incf	LCDGotoXY@y,f
  1491  074B  3000               	movlw	0
  1492  074C  20FA               	fcall	_LCDGotoXY
  1493  074D  302D               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1494  074E  2195               	fcall	_LCDWriteString
  1495  074F                     l164:	
  1496                           
  1497                           ;main.c: 153: }
  1498                           ;main.c: 155: { LCDGotoXY(9,1); LCDWriteInt(num,3);};
  1499  074F  01FC               	clrf	LCDGotoXY@y
  1500  0750  0AFC               	incf	LCDGotoXY@y,f
  1501  0751  3009               	movlw	9
  1502  0752  20FA               	fcall	_LCDGotoXY
  1503  0753  1283               	bcf	3,5	;RP0=0, select bank0
  1504  0754  1303               	bcf	3,6	;RP1=0, select bank0
  1505  0755  0828               	movf	_num+1,w
  1506  0756  00B8               	movwf	LCDWriteInt@val+1
  1507  0757  0827               	movf	_num,w
  1508  0758  00B7               	movwf	LCDWriteInt@val
  1509  0759  3003               	movlw	3
  1510  075A  00C3               	movwf	??_main
  1511  075B  0843               	movf	??_main,w
  1512  075C  00B9               	movwf	LCDWriteInt@field_length
  1513  075D  2346               	fcall	_LCDWriteInt
  1514                           
  1515                           ;main.c: 156: { LCDGotoXY(12,1); LCDWriteString("/");};
  1516  075E  01FC               	clrf	LCDGotoXY@y
  1517  075F  0AFC               	incf	LCDGotoXY@y,f
  1518  0760  300C               	movlw	12
  1519  0761  20FA               	fcall	_LCDGotoXY
  1520  0762  303D               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1521  0763  2195               	fcall	_LCDWriteString
  1522                           
  1523                           ;main.c: 157: { LCDGotoXY(13,1); LCDWriteInt(ofnum,3);};
  1524  0764  01FC               	clrf	LCDGotoXY@y
  1525  0765  0AFC               	incf	LCDGotoXY@y,f
  1526  0766  300D               	movlw	13
  1527  0767  20FA               	fcall	_LCDGotoXY
  1528  0768  1283               	bcf	3,5	;RP0=0, select bank0
  1529  0769  1303               	bcf	3,6	;RP1=0, select bank0
  1530  076A  082A               	movf	_ofnum+1,w
  1531  076B  00B8               	movwf	LCDWriteInt@val+1
  1532  076C  0829               	movf	_ofnum,w
  1533  076D  00B7               	movwf	LCDWriteInt@val
  1534  076E  3003               	movlw	3
  1535  076F  00C3               	movwf	??_main
  1536  0770  0843               	movf	??_main,w
  1537  0771  00B9               	movwf	LCDWriteInt@field_length
  1538  0772  2346               	fcall	_LCDWriteInt
  1539                           
  1540                           ;main.c: 159: { LCDGotoXY(0,0); LCDWriteString("TIME ");};
  1541  0773  01FC               	clrf	LCDGotoXY@y
  1542  0774  3000               	movlw	0
  1543  0775  20FA               	fcall	_LCDGotoXY
  1544  0776  3037               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1545  0777  2195               	fcall	_LCDWriteString
  1546                           
  1547                           ;main.c: 160: { LCDGotoXY(5,0); LCDWriteInt(dd,2);};
  1548  0778  01FC               	clrf	LCDGotoXY@y
  1549  0779  3005               	movlw	5
  1550  077A  20FA               	fcall	_LCDGotoXY
  1551  077B  1283               	bcf	3,5	;RP0=0, select bank0
  1552  077C  1303               	bcf	3,6	;RP1=0, select bank0
  1553  077D  082F               	movf	_dd,w
  1554  077E  00B7               	movwf	LCDWriteInt@val
  1555  077F  01B8               	clrf	LCDWriteInt@val+1
  1556  0780  1BB7               	btfsc	LCDWriteInt@val,7
  1557  0781  03B8               	decf	LCDWriteInt@val+1,f
  1558  0782  3002               	movlw	2
  1559  0783  00C3               	movwf	??_main
  1560  0784  0843               	movf	??_main,w
  1561  0785  00B9               	movwf	LCDWriteInt@field_length
  1562  0786  2346               	fcall	_LCDWriteInt
  1563                           
  1564                           ;main.c: 161: { LCDGotoXY(7,0); LCDWriteString(":");};
  1565  0787  01FC               	clrf	LCDGotoXY@y
  1566  0788  3007               	movlw	7
  1567  0789  20FA               	fcall	_LCDGotoXY
  1568  078A  303F               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  1569  078B  2195               	fcall	_LCDWriteString
  1570                           
  1571                           ;main.c: 162: { LCDGotoXY(8,0); LCDWriteInt(hh,1);};
  1572  078C  01FC               	clrf	LCDGotoXY@y
  1573  078D  3008               	movlw	8
  1574  078E  20FA               	fcall	_LCDGotoXY
  1575  078F  1283               	bcf	3,5	;RP0=0, select bank0
  1576  0790  1303               	bcf	3,6	;RP1=0, select bank0
  1577  0791  084E               	movf	_hh,w
  1578  0792  00B7               	movwf	LCDWriteInt@val
  1579  0793  01B8               	clrf	LCDWriteInt@val+1
  1580  0794  1BB7               	btfsc	LCDWriteInt@val,7
  1581  0795  03B8               	decf	LCDWriteInt@val+1,f
  1582  0796  01B9               	clrf	LCDWriteInt@field_length
  1583  0797  0AB9               	incf	LCDWriteInt@field_length,f
  1584  0798  2346               	fcall	_LCDWriteInt
  1585                           
  1586                           ;main.c: 163: { LCDGotoXY(9,0); LCDWriteInt(hl,1);};
  1587  0799  01FC               	clrf	LCDGotoXY@y
  1588  079A  3009               	movlw	9
  1589  079B  20FA               	fcall	_LCDGotoXY
  1590  079C  1283               	bcf	3,5	;RP0=0, select bank0
  1591  079D  1303               	bcf	3,6	;RP1=0, select bank0
  1592  079E  0832               	movf	_hl,w
  1593  079F  00B7               	movwf	LCDWriteInt@val
  1594  07A0  01B8               	clrf	LCDWriteInt@val+1
  1595  07A1  1BB7               	btfsc	LCDWriteInt@val,7
  1596  07A2  03B8               	decf	LCDWriteInt@val+1,f
  1597  07A3  01B9               	clrf	LCDWriteInt@field_length
  1598  07A4  0AB9               	incf	LCDWriteInt@field_length,f
  1599  07A5  2346               	fcall	_LCDWriteInt
  1600                           
  1601                           ;main.c: 164: { LCDGotoXY(10,0); LCDWriteString(":");};
  1602  07A6  01FC               	clrf	LCDGotoXY@y
  1603  07A7  300A               	movlw	10
  1604  07A8  20FA               	fcall	_LCDGotoXY
  1605  07A9  303F               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  1606  07AA  2195               	fcall	_LCDWriteString
  1607                           
  1608                           ;main.c: 165: { LCDGotoXY(11,0); LCDWriteInt(mh,1);};
  1609  07AB  01FC               	clrf	LCDGotoXY@y
  1610  07AC  300B               	movlw	11
  1611  07AD  20FA               	fcall	_LCDGotoXY
  1612  07AE  1283               	bcf	3,5	;RP0=0, select bank0
  1613  07AF  1303               	bcf	3,6	;RP1=0, select bank0
  1614  07B0  0833               	movf	_mh,w
  1615  07B1  00B7               	movwf	LCDWriteInt@val
  1616  07B2  01B8               	clrf	LCDWriteInt@val+1
  1617  07B3  1BB7               	btfsc	LCDWriteInt@val,7
  1618  07B4  03B8               	decf	LCDWriteInt@val+1,f
  1619  07B5  01B9               	clrf	LCDWriteInt@field_length
  1620  07B6  0AB9               	incf	LCDWriteInt@field_length,f
  1621  07B7  2346               	fcall	_LCDWriteInt
  1622                           
  1623                           ;main.c: 166: { LCDGotoXY(12,0); LCDWriteInt(ml,1);};
  1624  07B8  01FC               	clrf	LCDGotoXY@y
  1625  07B9  300C               	movlw	12
  1626  07BA  20FA               	fcall	_LCDGotoXY
  1627  07BB  1283               	bcf	3,5	;RP0=0, select bank0
  1628  07BC  1303               	bcf	3,6	;RP1=0, select bank0
  1629  07BD  0834               	movf	_ml,w
  1630  07BE  00B7               	movwf	LCDWriteInt@val
  1631  07BF  01B8               	clrf	LCDWriteInt@val+1
  1632  07C0  1BB7               	btfsc	LCDWriteInt@val,7
  1633  07C1  03B8               	decf	LCDWriteInt@val+1,f
  1634  07C2  01B9               	clrf	LCDWriteInt@field_length
  1635  07C3  0AB9               	incf	LCDWriteInt@field_length,f
  1636  07C4  2346               	fcall	_LCDWriteInt
  1637                           
  1638                           ;main.c: 167: { LCDGotoXY(13,0); LCDWriteString(":");};
  1639  07C5  01FC               	clrf	LCDGotoXY@y
  1640  07C6  300D               	movlw	13
  1641  07C7  20FA               	fcall	_LCDGotoXY
  1642  07C8  303F               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  1643  07C9  2195               	fcall	_LCDWriteString
  1644                           
  1645                           ;main.c: 168: { LCDGotoXY(14,0); LCDWriteInt(sh,1);};
  1646  07CA  01FC               	clrf	LCDGotoXY@y
  1647  07CB  300E               	movlw	14
  1648  07CC  20FA               	fcall	_LCDGotoXY
  1649  07CD  1283               	bcf	3,5	;RP0=0, select bank0
  1650  07CE  1303               	bcf	3,6	;RP1=0, select bank0
  1651  07CF  0835               	movf	_sh,w
  1652  07D0  00B7               	movwf	LCDWriteInt@val
  1653  07D1  01B8               	clrf	LCDWriteInt@val+1
  1654  07D2  1BB7               	btfsc	LCDWriteInt@val,7
  1655  07D3  03B8               	decf	LCDWriteInt@val+1,f
  1656  07D4  01B9               	clrf	LCDWriteInt@field_length
  1657  07D5  0AB9               	incf	LCDWriteInt@field_length,f
  1658  07D6  2346               	fcall	_LCDWriteInt
  1659                           
  1660                           ;main.c: 169: { LCDGotoXY(15,0); LCDWriteInt(sl,1);};
  1661  07D7  01FC               	clrf	LCDGotoXY@y
  1662  07D8  300F               	movlw	15
  1663  07D9  20FA               	fcall	_LCDGotoXY
  1664  07DA  1283               	bcf	3,5	;RP0=0, select bank0
  1665  07DB  1303               	bcf	3,6	;RP1=0, select bank0
  1666  07DC  0836               	movf	_sl,w
  1667  07DD  00B7               	movwf	LCDWriteInt@val
  1668  07DE  01B8               	clrf	LCDWriteInt@val+1
  1669  07DF  1BB7               	btfsc	LCDWriteInt@val,7
  1670  07E0  03B8               	decf	LCDWriteInt@val+1,f
  1671  07E1  01B9               	clrf	LCDWriteInt@field_length
  1672  07E2  0AB9               	incf	LCDWriteInt@field_length,f
  1673  07E3  2346               	fcall	_LCDWriteInt
  1674  07E4  2D96               	goto	l1628
  1675  07E5                     __end_of_main:	
  1676                           
  1677                           	psect	text1
  1678  03E0                     __ptext1:	
  1679 ;; *************** function _MoistureCheck *****************
  1680 ;; Defined at:
  1681 ;;		line 180 in file "main.c"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;		None
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;		None
  1686 ;; Return value:  Size  Location     Type
  1687 ;;		None               void
  1688 ;; Registers used:
  1689 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1690 ;; Tracked objects:
  1691 ;;		On entry : 0/0
  1692 ;;		On exit  : 0/0
  1693 ;;		Unchanged: 0/0
  1694 ;; Data sizes:     COMMON   BANK0   BANK1
  1695 ;;      Params:         0       0       0
  1696 ;;      Locals:         0       0       0
  1697 ;;      Temps:          3       0       0
  1698 ;;      Totals:         3       0       0
  1699 ;;Total ram usage:        3 bytes
  1700 ;; Hardware stack levels used:    1
  1701 ;; Hardware stack levels required when called:    1
  1702 ;; This function calls:
  1703 ;;		_ADCInit
  1704 ;;		_ADCRead
  1705 ;;		_Median
  1706 ;;		___wmul
  1707 ;; This function is called by:
  1708 ;;		_main
  1709 ;; This function uses a non-reentrant model
  1710 ;;
  1711                           
  1712                           
  1713                           ;psect for function _MoistureCheck
  1714  03E0                     _MoistureCheck:	
  1715                           
  1716                           ;main.c: 185: ADCInit();
  1717                           
  1718                           ;incstack = 0
  1719                           ; Regs used in _MoistureCheck: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1720  03E0  20CA               	fcall	_ADCInit
  1721                           
  1722                           ;main.c: 190: if(mh * 10 + ml == 40 && sh * 10 + sl >= 10 && sh * 10 +sl < 26)
  1723  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  1724  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  1725  03E3  0833               	movf	_mh,w
  1726  03E4  00F0               	movwf	___wmul@multiplier
  1727  03E5  01F1               	clrf	___wmul@multiplier+1
  1728  03E6  1BF0               	btfsc	___wmul@multiplier,7
  1729  03E7  03F1               	decf	___wmul@multiplier+1,f
  1730  03E8  300A               	movlw	10
  1731  03E9  00F2               	movwf	___wmul@multiplicand
  1732  03EA  3000               	movlw	0
  1733  03EB  00F3               	movwf	___wmul@multiplicand+1
  1734  03EC  214C               	fcall	___wmul
  1735  03ED  1283               	bcf	3,5	;RP0=0, select bank0
  1736  03EE  1303               	bcf	3,6	;RP1=0, select bank0
  1737  03EF  0834               	movf	_ml,w
  1738  03F0  0770               	addwf	?___wmul,w
  1739  03F1  00F7               	movwf	??_MoistureCheck
  1740  03F2  3000               	movlw	0
  1741  03F3  1BB4               	btfsc	_ml,7
  1742  03F4  30FF               	movlw	255
  1743  03F5  1803               	skipnc
  1744  03F6  3E01               	addlw	1
  1745  03F7  0771               	addwf	?___wmul+1,w
  1746  03F8  00F8               	movwf	??_MoistureCheck+1
  1747  03F9  3028               	movlw	40
  1748  03FA  0677               	xorwf	??_MoistureCheck,w
  1749  03FB  0478               	iorwf	??_MoistureCheck+1,w
  1750  03FC  1D03               	btfss	3,2
  1751  03FD  2C6C               	goto	l1594
  1752  03FE  0835               	movf	_sh,w
  1753  03FF  00F0               	movwf	___wmul@multiplier
  1754  0400  01F1               	clrf	___wmul@multiplier+1
  1755  0401  1BF0               	btfsc	___wmul@multiplier,7
  1756  0402  03F1               	decf	___wmul@multiplier+1,f
  1757  0403  300A               	movlw	10
  1758  0404  00F2               	movwf	___wmul@multiplicand
  1759  0405  3000               	movlw	0
  1760  0406  00F3               	movwf	___wmul@multiplicand+1
  1761  0407  214C               	fcall	___wmul
  1762  0408  1283               	bcf	3,5	;RP0=0, select bank0
  1763  0409  1303               	bcf	3,6	;RP1=0, select bank0
  1764  040A  0836               	movf	_sl,w
  1765  040B  0770               	addwf	?___wmul,w
  1766  040C  00F7               	movwf	??_MoistureCheck
  1767  040D  3000               	movlw	0
  1768  040E  1BB6               	btfsc	_sl,7
  1769  040F  30FF               	movlw	255
  1770  0410  1803               	skipnc
  1771  0411  3E01               	addlw	1
  1772  0412  0771               	addwf	?___wmul+1,w
  1773  0413  00F8               	movwf	??_MoistureCheck+1
  1774  0414  0878               	movf	??_MoistureCheck+1,w
  1775  0415  3A80               	xorlw	128
  1776  0416  00FF               	movwf	127
  1777  0417  3080               	movlw	128
  1778  0418  027F               	subwf	127,w
  1779  0419  1D03               	skipz
  1780  041A  2C1D               	goto	u1285
  1781  041B  300A               	movlw	10
  1782  041C  0277               	subwf	??_MoistureCheck,w
  1783  041D                     u1285:	
  1784  041D  1C03               	skipc
  1785  041E  2C6C               	goto	l1594
  1786  041F  1283               	bcf	3,5	;RP0=0, select bank0
  1787  0420  1303               	bcf	3,6	;RP1=0, select bank0
  1788  0421  0835               	movf	_sh,w
  1789  0422  00F0               	movwf	___wmul@multiplier
  1790  0423  01F1               	clrf	___wmul@multiplier+1
  1791  0424  1BF0               	btfsc	___wmul@multiplier,7
  1792  0425  03F1               	decf	___wmul@multiplier+1,f
  1793  0426  300A               	movlw	10
  1794  0427  00F2               	movwf	___wmul@multiplicand
  1795  0428  3000               	movlw	0
  1796  0429  00F3               	movwf	___wmul@multiplicand+1
  1797  042A  214C               	fcall	___wmul
  1798  042B  1283               	bcf	3,5	;RP0=0, select bank0
  1799  042C  1303               	bcf	3,6	;RP1=0, select bank0
  1800  042D  0836               	movf	_sl,w
  1801  042E  0770               	addwf	?___wmul,w
  1802  042F  00F7               	movwf	??_MoistureCheck
  1803  0430  3000               	movlw	0
  1804  0431  1BB6               	btfsc	_sl,7
  1805  0432  30FF               	movlw	255
  1806  0433  1803               	skipnc
  1807  0434  3E01               	addlw	1
  1808  0435  0771               	addwf	?___wmul+1,w
  1809  0436  00F8               	movwf	??_MoistureCheck+1
  1810  0437  0878               	movf	??_MoistureCheck+1,w
  1811  0438  3A80               	xorlw	128
  1812  0439  00FF               	movwf	127
  1813  043A  3080               	movlw	128
  1814  043B  027F               	subwf	127,w
  1815  043C  1D03               	skipz
  1816  043D  2C40               	goto	u1295
  1817  043E  301A               	movlw	26
  1818  043F  0277               	subwf	??_MoistureCheck,w
  1819  0440                     u1295:	
  1820  0440  1803               	skipnc
  1821  0441  2C6C               	goto	l1594
  1822                           
  1823                           ;main.c: 191: {
  1824                           ;main.c: 192: RA5 = 1;
  1825  0442  1283               	bcf	3,5	;RP0=0, select bank0
  1826  0443  1303               	bcf	3,6	;RP1=0, select bank0
  1827  0444  1685               	bsf	5,5	;volatile
  1828                           
  1829                           ;main.c: 193: RB7 = 0;
  1830  0445  1386               	bcf	6,7	;volatile
  1831                           
  1832                           ;main.c: 195: if(t >= 3)
  1833  0446  3003               	movlw	3
  1834  0447  024F               	subwf	_t,w
  1835  0448  1C03               	skipc
  1836  0449  2C52               	goto	l1584
  1837                           
  1838                           ;main.c: 196: {
  1839                           ;main.c: 197: a = ADCRead(9);
  1840  044A  3009               	movlw	9
  1841  044B  210F               	fcall	_ADCRead
  1842  044C  00F7               	movwf	??_MoistureCheck
  1843  044D  0877               	movf	??_MoistureCheck,w
  1844  044E  1283               	bcf	3,5	;RP0=0, select bank0
  1845  044F  1303               	bcf	3,6	;RP1=0, select bank0
  1846  0450  00AD               	movwf	_a
  1847                           
  1848                           ;main.c: 198: t = 0;
  1849  0451  01CF               	clrf	_t
  1850  0452                     l1584:	
  1851                           
  1852                           ;main.c: 199: }
  1853                           ;main.c: 201: if(t == 2)
  1854  0452  3002               	movlw	2
  1855  0453  064F               	xorwf	_t,w
  1856  0454  1D03               	btfss	3,2
  1857  0455  2C5D               	goto	l1588
  1858                           
  1859                           ;main.c: 202: {
  1860                           ;main.c: 203: c = ADCRead(10);
  1861  0456  300A               	movlw	10
  1862  0457  210F               	fcall	_ADCRead
  1863  0458  00F7               	movwf	??_MoistureCheck
  1864  0459  0877               	movf	??_MoistureCheck,w
  1865  045A  1283               	bcf	3,5	;RP0=0, select bank0
  1866  045B  1303               	bcf	3,6	;RP1=0, select bank0
  1867  045C  00AE               	movwf	_c
  1868  045D                     l1588:	
  1869                           
  1870                           ;main.c: 204: }
  1871                           ;main.c: 206: if(t == 1)
  1872  045D  034F               	decf	_t,w
  1873  045E  1D03               	btfss	3,2
  1874  045F  2C67               	goto	l1592
  1875                           
  1876                           ;main.c: 207: {
  1877                           ;main.c: 208: e = ADCRead(11);
  1878  0460  300B               	movlw	11
  1879  0461  210F               	fcall	_ADCRead
  1880  0462  00F7               	movwf	??_MoistureCheck
  1881  0463  0877               	movf	??_MoistureCheck,w
  1882  0464  1283               	bcf	3,5	;RP0=0, select bank0
  1883  0465  1303               	bcf	3,6	;RP1=0, select bank0
  1884  0466  00B0               	movwf	_e
  1885  0467                     l1592:	
  1886                           
  1887                           ;main.c: 209: }
  1888                           ;main.c: 211: ++t;
  1889  0467  3001               	movlw	1
  1890  0468  00F7               	movwf	??_MoistureCheck
  1891  0469  0877               	movf	??_MoistureCheck,w
  1892  046A  07CF               	addwf	_t,f
  1893                           
  1894                           ;main.c: 212: }
  1895  046B  2CDA               	goto	l1606
  1896  046C                     l1594:	
  1897                           
  1898                           ;main.c: 214: else if(mh * 10 + ml == 40 && sh * 10 + sl >= 26 && sh * 10 +sl < 36)
  1899  046C  1283               	bcf	3,5	;RP0=0, select bank0
  1900  046D  1303               	bcf	3,6	;RP1=0, select bank0
  1901  046E  0833               	movf	_mh,w
  1902  046F  00F0               	movwf	___wmul@multiplier
  1903  0470  01F1               	clrf	___wmul@multiplier+1
  1904  0471  1BF0               	btfsc	___wmul@multiplier,7
  1905  0472  03F1               	decf	___wmul@multiplier+1,f
  1906  0473  300A               	movlw	10
  1907  0474  00F2               	movwf	___wmul@multiplicand
  1908  0475  3000               	movlw	0
  1909  0476  00F3               	movwf	___wmul@multiplicand+1
  1910  0477  214C               	fcall	___wmul
  1911  0478  1283               	bcf	3,5	;RP0=0, select bank0
  1912  0479  1303               	bcf	3,6	;RP1=0, select bank0
  1913  047A  0834               	movf	_ml,w
  1914  047B  0770               	addwf	?___wmul,w
  1915  047C  00F7               	movwf	??_MoistureCheck
  1916  047D  3000               	movlw	0
  1917  047E  1BB4               	btfsc	_ml,7
  1918  047F  30FF               	movlw	255
  1919  0480  1803               	skipnc
  1920  0481  3E01               	addlw	1
  1921  0482  0771               	addwf	?___wmul+1,w
  1922  0483  00F8               	movwf	??_MoistureCheck+1
  1923  0484  3028               	movlw	40
  1924  0485  0677               	xorwf	??_MoistureCheck,w
  1925  0486  0478               	iorwf	??_MoistureCheck+1,w
  1926  0487  1D03               	btfss	3,2
  1927  0488  2CD6               	goto	l175
  1928  0489  0835               	movf	_sh,w
  1929  048A  00F0               	movwf	___wmul@multiplier
  1930  048B  01F1               	clrf	___wmul@multiplier+1
  1931  048C  1BF0               	btfsc	___wmul@multiplier,7
  1932  048D  03F1               	decf	___wmul@multiplier+1,f
  1933  048E  300A               	movlw	10
  1934  048F  00F2               	movwf	___wmul@multiplicand
  1935  0490  3000               	movlw	0
  1936  0491  00F3               	movwf	___wmul@multiplicand+1
  1937  0492  214C               	fcall	___wmul
  1938  0493  1283               	bcf	3,5	;RP0=0, select bank0
  1939  0494  1303               	bcf	3,6	;RP1=0, select bank0
  1940  0495  0836               	movf	_sl,w
  1941  0496  0770               	addwf	?___wmul,w
  1942  0497  00F7               	movwf	??_MoistureCheck
  1943  0498  3000               	movlw	0
  1944  0499  1BB6               	btfsc	_sl,7
  1945  049A  30FF               	movlw	255
  1946  049B  1803               	skipnc
  1947  049C  3E01               	addlw	1
  1948  049D  0771               	addwf	?___wmul+1,w
  1949  049E  00F8               	movwf	??_MoistureCheck+1
  1950  049F  0878               	movf	??_MoistureCheck+1,w
  1951  04A0  3A80               	xorlw	128
  1952  04A1  00FF               	movwf	127
  1953  04A2  3080               	movlw	128
  1954  04A3  027F               	subwf	127,w
  1955  04A4  1D03               	skipz
  1956  04A5  2CA8               	goto	u1345
  1957  04A6  301A               	movlw	26
  1958  04A7  0277               	subwf	??_MoistureCheck,w
  1959  04A8                     u1345:	
  1960  04A8  1C03               	skipc
  1961  04A9  2CD6               	goto	l175
  1962  04AA  1283               	bcf	3,5	;RP0=0, select bank0
  1963  04AB  1303               	bcf	3,6	;RP1=0, select bank0
  1964  04AC  0835               	movf	_sh,w
  1965  04AD  00F0               	movwf	___wmul@multiplier
  1966  04AE  01F1               	clrf	___wmul@multiplier+1
  1967  04AF  1BF0               	btfsc	___wmul@multiplier,7
  1968  04B0  03F1               	decf	___wmul@multiplier+1,f
  1969  04B1  300A               	movlw	10
  1970  04B2  00F2               	movwf	___wmul@multiplicand
  1971  04B3  3000               	movlw	0
  1972  04B4  00F3               	movwf	___wmul@multiplicand+1
  1973  04B5  214C               	fcall	___wmul
  1974  04B6  1283               	bcf	3,5	;RP0=0, select bank0
  1975  04B7  1303               	bcf	3,6	;RP1=0, select bank0
  1976  04B8  0836               	movf	_sl,w
  1977  04B9  0770               	addwf	?___wmul,w
  1978  04BA  00F7               	movwf	??_MoistureCheck
  1979  04BB  3000               	movlw	0
  1980  04BC  1BB6               	btfsc	_sl,7
  1981  04BD  30FF               	movlw	255
  1982  04BE  1803               	skipnc
  1983  04BF  3E01               	addlw	1
  1984  04C0  0771               	addwf	?___wmul+1,w
  1985  04C1  00F8               	movwf	??_MoistureCheck+1
  1986  04C2  0878               	movf	??_MoistureCheck+1,w
  1987  04C3  3A80               	xorlw	128
  1988  04C4  00FF               	movwf	127
  1989  04C5  3080               	movlw	128
  1990  04C6  027F               	subwf	127,w
  1991  04C7  1D03               	skipz
  1992  04C8  2CCB               	goto	u1355
  1993  04C9  3024               	movlw	36
  1994  04CA  0277               	subwf	??_MoistureCheck,w
  1995  04CB                     u1355:	
  1996  04CB  1803               	skipnc
  1997  04CC  2CD6               	goto	l175
  1998                           
  1999                           ;main.c: 215: {
  2000                           ;main.c: 216: _delay((unsigned long)((200)*(2000000L/4000000.0)));
  2001  04CD  3021               	movlw	33
  2002  04CE  00F7               	movwf	??_MoistureCheck
  2003  04CF                     u1647:	
  2004  04CF  0BF7               	decfsz	??_MoistureCheck,f
  2005  04D0  2CCF               	goto	u1647
  2006                           
  2007                           ;main.c: 217: RA5 = 0;
  2008  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  2009  04D2  1303               	bcf	3,6	;RP1=0, select bank0
  2010  04D3  1285               	bcf	5,5	;volatile
  2011                           
  2012                           ;main.c: 218: RB7 = 1;
  2013  04D4  1786               	bsf	6,7	;volatile
  2014                           
  2015                           ;main.c: 219: }
  2016  04D5  2CDA               	goto	l1606
  2017  04D6                     l175:	
  2018                           
  2019                           ;main.c: 221: else
  2020                           ;main.c: 223: {
  2021                           ;main.c: 224: RA5 = 0;
  2022  04D6  1283               	bcf	3,5	;RP0=0, select bank0
  2023  04D7  1303               	bcf	3,6	;RP1=0, select bank0
  2024  04D8  1285               	bcf	5,5	;volatile
  2025                           
  2026                           ;main.c: 225: RB7 = 0;
  2027  04D9  1386               	bcf	6,7	;volatile
  2028  04DA                     l1606:	
  2029                           
  2030                           ;main.c: 226: }
  2031                           ;main.c: 230: if(mh * 10 + ml >=45 && mh * 10 + ml < 46)
  2032  04DA  0833               	movf	_mh,w
  2033  04DB  00F0               	movwf	___wmul@multiplier
  2034  04DC  01F1               	clrf	___wmul@multiplier+1
  2035  04DD  1BF0               	btfsc	___wmul@multiplier,7
  2036  04DE  03F1               	decf	___wmul@multiplier+1,f
  2037  04DF  300A               	movlw	10
  2038  04E0  00F2               	movwf	___wmul@multiplicand
  2039  04E1  3000               	movlw	0
  2040  04E2  00F3               	movwf	___wmul@multiplicand+1
  2041  04E3  214C               	fcall	___wmul
  2042  04E4  1283               	bcf	3,5	;RP0=0, select bank0
  2043  04E5  1303               	bcf	3,6	;RP1=0, select bank0
  2044  04E6  0834               	movf	_ml,w
  2045  04E7  0770               	addwf	?___wmul,w
  2046  04E8  00F7               	movwf	??_MoistureCheck
  2047  04E9  3000               	movlw	0
  2048  04EA  1BB4               	btfsc	_ml,7
  2049  04EB  30FF               	movlw	255
  2050  04EC  1803               	skipnc
  2051  04ED  3E01               	addlw	1
  2052  04EE  0771               	addwf	?___wmul+1,w
  2053  04EF  00F8               	movwf	??_MoistureCheck+1
  2054  04F0  0878               	movf	??_MoistureCheck+1,w
  2055  04F1  3A80               	xorlw	128
  2056  04F2  00FF               	movwf	127
  2057  04F3  3080               	movlw	128
  2058  04F4  027F               	subwf	127,w
  2059  04F5  1D03               	skipz
  2060  04F6  2CF9               	goto	u1365
  2061  04F7  302D               	movlw	45
  2062  04F8  0277               	subwf	??_MoistureCheck,w
  2063  04F9                     u1365:	
  2064  04F9  1C03               	skipc
  2065  04FA  2D36               	goto	l1616
  2066  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  2067  04FC  1303               	bcf	3,6	;RP1=0, select bank0
  2068  04FD  0833               	movf	_mh,w
  2069  04FE  00F0               	movwf	___wmul@multiplier
  2070  04FF  01F1               	clrf	___wmul@multiplier+1
  2071  0500  1BF0               	btfsc	___wmul@multiplier,7
  2072  0501  03F1               	decf	___wmul@multiplier+1,f
  2073  0502  300A               	movlw	10
  2074  0503  00F2               	movwf	___wmul@multiplicand
  2075  0504  3000               	movlw	0
  2076  0505  00F3               	movwf	___wmul@multiplicand+1
  2077  0506  214C               	fcall	___wmul
  2078  0507  1283               	bcf	3,5	;RP0=0, select bank0
  2079  0508  1303               	bcf	3,6	;RP1=0, select bank0
  2080  0509  0834               	movf	_ml,w
  2081  050A  0770               	addwf	?___wmul,w
  2082  050B  00F7               	movwf	??_MoistureCheck
  2083  050C  3000               	movlw	0
  2084  050D  1BB4               	btfsc	_ml,7
  2085  050E  30FF               	movlw	255
  2086  050F  1803               	skipnc
  2087  0510  3E01               	addlw	1
  2088  0511  0771               	addwf	?___wmul+1,w
  2089  0512  00F8               	movwf	??_MoistureCheck+1
  2090  0513  0878               	movf	??_MoistureCheck+1,w
  2091  0514  3A80               	xorlw	128
  2092  0515  00FF               	movwf	127
  2093  0516  3080               	movlw	128
  2094  0517  027F               	subwf	127,w
  2095  0518  1D03               	skipz
  2096  0519  2D1C               	goto	u1375
  2097  051A  302E               	movlw	46
  2098  051B  0277               	subwf	??_MoistureCheck,w
  2099  051C                     u1375:	
  2100  051C  1803               	skipnc
  2101  051D  2D36               	goto	l1616
  2102                           
  2103                           ;main.c: 231: {
  2104                           ;main.c: 232: g = Median(a, c, e);
  2105  051E  1283               	bcf	3,5	;RP0=0, select bank0
  2106  051F  1303               	bcf	3,6	;RP1=0, select bank0
  2107  0520  082E               	movf	_c,w
  2108  0521  00F7               	movwf	??_MoistureCheck
  2109  0522  0877               	movf	??_MoistureCheck,w
  2110  0523  00F0               	movwf	Median@c
  2111  0524  0830               	movf	_e,w
  2112  0525  00F8               	movwf	??_MoistureCheck+1
  2113  0526  0878               	movf	??_MoistureCheck+1,w
  2114  0527  00F1               	movwf	Median@e
  2115  0528  082D               	movf	_a,w
  2116  0529  212B               	fcall	_Median
  2117  052A  00F9               	movwf	??_MoistureCheck+2
  2118  052B  0879               	movf	??_MoistureCheck+2,w
  2119  052C  1283               	bcf	3,5	;RP0=0, select bank0
  2120  052D  1303               	bcf	3,6	;RP1=0, select bank0
  2121  052E  00B1               	movwf	_g
  2122                           
  2123                           ;main.c: 234: if(g < Setpoint)
  2124  052F  082B               	movf	_Setpoint,w
  2125  0530  0231               	subwf	_g,w
  2126  0531  1803               	skipnc
  2127  0532  2D36               	goto	l1616
  2128                           
  2129                           ;main.c: 235: {
  2130                           ;main.c: 236: RB6 = 0;
  2131  0533  1306               	bcf	6,6	;volatile
  2132                           
  2133                           ;main.c: 237: Watered = 1;
  2134  0534  01AC               	clrf	_Watered
  2135  0535  0AAC               	incf	_Watered,f
  2136  0536                     l1616:	
  2137                           
  2138                           ;main.c: 238: }
  2139                           ;main.c: 239: }
  2140                           ;main.c: 241: if(mh * 10 + ml < 45 || mh * 10 + ml >= 46)
  2141  0536  1283               	bcf	3,5	;RP0=0, select bank0
  2142  0537  1303               	bcf	3,6	;RP1=0, select bank0
  2143  0538  0833               	movf	_mh,w
  2144  0539  00F0               	movwf	___wmul@multiplier
  2145  053A  01F1               	clrf	___wmul@multiplier+1
  2146  053B  1BF0               	btfsc	___wmul@multiplier,7
  2147  053C  03F1               	decf	___wmul@multiplier+1,f
  2148  053D  300A               	movlw	10
  2149  053E  00F2               	movwf	___wmul@multiplicand
  2150  053F  3000               	movlw	0
  2151  0540  00F3               	movwf	___wmul@multiplicand+1
  2152  0541  214C               	fcall	___wmul
  2153  0542  1283               	bcf	3,5	;RP0=0, select bank0
  2154  0543  1303               	bcf	3,6	;RP1=0, select bank0
  2155  0544  0834               	movf	_ml,w
  2156  0545  0770               	addwf	?___wmul,w
  2157  0546  00F7               	movwf	??_MoistureCheck
  2158  0547  3000               	movlw	0
  2159  0548  1BB4               	btfsc	_ml,7
  2160  0549  30FF               	movlw	255
  2161  054A  1803               	skipnc
  2162  054B  3E01               	addlw	1
  2163  054C  0771               	addwf	?___wmul+1,w
  2164  054D  00F8               	movwf	??_MoistureCheck+1
  2165  054E  0878               	movf	??_MoistureCheck+1,w
  2166  054F  3A80               	xorlw	128
  2167  0550  00FF               	movwf	127
  2168  0551  3080               	movlw	128
  2169  0552  027F               	subwf	127,w
  2170  0553  1D03               	skipz
  2171  0554  2D57               	goto	u1395
  2172  0555  302D               	movlw	45
  2173  0556  0277               	subwf	??_MoistureCheck,w
  2174  0557                     u1395:	
  2175  0557  1C03               	skipc
  2176  0558  2D7C               	goto	l181
  2177  0559  1283               	bcf	3,5	;RP0=0, select bank0
  2178  055A  1303               	bcf	3,6	;RP1=0, select bank0
  2179  055B  0833               	movf	_mh,w
  2180  055C  00F0               	movwf	___wmul@multiplier
  2181  055D  01F1               	clrf	___wmul@multiplier+1
  2182  055E  1BF0               	btfsc	___wmul@multiplier,7
  2183  055F  03F1               	decf	___wmul@multiplier+1,f
  2184  0560  300A               	movlw	10
  2185  0561  00F2               	movwf	___wmul@multiplicand
  2186  0562  3000               	movlw	0
  2187  0563  00F3               	movwf	___wmul@multiplicand+1
  2188  0564  214C               	fcall	___wmul
  2189  0565  1283               	bcf	3,5	;RP0=0, select bank0
  2190  0566  1303               	bcf	3,6	;RP1=0, select bank0
  2191  0567  0834               	movf	_ml,w
  2192  0568  0770               	addwf	?___wmul,w
  2193  0569  00F7               	movwf	??_MoistureCheck
  2194  056A  3000               	movlw	0
  2195  056B  1BB4               	btfsc	_ml,7
  2196  056C  30FF               	movlw	255
  2197  056D  1803               	skipnc
  2198  056E  3E01               	addlw	1
  2199  056F  0771               	addwf	?___wmul+1,w
  2200  0570  00F8               	movwf	??_MoistureCheck+1
  2201  0571  0878               	movf	??_MoistureCheck+1,w
  2202  0572  3A80               	xorlw	128
  2203  0573  00FF               	movwf	127
  2204  0574  3080               	movlw	128
  2205  0575  027F               	subwf	127,w
  2206  0576  1D03               	skipz
  2207  0577  2D7A               	goto	u1405
  2208  0578  302E               	movlw	46
  2209  0579  0277               	subwf	??_MoistureCheck,w
  2210  057A                     u1405:	
  2211  057A  1C03               	skipc
  2212  057B  0008               	return
  2213  057C                     l181:	
  2214                           
  2215                           ;main.c: 242: {
  2216                           ;main.c: 243: RB6 = 1;
  2217  057C  1283               	bcf	3,5	;RP0=0, select bank0
  2218  057D  1303               	bcf	3,6	;RP1=0, select bank0
  2219  057E  1706               	bsf	6,6	;volatile
  2220  057F  0008               	return
  2221  0580                     __end_of_MoistureCheck:	
  2222                           
  2223                           	psect	text2
  2224  014C                     __ptext2:	
  2225 ;; *************** function ___wmul *****************
  2226 ;; Defined at:
  2227 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  2228 ;; Parameters:    Size  Location     Type
  2229 ;;  multiplier      2    0[COMMON] unsigned int 
  2230 ;;  multiplicand    2    2[COMMON] unsigned int 
  2231 ;; Auto vars:     Size  Location     Type
  2232 ;;  product         2    4[COMMON] unsigned int 
  2233 ;; Return value:  Size  Location     Type
  2234 ;;                  2    0[COMMON] unsigned int 
  2235 ;; Registers used:
  2236 ;;		wreg, status,2, status,0
  2237 ;; Tracked objects:
  2238 ;;		On entry : 0/0
  2239 ;;		On exit  : 0/0
  2240 ;;		Unchanged: 0/0
  2241 ;; Data sizes:     COMMON   BANK0   BANK1
  2242 ;;      Params:         4       0       0
  2243 ;;      Locals:         2       0       0
  2244 ;;      Temps:          0       0       0
  2245 ;;      Totals:         6       0       0
  2246 ;;Total ram usage:        6 bytes
  2247 ;; Hardware stack levels used:    1
  2248 ;; This function calls:
  2249 ;;		Nothing
  2250 ;; This function is called by:
  2251 ;;		_main
  2252 ;;		_MoistureCheck
  2253 ;; This function uses a non-reentrant model
  2254 ;;
  2255                           
  2256                           
  2257                           ;psect for function ___wmul
  2258  014C                     ___wmul:	
  2259                           
  2260                           ;incstack = 0
  2261                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2262  014C  01F4               	clrf	___wmul@product
  2263  014D  01F5               	clrf	___wmul@product+1
  2264  014E                     l1322:	
  2265  014E  1C70               	btfss	___wmul@multiplier,0
  2266  014F  2956               	goto	l256
  2267  0150  0872               	movf	___wmul@multiplicand,w
  2268  0151  07F4               	addwf	___wmul@product,f
  2269  0152  1803               	skipnc
  2270  0153  0AF5               	incf	___wmul@product+1,f
  2271  0154  0873               	movf	___wmul@multiplicand+1,w
  2272  0155  07F5               	addwf	___wmul@product+1,f
  2273  0156                     l256:	
  2274  0156  3001               	movlw	1
  2275  0157                     u925:	
  2276  0157  1003               	clrc
  2277  0158  0DF2               	rlf	___wmul@multiplicand,f
  2278  0159  0DF3               	rlf	___wmul@multiplicand+1,f
  2279  015A  3EFF               	addlw	-1
  2280  015B  1D03               	skipz
  2281  015C  2957               	goto	u925
  2282  015D  3001               	movlw	1
  2283  015E                     u935:	
  2284  015E  1003               	clrc
  2285  015F  0CF1               	rrf	___wmul@multiplier+1,f
  2286  0160  0CF0               	rrf	___wmul@multiplier,f
  2287  0161  3EFF               	addlw	-1
  2288  0162  1D03               	skipz
  2289  0163  295E               	goto	u935
  2290  0164  0870               	movf	___wmul@multiplier,w
  2291  0165  0471               	iorwf	___wmul@multiplier+1,w
  2292  0166  1D03               	btfss	3,2
  2293  0167  294E               	goto	l1322
  2294  0168  0875               	movf	___wmul@product+1,w
  2295  0169  00F1               	movwf	?___wmul+1
  2296  016A  0874               	movf	___wmul@product,w
  2297  016B  00F0               	movwf	?___wmul
  2298  016C  0008               	return
  2299  016D                     __end_of___wmul:	
  2300                           
  2301                           	psect	text3
  2302  012B                     __ptext3:	
  2303 ;; *************** function _Median *****************
  2304 ;; Defined at:
  2305 ;;		line 39 in file "user.c"
  2306 ;; Parameters:    Size  Location     Type
  2307 ;;  a               1    wreg     unsigned char 
  2308 ;;  c               1    0[COMMON] unsigned char 
  2309 ;;  e               1    1[COMMON] unsigned char 
  2310 ;; Auto vars:     Size  Location     Type
  2311 ;;  a               1    4[COMMON] unsigned char 
  2312 ;;  d               1    6[COMMON] unsigned char 
  2313 ;;  b               1    5[COMMON] unsigned char 
  2314 ;;  f               1    3[COMMON] unsigned char 
  2315 ;; Return value:  Size  Location     Type
  2316 ;;                  1    wreg      unsigned char 
  2317 ;; Registers used:
  2318 ;;		wreg
  2319 ;; Tracked objects:
  2320 ;;		On entry : 0/0
  2321 ;;		On exit  : 0/0
  2322 ;;		Unchanged: 0/0
  2323 ;; Data sizes:     COMMON   BANK0   BANK1
  2324 ;;      Params:         2       0       0
  2325 ;;      Locals:         4       0       0
  2326 ;;      Temps:          1       0       0
  2327 ;;      Totals:         7       0       0
  2328 ;;Total ram usage:        7 bytes
  2329 ;; Hardware stack levels used:    1
  2330 ;; This function calls:
  2331 ;;		Nothing
  2332 ;; This function is called by:
  2333 ;;		_MoistureCheck
  2334 ;; This function uses a non-reentrant model
  2335 ;;
  2336                           
  2337                           
  2338                           ;psect for function _Median
  2339  012B                     _Median:	
  2340                           
  2341                           ;incstack = 0
  2342                           ; Regs used in _Median: [wreg]
  2343                           ;Median@a stored from wreg
  2344  012B  00F4               	movwf	Median@a
  2345                           
  2346                           ;user.c: 41: unsigned char b, d, f;
  2347                           ;user.c: 43: if (c > e){
  2348  012C  0870               	movf	Median@c,w
  2349  012D  0271               	subwf	Median@e,w
  2350  012E  1803               	skipnc
  2351  012F  2932               	goto	l1308
  2352                           
  2353                           ;user.c: 44: b = c;
  2354  0130  0870               	movf	Median@c,w
  2355  0131  2933               	goto	L1
  2356  0132                     l1308:	
  2357                           ;user.c: 45: }
  2358                           
  2359                           
  2360                           ;user.c: 46: else{
  2361                           ;user.c: 47: b = e;
  2362  0132  0871               	movf	Median@e,w
  2363  0133                     L1:	
  2364  0133  00F2               	movwf	??_Median
  2365  0134  0872               	movf	??_Median,w
  2366  0135  00F5               	movwf	Median@b
  2367                           
  2368                           ;user.c: 48: }
  2369                           ;user.c: 50: if(e > a){
  2370  0136  0871               	movf	Median@e,w
  2371  0137  0274               	subwf	Median@a,w
  2372  0138  1803               	skipnc
  2373  0139  293C               	goto	l1312
  2374                           
  2375                           ;user.c: 51: d = e;
  2376  013A  0871               	movf	Median@e,w
  2377  013B  293D               	goto	L2
  2378  013C                     l1312:	
  2379                           ;user.c: 52: }
  2380                           
  2381                           
  2382                           ;user.c: 53: else{
  2383                           ;user.c: 54: d = a;
  2384  013C  0874               	movf	Median@a,w
  2385  013D                     L2:	
  2386  013D  00F2               	movwf	??_Median
  2387  013E  0872               	movf	??_Median,w
  2388  013F  00F6               	movwf	Median@d
  2389                           
  2390                           ;user.c: 55: }
  2391                           ;user.c: 57: if(b < d){
  2392  0140  0876               	movf	Median@d,w
  2393  0141  0275               	subwf	Median@b,w
  2394  0142  1803               	skipnc
  2395  0143  2946               	goto	l1316
  2396                           
  2397                           ;user.c: 58: f = b;
  2398  0144  0875               	movf	Median@b,w
  2399  0145  2947               	goto	L3
  2400  0146                     l1316:	
  2401                           ;user.c: 59: }
  2402                           
  2403                           
  2404                           ;user.c: 60: else{
  2405                           ;user.c: 61: f = d;
  2406  0146  0876               	movf	Median@d,w
  2407  0147                     L3:	
  2408  0147  00F2               	movwf	??_Median
  2409  0148  0872               	movf	??_Median,w
  2410  0149  00F3               	movwf	Median@f
  2411                           
  2412                           ;user.c: 62: }
  2413                           ;user.c: 64: return f;
  2414  014A  0873               	movf	Median@f,w
  2415  014B  0008               	return
  2416  014C                     __end_of_Median:	
  2417                           
  2418                           	psect	text4
  2419  010F                     __ptext4:	
  2420 ;; *************** function _ADCRead *****************
  2421 ;; Defined at:
  2422 ;;		line 23 in file "user.c"
  2423 ;; Parameters:    Size  Location     Type
  2424 ;;  ch              1    wreg     unsigned char 
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;  ch              1    1[COMMON] unsigned char 
  2427 ;; Return value:  Size  Location     Type
  2428 ;;                  1    wreg      unsigned char 
  2429 ;; Registers used:
  2430 ;;		wreg, status,2, status,0
  2431 ;; Tracked objects:
  2432 ;;		On entry : 0/0
  2433 ;;		On exit  : 0/0
  2434 ;;		Unchanged: 0/0
  2435 ;; Data sizes:     COMMON   BANK0   BANK1
  2436 ;;      Params:         0       0       0
  2437 ;;      Locals:         1       0       0
  2438 ;;      Temps:          1       0       0
  2439 ;;      Totals:         2       0       0
  2440 ;;Total ram usage:        2 bytes
  2441 ;; Hardware stack levels used:    1
  2442 ;; This function calls:
  2443 ;;		Nothing
  2444 ;; This function is called by:
  2445 ;;		_main
  2446 ;;		_MoistureCheck
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450                           
  2451                           ;psect for function _ADCRead
  2452  010F                     _ADCRead:	
  2453                           
  2454                           ;incstack = 0
  2455                           ; Regs used in _ADCRead: [wreg+status,2+status,0]
  2456                           ;ADCRead@ch stored from wreg
  2457  010F  00F1               	movwf	ADCRead@ch
  2458                           
  2459                           ;user.c: 25: ADCON0=0x00;
  2460  0110  1283               	bcf	3,5	;RP0=0, select bank0
  2461  0111  1303               	bcf	3,6	;RP1=0, select bank0
  2462  0112  019F               	clrf	31	;volatile
  2463                           
  2464                           ;user.c: 26: ADCON0=(ch<<2);
  2465  0113  0871               	movf	ADCRead@ch,w
  2466  0114  00F0               	movwf	??_ADCRead
  2467  0115  3001               	movlw	1
  2468  0116                     u865:	
  2469  0116  1003               	clrc
  2470  0117  0DF0               	rlf	??_ADCRead,f
  2471  0118  3EFF               	addlw	-1
  2472  0119  1D03               	skipz
  2473  011A  2916               	goto	u865
  2474  011B  1003               	clrc
  2475  011C  0D70               	rlf	??_ADCRead,w
  2476  011D  009F               	movwf	31	;volatile
  2477                           
  2478                           ;user.c: 27: ADON=1;
  2479  011E  141F               	bsf	31,0	;volatile
  2480                           
  2481                           ;user.c: 28: _delay((unsigned long)((200)*(2000000L/4000000.0)));
  2482  011F  3021               	movlw	33
  2483  0120  00F0               	movwf	??_ADCRead
  2484  0121                     u1657:	
  2485  0121  0BF0               	decfsz	??_ADCRead,f
  2486  0122  2921               	goto	u1657
  2487                           
  2488                           ;user.c: 29: GO_nDONE=1;
  2489  0123  1283               	bcf	3,5	;RP0=0, select bank0
  2490  0124  1303               	bcf	3,6	;RP1=0, select bank0
  2491  0125  149F               	bsf	31,1	;volatile
  2492  0126                     l240:	
  2493                           ;user.c: 30: while(GO_nDONE);
  2494                           
  2495  0126  189F               	btfsc	31,1	;volatile
  2496  0127  2926               	goto	l240
  2497                           
  2498                           ;user.c: 31: ADON=0;
  2499  0128  101F               	bcf	31,0	;volatile
  2500                           
  2501                           ;user.c: 32: return ADRES;
  2502  0129  081E               	movf	30,w	;volatile
  2503  012A  0008               	return
  2504  012B                     __end_of_ADCRead:	
  2505                           
  2506                           	psect	text5
  2507  00CA                     __ptext5:	
  2508 ;; *************** function _ADCInit *****************
  2509 ;; Defined at:
  2510 ;;		line 14 in file "user.c"
  2511 ;; Parameters:    Size  Location     Type
  2512 ;;		None
  2513 ;; Auto vars:     Size  Location     Type
  2514 ;;		None
  2515 ;; Return value:  Size  Location     Type
  2516 ;;		None               void
  2517 ;; Registers used:
  2518 ;;		wreg
  2519 ;; Tracked objects:
  2520 ;;		On entry : 0/0
  2521 ;;		On exit  : 0/0
  2522 ;;		Unchanged: 0/0
  2523 ;; Data sizes:     COMMON   BANK0   BANK1
  2524 ;;      Params:         0       0       0
  2525 ;;      Locals:         0       0       0
  2526 ;;      Temps:          0       0       0
  2527 ;;      Totals:         0       0       0
  2528 ;;Total ram usage:        0 bytes
  2529 ;; Hardware stack levels used:    1
  2530 ;; This function calls:
  2531 ;;		Nothing
  2532 ;; This function is called by:
  2533 ;;		_MoistureCheck
  2534 ;; This function uses a non-reentrant model
  2535 ;;
  2536                           
  2537                           
  2538                           ;psect for function _ADCInit
  2539  00CA                     _ADCInit:	
  2540                           
  2541                           ;user.c: 16: ADCON1 = 0x10;
  2542                           
  2543                           ;incstack = 0
  2544                           ; Regs used in _ADCInit: [wreg]
  2545  00CA  3010               	movlw	16
  2546  00CB  1683               	bsf	3,5	;RP0=1, select bank1
  2547  00CC  1303               	bcf	3,6	;RP1=0, select bank1
  2548  00CD  009F               	movwf	31	;volatile
  2549  00CE  0008               	return
  2550  00CF                     __end_of_ADCInit:	
  2551                           
  2552                           	psect	text6
  2553  0195                     __ptext6:	
  2554 ;; *************** function _LCDWriteString *****************
  2555 ;; Defined at:
  2556 ;;		line 224 in file "hd44780.c"
  2557 ;; Parameters:    Size  Location     Type
  2558 ;;  msg             1    wreg     PTR const unsigned char 
  2559 ;;		 -> STR_13(2), STR_12(2), STR_11(2), STR_10(6), 
  2560 ;;		 -> STR_9(2), STR_8(10), STR_7(10), STR_6(10), 
  2561 ;;		 -> STR_5(10), STR_4(14), STR_3(2), STR_2(2), 
  2562 ;;		 -> STR_1(2), 
  2563 ;; Auto vars:     Size  Location     Type
  2564 ;;  msg             1    1[BANK0 ] PTR const unsigned char 
  2565 ;;		 -> STR_13(2), STR_12(2), STR_11(2), STR_10(6), 
  2566 ;;		 -> STR_9(2), STR_8(10), STR_7(10), STR_6(10), 
  2567 ;;		 -> STR_5(10), STR_4(14), STR_3(2), STR_2(2), 
  2568 ;;		 -> STR_1(2), 
  2569 ;;  cc              1    0[BANK0 ] char 
  2570 ;; Return value:  Size  Location     Type
  2571 ;;		None               void
  2572 ;; Registers used:
  2573 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2574 ;; Tracked objects:
  2575 ;;		On entry : 0/0
  2576 ;;		On exit  : 0/0
  2577 ;;		Unchanged: 0/0
  2578 ;; Data sizes:     COMMON   BANK0   BANK1
  2579 ;;      Params:         0       0       0
  2580 ;;      Locals:         0       2       0
  2581 ;;      Temps:          1       0       0
  2582 ;;      Totals:         1       2       0
  2583 ;;Total ram usage:        3 bytes
  2584 ;; Hardware stack levels used:    1
  2585 ;; Hardware stack levels required when called:    2
  2586 ;; This function calls:
  2587 ;;		_LCDByte
  2588 ;; This function is called by:
  2589 ;;		_main
  2590 ;; This function uses a non-reentrant model
  2591 ;;
  2592                           
  2593                           
  2594                           ;psect for function _LCDWriteString
  2595  0195                     _LCDWriteString:	
  2596                           
  2597                           ;incstack = 0
  2598                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2599                           ;LCDWriteString@msg stored from wreg
  2600  0195  1283               	bcf	3,5	;RP0=0, select bank0
  2601  0196  1303               	bcf	3,6	;RP1=0, select bank0
  2602  0197  00B8               	movwf	LCDWriteString@msg
  2603  0198                     l1490:	
  2604                           ;hd44780.c: 226: while(*msg!='\0')
  2605                           
  2606  0198  0838               	movf	LCDWriteString@msg,w
  2607  0199  0084               	movwf	4
  2608  019A  2001               	fcall	stringdir
  2609  019B  3A00               	xorlw	0
  2610  019C  1903               	btfsc	3,2
  2611  019D  0008               	return
  2612                           
  2613                           ;hd44780.c: 227: {
  2614                           ;hd44780.c: 228: if(*msg=='%')
  2615  019E  0838               	movf	LCDWriteString@msg,w
  2616  019F  0084               	movwf	4
  2617  01A0  2001               	fcall	stringdir
  2618  01A1  3A25               	xorlw	37
  2619  01A2  1D03               	skipz
  2620  01A3  29BE               	goto	l1486
  2621                           
  2622                           ;hd44780.c: 229: {
  2623                           ;hd44780.c: 230: msg++;
  2624  01A4  3001               	movlw	1
  2625  01A5  00FC               	movwf	??_LCDWriteString
  2626  01A6  087C               	movf	??_LCDWriteString,w
  2627  01A7  07B8               	addwf	LCDWriteString@msg,f
  2628                           
  2629                           ;hd44780.c: 231: int8_t cc=*msg-'0';
  2630  01A8  0838               	movf	LCDWriteString@msg,w
  2631  01A9  0084               	movwf	4
  2632  01AA  2001               	fcall	stringdir
  2633  01AB  3ED0               	addlw	-48
  2634  01AC  00FC               	movwf	??_LCDWriteString
  2635  01AD  087C               	movf	??_LCDWriteString,w
  2636  01AE  00B7               	movwf	LCDWriteString@cc
  2637                           
  2638                           ;hd44780.c: 233: if(cc>=0 && cc<=7)
  2639  01AF  1BB7               	btfsc	LCDWriteString@cc,7
  2640  01B0  29BA               	goto	l1482
  2641  01B1  0837               	movf	LCDWriteString@cc,w
  2642  01B2  3A80               	xorlw	128
  2643  01B3  3E78               	addlw	-136
  2644  01B4  1803               	skipnc
  2645  01B5  29BA               	goto	l1482
  2646                           
  2647                           ;hd44780.c: 234: {
  2648                           ;hd44780.c: 235: (LCDByte(cc,1));
  2649  01B6  01F5               	clrf	LCDByte@isdata
  2650  01B7  0AF5               	incf	LCDByte@isdata,f
  2651  01B8  0837               	movf	LCDWriteString@cc,w
  2652  01B9  29C5               	goto	L4
  2653  01BA                     l1482:	
  2654                           ;hd44780.c: 236: }
  2655                           
  2656                           
  2657                           ;hd44780.c: 237: else
  2658                           ;hd44780.c: 238: {
  2659                           ;hd44780.c: 239: (LCDByte('%',1));
  2660  01BA  01F5               	clrf	LCDByte@isdata
  2661  01BB  0AF5               	incf	LCDByte@isdata,f
  2662  01BC  3025               	movlw	37
  2663  01BD  21CD               	fcall	_LCDByte
  2664  01BE                     l1486:	
  2665                           ;hd44780.c: 241: }
  2666                           ;hd44780.c: 242: }
  2667                           
  2668                           ;hd44780.c: 240: (LCDByte(*msg,1));
  2669                           
  2670                           
  2671                           ;hd44780.c: 243: else
  2672                           ;hd44780.c: 244: {
  2673                           ;hd44780.c: 245: (LCDByte(*msg,1));
  2674  01BE  01F5               	clrf	LCDByte@isdata
  2675  01BF  0AF5               	incf	LCDByte@isdata,f
  2676  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  2677  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  2678  01C2  0838               	movf	LCDWriteString@msg,w
  2679  01C3  0084               	movwf	4
  2680  01C4  2001               	fcall	stringdir
  2681  01C5                     L4:	
  2682  01C5  21CD               	fcall	_LCDByte
  2683                           
  2684                           ;hd44780.c: 246: }
  2685                           ;hd44780.c: 247: msg++;
  2686  01C6  3001               	movlw	1
  2687  01C7  00FC               	movwf	??_LCDWriteString
  2688  01C8  087C               	movf	??_LCDWriteString,w
  2689  01C9  1283               	bcf	3,5	;RP0=0, select bank0
  2690  01CA  1303               	bcf	3,6	;RP1=0, select bank0
  2691  01CB  07B8               	addwf	LCDWriteString@msg,f
  2692  01CC  2998               	goto	l1490
  2693  01CD                     __end_of_LCDWriteString:	
  2694                           
  2695                           	psect	text7
  2696  0346                     __ptext7:	
  2697 ;; *************** function _LCDWriteInt *****************
  2698 ;; Defined at:
  2699 ;;		line 258 in file "hd44780.c"
  2700 ;; Parameters:    Size  Location     Type
  2701 ;;  val             2    0[BANK0 ] int 
  2702 ;;  field_length    1    2[BANK0 ] char 
  2703 ;; Auto vars:     Size  Location     Type
  2704 ;;  str             5    3[BANK0 ] unsigned char [5]
  2705 ;;  i               2   10[BANK0 ] int 
  2706 ;;  j               2    8[BANK0 ] int 
  2707 ;; Return value:  Size  Location     Type
  2708 ;;		None               void
  2709 ;; Registers used:
  2710 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2711 ;; Tracked objects:
  2712 ;;		On entry : 0/0
  2713 ;;		On exit  : 0/0
  2714 ;;		Unchanged: 0/0
  2715 ;; Data sizes:     COMMON   BANK0   BANK1
  2716 ;;      Params:         0       3       0
  2717 ;;      Locals:         0       9       0
  2718 ;;      Temps:          2       0       0
  2719 ;;      Totals:         2      12       0
  2720 ;;Total ram usage:       14 bytes
  2721 ;; Hardware stack levels used:    1
  2722 ;; Hardware stack levels required when called:    2
  2723 ;; This function calls:
  2724 ;;		_LCDByte
  2725 ;;		___awdiv
  2726 ;;		___awmod
  2727 ;; This function is called by:
  2728 ;;		_main
  2729 ;; This function uses a non-reentrant model
  2730 ;;
  2731                           
  2732                           
  2733                           ;psect for function _LCDWriteInt
  2734  0346                     _LCDWriteInt:	
  2735                           
  2736                           ;hd44780.c: 260: char str[5]={0,0,0,0,0};
  2737                           
  2738                           ;incstack = 0
  2739                           ; Regs used in _LCDWriteInt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2740  0346  303A               	movlw	LCDWriteInt@str& (0+255)
  2741  0347  0084               	movwf	4
  2742  0348  1283               	bcf	3,5	;RP0=0, select bank0
  2743  0349  1303               	bcf	3,6	;RP1=0, select bank0
  2744  034A  0820               	movf	LCDWriteInt@F1077,w
  2745  034B  1383               	bcf	3,7	;select IRP bank0
  2746  034C  0080               	movwf	0
  2747  034D  0A84               	incf	4,f
  2748  034E  0821               	movf	LCDWriteInt@F1077+1,w
  2749  034F  0080               	movwf	0
  2750  0350  0A84               	incf	4,f
  2751  0351  0822               	movf	LCDWriteInt@F1077+2,w
  2752  0352  0080               	movwf	0
  2753  0353  0A84               	incf	4,f
  2754  0354  0823               	movf	LCDWriteInt@F1077+3,w
  2755  0355  0080               	movwf	0
  2756  0356  0A84               	incf	4,f
  2757  0357  0824               	movf	LCDWriteInt@F1077+4,w
  2758  0358  0080               	movwf	0
  2759                           
  2760                           ;hd44780.c: 261: int i=4,j=0;
  2761  0359  3004               	movlw	4
  2762  035A  00C1               	movwf	LCDWriteInt@i
  2763  035B  3000               	movlw	0
  2764  035C  00C2               	movwf	LCDWriteInt@i+1
  2765  035D  01BF               	clrf	LCDWriteInt@j
  2766  035E  01C0               	clrf	LCDWriteInt@j+1
  2767                           
  2768                           ;hd44780.c: 263: if(val<0)
  2769  035F  1FB8               	btfss	LCDWriteInt@val+1,7
  2770  0360  2B6C               	goto	l1510
  2771                           
  2772                           ;hd44780.c: 264: {
  2773                           ;hd44780.c: 265: (LCDByte('-',1));
  2774  0361  01F5               	clrf	LCDByte@isdata
  2775  0362  0AF5               	incf	LCDByte@isdata,f
  2776  0363  302D               	movlw	45
  2777  0364  21CD               	fcall	_LCDByte
  2778                           
  2779                           ;hd44780.c: 266: val=val*-1;
  2780  0365  1283               	bcf	3,5	;RP0=0, select bank0
  2781  0366  1303               	bcf	3,6	;RP1=0, select bank0
  2782  0367  09B7               	comf	LCDWriteInt@val,f
  2783  0368  09B8               	comf	LCDWriteInt@val+1,f
  2784  0369  0AB7               	incf	LCDWriteInt@val,f
  2785  036A  1903               	skipnz
  2786  036B  0AB8               	incf	LCDWriteInt@val+1,f
  2787  036C                     l1510:	
  2788                           ;hd44780.c: 267: }
  2789                           ;hd44780.c: 269: while(val)
  2790                           
  2791  036C  0837               	movf	LCDWriteInt@val,w
  2792  036D  0438               	iorwf	LCDWriteInt@val+1,w
  2793  036E  1903               	btfsc	3,2
  2794  036F  2B99               	goto	l1512
  2795                           
  2796                           ;hd44780.c: 270: {
  2797                           ;hd44780.c: 271: str[i]=val%10;
  2798  0370  300A               	movlw	10
  2799  0371  00F0               	movwf	___awmod@divisor
  2800  0372  3000               	movlw	0
  2801  0373  00F1               	movwf	___awmod@divisor+1
  2802  0374  0838               	movf	LCDWriteInt@val+1,w
  2803  0375  00F3               	movwf	___awmod@dividend+1
  2804  0376  0837               	movf	LCDWriteInt@val,w
  2805  0377  00F2               	movwf	___awmod@dividend
  2806  0378  2252               	fcall	___awmod
  2807  0379  0870               	movf	?___awmod,w
  2808  037A  00FC               	movwf	??_LCDWriteInt
  2809  037B  1283               	bcf	3,5	;RP0=0, select bank0
  2810  037C  1303               	bcf	3,6	;RP1=0, select bank0
  2811  037D  0841               	movf	LCDWriteInt@i,w
  2812  037E  3E3A               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  2813  037F  0084               	movwf	4
  2814  0380  087C               	movf	??_LCDWriteInt,w
  2815  0381  1383               	bcf	3,7	;select IRP bank0
  2816  0382  0080               	movwf	0
  2817                           
  2818                           ;hd44780.c: 272: val=val/10;
  2819  0383  300A               	movlw	10
  2820  0384  00F0               	movwf	___awdiv@divisor
  2821  0385  3000               	movlw	0
  2822  0386  00F1               	movwf	___awdiv@divisor+1
  2823  0387  0838               	movf	LCDWriteInt@val+1,w
  2824  0388  00F3               	movwf	___awdiv@dividend+1
  2825  0389  0837               	movf	LCDWriteInt@val,w
  2826  038A  00F2               	movwf	___awdiv@dividend
  2827  038B  22ED               	fcall	___awdiv
  2828  038C  0871               	movf	?___awdiv+1,w
  2829  038D  1283               	bcf	3,5	;RP0=0, select bank0
  2830  038E  1303               	bcf	3,6	;RP1=0, select bank0
  2831  038F  00B8               	movwf	LCDWriteInt@val+1
  2832  0390  0870               	movf	?___awdiv,w
  2833  0391  00B7               	movwf	LCDWriteInt@val
  2834                           
  2835                           ;hd44780.c: 273: i--;
  2836  0392  30FF               	movlw	255
  2837  0393  07C1               	addwf	LCDWriteInt@i,f
  2838  0394  1803               	skipnc
  2839  0395  0AC2               	incf	LCDWriteInt@i+1,f
  2840  0396  30FF               	movlw	255
  2841  0397  07C2               	addwf	LCDWriteInt@i+1,f
  2842  0398  2B6C               	goto	l1510
  2843  0399                     l1512:	
  2844                           
  2845                           ;hd44780.c: 274: }
  2846                           ;hd44780.c: 276: if(field_length==-1)
  2847  0399  0A39               	incf	LCDWriteInt@field_length,w
  2848  039A  1903               	btfsc	3,2
  2849  039B  2BA3               	goto	l1518
  2850  039C  2BAB               	goto	l1520
  2851  039D                     l1516:	
  2852                           ;hd44780.c: 277: {
  2853                           ;hd44780.c: 278: while(str[j]==0) j++;
  2854                           
  2855  039D  3001               	movlw	1
  2856  039E  07BF               	addwf	LCDWriteInt@j,f
  2857  039F  1803               	skipnc
  2858  03A0  0AC0               	incf	LCDWriteInt@j+1,f
  2859  03A1  3000               	movlw	0
  2860  03A2  07C0               	addwf	LCDWriteInt@j+1,f
  2861  03A3                     l1518:	
  2862  03A3  083F               	movf	LCDWriteInt@j,w
  2863  03A4  3E3A               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  2864  03A5  0084               	movwf	4
  2865  03A6  1383               	bcf	3,7	;select IRP bank0
  2866  03A7  0800               	movf	0,w
  2867  03A8  1D03               	btfss	3,2
  2868  03A9  2BBD               	goto	l1522
  2869  03AA  2B9D               	goto	l1516
  2870  03AB                     l1520:	
  2871                           ;hd44780.c: 279: }
  2872                           
  2873                           
  2874                           ;hd44780.c: 280: else
  2875                           ;hd44780.c: 281: {
  2876                           ;hd44780.c: 282: j=5-field_length;
  2877  03AB  0839               	movf	LCDWriteInt@field_length,w
  2878  03AC  00FC               	movwf	??_LCDWriteInt
  2879  03AD  01FD               	clrf	??_LCDWriteInt+1
  2880  03AE  1BFC               	btfsc	??_LCDWriteInt,7
  2881  03AF  03FD               	decf	??_LCDWriteInt+1,f
  2882  03B0  09FC               	comf	??_LCDWriteInt,f
  2883  03B1  09FD               	comf	??_LCDWriteInt+1,f
  2884  03B2  0AFC               	incf	??_LCDWriteInt,f
  2885  03B3  1903               	skipnz
  2886  03B4  0AFD               	incf	??_LCDWriteInt+1,f
  2887  03B5  087C               	movf	??_LCDWriteInt,w
  2888  03B6  3E05               	addlw	5
  2889  03B7  00BF               	movwf	LCDWriteInt@j
  2890  03B8  087D               	movf	??_LCDWriteInt+1,w
  2891  03B9  1803               	skipnc
  2892  03BA  3E01               	addlw	1
  2893  03BB  3E00               	addlw	0
  2894  03BC  00C0               	movwf	LCDWriteInt@j+1
  2895  03BD                     l1522:	
  2896                           
  2897                           ;hd44780.c: 283: }
  2898                           ;hd44780.c: 285: for(i=j;i<5;i++)
  2899  03BD  0840               	movf	LCDWriteInt@j+1,w
  2900  03BE  00C2               	movwf	LCDWriteInt@i+1
  2901  03BF  083F               	movf	LCDWriteInt@j,w
  2902  03C0  00C1               	movwf	LCDWriteInt@i
  2903  03C1                     L5:	
  2904  03C1  0842               	movf	LCDWriteInt@i+1,w
  2905  03C2  3A80               	xorlw	128
  2906  03C3  00FF               	movwf	127
  2907  03C4  3080               	movlw	128
  2908  03C5  027F               	subwf	127,w
  2909  03C6  1D03               	skipz
  2910  03C7  2BCA               	goto	u1245
  2911  03C8  3005               	movlw	5
  2912  03C9  0241               	subwf	LCDWriteInt@i,w
  2913  03CA                     u1245:	
  2914  03CA  1803               	btfsc	3,0
  2915  03CB  0008               	return
  2916                           
  2917                           ;hd44780.c: 286: {
  2918                           ;hd44780.c: 287: (LCDByte(48+str[i],1));
  2919  03CC  01F5               	clrf	LCDByte@isdata
  2920  03CD  0AF5               	incf	LCDByte@isdata,f
  2921  03CE  1283               	bcf	3,5	;RP0=0, select bank0
  2922  03CF  1303               	bcf	3,6	;RP1=0, select bank0
  2923  03D0  0841               	movf	LCDWriteInt@i,w
  2924  03D1  3E3A               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  2925  03D2  0084               	movwf	4
  2926  03D3  1383               	bcf	3,7	;select IRP bank0
  2927  03D4  0800               	movf	0,w
  2928  03D5  3E30               	addlw	48
  2929  03D6  21CD               	fcall	_LCDByte
  2930  03D7  3001               	movlw	1
  2931  03D8  1283               	bcf	3,5	;RP0=0, select bank0
  2932  03D9  1303               	bcf	3,6	;RP1=0, select bank0
  2933  03DA  07C1               	addwf	LCDWriteInt@i,f
  2934  03DB  1803               	skipnc
  2935  03DC  0AC2               	incf	LCDWriteInt@i+1,f
  2936  03DD  3000               	movlw	0
  2937  03DE  07C2               	addwf	LCDWriteInt@i+1,f
  2938  03DF  2BC1               	goto	L5
  2939  03E0                     __end_of_LCDWriteInt:	
  2940                           
  2941                           	psect	text8
  2942  0252                     __ptext8:	
  2943 ;; *************** function ___awmod *****************
  2944 ;; Defined at:
  2945 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
  2946 ;; Parameters:    Size  Location     Type
  2947 ;;  divisor         2    0[COMMON] int 
  2948 ;;  dividend        2    2[COMMON] int 
  2949 ;; Auto vars:     Size  Location     Type
  2950 ;;  sign            1    6[COMMON] unsigned char 
  2951 ;;  counter         1    5[COMMON] unsigned char 
  2952 ;; Return value:  Size  Location     Type
  2953 ;;                  2    0[COMMON] int 
  2954 ;; Registers used:
  2955 ;;		wreg, status,2, status,0
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMMON   BANK0   BANK1
  2961 ;;      Params:         4       0       0
  2962 ;;      Locals:         2       0       0
  2963 ;;      Temps:          1       0       0
  2964 ;;      Totals:         7       0       0
  2965 ;;Total ram usage:        7 bytes
  2966 ;; Hardware stack levels used:    1
  2967 ;; This function calls:
  2968 ;;		Nothing
  2969 ;; This function is called by:
  2970 ;;		_LCDWriteInt
  2971 ;; This function uses a non-reentrant model
  2972 ;;
  2973                           
  2974                           
  2975                           ;psect for function ___awmod
  2976  0252                     ___awmod:	
  2977                           
  2978                           ;incstack = 0
  2979                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2980  0252  01F6               	clrf	___awmod@sign
  2981  0253  1FF3               	btfss	___awmod@dividend+1,7
  2982  0254  2A5C               	goto	l1386
  2983  0255  09F2               	comf	___awmod@dividend,f
  2984  0256  09F3               	comf	___awmod@dividend+1,f
  2985  0257  0AF2               	incf	___awmod@dividend,f
  2986  0258  1903               	skipnz
  2987  0259  0AF3               	incf	___awmod@dividend+1,f
  2988  025A  01F6               	clrf	___awmod@sign
  2989  025B  0AF6               	incf	___awmod@sign,f
  2990  025C                     l1386:	
  2991  025C  1FF1               	btfss	___awmod@divisor+1,7
  2992  025D  2A63               	goto	l1390
  2993  025E  09F0               	comf	___awmod@divisor,f
  2994  025F  09F1               	comf	___awmod@divisor+1,f
  2995  0260  0AF0               	incf	___awmod@divisor,f
  2996  0261  1903               	skipnz
  2997  0262  0AF1               	incf	___awmod@divisor+1,f
  2998  0263                     l1390:	
  2999  0263  0870               	movf	___awmod@divisor,w
  3000  0264  0471               	iorwf	___awmod@divisor+1,w
  3001  0265  1903               	btfsc	3,2
  3002  0266  2A90               	goto	l1408
  3003  0267  01F5               	clrf	___awmod@counter
  3004  0268  0AF5               	incf	___awmod@counter,f
  3005  0269                     l1398:	
  3006  0269  1BF1               	btfsc	___awmod@divisor+1,7
  3007  026A  2A77               	goto	l1400
  3008  026B  3001               	movlw	1
  3009  026C                     u1085:	
  3010  026C  1003               	clrc
  3011  026D  0DF0               	rlf	___awmod@divisor,f
  3012  026E  0DF1               	rlf	___awmod@divisor+1,f
  3013  026F  3EFF               	addlw	-1
  3014  0270  1D03               	skipz
  3015  0271  2A6C               	goto	u1085
  3016  0272  3001               	movlw	1
  3017  0273  00F4               	movwf	??___awmod
  3018  0274  0874               	movf	??___awmod,w
  3019  0275  07F5               	addwf	___awmod@counter,f
  3020  0276  2A69               	goto	l1398
  3021  0277                     l1400:	
  3022  0277  0871               	movf	___awmod@divisor+1,w
  3023  0278  0273               	subwf	___awmod@dividend+1,w
  3024  0279  1D03               	skipz
  3025  027A  2A7D               	goto	u1105
  3026  027B  0870               	movf	___awmod@divisor,w
  3027  027C  0272               	subwf	___awmod@dividend,w
  3028  027D                     u1105:	
  3029  027D  1C03               	skipc
  3030  027E  2A85               	goto	l1404
  3031  027F  0870               	movf	___awmod@divisor,w
  3032  0280  02F2               	subwf	___awmod@dividend,f
  3033  0281  0871               	movf	___awmod@divisor+1,w
  3034  0282  1C03               	skipc
  3035  0283  03F3               	decf	___awmod@dividend+1,f
  3036  0284  02F3               	subwf	___awmod@dividend+1,f
  3037  0285                     l1404:	
  3038  0285  3001               	movlw	1
  3039  0286                     u1115:	
  3040  0286  1003               	clrc
  3041  0287  0CF1               	rrf	___awmod@divisor+1,f
  3042  0288  0CF0               	rrf	___awmod@divisor,f
  3043  0289  3EFF               	addlw	-1
  3044  028A  1D03               	skipz
  3045  028B  2A86               	goto	u1115
  3046  028C  3001               	movlw	1
  3047  028D  02F5               	subwf	___awmod@counter,f
  3048  028E  1D03               	btfss	3,2
  3049  028F  2A77               	goto	l1400
  3050  0290                     l1408:	
  3051  0290  0876               	movf	___awmod@sign,w
  3052  0291  1903               	btfsc	3,2
  3053  0292  2A98               	goto	l1412
  3054  0293  09F2               	comf	___awmod@dividend,f
  3055  0294  09F3               	comf	___awmod@dividend+1,f
  3056  0295  0AF2               	incf	___awmod@dividend,f
  3057  0296  1903               	skipnz
  3058  0297  0AF3               	incf	___awmod@dividend+1,f
  3059  0298                     l1412:	
  3060  0298  0873               	movf	___awmod@dividend+1,w
  3061  0299  00F1               	movwf	?___awmod+1
  3062  029A  0872               	movf	___awmod@dividend,w
  3063  029B  00F0               	movwf	?___awmod
  3064  029C  0008               	return
  3065  029D                     __end_of___awmod:	
  3066                           
  3067                           	psect	text9
  3068  02ED                     __ptext9:	
  3069 ;; *************** function ___awdiv *****************
  3070 ;; Defined at:
  3071 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  3072 ;; Parameters:    Size  Location     Type
  3073 ;;  divisor         2    0[COMMON] int 
  3074 ;;  dividend        2    2[COMMON] int 
  3075 ;; Auto vars:     Size  Location     Type
  3076 ;;  quotient        2    7[COMMON] int 
  3077 ;;  sign            1    6[COMMON] unsigned char 
  3078 ;;  counter         1    5[COMMON] unsigned char 
  3079 ;; Return value:  Size  Location     Type
  3080 ;;                  2    0[COMMON] int 
  3081 ;; Registers used:
  3082 ;;		wreg, status,2, status,0
  3083 ;; Tracked objects:
  3084 ;;		On entry : 0/0
  3085 ;;		On exit  : 0/0
  3086 ;;		Unchanged: 0/0
  3087 ;; Data sizes:     COMMON   BANK0   BANK1
  3088 ;;      Params:         4       0       0
  3089 ;;      Locals:         4       0       0
  3090 ;;      Temps:          1       0       0
  3091 ;;      Totals:         9       0       0
  3092 ;;Total ram usage:        9 bytes
  3093 ;; Hardware stack levels used:    1
  3094 ;; This function calls:
  3095 ;;		Nothing
  3096 ;; This function is called by:
  3097 ;;		_LCDWriteInt
  3098 ;; This function uses a non-reentrant model
  3099 ;;
  3100                           
  3101                           
  3102                           ;psect for function ___awdiv
  3103  02ED                     ___awdiv:	
  3104                           
  3105                           ;incstack = 0
  3106                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3107  02ED  01F6               	clrf	___awdiv@sign
  3108  02EE  1FF1               	btfss	___awdiv@divisor+1,7
  3109  02EF  2AF7               	goto	l1342
  3110  02F0  09F0               	comf	___awdiv@divisor,f
  3111  02F1  09F1               	comf	___awdiv@divisor+1,f
  3112  02F2  0AF0               	incf	___awdiv@divisor,f
  3113  02F3  1903               	skipnz
  3114  02F4  0AF1               	incf	___awdiv@divisor+1,f
  3115  02F5  01F6               	clrf	___awdiv@sign
  3116  02F6  0AF6               	incf	___awdiv@sign,f
  3117  02F7                     l1342:	
  3118  02F7  1FF3               	btfss	___awdiv@dividend+1,7
  3119  02F8  2B02               	goto	l1348
  3120  02F9  09F2               	comf	___awdiv@dividend,f
  3121  02FA  09F3               	comf	___awdiv@dividend+1,f
  3122  02FB  0AF2               	incf	___awdiv@dividend,f
  3123  02FC  1903               	skipnz
  3124  02FD  0AF3               	incf	___awdiv@dividend+1,f
  3125  02FE  3001               	movlw	1
  3126  02FF  00F4               	movwf	??___awdiv
  3127  0300  0874               	movf	??___awdiv,w
  3128  0301  06F6               	xorwf	___awdiv@sign,f
  3129  0302                     l1348:	
  3130  0302  01F7               	clrf	___awdiv@quotient
  3131  0303  01F8               	clrf	___awdiv@quotient+1
  3132  0304  0870               	movf	___awdiv@divisor,w
  3133  0305  0471               	iorwf	___awdiv@divisor+1,w
  3134  0306  1903               	btfsc	3,2
  3135  0307  2B39               	goto	l1370
  3136  0308  01F5               	clrf	___awdiv@counter
  3137  0309  0AF5               	incf	___awdiv@counter,f
  3138  030A                     l1358:	
  3139  030A  1BF1               	btfsc	___awdiv@divisor+1,7
  3140  030B  2B18               	goto	l1360
  3141  030C  3001               	movlw	1
  3142  030D                     u985:	
  3143  030D  1003               	clrc
  3144  030E  0DF0               	rlf	___awdiv@divisor,f
  3145  030F  0DF1               	rlf	___awdiv@divisor+1,f
  3146  0310  3EFF               	addlw	-1
  3147  0311  1D03               	skipz
  3148  0312  2B0D               	goto	u985
  3149  0313  3001               	movlw	1
  3150  0314  00F4               	movwf	??___awdiv
  3151  0315  0874               	movf	??___awdiv,w
  3152  0316  07F5               	addwf	___awdiv@counter,f
  3153  0317  2B0A               	goto	l1358
  3154  0318                     l1360:	
  3155  0318  3001               	movlw	1
  3156  0319                     u1005:	
  3157  0319  1003               	clrc
  3158  031A  0DF7               	rlf	___awdiv@quotient,f
  3159  031B  0DF8               	rlf	___awdiv@quotient+1,f
  3160  031C  3EFF               	addlw	-1
  3161  031D  1D03               	skipz
  3162  031E  2B19               	goto	u1005
  3163  031F  0871               	movf	___awdiv@divisor+1,w
  3164  0320  0273               	subwf	___awdiv@dividend+1,w
  3165  0321  1D03               	skipz
  3166  0322  2B25               	goto	u1015
  3167  0323  0870               	movf	___awdiv@divisor,w
  3168  0324  0272               	subwf	___awdiv@dividend,w
  3169  0325                     u1015:	
  3170  0325  1C03               	skipc
  3171  0326  2B2E               	goto	l1366
  3172  0327  0870               	movf	___awdiv@divisor,w
  3173  0328  02F2               	subwf	___awdiv@dividend,f
  3174  0329  0871               	movf	___awdiv@divisor+1,w
  3175  032A  1C03               	skipc
  3176  032B  03F3               	decf	___awdiv@dividend+1,f
  3177  032C  02F3               	subwf	___awdiv@dividend+1,f
  3178  032D  1477               	bsf	___awdiv@quotient,0
  3179  032E                     l1366:	
  3180  032E  3001               	movlw	1
  3181  032F                     u1025:	
  3182  032F  1003               	clrc
  3183  0330  0CF1               	rrf	___awdiv@divisor+1,f
  3184  0331  0CF0               	rrf	___awdiv@divisor,f
  3185  0332  3EFF               	addlw	-1
  3186  0333  1D03               	skipz
  3187  0334  2B2F               	goto	u1025
  3188  0335  3001               	movlw	1
  3189  0336  02F5               	subwf	___awdiv@counter,f
  3190  0337  1D03               	btfss	3,2
  3191  0338  2B18               	goto	l1360
  3192  0339                     l1370:	
  3193  0339  0876               	movf	___awdiv@sign,w
  3194  033A  1903               	btfsc	3,2
  3195  033B  2B41               	goto	l1374
  3196  033C  09F7               	comf	___awdiv@quotient,f
  3197  033D  09F8               	comf	___awdiv@quotient+1,f
  3198  033E  0AF7               	incf	___awdiv@quotient,f
  3199  033F  1903               	skipnz
  3200  0340  0AF8               	incf	___awdiv@quotient+1,f
  3201  0341                     l1374:	
  3202  0341  0878               	movf	___awdiv@quotient+1,w
  3203  0342  00F1               	movwf	?___awdiv+1
  3204  0343  0877               	movf	___awdiv@quotient,w
  3205  0344  00F0               	movwf	?___awdiv
  3206  0345  0008               	return
  3207  0346                     __end_of___awdiv:	
  3208                           
  3209                           	psect	text10
  3210  00D7                     __ptext10:	
  3211 ;; *************** function _LCDReset *****************
  3212 ;; Defined at:
  3213 ;;		line 31 in file "hd44780.c"
  3214 ;; Parameters:    Size  Location     Type
  3215 ;;  style           1    wreg     unsigned char 
  3216 ;; Auto vars:     Size  Location     Type
  3217 ;;  style           1   12[COMMON] unsigned char 
  3218 ;; Return value:  Size  Location     Type
  3219 ;;		None               void
  3220 ;; Registers used:
  3221 ;;		wreg, status,2, status,0, pclath, cstack
  3222 ;; Tracked objects:
  3223 ;;		On entry : 0/0
  3224 ;;		On exit  : 0/0
  3225 ;;		Unchanged: 0/0
  3226 ;; Data sizes:     COMMON   BANK0   BANK1
  3227 ;;      Params:         0       0       0
  3228 ;;      Locals:         1       0       0
  3229 ;;      Temps:          0       0       0
  3230 ;;      Totals:         1       0       0
  3231 ;;Total ram usage:        1 bytes
  3232 ;; Hardware stack levels used:    1
  3233 ;; Hardware stack levels required when called:    2
  3234 ;; This function calls:
  3235 ;;		_LCDByte
  3236 ;; This function is called by:
  3237 ;;		_main
  3238 ;; This function uses a non-reentrant model
  3239 ;;
  3240                           
  3241                           
  3242                           ;psect for function _LCDReset
  3243  00D7                     _LCDReset:	
  3244                           
  3245                           ;incstack = 0
  3246                           ; Regs used in _LCDReset: [wreg+status,2+status,0+pclath+cstack]
  3247                           ;LCDReset@style stored from wreg
  3248  00D7  00FC               	movwf	LCDReset@style
  3249                           
  3250                           ;hd44780.c: 33: (LCDByte(0b00101000,0));
  3251  00D8  01F5               	clrf	LCDByte@isdata
  3252  00D9  3028               	movlw	40
  3253  00DA  21CD               	fcall	_LCDByte
  3254                           
  3255                           ;hd44780.c: 34: (LCDByte(0b00001100|style,0));
  3256  00DB  01F5               	clrf	LCDByte@isdata
  3257  00DC  087C               	movf	LCDReset@style,w
  3258  00DD  380C               	iorlw	12
  3259  00DE  21CD               	fcall	_LCDByte
  3260  00DF  0008               	return
  3261  00E0                     __end_of_LCDReset:	
  3262                           
  3263                           	psect	text11
  3264  029D                     __ptext11:	
  3265 ;; *************** function _LCDInit *****************
  3266 ;; Defined at:
  3267 ;;		line 177 in file "hd44780.c"
  3268 ;; Parameters:    Size  Location     Type
  3269 ;;  style           1    wreg     unsigned char 
  3270 ;; Auto vars:     Size  Location     Type
  3271 ;;  style           1   12[COMMON] unsigned char 
  3272 ;;  __i             1   13[COMMON] unsigned char 
  3273 ;; Return value:  Size  Location     Type
  3274 ;;		None               void
  3275 ;; Registers used:
  3276 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3277 ;; Tracked objects:
  3278 ;;		On entry : 0/0
  3279 ;;		On exit  : 0/0
  3280 ;;		Unchanged: 0/0
  3281 ;; Data sizes:     COMMON   BANK0   BANK1
  3282 ;;      Params:         0       0       0
  3283 ;;      Locals:         2       0       0
  3284 ;;      Temps:          0       3       0
  3285 ;;      Totals:         2       3       0
  3286 ;;Total ram usage:        5 bytes
  3287 ;; Hardware stack levels used:    1
  3288 ;; Hardware stack levels required when called:    2
  3289 ;; This function calls:
  3290 ;;		_LCDBusyLoop
  3291 ;;		_LCDByte
  3292 ;; This function is called by:
  3293 ;;		_main
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297                           
  3298                           ;psect for function _LCDInit
  3299  029D                     _LCDInit:	
  3300                           
  3301                           ;incstack = 0
  3302                           ; Regs used in _LCDInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3303                           ;LCDInit@style stored from wreg
  3304  029D  00FC               	movwf	LCDInit@style
  3305                           
  3306                           ;hd44780.c: 179: _delay((unsigned long)((750)*(2000000L/4000.0)));
  3307  029E  3002               	movlw	2
  3308  029F  1283               	bcf	3,5	;RP0=0, select bank0
  3309  02A0  1303               	bcf	3,6	;RP1=0, select bank0
  3310  02A1  00B9               	movwf	??_LCDInit+2
  3311  02A2  30E7               	movlw	231
  3312  02A3  00B8               	movwf	??_LCDInit+1
  3313  02A4  3000               	movlw	0
  3314  02A5  00B7               	movwf	??_LCDInit
  3315  02A6                     u1667:	
  3316  02A6  0BB7               	decfsz	??_LCDInit,f
  3317  02A7  2AA6               	goto	u1667
  3318  02A8  0BB8               	decfsz	??_LCDInit+1,f
  3319  02A9  2AA6               	goto	u1667
  3320  02AA  0BB9               	decfsz	??_LCDInit+2,f
  3321  02AB  2AA6               	goto	u1667
  3322  02AC  0000               	nop
  3323                           
  3324                           ;hd44780.c: 181: TRISC&=(~(0x0F<<0));
  3325  02AD  30F0               	movlw	240
  3326  02AE  1283               	bcf	3,5	;RP0=0, select bank0
  3327  02AF  1303               	bcf	3,6	;RP1=0, select bank0
  3328  02B0  00B7               	movwf	??_LCDInit
  3329  02B1  0837               	movf	??_LCDInit,w
  3330  02B2  1683               	bsf	3,5	;RP0=1, select bank1
  3331  02B3  1303               	bcf	3,6	;RP1=0, select bank1
  3332  02B4  0587               	andwf	7,f	;volatile
  3333                           
  3334                           ;hd44780.c: 182: TRISCbits.TRISC6=0;
  3335  02B5  1307               	bcf	7,6	;volatile
  3336                           
  3337                           ;hd44780.c: 183: TRISCbits.TRISC4=0;
  3338  02B6  1207               	bcf	7,4	;volatile
  3339                           
  3340                           ;hd44780.c: 184: TRISCbits.TRISC5=0;
  3341  02B7  1287               	bcf	7,5	;volatile
  3342                           
  3343                           ;hd44780.c: 186: PORTC&=(~(0x0F<<0));
  3344  02B8  30F0               	movlw	240
  3345  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  3346  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  3347  02BB  00B7               	movwf	??_LCDInit
  3348  02BC  0837               	movf	??_LCDInit,w
  3349  02BD  0587               	andwf	7,f	;volatile
  3350                           
  3351                           ;hd44780.c: 188: (RC6=0);
  3352  02BE  1307               	bcf	7,6	;volatile
  3353                           
  3354                           ;hd44780.c: 189: (RC5=0);
  3355  02BF  1287               	bcf	7,5	;volatile
  3356                           
  3357                           ;hd44780.c: 190: (RC4=0);
  3358  02C0  1207               	bcf	7,4	;volatile
  3359                           
  3360                           ;hd44780.c: 193: _delay((unsigned long)((8)*(2000000L/4000000.0)));
  3361  02C1  2AC2               	nop2	;2 cycle nop
  3362  02C2  2AC3               	nop2	;2 cycle nop
  3363                           
  3364                           ;hd44780.c: 195: (RC6=1);
  3365  02C3  1283               	bcf	3,5	;RP0=0, select bank0
  3366  02C4  1303               	bcf	3,6	;RP1=0, select bank0
  3367  02C5  1707               	bsf	7,6	;volatile
  3368                           
  3369                           ;hd44780.c: 196: PORTC|=((0b00000010)<<0);
  3370  02C6  1487               	bsf	7,1	;volatile
  3371                           
  3372                           ;hd44780.c: 197: _delay((unsigned long)((8)*(2000000L/4000000.0)));
  3373  02C7  2AC8               	nop2	;2 cycle nop
  3374  02C8  2AC9               	nop2	;2 cycle nop
  3375                           
  3376                           ;hd44780.c: 198: (RC6=0);
  3377  02C9  1283               	bcf	3,5	;RP0=0, select bank0
  3378  02CA  1303               	bcf	3,6	;RP1=0, select bank0
  3379  02CB  1307               	bcf	7,6	;volatile
  3380                           
  3381                           ;hd44780.c: 199: _delay((unsigned long)((8)*(2000000L/4000000.0)));
  3382  02CC  2ACD               	nop2	;2 cycle nop
  3383  02CD  2ACE               	nop2	;2 cycle nop
  3384                           
  3385                           ;hd44780.c: 202: LCDBusyLoop();
  3386  02CE  2207               	fcall	_LCDBusyLoop
  3387                           
  3388                           ;hd44780.c: 207: (LCDByte(0b00101000,0));
  3389  02CF  01F5               	clrf	LCDByte@isdata
  3390  02D0  3028               	movlw	40
  3391  02D1  21CD               	fcall	_LCDByte
  3392                           
  3393                           ;hd44780.c: 208: (LCDByte(0b00001100|style,0));
  3394  02D2  01F5               	clrf	LCDByte@isdata
  3395  02D3  087C               	movf	LCDInit@style,w
  3396  02D4  380C               	iorlw	12
  3397  02D5  21CD               	fcall	_LCDByte
  3398                           
  3399                           ;hd44780.c: 211: (LCDByte(0b01000000,0));
  3400  02D6  01F5               	clrf	LCDByte@isdata
  3401  02D7  3040               	movlw	64
  3402  02D8  21CD               	fcall	_LCDByte
  3403                           
  3404                           ;hd44780.c: 213: uint8_t __i;
  3405                           ;hd44780.c: 214: for(__i=0;__i<sizeof(__cgram);__i++)
  3406  02D9  01FD               	clrf	LCDInit@__i
  3407  02DA                     L6:	
  3408  02DA  3008               	movlw	8
  3409  02DB  027D               	subwf	LCDInit@__i,w
  3410  02DC  1803               	btfsc	3,0
  3411  02DD  0008               	return
  3412                           
  3413                           ;hd44780.c: 215: (LCDByte(__cgram[__i],1));
  3414  02DE  01F5               	clrf	LCDByte@isdata
  3415  02DF  0AF5               	incf	LCDByte@isdata,f
  3416  02E0  087D               	movf	LCDInit@__i,w
  3417  02E1  3E46               	addlw	(low (___cgram| 0))& (0+255)
  3418  02E2  0084               	movwf	4
  3419  02E3  1383               	bcf	3,7	;select IRP bank0
  3420  02E4  0800               	movf	0,w
  3421  02E5  21CD               	fcall	_LCDByte
  3422  02E6  3001               	movlw	1
  3423  02E7  1283               	bcf	3,5	;RP0=0, select bank0
  3424  02E8  1303               	bcf	3,6	;RP1=0, select bank0
  3425  02E9  00B7               	movwf	??_LCDInit
  3426  02EA  0837               	movf	??_LCDInit,w
  3427  02EB  07FD               	addwf	LCDInit@__i,f
  3428  02EC  2ADA               	goto	L6
  3429  02ED                     __end_of_LCDInit:	
  3430                           
  3431                           	psect	text12
  3432  00FA                     __ptext12:	
  3433 ;; *************** function _LCDGotoXY *****************
  3434 ;; Defined at:
  3435 ;;		line 294 in file "hd44780.c"
  3436 ;; Parameters:    Size  Location     Type
  3437 ;;  x               1    wreg     unsigned char 
  3438 ;;  y               1   12[COMMON] unsigned char 
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;  x               1   13[COMMON] unsigned char 
  3441 ;; Return value:  Size  Location     Type
  3442 ;;		None               void
  3443 ;; Registers used:
  3444 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3445 ;; Tracked objects:
  3446 ;;		On entry : 0/0
  3447 ;;		On exit  : 0/0
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMMON   BANK0   BANK1
  3450 ;;      Params:         1       0       0
  3451 ;;      Locals:         1       0       0
  3452 ;;      Temps:          0       0       0
  3453 ;;      Totals:         2       0       0
  3454 ;;Total ram usage:        2 bytes
  3455 ;; Hardware stack levels used:    1
  3456 ;; Hardware stack levels required when called:    2
  3457 ;; This function calls:
  3458 ;;		_LCDByte
  3459 ;; This function is called by:
  3460 ;;		_main
  3461 ;; This function uses a non-reentrant model
  3462 ;;
  3463                           
  3464                           
  3465                           ;psect for function _LCDGotoXY
  3466  00FA                     _LCDGotoXY:	
  3467                           
  3468                           ;incstack = 0
  3469                           ; Regs used in _LCDGotoXY: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3470                           ;LCDGotoXY@x stored from wreg
  3471  00FA  00FD               	movwf	LCDGotoXY@x
  3472                           
  3473                           ;hd44780.c: 298: if(x>=16) return;
  3474  00FB  3010               	movlw	16
  3475  00FC  027D               	subwf	LCDGotoXY@x,w
  3476  00FD  1803               	btfsc	3,0
  3477  00FE  0008               	return
  3478  00FF  2902               	goto	l1540
  3479  0100                     l72:	
  3480                           ;hd44780.c: 305: case 1:
  3481                           
  3482                           ;hd44780.c: 303: break;
  3483                           
  3484                           ;hd44780.c: 301: {
  3485                           ;hd44780.c: 302: case 0:
  3486                           
  3487                           ;hd44780.c: 300: switch(y)
  3488                           
  3489                           
  3490                           ;hd44780.c: 306: x|=0b01000000;
  3491  0100  177D               	bsf	LCDGotoXY@x,6
  3492                           
  3493                           ;hd44780.c: 308: }
  3494                           
  3495                           ;hd44780.c: 307: break;
  3496  0101  290A               	goto	l71
  3497  0102                     l1540:	
  3498  0102  087C               	movf	LCDGotoXY@y,w
  3499                           
  3500                           ; Switch size 1, requested type "space"
  3501                           ; Number of cases is 2, Range of values is 0 to 1
  3502                           ; switch strategies available:
  3503                           ; Name         Instructions Cycles
  3504                           ; simple_byte            7     4 (average)
  3505                           ; direct_byte            8     6 (fixed)
  3506                           ; jumptable            260     6 (fixed)
  3507                           ;	Chosen strategy is simple_byte
  3508  0103  3A00               	xorlw	0	; case 0
  3509  0104  1903               	skipnz
  3510  0105  290A               	goto	l71
  3511  0106  3A01               	xorlw	1	; case 1
  3512  0107  1903               	skipnz
  3513  0108  2900               	goto	l72
  3514  0109  290A               	goto	l71
  3515  010A                     l71:	
  3516                           
  3517                           ;hd44780.c: 380: x|=0b10000000;
  3518  010A  17FD               	bsf	LCDGotoXY@x,7
  3519                           
  3520                           ;hd44780.c: 381: (LCDByte(x,0));
  3521  010B  01F5               	clrf	LCDByte@isdata
  3522  010C  087D               	movf	LCDGotoXY@x,w
  3523  010D  21CD               	fcall	_LCDByte
  3524  010E  0008               	return
  3525  010F                     __end_of_LCDGotoXY:	
  3526                           
  3527                           	psect	text13
  3528  01CD                     __ptext13:	
  3529 ;; *************** function _LCDByte *****************
  3530 ;; Defined at:
  3531 ;;		line 63 in file "hd44780.c"
  3532 ;; Parameters:    Size  Location     Type
  3533 ;;  c               1    wreg     unsigned char 
  3534 ;;  isdata          1    5[COMMON] unsigned char 
  3535 ;; Auto vars:     Size  Location     Type
  3536 ;;  c               1   10[COMMON] unsigned char 
  3537 ;;  temp            1   11[COMMON] unsigned char 
  3538 ;;  ln              1    9[COMMON] unsigned char 
  3539 ;;  hn              1    8[COMMON] unsigned char 
  3540 ;; Return value:  Size  Location     Type
  3541 ;;		None               void
  3542 ;; Registers used:
  3543 ;;		wreg, status,2, status,0, pclath, cstack
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMMON   BANK0   BANK1
  3549 ;;      Params:         1       0       0
  3550 ;;      Locals:         4       0       0
  3551 ;;      Temps:          2       0       0
  3552 ;;      Totals:         7       0       0
  3553 ;;Total ram usage:        7 bytes
  3554 ;; Hardware stack levels used:    1
  3555 ;; Hardware stack levels required when called:    1
  3556 ;; This function calls:
  3557 ;;		_LCDBusyLoop
  3558 ;; This function is called by:
  3559 ;;		_LCDReset
  3560 ;;		_LCDInit
  3561 ;;		_LCDWriteString
  3562 ;;		_LCDWriteInt
  3563 ;;		_LCDGotoXY
  3564 ;;		_main
  3565 ;; This function uses a non-reentrant model
  3566 ;;
  3567                           
  3568                           
  3569                           ;psect for function _LCDByte
  3570  01CD                     _LCDByte:	
  3571                           
  3572                           ;incstack = 0
  3573                           ; Regs used in _LCDByte: [wreg+status,2+status,0+pclath+cstack]
  3574                           ;LCDByte@c stored from wreg
  3575  01CD  00FA               	movwf	LCDByte@c
  3576                           
  3577                           ;hd44780.c: 65: uint8_t hn,ln;
  3578                           ;hd44780.c: 66: uint8_t temp;
  3579                           ;hd44780.c: 68: hn=c>>4;
  3580  01CE  087A               	movf	LCDByte@c,w
  3581  01CF  00F6               	movwf	??_LCDByte
  3582  01D0  3004               	movlw	4
  3583  01D1                     u845:	
  3584  01D1  1003               	clrc
  3585  01D2  0CF6               	rrf	??_LCDByte,f
  3586  01D3  3EFF               	addlw	-1
  3587  01D4  1D03               	skipz
  3588  01D5  29D1               	goto	u845
  3589  01D6  0876               	movf	??_LCDByte,w
  3590  01D7  00F7               	movwf	??_LCDByte+1
  3591  01D8  0877               	movf	??_LCDByte+1,w
  3592  01D9  00F8               	movwf	LCDByte@hn
  3593                           
  3594                           ;hd44780.c: 69: ln=(c & 0x0F);
  3595  01DA  087A               	movf	LCDByte@c,w
  3596  01DB  390F               	andlw	15
  3597  01DC  00F6               	movwf	??_LCDByte
  3598  01DD  0876               	movf	??_LCDByte,w
  3599  01DE  00F9               	movwf	LCDByte@ln
  3600                           
  3601                           ;hd44780.c: 71: if(isdata==0)
  3602  01DF  0875               	movf	LCDByte@isdata,w
  3603  01E0  1D03               	btfss	3,2
  3604  01E1  29E6               	goto	l26
  3605                           
  3606                           ;hd44780.c: 72: (RC4=0);
  3607  01E2  1283               	bcf	3,5	;RP0=0, select bank0
  3608  01E3  1303               	bcf	3,6	;RP1=0, select bank0
  3609  01E4  1207               	bcf	7,4	;volatile
  3610  01E5  29E9               	goto	l27
  3611  01E6                     l26:	
  3612                           
  3613                           ;hd44780.c: 73: else
  3614                           ;hd44780.c: 74: (RC4=1);
  3615  01E6  1283               	bcf	3,5	;RP0=0, select bank0
  3616  01E7  1303               	bcf	3,6	;RP1=0, select bank0
  3617  01E8  1607               	bsf	7,4	;volatile
  3618  01E9                     l27:	
  3619                           
  3620                           ;hd44780.c: 76: _delay((unsigned long)((1)*(2000000L/4000000.0)));
  3621                           ;hd44780.c: 78: (RC6=1);
  3622  01E9  1283               	bcf	3,5	;RP0=0, select bank0
  3623  01EA  1303               	bcf	3,6	;RP1=0, select bank0
  3624  01EB  1707               	bsf	7,6	;volatile
  3625                           
  3626                           ;hd44780.c: 82: temp=(PORTC & (~(0X0F<<0)))|((hn<<0));
  3627  01EC  0807               	movf	7,w	;volatile
  3628  01ED  39F0               	andlw	240
  3629  01EE  0478               	iorwf	LCDByte@hn,w
  3630  01EF  00F6               	movwf	??_LCDByte
  3631  01F0  0876               	movf	??_LCDByte,w
  3632  01F1  00FB               	movwf	LCDByte@temp
  3633                           
  3634                           ;hd44780.c: 83: PORTC=temp;
  3635  01F2  087B               	movf	LCDByte@temp,w
  3636  01F3  0087               	movwf	7	;volatile
  3637                           
  3638                           ;hd44780.c: 89: (RC6=0);
  3639                           
  3640                           ;hd44780.c: 85: _delay((unsigned long)((1)*(2000000L/4000000.0)));
  3641  01F4  1283               	bcf	3,5	;RP0=0, select bank0
  3642  01F5  1303               	bcf	3,6	;RP1=0, select bank0
  3643  01F6  1307               	bcf	7,6	;volatile
  3644                           
  3645                           ;hd44780.c: 94: (RC6=1);
  3646                           
  3647                           ;hd44780.c: 91: _delay((unsigned long)((1)*(2000000L/4000000.0)));
  3648  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  3649  01F8  1303               	bcf	3,6	;RP1=0, select bank0
  3650  01F9  1707               	bsf	7,6	;volatile
  3651                           
  3652                           ;hd44780.c: 96: temp=(PORTC & (~(0X0F<<0)))|((ln<<0));
  3653  01FA  0807               	movf	7,w	;volatile
  3654  01FB  39F0               	andlw	240
  3655  01FC  0479               	iorwf	LCDByte@ln,w
  3656  01FD  00F6               	movwf	??_LCDByte
  3657  01FE  0876               	movf	??_LCDByte,w
  3658  01FF  00FB               	movwf	LCDByte@temp
  3659                           
  3660                           ;hd44780.c: 98: PORTC=temp;
  3661  0200  087B               	movf	LCDByte@temp,w
  3662  0201  0087               	movwf	7	;volatile
  3663                           
  3664                           ;hd44780.c: 104: (RC6=0);
  3665                           
  3666                           ;hd44780.c: 100: _delay((unsigned long)((1)*(2000000L/4000000.0)));
  3667  0202  1283               	bcf	3,5	;RP0=0, select bank0
  3668  0203  1303               	bcf	3,6	;RP1=0, select bank0
  3669  0204  1307               	bcf	7,6	;volatile
  3670                           
  3671                           ;hd44780.c: 108: LCDBusyLoop();
  3672                           
  3673                           ;hd44780.c: 106: _delay((unsigned long)((1)*(2000000L/4000000.0)));
  3674  0205  2207               	fcall	_LCDBusyLoop
  3675  0206  0008               	return
  3676  0207                     __end_of_LCDByte:	
  3677                           
  3678                           	psect	text14
  3679  0207                     __ptext14:	
  3680 ;; *************** function _LCDBusyLoop *****************
  3681 ;; Defined at:
  3682 ;;		line 111 in file "hd44780.c"
  3683 ;; Parameters:    Size  Location     Type
  3684 ;;		None
  3685 ;; Auto vars:     Size  Location     Type
  3686 ;;  status          1    4[COMMON] unsigned char 
  3687 ;;  temp            1    3[COMMON] unsigned char 
  3688 ;;  busy            1    2[COMMON] unsigned char 
  3689 ;; Return value:  Size  Location     Type
  3690 ;;		None               void
  3691 ;; Registers used:
  3692 ;;		wreg, status,2, status,0
  3693 ;; Tracked objects:
  3694 ;;		On entry : 0/0
  3695 ;;		On exit  : 0/0
  3696 ;;		Unchanged: 0/0
  3697 ;; Data sizes:     COMMON   BANK0   BANK1
  3698 ;;      Params:         0       0       0
  3699 ;;      Locals:         3       0       0
  3700 ;;      Temps:          2       0       0
  3701 ;;      Totals:         5       0       0
  3702 ;;Total ram usage:        5 bytes
  3703 ;; Hardware stack levels used:    1
  3704 ;; This function calls:
  3705 ;;		Nothing
  3706 ;; This function is called by:
  3707 ;;		_LCDByte
  3708 ;;		_LCDInit
  3709 ;; This function uses a non-reentrant model
  3710 ;;
  3711                           
  3712                           
  3713                           ;psect for function _LCDBusyLoop
  3714  0207                     _LCDBusyLoop:	
  3715                           
  3716                           ;hd44780.c: 115: uint8_t busy,status=0x00,temp;
  3717                           
  3718                           ;incstack = 0
  3719                           ; Regs used in _LCDBusyLoop: [wreg+status,2+status,0]
  3720  0207  01F4               	clrf	LCDBusyLoop@status
  3721                           
  3722                           ;hd44780.c: 118: TRISC|=(0x0f<<0);
  3723  0208  300F               	movlw	15
  3724  0209  00F0               	movwf	??_LCDBusyLoop
  3725  020A  0870               	movf	??_LCDBusyLoop,w
  3726  020B  1683               	bsf	3,5	;RP0=1, select bank1
  3727  020C  1303               	bcf	3,6	;RP1=0, select bank1
  3728  020D  0487               	iorwf	7,f	;volatile
  3729                           
  3730                           ;hd44780.c: 121: (RC5=1);
  3731  020E  1283               	bcf	3,5	;RP0=0, select bank0
  3732  020F  1303               	bcf	3,6	;RP1=0, select bank0
  3733  0210  1687               	bsf	7,5	;volatile
  3734                           
  3735                           ;hd44780.c: 122: (RC4=0);
  3736  0211  1207               	bcf	7,4	;volatile
  3737  0212                     l1222:	
  3738                           ;hd44780.c: 128: do
  3739                           
  3740                           ;hd44780.c: 126: _delay((unsigned long)((1)*(2000000L/4000000.0)));
  3741                           
  3742                           
  3743                           ;hd44780.c: 129: {
  3744                           ;hd44780.c: 131: (RC6=1);
  3745  0212  1283               	bcf	3,5	;RP0=0, select bank0
  3746  0213  1303               	bcf	3,6	;RP1=0, select bank0
  3747  0214  1707               	bsf	7,6	;volatile
  3748                           
  3749                           ;hd44780.c: 136: status=(PORTC>>0);
  3750                           
  3751                           ;hd44780.c: 134: _delay((unsigned long)((1)*(2000000L/4000000.0)));
  3752  0215  1283               	bcf	3,5	;RP0=0, select bank0
  3753  0216  1303               	bcf	3,6	;RP1=0, select bank0
  3754  0217  0807               	movf	7,w	;volatile
  3755  0218  00F0               	movwf	??_LCDBusyLoop
  3756  0219  0870               	movf	??_LCDBusyLoop,w
  3757  021A  00F4               	movwf	LCDBusyLoop@status
  3758                           
  3759                           ;hd44780.c: 137: status=status<<4;
  3760  021B  0874               	movf	LCDBusyLoop@status,w
  3761  021C  00F0               	movwf	??_LCDBusyLoop
  3762  021D  3003               	movlw	3
  3763  021E                     u825:	
  3764  021E  1003               	clrc
  3765  021F  0DF0               	rlf	??_LCDBusyLoop,f
  3766  0220  3EFF               	addlw	-1
  3767  0221  1D03               	skipz
  3768  0222  2A1E               	goto	u825
  3769  0223  1003               	clrc
  3770  0224  0D70               	rlf	??_LCDBusyLoop,w
  3771  0225  00F1               	movwf	??_LCDBusyLoop+1
  3772  0226  0871               	movf	??_LCDBusyLoop+1,w
  3773  0227  00F4               	movwf	LCDBusyLoop@status
  3774                           
  3775                           ;hd44780.c: 142: (RC6=0);
  3776                           
  3777                           ;hd44780.c: 139: _delay((unsigned long)((1)*(2000000L/4000000.0)));
  3778  0228  1283               	bcf	3,5	;RP0=0, select bank0
  3779  0229  1303               	bcf	3,6	;RP1=0, select bank0
  3780  022A  1307               	bcf	7,6	;volatile
  3781                           
  3782                           ;hd44780.c: 145: (RC6=1);
  3783                           
  3784                           ;hd44780.c: 143: _delay((unsigned long)((1)*(2000000L/4000000.0)));
  3785  022B  1283               	bcf	3,5	;RP0=0, select bank0
  3786  022C  1303               	bcf	3,6	;RP1=0, select bank0
  3787  022D  1707               	bsf	7,6	;volatile
  3788                           
  3789                           ;hd44780.c: 148: temp=(PORTC>>0);
  3790                           
  3791                           ;hd44780.c: 146: _delay((unsigned long)((1)*(2000000L/4000000.0)));
  3792  022E  1283               	bcf	3,5	;RP0=0, select bank0
  3793  022F  1303               	bcf	3,6	;RP1=0, select bank0
  3794  0230  0807               	movf	7,w	;volatile
  3795  0231  00F0               	movwf	??_LCDBusyLoop
  3796  0232  0870               	movf	??_LCDBusyLoop,w
  3797  0233  00F3               	movwf	LCDBusyLoop@temp
  3798                           
  3799                           ;hd44780.c: 149: temp&=0x0F;
  3800  0234  300F               	movlw	15
  3801  0235  00F0               	movwf	??_LCDBusyLoop
  3802  0236  0870               	movf	??_LCDBusyLoop,w
  3803  0237  05F3               	andwf	LCDBusyLoop@temp,f
  3804                           
  3805                           ;hd44780.c: 151: status=status|temp;
  3806  0238  0874               	movf	LCDBusyLoop@status,w
  3807  0239  0473               	iorwf	LCDBusyLoop@temp,w
  3808  023A  00F0               	movwf	??_LCDBusyLoop
  3809  023B  0870               	movf	??_LCDBusyLoop,w
  3810  023C  00F4               	movwf	LCDBusyLoop@status
  3811                           
  3812                           ;hd44780.c: 153: busy=status & 0b10000000;
  3813  023D  0874               	movf	LCDBusyLoop@status,w
  3814  023E  3980               	andlw	128
  3815  023F  00F0               	movwf	??_LCDBusyLoop
  3816  0240  0870               	movf	??_LCDBusyLoop,w
  3817  0241  00F2               	movwf	LCDBusyLoop@busy
  3818                           
  3819                           ;hd44780.c: 157: (RC6=0);
  3820                           
  3821                           ;hd44780.c: 155: _delay((unsigned long)((1)*(2000000L/4000000.0)));
  3822  0242  1283               	bcf	3,5	;RP0=0, select bank0
  3823  0243  1303               	bcf	3,6	;RP1=0, select bank0
  3824  0244  1307               	bcf	7,6	;volatile
  3825                           
  3826                           ;hd44780.c: 159: }while(busy);
  3827                           
  3828                           ;hd44780.c: 158: _delay((unsigned long)((1)*(2000000L/4000000.0)));
  3829  0245  0872               	movf	LCDBusyLoop@busy,w
  3830  0246  1D03               	btfss	3,2
  3831  0247  2A12               	goto	l1222
  3832                           
  3833                           ;hd44780.c: 161: (RC5=0);
  3834  0248  1283               	bcf	3,5	;RP0=0, select bank0
  3835  0249  1303               	bcf	3,6	;RP1=0, select bank0
  3836  024A  1287               	bcf	7,5	;volatile
  3837                           
  3838                           ;hd44780.c: 164: TRISC&=(~(0x0F<<0));
  3839  024B  30F0               	movlw	240
  3840  024C  00F0               	movwf	??_LCDBusyLoop
  3841  024D  0870               	movf	??_LCDBusyLoop,w
  3842  024E  1683               	bsf	3,5	;RP0=1, select bank1
  3843  024F  1303               	bcf	3,6	;RP1=0, select bank1
  3844  0250  0587               	andwf	7,f	;volatile
  3845  0251  0008               	return
  3846  0252                     __end_of_LCDBusyLoop:	
  3847                           
  3848                           	psect	text15
  3849  016D                     __ptext15:	
  3850 ;; *************** function _Init *****************
  3851 ;; Defined at:
  3852 ;;		line 50 in file "system.c"
  3853 ;; Parameters:    Size  Location     Type
  3854 ;;		None
  3855 ;; Auto vars:     Size  Location     Type
  3856 ;;		None
  3857 ;; Return value:  Size  Location     Type
  3858 ;;		None               void
  3859 ;; Registers used:
  3860 ;;		wreg, status,2
  3861 ;; Tracked objects:
  3862 ;;		On entry : 0/0
  3863 ;;		On exit  : 0/0
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMMON   BANK0   BANK1
  3866 ;;      Params:         0       0       0
  3867 ;;      Locals:         0       0       0
  3868 ;;      Temps:          0       0       0
  3869 ;;      Totals:         0       0       0
  3870 ;;Total ram usage:        0 bytes
  3871 ;; Hardware stack levels used:    1
  3872 ;; This function calls:
  3873 ;;		Nothing
  3874 ;; This function is called by:
  3875 ;;		_main
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           
  3880                           ;psect for function _Init
  3881  016D                     _Init:	
  3882                           
  3883                           ;system.c: 53: TRISA = 0x14;
  3884                           
  3885                           ;incstack = 0
  3886                           ; Regs used in _Init: [wreg+status,2]
  3887  016D  3014               	movlw	20
  3888  016E  1683               	bsf	3,5	;RP0=1, select bank1
  3889  016F  1303               	bcf	3,6	;RP1=0, select bank1
  3890  0170  0085               	movwf	5	;volatile
  3891                           
  3892                           ;system.c: 54: ANSELA = 0x10;
  3893  0171  3010               	movlw	16
  3894  0172  1683               	bsf	3,5	;RP0=1, select bank3
  3895  0173  1703               	bsf	3,6	;RP1=1, select bank3
  3896  0174  0085               	movwf	5	;volatile
  3897                           
  3898                           ;system.c: 55: PORTA = 0x00;
  3899  0175  1283               	bcf	3,5	;RP0=0, select bank0
  3900  0176  1303               	bcf	3,6	;RP1=0, select bank0
  3901  0177  0185               	clrf	5	;volatile
  3902                           
  3903                           ;system.c: 56: WPUA = 0x04;
  3904  0178  3004               	movlw	4
  3905  0179  1683               	bsf	3,5	;RP0=1, select bank1
  3906  017A  1303               	bcf	3,6	;RP1=0, select bank1
  3907  017B  0095               	movwf	21	;volatile
  3908                           
  3909                           ;system.c: 58: TRISB = 0x30;
  3910  017C  3030               	movlw	48
  3911  017D  0086               	movwf	6	;volatile
  3912                           
  3913                           ;system.c: 59: ANSELB = 0x30;
  3914  017E  3030               	movlw	48
  3915  017F  1683               	bsf	3,5	;RP0=1, select bank3
  3916  0180  1703               	bsf	3,6	;RP1=1, select bank3
  3917  0181  0086               	movwf	6	;volatile
  3918                           
  3919                           ;system.c: 60: PORTB = 0x40;
  3920  0182  3040               	movlw	64
  3921  0183  1283               	bcf	3,5	;RP0=0, select bank0
  3922  0184  1303               	bcf	3,6	;RP1=0, select bank0
  3923  0185  0086               	movwf	6	;volatile
  3924                           
  3925                           ;system.c: 61: WPUB = 0x00;
  3926  0186  1283               	bcf	3,5	;RP0=0, select bank2
  3927  0187  1703               	bsf	3,6	;RP1=1, select bank2
  3928  0188  0195               	clrf	21	;volatile
  3929                           
  3930                           ;system.c: 63: TRISC = 0x80;
  3931  0189  3080               	movlw	128
  3932  018A  1683               	bsf	3,5	;RP0=1, select bank1
  3933  018B  1303               	bcf	3,6	;RP1=0, select bank1
  3934  018C  0087               	movwf	7	;volatile
  3935                           
  3936                           ;system.c: 64: ANSELC = 0x80;
  3937  018D  3080               	movlw	128
  3938  018E  1683               	bsf	3,5	;RP0=1, select bank3
  3939  018F  1703               	bsf	3,6	;RP1=1, select bank3
  3940  0190  0087               	movwf	7	;volatile
  3941                           
  3942                           ;system.c: 65: PORTC = 0x00;
  3943  0191  1283               	bcf	3,5	;RP0=0, select bank0
  3944  0192  1303               	bcf	3,6	;RP1=0, select bank0
  3945  0193  0187               	clrf	7	;volatile
  3946  0194  0008               	return
  3947  0195                     __end_of_Init:	
  3948                           
  3949                           	psect	text16
  3950  00EA                     __ptext16:	
  3951 ;; *************** function _ConfigureOscillator *****************
  3952 ;; Defined at:
  3953 ;;		line 14 in file "system.c"
  3954 ;; Parameters:    Size  Location     Type
  3955 ;;		None
  3956 ;; Auto vars:     Size  Location     Type
  3957 ;;		None
  3958 ;; Return value:  Size  Location     Type
  3959 ;;		None               void
  3960 ;; Registers used:
  3961 ;;		wreg, status,2
  3962 ;; Tracked objects:
  3963 ;;		On entry : 0/0
  3964 ;;		On exit  : 0/0
  3965 ;;		Unchanged: 0/0
  3966 ;; Data sizes:     COMMON   BANK0   BANK1
  3967 ;;      Params:         0       0       0
  3968 ;;      Locals:         0       0       0
  3969 ;;      Temps:          0       0       0
  3970 ;;      Totals:         0       0       0
  3971 ;;Total ram usage:        0 bytes
  3972 ;; Hardware stack levels used:    1
  3973 ;; This function calls:
  3974 ;;		Nothing
  3975 ;; This function is called by:
  3976 ;;		_main
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           
  3981                           ;psect for function _ConfigureOscillator
  3982  00EA                     _ConfigureOscillator:	
  3983                           
  3984                           ;system.c: 16: IRCF1 = 0;
  3985                           
  3986                           ;incstack = 0
  3987                           ; Regs used in _ConfigureOscillator: [wreg+status,2]
  3988  00EA  1683               	bsf	3,5	;RP0=1, select bank1
  3989  00EB  1303               	bcf	3,6	;RP1=0, select bank1
  3990  00EC  1290               	bcf	16,5	;volatile
  3991                           
  3992                           ;system.c: 17: IRCF0 = 0;
  3993  00ED  1210               	bcf	16,4	;volatile
  3994                           
  3995                           ;system.c: 20: OSCTUNE = 0b00111110;
  3996  00EE  303E               	movlw	62
  3997  00EF  0091               	movwf	17	;volatile
  3998                           
  3999                           ;system.c: 23: TMR0 = 0;
  4000  00F0  1283               	bcf	3,5	;RP0=0, select bank0
  4001  00F1  1303               	bcf	3,6	;RP1=0, select bank0
  4002  00F2  0181               	clrf	1	;volatile
  4003                           
  4004                           ;system.c: 25: OPTION_REG = 0x47;
  4005  00F3  3047               	movlw	71
  4006  00F4  1683               	bsf	3,5	;RP0=1, select bank1
  4007  00F5  1303               	bcf	3,6	;RP1=0, select bank1
  4008  00F6  0081               	movwf	1	;volatile
  4009                           
  4010                           ;system.c: 35: FVRCON = 0xf3;
  4011  00F7  30F3               	movlw	243
  4012  00F8  009D               	movwf	29	;volatile
  4013  00F9  0008               	return
  4014  00FA                     __end_of_ConfigureOscillator:	
  4015  007E                     btemp	set	126	;btemp
  4016  007E                     wtemp	set	126
  4017  007E                     wtemp0	set	126
  4018  0080                     wtemp1	set	128
  4019  0082                     wtemp2	set	130
  4020  0084                     wtemp3	set	132
  4021  0086                     wtemp4	set	134
  4022  0088                     wtemp5	set	136
  4023  007F                     wtemp6	set	127
  4024  007E                     ttemp	set	126
  4025  007E                     ttemp0	set	126
  4026  0081                     ttemp1	set	129
  4027  0084                     ttemp2	set	132
  4028  0087                     ttemp3	set	135
  4029  007F                     ttemp4	set	127
  4030  007E                     ltemp	set	126
  4031  007E                     ltemp0	set	126
  4032  0082                     ltemp1	set	130
  4033  0086                     ltemp2	set	134
  4034  0080                     ltemp3	set	128


Data Sizes:
    Strings     64
    Constant    0
    Data        10
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     15      48
    BANK1            32      0       0

Pointer List with Targets:

    LCDWriteString@msg	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[2]), STR_10(CODE[6]), 
		 -> STR_9(CODE[2]), STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[10]), 
		 -> STR_5(CODE[10]), STR_4(CODE[14]), STR_3(CODE[2]), STR_2(CODE[2]), 
		 -> STR_1(CODE[2]), 


Critical Paths under _main in COMMON

    _main->_LCDGotoXY
    _main->_LCDInit
    _main->_LCDWriteInt
    _MoistureCheck->_Median
    _LCDWriteString->_LCDByte
    _LCDWriteInt->_LCDByte
    _LCDReset->_LCDByte
    _LCDInit->_LCDByte
    _LCDGotoXY->_LCDByte
    _LCDByte->_LCDBusyLoop

Critical Paths under _main in BANK0

    _main->_LCDWriteInt

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   14612
                                             12 BANK0      3     3      0
                            _ADCRead
                _ConfigureOscillator
                               _Init
                            _LCDByte
                          _LCDGotoXY
                            _LCDInit
                           _LCDReset
                        _LCDWriteInt
                     _LCDWriteString
                      _MoistureCheck
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _MoistureCheck                                        3     3      0    1996
                                              7 COMMON     3     3      0
                            _ADCInit
                            _ADCRead
                             _Median
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4    1576
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Median                                               7     5      2     398
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDWriteString                                       3     3      0    1547
                                             12 COMMON     1     1      0
                                              0 BANK0      2     2      0
                            _LCDByte
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         14    11      3    3675
                                             12 COMMON     2     2      0
                                              0 BANK0     12     9      3
                            _LCDByte
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     402
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     406
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _LCDReset                                             1     1      0    1039
                                             12 COMMON     1     1      0
                            _LCDByte
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              5     5      0    1224
                                             12 COMMON     2     2      0
                                              0 BANK0      3     3      0
                        _LCDBusyLoop
                            _LCDByte
 ---------------------------------------------------------------------------------
 (1) _LCDGotoXY                                            2     1      1    2516
                                             12 COMMON     2     1      1
                            _LCDByte
 ---------------------------------------------------------------------------------
 (2) _LCDByte                                              7     6      1    1017
                                              5 COMMON     7     6      1
                        _LCDBusyLoop
 ---------------------------------------------------------------------------------
 (3) _LCDBusyLoop                                          5     5      0     117
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _Init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _ConfigureOscillator
   _Init
   _LCDByte
     _LCDBusyLoop
   _LCDGotoXY
     _LCDByte
       _LCDBusyLoop
   _LCDInit
     _LCDBusyLoop
     _LCDByte
       _LCDBusyLoop
   _LCDReset
     _LCDByte
       _LCDBusyLoop
   _LCDWriteInt
     _LCDByte
       _LCDBusyLoop
     ___awdiv
     ___awmod
   _LCDWriteString
     _LCDByte
       _LCDBusyLoop
   _MoistureCheck
     _ADCInit
     _ADCRead
     _Median
     ___wmul
   ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               20      0       0       7        0.0%
BITBANK1            20      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      F      30       5       60.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3E       8        0.0%
ABS                  0      0      3E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sat Dec 05 00:41:52 2015

                ?_LCDBusyLoop 0070                             _a 002D                             _c 002E  
                           _e 0030                             _g 0031                             _t 004F  
                           pc 0002                            l26 01E6                            l27 01E9  
                          l71 010A                            l72 0100                  ___awdiv@sign 0076  
                          _dd 002F                            _hh 004E                            _hl 0032  
                          _mh 0033                            _ml 0034                            _sh 0035  
                          _sl 0036                            fsr 0004           ___wmul@multiplicand 0072  
                         l240 0126                           l164 074F                           l148 05A1  
                         l181 057C                           l175 04D6                           l256 0156  
                         _RA2 002A                           _RA5 002D                           _RC4 003C  
                         _RB6 0036                           _RC5 003D                           _RB7 0037  
                         _RC6 003E                           u825 021E                           u845 01D1  
                         u925 0157                           u935 015E                           u865 0116  
                         u985 030D                           _num 0027                           fsr0 0004  
             __end_of_ADCInit 00CF               __end_of_ADCRead 012B                           indf 0000  
                ___awmod@sign 0076       LCDWriteInt@field_length 0039               __end_of_LCDByte 0207  
             __end_of_LCDInit 02ED                  ?_LCDWriteInt 0037                   LCDByte@temp 007B  
                        l1222 0212                          l1400 0277                          l1312 013C  
                        l1322 014E                          l1412 0298                          l1404 0285  
                        l1316 0146                          l1308 0132                          l1342 02F7  
                        l1510 036C                          l1360 0318                          l1408 0290  
                        l1520 03AB                          l1512 0399                          l1370 0339  
                        l1522 03BD                          l1540 0102                          l1348 0302  
                        l1516 039D                          l1374 0341                          l1366 032E  
                        l1358 030A                          l1390 0263                          l1518 03A3  
                        l1606 04DA                          l1616 0536                          l1386 025C  
                        l1482 01BA                          l1490 0198                          l1740 06F7  
                        l1660 05E2                          l1628 0596                          l1398 0269  
                        l1486 01BE                          l1734 06CB                          l1726 069D  
                        l1592 0467                          l1584 0452                          l1672 05FB  
                        l1648 05CB                          l1594 046C                          l1746 0723  
                        l1658 05E0                          l1588 045D                          l1684 0615  
                        l1694 0629                          l1678 060B                          _ADON 00F8  
                        STR_1 0013                          STR_2 0013                          STR_3 0013  
                        STR_4 0007                          STR_5 0029                          STR_6 0015  
                        STR_7 001F                          STR_8 0033                          STR_9 0043  
                        u1005 0319                          u1015 0325                          u1025 032F  
                        u1105 027D                          u1115 0286                          u1085 026C  
                        u1245 03CA                          u1405 057A                          u1345 04A8  
                        u1355 04CB                          u1365 04F9                          u1285 041D  
                        u1605 071B                          u1375 051C                          u1295 0440  
                        u1625 0747                          u1395 0557                          u1565 06C3  
                        u1637 058A                          u1647 04CF                          u1657 0121  
                        u1585 06EF                          u1667 02A6                          _TMR0 0001  
                        _WPUA 0095                          _WPUB 0115                          _Init 016D  
                        _bres 0025                          _main 0580            __size_of_LCDGotoXY 0015  
                        btemp 007E                          ltemp 007E                          start 0000  
                        ttemp 007E                          wtemp 007E         __end_of_MoistureCheck 0580  
            __end_of_LCDReset 00E0                         ?_Init 0070                         ?_main 0070  
             __end_of___awdiv 0346                         _ADRES 001E                         STR_10 003D  
                       STR_11 0045                         STR_12 0045                         STR_13 0045  
               __CFG_WDTE$OFF 0000               __end_of___awmod 029D                  LCDInit@style 007C  
             ___awdiv@divisor 0070                         _IRCF0 0484                         _IRCF1 0485  
             ___awdiv@counter 0075                         _PORTA 0005                         _PORTB 0006  
                       _PORTC 0007                         _TRISA 0085                         _TRISB 0086  
                       _TRISC 0087           _ConfigureOscillator 00EA                 __CFG_PWRTE$ON 0000  
                       _ofnum 0029                __CFG_BOREN$OFF 0000                         pclath 000A  
                       ltemp0 007E                         ltemp1 0082                         ltemp2 0086  
                       ltemp3 0080                         ttemp0 007E                         ttemp1 0081  
                       ttemp2 0084                         ttemp3 0087                         ttemp4 007F  
                       status 0003                         wtemp0 007E                         wtemp1 0080  
                       wtemp2 0082                         wtemp3 0084                         wtemp4 0086  
                       wtemp5 0088                         wtemp6 007F          ?_ConfigureOscillator 0070  
             __initialization 07E5                  __end_of_Init 0195                  __end_of_main 07E5  
                   ??_ADCInit 0070                     ??_ADCRead 0070                        ??_Init 0070  
                      ??_main 0043             __end_of_LCDGotoXY 010F                 LCDByte@isdata 0075  
                   ??_LCDByte 0076                     ??_LCDInit 0037                     ADCRead@ch 0071  
                      _ADCON0 001F                        _ADCON1 009F              ___awdiv@dividend 0072  
                      _ANSELA 0185                        _ANSELB 0186                        _ANSELC 0187  
                      _FVRCON 009D                        _TMR0IF 005A         ??_ConfigureOscillator 0070  
                      _Median 012B                _LCDWriteString 0195                        ___wmul 014C  
                   ??___awdiv 0074                     ??___awmod 0074          __size_of_LCDBusyLoop 004B  
            ___awdiv@quotient 0077               ___awmod@divisor 0070               ___awmod@counter 0075  
                LCDWriteInt@i 0041                  LCDWriteInt@j 003F          __size_of_LCDWriteInt 009A  
     __end_of__initialization 07FE                     ?_LCDReset 0070        __end_of_LCDWriteString 01CD  
                   LCDByte@hn 0078                     LCDByte@ln 0079                __pcstackCOMMON 0070  
                __pidataBANK0 00E0                 LCDReset@style 007C                    __pbssBANK0 0020  
                  ??_LCDReset 007C               ?_LCDWriteString 0070                       ?_Median 0070  
                  __pmaintext 0580                       ?___wmul 0070                       _ADCInit 00CA  
                     _ADCRead 010F                       _LCDByte 01CD                       _LCDInit 029D  
                     _OSCTUNE 0091                       Median@a 0074                       Median@b 0075  
                     Median@c 0070                       Median@d 0076                       Median@e 0071  
                     Median@f 0073                    __stringtab 0001               __size_of_Median 0021  
                     _Watered 002C                       ___cgram 0046                       ___awdiv 02ED  
                     ___awmod 0252               __size_of___wmul 0021                       __ptext1 03E0  
                     __ptext2 014C                       __ptext3 012B                       __ptext4 010F  
                     __ptext5 00CA                       __ptext6 0195                       __ptext7 0346  
                     __ptext8 0252                       __ptext9 02ED              ___awmod@dividend 0072  
                   _LCDGotoXY 00FA                       clrloop0 00D0          end_of_initialization 07FE  
      __size_of_MoistureCheck 01A0             LCDWriteString@msg 0038                     _TRISCbits 0087  
                  ?_LCDGotoXY 007C   __end_of_ConfigureOscillator 00FA                    LCDInit@__i 007D  
                  LCDGotoXY@x 007D                    LCDGotoXY@y 007C             __size_of_LCDReset 0009  
              __end_of_Median 014C                 ??_LCDBusyLoop 0070                 _MoistureCheck 03E0  
              __end_of___wmul 016D           start_initialization 07E5                 ??_LCDWriteInt 007C  
            ??_LCDWriteString 007C                      ??_Median 0072                      ??___wmul 0074  
              ?_MoistureCheck 0070                   __pdataBANK0 0046                      ?_ADCInit 0070  
                    ?_ADCRead 0070           __end_of_LCDBusyLoop 0252                      ?_LCDByte 0075  
                    ?_LCDInit 0070                      LCDByte@c 007A                     ___latbits 0000  
               __pcstackBANK0 0037                   ??_LCDGotoXY 007D              LCDWriteInt@F1077 0020  
         __end_of_LCDWriteInt 03E0                      ?___awdiv 0070                      ?___awmod 0070  
                   __pstrings 0001               LCDBusyLoop@busy 0072               LCDBusyLoop@temp 0073  
                    _LCDReset 00D7                ___wmul@product 0074                     clear_ram0 00CF  
             ??_MoistureCheck 0077                      _GO_nDONE 00F9                   _LCDBusyLoop 0207  
            LCDWriteString@cc 0037              __size_of_ADCInit 0005              __size_of_ADCRead 001C  
                 __stringbase 0006             ___wmul@multiplier 0070              __size_of_LCDByte 003A  
            __size_of_LCDInit 0050                   _LCDWriteInt 0346                      _Setpoint 002B  
            __size_of___awdiv 0059              __size_of___awmod 004B             LCDBusyLoop@status 0074  
          __end_of__stringtab 0007                      __ptext10 00D7                      __ptext11 029D  
                    __ptext12 00FA                      __ptext13 01CD                      __ptext14 0207  
                    __ptext15 016D                      __ptext16 00EA                 __size_of_Init 0028  
               __size_of_main 0265  __size_of_ConfigureOscillator 0010                LCDWriteInt@val 0037  
              LCDWriteInt@str 003A                     stringcode 0001                    _OPTION_REG 0081  
                    stringdir 0001                      stringtab 0001            __CFG_FOSC$INTOSCIO 0000  
     __size_of_LCDWriteString 0038  
