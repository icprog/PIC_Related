

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Jul 14 10:56:51 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    62                           	dabs	1,0x620,48
    63                           	dabs	1,0x5A0,80
    64                           	dabs	1,0x530,64
    65                           	dabs	1,0x2330,0,_samples
    66                           	dabs	1,0x7E,2
    67  0000                     
    68                           ; Version 1.45
    69                           ; Generated 16/11/2017 GMT
    70                           ; 
    71                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution.
    85                           ; 
    86                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    87                           ;        software without specific prior written permission.
    88                           ; 
    89                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    90                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    91                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    92                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    93                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    94                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    95                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    96                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    97                           ; 
    98                           ; 
    99                           ; Code-generator required, PIC16F18855 Definitions
   100                           ; 
   101                           ; SFR Addresses
   102  0000                     	;# 
   103  0001                     	;# 
   104  0002                     	;# 
   105  0003                     	;# 
   106  0004                     	;# 
   107  0005                     	;# 
   108  0006                     	;# 
   109  0007                     	;# 
   110  0008                     	;# 
   111  0009                     	;# 
   112  000A                     	;# 
   113  000B                     	;# 
   114  000C                     	;# 
   115  000D                     	;# 
   116  000E                     	;# 
   117  0010                     	;# 
   118  0011                     	;# 
   119  0012                     	;# 
   120  0013                     	;# 
   121  0016                     	;# 
   122  0017                     	;# 
   123  0018                     	;# 
   124  001C                     	;# 
   125  001C                     	;# 
   126  001D                     	;# 
   127  001D                     	;# 
   128  001E                     	;# 
   129  001F                     	;# 
   130  008C                     	;# 
   131  008C                     	;# 
   132  008D                     	;# 
   133  008E                     	;# 
   134  008E                     	;# 
   135  008F                     	;# 
   136  0090                     	;# 
   137  0090                     	;# 
   138  0091                     	;# 
   139  0093                     	;# 
   140  0094                     	;# 
   141  0095                     	;# 
   142  0096                     	;# 
   143  0097                     	;# 
   144  0098                     	;# 
   145  0099                     	;# 
   146  009A                     	;# 
   147  009B                     	;# 
   148  009C                     	;# 
   149  009D                     	;# 
   150  009E                     	;# 
   151  010C                     	;# 
   152  010D                     	;# 
   153  010E                     	;# 
   154  010E                     	;# 
   155  010F                     	;# 
   156  0110                     	;# 
   157  0110                     	;# 
   158  0111                     	;# 
   159  0112                     	;# 
   160  0112                     	;# 
   161  0113                     	;# 
   162  0114                     	;# 
   163  0114                     	;# 
   164  0115                     	;# 
   165  0116                     	;# 
   166  0116                     	;# 
   167  0117                     	;# 
   168  0119                     	;# 
   169  0119                     	;# 
   170  0119                     	;# 
   171  011A                     	;# 
   172  011A                     	;# 
   173  011A                     	;# 
   174  011B                     	;# 
   175  011B                     	;# 
   176  011B                     	;# 
   177  011B                     	;# 
   178  011B                     	;# 
   179  011C                     	;# 
   180  011C                     	;# 
   181  011C                     	;# 
   182  011D                     	;# 
   183  011D                     	;# 
   184  011D                     	;# 
   185  011E                     	;# 
   186  011E                     	;# 
   187  011E                     	;# 
   188  011F                     	;# 
   189  011F                     	;# 
   190  011F                     	;# 
   191  011F                     	;# 
   192  011F                     	;# 
   193  018C                     	;# 
   194  018D                     	;# 
   195  018E                     	;# 
   196  018F                     	;# 
   197  0190                     	;# 
   198  0191                     	;# 
   199  0192                     	;# 
   200  0196                     	;# 
   201  0197                     	;# 
   202  0198                     	;# 
   203  0199                     	;# 
   204  019A                     	;# 
   205  019B                     	;# 
   206  019C                     	;# 
   207  020C                     	;# 
   208  020C                     	;# 
   209  020D                     	;# 
   210  020E                     	;# 
   211  020F                     	;# 
   212  020F                     	;# 
   213  0210                     	;# 
   214  0210                     	;# 
   215  0211                     	;# 
   216  0211                     	;# 
   217  0212                     	;# 
   218  0212                     	;# 
   219  0213                     	;# 
   220  0214                     	;# 
   221  0215                     	;# 
   222  0215                     	;# 
   223  0216                     	;# 
   224  0216                     	;# 
   225  0217                     	;# 
   226  0217                     	;# 
   227  0218                     	;# 
   228  0218                     	;# 
   229  0219                     	;# 
   230  021A                     	;# 
   231  021B                     	;# 
   232  021B                     	;# 
   233  021C                     	;# 
   234  021C                     	;# 
   235  021D                     	;# 
   236  021D                     	;# 
   237  021E                     	;# 
   238  021F                     	;# 
   239  028C                     	;# 
   240  028C                     	;# 
   241  028D                     	;# 
   242  028D                     	;# 
   243  028E                     	;# 
   244  028F                     	;# 
   245  0290                     	;# 
   246  0290                     	;# 
   247  0291                     	;# 
   248  0292                     	;# 
   249  0292                     	;# 
   250  0293                     	;# 
   251  0293                     	;# 
   252  0294                     	;# 
   253  0295                     	;# 
   254  0296                     	;# 
   255  0296                     	;# 
   256  0297                     	;# 
   257  0298                     	;# 
   258  0298                     	;# 
   259  0299                     	;# 
   260  0299                     	;# 
   261  029A                     	;# 
   262  029B                     	;# 
   263  029C                     	;# 
   264  029C                     	;# 
   265  029D                     	;# 
   266  030C                     	;# 
   267  030C                     	;# 
   268  030D                     	;# 
   269  030E                     	;# 
   270  030F                     	;# 
   271  0310                     	;# 
   272  0310                     	;# 
   273  0311                     	;# 
   274  0312                     	;# 
   275  0313                     	;# 
   276  0314                     	;# 
   277  0314                     	;# 
   278  0315                     	;# 
   279  0316                     	;# 
   280  0317                     	;# 
   281  0318                     	;# 
   282  0318                     	;# 
   283  0319                     	;# 
   284  031A                     	;# 
   285  031B                     	;# 
   286  031C                     	;# 
   287  031C                     	;# 
   288  031D                     	;# 
   289  031E                     	;# 
   290  031F                     	;# 
   291  038C                     	;# 
   292  038D                     	;# 
   293  038E                     	;# 
   294  0390                     	;# 
   295  0391                     	;# 
   296  0392                     	;# 
   297  040C                     	;# 
   298  040D                     	;# 
   299  040E                     	;# 
   300  040F                     	;# 
   301  0410                     	;# 
   302  0411                     	;# 
   303  0416                     	;# 
   304  0416                     	;# 
   305  0417                     	;# 
   306  0418                     	;# 
   307  0418                     	;# 
   308  0419                     	;# 
   309  041A                     	;# 
   310  041A                     	;# 
   311  041B                     	;# 
   312  041C                     	;# 
   313  041C                     	;# 
   314  041D                     	;# 
   315  041E                     	;# 
   316  041F                     	;# 
   317  048C                     	;# 
   318  048C                     	;# 
   319  048D                     	;# 
   320  048E                     	;# 
   321  048F                     	;# 
   322  048F                     	;# 
   323  0490                     	;# 
   324  0491                     	;# 
   325  0492                     	;# 
   326  0492                     	;# 
   327  0493                     	;# 
   328  0494                     	;# 
   329  0495                     	;# 
   330  0495                     	;# 
   331  0496                     	;# 
   332  0497                     	;# 
   333  0498                     	;# 
   334  0499                     	;# 
   335  049A                     	;# 
   336  049B                     	;# 
   337  049C                     	;# 
   338  049D                     	;# 
   339  050C                     	;# 
   340  050C                     	;# 
   341  050D                     	;# 
   342  050E                     	;# 
   343  050F                     	;# 
   344  050F                     	;# 
   345  0510                     	;# 
   346  0511                     	;# 
   347  0512                     	;# 
   348  0512                     	;# 
   349  0513                     	;# 
   350  0514                     	;# 
   351  0515                     	;# 
   352  0515                     	;# 
   353  0516                     	;# 
   354  0517                     	;# 
   355  0518                     	;# 
   356  0519                     	;# 
   357  051A                     	;# 
   358  051B                     	;# 
   359  051C                     	;# 
   360  051D                     	;# 
   361  058C                     	;# 
   362  058C                     	;# 
   363  058D                     	;# 
   364  058E                     	;# 
   365  058F                     	;# 
   366  058F                     	;# 
   367  0590                     	;# 
   368  0591                     	;# 
   369  0592                     	;# 
   370  0593                     	;# 
   371  060C                     	;# 
   372  060D                     	;# 
   373  060E                     	;# 
   374  060F                     	;# 
   375  0610                     	;# 
   376  0611                     	;# 
   377  0612                     	;# 
   378  0613                     	;# 
   379  0614                     	;# 
   380  0616                     	;# 
   381  0617                     	;# 
   382  0618                     	;# 
   383  0619                     	;# 
   384  061A                     	;# 
   385  061B                     	;# 
   386  061C                     	;# 
   387  061D                     	;# 
   388  061E                     	;# 
   389  068C                     	;# 
   390  068D                     	;# 
   391  068E                     	;# 
   392  068F                     	;# 
   393  0690                     	;# 
   394  0691                     	;# 
   395  0692                     	;# 
   396  0693                     	;# 
   397  0694                     	;# 
   398  070C                     	;# 
   399  070D                     	;# 
   400  070E                     	;# 
   401  070F                     	;# 
   402  0710                     	;# 
   403  0711                     	;# 
   404  0712                     	;# 
   405  0713                     	;# 
   406  0714                     	;# 
   407  0716                     	;# 
   408  0717                     	;# 
   409  0718                     	;# 
   410  0719                     	;# 
   411  071A                     	;# 
   412  071B                     	;# 
   413  071C                     	;# 
   414  071D                     	;# 
   415  071E                     	;# 
   416  0796                     	;# 
   417  0797                     	;# 
   418  0798                     	;# 
   419  0799                     	;# 
   420  079A                     	;# 
   421  079B                     	;# 
   422  080C                     	;# 
   423  080D                     	;# 
   424  080E                     	;# 
   425  080F                     	;# 
   426  0810                     	;# 
   427  0811                     	;# 
   428  0812                     	;# 
   429  0813                     	;# 
   430  0814                     	;# 
   431  081A                     	;# 
   432  081B                     	;# 
   433  081C                     	;# 
   434  081D                     	;# 
   435  081E                     	;# 
   436  081F                     	;# 
   437  088C                     	;# 
   438  088D                     	;# 
   439  088E                     	;# 
   440  088F                     	;# 
   441  0890                     	;# 
   442  0891                     	;# 
   443  0892                     	;# 
   444  0893                     	;# 
   445  0895                     	;# 
   446  0896                     	;# 
   447  0897                     	;# 
   448  0898                     	;# 
   449  0899                     	;# 
   450  089A                     	;# 
   451  089B                     	;# 
   452  090C                     	;# 
   453  090E                     	;# 
   454  090F                     	;# 
   455  091F                     	;# 
   456  091F                     	;# 
   457  098F                     	;# 
   458  098F                     	;# 
   459  0990                     	;# 
   460  0991                     	;# 
   461  0992                     	;# 
   462  0993                     	;# 
   463  0994                     	;# 
   464  0995                     	;# 
   465  0996                     	;# 
   466  0997                     	;# 
   467  0E0F                     	;# 
   468  0E10                     	;# 
   469  0E11                     	;# 
   470  0E12                     	;# 
   471  0E13                     	;# 
   472  0E14                     	;# 
   473  0E15                     	;# 
   474  0E16                     	;# 
   475  0E17                     	;# 
   476  0E18                     	;# 
   477  0E19                     	;# 
   478  0E1A                     	;# 
   479  0E1B                     	;# 
   480  0E1C                     	;# 
   481  0E1D                     	;# 
   482  0E1E                     	;# 
   483  0E1F                     	;# 
   484  0E20                     	;# 
   485  0E21                     	;# 
   486  0E22                     	;# 
   487  0E23                     	;# 
   488  0E24                     	;# 
   489  0E25                     	;# 
   490  0E26                     	;# 
   491  0E27                     	;# 
   492  0E28                     	;# 
   493  0E29                     	;# 
   494  0E2A                     	;# 
   495  0E2B                     	;# 
   496  0E2C                     	;# 
   497  0E2D                     	;# 
   498  0E2E                     	;# 
   499  0E2F                     	;# 
   500  0E30                     	;# 
   501  0E31                     	;# 
   502  0E32                     	;# 
   503  0E33                     	;# 
   504  0E34                     	;# 
   505  0E35                     	;# 
   506  0E36                     	;# 
   507  0E37                     	;# 
   508  0E8F                     	;# 
   509  0E90                     	;# 
   510  0E91                     	;# 
   511  0E92                     	;# 
   512  0E93                     	;# 
   513  0E94                     	;# 
   514  0E95                     	;# 
   515  0E96                     	;# 
   516  0E97                     	;# 
   517  0E9C                     	;# 
   518  0E9D                     	;# 
   519  0E9E                     	;# 
   520  0EA1                     	;# 
   521  0EA2                     	;# 
   522  0EA3                     	;# 
   523  0EA4                     	;# 
   524  0EA5                     	;# 
   525  0EA9                     	;# 
   526  0EAA                     	;# 
   527  0EAB                     	;# 
   528  0EAC                     	;# 
   529  0EB1                     	;# 
   530  0EB2                     	;# 
   531  0EB3                     	;# 
   532  0EB8                     	;# 
   533  0EB9                     	;# 
   534  0EBA                     	;# 
   535  0EBB                     	;# 
   536  0EBC                     	;# 
   537  0EBD                     	;# 
   538  0EBE                     	;# 
   539  0EC3                     	;# 
   540  0EC5                     	;# 
   541  0EC6                     	;# 
   542  0EC7                     	;# 
   543  0EC8                     	;# 
   544  0EC9                     	;# 
   545  0ECA                     	;# 
   546  0ECB                     	;# 
   547  0ECC                     	;# 
   548  0F10                     	;# 
   549  0F11                     	;# 
   550  0F12                     	;# 
   551  0F13                     	;# 
   552  0F14                     	;# 
   553  0F15                     	;# 
   554  0F16                     	;# 
   555  0F17                     	;# 
   556  0F18                     	;# 
   557  0F19                     	;# 
   558  0F1A                     	;# 
   559  0F1B                     	;# 
   560  0F1C                     	;# 
   561  0F1D                     	;# 
   562  0F1E                     	;# 
   563  0F1F                     	;# 
   564  0F20                     	;# 
   565  0F21                     	;# 
   566  0F22                     	;# 
   567  0F23                     	;# 
   568  0F24                     	;# 
   569  0F25                     	;# 
   570  0F26                     	;# 
   571  0F27                     	;# 
   572  0F38                     	;# 
   573  0F39                     	;# 
   574  0F3A                     	;# 
   575  0F3B                     	;# 
   576  0F3C                     	;# 
   577  0F3D                     	;# 
   578  0F3E                     	;# 
   579  0F3F                     	;# 
   580  0F40                     	;# 
   581  0F41                     	;# 
   582  0F43                     	;# 
   583  0F44                     	;# 
   584  0F45                     	;# 
   585  0F46                     	;# 
   586  0F47                     	;# 
   587  0F48                     	;# 
   588  0F49                     	;# 
   589  0F4A                     	;# 
   590  0F4B                     	;# 
   591  0F4C                     	;# 
   592  0F4E                     	;# 
   593  0F4F                     	;# 
   594  0F50                     	;# 
   595  0F51                     	;# 
   596  0F52                     	;# 
   597  0F53                     	;# 
   598  0F54                     	;# 
   599  0F55                     	;# 
   600  0F56                     	;# 
   601  0F57                     	;# 
   602  0F65                     	;# 
   603  0F68                     	;# 
   604  0F69                     	;# 
   605  0F6A                     	;# 
   606  0F6B                     	;# 
   607  0FE4                     	;# 
   608  0FE5                     	;# 
   609  0FE6                     	;# 
   610  0FE7                     	;# 
   611  0FE8                     	;# 
   612  0FE9                     	;# 
   613  0FEA                     	;# 
   614  0FEB                     	;# 
   615  0FED                     	;# 
   616  0FEE                     	;# 
   617  0FEF                     	;# 
   618  0000                     	;# 
   619  0001                     	;# 
   620  0002                     	;# 
   621  0003                     	;# 
   622  0004                     	;# 
   623  0005                     	;# 
   624  0006                     	;# 
   625  0007                     	;# 
   626  0008                     	;# 
   627  0009                     	;# 
   628  000A                     	;# 
   629  000B                     	;# 
   630  000C                     	;# 
   631  000D                     	;# 
   632  000E                     	;# 
   633  0010                     	;# 
   634  0011                     	;# 
   635  0012                     	;# 
   636  0013                     	;# 
   637  0016                     	;# 
   638  0017                     	;# 
   639  0018                     	;# 
   640  001C                     	;# 
   641  001C                     	;# 
   642  001D                     	;# 
   643  001D                     	;# 
   644  001E                     	;# 
   645  001F                     	;# 
   646  008C                     	;# 
   647  008C                     	;# 
   648  008D                     	;# 
   649  008E                     	;# 
   650  008E                     	;# 
   651  008F                     	;# 
   652  0090                     	;# 
   653  0090                     	;# 
   654  0091                     	;# 
   655  0093                     	;# 
   656  0094                     	;# 
   657  0095                     	;# 
   658  0096                     	;# 
   659  0097                     	;# 
   660  0098                     	;# 
   661  0099                     	;# 
   662  009A                     	;# 
   663  009B                     	;# 
   664  009C                     	;# 
   665  009D                     	;# 
   666  009E                     	;# 
   667  010C                     	;# 
   668  010D                     	;# 
   669  010E                     	;# 
   670  010E                     	;# 
   671  010F                     	;# 
   672  0110                     	;# 
   673  0110                     	;# 
   674  0111                     	;# 
   675  0112                     	;# 
   676  0112                     	;# 
   677  0113                     	;# 
   678  0114                     	;# 
   679  0114                     	;# 
   680  0115                     	;# 
   681  0116                     	;# 
   682  0116                     	;# 
   683  0117                     	;# 
   684  0119                     	;# 
   685  0119                     	;# 
   686  0119                     	;# 
   687  011A                     	;# 
   688  011A                     	;# 
   689  011A                     	;# 
   690  011B                     	;# 
   691  011B                     	;# 
   692  011B                     	;# 
   693  011B                     	;# 
   694  011B                     	;# 
   695  011C                     	;# 
   696  011C                     	;# 
   697  011C                     	;# 
   698  011D                     	;# 
   699  011D                     	;# 
   700  011D                     	;# 
   701  011E                     	;# 
   702  011E                     	;# 
   703  011E                     	;# 
   704  011F                     	;# 
   705  011F                     	;# 
   706  011F                     	;# 
   707  011F                     	;# 
   708  011F                     	;# 
   709  018C                     	;# 
   710  018D                     	;# 
   711  018E                     	;# 
   712  018F                     	;# 
   713  0190                     	;# 
   714  0191                     	;# 
   715  0192                     	;# 
   716  0196                     	;# 
   717  0197                     	;# 
   718  0198                     	;# 
   719  0199                     	;# 
   720  019A                     	;# 
   721  019B                     	;# 
   722  019C                     	;# 
   723  020C                     	;# 
   724  020C                     	;# 
   725  020D                     	;# 
   726  020E                     	;# 
   727  020F                     	;# 
   728  020F                     	;# 
   729  0210                     	;# 
   730  0210                     	;# 
   731  0211                     	;# 
   732  0211                     	;# 
   733  0212                     	;# 
   734  0212                     	;# 
   735  0213                     	;# 
   736  0214                     	;# 
   737  0215                     	;# 
   738  0215                     	;# 
   739  0216                     	;# 
   740  0216                     	;# 
   741  0217                     	;# 
   742  0217                     	;# 
   743  0218                     	;# 
   744  0218                     	;# 
   745  0219                     	;# 
   746  021A                     	;# 
   747  021B                     	;# 
   748  021B                     	;# 
   749  021C                     	;# 
   750  021C                     	;# 
   751  021D                     	;# 
   752  021D                     	;# 
   753  021E                     	;# 
   754  021F                     	;# 
   755  028C                     	;# 
   756  028C                     	;# 
   757  028D                     	;# 
   758  028D                     	;# 
   759  028E                     	;# 
   760  028F                     	;# 
   761  0290                     	;# 
   762  0290                     	;# 
   763  0291                     	;# 
   764  0292                     	;# 
   765  0292                     	;# 
   766  0293                     	;# 
   767  0293                     	;# 
   768  0294                     	;# 
   769  0295                     	;# 
   770  0296                     	;# 
   771  0296                     	;# 
   772  0297                     	;# 
   773  0298                     	;# 
   774  0298                     	;# 
   775  0299                     	;# 
   776  0299                     	;# 
   777  029A                     	;# 
   778  029B                     	;# 
   779  029C                     	;# 
   780  029C                     	;# 
   781  029D                     	;# 
   782  030C                     	;# 
   783  030C                     	;# 
   784  030D                     	;# 
   785  030E                     	;# 
   786  030F                     	;# 
   787  0310                     	;# 
   788  0310                     	;# 
   789  0311                     	;# 
   790  0312                     	;# 
   791  0313                     	;# 
   792  0314                     	;# 
   793  0314                     	;# 
   794  0315                     	;# 
   795  0316                     	;# 
   796  0317                     	;# 
   797  0318                     	;# 
   798  0318                     	;# 
   799  0319                     	;# 
   800  031A                     	;# 
   801  031B                     	;# 
   802  031C                     	;# 
   803  031C                     	;# 
   804  031D                     	;# 
   805  031E                     	;# 
   806  031F                     	;# 
   807  038C                     	;# 
   808  038D                     	;# 
   809  038E                     	;# 
   810  0390                     	;# 
   811  0391                     	;# 
   812  0392                     	;# 
   813  040C                     	;# 
   814  040D                     	;# 
   815  040E                     	;# 
   816  040F                     	;# 
   817  0410                     	;# 
   818  0411                     	;# 
   819  0416                     	;# 
   820  0416                     	;# 
   821  0417                     	;# 
   822  0418                     	;# 
   823  0418                     	;# 
   824  0419                     	;# 
   825  041A                     	;# 
   826  041A                     	;# 
   827  041B                     	;# 
   828  041C                     	;# 
   829  041C                     	;# 
   830  041D                     	;# 
   831  041E                     	;# 
   832  041F                     	;# 
   833  048C                     	;# 
   834  048C                     	;# 
   835  048D                     	;# 
   836  048E                     	;# 
   837  048F                     	;# 
   838  048F                     	;# 
   839  0490                     	;# 
   840  0491                     	;# 
   841  0492                     	;# 
   842  0492                     	;# 
   843  0493                     	;# 
   844  0494                     	;# 
   845  0495                     	;# 
   846  0495                     	;# 
   847  0496                     	;# 
   848  0497                     	;# 
   849  0498                     	;# 
   850  0499                     	;# 
   851  049A                     	;# 
   852  049B                     	;# 
   853  049C                     	;# 
   854  049D                     	;# 
   855  050C                     	;# 
   856  050C                     	;# 
   857  050D                     	;# 
   858  050E                     	;# 
   859  050F                     	;# 
   860  050F                     	;# 
   861  0510                     	;# 
   862  0511                     	;# 
   863  0512                     	;# 
   864  0512                     	;# 
   865  0513                     	;# 
   866  0514                     	;# 
   867  0515                     	;# 
   868  0515                     	;# 
   869  0516                     	;# 
   870  0517                     	;# 
   871  0518                     	;# 
   872  0519                     	;# 
   873  051A                     	;# 
   874  051B                     	;# 
   875  051C                     	;# 
   876  051D                     	;# 
   877  058C                     	;# 
   878  058C                     	;# 
   879  058D                     	;# 
   880  058E                     	;# 
   881  058F                     	;# 
   882  058F                     	;# 
   883  0590                     	;# 
   884  0591                     	;# 
   885  0592                     	;# 
   886  0593                     	;# 
   887  060C                     	;# 
   888  060D                     	;# 
   889  060E                     	;# 
   890  060F                     	;# 
   891  0610                     	;# 
   892  0611                     	;# 
   893  0612                     	;# 
   894  0613                     	;# 
   895  0614                     	;# 
   896  0616                     	;# 
   897  0617                     	;# 
   898  0618                     	;# 
   899  0619                     	;# 
   900  061A                     	;# 
   901  061B                     	;# 
   902  061C                     	;# 
   903  061D                     	;# 
   904  061E                     	;# 
   905  068C                     	;# 
   906  068D                     	;# 
   907  068E                     	;# 
   908  068F                     	;# 
   909  0690                     	;# 
   910  0691                     	;# 
   911  0692                     	;# 
   912  0693                     	;# 
   913  0694                     	;# 
   914  070C                     	;# 
   915  070D                     	;# 
   916  070E                     	;# 
   917  070F                     	;# 
   918  0710                     	;# 
   919  0711                     	;# 
   920  0712                     	;# 
   921  0713                     	;# 
   922  0714                     	;# 
   923  0716                     	;# 
   924  0717                     	;# 
   925  0718                     	;# 
   926  0719                     	;# 
   927  071A                     	;# 
   928  071B                     	;# 
   929  071C                     	;# 
   930  071D                     	;# 
   931  071E                     	;# 
   932  0796                     	;# 
   933  0797                     	;# 
   934  0798                     	;# 
   935  0799                     	;# 
   936  079A                     	;# 
   937  079B                     	;# 
   938  080C                     	;# 
   939  080D                     	;# 
   940  080E                     	;# 
   941  080F                     	;# 
   942  0810                     	;# 
   943  0811                     	;# 
   944  0812                     	;# 
   945  0813                     	;# 
   946  0814                     	;# 
   947  081A                     	;# 
   948  081B                     	;# 
   949  081C                     	;# 
   950  081D                     	;# 
   951  081E                     	;# 
   952  081F                     	;# 
   953  088C                     	;# 
   954  088D                     	;# 
   955  088E                     	;# 
   956  088F                     	;# 
   957  0890                     	;# 
   958  0891                     	;# 
   959  0892                     	;# 
   960  0893                     	;# 
   961  0895                     	;# 
   962  0896                     	;# 
   963  0897                     	;# 
   964  0898                     	;# 
   965  0899                     	;# 
   966  089A                     	;# 
   967  089B                     	;# 
   968  090C                     	;# 
   969  090E                     	;# 
   970  090F                     	;# 
   971  091F                     	;# 
   972  091F                     	;# 
   973  098F                     	;# 
   974  098F                     	;# 
   975  0990                     	;# 
   976  0991                     	;# 
   977  0992                     	;# 
   978  0993                     	;# 
   979  0994                     	;# 
   980  0995                     	;# 
   981  0996                     	;# 
   982  0997                     	;# 
   983  0E0F                     	;# 
   984  0E10                     	;# 
   985  0E11                     	;# 
   986  0E12                     	;# 
   987  0E13                     	;# 
   988  0E14                     	;# 
   989  0E15                     	;# 
   990  0E16                     	;# 
   991  0E17                     	;# 
   992  0E18                     	;# 
   993  0E19                     	;# 
   994  0E1A                     	;# 
   995  0E1B                     	;# 
   996  0E1C                     	;# 
   997  0E1D                     	;# 
   998  0E1E                     	;# 
   999  0E1F                     	;# 
  1000  0E20                     	;# 
  1001  0E21                     	;# 
  1002  0E22                     	;# 
  1003  0E23                     	;# 
  1004  0E24                     	;# 
  1005  0E25                     	;# 
  1006  0E26                     	;# 
  1007  0E27                     	;# 
  1008  0E28                     	;# 
  1009  0E29                     	;# 
  1010  0E2A                     	;# 
  1011  0E2B                     	;# 
  1012  0E2C                     	;# 
  1013  0E2D                     	;# 
  1014  0E2E                     	;# 
  1015  0E2F                     	;# 
  1016  0E30                     	;# 
  1017  0E31                     	;# 
  1018  0E32                     	;# 
  1019  0E33                     	;# 
  1020  0E34                     	;# 
  1021  0E35                     	;# 
  1022  0E36                     	;# 
  1023  0E37                     	;# 
  1024  0E8F                     	;# 
  1025  0E90                     	;# 
  1026  0E91                     	;# 
  1027  0E92                     	;# 
  1028  0E93                     	;# 
  1029  0E94                     	;# 
  1030  0E95                     	;# 
  1031  0E96                     	;# 
  1032  0E97                     	;# 
  1033  0E9C                     	;# 
  1034  0E9D                     	;# 
  1035  0E9E                     	;# 
  1036  0EA1                     	;# 
  1037  0EA2                     	;# 
  1038  0EA3                     	;# 
  1039  0EA4                     	;# 
  1040  0EA5                     	;# 
  1041  0EA9                     	;# 
  1042  0EAA                     	;# 
  1043  0EAB                     	;# 
  1044  0EAC                     	;# 
  1045  0EB1                     	;# 
  1046  0EB2                     	;# 
  1047  0EB3                     	;# 
  1048  0EB8                     	;# 
  1049  0EB9                     	;# 
  1050  0EBA                     	;# 
  1051  0EBB                     	;# 
  1052  0EBC                     	;# 
  1053  0EBD                     	;# 
  1054  0EBE                     	;# 
  1055  0EC3                     	;# 
  1056  0EC5                     	;# 
  1057  0EC6                     	;# 
  1058  0EC7                     	;# 
  1059  0EC8                     	;# 
  1060  0EC9                     	;# 
  1061  0ECA                     	;# 
  1062  0ECB                     	;# 
  1063  0ECC                     	;# 
  1064  0F10                     	;# 
  1065  0F11                     	;# 
  1066  0F12                     	;# 
  1067  0F13                     	;# 
  1068  0F14                     	;# 
  1069  0F15                     	;# 
  1070  0F16                     	;# 
  1071  0F17                     	;# 
  1072  0F18                     	;# 
  1073  0F19                     	;# 
  1074  0F1A                     	;# 
  1075  0F1B                     	;# 
  1076  0F1C                     	;# 
  1077  0F1D                     	;# 
  1078  0F1E                     	;# 
  1079  0F1F                     	;# 
  1080  0F20                     	;# 
  1081  0F21                     	;# 
  1082  0F22                     	;# 
  1083  0F23                     	;# 
  1084  0F24                     	;# 
  1085  0F25                     	;# 
  1086  0F26                     	;# 
  1087  0F27                     	;# 
  1088  0F38                     	;# 
  1089  0F39                     	;# 
  1090  0F3A                     	;# 
  1091  0F3B                     	;# 
  1092  0F3C                     	;# 
  1093  0F3D                     	;# 
  1094  0F3E                     	;# 
  1095  0F3F                     	;# 
  1096  0F40                     	;# 
  1097  0F41                     	;# 
  1098  0F43                     	;# 
  1099  0F44                     	;# 
  1100  0F45                     	;# 
  1101  0F46                     	;# 
  1102  0F47                     	;# 
  1103  0F48                     	;# 
  1104  0F49                     	;# 
  1105  0F4A                     	;# 
  1106  0F4B                     	;# 
  1107  0F4C                     	;# 
  1108  0F4E                     	;# 
  1109  0F4F                     	;# 
  1110  0F50                     	;# 
  1111  0F51                     	;# 
  1112  0F52                     	;# 
  1113  0F53                     	;# 
  1114  0F54                     	;# 
  1115  0F55                     	;# 
  1116  0F56                     	;# 
  1117  0F57                     	;# 
  1118  0F65                     	;# 
  1119  0F68                     	;# 
  1120  0F69                     	;# 
  1121  0F6A                     	;# 
  1122  0F6B                     	;# 
  1123  0FE4                     	;# 
  1124  0FE5                     	;# 
  1125  0FE6                     	;# 
  1126  0FE7                     	;# 
  1127  0FE8                     	;# 
  1128  0FE9                     	;# 
  1129  0FEA                     	;# 
  1130  0FEB                     	;# 
  1131  0FED                     	;# 
  1132  0FEE                     	;# 
  1133  0FEF                     	;# 
  1134  0000                     	;# 
  1135  0001                     	;# 
  1136  0002                     	;# 
  1137  0003                     	;# 
  1138  0004                     	;# 
  1139  0005                     	;# 
  1140  0006                     	;# 
  1141  0007                     	;# 
  1142  0008                     	;# 
  1143  0009                     	;# 
  1144  000A                     	;# 
  1145  000B                     	;# 
  1146  000C                     	;# 
  1147  000D                     	;# 
  1148  000E                     	;# 
  1149  0010                     	;# 
  1150  0011                     	;# 
  1151  0012                     	;# 
  1152  0013                     	;# 
  1153  0016                     	;# 
  1154  0017                     	;# 
  1155  0018                     	;# 
  1156  001C                     	;# 
  1157  001C                     	;# 
  1158  001D                     	;# 
  1159  001D                     	;# 
  1160  001E                     	;# 
  1161  001F                     	;# 
  1162  008C                     	;# 
  1163  008C                     	;# 
  1164  008D                     	;# 
  1165  008E                     	;# 
  1166  008E                     	;# 
  1167  008F                     	;# 
  1168  0090                     	;# 
  1169  0090                     	;# 
  1170  0091                     	;# 
  1171  0093                     	;# 
  1172  0094                     	;# 
  1173  0095                     	;# 
  1174  0096                     	;# 
  1175  0097                     	;# 
  1176  0098                     	;# 
  1177  0099                     	;# 
  1178  009A                     	;# 
  1179  009B                     	;# 
  1180  009C                     	;# 
  1181  009D                     	;# 
  1182  009E                     	;# 
  1183  010C                     	;# 
  1184  010D                     	;# 
  1185  010E                     	;# 
  1186  010E                     	;# 
  1187  010F                     	;# 
  1188  0110                     	;# 
  1189  0110                     	;# 
  1190  0111                     	;# 
  1191  0112                     	;# 
  1192  0112                     	;# 
  1193  0113                     	;# 
  1194  0114                     	;# 
  1195  0114                     	;# 
  1196  0115                     	;# 
  1197  0116                     	;# 
  1198  0116                     	;# 
  1199  0117                     	;# 
  1200  0119                     	;# 
  1201  0119                     	;# 
  1202  0119                     	;# 
  1203  011A                     	;# 
  1204  011A                     	;# 
  1205  011A                     	;# 
  1206  011B                     	;# 
  1207  011B                     	;# 
  1208  011B                     	;# 
  1209  011B                     	;# 
  1210  011B                     	;# 
  1211  011C                     	;# 
  1212  011C                     	;# 
  1213  011C                     	;# 
  1214  011D                     	;# 
  1215  011D                     	;# 
  1216  011D                     	;# 
  1217  011E                     	;# 
  1218  011E                     	;# 
  1219  011E                     	;# 
  1220  011F                     	;# 
  1221  011F                     	;# 
  1222  011F                     	;# 
  1223  011F                     	;# 
  1224  011F                     	;# 
  1225  018C                     	;# 
  1226  018D                     	;# 
  1227  018E                     	;# 
  1228  018F                     	;# 
  1229  0190                     	;# 
  1230  0191                     	;# 
  1231  0192                     	;# 
  1232  0196                     	;# 
  1233  0197                     	;# 
  1234  0198                     	;# 
  1235  0199                     	;# 
  1236  019A                     	;# 
  1237  019B                     	;# 
  1238  019C                     	;# 
  1239  020C                     	;# 
  1240  020C                     	;# 
  1241  020D                     	;# 
  1242  020E                     	;# 
  1243  020F                     	;# 
  1244  020F                     	;# 
  1245  0210                     	;# 
  1246  0210                     	;# 
  1247  0211                     	;# 
  1248  0211                     	;# 
  1249  0212                     	;# 
  1250  0212                     	;# 
  1251  0213                     	;# 
  1252  0214                     	;# 
  1253  0215                     	;# 
  1254  0215                     	;# 
  1255  0216                     	;# 
  1256  0216                     	;# 
  1257  0217                     	;# 
  1258  0217                     	;# 
  1259  0218                     	;# 
  1260  0218                     	;# 
  1261  0219                     	;# 
  1262  021A                     	;# 
  1263  021B                     	;# 
  1264  021B                     	;# 
  1265  021C                     	;# 
  1266  021C                     	;# 
  1267  021D                     	;# 
  1268  021D                     	;# 
  1269  021E                     	;# 
  1270  021F                     	;# 
  1271  028C                     	;# 
  1272  028C                     	;# 
  1273  028D                     	;# 
  1274  028D                     	;# 
  1275  028E                     	;# 
  1276  028F                     	;# 
  1277  0290                     	;# 
  1278  0290                     	;# 
  1279  0291                     	;# 
  1280  0292                     	;# 
  1281  0292                     	;# 
  1282  0293                     	;# 
  1283  0293                     	;# 
  1284  0294                     	;# 
  1285  0295                     	;# 
  1286  0296                     	;# 
  1287  0296                     	;# 
  1288  0297                     	;# 
  1289  0298                     	;# 
  1290  0298                     	;# 
  1291  0299                     	;# 
  1292  0299                     	;# 
  1293  029A                     	;# 
  1294  029B                     	;# 
  1295  029C                     	;# 
  1296  029C                     	;# 
  1297  029D                     	;# 
  1298  030C                     	;# 
  1299  030C                     	;# 
  1300  030D                     	;# 
  1301  030E                     	;# 
  1302  030F                     	;# 
  1303  0310                     	;# 
  1304  0310                     	;# 
  1305  0311                     	;# 
  1306  0312                     	;# 
  1307  0313                     	;# 
  1308  0314                     	;# 
  1309  0314                     	;# 
  1310  0315                     	;# 
  1311  0316                     	;# 
  1312  0317                     	;# 
  1313  0318                     	;# 
  1314  0318                     	;# 
  1315  0319                     	;# 
  1316  031A                     	;# 
  1317  031B                     	;# 
  1318  031C                     	;# 
  1319  031C                     	;# 
  1320  031D                     	;# 
  1321  031E                     	;# 
  1322  031F                     	;# 
  1323  038C                     	;# 
  1324  038D                     	;# 
  1325  038E                     	;# 
  1326  0390                     	;# 
  1327  0391                     	;# 
  1328  0392                     	;# 
  1329  040C                     	;# 
  1330  040D                     	;# 
  1331  040E                     	;# 
  1332  040F                     	;# 
  1333  0410                     	;# 
  1334  0411                     	;# 
  1335  0416                     	;# 
  1336  0416                     	;# 
  1337  0417                     	;# 
  1338  0418                     	;# 
  1339  0418                     	;# 
  1340  0419                     	;# 
  1341  041A                     	;# 
  1342  041A                     	;# 
  1343  041B                     	;# 
  1344  041C                     	;# 
  1345  041C                     	;# 
  1346  041D                     	;# 
  1347  041E                     	;# 
  1348  041F                     	;# 
  1349  048C                     	;# 
  1350  048C                     	;# 
  1351  048D                     	;# 
  1352  048E                     	;# 
  1353  048F                     	;# 
  1354  048F                     	;# 
  1355  0490                     	;# 
  1356  0491                     	;# 
  1357  0492                     	;# 
  1358  0492                     	;# 
  1359  0493                     	;# 
  1360  0494                     	;# 
  1361  0495                     	;# 
  1362  0495                     	;# 
  1363  0496                     	;# 
  1364  0497                     	;# 
  1365  0498                     	;# 
  1366  0499                     	;# 
  1367  049A                     	;# 
  1368  049B                     	;# 
  1369  049C                     	;# 
  1370  049D                     	;# 
  1371  050C                     	;# 
  1372  050C                     	;# 
  1373  050D                     	;# 
  1374  050E                     	;# 
  1375  050F                     	;# 
  1376  050F                     	;# 
  1377  0510                     	;# 
  1378  0511                     	;# 
  1379  0512                     	;# 
  1380  0512                     	;# 
  1381  0513                     	;# 
  1382  0514                     	;# 
  1383  0515                     	;# 
  1384  0515                     	;# 
  1385  0516                     	;# 
  1386  0517                     	;# 
  1387  0518                     	;# 
  1388  0519                     	;# 
  1389  051A                     	;# 
  1390  051B                     	;# 
  1391  051C                     	;# 
  1392  051D                     	;# 
  1393  058C                     	;# 
  1394  058C                     	;# 
  1395  058D                     	;# 
  1396  058E                     	;# 
  1397  058F                     	;# 
  1398  058F                     	;# 
  1399  0590                     	;# 
  1400  0591                     	;# 
  1401  0592                     	;# 
  1402  0593                     	;# 
  1403  060C                     	;# 
  1404  060D                     	;# 
  1405  060E                     	;# 
  1406  060F                     	;# 
  1407  0610                     	;# 
  1408  0611                     	;# 
  1409  0612                     	;# 
  1410  0613                     	;# 
  1411  0614                     	;# 
  1412  0616                     	;# 
  1413  0617                     	;# 
  1414  0618                     	;# 
  1415  0619                     	;# 
  1416  061A                     	;# 
  1417  061B                     	;# 
  1418  061C                     	;# 
  1419  061D                     	;# 
  1420  061E                     	;# 
  1421  068C                     	;# 
  1422  068D                     	;# 
  1423  068E                     	;# 
  1424  068F                     	;# 
  1425  0690                     	;# 
  1426  0691                     	;# 
  1427  0692                     	;# 
  1428  0693                     	;# 
  1429  0694                     	;# 
  1430  070C                     	;# 
  1431  070D                     	;# 
  1432  070E                     	;# 
  1433  070F                     	;# 
  1434  0710                     	;# 
  1435  0711                     	;# 
  1436  0712                     	;# 
  1437  0713                     	;# 
  1438  0714                     	;# 
  1439  0716                     	;# 
  1440  0717                     	;# 
  1441  0718                     	;# 
  1442  0719                     	;# 
  1443  071A                     	;# 
  1444  071B                     	;# 
  1445  071C                     	;# 
  1446  071D                     	;# 
  1447  071E                     	;# 
  1448  0796                     	;# 
  1449  0797                     	;# 
  1450  0798                     	;# 
  1451  0799                     	;# 
  1452  079A                     	;# 
  1453  079B                     	;# 
  1454  080C                     	;# 
  1455  080D                     	;# 
  1456  080E                     	;# 
  1457  080F                     	;# 
  1458  0810                     	;# 
  1459  0811                     	;# 
  1460  0812                     	;# 
  1461  0813                     	;# 
  1462  0814                     	;# 
  1463  081A                     	;# 
  1464  081B                     	;# 
  1465  081C                     	;# 
  1466  081D                     	;# 
  1467  081E                     	;# 
  1468  081F                     	;# 
  1469  088C                     	;# 
  1470  088D                     	;# 
  1471  088E                     	;# 
  1472  088F                     	;# 
  1473  0890                     	;# 
  1474  0891                     	;# 
  1475  0892                     	;# 
  1476  0893                     	;# 
  1477  0895                     	;# 
  1478  0896                     	;# 
  1479  0897                     	;# 
  1480  0898                     	;# 
  1481  0899                     	;# 
  1482  089A                     	;# 
  1483  089B                     	;# 
  1484  090C                     	;# 
  1485  090E                     	;# 
  1486  090F                     	;# 
  1487  091F                     	;# 
  1488  091F                     	;# 
  1489  098F                     	;# 
  1490  098F                     	;# 
  1491  0990                     	;# 
  1492  0991                     	;# 
  1493  0992                     	;# 
  1494  0993                     	;# 
  1495  0994                     	;# 
  1496  0995                     	;# 
  1497  0996                     	;# 
  1498  0997                     	;# 
  1499  0E0F                     	;# 
  1500  0E10                     	;# 
  1501  0E11                     	;# 
  1502  0E12                     	;# 
  1503  0E13                     	;# 
  1504  0E14                     	;# 
  1505  0E15                     	;# 
  1506  0E16                     	;# 
  1507  0E17                     	;# 
  1508  0E18                     	;# 
  1509  0E19                     	;# 
  1510  0E1A                     	;# 
  1511  0E1B                     	;# 
  1512  0E1C                     	;# 
  1513  0E1D                     	;# 
  1514  0E1E                     	;# 
  1515  0E1F                     	;# 
  1516  0E20                     	;# 
  1517  0E21                     	;# 
  1518  0E22                     	;# 
  1519  0E23                     	;# 
  1520  0E24                     	;# 
  1521  0E25                     	;# 
  1522  0E26                     	;# 
  1523  0E27                     	;# 
  1524  0E28                     	;# 
  1525  0E29                     	;# 
  1526  0E2A                     	;# 
  1527  0E2B                     	;# 
  1528  0E2C                     	;# 
  1529  0E2D                     	;# 
  1530  0E2E                     	;# 
  1531  0E2F                     	;# 
  1532  0E30                     	;# 
  1533  0E31                     	;# 
  1534  0E32                     	;# 
  1535  0E33                     	;# 
  1536  0E34                     	;# 
  1537  0E35                     	;# 
  1538  0E36                     	;# 
  1539  0E37                     	;# 
  1540  0E8F                     	;# 
  1541  0E90                     	;# 
  1542  0E91                     	;# 
  1543  0E92                     	;# 
  1544  0E93                     	;# 
  1545  0E94                     	;# 
  1546  0E95                     	;# 
  1547  0E96                     	;# 
  1548  0E97                     	;# 
  1549  0E9C                     	;# 
  1550  0E9D                     	;# 
  1551  0E9E                     	;# 
  1552  0EA1                     	;# 
  1553  0EA2                     	;# 
  1554  0EA3                     	;# 
  1555  0EA4                     	;# 
  1556  0EA5                     	;# 
  1557  0EA9                     	;# 
  1558  0EAA                     	;# 
  1559  0EAB                     	;# 
  1560  0EAC                     	;# 
  1561  0EB1                     	;# 
  1562  0EB2                     	;# 
  1563  0EB3                     	;# 
  1564  0EB8                     	;# 
  1565  0EB9                     	;# 
  1566  0EBA                     	;# 
  1567  0EBB                     	;# 
  1568  0EBC                     	;# 
  1569  0EBD                     	;# 
  1570  0EBE                     	;# 
  1571  0EC3                     	;# 
  1572  0EC5                     	;# 
  1573  0EC6                     	;# 
  1574  0EC7                     	;# 
  1575  0EC8                     	;# 
  1576  0EC9                     	;# 
  1577  0ECA                     	;# 
  1578  0ECB                     	;# 
  1579  0ECC                     	;# 
  1580  0F10                     	;# 
  1581  0F11                     	;# 
  1582  0F12                     	;# 
  1583  0F13                     	;# 
  1584  0F14                     	;# 
  1585  0F15                     	;# 
  1586  0F16                     	;# 
  1587  0F17                     	;# 
  1588  0F18                     	;# 
  1589  0F19                     	;# 
  1590  0F1A                     	;# 
  1591  0F1B                     	;# 
  1592  0F1C                     	;# 
  1593  0F1D                     	;# 
  1594  0F1E                     	;# 
  1595  0F1F                     	;# 
  1596  0F20                     	;# 
  1597  0F21                     	;# 
  1598  0F22                     	;# 
  1599  0F23                     	;# 
  1600  0F24                     	;# 
  1601  0F25                     	;# 
  1602  0F26                     	;# 
  1603  0F27                     	;# 
  1604  0F38                     	;# 
  1605  0F39                     	;# 
  1606  0F3A                     	;# 
  1607  0F3B                     	;# 
  1608  0F3C                     	;# 
  1609  0F3D                     	;# 
  1610  0F3E                     	;# 
  1611  0F3F                     	;# 
  1612  0F40                     	;# 
  1613  0F41                     	;# 
  1614  0F43                     	;# 
  1615  0F44                     	;# 
  1616  0F45                     	;# 
  1617  0F46                     	;# 
  1618  0F47                     	;# 
  1619  0F48                     	;# 
  1620  0F49                     	;# 
  1621  0F4A                     	;# 
  1622  0F4B                     	;# 
  1623  0F4C                     	;# 
  1624  0F4E                     	;# 
  1625  0F4F                     	;# 
  1626  0F50                     	;# 
  1627  0F51                     	;# 
  1628  0F52                     	;# 
  1629  0F53                     	;# 
  1630  0F54                     	;# 
  1631  0F55                     	;# 
  1632  0F56                     	;# 
  1633  0F57                     	;# 
  1634  0F65                     	;# 
  1635  0F68                     	;# 
  1636  0F69                     	;# 
  1637  0F6A                     	;# 
  1638  0F6B                     	;# 
  1639  0FE4                     	;# 
  1640  0FE5                     	;# 
  1641  0FE6                     	;# 
  1642  0FE7                     	;# 
  1643  0FE8                     	;# 
  1644  0FE9                     	;# 
  1645  0FEA                     	;# 
  1646  0FEB                     	;# 
  1647  0FED                     	;# 
  1648  0FEE                     	;# 
  1649  0FEF                     	;# 
  1650  0000                     	;# 
  1651  0001                     	;# 
  1652  0002                     	;# 
  1653  0003                     	;# 
  1654  0004                     	;# 
  1655  0005                     	;# 
  1656  0006                     	;# 
  1657  0007                     	;# 
  1658  0008                     	;# 
  1659  0009                     	;# 
  1660  000A                     	;# 
  1661  000B                     	;# 
  1662  000C                     	;# 
  1663  000D                     	;# 
  1664  000E                     	;# 
  1665  0010                     	;# 
  1666  0011                     	;# 
  1667  0012                     	;# 
  1668  0013                     	;# 
  1669  0016                     	;# 
  1670  0017                     	;# 
  1671  0018                     	;# 
  1672  001C                     	;# 
  1673  001C                     	;# 
  1674  001D                     	;# 
  1675  001D                     	;# 
  1676  001E                     	;# 
  1677  001F                     	;# 
  1678  008C                     	;# 
  1679  008C                     	;# 
  1680  008D                     	;# 
  1681  008E                     	;# 
  1682  008E                     	;# 
  1683  008F                     	;# 
  1684  0090                     	;# 
  1685  0090                     	;# 
  1686  0091                     	;# 
  1687  0093                     	;# 
  1688  0094                     	;# 
  1689  0095                     	;# 
  1690  0096                     	;# 
  1691  0097                     	;# 
  1692  0098                     	;# 
  1693  0099                     	;# 
  1694  009A                     	;# 
  1695  009B                     	;# 
  1696  009C                     	;# 
  1697  009D                     	;# 
  1698  009E                     	;# 
  1699  010C                     	;# 
  1700  010D                     	;# 
  1701  010E                     	;# 
  1702  010E                     	;# 
  1703  010F                     	;# 
  1704  0110                     	;# 
  1705  0110                     	;# 
  1706  0111                     	;# 
  1707  0112                     	;# 
  1708  0112                     	;# 
  1709  0113                     	;# 
  1710  0114                     	;# 
  1711  0114                     	;# 
  1712  0115                     	;# 
  1713  0116                     	;# 
  1714  0116                     	;# 
  1715  0117                     	;# 
  1716  0119                     	;# 
  1717  0119                     	;# 
  1718  0119                     	;# 
  1719  011A                     	;# 
  1720  011A                     	;# 
  1721  011A                     	;# 
  1722  011B                     	;# 
  1723  011B                     	;# 
  1724  011B                     	;# 
  1725  011B                     	;# 
  1726  011B                     	;# 
  1727  011C                     	;# 
  1728  011C                     	;# 
  1729  011C                     	;# 
  1730  011D                     	;# 
  1731  011D                     	;# 
  1732  011D                     	;# 
  1733  011E                     	;# 
  1734  011E                     	;# 
  1735  011E                     	;# 
  1736  011F                     	;# 
  1737  011F                     	;# 
  1738  011F                     	;# 
  1739  011F                     	;# 
  1740  011F                     	;# 
  1741  018C                     	;# 
  1742  018D                     	;# 
  1743  018E                     	;# 
  1744  018F                     	;# 
  1745  0190                     	;# 
  1746  0191                     	;# 
  1747  0192                     	;# 
  1748  0196                     	;# 
  1749  0197                     	;# 
  1750  0198                     	;# 
  1751  0199                     	;# 
  1752  019A                     	;# 
  1753  019B                     	;# 
  1754  019C                     	;# 
  1755  020C                     	;# 
  1756  020C                     	;# 
  1757  020D                     	;# 
  1758  020E                     	;# 
  1759  020F                     	;# 
  1760  020F                     	;# 
  1761  0210                     	;# 
  1762  0210                     	;# 
  1763  0211                     	;# 
  1764  0211                     	;# 
  1765  0212                     	;# 
  1766  0212                     	;# 
  1767  0213                     	;# 
  1768  0214                     	;# 
  1769  0215                     	;# 
  1770  0215                     	;# 
  1771  0216                     	;# 
  1772  0216                     	;# 
  1773  0217                     	;# 
  1774  0217                     	;# 
  1775  0218                     	;# 
  1776  0218                     	;# 
  1777  0219                     	;# 
  1778  021A                     	;# 
  1779  021B                     	;# 
  1780  021B                     	;# 
  1781  021C                     	;# 
  1782  021C                     	;# 
  1783  021D                     	;# 
  1784  021D                     	;# 
  1785  021E                     	;# 
  1786  021F                     	;# 
  1787  028C                     	;# 
  1788  028C                     	;# 
  1789  028D                     	;# 
  1790  028D                     	;# 
  1791  028E                     	;# 
  1792  028F                     	;# 
  1793  0290                     	;# 
  1794  0290                     	;# 
  1795  0291                     	;# 
  1796  0292                     	;# 
  1797  0292                     	;# 
  1798  0293                     	;# 
  1799  0293                     	;# 
  1800  0294                     	;# 
  1801  0295                     	;# 
  1802  0296                     	;# 
  1803  0296                     	;# 
  1804  0297                     	;# 
  1805  0298                     	;# 
  1806  0298                     	;# 
  1807  0299                     	;# 
  1808  0299                     	;# 
  1809  029A                     	;# 
  1810  029B                     	;# 
  1811  029C                     	;# 
  1812  029C                     	;# 
  1813  029D                     	;# 
  1814  030C                     	;# 
  1815  030C                     	;# 
  1816  030D                     	;# 
  1817  030E                     	;# 
  1818  030F                     	;# 
  1819  0310                     	;# 
  1820  0310                     	;# 
  1821  0311                     	;# 
  1822  0312                     	;# 
  1823  0313                     	;# 
  1824  0314                     	;# 
  1825  0314                     	;# 
  1826  0315                     	;# 
  1827  0316                     	;# 
  1828  0317                     	;# 
  1829  0318                     	;# 
  1830  0318                     	;# 
  1831  0319                     	;# 
  1832  031A                     	;# 
  1833  031B                     	;# 
  1834  031C                     	;# 
  1835  031C                     	;# 
  1836  031D                     	;# 
  1837  031E                     	;# 
  1838  031F                     	;# 
  1839  038C                     	;# 
  1840  038D                     	;# 
  1841  038E                     	;# 
  1842  0390                     	;# 
  1843  0391                     	;# 
  1844  0392                     	;# 
  1845  040C                     	;# 
  1846  040D                     	;# 
  1847  040E                     	;# 
  1848  040F                     	;# 
  1849  0410                     	;# 
  1850  0411                     	;# 
  1851  0416                     	;# 
  1852  0416                     	;# 
  1853  0417                     	;# 
  1854  0418                     	;# 
  1855  0418                     	;# 
  1856  0419                     	;# 
  1857  041A                     	;# 
  1858  041A                     	;# 
  1859  041B                     	;# 
  1860  041C                     	;# 
  1861  041C                     	;# 
  1862  041D                     	;# 
  1863  041E                     	;# 
  1864  041F                     	;# 
  1865  048C                     	;# 
  1866  048C                     	;# 
  1867  048D                     	;# 
  1868  048E                     	;# 
  1869  048F                     	;# 
  1870  048F                     	;# 
  1871  0490                     	;# 
  1872  0491                     	;# 
  1873  0492                     	;# 
  1874  0492                     	;# 
  1875  0493                     	;# 
  1876  0494                     	;# 
  1877  0495                     	;# 
  1878  0495                     	;# 
  1879  0496                     	;# 
  1880  0497                     	;# 
  1881  0498                     	;# 
  1882  0499                     	;# 
  1883  049A                     	;# 
  1884  049B                     	;# 
  1885  049C                     	;# 
  1886  049D                     	;# 
  1887  050C                     	;# 
  1888  050C                     	;# 
  1889  050D                     	;# 
  1890  050E                     	;# 
  1891  050F                     	;# 
  1892  050F                     	;# 
  1893  0510                     	;# 
  1894  0511                     	;# 
  1895  0512                     	;# 
  1896  0512                     	;# 
  1897  0513                     	;# 
  1898  0514                     	;# 
  1899  0515                     	;# 
  1900  0515                     	;# 
  1901  0516                     	;# 
  1902  0517                     	;# 
  1903  0518                     	;# 
  1904  0519                     	;# 
  1905  051A                     	;# 
  1906  051B                     	;# 
  1907  051C                     	;# 
  1908  051D                     	;# 
  1909  058C                     	;# 
  1910  058C                     	;# 
  1911  058D                     	;# 
  1912  058E                     	;# 
  1913  058F                     	;# 
  1914  058F                     	;# 
  1915  0590                     	;# 
  1916  0591                     	;# 
  1917  0592                     	;# 
  1918  0593                     	;# 
  1919  060C                     	;# 
  1920  060D                     	;# 
  1921  060E                     	;# 
  1922  060F                     	;# 
  1923  0610                     	;# 
  1924  0611                     	;# 
  1925  0612                     	;# 
  1926  0613                     	;# 
  1927  0614                     	;# 
  1928  0616                     	;# 
  1929  0617                     	;# 
  1930  0618                     	;# 
  1931  0619                     	;# 
  1932  061A                     	;# 
  1933  061B                     	;# 
  1934  061C                     	;# 
  1935  061D                     	;# 
  1936  061E                     	;# 
  1937  068C                     	;# 
  1938  068D                     	;# 
  1939  068E                     	;# 
  1940  068F                     	;# 
  1941  0690                     	;# 
  1942  0691                     	;# 
  1943  0692                     	;# 
  1944  0693                     	;# 
  1945  0694                     	;# 
  1946  070C                     	;# 
  1947  070D                     	;# 
  1948  070E                     	;# 
  1949  070F                     	;# 
  1950  0710                     	;# 
  1951  0711                     	;# 
  1952  0712                     	;# 
  1953  0713                     	;# 
  1954  0714                     	;# 
  1955  0716                     	;# 
  1956  0717                     	;# 
  1957  0718                     	;# 
  1958  0719                     	;# 
  1959  071A                     	;# 
  1960  071B                     	;# 
  1961  071C                     	;# 
  1962  071D                     	;# 
  1963  071E                     	;# 
  1964  0796                     	;# 
  1965  0797                     	;# 
  1966  0798                     	;# 
  1967  0799                     	;# 
  1968  079A                     	;# 
  1969  079B                     	;# 
  1970  080C                     	;# 
  1971  080D                     	;# 
  1972  080E                     	;# 
  1973  080F                     	;# 
  1974  0810                     	;# 
  1975  0811                     	;# 
  1976  0812                     	;# 
  1977  0813                     	;# 
  1978  0814                     	;# 
  1979  081A                     	;# 
  1980  081B                     	;# 
  1981  081C                     	;# 
  1982  081D                     	;# 
  1983  081E                     	;# 
  1984  081F                     	;# 
  1985  088C                     	;# 
  1986  088D                     	;# 
  1987  088E                     	;# 
  1988  088F                     	;# 
  1989  0890                     	;# 
  1990  0891                     	;# 
  1991  0892                     	;# 
  1992  0893                     	;# 
  1993  0895                     	;# 
  1994  0896                     	;# 
  1995  0897                     	;# 
  1996  0898                     	;# 
  1997  0899                     	;# 
  1998  089A                     	;# 
  1999  089B                     	;# 
  2000  090C                     	;# 
  2001  090E                     	;# 
  2002  090F                     	;# 
  2003  091F                     	;# 
  2004  091F                     	;# 
  2005  098F                     	;# 
  2006  098F                     	;# 
  2007  0990                     	;# 
  2008  0991                     	;# 
  2009  0992                     	;# 
  2010  0993                     	;# 
  2011  0994                     	;# 
  2012  0995                     	;# 
  2013  0996                     	;# 
  2014  0997                     	;# 
  2015  0E0F                     	;# 
  2016  0E10                     	;# 
  2017  0E11                     	;# 
  2018  0E12                     	;# 
  2019  0E13                     	;# 
  2020  0E14                     	;# 
  2021  0E15                     	;# 
  2022  0E16                     	;# 
  2023  0E17                     	;# 
  2024  0E18                     	;# 
  2025  0E19                     	;# 
  2026  0E1A                     	;# 
  2027  0E1B                     	;# 
  2028  0E1C                     	;# 
  2029  0E1D                     	;# 
  2030  0E1E                     	;# 
  2031  0E1F                     	;# 
  2032  0E20                     	;# 
  2033  0E21                     	;# 
  2034  0E22                     	;# 
  2035  0E23                     	;# 
  2036  0E24                     	;# 
  2037  0E25                     	;# 
  2038  0E26                     	;# 
  2039  0E27                     	;# 
  2040  0E28                     	;# 
  2041  0E29                     	;# 
  2042  0E2A                     	;# 
  2043  0E2B                     	;# 
  2044  0E2C                     	;# 
  2045  0E2D                     	;# 
  2046  0E2E                     	;# 
  2047  0E2F                     	;# 
  2048  0E30                     	;# 
  2049  0E31                     	;# 
  2050  0E32                     	;# 
  2051  0E33                     	;# 
  2052  0E34                     	;# 
  2053  0E35                     	;# 
  2054  0E36                     	;# 
  2055  0E37                     	;# 
  2056  0E8F                     	;# 
  2057  0E90                     	;# 
  2058  0E91                     	;# 
  2059  0E92                     	;# 
  2060  0E93                     	;# 
  2061  0E94                     	;# 
  2062  0E95                     	;# 
  2063  0E96                     	;# 
  2064  0E97                     	;# 
  2065  0E9C                     	;# 
  2066  0E9D                     	;# 
  2067  0E9E                     	;# 
  2068  0EA1                     	;# 
  2069  0EA2                     	;# 
  2070  0EA3                     	;# 
  2071  0EA4                     	;# 
  2072  0EA5                     	;# 
  2073  0EA9                     	;# 
  2074  0EAA                     	;# 
  2075  0EAB                     	;# 
  2076  0EAC                     	;# 
  2077  0EB1                     	;# 
  2078  0EB2                     	;# 
  2079  0EB3                     	;# 
  2080  0EB8                     	;# 
  2081  0EB9                     	;# 
  2082  0EBA                     	;# 
  2083  0EBB                     	;# 
  2084  0EBC                     	;# 
  2085  0EBD                     	;# 
  2086  0EBE                     	;# 
  2087  0EC3                     	;# 
  2088  0EC5                     	;# 
  2089  0EC6                     	;# 
  2090  0EC7                     	;# 
  2091  0EC8                     	;# 
  2092  0EC9                     	;# 
  2093  0ECA                     	;# 
  2094  0ECB                     	;# 
  2095  0ECC                     	;# 
  2096  0F10                     	;# 
  2097  0F11                     	;# 
  2098  0F12                     	;# 
  2099  0F13                     	;# 
  2100  0F14                     	;# 
  2101  0F15                     	;# 
  2102  0F16                     	;# 
  2103  0F17                     	;# 
  2104  0F18                     	;# 
  2105  0F19                     	;# 
  2106  0F1A                     	;# 
  2107  0F1B                     	;# 
  2108  0F1C                     	;# 
  2109  0F1D                     	;# 
  2110  0F1E                     	;# 
  2111  0F1F                     	;# 
  2112  0F20                     	;# 
  2113  0F21                     	;# 
  2114  0F22                     	;# 
  2115  0F23                     	;# 
  2116  0F24                     	;# 
  2117  0F25                     	;# 
  2118  0F26                     	;# 
  2119  0F27                     	;# 
  2120  0F38                     	;# 
  2121  0F39                     	;# 
  2122  0F3A                     	;# 
  2123  0F3B                     	;# 
  2124  0F3C                     	;# 
  2125  0F3D                     	;# 
  2126  0F3E                     	;# 
  2127  0F3F                     	;# 
  2128  0F40                     	;# 
  2129  0F41                     	;# 
  2130  0F43                     	;# 
  2131  0F44                     	;# 
  2132  0F45                     	;# 
  2133  0F46                     	;# 
  2134  0F47                     	;# 
  2135  0F48                     	;# 
  2136  0F49                     	;# 
  2137  0F4A                     	;# 
  2138  0F4B                     	;# 
  2139  0F4C                     	;# 
  2140  0F4E                     	;# 
  2141  0F4F                     	;# 
  2142  0F50                     	;# 
  2143  0F51                     	;# 
  2144  0F52                     	;# 
  2145  0F53                     	;# 
  2146  0F54                     	;# 
  2147  0F55                     	;# 
  2148  0F56                     	;# 
  2149  0F57                     	;# 
  2150  0F65                     	;# 
  2151  0F68                     	;# 
  2152  0F69                     	;# 
  2153  0F6A                     	;# 
  2154  0F6B                     	;# 
  2155  0FE4                     	;# 
  2156  0FE5                     	;# 
  2157  0FE6                     	;# 
  2158  0FE7                     	;# 
  2159  0FE8                     	;# 
  2160  0FE9                     	;# 
  2161  0FEA                     	;# 
  2162  0FEB                     	;# 
  2163  0FED                     	;# 
  2164  0FEE                     	;# 
  2165  0FEF                     	;# 
  2166  0000                     	;# 
  2167  0001                     	;# 
  2168  0002                     	;# 
  2169  0003                     	;# 
  2170  0004                     	;# 
  2171  0005                     	;# 
  2172  0006                     	;# 
  2173  0007                     	;# 
  2174  0008                     	;# 
  2175  0009                     	;# 
  2176  000A                     	;# 
  2177  000B                     	;# 
  2178  000C                     	;# 
  2179  000D                     	;# 
  2180  000E                     	;# 
  2181  0010                     	;# 
  2182  0011                     	;# 
  2183  0012                     	;# 
  2184  0013                     	;# 
  2185  0016                     	;# 
  2186  0017                     	;# 
  2187  0018                     	;# 
  2188  001C                     	;# 
  2189  001C                     	;# 
  2190  001D                     	;# 
  2191  001D                     	;# 
  2192  001E                     	;# 
  2193  001F                     	;# 
  2194  008C                     	;# 
  2195  008C                     	;# 
  2196  008D                     	;# 
  2197  008E                     	;# 
  2198  008E                     	;# 
  2199  008F                     	;# 
  2200  0090                     	;# 
  2201  0090                     	;# 
  2202  0091                     	;# 
  2203  0093                     	;# 
  2204  0094                     	;# 
  2205  0095                     	;# 
  2206  0096                     	;# 
  2207  0097                     	;# 
  2208  0098                     	;# 
  2209  0099                     	;# 
  2210  009A                     	;# 
  2211  009B                     	;# 
  2212  009C                     	;# 
  2213  009D                     	;# 
  2214  009E                     	;# 
  2215  010C                     	;# 
  2216  010D                     	;# 
  2217  010E                     	;# 
  2218  010E                     	;# 
  2219  010F                     	;# 
  2220  0110                     	;# 
  2221  0110                     	;# 
  2222  0111                     	;# 
  2223  0112                     	;# 
  2224  0112                     	;# 
  2225  0113                     	;# 
  2226  0114                     	;# 
  2227  0114                     	;# 
  2228  0115                     	;# 
  2229  0116                     	;# 
  2230  0116                     	;# 
  2231  0117                     	;# 
  2232  0119                     	;# 
  2233  0119                     	;# 
  2234  0119                     	;# 
  2235  011A                     	;# 
  2236  011A                     	;# 
  2237  011A                     	;# 
  2238  011B                     	;# 
  2239  011B                     	;# 
  2240  011B                     	;# 
  2241  011B                     	;# 
  2242  011B                     	;# 
  2243  011C                     	;# 
  2244  011C                     	;# 
  2245  011C                     	;# 
  2246  011D                     	;# 
  2247  011D                     	;# 
  2248  011D                     	;# 
  2249  011E                     	;# 
  2250  011E                     	;# 
  2251  011E                     	;# 
  2252  011F                     	;# 
  2253  011F                     	;# 
  2254  011F                     	;# 
  2255  011F                     	;# 
  2256  011F                     	;# 
  2257  018C                     	;# 
  2258  018D                     	;# 
  2259  018E                     	;# 
  2260  018F                     	;# 
  2261  0190                     	;# 
  2262  0191                     	;# 
  2263  0192                     	;# 
  2264  0196                     	;# 
  2265  0197                     	;# 
  2266  0198                     	;# 
  2267  0199                     	;# 
  2268  019A                     	;# 
  2269  019B                     	;# 
  2270  019C                     	;# 
  2271  020C                     	;# 
  2272  020C                     	;# 
  2273  020D                     	;# 
  2274  020E                     	;# 
  2275  020F                     	;# 
  2276  020F                     	;# 
  2277  0210                     	;# 
  2278  0210                     	;# 
  2279  0211                     	;# 
  2280  0211                     	;# 
  2281  0212                     	;# 
  2282  0212                     	;# 
  2283  0213                     	;# 
  2284  0214                     	;# 
  2285  0215                     	;# 
  2286  0215                     	;# 
  2287  0216                     	;# 
  2288  0216                     	;# 
  2289  0217                     	;# 
  2290  0217                     	;# 
  2291  0218                     	;# 
  2292  0218                     	;# 
  2293  0219                     	;# 
  2294  021A                     	;# 
  2295  021B                     	;# 
  2296  021B                     	;# 
  2297  021C                     	;# 
  2298  021C                     	;# 
  2299  021D                     	;# 
  2300  021D                     	;# 
  2301  021E                     	;# 
  2302  021F                     	;# 
  2303  028C                     	;# 
  2304  028C                     	;# 
  2305  028D                     	;# 
  2306  028D                     	;# 
  2307  028E                     	;# 
  2308  028F                     	;# 
  2309  0290                     	;# 
  2310  0290                     	;# 
  2311  0291                     	;# 
  2312  0292                     	;# 
  2313  0292                     	;# 
  2314  0293                     	;# 
  2315  0293                     	;# 
  2316  0294                     	;# 
  2317  0295                     	;# 
  2318  0296                     	;# 
  2319  0296                     	;# 
  2320  0297                     	;# 
  2321  0298                     	;# 
  2322  0298                     	;# 
  2323  0299                     	;# 
  2324  0299                     	;# 
  2325  029A                     	;# 
  2326  029B                     	;# 
  2327  029C                     	;# 
  2328  029C                     	;# 
  2329  029D                     	;# 
  2330  030C                     	;# 
  2331  030C                     	;# 
  2332  030D                     	;# 
  2333  030E                     	;# 
  2334  030F                     	;# 
  2335  0310                     	;# 
  2336  0310                     	;# 
  2337  0311                     	;# 
  2338  0312                     	;# 
  2339  0313                     	;# 
  2340  0314                     	;# 
  2341  0314                     	;# 
  2342  0315                     	;# 
  2343  0316                     	;# 
  2344  0317                     	;# 
  2345  0318                     	;# 
  2346  0318                     	;# 
  2347  0319                     	;# 
  2348  031A                     	;# 
  2349  031B                     	;# 
  2350  031C                     	;# 
  2351  031C                     	;# 
  2352  031D                     	;# 
  2353  031E                     	;# 
  2354  031F                     	;# 
  2355  038C                     	;# 
  2356  038D                     	;# 
  2357  038E                     	;# 
  2358  0390                     	;# 
  2359  0391                     	;# 
  2360  0392                     	;# 
  2361  040C                     	;# 
  2362  040D                     	;# 
  2363  040E                     	;# 
  2364  040F                     	;# 
  2365  0410                     	;# 
  2366  0411                     	;# 
  2367  0416                     	;# 
  2368  0416                     	;# 
  2369  0417                     	;# 
  2370  0418                     	;# 
  2371  0418                     	;# 
  2372  0419                     	;# 
  2373  041A                     	;# 
  2374  041A                     	;# 
  2375  041B                     	;# 
  2376  041C                     	;# 
  2377  041C                     	;# 
  2378  041D                     	;# 
  2379  041E                     	;# 
  2380  041F                     	;# 
  2381  048C                     	;# 
  2382  048C                     	;# 
  2383  048D                     	;# 
  2384  048E                     	;# 
  2385  048F                     	;# 
  2386  048F                     	;# 
  2387  0490                     	;# 
  2388  0491                     	;# 
  2389  0492                     	;# 
  2390  0492                     	;# 
  2391  0493                     	;# 
  2392  0494                     	;# 
  2393  0495                     	;# 
  2394  0495                     	;# 
  2395  0496                     	;# 
  2396  0497                     	;# 
  2397  0498                     	;# 
  2398  0499                     	;# 
  2399  049A                     	;# 
  2400  049B                     	;# 
  2401  049C                     	;# 
  2402  049D                     	;# 
  2403  050C                     	;# 
  2404  050C                     	;# 
  2405  050D                     	;# 
  2406  050E                     	;# 
  2407  050F                     	;# 
  2408  050F                     	;# 
  2409  0510                     	;# 
  2410  0511                     	;# 
  2411  0512                     	;# 
  2412  0512                     	;# 
  2413  0513                     	;# 
  2414  0514                     	;# 
  2415  0515                     	;# 
  2416  0515                     	;# 
  2417  0516                     	;# 
  2418  0517                     	;# 
  2419  0518                     	;# 
  2420  0519                     	;# 
  2421  051A                     	;# 
  2422  051B                     	;# 
  2423  051C                     	;# 
  2424  051D                     	;# 
  2425  058C                     	;# 
  2426  058C                     	;# 
  2427  058D                     	;# 
  2428  058E                     	;# 
  2429  058F                     	;# 
  2430  058F                     	;# 
  2431  0590                     	;# 
  2432  0591                     	;# 
  2433  0592                     	;# 
  2434  0593                     	;# 
  2435  060C                     	;# 
  2436  060D                     	;# 
  2437  060E                     	;# 
  2438  060F                     	;# 
  2439  0610                     	;# 
  2440  0611                     	;# 
  2441  0612                     	;# 
  2442  0613                     	;# 
  2443  0614                     	;# 
  2444  0616                     	;# 
  2445  0617                     	;# 
  2446  0618                     	;# 
  2447  0619                     	;# 
  2448  061A                     	;# 
  2449  061B                     	;# 
  2450  061C                     	;# 
  2451  061D                     	;# 
  2452  061E                     	;# 
  2453  068C                     	;# 
  2454  068D                     	;# 
  2455  068E                     	;# 
  2456  068F                     	;# 
  2457  0690                     	;# 
  2458  0691                     	;# 
  2459  0692                     	;# 
  2460  0693                     	;# 
  2461  0694                     	;# 
  2462  070C                     	;# 
  2463  070D                     	;# 
  2464  070E                     	;# 
  2465  070F                     	;# 
  2466  0710                     	;# 
  2467  0711                     	;# 
  2468  0712                     	;# 
  2469  0713                     	;# 
  2470  0714                     	;# 
  2471  0716                     	;# 
  2472  0717                     	;# 
  2473  0718                     	;# 
  2474  0719                     	;# 
  2475  071A                     	;# 
  2476  071B                     	;# 
  2477  071C                     	;# 
  2478  071D                     	;# 
  2479  071E                     	;# 
  2480  0796                     	;# 
  2481  0797                     	;# 
  2482  0798                     	;# 
  2483  0799                     	;# 
  2484  079A                     	;# 
  2485  079B                     	;# 
  2486  080C                     	;# 
  2487  080D                     	;# 
  2488  080E                     	;# 
  2489  080F                     	;# 
  2490  0810                     	;# 
  2491  0811                     	;# 
  2492  0812                     	;# 
  2493  0813                     	;# 
  2494  0814                     	;# 
  2495  081A                     	;# 
  2496  081B                     	;# 
  2497  081C                     	;# 
  2498  081D                     	;# 
  2499  081E                     	;# 
  2500  081F                     	;# 
  2501  088C                     	;# 
  2502  088D                     	;# 
  2503  088E                     	;# 
  2504  088F                     	;# 
  2505  0890                     	;# 
  2506  0891                     	;# 
  2507  0892                     	;# 
  2508  0893                     	;# 
  2509  0895                     	;# 
  2510  0896                     	;# 
  2511  0897                     	;# 
  2512  0898                     	;# 
  2513  0899                     	;# 
  2514  089A                     	;# 
  2515  089B                     	;# 
  2516  090C                     	;# 
  2517  090E                     	;# 
  2518  090F                     	;# 
  2519  091F                     	;# 
  2520  091F                     	;# 
  2521  098F                     	;# 
  2522  098F                     	;# 
  2523  0990                     	;# 
  2524  0991                     	;# 
  2525  0992                     	;# 
  2526  0993                     	;# 
  2527  0994                     	;# 
  2528  0995                     	;# 
  2529  0996                     	;# 
  2530  0997                     	;# 
  2531  0E0F                     	;# 
  2532  0E10                     	;# 
  2533  0E11                     	;# 
  2534  0E12                     	;# 
  2535  0E13                     	;# 
  2536  0E14                     	;# 
  2537  0E15                     	;# 
  2538  0E16                     	;# 
  2539  0E17                     	;# 
  2540  0E18                     	;# 
  2541  0E19                     	;# 
  2542  0E1A                     	;# 
  2543  0E1B                     	;# 
  2544  0E1C                     	;# 
  2545  0E1D                     	;# 
  2546  0E1E                     	;# 
  2547  0E1F                     	;# 
  2548  0E20                     	;# 
  2549  0E21                     	;# 
  2550  0E22                     	;# 
  2551  0E23                     	;# 
  2552  0E24                     	;# 
  2553  0E25                     	;# 
  2554  0E26                     	;# 
  2555  0E27                     	;# 
  2556  0E28                     	;# 
  2557  0E29                     	;# 
  2558  0E2A                     	;# 
  2559  0E2B                     	;# 
  2560  0E2C                     	;# 
  2561  0E2D                     	;# 
  2562  0E2E                     	;# 
  2563  0E2F                     	;# 
  2564  0E30                     	;# 
  2565  0E31                     	;# 
  2566  0E32                     	;# 
  2567  0E33                     	;# 
  2568  0E34                     	;# 
  2569  0E35                     	;# 
  2570  0E36                     	;# 
  2571  0E37                     	;# 
  2572  0E8F                     	;# 
  2573  0E90                     	;# 
  2574  0E91                     	;# 
  2575  0E92                     	;# 
  2576  0E93                     	;# 
  2577  0E94                     	;# 
  2578  0E95                     	;# 
  2579  0E96                     	;# 
  2580  0E97                     	;# 
  2581  0E9C                     	;# 
  2582  0E9D                     	;# 
  2583  0E9E                     	;# 
  2584  0EA1                     	;# 
  2585  0EA2                     	;# 
  2586  0EA3                     	;# 
  2587  0EA4                     	;# 
  2588  0EA5                     	;# 
  2589  0EA9                     	;# 
  2590  0EAA                     	;# 
  2591  0EAB                     	;# 
  2592  0EAC                     	;# 
  2593  0EB1                     	;# 
  2594  0EB2                     	;# 
  2595  0EB3                     	;# 
  2596  0EB8                     	;# 
  2597  0EB9                     	;# 
  2598  0EBA                     	;# 
  2599  0EBB                     	;# 
  2600  0EBC                     	;# 
  2601  0EBD                     	;# 
  2602  0EBE                     	;# 
  2603  0EC3                     	;# 
  2604  0EC5                     	;# 
  2605  0EC6                     	;# 
  2606  0EC7                     	;# 
  2607  0EC8                     	;# 
  2608  0EC9                     	;# 
  2609  0ECA                     	;# 
  2610  0ECB                     	;# 
  2611  0ECC                     	;# 
  2612  0F10                     	;# 
  2613  0F11                     	;# 
  2614  0F12                     	;# 
  2615  0F13                     	;# 
  2616  0F14                     	;# 
  2617  0F15                     	;# 
  2618  0F16                     	;# 
  2619  0F17                     	;# 
  2620  0F18                     	;# 
  2621  0F19                     	;# 
  2622  0F1A                     	;# 
  2623  0F1B                     	;# 
  2624  0F1C                     	;# 
  2625  0F1D                     	;# 
  2626  0F1E                     	;# 
  2627  0F1F                     	;# 
  2628  0F20                     	;# 
  2629  0F21                     	;# 
  2630  0F22                     	;# 
  2631  0F23                     	;# 
  2632  0F24                     	;# 
  2633  0F25                     	;# 
  2634  0F26                     	;# 
  2635  0F27                     	;# 
  2636  0F38                     	;# 
  2637  0F39                     	;# 
  2638  0F3A                     	;# 
  2639  0F3B                     	;# 
  2640  0F3C                     	;# 
  2641  0F3D                     	;# 
  2642  0F3E                     	;# 
  2643  0F3F                     	;# 
  2644  0F40                     	;# 
  2645  0F41                     	;# 
  2646  0F43                     	;# 
  2647  0F44                     	;# 
  2648  0F45                     	;# 
  2649  0F46                     	;# 
  2650  0F47                     	;# 
  2651  0F48                     	;# 
  2652  0F49                     	;# 
  2653  0F4A                     	;# 
  2654  0F4B                     	;# 
  2655  0F4C                     	;# 
  2656  0F4E                     	;# 
  2657  0F4F                     	;# 
  2658  0F50                     	;# 
  2659  0F51                     	;# 
  2660  0F52                     	;# 
  2661  0F53                     	;# 
  2662  0F54                     	;# 
  2663  0F55                     	;# 
  2664  0F56                     	;# 
  2665  0F57                     	;# 
  2666  0F65                     	;# 
  2667  0F68                     	;# 
  2668  0F69                     	;# 
  2669  0F6A                     	;# 
  2670  0F6B                     	;# 
  2671  0FE4                     	;# 
  2672  0FE5                     	;# 
  2673  0FE6                     	;# 
  2674  0FE7                     	;# 
  2675  0FE8                     	;# 
  2676  0FE9                     	;# 
  2677  0FEA                     	;# 
  2678  0FEB                     	;# 
  2679  0FED                     	;# 
  2680  0FEE                     	;# 
  2681  0FEF                     	;# 
  2682  0000                     	;# 
  2683  0001                     	;# 
  2684  0002                     	;# 
  2685  0003                     	;# 
  2686  0004                     	;# 
  2687  0005                     	;# 
  2688  0006                     	;# 
  2689  0007                     	;# 
  2690  0008                     	;# 
  2691  0009                     	;# 
  2692  000A                     	;# 
  2693  000B                     	;# 
  2694  000C                     	;# 
  2695  000D                     	;# 
  2696  000E                     	;# 
  2697  0010                     	;# 
  2698  0011                     	;# 
  2699  0012                     	;# 
  2700  0013                     	;# 
  2701  0016                     	;# 
  2702  0017                     	;# 
  2703  0018                     	;# 
  2704  001C                     	;# 
  2705  001C                     	;# 
  2706  001D                     	;# 
  2707  001D                     	;# 
  2708  001E                     	;# 
  2709  001F                     	;# 
  2710  008C                     	;# 
  2711  008C                     	;# 
  2712  008D                     	;# 
  2713  008E                     	;# 
  2714  008E                     	;# 
  2715  008F                     	;# 
  2716  0090                     	;# 
  2717  0090                     	;# 
  2718  0091                     	;# 
  2719  0093                     	;# 
  2720  0094                     	;# 
  2721  0095                     	;# 
  2722  0096                     	;# 
  2723  0097                     	;# 
  2724  0098                     	;# 
  2725  0099                     	;# 
  2726  009A                     	;# 
  2727  009B                     	;# 
  2728  009C                     	;# 
  2729  009D                     	;# 
  2730  009E                     	;# 
  2731  010C                     	;# 
  2732  010D                     	;# 
  2733  010E                     	;# 
  2734  010E                     	;# 
  2735  010F                     	;# 
  2736  0110                     	;# 
  2737  0110                     	;# 
  2738  0111                     	;# 
  2739  0112                     	;# 
  2740  0112                     	;# 
  2741  0113                     	;# 
  2742  0114                     	;# 
  2743  0114                     	;# 
  2744  0115                     	;# 
  2745  0116                     	;# 
  2746  0116                     	;# 
  2747  0117                     	;# 
  2748  0119                     	;# 
  2749  0119                     	;# 
  2750  0119                     	;# 
  2751  011A                     	;# 
  2752  011A                     	;# 
  2753  011A                     	;# 
  2754  011B                     	;# 
  2755  011B                     	;# 
  2756  011B                     	;# 
  2757  011B                     	;# 
  2758  011B                     	;# 
  2759  011C                     	;# 
  2760  011C                     	;# 
  2761  011C                     	;# 
  2762  011D                     	;# 
  2763  011D                     	;# 
  2764  011D                     	;# 
  2765  011E                     	;# 
  2766  011E                     	;# 
  2767  011E                     	;# 
  2768  011F                     	;# 
  2769  011F                     	;# 
  2770  011F                     	;# 
  2771  011F                     	;# 
  2772  011F                     	;# 
  2773  018C                     	;# 
  2774  018D                     	;# 
  2775  018E                     	;# 
  2776  018F                     	;# 
  2777  0190                     	;# 
  2778  0191                     	;# 
  2779  0192                     	;# 
  2780  0196                     	;# 
  2781  0197                     	;# 
  2782  0198                     	;# 
  2783  0199                     	;# 
  2784  019A                     	;# 
  2785  019B                     	;# 
  2786  019C                     	;# 
  2787  020C                     	;# 
  2788  020C                     	;# 
  2789  020D                     	;# 
  2790  020E                     	;# 
  2791  020F                     	;# 
  2792  020F                     	;# 
  2793  0210                     	;# 
  2794  0210                     	;# 
  2795  0211                     	;# 
  2796  0211                     	;# 
  2797  0212                     	;# 
  2798  0212                     	;# 
  2799  0213                     	;# 
  2800  0214                     	;# 
  2801  0215                     	;# 
  2802  0215                     	;# 
  2803  0216                     	;# 
  2804  0216                     	;# 
  2805  0217                     	;# 
  2806  0217                     	;# 
  2807  0218                     	;# 
  2808  0218                     	;# 
  2809  0219                     	;# 
  2810  021A                     	;# 
  2811  021B                     	;# 
  2812  021B                     	;# 
  2813  021C                     	;# 
  2814  021C                     	;# 
  2815  021D                     	;# 
  2816  021D                     	;# 
  2817  021E                     	;# 
  2818  021F                     	;# 
  2819  028C                     	;# 
  2820  028C                     	;# 
  2821  028D                     	;# 
  2822  028D                     	;# 
  2823  028E                     	;# 
  2824  028F                     	;# 
  2825  0290                     	;# 
  2826  0290                     	;# 
  2827  0291                     	;# 
  2828  0292                     	;# 
  2829  0292                     	;# 
  2830  0293                     	;# 
  2831  0293                     	;# 
  2832  0294                     	;# 
  2833  0295                     	;# 
  2834  0296                     	;# 
  2835  0296                     	;# 
  2836  0297                     	;# 
  2837  0298                     	;# 
  2838  0298                     	;# 
  2839  0299                     	;# 
  2840  0299                     	;# 
  2841  029A                     	;# 
  2842  029B                     	;# 
  2843  029C                     	;# 
  2844  029C                     	;# 
  2845  029D                     	;# 
  2846  030C                     	;# 
  2847  030C                     	;# 
  2848  030D                     	;# 
  2849  030E                     	;# 
  2850  030F                     	;# 
  2851  0310                     	;# 
  2852  0310                     	;# 
  2853  0311                     	;# 
  2854  0312                     	;# 
  2855  0313                     	;# 
  2856  0314                     	;# 
  2857  0314                     	;# 
  2858  0315                     	;# 
  2859  0316                     	;# 
  2860  0317                     	;# 
  2861  0318                     	;# 
  2862  0318                     	;# 
  2863  0319                     	;# 
  2864  031A                     	;# 
  2865  031B                     	;# 
  2866  031C                     	;# 
  2867  031C                     	;# 
  2868  031D                     	;# 
  2869  031E                     	;# 
  2870  031F                     	;# 
  2871  038C                     	;# 
  2872  038D                     	;# 
  2873  038E                     	;# 
  2874  0390                     	;# 
  2875  0391                     	;# 
  2876  0392                     	;# 
  2877  040C                     	;# 
  2878  040D                     	;# 
  2879  040E                     	;# 
  2880  040F                     	;# 
  2881  0410                     	;# 
  2882  0411                     	;# 
  2883  0416                     	;# 
  2884  0416                     	;# 
  2885  0417                     	;# 
  2886  0418                     	;# 
  2887  0418                     	;# 
  2888  0419                     	;# 
  2889  041A                     	;# 
  2890  041A                     	;# 
  2891  041B                     	;# 
  2892  041C                     	;# 
  2893  041C                     	;# 
  2894  041D                     	;# 
  2895  041E                     	;# 
  2896  041F                     	;# 
  2897  048C                     	;# 
  2898  048C                     	;# 
  2899  048D                     	;# 
  2900  048E                     	;# 
  2901  048F                     	;# 
  2902  048F                     	;# 
  2903  0490                     	;# 
  2904  0491                     	;# 
  2905  0492                     	;# 
  2906  0492                     	;# 
  2907  0493                     	;# 
  2908  0494                     	;# 
  2909  0495                     	;# 
  2910  0495                     	;# 
  2911  0496                     	;# 
  2912  0497                     	;# 
  2913  0498                     	;# 
  2914  0499                     	;# 
  2915  049A                     	;# 
  2916  049B                     	;# 
  2917  049C                     	;# 
  2918  049D                     	;# 
  2919  050C                     	;# 
  2920  050C                     	;# 
  2921  050D                     	;# 
  2922  050E                     	;# 
  2923  050F                     	;# 
  2924  050F                     	;# 
  2925  0510                     	;# 
  2926  0511                     	;# 
  2927  0512                     	;# 
  2928  0512                     	;# 
  2929  0513                     	;# 
  2930  0514                     	;# 
  2931  0515                     	;# 
  2932  0515                     	;# 
  2933  0516                     	;# 
  2934  0517                     	;# 
  2935  0518                     	;# 
  2936  0519                     	;# 
  2937  051A                     	;# 
  2938  051B                     	;# 
  2939  051C                     	;# 
  2940  051D                     	;# 
  2941  058C                     	;# 
  2942  058C                     	;# 
  2943  058D                     	;# 
  2944  058E                     	;# 
  2945  058F                     	;# 
  2946  058F                     	;# 
  2947  0590                     	;# 
  2948  0591                     	;# 
  2949  0592                     	;# 
  2950  0593                     	;# 
  2951  060C                     	;# 
  2952  060D                     	;# 
  2953  060E                     	;# 
  2954  060F                     	;# 
  2955  0610                     	;# 
  2956  0611                     	;# 
  2957  0612                     	;# 
  2958  0613                     	;# 
  2959  0614                     	;# 
  2960  0616                     	;# 
  2961  0617                     	;# 
  2962  0618                     	;# 
  2963  0619                     	;# 
  2964  061A                     	;# 
  2965  061B                     	;# 
  2966  061C                     	;# 
  2967  061D                     	;# 
  2968  061E                     	;# 
  2969  068C                     	;# 
  2970  068D                     	;# 
  2971  068E                     	;# 
  2972  068F                     	;# 
  2973  0690                     	;# 
  2974  0691                     	;# 
  2975  0692                     	;# 
  2976  0693                     	;# 
  2977  0694                     	;# 
  2978  070C                     	;# 
  2979  070D                     	;# 
  2980  070E                     	;# 
  2981  070F                     	;# 
  2982  0710                     	;# 
  2983  0711                     	;# 
  2984  0712                     	;# 
  2985  0713                     	;# 
  2986  0714                     	;# 
  2987  0716                     	;# 
  2988  0717                     	;# 
  2989  0718                     	;# 
  2990  0719                     	;# 
  2991  071A                     	;# 
  2992  071B                     	;# 
  2993  071C                     	;# 
  2994  071D                     	;# 
  2995  071E                     	;# 
  2996  0796                     	;# 
  2997  0797                     	;# 
  2998  0798                     	;# 
  2999  0799                     	;# 
  3000  079A                     	;# 
  3001  079B                     	;# 
  3002  080C                     	;# 
  3003  080D                     	;# 
  3004  080E                     	;# 
  3005  080F                     	;# 
  3006  0810                     	;# 
  3007  0811                     	;# 
  3008  0812                     	;# 
  3009  0813                     	;# 
  3010  0814                     	;# 
  3011  081A                     	;# 
  3012  081B                     	;# 
  3013  081C                     	;# 
  3014  081D                     	;# 
  3015  081E                     	;# 
  3016  081F                     	;# 
  3017  088C                     	;# 
  3018  088D                     	;# 
  3019  088E                     	;# 
  3020  088F                     	;# 
  3021  0890                     	;# 
  3022  0891                     	;# 
  3023  0892                     	;# 
  3024  0893                     	;# 
  3025  0895                     	;# 
  3026  0896                     	;# 
  3027  0897                     	;# 
  3028  0898                     	;# 
  3029  0899                     	;# 
  3030  089A                     	;# 
  3031  089B                     	;# 
  3032  090C                     	;# 
  3033  090E                     	;# 
  3034  090F                     	;# 
  3035  091F                     	;# 
  3036  091F                     	;# 
  3037  098F                     	;# 
  3038  098F                     	;# 
  3039  0990                     	;# 
  3040  0991                     	;# 
  3041  0992                     	;# 
  3042  0993                     	;# 
  3043  0994                     	;# 
  3044  0995                     	;# 
  3045  0996                     	;# 
  3046  0997                     	;# 
  3047  0E0F                     	;# 
  3048  0E10                     	;# 
  3049  0E11                     	;# 
  3050  0E12                     	;# 
  3051  0E13                     	;# 
  3052  0E14                     	;# 
  3053  0E15                     	;# 
  3054  0E16                     	;# 
  3055  0E17                     	;# 
  3056  0E18                     	;# 
  3057  0E19                     	;# 
  3058  0E1A                     	;# 
  3059  0E1B                     	;# 
  3060  0E1C                     	;# 
  3061  0E1D                     	;# 
  3062  0E1E                     	;# 
  3063  0E1F                     	;# 
  3064  0E20                     	;# 
  3065  0E21                     	;# 
  3066  0E22                     	;# 
  3067  0E23                     	;# 
  3068  0E24                     	;# 
  3069  0E25                     	;# 
  3070  0E26                     	;# 
  3071  0E27                     	;# 
  3072  0E28                     	;# 
  3073  0E29                     	;# 
  3074  0E2A                     	;# 
  3075  0E2B                     	;# 
  3076  0E2C                     	;# 
  3077  0E2D                     	;# 
  3078  0E2E                     	;# 
  3079  0E2F                     	;# 
  3080  0E30                     	;# 
  3081  0E31                     	;# 
  3082  0E32                     	;# 
  3083  0E33                     	;# 
  3084  0E34                     	;# 
  3085  0E35                     	;# 
  3086  0E36                     	;# 
  3087  0E37                     	;# 
  3088  0E8F                     	;# 
  3089  0E90                     	;# 
  3090  0E91                     	;# 
  3091  0E92                     	;# 
  3092  0E93                     	;# 
  3093  0E94                     	;# 
  3094  0E95                     	;# 
  3095  0E96                     	;# 
  3096  0E97                     	;# 
  3097  0E9C                     	;# 
  3098  0E9D                     	;# 
  3099  0E9E                     	;# 
  3100  0EA1                     	;# 
  3101  0EA2                     	;# 
  3102  0EA3                     	;# 
  3103  0EA4                     	;# 
  3104  0EA5                     	;# 
  3105  0EA9                     	;# 
  3106  0EAA                     	;# 
  3107  0EAB                     	;# 
  3108  0EAC                     	;# 
  3109  0EB1                     	;# 
  3110  0EB2                     	;# 
  3111  0EB3                     	;# 
  3112  0EB8                     	;# 
  3113  0EB9                     	;# 
  3114  0EBA                     	;# 
  3115  0EBB                     	;# 
  3116  0EBC                     	;# 
  3117  0EBD                     	;# 
  3118  0EBE                     	;# 
  3119  0EC3                     	;# 
  3120  0EC5                     	;# 
  3121  0EC6                     	;# 
  3122  0EC7                     	;# 
  3123  0EC8                     	;# 
  3124  0EC9                     	;# 
  3125  0ECA                     	;# 
  3126  0ECB                     	;# 
  3127  0ECC                     	;# 
  3128  0F10                     	;# 
  3129  0F11                     	;# 
  3130  0F12                     	;# 
  3131  0F13                     	;# 
  3132  0F14                     	;# 
  3133  0F15                     	;# 
  3134  0F16                     	;# 
  3135  0F17                     	;# 
  3136  0F18                     	;# 
  3137  0F19                     	;# 
  3138  0F1A                     	;# 
  3139  0F1B                     	;# 
  3140  0F1C                     	;# 
  3141  0F1D                     	;# 
  3142  0F1E                     	;# 
  3143  0F1F                     	;# 
  3144  0F20                     	;# 
  3145  0F21                     	;# 
  3146  0F22                     	;# 
  3147  0F23                     	;# 
  3148  0F24                     	;# 
  3149  0F25                     	;# 
  3150  0F26                     	;# 
  3151  0F27                     	;# 
  3152  0F38                     	;# 
  3153  0F39                     	;# 
  3154  0F3A                     	;# 
  3155  0F3B                     	;# 
  3156  0F3C                     	;# 
  3157  0F3D                     	;# 
  3158  0F3E                     	;# 
  3159  0F3F                     	;# 
  3160  0F40                     	;# 
  3161  0F41                     	;# 
  3162  0F43                     	;# 
  3163  0F44                     	;# 
  3164  0F45                     	;# 
  3165  0F46                     	;# 
  3166  0F47                     	;# 
  3167  0F48                     	;# 
  3168  0F49                     	;# 
  3169  0F4A                     	;# 
  3170  0F4B                     	;# 
  3171  0F4C                     	;# 
  3172  0F4E                     	;# 
  3173  0F4F                     	;# 
  3174  0F50                     	;# 
  3175  0F51                     	;# 
  3176  0F52                     	;# 
  3177  0F53                     	;# 
  3178  0F54                     	;# 
  3179  0F55                     	;# 
  3180  0F56                     	;# 
  3181  0F57                     	;# 
  3182  0F65                     	;# 
  3183  0F68                     	;# 
  3184  0F69                     	;# 
  3185  0F6A                     	;# 
  3186  0F6B                     	;# 
  3187  0FE4                     	;# 
  3188  0FE5                     	;# 
  3189  0FE6                     	;# 
  3190  0FE7                     	;# 
  3191  0FE8                     	;# 
  3192  0FE9                     	;# 
  3193  0FEA                     	;# 
  3194  0FEB                     	;# 
  3195  0FED                     	;# 
  3196  0FEE                     	;# 
  3197  0FEF                     	;# 
  3198  0000                     	;# 
  3199  0001                     	;# 
  3200  0002                     	;# 
  3201  0003                     	;# 
  3202  0004                     	;# 
  3203  0005                     	;# 
  3204  0006                     	;# 
  3205  0007                     	;# 
  3206  0008                     	;# 
  3207  0009                     	;# 
  3208  000A                     	;# 
  3209  000B                     	;# 
  3210  000C                     	;# 
  3211  000D                     	;# 
  3212  000E                     	;# 
  3213  0010                     	;# 
  3214  0011                     	;# 
  3215  0012                     	;# 
  3216  0013                     	;# 
  3217  0016                     	;# 
  3218  0017                     	;# 
  3219  0018                     	;# 
  3220  001C                     	;# 
  3221  001C                     	;# 
  3222  001D                     	;# 
  3223  001D                     	;# 
  3224  001E                     	;# 
  3225  001F                     	;# 
  3226  008C                     	;# 
  3227  008C                     	;# 
  3228  008D                     	;# 
  3229  008E                     	;# 
  3230  008E                     	;# 
  3231  008F                     	;# 
  3232  0090                     	;# 
  3233  0090                     	;# 
  3234  0091                     	;# 
  3235  0093                     	;# 
  3236  0094                     	;# 
  3237  0095                     	;# 
  3238  0096                     	;# 
  3239  0097                     	;# 
  3240  0098                     	;# 
  3241  0099                     	;# 
  3242  009A                     	;# 
  3243  009B                     	;# 
  3244  009C                     	;# 
  3245  009D                     	;# 
  3246  009E                     	;# 
  3247  010C                     	;# 
  3248  010D                     	;# 
  3249  010E                     	;# 
  3250  010E                     	;# 
  3251  010F                     	;# 
  3252  0110                     	;# 
  3253  0110                     	;# 
  3254  0111                     	;# 
  3255  0112                     	;# 
  3256  0112                     	;# 
  3257  0113                     	;# 
  3258  0114                     	;# 
  3259  0114                     	;# 
  3260  0115                     	;# 
  3261  0116                     	;# 
  3262  0116                     	;# 
  3263  0117                     	;# 
  3264  0119                     	;# 
  3265  0119                     	;# 
  3266  0119                     	;# 
  3267  011A                     	;# 
  3268  011A                     	;# 
  3269  011A                     	;# 
  3270  011B                     	;# 
  3271  011B                     	;# 
  3272  011B                     	;# 
  3273  011B                     	;# 
  3274  011B                     	;# 
  3275  011C                     	;# 
  3276  011C                     	;# 
  3277  011C                     	;# 
  3278  011D                     	;# 
  3279  011D                     	;# 
  3280  011D                     	;# 
  3281  011E                     	;# 
  3282  011E                     	;# 
  3283  011E                     	;# 
  3284  011F                     	;# 
  3285  011F                     	;# 
  3286  011F                     	;# 
  3287  011F                     	;# 
  3288  011F                     	;# 
  3289  018C                     	;# 
  3290  018D                     	;# 
  3291  018E                     	;# 
  3292  018F                     	;# 
  3293  0190                     	;# 
  3294  0191                     	;# 
  3295  0192                     	;# 
  3296  0196                     	;# 
  3297  0197                     	;# 
  3298  0198                     	;# 
  3299  0199                     	;# 
  3300  019A                     	;# 
  3301  019B                     	;# 
  3302  019C                     	;# 
  3303  020C                     	;# 
  3304  020C                     	;# 
  3305  020D                     	;# 
  3306  020E                     	;# 
  3307  020F                     	;# 
  3308  020F                     	;# 
  3309  0210                     	;# 
  3310  0210                     	;# 
  3311  0211                     	;# 
  3312  0211                     	;# 
  3313  0212                     	;# 
  3314  0212                     	;# 
  3315  0213                     	;# 
  3316  0214                     	;# 
  3317  0215                     	;# 
  3318  0215                     	;# 
  3319  0216                     	;# 
  3320  0216                     	;# 
  3321  0217                     	;# 
  3322  0217                     	;# 
  3323  0218                     	;# 
  3324  0218                     	;# 
  3325  0219                     	;# 
  3326  021A                     	;# 
  3327  021B                     	;# 
  3328  021B                     	;# 
  3329  021C                     	;# 
  3330  021C                     	;# 
  3331  021D                     	;# 
  3332  021D                     	;# 
  3333  021E                     	;# 
  3334  021F                     	;# 
  3335  028C                     	;# 
  3336  028C                     	;# 
  3337  028D                     	;# 
  3338  028D                     	;# 
  3339  028E                     	;# 
  3340  028F                     	;# 
  3341  0290                     	;# 
  3342  0290                     	;# 
  3343  0291                     	;# 
  3344  0292                     	;# 
  3345  0292                     	;# 
  3346  0293                     	;# 
  3347  0293                     	;# 
  3348  0294                     	;# 
  3349  0295                     	;# 
  3350  0296                     	;# 
  3351  0296                     	;# 
  3352  0297                     	;# 
  3353  0298                     	;# 
  3354  0298                     	;# 
  3355  0299                     	;# 
  3356  0299                     	;# 
  3357  029A                     	;# 
  3358  029B                     	;# 
  3359  029C                     	;# 
  3360  029C                     	;# 
  3361  029D                     	;# 
  3362  030C                     	;# 
  3363  030C                     	;# 
  3364  030D                     	;# 
  3365  030E                     	;# 
  3366  030F                     	;# 
  3367  0310                     	;# 
  3368  0310                     	;# 
  3369  0311                     	;# 
  3370  0312                     	;# 
  3371  0313                     	;# 
  3372  0314                     	;# 
  3373  0314                     	;# 
  3374  0315                     	;# 
  3375  0316                     	;# 
  3376  0317                     	;# 
  3377  0318                     	;# 
  3378  0318                     	;# 
  3379  0319                     	;# 
  3380  031A                     	;# 
  3381  031B                     	;# 
  3382  031C                     	;# 
  3383  031C                     	;# 
  3384  031D                     	;# 
  3385  031E                     	;# 
  3386  031F                     	;# 
  3387  038C                     	;# 
  3388  038D                     	;# 
  3389  038E                     	;# 
  3390  0390                     	;# 
  3391  0391                     	;# 
  3392  0392                     	;# 
  3393  040C                     	;# 
  3394  040D                     	;# 
  3395  040E                     	;# 
  3396  040F                     	;# 
  3397  0410                     	;# 
  3398  0411                     	;# 
  3399  0416                     	;# 
  3400  0416                     	;# 
  3401  0417                     	;# 
  3402  0418                     	;# 
  3403  0418                     	;# 
  3404  0419                     	;# 
  3405  041A                     	;# 
  3406  041A                     	;# 
  3407  041B                     	;# 
  3408  041C                     	;# 
  3409  041C                     	;# 
  3410  041D                     	;# 
  3411  041E                     	;# 
  3412  041F                     	;# 
  3413  048C                     	;# 
  3414  048C                     	;# 
  3415  048D                     	;# 
  3416  048E                     	;# 
  3417  048F                     	;# 
  3418  048F                     	;# 
  3419  0490                     	;# 
  3420  0491                     	;# 
  3421  0492                     	;# 
  3422  0492                     	;# 
  3423  0493                     	;# 
  3424  0494                     	;# 
  3425  0495                     	;# 
  3426  0495                     	;# 
  3427  0496                     	;# 
  3428  0497                     	;# 
  3429  0498                     	;# 
  3430  0499                     	;# 
  3431  049A                     	;# 
  3432  049B                     	;# 
  3433  049C                     	;# 
  3434  049D                     	;# 
  3435  050C                     	;# 
  3436  050C                     	;# 
  3437  050D                     	;# 
  3438  050E                     	;# 
  3439  050F                     	;# 
  3440  050F                     	;# 
  3441  0510                     	;# 
  3442  0511                     	;# 
  3443  0512                     	;# 
  3444  0512                     	;# 
  3445  0513                     	;# 
  3446  0514                     	;# 
  3447  0515                     	;# 
  3448  0515                     	;# 
  3449  0516                     	;# 
  3450  0517                     	;# 
  3451  0518                     	;# 
  3452  0519                     	;# 
  3453  051A                     	;# 
  3454  051B                     	;# 
  3455  051C                     	;# 
  3456  051D                     	;# 
  3457  058C                     	;# 
  3458  058C                     	;# 
  3459  058D                     	;# 
  3460  058E                     	;# 
  3461  058F                     	;# 
  3462  058F                     	;# 
  3463  0590                     	;# 
  3464  0591                     	;# 
  3465  0592                     	;# 
  3466  0593                     	;# 
  3467  060C                     	;# 
  3468  060D                     	;# 
  3469  060E                     	;# 
  3470  060F                     	;# 
  3471  0610                     	;# 
  3472  0611                     	;# 
  3473  0612                     	;# 
  3474  0613                     	;# 
  3475  0614                     	;# 
  3476  0616                     	;# 
  3477  0617                     	;# 
  3478  0618                     	;# 
  3479  0619                     	;# 
  3480  061A                     	;# 
  3481  061B                     	;# 
  3482  061C                     	;# 
  3483  061D                     	;# 
  3484  061E                     	;# 
  3485  068C                     	;# 
  3486  068D                     	;# 
  3487  068E                     	;# 
  3488  068F                     	;# 
  3489  0690                     	;# 
  3490  0691                     	;# 
  3491  0692                     	;# 
  3492  0693                     	;# 
  3493  0694                     	;# 
  3494  070C                     	;# 
  3495  070D                     	;# 
  3496  070E                     	;# 
  3497  070F                     	;# 
  3498  0710                     	;# 
  3499  0711                     	;# 
  3500  0712                     	;# 
  3501  0713                     	;# 
  3502  0714                     	;# 
  3503  0716                     	;# 
  3504  0717                     	;# 
  3505  0718                     	;# 
  3506  0719                     	;# 
  3507  071A                     	;# 
  3508  071B                     	;# 
  3509  071C                     	;# 
  3510  071D                     	;# 
  3511  071E                     	;# 
  3512  0796                     	;# 
  3513  0797                     	;# 
  3514  0798                     	;# 
  3515  0799                     	;# 
  3516  079A                     	;# 
  3517  079B                     	;# 
  3518  080C                     	;# 
  3519  080D                     	;# 
  3520  080E                     	;# 
  3521  080F                     	;# 
  3522  0810                     	;# 
  3523  0811                     	;# 
  3524  0812                     	;# 
  3525  0813                     	;# 
  3526  0814                     	;# 
  3527  081A                     	;# 
  3528  081B                     	;# 
  3529  081C                     	;# 
  3530  081D                     	;# 
  3531  081E                     	;# 
  3532  081F                     	;# 
  3533  088C                     	;# 
  3534  088D                     	;# 
  3535  088E                     	;# 
  3536  088F                     	;# 
  3537  0890                     	;# 
  3538  0891                     	;# 
  3539  0892                     	;# 
  3540  0893                     	;# 
  3541  0895                     	;# 
  3542  0896                     	;# 
  3543  0897                     	;# 
  3544  0898                     	;# 
  3545  0899                     	;# 
  3546  089A                     	;# 
  3547  089B                     	;# 
  3548  090C                     	;# 
  3549  090E                     	;# 
  3550  090F                     	;# 
  3551  091F                     	;# 
  3552  091F                     	;# 
  3553  098F                     	;# 
  3554  098F                     	;# 
  3555  0990                     	;# 
  3556  0991                     	;# 
  3557  0992                     	;# 
  3558  0993                     	;# 
  3559  0994                     	;# 
  3560  0995                     	;# 
  3561  0996                     	;# 
  3562  0997                     	;# 
  3563  0E0F                     	;# 
  3564  0E10                     	;# 
  3565  0E11                     	;# 
  3566  0E12                     	;# 
  3567  0E13                     	;# 
  3568  0E14                     	;# 
  3569  0E15                     	;# 
  3570  0E16                     	;# 
  3571  0E17                     	;# 
  3572  0E18                     	;# 
  3573  0E19                     	;# 
  3574  0E1A                     	;# 
  3575  0E1B                     	;# 
  3576  0E1C                     	;# 
  3577  0E1D                     	;# 
  3578  0E1E                     	;# 
  3579  0E1F                     	;# 
  3580  0E20                     	;# 
  3581  0E21                     	;# 
  3582  0E22                     	;# 
  3583  0E23                     	;# 
  3584  0E24                     	;# 
  3585  0E25                     	;# 
  3586  0E26                     	;# 
  3587  0E27                     	;# 
  3588  0E28                     	;# 
  3589  0E29                     	;# 
  3590  0E2A                     	;# 
  3591  0E2B                     	;# 
  3592  0E2C                     	;# 
  3593  0E2D                     	;# 
  3594  0E2E                     	;# 
  3595  0E2F                     	;# 
  3596  0E30                     	;# 
  3597  0E31                     	;# 
  3598  0E32                     	;# 
  3599  0E33                     	;# 
  3600  0E34                     	;# 
  3601  0E35                     	;# 
  3602  0E36                     	;# 
  3603  0E37                     	;# 
  3604  0E8F                     	;# 
  3605  0E90                     	;# 
  3606  0E91                     	;# 
  3607  0E92                     	;# 
  3608  0E93                     	;# 
  3609  0E94                     	;# 
  3610  0E95                     	;# 
  3611  0E96                     	;# 
  3612  0E97                     	;# 
  3613  0E9C                     	;# 
  3614  0E9D                     	;# 
  3615  0E9E                     	;# 
  3616  0EA1                     	;# 
  3617  0EA2                     	;# 
  3618  0EA3                     	;# 
  3619  0EA4                     	;# 
  3620  0EA5                     	;# 
  3621  0EA9                     	;# 
  3622  0EAA                     	;# 
  3623  0EAB                     	;# 
  3624  0EAC                     	;# 
  3625  0EB1                     	;# 
  3626  0EB2                     	;# 
  3627  0EB3                     	;# 
  3628  0EB8                     	;# 
  3629  0EB9                     	;# 
  3630  0EBA                     	;# 
  3631  0EBB                     	;# 
  3632  0EBC                     	;# 
  3633  0EBD                     	;# 
  3634  0EBE                     	;# 
  3635  0EC3                     	;# 
  3636  0EC5                     	;# 
  3637  0EC6                     	;# 
  3638  0EC7                     	;# 
  3639  0EC8                     	;# 
  3640  0EC9                     	;# 
  3641  0ECA                     	;# 
  3642  0ECB                     	;# 
  3643  0ECC                     	;# 
  3644  0F10                     	;# 
  3645  0F11                     	;# 
  3646  0F12                     	;# 
  3647  0F13                     	;# 
  3648  0F14                     	;# 
  3649  0F15                     	;# 
  3650  0F16                     	;# 
  3651  0F17                     	;# 
  3652  0F18                     	;# 
  3653  0F19                     	;# 
  3654  0F1A                     	;# 
  3655  0F1B                     	;# 
  3656  0F1C                     	;# 
  3657  0F1D                     	;# 
  3658  0F1E                     	;# 
  3659  0F1F                     	;# 
  3660  0F20                     	;# 
  3661  0F21                     	;# 
  3662  0F22                     	;# 
  3663  0F23                     	;# 
  3664  0F24                     	;# 
  3665  0F25                     	;# 
  3666  0F26                     	;# 
  3667  0F27                     	;# 
  3668  0F38                     	;# 
  3669  0F39                     	;# 
  3670  0F3A                     	;# 
  3671  0F3B                     	;# 
  3672  0F3C                     	;# 
  3673  0F3D                     	;# 
  3674  0F3E                     	;# 
  3675  0F3F                     	;# 
  3676  0F40                     	;# 
  3677  0F41                     	;# 
  3678  0F43                     	;# 
  3679  0F44                     	;# 
  3680  0F45                     	;# 
  3681  0F46                     	;# 
  3682  0F47                     	;# 
  3683  0F48                     	;# 
  3684  0F49                     	;# 
  3685  0F4A                     	;# 
  3686  0F4B                     	;# 
  3687  0F4C                     	;# 
  3688  0F4E                     	;# 
  3689  0F4F                     	;# 
  3690  0F50                     	;# 
  3691  0F51                     	;# 
  3692  0F52                     	;# 
  3693  0F53                     	;# 
  3694  0F54                     	;# 
  3695  0F55                     	;# 
  3696  0F56                     	;# 
  3697  0F57                     	;# 
  3698  0F65                     	;# 
  3699  0F68                     	;# 
  3700  0F69                     	;# 
  3701  0F6A                     	;# 
  3702  0F6B                     	;# 
  3703  0FE4                     	;# 
  3704  0FE5                     	;# 
  3705  0FE6                     	;# 
  3706  0FE7                     	;# 
  3707  0FE8                     	;# 
  3708  0FE9                     	;# 
  3709  0FEA                     	;# 
  3710  0FEB                     	;# 
  3711  0FED                     	;# 
  3712  0FEE                     	;# 
  3713  0FEF                     	;# 
  3714  0000                     	;# 
  3715  0001                     	;# 
  3716  0002                     	;# 
  3717  0003                     	;# 
  3718  0004                     	;# 
  3719  0005                     	;# 
  3720  0006                     	;# 
  3721  0007                     	;# 
  3722  0008                     	;# 
  3723  0009                     	;# 
  3724  000A                     	;# 
  3725  000B                     	;# 
  3726  000C                     	;# 
  3727  000D                     	;# 
  3728  000E                     	;# 
  3729  0010                     	;# 
  3730  0011                     	;# 
  3731  0012                     	;# 
  3732  0013                     	;# 
  3733  0016                     	;# 
  3734  0017                     	;# 
  3735  0018                     	;# 
  3736  001C                     	;# 
  3737  001C                     	;# 
  3738  001D                     	;# 
  3739  001D                     	;# 
  3740  001E                     	;# 
  3741  001F                     	;# 
  3742  008C                     	;# 
  3743  008C                     	;# 
  3744  008D                     	;# 
  3745  008E                     	;# 
  3746  008E                     	;# 
  3747  008F                     	;# 
  3748  0090                     	;# 
  3749  0090                     	;# 
  3750  0091                     	;# 
  3751  0093                     	;# 
  3752  0094                     	;# 
  3753  0095                     	;# 
  3754  0096                     	;# 
  3755  0097                     	;# 
  3756  0098                     	;# 
  3757  0099                     	;# 
  3758  009A                     	;# 
  3759  009B                     	;# 
  3760  009C                     	;# 
  3761  009D                     	;# 
  3762  009E                     	;# 
  3763  010C                     	;# 
  3764  010D                     	;# 
  3765  010E                     	;# 
  3766  010E                     	;# 
  3767  010F                     	;# 
  3768  0110                     	;# 
  3769  0110                     	;# 
  3770  0111                     	;# 
  3771  0112                     	;# 
  3772  0112                     	;# 
  3773  0113                     	;# 
  3774  0114                     	;# 
  3775  0114                     	;# 
  3776  0115                     	;# 
  3777  0116                     	;# 
  3778  0116                     	;# 
  3779  0117                     	;# 
  3780  0119                     	;# 
  3781  0119                     	;# 
  3782  0119                     	;# 
  3783  011A                     	;# 
  3784  011A                     	;# 
  3785  011A                     	;# 
  3786  011B                     	;# 
  3787  011B                     	;# 
  3788  011B                     	;# 
  3789  011B                     	;# 
  3790  011B                     	;# 
  3791  011C                     	;# 
  3792  011C                     	;# 
  3793  011C                     	;# 
  3794  011D                     	;# 
  3795  011D                     	;# 
  3796  011D                     	;# 
  3797  011E                     	;# 
  3798  011E                     	;# 
  3799  011E                     	;# 
  3800  011F                     	;# 
  3801  011F                     	;# 
  3802  011F                     	;# 
  3803  011F                     	;# 
  3804  011F                     	;# 
  3805  018C                     	;# 
  3806  018D                     	;# 
  3807  018E                     	;# 
  3808  018F                     	;# 
  3809  0190                     	;# 
  3810  0191                     	;# 
  3811  0192                     	;# 
  3812  0196                     	;# 
  3813  0197                     	;# 
  3814  0198                     	;# 
  3815  0199                     	;# 
  3816  019A                     	;# 
  3817  019B                     	;# 
  3818  019C                     	;# 
  3819  020C                     	;# 
  3820  020C                     	;# 
  3821  020D                     	;# 
  3822  020E                     	;# 
  3823  020F                     	;# 
  3824  020F                     	;# 
  3825  0210                     	;# 
  3826  0210                     	;# 
  3827  0211                     	;# 
  3828  0211                     	;# 
  3829  0212                     	;# 
  3830  0212                     	;# 
  3831  0213                     	;# 
  3832  0214                     	;# 
  3833  0215                     	;# 
  3834  0215                     	;# 
  3835  0216                     	;# 
  3836  0216                     	;# 
  3837  0217                     	;# 
  3838  0217                     	;# 
  3839  0218                     	;# 
  3840  0218                     	;# 
  3841  0219                     	;# 
  3842  021A                     	;# 
  3843  021B                     	;# 
  3844  021B                     	;# 
  3845  021C                     	;# 
  3846  021C                     	;# 
  3847  021D                     	;# 
  3848  021D                     	;# 
  3849  021E                     	;# 
  3850  021F                     	;# 
  3851  028C                     	;# 
  3852  028C                     	;# 
  3853  028D                     	;# 
  3854  028D                     	;# 
  3855  028E                     	;# 
  3856  028F                     	;# 
  3857  0290                     	;# 
  3858  0290                     	;# 
  3859  0291                     	;# 
  3860  0292                     	;# 
  3861  0292                     	;# 
  3862  0293                     	;# 
  3863  0293                     	;# 
  3864  0294                     	;# 
  3865  0295                     	;# 
  3866  0296                     	;# 
  3867  0296                     	;# 
  3868  0297                     	;# 
  3869  0298                     	;# 
  3870  0298                     	;# 
  3871  0299                     	;# 
  3872  0299                     	;# 
  3873  029A                     	;# 
  3874  029B                     	;# 
  3875  029C                     	;# 
  3876  029C                     	;# 
  3877  029D                     	;# 
  3878  030C                     	;# 
  3879  030C                     	;# 
  3880  030D                     	;# 
  3881  030E                     	;# 
  3882  030F                     	;# 
  3883  0310                     	;# 
  3884  0310                     	;# 
  3885  0311                     	;# 
  3886  0312                     	;# 
  3887  0313                     	;# 
  3888  0314                     	;# 
  3889  0314                     	;# 
  3890  0315                     	;# 
  3891  0316                     	;# 
  3892  0317                     	;# 
  3893  0318                     	;# 
  3894  0318                     	;# 
  3895  0319                     	;# 
  3896  031A                     	;# 
  3897  031B                     	;# 
  3898  031C                     	;# 
  3899  031C                     	;# 
  3900  031D                     	;# 
  3901  031E                     	;# 
  3902  031F                     	;# 
  3903  038C                     	;# 
  3904  038D                     	;# 
  3905  038E                     	;# 
  3906  0390                     	;# 
  3907  0391                     	;# 
  3908  0392                     	;# 
  3909  040C                     	;# 
  3910  040D                     	;# 
  3911  040E                     	;# 
  3912  040F                     	;# 
  3913  0410                     	;# 
  3914  0411                     	;# 
  3915  0416                     	;# 
  3916  0416                     	;# 
  3917  0417                     	;# 
  3918  0418                     	;# 
  3919  0418                     	;# 
  3920  0419                     	;# 
  3921  041A                     	;# 
  3922  041A                     	;# 
  3923  041B                     	;# 
  3924  041C                     	;# 
  3925  041C                     	;# 
  3926  041D                     	;# 
  3927  041E                     	;# 
  3928  041F                     	;# 
  3929  048C                     	;# 
  3930  048C                     	;# 
  3931  048D                     	;# 
  3932  048E                     	;# 
  3933  048F                     	;# 
  3934  048F                     	;# 
  3935  0490                     	;# 
  3936  0491                     	;# 
  3937  0492                     	;# 
  3938  0492                     	;# 
  3939  0493                     	;# 
  3940  0494                     	;# 
  3941  0495                     	;# 
  3942  0495                     	;# 
  3943  0496                     	;# 
  3944  0497                     	;# 
  3945  0498                     	;# 
  3946  0499                     	;# 
  3947  049A                     	;# 
  3948  049B                     	;# 
  3949  049C                     	;# 
  3950  049D                     	;# 
  3951  050C                     	;# 
  3952  050C                     	;# 
  3953  050D                     	;# 
  3954  050E                     	;# 
  3955  050F                     	;# 
  3956  050F                     	;# 
  3957  0510                     	;# 
  3958  0511                     	;# 
  3959  0512                     	;# 
  3960  0512                     	;# 
  3961  0513                     	;# 
  3962  0514                     	;# 
  3963  0515                     	;# 
  3964  0515                     	;# 
  3965  0516                     	;# 
  3966  0517                     	;# 
  3967  0518                     	;# 
  3968  0519                     	;# 
  3969  051A                     	;# 
  3970  051B                     	;# 
  3971  051C                     	;# 
  3972  051D                     	;# 
  3973  058C                     	;# 
  3974  058C                     	;# 
  3975  058D                     	;# 
  3976  058E                     	;# 
  3977  058F                     	;# 
  3978  058F                     	;# 
  3979  0590                     	;# 
  3980  0591                     	;# 
  3981  0592                     	;# 
  3982  0593                     	;# 
  3983  060C                     	;# 
  3984  060D                     	;# 
  3985  060E                     	;# 
  3986  060F                     	;# 
  3987  0610                     	;# 
  3988  0611                     	;# 
  3989  0612                     	;# 
  3990  0613                     	;# 
  3991  0614                     	;# 
  3992  0616                     	;# 
  3993  0617                     	;# 
  3994  0618                     	;# 
  3995  0619                     	;# 
  3996  061A                     	;# 
  3997  061B                     	;# 
  3998  061C                     	;# 
  3999  061D                     	;# 
  4000  061E                     	;# 
  4001  068C                     	;# 
  4002  068D                     	;# 
  4003  068E                     	;# 
  4004  068F                     	;# 
  4005  0690                     	;# 
  4006  0691                     	;# 
  4007  0692                     	;# 
  4008  0693                     	;# 
  4009  0694                     	;# 
  4010  070C                     	;# 
  4011  070D                     	;# 
  4012  070E                     	;# 
  4013  070F                     	;# 
  4014  0710                     	;# 
  4015  0711                     	;# 
  4016  0712                     	;# 
  4017  0713                     	;# 
  4018  0714                     	;# 
  4019  0716                     	;# 
  4020  0717                     	;# 
  4021  0718                     	;# 
  4022  0719                     	;# 
  4023  071A                     	;# 
  4024  071B                     	;# 
  4025  071C                     	;# 
  4026  071D                     	;# 
  4027  071E                     	;# 
  4028  0796                     	;# 
  4029  0797                     	;# 
  4030  0798                     	;# 
  4031  0799                     	;# 
  4032  079A                     	;# 
  4033  079B                     	;# 
  4034  080C                     	;# 
  4035  080D                     	;# 
  4036  080E                     	;# 
  4037  080F                     	;# 
  4038  0810                     	;# 
  4039  0811                     	;# 
  4040  0812                     	;# 
  4041  0813                     	;# 
  4042  0814                     	;# 
  4043  081A                     	;# 
  4044  081B                     	;# 
  4045  081C                     	;# 
  4046  081D                     	;# 
  4047  081E                     	;# 
  4048  081F                     	;# 
  4049  088C                     	;# 
  4050  088D                     	;# 
  4051  088E                     	;# 
  4052  088F                     	;# 
  4053  0890                     	;# 
  4054  0891                     	;# 
  4055  0892                     	;# 
  4056  0893                     	;# 
  4057  0895                     	;# 
  4058  0896                     	;# 
  4059  0897                     	;# 
  4060  0898                     	;# 
  4061  0899                     	;# 
  4062  089A                     	;# 
  4063  089B                     	;# 
  4064  090C                     	;# 
  4065  090E                     	;# 
  4066  090F                     	;# 
  4067  091F                     	;# 
  4068  091F                     	;# 
  4069  098F                     	;# 
  4070  098F                     	;# 
  4071  0990                     	;# 
  4072  0991                     	;# 
  4073  0992                     	;# 
  4074  0993                     	;# 
  4075  0994                     	;# 
  4076  0995                     	;# 
  4077  0996                     	;# 
  4078  0997                     	;# 
  4079  0E0F                     	;# 
  4080  0E10                     	;# 
  4081  0E11                     	;# 
  4082  0E12                     	;# 
  4083  0E13                     	;# 
  4084  0E14                     	;# 
  4085  0E15                     	;# 
  4086  0E16                     	;# 
  4087  0E17                     	;# 
  4088  0E18                     	;# 
  4089  0E19                     	;# 
  4090  0E1A                     	;# 
  4091  0E1B                     	;# 
  4092  0E1C                     	;# 
  4093  0E1D                     	;# 
  4094  0E1E                     	;# 
  4095  0E1F                     	;# 
  4096  0E20                     	;# 
  4097  0E21                     	;# 
  4098  0E22                     	;# 
  4099  0E23                     	;# 
  4100  0E24                     	;# 
  4101  0E25                     	;# 
  4102  0E26                     	;# 
  4103  0E27                     	;# 
  4104  0E28                     	;# 
  4105  0E29                     	;# 
  4106  0E2A                     	;# 
  4107  0E2B                     	;# 
  4108  0E2C                     	;# 
  4109  0E2D                     	;# 
  4110  0E2E                     	;# 
  4111  0E2F                     	;# 
  4112  0E30                     	;# 
  4113  0E31                     	;# 
  4114  0E32                     	;# 
  4115  0E33                     	;# 
  4116  0E34                     	;# 
  4117  0E35                     	;# 
  4118  0E36                     	;# 
  4119  0E37                     	;# 
  4120  0E8F                     	;# 
  4121  0E90                     	;# 
  4122  0E91                     	;# 
  4123  0E92                     	;# 
  4124  0E93                     	;# 
  4125  0E94                     	;# 
  4126  0E95                     	;# 
  4127  0E96                     	;# 
  4128  0E97                     	;# 
  4129  0E9C                     	;# 
  4130  0E9D                     	;# 
  4131  0E9E                     	;# 
  4132  0EA1                     	;# 
  4133  0EA2                     	;# 
  4134  0EA3                     	;# 
  4135  0EA4                     	;# 
  4136  0EA5                     	;# 
  4137  0EA9                     	;# 
  4138  0EAA                     	;# 
  4139  0EAB                     	;# 
  4140  0EAC                     	;# 
  4141  0EB1                     	;# 
  4142  0EB2                     	;# 
  4143  0EB3                     	;# 
  4144  0EB8                     	;# 
  4145  0EB9                     	;# 
  4146  0EBA                     	;# 
  4147  0EBB                     	;# 
  4148  0EBC                     	;# 
  4149  0EBD                     	;# 
  4150  0EBE                     	;# 
  4151  0EC3                     	;# 
  4152  0EC5                     	;# 
  4153  0EC6                     	;# 
  4154  0EC7                     	;# 
  4155  0EC8                     	;# 
  4156  0EC9                     	;# 
  4157  0ECA                     	;# 
  4158  0ECB                     	;# 
  4159  0ECC                     	;# 
  4160  0F10                     	;# 
  4161  0F11                     	;# 
  4162  0F12                     	;# 
  4163  0F13                     	;# 
  4164  0F14                     	;# 
  4165  0F15                     	;# 
  4166  0F16                     	;# 
  4167  0F17                     	;# 
  4168  0F18                     	;# 
  4169  0F19                     	;# 
  4170  0F1A                     	;# 
  4171  0F1B                     	;# 
  4172  0F1C                     	;# 
  4173  0F1D                     	;# 
  4174  0F1E                     	;# 
  4175  0F1F                     	;# 
  4176  0F20                     	;# 
  4177  0F21                     	;# 
  4178  0F22                     	;# 
  4179  0F23                     	;# 
  4180  0F24                     	;# 
  4181  0F25                     	;# 
  4182  0F26                     	;# 
  4183  0F27                     	;# 
  4184  0F38                     	;# 
  4185  0F39                     	;# 
  4186  0F3A                     	;# 
  4187  0F3B                     	;# 
  4188  0F3C                     	;# 
  4189  0F3D                     	;# 
  4190  0F3E                     	;# 
  4191  0F3F                     	;# 
  4192  0F40                     	;# 
  4193  0F41                     	;# 
  4194  0F43                     	;# 
  4195  0F44                     	;# 
  4196  0F45                     	;# 
  4197  0F46                     	;# 
  4198  0F47                     	;# 
  4199  0F48                     	;# 
  4200  0F49                     	;# 
  4201  0F4A                     	;# 
  4202  0F4B                     	;# 
  4203  0F4C                     	;# 
  4204  0F4E                     	;# 
  4205  0F4F                     	;# 
  4206  0F50                     	;# 
  4207  0F51                     	;# 
  4208  0F52                     	;# 
  4209  0F53                     	;# 
  4210  0F54                     	;# 
  4211  0F55                     	;# 
  4212  0F56                     	;# 
  4213  0F57                     	;# 
  4214  0F65                     	;# 
  4215  0F68                     	;# 
  4216  0F69                     	;# 
  4217  0F6A                     	;# 
  4218  0F6B                     	;# 
  4219  0FE4                     	;# 
  4220  0FE5                     	;# 
  4221  0FE6                     	;# 
  4222  0FE7                     	;# 
  4223  0FE8                     	;# 
  4224  0FE9                     	;# 
  4225  0FEA                     	;# 
  4226  0FEB                     	;# 
  4227  0FED                     	;# 
  4228  0FEE                     	;# 
  4229  0FEF                     	;# 
  4230  0000                     	;# 
  4231  0001                     	;# 
  4232  0002                     	;# 
  4233  0003                     	;# 
  4234  0004                     	;# 
  4235  0005                     	;# 
  4236  0006                     	;# 
  4237  0007                     	;# 
  4238  0008                     	;# 
  4239  0009                     	;# 
  4240  000A                     	;# 
  4241  000B                     	;# 
  4242  000C                     	;# 
  4243  000D                     	;# 
  4244  000E                     	;# 
  4245  0010                     	;# 
  4246  0011                     	;# 
  4247  0012                     	;# 
  4248  0013                     	;# 
  4249  0016                     	;# 
  4250  0017                     	;# 
  4251  0018                     	;# 
  4252  001C                     	;# 
  4253  001C                     	;# 
  4254  001D                     	;# 
  4255  001D                     	;# 
  4256  001E                     	;# 
  4257  001F                     	;# 
  4258  008C                     	;# 
  4259  008C                     	;# 
  4260  008D                     	;# 
  4261  008E                     	;# 
  4262  008E                     	;# 
  4263  008F                     	;# 
  4264  0090                     	;# 
  4265  0090                     	;# 
  4266  0091                     	;# 
  4267  0093                     	;# 
  4268  0094                     	;# 
  4269  0095                     	;# 
  4270  0096                     	;# 
  4271  0097                     	;# 
  4272  0098                     	;# 
  4273  0099                     	;# 
  4274  009A                     	;# 
  4275  009B                     	;# 
  4276  009C                     	;# 
  4277  009D                     	;# 
  4278  009E                     	;# 
  4279  010C                     	;# 
  4280  010D                     	;# 
  4281  010E                     	;# 
  4282  010E                     	;# 
  4283  010F                     	;# 
  4284  0110                     	;# 
  4285  0110                     	;# 
  4286  0111                     	;# 
  4287  0112                     	;# 
  4288  0112                     	;# 
  4289  0113                     	;# 
  4290  0114                     	;# 
  4291  0114                     	;# 
  4292  0115                     	;# 
  4293  0116                     	;# 
  4294  0116                     	;# 
  4295  0117                     	;# 
  4296  0119                     	;# 
  4297  0119                     	;# 
  4298  0119                     	;# 
  4299  011A                     	;# 
  4300  011A                     	;# 
  4301  011A                     	;# 
  4302  011B                     	;# 
  4303  011B                     	;# 
  4304  011B                     	;# 
  4305  011B                     	;# 
  4306  011B                     	;# 
  4307  011C                     	;# 
  4308  011C                     	;# 
  4309  011C                     	;# 
  4310  011D                     	;# 
  4311  011D                     	;# 
  4312  011D                     	;# 
  4313  011E                     	;# 
  4314  011E                     	;# 
  4315  011E                     	;# 
  4316  011F                     	;# 
  4317  011F                     	;# 
  4318  011F                     	;# 
  4319  011F                     	;# 
  4320  011F                     	;# 
  4321  018C                     	;# 
  4322  018D                     	;# 
  4323  018E                     	;# 
  4324  018F                     	;# 
  4325  0190                     	;# 
  4326  0191                     	;# 
  4327  0192                     	;# 
  4328  0196                     	;# 
  4329  0197                     	;# 
  4330  0198                     	;# 
  4331  0199                     	;# 
  4332  019A                     	;# 
  4333  019B                     	;# 
  4334  019C                     	;# 
  4335  020C                     	;# 
  4336  020C                     	;# 
  4337  020D                     	;# 
  4338  020E                     	;# 
  4339  020F                     	;# 
  4340  020F                     	;# 
  4341  0210                     	;# 
  4342  0210                     	;# 
  4343  0211                     	;# 
  4344  0211                     	;# 
  4345  0212                     	;# 
  4346  0212                     	;# 
  4347  0213                     	;# 
  4348  0214                     	;# 
  4349  0215                     	;# 
  4350  0215                     	;# 
  4351  0216                     	;# 
  4352  0216                     	;# 
  4353  0217                     	;# 
  4354  0217                     	;# 
  4355  0218                     	;# 
  4356  0218                     	;# 
  4357  0219                     	;# 
  4358  021A                     	;# 
  4359  021B                     	;# 
  4360  021B                     	;# 
  4361  021C                     	;# 
  4362  021C                     	;# 
  4363  021D                     	;# 
  4364  021D                     	;# 
  4365  021E                     	;# 
  4366  021F                     	;# 
  4367  028C                     	;# 
  4368  028C                     	;# 
  4369  028D                     	;# 
  4370  028D                     	;# 
  4371  028E                     	;# 
  4372  028F                     	;# 
  4373  0290                     	;# 
  4374  0290                     	;# 
  4375  0291                     	;# 
  4376  0292                     	;# 
  4377  0292                     	;# 
  4378  0293                     	;# 
  4379  0293                     	;# 
  4380  0294                     	;# 
  4381  0295                     	;# 
  4382  0296                     	;# 
  4383  0296                     	;# 
  4384  0297                     	;# 
  4385  0298                     	;# 
  4386  0298                     	;# 
  4387  0299                     	;# 
  4388  0299                     	;# 
  4389  029A                     	;# 
  4390  029B                     	;# 
  4391  029C                     	;# 
  4392  029C                     	;# 
  4393  029D                     	;# 
  4394  030C                     	;# 
  4395  030C                     	;# 
  4396  030D                     	;# 
  4397  030E                     	;# 
  4398  030F                     	;# 
  4399  0310                     	;# 
  4400  0310                     	;# 
  4401  0311                     	;# 
  4402  0312                     	;# 
  4403  0313                     	;# 
  4404  0314                     	;# 
  4405  0314                     	;# 
  4406  0315                     	;# 
  4407  0316                     	;# 
  4408  0317                     	;# 
  4409  0318                     	;# 
  4410  0318                     	;# 
  4411  0319                     	;# 
  4412  031A                     	;# 
  4413  031B                     	;# 
  4414  031C                     	;# 
  4415  031C                     	;# 
  4416  031D                     	;# 
  4417  031E                     	;# 
  4418  031F                     	;# 
  4419  038C                     	;# 
  4420  038D                     	;# 
  4421  038E                     	;# 
  4422  0390                     	;# 
  4423  0391                     	;# 
  4424  0392                     	;# 
  4425  040C                     	;# 
  4426  040D                     	;# 
  4427  040E                     	;# 
  4428  040F                     	;# 
  4429  0410                     	;# 
  4430  0411                     	;# 
  4431  0416                     	;# 
  4432  0416                     	;# 
  4433  0417                     	;# 
  4434  0418                     	;# 
  4435  0418                     	;# 
  4436  0419                     	;# 
  4437  041A                     	;# 
  4438  041A                     	;# 
  4439  041B                     	;# 
  4440  041C                     	;# 
  4441  041C                     	;# 
  4442  041D                     	;# 
  4443  041E                     	;# 
  4444  041F                     	;# 
  4445  048C                     	;# 
  4446  048C                     	;# 
  4447  048D                     	;# 
  4448  048E                     	;# 
  4449  048F                     	;# 
  4450  048F                     	;# 
  4451  0490                     	;# 
  4452  0491                     	;# 
  4453  0492                     	;# 
  4454  0492                     	;# 
  4455  0493                     	;# 
  4456  0494                     	;# 
  4457  0495                     	;# 
  4458  0495                     	;# 
  4459  0496                     	;# 
  4460  0497                     	;# 
  4461  0498                     	;# 
  4462  0499                     	;# 
  4463  049A                     	;# 
  4464  049B                     	;# 
  4465  049C                     	;# 
  4466  049D                     	;# 
  4467  050C                     	;# 
  4468  050C                     	;# 
  4469  050D                     	;# 
  4470  050E                     	;# 
  4471  050F                     	;# 
  4472  050F                     	;# 
  4473  0510                     	;# 
  4474  0511                     	;# 
  4475  0512                     	;# 
  4476  0512                     	;# 
  4477  0513                     	;# 
  4478  0514                     	;# 
  4479  0515                     	;# 
  4480  0515                     	;# 
  4481  0516                     	;# 
  4482  0517                     	;# 
  4483  0518                     	;# 
  4484  0519                     	;# 
  4485  051A                     	;# 
  4486  051B                     	;# 
  4487  051C                     	;# 
  4488  051D                     	;# 
  4489  058C                     	;# 
  4490  058C                     	;# 
  4491  058D                     	;# 
  4492  058E                     	;# 
  4493  058F                     	;# 
  4494  058F                     	;# 
  4495  0590                     	;# 
  4496  0591                     	;# 
  4497  0592                     	;# 
  4498  0593                     	;# 
  4499  060C                     	;# 
  4500  060D                     	;# 
  4501  060E                     	;# 
  4502  060F                     	;# 
  4503  0610                     	;# 
  4504  0611                     	;# 
  4505  0612                     	;# 
  4506  0613                     	;# 
  4507  0614                     	;# 
  4508  0616                     	;# 
  4509  0617                     	;# 
  4510  0618                     	;# 
  4511  0619                     	;# 
  4512  061A                     	;# 
  4513  061B                     	;# 
  4514  061C                     	;# 
  4515  061D                     	;# 
  4516  061E                     	;# 
  4517  068C                     	;# 
  4518  068D                     	;# 
  4519  068E                     	;# 
  4520  068F                     	;# 
  4521  0690                     	;# 
  4522  0691                     	;# 
  4523  0692                     	;# 
  4524  0693                     	;# 
  4525  0694                     	;# 
  4526  070C                     	;# 
  4527  070D                     	;# 
  4528  070E                     	;# 
  4529  070F                     	;# 
  4530  0710                     	;# 
  4531  0711                     	;# 
  4532  0712                     	;# 
  4533  0713                     	;# 
  4534  0714                     	;# 
  4535  0716                     	;# 
  4536  0717                     	;# 
  4537  0718                     	;# 
  4538  0719                     	;# 
  4539  071A                     	;# 
  4540  071B                     	;# 
  4541  071C                     	;# 
  4542  071D                     	;# 
  4543  071E                     	;# 
  4544  0796                     	;# 
  4545  0797                     	;# 
  4546  0798                     	;# 
  4547  0799                     	;# 
  4548  079A                     	;# 
  4549  079B                     	;# 
  4550  080C                     	;# 
  4551  080D                     	;# 
  4552  080E                     	;# 
  4553  080F                     	;# 
  4554  0810                     	;# 
  4555  0811                     	;# 
  4556  0812                     	;# 
  4557  0813                     	;# 
  4558  0814                     	;# 
  4559  081A                     	;# 
  4560  081B                     	;# 
  4561  081C                     	;# 
  4562  081D                     	;# 
  4563  081E                     	;# 
  4564  081F                     	;# 
  4565  088C                     	;# 
  4566  088D                     	;# 
  4567  088E                     	;# 
  4568  088F                     	;# 
  4569  0890                     	;# 
  4570  0891                     	;# 
  4571  0892                     	;# 
  4572  0893                     	;# 
  4573  0895                     	;# 
  4574  0896                     	;# 
  4575  0897                     	;# 
  4576  0898                     	;# 
  4577  0899                     	;# 
  4578  089A                     	;# 
  4579  089B                     	;# 
  4580  090C                     	;# 
  4581  090E                     	;# 
  4582  090F                     	;# 
  4583  091F                     	;# 
  4584  091F                     	;# 
  4585  098F                     	;# 
  4586  098F                     	;# 
  4587  0990                     	;# 
  4588  0991                     	;# 
  4589  0992                     	;# 
  4590  0993                     	;# 
  4591  0994                     	;# 
  4592  0995                     	;# 
  4593  0996                     	;# 
  4594  0997                     	;# 
  4595  0E0F                     	;# 
  4596  0E10                     	;# 
  4597  0E11                     	;# 
  4598  0E12                     	;# 
  4599  0E13                     	;# 
  4600  0E14                     	;# 
  4601  0E15                     	;# 
  4602  0E16                     	;# 
  4603  0E17                     	;# 
  4604  0E18                     	;# 
  4605  0E19                     	;# 
  4606  0E1A                     	;# 
  4607  0E1B                     	;# 
  4608  0E1C                     	;# 
  4609  0E1D                     	;# 
  4610  0E1E                     	;# 
  4611  0E1F                     	;# 
  4612  0E20                     	;# 
  4613  0E21                     	;# 
  4614  0E22                     	;# 
  4615  0E23                     	;# 
  4616  0E24                     	;# 
  4617  0E25                     	;# 
  4618  0E26                     	;# 
  4619  0E27                     	;# 
  4620  0E28                     	;# 
  4621  0E29                     	;# 
  4622  0E2A                     	;# 
  4623  0E2B                     	;# 
  4624  0E2C                     	;# 
  4625  0E2D                     	;# 
  4626  0E2E                     	;# 
  4627  0E2F                     	;# 
  4628  0E30                     	;# 
  4629  0E31                     	;# 
  4630  0E32                     	;# 
  4631  0E33                     	;# 
  4632  0E34                     	;# 
  4633  0E35                     	;# 
  4634  0E36                     	;# 
  4635  0E37                     	;# 
  4636  0E8F                     	;# 
  4637  0E90                     	;# 
  4638  0E91                     	;# 
  4639  0E92                     	;# 
  4640  0E93                     	;# 
  4641  0E94                     	;# 
  4642  0E95                     	;# 
  4643  0E96                     	;# 
  4644  0E97                     	;# 
  4645  0E9C                     	;# 
  4646  0E9D                     	;# 
  4647  0E9E                     	;# 
  4648  0EA1                     	;# 
  4649  0EA2                     	;# 
  4650  0EA3                     	;# 
  4651  0EA4                     	;# 
  4652  0EA5                     	;# 
  4653  0EA9                     	;# 
  4654  0EAA                     	;# 
  4655  0EAB                     	;# 
  4656  0EAC                     	;# 
  4657  0EB1                     	;# 
  4658  0EB2                     	;# 
  4659  0EB3                     	;# 
  4660  0EB8                     	;# 
  4661  0EB9                     	;# 
  4662  0EBA                     	;# 
  4663  0EBB                     	;# 
  4664  0EBC                     	;# 
  4665  0EBD                     	;# 
  4666  0EBE                     	;# 
  4667  0EC3                     	;# 
  4668  0EC5                     	;# 
  4669  0EC6                     	;# 
  4670  0EC7                     	;# 
  4671  0EC8                     	;# 
  4672  0EC9                     	;# 
  4673  0ECA                     	;# 
  4674  0ECB                     	;# 
  4675  0ECC                     	;# 
  4676  0F10                     	;# 
  4677  0F11                     	;# 
  4678  0F12                     	;# 
  4679  0F13                     	;# 
  4680  0F14                     	;# 
  4681  0F15                     	;# 
  4682  0F16                     	;# 
  4683  0F17                     	;# 
  4684  0F18                     	;# 
  4685  0F19                     	;# 
  4686  0F1A                     	;# 
  4687  0F1B                     	;# 
  4688  0F1C                     	;# 
  4689  0F1D                     	;# 
  4690  0F1E                     	;# 
  4691  0F1F                     	;# 
  4692  0F20                     	;# 
  4693  0F21                     	;# 
  4694  0F22                     	;# 
  4695  0F23                     	;# 
  4696  0F24                     	;# 
  4697  0F25                     	;# 
  4698  0F26                     	;# 
  4699  0F27                     	;# 
  4700  0F38                     	;# 
  4701  0F39                     	;# 
  4702  0F3A                     	;# 
  4703  0F3B                     	;# 
  4704  0F3C                     	;# 
  4705  0F3D                     	;# 
  4706  0F3E                     	;# 
  4707  0F3F                     	;# 
  4708  0F40                     	;# 
  4709  0F41                     	;# 
  4710  0F43                     	;# 
  4711  0F44                     	;# 
  4712  0F45                     	;# 
  4713  0F46                     	;# 
  4714  0F47                     	;# 
  4715  0F48                     	;# 
  4716  0F49                     	;# 
  4717  0F4A                     	;# 
  4718  0F4B                     	;# 
  4719  0F4C                     	;# 
  4720  0F4E                     	;# 
  4721  0F4F                     	;# 
  4722  0F50                     	;# 
  4723  0F51                     	;# 
  4724  0F52                     	;# 
  4725  0F53                     	;# 
  4726  0F54                     	;# 
  4727  0F55                     	;# 
  4728  0F56                     	;# 
  4729  0F57                     	;# 
  4730  0F65                     	;# 
  4731  0F68                     	;# 
  4732  0F69                     	;# 
  4733  0F6A                     	;# 
  4734  0F6B                     	;# 
  4735  0FE4                     	;# 
  4736  0FE5                     	;# 
  4737  0FE6                     	;# 
  4738  0FE7                     	;# 
  4739  0FE8                     	;# 
  4740  0FE9                     	;# 
  4741  0FEA                     	;# 
  4742  0FEB                     	;# 
  4743  0FED                     	;# 
  4744  0FEE                     	;# 
  4745  0FEF                     	;# 
  4746  0000                     	;# 
  4747  0001                     	;# 
  4748  0002                     	;# 
  4749  0003                     	;# 
  4750  0004                     	;# 
  4751  0005                     	;# 
  4752  0006                     	;# 
  4753  0007                     	;# 
  4754  0008                     	;# 
  4755  0009                     	;# 
  4756  000A                     	;# 
  4757  000B                     	;# 
  4758  000C                     	;# 
  4759  000D                     	;# 
  4760  000E                     	;# 
  4761  0010                     	;# 
  4762  0011                     	;# 
  4763  0012                     	;# 
  4764  0013                     	;# 
  4765  0016                     	;# 
  4766  0017                     	;# 
  4767  0018                     	;# 
  4768  001C                     	;# 
  4769  001C                     	;# 
  4770  001D                     	;# 
  4771  001D                     	;# 
  4772  001E                     	;# 
  4773  001F                     	;# 
  4774  008C                     	;# 
  4775  008C                     	;# 
  4776  008D                     	;# 
  4777  008E                     	;# 
  4778  008E                     	;# 
  4779  008F                     	;# 
  4780  0090                     	;# 
  4781  0090                     	;# 
  4782  0091                     	;# 
  4783  0093                     	;# 
  4784  0094                     	;# 
  4785  0095                     	;# 
  4786  0096                     	;# 
  4787  0097                     	;# 
  4788  0098                     	;# 
  4789  0099                     	;# 
  4790  009A                     	;# 
  4791  009B                     	;# 
  4792  009C                     	;# 
  4793  009D                     	;# 
  4794  009E                     	;# 
  4795  010C                     	;# 
  4796  010D                     	;# 
  4797  010E                     	;# 
  4798  010E                     	;# 
  4799  010F                     	;# 
  4800  0110                     	;# 
  4801  0110                     	;# 
  4802  0111                     	;# 
  4803  0112                     	;# 
  4804  0112                     	;# 
  4805  0113                     	;# 
  4806  0114                     	;# 
  4807  0114                     	;# 
  4808  0115                     	;# 
  4809  0116                     	;# 
  4810  0116                     	;# 
  4811  0117                     	;# 
  4812  0119                     	;# 
  4813  0119                     	;# 
  4814  0119                     	;# 
  4815  011A                     	;# 
  4816  011A                     	;# 
  4817  011A                     	;# 
  4818  011B                     	;# 
  4819  011B                     	;# 
  4820  011B                     	;# 
  4821  011B                     	;# 
  4822  011B                     	;# 
  4823  011C                     	;# 
  4824  011C                     	;# 
  4825  011C                     	;# 
  4826  011D                     	;# 
  4827  011D                     	;# 
  4828  011D                     	;# 
  4829  011E                     	;# 
  4830  011E                     	;# 
  4831  011E                     	;# 
  4832  011F                     	;# 
  4833  011F                     	;# 
  4834  011F                     	;# 
  4835  011F                     	;# 
  4836  011F                     	;# 
  4837  018C                     	;# 
  4838  018D                     	;# 
  4839  018E                     	;# 
  4840  018F                     	;# 
  4841  0190                     	;# 
  4842  0191                     	;# 
  4843  0192                     	;# 
  4844  0196                     	;# 
  4845  0197                     	;# 
  4846  0198                     	;# 
  4847  0199                     	;# 
  4848  019A                     	;# 
  4849  019B                     	;# 
  4850  019C                     	;# 
  4851  020C                     	;# 
  4852  020C                     	;# 
  4853  020D                     	;# 
  4854  020E                     	;# 
  4855  020F                     	;# 
  4856  020F                     	;# 
  4857  0210                     	;# 
  4858  0210                     	;# 
  4859  0211                     	;# 
  4860  0211                     	;# 
  4861  0212                     	;# 
  4862  0212                     	;# 
  4863  0213                     	;# 
  4864  0214                     	;# 
  4865  0215                     	;# 
  4866  0215                     	;# 
  4867  0216                     	;# 
  4868  0216                     	;# 
  4869  0217                     	;# 
  4870  0217                     	;# 
  4871  0218                     	;# 
  4872  0218                     	;# 
  4873  0219                     	;# 
  4874  021A                     	;# 
  4875  021B                     	;# 
  4876  021B                     	;# 
  4877  021C                     	;# 
  4878  021C                     	;# 
  4879  021D                     	;# 
  4880  021D                     	;# 
  4881  021E                     	;# 
  4882  021F                     	;# 
  4883  028C                     	;# 
  4884  028C                     	;# 
  4885  028D                     	;# 
  4886  028D                     	;# 
  4887  028E                     	;# 
  4888  028F                     	;# 
  4889  0290                     	;# 
  4890  0290                     	;# 
  4891  0291                     	;# 
  4892  0292                     	;# 
  4893  0292                     	;# 
  4894  0293                     	;# 
  4895  0293                     	;# 
  4896  0294                     	;# 
  4897  0295                     	;# 
  4898  0296                     	;# 
  4899  0296                     	;# 
  4900  0297                     	;# 
  4901  0298                     	;# 
  4902  0298                     	;# 
  4903  0299                     	;# 
  4904  0299                     	;# 
  4905  029A                     	;# 
  4906  029B                     	;# 
  4907  029C                     	;# 
  4908  029C                     	;# 
  4909  029D                     	;# 
  4910  030C                     	;# 
  4911  030C                     	;# 
  4912  030D                     	;# 
  4913  030E                     	;# 
  4914  030F                     	;# 
  4915  0310                     	;# 
  4916  0310                     	;# 
  4917  0311                     	;# 
  4918  0312                     	;# 
  4919  0313                     	;# 
  4920  0314                     	;# 
  4921  0314                     	;# 
  4922  0315                     	;# 
  4923  0316                     	;# 
  4924  0317                     	;# 
  4925  0318                     	;# 
  4926  0318                     	;# 
  4927  0319                     	;# 
  4928  031A                     	;# 
  4929  031B                     	;# 
  4930  031C                     	;# 
  4931  031C                     	;# 
  4932  031D                     	;# 
  4933  031E                     	;# 
  4934  031F                     	;# 
  4935  038C                     	;# 
  4936  038D                     	;# 
  4937  038E                     	;# 
  4938  0390                     	;# 
  4939  0391                     	;# 
  4940  0392                     	;# 
  4941  040C                     	;# 
  4942  040D                     	;# 
  4943  040E                     	;# 
  4944  040F                     	;# 
  4945  0410                     	;# 
  4946  0411                     	;# 
  4947  0416                     	;# 
  4948  0416                     	;# 
  4949  0417                     	;# 
  4950  0418                     	;# 
  4951  0418                     	;# 
  4952  0419                     	;# 
  4953  041A                     	;# 
  4954  041A                     	;# 
  4955  041B                     	;# 
  4956  041C                     	;# 
  4957  041C                     	;# 
  4958  041D                     	;# 
  4959  041E                     	;# 
  4960  041F                     	;# 
  4961  048C                     	;# 
  4962  048C                     	;# 
  4963  048D                     	;# 
  4964  048E                     	;# 
  4965  048F                     	;# 
  4966  048F                     	;# 
  4967  0490                     	;# 
  4968  0491                     	;# 
  4969  0492                     	;# 
  4970  0492                     	;# 
  4971  0493                     	;# 
  4972  0494                     	;# 
  4973  0495                     	;# 
  4974  0495                     	;# 
  4975  0496                     	;# 
  4976  0497                     	;# 
  4977  0498                     	;# 
  4978  0499                     	;# 
  4979  049A                     	;# 
  4980  049B                     	;# 
  4981  049C                     	;# 
  4982  049D                     	;# 
  4983  050C                     	;# 
  4984  050C                     	;# 
  4985  050D                     	;# 
  4986  050E                     	;# 
  4987  050F                     	;# 
  4988  050F                     	;# 
  4989  0510                     	;# 
  4990  0511                     	;# 
  4991  0512                     	;# 
  4992  0512                     	;# 
  4993  0513                     	;# 
  4994  0514                     	;# 
  4995  0515                     	;# 
  4996  0515                     	;# 
  4997  0516                     	;# 
  4998  0517                     	;# 
  4999  0518                     	;# 
  5000  0519                     	;# 
  5001  051A                     	;# 
  5002  051B                     	;# 
  5003  051C                     	;# 
  5004  051D                     	;# 
  5005  058C                     	;# 
  5006  058C                     	;# 
  5007  058D                     	;# 
  5008  058E                     	;# 
  5009  058F                     	;# 
  5010  058F                     	;# 
  5011  0590                     	;# 
  5012  0591                     	;# 
  5013  0592                     	;# 
  5014  0593                     	;# 
  5015  060C                     	;# 
  5016  060D                     	;# 
  5017  060E                     	;# 
  5018  060F                     	;# 
  5019  0610                     	;# 
  5020  0611                     	;# 
  5021  0612                     	;# 
  5022  0613                     	;# 
  5023  0614                     	;# 
  5024  0616                     	;# 
  5025  0617                     	;# 
  5026  0618                     	;# 
  5027  0619                     	;# 
  5028  061A                     	;# 
  5029  061B                     	;# 
  5030  061C                     	;# 
  5031  061D                     	;# 
  5032  061E                     	;# 
  5033  068C                     	;# 
  5034  068D                     	;# 
  5035  068E                     	;# 
  5036  068F                     	;# 
  5037  0690                     	;# 
  5038  0691                     	;# 
  5039  0692                     	;# 
  5040  0693                     	;# 
  5041  0694                     	;# 
  5042  070C                     	;# 
  5043  070D                     	;# 
  5044  070E                     	;# 
  5045  070F                     	;# 
  5046  0710                     	;# 
  5047  0711                     	;# 
  5048  0712                     	;# 
  5049  0713                     	;# 
  5050  0714                     	;# 
  5051  0716                     	;# 
  5052  0717                     	;# 
  5053  0718                     	;# 
  5054  0719                     	;# 
  5055  071A                     	;# 
  5056  071B                     	;# 
  5057  071C                     	;# 
  5058  071D                     	;# 
  5059  071E                     	;# 
  5060  0796                     	;# 
  5061  0797                     	;# 
  5062  0798                     	;# 
  5063  0799                     	;# 
  5064  079A                     	;# 
  5065  079B                     	;# 
  5066  080C                     	;# 
  5067  080D                     	;# 
  5068  080E                     	;# 
  5069  080F                     	;# 
  5070  0810                     	;# 
  5071  0811                     	;# 
  5072  0812                     	;# 
  5073  0813                     	;# 
  5074  0814                     	;# 
  5075  081A                     	;# 
  5076  081B                     	;# 
  5077  081C                     	;# 
  5078  081D                     	;# 
  5079  081E                     	;# 
  5080  081F                     	;# 
  5081  088C                     	;# 
  5082  088D                     	;# 
  5083  088E                     	;# 
  5084  088F                     	;# 
  5085  0890                     	;# 
  5086  0891                     	;# 
  5087  0892                     	;# 
  5088  0893                     	;# 
  5089  0895                     	;# 
  5090  0896                     	;# 
  5091  0897                     	;# 
  5092  0898                     	;# 
  5093  0899                     	;# 
  5094  089A                     	;# 
  5095  089B                     	;# 
  5096  090C                     	;# 
  5097  090E                     	;# 
  5098  090F                     	;# 
  5099  091F                     	;# 
  5100  091F                     	;# 
  5101  098F                     	;# 
  5102  098F                     	;# 
  5103  0990                     	;# 
  5104  0991                     	;# 
  5105  0992                     	;# 
  5106  0993                     	;# 
  5107  0994                     	;# 
  5108  0995                     	;# 
  5109  0996                     	;# 
  5110  0997                     	;# 
  5111  0E0F                     	;# 
  5112  0E10                     	;# 
  5113  0E11                     	;# 
  5114  0E12                     	;# 
  5115  0E13                     	;# 
  5116  0E14                     	;# 
  5117  0E15                     	;# 
  5118  0E16                     	;# 
  5119  0E17                     	;# 
  5120  0E18                     	;# 
  5121  0E19                     	;# 
  5122  0E1A                     	;# 
  5123  0E1B                     	;# 
  5124  0E1C                     	;# 
  5125  0E1D                     	;# 
  5126  0E1E                     	;# 
  5127  0E1F                     	;# 
  5128  0E20                     	;# 
  5129  0E21                     	;# 
  5130  0E22                     	;# 
  5131  0E23                     	;# 
  5132  0E24                     	;# 
  5133  0E25                     	;# 
  5134  0E26                     	;# 
  5135  0E27                     	;# 
  5136  0E28                     	;# 
  5137  0E29                     	;# 
  5138  0E2A                     	;# 
  5139  0E2B                     	;# 
  5140  0E2C                     	;# 
  5141  0E2D                     	;# 
  5142  0E2E                     	;# 
  5143  0E2F                     	;# 
  5144  0E30                     	;# 
  5145  0E31                     	;# 
  5146  0E32                     	;# 
  5147  0E33                     	;# 
  5148  0E34                     	;# 
  5149  0E35                     	;# 
  5150  0E36                     	;# 
  5151  0E37                     	;# 
  5152  0E8F                     	;# 
  5153  0E90                     	;# 
  5154  0E91                     	;# 
  5155  0E92                     	;# 
  5156  0E93                     	;# 
  5157  0E94                     	;# 
  5158  0E95                     	;# 
  5159  0E96                     	;# 
  5160  0E97                     	;# 
  5161  0E9C                     	;# 
  5162  0E9D                     	;# 
  5163  0E9E                     	;# 
  5164  0EA1                     	;# 
  5165  0EA2                     	;# 
  5166  0EA3                     	;# 
  5167  0EA4                     	;# 
  5168  0EA5                     	;# 
  5169  0EA9                     	;# 
  5170  0EAA                     	;# 
  5171  0EAB                     	;# 
  5172  0EAC                     	;# 
  5173  0EB1                     	;# 
  5174  0EB2                     	;# 
  5175  0EB3                     	;# 
  5176  0EB8                     	;# 
  5177  0EB9                     	;# 
  5178  0EBA                     	;# 
  5179  0EBB                     	;# 
  5180  0EBC                     	;# 
  5181  0EBD                     	;# 
  5182  0EBE                     	;# 
  5183  0EC3                     	;# 
  5184  0EC5                     	;# 
  5185  0EC6                     	;# 
  5186  0EC7                     	;# 
  5187  0EC8                     	;# 
  5188  0EC9                     	;# 
  5189  0ECA                     	;# 
  5190  0ECB                     	;# 
  5191  0ECC                     	;# 
  5192  0F10                     	;# 
  5193  0F11                     	;# 
  5194  0F12                     	;# 
  5195  0F13                     	;# 
  5196  0F14                     	;# 
  5197  0F15                     	;# 
  5198  0F16                     	;# 
  5199  0F17                     	;# 
  5200  0F18                     	;# 
  5201  0F19                     	;# 
  5202  0F1A                     	;# 
  5203  0F1B                     	;# 
  5204  0F1C                     	;# 
  5205  0F1D                     	;# 
  5206  0F1E                     	;# 
  5207  0F1F                     	;# 
  5208  0F20                     	;# 
  5209  0F21                     	;# 
  5210  0F22                     	;# 
  5211  0F23                     	;# 
  5212  0F24                     	;# 
  5213  0F25                     	;# 
  5214  0F26                     	;# 
  5215  0F27                     	;# 
  5216  0F38                     	;# 
  5217  0F39                     	;# 
  5218  0F3A                     	;# 
  5219  0F3B                     	;# 
  5220  0F3C                     	;# 
  5221  0F3D                     	;# 
  5222  0F3E                     	;# 
  5223  0F3F                     	;# 
  5224  0F40                     	;# 
  5225  0F41                     	;# 
  5226  0F43                     	;# 
  5227  0F44                     	;# 
  5228  0F45                     	;# 
  5229  0F46                     	;# 
  5230  0F47                     	;# 
  5231  0F48                     	;# 
  5232  0F49                     	;# 
  5233  0F4A                     	;# 
  5234  0F4B                     	;# 
  5235  0F4C                     	;# 
  5236  0F4E                     	;# 
  5237  0F4F                     	;# 
  5238  0F50                     	;# 
  5239  0F51                     	;# 
  5240  0F52                     	;# 
  5241  0F53                     	;# 
  5242  0F54                     	;# 
  5243  0F55                     	;# 
  5244  0F56                     	;# 
  5245  0F57                     	;# 
  5246  0F65                     	;# 
  5247  0F68                     	;# 
  5248  0F69                     	;# 
  5249  0F6A                     	;# 
  5250  0F6B                     	;# 
  5251  0FE4                     	;# 
  5252  0FE5                     	;# 
  5253  0FE6                     	;# 
  5254  0FE7                     	;# 
  5255  0FE8                     	;# 
  5256  0FE9                     	;# 
  5257  0FEA                     	;# 
  5258  0FEB                     	;# 
  5259  0FED                     	;# 
  5260  0FEE                     	;# 
  5261  0FEF                     	;_samples
  5262                           
  5263                           	psect	idataBANK1
  5264  0005                     __pidataBANK1:	
  5265                           
  5266                           ;initializer for _batteryTemp
  5267  0005  34FA               	retlw	250
  5268  0006  3400               	retlw	0
  5269                           
  5270                           	psect	idataBANK2
  5271  1305                     __pidataBANK2:	
  5272                           
  5273                           ;initializer for _channels
  5274  1305  3417               	retlw	23
  5275  1306  3400               	retlw	0
  5276  1307  3415               	retlw	21
  5277  1308  3400               	retlw	0
  5278  1309  3413               	retlw	19
  5279  130A  3400               	retlw	0
  5280  130B  3411               	retlw	17
  5281  130C  3400               	retlw	0
  5282  130D  3416               	retlw	22
  5283  130E  3400               	retlw	0
  5284  130F  3414               	retlw	20
  5285  1310  3400               	retlw	0
  5286  1311  3412               	retlw	18
  5287  1312  3400               	retlw	0
  5288  1313  3410               	retlw	16
  5289  1314  3400               	retlw	0
  5290                           
  5291                           	psect	stringtext1
  5292  0800                     __pstringtext1:	
  5293  0800                     _fonts:	
  5294  0800  3400               	retlw	0
  5295  0801  3400               	retlw	0
  5296  0802  3400               	retlw	0
  5297  0803  3400               	retlw	0
  5298  0804  344E               	retlw	78
  5299  0805  3400               	retlw	0
  5300  0806  3406               	retlw	6
  5301  0807  3400               	retlw	0
  5302  0808  3406               	retlw	6
  5303  0809  34FF               	retlw	255
  5304  080A  34FF               	retlw	255
  5305  080B  34FF               	retlw	255
  5306  080C  3448               	retlw	72
  5307  080D  34D6               	retlw	214
  5308  080E  3424               	retlw	36
  5309  080F  3412               	retlw	18
  5310  0810  3408               	retlw	8
  5311  0811  3424               	retlw	36
  5312  0812  34FF               	retlw	255
  5313  0813  34FF               	retlw	255
  5314  0814  34FF               	retlw	255
  5315  0815  3400               	retlw	0
  5316  0816  3406               	retlw	6
  5317  0817  3400               	retlw	0
  5318  0818  3438               	retlw	56
  5319  0819  3444               	retlw	68
  5320  081A  3482               	retlw	130
  5321  081B  3482               	retlw	130
  5322  081C  3444               	retlw	68
  5323  081D  3438               	retlw	56
  5324  081E  3414               	retlw	20
  5325  081F  3408               	retlw	8
  5326  0820  343E               	retlw	62
  5327  0821  3410               	retlw	16
  5328  0822  3438               	retlw	56
  5329  0823  3410               	retlw	16
  5330  0824  34A0               	retlw	160
  5331  0825  3460               	retlw	96
  5332  0826  3400               	retlw	0
  5333  0827  3410               	retlw	16
  5334  0828  3410               	retlw	16
  5335  0829  3410               	retlw	16
  5336  082A  3460               	retlw	96
  5337  082B  3460               	retlw	96
  5338  082C  3400               	retlw	0
  5339  082D  3460               	retlw	96
  5340  082E  3418               	retlw	24
  5341  082F  3406               	retlw	6
  5342  0830  347C               	retlw	124
  5343  0831  3442               	retlw	66
  5344  0832  347C               	retlw	124
  5345  0833  3444               	retlw	68
  5346  0834  347E               	retlw	126
  5347  0835  3440               	retlw	64
  5348  0836  3464               	retlw	100
  5349  0837  3452               	retlw	82
  5350  0838  344C               	retlw	76
  5351  0839  344A               	retlw	74
  5352  083A  344A               	retlw	74
  5353  083B  3434               	retlw	52
  5354  083C  3438               	retlw	56
  5355  083D  3424               	retlw	36
  5356  083E  347E               	retlw	126
  5357  083F  344E               	retlw	78
  5358  0840  344A               	retlw	74
  5359  0841  3432               	retlw	50
  5360  0842  343C               	retlw	60
  5361  0843  344A               	retlw	74
  5362  0844  3432               	retlw	50
  5363  0845  3462               	retlw	98
  5364  0846  341A               	retlw	26
  5365  0847  3406               	retlw	6
  5366  0848  3476               	retlw	118
  5367  0849  344A               	retlw	74
  5368  084A  3476               	retlw	118
  5369  084B  344C               	retlw	76
  5370  084C  3452               	retlw	82
  5371  084D  343C               	retlw	60
  5372  084E  346C               	retlw	108
  5373  084F  346C               	retlw	108
  5374  0850  3400               	retlw	0
  5375  0851  34AC               	retlw	172
  5376  0852  346C               	retlw	108
  5377  0853  3400               	retlw	0
  5378  0854  3410               	retlw	16
  5379  0855  3428               	retlw	40
  5380  0856  3444               	retlw	68
  5381  0857  3428               	retlw	40
  5382  0858  3428               	retlw	40
  5383  0859  3428               	retlw	40
  5384  085A  3444               	retlw	68
  5385  085B  3428               	retlw	40
  5386  085C  3410               	retlw	16
  5387  085D  3402               	retlw	2
  5388  085E  3459               	retlw	89
  5389  085F  3406               	retlw	6
  5390  0860  34FF               	retlw	255
  5391  0861  34FF               	retlw	255
  5392  0862  34FF               	retlw	255
  5393  0863  347C               	retlw	124
  5394  0864  3412               	retlw	18
  5395  0865  347C               	retlw	124
  5396  0866  347E               	retlw	126
  5397  0867  345A               	retlw	90
  5398  0868  3434               	retlw	52
  5399  0869  343C               	retlw	60
  5400  086A  3442               	retlw	66
  5401  086B  3442               	retlw	66
  5402  086C  347E               	retlw	126
  5403  086D  3442               	retlw	66
  5404  086E  343C               	retlw	60
  5405  086F  347E               	retlw	126
  5406  0870  344A               	retlw	74
  5407  0871  3442               	retlw	66
  5408  0872  347E               	retlw	126
  5409  0873  340A               	retlw	10
  5410  0874  340A               	retlw	10
  5411  0875  343C               	retlw	60
  5412  0876  3452               	retlw	82
  5413  0877  3434               	retlw	52
  5414  0878  347E               	retlw	126
  5415  0879  3408               	retlw	8
  5416  087A  347E               	retlw	126
  5417  087B  3442               	retlw	66
  5418  087C  347E               	retlw	126
  5419  087D  3442               	retlw	66
  5420  087E  3430               	retlw	48
  5421  087F  3440               	retlw	64
  5422  0880  343E               	retlw	62
  5423  0881  347E               	retlw	126
  5424  0882  3418               	retlw	24
  5425  0883  3466               	retlw	102
  5426  0884  347E               	retlw	126
  5427  0885  3440               	retlw	64
  5428  0886  3440               	retlw	64
  5429  0887  347E               	retlw	126
  5430  0888  341C               	retlw	28
  5431  0889  347E               	retlw	126
  5432  088A  347E               	retlw	126
  5433  088B  3402               	retlw	2
  5434  088C  347E               	retlw	126
  5435  088D  343C               	retlw	60
  5436  088E  3442               	retlw	66
  5437  088F  343C               	retlw	60
  5438  0890  347E               	retlw	126
  5439  0891  3412               	retlw	18
  5440  0892  340C               	retlw	12
  5441  0893  347E               	retlw	126
  5442  0894  3462               	retlw	98
  5443  0895  34FE               	retlw	254
  5444  0896  347E               	retlw	126
  5445  0897  3432               	retlw	50
  5446  0898  344E               	retlw	78
  5447  0899  3444               	retlw	68
  5448  089A  344A               	retlw	74
  5449  089B  3432               	retlw	50
  5450  089C  3402               	retlw	2
  5451  089D  347E               	retlw	126
  5452  089E  3402               	retlw	2
  5453  089F  347E               	retlw	126
  5454  08A0  3440               	retlw	64
  5455  08A1  347E               	retlw	126
  5456  08A2  343E               	retlw	62
  5457  08A3  3440               	retlw	64
  5458  08A4  343E               	retlw	62
  5459  08A5  347E               	retlw	126
  5460  08A6  3438               	retlw	56
  5461  08A7  347E               	retlw	126
  5462  08A8  3466               	retlw	102
  5463  08A9  3418               	retlw	24
  5464  08AA  3466               	retlw	102
  5465  08AB  340E               	retlw	14
  5466  08AC  3470               	retlw	112
  5467  08AD  340E               	retlw	14
  5468  08AE  3462               	retlw	98
  5469  08AF  345A               	retlw	90
  5470  08B0  3446               	retlw	70
  5471  08B1  3400               	retlw	0
  5472  08B2  347E               	retlw	126
  5473  08B3  3442               	retlw	66
  5474  08B4  3406               	retlw	6
  5475  08B5  3418               	retlw	24
  5476  08B6  3460               	retlw	96
  5477  08B7  3442               	retlw	66
  5478  08B8  347E               	retlw	126
  5479  08B9  3400               	retlw	0
  5480  08BA  3404               	retlw	4
  5481  08BB  3402               	retlw	2
  5482  08BC  3404               	retlw	4
  5483  08BD  3440               	retlw	64
  5484  08BE  3440               	retlw	64
  5485  08BF  3440               	retlw	64
  5486  08C0  3400               	retlw	0
  5487  08C1  3402               	retlw	2
  5488  08C2  3404               	retlw	4
  5489  08C3  3474               	retlw	116
  5490  08C4  3454               	retlw	84
  5491  08C5  3478               	retlw	120
  5492  08C6  347E               	retlw	126
  5493  08C7  3448               	retlw	72
  5494  08C8  3430               	retlw	48
  5495  08C9  3430               	retlw	48
  5496  08CA  3448               	retlw	72
  5497  08CB  3448               	retlw	72
  5498  08CC  3430               	retlw	48
  5499  08CD  3448               	retlw	72
  5500  08CE  347E               	retlw	126
  5501  08CF  3438               	retlw	56
  5502  08D0  3454               	retlw	84
  5503  08D1  3458               	retlw	88
  5504  08D2  347C               	retlw	124
  5505  08D3  340A               	retlw	10
  5506  08D4  3402               	retlw	2
  5507  08D5  3498               	retlw	152
  5508  08D6  34A4               	retlw	164
  5509  08D7  347C               	retlw	124
  5510  08D8  347E               	retlw	126
  5511  08D9  3408               	retlw	8
  5512  08DA  3470               	retlw	112
  5513  08DB  3448               	retlw	72
  5514  08DC  347A               	retlw	122
  5515  08DD  3440               	retlw	64
  5516  08DE  3488               	retlw	136
  5517  08DF  34FA               	retlw	250
  5518  08E0  3400               	retlw	0
  5519  08E1  347E               	retlw	126
  5520  08E2  3418               	retlw	24
  5521  08E3  3464               	retlw	100
  5522  08E4  3442               	retlw	66
  5523  08E5  347E               	retlw	126
  5524  08E6  3440               	retlw	64
  5525  08E7  347C               	retlw	124
  5526  08E8  3438               	retlw	56
  5527  08E9  347C               	retlw	124
  5528  08EA  347C               	retlw	124
  5529  08EB  3404               	retlw	4
  5530  08EC  3478               	retlw	120
  5531  08ED  3438               	retlw	56
  5532  08EE  3444               	retlw	68
  5533  08EF  3438               	retlw	56
  5534  08F0  34FC               	retlw	252
  5535  08F1  3424               	retlw	36
  5536  08F2  3418               	retlw	24
  5537  08F3  3418               	retlw	24
  5538  08F4  3424               	retlw	36
  5539  08F5  34FC               	retlw	252
  5540  08F6  3478               	retlw	120
  5541  08F7  3404               	retlw	4
  5542  08F8  3404               	retlw	4
  5543  08F9  3448               	retlw	72
  5544  08FA  3454               	retlw	84
  5545  08FB  3424               	retlw	36
  5546  08FC  3404               	retlw	4
  5547  08FD  343E               	retlw	62
  5548  08FE  3444               	retlw	68
  5549  08FF  347C               	retlw	124
  5550  0900  3440               	retlw	64
  5551  0901  347C               	retlw	124
  5552  0902  343C               	retlw	60
  5553  0903  3440               	retlw	64
  5554  0904  343C               	retlw	60
  5555  0905  347C               	retlw	124
  5556  0906  3430               	retlw	48
  5557  0907  347C               	retlw	124
  5558  0908  346C               	retlw	108
  5559  0909  3410               	retlw	16
  5560  090A  346C               	retlw	108
  5561  090B  349C               	retlw	156
  5562  090C  34A0               	retlw	160
  5563  090D  347C               	retlw	124
  5564  090E  3464               	retlw	100
  5565  090F  3454               	retlw	84
  5566  0910  344C               	retlw	76
  5567  0911  340C               	retlw	12
  5568  0912  3412               	retlw	18
  5569  0913  340C               	retlw	12
  5570  0914  34FF               	retlw	255
  5571  0915  34FF               	retlw	255
  5572  0916  34FF               	retlw	255
  5573  0917  34FF               	retlw	255
  5574  0918  34FF               	retlw	255
  5575  0919  34FF               	retlw	255
  5576  091A  34FF               	retlw	255
  5577  091B  34FF               	retlw	255
  5578  091C  34FF               	retlw	255
  5579  091D  34FF               	retlw	255
  5580  091E  34FF               	retlw	255
  5581  091F  34FF               	retlw	255
  5582  0920  34FF               	retlw	255
  5583  0921  34FF               	retlw	255
  5584  0922  34FF               	retlw	255
  5585  0923  34FF               	retlw	255
  5586  0924  34FF               	retlw	255
  5587  0925  34FF               	retlw	255
  5588  0926  34FC               	retlw	252
  5589  0927  3440               	retlw	64
  5590  0928  347C               	retlw	124
  5591  0929  34FF               	retlw	255
  5592  092A  34FF               	retlw	255
  5593  092B  34FF               	retlw	255
  5594  092C  34FF               	retlw	255
  5595  092D  34FF               	retlw	255
  5596  092E  34FF               	retlw	255
  5597  092F                     __end_of_fonts:	
  5598                           
  5599                           	psect	stringtext2
  5600  1800                     __pstringtext2:	
  5601  1800                     log@coeff:	
  5602  1800  3400               	retlw	0
  5603  1801  3400               	retlw	0
  5604  1802  3400               	retlw	0
  5605  1803  3400               	retlw	0
  5606  1804  3480               	retlw	128
  5607  1805  343F               	retlw	63
  5608  1806  34F0               	retlw	240
  5609  1807  34FF               	retlw	255
  5610  1808  34BE               	retlw	190
  5611  1809  34E2               	retlw	226
  5612  180A  34A9               	retlw	169
  5613  180B  343E               	retlw	62
  5614  180C  3483               	retlw	131
  5615  180D  3476               	retlw	118
  5616  180E  34BE               	retlw	190
  5617  180F  34AE               	retlw	174
  5618  1810  342B               	retlw	43
  5619  1811  343E               	retlw	62
  5620  1812  343C               	retlw	60
  5621  1813  34C3               	retlw	195
  5622  1814  34BD               	retlw	189
  5623  1815  34D2               	retlw	210
  5624  1816  3413               	retlw	19
  5625  1817  343D               	retlw	61
  5626  1818  3478               	retlw	120
  5627  1819  34D3               	retlw	211
  5628  181A  34BB               	retlw	187
  5629  181B                     __end_oflog@coeff:	
  5630                           
  5631                           	psect	nvBANK1
  5632  00E4                     __pnvBANK1:	
  5633  00E4                     _Vref:	
  5634  00E4                     	ds	2
  5635  00E6                     _Iref:	
  5636  00E6                     	ds	2
  5637  00E8                     _state_counter:	
  5638  00E8                     	ds	2
  5639  00EA                     _IminCount:	
  5640  00EA                     	ds	2
  5641  00EC                     _battery_state:	
  5642  00EC                     	ds	1
  5643                           
  5644                           	psect	nvBANK2
  5645  0160                     __pnvBANK2:	
  5646  0160                     _Imin:	
  5647  0160                     	ds	2
  5648  0013                     _TRISC	set	19
  5649  0012                     _TRISB	set	18
  5650  0011                     _TRISA	set	17
  5651  0018                     _LATC	set	24
  5652  0017                     _LATB	set	23
  5653  0016                     _LATA	set	22
  5654  0016                     _LATAbits	set	22
  5655  0011                     _TRISAbits	set	17
  5656  00B5                     _LATA5	set	181
  5657  006A                     _RB2	set	106
  5658  005F                     _GIE	set	95
  5659  0093                     _ADCON0	set	147
  5660  009D                     _ADACQ	set	157
  5661  009C                     _ADPRE	set	156
  5662  009B                     _ADCAP	set	155
  5663  009A                     _ADREF	set	154
  5664  0098                     _ADCLK	set	152
  5665  0097                     _ADSTAT	set	151
  5666  0099                     _ADACT	set	153
  5667  0096                     _ADCON3	set	150
  5668  0095                     _ADCON2	set	149
  5669  0094                     _ADCON1	set	148
  5670  008C                     _ADRESL	set	140
  5671  008D                     _ADRESH	set	141
  5672  0093                     _ADCON0bits	set	147
  5673  009E                     _ADPCH	set	158
  5674  0113                     _ADSTPTH	set	275
  5675  0112                     _ADSTPTL	set	274
  5676  0111                     _ADUTHH	set	273
  5677  0110                     _ADUTHL	set	272
  5678  010F                     _ADLTHH	set	271
  5679  010E                     _ADLTHL	set	270
  5680  010D                     _ADRPT	set	269
  5681  021E                     _CCPTMRS0bits	set	542
  5682  021F                     _CCPTMRS1bits	set	543
  5683  0294                     _T4CONbits	set	660
  5684  0292                     _T4TMR	set	658
  5685  0293                     _T4PR	set	659
  5686  0297                     _T4RST	set	663
  5687  0295                     _T4HLT	set	661
  5688  0296                     _T4CLKCON	set	662
  5689  0294                     _T4CON	set	660
  5690  028E                     _T2CONbits	set	654
  5691  028C                     _T2TMR	set	652
  5692  028D                     _T2PR	set	653
  5693  0291                     _T2RST	set	657
  5694  028F                     _T2HLT	set	655
  5695  0290                     _T2CLKCON	set	656
  5696  028E                     _T2CON	set	654
  5697  030C                     _CCPR1L	set	780
  5698  030D                     _CCPR1H	set	781
  5699  030E                     _CCP1CONbits	set	782
  5700  0390                     _PWM7DCL	set	912
  5701  0391                     _PWM7DCH	set	913
  5702  0392                     _PWM7CON	set	914
  5703  038C                     _PWM6DCL	set	908
  5704  038D                     _PWM6DCH	set	909
  5705  038E                     _PWM6CON	set	910
  5706  0710                     _PIR4bits	set	1808
  5707  0716                     _PIE0bits	set	1814
  5708  0892                     _OSCTUNE	set	2194
  5709  0893                     _OSCFRQ	set	2195
  5710  0891                     _OSCEN	set	2193
  5711  088F                     _OSCCON3	set	2191
  5712  088D                     _OSCCON1	set	2189
  5713  090C                     _FVRCON	set	2316
  5714  0E8F                     _PPSLOCKbits	set	3727
  5715  0E8F                     _PPSLOCK	set	3727
  5716  0F18                     _RB0PPS	set	3864
  5717  0F17                     _RA7PPS	set	3863
  5718  0F16                     _RA6PPS	set	3862
  5719  0F4E                     _ANSELC	set	3918
  5720  0F43                     _ANSELB	set	3907
  5721  0F38                     _ANSELA	set	3896
  5722  0F65                     _WPUE	set	3941
  5723  0F4F                     _WPUC	set	3919
  5724  0F44                     _WPUB	set	3908
  5725  0F39                     _WPUA	set	3897
  5726                           
  5727                           ; #config settings
  5728  0000                     
  5729                           	psect	cinit
  5730  07C2                     start_initialization:	
  5731  07C2                     __initialization:		;BIGRAM
  5732                           
  5733                           ; Initialize objects allocated to BANK1
  5734  07C2  0021               	movlb	1	; select bank1
  5735  07C3  3180  2005  3187   	fcall	__pidataBANK1	;fetch initializer
  5736  07C6  00ED               	movwf	__pdataBANK1& (0+127)
  5737  07C7  3180  2006  3187   	fcall	__pidataBANK1+1	;fetch initializer
  5738  07CA  00EE               	movwf	(__pdataBANK1+1)& (0+127)
  5739                           
  5740                           ; Initialize objects allocated to BANK2
  5741  07CB  3005               	movlw	low __pidataBANK2
  5742  07CC  0084               	movwf	4
  5743  07CD  3093               	movlw	(high __pidataBANK2)| (0+128)
  5744  07CE  0085               	movwf	5
  5745  07CF  3050               	movlw	low __pdataBANK2
  5746  07D0  0086               	movwf	6
  5747  07D1  3001               	movlw	high __pdataBANK2
  5748  07D2  0087               	movwf	7
  5749  07D3  3000               	movlw	0
  5750  07D4  00FF               	movwf	btemp+1
  5751  07D5  3010               	movlw	16
  5752  07D6  3192  22DD  3187   	fcall	init_ram
  5753                           
  5754                           ; Clear objects allocated to BIGRAM
  5755  07D9  3030               	movlw	low (0+9008)
  5756  07DA  0084               	movwf	4
  5757  07DB  3023               	movlw	high (0+9008)
  5758  07DC  0085               	movwf	5
  5759  07DD  30C0               	movlw	192
  5760  07DE  00FE               	movwf	btemp
  5761  07DF  3000               	movlw	0
  5762  07E0  00FF               	movwf	btemp+1
  5763  07E1  3192  22D1  3187   	fcall	clear_ram0
  5764                           
  5765                           ; Clear objects allocated to BANK0
  5766  07E4  0020               	movlb	0	; select bank0
  5767  07E5  01EC               	clrf	__pbssBANK0& (0+127)
  5768  07E6  01ED               	clrf	(__pbssBANK0+1)& (0+127)
  5769  07E7  01EE               	clrf	(__pbssBANK0+2)& (0+127)
  5770                           
  5771                           ; Clear objects allocated to BANK1
  5772  07E8  30A0               	movlw	low __pbssBANK1
  5773  07E9  0084               	movwf	4
  5774  07EA  3000               	movlw	high __pbssBANK1
  5775  07EB  0085               	movwf	5
  5776  07EC  3022               	movlw	34
  5777  07ED  00FE               	movwf	btemp
  5778  07EE  3000               	movlw	0
  5779  07EF  00FF               	movwf	btemp+1
  5780  07F0  3192  22D1  3187   	fcall	clear_ram0
  5781                           
  5782                           ; Clear objects allocated to BANK2
  5783  07F3  3020               	movlw	low __pbssBANK2
  5784  07F4  0084               	movwf	4
  5785  07F5  3001               	movlw	high __pbssBANK2
  5786  07F6  0085               	movwf	5
  5787  07F7  3030               	movlw	48
  5788  07F8  00FE               	movwf	btemp
  5789  07F9  3000               	movlw	0
  5790  07FA  00FF               	movwf	btemp+1
  5791  07FB  3192  22D1         	fcall	clear_ram0
  5792  07FD                     end_of_initialization:	
  5793                           ;End of C runtime variable initialization code
  5794                           
  5795  07FD                     __end_of__initialization:	
  5796  07FD  0020               	movlb	0
  5797  07FE  3182  2A87         	ljmp	_main	;jump to C main() function
  5798                           
  5799                           	psect	bssBANK0
  5800  006C                     __pbssBANK0:	
  5801  006C                     _button:	
  5802  006C                     	ds	1
  5803  006D                     _VHoldMode:	
  5804  006D                     	ds	1
  5805  006E                     _Imode0:	
  5806  006E                     	ds	1
  5807                           
  5808                           	psect	bssBANK1
  5809  00A0                     __pbssBANK1:	
  5810  00A0                     _current:	
  5811  00A0                     	ds	8
  5812  00A8                     _voltage:	
  5813  00A8                     	ds	8
  5814  00B0                     LCDWriteInt@F14389:	
  5815  00B0                     	ds	5
  5816  00B5                     _errno:	
  5817  00B5                     	ds	2
  5818  00B7                     _readButtons:	
  5819  00B7                     	ds	2
  5820  00B9                     _Iout:	
  5821  00B9                     	ds	2
  5822  00BB                     _sampleIndex:	
  5823  00BB                     	ds	2
  5824  00BD                     _j:	
  5825  00BD                     	ds	1
  5826  00BE                     _lastButton:	
  5827  00BE                     	ds	1
  5828  00BF                     _x:	
  5829  00BF                     	ds	1
  5830  00C0                     _cc_cv:	
  5831  00C0                     	ds	1
  5832  00C1                     _Imode1:	
  5833  00C1                     	ds	1
  5834                           
  5835                           	psect	dataBANK1
  5836  00ED                     __pdataBANK1:	
  5837  00ED                     _batteryTemp:	
  5838  00ED                     	ds	2
  5839                           
  5840                           	psect	bssBANK2
  5841  0120                     __pbssBANK2:	
  5842  0120                     _totals:	
  5843  0120                     	ds	32
  5844  0140                     _analogs:	
  5845  0140                     	ds	16
  5846                           
  5847                           	psect	dataBANK2
  5848  0150                     __pdataBANK2:	
  5849  0150                     _channels:	
  5850  0150                     	ds	16
  5851                           
  5852                           	psect	inittext
  5853  12DD                     init_ram:	
  5854  12DD  00FE               	movwf	126
  5855  12DE                     initloop:	
  5856  12DE  0012               	moviw fsr0++
  5857  12DF  001E               	movwi fsr1++
  5858  12E0  3001               	movlw	1
  5859  12E1  02FE               	subwf	126,f
  5860  12E2  3000               	movlw	0
  5861  12E3  3BFF               	subwfb	127,f
  5862  12E4  087F               	movf	127,w
  5863  12E5  047E               	iorwf	126,w
  5864  12E6  1903               	btfsc	3,2
  5865  12E7  3400               	retlw	0
  5866  12E8  2ADE               	goto	initloop
  5867                           
  5868                           	psect	clrtext
  5869  12D1                     clear_ram0:	
  5870                           ;	Called with FSR0 containing the base address, and
  5871                           ;	btemp/btemp+1 has the size to clear
  5872                           
  5873  12D1  0064               	clrwdt	;clear the watchdog before getting into this loop
  5874  12D2                     clrloop0:	
  5875  12D2  0180               	clrf	0	;clear RAM location pointed to by FSR
  5876  12D3  3101               	addfsr 0,1
  5877  12D4  3001               	movlw	1
  5878  12D5  02FE               	subwf	126,f
  5879  12D6  3000               	movlw	0
  5880  12D7  3BFF               	subwfb	127,f
  5881  12D8  087F               	movf	127,w
  5882  12D9  047E               	iorwf	126,w
  5883  12DA  1903               	btfsc	3,2
  5884  12DB  3400               	retlw	0	;all done for this memory range, return
  5885  12DC  2AD2               	goto	clrloop0	;have we reached the end yet?
  5886                           
  5887                           	psect	cstackBANK1
  5888  00C2                     __pcstackBANK1:	
  5889  00C2                     _main$1280:	
  5890                           
  5891                           ; 3 bytes @ 0x0
  5892  00C2                     	ds	3
  5893  00C5                     main@MPPT1:	
  5894                           
  5895                           ; 2 bytes @ 0x3
  5896  00C5                     	ds	2
  5897  00C7                     main@faultCount:	
  5898                           
  5899                           ; 2 bytes @ 0x5
  5900  00C7                     	ds	2
  5901  00C9                     main@faultNotReset:	
  5902                           
  5903                           ; 2 bytes @ 0x7
  5904  00C9                     	ds	2
  5905  00CB                     main@fastLoop:	
  5906                           
  5907                           ; 1 bytes @ 0x9
  5908  00CB                     	ds	1
  5909  00CC                     main@slowLoop:	
  5910                           
  5911                           ; 1 bytes @ 0xA
  5912  00CC                     	ds	1
  5913  00CD                     main@displayRefresh:	
  5914                           
  5915                           ; 1 bytes @ 0xB
  5916  00CD                     	ds	1
  5917  00CE                     _main$1279:	
  5918                           
  5919                           ; 3 bytes @ 0xC
  5920  00CE                     	ds	3
  5921  00D1                     main@IOutTotal:	
  5922                           
  5923                           ; 2 bytes @ 0xF
  5924  00D1                     	ds	2
  5925  00D3                     _main$1281:	
  5926                           
  5927                           ; 2 bytes @ 0x11
  5928  00D3                     	ds	2
  5929  00D5                     _main$1282:	
  5930                           
  5931                           ; 2 bytes @ 0x13
  5932  00D5                     	ds	2
  5933  00D7                     main@efficiency:	
  5934                           
  5935                           ; 3 bytes @ 0x15
  5936  00D7                     	ds	3
  5937  00DA                     main@menuButton:	
  5938                           
  5939                           ; 1 bytes @ 0x18
  5940  00DA                     	ds	1
  5941  00DB                     main@dutyCycle7:	
  5942                           
  5943                           ; 2 bytes @ 0x19
  5944  00DB                     	ds	2
  5945  00DD                     main@dutyCycle1:	
  5946                           
  5947                           ; 2 bytes @ 0x1B
  5948  00DD                     	ds	2
  5949  00DF                     main@MPPT0:	
  5950                           
  5951                           ; 2 bytes @ 0x1D
  5952  00DF                     	ds	2
  5953  00E1                     main@j:	
  5954                           
  5955                           ; 1 bytes @ 0x1F
  5956  00E1                     	ds	1
  5957  00E2                     main@dutyCycle6:	
  5958                           
  5959                           ; 2 bytes @ 0x20
  5960  00E2                     	ds	2
  5961                           
  5962                           	psect	cstackCOMMON
  5963  0070                     __pcstackCOMMON:	
  5964  0070                     ?___ftge:	
  5965  0070                     ?_LCDWrite:	
  5966                           ; 1 bit 
  5967                           
  5968  0070                     ?_OSCILLATOR_Initialize:	
  5969                           ; 1 bytes @ 0x0
  5970                           
  5971  0070                     ??_OSCILLATOR_Initialize:	
  5972                           ; 1 bytes @ 0x0
  5973                           
  5974  0070                     ?_TMR2_Initialize:	
  5975                           ; 1 bytes @ 0x0
  5976                           
  5977  0070                     ??_TMR2_Initialize:	
  5978                           ; 1 bytes @ 0x0
  5979                           
  5980  0070                     ?_TMR4_Initialize:	
  5981                           ; 1 bytes @ 0x0
  5982                           
  5983  0070                     ??_TMR4_Initialize:	
  5984                           ; 1 bytes @ 0x0
  5985                           
  5986  0070                     ?_calculateCurrent0:	
  5987                           ; 1 bytes @ 0x0
  5988                           
  5989  0070                     ?_calculateCurrent1:	
  5990                           ; 1 bytes @ 0x0
  5991                           
  5992  0070                     ?_ADC_Initialize:	
  5993                           ; 1 bytes @ 0x0
  5994                           
  5995  0070                     ??_ADC_Initialize:	
  5996                           ; 1 bytes @ 0x0
  5997                           
  5998  0070                     ?_Init_Battery_State_Machine:	
  5999                           ; 1 bytes @ 0x0
  6000                           
  6001  0070                     ?_Battery_State_Machine:	
  6002                           ; 1 bytes @ 0x0
  6003                           
  6004  0070                     ?_cc_cv_mode:	
  6005                           ; 1 bytes @ 0x0
  6006                           
  6007  0070                     ?_LCDWriteCharacter:	
  6008                           ; 1 bytes @ 0x0
  6009                           
  6010  0070                     ?_LCDClear:	
  6011                           ; 1 bytes @ 0x0
  6012                           
  6013  0070                     ?_LCDInit:	
  6014                           ; 1 bytes @ 0x0
  6015                           
  6016  0070                     ?_PIN_MANAGER_Initialize:	
  6017                           ; 1 bytes @ 0x0
  6018                           
  6019  0070                     ??_PIN_MANAGER_Initialize:	
  6020                           ; 1 bytes @ 0x0
  6021                           
  6022  0070                     ?_PWM_Initialize:	
  6023                           ; 1 bytes @ 0x0
  6024                           
  6025  0070                     ??_PWM_Initialize:	
  6026                           ; 1 bytes @ 0x0
  6027                           
  6028  0070                     ?_PWM6_LoadDutyValue:	
  6029                           ; 1 bytes @ 0x0
  6030                           
  6031  0070                     ?_PWM7_LoadDutyValue:	
  6032                           ; 1 bytes @ 0x0
  6033                           
  6034  0070                     ?_PWM1_LoadDutyValue:	
  6035                           ; 1 bytes @ 0x0
  6036                           
  6037  0070                     ?_SYSTEM_Initialize:	
  6038                           ; 1 bytes @ 0x0
  6039                           
  6040  0070                     ?_readButton:	
  6041                           ; 1 bytes @ 0x0
  6042                           
  6043  0070                     ?_main:	
  6044                           ; 1 bytes @ 0x0
  6045                           
  6046  0070                     ?_ADCRead:	
  6047                           ; 1 bytes @ 0x0
  6048                           
  6049  0070                     ?___awdiv:	
  6050                           ; 2 bytes @ 0x0
  6051                           
  6052  0070                     ?___lwmod:	
  6053                           ; 2 bytes @ 0x0
  6054                           
  6055  0070                     ?___ftpack:	
  6056                           ; 2 bytes @ 0x0
  6057                           
  6058  0070                     ?_frexp:	
  6059                           ; 3 bytes @ 0x0
  6060                           
  6061  0070                     ?___aldiv:	
  6062                           ; 3 bytes @ 0x0
  6063                           
  6064  0070                     LCDWrite@data:	
  6065                           ; 4 bytes @ 0x0
  6066                           
  6067  0070                     PIN_MANAGER_Initialize@state:	
  6068                           ; 1 bytes @ 0x0
  6069                           
  6070  0070                     PWM6_LoadDutyValue@dutyCycle6:	
  6071                           ; 1 bytes @ 0x0
  6072                           
  6073  0070                     PWM7_LoadDutyValue@dutyCycle7:	
  6074                           ; 2 bytes @ 0x0
  6075                           
  6076  0070                     PWM1_LoadDutyValue@dutyCycle1:	
  6077                           ; 2 bytes @ 0x0
  6078                           
  6079  0070                     ___awdiv@divisor:	
  6080                           ; 2 bytes @ 0x0
  6081                           
  6082  0070                     ___lwmod@divisor:	
  6083                           ; 2 bytes @ 0x0
  6084                           
  6085  0070                     ___ftpack@arg:	
  6086                           ; 2 bytes @ 0x0
  6087                           
  6088  0070                     ___ftge@ff1:	
  6089                           ; 3 bytes @ 0x0
  6090                           
  6091  0070                     frexp@value:	
  6092                           ; 3 bytes @ 0x0
  6093                           
  6094  0070                     ___aldiv@divisor:	
  6095                           ; 3 bytes @ 0x0
  6096                           
  6097                           
  6098                           ; 4 bytes @ 0x0
  6099  0070                     	ds	1
  6100  0071                     ??_LCDWrite:	
  6101                           
  6102                           ; 1 bytes @ 0x1
  6103  0071                     	ds	1
  6104  0072                     ??_PWM6_LoadDutyValue:	
  6105  0072                     ??_PWM7_LoadDutyValue:	
  6106                           ; 1 bytes @ 0x2
  6107                           
  6108  0072                     ??_PWM1_LoadDutyValue:	
  6109                           ; 1 bytes @ 0x2
  6110                           
  6111  0072                     LCDWrite@data_or_command:	
  6112                           ; 1 bytes @ 0x2
  6113                           
  6114  0072                     ___awdiv@dividend:	
  6115                           ; 1 bytes @ 0x2
  6116                           
  6117  0072                     ___lwmod@dividend:	
  6118                           ; 2 bytes @ 0x2
  6119                           
  6120                           
  6121                           ; 2 bytes @ 0x2
  6122  0072                     	ds	1
  6123  0073                     ??_ADCRead:	
  6124  0073                     ADCRead@channel:	
  6125                           ; 1 bytes @ 0x3
  6126                           
  6127  0073                     LCDWrite@d:	
  6128                           ; 1 bytes @ 0x3
  6129                           
  6130  0073                     ___ftpack@exp:	
  6131                           ; 1 bytes @ 0x3
  6132                           
  6133  0073                     frexp@eptr:	
  6134                           ; 1 bytes @ 0x3
  6135                           
  6136  0073                     ___ftge@ff2:	
  6137                           ; 1 bytes @ 0x3
  6138                           
  6139                           
  6140                           ; 3 bytes @ 0x3
  6141  0073                     	ds	1
  6142  0074                     ??_frexp:	
  6143  0074                     ??_readButton:	
  6144                           ; 1 bytes @ 0x4
  6145                           
  6146  0074                     ??___awdiv:	
  6147                           ; 1 bytes @ 0x4
  6148                           
  6149  0074                     ??___lwmod:	
  6150                           ; 1 bytes @ 0x4
  6151                           
  6152  0074                     LCDWrite@i:	
  6153                           ; 1 bytes @ 0x4
  6154                           
  6155  0074                     ___ftpack@sign:	
  6156                           ; 1 bytes @ 0x4
  6157                           
  6158  0074                     ___aldiv@dividend:	
  6159                           ; 1 bytes @ 0x4
  6160                           
  6161                           
  6162                           ; 4 bytes @ 0x4
  6163  0074                     	ds	1
  6164  0075                     ??___ftpack:	
  6165  0075                     ?_gotoXY:	
  6166                           ; 1 bytes @ 0x5
  6167                           
  6168  0075                     ??_LCDInit:	
  6169                           ; 1 bytes @ 0x5
  6170                           
  6171  0075                     gotoXY@y:	
  6172                           ; 1 bytes @ 0x5
  6173                           
  6174  0075                     ___awdiv@counter:	
  6175                           ; 1 bytes @ 0x5
  6176                           
  6177  0075                     ___lwmod@counter:	
  6178                           ; 1 bytes @ 0x5
  6179                           
  6180                           
  6181                           ; 1 bytes @ 0x5
  6182  0075                     	ds	1
  6183  0076                     ??_gotoXY:	
  6184  0076                     ??___ftge:	
  6185                           ; 1 bytes @ 0x6
  6186                           
  6187  0076                     ___awdiv@sign:	
  6188                           ; 1 bytes @ 0x6
  6189                           
  6190                           
  6191                           ; 1 bytes @ 0x6
  6192  0076                     	ds	1
  6193  0077                     gotoXY@x:	
  6194  0077                     ___awdiv@quotient:	
  6195                           ; 1 bytes @ 0x7
  6196                           
  6197                           
  6198                           ; 2 bytes @ 0x7
  6199  0077                     	ds	1
  6200  0078                     ??_LCDClear:	
  6201  0078                     ??___aldiv:	
  6202                           ; 1 bytes @ 0x8
  6203                           
  6204  0078                     ?___awtoft:	
  6205                           ; 1 bytes @ 0x8
  6206                           
  6207  0078                     ___awtoft@c:	
  6208                           ; 3 bytes @ 0x8
  6209                           
  6210                           
  6211                           ; 2 bytes @ 0x8
  6212  0078                     	ds	1
  6213  0079                     ?___wmul:	
  6214  0079                     LCDClear@index:	
  6215                           ; 2 bytes @ 0x9
  6216                           
  6217  0079                     ___wmul@multiplier:	
  6218                           ; 2 bytes @ 0x9
  6219                           
  6220                           
  6221                           ; 2 bytes @ 0x9
  6222  0079                     	ds	2
  6223  007B                     ??___awtoft:	
  6224  007B                     ___wmul@multiplicand:	
  6225                           ; 1 bytes @ 0xB
  6226                           
  6227                           
  6228                           ; 2 bytes @ 0xB
  6229  007B                     	ds	2
  6230  007D                     ??___wmul:	
  6231  007D                     ___awtoft@sign:	
  6232                           ; 1 bytes @ 0xD
  6233                           
  6234                           
  6235                           ; 1 bytes @ 0xD
  6236  007D                     	ds	1
  6237  007E                     ??_eval_poly:	
  6238  007E                     ??_tempCalc:	
  6239                           ; 1 bytes @ 0xE
  6240                           
  6241  007E                     ??___ftsub:	
  6242                           ; 1 bytes @ 0xE
  6243                           
  6244                           
  6245                           	psect	cstackBANK0
  6246  0020                     __pcstackBANK0:	
  6247                           ; 1 bytes @ 0xE
  6248                           
  6249  0020                     ?___ftdiv:	
  6250  0020                     ___aldiv@counter:	
  6251                           ; 3 bytes @ 0x0
  6252                           
  6253  0020                     ___wmul@product:	
  6254                           ; 1 bytes @ 0x0
  6255                           
  6256  0020                     ___ftdiv@f2:	
  6257                           ; 2 bytes @ 0x0
  6258                           
  6259                           
  6260                           ; 3 bytes @ 0x0
  6261  0020                     	ds	1
  6262  0021                     ___aldiv@sign:	
  6263                           
  6264                           ; 1 bytes @ 0x1
  6265  0021                     	ds	1
  6266  0022                     ??_LCDWriteCharacter:	
  6267  0022                     ___aldiv@quotient:	
  6268                           ; 1 bytes @ 0x2
  6269                           
  6270                           
  6271                           ; 4 bytes @ 0x2
  6272  0022                     	ds	1
  6273  0023                     ___ftdiv@f1:	
  6274                           
  6275                           ; 3 bytes @ 0x3
  6276  0023                     	ds	2
  6277  0025                     LCDWriteCharacter@character:	
  6278                           
  6279                           ; 1 bytes @ 0x5
  6280  0025                     	ds	1
  6281  0026                     ??___ftdiv:	
  6282  0026                     ?_readAnalog:	
  6283                           ; 1 bytes @ 0x6
  6284                           
  6285  0026                     readAnalog@channel:	
  6286                           ; 2 bytes @ 0x6
  6287                           
  6288  0026                     LCDWriteCharacter@base:	
  6289                           ; 2 bytes @ 0x6
  6290                           
  6291                           
  6292                           ; 2 bytes @ 0x6
  6293  0026                     	ds	2
  6294  0028                     ??_readAnalog:	
  6295  0028                     ?_LCDWriteInt:	
  6296                           ; 1 bytes @ 0x8
  6297                           
  6298  0028                     LCDWriteInt@value:	
  6299                           ; 1 bytes @ 0x8
  6300                           
  6301                           
  6302                           ; 2 bytes @ 0x8
  6303  0028                     	ds	2
  6304  002A                     LCDWriteInt@fieldLength:	
  6305  002A                     ___ftdiv@cntr:	
  6306                           ; 1 bytes @ 0xA
  6307                           
  6308                           
  6309                           ; 1 bytes @ 0xA
  6310  002A                     	ds	1
  6311  002B                     LCDWriteInt@numPlaces:	
  6312  002B                     ___ftdiv@f3:	
  6313                           ; 1 bytes @ 0xB
  6314                           
  6315                           
  6316                           ; 3 bytes @ 0xB
  6317  002B                     	ds	1
  6318  002C                     LCDWriteInt@sign:	
  6319                           
  6320                           ; 1 bytes @ 0xC
  6321  002C                     	ds	1
  6322  002D                     ??_LCDWriteInt:	
  6323                           
  6324                           ; 1 bytes @ 0xD
  6325  002D                     	ds	1
  6326  002E                     ___ftdiv@exp:	
  6327                           
  6328                           ; 1 bytes @ 0xE
  6329  002E                     	ds	1
  6330  002F                     ___ftdiv@sign:	
  6331                           
  6332                           ; 1 bytes @ 0xF
  6333  002F                     	ds	1
  6334  0030                     ?___ftmul:	
  6335  0030                     ___ftmul@f1:	
  6336                           ; 3 bytes @ 0x10
  6337                           
  6338                           
  6339                           ; 3 bytes @ 0x10
  6340  0030                     	ds	1
  6341  0031                     LCDWriteInt@str:	
  6342                           
  6343                           ; 5 bytes @ 0x11
  6344  0031                     	ds	2
  6345  0033                     ___ftmul@f2:	
  6346                           
  6347                           ; 3 bytes @ 0x13
  6348  0033                     	ds	3
  6349  0036                     ??___ftmul:	
  6350  0036                     LCDWriteInt@j:	
  6351                           ; 1 bytes @ 0x16
  6352                           
  6353                           
  6354                           ; 1 bytes @ 0x16
  6355  0036                     	ds	1
  6356  0037                     LCDWriteInt@i:	
  6357                           
  6358                           ; 1 bytes @ 0x17
  6359  0037                     	ds	3
  6360  003A                     ___ftmul@exp:	
  6361  003A                     readAnalog@analog_channel:	
  6362                           ; 1 bytes @ 0x1A
  6363                           
  6364                           
  6365                           ; 2 bytes @ 0x1A
  6366  003A                     	ds	1
  6367  003B                     ___ftmul@f3_as_product:	
  6368                           
  6369                           ; 3 bytes @ 0x1B
  6370  003B                     	ds	1
  6371  003C                     readAnalog@value:	
  6372                           
  6373                           ; 2 bytes @ 0x1C
  6374  003C                     	ds	2
  6375  003E                     ___ftmul@cntr:	
  6376                           
  6377                           ; 1 bytes @ 0x1E
  6378  003E                     	ds	1
  6379  003F                     ___ftmul@sign:	
  6380                           
  6381                           ; 1 bytes @ 0x1F
  6382  003F                     	ds	1
  6383  0040                     ?___ftadd:	
  6384  0040                     ?___fttol:	
  6385                           ; 3 bytes @ 0x20
  6386                           
  6387  0040                     ___ftadd@f1:	
  6388                           ; 4 bytes @ 0x20
  6389                           
  6390  0040                     ___fttol@f1:	
  6391                           ; 3 bytes @ 0x20
  6392                           
  6393                           
  6394                           ; 3 bytes @ 0x20
  6395  0040                     	ds	3
  6396  0043                     ___ftadd@f2:	
  6397                           
  6398                           ; 3 bytes @ 0x23
  6399  0043                     	ds	1
  6400  0044                     ??___fttol:	
  6401                           
  6402                           ; 1 bytes @ 0x24
  6403  0044                     	ds	2
  6404  0046                     ??___ftadd:	
  6405                           
  6406                           ; 1 bytes @ 0x26
  6407  0046                     	ds	2
  6408  0048                     ___fttol@sign1:	
  6409                           
  6410                           ; 1 bytes @ 0x28
  6411  0048                     	ds	1
  6412  0049                     ___fttol@lval:	
  6413                           
  6414                           ; 4 bytes @ 0x29
  6415  0049                     	ds	1
  6416  004A                     ___ftadd@sign:	
  6417                           
  6418                           ; 1 bytes @ 0x2A
  6419  004A                     	ds	1
  6420  004B                     ___ftadd@exp2:	
  6421                           
  6422                           ; 1 bytes @ 0x2B
  6423  004B                     	ds	1
  6424  004C                     ___ftadd@exp1:	
  6425                           
  6426                           ; 1 bytes @ 0x2C
  6427  004C                     	ds	1
  6428  004D                     ?_eval_poly:	
  6429  004D                     ?___ftsub:	
  6430                           ; 3 bytes @ 0x2D
  6431                           
  6432  004D                     ___fttol@exp1:	
  6433                           ; 3 bytes @ 0x2D
  6434                           
  6435  004D                     ___ftsub@f2:	
  6436                           ; 1 bytes @ 0x2D
  6437                           
  6438  004D                     eval_poly@x:	
  6439                           ; 3 bytes @ 0x2D
  6440                           
  6441                           
  6442                           ; 3 bytes @ 0x2D
  6443  004D                     	ds	1
  6444  004E                     ??_calculateCurrent0:	
  6445  004E                     ??_calculateCurrent1:	
  6446                           ; 1 bytes @ 0x2E
  6447                           
  6448  004E                     ??_Init_Battery_State_Machine:	
  6449                           ; 1 bytes @ 0x2E
  6450                           
  6451  004E                     ??_Battery_State_Machine:	
  6452                           ; 1 bytes @ 0x2E
  6453                           
  6454  004E                     ??_cc_cv_mode:	
  6455                           ; 1 bytes @ 0x2E
  6456                           
  6457                           
  6458                           ; 1 bytes @ 0x2E
  6459  004E                     	ds	2
  6460  0050                     ??_SYSTEM_Initialize:	
  6461  0050                     eval_poly@d:	
  6462                           ; 1 bytes @ 0x30
  6463                           
  6464  0050                     ___ftsub@f1:	
  6465                           ; 2 bytes @ 0x30
  6466                           
  6467                           
  6468                           ; 3 bytes @ 0x30
  6469  0050                     	ds	2
  6470  0052                     eval_poly@n:	
  6471                           
  6472                           ; 2 bytes @ 0x32
  6473  0052                     	ds	2
  6474  0054                     eval_poly@res:	
  6475                           
  6476                           ; 3 bytes @ 0x34
  6477  0054                     	ds	3
  6478  0057                     ?_log:	
  6479  0057                     log@x:	
  6480                           ; 3 bytes @ 0x37
  6481                           
  6482                           
  6483                           ; 3 bytes @ 0x37
  6484  0057                     	ds	3
  6485  005A                     ??_log:	
  6486                           
  6487                           ; 1 bytes @ 0x3A
  6488  005A                     	ds	1
  6489  005B                     log@exponent:	
  6490                           
  6491                           ; 2 bytes @ 0x3B
  6492  005B                     	ds	2
  6493  005D                     ?_tempCalc:	
  6494  005D                     tempCalc@analogValue:	
  6495                           ; 2 bytes @ 0x3D
  6496                           
  6497                           
  6498                           ; 2 bytes @ 0x3D
  6499  005D                     	ds	2
  6500  005F                     tempCalc@R:	
  6501                           
  6502                           ; 3 bytes @ 0x3F
  6503  005F                     	ds	3
  6504  0062                     _tempCalc$1278:	
  6505                           
  6506                           ; 3 bytes @ 0x42
  6507  0062                     	ds	3
  6508  0065                     tempCalc@steinhart:	
  6509                           
  6510                           ; 3 bytes @ 0x45
  6511  0065                     	ds	3
  6512  0068                     ??_main:	
  6513                           
  6514                           ; 1 bytes @ 0x48
  6515  0068                     	ds	4
  6516                           
  6517                           	psect	maintext
  6518  0287                     __pmaintext:	
  6519 ;;
  6520 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  6521 ;;
  6522 ;; *************** function _main *****************
  6523 ;; Defined at:
  6524 ;;		line 43 in file "main.c"
  6525 ;; Parameters:    Size  Location     Type
  6526 ;;		None
  6527 ;; Auto vars:     Size  Location     Type
  6528 ;;  efficiency      3   21[BANK1 ] float 
  6529 ;;  dutyCycle6      2   32[BANK1 ] unsigned int 
  6530 ;;  MPPT0           2   29[BANK1 ] int 
  6531 ;;  dutyCycle1      2   27[BANK1 ] unsigned int 
  6532 ;;  dutyCycle7      2   25[BANK1 ] unsigned int 
  6533 ;;  IOutTotal       2   15[BANK1 ] int 
  6534 ;;  faultNotRese    2    7[BANK1 ] unsigned int 
  6535 ;;  faultCount      2    5[BANK1 ] unsigned int 
  6536 ;;  MPPT1           2    3[BANK1 ] int 
  6537 ;;  j               1   31[BANK1 ] unsigned char 
  6538 ;;  menuButton      1   24[BANK1 ] unsigned char 
  6539 ;;  displayRefre    1   11[BANK1 ] unsigned char 
  6540 ;;  slowLoop        1   10[BANK1 ] unsigned char 
  6541 ;;  fastLoop        1    9[BANK1 ] unsigned char 
  6542 ;; Return value:  Size  Location     Type
  6543 ;;                  1    wreg      void 
  6544 ;; Registers used:
  6545 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6546 ;; Tracked objects:
  6547 ;;		On entry : B1F/0
  6548 ;;		On exit  : 0/0
  6549 ;;		Unchanged: 0/0
  6550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6552 ;;      Locals:         0       0      34       0       0       0       0       0       0       0       0       0       
      +0       0
  6553 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6554 ;;      Totals:         0       4      34       0       0       0       0       0       0       0       0       0       
      +0       0
  6555 ;;Total ram usage:       38 bytes
  6556 ;; Hardware stack levels required when called:    5
  6557 ;; This function calls:
  6558 ;;		_ADCRead
  6559 ;;		_Battery_State_Machine
  6560 ;;		_LCDClear
  6561 ;;		_LCDInit
  6562 ;;		_LCDWriteCharacter
  6563 ;;		_LCDWriteInt
  6564 ;;		_PWM1_LoadDutyValue
  6565 ;;		_PWM6_LoadDutyValue
  6566 ;;		_PWM7_LoadDutyValue
  6567 ;;		_SYSTEM_Initialize
  6568 ;;		___awdiv
  6569 ;;		___awtoft
  6570 ;;		___ftdiv
  6571 ;;		___ftmul
  6572 ;;		___fttol
  6573 ;;		___wmul
  6574 ;;		_calculateCurrent0
  6575 ;;		_calculateCurrent1
  6576 ;;		_cc_cv_mode
  6577 ;;		_gotoXY
  6578 ;;		_readAnalog
  6579 ;;		_readButton
  6580 ;;		_tempCalc
  6581 ;; This function is called by:
  6582 ;;		Startup code after reset
  6583 ;; This function uses a non-reentrant model
  6584 ;;
  6585                           
  6586                           
  6587                           ;psect for function _main
  6588  0287                     _main:	
  6589                           
  6590                           ;main.c: 45: int16_t MPPT0 = 3144;
  6591                           
  6592                           ;incstack = 0
  6593                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6594  0287  3048               	movlw	72
  6595  0288  0021               	movlb	1	; select bank1
  6596  0289  00DF               	movwf	main@MPPT0^(0+128)
  6597  028A  300C               	movlw	12
  6598  028B  00E0               	movwf	(main@MPPT0^(0+128)+1)
  6599                           
  6600                           ;main.c: 46: int16_t MPPT1 = 3144;
  6601  028C  3048               	movlw	72
  6602  028D  00C5               	movwf	main@MPPT1^(0+128)
  6603  028E  300C               	movlw	12
  6604  028F  00C6               	movwf	(main@MPPT1^(0+128)+1)
  6605                           
  6606                           ;main.c: 48: uint16_t dutyCycle6 = 1023;
  6607  0290  30FF               	movlw	255
  6608  0291  00E2               	movwf	main@dutyCycle6^(0+128)
  6609  0292  3003               	movlw	3
  6610  0293  00E3               	movwf	(main@dutyCycle6^(0+128)+1)
  6611                           
  6612                           ;main.c: 49: uint16_t dutyCycle7 = 256;
  6613  0294  3000               	movlw	0
  6614  0295  00DB               	movwf	main@dutyCycle7^(0+128)
  6615  0296  3001               	movlw	1
  6616  0297  00DC               	movwf	(main@dutyCycle7^(0+128)+1)
  6617                           
  6618                           ;main.c: 50: uint16_t dutyCycle1 = 60;
  6619  0298  303C               	movlw	60
  6620  0299  00DD               	movwf	main@dutyCycle1^(0+128)
  6621  029A  3000               	movlw	0
  6622  029B  00DE               	movwf	(main@dutyCycle1^(0+128)+1)
  6623                           
  6624                           ;main.c: 51: int16_t IOutTotal = 0;
  6625  029C  01D1               	clrf	main@IOutTotal^(0+128)
  6626  029D  01D2               	clrf	(main@IOutTotal+1)^(0+128)
  6627                           
  6628                           ;main.c: 53: uint8_t j = 0;
  6629  029E  01E1               	clrf	main@j^(0+128)
  6630                           
  6631                           ;main.c: 55: uint8_t fastLoop = 0;
  6632  029F  01CB               	clrf	main@fastLoop^(0+128)
  6633                           
  6634                           ;main.c: 56: uint8_t slowLoop = 200;
  6635  02A0  30C8               	movlw	200
  6636  02A1  0020               	movlb	0	; select bank0
  6637  02A2  00E8               	movwf	??_main
  6638  02A3  0868               	movf	??_main,w
  6639  02A4  0021               	movlb	1	; select bank1
  6640  02A5  00CC               	movwf	main@slowLoop^(0+128)
  6641                           
  6642                           ;main.c: 57: uint8_t displayRefresh = 0;
  6643  02A6  01CD               	clrf	main@displayRefresh^(0+128)
  6644                           
  6645                           ;main.c: 58: float efficiency = 0;
  6646  02A7  3000               	movlw	0
  6647  02A8  00D7               	movwf	main@efficiency^(0+128)
  6648  02A9  3000               	movlw	0
  6649  02AA  00D8               	movwf	(main@efficiency+1)^(0+128)
  6650  02AB  3000               	movlw	0
  6651  02AC  00D9               	movwf	(main@efficiency+2)^(0+128)
  6652                           
  6653                           ;main.c: 59: extern int8_t Imode0;
  6654                           ;main.c: 60: extern int16_t Vref;
  6655                           ;main.c: 61: extern int16_t Iref;
  6656                           ;main.c: 62: uint8_t menuButton = 0;
  6657  02AD  01DA               	clrf	main@menuButton^(0+128)
  6658                           
  6659                           ;main.c: 63: uint16_t faultCount = 0;
  6660  02AE  01C7               	clrf	main@faultCount^(0+128)
  6661  02AF  01C8               	clrf	(main@faultCount+1)^(0+128)
  6662                           
  6663                           ;main.c: 64: uint16_t faultNotReset = 0;
  6664  02B0  01C9               	clrf	main@faultNotReset^(0+128)
  6665  02B1  01CA               	clrf	(main@faultNotReset+1)^(0+128)
  6666                           
  6667                           ;main.c: 65: extern int8_t VHoldMode;
  6668                           ;main.c: 68: SYSTEM_Initialize();
  6669  02B2  3194  2490  3182   	fcall	_SYSTEM_Initialize
  6670                           
  6671                           ;main.c: 70: LCDClear();
  6672  02B5  3194  243E  3182   	fcall	_LCDClear
  6673  02B8                     l3063:	
  6674                           ;main.c: 72: void calculateCurrent0(void);
  6675                           ;main.c: 73: void calculateCurrent1(void);
  6676                           ;main.c: 89: while (1)
  6677                           
  6678                           
  6679                           ;main.c: 90: {
  6680                           ;main.c: 91: if(!(RB2))
  6681  02B8  0020               	movlb	0	; select bank0
  6682  02B9  190D               	btfsc	13,2	;volatile
  6683  02BA  2ACC               	goto	l3071
  6684                           
  6685                           ;main.c: 92: {
  6686                           ;main.c: 93: LATA5=0;
  6687  02BB  1296               	bcf	22,5	;volatile
  6688                           
  6689                           ;main.c: 94: _delay((unsigned long)((400)*(32000000/4000000.0)));
  6690  02BC  3005               	movlw	5
  6691  02BD  0020               	movlb	0	; select bank0
  6692  02BE  00E8               	movwf	??_main
  6693  02BF  3026               	movlw	38
  6694  02C0                     u3757:	
  6695  02C0  0B89               	decfsz	9,f
  6696  02C1  2AC0               	goto	u3757
  6697  02C2  0BE8               	decfsz	??_main,f
  6698  02C3  2AC0               	goto	u3757
  6699  02C4  0000               	nop
  6700                           
  6701                           ;main.c: 95: faultCount+=1;
  6702  02C5  3001               	movlw	1
  6703  02C6  0021               	movlb	1	; select bank1
  6704  02C7  07C7               	addwf	main@faultCount^(0+128),f
  6705  02C8  3000               	movlw	0
  6706  02C9  3DC8               	addwfc	(main@faultCount+1)^(0+128),f
  6707                           
  6708                           ;main.c: 96: LATA5=1;
  6709  02CA  0020               	movlb	0	; select bank0
  6710  02CB  1696               	bsf	22,5	;volatile
  6711  02CC                     l3071:	
  6712                           
  6713                           ;main.c: 97: }
  6714                           ;main.c: 98: for(j=0;j<8;j++) analogs[j]=readAnalog(j);
  6715  02CC  0021               	movlb	1	; select bank1
  6716  02CD  01E1               	clrf	main@j^(0+128)
  6717  02CE  3008               	movlw	8
  6718  02CF  0261               	subwf	main@j^(0+128),w
  6719  02D0  1803               	btfsc	3,0
  6720  02D1  2AF1               	goto	l443
  6721  02D2                     l3077:	
  6722  02D2  0861               	movf	main@j^(0+128),w
  6723  02D3  0020               	movlb	0	; select bank0
  6724  02D4  00E8               	movwf	??_main
  6725  02D5  01E9               	clrf	??_main+1
  6726  02D6  0868               	movf	??_main,w
  6727  02D7  00A6               	movwf	readAnalog@channel
  6728  02D8  0869               	movf	??_main+1,w
  6729  02D9  00A7               	movwf	readAnalog@channel+1
  6730  02DA  3181  213B  3182   	fcall	_readAnalog
  6731  02DD  0021               	movlb	1	; select bank1
  6732  02DE  3561               	lslf	main@j^(0+128),w
  6733  02DF  3E40               	addlw	(low (_analogs| (0+256)))& (0+255)
  6734  02E0  0086               	movwf	6
  6735  02E1  3001               	movlw	1	; select bank2/3
  6736  02E2  0087               	movwf	7
  6737  02E3  0020               	movlb	0	; select bank0
  6738  02E4  0826               	movf	?_readAnalog,w
  6739  02E5  3FC0               	movwi [0]fsr1
  6740  02E6  0827               	movf	?_readAnalog+1,w
  6741  02E7  3FC1               	movwi [1]fsr1
  6742  02E8  3001               	movlw	1
  6743  02E9  00E8               	movwf	??_main
  6744  02EA  0868               	movf	??_main,w
  6745  02EB  0021               	movlb	1	; select bank1
  6746  02EC  07E1               	addwf	main@j^(0+128),f
  6747  02ED  3008               	movlw	8
  6748  02EE  0261               	subwf	main@j^(0+128),w
  6749  02EF  1C03               	skipc
  6750  02F0  2AD2               	goto	l3077
  6751  02F1                     l443:	
  6752                           
  6753                           ;main.c: 100: if(!(RB2))faultNotReset+=1;
  6754  02F1  0020               	movlb	0	; select bank0
  6755  02F2  190D               	btfsc	13,2	;volatile
  6756  02F3  2AF9               	goto	l3085
  6757  02F4  3001               	movlw	1
  6758  02F5  0021               	movlb	1	; select bank1
  6759  02F6  07C9               	addwf	main@faultNotReset^(0+128),f
  6760  02F7  3000               	movlw	0
  6761  02F8  3DCA               	addwfc	(main@faultNotReset+1)^(0+128),f
  6762  02F9                     l3085:	
  6763                           
  6764                           ;main.c: 102: voltage[0]=(int16_t)(analogs[0]/.20885);
  6765  02F9  0022               	movlb	2	; select bank2
  6766  02FA  0841               	movf	(_analogs+1)^(0+256),w
  6767  02FB  00F9               	movwf	___awtoft@c+1
  6768  02FC  0840               	movf	_analogs^(0+256),w
  6769  02FD  00F8               	movwf	___awtoft@c
  6770  02FE  3193  23F9  3182   	fcall	___awtoft
  6771  0301  0878               	movf	?___awtoft,w
  6772  0302  0020               	movlb	0	; select bank0
  6773  0303  00A3               	movwf	___ftdiv@f1
  6774  0304  0879               	movf	?___awtoft+1,w
  6775  0305  00A4               	movwf	___ftdiv@f1+1
  6776  0306  087A               	movf	?___awtoft+2,w
  6777  0307  00A5               	movwf	___ftdiv@f1+2
  6778  0308  30DD               	movlw	221
  6779  0309  00A0               	movwf	___ftdiv@f2
  6780  030A  3055               	movlw	85
  6781  030B  00A1               	movwf	___ftdiv@f2+1
  6782  030C  303E               	movlw	62
  6783  030D  00A2               	movwf	___ftdiv@f2+2
  6784  030E  318A  2279  3182   	fcall	___ftdiv
  6785  0311  0020               	movlb	0	; select bank0
  6786  0312  0820               	movf	?___ftdiv,w
  6787  0313  00C0               	movwf	___fttol@f1
  6788  0314  0821               	movf	?___ftdiv+1,w
  6789  0315  00C1               	movwf	___fttol@f1+1
  6790  0316  0822               	movf	?___ftdiv+2,w
  6791  0317  00C2               	movwf	___fttol@f1+2
  6792  0318  3189  21F2  3182   	fcall	___fttol
  6793  031B  0020               	movlb	0	; select bank0
  6794  031C  0841               	movf	?___fttol+1,w
  6795  031D  0021               	movlb	1	; select bank1
  6796  031E  00A9               	movwf	(_voltage+1)^(0+128)
  6797  031F  0020               	movlb	0	; select bank0
  6798  0320  0840               	movf	?___fttol,w
  6799  0321  0021               	movlb	1	; select bank1
  6800  0322  00A8               	movwf	_voltage^(0+128)
  6801                           
  6802                           ;main.c: 104: voltage[1]=(int16_t)(analogs[1]/.54503);
  6803  0323  0022               	movlb	2	; select bank2
  6804  0324  0843               	movf	((_analogs+1)^(0+256)+2),w
  6805  0325  00F9               	movwf	___awtoft@c+1
  6806  0326  0842               	movf	(_analogs^(0+256)+2),w
  6807  0327  00F8               	movwf	___awtoft@c
  6808  0328  3193  23F9  3182   	fcall	___awtoft
  6809  032B  0878               	movf	?___awtoft,w
  6810  032C  0020               	movlb	0	; select bank0
  6811  032D  00A3               	movwf	___ftdiv@f1
  6812  032E  0879               	movf	?___awtoft+1,w
  6813  032F  00A4               	movwf	___ftdiv@f1+1
  6814  0330  087A               	movf	?___awtoft+2,w
  6815  0331  00A5               	movwf	___ftdiv@f1+2
  6816  0332  3087               	movlw	135
  6817  0333  00A0               	movwf	___ftdiv@f2
  6818  0334  300B               	movlw	11
  6819  0335  00A1               	movwf	___ftdiv@f2+1
  6820  0336  303F               	movlw	63
  6821  0337  00A2               	movwf	___ftdiv@f2+2
  6822  0338  318A  2279  3182   	fcall	___ftdiv
  6823  033B  0020               	movlb	0	; select bank0
  6824  033C  0820               	movf	?___ftdiv,w
  6825  033D  00C0               	movwf	___fttol@f1
  6826  033E  0821               	movf	?___ftdiv+1,w
  6827  033F  00C1               	movwf	___fttol@f1+1
  6828  0340  0822               	movf	?___ftdiv+2,w
  6829  0341  00C2               	movwf	___fttol@f1+2
  6830  0342  3189  21F2  3182   	fcall	___fttol
  6831  0345  0020               	movlb	0	; select bank0
  6832  0346  0841               	movf	?___fttol+1,w
  6833  0347  0021               	movlb	1	; select bank1
  6834  0348  00AB               	movwf	((_voltage+1)^(0+128)+2)
  6835  0349  0020               	movlb	0	; select bank0
  6836  034A  0840               	movf	?___fttol,w
  6837  034B  0021               	movlb	1	; select bank1
  6838  034C  00AA               	movwf	(_voltage^(0+128)+2)
  6839                           
  6840                           ;main.c: 110: calculateCurrent0();
  6841  034D  3195  2538  3182   	fcall	_calculateCurrent0
  6842                           
  6843                           ;main.c: 113: calculateCurrent1();
  6844  0350  3195  257D  3182   	fcall	_calculateCurrent1
  6845                           
  6846                           ;main.c: 117: if(fastLoop>11)
  6847  0353  300C               	movlw	12
  6848  0354  0021               	movlb	1	; select bank1
  6849  0355  024B               	subwf	main@fastLoop^(0+128),w
  6850  0356  1C03               	skipc
  6851  0357  2BED               	goto	l3149
  6852                           
  6853                           ;main.c: 118: {
  6854                           ;main.c: 119: if(Imode0)
  6855  0358  0020               	movlb	0	; select bank0
  6856  0359  086E               	movf	_Imode0,w
  6857  035A  1903               	btfsc	3,2
  6858  035B  2B6C               	goto	l3109
  6859                           
  6860                           ;main.c: 120: {
  6861                           ;main.c: 121: if(voltage[0]<MPPT0)
  6862  035C  0021               	movlb	1	; select bank1
  6863  035D  0829               	movf	(_voltage+1)^(0+128),w
  6864  035E  3A80               	xorlw	128
  6865  035F  0020               	movlb	0	; select bank0
  6866  0360  00E8               	movwf	??_main
  6867  0361  0021               	movlb	1	; select bank1
  6868  0362  0860               	movf	(main@MPPT0+1)^(0+128),w
  6869  0363  3A80               	xorlw	128
  6870  0364  0020               	movlb	0	; select bank0
  6871  0365  0268               	subwf	??_main,w
  6872  0366  1D03               	skipz
  6873  0367  2B7B               	goto	u3615
  6874  0368  0021               	movlb	1	; select bank1
  6875  0369  085F               	movf	main@MPPT0^(0+128),w
  6876  036A  0228               	subwf	_voltage^(0+128),w
  6877  036B  2B7B               	goto	u3615
  6878  036C                     l3109:	
  6879                           ;main.c: 143: }
  6880                           ;main.c: 144: }
  6881                           
  6882                           ;main.c: 141: {
  6883                           
  6884                           ;main.c: 138: }
  6885                           ;main.c: 139: }
  6886                           
  6887                           ;main.c: 136: {
  6888                           
  6889                           ;main.c: 129: {
  6890                           ;main.c: 130: dutyCycle6-=1;
  6891                           
  6892                           ;main.c: 128: else if(dutyCycle6>0)
  6893                           
  6894                           ;main.c: 126: }
  6895                           ;main.c: 127: }
  6896                           
  6897                           ;main.c: 124: {
  6898                           ;main.c: 125: dutyCycle6+=1;
  6899                           
  6900                           ;main.c: 122: {
  6901                           ;main.c: 123: if(dutyCycle6<1023)
  6902                           
  6903                           
  6904                           ;main.c: 145: else
  6905                           ;main.c: 146: {
  6906                           ;main.c: 147: if(voltage[1]>(int16_t)Vref)
  6907  036C  0021               	movlb	1	; select bank1
  6908  036D  0865               	movf	(_Vref+1)^(0+128),w
  6909  036E  3A80               	xorlw	128
  6910  036F  0020               	movlb	0	; select bank0
  6911  0370  00E8               	movwf	??_main
  6912  0371  0021               	movlb	1	; select bank1
  6913  0372  082B               	movf	((_voltage+1)^(0+128)+2),w
  6914  0373  3A80               	xorlw	128
  6915  0374  0020               	movlb	0	; select bank0
  6916  0375  0268               	subwf	??_main,w
  6917  0376  1D03               	skipz
  6918  0377  2B7B               	goto	u3615
  6919  0378  0021               	movlb	1	; select bank1
  6920  0379  082A               	movf	(_voltage^(0+128)+2),w
  6921  037A  0264               	subwf	_Vref^(0+128),w
  6922  037B                     u3615:	
  6923  037B  1803               	skipnc
  6924  037C  2B8A               	goto	l3115
  6925                           
  6926                           ;main.c: 148: {
  6927                           ;main.c: 149: if(dutyCycle6<1023) dutyCycle6+=1;
  6928  037D  3003               	movlw	3
  6929  037E  0021               	movlb	1	; select bank1
  6930  037F  0263               	subwf	(main@dutyCycle6+1)^(0+128),w
  6931  0380  30FF               	movlw	255
  6932  0381  1903               	skipnz
  6933  0382  0262               	subwf	main@dutyCycle6^(0+128),w
  6934  0383  1803               	skipnc
  6935  0384  2B93               	goto	l3121
  6936  0385  3001               	movlw	1
  6937  0386  07E2               	addwf	main@dutyCycle6^(0+128),f
  6938  0387  3000               	movlw	0
  6939  0388  3DE3               	addwfc	(main@dutyCycle6+1)^(0+128),f
  6940                           
  6941                           ;main.c: 150: }
  6942  0389  2B93               	goto	l3121
  6943  038A                     l3115:	
  6944                           
  6945                           ;main.c: 151: else
  6946                           ;main.c: 152: {
  6947                           ;main.c: 153: if(dutyCycle6>0) dutyCycle6-=1;;
  6948  038A  0021               	movlb	1	; select bank1
  6949  038B  0862               	movf	main@dutyCycle6^(0+128),w
  6950  038C  0463               	iorwf	(main@dutyCycle6+1)^(0+128),w
  6951  038D  1903               	btfsc	3,2
  6952  038E  2B93               	goto	l3121
  6953  038F  3001               	movlw	1
  6954  0390  02E2               	subwf	main@dutyCycle6^(0+128),f
  6955  0391  3000               	movlw	0
  6956  0392  3BE3               	subwfb	(main@dutyCycle6+1)^(0+128),f
  6957  0393                     l3121:	
  6958                           ;main.c: 160: else
  6959                           ;main.c: 161: {
  6960                           
  6961                           ;main.c: 157: {
  6962                           ;main.c: 159: }
  6963                           
  6964                           
  6965                           ;main.c: 163: }
  6966                           ;main.c: 165: }
  6967                           ;main.c: 166: fastLoop=0;
  6968  0393  01CB               	clrf	main@fastLoop^(0+128)
  6969                           
  6970                           ;main.c: 167: slowLoop+=1;
  6971  0394  3001               	movlw	1
  6972  0395  0020               	movlb	0	; select bank0
  6973  0396  00E8               	movwf	??_main
  6974  0397  0868               	movf	??_main,w
  6975  0398  0021               	movlb	1	; select bank1
  6976  0399  07CC               	addwf	main@slowLoop^(0+128),f
  6977                           
  6978                           ;main.c: 169: PWM1_LoadDutyValue(dutyCycle1);
  6979  039A  085E               	movf	(main@dutyCycle1+1)^(0+128),w
  6980  039B  00F1               	movwf	PWM1_LoadDutyValue@dutyCycle1+1
  6981  039C  085D               	movf	main@dutyCycle1^(0+128),w
  6982  039D  00F0               	movwf	PWM1_LoadDutyValue@dutyCycle1
  6983  039E  3193  233D  3182   	fcall	_PWM1_LoadDutyValue
  6984                           
  6985                           ;main.c: 170: PWM6_LoadDutyValue(dutyCycle6);
  6986  03A1  0021               	movlb	1	; select bank1
  6987  03A2  0863               	movf	(main@dutyCycle6+1)^(0+128),w
  6988  03A3  00F1               	movwf	PWM6_LoadDutyValue@dutyCycle6+1
  6989  03A4  0862               	movf	main@dutyCycle6^(0+128),w
  6990  03A5  00F0               	movwf	PWM6_LoadDutyValue@dutyCycle6
  6991  03A6  3193  2353  3182   	fcall	_PWM6_LoadDutyValue
  6992                           
  6993                           ;main.c: 171: PWM7_LoadDutyValue(dutyCycle7);
  6994  03A9  0021               	movlb	1	; select bank1
  6995  03AA  085C               	movf	(main@dutyCycle7+1)^(0+128),w
  6996  03AB  00F1               	movwf	PWM7_LoadDutyValue@dutyCycle7+1
  6997  03AC  085B               	movf	main@dutyCycle7^(0+128),w
  6998  03AD  00F0               	movwf	PWM7_LoadDutyValue@dutyCycle7
  6999  03AE  3193  2369  3182   	fcall	_PWM7_LoadDutyValue
  7000                           
  7001                           ;main.c: 173: menuButton = readButton();
  7002  03B1  3189  216C  3182   	fcall	_readButton
  7003  03B4  0020               	movlb	0	; select bank0
  7004  03B5  00E8               	movwf	??_main
  7005  03B6  0868               	movf	??_main,w
  7006  03B7  0021               	movlb	1	; select bank1
  7007  03B8  00DA               	movwf	main@menuButton^(0+128)
  7008                           
  7009                           ;main.c: 174: if(menuButton == 2) if(MPPT0>2800)MPPT0-=10;
  7010  03B9  3002               	movlw	2
  7011  03BA  065A               	xorwf	main@menuButton^(0+128),w
  7012  03BB  1D03               	btfss	3,2
  7013  03BC  2BCF               	goto	l3139
  7014  03BD  0860               	movf	(main@MPPT0+1)^(0+128),w
  7015  03BE  3A80               	xorlw	128
  7016  03BF  0020               	movlb	0	; select bank0
  7017  03C0  00E8               	movwf	??_main
  7018  03C1  308A               	movlw	138
  7019  03C2  0268               	subwf	??_main,w
  7020  03C3  1D03               	skipz
  7021  03C4  2BC8               	goto	u3655
  7022  03C5  30F1               	movlw	241
  7023  03C6  0021               	movlb	1	; select bank1
  7024  03C7  025F               	subwf	main@MPPT0^(0+128),w
  7025  03C8                     u3655:	
  7026  03C8  1C03               	skipc
  7027  03C9  2BCF               	goto	l3139
  7028  03CA  30F6               	movlw	246
  7029  03CB  0021               	movlb	1	; select bank1
  7030  03CC  07DF               	addwf	main@MPPT0^(0+128),f
  7031  03CD  30FF               	movlw	255
  7032  03CE  3DE0               	addwfc	(main@MPPT0+1)^(0+128),f
  7033  03CF                     l3139:	
  7034                           
  7035                           ;main.c: 175: if(menuButton == 3)if(MPPT0<3400)MPPT0+=10;
  7036  03CF  3003               	movlw	3
  7037  03D0  0021               	movlb	1	; select bank1
  7038  03D1  065A               	xorwf	main@menuButton^(0+128),w
  7039  03D2  1D03               	btfss	3,2
  7040  03D3  2BE6               	goto	l3145
  7041  03D4  0860               	movf	(main@MPPT0+1)^(0+128),w
  7042  03D5  3A80               	xorlw	128
  7043  03D6  0020               	movlb	0	; select bank0
  7044  03D7  00E8               	movwf	??_main
  7045  03D8  308D               	movlw	141
  7046  03D9  0268               	subwf	??_main,w
  7047  03DA  1D03               	skipz
  7048  03DB  2BDF               	goto	u3675
  7049  03DC  3048               	movlw	72
  7050  03DD  0021               	movlb	1	; select bank1
  7051  03DE  025F               	subwf	main@MPPT0^(0+128),w
  7052  03DF                     u3675:	
  7053  03DF  1803               	skipnc
  7054  03E0  2BE6               	goto	l3145
  7055  03E1  300A               	movlw	10
  7056  03E2  0021               	movlb	1	; select bank1
  7057  03E3  07DF               	addwf	main@MPPT0^(0+128),f
  7058  03E4  3000               	movlw	0
  7059  03E5  3DE0               	addwfc	(main@MPPT0+1)^(0+128),f
  7060  03E6                     l3145:	
  7061                           
  7062                           ;main.c: 176: if(menuButton == 1)LCDInit();
  7063  03E6  0021               	movlb	1	; select bank1
  7064  03E7  035A               	decf	main@menuButton^(0+128),w
  7065  03E8  1D03               	btfss	3,2
  7066  03E9  2BED               	goto	l3149
  7067  03EA  3194  24FD  3182   	fcall	_LCDInit
  7068  03ED                     l3149:	
  7069                           
  7070                           ;main.c: 177: }
  7071                           ;main.c: 178: fastLoop+=1;
  7072  03ED  3001               	movlw	1
  7073  03EE  0020               	movlb	0	; select bank0
  7074  03EF  00E8               	movwf	??_main
  7075  03F0  0868               	movf	??_main,w
  7076  03F1  0021               	movlb	1	; select bank1
  7077  03F2  07CB               	addwf	main@fastLoop^(0+128),f
  7078                           
  7079                           ;main.c: 180: if(slowLoop>20)
  7080  03F3  3015               	movlw	21
  7081  03F4  024C               	subwf	main@slowLoop^(0+128),w
  7082  03F5  1C03               	skipc
  7083  03F6  2AB8               	goto	l3063
  7084                           
  7085                           ;main.c: 181: {
  7086                           ;main.c: 183: IOutTotal=current[1]+current[3];
  7087  03F7  3006               	movlw	6
  7088  03F8  3EA0               	addlw	(low (_current| 0))& (0+255)
  7089  03F9  0086               	movwf	6
  7090  03FA  0187               	clrf	7
  7091  03FB  3002               	movlw	2
  7092  03FC  3EA0               	addlw	(low (_current| 0))& (0+255)
  7093  03FD  0084               	movwf	4
  7094  03FE  0185               	clrf	5
  7095  03FF  3F40               	moviw [0]fsr1
  7096  0400  0700               	addwf	0,w
  7097  0401  00D1               	movwf	main@IOutTotal^(0+128)
  7098  0402  3101               	addfsr 0,1
  7099  0403  3F41               	moviw [1]fsr1
  7100  0404  3D00               	addwfc	0,w
  7101  0405  00D2               	movwf	(main@IOutTotal^(0+128)+1)
  7102                           
  7103                           ;main.c: 185: if(IOutTotal>20)
  7104  0406  0852               	movf	(main@IOutTotal+1)^(0+128),w
  7105  0407  3A80               	xorlw	128
  7106  0408  0020               	movlb	0	; select bank0
  7107  0409  00E8               	movwf	??_main
  7108  040A  3080               	movlw	128
  7109  040B  0268               	subwf	??_main,w
  7110  040C  1D03               	skipz
  7111  040D  2C11               	goto	u3705
  7112  040E  3015               	movlw	21
  7113  040F  0021               	movlb	1	; select bank1
  7114  0410  0251               	subwf	main@IOutTotal^(0+128),w
  7115  0411                     u3705:	
  7116  0411  1C03               	skipc
  7117  0412  2C38               	goto	l3163
  7118                           
  7119                           ;main.c: 186: {
  7120                           ;main.c: 187: if((uint16_t)IOutTotal/2+10>dutyCycle1)dutyCycle1+=1;else dutyCycle1-=1;
  7121  0413  0021               	movlb	1	; select bank1
  7122  0414  0852               	movf	(main@IOutTotal+1)^(0+128),w
  7123  0415  0020               	movlb	0	; select bank0
  7124  0416  00E9               	movwf	??_main+1
  7125  0417  0021               	movlb	1	; select bank1
  7126  0418  0851               	movf	main@IOutTotal^(0+128),w
  7127  0419  0020               	movlb	0	; select bank0
  7128  041A  00E8               	movwf	??_main
  7129  041B  36E9               	lsrf	??_main+1,f
  7130  041C  0CE8               	rrf	??_main,f
  7131  041D  0868               	movf	??_main,w
  7132  041E  3E0A               	addlw	10
  7133  041F  00EA               	movwf	??_main+2
  7134  0420  3000               	movlw	0
  7135  0421  3D69               	addwfc	??_main+1,w
  7136  0422  00EB               	movwf	??_main+3
  7137  0423  086B               	movf	??_main+3,w
  7138  0424  0021               	movlb	1	; select bank1
  7139  0425  025E               	subwf	(main@dutyCycle1+1)^(0+128),w
  7140  0426  1D03               	skipz
  7141  0427  2C2C               	goto	u3715
  7142  0428  0020               	movlb	0	; select bank0
  7143  0429  086A               	movf	??_main+2,w
  7144  042A  0021               	movlb	1	; select bank1
  7145  042B  025D               	subwf	main@dutyCycle1^(0+128),w
  7146  042C                     u3715:	
  7147  042C  1803               	skipnc
  7148  042D  2C33               	goto	l3161
  7149  042E  3001               	movlw	1
  7150  042F  07DD               	addwf	main@dutyCycle1^(0+128),f
  7151  0430  3000               	movlw	0
  7152  0431  3DDE               	addwfc	(main@dutyCycle1+1)^(0+128),f
  7153  0432  2C3B               	goto	l3165
  7154  0433                     l3161:	
  7155  0433  3001               	movlw	1
  7156  0434  02DD               	subwf	main@dutyCycle1^(0+128),f
  7157  0435  3000               	movlw	0
  7158  0436  3BDE               	subwfb	(main@dutyCycle1+1)^(0+128),f
  7159                           
  7160                           ;main.c: 191: }
  7161  0437  2C3B               	goto	l3165
  7162  0438                     l3163:	
  7163                           
  7164                           ;main.c: 192: else
  7165                           ;main.c: 193: {
  7166                           ;main.c: 194: dutyCycle1=0;
  7167  0438  0021               	movlb	1	; select bank1
  7168  0439  01DD               	clrf	main@dutyCycle1^(0+128)
  7169  043A  01DE               	clrf	(main@dutyCycle1+1)^(0+128)
  7170  043B                     l3165:	
  7171                           
  7172                           ;main.c: 195: }
  7173                           ;main.c: 196: if(!(RB2))
  7174  043B  0020               	movlb	0	; select bank0
  7175  043C  190D               	btfsc	13,2	;volatile
  7176  043D  2C49               	goto	l3169
  7177                           
  7178                           ;main.c: 197: {
  7179                           ;main.c: 198: dutyCycle1=55;
  7180  043E  3037               	movlw	55
  7181  043F  0021               	movlb	1	; select bank1
  7182  0440  00DD               	movwf	main@dutyCycle1^(0+128)
  7183  0441  3000               	movlw	0
  7184  0442  00DE               	movwf	(main@dutyCycle1^(0+128)+1)
  7185                           
  7186                           ;main.c: 199: battery_state=CHARGE;
  7187  0443  3004               	movlw	4
  7188  0444  0020               	movlb	0	; select bank0
  7189  0445  00E8               	movwf	??_main
  7190  0446  0868               	movf	??_main,w
  7191  0447  0021               	movlb	1	; select bank1
  7192  0448  00EC               	movwf	_battery_state^(0+128)
  7193  0449                     l3169:	
  7194                           
  7195                           ;main.c: 200: }
  7196                           ;main.c: 202: displayRefresh+=1;
  7197  0449  3001               	movlw	1
  7198  044A  0020               	movlb	0	; select bank0
  7199  044B  00E8               	movwf	??_main
  7200  044C  0868               	movf	??_main,w
  7201  044D  0021               	movlb	1	; select bank1
  7202  044E  07CD               	addwf	main@displayRefresh^(0+128),f
  7203                           
  7204                           ;main.c: 203: if(displayRefresh>80)
  7205  044F  3051               	movlw	81
  7206  0450  024D               	subwf	main@displayRefresh^(0+128),w
  7207  0451  1C03               	skipc
  7208  0452  2C6C               	goto	l3179
  7209                           
  7210                           ;main.c: 204: {
  7211                           ;main.c: 205: LCDClear();
  7212  0453  3194  243E  3182   	fcall	_LCDClear
  7213                           
  7214                           ;main.c: 206: displayRefresh=0;
  7215  0456  0021               	movlb	1	; select bank1
  7216  0457  01CD               	clrf	main@displayRefresh^(0+128)
  7217                           
  7218                           ;main.c: 207: batteryTemp=tempCalc(ADCRead(9));
  7219  0458  3009               	movlw	9
  7220  0459  3193  2328  3182   	fcall	_ADCRead
  7221  045C  0871               	movf	?_ADCRead+1,w
  7222  045D  0020               	movlb	0	; select bank0
  7223  045E  00DE               	movwf	tempCalc@analogValue+1
  7224  045F  0870               	movf	?_ADCRead,w
  7225  0460  00DD               	movwf	tempCalc@analogValue
  7226  0461  318E  2623  3182   	fcall	_tempCalc
  7227  0464  0020               	movlb	0	; select bank0
  7228  0465  085E               	movf	?_tempCalc+1,w
  7229  0466  0021               	movlb	1	; select bank1
  7230  0467  00EE               	movwf	(_batteryTemp+1)^(0+128)
  7231  0468  0020               	movlb	0	; select bank0
  7232  0469  085D               	movf	?_tempCalc,w
  7233  046A  0021               	movlb	1	; select bank1
  7234  046B  00ED               	movwf	_batteryTemp^(0+128)
  7235  046C                     l3179:	
  7236                           
  7237                           ;main.c: 208: }
  7238                           ;main.c: 209: Battery_State_Machine();
  7239  046C  3180  2042  3182   	fcall	_Battery_State_Machine
  7240                           
  7241                           ;main.c: 210: efficiency=(float)voltage[1]/100*current[1]/10;
  7242  046F  0021               	movlb	1	; select bank1
  7243  0470  0823               	movf	((_current+1)^(0+128)+2),w
  7244  0471  00F9               	movwf	___awtoft@c+1
  7245  0472  0822               	movf	(_current^(0+128)+2),w
  7246  0473  00F8               	movwf	___awtoft@c
  7247  0474  3193  23F9  3182   	fcall	___awtoft
  7248  0477  0878               	movf	?___awtoft,w
  7249  0478  0020               	movlb	0	; select bank0
  7250  0479  00B0               	movwf	___ftmul@f1
  7251  047A  0879               	movf	?___awtoft+1,w
  7252  047B  00B1               	movwf	___ftmul@f1+1
  7253  047C  087A               	movf	?___awtoft+2,w
  7254  047D  00B2               	movwf	___ftmul@f1+2
  7255  047E  3000               	movlw	0
  7256  047F  00A0               	movwf	___ftdiv@f2
  7257  0480  30C8               	movlw	200
  7258  0481  00A1               	movwf	___ftdiv@f2+1
  7259  0482  3042               	movlw	66
  7260  0483  00A2               	movwf	___ftdiv@f2+2
  7261  0484  0021               	movlb	1	; select bank1
  7262  0485  082B               	movf	((_voltage+1)^(0+128)+2),w
  7263  0486  00F9               	movwf	___awtoft@c+1
  7264  0487  082A               	movf	(_voltage^(0+128)+2),w
  7265  0488  00F8               	movwf	___awtoft@c
  7266  0489  3193  23F9  3182   	fcall	___awtoft
  7267  048C  0878               	movf	?___awtoft,w
  7268  048D  0020               	movlb	0	; select bank0
  7269  048E  00A3               	movwf	___ftdiv@f1
  7270  048F  0879               	movf	?___awtoft+1,w
  7271  0490  00A4               	movwf	___ftdiv@f1+1
  7272  0491  087A               	movf	?___awtoft+2,w
  7273  0492  00A5               	movwf	___ftdiv@f1+2
  7274  0493  318A  2279  3182   	fcall	___ftdiv
  7275  0496  0020               	movlb	0	; select bank0
  7276  0497  0820               	movf	?___ftdiv,w
  7277  0498  00B3               	movwf	___ftmul@f2
  7278  0499  0821               	movf	?___ftdiv+1,w
  7279  049A  00B4               	movwf	___ftmul@f2+1
  7280  049B  0822               	movf	?___ftdiv+2,w
  7281  049C  00B5               	movwf	___ftmul@f2+2
  7282  049D  318B  23D2  3182   	fcall	___ftmul
  7283  04A0  0020               	movlb	0	; select bank0
  7284  04A1  0830               	movf	?___ftmul,w
  7285  04A2  0021               	movlb	1	; select bank1
  7286  04A3  00CE               	movwf	_main$1279^(0+128)
  7287  04A4  0020               	movlb	0	; select bank0
  7288  04A5  0831               	movf	?___ftmul+1,w
  7289  04A6  0021               	movlb	1	; select bank1
  7290  04A7  00CF               	movwf	(_main$1279+1)^(0+128)
  7291  04A8  0020               	movlb	0	; select bank0
  7292  04A9  0832               	movf	?___ftmul+2,w
  7293  04AA  0021               	movlb	1	; select bank1
  7294  04AB  00D0               	movwf	(_main$1279+2)^(0+128)
  7295                           
  7296                           ;main.c: 210: efficiency=(float)voltage[1]/100*current[1]/10;
  7297  04AC  3000               	movlw	0
  7298  04AD  0020               	movlb	0	; select bank0
  7299  04AE  00A0               	movwf	___ftdiv@f2
  7300  04AF  3020               	movlw	32
  7301  04B0  00A1               	movwf	___ftdiv@f2+1
  7302  04B1  3041               	movlw	65
  7303  04B2  00A2               	movwf	___ftdiv@f2+2
  7304  04B3  0021               	movlb	1	; select bank1
  7305  04B4  084E               	movf	_main$1279^(0+128),w
  7306  04B5  0020               	movlb	0	; select bank0
  7307  04B6  00A3               	movwf	___ftdiv@f1
  7308  04B7  0021               	movlb	1	; select bank1
  7309  04B8  084F               	movf	(_main$1279+1)^(0+128),w
  7310  04B9  0020               	movlb	0	; select bank0
  7311  04BA  00A4               	movwf	___ftdiv@f1+1
  7312  04BB  0021               	movlb	1	; select bank1
  7313  04BC  0850               	movf	(_main$1279+2)^(0+128),w
  7314  04BD  0020               	movlb	0	; select bank0
  7315  04BE  00A5               	movwf	___ftdiv@f1+2
  7316  04BF  318A  2279  3182   	fcall	___ftdiv
  7317  04C2  0020               	movlb	0	; select bank0
  7318  04C3  0820               	movf	?___ftdiv,w
  7319  04C4  0021               	movlb	1	; select bank1
  7320  04C5  00D7               	movwf	main@efficiency^(0+128)
  7321  04C6  0020               	movlb	0	; select bank0
  7322  04C7  0821               	movf	?___ftdiv+1,w
  7323  04C8  0021               	movlb	1	; select bank1
  7324  04C9  00D8               	movwf	(main@efficiency+1)^(0+128)
  7325  04CA  0020               	movlb	0	; select bank0
  7326  04CB  0822               	movf	?___ftdiv+2,w
  7327  04CC  0021               	movlb	1	; select bank1
  7328  04CD  00D9               	movwf	(main@efficiency+2)^(0+128)
  7329                           
  7330                           ;main.c: 211: efficiency/=(float)voltage[0]/100*current[0]/10;
  7331  04CE  0829               	movf	(_voltage+1)^(0+128),w
  7332  04CF  00F9               	movwf	___awtoft@c+1
  7333  04D0  0828               	movf	_voltage^(0+128),w
  7334  04D1  00F8               	movwf	___awtoft@c
  7335  04D2  3193  23F9  3182   	fcall	___awtoft
  7336  04D5  0878               	movf	?___awtoft,w
  7337  04D6  0020               	movlb	0	; select bank0
  7338  04D7  00A3               	movwf	___ftdiv@f1
  7339  04D8  0879               	movf	?___awtoft+1,w
  7340  04D9  00A4               	movwf	___ftdiv@f1+1
  7341  04DA  087A               	movf	?___awtoft+2,w
  7342  04DB  00A5               	movwf	___ftdiv@f1+2
  7343  04DC  3000               	movlw	0
  7344  04DD  00A0               	movwf	___ftdiv@f2
  7345  04DE  30C8               	movlw	200
  7346  04DF  00A1               	movwf	___ftdiv@f2+1
  7347  04E0  3042               	movlw	66
  7348  04E1  00A2               	movwf	___ftdiv@f2+2
  7349  04E2  318A  2279  3182   	fcall	___ftdiv
  7350  04E5  0020               	movlb	0	; select bank0
  7351  04E6  0820               	movf	?___ftdiv,w
  7352  04E7  00B3               	movwf	___ftmul@f2
  7353  04E8  0821               	movf	?___ftdiv+1,w
  7354  04E9  00B4               	movwf	___ftmul@f2+1
  7355  04EA  0822               	movf	?___ftdiv+2,w
  7356  04EB  00B5               	movwf	___ftmul@f2+2
  7357  04EC  0021               	movlb	1	; select bank1
  7358  04ED  0821               	movf	(_current+1)^(0+128),w
  7359  04EE  00F9               	movwf	___awtoft@c+1
  7360  04EF  0820               	movf	_current^(0+128),w
  7361  04F0  00F8               	movwf	___awtoft@c
  7362  04F1  3193  23F9  3182   	fcall	___awtoft
  7363  04F4  0878               	movf	?___awtoft,w
  7364  04F5  0020               	movlb	0	; select bank0
  7365  04F6  00B0               	movwf	___ftmul@f1
  7366  04F7  0879               	movf	?___awtoft+1,w
  7367  04F8  00B1               	movwf	___ftmul@f1+1
  7368  04F9  087A               	movf	?___awtoft+2,w
  7369  04FA  00B2               	movwf	___ftmul@f1+2
  7370  04FB  318B  23D2  3182   	fcall	___ftmul
  7371  04FE  0020               	movlb	0	; select bank0
  7372  04FF  0830               	movf	?___ftmul,w
  7373  0500  0021               	movlb	1	; select bank1
  7374  0501  00CE               	movwf	_main$1279^(0+128)
  7375  0502  0020               	movlb	0	; select bank0
  7376  0503  0831               	movf	?___ftmul+1,w
  7377  0504  0021               	movlb	1	; select bank1
  7378  0505  00CF               	movwf	(_main$1279+1)^(0+128)
  7379  0506  0020               	movlb	0	; select bank0
  7380  0507  0832               	movf	?___ftmul+2,w
  7381  0508  0021               	movlb	1	; select bank1
  7382  0509  00D0               	movwf	(_main$1279+2)^(0+128)
  7383                           
  7384                           ;main.c: 211: efficiency/=(float)voltage[0]/100*current[0]/10;
  7385  050A  084E               	movf	_main$1279^(0+128),w
  7386  050B  0020               	movlb	0	; select bank0
  7387  050C  00A3               	movwf	___ftdiv@f1
  7388  050D  0021               	movlb	1	; select bank1
  7389  050E  084F               	movf	(_main$1279+1)^(0+128),w
  7390  050F  0020               	movlb	0	; select bank0
  7391  0510  00A4               	movwf	___ftdiv@f1+1
  7392  0511  0021               	movlb	1	; select bank1
  7393  0512  0850               	movf	(_main$1279+2)^(0+128),w
  7394  0513  0020               	movlb	0	; select bank0
  7395  0514  00A5               	movwf	___ftdiv@f1+2
  7396  0515  3000               	movlw	0
  7397  0516  00A0               	movwf	___ftdiv@f2
  7398  0517  3020               	movlw	32
  7399  0518  00A1               	movwf	___ftdiv@f2+1
  7400  0519  3041               	movlw	65
  7401  051A  00A2               	movwf	___ftdiv@f2+2
  7402  051B  318A  2279  3182   	fcall	___ftdiv
  7403  051E  0020               	movlb	0	; select bank0
  7404  051F  0820               	movf	?___ftdiv,w
  7405  0520  0021               	movlb	1	; select bank1
  7406  0521  00C2               	movwf	_main$1280^(0+128)
  7407  0522  0020               	movlb	0	; select bank0
  7408  0523  0821               	movf	?___ftdiv+1,w
  7409  0524  0021               	movlb	1	; select bank1
  7410  0525  00C3               	movwf	(_main$1280+1)^(0+128)
  7411  0526  0020               	movlb	0	; select bank0
  7412  0527  0822               	movf	?___ftdiv+2,w
  7413  0528  0021               	movlb	1	; select bank1
  7414  0529  00C4               	movwf	(_main$1280+2)^(0+128)
  7415                           
  7416                           ;main.c: 211: efficiency/=(float)voltage[0]/100*current[0]/10;
  7417  052A  0842               	movf	_main$1280^(0+128),w
  7418  052B  0020               	movlb	0	; select bank0
  7419  052C  00A0               	movwf	___ftdiv@f2
  7420  052D  0021               	movlb	1	; select bank1
  7421  052E  0843               	movf	(_main$1280+1)^(0+128),w
  7422  052F  0020               	movlb	0	; select bank0
  7423  0530  00A1               	movwf	___ftdiv@f2+1
  7424  0531  0021               	movlb	1	; select bank1
  7425  0532  0844               	movf	(_main$1280+2)^(0+128),w
  7426  0533  0020               	movlb	0	; select bank0
  7427  0534  00A2               	movwf	___ftdiv@f2+2
  7428  0535  0021               	movlb	1	; select bank1
  7429  0536  0857               	movf	main@efficiency^(0+128),w
  7430  0537  0020               	movlb	0	; select bank0
  7431  0538  00A3               	movwf	___ftdiv@f1
  7432  0539  0021               	movlb	1	; select bank1
  7433  053A  0858               	movf	(main@efficiency+1)^(0+128),w
  7434  053B  0020               	movlb	0	; select bank0
  7435  053C  00A4               	movwf	___ftdiv@f1+1
  7436  053D  0021               	movlb	1	; select bank1
  7437  053E  0859               	movf	(main@efficiency+2)^(0+128),w
  7438  053F  0020               	movlb	0	; select bank0
  7439  0540  00A5               	movwf	___ftdiv@f1+2
  7440  0541  318A  2279  3182   	fcall	___ftdiv
  7441  0544  0020               	movlb	0	; select bank0
  7442  0545  0820               	movf	?___ftdiv,w
  7443  0546  0021               	movlb	1	; select bank1
  7444  0547  00D7               	movwf	main@efficiency^(0+128)
  7445  0548  0020               	movlb	0	; select bank0
  7446  0549  0821               	movf	?___ftdiv+1,w
  7447  054A  0021               	movlb	1	; select bank1
  7448  054B  00D8               	movwf	(main@efficiency+1)^(0+128)
  7449  054C  0020               	movlb	0	; select bank0
  7450  054D  0822               	movf	?___ftdiv+2,w
  7451  054E  0021               	movlb	1	; select bank1
  7452  054F  00D9               	movwf	(main@efficiency+2)^(0+128)
  7453                           
  7454                           ;main.c: 212: efficiency*=100;
  7455  0550  3000               	movlw	0
  7456  0551  0020               	movlb	0	; select bank0
  7457  0552  00B0               	movwf	___ftmul@f1
  7458  0553  30C8               	movlw	200
  7459  0554  00B1               	movwf	___ftmul@f1+1
  7460  0555  3042               	movlw	66
  7461  0556  00B2               	movwf	___ftmul@f1+2
  7462  0557  0021               	movlb	1	; select bank1
  7463  0558  0857               	movf	main@efficiency^(0+128),w
  7464  0559  0020               	movlb	0	; select bank0
  7465  055A  00B3               	movwf	___ftmul@f2
  7466  055B  0021               	movlb	1	; select bank1
  7467  055C  0858               	movf	(main@efficiency+1)^(0+128),w
  7468  055D  0020               	movlb	0	; select bank0
  7469  055E  00B4               	movwf	___ftmul@f2+1
  7470  055F  0021               	movlb	1	; select bank1
  7471  0560  0859               	movf	(main@efficiency+2)^(0+128),w
  7472  0561  0020               	movlb	0	; select bank0
  7473  0562  00B5               	movwf	___ftmul@f2+2
  7474  0563  318B  23D2  3182   	fcall	___ftmul
  7475  0566  0020               	movlb	0	; select bank0
  7476  0567  0830               	movf	?___ftmul,w
  7477  0568  0021               	movlb	1	; select bank1
  7478  0569  00D7               	movwf	main@efficiency^(0+128)
  7479  056A  0020               	movlb	0	; select bank0
  7480  056B  0831               	movf	?___ftmul+1,w
  7481  056C  0021               	movlb	1	; select bank1
  7482  056D  00D8               	movwf	(main@efficiency+1)^(0+128)
  7483  056E  0020               	movlb	0	; select bank0
  7484  056F  0832               	movf	?___ftmul+2,w
  7485  0570  0021               	movlb	1	; select bank1
  7486  0571  00D9               	movwf	(main@efficiency+2)^(0+128)
  7487                           
  7488                           ;main.c: 227: { gotoXY(0,0); LCDWriteInt(faultCount,5, 0, 0);};
  7489  0572  01F5               	clrf	gotoXY@y
  7490  0573  3000               	movlw	0
  7491  0574  3193  2315  3182   	fcall	_gotoXY
  7492  0577  0021               	movlb	1	; select bank1
  7493  0578  0848               	movf	(main@faultCount+1)^(0+128),w
  7494  0579  0020               	movlb	0	; select bank0
  7495  057A  00A9               	movwf	LCDWriteInt@value+1
  7496  057B  0021               	movlb	1	; select bank1
  7497  057C  0847               	movf	main@faultCount^(0+128),w
  7498  057D  0020               	movlb	0	; select bank0
  7499  057E  00A8               	movwf	LCDWriteInt@value
  7500  057F  3005               	movlw	5
  7501  0580  00E8               	movwf	??_main
  7502  0581  0868               	movf	??_main,w
  7503  0582  00AA               	movwf	LCDWriteInt@fieldLength
  7504  0583  01AB               	clrf	LCDWriteInt@numPlaces
  7505  0584  01AC               	clrf	LCDWriteInt@sign
  7506  0585  318C  2486  3182   	fcall	_LCDWriteInt
  7507                           
  7508                           ;main.c: 228: { gotoXY(24,0); LCDWriteInt(faultNotReset,5, 0, 0);};
  7509  0588  01F5               	clrf	gotoXY@y
  7510  0589  3018               	movlw	24
  7511  058A  3193  2315  3182   	fcall	_gotoXY
  7512  058D  0021               	movlb	1	; select bank1
  7513  058E  084A               	movf	(main@faultNotReset+1)^(0+128),w
  7514  058F  0020               	movlb	0	; select bank0
  7515  0590  00A9               	movwf	LCDWriteInt@value+1
  7516  0591  0021               	movlb	1	; select bank1
  7517  0592  0849               	movf	main@faultNotReset^(0+128),w
  7518  0593  0020               	movlb	0	; select bank0
  7519  0594  00A8               	movwf	LCDWriteInt@value
  7520  0595  3005               	movlw	5
  7521  0596  00E8               	movwf	??_main
  7522  0597  0868               	movf	??_main,w
  7523  0598  00AA               	movwf	LCDWriteInt@fieldLength
  7524  0599  01AB               	clrf	LCDWriteInt@numPlaces
  7525  059A  01AC               	clrf	LCDWriteInt@sign
  7526  059B  318C  2486  3182   	fcall	_LCDWriteInt
  7527                           
  7528                           ;main.c: 229: { gotoXY(48,0); LCDWriteInt(VHoldMode,3, 0, 0);};
  7529  059E  01F5               	clrf	gotoXY@y
  7530  059F  3030               	movlw	48
  7531  05A0  3193  2315  3182   	fcall	_gotoXY
  7532  05A3  0020               	movlb	0	; select bank0
  7533  05A4  086D               	movf	_VHoldMode,w
  7534  05A5  00A8               	movwf	LCDWriteInt@value
  7535  05A6  01A9               	clrf	LCDWriteInt@value+1
  7536  05A7  1BA8               	btfsc	LCDWriteInt@value,7
  7537  05A8  03A9               	decf	LCDWriteInt@value+1,f
  7538  05A9  3003               	movlw	3
  7539  05AA  00E8               	movwf	??_main
  7540  05AB  0868               	movf	??_main,w
  7541  05AC  00AA               	movwf	LCDWriteInt@fieldLength
  7542  05AD  01AB               	clrf	LCDWriteInt@numPlaces
  7543  05AE  01AC               	clrf	LCDWriteInt@sign
  7544  05AF  318C  2486  3182   	fcall	_LCDWriteInt
  7545                           
  7546                           ;main.c: 232: LCDWriteCharacter(' ');
  7547  05B2  3020               	movlw	32
  7548  05B3  3196  2662  3182   	fcall	_LCDWriteCharacter
  7549                           
  7550                           ;main.c: 236: { gotoXY(0,1); LCDWriteInt(voltage[0],4, 2, 0);};
  7551  05B6  01F5               	clrf	gotoXY@y
  7552  05B7  0AF5               	incf	gotoXY@y,f
  7553  05B8  3000               	movlw	0
  7554  05B9  3193  2315  3182   	fcall	_gotoXY
  7555  05BC  0021               	movlb	1	; select bank1
  7556  05BD  0829               	movf	(_voltage+1)^(0+128),w
  7557  05BE  0020               	movlb	0	; select bank0
  7558  05BF  00A9               	movwf	LCDWriteInt@value+1
  7559  05C0  0021               	movlb	1	; select bank1
  7560  05C1  0828               	movf	_voltage^(0+128),w
  7561  05C2  0020               	movlb	0	; select bank0
  7562  05C3  00A8               	movwf	LCDWriteInt@value
  7563  05C4  3004               	movlw	4
  7564  05C5  00E8               	movwf	??_main
  7565  05C6  0868               	movf	??_main,w
  7566  05C7  00AA               	movwf	LCDWriteInt@fieldLength
  7567  05C8  3002               	movlw	2
  7568  05C9  00E9               	movwf	??_main+1
  7569  05CA  0869               	movf	??_main+1,w
  7570  05CB  00AB               	movwf	LCDWriteInt@numPlaces
  7571  05CC  01AC               	clrf	LCDWriteInt@sign
  7572  05CD  318C  2486  3182   	fcall	_LCDWriteInt
  7573                           
  7574                           ;main.c: 237: LCDWriteCharacter('V');
  7575  05D0  3056               	movlw	86
  7576  05D1  3196  2662  3182   	fcall	_LCDWriteCharacter
  7577                           
  7578                           ;main.c: 238: { gotoXY(28,1); LCDWriteInt(current[0],3, 1, 0);};
  7579  05D4  01F5               	clrf	gotoXY@y
  7580  05D5  0AF5               	incf	gotoXY@y,f
  7581  05D6  301C               	movlw	28
  7582  05D7  3193  2315  3182   	fcall	_gotoXY
  7583  05DA  0021               	movlb	1	; select bank1
  7584  05DB  0821               	movf	(_current+1)^(0+128),w
  7585  05DC  0020               	movlb	0	; select bank0
  7586  05DD  00A9               	movwf	LCDWriteInt@value+1
  7587  05DE  0021               	movlb	1	; select bank1
  7588  05DF  0820               	movf	_current^(0+128),w
  7589  05E0  0020               	movlb	0	; select bank0
  7590  05E1  00A8               	movwf	LCDWriteInt@value
  7591  05E2  3003               	movlw	3
  7592  05E3  00E8               	movwf	??_main
  7593  05E4  0868               	movf	??_main,w
  7594  05E5  00AA               	movwf	LCDWriteInt@fieldLength
  7595  05E6  01AB               	clrf	LCDWriteInt@numPlaces
  7596  05E7  0AAB               	incf	LCDWriteInt@numPlaces,f
  7597  05E8  01AC               	clrf	LCDWriteInt@sign
  7598  05E9  318C  2486  3182   	fcall	_LCDWriteInt
  7599                           
  7600                           ;main.c: 239: LCDWriteCharacter('A');
  7601  05EC  3041               	movlw	65
  7602  05ED  3196  2662  3182   	fcall	_LCDWriteCharacter
  7603                           
  7604                           ;main.c: 241: { gotoXY(0,2); LCDWriteInt(voltage[1],4, 2, 0);};
  7605  05F0  3002               	movlw	2
  7606  05F1  0020               	movlb	0	; select bank0
  7607  05F2  00E8               	movwf	??_main
  7608  05F3  0868               	movf	??_main,w
  7609  05F4  00F5               	movwf	gotoXY@y
  7610  05F5  3000               	movlw	0
  7611  05F6  3193  2315  3182   	fcall	_gotoXY
  7612  05F9  0021               	movlb	1	; select bank1
  7613  05FA  082B               	movf	((_voltage+1)^(0+128)+2),w
  7614  05FB  0020               	movlb	0	; select bank0
  7615  05FC  00A9               	movwf	LCDWriteInt@value+1
  7616  05FD  0021               	movlb	1	; select bank1
  7617  05FE  082A               	movf	(_voltage^(0+128)+2),w
  7618  05FF  0020               	movlb	0	; select bank0
  7619  0600  00A8               	movwf	LCDWriteInt@value
  7620  0601  3004               	movlw	4
  7621  0602  00E8               	movwf	??_main
  7622  0603  0868               	movf	??_main,w
  7623  0604  00AA               	movwf	LCDWriteInt@fieldLength
  7624  0605  3002               	movlw	2
  7625  0606  00E9               	movwf	??_main+1
  7626  0607  0869               	movf	??_main+1,w
  7627  0608  00AB               	movwf	LCDWriteInt@numPlaces
  7628  0609  01AC               	clrf	LCDWriteInt@sign
  7629  060A  318C  2486  3182   	fcall	_LCDWriteInt
  7630                           
  7631                           ;main.c: 242: LCDWriteCharacter('V');
  7632  060D  3056               	movlw	86
  7633  060E  3196  2662  3182   	fcall	_LCDWriteCharacter
  7634                           
  7635                           ;main.c: 243: { gotoXY(28,2); LCDWriteInt(current[1],3, 1, 0);};
  7636  0611  3002               	movlw	2
  7637  0612  0020               	movlb	0	; select bank0
  7638  0613  00E8               	movwf	??_main
  7639  0614  0868               	movf	??_main,w
  7640  0615  00F5               	movwf	gotoXY@y
  7641  0616  301C               	movlw	28
  7642  0617  3193  2315  3182   	fcall	_gotoXY
  7643  061A  0021               	movlb	1	; select bank1
  7644  061B  0823               	movf	((_current+1)^(0+128)+2),w
  7645  061C  0020               	movlb	0	; select bank0
  7646  061D  00A9               	movwf	LCDWriteInt@value+1
  7647  061E  0021               	movlb	1	; select bank1
  7648  061F  0822               	movf	(_current^(0+128)+2),w
  7649  0620  0020               	movlb	0	; select bank0
  7650  0621  00A8               	movwf	LCDWriteInt@value
  7651  0622  3003               	movlw	3
  7652  0623  00E8               	movwf	??_main
  7653  0624  0868               	movf	??_main,w
  7654  0625  00AA               	movwf	LCDWriteInt@fieldLength
  7655  0626  01AB               	clrf	LCDWriteInt@numPlaces
  7656  0627  0AAB               	incf	LCDWriteInt@numPlaces,f
  7657  0628  01AC               	clrf	LCDWriteInt@sign
  7658  0629  318C  2486  3182   	fcall	_LCDWriteInt
  7659                           
  7660                           ;main.c: 244: LCDWriteCharacter('A');
  7661  062C  3041               	movlw	65
  7662  062D  3196  2662  3182   	fcall	_LCDWriteCharacter
  7663                           
  7664                           ;main.c: 245: { gotoXY(56,2); LCDWriteInt(Vref,4, 2, 0);};
  7665  0630  3002               	movlw	2
  7666  0631  0020               	movlb	0	; select bank0
  7667  0632  00E8               	movwf	??_main
  7668  0633  0868               	movf	??_main,w
  7669  0634  00F5               	movwf	gotoXY@y
  7670  0635  3038               	movlw	56
  7671  0636  3193  2315  3182   	fcall	_gotoXY
  7672  0639  0021               	movlb	1	; select bank1
  7673  063A  0865               	movf	(_Vref+1)^(0+128),w
  7674  063B  0020               	movlb	0	; select bank0
  7675  063C  00A9               	movwf	LCDWriteInt@value+1
  7676  063D  0021               	movlb	1	; select bank1
  7677  063E  0864               	movf	_Vref^(0+128),w
  7678  063F  0020               	movlb	0	; select bank0
  7679  0640  00A8               	movwf	LCDWriteInt@value
  7680  0641  3004               	movlw	4
  7681  0642  00E8               	movwf	??_main
  7682  0643  0868               	movf	??_main,w
  7683  0644  00AA               	movwf	LCDWriteInt@fieldLength
  7684  0645  3002               	movlw	2
  7685  0646  00E9               	movwf	??_main+1
  7686  0647  0869               	movf	??_main+1,w
  7687  0648  00AB               	movwf	LCDWriteInt@numPlaces
  7688  0649  01AC               	clrf	LCDWriteInt@sign
  7689  064A  318C  2486  3182   	fcall	_LCDWriteInt
  7690                           
  7691                           ;main.c: 246: LCDWriteCharacter('V');
  7692  064D  3056               	movlw	86
  7693  064E  3196  2662  3182   	fcall	_LCDWriteCharacter
  7694                           
  7695                           ;main.c: 248: { gotoXY(0,3); LCDWriteInt(voltage[0]/100*current[0]/10,3, 0, 0);};
  7696  0651  3003               	movlw	3
  7697  0652  0020               	movlb	0	; select bank0
  7698  0653  00E8               	movwf	??_main
  7699  0654  0868               	movf	??_main,w
  7700  0655  00F5               	movwf	gotoXY@y
  7701  0656  3000               	movlw	0
  7702  0657  3193  2315  3182   	fcall	_gotoXY
  7703  065A  3064               	movlw	100
  7704  065B  00F0               	movwf	___awdiv@divisor
  7705  065C  3000               	movlw	0
  7706  065D  00F1               	movwf	___awdiv@divisor+1
  7707  065E  0021               	movlb	1	; select bank1
  7708  065F  0829               	movf	(_voltage+1)^(0+128),w
  7709  0660  00F3               	movwf	___awdiv@dividend+1
  7710  0661  0828               	movf	_voltage^(0+128),w
  7711  0662  00F2               	movwf	___awdiv@dividend
  7712  0663  3196  2611  3182   	fcall	___awdiv
  7713  0666  0871               	movf	?___awdiv+1,w
  7714  0667  00FA               	movwf	___wmul@multiplier+1
  7715  0668  0870               	movf	?___awdiv,w
  7716  0669  00F9               	movwf	___wmul@multiplier
  7717  066A  0021               	movlb	1	; select bank1
  7718  066B  0821               	movf	(_current+1)^(0+128),w
  7719  066C  00FC               	movwf	___wmul@multiplicand+1
  7720  066D  0820               	movf	_current^(0+128),w
  7721  066E  00FB               	movwf	___wmul@multiplicand
  7722  066F  3193  237F  3182   	fcall	___wmul
  7723  0672  087A               	movf	?___wmul+1,w
  7724  0673  0021               	movlb	1	; select bank1
  7725  0674  00D4               	movwf	(_main$1281+1)^(0+128)
  7726  0675  0879               	movf	?___wmul,w
  7727  0676  00D3               	movwf	_main$1281^(0+128)
  7728  0677  300A               	movlw	10
  7729  0678  00F0               	movwf	___awdiv@divisor
  7730  0679  3000               	movlw	0
  7731  067A  00F1               	movwf	___awdiv@divisor+1
  7732  067B  0854               	movf	(_main$1281+1)^(0+128),w
  7733  067C  00F3               	movwf	___awdiv@dividend+1
  7734  067D  0853               	movf	_main$1281^(0+128),w
  7735  067E  00F2               	movwf	___awdiv@dividend
  7736  067F  3196  2611  3182   	fcall	___awdiv
  7737  0682  0871               	movf	?___awdiv+1,w
  7738  0683  0021               	movlb	1	; select bank1
  7739  0684  00D6               	movwf	(_main$1282+1)^(0+128)
  7740  0685  0870               	movf	?___awdiv,w
  7741  0686  00D5               	movwf	_main$1282^(0+128)
  7742  0687  0856               	movf	(_main$1282+1)^(0+128),w
  7743  0688  0020               	movlb	0	; select bank0
  7744  0689  00A9               	movwf	LCDWriteInt@value+1
  7745  068A  0021               	movlb	1	; select bank1
  7746  068B  0855               	movf	_main$1282^(0+128),w
  7747  068C  0020               	movlb	0	; select bank0
  7748  068D  00A8               	movwf	LCDWriteInt@value
  7749  068E  3003               	movlw	3
  7750  068F  00E8               	movwf	??_main
  7751  0690  0868               	movf	??_main,w
  7752  0691  00AA               	movwf	LCDWriteInt@fieldLength
  7753  0692  01AB               	clrf	LCDWriteInt@numPlaces
  7754  0693  01AC               	clrf	LCDWriteInt@sign
  7755  0694  318C  2486  3182   	fcall	_LCDWriteInt
  7756                           
  7757                           ;main.c: 249: LCDWriteCharacter('W');
  7758  0697  3057               	movlw	87
  7759  0698  3196  2662  3182   	fcall	_LCDWriteCharacter
  7760                           
  7761                           ;main.c: 250: { gotoXY(28,3); LCDWriteInt(battery_state,1, 0, 0);};
  7762  069B  3003               	movlw	3
  7763  069C  0020               	movlb	0	; select bank0
  7764  069D  00E8               	movwf	??_main
  7765  069E  0868               	movf	??_main,w
  7766  069F  00F5               	movwf	gotoXY@y
  7767  06A0  301C               	movlw	28
  7768  06A1  3193  2315  3182   	fcall	_gotoXY
  7769  06A4  0021               	movlb	1	; select bank1
  7770  06A5  086C               	movf	_battery_state^(0+128),w
  7771  06A6  0020               	movlb	0	; select bank0
  7772  06A7  00E8               	movwf	??_main
  7773  06A8  01E9               	clrf	??_main+1
  7774  06A9  0868               	movf	??_main,w
  7775  06AA  00A8               	movwf	LCDWriteInt@value
  7776  06AB  0869               	movf	??_main+1,w
  7777  06AC  00A9               	movwf	LCDWriteInt@value+1
  7778  06AD  01AA               	clrf	LCDWriteInt@fieldLength
  7779  06AE  0AAA               	incf	LCDWriteInt@fieldLength,f
  7780  06AF  01AB               	clrf	LCDWriteInt@numPlaces
  7781  06B0  01AC               	clrf	LCDWriteInt@sign
  7782  06B1  318C  2486  3182   	fcall	_LCDWriteInt
  7783                           
  7784                           ;main.c: 251: { gotoXY(36,3); LCDWriteInt(Imode0,1, 0, 0);};
  7785  06B4  3003               	movlw	3
  7786  06B5  0020               	movlb	0	; select bank0
  7787  06B6  00E8               	movwf	??_main
  7788  06B7  0868               	movf	??_main,w
  7789  06B8  00F5               	movwf	gotoXY@y
  7790  06B9  3024               	movlw	36
  7791  06BA  3193  2315  3182   	fcall	_gotoXY
  7792  06BD  0020               	movlb	0	; select bank0
  7793  06BE  086E               	movf	_Imode0,w
  7794  06BF  00A8               	movwf	LCDWriteInt@value
  7795  06C0  01A9               	clrf	LCDWriteInt@value+1
  7796  06C1  1BA8               	btfsc	LCDWriteInt@value,7
  7797  06C2  03A9               	decf	LCDWriteInt@value+1,f
  7798  06C3  01AA               	clrf	LCDWriteInt@fieldLength
  7799  06C4  0AAA               	incf	LCDWriteInt@fieldLength,f
  7800  06C5  01AB               	clrf	LCDWriteInt@numPlaces
  7801  06C6  01AC               	clrf	LCDWriteInt@sign
  7802  06C7  318C  2486  3182   	fcall	_LCDWriteInt
  7803                           
  7804                           ;main.c: 252: { gotoXY(48,3); LCDWriteInt(Iref,3, 1, 0);};
  7805  06CA  3003               	movlw	3
  7806  06CB  0020               	movlb	0	; select bank0
  7807  06CC  00E8               	movwf	??_main
  7808  06CD  0868               	movf	??_main,w
  7809  06CE  00F5               	movwf	gotoXY@y
  7810  06CF  3030               	movlw	48
  7811  06D0  3193  2315  3182   	fcall	_gotoXY
  7812  06D3  0021               	movlb	1	; select bank1
  7813  06D4  0867               	movf	(_Iref+1)^(0+128),w
  7814  06D5  0020               	movlb	0	; select bank0
  7815  06D6  00A9               	movwf	LCDWriteInt@value+1
  7816  06D7  0021               	movlb	1	; select bank1
  7817  06D8  0866               	movf	_Iref^(0+128),w
  7818  06D9  0020               	movlb	0	; select bank0
  7819  06DA  00A8               	movwf	LCDWriteInt@value
  7820  06DB  3003               	movlw	3
  7821  06DC  00E8               	movwf	??_main
  7822  06DD  0868               	movf	??_main,w
  7823  06DE  00AA               	movwf	LCDWriteInt@fieldLength
  7824  06DF  01AB               	clrf	LCDWriteInt@numPlaces
  7825  06E0  0AAB               	incf	LCDWriteInt@numPlaces,f
  7826  06E1  01AC               	clrf	LCDWriteInt@sign
  7827  06E2  318C  2486  3182   	fcall	_LCDWriteInt
  7828                           
  7829                           ;main.c: 253: LCDWriteCharacter('A');
  7830  06E5  3041               	movlw	65
  7831  06E6  3196  2662  3182   	fcall	_LCDWriteCharacter
  7832                           
  7833                           ;main.c: 255: { gotoXY(0,4); LCDWriteInt(voltage[1]/100*current[1]/10,3, 0, 0);};
  7834  06E9  3004               	movlw	4
  7835  06EA  0020               	movlb	0	; select bank0
  7836  06EB  00E8               	movwf	??_main
  7837  06EC  0868               	movf	??_main,w
  7838  06ED  00F5               	movwf	gotoXY@y
  7839  06EE  3000               	movlw	0
  7840  06EF  3193  2315  3182   	fcall	_gotoXY
  7841  06F2  3064               	movlw	100
  7842  06F3  00F0               	movwf	___awdiv@divisor
  7843  06F4  3000               	movlw	0
  7844  06F5  00F1               	movwf	___awdiv@divisor+1
  7845  06F6  0021               	movlb	1	; select bank1
  7846  06F7  082B               	movf	((_voltage+1)^(0+128)+2),w
  7847  06F8  00F3               	movwf	___awdiv@dividend+1
  7848  06F9  082A               	movf	(_voltage^(0+128)+2),w
  7849  06FA  00F2               	movwf	___awdiv@dividend
  7850  06FB  3196  2611  3182   	fcall	___awdiv
  7851  06FE  0871               	movf	?___awdiv+1,w
  7852  06FF  00FA               	movwf	___wmul@multiplier+1
  7853  0700  0870               	movf	?___awdiv,w
  7854  0701  00F9               	movwf	___wmul@multiplier
  7855  0702  0021               	movlb	1	; select bank1
  7856  0703  0823               	movf	((_current+1)^(0+128)+2),w
  7857  0704  00FC               	movwf	___wmul@multiplicand+1
  7858  0705  0822               	movf	(_current^(0+128)+2),w
  7859  0706  00FB               	movwf	___wmul@multiplicand
  7860  0707  3193  237F  3182   	fcall	___wmul
  7861  070A  087A               	movf	?___wmul+1,w
  7862  070B  0021               	movlb	1	; select bank1
  7863  070C  00D4               	movwf	(_main$1281+1)^(0+128)
  7864  070D  0879               	movf	?___wmul,w
  7865  070E  00D3               	movwf	_main$1281^(0+128)
  7866  070F  300A               	movlw	10
  7867  0710  00F0               	movwf	___awdiv@divisor
  7868  0711  3000               	movlw	0
  7869  0712  00F1               	movwf	___awdiv@divisor+1
  7870  0713  0854               	movf	(_main$1281+1)^(0+128),w
  7871  0714  00F3               	movwf	___awdiv@dividend+1
  7872  0715  0853               	movf	_main$1281^(0+128),w
  7873  0716  00F2               	movwf	___awdiv@dividend
  7874  0717  3196  2611  3182   	fcall	___awdiv
  7875  071A  0871               	movf	?___awdiv+1,w
  7876  071B  0021               	movlb	1	; select bank1
  7877  071C  00D6               	movwf	(_main$1282+1)^(0+128)
  7878  071D  0870               	movf	?___awdiv,w
  7879  071E  00D5               	movwf	_main$1282^(0+128)
  7880  071F  0856               	movf	(_main$1282+1)^(0+128),w
  7881  0720  0020               	movlb	0	; select bank0
  7882  0721  00A9               	movwf	LCDWriteInt@value+1
  7883  0722  0021               	movlb	1	; select bank1
  7884  0723  0855               	movf	_main$1282^(0+128),w
  7885  0724  0020               	movlb	0	; select bank0
  7886  0725  00A8               	movwf	LCDWriteInt@value
  7887  0726  3003               	movlw	3
  7888  0727  00E8               	movwf	??_main
  7889  0728  0868               	movf	??_main,w
  7890  0729  00AA               	movwf	LCDWriteInt@fieldLength
  7891  072A  01AB               	clrf	LCDWriteInt@numPlaces
  7892  072B  01AC               	clrf	LCDWriteInt@sign
  7893  072C  318C  2486  3182   	fcall	_LCDWriteInt
  7894                           
  7895                           ;main.c: 256: LCDWriteCharacter('W');
  7896  072F  3057               	movlw	87
  7897  0730  3196  2662  3182   	fcall	_LCDWriteCharacter
  7898                           
  7899                           ;main.c: 259: { gotoXY(48,4); LCDWriteInt(MPPT0,4, 0, 0);};
  7900  0733  3004               	movlw	4
  7901  0734  0020               	movlb	0	; select bank0
  7902  0735  00E8               	movwf	??_main
  7903  0736  0868               	movf	??_main,w
  7904  0737  00F5               	movwf	gotoXY@y
  7905  0738  3030               	movlw	48
  7906  0739  3193  2315  3182   	fcall	_gotoXY
  7907  073C  0021               	movlb	1	; select bank1
  7908  073D  0860               	movf	(main@MPPT0+1)^(0+128),w
  7909  073E  0020               	movlb	0	; select bank0
  7910  073F  00A9               	movwf	LCDWriteInt@value+1
  7911  0740  0021               	movlb	1	; select bank1
  7912  0741  085F               	movf	main@MPPT0^(0+128),w
  7913  0742  0020               	movlb	0	; select bank0
  7914  0743  00A8               	movwf	LCDWriteInt@value
  7915  0744  3004               	movlw	4
  7916  0745  00E8               	movwf	??_main
  7917  0746  0868               	movf	??_main,w
  7918  0747  00AA               	movwf	LCDWriteInt@fieldLength
  7919  0748  01AB               	clrf	LCDWriteInt@numPlaces
  7920  0749  01AC               	clrf	LCDWriteInt@sign
  7921  074A  318C  2486  3182   	fcall	_LCDWriteInt
  7922                           
  7923                           ;main.c: 267: { gotoXY(0,5); LCDWriteInt(dutyCycle6,4, 0, 0);};
  7924  074D  3005               	movlw	5
  7925  074E  0020               	movlb	0	; select bank0
  7926  074F  00E8               	movwf	??_main
  7927  0750  0868               	movf	??_main,w
  7928  0751  00F5               	movwf	gotoXY@y
  7929  0752  3000               	movlw	0
  7930  0753  3193  2315  3182   	fcall	_gotoXY
  7931  0756  0021               	movlb	1	; select bank1
  7932  0757  0863               	movf	(main@dutyCycle6+1)^(0+128),w
  7933  0758  0020               	movlb	0	; select bank0
  7934  0759  00A9               	movwf	LCDWriteInt@value+1
  7935  075A  0021               	movlb	1	; select bank1
  7936  075B  0862               	movf	main@dutyCycle6^(0+128),w
  7937  075C  0020               	movlb	0	; select bank0
  7938  075D  00A8               	movwf	LCDWriteInt@value
  7939  075E  3004               	movlw	4
  7940  075F  00E8               	movwf	??_main
  7941  0760  0868               	movf	??_main,w
  7942  0761  00AA               	movwf	LCDWriteInt@fieldLength
  7943  0762  01AB               	clrf	LCDWriteInt@numPlaces
  7944  0763  01AC               	clrf	LCDWriteInt@sign
  7945  0764  318C  2486  3182   	fcall	_LCDWriteInt
  7946                           
  7947                           ;main.c: 268: { gotoXY(24,5); LCDWriteInt(dutyCycle7,4, 0, 0);};
  7948  0767  3005               	movlw	5
  7949  0768  0020               	movlb	0	; select bank0
  7950  0769  00E8               	movwf	??_main
  7951  076A  0868               	movf	??_main,w
  7952  076B  00F5               	movwf	gotoXY@y
  7953  076C  3018               	movlw	24
  7954  076D  3193  2315  3182   	fcall	_gotoXY
  7955  0770  0021               	movlb	1	; select bank1
  7956  0771  085C               	movf	(main@dutyCycle7+1)^(0+128),w
  7957  0772  0020               	movlb	0	; select bank0
  7958  0773  00A9               	movwf	LCDWriteInt@value+1
  7959  0774  0021               	movlb	1	; select bank1
  7960  0775  085B               	movf	main@dutyCycle7^(0+128),w
  7961  0776  0020               	movlb	0	; select bank0
  7962  0777  00A8               	movwf	LCDWriteInt@value
  7963  0778  3004               	movlw	4
  7964  0779  00E8               	movwf	??_main
  7965  077A  0868               	movf	??_main,w
  7966  077B  00AA               	movwf	LCDWriteInt@fieldLength
  7967  077C  01AB               	clrf	LCDWriteInt@numPlaces
  7968  077D  01AC               	clrf	LCDWriteInt@sign
  7969  077E  318C  2486  3182   	fcall	_LCDWriteInt
  7970                           
  7971                           ;main.c: 269: { gotoXY(48,5); LCDWriteInt(dutyCycle1,4, 0, 0);};
  7972  0781  3005               	movlw	5
  7973  0782  0020               	movlb	0	; select bank0
  7974  0783  00E8               	movwf	??_main
  7975  0784  0868               	movf	??_main,w
  7976  0785  00F5               	movwf	gotoXY@y
  7977  0786  3030               	movlw	48
  7978  0787  3193  2315  3182   	fcall	_gotoXY
  7979  078A  0021               	movlb	1	; select bank1
  7980  078B  085E               	movf	(main@dutyCycle1+1)^(0+128),w
  7981  078C  0020               	movlb	0	; select bank0
  7982  078D  00A9               	movwf	LCDWriteInt@value+1
  7983  078E  0021               	movlb	1	; select bank1
  7984  078F  085D               	movf	main@dutyCycle1^(0+128),w
  7985  0790  0020               	movlb	0	; select bank0
  7986  0791  00A8               	movwf	LCDWriteInt@value
  7987  0792  3004               	movlw	4
  7988  0793  00E8               	movwf	??_main
  7989  0794  0868               	movf	??_main,w
  7990  0795  00AA               	movwf	LCDWriteInt@fieldLength
  7991  0796  01AB               	clrf	LCDWriteInt@numPlaces
  7992  0797  01AC               	clrf	LCDWriteInt@sign
  7993  0798  318C  2486  3182   	fcall	_LCDWriteInt
  7994                           
  7995                           ;main.c: 270: { gotoXY(74,5); LCDWriteInt(!(RB2),1, 0, 0);};
  7996  079B  3005               	movlw	5
  7997  079C  0020               	movlb	0	; select bank0
  7998  079D  00E8               	movwf	??_main
  7999  079E  0868               	movf	??_main,w
  8000  079F  00F5               	movwf	gotoXY@y
  8001  07A0  304A               	movlw	74
  8002  07A1  3193  2315  3182   	fcall	_gotoXY
  8003  07A4  1003               	clrc
  8004  07A5  0020               	movlb	0	; select bank0
  8005  07A6  1D0D               	btfss	13,2	;volatile
  8006  07A7  1403               	setc
  8007  07A8  3000               	movlw	0
  8008  07A9  3D09               	addwfc	9,w
  8009  07AA  00E8               	movwf	??_main
  8010  07AB  01E9               	clrf	??_main+1
  8011  07AC  0868               	movf	??_main,w
  8012  07AD  00A8               	movwf	LCDWriteInt@value
  8013  07AE  0869               	movf	??_main+1,w
  8014  07AF  00A9               	movwf	LCDWriteInt@value+1
  8015  07B0  01AA               	clrf	LCDWriteInt@fieldLength
  8016  07B1  0AAA               	incf	LCDWriteInt@fieldLength,f
  8017  07B2  01AB               	clrf	LCDWriteInt@numPlaces
  8018  07B3  01AC               	clrf	LCDWriteInt@sign
  8019  07B4  318C  2486  3182   	fcall	_LCDWriteInt
  8020                           
  8021                           ;main.c: 272: if(battery_state > FINISHED)
  8022  07B7  3003               	movlw	3
  8023  07B8  0021               	movlb	1	; select bank1
  8024  07B9  026C               	subwf	_battery_state^(0+128),w
  8025  07BA  1C03               	skipc
  8026  07BB  2FBF               	goto	l3295
  8027                           
  8028                           ;main.c: 273: {
  8029                           ;main.c: 274: cc_cv_mode();
  8030  07BC  318D  253F  3182   	fcall	_cc_cv_mode
  8031  07BF                     l3295:	
  8032                           
  8033                           ;main.c: 275: }
  8034                           ;main.c: 276: slowLoop=0;
  8035  07BF  0021               	movlb	1	; select bank1
  8036  07C0  01CC               	clrf	main@slowLoop^(0+128)
  8037  07C1  2AB8               	goto	l3063
  8038  07C2                     __end_of_main:	
  8039                           
  8040                           	psect	text1
  8041  0E23                     __ptext1:	
  8042 ;; *************** function _tempCalc *****************
  8043 ;; Defined at:
  8044 ;;		line 4 in file "tempCalc.c"
  8045 ;; Parameters:    Size  Location     Type
  8046 ;;  analogValue     2   61[BANK0 ] int 
  8047 ;; Auto vars:     Size  Location     Type
  8048 ;;  steinhart       3   69[BANK0 ] float 
  8049 ;;  R               3   63[BANK0 ] float 
  8050 ;; Return value:  Size  Location     Type
  8051 ;;                  2   61[BANK0 ] int 
  8052 ;; Registers used:
  8053 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8054 ;; Tracked objects:
  8055 ;;		On entry : 0/0
  8056 ;;		On exit  : 0/0
  8057 ;;		Unchanged: 0/0
  8058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8059 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8060 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8062 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8063 ;;Total ram usage:       11 bytes
  8064 ;; Hardware stack levels used:    1
  8065 ;; Hardware stack levels required when called:    4
  8066 ;; This function calls:
  8067 ;;		___awtoft
  8068 ;;		___ftadd
  8069 ;;		___ftdiv
  8070 ;;		___ftmul
  8071 ;;		___ftsub
  8072 ;;		___fttol
  8073 ;;		_log
  8074 ;; This function is called by:
  8075 ;;		_main
  8076 ;; This function uses a non-reentrant model
  8077 ;;
  8078                           
  8079                           
  8080                           ;psect for function _tempCalc
  8081  0E23                     _tempCalc:	
  8082                           
  8083                           ;tempCalc.c: 6: float R, steinhart;
  8084                           ;tempCalc.c: 8: R = 9890/(1023/(float)analogValue - 1);
  8085                           
  8086                           ;incstack = 0
  8087                           ; Regs used in _tempCalc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8088  0E23  3000               	movlw	0
  8089  0E24  0020               	movlb	0	; select bank0
  8090  0E25  00C0               	movwf	___ftadd@f1
  8091  0E26  3080               	movlw	128
  8092  0E27  00C1               	movwf	___ftadd@f1+1
  8093  0E28  30BF               	movlw	191
  8094  0E29  00C2               	movwf	___ftadd@f1+2
  8095  0E2A  085E               	movf	tempCalc@analogValue+1,w
  8096  0E2B  00F9               	movwf	___awtoft@c+1
  8097  0E2C  085D               	movf	tempCalc@analogValue,w
  8098  0E2D  00F8               	movwf	___awtoft@c
  8099  0E2E  3193  23F9  318E   	fcall	___awtoft
  8100  0E31  0878               	movf	?___awtoft,w
  8101  0E32  0020               	movlb	0	; select bank0
  8102  0E33  00A0               	movwf	___ftdiv@f2
  8103  0E34  0879               	movf	?___awtoft+1,w
  8104  0E35  00A1               	movwf	___ftdiv@f2+1
  8105  0E36  087A               	movf	?___awtoft+2,w
  8106  0E37  00A2               	movwf	___ftdiv@f2+2
  8107  0E38  30C0               	movlw	192
  8108  0E39  00A3               	movwf	___ftdiv@f1
  8109  0E3A  307F               	movlw	127
  8110  0E3B  00A4               	movwf	___ftdiv@f1+1
  8111  0E3C  3044               	movlw	68
  8112  0E3D  00A5               	movwf	___ftdiv@f1+2
  8113  0E3E  318A  2279  318E   	fcall	___ftdiv
  8114  0E41  0020               	movlb	0	; select bank0
  8115  0E42  0820               	movf	?___ftdiv,w
  8116  0E43  00C3               	movwf	___ftadd@f2
  8117  0E44  0821               	movf	?___ftdiv+1,w
  8118  0E45  00C4               	movwf	___ftadd@f2+1
  8119  0E46  0822               	movf	?___ftdiv+2,w
  8120  0E47  00C5               	movwf	___ftadd@f2+2
  8121  0E48  318F  270A  318E   	fcall	___ftadd
  8122  0E4B  0020               	movlb	0	; select bank0
  8123  0E4C  0840               	movf	?___ftadd,w
  8124  0E4D  00E2               	movwf	_tempCalc$1278
  8125  0E4E  0841               	movf	?___ftadd+1,w
  8126  0E4F  00E3               	movwf	_tempCalc$1278+1
  8127  0E50  0842               	movf	?___ftadd+2,w
  8128  0E51  00E4               	movwf	_tempCalc$1278+2
  8129                           
  8130                           ;tempCalc.c: 6: float R, steinhart;
  8131                           ;tempCalc.c: 8: R = 9890/(1023/(float)analogValue - 1);
  8132  0E52  0862               	movf	_tempCalc$1278,w
  8133  0E53  00A0               	movwf	___ftdiv@f2
  8134  0E54  0863               	movf	_tempCalc$1278+1,w
  8135  0E55  00A1               	movwf	___ftdiv@f2+1
  8136  0E56  0864               	movf	_tempCalc$1278+2,w
  8137  0E57  00A2               	movwf	___ftdiv@f2+2
  8138  0E58  3088               	movlw	136
  8139  0E59  00A3               	movwf	___ftdiv@f1
  8140  0E5A  301A               	movlw	26
  8141  0E5B  00A4               	movwf	___ftdiv@f1+1
  8142  0E5C  3046               	movlw	70
  8143  0E5D  00A5               	movwf	___ftdiv@f1+2
  8144  0E5E  318A  2279  318E   	fcall	___ftdiv
  8145  0E61  0020               	movlb	0	; select bank0
  8146  0E62  0820               	movf	?___ftdiv,w
  8147  0E63  00DF               	movwf	tempCalc@R
  8148  0E64  0821               	movf	?___ftdiv+1,w
  8149  0E65  00E0               	movwf	tempCalc@R+1
  8150  0E66  0822               	movf	?___ftdiv+2,w
  8151  0E67  00E1               	movwf	tempCalc@R+2
  8152                           
  8153                           ;tempCalc.c: 10: steinhart = R /9990;
  8154  0E68  3018               	movlw	24
  8155  0E69  00A0               	movwf	___ftdiv@f2
  8156  0E6A  301C               	movlw	28
  8157  0E6B  00A1               	movwf	___ftdiv@f2+1
  8158  0E6C  3046               	movlw	70
  8159  0E6D  00A2               	movwf	___ftdiv@f2+2
  8160  0E6E  085F               	movf	tempCalc@R,w
  8161  0E6F  00A3               	movwf	___ftdiv@f1
  8162  0E70  0860               	movf	tempCalc@R+1,w
  8163  0E71  00A4               	movwf	___ftdiv@f1+1
  8164  0E72  0861               	movf	tempCalc@R+2,w
  8165  0E73  00A5               	movwf	___ftdiv@f1+2
  8166  0E74  318A  2279  318E   	fcall	___ftdiv
  8167  0E77  0020               	movlb	0	; select bank0
  8168  0E78  0820               	movf	?___ftdiv,w
  8169  0E79  00E5               	movwf	tempCalc@steinhart
  8170  0E7A  0821               	movf	?___ftdiv+1,w
  8171  0E7B  00E6               	movwf	tempCalc@steinhart+1
  8172  0E7C  0822               	movf	?___ftdiv+2,w
  8173  0E7D  00E7               	movwf	tempCalc@steinhart+2
  8174                           
  8175                           ;tempCalc.c: 11: steinhart = log(steinhart);
  8176  0E7E  0865               	movf	tempCalc@steinhart,w
  8177  0E7F  00D7               	movwf	log@x
  8178  0E80  0866               	movf	tempCalc@steinhart+1,w
  8179  0E81  00D8               	movwf	log@x+1
  8180  0E82  0867               	movf	tempCalc@steinhart+2,w
  8181  0E83  00D9               	movwf	log@x+2
  8182  0E84  318B  2322  318E   	fcall	_log
  8183  0E87  0020               	movlb	0	; select bank0
  8184  0E88  0857               	movf	?_log,w
  8185  0E89  00E5               	movwf	tempCalc@steinhart
  8186  0E8A  0858               	movf	?_log+1,w
  8187  0E8B  00E6               	movwf	tempCalc@steinhart+1
  8188  0E8C  0859               	movf	?_log+2,w
  8189  0E8D  00E7               	movwf	tempCalc@steinhart+2
  8190                           
  8191                           ;tempCalc.c: 12: steinhart /= 4030;
  8192  0E8E  30E0               	movlw	224
  8193  0E8F  00A0               	movwf	___ftdiv@f2
  8194  0E90  307B               	movlw	123
  8195  0E91  00A1               	movwf	___ftdiv@f2+1
  8196  0E92  3045               	movlw	69
  8197  0E93  00A2               	movwf	___ftdiv@f2+2
  8198  0E94  0865               	movf	tempCalc@steinhart,w
  8199  0E95  00A3               	movwf	___ftdiv@f1
  8200  0E96  0866               	movf	tempCalc@steinhart+1,w
  8201  0E97  00A4               	movwf	___ftdiv@f1+1
  8202  0E98  0867               	movf	tempCalc@steinhart+2,w
  8203  0E99  00A5               	movwf	___ftdiv@f1+2
  8204  0E9A  318A  2279  318E   	fcall	___ftdiv
  8205  0E9D  0020               	movlb	0	; select bank0
  8206  0E9E  0820               	movf	?___ftdiv,w
  8207  0E9F  00E5               	movwf	tempCalc@steinhart
  8208  0EA0  0821               	movf	?___ftdiv+1,w
  8209  0EA1  00E6               	movwf	tempCalc@steinhart+1
  8210  0EA2  0822               	movf	?___ftdiv+2,w
  8211  0EA3  00E7               	movwf	tempCalc@steinhart+2
  8212                           
  8213                           ;tempCalc.c: 15: steinhart += 1.0 / (25 + 273.15);
  8214  0EA4  30CF               	movlw	207
  8215  0EA5  00C0               	movwf	___ftadd@f1
  8216  0EA6  305B               	movlw	91
  8217  0EA7  00C1               	movwf	___ftadd@f1+1
  8218  0EA8  303B               	movlw	59
  8219  0EA9  00C2               	movwf	___ftadd@f1+2
  8220  0EAA  0865               	movf	tempCalc@steinhart,w
  8221  0EAB  00C3               	movwf	___ftadd@f2
  8222  0EAC  0866               	movf	tempCalc@steinhart+1,w
  8223  0EAD  00C4               	movwf	___ftadd@f2+1
  8224  0EAE  0867               	movf	tempCalc@steinhart+2,w
  8225  0EAF  00C5               	movwf	___ftadd@f2+2
  8226  0EB0  318F  270A  318E   	fcall	___ftadd
  8227  0EB3  0020               	movlb	0	; select bank0
  8228  0EB4  0840               	movf	?___ftadd,w
  8229  0EB5  00E5               	movwf	tempCalc@steinhart
  8230  0EB6  0841               	movf	?___ftadd+1,w
  8231  0EB7  00E6               	movwf	tempCalc@steinhart+1
  8232  0EB8  0842               	movf	?___ftadd+2,w
  8233  0EB9  00E7               	movwf	tempCalc@steinhart+2
  8234                           
  8235                           ;tempCalc.c: 16: steinhart = 1.0 / steinhart;
  8236  0EBA  0865               	movf	tempCalc@steinhart,w
  8237  0EBB  00A0               	movwf	___ftdiv@f2
  8238  0EBC  0866               	movf	tempCalc@steinhart+1,w
  8239  0EBD  00A1               	movwf	___ftdiv@f2+1
  8240  0EBE  0867               	movf	tempCalc@steinhart+2,w
  8241  0EBF  00A2               	movwf	___ftdiv@f2+2
  8242  0EC0  3000               	movlw	0
  8243  0EC1  00A3               	movwf	___ftdiv@f1
  8244  0EC2  3080               	movlw	128
  8245  0EC3  00A4               	movwf	___ftdiv@f1+1
  8246  0EC4  303F               	movlw	63
  8247  0EC5  00A5               	movwf	___ftdiv@f1+2
  8248  0EC6  318A  2279  318E   	fcall	___ftdiv
  8249  0EC9  0020               	movlb	0	; select bank0
  8250  0ECA  0820               	movf	?___ftdiv,w
  8251  0ECB  00E5               	movwf	tempCalc@steinhart
  8252  0ECC  0821               	movf	?___ftdiv+1,w
  8253  0ECD  00E6               	movwf	tempCalc@steinhart+1
  8254  0ECE  0822               	movf	?___ftdiv+2,w
  8255  0ECF  00E7               	movwf	tempCalc@steinhart+2
  8256                           
  8257                           ;tempCalc.c: 17: steinhart -= 273.15;
  8258  0ED0  3093               	movlw	147
  8259  0ED1  00CD               	movwf	___ftsub@f2
  8260  0ED2  3088               	movlw	136
  8261  0ED3  00CE               	movwf	___ftsub@f2+1
  8262  0ED4  3043               	movlw	67
  8263  0ED5  00CF               	movwf	___ftsub@f2+2
  8264  0ED6  0865               	movf	tempCalc@steinhart,w
  8265  0ED7  00D0               	movwf	___ftsub@f1
  8266  0ED8  0866               	movf	tempCalc@steinhart+1,w
  8267  0ED9  00D1               	movwf	___ftsub@f1+1
  8268  0EDA  0867               	movf	tempCalc@steinhart+2,w
  8269  0EDB  00D2               	movwf	___ftsub@f1+2
  8270  0EDC  3193  239D  318E   	fcall	___ftsub
  8271  0EDF  0020               	movlb	0	; select bank0
  8272  0EE0  084D               	movf	?___ftsub,w
  8273  0EE1  00E5               	movwf	tempCalc@steinhart
  8274  0EE2  084E               	movf	?___ftsub+1,w
  8275  0EE3  00E6               	movwf	tempCalc@steinhart+1
  8276  0EE4  084F               	movf	?___ftsub+2,w
  8277  0EE5  00E7               	movwf	tempCalc@steinhart+2
  8278                           
  8279                           ;tempCalc.c: 19: steinhart*=10;
  8280  0EE6  3000               	movlw	0
  8281  0EE7  00B0               	movwf	___ftmul@f1
  8282  0EE8  3020               	movlw	32
  8283  0EE9  00B1               	movwf	___ftmul@f1+1
  8284  0EEA  3041               	movlw	65
  8285  0EEB  00B2               	movwf	___ftmul@f1+2
  8286  0EEC  0865               	movf	tempCalc@steinhart,w
  8287  0EED  00B3               	movwf	___ftmul@f2
  8288  0EEE  0866               	movf	tempCalc@steinhart+1,w
  8289  0EEF  00B4               	movwf	___ftmul@f2+1
  8290  0EF0  0867               	movf	tempCalc@steinhart+2,w
  8291  0EF1  00B5               	movwf	___ftmul@f2+2
  8292  0EF2  318B  23D2  318E   	fcall	___ftmul
  8293  0EF5  0020               	movlb	0	; select bank0
  8294  0EF6  0830               	movf	?___ftmul,w
  8295  0EF7  00E5               	movwf	tempCalc@steinhart
  8296  0EF8  0831               	movf	?___ftmul+1,w
  8297  0EF9  00E6               	movwf	tempCalc@steinhart+1
  8298  0EFA  0832               	movf	?___ftmul+2,w
  8299  0EFB  00E7               	movwf	tempCalc@steinhart+2
  8300                           
  8301                           ;tempCalc.c: 23: return (int16_t)steinhart;
  8302  0EFC  0865               	movf	tempCalc@steinhart,w
  8303  0EFD  00C0               	movwf	___fttol@f1
  8304  0EFE  0866               	movf	tempCalc@steinhart+1,w
  8305  0EFF  00C1               	movwf	___fttol@f1+1
  8306  0F00  0867               	movf	tempCalc@steinhart+2,w
  8307  0F01  00C2               	movwf	___fttol@f1+2
  8308  0F02  3189  21F2         	fcall	___fttol
  8309  0F04  0020               	movlb	0	; select bank0
  8310  0F05  0841               	movf	?___fttol+1,w
  8311  0F06  00DE               	movwf	?_tempCalc+1
  8312  0F07  0840               	movf	?___fttol,w
  8313  0F08  00DD               	movwf	?_tempCalc
  8314  0F09  0008               	return
  8315  0F0A                     __end_of_tempCalc:	
  8316                           
  8317                           	psect	text2
  8318  0B22                     __ptext2:	
  8319 ;; *************** function _log *****************
  8320 ;; Defined at:
  8321 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
  8322 ;; Parameters:    Size  Location     Type
  8323 ;;  x               3   55[BANK0 ] int 
  8324 ;; Auto vars:     Size  Location     Type
  8325 ;;  exponent        2   59[BANK0 ] int 
  8326 ;; Return value:  Size  Location     Type
  8327 ;;                  3   55[BANK0 ] int 
  8328 ;; Registers used:
  8329 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8330 ;; Tracked objects:
  8331 ;;		On entry : 0/0
  8332 ;;		On exit  : 0/0
  8333 ;;		Unchanged: 0/0
  8334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8335 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8336 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8337 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8338 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8339 ;;Total ram usage:        6 bytes
  8340 ;; Hardware stack levels used:    1
  8341 ;; Hardware stack levels required when called:    3
  8342 ;; This function calls:
  8343 ;;		___awtoft
  8344 ;;		___ftadd
  8345 ;;		___ftge
  8346 ;;		___ftmul
  8347 ;;		_eval_poly
  8348 ;;		_frexp
  8349 ;; This function is called by:
  8350 ;;		_tempCalc
  8351 ;; This function uses a non-reentrant model
  8352 ;;
  8353                           
  8354                           
  8355                           ;psect for function _log
  8356  0B22                     _log:	
  8357                           
  8358                           ;incstack = 0
  8359                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8360  0B22  0020               	movlb	0	; select bank0
  8361  0B23  0857               	movf	log@x,w
  8362  0B24  00F0               	movwf	___ftge@ff1
  8363  0B25  0858               	movf	log@x+1,w
  8364  0B26  00F1               	movwf	___ftge@ff1+1
  8365  0B27  0859               	movf	log@x+2,w
  8366  0B28  00F2               	movwf	___ftge@ff1+2
  8367  0B29  3000               	movlw	0
  8368  0B2A  00F3               	movwf	___ftge@ff2
  8369  0B2B  3000               	movlw	0
  8370  0B2C  00F4               	movwf	___ftge@ff2+1
  8371  0B2D  3000               	movlw	0
  8372  0B2E  00F5               	movwf	___ftge@ff2+2
  8373  0B2F  3189  2131  318B   	fcall	___ftge
  8374  0B32  1803               	btfsc	3,0
  8375  0B33  2B41               	goto	l2623
  8376  0B34  3021               	movlw	33
  8377  0B35  0021               	movlb	1	; select bank1
  8378  0B36  00B5               	movwf	_errno^(0+128)
  8379  0B37  3000               	movlw	0
  8380  0B38  00B6               	movwf	(_errno^(0+128)+1)
  8381  0B39  3000               	movlw	0
  8382  0B3A  0020               	movlb	0	; select bank0
  8383  0B3B  00D7               	movwf	?_log
  8384  0B3C  3000               	movlw	0
  8385  0B3D  00D8               	movwf	?_log+1
  8386  0B3E  3000               	movlw	0
  8387  0B3F  00D9               	movwf	?_log+2
  8388  0B40  0008               	return
  8389  0B41                     l2623:	
  8390  0B41  0020               	movlb	0	; select bank0
  8391  0B42  0859               	movf	log@x+2,w
  8392  0B43  0458               	iorwf	log@x+1,w
  8393  0B44  0457               	iorwf	log@x,w
  8394  0B45  1D03               	skipz
  8395  0B46  2B54               	goto	l2629
  8396  0B47  3022               	movlw	34
  8397  0B48  0021               	movlb	1	; select bank1
  8398  0B49  00B5               	movwf	_errno^(0+128)
  8399  0B4A  3000               	movlw	0
  8400  0B4B  00B6               	movwf	(_errno^(0+128)+1)
  8401  0B4C  3000               	movlw	0
  8402  0B4D  0020               	movlb	0	; select bank0
  8403  0B4E  00D7               	movwf	?_log
  8404  0B4F  3000               	movlw	0
  8405  0B50  00D8               	movwf	?_log+1
  8406  0B51  3000               	movlw	0
  8407  0B52  00D9               	movwf	?_log+2
  8408  0B53  0008               	return
  8409  0B54                     l2629:	
  8410  0B54  3000               	movlw	0
  8411  0B55  00C0               	movwf	___ftadd@f1
  8412  0B56  3080               	movlw	128
  8413  0B57  00C1               	movwf	___ftadd@f1+1
  8414  0B58  30BF               	movlw	191
  8415  0B59  00C2               	movwf	___ftadd@f1+2
  8416  0B5A  3000               	movlw	0
  8417  0B5B  00B0               	movwf	___ftmul@f1
  8418  0B5C  3000               	movlw	0
  8419  0B5D  00B1               	movwf	___ftmul@f1+1
  8420  0B5E  3040               	movlw	64
  8421  0B5F  00B2               	movwf	___ftmul@f1+2
  8422  0B60  305B               	movlw	(low (log@exponent| 0))& (0+255)
  8423  0B61  00DA               	movwf	??_log
  8424  0B62  085A               	movf	??_log,w
  8425  0B63  00F3               	movwf	frexp@eptr
  8426  0B64  0857               	movf	log@x,w
  8427  0B65  00F0               	movwf	frexp@value
  8428  0B66  0858               	movf	log@x+1,w
  8429  0B67  00F1               	movwf	frexp@value+1
  8430  0B68  0859               	movf	log@x+2,w
  8431  0B69  00F2               	movwf	frexp@value+2
  8432  0B6A  3180  2007  318B   	fcall	_frexp
  8433  0B6D  0870               	movf	?_frexp,w
  8434  0B6E  0020               	movlb	0	; select bank0
  8435  0B6F  00B3               	movwf	___ftmul@f2
  8436  0B70  0871               	movf	?_frexp+1,w
  8437  0B71  00B4               	movwf	___ftmul@f2+1
  8438  0B72  0872               	movf	?_frexp+2,w
  8439  0B73  00B5               	movwf	___ftmul@f2+2
  8440  0B74  318B  23D2  318B   	fcall	___ftmul
  8441  0B77  0020               	movlb	0	; select bank0
  8442  0B78  0830               	movf	?___ftmul,w
  8443  0B79  00C3               	movwf	___ftadd@f2
  8444  0B7A  0831               	movf	?___ftmul+1,w
  8445  0B7B  00C4               	movwf	___ftadd@f2+1
  8446  0B7C  0832               	movf	?___ftmul+2,w
  8447  0B7D  00C5               	movwf	___ftadd@f2+2
  8448  0B7E  318F  270A  318B   	fcall	___ftadd
  8449  0B81  0020               	movlb	0	; select bank0
  8450  0B82  0840               	movf	?___ftadd,w
  8451  0B83  00D7               	movwf	log@x
  8452  0B84  0841               	movf	?___ftadd+1,w
  8453  0B85  00D8               	movwf	log@x+1
  8454  0B86  0842               	movf	?___ftadd+2,w
  8455  0B87  00D9               	movwf	log@x+2
  8456  0B88  30FF               	movlw	255
  8457  0B89  07DB               	addwf	log@exponent,f
  8458  0B8A  30FF               	movlw	255
  8459  0B8B  3DDC               	addwfc	log@exponent+1,f
  8460  0B8C  0857               	movf	log@x,w
  8461  0B8D  00CD               	movwf	eval_poly@x
  8462  0B8E  0858               	movf	log@x+1,w
  8463  0B8F  00CE               	movwf	eval_poly@x+1
  8464  0B90  0859               	movf	log@x+2,w
  8465  0B91  00CF               	movwf	eval_poly@x+2
  8466  0B92  3000               	movlw	low (log@coeff| (0+32768))
  8467  0B93  00D0               	movwf	eval_poly@d
  8468  0B94  3098               	movlw	high (log@coeff| (0+32768))
  8469  0B95  00D1               	movwf	eval_poly@d+1
  8470  0B96  3008               	movlw	8
  8471  0B97  00D2               	movwf	eval_poly@n
  8472  0B98  3000               	movlw	0
  8473  0B99  00D3               	movwf	eval_poly@n+1
  8474  0B9A  3196  26BA  318B   	fcall	_eval_poly
  8475  0B9D  0020               	movlb	0	; select bank0
  8476  0B9E  084D               	movf	?_eval_poly,w
  8477  0B9F  00D7               	movwf	log@x
  8478  0BA0  084E               	movf	?_eval_poly+1,w
  8479  0BA1  00D8               	movwf	log@x+1
  8480  0BA2  084F               	movf	?_eval_poly+2,w
  8481  0BA3  00D9               	movwf	log@x+2
  8482  0BA4  0857               	movf	log@x,w
  8483  0BA5  00C0               	movwf	___ftadd@f1
  8484  0BA6  0858               	movf	log@x+1,w
  8485  0BA7  00C1               	movwf	___ftadd@f1+1
  8486  0BA8  0859               	movf	log@x+2,w
  8487  0BA9  00C2               	movwf	___ftadd@f1+2
  8488  0BAA  3072               	movlw	114
  8489  0BAB  00B0               	movwf	___ftmul@f1
  8490  0BAC  3031               	movlw	49
  8491  0BAD  00B1               	movwf	___ftmul@f1+1
  8492  0BAE  303F               	movlw	63
  8493  0BAF  00B2               	movwf	___ftmul@f1+2
  8494  0BB0  085C               	movf	log@exponent+1,w
  8495  0BB1  00F9               	movwf	___awtoft@c+1
  8496  0BB2  085B               	movf	log@exponent,w
  8497  0BB3  00F8               	movwf	___awtoft@c
  8498  0BB4  3193  23F9  318B   	fcall	___awtoft
  8499  0BB7  0878               	movf	?___awtoft,w
  8500  0BB8  0020               	movlb	0	; select bank0
  8501  0BB9  00B3               	movwf	___ftmul@f2
  8502  0BBA  0879               	movf	?___awtoft+1,w
  8503  0BBB  00B4               	movwf	___ftmul@f2+1
  8504  0BBC  087A               	movf	?___awtoft+2,w
  8505  0BBD  00B5               	movwf	___ftmul@f2+2
  8506  0BBE  318B  23D2  318B   	fcall	___ftmul
  8507  0BC1  0020               	movlb	0	; select bank0
  8508  0BC2  0830               	movf	?___ftmul,w
  8509  0BC3  00C3               	movwf	___ftadd@f2
  8510  0BC4  0831               	movf	?___ftmul+1,w
  8511  0BC5  00C4               	movwf	___ftadd@f2+1
  8512  0BC6  0832               	movf	?___ftmul+2,w
  8513  0BC7  00C5               	movwf	___ftadd@f2+2
  8514  0BC8  318F  270A         	fcall	___ftadd
  8515  0BCA  0020               	movlb	0	; select bank0
  8516  0BCB  0840               	movf	?___ftadd,w
  8517  0BCC  00D7               	movwf	?_log
  8518  0BCD  0841               	movf	?___ftadd+1,w
  8519  0BCE  00D8               	movwf	?_log+1
  8520  0BCF  0842               	movf	?___ftadd+2,w
  8521  0BD0  00D9               	movwf	?_log+2
  8522  0BD1  0008               	return
  8523  0BD2                     __end_of_log:	
  8524                           
  8525                           	psect	text3
  8526  0007                     __ptext3:	
  8527 ;; *************** function _frexp *****************
  8528 ;; Defined at:
  8529 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  8530 ;; Parameters:    Size  Location     Type
  8531 ;;  value           3    0[COMMON] int 
  8532 ;;  eptr            1    3[COMMON] PTR int 
  8533 ;;		 -> log@exponent(2), 
  8534 ;; Auto vars:     Size  Location     Type
  8535 ;;		None
  8536 ;; Return value:  Size  Location     Type
  8537 ;;                  3    0[COMMON] PTR int 
  8538 ;; Registers used:
  8539 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8540 ;; Tracked objects:
  8541 ;;		On entry : 0/0
  8542 ;;		On exit  : 0/0
  8543 ;;		Unchanged: 0/0
  8544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8545 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8547 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8548 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8549 ;;Total ram usage:        6 bytes
  8550 ;; Hardware stack levels used:    1
  8551 ;; This function calls:
  8552 ;;		Nothing
  8553 ;; This function is called by:
  8554 ;;		_log
  8555 ;; This function uses a non-reentrant model
  8556 ;;
  8557                           
  8558                           
  8559                           ;psect for function _frexp
  8560  0007                     _frexp:	
  8561                           
  8562                           ;incstack = 0
  8563                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  8564  0007  0872               	movf	frexp@value+2,w
  8565  0008  0471               	iorwf	frexp@value+1,w
  8566  0009  0470               	iorwf	frexp@value,w
  8567  000A  1D03               	skipz
  8568  000B  2819               	goto	l2419
  8569  000C  0873               	movf	frexp@eptr,w
  8570  000D  0086               	movwf	6
  8571  000E  0187               	clrf	7
  8572  000F  3000               	movlw	0
  8573  0010  3FC0               	movwi [0]fsr1
  8574  0011  3FC1               	movwi [1]fsr1
  8575  0012  3000               	movlw	0
  8576  0013  00F0               	movwf	?_frexp
  8577  0014  3000               	movlw	0
  8578  0015  00F1               	movwf	?_frexp+1
  8579  0016  3000               	movlw	0
  8580  0017  00F2               	movwf	?_frexp+2
  8581  0018  0008               	return
  8582  0019                     l2419:	
  8583  0019  0872               	movf	frexp@value+2,w
  8584  001A  397F               	andlw	127
  8585  001B  00F4               	movwf	??_frexp
  8586  001C  01F5               	clrf	??_frexp+1
  8587  001D  35F4               	lslf	??_frexp,f
  8588  001E  0DF5               	rlf	??_frexp+1,f
  8589  001F  0873               	movf	frexp@eptr,w
  8590  0020  0086               	movwf	6
  8591  0021  0187               	clrf	7
  8592  0022  0874               	movf	??_frexp,w
  8593  0023  3FC0               	movwi [0]fsr1
  8594  0024  0875               	movf	??_frexp+1,w
  8595  0025  3FC1               	movwi [1]fsr1
  8596  0026  0D71               	rlf	frexp@value+1,w
  8597  0027  0D71               	rlf	frexp@value+1,w
  8598  0028  3901               	andlw	1
  8599  0029  00F4               	movwf	??_frexp
  8600  002A  01F5               	clrf	??_frexp+1
  8601  002B  0873               	movf	frexp@eptr,w
  8602  002C  0086               	movwf	6
  8603  002D  0187               	clrf	7
  8604  002E  0874               	movf	??_frexp,w
  8605  002F  0481               	iorwf	1,f
  8606  0030  3141               	addfsr 1,1
  8607  0031  0875               	movf	??_frexp+1,w
  8608  0032  0481               	iorwf	1,f
  8609  0033  0873               	movf	frexp@eptr,w
  8610  0034  0086               	movwf	6
  8611  0035  0187               	clrf	7
  8612  0036  3082               	movlw	130
  8613  0037  0781               	addwf	1,f
  8614  0038  3141               	addfsr 1,1
  8615  0039  30FF               	movlw	255
  8616  003A  3D81               	addwfc	1,f
  8617  003B  317F               	addfsr 1,-1
  8618  003C  0872               	movf	frexp@value+2,w
  8619  003D  3980               	andlw	-128
  8620  003E  383F               	iorlw	63
  8621  003F  00F2               	movwf	frexp@value+2
  8622  0040  13F1               	bcf	frexp@value+1,7
  8623  0041  0008               	return
  8624  0042                     __end_of_frexp:	
  8625                           
  8626                           	psect	text4
  8627  16BA                     __ptext4:	
  8628 ;; *************** function _eval_poly *****************
  8629 ;; Defined at:
  8630 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  8631 ;; Parameters:    Size  Location     Type
  8632 ;;  x               3   45[BANK0 ] PTR int 
  8633 ;;  d               2   48[BANK0 ] PTR const 
  8634 ;;		 -> log@coeff(27), 
  8635 ;;  n               2   50[BANK0 ] int 
  8636 ;; Auto vars:     Size  Location     Type
  8637 ;;  res             3   52[BANK0 ] int 
  8638 ;; Return value:  Size  Location     Type
  8639 ;;                  3   45[BANK0 ] int 
  8640 ;; Registers used:
  8641 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8642 ;; Tracked objects:
  8643 ;;		On entry : 0/0
  8644 ;;		On exit  : 0/0
  8645 ;;		Unchanged: 0/0
  8646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8647 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8648 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8650 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8651 ;;Total ram usage:       10 bytes
  8652 ;; Hardware stack levels used:    1
  8653 ;; Hardware stack levels required when called:    2
  8654 ;; This function calls:
  8655 ;;		___ftadd
  8656 ;;		___ftmul
  8657 ;;		___wmul
  8658 ;; This function is called by:
  8659 ;;		_log
  8660 ;; This function uses a non-reentrant model
  8661 ;;
  8662                           
  8663                           
  8664                           ;psect for function _eval_poly
  8665  16BA                     _eval_poly:	
  8666                           
  8667                           ;incstack = 0
  8668                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8669  16BA  0020               	movlb	0	; select bank0
  8670  16BB  0853               	movf	eval_poly@n+1,w
  8671  16BC  00FA               	movwf	___wmul@multiplier+1
  8672  16BD  0852               	movf	eval_poly@n,w
  8673  16BE  00F9               	movwf	___wmul@multiplier
  8674  16BF  3003               	movlw	3
  8675  16C0  00FB               	movwf	___wmul@multiplicand
  8676  16C1  3000               	movlw	0
  8677  16C2  00FC               	movwf	___wmul@multiplicand+1
  8678  16C3  3193  237F  3196   	fcall	___wmul
  8679  16C6  0020               	movlb	0	; select bank0
  8680  16C7  0850               	movf	eval_poly@d,w
  8681  16C8  0779               	addwf	?___wmul,w
  8682  16C9  0084               	movwf	4
  8683  16CA  0851               	movf	eval_poly@d+1,w
  8684  16CB  3D7A               	addwfc	?___wmul+1,w
  8685  16CC  0085               	movwf	5
  8686  16CD  3F00               	moviw [0]fsr0
  8687  16CE  00D4               	movwf	eval_poly@res
  8688  16CF  3F01               	moviw [1]fsr0
  8689  16D0  00D5               	movwf	eval_poly@res+1
  8690  16D1  3F02               	moviw [2]fsr0
  8691  16D2                     L2:	
  8692  16D2  00D6               	movwf	eval_poly@res+2
  8693  16D3  0852               	movf	eval_poly@n,w
  8694  16D4  0453               	iorwf	eval_poly@n+1,w
  8695  16D5  1903               	btfsc	3,2
  8696  16D6  2F13               	goto	l2437
  8697  16D7  30FF               	movlw	255
  8698  16D8  07D2               	addwf	eval_poly@n,f
  8699  16D9  30FF               	movlw	255
  8700  16DA  3DD3               	addwfc	eval_poly@n+1,f
  8701  16DB  0853               	movf	eval_poly@n+1,w
  8702  16DC  00FA               	movwf	___wmul@multiplier+1
  8703  16DD  0852               	movf	eval_poly@n,w
  8704  16DE  00F9               	movwf	___wmul@multiplier
  8705  16DF  3003               	movlw	3
  8706  16E0  00FB               	movwf	___wmul@multiplicand
  8707  16E1  3000               	movlw	0
  8708  16E2  00FC               	movwf	___wmul@multiplicand+1
  8709  16E3  3193  237F  3196   	fcall	___wmul
  8710  16E6  0020               	movlb	0	; select bank0
  8711  16E7  0850               	movf	eval_poly@d,w
  8712  16E8  0779               	addwf	?___wmul,w
  8713  16E9  0084               	movwf	4
  8714  16EA  0851               	movf	eval_poly@d+1,w
  8715  16EB  3D7A               	addwfc	?___wmul+1,w
  8716  16EC  0085               	movwf	5
  8717  16ED  3F00               	moviw [0]fsr0
  8718  16EE  00C0               	movwf	___ftadd@f1
  8719  16EF  3F01               	moviw [1]fsr0
  8720  16F0  00C1               	movwf	___ftadd@f1+1
  8721  16F1  3F02               	moviw [2]fsr0
  8722  16F2  00C2               	movwf	___ftadd@f1+2
  8723  16F3  0854               	movf	eval_poly@res,w
  8724  16F4  00B0               	movwf	___ftmul@f1
  8725  16F5  0855               	movf	eval_poly@res+1,w
  8726  16F6  00B1               	movwf	___ftmul@f1+1
  8727  16F7  0856               	movf	eval_poly@res+2,w
  8728  16F8  00B2               	movwf	___ftmul@f1+2
  8729  16F9  084D               	movf	eval_poly@x,w
  8730  16FA  00B3               	movwf	___ftmul@f2
  8731  16FB  084E               	movf	eval_poly@x+1,w
  8732  16FC  00B4               	movwf	___ftmul@f2+1
  8733  16FD  084F               	movf	eval_poly@x+2,w
  8734  16FE  00B5               	movwf	___ftmul@f2+2
  8735  16FF  318B  23D2  3196   	fcall	___ftmul
  8736  1702  0020               	movlb	0	; select bank0
  8737  1703  0830               	movf	?___ftmul,w
  8738  1704  00C3               	movwf	___ftadd@f2
  8739  1705  0831               	movf	?___ftmul+1,w
  8740  1706  00C4               	movwf	___ftadd@f2+1
  8741  1707  0832               	movf	?___ftmul+2,w
  8742  1708  00C5               	movwf	___ftadd@f2+2
  8743  1709  318F  270A  3196   	fcall	___ftadd
  8744  170C  0020               	movlb	0	; select bank0
  8745  170D  0840               	movf	?___ftadd,w
  8746  170E  00D4               	movwf	eval_poly@res
  8747  170F  0841               	movf	?___ftadd+1,w
  8748  1710  00D5               	movwf	eval_poly@res+1
  8749  1711  0842               	movf	?___ftadd+2,w
  8750  1712  2ED2               	goto	L2
  8751  1713                     l2437:	
  8752  1713  0854               	movf	eval_poly@res,w
  8753  1714  00CD               	movwf	?_eval_poly
  8754  1715  0855               	movf	eval_poly@res+1,w
  8755  1716  00CE               	movwf	?_eval_poly+1
  8756  1717  0856               	movf	eval_poly@res+2,w
  8757  1718  00CF               	movwf	?_eval_poly+2
  8758  1719  0008               	return
  8759  171A                     __end_of_eval_poly:	
  8760                           
  8761                           	psect	text5
  8762  0931                     __ptext5:	
  8763 ;; *************** function ___ftge *****************
  8764 ;; Defined at:
  8765 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  8766 ;; Parameters:    Size  Location     Type
  8767 ;;  ff1             3    0[COMMON] float 
  8768 ;;  ff2             3    3[COMMON] float 
  8769 ;; Auto vars:     Size  Location     Type
  8770 ;;		None
  8771 ;; Return value:  Size  Location     Type
  8772 ;;		None               void
  8773 ;; Registers used:
  8774 ;;		wreg, status,2, status,0
  8775 ;; Tracked objects:
  8776 ;;		On entry : 0/0
  8777 ;;		On exit  : 0/0
  8778 ;;		Unchanged: 0/0
  8779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8780 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8782 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8783 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8784 ;;Total ram usage:        9 bytes
  8785 ;; Hardware stack levels used:    1
  8786 ;; This function calls:
  8787 ;;		Nothing
  8788 ;; This function is called by:
  8789 ;;		_log
  8790 ;; This function uses a non-reentrant model
  8791 ;;
  8792                           
  8793                           
  8794                           ;psect for function ___ftge
  8795  0931                     ___ftge:	
  8796                           
  8797                           ;incstack = 0
  8798                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8799  0931  1FF2               	btfss	___ftge@ff1+2,7
  8800  0932  2947               	goto	l2353
  8801  0933  0970               	comf	___ftge@ff1,w
  8802  0934  00F6               	movwf	??___ftge
  8803  0935  0971               	comf	___ftge@ff1+1,w
  8804  0936  00F7               	movwf	??___ftge+1
  8805  0937  0972               	comf	___ftge@ff1+2,w
  8806  0938  00F8               	movwf	??___ftge+2
  8807  0939  0AF6               	incf	??___ftge,f
  8808  093A  1903               	skipnz
  8809  093B  0AF7               	incf	??___ftge+1,f
  8810  093C  1903               	skipnz
  8811  093D  0AF8               	incf	??___ftge+2,f
  8812  093E  3000               	movlw	0
  8813  093F  0776               	addwf	??___ftge,w
  8814  0940  00F0               	movwf	___ftge@ff1
  8815  0941  3000               	movlw	0
  8816  0942  3D77               	addwfc	??___ftge+1,w
  8817  0943  00F1               	movwf	___ftge@ff1+1
  8818  0944  3080               	movlw	128
  8819  0945  3D78               	addwfc	??___ftge+2,w
  8820  0946  00F2               	movwf	___ftge@ff1+2
  8821  0947                     l2353:	
  8822  0947  1FF5               	btfss	___ftge@ff2+2,7
  8823  0948  295D               	goto	l2357
  8824  0949  0973               	comf	___ftge@ff2,w
  8825  094A  00F6               	movwf	??___ftge
  8826  094B  0974               	comf	___ftge@ff2+1,w
  8827  094C  00F7               	movwf	??___ftge+1
  8828  094D  0975               	comf	___ftge@ff2+2,w
  8829  094E  00F8               	movwf	??___ftge+2
  8830  094F  0AF6               	incf	??___ftge,f
  8831  0950  1903               	skipnz
  8832  0951  0AF7               	incf	??___ftge+1,f
  8833  0952  1903               	skipnz
  8834  0953  0AF8               	incf	??___ftge+2,f
  8835  0954  3000               	movlw	0
  8836  0955  0776               	addwf	??___ftge,w
  8837  0956  00F3               	movwf	___ftge@ff2
  8838  0957  3000               	movlw	0
  8839  0958  3D77               	addwfc	??___ftge+1,w
  8840  0959  00F4               	movwf	___ftge@ff2+1
  8841  095A  3080               	movlw	128
  8842  095B  3D78               	addwfc	??___ftge+2,w
  8843  095C  00F5               	movwf	___ftge@ff2+2
  8844  095D                     l2357:	
  8845  095D  3080               	movlw	128
  8846  095E  06F2               	xorwf	___ftge@ff1+2,f
  8847  095F  3080               	movlw	128
  8848  0960  06F5               	xorwf	___ftge@ff2+2,f
  8849  0961  0875               	movf	___ftge@ff2+2,w
  8850  0962  0272               	subwf	___ftge@ff1+2,w
  8851  0963  1D03               	skipz
  8852  0964  0008               	return
  8853  0965  0874               	movf	___ftge@ff2+1,w
  8854  0966  0271               	subwf	___ftge@ff1+1,w
  8855  0967  1D03               	skipz
  8856  0968  0008               	return
  8857  0969  0873               	movf	___ftge@ff2,w
  8858  096A  0270               	subwf	___ftge@ff1,w
  8859  096B  0008               	return
  8860  096C                     __end_of___ftge:	
  8861                           
  8862                           	psect	text6
  8863  139D                     __ptext6:	
  8864 ;; *************** function ___ftsub *****************
  8865 ;; Defined at:
  8866 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  8867 ;; Parameters:    Size  Location     Type
  8868 ;;  f2              3   45[BANK0 ] float 
  8869 ;;  f1              3   48[BANK0 ] float 
  8870 ;; Auto vars:     Size  Location     Type
  8871 ;;		None
  8872 ;; Return value:  Size  Location     Type
  8873 ;;                  3   45[BANK0 ] float 
  8874 ;; Registers used:
  8875 ;;		wreg, status,2, status,0, pclath, cstack
  8876 ;; Tracked objects:
  8877 ;;		On entry : 0/0
  8878 ;;		On exit  : 0/0
  8879 ;;		Unchanged: 0/0
  8880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8881 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8884 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8885 ;;Total ram usage:        6 bytes
  8886 ;; Hardware stack levels used:    1
  8887 ;; Hardware stack levels required when called:    2
  8888 ;; This function calls:
  8889 ;;		___ftadd
  8890 ;; This function is called by:
  8891 ;;		_tempCalc
  8892 ;; This function uses a non-reentrant model
  8893 ;;
  8894                           
  8895                           
  8896                           ;psect for function ___ftsub
  8897  139D                     ___ftsub:	
  8898                           
  8899                           ;incstack = 0
  8900                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  8901  139D  0020               	movlb	0	; select bank0
  8902  139E  084F               	movf	___ftsub@f2+2,w
  8903  139F  044E               	iorwf	___ftsub@f2+1,w
  8904  13A0  044D               	iorwf	___ftsub@f2,w
  8905  13A1  1903               	skipnz
  8906  13A2  2BA5               	goto	l2769
  8907  13A3  3080               	movlw	128
  8908  13A4  06CF               	xorwf	___ftsub@f2+2,f
  8909  13A5                     l2769:	
  8910  13A5  0850               	movf	___ftsub@f1,w
  8911  13A6  00C0               	movwf	___ftadd@f1
  8912  13A7  0851               	movf	___ftsub@f1+1,w
  8913  13A8  00C1               	movwf	___ftadd@f1+1
  8914  13A9  0852               	movf	___ftsub@f1+2,w
  8915  13AA  00C2               	movwf	___ftadd@f1+2
  8916  13AB  084D               	movf	___ftsub@f2,w
  8917  13AC  00C3               	movwf	___ftadd@f2
  8918  13AD  084E               	movf	___ftsub@f2+1,w
  8919  13AE  00C4               	movwf	___ftadd@f2+1
  8920  13AF  084F               	movf	___ftsub@f2+2,w
  8921  13B0  00C5               	movwf	___ftadd@f2+2
  8922  13B1  318F  270A         	fcall	___ftadd
  8923  13B3  0020               	movlb	0	; select bank0
  8924  13B4  0840               	movf	?___ftadd,w
  8925  13B5  00CD               	movwf	?___ftsub
  8926  13B6  0841               	movf	?___ftadd+1,w
  8927  13B7  00CE               	movwf	?___ftsub+1
  8928  13B8  0842               	movf	?___ftadd+2,w
  8929  13B9  00CF               	movwf	?___ftsub+2
  8930  13BA  0008               	return
  8931  13BB                     __end_of___ftsub:	
  8932                           
  8933                           	psect	text7
  8934  0F0A                     __ptext7:	
  8935 ;; *************** function ___ftadd *****************
  8936 ;; Defined at:
  8937 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  8938 ;; Parameters:    Size  Location     Type
  8939 ;;  f1              3   32[BANK0 ] float 
  8940 ;;  f2              3   35[BANK0 ] float 
  8941 ;; Auto vars:     Size  Location     Type
  8942 ;;  exp1            1   44[BANK0 ] unsigned char 
  8943 ;;  exp2            1   43[BANK0 ] unsigned char 
  8944 ;;  sign            1   42[BANK0 ] unsigned char 
  8945 ;; Return value:  Size  Location     Type
  8946 ;;                  3   32[BANK0 ] float 
  8947 ;; Registers used:
  8948 ;;		wreg, status,2, status,0, pclath, cstack
  8949 ;; Tracked objects:
  8950 ;;		On entry : 0/0
  8951 ;;		On exit  : 0/0
  8952 ;;		Unchanged: 0/0
  8953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8954 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8955 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8956 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8957 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8958 ;;Total ram usage:       13 bytes
  8959 ;; Hardware stack levels used:    1
  8960 ;; Hardware stack levels required when called:    1
  8961 ;; This function calls:
  8962 ;;		___ftpack
  8963 ;; This function is called by:
  8964 ;;		_tempCalc
  8965 ;;		___ftsub
  8966 ;;		_log
  8967 ;;		_eval_poly
  8968 ;; This function uses a non-reentrant model
  8969 ;;
  8970                           
  8971                           
  8972                           ;psect for function ___ftadd
  8973  0F0A                     ___ftadd:	
  8974                           
  8975                           ;incstack = 0
  8976                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8977  0F0A  0020               	movlb	0	; select bank0
  8978  0F0B  0840               	movf	___ftadd@f1,w
  8979  0F0C  00C6               	movwf	??___ftadd
  8980  0F0D  0841               	movf	___ftadd@f1+1,w
  8981  0F0E  00C7               	movwf	??___ftadd+1
  8982  0F0F  0842               	movf	___ftadd@f1+2,w
  8983  0F10  00C8               	movwf	??___ftadd+2
  8984  0F11  1003               	clrc
  8985  0F12  0D47               	rlf	??___ftadd+1,w
  8986  0F13  0D48               	rlf	??___ftadd+2,w
  8987  0F14  00C9               	movwf	??___ftadd+3
  8988  0F15  0849               	movf	??___ftadd+3,w
  8989  0F16  00CC               	movwf	___ftadd@exp1
  8990  0F17  0843               	movf	___ftadd@f2,w
  8991  0F18  00C6               	movwf	??___ftadd
  8992  0F19  0844               	movf	___ftadd@f2+1,w
  8993  0F1A  00C7               	movwf	??___ftadd+1
  8994  0F1B  0845               	movf	___ftadd@f2+2,w
  8995  0F1C  00C8               	movwf	??___ftadd+2
  8996  0F1D  1003               	clrc
  8997  0F1E  0D47               	rlf	??___ftadd+1,w
  8998  0F1F  0D48               	rlf	??___ftadd+2,w
  8999  0F20  00C9               	movwf	??___ftadd+3
  9000  0F21  0849               	movf	??___ftadd+3,w
  9001  0F22  00CB               	movwf	___ftadd@exp2
  9002  0F23  084C               	movf	___ftadd@exp1,w
  9003  0F24  1903               	btfsc	3,2
  9004  0F25  2F32               	goto	l2221
  9005  0F26  084B               	movf	___ftadd@exp2,w
  9006  0F27  024C               	subwf	___ftadd@exp1,w
  9007  0F28  1803               	skipnc
  9008  0F29  2F39               	goto	l2225
  9009  0F2A  034C               	decf	___ftadd@exp1,w
  9010  0F2B  3AFF               	xorlw	255
  9011  0F2C  074B               	addwf	___ftadd@exp2,w
  9012  0F2D  00C6               	movwf	??___ftadd
  9013  0F2E  3019               	movlw	25
  9014  0F2F  0246               	subwf	??___ftadd,w
  9015  0F30  1C03               	skipc
  9016  0F31  2F39               	goto	l2225
  9017  0F32                     l2221:	
  9018  0F32  0843               	movf	___ftadd@f2,w
  9019  0F33  00C0               	movwf	?___ftadd
  9020  0F34  0844               	movf	___ftadd@f2+1,w
  9021  0F35  00C1               	movwf	?___ftadd+1
  9022  0F36  0845               	movf	___ftadd@f2+2,w
  9023  0F37  00C2               	movwf	?___ftadd+2
  9024  0F38  0008               	return
  9025  0F39                     l2225:	
  9026  0F39  084B               	movf	___ftadd@exp2,w
  9027  0F3A  1903               	btfsc	3,2
  9028  0F3B  0008               	return
  9029  0F3C  084C               	movf	___ftadd@exp1,w
  9030  0F3D  024B               	subwf	___ftadd@exp2,w
  9031  0F3E  1803               	skipnc
  9032  0F3F  2F48               	goto	l2231
  9033  0F40  034B               	decf	___ftadd@exp2,w
  9034  0F41  3AFF               	xorlw	255
  9035  0F42  074C               	addwf	___ftadd@exp1,w
  9036  0F43  00C6               	movwf	??___ftadd
  9037  0F44  3019               	movlw	25
  9038  0F45  0246               	subwf	??___ftadd,w
  9039  0F46  1803               	btfsc	3,0
  9040  0F47  0008               	return
  9041  0F48                     l2231:	
  9042  0F48  3006               	movlw	6
  9043  0F49  00C6               	movwf	??___ftadd
  9044  0F4A  0846               	movf	??___ftadd,w
  9045  0F4B  00CA               	movwf	___ftadd@sign
  9046  0F4C  1BC2               	btfsc	___ftadd@f1+2,7
  9047  0F4D  17CA               	bsf	___ftadd@sign,7
  9048  0F4E  1BC5               	btfsc	___ftadd@f2+2,7
  9049  0F4F  174A               	bsf	___ftadd@sign,6
  9050  0F50  17C1               	bsf	___ftadd@f1+1,7
  9051  0F51  30FF               	movlw	255
  9052  0F52  05C0               	andwf	___ftadd@f1,f
  9053  0F53  30FF               	movlw	255
  9054  0F54  05C1               	andwf	___ftadd@f1+1,f
  9055  0F55  3000               	movlw	0
  9056  0F56  05C2               	andwf	___ftadd@f1+2,f
  9057  0F57  17C4               	bsf	___ftadd@f2+1,7
  9058  0F58  30FF               	movlw	255
  9059  0F59  05C3               	andwf	___ftadd@f2,f
  9060  0F5A  30FF               	movlw	255
  9061  0F5B  05C4               	andwf	___ftadd@f2+1,f
  9062  0F5C  3000               	movlw	0
  9063  0F5D  05C5               	andwf	___ftadd@f2+2,f
  9064  0F5E  084B               	movf	___ftadd@exp2,w
  9065  0F5F  024C               	subwf	___ftadd@exp1,w
  9066  0F60  1803               	skipnc
  9067  0F61  2F84               	goto	l2253
  9068  0F62                     l2243:	
  9069  0F62  3001               	movlw	1
  9070  0F63                     u2165:	
  9071  0F63  35C3               	lslf	___ftadd@f2,f
  9072  0F64  0DC4               	rlf	___ftadd@f2+1,f
  9073  0F65  0DC5               	rlf	___ftadd@f2+2,f
  9074  0F66  0B89               	decfsz	9,f
  9075  0F67  2F63               	goto	u2165
  9076  0F68  3001               	movlw	1
  9077  0F69  02CB               	subwf	___ftadd@exp2,f
  9078  0F6A  084B               	movf	___ftadd@exp2,w
  9079  0F6B  064C               	xorwf	___ftadd@exp1,w
  9080  0F6C  1903               	skipnz
  9081  0F6D  2F7F               	goto	l2251
  9082  0F6E  3001               	movlw	1
  9083  0F6F  02CA               	subwf	___ftadd@sign,f
  9084  0F70  084A               	movf	___ftadd@sign,w
  9085  0F71  3907               	andlw	7
  9086  0F72  1903               	btfsc	3,2
  9087  0F73  2F7F               	goto	l2251
  9088  0F74  2F62               	goto	l2243
  9089  0F75                     l2249:	
  9090  0F75  3001               	movlw	1
  9091  0F76                     u2195:	
  9092  0F76  36C2               	lsrf	___ftadd@f1+2,f
  9093  0F77  0CC1               	rrf	___ftadd@f1+1,f
  9094  0F78  0CC0               	rrf	___ftadd@f1,f
  9095  0F79  0B89               	decfsz	9,f
  9096  0F7A  2F76               	goto	u2195
  9097  0F7B  3001               	movlw	1
  9098  0F7C  00C6               	movwf	??___ftadd
  9099  0F7D  0846               	movf	??___ftadd,w
  9100  0F7E  07CC               	addwf	___ftadd@exp1,f
  9101  0F7F                     l2251:	
  9102  0F7F  084C               	movf	___ftadd@exp1,w
  9103  0F80  064B               	xorwf	___ftadd@exp2,w
  9104  0F81  1903               	btfsc	3,2
  9105  0F82  2FA9               	goto	l761
  9106  0F83  2F75               	goto	l2249
  9107  0F84                     l2253:	
  9108  0F84  084C               	movf	___ftadd@exp1,w
  9109  0F85  024B               	subwf	___ftadd@exp2,w
  9110  0F86  1803               	skipnc
  9111  0F87  2FA9               	goto	l761
  9112  0F88                     l2255:	
  9113  0F88  3001               	movlw	1
  9114  0F89                     u2225:	
  9115  0F89  35C0               	lslf	___ftadd@f1,f
  9116  0F8A  0DC1               	rlf	___ftadd@f1+1,f
  9117  0F8B  0DC2               	rlf	___ftadd@f1+2,f
  9118  0F8C  0B89               	decfsz	9,f
  9119  0F8D  2F89               	goto	u2225
  9120  0F8E  3001               	movlw	1
  9121  0F8F  02CC               	subwf	___ftadd@exp1,f
  9122  0F90  084B               	movf	___ftadd@exp2,w
  9123  0F91  064C               	xorwf	___ftadd@exp1,w
  9124  0F92  1903               	skipnz
  9125  0F93  2FA5               	goto	l2263
  9126  0F94  3001               	movlw	1
  9127  0F95  02CA               	subwf	___ftadd@sign,f
  9128  0F96  084A               	movf	___ftadd@sign,w
  9129  0F97  3907               	andlw	7
  9130  0F98  1903               	btfsc	3,2
  9131  0F99  2FA5               	goto	l2263
  9132  0F9A  2F88               	goto	l2255
  9133  0F9B                     l2261:	
  9134  0F9B  3001               	movlw	1
  9135  0F9C                     u2255:	
  9136  0F9C  36C5               	lsrf	___ftadd@f2+2,f
  9137  0F9D  0CC4               	rrf	___ftadd@f2+1,f
  9138  0F9E  0CC3               	rrf	___ftadd@f2,f
  9139  0F9F  0B89               	decfsz	9,f
  9140  0FA0  2F9C               	goto	u2255
  9141  0FA1  3001               	movlw	1
  9142  0FA2  00C6               	movwf	??___ftadd
  9143  0FA3  0846               	movf	??___ftadd,w
  9144  0FA4  07CB               	addwf	___ftadd@exp2,f
  9145  0FA5                     l2263:	
  9146  0FA5  084C               	movf	___ftadd@exp1,w
  9147  0FA6  064B               	xorwf	___ftadd@exp2,w
  9148  0FA7  1D03               	skipz
  9149  0FA8  2F9B               	goto	l2261
  9150  0FA9                     l761:	
  9151  0FA9  1FCA               	btfss	___ftadd@sign,7
  9152  0FAA  2FBB               	goto	l2267
  9153  0FAB  30FF               	movlw	255
  9154  0FAC  06C0               	xorwf	___ftadd@f1,f
  9155  0FAD  30FF               	movlw	255
  9156  0FAE  06C1               	xorwf	___ftadd@f1+1,f
  9157  0FAF  30FF               	movlw	255
  9158  0FB0  06C2               	xorwf	___ftadd@f1+2,f
  9159  0FB1  3001               	movlw	1
  9160  0FB2  07C0               	addwf	___ftadd@f1,f
  9161  0FB3  3000               	movlw	0
  9162  0FB4  1803               	skipnc
  9163  0FB5  3001               	movlw	1
  9164  0FB6  07C1               	addwf	___ftadd@f1+1,f
  9165  0FB7  3000               	movlw	0
  9166  0FB8  1803               	skipnc
  9167  0FB9  3001               	movlw	1
  9168  0FBA  07C2               	addwf	___ftadd@f1+2,f
  9169  0FBB                     l2267:	
  9170  0FBB  1F4A               	btfss	___ftadd@sign,6
  9171  0FBC  2FCD               	goto	l2271
  9172  0FBD  30FF               	movlw	255
  9173  0FBE  06C3               	xorwf	___ftadd@f2,f
  9174  0FBF  30FF               	movlw	255
  9175  0FC0  06C4               	xorwf	___ftadd@f2+1,f
  9176  0FC1  30FF               	movlw	255
  9177  0FC2  06C5               	xorwf	___ftadd@f2+2,f
  9178  0FC3  3001               	movlw	1
  9179  0FC4  07C3               	addwf	___ftadd@f2,f
  9180  0FC5  3000               	movlw	0
  9181  0FC6  1803               	skipnc
  9182  0FC7  3001               	movlw	1
  9183  0FC8  07C4               	addwf	___ftadd@f2+1,f
  9184  0FC9  3000               	movlw	0
  9185  0FCA  1803               	skipnc
  9186  0FCB  3001               	movlw	1
  9187  0FCC  07C5               	addwf	___ftadd@f2+2,f
  9188  0FCD                     l2271:	
  9189  0FCD  01CA               	clrf	___ftadd@sign
  9190  0FCE  0840               	movf	___ftadd@f1,w
  9191  0FCF  07C3               	addwf	___ftadd@f2,f
  9192  0FD0  0841               	movf	___ftadd@f1+1,w
  9193  0FD1  3DC4               	addwfc	___ftadd@f2+1,f
  9194  0FD2  0842               	movf	___ftadd@f1+2,w
  9195  0FD3  3DC5               	addwfc	___ftadd@f2+2,f
  9196  0FD4  1FC5               	btfss	___ftadd@f2+2,7
  9197  0FD5  2FE8               	goto	l2281
  9198  0FD6  30FF               	movlw	255
  9199  0FD7  06C3               	xorwf	___ftadd@f2,f
  9200  0FD8  30FF               	movlw	255
  9201  0FD9  06C4               	xorwf	___ftadd@f2+1,f
  9202  0FDA  30FF               	movlw	255
  9203  0FDB  06C5               	xorwf	___ftadd@f2+2,f
  9204  0FDC  3001               	movlw	1
  9205  0FDD  07C3               	addwf	___ftadd@f2,f
  9206  0FDE  3000               	movlw	0
  9207  0FDF  1803               	skipnc
  9208  0FE0  3001               	movlw	1
  9209  0FE1  07C4               	addwf	___ftadd@f2+1,f
  9210  0FE2  3000               	movlw	0
  9211  0FE3  1803               	skipnc
  9212  0FE4  3001               	movlw	1
  9213  0FE5  07C5               	addwf	___ftadd@f2+2,f
  9214  0FE6  01CA               	clrf	___ftadd@sign
  9215  0FE7  0ACA               	incf	___ftadd@sign,f
  9216  0FE8                     l2281:	
  9217  0FE8  0843               	movf	___ftadd@f2,w
  9218  0FE9  00F0               	movwf	___ftpack@arg
  9219  0FEA  0844               	movf	___ftadd@f2+1,w
  9220  0FEB  00F1               	movwf	___ftpack@arg+1
  9221  0FEC  0845               	movf	___ftadd@f2+2,w
  9222  0FED  00F2               	movwf	___ftpack@arg+2
  9223  0FEE  084C               	movf	___ftadd@exp1,w
  9224  0FEF  00C6               	movwf	??___ftadd
  9225  0FF0  0846               	movf	??___ftadd,w
  9226  0FF1  00F3               	movwf	___ftpack@exp
  9227  0FF2  084A               	movf	___ftadd@sign,w
  9228  0FF3  00C7               	movwf	??___ftadd+1
  9229  0FF4  0847               	movf	??___ftadd+1,w
  9230  0FF5  00F4               	movwf	___ftpack@sign
  9231  0FF6  3197  271A         	fcall	___ftpack
  9232  0FF8  0870               	movf	?___ftpack,w
  9233  0FF9  0020               	movlb	0	; select bank0
  9234  0FFA  00C0               	movwf	?___ftadd
  9235  0FFB  0871               	movf	?___ftpack+1,w
  9236  0FFC  00C1               	movwf	?___ftadd+1
  9237  0FFD  0872               	movf	?___ftpack+2,w
  9238  0FFE  00C2               	movwf	?___ftadd+2
  9239  0FFF  0008               	return
  9240  1000                     __end_of___ftadd:	
  9241                           
  9242                           	psect	text8
  9243  096C                     __ptext8:	
  9244 ;; *************** function _readButton *****************
  9245 ;; Defined at:
  9246 ;;		line 9 in file "buttons.c"
  9247 ;; Parameters:    Size  Location     Type
  9248 ;;		None
  9249 ;; Auto vars:     Size  Location     Type
  9250 ;;		None
  9251 ;; Return value:  Size  Location     Type
  9252 ;;                  1    wreg      unsigned char 
  9253 ;; Registers used:
  9254 ;;		wreg, status,2, status,0, pclath, cstack
  9255 ;; Tracked objects:
  9256 ;;		On entry : 0/0
  9257 ;;		On exit  : 0/0
  9258 ;;		Unchanged: 0/0
  9259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9262 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9263 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9264 ;;Total ram usage:        2 bytes
  9265 ;; Hardware stack levels used:    1
  9266 ;; Hardware stack levels required when called:    1
  9267 ;; This function calls:
  9268 ;;		_ADCRead
  9269 ;; This function is called by:
  9270 ;;		_main
  9271 ;; This function uses a non-reentrant model
  9272 ;;
  9273                           
  9274                           
  9275                           ;psect for function _readButton
  9276  096C                     _readButton:	
  9277                           
  9278                           ;buttons.c: 11: readButtons = ADCRead(11);
  9279                           
  9280                           ;incstack = 0
  9281                           ; Regs used in _readButton: [wreg+status,2+status,0+pclath+cstack]
  9282  096C  300B               	movlw	11
  9283  096D  3193  2328  3189   	fcall	_ADCRead
  9284  0970  0871               	movf	?_ADCRead+1,w
  9285  0971  0021               	movlb	1	; select bank1
  9286  0972  00B8               	movwf	(_readButtons+1)^(0+128)
  9287  0973  0870               	movf	?_ADCRead,w
  9288  0974  00B7               	movwf	_readButtons^(0+128)
  9289                           
  9290                           ;buttons.c: 13: if(readButtons >= 365 && readButtons < 405)
  9291  0975  0838               	movf	(_readButtons+1)^(0+128),w
  9292  0976  3A80               	xorlw	128
  9293  0977  00F4               	movwf	??_readButton
  9294  0978  3081               	movlw	129
  9295  0979  0274               	subwf	??_readButton,w
  9296  097A  1D03               	skipz
  9297  097B  297E               	goto	u3405
  9298  097C  306D               	movlw	109
  9299  097D  0237               	subwf	_readButtons^(0+128),w
  9300  097E                     u3405:	
  9301  097E  1C03               	skipc
  9302  097F  2990               	goto	l2965
  9303  0980  0021               	movlb	1	; select bank1
  9304  0981  0838               	movf	(_readButtons+1)^(0+128),w
  9305  0982  3A80               	xorlw	128
  9306  0983  00F4               	movwf	??_readButton
  9307  0984  3081               	movlw	129
  9308  0985  0274               	subwf	??_readButton,w
  9309  0986  1D03               	skipz
  9310  0987  298A               	goto	u3415
  9311  0988  3095               	movlw	149
  9312  0989  0237               	subwf	_readButtons^(0+128),w
  9313  098A                     u3415:	
  9314  098A  1803               	skipnc
  9315  098B  2990               	goto	l2965
  9316                           
  9317                           ;buttons.c: 14: {
  9318                           ;buttons.c: 15: button = 1;
  9319  098C  0020               	movlb	0	; select bank0
  9320  098D  01EC               	clrf	_button
  9321  098E  0AEC               	incf	_button,f
  9322                           
  9323                           ;buttons.c: 16: }
  9324  098F  29BE               	goto	l2977
  9325  0990                     l2965:	
  9326                           
  9327                           ;buttons.c: 18: else if(readButtons >= 535 && readButtons < 590)
  9328  0990  0021               	movlb	1	; select bank1
  9329  0991  0838               	movf	(_readButtons+1)^(0+128),w
  9330  0992  3A80               	xorlw	128
  9331  0993  00F4               	movwf	??_readButton
  9332  0994  3082               	movlw	130
  9333  0995  0274               	subwf	??_readButton,w
  9334  0996  1D03               	skipz
  9335  0997  299A               	goto	u3425
  9336  0998  3017               	movlw	23
  9337  0999  0237               	subwf	_readButtons^(0+128),w
  9338  099A                     u3425:	
  9339  099A  1C03               	skipc
  9340  099B  29AA               	goto	l2971
  9341  099C  0021               	movlb	1	; select bank1
  9342  099D  0838               	movf	(_readButtons+1)^(0+128),w
  9343  099E  3A80               	xorlw	128
  9344  099F  00F4               	movwf	??_readButton
  9345  09A0  3082               	movlw	130
  9346  09A1  0274               	subwf	??_readButton,w
  9347  09A2  1D03               	skipz
  9348  09A3  29A6               	goto	u3435
  9349  09A4  304E               	movlw	78
  9350  09A5  0237               	subwf	_readButtons^(0+128),w
  9351  09A6                     u3435:	
  9352  09A6  1803               	skipnc
  9353  09A7  29AA               	goto	l2971
  9354                           
  9355                           ;buttons.c: 19: {
  9356                           ;buttons.c: 20: button = 2;
  9357  09A8  3002               	movlw	2
  9358  09A9  29B7               	goto	L4
  9359  09AA                     l2971:	
  9360                           ;buttons.c: 21: }
  9361                           
  9362                           
  9363                           ;buttons.c: 23: else if(readButtons > 745)
  9364  09AA  0021               	movlb	1	; select bank1
  9365  09AB  0838               	movf	(_readButtons+1)^(0+128),w
  9366  09AC  3A80               	xorlw	128
  9367  09AD  00F4               	movwf	??_readButton
  9368  09AE  3082               	movlw	130
  9369  09AF  0274               	subwf	??_readButton,w
  9370  09B0  1D03               	skipz
  9371  09B1  29B4               	goto	u3445
  9372  09B2  30EA               	movlw	234
  9373  09B3  0237               	subwf	_readButtons^(0+128),w
  9374  09B4                     u3445:	
  9375  09B4  1C03               	skipc
  9376  09B5  29BC               	goto	l2975
  9377                           
  9378                           ;buttons.c: 24: {
  9379                           ;buttons.c: 25: button = 3;
  9380  09B6  3003               	movlw	3
  9381  09B7                     L4:	
  9382  09B7  00F4               	movwf	??_readButton
  9383  09B8  0874               	movf	??_readButton,w
  9384  09B9  0020               	movlb	0	; select bank0
  9385  09BA  00EC               	movwf	_button
  9386                           
  9387                           ;buttons.c: 26: }
  9388  09BB  29BE               	goto	l2977
  9389  09BC                     l2975:	
  9390                           
  9391                           ;buttons.c: 28: else
  9392                           ;buttons.c: 29: {
  9393                           ;buttons.c: 30: button = 0;
  9394  09BC  0020               	movlb	0	; select bank0
  9395  09BD  01EC               	clrf	_button
  9396  09BE                     l2977:	
  9397                           
  9398                           ;buttons.c: 31: }
  9399                           ;buttons.c: 33: if (button != 0)
  9400  09BE  086C               	movf	_button,w
  9401  09BF  1903               	btfsc	3,2
  9402  09C0  29EE               	goto	l2997
  9403                           
  9404                           ;buttons.c: 34: {
  9405                           ;buttons.c: 35: if (button != lastButton)
  9406  09C1  086C               	movf	_button,w
  9407  09C2  0021               	movlb	1	; select bank1
  9408  09C3  063E               	xorwf	_lastButton^(0+128),w
  9409  09C4  1903               	skipnz
  9410  09C5  29CD               	goto	l2985
  9411                           
  9412                           ;buttons.c: 36: {
  9413                           ;buttons.c: 37: lastButton = button;
  9414  09C6  0020               	movlb	0	; select bank0
  9415  09C7  086C               	movf	_button,w
  9416  09C8  00F4               	movwf	??_readButton
  9417  09C9  0874               	movf	??_readButton,w
  9418  09CA  0021               	movlb	1	; select bank1
  9419  09CB  00BE               	movwf	_lastButton^(0+128)
  9420  09CC  29EF               	goto	L5
  9421  09CD                     l2985:	
  9422                           ;buttons.c: 39: }
  9423                           
  9424                           ;buttons.c: 38: j = 0;
  9425                           
  9426                           
  9427                           ;buttons.c: 40: else
  9428                           ;buttons.c: 41: {
  9429                           ;buttons.c: 42: j += 1;
  9430  09CD  3001               	movlw	1
  9431  09CE  00F4               	movwf	??_readButton
  9432  09CF  0874               	movf	??_readButton,w
  9433  09D0  07BD               	addwf	_j^(0+128),f
  9434                           
  9435                           ;buttons.c: 44: if(j == 1)
  9436  09D1  033D               	decf	_j^(0+128),w
  9437  09D2  1D03               	btfss	3,2
  9438  09D3  29D6               	goto	l2991
  9439                           
  9440                           ;buttons.c: 45: {
  9441                           ;buttons.c: 46: return (lastButton);
  9442  09D4  083E               	movf	_lastButton^(0+128),w
  9443  09D5  0008               	return
  9444  09D6                     l2991:	
  9445                           
  9446                           ;buttons.c: 47: }
  9447                           ;buttons.c: 49: if (j >10)
  9448  09D6  083D               	movf	_j^(0+128),w
  9449  09D7  3A80               	xorlw	128
  9450  09D8  3E75               	addlw	-139
  9451  09D9  1C03               	skipc
  9452  09DA  29F0               	goto	l2999
  9453                           
  9454                           ;buttons.c: 50: {
  9455                           ;buttons.c: 51: _delay((unsigned long)((25)*(32000000/4000.0)));
  9456  09DB  3002               	movlw	2
  9457  09DC  00F5               	movwf	??_readButton+1
  9458  09DD  3004               	movlw	4
  9459  09DE  00F4               	movwf	??_readButton
  9460  09DF  30BA               	movlw	186
  9461  09E0                     u3767:	
  9462  09E0  0B89               	decfsz	9,f
  9463  09E1  29E0               	goto	u3767
  9464  09E2  0BF4               	decfsz	??_readButton,f
  9465  09E3  29E0               	goto	u3767
  9466  09E4  0BF5               	decfsz	??_readButton+1,f
  9467  09E5  29E0               	goto	u3767
  9468  09E6  3200               	nop2
  9469                           
  9470                           ;buttons.c: 52: j = 10;
  9471  09E7  300A               	movlw	10
  9472  09E8  00F4               	movwf	??_readButton
  9473  09E9  0874               	movf	??_readButton,w
  9474  09EA  0021               	movlb	1	; select bank1
  9475  09EB  00BD               	movwf	_j^(0+128)
  9476                           
  9477                           ;buttons.c: 53: return (lastButton);
  9478  09EC  083E               	movf	_lastButton^(0+128),w
  9479  09ED  0008               	return
  9480  09EE                     l2997:	
  9481                           ;buttons.c: 54: }
  9482                           ;buttons.c: 55: }
  9483                           ;buttons.c: 56: goto end;
  9484                           
  9485                           
  9486                           ;buttons.c: 57: }
  9487                           ;buttons.c: 59: j = 0;
  9488  09EE  0021               	movlb	1	; select bank1
  9489  09EF                     L5:	
  9490  09EF  01BD               	clrf	_j^(0+128)
  9491  09F0                     l2999:	
  9492                           ;buttons.c: 61: end:
  9493                           
  9494                           
  9495                           ;buttons.c: 63: return (0);
  9496  09F0  3000               	movlw	0
  9497  09F1  0008               	return
  9498  09F2                     __end_of_readButton:	
  9499                           
  9500                           	psect	text9
  9501  013B                     __ptext9:	
  9502 ;; *************** function _readAnalog *****************
  9503 ;; Defined at:
  9504 ;;		line 49 in file "adc.c"
  9505 ;; Parameters:    Size  Location     Type
  9506 ;;  channel         2    6[BANK0 ] unsigned int 
  9507 ;; Auto vars:     Size  Location     Type
  9508 ;;  value           2   28[BANK0 ] int 
  9509 ;;  analog_chann    2   26[BANK0 ] unsigned int 
  9510 ;; Return value:  Size  Location     Type
  9511 ;;                  2    6[BANK0 ] int 
  9512 ;; Registers used:
  9513 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9514 ;; Tracked objects:
  9515 ;;		On entry : 0/0
  9516 ;;		On exit  : 0/0
  9517 ;;		Unchanged: 0/0
  9518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9519 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9520 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9521 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9522 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9523 ;;Total ram usage:       24 bytes
  9524 ;; Hardware stack levels used:    1
  9525 ;; Hardware stack levels required when called:    1
  9526 ;; This function calls:
  9527 ;;		_ADCRead
  9528 ;;		___aldiv
  9529 ;;		___wmul
  9530 ;; This function is called by:
  9531 ;;		_main
  9532 ;; This function uses a non-reentrant model
  9533 ;;
  9534                           
  9535                           
  9536                           ;psect for function _readAnalog
  9537  013B                     _readAnalog:	
  9538                           
  9539                           ;adc.c: 51: int16_t value;
  9540                           ;adc.c: 53: uint16_t analog_channel = channels[channel];
  9541                           
  9542                           ;incstack = 0
  9543                           ; Regs used in _readAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9544  013B  0020               	movlb	0	; select bank0
  9545  013C  3526               	lslf	readAnalog@channel,w
  9546  013D  3E50               	addlw	(low (_channels| (0+256)))& (0+255)
  9547  013E  0086               	movwf	6
  9548  013F  3001               	movlw	1	; select bank2/3
  9549  0140  0087               	movwf	7
  9550  0141  3F40               	moviw [0]fsr1
  9551  0142  00BA               	movwf	readAnalog@analog_channel
  9552  0143  3F41               	moviw [1]fsr1
  9553  0144  00BB               	movwf	readAnalog@analog_channel+1
  9554                           
  9555                           ;adc.c: 55: value = ADCRead(analog_channel);
  9556  0145  083A               	movf	readAnalog@analog_channel,w
  9557  0146  3193  2328  3181   	fcall	_ADCRead
  9558  0149  0871               	movf	?_ADCRead+1,w
  9559  014A  0020               	movlb	0	; select bank0
  9560  014B  00BD               	movwf	readAnalog@value+1
  9561  014C  0870               	movf	?_ADCRead,w
  9562  014D  00BC               	movwf	readAnalog@value
  9563                           
  9564                           ;adc.c: 57: totals[channel] = totals[channel]-samples[channel][sampleIndex];
  9565  014E  0826               	movf	readAnalog@channel,w
  9566  014F  00A8               	movwf	??_readAnalog
  9567  0150  3001               	movlw	1
  9568  0151                     u3015:	
  9569  0151  35A8               	lslf	??_readAnalog,f
  9570  0152  3EFF               	addlw	-1
  9571  0153  1D03               	skipz
  9572  0154  2951               	goto	u3015
  9573  0155  3528               	lslf	??_readAnalog,w
  9574  0156  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9575  0157  0086               	movwf	6
  9576  0158  3001               	movlw	1	; select bank2/3
  9577  0159  0087               	movwf	7
  9578  015A  3F40               	moviw [0]fsr1
  9579  015B  00A9               	movwf	??_readAnalog+1
  9580  015C  3F41               	moviw [1]fsr1
  9581  015D  00AA               	movwf	??_readAnalog+2
  9582  015E  3F42               	moviw [2]fsr1
  9583  015F  00AB               	movwf	??_readAnalog+3
  9584  0160  3F43               	moviw [3]fsr1
  9585  0161  00AC               	movwf	??_readAnalog+4
  9586  0162  0021               	movlb	1	; select bank1
  9587  0163  083C               	movf	(_sampleIndex+1)^(0+128),w
  9588  0164  0020               	movlb	0	; select bank0
  9589  0165  00AE               	movwf	??_readAnalog+6
  9590  0166  0021               	movlb	1	; select bank1
  9591  0167  083B               	movf	_sampleIndex^(0+128),w
  9592  0168  0020               	movlb	0	; select bank0
  9593  0169  00AD               	movwf	??_readAnalog+5
  9594  016A  35AD               	lslf	??_readAnalog+5,f
  9595  016B  0DAE               	rlf	??_readAnalog+6,f
  9596  016C  0827               	movf	readAnalog@channel+1,w
  9597  016D  00FA               	movwf	___wmul@multiplier+1
  9598  016E  0826               	movf	readAnalog@channel,w
  9599  016F  00F9               	movwf	___wmul@multiplier
  9600  0170  3018               	movlw	24
  9601  0171  00FB               	movwf	___wmul@multiplicand
  9602  0172  3000               	movlw	0
  9603  0173  00FC               	movwf	___wmul@multiplicand+1
  9604  0174  3193  237F  3181   	fcall	___wmul
  9605  0177  3030               	movlw	48
  9606  0178  0020               	movlb	0	; select bank0
  9607  0179  00AF               	movwf	??_readAnalog+7
  9608  017A  3023               	movlw	35
  9609  017B  00B0               	movwf	??_readAnalog+8
  9610  017C  0879               	movf	?___wmul,w
  9611  017D  072F               	addwf	??_readAnalog+7,w
  9612  017E  00B1               	movwf	??_readAnalog+9
  9613  017F  087A               	movf	?___wmul+1,w
  9614  0180  3D30               	addwfc	??_readAnalog+8,w
  9615  0181  00B2               	movwf	??_readAnalog+10
  9616  0182  082D               	movf	??_readAnalog+5,w
  9617  0183  0731               	addwf	??_readAnalog+9,w
  9618  0184  0086               	movwf	6
  9619  0185  082E               	movf	??_readAnalog+6,w
  9620  0186  3D32               	addwfc	??_readAnalog+10,w
  9621  0187  0087               	movwf	7
  9622  0188  3F40               	moviw [0]fsr1
  9623  0189  00B3               	movwf	??_readAnalog+11
  9624  018A  3F41               	moviw [1]fsr1
  9625  018B  00B4               	movwf	??_readAnalog+12
  9626  018C  0833               	movf	??_readAnalog+11,w
  9627  018D  00B5               	movwf	??_readAnalog+13
  9628  018E  0834               	movf	??_readAnalog+12,w
  9629  018F  00B6               	movwf	??_readAnalog+14
  9630  0190  3000               	movlw	0
  9631  0191  1BB6               	btfsc	??_readAnalog+14,7
  9632  0192  30FF               	movlw	255
  9633  0193  00B7               	movwf	??_readAnalog+15
  9634  0194  00B8               	movwf	??_readAnalog+16
  9635  0195  09B5               	comf	??_readAnalog+13,f
  9636  0196  09B6               	comf	??_readAnalog+14,f
  9637  0197  09B7               	comf	??_readAnalog+15,f
  9638  0198  09B8               	comf	??_readAnalog+16,f
  9639  0199  0AB5               	incf	??_readAnalog+13,f
  9640  019A  1903               	skipnz
  9641  019B  0AB6               	incf	??_readAnalog+14,f
  9642  019C  1903               	skipnz
  9643  019D  0AB7               	incf	??_readAnalog+15,f
  9644  019E  1903               	skipnz
  9645  019F  0AB8               	incf	??_readAnalog+16,f
  9646  01A0  0835               	movf	??_readAnalog+13,w
  9647  01A1  07A9               	addwf	??_readAnalog+1,f
  9648  01A2  0836               	movf	??_readAnalog+14,w
  9649  01A3  3DAA               	addwfc	??_readAnalog+2,f
  9650  01A4  0837               	movf	??_readAnalog+15,w
  9651  01A5  3DAB               	addwfc	??_readAnalog+3,f
  9652  01A6  0838               	movf	??_readAnalog+16,w
  9653  01A7  3DAC               	addwfc	??_readAnalog+4,f
  9654  01A8  0826               	movf	readAnalog@channel,w
  9655  01A9  00B9               	movwf	??_readAnalog+17
  9656  01AA  3001               	movlw	1
  9657  01AB                     u3025:	
  9658  01AB  35B9               	lslf	??_readAnalog+17,f
  9659  01AC  3EFF               	addlw	-1
  9660  01AD  1D03               	skipz
  9661  01AE  29AB               	goto	u3025
  9662  01AF  3539               	lslf	??_readAnalog+17,w
  9663  01B0  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9664  01B1  0086               	movwf	6
  9665  01B2  3001               	movlw	1	; select bank2/3
  9666  01B3  0087               	movwf	7
  9667  01B4  0829               	movf	??_readAnalog+1,w
  9668  01B5  3FC0               	movwi [0]fsr1
  9669  01B6  082A               	movf	??_readAnalog+2,w
  9670  01B7  3FC1               	movwi [1]fsr1
  9671  01B8  082B               	movf	??_readAnalog+3,w
  9672  01B9  3FC2               	movwi [2]fsr1
  9673  01BA  082C               	movf	??_readAnalog+4,w
  9674  01BB  3FC3               	movwi [3]fsr1
  9675                           
  9676                           ;adc.c: 59: samples[channel][sampleIndex] = value;
  9677  01BC  0021               	movlb	1	; select bank1
  9678  01BD  083C               	movf	(_sampleIndex+1)^(0+128),w
  9679  01BE  0020               	movlb	0	; select bank0
  9680  01BF  00A9               	movwf	??_readAnalog+1
  9681  01C0  0021               	movlb	1	; select bank1
  9682  01C1  083B               	movf	_sampleIndex^(0+128),w
  9683  01C2  0020               	movlb	0	; select bank0
  9684  01C3  00A8               	movwf	??_readAnalog
  9685  01C4  35A8               	lslf	??_readAnalog,f
  9686  01C5  0DA9               	rlf	??_readAnalog+1,f
  9687  01C6  0827               	movf	readAnalog@channel+1,w
  9688  01C7  00FA               	movwf	___wmul@multiplier+1
  9689  01C8  0826               	movf	readAnalog@channel,w
  9690  01C9  00F9               	movwf	___wmul@multiplier
  9691  01CA  3018               	movlw	24
  9692  01CB  00FB               	movwf	___wmul@multiplicand
  9693  01CC  3000               	movlw	0
  9694  01CD  00FC               	movwf	___wmul@multiplicand+1
  9695  01CE  3193  237F  3181   	fcall	___wmul
  9696  01D1  3030               	movlw	48
  9697  01D2  0020               	movlb	0	; select bank0
  9698  01D3  00AA               	movwf	??_readAnalog+2
  9699  01D4  3023               	movlw	35
  9700  01D5  00AB               	movwf	??_readAnalog+3
  9701  01D6  0879               	movf	?___wmul,w
  9702  01D7  072A               	addwf	??_readAnalog+2,w
  9703  01D8  00AC               	movwf	??_readAnalog+4
  9704  01D9  087A               	movf	?___wmul+1,w
  9705  01DA  3D2B               	addwfc	??_readAnalog+3,w
  9706  01DB  00AD               	movwf	??_readAnalog+5
  9707  01DC  0828               	movf	??_readAnalog,w
  9708  01DD  072C               	addwf	??_readAnalog+4,w
  9709  01DE  0086               	movwf	6
  9710  01DF  0829               	movf	??_readAnalog+1,w
  9711  01E0  3D2D               	addwfc	??_readAnalog+5,w
  9712  01E1  0087               	movwf	7
  9713  01E2  083C               	movf	readAnalog@value,w
  9714  01E3  3FC0               	movwi [0]fsr1
  9715  01E4  083D               	movf	readAnalog@value+1,w
  9716  01E5  3FC1               	movwi [1]fsr1
  9717                           
  9718                           ;adc.c: 61: totals[channel] = totals[channel]+samples[channel][sampleIndex];
  9719  01E6  0826               	movf	readAnalog@channel,w
  9720  01E7  00A8               	movwf	??_readAnalog
  9721  01E8  3001               	movlw	1
  9722  01E9                     u3035:	
  9723  01E9  35A8               	lslf	??_readAnalog,f
  9724  01EA  3EFF               	addlw	-1
  9725  01EB  1D03               	skipz
  9726  01EC  29E9               	goto	u3035
  9727  01ED  3528               	lslf	??_readAnalog,w
  9728  01EE  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9729  01EF  0086               	movwf	6
  9730  01F0  3001               	movlw	1	; select bank2/3
  9731  01F1  0087               	movwf	7
  9732  01F2  3F40               	moviw [0]fsr1
  9733  01F3  00A9               	movwf	??_readAnalog+1
  9734  01F4  3F41               	moviw [1]fsr1
  9735  01F5  00AA               	movwf	??_readAnalog+2
  9736  01F6  3F42               	moviw [2]fsr1
  9737  01F7  00AB               	movwf	??_readAnalog+3
  9738  01F8  3F43               	moviw [3]fsr1
  9739  01F9  00AC               	movwf	??_readAnalog+4
  9740  01FA  0021               	movlb	1	; select bank1
  9741  01FB  083C               	movf	(_sampleIndex+1)^(0+128),w
  9742  01FC  0020               	movlb	0	; select bank0
  9743  01FD  00AE               	movwf	??_readAnalog+6
  9744  01FE  0021               	movlb	1	; select bank1
  9745  01FF  083B               	movf	_sampleIndex^(0+128),w
  9746  0200  0020               	movlb	0	; select bank0
  9747  0201  00AD               	movwf	??_readAnalog+5
  9748  0202  35AD               	lslf	??_readAnalog+5,f
  9749  0203  0DAE               	rlf	??_readAnalog+6,f
  9750  0204  0827               	movf	readAnalog@channel+1,w
  9751  0205  00FA               	movwf	___wmul@multiplier+1
  9752  0206  0826               	movf	readAnalog@channel,w
  9753  0207  00F9               	movwf	___wmul@multiplier
  9754  0208  3018               	movlw	24
  9755  0209  00FB               	movwf	___wmul@multiplicand
  9756  020A  3000               	movlw	0
  9757  020B  00FC               	movwf	___wmul@multiplicand+1
  9758  020C  3193  237F  3181   	fcall	___wmul
  9759  020F  3030               	movlw	48
  9760  0210  0020               	movlb	0	; select bank0
  9761  0211  00AF               	movwf	??_readAnalog+7
  9762  0212  3023               	movlw	35
  9763  0213  00B0               	movwf	??_readAnalog+8
  9764  0214  0879               	movf	?___wmul,w
  9765  0215  072F               	addwf	??_readAnalog+7,w
  9766  0216  00B1               	movwf	??_readAnalog+9
  9767  0217  087A               	movf	?___wmul+1,w
  9768  0218  3D30               	addwfc	??_readAnalog+8,w
  9769  0219  00B2               	movwf	??_readAnalog+10
  9770  021A  082D               	movf	??_readAnalog+5,w
  9771  021B  0731               	addwf	??_readAnalog+9,w
  9772  021C  0086               	movwf	6
  9773  021D  082E               	movf	??_readAnalog+6,w
  9774  021E  3D32               	addwfc	??_readAnalog+10,w
  9775  021F  0087               	movwf	7
  9776  0220  3F40               	moviw [0]fsr1
  9777  0221  00B3               	movwf	??_readAnalog+11
  9778  0222  3F41               	moviw [1]fsr1
  9779  0223  00B4               	movwf	??_readAnalog+12
  9780  0224  0833               	movf	??_readAnalog+11,w
  9781  0225  00B5               	movwf	??_readAnalog+13
  9782  0226  0834               	movf	??_readAnalog+12,w
  9783  0227  00B6               	movwf	??_readAnalog+14
  9784  0228  3000               	movlw	0
  9785  0229  1BB6               	btfsc	??_readAnalog+14,7
  9786  022A  30FF               	movlw	255
  9787  022B  00B7               	movwf	??_readAnalog+15
  9788  022C  00B8               	movwf	??_readAnalog+16
  9789  022D  0835               	movf	??_readAnalog+13,w
  9790  022E  07A9               	addwf	??_readAnalog+1,f
  9791  022F  0836               	movf	??_readAnalog+14,w
  9792  0230  3DAA               	addwfc	??_readAnalog+2,f
  9793  0231  0837               	movf	??_readAnalog+15,w
  9794  0232  3DAB               	addwfc	??_readAnalog+3,f
  9795  0233  0838               	movf	??_readAnalog+16,w
  9796  0234  3DAC               	addwfc	??_readAnalog+4,f
  9797  0235  0826               	movf	readAnalog@channel,w
  9798  0236  00B9               	movwf	??_readAnalog+17
  9799  0237  3001               	movlw	1
  9800  0238                     u3045:	
  9801  0238  35B9               	lslf	??_readAnalog+17,f
  9802  0239  3EFF               	addlw	-1
  9803  023A  1D03               	skipz
  9804  023B  2A38               	goto	u3045
  9805  023C  3539               	lslf	??_readAnalog+17,w
  9806  023D  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9807  023E  0086               	movwf	6
  9808  023F  3001               	movlw	1	; select bank2/3
  9809  0240  0087               	movwf	7
  9810  0241  0829               	movf	??_readAnalog+1,w
  9811  0242  3FC0               	movwi [0]fsr1
  9812  0243  082A               	movf	??_readAnalog+2,w
  9813  0244  3FC1               	movwi [1]fsr1
  9814  0245  082B               	movf	??_readAnalog+3,w
  9815  0246  3FC2               	movwi [2]fsr1
  9816  0247  082C               	movf	??_readAnalog+4,w
  9817  0248  3FC3               	movwi [3]fsr1
  9818                           
  9819                           ;adc.c: 63: if(channel>=(8-1))
  9820  0249  3000               	movlw	0
  9821  024A  0227               	subwf	readAnalog@channel+1,w
  9822  024B  3007               	movlw	7
  9823  024C  1903               	skipnz
  9824  024D  0226               	subwf	readAnalog@channel,w
  9825  024E  1C03               	skipc
  9826  024F  2A5E               	goto	l2809
  9827                           
  9828                           ;adc.c: 64: {
  9829                           ;adc.c: 65: sampleIndex+=1;
  9830  0250  3001               	movlw	1
  9831  0251  0021               	movlb	1	; select bank1
  9832  0252  07BB               	addwf	_sampleIndex^(0+128),f
  9833  0253  3000               	movlw	0
  9834  0254  3DBC               	addwfc	(_sampleIndex+1)^(0+128),f
  9835                           
  9836                           ;adc.c: 66: if(sampleIndex >= 12)sampleIndex = 0;
  9837  0255  3000               	movlw	0
  9838  0256  023C               	subwf	(_sampleIndex+1)^(0+128),w
  9839  0257  300C               	movlw	12
  9840  0258  1903               	skipnz
  9841  0259  023B               	subwf	_sampleIndex^(0+128),w
  9842  025A  1C03               	skipc
  9843  025B  2A5E               	goto	l2809
  9844  025C  01BB               	clrf	_sampleIndex^(0+128)
  9845  025D  01BC               	clrf	(_sampleIndex+1)^(0+128)
  9846  025E                     l2809:	
  9847                           
  9848                           ;adc.c: 67: }
  9849                           ;adc.c: 69: value = totals[channel]/12;
  9850  025E  3000               	movlw	0
  9851  025F  00F3               	movwf	___aldiv@divisor+3
  9852  0260  3000               	movlw	0
  9853  0261  00F2               	movwf	___aldiv@divisor+2
  9854  0262  3000               	movlw	0
  9855  0263  00F1               	movwf	___aldiv@divisor+1
  9856  0264  300C               	movlw	12
  9857  0265  00F0               	movwf	___aldiv@divisor
  9858  0266  0020               	movlb	0	; select bank0
  9859  0267  0826               	movf	readAnalog@channel,w
  9860  0268  00A8               	movwf	??_readAnalog
  9861  0269  3001               	movlw	1
  9862  026A                     u3075:	
  9863  026A  35A8               	lslf	??_readAnalog,f
  9864  026B  3EFF               	addlw	-1
  9865  026C  1D03               	skipz
  9866  026D  2A6A               	goto	u3075
  9867  026E  3528               	lslf	??_readAnalog,w
  9868  026F  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9869  0270  0086               	movwf	6
  9870  0271  3001               	movlw	1	; select bank2/3
  9871  0272  0087               	movwf	7
  9872  0273  3F40               	moviw [0]fsr1
  9873  0274  00F4               	movwf	___aldiv@dividend
  9874  0275  3F41               	moviw [1]fsr1
  9875  0276  00F5               	movwf	___aldiv@dividend+1
  9876  0277  3F42               	moviw [2]fsr1
  9877  0278  00F6               	movwf	___aldiv@dividend+2
  9878  0279  3F43               	moviw [3]fsr1
  9879  027A  00F7               	movwf	___aldiv@dividend+3
  9880  027B  3197  277E         	fcall	___aldiv
  9881  027D  0871               	movf	?___aldiv+1,w
  9882  027E  0020               	movlb	0	; select bank0
  9883  027F  00BD               	movwf	readAnalog@value+1
  9884  0280  0870               	movf	?___aldiv,w
  9885  0281  00BC               	movwf	readAnalog@value
  9886                           
  9887                           ;adc.c: 71: return value;
  9888  0282  083D               	movf	readAnalog@value+1,w
  9889  0283  00A7               	movwf	?_readAnalog+1
  9890  0284  083C               	movf	readAnalog@value,w
  9891  0285  00A6               	movwf	?_readAnalog
  9892  0286  0008               	return
  9893  0287                     __end_of_readAnalog:	
  9894                           
  9895                           	psect	text10
  9896  177E                     __ptext10:	
  9897 ;; *************** function ___aldiv *****************
  9898 ;; Defined at:
  9899 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  9900 ;; Parameters:    Size  Location     Type
  9901 ;;  divisor         4    0[COMMON] long 
  9902 ;;  dividend        4    4[COMMON] long 
  9903 ;; Auto vars:     Size  Location     Type
  9904 ;;  quotient        4    2[BANK0 ] long 
  9905 ;;  sign            1    1[BANK0 ] unsigned char 
  9906 ;;  counter         1    0[BANK0 ] unsigned char 
  9907 ;; Return value:  Size  Location     Type
  9908 ;;                  4    0[COMMON] long 
  9909 ;; Registers used:
  9910 ;;		wreg, status,2, status,0
  9911 ;; Tracked objects:
  9912 ;;		On entry : 0/0
  9913 ;;		On exit  : 0/0
  9914 ;;		Unchanged: 0/0
  9915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9916 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9917 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9918 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9919 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9920 ;;Total ram usage:       15 bytes
  9921 ;; Hardware stack levels used:    1
  9922 ;; This function calls:
  9923 ;;		Nothing
  9924 ;; This function is called by:
  9925 ;;		_readAnalog
  9926 ;; This function uses a non-reentrant model
  9927 ;;
  9928                           
  9929                           
  9930                           ;psect for function ___aldiv
  9931  177E                     ___aldiv:	
  9932                           
  9933                           ;incstack = 0
  9934                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9935  177E  0020               	movlb	0	; select bank0
  9936  177F  01A1               	clrf	___aldiv@sign
  9937  1780  1FF3               	btfss	___aldiv@divisor+3,7
  9938  1781  2F8F               	goto	l624
  9939  1782  09F0               	comf	___aldiv@divisor,f
  9940  1783  09F1               	comf	___aldiv@divisor+1,f
  9941  1784  09F2               	comf	___aldiv@divisor+2,f
  9942  1785  09F3               	comf	___aldiv@divisor+3,f
  9943  1786  0AF0               	incf	___aldiv@divisor,f
  9944  1787  1903               	skipnz
  9945  1788  0AF1               	incf	___aldiv@divisor+1,f
  9946  1789  1903               	skipnz
  9947  178A  0AF2               	incf	___aldiv@divisor+2,f
  9948  178B  1903               	skipnz
  9949  178C  0AF3               	incf	___aldiv@divisor+3,f
  9950  178D  01A1               	clrf	___aldiv@sign
  9951  178E  0AA1               	incf	___aldiv@sign,f
  9952  178F                     l624:	
  9953  178F  1FF7               	btfss	___aldiv@dividend+3,7
  9954  1790  2FA0               	goto	l2649
  9955  1791  09F4               	comf	___aldiv@dividend,f
  9956  1792  09F5               	comf	___aldiv@dividend+1,f
  9957  1793  09F6               	comf	___aldiv@dividend+2,f
  9958  1794  09F7               	comf	___aldiv@dividend+3,f
  9959  1795  0AF4               	incf	___aldiv@dividend,f
  9960  1796  1903               	skipnz
  9961  1797  0AF5               	incf	___aldiv@dividend+1,f
  9962  1798  1903               	skipnz
  9963  1799  0AF6               	incf	___aldiv@dividend+2,f
  9964  179A  1903               	skipnz
  9965  179B  0AF7               	incf	___aldiv@dividend+3,f
  9966  179C  3001               	movlw	1
  9967  179D  00F8               	movwf	??___aldiv
  9968  179E  0878               	movf	??___aldiv,w
  9969  179F  06A1               	xorwf	___aldiv@sign,f
  9970  17A0                     l2649:	
  9971  17A0  3000               	movlw	0
  9972  17A1  00A5               	movwf	___aldiv@quotient+3
  9973  17A2  3000               	movlw	0
  9974  17A3  00A4               	movwf	___aldiv@quotient+2
  9975  17A4  3000               	movlw	0
  9976  17A5  00A3               	movwf	___aldiv@quotient+1
  9977  17A6  3000               	movlw	0
  9978  17A7  00A2               	movwf	___aldiv@quotient
  9979  17A8  0873               	movf	___aldiv@divisor+3,w
  9980  17A9  0472               	iorwf	___aldiv@divisor+2,w
  9981  17AA  0471               	iorwf	___aldiv@divisor+1,w
  9982  17AB  0470               	iorwf	___aldiv@divisor,w
  9983  17AC  1903               	skipnz
  9984  17AD  2FE9               	goto	l2671
  9985  17AE  01A0               	clrf	___aldiv@counter
  9986  17AF  0AA0               	incf	___aldiv@counter,f
  9987  17B0                     l2657:	
  9988  17B0  1BF3               	btfsc	___aldiv@divisor+3,7
  9989  17B1  2FBE               	goto	l2659
  9990  17B2  3001               	movlw	1
  9991  17B3                     u2695:	
  9992  17B3  35F0               	lslf	___aldiv@divisor,f
  9993  17B4  0DF1               	rlf	___aldiv@divisor+1,f
  9994  17B5  0DF2               	rlf	___aldiv@divisor+2,f
  9995  17B6  0DF3               	rlf	___aldiv@divisor+3,f
  9996  17B7  0B89               	decfsz	9,f
  9997  17B8  2FB3               	goto	u2695
  9998  17B9  3001               	movlw	1
  9999  17BA  00F8               	movwf	??___aldiv
 10000  17BB  0878               	movf	??___aldiv,w
 10001  17BC  07A0               	addwf	___aldiv@counter,f
 10002  17BD  2FB0               	goto	l2657
 10003  17BE                     l2659:	
 10004  17BE  3001               	movlw	1
 10005  17BF                     u2715:	
 10006  17BF  35A2               	lslf	___aldiv@quotient,f
 10007  17C0  0DA3               	rlf	___aldiv@quotient+1,f
 10008  17C1  0DA4               	rlf	___aldiv@quotient+2,f
 10009  17C2  0DA5               	rlf	___aldiv@quotient+3,f
 10010  17C3  0B89               	decfsz	9,f
 10011  17C4  2FBF               	goto	u2715
 10012  17C5  0873               	movf	___aldiv@divisor+3,w
 10013  17C6  0277               	subwf	___aldiv@dividend+3,w
 10014  17C7  1D03               	skipz
 10015  17C8  2FD3               	goto	u2725
 10016  17C9  0872               	movf	___aldiv@divisor+2,w
 10017  17CA  0276               	subwf	___aldiv@dividend+2,w
 10018  17CB  1D03               	skipz
 10019  17CC  2FD3               	goto	u2725
 10020  17CD  0871               	movf	___aldiv@divisor+1,w
 10021  17CE  0275               	subwf	___aldiv@dividend+1,w
 10022  17CF  1D03               	skipz
 10023  17D0  2FD3               	goto	u2725
 10024  17D1  0870               	movf	___aldiv@divisor,w
 10025  17D2  0274               	subwf	___aldiv@dividend,w
 10026  17D3                     u2725:	
 10027  17D3  1C03               	skipc
 10028  17D4  2FDE               	goto	l2667
 10029  17D5  0870               	movf	___aldiv@divisor,w
 10030  17D6  02F4               	subwf	___aldiv@dividend,f
 10031  17D7  0871               	movf	___aldiv@divisor+1,w
 10032  17D8  3BF5               	subwfb	___aldiv@dividend+1,f
 10033  17D9  0872               	movf	___aldiv@divisor+2,w
 10034  17DA  3BF6               	subwfb	___aldiv@dividend+2,f
 10035  17DB  0873               	movf	___aldiv@divisor+3,w
 10036  17DC  3BF7               	subwfb	___aldiv@dividend+3,f
 10037  17DD  1422               	bsf	___aldiv@quotient,0
 10038  17DE                     l2667:	
 10039  17DE  3001               	movlw	1
 10040  17DF                     u2735:	
 10041  17DF  36F3               	lsrf	___aldiv@divisor+3,f
 10042  17E0  0CF2               	rrf	___aldiv@divisor+2,f
 10043  17E1  0CF1               	rrf	___aldiv@divisor+1,f
 10044  17E2  0CF0               	rrf	___aldiv@divisor,f
 10045  17E3  0B89               	decfsz	9,f
 10046  17E4  2FDF               	goto	u2735
 10047  17E5  3001               	movlw	1
 10048  17E6  02A0               	subwf	___aldiv@counter,f
 10049  17E7  1D03               	btfss	3,2
 10050  17E8  2FBE               	goto	l2659
 10051  17E9                     l2671:	
 10052  17E9  0821               	movf	___aldiv@sign,w
 10053  17EA  1903               	btfsc	3,2
 10054  17EB  2FF7               	goto	l2675
 10055  17EC  09A2               	comf	___aldiv@quotient,f
 10056  17ED  09A3               	comf	___aldiv@quotient+1,f
 10057  17EE  09A4               	comf	___aldiv@quotient+2,f
 10058  17EF  09A5               	comf	___aldiv@quotient+3,f
 10059  17F0  0AA2               	incf	___aldiv@quotient,f
 10060  17F1  1903               	skipnz
 10061  17F2  0AA3               	incf	___aldiv@quotient+1,f
 10062  17F3  1903               	skipnz
 10063  17F4  0AA4               	incf	___aldiv@quotient+2,f
 10064  17F5  1903               	skipnz
 10065  17F6  0AA5               	incf	___aldiv@quotient+3,f
 10066  17F7                     l2675:	
 10067  17F7  0825               	movf	___aldiv@quotient+3,w
 10068  17F8  00F3               	movwf	?___aldiv+3
 10069  17F9  0824               	movf	___aldiv@quotient+2,w
 10070  17FA  00F2               	movwf	?___aldiv+2
 10071  17FB  0823               	movf	___aldiv@quotient+1,w
 10072  17FC  00F1               	movwf	?___aldiv+1
 10073  17FD  0822               	movf	___aldiv@quotient,w
 10074  17FE  00F0               	movwf	?___aldiv
 10075  17FF  0008               	return
 10076  1800                     __end_of___aldiv:	
 10077                           
 10078                           	psect	text11
 10079  1328                     __ptext11:	
 10080 ;; *************** function _ADCRead *****************
 10081 ;; Defined at:
 10082 ;;		line 19 in file "adc.c"
 10083 ;; Parameters:    Size  Location     Type
 10084 ;;  channel         1    wreg     enum E14259
 10085 ;; Auto vars:     Size  Location     Type
 10086 ;;  channel         1    3[COMMON] enum E14259
 10087 ;; Return value:  Size  Location     Type
 10088 ;;                  2    0[COMMON] int 
 10089 ;; Registers used:
 10090 ;;		wreg
 10091 ;; Tracked objects:
 10092 ;;		On entry : 0/0
 10093 ;;		On exit  : 0/0
 10094 ;;		Unchanged: 0/0
 10095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10096 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10097 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10099 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10100 ;;Total ram usage:        4 bytes
 10101 ;; Hardware stack levels used:    1
 10102 ;; This function calls:
 10103 ;;		Nothing
 10104 ;; This function is called by:
 10105 ;;		_readAnalog
 10106 ;;		_readButton
 10107 ;;		_main
 10108 ;; This function uses a non-reentrant model
 10109 ;;
 10110                           
 10111                           
 10112                           ;psect for function _ADCRead
 10113  1328                     _ADCRead:	
 10114                           
 10115                           ;incstack = 0
 10116                           ; Regs used in _ADCRead: [wreg]
 10117                           ;ADCRead@channel stored from wreg
 10118  1328  00F3               	movwf	ADCRead@channel
 10119                           
 10120                           ;adc.c: 21: ADPCH = channel_VSS;
 10121  1329  303C               	movlw	60
 10122  132A  0021               	movlb	1	; select bank1
 10123  132B  009E               	movwf	30	;volatile
 10124                           
 10125                           ;adc.c: 23: ADCON0bits.ADON = 1;
 10126  132C  1793               	bsf	19,7	;volatile
 10127                           
 10128                           ;adc.c: 25: ADCON0bits.ADCONT = 0;
 10129  132D  1313               	bcf	19,6	;volatile
 10130                           
 10131                           ;adc.c: 27: ADCON0bits.ADGO = 1;
 10132  132E  1413               	bsf	19,0	;volatile
 10133  132F                     l57:	
 10134                           ;adc.c: 30: {
 10135                           
 10136                           ;adc.c: 29: while(ADCON0bits.ADGO)
 10137                           
 10138  132F  1813               	btfsc	19,0	;volatile
 10139  1330  2B2F               	goto	l57
 10140                           
 10141                           ;adc.c: 31: }
 10142                           ;adc.c: 33: ADPCH = channel;
 10143  1331  0873               	movf	ADCRead@channel,w
 10144  1332  009E               	movwf	30	;volatile
 10145                           
 10146                           ;adc.c: 35: ADCON0bits.ADON = 1;
 10147  1333  1793               	bsf	19,7	;volatile
 10148                           
 10149                           ;adc.c: 37: ADCON0bits.ADCONT = 0;
 10150  1334  1313               	bcf	19,6	;volatile
 10151                           
 10152                           ;adc.c: 39: ADCON0bits.ADGO = 1;
 10153  1335  1413               	bsf	19,0	;volatile
 10154  1336                     l60:	
 10155                           ;adc.c: 42: {
 10156                           
 10157                           ;adc.c: 41: while(ADCON0bits.ADGO)
 10158                           
 10159  1336  1813               	btfsc	19,0	;volatile
 10160  1337  2B36               	goto	l60
 10161                           
 10162                           ;adc.c: 43: }
 10163                           ;adc.c: 45: return ((ADRESH<<8)+ADRESL);
 10164  1338  080D               	movf	13,w	;volatile
 10165  1339  00F1               	movwf	?_ADCRead+1
 10166  133A  080C               	movf	12,w	;volatile
 10167  133B  00F0               	movwf	?_ADCRead
 10168  133C  0008               	return
 10169  133D                     __end_of_ADCRead:	
 10170                           
 10171                           	psect	text12
 10172  0D3F                     __ptext12:	
 10173 ;; *************** function _cc_cv_mode *****************
 10174 ;; Defined at:
 10175 ;;		line 94 in file "battery_charger.c"
 10176 ;; Parameters:    Size  Location     Type
 10177 ;;		None
 10178 ;; Auto vars:     Size  Location     Type
 10179 ;;		None
 10180 ;; Return value:  Size  Location     Type
 10181 ;;                  1    wreg      void 
 10182 ;; Registers used:
 10183 ;;		wreg, status,2, status,0, pclath, cstack
 10184 ;; Tracked objects:
 10185 ;;		On entry : 0/0
 10186 ;;		On exit  : 0/0
 10187 ;;		Unchanged: 0/0
 10188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10191 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10192 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10193 ;;Total ram usage:        5 bytes
 10194 ;; Hardware stack levels used:    1
 10195 ;; Hardware stack levels required when called:    2
 10196 ;; This function calls:
 10197 ;;		___awtoft
 10198 ;;		___ftmul
 10199 ;;		___fttol
 10200 ;; This function is called by:
 10201 ;;		_main
 10202 ;; This function uses a non-reentrant model
 10203 ;;
 10204                           
 10205                           
 10206                           ;psect for function _cc_cv_mode
 10207  0D3F                     _cc_cv_mode:	
 10208                           
 10209                           ;battery_charger.c: 96: if(voltage[1] > Vref)
 10210                           
 10211                           ;incstack = 0
 10212                           ; Regs used in _cc_cv_mode: [wreg+status,2+status,0+pclath+cstack]
 10213  0D3F  0021               	movlb	1	; select bank1
 10214  0D40  0865               	movf	(_Vref+1)^(0+128),w
 10215  0D41  3A80               	xorlw	128
 10216  0D42  0020               	movlb	0	; select bank0
 10217  0D43  00CE               	movwf	??_cc_cv_mode
 10218  0D44  0021               	movlb	1	; select bank1
 10219  0D45  082B               	movf	((_voltage+1)^(0+128)+2),w
 10220  0D46  3A80               	xorlw	128
 10221  0D47  0020               	movlb	0	; select bank0
 10222  0D48  024E               	subwf	??_cc_cv_mode,w
 10223  0D49  1D03               	skipz
 10224  0D4A  2D4E               	goto	u3195
 10225  0D4B  0021               	movlb	1	; select bank1
 10226  0D4C  082A               	movf	(_voltage^(0+128)+2),w
 10227  0D4D  0264               	subwf	_Vref^(0+128),w
 10228  0D4E                     u3195:	
 10229  0D4E  1803               	skipnc
 10230  0D4F  2D67               	goto	l2871
 10231                           
 10232                           ;battery_charger.c: 97: {
 10233                           ;battery_charger.c: 98: if(VHoldMode<10)VHoldMode+=1;
 10234  0D50  0020               	movlb	0	; select bank0
 10235  0D51  086D               	movf	_VHoldMode,w
 10236  0D52  3A80               	xorlw	128
 10237  0D53  3E76               	addlw	-138
 10238  0D54  1803               	skipnc
 10239  0D55  2D5A               	goto	l129
 10240  0D56  3001               	movlw	1
 10241  0D57  00CE               	movwf	??_cc_cv_mode
 10242  0D58  084E               	movf	??_cc_cv_mode,w
 10243  0D59  07ED               	addwf	_VHoldMode,f
 10244  0D5A                     l129:	
 10245                           
 10246                           ;battery_charger.c: 100: if(cc_cv)
 10247  0D5A  0021               	movlb	1	; select bank1
 10248  0D5B  0840               	movf	_cc_cv^(0+128),w
 10249  0D5C  1903               	btfsc	3,2
 10250  0D5D  2D61               	goto	l2867
 10251                           
 10252                           ;battery_charger.c: 101: {
 10253                           ;battery_charger.c: 102: cc_cv-=1;
 10254  0D5E  3001               	movlw	1
 10255  0D5F  02C0               	subwf	_cc_cv^(0+128),f
 10256                           
 10257                           ;battery_charger.c: 103: }
 10258  0D60  2D7D               	goto	l133
 10259  0D61                     l2867:	
 10260                           
 10261                           ;battery_charger.c: 104: else
 10262                           ;battery_charger.c: 105: {
 10263                           ;battery_charger.c: 106: if(Imode0)
 10264  0D61  0020               	movlb	0	; select bank0
 10265  0D62  086E               	movf	_Imode0,w
 10266  0D63  1903               	btfsc	3,2
 10267  0D64  2D7D               	goto	l133
 10268                           
 10269                           ;battery_charger.c: 107: {
 10270                           ;battery_charger.c: 108: Imode0 = 0;
 10271  0D65  01EE               	clrf	_Imode0
 10272                           
 10273                           ;battery_charger.c: 109: }
 10274                           ;battery_charger.c: 110: }
 10275                           ;battery_charger.c: 111: }
 10276  0D66  2D7D               	goto	l133
 10277  0D67                     l2871:	
 10278                           
 10279                           ;battery_charger.c: 112: else
 10280                           ;battery_charger.c: 113: {
 10281                           ;battery_charger.c: 114: VHoldMode-=1;
 10282  0D67  30FF               	movlw	255
 10283  0D68  0020               	movlb	0	; select bank0
 10284  0D69  00CE               	movwf	??_cc_cv_mode
 10285  0D6A  084E               	movf	??_cc_cv_mode,w
 10286  0D6B  07ED               	addwf	_VHoldMode,f
 10287                           
 10288                           ;battery_charger.c: 115: if(VHoldMode<(10*-1))
 10289  0D6C  086D               	movf	_VHoldMode,w
 10290  0D6D  3A80               	xorlw	128
 10291  0D6E  3E8A               	addlw	138
 10292  0D6F  1803               	skipnc
 10293  0D70  2D7D               	goto	l133
 10294                           
 10295                           ;battery_charger.c: 116: {
 10296                           ;battery_charger.c: 117: Imode0 = 1;
 10297  0D71  01EE               	clrf	_Imode0
 10298  0D72  0AEE               	incf	_Imode0,f
 10299                           
 10300                           ;battery_charger.c: 118: cc_cv = 10;
 10301  0D73  300A               	movlw	10
 10302  0D74  00CE               	movwf	??_cc_cv_mode
 10303  0D75  084E               	movf	??_cc_cv_mode,w
 10304  0D76  0021               	movlb	1	; select bank1
 10305  0D77  00C0               	movwf	_cc_cv^(0+128)
 10306                           
 10307                           ;battery_charger.c: 119: VHoldMode=(10*-1);
 10308  0D78  30F6               	movlw	246
 10309  0D79  0020               	movlb	0	; select bank0
 10310  0D7A  00CE               	movwf	??_cc_cv_mode
 10311  0D7B  084E               	movf	??_cc_cv_mode,w
 10312  0D7C  00ED               	movwf	_VHoldMode
 10313  0D7D                     l133:	
 10314                           
 10315                           ;battery_charger.c: 120: }
 10316                           ;battery_charger.c: 121: }
 10317                           ;battery_charger.c: 123: if(current[1] > Iref)
 10318  0D7D  0021               	movlb	1	; select bank1
 10319  0D7E  0867               	movf	(_Iref+1)^(0+128),w
 10320  0D7F  3A80               	xorlw	128
 10321  0D80  0020               	movlb	0	; select bank0
 10322  0D81  00CE               	movwf	??_cc_cv_mode
 10323  0D82  0021               	movlb	1	; select bank1
 10324  0D83  0823               	movf	((_current+1)^(0+128)+2),w
 10325  0D84  3A80               	xorlw	128
 10326  0D85  0020               	movlb	0	; select bank0
 10327  0D86  024E               	subwf	??_cc_cv_mode,w
 10328  0D87  1D03               	skipz
 10329  0D88  2D8C               	goto	u3245
 10330  0D89  0021               	movlb	1	; select bank1
 10331  0D8A  0822               	movf	(_current^(0+128)+2),w
 10332  0D8B  0266               	subwf	_Iref^(0+128),w
 10333  0D8C                     u3245:	
 10334  0D8C  1803               	skipnc
 10335  0D8D  0008               	return
 10336                           
 10337                           ;battery_charger.c: 124: {
 10338                           ;battery_charger.c: 125: if(!(Imode0))
 10339  0D8E  0020               	movlb	0	; select bank0
 10340  0D8F  086E               	movf	_Imode0,w
 10341  0D90  1D03               	btfss	3,2
 10342  0D91  0008               	return
 10343                           
 10344                           ;battery_charger.c: 126: {
 10345                           ;battery_charger.c: 127: if(battery_state == FLOAT)
 10346  0D92  3005               	movlw	5
 10347  0D93  0021               	movlb	1	; select bank1
 10348  0D94  066C               	xorwf	_battery_state^(0+128),w
 10349  0D95  1D03               	btfss	3,2
 10350  0D96  0008               	return
 10351                           
 10352                           ;battery_charger.c: 128: {
 10353                           ;battery_charger.c: 129: if(voltage[1]<1350+(int16_t)((250-batteryTemp)*.24)-40)
 10354  0D97  096D               	comf	_batteryTemp^(0+128),w
 10355  0D98  0020               	movlb	0	; select bank0
 10356  0D99  00CE               	movwf	??_cc_cv_mode
 10357  0D9A  0021               	movlb	1	; select bank1
 10358  0D9B  096E               	comf	(_batteryTemp+1)^(0+128),w
 10359  0D9C  0020               	movlb	0	; select bank0
 10360  0D9D  00CF               	movwf	??_cc_cv_mode+1
 10361  0D9E  0ACE               	incf	??_cc_cv_mode,f
 10362  0D9F  1903               	skipnz
 10363  0DA0  0ACF               	incf	??_cc_cv_mode+1,f
 10364  0DA1  084E               	movf	??_cc_cv_mode,w
 10365  0DA2  3EFA               	addlw	250
 10366  0DA3  00F8               	movwf	___awtoft@c
 10367  0DA4  3000               	movlw	0
 10368  0DA5  3D4F               	addwfc	??_cc_cv_mode+1,w
 10369  0DA6  00F9               	movwf	___awtoft@c+1
 10370  0DA7  3193  23F9  318D   	fcall	___awtoft
 10371  0DAA  0878               	movf	?___awtoft,w
 10372  0DAB  0020               	movlb	0	; select bank0
 10373  0DAC  00B3               	movwf	___ftmul@f2
 10374  0DAD  0879               	movf	?___awtoft+1,w
 10375  0DAE  00B4               	movwf	___ftmul@f2+1
 10376  0DAF  087A               	movf	?___awtoft+2,w
 10377  0DB0  00B5               	movwf	___ftmul@f2+2
 10378  0DB1  30C3               	movlw	195
 10379  0DB2  00B0               	movwf	___ftmul@f1
 10380  0DB3  3075               	movlw	117
 10381  0DB4  00B1               	movwf	___ftmul@f1+1
 10382  0DB5  303E               	movlw	62
 10383  0DB6  00B2               	movwf	___ftmul@f1+2
 10384  0DB7  318B  23D2  318D   	fcall	___ftmul
 10385  0DBA  0020               	movlb	0	; select bank0
 10386  0DBB  0830               	movf	?___ftmul,w
 10387  0DBC  00C0               	movwf	___fttol@f1
 10388  0DBD  0831               	movf	?___ftmul+1,w
 10389  0DBE  00C1               	movwf	___fttol@f1+1
 10390  0DBF  0832               	movf	?___ftmul+2,w
 10391  0DC0  00C2               	movwf	___fttol@f1+2
 10392  0DC1  3189  21F2  318D   	fcall	___fttol
 10393  0DC4  0020               	movlb	0	; select bank0
 10394  0DC5  0840               	movf	?___fttol,w
 10395  0DC6  3E1E               	addlw	30
 10396  0DC7  00D0               	movwf	??_cc_cv_mode+2
 10397  0DC8  3005               	movlw	5
 10398  0DC9  3D41               	addwfc	?___fttol+1,w
 10399  0DCA  00D1               	movwf	??_cc_cv_mode+3
 10400  0DCB  0021               	movlb	1	; select bank1
 10401  0DCC  082B               	movf	((_voltage+1)^(0+128)+2),w
 10402  0DCD  3A80               	xorlw	128
 10403  0DCE  0020               	movlb	0	; select bank0
 10404  0DCF  00D2               	movwf	??_cc_cv_mode+4
 10405  0DD0  0851               	movf	??_cc_cv_mode+3,w
 10406  0DD1  3A80               	xorlw	128
 10407  0DD2  0252               	subwf	??_cc_cv_mode+4,w
 10408  0DD3  1D03               	skipz
 10409  0DD4  2DD8               	goto	u3275
 10410  0DD5  0850               	movf	??_cc_cv_mode+2,w
 10411  0DD6  0021               	movlb	1	; select bank1
 10412  0DD7  022A               	subwf	(_voltage^(0+128)+2),w
 10413  0DD8                     u3275:	
 10414  0DD8  1803               	skipnc
 10415  0DD9  0008               	return
 10416                           
 10417                           ;battery_charger.c: 130: {
 10418                           ;battery_charger.c: 131: battery_state=CHARGE;
 10419  0DDA  3004               	movlw	4
 10420  0DDB  0020               	movlb	0	; select bank0
 10421  0DDC  00CE               	movwf	??_cc_cv_mode
 10422  0DDD  084E               	movf	??_cc_cv_mode,w
 10423  0DDE  0021               	movlb	1	; select bank1
 10424  0DDF  00EC               	movwf	_battery_state^(0+128)
 10425                           
 10426                           ;battery_charger.c: 132: { Vref = 1425+(int16_t)((250-batteryTemp)*.24); };
 10427  0DE0  096D               	comf	_batteryTemp^(0+128),w
 10428  0DE1  0020               	movlb	0	; select bank0
 10429  0DE2  00CE               	movwf	??_cc_cv_mode
 10430  0DE3  0021               	movlb	1	; select bank1
 10431  0DE4  096E               	comf	(_batteryTemp+1)^(0+128),w
 10432  0DE5  0020               	movlb	0	; select bank0
 10433  0DE6  00CF               	movwf	??_cc_cv_mode+1
 10434  0DE7  0ACE               	incf	??_cc_cv_mode,f
 10435  0DE8  1903               	skipnz
 10436  0DE9  0ACF               	incf	??_cc_cv_mode+1,f
 10437  0DEA  084E               	movf	??_cc_cv_mode,w
 10438  0DEB  3EFA               	addlw	250
 10439  0DEC  00F8               	movwf	___awtoft@c
 10440  0DED  3000               	movlw	0
 10441  0DEE  3D4F               	addwfc	??_cc_cv_mode+1,w
 10442  0DEF  00F9               	movwf	___awtoft@c+1
 10443  0DF0  3193  23F9  318D   	fcall	___awtoft
 10444  0DF3  0878               	movf	?___awtoft,w
 10445  0DF4  0020               	movlb	0	; select bank0
 10446  0DF5  00B3               	movwf	___ftmul@f2
 10447  0DF6  0879               	movf	?___awtoft+1,w
 10448  0DF7  00B4               	movwf	___ftmul@f2+1
 10449  0DF8  087A               	movf	?___awtoft+2,w
 10450  0DF9  00B5               	movwf	___ftmul@f2+2
 10451  0DFA  30C3               	movlw	195
 10452  0DFB  00B0               	movwf	___ftmul@f1
 10453  0DFC  3075               	movlw	117
 10454  0DFD  00B1               	movwf	___ftmul@f1+1
 10455  0DFE  303E               	movlw	62
 10456  0DFF  00B2               	movwf	___ftmul@f1+2
 10457  0E00  318B  23D2  318D   	fcall	___ftmul
 10458  0E03  0020               	movlb	0	; select bank0
 10459  0E04  0830               	movf	?___ftmul,w
 10460  0E05  00C0               	movwf	___fttol@f1
 10461  0E06  0831               	movf	?___ftmul+1,w
 10462  0E07  00C1               	movwf	___fttol@f1+1
 10463  0E08  0832               	movf	?___ftmul+2,w
 10464  0E09  00C2               	movwf	___fttol@f1+2
 10465  0E0A  3189  21F2         	fcall	___fttol
 10466  0E0C  0020               	movlb	0	; select bank0
 10467  0E0D  0840               	movf	?___fttol,w
 10468  0E0E  3E91               	addlw	145
 10469  0E0F  0021               	movlb	1	; select bank1
 10470  0E10  00E4               	movwf	_Vref^(0+128)
 10471  0E11  3005               	movlw	5
 10472  0E12  0020               	movlb	0	; select bank0
 10473  0E13  3D41               	addwfc	?___fttol+1,w
 10474  0E14  0021               	movlb	1	; select bank1
 10475  0E15  00E5               	movwf	(_Vref+1)^(0+128)
 10476                           
 10477                           ;battery_charger.c: 133: { Iref = 55; };
 10478  0E16  3037               	movlw	55
 10479  0E17  00E6               	movwf	_Iref^(0+128)
 10480  0E18  3000               	movlw	0
 10481  0E19  00E7               	movwf	(_Iref^(0+128)+1)
 10482                           
 10483                           ;battery_charger.c: 134: Imode0 = 1;
 10484  0E1A  0020               	movlb	0	; select bank0
 10485  0E1B  01EE               	clrf	_Imode0
 10486  0E1C  0AEE               	incf	_Imode0,f
 10487                           
 10488                           ;battery_charger.c: 135: cc_cv = 10;
 10489  0E1D  300A               	movlw	10
 10490  0E1E  00CE               	movwf	??_cc_cv_mode
 10491  0E1F  084E               	movf	??_cc_cv_mode,w
 10492  0E20  0021               	movlb	1	; select bank1
 10493  0E21  00C0               	movwf	_cc_cv^(0+128)
 10494  0E22  0008               	return
 10495  0E23                     __end_of_cc_cv_mode:	
 10496                           
 10497                           	psect	text13
 10498  157D                     __ptext13:	
 10499 ;; *************** function _calculateCurrent1 *****************
 10500 ;; Defined at:
 10501 ;;		line 293 in file "main.c"
 10502 ;; Parameters:    Size  Location     Type
 10503 ;;		None
 10504 ;; Auto vars:     Size  Location     Type
 10505 ;;		None
 10506 ;; Return value:  Size  Location     Type
 10507 ;;                  1    wreg      void 
 10508 ;; Registers used:
 10509 ;;		wreg, status,2, status,0, pclath, cstack
 10510 ;; Tracked objects:
 10511 ;;		On entry : 0/0
 10512 ;;		On exit  : 0/0
 10513 ;;		Unchanged: 0/0
 10514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10517 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10518 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10519 ;;Total ram usage:        3 bytes
 10520 ;; Hardware stack levels used:    1
 10521 ;; Hardware stack levels required when called:    2
 10522 ;; This function calls:
 10523 ;;		___awtoft
 10524 ;;		___ftdiv
 10525 ;;		___fttol
 10526 ;; This function is called by:
 10527 ;;		_main
 10528 ;; This function uses a non-reentrant model
 10529 ;;
 10530                           
 10531                           
 10532                           ;psect for function _calculateCurrent1
 10533  157D                     _calculateCurrent1:	
 10534                           
 10535                           ;main.c: 295: if(analogs[5]-578<=0)
 10536                           
 10537                           ;incstack = 0
 10538                           ; Regs used in _calculateCurrent1: [wreg+status,2+status,0+pclath+cstack]
 10539  157D  0022               	movlb	2	; select bank2
 10540  157E  084A               	movf	(_analogs^(0+256)+10),w
 10541  157F  3EBE               	addlw	190
 10542  1580  0020               	movlb	0	; select bank0
 10543  1581  00CE               	movwf	??_calculateCurrent1
 10544  1582  30FD               	movlw	253
 10545  1583  0022               	movlb	2	; select bank2
 10546  1584  3D4B               	addwfc	((_analogs+1)^(0+256)+10),w
 10547  1585  0020               	movlb	0	; select bank0
 10548  1586  00CF               	movwf	??_calculateCurrent1+1
 10549  1587  084F               	movf	??_calculateCurrent1+1,w
 10550  1588  3A80               	xorlw	128
 10551  1589  00D0               	movwf	??_calculateCurrent1+2
 10552  158A  3080               	movlw	128
 10553  158B  0250               	subwf	??_calculateCurrent1+2,w
 10554  158C  1D03               	skipz
 10555  158D  2D90               	goto	u3505
 10556  158E  3001               	movlw	1
 10557  158F  024E               	subwf	??_calculateCurrent1,w
 10558  1590                     u3505:	
 10559  1590  1803               	skipnc
 10560  1591  2D96               	goto	l3031
 10561                           
 10562                           ;main.c: 296: {
 10563                           ;main.c: 297: current[1]=0;
 10564  1592  0021               	movlb	1	; select bank1
 10565  1593  01A2               	clrf	(_current^(0+128)+2)
 10566  1594  01A3               	clrf	((_current+1)^(0+128)+2)
 10567                           
 10568                           ;main.c: 298: }
 10569  1595  0008               	return
 10570  1596                     l3031:	
 10571                           
 10572                           ;main.c: 299: else
 10573                           ;main.c: 300: {
 10574                           ;main.c: 301: current[1]=(int16_t)((analogs[5]-578)/3.2323);
 10575  1596  0022               	movlb	2	; select bank2
 10576  1597  084A               	movf	(_analogs^(0+256)+10),w
 10577  1598  3EBE               	addlw	190
 10578  1599  00F8               	movwf	___awtoft@c
 10579  159A  30FD               	movlw	253
 10580  159B  3D4B               	addwfc	((_analogs+1)^(0+256)+10),w
 10581  159C  00F9               	movwf	___awtoft@c+1
 10582  159D  3193  23F9  3195   	fcall	___awtoft
 10583  15A0  0878               	movf	?___awtoft,w
 10584  15A1  0020               	movlb	0	; select bank0
 10585  15A2  00A3               	movwf	___ftdiv@f1
 10586  15A3  0879               	movf	?___awtoft+1,w
 10587  15A4  00A4               	movwf	___ftdiv@f1+1
 10588  15A5  087A               	movf	?___awtoft+2,w
 10589  15A6  00A5               	movwf	___ftdiv@f1+2
 10590  15A7  30DE               	movlw	222
 10591  15A8  00A0               	movwf	___ftdiv@f2
 10592  15A9  304E               	movlw	78
 10593  15AA  00A1               	movwf	___ftdiv@f2+1
 10594  15AB  3040               	movlw	64
 10595  15AC  00A2               	movwf	___ftdiv@f2+2
 10596  15AD  318A  2279  3195   	fcall	___ftdiv
 10597  15B0  0020               	movlb	0	; select bank0
 10598  15B1  0820               	movf	?___ftdiv,w
 10599  15B2  00C0               	movwf	___fttol@f1
 10600  15B3  0821               	movf	?___ftdiv+1,w
 10601  15B4  00C1               	movwf	___fttol@f1+1
 10602  15B5  0822               	movf	?___ftdiv+2,w
 10603  15B6  00C2               	movwf	___fttol@f1+2
 10604  15B7  3189  21F2         	fcall	___fttol
 10605  15B9  0020               	movlb	0	; select bank0
 10606  15BA  0841               	movf	?___fttol+1,w
 10607  15BB  0021               	movlb	1	; select bank1
 10608  15BC  00A3               	movwf	((_current+1)^(0+128)+2)
 10609  15BD  0020               	movlb	0	; select bank0
 10610  15BE  0840               	movf	?___fttol,w
 10611  15BF  0021               	movlb	1	; select bank1
 10612  15C0  00A2               	movwf	(_current^(0+128)+2)
 10613  15C1  0008               	return
 10614  15C2                     __end_of_calculateCurrent1:	
 10615                           
 10616                           	psect	text14
 10617  1538                     __ptext14:	
 10618 ;; *************** function _calculateCurrent0 *****************
 10619 ;; Defined at:
 10620 ;;		line 281 in file "main.c"
 10621 ;; Parameters:    Size  Location     Type
 10622 ;;		None
 10623 ;; Auto vars:     Size  Location     Type
 10624 ;;		None
 10625 ;; Return value:  Size  Location     Type
 10626 ;;                  1    wreg      void 
 10627 ;; Registers used:
 10628 ;;		wreg, status,2, status,0, pclath, cstack
 10629 ;; Tracked objects:
 10630 ;;		On entry : 0/0
 10631 ;;		On exit  : 0/0
 10632 ;;		Unchanged: 0/0
 10633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10636 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10637 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10638 ;;Total ram usage:        3 bytes
 10639 ;; Hardware stack levels used:    1
 10640 ;; Hardware stack levels required when called:    2
 10641 ;; This function calls:
 10642 ;;		___awtoft
 10643 ;;		___ftdiv
 10644 ;;		___fttol
 10645 ;; This function is called by:
 10646 ;;		_main
 10647 ;; This function uses a non-reentrant model
 10648 ;;
 10649                           
 10650                           
 10651                           ;psect for function _calculateCurrent0
 10652  1538                     _calculateCurrent0:	
 10653                           
 10654                           ;main.c: 283: if(analogs[4]-589<=0)
 10655                           
 10656                           ;incstack = 0
 10657                           ; Regs used in _calculateCurrent0: [wreg+status,2+status,0+pclath+cstack]
 10658  1538  0022               	movlb	2	; select bank2
 10659  1539  0848               	movf	(_analogs^(0+256)+8),w
 10660  153A  3EB3               	addlw	179
 10661  153B  0020               	movlb	0	; select bank0
 10662  153C  00CE               	movwf	??_calculateCurrent0
 10663  153D  30FD               	movlw	253
 10664  153E  0022               	movlb	2	; select bank2
 10665  153F  3D49               	addwfc	((_analogs+1)^(0+256)+8),w
 10666  1540  0020               	movlb	0	; select bank0
 10667  1541  00CF               	movwf	??_calculateCurrent0+1
 10668  1542  084F               	movf	??_calculateCurrent0+1,w
 10669  1543  3A80               	xorlw	128
 10670  1544  00D0               	movwf	??_calculateCurrent0+2
 10671  1545  3080               	movlw	128
 10672  1546  0250               	subwf	??_calculateCurrent0+2,w
 10673  1547  1D03               	skipz
 10674  1548  2D4B               	goto	u3495
 10675  1549  3001               	movlw	1
 10676  154A  024E               	subwf	??_calculateCurrent0,w
 10677  154B                     u3495:	
 10678  154B  1803               	skipnc
 10679  154C  2D51               	goto	l3025
 10680                           
 10681                           ;main.c: 284: {
 10682                           ;main.c: 285: current[0]=0;
 10683  154D  0021               	movlb	1	; select bank1
 10684  154E  01A0               	clrf	_current^(0+128)
 10685  154F  01A1               	clrf	(_current+1)^(0+128)
 10686                           
 10687                           ;main.c: 286: }
 10688  1550  0008               	return
 10689  1551                     l3025:	
 10690                           
 10691                           ;main.c: 287: else
 10692                           ;main.c: 288: {
 10693                           ;main.c: 289: current[0]=(int16_t)((analogs[4]-589)/1.3165);
 10694  1551  0022               	movlb	2	; select bank2
 10695  1552  0848               	movf	(_analogs^(0+256)+8),w
 10696  1553  3EB3               	addlw	179
 10697  1554  00F8               	movwf	___awtoft@c
 10698  1555  30FD               	movlw	253
 10699  1556  3D49               	addwfc	((_analogs+1)^(0+256)+8),w
 10700  1557  00F9               	movwf	___awtoft@c+1
 10701  1558  3193  23F9  3195   	fcall	___awtoft
 10702  155B  0878               	movf	?___awtoft,w
 10703  155C  0020               	movlb	0	; select bank0
 10704  155D  00A3               	movwf	___ftdiv@f1
 10705  155E  0879               	movf	?___awtoft+1,w
 10706  155F  00A4               	movwf	___ftdiv@f1+1
 10707  1560  087A               	movf	?___awtoft+2,w
 10708  1561  00A5               	movwf	___ftdiv@f1+2
 10709  1562  3083               	movlw	131
 10710  1563  00A0               	movwf	___ftdiv@f2
 10711  1564  30A8               	movlw	168
 10712  1565  00A1               	movwf	___ftdiv@f2+1
 10713  1566  303F               	movlw	63
 10714  1567  00A2               	movwf	___ftdiv@f2+2
 10715  1568  318A  2279  3195   	fcall	___ftdiv
 10716  156B  0020               	movlb	0	; select bank0
 10717  156C  0820               	movf	?___ftdiv,w
 10718  156D  00C0               	movwf	___fttol@f1
 10719  156E  0821               	movf	?___ftdiv+1,w
 10720  156F  00C1               	movwf	___fttol@f1+1
 10721  1570  0822               	movf	?___ftdiv+2,w
 10722  1571  00C2               	movwf	___fttol@f1+2
 10723  1572  3189  21F2         	fcall	___fttol
 10724  1574  0020               	movlb	0	; select bank0
 10725  1575  0841               	movf	?___fttol+1,w
 10726  1576  0021               	movlb	1	; select bank1
 10727  1577  00A1               	movwf	(_current+1)^(0+128)
 10728  1578  0020               	movlb	0	; select bank0
 10729  1579  0840               	movf	?___fttol,w
 10730  157A  0021               	movlb	1	; select bank1
 10731  157B  00A0               	movwf	_current^(0+128)
 10732  157C  0008               	return
 10733  157D                     __end_of_calculateCurrent0:	
 10734                           
 10735                           	psect	text15
 10736  0A79                     __ptext15:	
 10737 ;; *************** function ___ftdiv *****************
 10738 ;; Defined at:
 10739 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 10740 ;; Parameters:    Size  Location     Type
 10741 ;;  f2              3    0[BANK0 ] float 
 10742 ;;  f1              3    3[BANK0 ] float 
 10743 ;; Auto vars:     Size  Location     Type
 10744 ;;  f3              3   11[BANK0 ] float 
 10745 ;;  sign            1   15[BANK0 ] unsigned char 
 10746 ;;  exp             1   14[BANK0 ] unsigned char 
 10747 ;;  cntr            1   10[BANK0 ] unsigned char 
 10748 ;; Return value:  Size  Location     Type
 10749 ;;                  3    0[BANK0 ] float 
 10750 ;; Registers used:
 10751 ;;		wreg, status,2, status,0, pclath, cstack
 10752 ;; Tracked objects:
 10753 ;;		On entry : 0/0
 10754 ;;		On exit  : 0/0
 10755 ;;		Unchanged: 0/0
 10756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10757 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10758 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10759 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10760 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10761 ;;Total ram usage:       16 bytes
 10762 ;; Hardware stack levels used:    1
 10763 ;; Hardware stack levels required when called:    1
 10764 ;; This function calls:
 10765 ;;		___ftpack
 10766 ;; This function is called by:
 10767 ;;		_tempCalc
 10768 ;;		_main
 10769 ;;		_calculateCurrent0
 10770 ;;		_calculateCurrent1
 10771 ;; This function uses a non-reentrant model
 10772 ;;
 10773                           
 10774                           
 10775                           ;psect for function ___ftdiv
 10776  0A79                     ___ftdiv:	
 10777                           
 10778                           ;incstack = 0
 10779                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 10780  0A79  0020               	movlb	0	; select bank0
 10781  0A7A  0823               	movf	___ftdiv@f1,w
 10782  0A7B  00A6               	movwf	??___ftdiv
 10783  0A7C  0824               	movf	___ftdiv@f1+1,w
 10784  0A7D  00A7               	movwf	??___ftdiv+1
 10785  0A7E  0825               	movf	___ftdiv@f1+2,w
 10786  0A7F  00A8               	movwf	??___ftdiv+2
 10787  0A80  1003               	clrc
 10788  0A81  0D27               	rlf	??___ftdiv+1,w
 10789  0A82  0D28               	rlf	??___ftdiv+2,w
 10790  0A83  00A9               	movwf	??___ftdiv+3
 10791  0A84  0829               	movf	??___ftdiv+3,w
 10792  0A85  00AE               	movwf	___ftdiv@exp
 10793  0A86  082E               	movf	___ftdiv@exp,w
 10794  0A87  1D03               	btfss	3,2
 10795  0A88  2A90               	goto	l2729
 10796  0A89  3000               	movlw	0
 10797  0A8A  00A0               	movwf	?___ftdiv
 10798  0A8B  3000               	movlw	0
 10799  0A8C  00A1               	movwf	?___ftdiv+1
 10800  0A8D  3000               	movlw	0
 10801  0A8E  00A2               	movwf	?___ftdiv+2
 10802  0A8F  0008               	return
 10803  0A90                     l2729:	
 10804  0A90  0820               	movf	___ftdiv@f2,w
 10805  0A91  00A6               	movwf	??___ftdiv
 10806  0A92  0821               	movf	___ftdiv@f2+1,w
 10807  0A93  00A7               	movwf	??___ftdiv+1
 10808  0A94  0822               	movf	___ftdiv@f2+2,w
 10809  0A95  00A8               	movwf	??___ftdiv+2
 10810  0A96  1003               	clrc
 10811  0A97  0D27               	rlf	??___ftdiv+1,w
 10812  0A98  0D28               	rlf	??___ftdiv+2,w
 10813  0A99  00A9               	movwf	??___ftdiv+3
 10814  0A9A  0829               	movf	??___ftdiv+3,w
 10815  0A9B  00AF               	movwf	___ftdiv@sign
 10816  0A9C  082F               	movf	___ftdiv@sign,w
 10817  0A9D  1D03               	btfss	3,2
 10818  0A9E  2AA6               	goto	l2735
 10819  0A9F  3000               	movlw	0
 10820  0AA0  00A0               	movwf	?___ftdiv
 10821  0AA1  3000               	movlw	0
 10822  0AA2  00A1               	movwf	?___ftdiv+1
 10823  0AA3  3000               	movlw	0
 10824  0AA4  00A2               	movwf	?___ftdiv+2
 10825  0AA5  0008               	return
 10826  0AA6                     l2735:	
 10827  0AA6  3000               	movlw	0
 10828  0AA7  00AB               	movwf	___ftdiv@f3
 10829  0AA8  3000               	movlw	0
 10830  0AA9  00AC               	movwf	___ftdiv@f3+1
 10831  0AAA  3000               	movlw	0
 10832  0AAB  00AD               	movwf	___ftdiv@f3+2
 10833  0AAC  3089               	movlw	137
 10834  0AAD  072F               	addwf	___ftdiv@sign,w
 10835  0AAE  00A6               	movwf	??___ftdiv
 10836  0AAF  0826               	movf	??___ftdiv,w
 10837  0AB0  02AE               	subwf	___ftdiv@exp,f
 10838  0AB1  0823               	movf	___ftdiv@f1,w
 10839  0AB2  00A6               	movwf	??___ftdiv
 10840  0AB3  0824               	movf	___ftdiv@f1+1,w
 10841  0AB4  00A7               	movwf	??___ftdiv+1
 10842  0AB5  0825               	movf	___ftdiv@f1+2,w
 10843  0AB6  00A8               	movwf	??___ftdiv+2
 10844  0AB7  3010               	movlw	16
 10845  0AB8                     u2885:	
 10846  0AB8  36A8               	lsrf	??___ftdiv+2,f
 10847  0AB9  0CA7               	rrf	??___ftdiv+1,f
 10848  0ABA  0CA6               	rrf	??___ftdiv,f
 10849  0ABB  0B89               	decfsz	9,f
 10850  0ABC  2AB8               	goto	u2885
 10851  0ABD  0826               	movf	??___ftdiv,w
 10852  0ABE  00A9               	movwf	??___ftdiv+3
 10853  0ABF  0829               	movf	??___ftdiv+3,w
 10854  0AC0  00AF               	movwf	___ftdiv@sign
 10855  0AC1  0820               	movf	___ftdiv@f2,w
 10856  0AC2  00A6               	movwf	??___ftdiv
 10857  0AC3  0821               	movf	___ftdiv@f2+1,w
 10858  0AC4  00A7               	movwf	??___ftdiv+1
 10859  0AC5  0822               	movf	___ftdiv@f2+2,w
 10860  0AC6  00A8               	movwf	??___ftdiv+2
 10861  0AC7  3010               	movlw	16
 10862  0AC8                     u2895:	
 10863  0AC8  36A8               	lsrf	??___ftdiv+2,f
 10864  0AC9  0CA7               	rrf	??___ftdiv+1,f
 10865  0ACA  0CA6               	rrf	??___ftdiv,f
 10866  0ACB  0B89               	decfsz	9,f
 10867  0ACC  2AC8               	goto	u2895
 10868  0ACD  0826               	movf	??___ftdiv,w
 10869  0ACE  00A9               	movwf	??___ftdiv+3
 10870  0ACF  0829               	movf	??___ftdiv+3,w
 10871  0AD0  06AF               	xorwf	___ftdiv@sign,f
 10872  0AD1  3080               	movlw	128
 10873  0AD2  00A6               	movwf	??___ftdiv
 10874  0AD3  0826               	movf	??___ftdiv,w
 10875  0AD4  05AF               	andwf	___ftdiv@sign,f
 10876  0AD5  17A4               	bsf	___ftdiv@f1+1,7
 10877  0AD6  30FF               	movlw	255
 10878  0AD7  05A3               	andwf	___ftdiv@f1,f
 10879  0AD8  30FF               	movlw	255
 10880  0AD9  05A4               	andwf	___ftdiv@f1+1,f
 10881  0ADA  3000               	movlw	0
 10882  0ADB  05A5               	andwf	___ftdiv@f1+2,f
 10883  0ADC  17A1               	bsf	___ftdiv@f2+1,7
 10884  0ADD  30FF               	movlw	255
 10885  0ADE  05A0               	andwf	___ftdiv@f2,f
 10886  0ADF  30FF               	movlw	255
 10887  0AE0  05A1               	andwf	___ftdiv@f2+1,f
 10888  0AE1  3000               	movlw	0
 10889  0AE2  05A2               	andwf	___ftdiv@f2+2,f
 10890  0AE3  3018               	movlw	24
 10891  0AE4  00A6               	movwf	??___ftdiv
 10892  0AE5  0826               	movf	??___ftdiv,w
 10893  0AE6  00AA               	movwf	___ftdiv@cntr
 10894  0AE7                     l2749:	
 10895  0AE7  3001               	movlw	1
 10896  0AE8                     u2905:	
 10897  0AE8  35AB               	lslf	___ftdiv@f3,f
 10898  0AE9  0DAC               	rlf	___ftdiv@f3+1,f
 10899  0AEA  0DAD               	rlf	___ftdiv@f3+2,f
 10900  0AEB  0B89               	decfsz	9,f
 10901  0AEC  2AE8               	goto	u2905
 10902  0AED  0822               	movf	___ftdiv@f2+2,w
 10903  0AEE  0225               	subwf	___ftdiv@f1+2,w
 10904  0AEF  1D03               	skipz
 10905  0AF0  2AF7               	goto	u2915
 10906  0AF1  0821               	movf	___ftdiv@f2+1,w
 10907  0AF2  0224               	subwf	___ftdiv@f1+1,w
 10908  0AF3  1D03               	skipz
 10909  0AF4  2AF7               	goto	u2915
 10910  0AF5  0820               	movf	___ftdiv@f2,w
 10911  0AF6  0223               	subwf	___ftdiv@f1,w
 10912  0AF7                     u2915:	
 10913  0AF7  1C03               	skipc
 10914  0AF8  2B00               	goto	l2757
 10915  0AF9  0820               	movf	___ftdiv@f2,w
 10916  0AFA  02A3               	subwf	___ftdiv@f1,f
 10917  0AFB  0821               	movf	___ftdiv@f2+1,w
 10918  0AFC  3BA4               	subwfb	___ftdiv@f1+1,f
 10919  0AFD  0822               	movf	___ftdiv@f2+2,w
 10920  0AFE  3BA5               	subwfb	___ftdiv@f1+2,f
 10921  0AFF  142B               	bsf	___ftdiv@f3,0
 10922  0B00                     l2757:	
 10923  0B00  3001               	movlw	1
 10924  0B01                     u2925:	
 10925  0B01  35A3               	lslf	___ftdiv@f1,f
 10926  0B02  0DA4               	rlf	___ftdiv@f1+1,f
 10927  0B03  0DA5               	rlf	___ftdiv@f1+2,f
 10928  0B04  0B89               	decfsz	9,f
 10929  0B05  2B01               	goto	u2925
 10930  0B06  3001               	movlw	1
 10931  0B07  02AA               	subwf	___ftdiv@cntr,f
 10932  0B08  1D03               	btfss	3,2
 10933  0B09  2AE7               	goto	l2749
 10934  0B0A  082B               	movf	___ftdiv@f3,w
 10935  0B0B  00F0               	movwf	___ftpack@arg
 10936  0B0C  082C               	movf	___ftdiv@f3+1,w
 10937  0B0D  00F1               	movwf	___ftpack@arg+1
 10938  0B0E  082D               	movf	___ftdiv@f3+2,w
 10939  0B0F  00F2               	movwf	___ftpack@arg+2
 10940  0B10  082E               	movf	___ftdiv@exp,w
 10941  0B11  00A6               	movwf	??___ftdiv
 10942  0B12  0826               	movf	??___ftdiv,w
 10943  0B13  00F3               	movwf	___ftpack@exp
 10944  0B14  082F               	movf	___ftdiv@sign,w
 10945  0B15  00A7               	movwf	??___ftdiv+1
 10946  0B16  0827               	movf	??___ftdiv+1,w
 10947  0B17  00F4               	movwf	___ftpack@sign
 10948  0B18  3197  271A         	fcall	___ftpack
 10949  0B1A  0870               	movf	?___ftpack,w
 10950  0B1B  0020               	movlb	0	; select bank0
 10951  0B1C  00A0               	movwf	?___ftdiv
 10952  0B1D  0871               	movf	?___ftpack+1,w
 10953  0B1E  00A1               	movwf	?___ftdiv+1
 10954  0B1F  0872               	movf	?___ftpack+2,w
 10955  0B20  00A2               	movwf	?___ftdiv+2
 10956  0B21  0008               	return
 10957  0B22                     __end_of___ftdiv:	
 10958                           
 10959                           	psect	text16
 10960  1490                     __ptext16:	
 10961 ;; *************** function _SYSTEM_Initialize *****************
 10962 ;; Defined at:
 10963 ;;		line 71 in file "system.c"
 10964 ;; Parameters:    Size  Location     Type
 10965 ;;		None
 10966 ;; Auto vars:     Size  Location     Type
 10967 ;;		None
 10968 ;; Return value:  Size  Location     Type
 10969 ;;                  1    wreg      void 
 10970 ;; Registers used:
 10971 ;;		wreg, status,2, status,0, pclath, cstack
 10972 ;; Tracked objects:
 10973 ;;		On entry : 0/0
 10974 ;;		On exit  : 0/0
 10975 ;;		Unchanged: 0/0
 10976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10979 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10980 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10981 ;;Total ram usage:        2 bytes
 10982 ;; Hardware stack levels used:    1
 10983 ;; Hardware stack levels required when called:    3
 10984 ;; This function calls:
 10985 ;;		_ADC_Initialize
 10986 ;;		_Init_Battery_State_Machine
 10987 ;;		_LCDClear
 10988 ;;		_LCDInit
 10989 ;;		_OSCILLATOR_Initialize
 10990 ;;		_PIN_MANAGER_Initialize
 10991 ;;		_PWM_Initialize
 10992 ;;		_TMR2_Initialize
 10993 ;;		_TMR4_Initialize
 10994 ;; This function is called by:
 10995 ;;		_main
 10996 ;; This function uses a non-reentrant model
 10997 ;;
 10998                           
 10999                           
 11000                           ;psect for function _SYSTEM_Initialize
 11001  1490                     _SYSTEM_Initialize:	
 11002                           
 11003                           ;system.c: 73: PIN_MANAGER_Initialize();
 11004                           
 11005                           ;incstack = 0
 11006                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11007  1490  3194  24C6  3194   	fcall	_PIN_MANAGER_Initialize
 11008                           
 11009                           ;system.c: 74: OSCILLATOR_Initialize();
 11010  1493  3192  22C8  3194   	fcall	_OSCILLATOR_Initialize
 11011                           
 11012                           ;system.c: 76: ADC_Initialize();
 11013  1496  3193  23BB  3194   	fcall	_ADC_Initialize
 11014                           
 11015                           ;system.c: 77: PWM_Initialize();
 11016  1499  3193  23DA  3194   	fcall	_PWM_Initialize
 11017                           
 11018                           ;system.c: 79: TMR2_Initialize();
 11019  149C  3192  22E9  3194   	fcall	_TMR2_Initialize
 11020                           
 11021                           ;system.c: 80: TMR4_Initialize();
 11022  149F  3192  22F7  3194   	fcall	_TMR4_Initialize
 11023                           
 11024                           ;system.c: 81: Init_Battery_State_Machine();
 11025  14A2  3195  25C2  3194   	fcall	_Init_Battery_State_Machine
 11026                           
 11027                           ;system.c: 82: LCDInit();
 11028  14A5  3194  24FD  3194   	fcall	_LCDInit
 11029                           
 11030                           ;system.c: 83: _delay((unsigned long)((200)*(32000000/4000.0)));
 11031  14A8  3009               	movlw	9
 11032  14A9  0020               	movlb	0	; select bank0
 11033  14AA  00D1               	movwf	??_SYSTEM_Initialize+1
 11034  14AB  301E               	movlw	30
 11035  14AC  00D0               	movwf	??_SYSTEM_Initialize
 11036  14AD  30E4               	movlw	228
 11037  14AE                     u3777:	
 11038  14AE  0B89               	decfsz	9,f
 11039  14AF  2CAE               	goto	u3777
 11040  14B0  0BD0               	decfsz	??_SYSTEM_Initialize,f
 11041  14B1  2CAE               	goto	u3777
 11042  14B2  0BD1               	decfsz	??_SYSTEM_Initialize+1,f
 11043  14B3  2CAE               	goto	u3777
 11044  14B4  0000               	nop
 11045                           
 11046                           ;system.c: 84: LCDClear();
 11047  14B5  3194  243E  3194   	fcall	_LCDClear
 11048                           
 11049                           ;system.c: 85: _delay((unsigned long)((200)*(32000000/4000.0)));
 11050  14B8  3009               	movlw	9
 11051  14B9  0020               	movlb	0	; select bank0
 11052  14BA  00D1               	movwf	??_SYSTEM_Initialize+1
 11053  14BB  301E               	movlw	30
 11054  14BC  00D0               	movwf	??_SYSTEM_Initialize
 11055  14BD  30E4               	movlw	228
 11056  14BE                     u3787:	
 11057  14BE  0B89               	decfsz	9,f
 11058  14BF  2CBE               	goto	u3787
 11059  14C0  0BD0               	decfsz	??_SYSTEM_Initialize,f
 11060  14C1  2CBE               	goto	u3787
 11061  14C2  0BD1               	decfsz	??_SYSTEM_Initialize+1,f
 11062  14C3  2CBE               	goto	u3787
 11063  14C4  0000               	nop
 11064  14C5  0008               	return
 11065  14C6                     __end_of_SYSTEM_Initialize:	
 11066                           
 11067                           	psect	text17
 11068  12F7                     __ptext17:	
 11069 ;; *************** function _TMR4_Initialize *****************
 11070 ;; Defined at:
 11071 ;;		line 25 in file "tmr.c"
 11072 ;; Parameters:    Size  Location     Type
 11073 ;;		None
 11074 ;; Auto vars:     Size  Location     Type
 11075 ;;		None
 11076 ;; Return value:  Size  Location     Type
 11077 ;;                  1    wreg      void 
 11078 ;; Registers used:
 11079 ;;		wreg, status,2
 11080 ;; Tracked objects:
 11081 ;;		On entry : 0/0
 11082 ;;		On exit  : 0/0
 11083 ;;		Unchanged: 0/0
 11084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11089 ;;Total ram usage:        0 bytes
 11090 ;; Hardware stack levels used:    1
 11091 ;; This function calls:
 11092 ;;		Nothing
 11093 ;; This function is called by:
 11094 ;;		_SYSTEM_Initialize
 11095 ;; This function uses a non-reentrant model
 11096 ;;
 11097                           
 11098                           
 11099                           ;psect for function _TMR4_Initialize
 11100  12F7                     _TMR4_Initialize:	
 11101                           
 11102                           ;tmr.c: 27: T4CON = 0x00;
 11103                           
 11104                           ;incstack = 0
 11105                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
 11106  12F7  0025               	movlb	5	; select bank5
 11107  12F8  0194               	clrf	20	;volatile
 11108                           
 11109                           ;tmr.c: 29: T4CLKCON = 0x01;
 11110  12F9  3001               	movlw	1
 11111  12FA  0096               	movwf	22	;volatile
 11112                           
 11113                           ;tmr.c: 31: T4HLT = 0x00;
 11114  12FB  0195               	clrf	21	;volatile
 11115                           
 11116                           ;tmr.c: 33: T4RST = 0x00;
 11117  12FC  0197               	clrf	23	;volatile
 11118                           
 11119                           ;tmr.c: 35: T4PR = 0xFE;
 11120  12FD  30FE               	movlw	254
 11121  12FE  0093               	movwf	19	;volatile
 11122                           
 11123                           ;tmr.c: 39: T4TMR = 0x00;
 11124  12FF  0192               	clrf	18	;volatile
 11125                           
 11126                           ;tmr.c: 41: PIR4bits.TMR4IF = 0;
 11127  1300  002E               	movlb	14	; select bank14
 11128  1301  1190               	bcf	16,3	;volatile
 11129                           
 11130                           ;tmr.c: 43: T4CONbits.TMR4ON = 1;
 11131  1302  0025               	movlb	5	; select bank5
 11132  1303  1794               	bsf	20,7	;volatile
 11133  1304  0008               	return
 11134  1305                     __end_of_TMR4_Initialize:	
 11135                           
 11136                           	psect	text18
 11137  12E9                     __ptext18:	
 11138 ;; *************** function _TMR2_Initialize *****************
 11139 ;; Defined at:
 11140 ;;		line 3 in file "tmr.c"
 11141 ;; Parameters:    Size  Location     Type
 11142 ;;		None
 11143 ;; Auto vars:     Size  Location     Type
 11144 ;;		None
 11145 ;; Return value:  Size  Location     Type
 11146 ;;                  1    wreg      void 
 11147 ;; Registers used:
 11148 ;;		wreg, status,2
 11149 ;; Tracked objects:
 11150 ;;		On entry : 0/0
 11151 ;;		On exit  : 0/0
 11152 ;;		Unchanged: 0/0
 11153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11157 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11158 ;;Total ram usage:        0 bytes
 11159 ;; Hardware stack levels used:    1
 11160 ;; This function calls:
 11161 ;;		Nothing
 11162 ;; This function is called by:
 11163 ;;		_SYSTEM_Initialize
 11164 ;; This function uses a non-reentrant model
 11165 ;;
 11166                           
 11167                           
 11168                           ;psect for function _TMR2_Initialize
 11169  12E9                     _TMR2_Initialize:	
 11170                           
 11171                           ;tmr.c: 5: T2CON = 0x00;
 11172                           
 11173                           ;incstack = 0
 11174                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 11175  12E9  0025               	movlb	5	; select bank5
 11176  12EA  018E               	clrf	14	;volatile
 11177                           
 11178                           ;tmr.c: 7: T2CLKCON = 0x01;
 11179  12EB  3001               	movlw	1
 11180  12EC  0090               	movwf	16	;volatile
 11181                           
 11182                           ;tmr.c: 9: T2HLT = 0x00;
 11183  12ED  018F               	clrf	15	;volatile
 11184                           
 11185                           ;tmr.c: 11: T2RST = 0x00;
 11186  12EE  0191               	clrf	17	;volatile
 11187                           
 11188                           ;tmr.c: 13: T2PR = 0xFE;
 11189  12EF  30FE               	movlw	254
 11190  12F0  008D               	movwf	13	;volatile
 11191                           
 11192                           ;tmr.c: 18: T2TMR = 0x00;
 11193  12F1  018C               	clrf	12	;volatile
 11194                           
 11195                           ;tmr.c: 20: PIR4bits.TMR2IF = 0;
 11196  12F2  002E               	movlb	14	; select bank14
 11197  12F3  1090               	bcf	16,1	;volatile
 11198                           
 11199                           ;tmr.c: 22: T2CONbits.TMR2ON = 1;
 11200  12F4  0025               	movlb	5	; select bank5
 11201  12F5  178E               	bsf	14,7	;volatile
 11202  12F6  0008               	return
 11203  12F7                     __end_of_TMR2_Initialize:	
 11204                           
 11205                           	psect	text19
 11206  13DA                     __ptext19:	
 11207 ;; *************** function _PWM_Initialize *****************
 11208 ;; Defined at:
 11209 ;;		line 3 in file "pwm.c"
 11210 ;; Parameters:    Size  Location     Type
 11211 ;;		None
 11212 ;; Auto vars:     Size  Location     Type
 11213 ;;		None
 11214 ;; Return value:  Size  Location     Type
 11215 ;;                  1    wreg      void 
 11216 ;; Registers used:
 11217 ;;		wreg, status,2, status,0
 11218 ;; Tracked objects:
 11219 ;;		On entry : 0/0
 11220 ;;		On exit  : 0/0
 11221 ;;		Unchanged: 0/0
 11222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11227 ;;Total ram usage:        0 bytes
 11228 ;; Hardware stack levels used:    1
 11229 ;; This function calls:
 11230 ;;		Nothing
 11231 ;; This function is called by:
 11232 ;;		_SYSTEM_Initialize
 11233 ;; This function uses a non-reentrant model
 11234 ;;
 11235                           
 11236                           
 11237                           ;psect for function _PWM_Initialize
 11238  13DA                     _PWM_Initialize:	
 11239                           
 11240                           ;pwm.c: 5: PWM6CON = 0x80;
 11241                           
 11242                           ;incstack = 0
 11243                           ; Regs used in _PWM_Initialize: [wreg+status,2+status,0]
 11244  13DA  3080               	movlw	128
 11245  13DB  0027               	movlb	7	; select bank7
 11246  13DC  008E               	movwf	14	;volatile
 11247                           
 11248                           ;pwm.c: 7: PWM6DCH = 0x00;
 11249  13DD  018D               	clrf	13	;volatile
 11250                           
 11251                           ;pwm.c: 9: PWM6DCL = 0x00;
 11252  13DE  018C               	clrf	12	;volatile
 11253                           
 11254                           ;pwm.c: 11: CCPTMRS1bits.P6TSEL = 0x01;
 11255  13DF  0024               	movlb	4	; select bank4
 11256  13E0  081F               	movf	31,w	;volatile
 11257  13E1  39F3               	andlw	-13
 11258  13E2  3804               	iorlw	4
 11259  13E3  009F               	movwf	31	;volatile
 11260                           
 11261                           ;pwm.c: 14: PWM7CON = 0x80;
 11262  13E4  3080               	movlw	128
 11263  13E5  0027               	movlb	7	; select bank7
 11264  13E6  0092               	movwf	18	;volatile
 11265                           
 11266                           ;pwm.c: 16: PWM7DCH = 0x00;
 11267  13E7  0191               	clrf	17	;volatile
 11268                           
 11269                           ;pwm.c: 18: PWM7DCL = 0x00;
 11270  13E8  0190               	clrf	16	;volatile
 11271                           
 11272                           ;pwm.c: 20: CCPTMRS1bits.P7TSEL = 0x02;
 11273  13E9  0024               	movlb	4	; select bank4
 11274  13EA  081F               	movf	31,w	;volatile
 11275  13EB  39CF               	andlw	-49
 11276  13EC  3820               	iorlw	32
 11277  13ED  009F               	movwf	31	;volatile
 11278                           
 11279                           ;pwm.c: 23: CCP1CONbits.CCP1EN = 1;
 11280  13EE  0026               	movlb	6	; select bank6
 11281  13EF  178E               	bsf	14,7	;volatile
 11282                           
 11283                           ;pwm.c: 24: CCP1CONbits.CCP1FMT = 1;
 11284  13F0  160E               	bsf	14,4	;volatile
 11285                           
 11286                           ;pwm.c: 25: CCP1CONbits.CCP1MODE = 0xF;
 11287  13F1  300F               	movlw	15
 11288  13F2  048E               	iorwf	14,f	;volatile
 11289                           
 11290                           ;pwm.c: 26: CCPTMRS0bits.C1TSEL = 0x1;
 11291  13F3  0024               	movlb	4	; select bank4
 11292  13F4  081E               	movf	30,w	;volatile
 11293  13F5  39FC               	andlw	-4
 11294  13F6  3801               	iorlw	1
 11295  13F7  009E               	movwf	30	;volatile
 11296  13F8  0008               	return
 11297  13F9                     __end_of_PWM_Initialize:	
 11298                           
 11299                           	psect	text20
 11300  14C6                     __ptext20:	
 11301 ;; *************** function _PIN_MANAGER_Initialize *****************
 11302 ;; Defined at:
 11303 ;;		line 5 in file "pin_manager.c"
 11304 ;; Parameters:    Size  Location     Type
 11305 ;;		None
 11306 ;; Auto vars:     Size  Location     Type
 11307 ;;  state           1    0[COMMON] char 
 11308 ;; Return value:  Size  Location     Type
 11309 ;;                  1    wreg      void 
 11310 ;; Registers used:
 11311 ;;		wreg, status,2
 11312 ;; Tracked objects:
 11313 ;;		On entry : 0/0
 11314 ;;		On exit  : 0/0
 11315 ;;		Unchanged: 0/0
 11316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11318 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11320 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11321 ;;Total ram usage:        1 bytes
 11322 ;; Hardware stack levels used:    1
 11323 ;; This function calls:
 11324 ;;		Nothing
 11325 ;; This function is called by:
 11326 ;;		_SYSTEM_Initialize
 11327 ;; This function uses a non-reentrant model
 11328 ;;
 11329                           
 11330                           
 11331                           ;psect for function _PIN_MANAGER_Initialize
 11332  14C6                     _PIN_MANAGER_Initialize:	
 11333                           
 11334                           ;pin_manager.c: 7: LATA = 0x20;
 11335                           
 11336                           ;incstack = 0
 11337                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 11338  14C6  3020               	movlw	32
 11339  14C7  0020               	movlb	0	; select bank0
 11340  14C8  0096               	movwf	22	;volatile
 11341                           
 11342                           ;pin_manager.c: 8: LATB = 0x00;
 11343  14C9  0197               	clrf	23	;volatile
 11344                           
 11345                           ;pin_manager.c: 9: LATC = 0x00;
 11346  14CA  0198               	clrf	24	;volatile
 11347                           
 11348                           ;pin_manager.c: 11: WPUA = 0x00;
 11349  14CB  003E               	movlb	30	; select bank30
 11350  14CC  01B9               	clrf	57	;volatile
 11351                           
 11352                           ;pin_manager.c: 12: WPUB = 0x00;
 11353  14CD  01C4               	clrf	68	;volatile
 11354                           
 11355                           ;pin_manager.c: 13: WPUC = 0x00;
 11356  14CE  01CF               	clrf	79	;volatile
 11357                           
 11358                           ;pin_manager.c: 14: WPUE = 0x8;
 11359  14CF  3008               	movlw	8
 11360  14D0  00E5               	movwf	101	;volatile
 11361                           
 11362                           ;pin_manager.c: 16: TRISA = 0x00;
 11363  14D1  0020               	movlb	0	; select bank0
 11364  14D2  0191               	clrf	17	;volatile
 11365                           
 11366                           ;pin_manager.c: 17: TRISB = 0x0E;
 11367  14D3  300E               	movlw	14
 11368  14D4  0092               	movwf	18	;volatile
 11369                           
 11370                           ;pin_manager.c: 18: TRISC = 0xFF;
 11371  14D5  30FF               	movlw	255
 11372  14D6  0093               	movwf	19	;volatile
 11373                           
 11374                           ;pin_manager.c: 20: ANSELA = 0x00;
 11375  14D7  003E               	movlb	30	; select bank30
 11376  14D8  01B8               	clrf	56	;volatile
 11377                           
 11378                           ;pin_manager.c: 21: ANSELB = 0x0A;
 11379  14D9  300A               	movlw	10
 11380  14DA  00C3               	movwf	67	;volatile
 11381                           
 11382                           ;pin_manager.c: 22: ANSELC = 0xFF;
 11383  14DB  30FF               	movlw	255
 11384  14DC  00CE               	movwf	78	;volatile
 11385                           
 11386                           ;pin_manager.c: 25: PIE0bits.IOCIE = 0;
 11387  14DD  002E               	movlb	14	; select bank14
 11388  14DE  1216               	bcf	22,4	;volatile
 11389                           
 11390                           ;pin_manager.c: 26: int8_t state = GIE;
 11391  14DF  3000               	movlw	0
 11392  14E0  1B8B               	btfsc	11,7	;volatile
 11393  14E1  3001               	movlw	1
 11394  14E2  00F0               	movwf	PIN_MANAGER_Initialize@state
 11395                           
 11396                           ;pin_manager.c: 27: GIE = 0;
 11397  14E3  138B               	bcf	11,7	;volatile
 11398                           
 11399                           ;pin_manager.c: 28: PPSLOCK = 0x55;
 11400  14E4  3055               	movlw	85
 11401  14E5  003D               	movlb	29	; select bank29
 11402  14E6  008F               	movwf	15	;volsfr
 11403                           
 11404                           ;pin_manager.c: 29: PPSLOCK = 0xAA;
 11405  14E7  30AA               	movlw	170
 11406  14E8  008F               	movwf	15	;volsfr
 11407                           
 11408                           ;pin_manager.c: 30: PPSLOCKbits.PPSLOCKED = 0x00;
 11409  14E9  100F               	bcf	15,0	;volsfr
 11410                           
 11411                           ;pin_manager.c: 32: RA6PPS = 0x0E;
 11412  14EA  300E               	movlw	14
 11413  14EB  003E               	movlb	30	; select bank30
 11414  14EC  0096               	movwf	22	;volatile
 11415                           
 11416                           ;pin_manager.c: 33: RA7PPS = 0x0F;
 11417  14ED  300F               	movlw	15
 11418  14EE  0097               	movwf	23	;volatile
 11419                           
 11420                           ;pin_manager.c: 34: RB0PPS = 0x09;
 11421  14EF  3009               	movlw	9
 11422  14F0  0098               	movwf	24	;volatile
 11423                           
 11424                           ;pin_manager.c: 35: PPSLOCK = 0x55;
 11425  14F1  3055               	movlw	85
 11426  14F2  003D               	movlb	29	; select bank29
 11427  14F3  008F               	movwf	15	;volsfr
 11428                           
 11429                           ;pin_manager.c: 36: PPSLOCK = 0xAA;
 11430  14F4  30AA               	movlw	170
 11431  14F5  008F               	movwf	15	;volsfr
 11432                           
 11433                           ;pin_manager.c: 37: PPSLOCKbits.PPSLOCKED = 0x01;
 11434  14F6  140F               	bsf	15,0	;volsfr
 11435                           
 11436                           ;pin_manager.c: 38: GIE = state;
 11437  14F7  1C70               	btfss	PIN_MANAGER_Initialize@state,0
 11438  14F8  2CFB               	goto	u2620
 11439  14F9  178B               	bsf	11,7	;volatile
 11440  14FA  0008               	return
 11441  14FB                     u2620:	
 11442  14FB  138B               	bcf	11,7	;volatile
 11443  14FC  0008               	return
 11444  14FD                     __end_of_PIN_MANAGER_Initialize:	
 11445                           
 11446                           	psect	text21
 11447  12C8                     __ptext21:	
 11448 ;; *************** function _OSCILLATOR_Initialize *****************
 11449 ;; Defined at:
 11450 ;;		line 88 in file "system.c"
 11451 ;; Parameters:    Size  Location     Type
 11452 ;;		None
 11453 ;; Auto vars:     Size  Location     Type
 11454 ;;		None
 11455 ;; Return value:  Size  Location     Type
 11456 ;;                  1    wreg      void 
 11457 ;; Registers used:
 11458 ;;		wreg, status,2
 11459 ;; Tracked objects:
 11460 ;;		On entry : 0/0
 11461 ;;		On exit  : 0/0
 11462 ;;		Unchanged: 0/0
 11463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11468 ;;Total ram usage:        0 bytes
 11469 ;; Hardware stack levels used:    1
 11470 ;; This function calls:
 11471 ;;		Nothing
 11472 ;; This function is called by:
 11473 ;;		_SYSTEM_Initialize
 11474 ;; This function uses a non-reentrant model
 11475 ;;
 11476                           
 11477                           
 11478                           ;psect for function _OSCILLATOR_Initialize
 11479  12C8                     _OSCILLATOR_Initialize:	
 11480                           
 11481                           ;system.c: 90: OSCCON1 = 0x60;
 11482                           
 11483                           ;incstack = 0
 11484                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 11485  12C8  3060               	movlw	96
 11486  12C9  0031               	movlb	17	; select bank17
 11487  12CA  008D               	movwf	13	;volatile
 11488                           
 11489                           ;system.c: 91: OSCCON3 = 0x00;
 11490  12CB  018F               	clrf	15	;volatile
 11491                           
 11492                           ;system.c: 92: OSCEN = 0x00;
 11493  12CC  0191               	clrf	17	;volatile
 11494                           
 11495                           ;system.c: 93: OSCFRQ = 0x06;
 11496  12CD  3006               	movlw	6
 11497  12CE  0093               	movwf	19	;volatile
 11498                           
 11499                           ;system.c: 94: OSCTUNE = 0x00;
 11500  12CF  0192               	clrf	18	;volatile
 11501  12D0  0008               	return
 11502  12D1                     __end_of_OSCILLATOR_Initialize:	
 11503                           
 11504                           	psect	text22
 11505  14FD                     __ptext22:	
 11506 ;; *************** function _LCDInit *****************
 11507 ;; Defined at:
 11508 ;;		line 247 in file "lcd.c"
 11509 ;; Parameters:    Size  Location     Type
 11510 ;;		None
 11511 ;; Auto vars:     Size  Location     Type
 11512 ;;		None
 11513 ;; Return value:  Size  Location     Type
 11514 ;;                  1    wreg      void 
 11515 ;; Registers used:
 11516 ;;		wreg, status,2, status,0, pclath, cstack
 11517 ;; Tracked objects:
 11518 ;;		On entry : 0/0
 11519 ;;		On exit  : 0/0
 11520 ;;		Unchanged: 0/0
 11521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11524 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11525 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11526 ;;Total ram usage:        1 bytes
 11527 ;; Hardware stack levels used:    1
 11528 ;; Hardware stack levels required when called:    1
 11529 ;; This function calls:
 11530 ;;		_LCDWrite
 11531 ;; This function is called by:
 11532 ;;		_SYSTEM_Initialize
 11533 ;;		_main
 11534 ;; This function uses a non-reentrant model
 11535 ;;
 11536                           
 11537                           
 11538                           ;psect for function _LCDInit
 11539  14FD                     _LCDInit:	
 11540                           
 11541                           ;lcd.c: 249: TRISAbits.TRISA0 = 0;
 11542                           
 11543                           ;incstack = 0
 11544                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
 11545  14FD  0020               	movlb	0	; select bank0
 11546  14FE  1011               	bcf	17,0	;volatile
 11547                           
 11548                           ;lcd.c: 250: TRISAbits.TRISA1 = 0;
 11549  14FF  1091               	bcf	17,1	;volatile
 11550                           
 11551                           ;lcd.c: 251: TRISAbits.TRISA2 = 0;
 11552  1500  1111               	bcf	17,2	;volatile
 11553                           
 11554                           ;lcd.c: 252: TRISAbits.TRISA3 = 0;
 11555  1501  1191               	bcf	17,3	;volatile
 11556                           
 11557                           ;lcd.c: 253: TRISAbits.TRISA4 = 0;
 11558  1502  1211               	bcf	17,4	;volatile
 11559                           
 11560                           ;lcd.c: 254: LATAbits.LATA3 = 0;
 11561  1503  1196               	bcf	22,3	;volatile
 11562                           
 11563                           ;lcd.c: 255: LATAbits.LATA4 = 0;
 11564  1504  1216               	bcf	22,4	;volatile
 11565                           
 11566                           ;lcd.c: 256: LATAbits.LATA2 = 0;
 11567  1505  1116               	bcf	22,2	;volatile
 11568                           
 11569                           ;lcd.c: 257: LATAbits.LATA0 = 0;
 11570  1506  1016               	bcf	22,0	;volatile
 11571                           
 11572                           ;lcd.c: 259: LATAbits.LATA0 = 1;
 11573  1507  1416               	bsf	22,0	;volatile
 11574                           
 11575                           ;lcd.c: 261: LCDWrite(0, 0x21);
 11576  1508  3021               	movlw	33
 11577  1509  00F5               	movwf	??_LCDInit
 11578  150A  0875               	movf	??_LCDInit,w
 11579  150B  00F0               	movwf	LCDWrite@data
 11580  150C  3000               	movlw	0
 11581  150D  3194  2419  3194   	fcall	_LCDWrite
 11582                           
 11583                           ;lcd.c: 268: LCDWrite(0, 0XB7);
 11584  1510  30B7               	movlw	183
 11585  1511  00F5               	movwf	??_LCDInit
 11586  1512  0875               	movf	??_LCDInit,w
 11587  1513  00F0               	movwf	LCDWrite@data
 11588  1514  3000               	movlw	0
 11589  1515  3194  2419  3194   	fcall	_LCDWrite
 11590                           
 11591                           ;lcd.c: 270: LCDWrite(0, 0x04);
 11592  1518  3004               	movlw	4
 11593  1519  00F5               	movwf	??_LCDInit
 11594  151A  0875               	movf	??_LCDInit,w
 11595  151B  00F0               	movwf	LCDWrite@data
 11596  151C  3000               	movlw	0
 11597  151D  3194  2419  3194   	fcall	_LCDWrite
 11598                           
 11599                           ;lcd.c: 272: LCDWrite(0, 0x14);
 11600  1520  3014               	movlw	20
 11601  1521  00F5               	movwf	??_LCDInit
 11602  1522  0875               	movf	??_LCDInit,w
 11603  1523  00F0               	movwf	LCDWrite@data
 11604  1524  3000               	movlw	0
 11605  1525  3194  2419  3194   	fcall	_LCDWrite
 11606                           
 11607                           ;lcd.c: 274: LCDWrite(0, 0x20);
 11608  1528  3020               	movlw	32
 11609  1529  00F5               	movwf	??_LCDInit
 11610  152A  0875               	movf	??_LCDInit,w
 11611  152B  00F0               	movwf	LCDWrite@data
 11612  152C  3000               	movlw	0
 11613  152D  3194  2419  3194   	fcall	_LCDWrite
 11614                           
 11615                           ;lcd.c: 276: LCDWrite(0, 0x0C);
 11616  1530  300C               	movlw	12
 11617  1531  00F5               	movwf	??_LCDInit
 11618  1532  0875               	movf	??_LCDInit,w
 11619  1533  00F0               	movwf	LCDWrite@data
 11620  1534  3000               	movlw	0
 11621  1535  3194  2419         	fcall	_LCDWrite
 11622  1537  0008               	return
 11623  1538                     __end_of_LCDInit:	
 11624                           
 11625                           	psect	text23
 11626  143E                     __ptext23:	
 11627 ;; *************** function _LCDClear *****************
 11628 ;; Defined at:
 11629 ;;		line 182 in file "lcd.c"
 11630 ;; Parameters:    Size  Location     Type
 11631 ;;		None
 11632 ;; Auto vars:     Size  Location     Type
 11633 ;;  index           2    9[COMMON] int 
 11634 ;; Return value:  Size  Location     Type
 11635 ;;                  1    wreg      void 
 11636 ;; Registers used:
 11637 ;;		wreg, status,2, status,0, pclath, cstack
 11638 ;; Tracked objects:
 11639 ;;		On entry : 0/0
 11640 ;;		On exit  : 0/0
 11641 ;;		Unchanged: 0/0
 11642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11644 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11645 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11646 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11647 ;;Total ram usage:        3 bytes
 11648 ;; Hardware stack levels used:    1
 11649 ;; Hardware stack levels required when called:    2
 11650 ;; This function calls:
 11651 ;;		_LCDWrite
 11652 ;;		_gotoXY
 11653 ;; This function is called by:
 11654 ;;		_SYSTEM_Initialize
 11655 ;;		_main
 11656 ;; This function uses a non-reentrant model
 11657 ;;
 11658                           
 11659                           
 11660                           ;psect for function _LCDClear
 11661  143E                     _LCDClear:	
 11662                           
 11663                           ;lcd.c: 184: int index;
 11664                           ;lcd.c: 185: for (index = 0 ; index < (84 * 48 / 8) ; index++)
 11665                           
 11666                           ;incstack = 0
 11667                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
 11668  143E  01F9               	clrf	LCDClear@index
 11669  143F  01FA               	clrf	LCDClear@index+1
 11670  1440  087A               	movf	LCDClear@index+1,w
 11671  1441  3A80               	xorlw	128
 11672  1442  00F8               	movwf	??_LCDClear
 11673  1443  3081               	movlw	129
 11674  1444  0278               	subwf	??_LCDClear,w
 11675  1445  1D03               	skipz
 11676  1446  2C49               	goto	u2605
 11677  1447  30F8               	movlw	248
 11678  1448  0279               	subwf	LCDClear@index,w
 11679  1449                     u2605:	
 11680  1449  1803               	btfsc	3,0
 11681  144A  2C5F               	goto	l2523
 11682  144B                     l2517:	
 11683                           
 11684                           ;lcd.c: 186: LCDWrite(1, 0x00);
 11685  144B  01F0               	clrf	LCDWrite@data
 11686  144C  3001               	movlw	1
 11687  144D  3194  2419  3194   	fcall	_LCDWrite
 11688  1450  3001               	movlw	1
 11689  1451  07F9               	addwf	LCDClear@index,f
 11690  1452  3000               	movlw	0
 11691  1453  3DFA               	addwfc	LCDClear@index+1,f
 11692  1454  087A               	movf	LCDClear@index+1,w
 11693  1455  3A80               	xorlw	128
 11694  1456  00F8               	movwf	??_LCDClear
 11695  1457  3081               	movlw	129
 11696  1458  0278               	subwf	??_LCDClear,w
 11697  1459  1D03               	skipz
 11698  145A  2C5D               	goto	u2615
 11699  145B  30F8               	movlw	248
 11700  145C  0279               	subwf	LCDClear@index,w
 11701  145D                     u2615:	
 11702  145D  1C03               	skipc
 11703  145E  2C4B               	goto	l2517
 11704  145F                     l2523:	
 11705                           
 11706                           ;lcd.c: 187: gotoXY(0, 0);
 11707  145F  01F5               	clrf	gotoXY@y
 11708  1460  3000               	movlw	0
 11709  1461  3193  2315         	fcall	_gotoXY
 11710  1463  0008               	return
 11711  1464                     __end_of_LCDClear:	
 11712                           
 11713                           	psect	text24
 11714  1315                     __ptext24:	
 11715 ;; *************** function _gotoXY *****************
 11716 ;; Defined at:
 11717 ;;		line 124 in file "lcd.c"
 11718 ;; Parameters:    Size  Location     Type
 11719 ;;  x               1    wreg     unsigned char 
 11720 ;;  y               1    5[COMMON] unsigned char 
 11721 ;; Auto vars:     Size  Location     Type
 11722 ;;  x               1    7[COMMON] unsigned char 
 11723 ;; Return value:  Size  Location     Type
 11724 ;;                  1    wreg      void 
 11725 ;; Registers used:
 11726 ;;		wreg, status,2, status,0, pclath, cstack
 11727 ;; Tracked objects:
 11728 ;;		On entry : 0/0
 11729 ;;		On exit  : 0/0
 11730 ;;		Unchanged: 0/0
 11731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11732 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11733 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11734 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11735 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11736 ;;Total ram usage:        3 bytes
 11737 ;; Hardware stack levels used:    1
 11738 ;; Hardware stack levels required when called:    1
 11739 ;; This function calls:
 11740 ;;		_LCDWrite
 11741 ;; This function is called by:
 11742 ;;		_LCDClear
 11743 ;;		_main
 11744 ;; This function uses a non-reentrant model
 11745 ;;
 11746                           
 11747                           
 11748                           ;psect for function _gotoXY
 11749  1315                     _gotoXY:	
 11750                           
 11751                           ;incstack = 0
 11752                           ; Regs used in _gotoXY: [wreg+status,2+status,0+pclath+cstack]
 11753                           ;gotoXY@x stored from wreg
 11754  1315  00F7               	movwf	gotoXY@x
 11755                           
 11756                           ;lcd.c: 126: LCDWrite(0,(uint8_t)(0x80 | x));
 11757  1316  0877               	movf	gotoXY@x,w
 11758  1317  3880               	iorlw	128
 11759  1318  00F6               	movwf	??_gotoXY
 11760  1319  0876               	movf	??_gotoXY,w
 11761  131A  00F0               	movwf	LCDWrite@data
 11762  131B  3000               	movlw	0
 11763  131C  3194  2419  3193   	fcall	_LCDWrite
 11764                           
 11765                           ;lcd.c: 127: LCDWrite(0,(uint8_t)(0x40 | y));
 11766  131F  0875               	movf	gotoXY@y,w
 11767  1320  3840               	iorlw	64
 11768  1321  00F6               	movwf	??_gotoXY
 11769  1322  0876               	movf	??_gotoXY,w
 11770  1323  00F0               	movwf	LCDWrite@data
 11771  1324  3000               	movlw	0
 11772  1325  3194  2419         	fcall	_LCDWrite
 11773  1327  0008               	return
 11774  1328                     __end_of_gotoXY:	
 11775                           
 11776                           	psect	text25
 11777  15C2                     __ptext25:	
 11778 ;; *************** function _Init_Battery_State_Machine *****************
 11779 ;; Defined at:
 11780 ;;		line 22 in file "battery_charger.c"
 11781 ;; Parameters:    Size  Location     Type
 11782 ;;		None
 11783 ;; Auto vars:     Size  Location     Type
 11784 ;;		None
 11785 ;; Return value:  Size  Location     Type
 11786 ;;                  1    wreg      void 
 11787 ;; Registers used:
 11788 ;;		wreg, status,2, status,0, pclath, cstack
 11789 ;; Tracked objects:
 11790 ;;		On entry : 0/0
 11791 ;;		On exit  : 0/0
 11792 ;;		Unchanged: 0/0
 11793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11796 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11797 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11798 ;;Total ram usage:        2 bytes
 11799 ;; Hardware stack levels used:    1
 11800 ;; Hardware stack levels required when called:    2
 11801 ;; This function calls:
 11802 ;;		___awtoft
 11803 ;;		___ftmul
 11804 ;;		___fttol
 11805 ;; This function is called by:
 11806 ;;		_SYSTEM_Initialize
 11807 ;; This function uses a non-reentrant model
 11808 ;;
 11809                           
 11810                           
 11811                           ;psect for function _Init_Battery_State_Machine
 11812  15C2                     _Init_Battery_State_Machine:	
 11813                           
 11814                           ;battery_charger.c: 24: battery_state = PRECHARGE;
 11815                           
 11816                           ;incstack = 0
 11817                           ; Regs used in _Init_Battery_State_Machine: [wreg+status,2+status,0+pclath+cstack]
 11818  15C2  3003               	movlw	3
 11819  15C3  0020               	movlb	0	; select bank0
 11820  15C4  00CE               	movwf	??_Init_Battery_State_Machine
 11821  15C5  084E               	movf	??_Init_Battery_State_Machine,w
 11822  15C6  0021               	movlb	1	; select bank1
 11823  15C7  00EC               	movwf	_battery_state^(0+128)
 11824                           
 11825                           ;battery_charger.c: 25: state_counter = 600;
 11826  15C8  3058               	movlw	88
 11827  15C9  00E8               	movwf	_state_counter^(0+128)
 11828  15CA  3002               	movlw	2
 11829  15CB  00E9               	movwf	(_state_counter^(0+128)+1)
 11830                           
 11831                           ;battery_charger.c: 27: { Iref = 10; };
 11832  15CC  300A               	movlw	10
 11833  15CD  00E6               	movwf	_Iref^(0+128)
 11834  15CE  3000               	movlw	0
 11835  15CF  00E7               	movwf	(_Iref^(0+128)+1)
 11836                           
 11837                           ;battery_charger.c: 28: { Vref = 1425+(int16_t)((250-batteryTemp)*.24); };
 11838  15D0  096D               	comf	_batteryTemp^(0+128),w
 11839  15D1  0020               	movlb	0	; select bank0
 11840  15D2  00CE               	movwf	??_Init_Battery_State_Machine
 11841  15D3  0021               	movlb	1	; select bank1
 11842  15D4  096E               	comf	(_batteryTemp+1)^(0+128),w
 11843  15D5  0020               	movlb	0	; select bank0
 11844  15D6  00CF               	movwf	??_Init_Battery_State_Machine+1
 11845  15D7  0ACE               	incf	??_Init_Battery_State_Machine,f
 11846  15D8  1903               	skipnz
 11847  15D9  0ACF               	incf	??_Init_Battery_State_Machine+1,f
 11848  15DA  084E               	movf	??_Init_Battery_State_Machine,w
 11849  15DB  3EFA               	addlw	250
 11850  15DC  00F8               	movwf	___awtoft@c
 11851  15DD  3000               	movlw	0
 11852  15DE  3D4F               	addwfc	??_Init_Battery_State_Machine+1,w
 11853  15DF  00F9               	movwf	___awtoft@c+1
 11854  15E0  3193  23F9  3195   	fcall	___awtoft
 11855  15E3  0878               	movf	?___awtoft,w
 11856  15E4  0020               	movlb	0	; select bank0
 11857  15E5  00B3               	movwf	___ftmul@f2
 11858  15E6  0879               	movf	?___awtoft+1,w
 11859  15E7  00B4               	movwf	___ftmul@f2+1
 11860  15E8  087A               	movf	?___awtoft+2,w
 11861  15E9  00B5               	movwf	___ftmul@f2+2
 11862  15EA  30C3               	movlw	195
 11863  15EB  00B0               	movwf	___ftmul@f1
 11864  15EC  3075               	movlw	117
 11865  15ED  00B1               	movwf	___ftmul@f1+1
 11866  15EE  303E               	movlw	62
 11867  15EF  00B2               	movwf	___ftmul@f1+2
 11868  15F0  318B  23D2  3195   	fcall	___ftmul
 11869  15F3  0020               	movlb	0	; select bank0
 11870  15F4  0830               	movf	?___ftmul,w
 11871  15F5  00C0               	movwf	___fttol@f1
 11872  15F6  0831               	movf	?___ftmul+1,w
 11873  15F7  00C1               	movwf	___fttol@f1+1
 11874  15F8  0832               	movf	?___ftmul+2,w
 11875  15F9  00C2               	movwf	___fttol@f1+2
 11876  15FA  3189  21F2         	fcall	___fttol
 11877  15FC  0020               	movlb	0	; select bank0
 11878  15FD  0840               	movf	?___fttol,w
 11879  15FE  3E91               	addlw	145
 11880  15FF  0021               	movlb	1	; select bank1
 11881  1600  00E4               	movwf	_Vref^(0+128)
 11882  1601  3005               	movlw	5
 11883  1602  0020               	movlb	0	; select bank0
 11884  1603  3D41               	addwfc	?___fttol+1,w
 11885  1604  0021               	movlb	1	; select bank1
 11886  1605  00E5               	movwf	(_Vref+1)^(0+128)
 11887                           
 11888                           ;battery_charger.c: 30: Imin = 25;
 11889  1606  3019               	movlw	25
 11890  1607  0022               	movlb	2	; select bank2
 11891  1608  00E0               	movwf	_Imin^(0+256)
 11892  1609  3000               	movlw	0
 11893  160A  00E1               	movwf	(_Imin^(0+256)+1)
 11894                           
 11895                           ;battery_charger.c: 31: IminCount = 10;
 11896  160B  300A               	movlw	10
 11897  160C  0021               	movlb	1	; select bank1
 11898  160D  00EA               	movwf	_IminCount^(0+128)
 11899  160E  3000               	movlw	0
 11900  160F  00EB               	movwf	(_IminCount^(0+128)+1)
 11901  1610  0008               	return
 11902  1611                     __end_of_Init_Battery_State_Machine:	
 11903                           
 11904                           	psect	text26
 11905  13BB                     __ptext26:	
 11906 ;; *************** function _ADC_Initialize *****************
 11907 ;; Defined at:
 11908 ;;		line 83 in file "adc.c"
 11909 ;; Parameters:    Size  Location     Type
 11910 ;;		None
 11911 ;; Auto vars:     Size  Location     Type
 11912 ;;		None
 11913 ;; Return value:  Size  Location     Type
 11914 ;;                  1    wreg      void 
 11915 ;; Registers used:
 11916 ;;		wreg, status,2
 11917 ;; Tracked objects:
 11918 ;;		On entry : 0/0
 11919 ;;		On exit  : 0/0
 11920 ;;		Unchanged: 0/0
 11921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11926 ;;Total ram usage:        0 bytes
 11927 ;; Hardware stack levels used:    1
 11928 ;; This function calls:
 11929 ;;		Nothing
 11930 ;; This function is called by:
 11931 ;;		_SYSTEM_Initialize
 11932 ;; This function uses a non-reentrant model
 11933 ;;
 11934                           
 11935                           
 11936                           ;psect for function _ADC_Initialize
 11937  13BB                     _ADC_Initialize:	
 11938                           
 11939                           ;adc.c: 85: ADCON1 = 0x00;
 11940                           
 11941                           ;incstack = 0
 11942                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 11943  13BB  0021               	movlb	1	; select bank1
 11944  13BC  0194               	clrf	20	;volatile
 11945                           
 11946                           ;adc.c: 87: ADCON2 = 0x00;
 11947  13BD  0195               	clrf	21	;volatile
 11948                           
 11949                           ;adc.c: 89: ADCON3 = 0x00;
 11950  13BE  0196               	clrf	22	;volatile
 11951                           
 11952                           ;adc.c: 91: ADACT = 0x00;
 11953  13BF  0199               	clrf	25	;volatile
 11954                           
 11955                           ;adc.c: 93: ADSTAT = 0x00;
 11956  13C0  0197               	clrf	23	;volatile
 11957                           
 11958                           ;adc.c: 95: FVRCON = 0b11000011;
 11959  13C1  30C3               	movlw	195
 11960  13C2  0032               	movlb	18	; select bank18
 11961  13C3  008C               	movwf	12	;volatile
 11962                           
 11963                           ;adc.c: 96: ADCLK = 0x3F;
 11964  13C4  303F               	movlw	63
 11965  13C5  0021               	movlb	1	; select bank1
 11966  13C6  0098               	movwf	24	;volatile
 11967                           
 11968                           ;adc.c: 103: ADREF = 0x03;
 11969  13C7  3003               	movlw	3
 11970  13C8  009A               	movwf	26	;volatile
 11971                           
 11972                           ;adc.c: 106: ADCAP = 0x00;
 11973  13C9  019B               	clrf	27	;volatile
 11974                           
 11975                           ;adc.c: 109: ADPRE = 0x07;
 11976  13CA  3007               	movlw	7
 11977  13CB  009C               	movwf	28	;volatile
 11978                           
 11979                           ;adc.c: 111: ADACQ = 0x00;
 11980  13CC  019D               	clrf	29	;volatile
 11981                           
 11982                           ;adc.c: 113: ADPCH = 0x00;
 11983  13CD  019E               	clrf	30	;volatile
 11984                           
 11985                           ;adc.c: 115: ADRPT = 0x00;
 11986  13CE  0022               	movlb	2	; select bank2
 11987  13CF  018D               	clrf	13	;volatile
 11988                           
 11989                           ;adc.c: 117: ADLTHL = 0x00;
 11990  13D0  018E               	clrf	14	;volatile
 11991                           
 11992                           ;adc.c: 119: ADLTHH = 0x00;
 11993  13D1  018F               	clrf	15	;volatile
 11994                           
 11995                           ;adc.c: 121: ADUTHL = 0x00;
 11996  13D2  0190               	clrf	16	;volatile
 11997                           
 11998                           ;adc.c: 123: ADUTHH = 0x00;
 11999  13D3  0191               	clrf	17	;volatile
 12000                           
 12001                           ;adc.c: 125: ADSTPTL = 0x00;
 12002  13D4  0192               	clrf	18	;volatile
 12003                           
 12004                           ;adc.c: 127: ADSTPTH = 0x00;
 12005  13D5  0193               	clrf	19	;volatile
 12006                           
 12007                           ;adc.c: 129: ADCON0 = 0x84;
 12008  13D6  3084               	movlw	132
 12009  13D7  0021               	movlb	1	; select bank1
 12010  13D8  0093               	movwf	19	;volatile
 12011  13D9  0008               	return
 12012  13DA                     __end_of_ADC_Initialize:	
 12013                           
 12014                           	psect	text27
 12015  1369                     __ptext27:	
 12016 ;; *************** function _PWM7_LoadDutyValue *****************
 12017 ;; Defined at:
 12018 ;;		line 37 in file "pwm.c"
 12019 ;; Parameters:    Size  Location     Type
 12020 ;;  dutyCycle7      2    0[COMMON] unsigned int 
 12021 ;; Auto vars:     Size  Location     Type
 12022 ;;		None
 12023 ;; Return value:  Size  Location     Type
 12024 ;;                  1    wreg      void 
 12025 ;; Registers used:
 12026 ;;		wreg, status,2, status,0
 12027 ;; Tracked objects:
 12028 ;;		On entry : 0/0
 12029 ;;		On exit  : 0/0
 12030 ;;		Unchanged: 0/0
 12031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12032 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12034 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12035 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12036 ;;Total ram usage:        4 bytes
 12037 ;; Hardware stack levels used:    1
 12038 ;; This function calls:
 12039 ;;		Nothing
 12040 ;; This function is called by:
 12041 ;;		_main
 12042 ;; This function uses a non-reentrant model
 12043 ;;
 12044                           
 12045                           
 12046                           ;psect for function _PWM7_LoadDutyValue
 12047  1369                     _PWM7_LoadDutyValue:	
 12048                           
 12049                           ;pwm.c: 39: PWM7DCH = (dutyCycle7 & 0x03FC)>>2;
 12050                           
 12051                           ;incstack = 0
 12052                           ; Regs used in _PWM7_LoadDutyValue: [wreg+status,2+status,0]
 12053  1369  0871               	movf	PWM7_LoadDutyValue@dutyCycle7+1,w
 12054  136A  00F3               	movwf	??_PWM7_LoadDutyValue+1
 12055  136B  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 12056  136C  00F2               	movwf	??_PWM7_LoadDutyValue
 12057  136D  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 12058  136E  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 12059  136F  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 12060  1370  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 12061  1371  0872               	movf	??_PWM7_LoadDutyValue,w
 12062  1372  0027               	movlb	7	; select bank7
 12063  1373  0091               	movwf	17	;volatile
 12064                           
 12065                           ;pwm.c: 41: PWM7DCL = (dutyCycle7 & 0x0003)<<6;
 12066  1374  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 12067  1375  3903               	andlw	3
 12068  1376  00F2               	movwf	??_PWM7_LoadDutyValue
 12069  1377  3005               	movlw	5
 12070  1378                     u3385:	
 12071  1378  35F2               	lslf	??_PWM7_LoadDutyValue,f
 12072  1379  3EFF               	addlw	-1
 12073  137A  1D03               	skipz
 12074  137B  2B78               	goto	u3385
 12075  137C  3572               	lslf	??_PWM7_LoadDutyValue,w
 12076  137D  0090               	movwf	16	;volatile
 12077  137E  0008               	return
 12078  137F                     __end_of_PWM7_LoadDutyValue:	
 12079                           
 12080                           	psect	text28
 12081  1353                     __ptext28:	
 12082 ;; *************** function _PWM6_LoadDutyValue *****************
 12083 ;; Defined at:
 12084 ;;		line 30 in file "pwm.c"
 12085 ;; Parameters:    Size  Location     Type
 12086 ;;  dutyCycle6      2    0[COMMON] unsigned int 
 12087 ;; Auto vars:     Size  Location     Type
 12088 ;;		None
 12089 ;; Return value:  Size  Location     Type
 12090 ;;                  1    wreg      void 
 12091 ;; Registers used:
 12092 ;;		wreg, status,2, status,0
 12093 ;; Tracked objects:
 12094 ;;		On entry : 0/0
 12095 ;;		On exit  : 0/0
 12096 ;;		Unchanged: 0/0
 12097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12098 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12100 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12101 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12102 ;;Total ram usage:        4 bytes
 12103 ;; Hardware stack levels used:    1
 12104 ;; This function calls:
 12105 ;;		Nothing
 12106 ;; This function is called by:
 12107 ;;		_main
 12108 ;; This function uses a non-reentrant model
 12109 ;;
 12110                           
 12111                           
 12112                           ;psect for function _PWM6_LoadDutyValue
 12113  1353                     _PWM6_LoadDutyValue:	
 12114                           
 12115                           ;pwm.c: 32: PWM6DCH = (dutyCycle6 & 0x03FC)>>2;
 12116                           
 12117                           ;incstack = 0
 12118                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 12119  1353  0871               	movf	PWM6_LoadDutyValue@dutyCycle6+1,w
 12120  1354  00F3               	movwf	??_PWM6_LoadDutyValue+1
 12121  1355  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 12122  1356  00F2               	movwf	??_PWM6_LoadDutyValue
 12123  1357  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 12124  1358  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 12125  1359  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 12126  135A  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 12127  135B  0872               	movf	??_PWM6_LoadDutyValue,w
 12128  135C  0027               	movlb	7	; select bank7
 12129  135D  008D               	movwf	13	;volatile
 12130                           
 12131                           ;pwm.c: 34: PWM6DCL = (dutyCycle6 & 0x0003)<<6;
 12132  135E  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 12133  135F  3903               	andlw	3
 12134  1360  00F2               	movwf	??_PWM6_LoadDutyValue
 12135  1361  3005               	movlw	5
 12136  1362                     u3375:	
 12137  1362  35F2               	lslf	??_PWM6_LoadDutyValue,f
 12138  1363  3EFF               	addlw	-1
 12139  1364  1D03               	skipz
 12140  1365  2B62               	goto	u3375
 12141  1366  3572               	lslf	??_PWM6_LoadDutyValue,w
 12142  1367  008C               	movwf	12	;volatile
 12143  1368  0008               	return
 12144  1369                     __end_of_PWM6_LoadDutyValue:	
 12145                           
 12146                           	psect	text29
 12147  133D                     __ptext29:	
 12148 ;; *************** function _PWM1_LoadDutyValue *****************
 12149 ;; Defined at:
 12150 ;;		line 44 in file "pwm.c"
 12151 ;; Parameters:    Size  Location     Type
 12152 ;;  dutyCycle1      2    0[COMMON] unsigned int 
 12153 ;; Auto vars:     Size  Location     Type
 12154 ;;		None
 12155 ;; Return value:  Size  Location     Type
 12156 ;;                  1    wreg      void 
 12157 ;; Registers used:
 12158 ;;		wreg, status,2, status,0
 12159 ;; Tracked objects:
 12160 ;;		On entry : 0/0
 12161 ;;		On exit  : 0/0
 12162 ;;		Unchanged: 0/0
 12163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12164 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12166 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12167 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12168 ;;Total ram usage:        4 bytes
 12169 ;; Hardware stack levels used:    1
 12170 ;; This function calls:
 12171 ;;		Nothing
 12172 ;; This function is called by:
 12173 ;;		_main
 12174 ;; This function uses a non-reentrant model
 12175 ;;
 12176                           
 12177                           
 12178                           ;psect for function _PWM1_LoadDutyValue
 12179  133D                     _PWM1_LoadDutyValue:	
 12180                           
 12181                           ;pwm.c: 46: CCPR1H = (dutyCycle1& 0x03FC)>>2;
 12182                           
 12183                           ;incstack = 0
 12184                           ; Regs used in _PWM1_LoadDutyValue: [wreg+status,2+status,0]
 12185  133D  0871               	movf	PWM1_LoadDutyValue@dutyCycle1+1,w
 12186  133E  00F3               	movwf	??_PWM1_LoadDutyValue+1
 12187  133F  0870               	movf	PWM1_LoadDutyValue@dutyCycle1,w
 12188  1340  00F2               	movwf	??_PWM1_LoadDutyValue
 12189  1341  36F3               	lsrf	??_PWM1_LoadDutyValue+1,f
 12190  1342  0CF2               	rrf	??_PWM1_LoadDutyValue,f
 12191  1343  36F3               	lsrf	??_PWM1_LoadDutyValue+1,f
 12192  1344  0CF2               	rrf	??_PWM1_LoadDutyValue,f
 12193  1345  0872               	movf	??_PWM1_LoadDutyValue,w
 12194  1346  0026               	movlb	6	; select bank6
 12195  1347  008D               	movwf	13	;volatile
 12196                           
 12197                           ;pwm.c: 47: CCPR1L = (dutyCycle1 & 0x0003)<<6;
 12198  1348  0870               	movf	PWM1_LoadDutyValue@dutyCycle1,w
 12199  1349  3903               	andlw	3
 12200  134A  00F2               	movwf	??_PWM1_LoadDutyValue
 12201  134B  3005               	movlw	5
 12202  134C                     u3395:	
 12203  134C  35F2               	lslf	??_PWM1_LoadDutyValue,f
 12204  134D  3EFF               	addlw	-1
 12205  134E  1D03               	skipz
 12206  134F  2B4C               	goto	u3395
 12207  1350  3572               	lslf	??_PWM1_LoadDutyValue,w
 12208  1351  008C               	movwf	12	;volatile
 12209  1352  0008               	return
 12210  1353                     __end_of_PWM1_LoadDutyValue:	
 12211                           
 12212                           	psect	text30
 12213  0C86                     __ptext30:	
 12214 ;; *************** function _LCDWriteInt *****************
 12215 ;; Defined at:
 12216 ;;		line 190 in file "lcd.c"
 12217 ;; Parameters:    Size  Location     Type
 12218 ;;  value           2    8[BANK0 ] int 
 12219 ;;  fieldLength     1   10[BANK0 ] char 
 12220 ;;  numPlaces       1   11[BANK0 ] unsigned char 
 12221 ;;  sign            1   12[BANK0 ] unsigned char 
 12222 ;; Auto vars:     Size  Location     Type
 12223 ;;  str             5   17[BANK0 ] unsigned char [5]
 12224 ;;  i               1   23[BANK0 ] unsigned char 
 12225 ;;  j               1   22[BANK0 ] unsigned char 
 12226 ;; Return value:  Size  Location     Type
 12227 ;;                  1    wreg      void 
 12228 ;; Registers used:
 12229 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12230 ;; Tracked objects:
 12231 ;;		On entry : 0/0
 12232 ;;		On exit  : 0/0
 12233 ;;		Unchanged: 0/0
 12234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12235 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12236 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12237 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12238 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12239 ;;Total ram usage:       16 bytes
 12240 ;; Hardware stack levels used:    1
 12241 ;; Hardware stack levels required when called:    2
 12242 ;; This function calls:
 12243 ;;		_LCDWriteCharacter
 12244 ;;		___awdiv
 12245 ;;		___lwmod
 12246 ;; This function is called by:
 12247 ;;		_main
 12248 ;; This function uses a non-reentrant model
 12249 ;;
 12250                           
 12251                           
 12252                           ;psect for function _LCDWriteInt
 12253  0C86                     _LCDWriteInt:	
 12254                           
 12255                           ;lcd.c: 192: uint8_t str[5]={0,0,0,0,0};
 12256                           
 12257                           ;incstack = 0
 12258                           ; Regs used in _LCDWriteInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12259  0C86  30B0               	movlw	low LCDWriteInt@F14389
 12260  0C87  0086               	movwf	6
 12261  0C88  3000               	movlw	high LCDWriteInt@F14389
 12262  0C89  0087               	movwf	7
 12263  0C8A  3031               	movlw	low LCDWriteInt@str
 12264  0C8B  0084               	movwf	4
 12265  0C8C  3000               	movlw	high LCDWriteInt@str
 12266  0C8D  0085               	movwf	5
 12267  0C8E  3005               	movlw	5
 12268  0C8F  0020               	movlb	0	; select bank0
 12269  0C90  00AD               	movwf	??_LCDWriteInt
 12270  0C91                     u3280:	
 12271  0C91  0016               	moviw fsr1++
 12272  0C92  001A               	movwi fsr0++
 12273  0C93  0BAD               	decfsz	??_LCDWriteInt,f
 12274  0C94  2C91               	goto	u3280
 12275                           
 12276                           ;lcd.c: 193: uint8_t i=4,j=0;
 12277  0C95  3004               	movlw	4
 12278  0C96  00AD               	movwf	??_LCDWriteInt
 12279  0C97  082D               	movf	??_LCDWriteInt,w
 12280  0C98  00B7               	movwf	LCDWriteInt@i
 12281  0C99  01B6               	clrf	LCDWriteInt@j
 12282                           
 12283                           ;lcd.c: 195: if(value<0)
 12284  0C9A  1FA9               	btfss	LCDWriteInt@value+1,7
 12285  0C9B  2CA7               	goto	l2907
 12286                           
 12287                           ;lcd.c: 196: {
 12288                           ;lcd.c: 197: LCDWriteCharacter('-');
 12289  0C9C  302D               	movlw	45
 12290  0C9D  3196  2662  318C   	fcall	_LCDWriteCharacter
 12291                           
 12292                           ;lcd.c: 198: value=value*-1;
 12293  0CA0  0020               	movlb	0	; select bank0
 12294  0CA1  09A8               	comf	LCDWriteInt@value,f
 12295  0CA2  09A9               	comf	LCDWriteInt@value+1,f
 12296  0CA3  0AA8               	incf	LCDWriteInt@value,f
 12297  0CA4  1903               	skipnz
 12298  0CA5  0AA9               	incf	LCDWriteInt@value+1,f
 12299                           
 12300                           ;lcd.c: 199: }
 12301  0CA6  2CAE               	goto	l2917
 12302  0CA7                     l2907:	
 12303                           
 12304                           ;lcd.c: 201: else
 12305                           ;lcd.c: 202: {
 12306                           ;lcd.c: 203: if(sign == 1)
 12307  0CA7  032C               	decf	LCDWriteInt@sign,w
 12308  0CA8  1D03               	btfss	3,2
 12309  0CA9  2CAE               	goto	l2917
 12310                           
 12311                           ;lcd.c: 204: {
 12312                           ;lcd.c: 205: LCDWriteCharacter('+');
 12313  0CAA  302B               	movlw	43
 12314  0CAB  3196  2662  318C   	fcall	_LCDWriteCharacter
 12315  0CAE                     l2917:	
 12316                           ;lcd.c: 206: }
 12317                           ;lcd.c: 207: }
 12318                           ;lcd.c: 209: while(value)
 12319                           
 12320  0CAE  0020               	movlb	0	; select bank0
 12321  0CAF  0828               	movf	LCDWriteInt@value,w
 12322  0CB0  0429               	iorwf	LCDWriteInt@value+1,w
 12323  0CB1  1903               	btfsc	3,2
 12324  0CB2  2CDB               	goto	l2919
 12325                           
 12326                           ;lcd.c: 210: {
 12327                           ;lcd.c: 211: str[i]=(uint16_t)value%10;
 12328  0CB3  300A               	movlw	10
 12329  0CB4  00F0               	movwf	___lwmod@divisor
 12330  0CB5  3000               	movlw	0
 12331  0CB6  00F1               	movwf	___lwmod@divisor+1
 12332  0CB7  0020               	movlb	0	; select bank0
 12333  0CB8  0829               	movf	LCDWriteInt@value+1,w
 12334  0CB9  00F3               	movwf	___lwmod@dividend+1
 12335  0CBA  0828               	movf	LCDWriteInt@value,w
 12336  0CBB  00F2               	movwf	___lwmod@dividend
 12337  0CBC  3194  2464  318C   	fcall	___lwmod
 12338  0CBF  0870               	movf	?___lwmod,w
 12339  0CC0  0020               	movlb	0	; select bank0
 12340  0CC1  00AD               	movwf	??_LCDWriteInt
 12341  0CC2  0837               	movf	LCDWriteInt@i,w
 12342  0CC3  3E31               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 12343  0CC4  0086               	movwf	6
 12344  0CC5  0187               	clrf	7
 12345  0CC6  082D               	movf	??_LCDWriteInt,w
 12346  0CC7  0081               	movwf	1
 12347                           
 12348                           ;lcd.c: 212: value=value/10;
 12349  0CC8  300A               	movlw	10
 12350  0CC9  00F0               	movwf	___awdiv@divisor
 12351  0CCA  3000               	movlw	0
 12352  0CCB  00F1               	movwf	___awdiv@divisor+1
 12353  0CCC  0829               	movf	LCDWriteInt@value+1,w
 12354  0CCD  00F3               	movwf	___awdiv@dividend+1
 12355  0CCE  0828               	movf	LCDWriteInt@value,w
 12356  0CCF  00F2               	movwf	___awdiv@dividend
 12357  0CD0  3196  2611  318C   	fcall	___awdiv
 12358  0CD3  0871               	movf	?___awdiv+1,w
 12359  0CD4  0020               	movlb	0	; select bank0
 12360  0CD5  00A9               	movwf	LCDWriteInt@value+1
 12361  0CD6  0870               	movf	?___awdiv,w
 12362  0CD7  00A8               	movwf	LCDWriteInt@value
 12363                           
 12364                           ;lcd.c: 213: i--;
 12365  0CD8  3001               	movlw	1
 12366  0CD9  02B7               	subwf	LCDWriteInt@i,f
 12367  0CDA  2CAE               	goto	l2917
 12368  0CDB                     l2919:	
 12369                           
 12370                           ;lcd.c: 214: }
 12371                           ;lcd.c: 215: if(fieldLength==-1)
 12372  0CDB  0A2A               	incf	LCDWriteInt@fieldLength,w
 12373  0CDC  1903               	btfsc	3,2
 12374  0CDD  2CE3               	goto	l2925
 12375  0CDE  2CEB               	goto	l2927
 12376  0CDF                     l2923:	
 12377                           ;lcd.c: 216: {
 12378                           ;lcd.c: 217: while(str[j]==0)
 12379                           
 12380                           
 12381                           ;lcd.c: 218: {
 12382                           ;lcd.c: 219: j++;
 12383  0CDF  3001               	movlw	1
 12384  0CE0  00AD               	movwf	??_LCDWriteInt
 12385  0CE1  082D               	movf	??_LCDWriteInt,w
 12386  0CE2  07B6               	addwf	LCDWriteInt@j,f
 12387  0CE3                     l2925:	
 12388  0CE3  0836               	movf	LCDWriteInt@j,w
 12389  0CE4  3E31               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 12390  0CE5  0086               	movwf	6
 12391  0CE6  0187               	clrf	7
 12392  0CE7  0801               	movf	1,w
 12393  0CE8  1D03               	btfss	3,2
 12394  0CE9  2CF1               	goto	l2929
 12395  0CEA  2CDF               	goto	l2923
 12396  0CEB                     l2927:	
 12397                           ;lcd.c: 220: }
 12398                           ;lcd.c: 221: }
 12399                           
 12400                           
 12401                           ;lcd.c: 222: else
 12402                           ;lcd.c: 223: {
 12403                           ;lcd.c: 224: j=(uint8_t)(5-fieldLength);
 12404  0CEB  032A               	decf	LCDWriteInt@fieldLength,w
 12405  0CEC  3AFF               	xorlw	255
 12406  0CED  3E05               	addlw	5
 12407  0CEE  00AD               	movwf	??_LCDWriteInt
 12408  0CEF  082D               	movf	??_LCDWriteInt,w
 12409  0CF0  00B6               	movwf	LCDWriteInt@j
 12410  0CF1                     l2929:	
 12411                           
 12412                           ;lcd.c: 225: }
 12413                           ;lcd.c: 227: for(i=j;i<(5-numPlaces);i++)
 12414  0CF1  0836               	movf	LCDWriteInt@j,w
 12415  0CF2  00AD               	movwf	??_LCDWriteInt
 12416  0CF3  082D               	movf	??_LCDWriteInt,w
 12417  0CF4  00B7               	movwf	LCDWriteInt@i
 12418  0CF5                     l2935:	
 12419  0CF5  082B               	movf	LCDWriteInt@numPlaces,w
 12420  0CF6  00AD               	movwf	??_LCDWriteInt
 12421  0CF7  01AE               	clrf	??_LCDWriteInt+1
 12422  0CF8  09AD               	comf	??_LCDWriteInt,f
 12423  0CF9  09AE               	comf	??_LCDWriteInt+1,f
 12424  0CFA  0AAD               	incf	??_LCDWriteInt,f
 12425  0CFB  1903               	skipnz
 12426  0CFC  0AAE               	incf	??_LCDWriteInt+1,f
 12427  0CFD  082D               	movf	??_LCDWriteInt,w
 12428  0CFE  3E05               	addlw	5
 12429  0CFF  00AF               	movwf	??_LCDWriteInt+2
 12430  0D00  3000               	movlw	0
 12431  0D01  3D2E               	addwfc	??_LCDWriteInt+1,w
 12432  0D02  00B0               	movwf	??_LCDWriteInt+3
 12433  0D03  0830               	movf	??_LCDWriteInt+3,w
 12434  0D04  3A80               	xorlw	128
 12435  0D05  3C80               	sublw	128
 12436  0D06  1D03               	skipz
 12437  0D07  2D0A               	goto	u3345
 12438  0D08  082F               	movf	??_LCDWriteInt+2,w
 12439  0D09  0237               	subwf	LCDWriteInt@i,w
 12440  0D0A                     u3345:	
 12441  0D0A  1803               	btfsc	3,0
 12442  0D0B  2D1C               	goto	l2937
 12443                           
 12444                           ;lcd.c: 228: {
 12445                           ;lcd.c: 229: LCDWriteCharacter((uint8_t)(48+str[i]));
 12446  0D0C  0020               	movlb	0	; select bank0
 12447  0D0D  0837               	movf	LCDWriteInt@i,w
 12448  0D0E  3E31               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 12449  0D0F  0086               	movwf	6
 12450  0D10  0187               	clrf	7
 12451  0D11  0801               	movf	1,w
 12452  0D12  3E30               	addlw	48
 12453  0D13  3196  2662  318C   	fcall	_LCDWriteCharacter
 12454  0D16  3001               	movlw	1
 12455  0D17  0020               	movlb	0	; select bank0
 12456  0D18  00AD               	movwf	??_LCDWriteInt
 12457  0D19  082D               	movf	??_LCDWriteInt,w
 12458  0D1A  07B7               	addwf	LCDWriteInt@i,f
 12459  0D1B  2CF5               	goto	l2935
 12460  0D1C                     l2937:	
 12461                           
 12462                           ;lcd.c: 230: }
 12463                           ;lcd.c: 232: if(numPlaces == 1)
 12464  0D1C  0020               	movlb	0	; select bank0
 12465  0D1D  032B               	decf	LCDWriteInt@numPlaces,w
 12466  0D1E  1D03               	btfss	3,2
 12467  0D1F  2D2A               	goto	l2941
 12468                           
 12469                           ;lcd.c: 233: {
 12470                           ;lcd.c: 234: LCDWriteCharacter(46);
 12471  0D20  302E               	movlw	46
 12472  0D21  3196  2662  318C   	fcall	_LCDWriteCharacter
 12473                           
 12474                           ;lcd.c: 235: LCDWriteCharacter ((uint8_t)(48+str[4]));
 12475  0D24  0020               	movlb	0	; select bank0
 12476  0D25  0835               	movf	LCDWriteInt@str+4,w
 12477  0D26  3E30               	addlw	48
 12478  0D27  3196  2662  318C   	fcall	_LCDWriteCharacter
 12479  0D2A                     l2941:	
 12480                           
 12481                           ;lcd.c: 236: }
 12482                           ;lcd.c: 238: if(numPlaces == 2)
 12483  0D2A  3002               	movlw	2
 12484  0D2B  0020               	movlb	0	; select bank0
 12485  0D2C  062B               	xorwf	LCDWriteInt@numPlaces,w
 12486  0D2D  1D03               	btfss	3,2
 12487  0D2E  0008               	return
 12488                           
 12489                           ;lcd.c: 239: {
 12490                           ;lcd.c: 240: LCDWriteCharacter(46);
 12491  0D2F  302E               	movlw	46
 12492  0D30  3196  2662  318C   	fcall	_LCDWriteCharacter
 12493                           
 12494                           ;lcd.c: 241: LCDWriteCharacter((uint8_t)(48+str[3]));
 12495  0D33  0020               	movlb	0	; select bank0
 12496  0D34  0834               	movf	LCDWriteInt@str+3,w
 12497  0D35  3E30               	addlw	48
 12498  0D36  3196  2662  318C   	fcall	_LCDWriteCharacter
 12499                           
 12500                           ;lcd.c: 242: LCDWriteCharacter((uint8_t)(48+str[4]));
 12501  0D39  0020               	movlb	0	; select bank0
 12502  0D3A  0835               	movf	LCDWriteInt@str+4,w
 12503  0D3B  3E30               	addlw	48
 12504  0D3C  3196  2662         	fcall	_LCDWriteCharacter
 12505  0D3E  0008               	return
 12506  0D3F                     __end_of_LCDWriteInt:	
 12507                           
 12508                           	psect	text31
 12509  1464                     __ptext31:	
 12510 ;; *************** function ___lwmod *****************
 12511 ;; Defined at:
 12512 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 12513 ;; Parameters:    Size  Location     Type
 12514 ;;  divisor         2    0[COMMON] unsigned int 
 12515 ;;  dividend        2    2[COMMON] unsigned int 
 12516 ;; Auto vars:     Size  Location     Type
 12517 ;;  counter         1    5[COMMON] unsigned char 
 12518 ;; Return value:  Size  Location     Type
 12519 ;;                  2    0[COMMON] unsigned int 
 12520 ;; Registers used:
 12521 ;;		wreg, status,2, status,0
 12522 ;; Tracked objects:
 12523 ;;		On entry : 0/0
 12524 ;;		On exit  : 0/0
 12525 ;;		Unchanged: 0/0
 12526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12527 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12528 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12529 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12530 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12531 ;;Total ram usage:        6 bytes
 12532 ;; Hardware stack levels used:    1
 12533 ;; This function calls:
 12534 ;;		Nothing
 12535 ;; This function is called by:
 12536 ;;		_LCDWriteInt
 12537 ;; This function uses a non-reentrant model
 12538 ;;
 12539                           
 12540                           
 12541                           ;psect for function ___lwmod
 12542  1464                     ___lwmod:	
 12543                           
 12544                           ;incstack = 0
 12545                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 12546  1464  0870               	movf	___lwmod@divisor,w
 12547  1465  0471               	iorwf	___lwmod@divisor+1,w
 12548  1466  1903               	btfsc	3,2
 12549  1467  2C8B               	goto	l2791
 12550  1468  01F5               	clrf	___lwmod@counter
 12551  1469  0AF5               	incf	___lwmod@counter,f
 12552  146A                     l2781:	
 12553  146A  1BF1               	btfsc	___lwmod@divisor+1,7
 12554  146B  2C76               	goto	l2783
 12555  146C  3001               	movlw	1
 12556  146D                     u2965:	
 12557  146D  35F0               	lslf	___lwmod@divisor,f
 12558  146E  0DF1               	rlf	___lwmod@divisor+1,f
 12559  146F  0B89               	decfsz	9,f
 12560  1470  2C6D               	goto	u2965
 12561  1471  3001               	movlw	1
 12562  1472  00F4               	movwf	??___lwmod
 12563  1473  0874               	movf	??___lwmod,w
 12564  1474  07F5               	addwf	___lwmod@counter,f
 12565  1475  2C6A               	goto	l2781
 12566  1476                     l2783:	
 12567  1476  0871               	movf	___lwmod@divisor+1,w
 12568  1477  0273               	subwf	___lwmod@dividend+1,w
 12569  1478  1D03               	skipz
 12570  1479  2C7C               	goto	u2985
 12571  147A  0870               	movf	___lwmod@divisor,w
 12572  147B  0272               	subwf	___lwmod@dividend,w
 12573  147C                     u2985:	
 12574  147C  1C03               	skipc
 12575  147D  2C82               	goto	l2787
 12576  147E  0870               	movf	___lwmod@divisor,w
 12577  147F  02F2               	subwf	___lwmod@dividend,f
 12578  1480  0871               	movf	___lwmod@divisor+1,w
 12579  1481  3BF3               	subwfb	___lwmod@dividend+1,f
 12580  1482                     l2787:	
 12581  1482  3001               	movlw	1
 12582  1483                     u2995:	
 12583  1483  36F1               	lsrf	___lwmod@divisor+1,f
 12584  1484  0CF0               	rrf	___lwmod@divisor,f
 12585  1485  0B89               	decfsz	9,f
 12586  1486  2C83               	goto	u2995
 12587  1487  3001               	movlw	1
 12588  1488  02F5               	subwf	___lwmod@counter,f
 12589  1489  1D03               	btfss	3,2
 12590  148A  2C76               	goto	l2783
 12591  148B                     l2791:	
 12592  148B  0873               	movf	___lwmod@dividend+1,w
 12593  148C  00F1               	movwf	?___lwmod+1
 12594  148D  0872               	movf	___lwmod@dividend,w
 12595  148E  00F0               	movwf	?___lwmod
 12596  148F  0008               	return
 12597  1490                     __end_of___lwmod:	
 12598                           
 12599                           	psect	text32
 12600  1611                     __ptext32:	
 12601 ;; *************** function ___awdiv *****************
 12602 ;; Defined at:
 12603 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 12604 ;; Parameters:    Size  Location     Type
 12605 ;;  divisor         2    0[COMMON] int 
 12606 ;;  dividend        2    2[COMMON] int 
 12607 ;; Auto vars:     Size  Location     Type
 12608 ;;  quotient        2    7[COMMON] int 
 12609 ;;  sign            1    6[COMMON] unsigned char 
 12610 ;;  counter         1    5[COMMON] unsigned char 
 12611 ;; Return value:  Size  Location     Type
 12612 ;;                  2    0[COMMON] int 
 12613 ;; Registers used:
 12614 ;;		wreg, status,2, status,0
 12615 ;; Tracked objects:
 12616 ;;		On entry : 0/0
 12617 ;;		On exit  : 0/0
 12618 ;;		Unchanged: 0/0
 12619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12620 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12621 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12622 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12623 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12624 ;;Total ram usage:        9 bytes
 12625 ;; Hardware stack levels used:    1
 12626 ;; This function calls:
 12627 ;;		Nothing
 12628 ;; This function is called by:
 12629 ;;		_LCDWriteInt
 12630 ;;		_main
 12631 ;; This function uses a non-reentrant model
 12632 ;;
 12633                           
 12634                           
 12635                           ;psect for function ___awdiv
 12636  1611                     ___awdiv:	
 12637                           
 12638                           ;incstack = 0
 12639                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 12640  1611  01F6               	clrf	___awdiv@sign
 12641  1612  1FF1               	btfss	___awdiv@divisor+1,7
 12642  1613  2E1B               	goto	l2687
 12643  1614  09F0               	comf	___awdiv@divisor,f
 12644  1615  09F1               	comf	___awdiv@divisor+1,f
 12645  1616  0AF0               	incf	___awdiv@divisor,f
 12646  1617  1903               	skipnz
 12647  1618  0AF1               	incf	___awdiv@divisor+1,f
 12648  1619  01F6               	clrf	___awdiv@sign
 12649  161A  0AF6               	incf	___awdiv@sign,f
 12650  161B                     l2687:	
 12651  161B  1FF3               	btfss	___awdiv@dividend+1,7
 12652  161C  2E26               	goto	l2693
 12653  161D  09F2               	comf	___awdiv@dividend,f
 12654  161E  09F3               	comf	___awdiv@dividend+1,f
 12655  161F  0AF2               	incf	___awdiv@dividend,f
 12656  1620  1903               	skipnz
 12657  1621  0AF3               	incf	___awdiv@dividend+1,f
 12658  1622  3001               	movlw	1
 12659  1623  00F4               	movwf	??___awdiv
 12660  1624  0874               	movf	??___awdiv,w
 12661  1625  06F6               	xorwf	___awdiv@sign,f
 12662  1626                     l2693:	
 12663  1626  01F7               	clrf	___awdiv@quotient
 12664  1627  01F8               	clrf	___awdiv@quotient+1
 12665  1628  0870               	movf	___awdiv@divisor,w
 12666  1629  0471               	iorwf	___awdiv@divisor+1,w
 12667  162A  1903               	btfsc	3,2
 12668  162B  2E55               	goto	l2715
 12669  162C  01F5               	clrf	___awdiv@counter
 12670  162D  0AF5               	incf	___awdiv@counter,f
 12671  162E                     l2703:	
 12672  162E  1BF1               	btfsc	___awdiv@divisor+1,7
 12673  162F  2E3A               	goto	l2705
 12674  1630  3001               	movlw	1
 12675  1631                     u2795:	
 12676  1631  35F0               	lslf	___awdiv@divisor,f
 12677  1632  0DF1               	rlf	___awdiv@divisor+1,f
 12678  1633  0B89               	decfsz	9,f
 12679  1634  2E31               	goto	u2795
 12680  1635  3001               	movlw	1
 12681  1636  00F4               	movwf	??___awdiv
 12682  1637  0874               	movf	??___awdiv,w
 12683  1638  07F5               	addwf	___awdiv@counter,f
 12684  1639  2E2E               	goto	l2703
 12685  163A                     l2705:	
 12686  163A  3001               	movlw	1
 12687  163B                     u2815:	
 12688  163B  35F7               	lslf	___awdiv@quotient,f
 12689  163C  0DF8               	rlf	___awdiv@quotient+1,f
 12690  163D  0B89               	decfsz	9,f
 12691  163E  2E3B               	goto	u2815
 12692  163F  0871               	movf	___awdiv@divisor+1,w
 12693  1640  0273               	subwf	___awdiv@dividend+1,w
 12694  1641  1D03               	skipz
 12695  1642  2E45               	goto	u2825
 12696  1643  0870               	movf	___awdiv@divisor,w
 12697  1644  0272               	subwf	___awdiv@dividend,w
 12698  1645                     u2825:	
 12699  1645  1C03               	skipc
 12700  1646  2E4C               	goto	l2711
 12701  1647  0870               	movf	___awdiv@divisor,w
 12702  1648  02F2               	subwf	___awdiv@dividend,f
 12703  1649  0871               	movf	___awdiv@divisor+1,w
 12704  164A  3BF3               	subwfb	___awdiv@dividend+1,f
 12705  164B  1477               	bsf	___awdiv@quotient,0
 12706  164C                     l2711:	
 12707  164C  3001               	movlw	1
 12708  164D                     u2835:	
 12709  164D  36F1               	lsrf	___awdiv@divisor+1,f
 12710  164E  0CF0               	rrf	___awdiv@divisor,f
 12711  164F  0B89               	decfsz	9,f
 12712  1650  2E4D               	goto	u2835
 12713  1651  3001               	movlw	1
 12714  1652  02F5               	subwf	___awdiv@counter,f
 12715  1653  1D03               	btfss	3,2
 12716  1654  2E3A               	goto	l2705
 12717  1655                     l2715:	
 12718  1655  0876               	movf	___awdiv@sign,w
 12719  1656  1903               	btfsc	3,2
 12720  1657  2E5D               	goto	l2719
 12721  1658  09F7               	comf	___awdiv@quotient,f
 12722  1659  09F8               	comf	___awdiv@quotient+1,f
 12723  165A  0AF7               	incf	___awdiv@quotient,f
 12724  165B  1903               	skipnz
 12725  165C  0AF8               	incf	___awdiv@quotient+1,f
 12726  165D                     l2719:	
 12727  165D  0878               	movf	___awdiv@quotient+1,w
 12728  165E  00F1               	movwf	?___awdiv+1
 12729  165F  0877               	movf	___awdiv@quotient,w
 12730  1660  00F0               	movwf	?___awdiv
 12731  1661  0008               	return
 12732  1662                     __end_of___awdiv:	
 12733                           
 12734                           	psect	text33
 12735  1662                     __ptext33:	
 12736 ;; *************** function _LCDWriteCharacter *****************
 12737 ;; Defined at:
 12738 ;;		line 140 in file "lcd.c"
 12739 ;; Parameters:    Size  Location     Type
 12740 ;;  character       1    wreg     const unsigned char 
 12741 ;; Auto vars:     Size  Location     Type
 12742 ;;  character       1    5[BANK0 ] const unsigned char 
 12743 ;;  base            2    6[BANK0 ] unsigned int 
 12744 ;; Return value:  Size  Location     Type
 12745 ;;                  1    wreg      void 
 12746 ;; Registers used:
 12747 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12748 ;; Tracked objects:
 12749 ;;		On entry : 0/0
 12750 ;;		On exit  : 0/0
 12751 ;;		Unchanged: 0/0
 12752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12754 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12755 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12756 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12757 ;;Total ram usage:        6 bytes
 12758 ;; Hardware stack levels used:    1
 12759 ;; Hardware stack levels required when called:    1
 12760 ;; This function calls:
 12761 ;;		_LCDWrite
 12762 ;;		___wmul
 12763 ;; This function is called by:
 12764 ;;		_LCDWriteInt
 12765 ;;		_main
 12766 ;;		_LCDWriteString
 12767 ;; This function uses a non-reentrant model
 12768 ;;
 12769                           
 12770                           
 12771                           ;psect for function _LCDWriteCharacter
 12772  1662                     _LCDWriteCharacter:	
 12773                           
 12774                           ;incstack = 0
 12775                           ; Regs used in _LCDWriteCharacter: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12776                           ;LCDWriteCharacter@character stored from wreg
 12777  1662  0020               	movlb	0	; select bank0
 12778  1663  00A5               	movwf	LCDWriteCharacter@character
 12779                           
 12780                           ;lcd.c: 142: uint16_t base;
 12781                           ;lcd.c: 143: base = character - 0x20;
 12782  1664  0825               	movf	LCDWriteCharacter@character,w
 12783  1665  3EE0               	addlw	224
 12784  1666  00A6               	movwf	LCDWriteCharacter@base
 12785  1667  30FF               	movlw	255
 12786  1668  1803               	skipnc
 12787  1669  3000               	movlw	0
 12788  166A  00A7               	movwf	LCDWriteCharacter@base+1
 12789                           
 12790                           ;lcd.c: 144: base *= 3;
 12791  166B  3003               	movlw	3
 12792  166C  00F9               	movwf	___wmul@multiplier
 12793  166D  3000               	movlw	0
 12794  166E  00FA               	movwf	___wmul@multiplier+1
 12795  166F  0827               	movf	LCDWriteCharacter@base+1,w
 12796  1670  00FC               	movwf	___wmul@multiplicand+1
 12797  1671  0826               	movf	LCDWriteCharacter@base,w
 12798  1672  00FB               	movwf	___wmul@multiplicand
 12799  1673  3193  237F  3196   	fcall	___wmul
 12800  1676  087A               	movf	?___wmul+1,w
 12801  1677  0020               	movlb	0	; select bank0
 12802  1678  00A7               	movwf	LCDWriteCharacter@base+1
 12803  1679  0879               	movf	?___wmul,w
 12804  167A  00A6               	movwf	LCDWriteCharacter@base
 12805                           
 12806                           ;lcd.c: 145: LCDWrite(1,fonts[base]);
 12807  167B  0827               	movf	LCDWriteCharacter@base+1,w
 12808  167C  0085               	movwf	5
 12809  167D  0826               	movf	LCDWriteCharacter@base,w
 12810  167E  0084               	movwf	4
 12811  167F  3000               	movlw	low (_fonts| (0+32768))
 12812  1680  0784               	addwf	4,f
 12813  1681  3088               	movlw	high (_fonts| (0+32768))
 12814  1682  3D85               	addwfc	5,f
 12815  1683  0800               	movf	0,w	;code access
 12816  1684  00A2               	movwf	??_LCDWriteCharacter
 12817  1685  0822               	movf	??_LCDWriteCharacter,w
 12818  1686  00F0               	movwf	LCDWrite@data
 12819  1687  3001               	movlw	1
 12820  1688  3194  2419  3196   	fcall	_LCDWrite
 12821                           
 12822                           ;lcd.c: 146: LCDWrite(1,fonts[base + 1]);
 12823  168B  0020               	movlb	0	; select bank0
 12824  168C  0826               	movf	LCDWriteCharacter@base,w
 12825  168D  3E01               	addlw	1
 12826  168E  00A2               	movwf	??_LCDWriteCharacter
 12827  168F  3000               	movlw	0
 12828  1690  3D27               	addwfc	LCDWriteCharacter@base+1,w
 12829  1691  00A3               	movwf	??_LCDWriteCharacter+1
 12830  1692  3000               	movlw	low (_fonts| (0+32768))
 12831  1693  0722               	addwf	??_LCDWriteCharacter,w
 12832  1694  0084               	movwf	4
 12833  1695  3088               	movlw	high (_fonts| (0+32768))
 12834  1696  3D23               	addwfc	??_LCDWriteCharacter+1,w
 12835  1697  0085               	movwf	5
 12836  1698  0800               	movf	0,w	;code access
 12837  1699  00A4               	movwf	??_LCDWriteCharacter+2
 12838  169A  0824               	movf	??_LCDWriteCharacter+2,w
 12839  169B  00F0               	movwf	LCDWrite@data
 12840  169C  3001               	movlw	1
 12841  169D  3194  2419  3196   	fcall	_LCDWrite
 12842                           
 12843                           ;lcd.c: 147: LCDWrite(1,fonts[base + 2]);
 12844  16A0  0020               	movlb	0	; select bank0
 12845  16A1  0826               	movf	LCDWriteCharacter@base,w
 12846  16A2  3E02               	addlw	2
 12847  16A3  00A2               	movwf	??_LCDWriteCharacter
 12848  16A4  3000               	movlw	0
 12849  16A5  3D27               	addwfc	LCDWriteCharacter@base+1,w
 12850  16A6  00A3               	movwf	??_LCDWriteCharacter+1
 12851  16A7  3000               	movlw	low (_fonts| (0+32768))
 12852  16A8  0722               	addwf	??_LCDWriteCharacter,w
 12853  16A9  0084               	movwf	4
 12854  16AA  3088               	movlw	high (_fonts| (0+32768))
 12855  16AB  3D23               	addwfc	??_LCDWriteCharacter+1,w
 12856  16AC  0085               	movwf	5
 12857  16AD  0800               	movf	0,w	;code access
 12858  16AE  00A4               	movwf	??_LCDWriteCharacter+2
 12859  16AF  0824               	movf	??_LCDWriteCharacter+2,w
 12860  16B0  00F0               	movwf	LCDWrite@data
 12861  16B1  3001               	movlw	1
 12862  16B2  3194  2419  3196   	fcall	_LCDWrite
 12863                           
 12864                           ;lcd.c: 148: LCDWrite(1, 0x00);
 12865  16B5  01F0               	clrf	LCDWrite@data
 12866  16B6  3001               	movlw	1
 12867  16B7  3194  2419         	fcall	_LCDWrite
 12868  16B9  0008               	return
 12869  16BA                     __end_of_LCDWriteCharacter:	
 12870                           
 12871                           	psect	text34
 12872  137F                     __ptext34:	
 12873 ;; *************** function ___wmul *****************
 12874 ;; Defined at:
 12875 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 12876 ;; Parameters:    Size  Location     Type
 12877 ;;  multiplier      2    9[COMMON] unsigned int 
 12878 ;;  multiplicand    2   11[COMMON] unsigned int 
 12879 ;; Auto vars:     Size  Location     Type
 12880 ;;  product         2    0[BANK0 ] unsigned int 
 12881 ;; Return value:  Size  Location     Type
 12882 ;;                  2    9[COMMON] unsigned int 
 12883 ;; Registers used:
 12884 ;;		wreg, status,2, status,0
 12885 ;; Tracked objects:
 12886 ;;		On entry : 0/0
 12887 ;;		On exit  : 0/0
 12888 ;;		Unchanged: 0/0
 12889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12890 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12891 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12893 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12894 ;;Total ram usage:        6 bytes
 12895 ;; Hardware stack levels used:    1
 12896 ;; This function calls:
 12897 ;;		Nothing
 12898 ;; This function is called by:
 12899 ;;		_readAnalog
 12900 ;;		_LCDWriteCharacter
 12901 ;;		_main
 12902 ;;		_eval_poly
 12903 ;; This function uses a non-reentrant model
 12904 ;;
 12905                           
 12906                           
 12907                           ;psect for function ___wmul
 12908  137F                     ___wmul:	
 12909                           
 12910                           ;incstack = 0
 12911                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 12912  137F  0020               	movlb	0	; select bank0
 12913  1380  01A0               	clrf	___wmul@product
 12914  1381  01A1               	clrf	___wmul@product+1
 12915  1382                     l2203:	
 12916  1382  1C79               	btfss	___wmul@multiplier,0
 12917  1383  2B89               	goto	l569
 12918  1384  087B               	movf	___wmul@multiplicand,w
 12919  1385  0020               	movlb	0	; select bank0
 12920  1386  07A0               	addwf	___wmul@product,f
 12921  1387  087C               	movf	___wmul@multiplicand+1,w
 12922  1388  3DA1               	addwfc	___wmul@product+1,f
 12923  1389                     l569:	
 12924  1389  3001               	movlw	1
 12925  138A                     u2045:	
 12926  138A  35FB               	lslf	___wmul@multiplicand,f
 12927  138B  0DFC               	rlf	___wmul@multiplicand+1,f
 12928  138C  0B89               	decfsz	9,f
 12929  138D  2B8A               	goto	u2045
 12930  138E  3001               	movlw	1
 12931  138F                     u2055:	
 12932  138F  36FA               	lsrf	___wmul@multiplier+1,f
 12933  1390  0CF9               	rrf	___wmul@multiplier,f
 12934  1391  0B89               	decfsz	9,f
 12935  1392  2B8F               	goto	u2055
 12936  1393  0879               	movf	___wmul@multiplier,w
 12937  1394  047A               	iorwf	___wmul@multiplier+1,w
 12938  1395  1D03               	btfss	3,2
 12939  1396  2B82               	goto	l2203
 12940  1397  0020               	movlb	0	; select bank0
 12941  1398  0821               	movf	___wmul@product+1,w
 12942  1399  00FA               	movwf	?___wmul+1
 12943  139A  0820               	movf	___wmul@product,w
 12944  139B  00F9               	movwf	?___wmul
 12945  139C  0008               	return
 12946  139D                     __end_of___wmul:	
 12947                           
 12948                           	psect	text35
 12949  1419                     __ptext35:	
 12950 ;; *************** function _LCDWrite *****************
 12951 ;; Defined at:
 12952 ;;		line 280 in file "lcd.c"
 12953 ;; Parameters:    Size  Location     Type
 12954 ;;  data_or_comm    1    wreg     unsigned char 
 12955 ;;  data            1    0[COMMON] unsigned char 
 12956 ;; Auto vars:     Size  Location     Type
 12957 ;;  data_or_comm    1    2[COMMON] unsigned char 
 12958 ;;  i               1    4[COMMON] unsigned char 
 12959 ;;  d               1    3[COMMON] unsigned char 
 12960 ;; Return value:  Size  Location     Type
 12961 ;;                  1    wreg      void 
 12962 ;; Registers used:
 12963 ;;		wreg, status,2, status,0
 12964 ;; Tracked objects:
 12965 ;;		On entry : 0/0
 12966 ;;		On exit  : 0/0
 12967 ;;		Unchanged: 0/0
 12968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12969 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12970 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12971 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12972 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12973 ;;Total ram usage:        5 bytes
 12974 ;; Hardware stack levels used:    1
 12975 ;; This function calls:
 12976 ;;		Nothing
 12977 ;; This function is called by:
 12978 ;;		_gotoXY
 12979 ;;		_LCDWriteCharacter
 12980 ;;		_LCDClear
 12981 ;;		_LCDInit
 12982 ;; This function uses a non-reentrant model
 12983 ;;
 12984                           
 12985                           
 12986                           ;psect for function _LCDWrite
 12987  1419                     _LCDWrite:	
 12988                           
 12989                           ;incstack = 0
 12990                           ; Regs used in _LCDWrite: [wreg+status,2+status,0]
 12991                           ;LCDWrite@data_or_command stored from wreg
 12992  1419  00F2               	movwf	LCDWrite@data_or_command
 12993                           
 12994                           ;lcd.c: 282: uint8_t i,d;
 12995                           ;lcd.c: 284: d=data;
 12996  141A  0870               	movf	LCDWrite@data,w
 12997  141B  00F1               	movwf	??_LCDWrite
 12998  141C  0871               	movf	??_LCDWrite,w
 12999  141D  00F3               	movwf	LCDWrite@d
 13000                           
 13001                           ;lcd.c: 286: if(data_or_command == 0)
 13002  141E  0872               	movf	LCDWrite@data_or_command,w
 13003  141F  1D03               	btfss	3,2
 13004  1420  2C24               	goto	l191
 13005                           
 13006                           ;lcd.c: 287: {
 13007                           ;lcd.c: 288: LATAbits.LATA2 = 0;
 13008  1421  0020               	movlb	0	; select bank0
 13009  1422  1116               	bcf	22,2	;volatile
 13010                           
 13011                           ;lcd.c: 289: }
 13012  1423  2C26               	goto	l192
 13013  1424                     l191:	
 13014                           
 13015                           ;lcd.c: 290: else
 13016                           ;lcd.c: 291: {
 13017                           ;lcd.c: 292: LATAbits.LATA2 = 1;
 13018  1424  0020               	movlb	0	; select bank0
 13019  1425  1516               	bsf	22,2	;volatile
 13020  1426                     l192:	
 13021                           
 13022                           ;lcd.c: 293: }
 13023                           ;lcd.c: 295: LATAbits.LATA1 = 0;
 13024  1426  1096               	bcf	22,1	;volatile
 13025                           
 13026                           ;lcd.c: 297: for(i=0;i<8;i++)
 13027  1427  01F4               	clrf	LCDWrite@i
 13028  1428  3008               	movlw	8
 13029  1429  0274               	subwf	LCDWrite@i,w
 13030  142A  1803               	btfsc	3,0
 13031  142B  2C3C               	goto	l194
 13032  142C                     l193:	
 13033                           
 13034                           ;lcd.c: 298: {
 13035                           ;lcd.c: 299: LATAbits.LATA3 = 0;
 13036  142C  1196               	bcf	22,3	;volatile
 13037                           
 13038                           ;lcd.c: 301: if(d&0x80)
 13039  142D  1FF3               	btfss	LCDWrite@d,7
 13040  142E  2C30               	goto	l195
 13041                           
 13042                           ;lcd.c: 302: {
 13043                           ;lcd.c: 303: LATAbits.LATA3 = 1;
 13044  142F  1596               	bsf	22,3	;volatile
 13045  1430                     l195:	
 13046                           
 13047                           ;lcd.c: 304: }
 13048                           ;lcd.c: 306: LATAbits.LATA4 = 1;
 13049  1430  1616               	bsf	22,4	;volatile
 13050                           
 13051                           ;lcd.c: 308: d<<=1;
 13052  1431  1003               	clrc
 13053  1432  0DF3               	rlf	LCDWrite@d,f
 13054                           
 13055                           ;lcd.c: 310: LATAbits.LATA4=0;
 13056  1433  1216               	bcf	22,4	;volatile
 13057  1434  3001               	movlw	1
 13058  1435  00F1               	movwf	??_LCDWrite
 13059  1436  0871               	movf	??_LCDWrite,w
 13060  1437  07F4               	addwf	LCDWrite@i,f
 13061  1438  3008               	movlw	8
 13062  1439  0274               	subwf	LCDWrite@i,w
 13063  143A  1C03               	skipc
 13064  143B  2C2C               	goto	l193
 13065  143C                     l194:	
 13066                           
 13067                           ;lcd.c: 311: }
 13068                           ;lcd.c: 313: LATAbits.LATA1 = 1;
 13069  143C  1496               	bsf	22,1	;volatile
 13070  143D  0008               	return
 13071  143E                     __end_of_LCDWrite:	
 13072                           
 13073                           	psect	text36
 13074  0042                     __ptext36:	
 13075 ;; *************** function _Battery_State_Machine *****************
 13076 ;; Defined at:
 13077 ;;		line 34 in file "battery_charger.c"
 13078 ;; Parameters:    Size  Location     Type
 13079 ;;		None
 13080 ;; Auto vars:     Size  Location     Type
 13081 ;;		None
 13082 ;; Return value:  Size  Location     Type
 13083 ;;                  1    wreg      void 
 13084 ;; Registers used:
 13085 ;;		wreg, status,2, status,0, pclath, cstack
 13086 ;; Tracked objects:
 13087 ;;		On entry : 0/0
 13088 ;;		On exit  : 0/0
 13089 ;;		Unchanged: 0/0
 13090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13093 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13094 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13095 ;;Total ram usage:        5 bytes
 13096 ;; Hardware stack levels used:    1
 13097 ;; Hardware stack levels required when called:    2
 13098 ;; This function calls:
 13099 ;;		___awtoft
 13100 ;;		___ftmul
 13101 ;;		___fttol
 13102 ;; This function is called by:
 13103 ;;		_main
 13104 ;; This function uses a non-reentrant model
 13105 ;;
 13106                           
 13107                           
 13108                           ;psect for function _Battery_State_Machine
 13109  0042                     _Battery_State_Machine:	
 13110                           
 13111                           ;battery_charger.c: 36: if(battery_state == PRECHARGE)
 13112                           
 13113                           ;incstack = 0
 13114                           ; Regs used in _Battery_State_Machine: [wreg+status,2+status,0+pclath+cstack]
 13115  0042  3003               	movlw	3
 13116  0043  0021               	movlb	1	; select bank1
 13117  0044  066C               	xorwf	_battery_state^(0+128),w
 13118  0045  1D03               	btfss	3,2
 13119  0046  286C               	goto	l2825
 13120                           
 13121                           ;battery_charger.c: 37: {
 13122                           ;battery_charger.c: 38: if(voltage[1] < 1075)
 13123  0047  082B               	movf	((_voltage+1)^(0+128)+2),w
 13124  0048  3A80               	xorlw	128
 13125  0049  0020               	movlb	0	; select bank0
 13126  004A  00CE               	movwf	??_Battery_State_Machine
 13127  004B  3084               	movlw	132
 13128  004C  024E               	subwf	??_Battery_State_Machine,w
 13129  004D  1D03               	skipz
 13130  004E  2852               	goto	u3095
 13131  004F  3033               	movlw	51
 13132  0050  0021               	movlb	1	; select bank1
 13133  0051  022A               	subwf	(_voltage^(0+128)+2),w
 13134  0052                     u3095:	
 13135  0052  1803               	skipnc
 13136  0053  2861               	goto	l2823
 13137                           
 13138                           ;battery_charger.c: 39: {
 13139                           ;battery_charger.c: 40: if(state_counter)
 13140  0054  0021               	movlb	1	; select bank1
 13141  0055  0868               	movf	_state_counter^(0+128),w
 13142  0056  0469               	iorwf	(_state_counter+1)^(0+128),w
 13143  0057  1903               	btfsc	3,2
 13144  0058  285E               	goto	l109
 13145                           
 13146                           ;battery_charger.c: 41: {
 13147                           ;battery_charger.c: 42: state_counter-=1;
 13148  0059  3001               	movlw	1
 13149  005A  02E8               	subwf	_state_counter^(0+128),f
 13150  005B  3000               	movlw	0
 13151  005C  3BE9               	subwfb	(_state_counter+1)^(0+128),f
 13152                           
 13153                           ;battery_charger.c: 43: }
 13154  005D  0008               	return
 13155  005E                     l109:	
 13156                           
 13157                           ;battery_charger.c: 44: else
 13158                           ;battery_charger.c: 45: {
 13159                           ;battery_charger.c: 46: battery_state = FAULT;
 13160  005E  01EC               	clrf	_battery_state^(0+128)
 13161  005F  0AEC               	incf	_battery_state^(0+128),f
 13162                           
 13163                           ;battery_charger.c: 47: }
 13164                           ;battery_charger.c: 48: }
 13165  0060  0008               	return
 13166  0061                     l2823:	
 13167                           
 13168                           ;battery_charger.c: 49: else
 13169                           ;battery_charger.c: 50: {
 13170                           ;battery_charger.c: 51: battery_state = CHARGE;
 13171  0061  3004               	movlw	4
 13172  0062  0020               	movlb	0	; select bank0
 13173  0063  00CE               	movwf	??_Battery_State_Machine
 13174  0064  084E               	movf	??_Battery_State_Machine,w
 13175  0065  0021               	movlb	1	; select bank1
 13176  0066  00EC               	movwf	_battery_state^(0+128)
 13177                           
 13178                           ;battery_charger.c: 52: { Iref = 55; };
 13179  0067  3037               	movlw	55
 13180  0068  00E6               	movwf	_Iref^(0+128)
 13181  0069  3000               	movlw	0
 13182  006A  00E7               	movwf	(_Iref^(0+128)+1)
 13183                           
 13184                           ;battery_charger.c: 53: }
 13185                           ;battery_charger.c: 54: }
 13186  006B  0008               	return
 13187  006C                     l2825:	
 13188                           
 13189                           ;battery_charger.c: 55: else if(battery_state == CHARGE)
 13190  006C  3004               	movlw	4
 13191  006D  066C               	xorwf	_battery_state^(0+128),w
 13192  006E  1D03               	btfss	3,2
 13193  006F  28FA               	goto	l2849
 13194                           
 13195                           ;battery_charger.c: 56: {
 13196                           ;battery_charger.c: 57: if((!Imode0))
 13197  0070  0020               	movlb	0	; select bank0
 13198  0071  086E               	movf	_Imode0,w
 13199  0072  1D03               	btfss	3,2
 13200  0073  0008               	return
 13201                           
 13202                           ;battery_charger.c: 58: {
 13203                           ;battery_charger.c: 59: if(current[1] < Imin)
 13204  0074  0021               	movlb	1	; select bank1
 13205  0075  0823               	movf	((_current+1)^(0+128)+2),w
 13206  0076  3A80               	xorlw	128
 13207  0077  0020               	movlb	0	; select bank0
 13208  0078  00CE               	movwf	??_Battery_State_Machine
 13209  0079  0022               	movlb	2	; select bank2
 13210  007A  0861               	movf	(_Imin+1)^(0+256),w
 13211  007B  3A80               	xorlw	128
 13212  007C  0020               	movlb	0	; select bank0
 13213  007D  024E               	subwf	??_Battery_State_Machine,w
 13214  007E  1D03               	skipz
 13215  007F  2884               	goto	u3135
 13216  0080  0022               	movlb	2	; select bank2
 13217  0081  0860               	movf	_Imin^(0+256),w
 13218  0082  0021               	movlb	1	; select bank1
 13219  0083  0222               	subwf	(_current^(0+128)+2),w
 13220  0084                     u3135:	
 13221  0084  1803               	skipnc
 13222  0085  2899               	goto	l2835
 13223                           
 13224                           ;battery_charger.c: 60: {
 13225                           ;battery_charger.c: 61: IminCount-=2;
 13226  0086  3002               	movlw	2
 13227  0087  0021               	movlb	1	; select bank1
 13228  0088  02EA               	subwf	_IminCount^(0+128),f
 13229  0089  3000               	movlw	0
 13230  008A  3BEB               	subwfb	(_IminCount+1)^(0+128),f
 13231                           
 13232                           ;battery_charger.c: 62: if(IminCount<2)
 13233  008B  3000               	movlw	0
 13234  008C  026B               	subwf	(_IminCount+1)^(0+128),w
 13235  008D  3002               	movlw	2
 13236  008E  1903               	skipnz
 13237  008F  026A               	subwf	_IminCount^(0+128),w
 13238  0090  1803               	skipnc
 13239  0091  0008               	return
 13240                           
 13241                           ;battery_charger.c: 63: {
 13242                           ;battery_charger.c: 64: battery_state = FLOAT;
 13243  0092  3005               	movlw	5
 13244  0093  0020               	movlb	0	; select bank0
 13245  0094  00CE               	movwf	??_Battery_State_Machine
 13246  0095  084E               	movf	??_Battery_State_Machine,w
 13247  0096  0021               	movlb	1	; select bank1
 13248  0097  00EC               	movwf	_battery_state^(0+128)
 13249                           
 13250                           ;battery_charger.c: 65: }
 13251                           ;battery_charger.c: 66: }
 13252  0098  0008               	return
 13253  0099                     l2835:	
 13254                           
 13255                           ;battery_charger.c: 67: else
 13256                           ;battery_charger.c: 68: {
 13257                           ;battery_charger.c: 69: x+=1;
 13258  0099  3001               	movlw	1
 13259  009A  0020               	movlb	0	; select bank0
 13260  009B  00CE               	movwf	??_Battery_State_Machine
 13261  009C  084E               	movf	??_Battery_State_Machine,w
 13262  009D  0021               	movlb	1	; select bank1
 13263  009E  07BF               	addwf	_x^(0+128),f
 13264                           
 13265                           ;battery_charger.c: 70: if(x>25)
 13266  009F  301A               	movlw	26
 13267  00A0  023F               	subwf	_x^(0+128),w
 13268  00A1  1C03               	skipc
 13269  00A2  28EE               	goto	l2845
 13270                           
 13271                           ;battery_charger.c: 71: {
 13272                           ;battery_charger.c: 72: if(Vref>1350+(int16_t)((250-batteryTemp)*.24))Vref-=1;
 13273  00A3  096D               	comf	_batteryTemp^(0+128),w
 13274  00A4  0020               	movlb	0	; select bank0
 13275  00A5  00CE               	movwf	??_Battery_State_Machine
 13276  00A6  0021               	movlb	1	; select bank1
 13277  00A7  096E               	comf	(_batteryTemp+1)^(0+128),w
 13278  00A8  0020               	movlb	0	; select bank0
 13279  00A9  00CF               	movwf	??_Battery_State_Machine+1
 13280  00AA  0ACE               	incf	??_Battery_State_Machine,f
 13281  00AB  1903               	skipnz
 13282  00AC  0ACF               	incf	??_Battery_State_Machine+1,f
 13283  00AD  084E               	movf	??_Battery_State_Machine,w
 13284  00AE  3EFA               	addlw	250
 13285  00AF  00F8               	movwf	___awtoft@c
 13286  00B0  3000               	movlw	0
 13287  00B1  3D4F               	addwfc	??_Battery_State_Machine+1,w
 13288  00B2  00F9               	movwf	___awtoft@c+1
 13289  00B3  3193  23F9  3180   	fcall	___awtoft
 13290  00B6  0878               	movf	?___awtoft,w
 13291  00B7  0020               	movlb	0	; select bank0
 13292  00B8  00B3               	movwf	___ftmul@f2
 13293  00B9  0879               	movf	?___awtoft+1,w
 13294  00BA  00B4               	movwf	___ftmul@f2+1
 13295  00BB  087A               	movf	?___awtoft+2,w
 13296  00BC  00B5               	movwf	___ftmul@f2+2
 13297  00BD  30C3               	movlw	195
 13298  00BE  00B0               	movwf	___ftmul@f1
 13299  00BF  3075               	movlw	117
 13300  00C0  00B1               	movwf	___ftmul@f1+1
 13301  00C1  303E               	movlw	62
 13302  00C2  00B2               	movwf	___ftmul@f1+2
 13303  00C3  318B  23D2  3180   	fcall	___ftmul
 13304  00C6  0020               	movlb	0	; select bank0
 13305  00C7  0830               	movf	?___ftmul,w
 13306  00C8  00C0               	movwf	___fttol@f1
 13307  00C9  0831               	movf	?___ftmul+1,w
 13308  00CA  00C1               	movwf	___fttol@f1+1
 13309  00CB  0832               	movf	?___ftmul+2,w
 13310  00CC  00C2               	movwf	___fttol@f1+2
 13311  00CD  3189  21F2  3180   	fcall	___fttol
 13312  00D0  0020               	movlb	0	; select bank0
 13313  00D1  0840               	movf	?___fttol,w
 13314  00D2  3E46               	addlw	70
 13315  00D3  00D0               	movwf	??_Battery_State_Machine+2
 13316  00D4  3005               	movlw	5
 13317  00D5  3D41               	addwfc	?___fttol+1,w
 13318  00D6  00D1               	movwf	??_Battery_State_Machine+3
 13319  00D7  0851               	movf	??_Battery_State_Machine+3,w
 13320  00D8  3A80               	xorlw	128
 13321  00D9  00D2               	movwf	??_Battery_State_Machine+4
 13322  00DA  0021               	movlb	1	; select bank1
 13323  00DB  0865               	movf	(_Vref+1)^(0+128),w
 13324  00DC  3A80               	xorlw	128
 13325  00DD  0020               	movlb	0	; select bank0
 13326  00DE  0252               	subwf	??_Battery_State_Machine+4,w
 13327  00DF  1D03               	skipz
 13328  00E0  28E5               	goto	u3165
 13329  00E1  0021               	movlb	1	; select bank1
 13330  00E2  0864               	movf	_Vref^(0+128),w
 13331  00E3  0020               	movlb	0	; select bank0
 13332  00E4  0250               	subwf	??_Battery_State_Machine+2,w
 13333  00E5                     u3165:	
 13334  00E5  1803               	skipnc
 13335  00E6  28EC               	goto	l2843
 13336  00E7  30FF               	movlw	255
 13337  00E8  0021               	movlb	1	; select bank1
 13338  00E9  07E4               	addwf	_Vref^(0+128),f
 13339  00EA  30FF               	movlw	255
 13340  00EB  3DE5               	addwfc	(_Vref+1)^(0+128),f
 13341  00EC                     l2843:	
 13342                           
 13343                           ;battery_charger.c: 73: x=0;
 13344  00EC  0021               	movlb	1	; select bank1
 13345  00ED  01BF               	clrf	_x^(0+128)
 13346  00EE                     l2845:	
 13347                           
 13348                           ;battery_charger.c: 74: }
 13349                           ;battery_charger.c: 75: if(IminCount<10)IminCount+=1;
 13350  00EE  3000               	movlw	0
 13351  00EF  026B               	subwf	(_IminCount+1)^(0+128),w
 13352  00F0  300A               	movlw	10
 13353  00F1  1903               	skipnz
 13354  00F2  026A               	subwf	_IminCount^(0+128),w
 13355  00F3  1803               	skipnc
 13356  00F4  0008               	return
 13357  00F5  3001               	movlw	1
 13358  00F6  07EA               	addwf	_IminCount^(0+128),f
 13359  00F7  3000               	movlw	0
 13360  00F8  3DEB               	addwfc	(_IminCount+1)^(0+128),f
 13361                           
 13362                           ;battery_charger.c: 76: }
 13363                           ;battery_charger.c: 77: }
 13364                           ;battery_charger.c: 78: }
 13365  00F9  0008               	return
 13366  00FA                     l2849:	
 13367                           
 13368                           ;battery_charger.c: 79: else if(battery_state == FLOAT)
 13369  00FA  3005               	movlw	5
 13370  00FB  066C               	xorwf	_battery_state^(0+128),w
 13371  00FC  1D03               	btfss	3,2
 13372  00FD  0008               	return
 13373                           
 13374                           ;battery_charger.c: 80: {
 13375                           ;battery_charger.c: 81: { Vref = 1350+(int16_t)((250-batteryTemp)*.24); };
 13376  00FE  096D               	comf	_batteryTemp^(0+128),w
 13377  00FF  0020               	movlb	0	; select bank0
 13378  0100  00CE               	movwf	??_Battery_State_Machine
 13379  0101  0021               	movlb	1	; select bank1
 13380  0102  096E               	comf	(_batteryTemp+1)^(0+128),w
 13381  0103  0020               	movlb	0	; select bank0
 13382  0104  00CF               	movwf	??_Battery_State_Machine+1
 13383  0105  0ACE               	incf	??_Battery_State_Machine,f
 13384  0106  1903               	skipnz
 13385  0107  0ACF               	incf	??_Battery_State_Machine+1,f
 13386  0108  084E               	movf	??_Battery_State_Machine,w
 13387  0109  3EFA               	addlw	250
 13388  010A  00F8               	movwf	___awtoft@c
 13389  010B  3000               	movlw	0
 13390  010C  3D4F               	addwfc	??_Battery_State_Machine+1,w
 13391  010D  00F9               	movwf	___awtoft@c+1
 13392  010E  3193  23F9  3180   	fcall	___awtoft
 13393  0111  0878               	movf	?___awtoft,w
 13394  0112  0020               	movlb	0	; select bank0
 13395  0113  00B3               	movwf	___ftmul@f2
 13396  0114  0879               	movf	?___awtoft+1,w
 13397  0115  00B4               	movwf	___ftmul@f2+1
 13398  0116  087A               	movf	?___awtoft+2,w
 13399  0117  00B5               	movwf	___ftmul@f2+2
 13400  0118  30C3               	movlw	195
 13401  0119  00B0               	movwf	___ftmul@f1
 13402  011A  3075               	movlw	117
 13403  011B  00B1               	movwf	___ftmul@f1+1
 13404  011C  303E               	movlw	62
 13405  011D  00B2               	movwf	___ftmul@f1+2
 13406  011E  318B  23D2  3180   	fcall	___ftmul
 13407  0121  0020               	movlb	0	; select bank0
 13408  0122  0830               	movf	?___ftmul,w
 13409  0123  00C0               	movwf	___fttol@f1
 13410  0124  0831               	movf	?___ftmul+1,w
 13411  0125  00C1               	movwf	___fttol@f1+1
 13412  0126  0832               	movf	?___ftmul+2,w
 13413  0127  00C2               	movwf	___fttol@f1+2
 13414  0128  3189  21F2         	fcall	___fttol
 13415  012A  0020               	movlb	0	; select bank0
 13416  012B  0840               	movf	?___fttol,w
 13417  012C  3E46               	addlw	70
 13418  012D  0021               	movlb	1	; select bank1
 13419  012E  00E4               	movwf	_Vref^(0+128)
 13420  012F  3005               	movlw	5
 13421  0130  0020               	movlb	0	; select bank0
 13422  0131  3D41               	addwfc	?___fttol+1,w
 13423  0132  0021               	movlb	1	; select bank1
 13424  0133  00E5               	movwf	(_Vref+1)^(0+128)
 13425                           
 13426                           ;battery_charger.c: 82: { Iref = 25; };
 13427  0134  3019               	movlw	25
 13428  0135  00E6               	movwf	_Iref^(0+128)
 13429  0136  3000               	movlw	0
 13430  0137  00E7               	movwf	(_Iref^(0+128)+1)
 13431                           
 13432                           ;battery_charger.c: 83: Imode0=0;
 13433  0138  0020               	movlb	0	; select bank0
 13434  0139  01EE               	clrf	_Imode0
 13435                           
 13436                           ;battery_charger.c: 87: {
 13437                           
 13438                           ;battery_charger.c: 84: }
 13439  013A  0008               	return
 13440  013B                     __end_of_Battery_State_Machine:	
 13441                           
 13442                           	psect	text37
 13443  09F2                     __ptext37:	
 13444 ;; *************** function ___fttol *****************
 13445 ;; Defined at:
 13446 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 13447 ;; Parameters:    Size  Location     Type
 13448 ;;  f1              3   32[BANK0 ] float 
 13449 ;; Auto vars:     Size  Location     Type
 13450 ;;  lval            4   41[BANK0 ] unsigned long 
 13451 ;;  exp1            1   45[BANK0 ] unsigned char 
 13452 ;;  sign1           1   40[BANK0 ] unsigned char 
 13453 ;; Return value:  Size  Location     Type
 13454 ;;                  4   32[BANK0 ] long 
 13455 ;; Registers used:
 13456 ;;		wreg, status,2, status,0
 13457 ;; Tracked objects:
 13458 ;;		On entry : 0/0
 13459 ;;		On exit  : 0/0
 13460 ;;		Unchanged: 0/0
 13461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13462 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13463 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13464 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13465 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13466 ;;Total ram usage:       14 bytes
 13467 ;; Hardware stack levels used:    1
 13468 ;; This function calls:
 13469 ;;		Nothing
 13470 ;; This function is called by:
 13471 ;;		_tempCalc
 13472 ;;		_main
 13473 ;;		_calculateCurrent0
 13474 ;;		_calculateCurrent1
 13475 ;;		_Init_Battery_State_Machine
 13476 ;;		_Battery_State_Machine
 13477 ;;		_cc_cv_mode
 13478 ;; This function uses a non-reentrant model
 13479 ;;
 13480                           
 13481                           
 13482                           ;psect for function ___fttol
 13483  09F2                     ___fttol:	
 13484                           
 13485                           ;incstack = 0
 13486                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13487  09F2  0020               	movlb	0	; select bank0
 13488  09F3  0840               	movf	___fttol@f1,w
 13489  09F4  00C4               	movwf	??___fttol
 13490  09F5  0841               	movf	___fttol@f1+1,w
 13491  09F6  00C5               	movwf	??___fttol+1
 13492  09F7  0842               	movf	___fttol@f1+2,w
 13493  09F8  00C6               	movwf	??___fttol+2
 13494  09F9  1003               	clrc
 13495  09FA  0D45               	rlf	??___fttol+1,w
 13496  09FB  0D46               	rlf	??___fttol+2,w
 13497  09FC  00C7               	movwf	??___fttol+3
 13498  09FD  0847               	movf	??___fttol+3,w
 13499  09FE  00CD               	movwf	___fttol@exp1
 13500  09FF  084D               	movf	___fttol@exp1,w
 13501  0A00  1D03               	btfss	3,2
 13502  0A01  2A0B               	goto	l2375
 13503  0A02  3000               	movlw	0
 13504  0A03  00C3               	movwf	?___fttol+3
 13505  0A04  3000               	movlw	0
 13506  0A05  00C2               	movwf	?___fttol+2
 13507  0A06  3000               	movlw	0
 13508  0A07  00C1               	movwf	?___fttol+1
 13509  0A08  3000               	movlw	0
 13510  0A09  00C0               	movwf	?___fttol
 13511  0A0A  0008               	return
 13512  0A0B                     l2375:	
 13513  0A0B  0840               	movf	___fttol@f1,w
 13514  0A0C  00C4               	movwf	??___fttol
 13515  0A0D  0841               	movf	___fttol@f1+1,w
 13516  0A0E  00C5               	movwf	??___fttol+1
 13517  0A0F  0842               	movf	___fttol@f1+2,w
 13518  0A10  00C6               	movwf	??___fttol+2
 13519  0A11  3017               	movlw	23
 13520  0A12                     u2475:	
 13521  0A12  36C6               	lsrf	??___fttol+2,f
 13522  0A13  0CC5               	rrf	??___fttol+1,f
 13523  0A14  0CC4               	rrf	??___fttol,f
 13524  0A15  0B89               	decfsz	9,f
 13525  0A16  2A12               	goto	u2475
 13526  0A17  0844               	movf	??___fttol,w
 13527  0A18  00C7               	movwf	??___fttol+3
 13528  0A19  0847               	movf	??___fttol+3,w
 13529  0A1A  00C8               	movwf	___fttol@sign1
 13530  0A1B  17C1               	bsf	___fttol@f1+1,7
 13531  0A1C  30FF               	movlw	255
 13532  0A1D  05C0               	andwf	___fttol@f1,f
 13533  0A1E  30FF               	movlw	255
 13534  0A1F  05C1               	andwf	___fttol@f1+1,f
 13535  0A20  3000               	movlw	0
 13536  0A21  05C2               	andwf	___fttol@f1+2,f
 13537  0A22  0840               	movf	___fttol@f1,w
 13538  0A23  00C9               	movwf	___fttol@lval
 13539  0A24  0841               	movf	___fttol@f1+1,w
 13540  0A25  00CA               	movwf	___fttol@lval+1
 13541  0A26  0842               	movf	___fttol@f1+2,w
 13542  0A27  00CB               	movwf	___fttol@lval+2
 13543  0A28  01CC               	clrf	___fttol@lval+3
 13544  0A29  308E               	movlw	142
 13545  0A2A  02CD               	subwf	___fttol@exp1,f
 13546  0A2B  1FCD               	btfss	___fttol@exp1,7
 13547  0A2C  2A49               	goto	l2395
 13548  0A2D  084D               	movf	___fttol@exp1,w
 13549  0A2E  3A80               	xorlw	128
 13550  0A2F  3E8F               	addlw	143
 13551  0A30  1803               	skipnc
 13552  0A31  2A3B               	goto	l2393
 13553  0A32  3000               	movlw	0
 13554  0A33  00C3               	movwf	?___fttol+3
 13555  0A34  3000               	movlw	0
 13556  0A35  00C2               	movwf	?___fttol+2
 13557  0A36  3000               	movlw	0
 13558  0A37  00C1               	movwf	?___fttol+1
 13559  0A38  3000               	movlw	0
 13560  0A39  00C0               	movwf	?___fttol
 13561  0A3A  0008               	return
 13562  0A3B                     l2393:	
 13563  0A3B  3001               	movlw	1
 13564  0A3C                     u2505:	
 13565  0A3C  36CC               	lsrf	___fttol@lval+3,f
 13566  0A3D  0CCB               	rrf	___fttol@lval+2,f
 13567  0A3E  0CCA               	rrf	___fttol@lval+1,f
 13568  0A3F  0CC9               	rrf	___fttol@lval,f
 13569  0A40  0B89               	decfsz	9,f
 13570  0A41  2A3C               	goto	u2505
 13571  0A42  3001               	movlw	1
 13572  0A43  00C4               	movwf	??___fttol
 13573  0A44  0844               	movf	??___fttol,w
 13574  0A45  07CD               	addwf	___fttol@exp1,f
 13575  0A46  1903               	btfsc	3,2
 13576  0A47  2A62               	goto	l2403
 13577  0A48  2A3B               	goto	l2393
 13578  0A49                     l2395:	
 13579  0A49  3018               	movlw	24
 13580  0A4A  024D               	subwf	___fttol@exp1,w
 13581  0A4B  1C03               	skipc
 13582  0A4C  2A5F               	goto	l821
 13583  0A4D  3000               	movlw	0
 13584  0A4E  00C3               	movwf	?___fttol+3
 13585  0A4F  3000               	movlw	0
 13586  0A50  00C2               	movwf	?___fttol+2
 13587  0A51  3000               	movlw	0
 13588  0A52  00C1               	movwf	?___fttol+1
 13589  0A53  3000               	movlw	0
 13590  0A54  00C0               	movwf	?___fttol
 13591  0A55  0008               	return
 13592  0A56                     l2401:	
 13593  0A56  3001               	movlw	1
 13594  0A57                     u2535:	
 13595  0A57  35C9               	lslf	___fttol@lval,f
 13596  0A58  0DCA               	rlf	___fttol@lval+1,f
 13597  0A59  0DCB               	rlf	___fttol@lval+2,f
 13598  0A5A  0DCC               	rlf	___fttol@lval+3,f
 13599  0A5B  0B89               	decfsz	9,f
 13600  0A5C  2A57               	goto	u2535
 13601  0A5D  3001               	movlw	1
 13602  0A5E  02CD               	subwf	___fttol@exp1,f
 13603  0A5F                     l821:	
 13604  0A5F  084D               	movf	___fttol@exp1,w
 13605  0A60  1D03               	btfss	3,2
 13606  0A61  2A56               	goto	l2401
 13607  0A62                     l2403:	
 13608  0A62  0848               	movf	___fttol@sign1,w
 13609  0A63  1903               	btfsc	3,2
 13610  0A64  2A70               	goto	l2407
 13611  0A65  09C9               	comf	___fttol@lval,f
 13612  0A66  09CA               	comf	___fttol@lval+1,f
 13613  0A67  09CB               	comf	___fttol@lval+2,f
 13614  0A68  09CC               	comf	___fttol@lval+3,f
 13615  0A69  0AC9               	incf	___fttol@lval,f
 13616  0A6A  1903               	skipnz
 13617  0A6B  0ACA               	incf	___fttol@lval+1,f
 13618  0A6C  1903               	skipnz
 13619  0A6D  0ACB               	incf	___fttol@lval+2,f
 13620  0A6E  1903               	skipnz
 13621  0A6F  0ACC               	incf	___fttol@lval+3,f
 13622  0A70                     l2407:	
 13623  0A70  084C               	movf	___fttol@lval+3,w
 13624  0A71  00C3               	movwf	?___fttol+3
 13625  0A72  084B               	movf	___fttol@lval+2,w
 13626  0A73  00C2               	movwf	?___fttol+2
 13627  0A74  084A               	movf	___fttol@lval+1,w
 13628  0A75  00C1               	movwf	?___fttol+1
 13629  0A76  0849               	movf	___fttol@lval,w
 13630  0A77  00C0               	movwf	?___fttol
 13631  0A78  0008               	return
 13632  0A79                     __end_of___fttol:	
 13633                           
 13634                           	psect	text38
 13635  0BD2                     __ptext38:	
 13636 ;; *************** function ___ftmul *****************
 13637 ;; Defined at:
 13638 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 13639 ;; Parameters:    Size  Location     Type
 13640 ;;  f1              3   16[BANK0 ] float 
 13641 ;;  f2              3   19[BANK0 ] float 
 13642 ;; Auto vars:     Size  Location     Type
 13643 ;;  f3_as_produc    3   27[BANK0 ] unsigned um
 13644 ;;  sign            1   31[BANK0 ] unsigned char 
 13645 ;;  cntr            1   30[BANK0 ] unsigned char 
 13646 ;;  exp             1   26[BANK0 ] unsigned char 
 13647 ;; Return value:  Size  Location     Type
 13648 ;;                  3   16[BANK0 ] float 
 13649 ;; Registers used:
 13650 ;;		wreg, status,2, status,0, pclath, cstack
 13651 ;; Tracked objects:
 13652 ;;		On entry : 0/0
 13653 ;;		On exit  : 0/0
 13654 ;;		Unchanged: 0/0
 13655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13656 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13657 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13658 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13659 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13660 ;;Total ram usage:       16 bytes
 13661 ;; Hardware stack levels used:    1
 13662 ;; Hardware stack levels required when called:    1
 13663 ;; This function calls:
 13664 ;;		___ftpack
 13665 ;; This function is called by:
 13666 ;;		_Init_Battery_State_Machine
 13667 ;;		_Battery_State_Machine
 13668 ;;		_cc_cv_mode
 13669 ;;		_tempCalc
 13670 ;;		_main
 13671 ;;		_log
 13672 ;;		_eval_poly
 13673 ;; This function uses a non-reentrant model
 13674 ;;
 13675                           
 13676                           
 13677                           ;psect for function ___ftmul
 13678  0BD2                     ___ftmul:	
 13679                           
 13680                           ;incstack = 0
 13681                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 13682  0BD2  0020               	movlb	0	; select bank0
 13683  0BD3  0830               	movf	___ftmul@f1,w
 13684  0BD4  00B6               	movwf	??___ftmul
 13685  0BD5  0831               	movf	___ftmul@f1+1,w
 13686  0BD6  00B7               	movwf	??___ftmul+1
 13687  0BD7  0832               	movf	___ftmul@f1+2,w
 13688  0BD8  00B8               	movwf	??___ftmul+2
 13689  0BD9  1003               	clrc
 13690  0BDA  0D37               	rlf	??___ftmul+1,w
 13691  0BDB  0D38               	rlf	??___ftmul+2,w
 13692  0BDC  00B9               	movwf	??___ftmul+3
 13693  0BDD  0839               	movf	??___ftmul+3,w
 13694  0BDE  00BA               	movwf	___ftmul@exp
 13695  0BDF  083A               	movf	___ftmul@exp,w
 13696  0BE0  1D03               	btfss	3,2
 13697  0BE1  2BE9               	goto	l2291
 13698  0BE2  3000               	movlw	0
 13699  0BE3  00B0               	movwf	?___ftmul
 13700  0BE4  3000               	movlw	0
 13701  0BE5  00B1               	movwf	?___ftmul+1
 13702  0BE6  3000               	movlw	0
 13703  0BE7  00B2               	movwf	?___ftmul+2
 13704  0BE8  0008               	return
 13705  0BE9                     l2291:	
 13706  0BE9  0833               	movf	___ftmul@f2,w
 13707  0BEA  00B6               	movwf	??___ftmul
 13708  0BEB  0834               	movf	___ftmul@f2+1,w
 13709  0BEC  00B7               	movwf	??___ftmul+1
 13710  0BED  0835               	movf	___ftmul@f2+2,w
 13711  0BEE  00B8               	movwf	??___ftmul+2
 13712  0BEF  1003               	clrc
 13713  0BF0  0D37               	rlf	??___ftmul+1,w
 13714  0BF1  0D38               	rlf	??___ftmul+2,w
 13715  0BF2  00B9               	movwf	??___ftmul+3
 13716  0BF3  0839               	movf	??___ftmul+3,w
 13717  0BF4  00BF               	movwf	___ftmul@sign
 13718  0BF5  083F               	movf	___ftmul@sign,w
 13719  0BF6  1D03               	btfss	3,2
 13720  0BF7  2BFF               	goto	l2297
 13721  0BF8  3000               	movlw	0
 13722  0BF9  00B0               	movwf	?___ftmul
 13723  0BFA  3000               	movlw	0
 13724  0BFB  00B1               	movwf	?___ftmul+1
 13725  0BFC  3000               	movlw	0
 13726  0BFD  00B2               	movwf	?___ftmul+2
 13727  0BFE  0008               	return
 13728  0BFF                     l2297:	
 13729  0BFF  083F               	movf	___ftmul@sign,w
 13730  0C00  3E7B               	addlw	123
 13731  0C01  00B6               	movwf	??___ftmul
 13732  0C02  0836               	movf	??___ftmul,w
 13733  0C03  07BA               	addwf	___ftmul@exp,f
 13734  0C04  0830               	movf	___ftmul@f1,w
 13735  0C05  00B6               	movwf	??___ftmul
 13736  0C06  0831               	movf	___ftmul@f1+1,w
 13737  0C07  00B7               	movwf	??___ftmul+1
 13738  0C08  0832               	movf	___ftmul@f1+2,w
 13739  0C09  00B8               	movwf	??___ftmul+2
 13740  0C0A  3010               	movlw	16
 13741  0C0B                     u2325:	
 13742  0C0B  36B8               	lsrf	??___ftmul+2,f
 13743  0C0C  0CB7               	rrf	??___ftmul+1,f
 13744  0C0D  0CB6               	rrf	??___ftmul,f
 13745  0C0E  0B89               	decfsz	9,f
 13746  0C0F  2C0B               	goto	u2325
 13747  0C10  0836               	movf	??___ftmul,w
 13748  0C11  00B9               	movwf	??___ftmul+3
 13749  0C12  0839               	movf	??___ftmul+3,w
 13750  0C13  00BF               	movwf	___ftmul@sign
 13751  0C14  0833               	movf	___ftmul@f2,w
 13752  0C15  00B6               	movwf	??___ftmul
 13753  0C16  0834               	movf	___ftmul@f2+1,w
 13754  0C17  00B7               	movwf	??___ftmul+1
 13755  0C18  0835               	movf	___ftmul@f2+2,w
 13756  0C19  00B8               	movwf	??___ftmul+2
 13757  0C1A  3010               	movlw	16
 13758  0C1B                     u2335:	
 13759  0C1B  36B8               	lsrf	??___ftmul+2,f
 13760  0C1C  0CB7               	rrf	??___ftmul+1,f
 13761  0C1D  0CB6               	rrf	??___ftmul,f
 13762  0C1E  0B89               	decfsz	9,f
 13763  0C1F  2C1B               	goto	u2335
 13764  0C20  0836               	movf	??___ftmul,w
 13765  0C21  00B9               	movwf	??___ftmul+3
 13766  0C22  0839               	movf	??___ftmul+3,w
 13767  0C23  06BF               	xorwf	___ftmul@sign,f
 13768  0C24  3080               	movlw	128
 13769  0C25  00B6               	movwf	??___ftmul
 13770  0C26  0836               	movf	??___ftmul,w
 13771  0C27  05BF               	andwf	___ftmul@sign,f
 13772  0C28  17B1               	bsf	___ftmul@f1+1,7
 13773  0C29  17B4               	bsf	___ftmul@f2+1,7
 13774  0C2A  30FF               	movlw	255
 13775  0C2B  05B3               	andwf	___ftmul@f2,f
 13776  0C2C  30FF               	movlw	255
 13777  0C2D  05B4               	andwf	___ftmul@f2+1,f
 13778  0C2E  3000               	movlw	0
 13779  0C2F  05B5               	andwf	___ftmul@f2+2,f
 13780  0C30  3000               	movlw	0
 13781  0C31  00BB               	movwf	___ftmul@f3_as_product
 13782  0C32  3000               	movlw	0
 13783  0C33  00BC               	movwf	___ftmul@f3_as_product+1
 13784  0C34  3000               	movlw	0
 13785  0C35  00BD               	movwf	___ftmul@f3_as_product+2
 13786  0C36  3007               	movlw	7
 13787  0C37  00B6               	movwf	??___ftmul
 13788  0C38  0836               	movf	??___ftmul,w
 13789  0C39  00BE               	movwf	___ftmul@cntr
 13790  0C3A                     l2309:	
 13791  0C3A  1C30               	btfss	___ftmul@f1,0
 13792  0C3B  2C42               	goto	l2313
 13793  0C3C  0833               	movf	___ftmul@f2,w
 13794  0C3D  07BB               	addwf	___ftmul@f3_as_product,f
 13795  0C3E  0834               	movf	___ftmul@f2+1,w
 13796  0C3F  3DBC               	addwfc	___ftmul@f3_as_product+1,f
 13797  0C40  0835               	movf	___ftmul@f2+2,w
 13798  0C41  3DBD               	addwfc	___ftmul@f3_as_product+2,f
 13799  0C42                     l2313:	
 13800  0C42  3001               	movlw	1
 13801  0C43                     u2355:	
 13802  0C43  36B2               	lsrf	___ftmul@f1+2,f
 13803  0C44  0CB1               	rrf	___ftmul@f1+1,f
 13804  0C45  0CB0               	rrf	___ftmul@f1,f
 13805  0C46  0B89               	decfsz	9,f
 13806  0C47  2C43               	goto	u2355
 13807  0C48  3001               	movlw	1
 13808  0C49                     u2365:	
 13809  0C49  35B3               	lslf	___ftmul@f2,f
 13810  0C4A  0DB4               	rlf	___ftmul@f2+1,f
 13811  0C4B  0DB5               	rlf	___ftmul@f2+2,f
 13812  0C4C  0B89               	decfsz	9,f
 13813  0C4D  2C49               	goto	u2365
 13814  0C4E  3001               	movlw	1
 13815  0C4F  02BE               	subwf	___ftmul@cntr,f
 13816  0C50  1D03               	btfss	3,2
 13817  0C51  2C3A               	goto	l2309
 13818  0C52  3009               	movlw	9
 13819  0C53  00B6               	movwf	??___ftmul
 13820  0C54  0836               	movf	??___ftmul,w
 13821  0C55  00BE               	movwf	___ftmul@cntr
 13822  0C56                     l2321:	
 13823  0C56  1C30               	btfss	___ftmul@f1,0
 13824  0C57  2C5E               	goto	l2325
 13825  0C58  0833               	movf	___ftmul@f2,w
 13826  0C59  07BB               	addwf	___ftmul@f3_as_product,f
 13827  0C5A  0834               	movf	___ftmul@f2+1,w
 13828  0C5B  3DBC               	addwfc	___ftmul@f3_as_product+1,f
 13829  0C5C  0835               	movf	___ftmul@f2+2,w
 13830  0C5D  3DBD               	addwfc	___ftmul@f3_as_product+2,f
 13831  0C5E                     l2325:	
 13832  0C5E  3001               	movlw	1
 13833  0C5F                     u2395:	
 13834  0C5F  36B2               	lsrf	___ftmul@f1+2,f
 13835  0C60  0CB1               	rrf	___ftmul@f1+1,f
 13836  0C61  0CB0               	rrf	___ftmul@f1,f
 13837  0C62  0B89               	decfsz	9,f
 13838  0C63  2C5F               	goto	u2395
 13839  0C64  3001               	movlw	1
 13840  0C65                     u2405:	
 13841  0C65  36BD               	lsrf	___ftmul@f3_as_product+2,f
 13842  0C66  0CBC               	rrf	___ftmul@f3_as_product+1,f
 13843  0C67  0CBB               	rrf	___ftmul@f3_as_product,f
 13844  0C68  0B89               	decfsz	9,f
 13845  0C69  2C65               	goto	u2405
 13846  0C6A  3001               	movlw	1
 13847  0C6B  02BE               	subwf	___ftmul@cntr,f
 13848  0C6C  1D03               	btfss	3,2
 13849  0C6D  2C56               	goto	l2321
 13850  0C6E  083B               	movf	___ftmul@f3_as_product,w
 13851  0C6F  00F0               	movwf	___ftpack@arg
 13852  0C70  083C               	movf	___ftmul@f3_as_product+1,w
 13853  0C71  00F1               	movwf	___ftpack@arg+1
 13854  0C72  083D               	movf	___ftmul@f3_as_product+2,w
 13855  0C73  00F2               	movwf	___ftpack@arg+2
 13856  0C74  083A               	movf	___ftmul@exp,w
 13857  0C75  00B6               	movwf	??___ftmul
 13858  0C76  0836               	movf	??___ftmul,w
 13859  0C77  00F3               	movwf	___ftpack@exp
 13860  0C78  083F               	movf	___ftmul@sign,w
 13861  0C79  00B7               	movwf	??___ftmul+1
 13862  0C7A  0837               	movf	??___ftmul+1,w
 13863  0C7B  00F4               	movwf	___ftpack@sign
 13864  0C7C  3197  271A         	fcall	___ftpack
 13865  0C7E  0870               	movf	?___ftpack,w
 13866  0C7F  0020               	movlb	0	; select bank0
 13867  0C80  00B0               	movwf	?___ftmul
 13868  0C81  0871               	movf	?___ftpack+1,w
 13869  0C82  00B1               	movwf	?___ftmul+1
 13870  0C83  0872               	movf	?___ftpack+2,w
 13871  0C84  00B2               	movwf	?___ftmul+2
 13872  0C85  0008               	return
 13873  0C86                     __end_of___ftmul:	
 13874                           
 13875                           	psect	text39
 13876  13F9                     __ptext39:	
 13877 ;; *************** function ___awtoft *****************
 13878 ;; Defined at:
 13879 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 13880 ;; Parameters:    Size  Location     Type
 13881 ;;  c               2    8[COMMON] int 
 13882 ;; Auto vars:     Size  Location     Type
 13883 ;;  sign            1   13[COMMON] unsigned char 
 13884 ;; Return value:  Size  Location     Type
 13885 ;;                  3    8[COMMON] float 
 13886 ;; Registers used:
 13887 ;;		wreg, status,2, status,0, pclath, cstack
 13888 ;; Tracked objects:
 13889 ;;		On entry : 0/0
 13890 ;;		On exit  : 0/0
 13891 ;;		Unchanged: 0/0
 13892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13893 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13894 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13895 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13896 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13897 ;;Total ram usage:        6 bytes
 13898 ;; Hardware stack levels used:    1
 13899 ;; Hardware stack levels required when called:    1
 13900 ;; This function calls:
 13901 ;;		___ftpack
 13902 ;; This function is called by:
 13903 ;;		_Init_Battery_State_Machine
 13904 ;;		_Battery_State_Machine
 13905 ;;		_cc_cv_mode
 13906 ;;		_tempCalc
 13907 ;;		_main
 13908 ;;		_calculateCurrent0
 13909 ;;		_calculateCurrent1
 13910 ;;		_log
 13911 ;; This function uses a non-reentrant model
 13912 ;;
 13913                           
 13914                           
 13915                           ;psect for function ___awtoft
 13916  13F9                     ___awtoft:	
 13917                           
 13918                           ;incstack = 0
 13919                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 13920  13F9  01FD               	clrf	___awtoft@sign
 13921  13FA  1FF9               	btfss	___awtoft@c+1,7
 13922  13FB  2C03               	goto	l2345
 13923  13FC  09F8               	comf	___awtoft@c,f
 13924  13FD  09F9               	comf	___awtoft@c+1,f
 13925  13FE  0AF8               	incf	___awtoft@c,f
 13926  13FF  1903               	skipnz
 13927  1400  0AF9               	incf	___awtoft@c+1,f
 13928  1401  01FD               	clrf	___awtoft@sign
 13929  1402  0AFD               	incf	___awtoft@sign,f
 13930  1403                     l2345:	
 13931  1403  0878               	movf	___awtoft@c,w
 13932  1404  00F0               	movwf	___ftpack@arg
 13933  1405  0879               	movf	___awtoft@c+1,w
 13934  1406  00F1               	movwf	___ftpack@arg+1
 13935  1407  01F2               	clrf	___ftpack@arg+2
 13936  1408  308E               	movlw	142
 13937  1409  00FB               	movwf	??___awtoft
 13938  140A  087B               	movf	??___awtoft,w
 13939  140B  00F3               	movwf	___ftpack@exp
 13940  140C  087D               	movf	___awtoft@sign,w
 13941  140D  00FC               	movwf	??___awtoft+1
 13942  140E  087C               	movf	??___awtoft+1,w
 13943  140F  00F4               	movwf	___ftpack@sign
 13944  1410  3197  271A         	fcall	___ftpack
 13945  1412  0870               	movf	?___ftpack,w
 13946  1413  00F8               	movwf	?___awtoft
 13947  1414  0871               	movf	?___ftpack+1,w
 13948  1415  00F9               	movwf	?___awtoft+1
 13949  1416  0872               	movf	?___ftpack+2,w
 13950  1417  00FA               	movwf	?___awtoft+2
 13951  1418  0008               	return
 13952  1419                     __end_of___awtoft:	
 13953                           
 13954                           	psect	text40
 13955  171A                     __ptext40:	
 13956 ;; *************** function ___ftpack *****************
 13957 ;; Defined at:
 13958 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 13959 ;; Parameters:    Size  Location     Type
 13960 ;;  arg             3    0[COMMON] unsigned um
 13961 ;;  exp             1    3[COMMON] unsigned char 
 13962 ;;  sign            1    4[COMMON] unsigned char 
 13963 ;; Auto vars:     Size  Location     Type
 13964 ;;		None
 13965 ;; Return value:  Size  Location     Type
 13966 ;;                  3    0[COMMON] float 
 13967 ;; Registers used:
 13968 ;;		wreg, status,2, status,0
 13969 ;; Tracked objects:
 13970 ;;		On entry : 0/0
 13971 ;;		On exit  : 0/0
 13972 ;;		Unchanged: 0/0
 13973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13974 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13976 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13977 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13978 ;;Total ram usage:        8 bytes
 13979 ;; Hardware stack levels used:    1
 13980 ;; This function calls:
 13981 ;;		Nothing
 13982 ;; This function is called by:
 13983 ;;		___awtoft
 13984 ;;		___ftadd
 13985 ;;		___ftdiv
 13986 ;;		___ftmul
 13987 ;; This function uses a non-reentrant model
 13988 ;;
 13989                           
 13990                           
 13991                           ;psect for function ___ftpack
 13992  171A                     ___ftpack:	
 13993                           
 13994                           ;incstack = 0
 13995                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 13996  171A  0873               	movf	___ftpack@exp,w
 13997  171B  1903               	btfsc	3,2
 13998  171C  2F22               	goto	l2151
 13999  171D  0872               	movf	___ftpack@arg+2,w
 14000  171E  0471               	iorwf	___ftpack@arg+1,w
 14001  171F  0470               	iorwf	___ftpack@arg,w
 14002  1720  1D03               	skipz
 14003  1721  2F33               	goto	l2157
 14004  1722                     l2151:	
 14005  1722  3000               	movlw	0
 14006  1723  00F0               	movwf	?___ftpack
 14007  1724  3000               	movlw	0
 14008  1725  00F1               	movwf	?___ftpack+1
 14009  1726  3000               	movlw	0
 14010  1727  00F2               	movwf	?___ftpack+2
 14011  1728  0008               	return
 14012  1729                     l2155:	
 14013  1729  3001               	movlw	1
 14014  172A  00F5               	movwf	??___ftpack
 14015  172B  0875               	movf	??___ftpack,w
 14016  172C  07F3               	addwf	___ftpack@exp,f
 14017  172D  3001               	movlw	1
 14018  172E                     u1895:	
 14019  172E  36F2               	lsrf	___ftpack@arg+2,f
 14020  172F  0CF1               	rrf	___ftpack@arg+1,f
 14021  1730  0CF0               	rrf	___ftpack@arg,f
 14022  1731  0B89               	decfsz	9,f
 14023  1732  2F2E               	goto	u1895
 14024  1733                     l2157:	
 14025  1733  30FE               	movlw	254
 14026  1734  0572               	andwf	___ftpack@arg+2,w
 14027  1735  1903               	btfsc	3,2
 14028  1736  2F4C               	goto	l730
 14029  1737  2F29               	goto	l2155
 14030  1738                     l2159:	
 14031  1738  3001               	movlw	1
 14032  1739  00F5               	movwf	??___ftpack
 14033  173A  0875               	movf	??___ftpack,w
 14034  173B  07F3               	addwf	___ftpack@exp,f
 14035  173C  3001               	movlw	1
 14036  173D  07F0               	addwf	___ftpack@arg,f
 14037  173E  3000               	movlw	0
 14038  173F  1803               	skipnc
 14039  1740  3001               	movlw	1
 14040  1741  07F1               	addwf	___ftpack@arg+1,f
 14041  1742  3000               	movlw	0
 14042  1743  1803               	skipnc
 14043  1744  3001               	movlw	1
 14044  1745  07F2               	addwf	___ftpack@arg+2,f
 14045  1746  3001               	movlw	1
 14046  1747                     u1915:	
 14047  1747  36F2               	lsrf	___ftpack@arg+2,f
 14048  1748  0CF1               	rrf	___ftpack@arg+1,f
 14049  1749  0CF0               	rrf	___ftpack@arg,f
 14050  174A  0B89               	decfsz	9,f
 14051  174B  2F47               	goto	u1915
 14052  174C                     l730:	
 14053  174C  30FF               	movlw	255
 14054  174D  0572               	andwf	___ftpack@arg+2,w
 14055  174E  1903               	btfsc	3,2
 14056  174F  2F59               	goto	l2167
 14057  1750  2F38               	goto	l2159
 14058  1751                     l2165:	
 14059  1751  3001               	movlw	1
 14060  1752  02F3               	subwf	___ftpack@exp,f
 14061  1753  3001               	movlw	1
 14062  1754                     u1935:	
 14063  1754  35F0               	lslf	___ftpack@arg,f
 14064  1755  0DF1               	rlf	___ftpack@arg+1,f
 14065  1756  0DF2               	rlf	___ftpack@arg+2,f
 14066  1757  0B89               	decfsz	9,f
 14067  1758  2F54               	goto	u1935
 14068  1759                     l2167:	
 14069  1759  1BF1               	btfsc	___ftpack@arg+1,7
 14070  175A  2F5F               	goto	l737
 14071  175B  3002               	movlw	2
 14072  175C  0273               	subwf	___ftpack@exp,w
 14073  175D  1803               	skipnc
 14074  175E  2F51               	goto	l2165
 14075  175F                     l737:	
 14076  175F  1873               	btfsc	___ftpack@exp,0
 14077  1760  2F67               	goto	l738
 14078  1761  30FF               	movlw	255
 14079  1762  05F0               	andwf	___ftpack@arg,f
 14080  1763  307F               	movlw	127
 14081  1764  05F1               	andwf	___ftpack@arg+1,f
 14082  1765  30FF               	movlw	255
 14083  1766  05F2               	andwf	___ftpack@arg+2,f
 14084  1767                     l738:	
 14085  1767  1003               	clrc
 14086  1768  0CF3               	rrf	___ftpack@exp,f
 14087  1769  0873               	movf	___ftpack@exp,w
 14088  176A  00F5               	movwf	??___ftpack
 14089  176B  01F6               	clrf	??___ftpack+1
 14090  176C  01F7               	clrf	??___ftpack+2
 14091  176D  3010               	movlw	16
 14092  176E                     u1975:	
 14093  176E  35F5               	lslf	??___ftpack,f
 14094  176F  0DF6               	rlf	??___ftpack+1,f
 14095  1770  0DF7               	rlf	??___ftpack+2,f
 14096  1771  0B89               	decfsz	9,f
 14097  1772  2F6E               	goto	u1975
 14098  1773  0875               	movf	??___ftpack,w
 14099  1774  04F0               	iorwf	___ftpack@arg,f
 14100  1775  0876               	movf	??___ftpack+1,w
 14101  1776  04F1               	iorwf	___ftpack@arg+1,f
 14102  1777  0877               	movf	??___ftpack+2,w
 14103  1778  04F2               	iorwf	___ftpack@arg+2,f
 14104  1779  0874               	movf	___ftpack@sign,w
 14105  177A  1903               	btfsc	3,2
 14106  177B  0008               	return
 14107  177C  17F2               	bsf	___ftpack@arg+2,7
 14108  177D  0008               	return
 14109  177E                     __end_of___ftpack:	
 14110  007E                     btemp	set	126	;btemp
 14111  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    330
    Data        18
    BSS         85
    Persistent  11
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     76      79
    BANK1            80     34      79
    BANK2            80      0      66
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           16      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 


Critical Paths under _main in COMMON

    _main->___awtoft
    _tempCalc->___awtoft
    _log->___awtoft
    ___ftadd->___awtoft
    _readButton->_ADCRead
    _readAnalog->___wmul
    _cc_cv_mode->___awtoft
    _calculateCurrent1->___awtoft
    _calculateCurrent0->___awtoft
    ___ftdiv->___awtoft
    _LCDInit->_LCDWrite
    _LCDClear->_gotoXY
    _gotoXY->_LCDWrite
    _Init_Battery_State_Machine->___awtoft
    _LCDWriteCharacter->___wmul
    ___wmul->___awdiv
    _Battery_State_Machine->___awtoft
    ___fttol->___awtoft
    ___ftmul->___awtoft
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_tempCalc
    _tempCalc->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    _readAnalog->___aldiv
    _cc_cv_mode->___fttol
    _calculateCurrent1->___fttol
    _calculateCurrent0->___fttol
    _SYSTEM_Initialize->_Init_Battery_State_Machine
    _Init_Battery_State_Machine->___fttol
    _LCDWriteInt->_LCDWriteCharacter
    _LCDWriteCharacter->___wmul
    _Battery_State_Machine->___fttol
    ___fttol->___ftmul
    ___ftmul->___ftdiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                38    38      0  100125
                                             72 BANK0      4     4      0
                                              0 BANK1     34    34      0
                            _ADCRead
              _Battery_State_Machine
                           _LCDClear
                            _LCDInit
                  _LCDWriteCharacter
                        _LCDWriteInt
                 _PWM1_LoadDutyValue
                 _PWM6_LoadDutyValue
                 _PWM7_LoadDutyValue
                  _SYSTEM_Initialize
                            ___awdiv
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                             ___wmul
                  _calculateCurrent0
                  _calculateCurrent1
                         _cc_cv_mode
                             _gotoXY
                         _readAnalog
                         _readButton
                           _tempCalc
 ---------------------------------------------------------------------------------
 (1) _tempCalc                                            11     9      2   34708
                                             61 BANK0     11     9      2
                            _ADCRead (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                            ___fttol
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   17916
                                             55 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     330
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           10     3      7    7845
                                             45 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     322
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3356
                                             45 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3183
                                             32 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (1) _readButton                                           2     2      0      22
                                              4 COMMON     2     2      0
                            _ADCRead
 ---------------------------------------------------------------------------------
 (1) _readAnalog                                          24    22      2    1710
                                              6 BANK0     24    22      2
                            _ADCRead
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     406
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     1      3      22
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _cc_cv_mode                                           5     5      0    6500
                                             46 BANK0      5     5      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent1                                    3     3      0    6586
                                             46 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent0                                    3     3      0    6586
                                             46 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3471
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    2     2      0   10029
                                             48 BANK0      2     2      0
                     _ADC_Initialize
         _Init_Battery_State_Machine
                           _LCDClear
                            _LCDInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PWM_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              1     1      0     803
                                              5 COMMON     1     1      0
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             3     3      0    2703
                                              8 COMMON     3     3      0
                           _LCDWrite
                             _gotoXY
 ---------------------------------------------------------------------------------
 (1) _gotoXY                                               3     2      1    1854
                                              5 COMMON     3     2      1
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _Init_Battery_State_Machine                           2     2      0    6500
                                             46 BANK0      2     2      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM7_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM6_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM1_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         16    11      5    7267
                                              8 BANK0     16    11      5
                  _LCDWriteCharacter
                            ___awdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _LCDWriteCharacter                                    6     6      0    1855
                                              2 BANK0      6     6      0
                           _LCDWrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     940
                                              9 COMMON     4     0      4
                                              0 BANK0      2     2      0
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _LCDWrite                                             5     4      1     803
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _Battery_State_Machine                                5     5      0    6500
                                             46 BANK0      5     5      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     522
                                             32 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    3385
                                             16 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2593
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1707
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _Battery_State_Machine
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _LCDClear
     _LCDWrite
     _gotoXY
       _LCDWrite
   _LCDInit
     _LCDWrite
   _LCDWriteCharacter
     _LCDWrite
     ___wmul
       ___awdiv (ARG)
   _LCDWriteInt
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
         ___awdiv (ARG)
     ___awdiv
     ___lwmod
   _PWM1_LoadDutyValue
   _PWM6_LoadDutyValue
   _PWM7_LoadDutyValue
   _SYSTEM_Initialize
     _ADC_Initialize
     _Init_Battery_State_Machine
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
     _LCDClear
       _LCDWrite
       _gotoXY
         _LCDWrite
     _LCDInit
       _LCDWrite
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM_Initialize
     _TMR2_Initialize
     _TMR4_Initialize
   ___awdiv
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     _frexp (ARG)
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
   ___wmul
     ___awdiv (ARG)
   _calculateCurrent0
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent1
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _cc_cv_mode
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _gotoXY
     _LCDWrite
   _readAnalog
     _ADCRead
     ___aldiv
     ___wmul
       ___awdiv (ARG)
   _readButton
     _ADCRead
   _tempCalc
     _ADCRead (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
     ___fttol (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     _log (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
       _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     22      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      42       9       82.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      EE      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              10      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      EE      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Jul 14 10:56:51 2018

                                  _j 00BD                                    _x 00BF  
             LCDWriteInt@fieldLength 002A              __size_of_PWM_Initialize 001F  
                        __CFG_CP$OFF 0000                                   l60 1336  
                                 l57 132F                         ___awdiv@sign 0076  
                ___wmul@multiplicand 007B          __size_of_PWM6_LoadDutyValue 0016  
                       ___ftadd@exp1 004C                         ___ftadd@exp2 004B  
                        __CFG_LVP$ON 0000                         ___ftadd@sign 004A  
                                l109 005E                                  l133 0D7D  
                                l129 0D5A                                  l191 1424  
                                l192 1426                                  l193 142C  
                                l194 143C                                  l195 1430  
                                l443 02F1                        LCDClear@index 0079  
                                l624 178F                                  l730 174C  
                                l821 0A5F                                  l737 175F  
                                l569 1389                                  l761 0FA9  
                                l738 1767                                  _GIE 005F  
                                _RB2 006A                         __CFG_CPD$OFF 0000  
                                _log 0B22                      __end_of_ADCRead 133D  
                    _TMR2_Initialize 12E9                         __CFG_BORV$LO 0000  
                                wreg 0009                      __end_of_LCDInit 1538  
                       ?_LCDWriteInt 0028                         __CFG_ZCD$OFF 0000  
                       ___ftdiv@cntr 002A                         ___ftdiv@sign 002F  
                               l2203 1382                                 l2221 0F32  
                               l2151 1722                                 l3031 1596  
                               l2231 0F48                                 l2321 0C56  
                               l2313 0C42                                 l2401 0A56  
                               l3025 1551                                 l2225 0F39  
                               l3121 0393                                 l2155 1729  
                               l2403 0A62                                 l2251 0F7F  
                               l2243 0F62                                 l3115 038A  
                               l2165 1751                                 l2157 1733  
                               l2325 0C5E                                 l2309 0C3A  
                               l2261 0F9B                                 l2253 0F84  
                               l3109 036C                                 l2167 1759  
                               l2159 1738                                 l2407 0A70  
                               l2271 0FCD                                 l2263 0FA5  
                               l2255 0F88                                 l3071 02CC  
                               l3063 02B8                                 l2345 1403  
                               l2281 0FE8                                 l2249 0F75  
                               l2353 0947                                 l3161 0433  
                               l3145 03E6                                 l2291 0BE9  
                               l2523 145F                                 l2267 0FBB  
                               l2419 0019                                 l3163 0438  
                               l3139 03CF                                 l2517 144B  
                               l2357 095D                                 l2437 1713  
                               l3165 043B                                 l3149 03ED  
                               l3085 02F9                                 l3077 02D2  
                               l2375 0A0B                                 l2711 164C  
                               l2703 162E                                 l2623 0B41  
                               l2297 0BFF                                 l2393 0A3B  
                               l2705 163A                                 l3169 0449  
                               l2395 0A49                                 l2715 1655  
                               l3179 046C                                 l2629 0B54  
                               l2823 0061                                 l2719 165D  
                               l2735 0AA6                                 l2671 17E9  
                               l3295 07BF                                 l2825 006C  
                               l2729 0A90                                 l2657 17B0  
                               l2649 17A0                                 l2809 025E  
                               l2843 00EC                                 l2835 0099  
                               l2923 0CDF                                 l2907 0CA7  
                               l2675 17F7                                 l2667 17DE  
                               l2659 17BE                                 l2845 00EE  
                               l2693 1626                                 l2781 146A  
                               l2941 0D2A                                 l2925 0CE3  
                               l2917 0CAE                                 l2757 0B00  
                               l2749 0AE7                                 l2687 161B  
                               l2783 1476                                 l2791 148B  
                               l2935 0CF5                                 l2927 0CEB  
                               l2919 0CDB                                 l2871 0D67  
                               l2849 00FA                                 l2937 0D1C  
                               l2929 0CF1                                 l2769 13A5  
                               l2787 1482                                 l2867 0D61  
                               l2971 09AA                                 l2965 0990  
                               l2991 09D6                                 l2975 09BC  
                               l2985 09CD                                 l2977 09BE  
                               l2997 09EE                                 ?_log 0057  
                               l2999 09F0                                 u2045 138A  
                               _LATA 0016                                 _LATB 0017  
                               u2055 138F                                 u3015 0151  
                               _LATC 0018                                 u3025 01AB  
                               u2225 0F89                                 u3035 01E9  
                               u2405 0C65                                 u2325 0C0B  
                               u3045 0238                                 u2165 0F63  
                               u2335 0C1B                                 u3135 0084  
                               u2255 0F9C                                 u2505 0A3C  
                               _T2PR 028D                                 u2355 0C43  
                               u3075 026A                                 u2195 0F76  
                               u2620 14FB                                 u2365 0C49  
                               u3165 00E5                                 u2605 1449  
                               u3245 0D8C                                 u3405 097E  
                               u2535 0A57                                 u3095 0052  
                               u2615 145D                                 u3415 098A  
                               u3280 0C91                                 u3345 0D0A  
                               u3505 1590                                 u3425 099A  
                               _T4PR 0293                                 u1915 1747  
                               u2395 0C5F                                 u2475 0A12  
                               u3275 0DD8                                 u3195 0D4E  
                               u2715 17BF                                 u3435 09A6  
                               u2725 17D3                                 u3445 09B4  
                               u1935 1754                                 u2815 163B  
                               u3375 1362                                 u2735 17DF  
                               u3615 037B                                 u2825 1645  
                               u3385 1378                                 u2905 0AE8  
                               u3705 0411                                 u2835 164D  
                               u3395 134C                                 u2915 0AF7  
                               u3715 042C                                 u2925 0B01  
                               u1975 176E                                 u1895 172E  
                               u3495 154B                                 u2695 17B3  
                               u3655 03C8                                 u2795 1631  
                               u3675 03DF                                 u2965 146D  
                               u2885 0AB8                                 u3757 02C0  
                               u2895 0AC8                                 u3767 09E0  
                               u2985 147C                                 u3777 14AE  
                               u2995 1483                                 u3787 14BE  
                tempCalc@analogValue 005D                                 _WPUA 0F39  
                               _WPUB 0F44                                 _WPUC 0F4F  
                               _WPUE 0F65                                 _Imin 0160  
                               _Iref 00E6                                 _Iout 00B9  
                       __CFG_WRT$OFF 0000                        __CFG_FCMEN$ON 0000  
                               _Vref 00E4                                 _main 0287  
                       ___ftpack@arg 0070                         ___ftpack@exp 0073  
                      _state_counter 00E8                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 indf1 0001  
                               fsr1l 0006                                 btemp 007E  
                               log@x 0057                        __CFG_BOREN$ON 0000  
                               start 0002                        __CFG_CSWEN$ON 0000  
                      __CFG_MCLRE$ON 0000                         ___ftmul@cntr 003E  
                       ___ftmul@sign 003F                     __end_of_LCDClear 1464  
                       ___fttol@exp1 004D                                ??_log 005A  
                       ___fttol@lval 0049                         main@fastLoop 00CB  
__size_of_Init_Battery_State_Machine 004F       __size_of_OSCILLATOR_Initialize 0009  
                   __end_of_LCDWrite 143E        __end_of_OSCILLATOR_Initialize 12D1  
                    __end_of___aldiv 1800                                _ADACQ 009D  
                              _ADACT 0099                                _ADCAP 009B  
                              ?_main 0070                                _ADCLK 0098  
                              _ADPCH 009E                                _ADREF 009A  
                    __end_of___awdiv 1662                                _ADPRE 009C  
                    __end_of___ftadd 1000                        __CFG_WDTE$OFF 0000  
                              _ADRPT 010D                      __end_of___ftdiv 0B22  
                    __end_of___ftmul 0C86                      ___awdiv@divisor 0070  
                    __end_of___ftsub 13BB                      __end_of___fttol 0A79  
                              _T2CON 028E                                _LATA5 00B5  
                              _T4CON 0294                                _T2HLT 028F  
                              _T4HLT 0295                                _T2TMR 028C  
                              _T2RST 0291                      __end_of___lwmod 1490  
                              _T4TMR 0292                                _T4RST 0297  
                    ___awdiv@counter 0075                                _OSCEN 0891  
                              _TRISA 0011                                _TRISB 0012  
                              _TRISC 0013                      _TMR4_Initialize 12F7  
             ?_Battery_State_Machine 0070                                _cc_cv 00C0  
                      ___awtoft@sign 007D                                _frexp 0007  
                              _fonts 0800                                _errno 00B5  
                      ___ftpack@sign 0074                                main@j 00E1  
                       main@slowLoop 00CC                                status 0003  
                              wtemp0 007E                      __initialization 07C2  
                        log@exponent 005B                         __end_of_main 07C2  
                  readAnalog@channel 0026              __end_of_TMR2_Initialize 12F7  
                          ??_ADCRead 0073                               ??_main 0068  
                      ___fttol@sign1 0048                            ??_LCDInit 0075  
            LCDWrite@data_or_command 0072                               _ADCON0 0093  
                             _ADCON1 0094                               _ADCON2 0095  
                             _ADCON3 0096                               ?_frexp 0070  
                             _ADLTHH 010F                               _ADLTHL 010E  
                             _ADRESH 008D                               _ADRESL 008C  
                             _CCPR1H 030D                               _CCPR1L 030C  
                             _ADSTAT 0097                               _ADUTHH 0111  
                   ___awdiv@dividend 0072                               _ADUTHL 0110  
                   __end_of___awtoft 1419                               _ANSELA 0F38  
                             _ANSELB 0F43                               _ANSELC 0F4E  
                   __end_of___ftpack 177E                               _RB0PPS 0F18  
                             _RA6PPS 0F16                               _RA7PPS 0F17  
                     __CFG_WDTCCS$SC 0000                               _FVRCON 090C  
                             _OSCFRQ 0893                       __CFG_PWRTE$OFF 0000  
                             _Imode0 006E                               _Imode1 00C1  
                       _CCPTMRS0bits 021E                         _CCPTMRS1bits 021F  
                             ___ftge 0931                            ??___aldiv 0078  
                             ___wmul 137F                            ??___awdiv 0074  
                          ??___ftadd 0046                       __CFG_STVREN$ON 0000  
                     _PWM_Initialize 13DA                            ??___ftdiv 0026  
                          ??___ftmul 0036                            ??___ftsub 007E  
                          ??___fttol 0044                            ??___lwmod 0074  
                             _gotoXY 1315                               _button 006C  
            __end_of_TMR4_Initialize 1305                     ___awdiv@quotient 0077  
                             _totals 0120                ___ftmul@f3_as_product 003B  
                   __end_of_tempCalc 0F0A                         LCDWrite@data 0070  
                       LCDWriteInt@i 0037                         LCDWriteInt@j 0036  
           readAnalog@analog_channel 003A                            ?_LCDClear 0070  
                  _SYSTEM_Initialize 1490                 __size_of_LCDWriteInt 00B9  
                   __end_oflog@coeff 181B              __end_of__initialization 07FD  
                         ___ftadd@f1 0040                           ___ftadd@f2 0043  
                         ___ftge@ff1 0070                           ___ftge@ff2 0073  
                          ?_LCDWrite 0070                   ?_SYSTEM_Initialize 0070  
                       eval_poly@res 0054                           ___ftdiv@f1 0023  
                         ___ftdiv@f2 0020                           ___ftdiv@f3 002B  
                         ___awtoft@c 0078                           ___ftmul@f1 0030  
                         ___ftmul@f2 0033               __end_of_PWM_Initialize 13F9  
                         ___ftsub@f1 0050                           ___ftsub@f2 004D  
                         ___fttol@f1 0040                       __pcstackCOMMON 0070  
                       __pidataBANK1 0005                         __pidataBANK2 1305  
                ??_SYSTEM_Initialize 0050                        __end_of_frexp 0042  
                      __end_of_fonts 092F                            LCDWrite@d 0073  
                          LCDWrite@i 0074                   _PWM1_LoadDutyValue 133D  
                   ?_TMR2_Initialize 0070                           _cc_cv_mode 0D3F  
        __size_of_PWM7_LoadDutyValue 0016                       main@efficiency 00D7  
                ?_PWM1_LoadDutyValue 0070                    LCDWriteInt@F14389 00B0  
                  _calculateCurrent0 1538                    _calculateCurrent1 157D  
                            ??_frexp 0074            __end_of_SYSTEM_Initialize 14C6  
                         __pbssBANK0 006C                           __pbssBANK1 00A0  
                         __pbssBANK2 0120                   ?_calculateCurrent0 0070  
                 ?_calculateCurrent1 0070                   __size_of_eval_poly 0060  
                         ??_LCDClear 0078                       main@faultCount 00C7  
                         ??_LCDWrite 0071                 ??_PWM1_LoadDutyValue 0072  
                ??_calculateCurrent0 004E                  ??_calculateCurrent1 004E  
                    ?_PWM_Initialize 0070                           __pmaintext 0287  
                            ?___ftge 0070                              ?___wmul 0079  
                    __CFG_PPS1WAY$ON 0000           __end_of_PWM6_LoadDutyValue 1369  
                            ?_gotoXY 0075                              _ADCRead 1328  
                   ?_TMR4_Initialize 0070                            ?___awtoft 0078  
                          ?___ftpack 0070                              _ADSTPTH 0113  
                            _ADSTPTL 0112             __CFG_SCANE$not_available 0000  
                __CFG_RSTOSC$HFINT32 0000              __size_of_ADC_Initialize 001F  
            ??_Battery_State_Machine 004E                              _LCDInit 14FD  
          __end_of_calculateCurrent0 157D            __end_of_calculateCurrent1 15C2  
                            _OSCCON1 088D                              _OSCCON3 088F  
                            _OSCTUNE 0892                              _PWM6DCH 038D  
                            _PWM6DCL 038C                              _PWM7DCH 0391  
                            _PWM7DCL 0390                              _PWM6CON 038E  
                            _PWM7CON 0392                              _PPSLOCK 0E8F  
                     main@menuButton 00DA                       main@dutyCycle1 00DD  
                     main@dutyCycle6 00E2                       main@dutyCycle7 00DB  
                         _lastButton 00BE                            ?_tempCalc 005D  
                         _readAnalog 013B                              ___aldiv 177E  
                    __size_of___ftge 003B                              ___awdiv 1611  
                            ___ftadd 0F0A                           _readButton 096C  
                            ___ftdiv 0A79                      __size_of___wmul 001E  
                            ___ftmul 0BD2                              ___ftsub 139D  
                            ___fttol 09F2                   main@displayRefresh 00CD  
                            ___lwmod 1464                      __size_of_gotoXY 0013  
                         ??___awtoft 007B                           ??___ftpack 0075  
                  __end_of_eval_poly 171A                              _analogs 0140  
                            __ptext1 0E23                              __ptext2 0B22  
                            __ptext3 0007                              __ptext4 16BA  
                            __ptext5 0931                              __ptext6 139D  
                            __ptext7 0F0A                              __ptext8 096C  
                            __ptext9 013B                          ?_cc_cv_mode 0070  
              _OSCILLATOR_Initialize 12C8                            _T2CONbits 028E  
                            _current 00A0                         __size_of_log 00B0  
                     ADCRead@channel 0073                     ___aldiv@dividend 0074  
                          _T4CONbits 0294             ??_PIN_MANAGER_Initialize 0070  
                            _samples 2330           __size_of_SYSTEM_Initialize 0036  
                            clrloop0 12D2                              _voltage 00A8  
       ??_Init_Battery_State_Machine 004E                 end_of_initialization 07FD  
              LCDWriteCharacter@base 0026                              gotoXY@x 0077  
                            gotoXY@y 0075                              init_ram 12DD  
                            initloop 12DE                           ??_tempCalc 007E  
                   ___aldiv@quotient 0022                    _LCDWriteCharacter 1662  
              __CFG_WDTCPS$WDTCPS_31 0000                   ?_LCDWriteCharacter 0070  
         __size_of_calculateCurrent0 0045           __size_of_calculateCurrent1 0045  
                          _TRISAbits 0011                  ??_LCDWriteCharacter 0022  
                   __CFG_FEXTOSC$OFF 0000         PWM1_LoadDutyValue@dutyCycle1 0070  
                        _CCP1CONbits 030E                          ___ftdiv@exp 002E  
                __size_of_cc_cv_mode 00E4                    __size_of_LCDClear 0026  
         LCDWriteCharacter@character 0025                    __size_of_LCDWrite 0025  
                        ___ftmul@exp 003A                          ?_readAnalog 0026  
          __end_of_LCDWriteCharacter 16BA                          ?_readButton 0070  
                     __end_of___ftge 096C                            _VHoldMode 006D  
                     __end_of___wmul 139D                       _ADC_Initialize 13BB  
                     __end_of_gotoXY 1328               ?_OSCILLATOR_Initialize 0070  
                          _IminCount 00EA                  start_initialization 07C2  
                         eval_poly@d 0050                           eval_poly@n 0052  
                         eval_poly@x 004D                    main@faultNotReset 00C9  
    __size_of_PIN_MANAGER_Initialize 0037                          __end_of_log 0BD2  
                      ??_LCDWriteInt 002D                           frexp@value 0070  
                   ??_PWM_Initialize 0070                     __CFG_LPBOREN$OFF 0000  
                           ??___ftge 0076                    tempCalc@steinhart 0065  
                           ??___wmul 007D               __end_of_ADC_Initialize 13DA  
                      _tempCalc$1278 0062                          __pdataBANK1 00ED  
                        __pdataBANK2 0150           __end_of_PWM7_LoadDutyValue 137F  
                           ??_gotoXY 0076                             ?_ADCRead 0070  
       PWM7_LoadDutyValue@dutyCycle7 0070                    __size_of___awtoft 0020  
                           ?_LCDInit 0070                    __size_of___ftpack 0064  
                        __pbssBIGRAM 2330       __size_of_Battery_State_Machine 00F9  
      __end_of_Battery_State_Machine 013B                            ___latbits 0002  
                      __pcstackBANK0 0020                        __pcstackBANK1 00C2  
                 _PWM6_LoadDutyValue 1353             __size_of_TMR2_Initialize 000E  
                      _battery_state 00EC   __end_of_Init_Battery_State_Machine 1611  
         _Init_Battery_State_Machine 15C2                  __size_of_readAnalog 014C  
                __size_of_readButton 0086                  ?_PWM6_LoadDutyValue 0070  
                __end_of_LCDWriteInt 0D3F                          _batteryTemp 00ED  
                          __pnvBANK1 00E4                            __pnvBANK2 0160  
        __size_of_PWM1_LoadDutyValue 0016                            _main$1280 00C2  
                          _main$1281 00D3                            _main$1282 00D5  
                          _main$1279 00CE               _PIN_MANAGER_Initialize 14C6  
         __size_of_LCDWriteCharacter 0058                             ?___aldiv 0070  
                  __size_of_tempCalc 00E7                             ?___awdiv 0070  
                           ?___ftadd 0040                             ?___ftdiv 0020  
                           ?___ftmul 0030                             ?___ftsub 004D  
                           ?___fttol 0040                     LCDWriteInt@value 0028  
                           ?___lwmod 0070                      ?_ADC_Initialize 0070  
               ??_PWM6_LoadDutyValue 0072                         ??_cc_cv_mode 004E  
                          _eval_poly 16BA             __size_of_TMR4_Initialize 000E  
                     __size_of_frexp 003B                             _T2CLKCON 0290  
                           _T4CLKCON 0296                             _LCDClear 143E  
                    ___aldiv@divisor 0070                      ___aldiv@counter 0020  
                     ___wmul@product 0020                             _LATAbits 0016  
                           _LCDWrite 1419                            clear_ram0 12D1  
                           _PIE0bits 0716                   __end_of_cc_cv_mode 0E23  
                           _PIR4bits 0710                            main@MPPT0 00DF  
                          main@MPPT1 00C5                     __size_of_ADCRead 0015  
                         _ADCON0bits 0093                    ___wmul@multiplier 0079  
                         ?_eval_poly 004D                     __size_of_LCDInit 003B  
                        _LCDWriteInt 0C86                    ??_TMR2_Initialize 0070  
                    readAnalog@value 003C                            frexp@eptr 0073  
                       ??_readAnalog 0028                         ??_readButton 0074  
            ??_OSCILLATOR_Initialize 0070                 LCDWriteInt@numPlaces 002B  
                   __size_of___aldiv 0082                     __size_of___awdiv 0051  
                   __size_of___ftadd 00F6                     __size_of___ftdiv 00A9  
                   __size_of___ftmul 00B4                     __size_of___ftsub 001E  
                   __size_of___fttol 0087                     __size_of___lwmod 002C  
                        _readButtons 00B7                             ___awtoft 13F9  
                           ___ftpack 171A                             _channels 0150  
                           __ptext10 177E                             __ptext11 1328  
                           __ptext20 14C6                             __ptext12 0D3F  
                           __ptext21 12C8                             __ptext13 157D  
                           __ptext30 0C86                             __ptext22 14FD  
                           __ptext14 1538                             __ptext31 1464  
                           __ptext23 143E                             __ptext15 0A79  
                           __ptext40 171A                             __ptext32 1611  
                           __ptext24 1315                             __ptext16 1490  
                           __ptext33 1662                             __ptext25 15C2  
                           __ptext17 12F7                             __ptext34 137F  
                           __ptext26 13BB                             __ptext18 12E9  
                           __ptext35 1419                             __ptext27 1369  
                           __ptext19 13DA                             __ptext36 0042  
                           __ptext28 1353                             __ptext37 09F2  
                           __ptext29 133D                             __ptext38 0BD2  
                           __ptext39 13F9                      LCDWriteInt@sign 002C  
                 __end_of_readAnalog 0287                            tempCalc@R 005F  
                 __end_of_readButton 09F2                    ??_TMR4_Initialize 0070  
                      __size_of_main 053B                 __CFG_WDTCWS$WDTCWS_7 0000  
                           _tempCalc 0E23          PIN_MANAGER_Initialize@state 0070  
                           log@coeff 1800                          ??_eval_poly 007E  
                        _sampleIndex 00BB                   _PWM7_LoadDutyValue 1369  
        ?_Init_Battery_State_Machine 0070                     ___lwmod@dividend 0072  
                     LCDWriteInt@str 0031              ?_PIN_MANAGER_Initialize 0070  
                ?_PWM7_LoadDutyValue 0070                    __CFG_CLKOUTEN$OFF 0000  
                        _PPSLOCKbits 0E8F                     ??_ADC_Initialize 0070  
       PWM6_LoadDutyValue@dutyCycle6 0070                        __pstringtext1 0800  
                      __pstringtext2 1800                 ??_PWM7_LoadDutyValue 0072  
                    ___lwmod@divisor 0070                      ___lwmod@counter 0075  
                       ___aldiv@sign 0021                _Battery_State_Machine 0042  
     __end_of_PIN_MANAGER_Initialize 14FD           __end_of_PWM1_LoadDutyValue 1353  
                      main@IOutTotal 00D1  
