//#include    <htc.h>
#include <xc.h>
#include <pic16f726.h>
//__CONFIG (FOSC_INTOSCIO & WDTE_OFF & PWRTE_OFF & MCLRE_ON & CP_OFF & BOREN_OFF & PLLEN_ON);
//__CONFIG(WRTEN_OFF);


#pragma config FOSC = INTOSCIO //This is the reason it would not work.
#pragma config WDTE = OFF
#define _XTAL_FREQ 16000000	//16mhz default after reset




void Init() {

	//di();	//disable all interrupts

	//Initialization
	TRISA = 0x00;	//not used inputs 0 = output
	ANSELA = 0x00;	//all digital not analog
	PORTA = 0xff;
        TRISA4 = 1;

	TRISB = 0x00;	//0 = output
	ANSELB = 0x00;	//digital not analog
	PORTB = 0xff;

	TRISC = 0xC0;	//0 = output
 //       TRISC1 = 1;     //Analog input 5
//	ANSELC = 0x02;	//digital not analog
	PORTC = 0xff;

        INTCON = 0;
        T0CS = 1;
        T0XCS = 0;
        PSA = 1;
        PS2 = 1;
        PS1 = 0;
        PS0 = 1;
        ADCON1 = 0x70;     // conversion speed for ADC





}





main(void) {
    Init();
    int x,v,SEC_COUNT,MIN_COUNT,HOUR_COUNT,DEBOUNCE;
    long int CORRECTION_COUNTER;
    static bit T0_PULSE, INCREMENT;
    x = 0;
    v = 0;
    SEC_COUNT = 0;
    MIN_COUNT = 0;
    HOUR_COUNT = 0;
    DEBOUNCE = 0;
    CORRECTION_COUNTER = 0;
    while(1){
 //       RC1 = 0;

        if (T0IF == 1){
            T0IF = 0;
            x++;
            T0_PULSE = 1;
        }

        if (x == 0x0080 && v == 0){
            x = 0;
            v = 1;
        }
        if (x == 0x0080 && v == 1){
            x = 0;
        }
/*        if (v == 1 && RB4 == 1){
            RB4 = 0;
            v = 0;
        }
        if (v == 1 && RB4 == 0){
            RB4 = 1;
            v = 0;
        }
*/        if (v == 1){
            SEC_COUNT++;
            CORRECTION_COUNTER++;
            if (CORRECTION_COUNTER >= 172800){
                if (SEC_COUNT > 0){
                    SEC_COUNT--;
                    CORRECTION_COUNTER = 0;
                }
            }
            v = 0;
            if (SEC_COUNT == 60){
                SEC_COUNT = 0;
                INCREMENT = 1;
            }
            RB4 = !(SEC_COUNT & 0x01);
            RB3 = !((SEC_COUNT & 0x02) >> 1);
            RB2 = !((SEC_COUNT & 0x04) >> 2);
            RB1 = !((SEC_COUNT & 0x08) >> 3);
            RB0 = !((SEC_COUNT & 0x10) >> 4);
            RA7 = !((SEC_COUNT & 0x20) >> 5);

        }
        if (INCREMENT == 1){
            INCREMENT = 0;
            MIN_COUNT++;
            if (MIN_COUNT == 60){
                INCREMENT = 1;
                MIN_COUNT = 0;
            }
            RA6 = !(MIN_COUNT & 0x01);
            RA5 = !((MIN_COUNT & 0x02) >> 1);
            RA3 = !((MIN_COUNT & 0x04) >> 2);
            RA2 = !((MIN_COUNT & 0x08) >> 3);
            RA1 = !((MIN_COUNT & 0x10) >> 4);
            RA0 = !((MIN_COUNT & 0x20) >> 5);
        }
        if (INCREMENT == 1){
            INCREMENT = 0;
            HOUR_COUNT++;
            if (HOUR_COUNT == 24){
                HOUR_COUNT = 0;
            }
            RC4 = !(HOUR_COUNT & 0x01);
            RC3 = !((HOUR_COUNT & 0x02) >> 1);
            RC2 = !((HOUR_COUNT & 0x04) >> 2);
            RC1 = !((HOUR_COUNT & 0x08) >> 3);
            RC0 = !((HOUR_COUNT & 0x10) >> 4);
        }
        if (RC6 == 1 && DEBOUNCE ==0){
            if (DEBOUNCE == 0){
                MIN_COUNT++;
                SEC_COUNT = 0;
                RB4 = !(SEC_COUNT & 0x01);
                RA6 = !(MIN_COUNT & 0x01);
                RA5 = !((MIN_COUNT & 0x02) >> 1);
                RA3 = !((MIN_COUNT & 0x04) >> 2);
                RA2 = !((MIN_COUNT & 0x08) >> 3);
                RA1 = !((MIN_COUNT & 0x10) >> 4);
                RA0 = !((MIN_COUNT & 0x20) >> 5);
                DEBOUNCE = 1;
            }
        }
        if (RC7 == 1 && DEBOUNCE ==0){
            if (DEBOUNCE == 0){
            HOUR_COUNT++;
            RC4 = !(HOUR_COUNT & 0x01);
            RC3 = !((HOUR_COUNT & 0x02) >> 1);
            RC2 = !((HOUR_COUNT & 0x04) >> 2);
            RC1 = !((HOUR_COUNT & 0x08) >> 3);
            RC0 = !((HOUR_COUNT & 0x10) >> 4);
            DEBOUNCE = 1;
            }
        }
        if (T0_PULSE == 1 && DEBOUNCE > 0){
            DEBOUNCE++;
            T0_PULSE = 0;
            }
        if (DEBOUNCE >= 30){
            DEBOUNCE =0;
        }
 //         _delay(512);
  //      RB5 = 0;
  //      _delay(1);

     //   ADCON0 = 0x14; //Stop Analog conversion
//        if (x >= 100){
//            RC5 = 0;
//        }
//        if (x <= 100){
//            RC5 = 1;
//        }
    }

}



