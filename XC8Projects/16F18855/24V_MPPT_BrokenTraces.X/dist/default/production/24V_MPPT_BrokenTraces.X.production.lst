

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Fri Sep 14 13:09:04 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    64                           	dabs	1,0x620,48
    65                           	dabs	1,0x5A0,80
    66                           	dabs	1,0x520,80
    67                           	dabs	1,0x4A0,80
    68                           	dabs	1,0x420,80
    69                           	dabs	1,0x3D0,32
    70                           	dabs	1,0x2260,0,_Isamples
    71                           	dabs	1,0x7E,2
    72  0000                     
    73                           ; Version 1.44
    74                           ; Generated 14/09/2017 GMT
    75                           ; 
    76                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    77                           ; All rights reserved.
    78                           ; 
    79                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    80                           ; 
    81                           ; Redistribution and use in source and binary forms, with or without modification, are
    82                           ; permitted provided that the following conditions are met:
    83                           ; 
    84                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    85                           ;        conditions and the following disclaimer.
    86                           ; 
    87                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    88                           ;        of conditions and the following disclaimer in the documentation and/or other
    89                           ;        materials provided with the distribution.
    90                           ; 
    91                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    92                           ;        software without specific prior written permission.
    93                           ; 
    94                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    95                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    96                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    97                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    98                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    99                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   100                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   101                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   102                           ; 
   103                           ; 
   104                           ; Code-generator required, PIC16F18855 Definitions
   105                           ; 
   106                           ; SFR Addresses
   107  0000                     	;# 
   108  0001                     	;# 
   109  0002                     	;# 
   110  0003                     	;# 
   111  0004                     	;# 
   112  0005                     	;# 
   113  0006                     	;# 
   114  0007                     	;# 
   115  0008                     	;# 
   116  0009                     	;# 
   117  000A                     	;# 
   118  000B                     	;# 
   119  000C                     	;# 
   120  000D                     	;# 
   121  000E                     	;# 
   122  0010                     	;# 
   123  0011                     	;# 
   124  0012                     	;# 
   125  0013                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  001C                     	;# 
   130  001C                     	;# 
   131  001D                     	;# 
   132  001D                     	;# 
   133  001E                     	;# 
   134  001F                     	;# 
   135  008C                     	;# 
   136  008C                     	;# 
   137  008D                     	;# 
   138  008E                     	;# 
   139  008E                     	;# 
   140  008F                     	;# 
   141  0090                     	;# 
   142  0090                     	;# 
   143  0091                     	;# 
   144  0093                     	;# 
   145  0094                     	;# 
   146  0095                     	;# 
   147  0096                     	;# 
   148  0097                     	;# 
   149  0098                     	;# 
   150  0099                     	;# 
   151  009A                     	;# 
   152  009B                     	;# 
   153  009C                     	;# 
   154  009D                     	;# 
   155  009E                     	;# 
   156  010C                     	;# 
   157  010D                     	;# 
   158  010E                     	;# 
   159  010E                     	;# 
   160  010F                     	;# 
   161  0110                     	;# 
   162  0110                     	;# 
   163  0111                     	;# 
   164  0112                     	;# 
   165  0112                     	;# 
   166  0113                     	;# 
   167  0114                     	;# 
   168  0114                     	;# 
   169  0115                     	;# 
   170  0116                     	;# 
   171  0116                     	;# 
   172  0117                     	;# 
   173  0119                     	;# 
   174  0119                     	;# 
   175  0119                     	;# 
   176  011A                     	;# 
   177  011A                     	;# 
   178  011A                     	;# 
   179  011B                     	;# 
   180  011B                     	;# 
   181  011B                     	;# 
   182  011B                     	;# 
   183  011B                     	;# 
   184  011C                     	;# 
   185  011C                     	;# 
   186  011C                     	;# 
   187  011D                     	;# 
   188  011D                     	;# 
   189  011D                     	;# 
   190  011E                     	;# 
   191  011E                     	;# 
   192  011E                     	;# 
   193  011F                     	;# 
   194  011F                     	;# 
   195  011F                     	;# 
   196  011F                     	;# 
   197  011F                     	;# 
   198  018C                     	;# 
   199  018D                     	;# 
   200  018E                     	;# 
   201  018F                     	;# 
   202  0190                     	;# 
   203  0191                     	;# 
   204  0192                     	;# 
   205  0196                     	;# 
   206  0197                     	;# 
   207  0198                     	;# 
   208  0199                     	;# 
   209  019A                     	;# 
   210  019B                     	;# 
   211  019C                     	;# 
   212  020C                     	;# 
   213  020C                     	;# 
   214  020D                     	;# 
   215  020E                     	;# 
   216  020F                     	;# 
   217  020F                     	;# 
   218  0210                     	;# 
   219  0210                     	;# 
   220  0211                     	;# 
   221  0211                     	;# 
   222  0212                     	;# 
   223  0212                     	;# 
   224  0213                     	;# 
   225  0214                     	;# 
   226  0215                     	;# 
   227  0215                     	;# 
   228  0216                     	;# 
   229  0216                     	;# 
   230  0217                     	;# 
   231  0217                     	;# 
   232  0218                     	;# 
   233  0218                     	;# 
   234  0219                     	;# 
   235  021A                     	;# 
   236  021B                     	;# 
   237  021B                     	;# 
   238  021C                     	;# 
   239  021C                     	;# 
   240  021D                     	;# 
   241  021D                     	;# 
   242  021E                     	;# 
   243  021F                     	;# 
   244  028C                     	;# 
   245  028C                     	;# 
   246  028D                     	;# 
   247  028D                     	;# 
   248  028E                     	;# 
   249  028F                     	;# 
   250  0290                     	;# 
   251  0290                     	;# 
   252  0291                     	;# 
   253  0292                     	;# 
   254  0292                     	;# 
   255  0293                     	;# 
   256  0293                     	;# 
   257  0294                     	;# 
   258  0295                     	;# 
   259  0296                     	;# 
   260  0296                     	;# 
   261  0297                     	;# 
   262  0298                     	;# 
   263  0298                     	;# 
   264  0299                     	;# 
   265  0299                     	;# 
   266  029A                     	;# 
   267  029B                     	;# 
   268  029C                     	;# 
   269  029C                     	;# 
   270  029D                     	;# 
   271  030C                     	;# 
   272  030C                     	;# 
   273  030D                     	;# 
   274  030E                     	;# 
   275  030F                     	;# 
   276  0310                     	;# 
   277  0310                     	;# 
   278  0311                     	;# 
   279  0312                     	;# 
   280  0313                     	;# 
   281  0314                     	;# 
   282  0314                     	;# 
   283  0315                     	;# 
   284  0316                     	;# 
   285  0317                     	;# 
   286  0318                     	;# 
   287  0318                     	;# 
   288  0319                     	;# 
   289  031A                     	;# 
   290  031B                     	;# 
   291  031C                     	;# 
   292  031C                     	;# 
   293  031D                     	;# 
   294  031E                     	;# 
   295  031F                     	;# 
   296  038C                     	;# 
   297  038D                     	;# 
   298  038E                     	;# 
   299  0390                     	;# 
   300  0391                     	;# 
   301  0392                     	;# 
   302  040C                     	;# 
   303  040D                     	;# 
   304  040E                     	;# 
   305  040F                     	;# 
   306  0410                     	;# 
   307  0411                     	;# 
   308  0416                     	;# 
   309  0416                     	;# 
   310  0417                     	;# 
   311  0418                     	;# 
   312  0418                     	;# 
   313  0419                     	;# 
   314  041A                     	;# 
   315  041A                     	;# 
   316  041B                     	;# 
   317  041C                     	;# 
   318  041C                     	;# 
   319  041D                     	;# 
   320  041E                     	;# 
   321  041F                     	;# 
   322  048C                     	;# 
   323  048C                     	;# 
   324  048D                     	;# 
   325  048E                     	;# 
   326  048F                     	;# 
   327  048F                     	;# 
   328  0490                     	;# 
   329  0491                     	;# 
   330  0492                     	;# 
   331  0492                     	;# 
   332  0493                     	;# 
   333  0494                     	;# 
   334  0495                     	;# 
   335  0495                     	;# 
   336  0496                     	;# 
   337  0497                     	;# 
   338  0498                     	;# 
   339  0499                     	;# 
   340  049A                     	;# 
   341  049B                     	;# 
   342  049C                     	;# 
   343  049D                     	;# 
   344  050C                     	;# 
   345  050C                     	;# 
   346  050D                     	;# 
   347  050E                     	;# 
   348  050F                     	;# 
   349  050F                     	;# 
   350  0510                     	;# 
   351  0511                     	;# 
   352  0512                     	;# 
   353  0512                     	;# 
   354  0513                     	;# 
   355  0514                     	;# 
   356  0515                     	;# 
   357  0515                     	;# 
   358  0516                     	;# 
   359  0517                     	;# 
   360  0518                     	;# 
   361  0519                     	;# 
   362  051A                     	;# 
   363  051B                     	;# 
   364  051C                     	;# 
   365  051D                     	;# 
   366  058C                     	;# 
   367  058C                     	;# 
   368  058D                     	;# 
   369  058E                     	;# 
   370  058F                     	;# 
   371  058F                     	;# 
   372  0590                     	;# 
   373  0591                     	;# 
   374  0592                     	;# 
   375  0593                     	;# 
   376  060C                     	;# 
   377  060D                     	;# 
   378  060E                     	;# 
   379  060F                     	;# 
   380  0610                     	;# 
   381  0611                     	;# 
   382  0612                     	;# 
   383  0613                     	;# 
   384  0614                     	;# 
   385  0616                     	;# 
   386  0617                     	;# 
   387  0618                     	;# 
   388  0619                     	;# 
   389  061A                     	;# 
   390  061B                     	;# 
   391  061C                     	;# 
   392  061D                     	;# 
   393  061E                     	;# 
   394  068C                     	;# 
   395  068D                     	;# 
   396  068E                     	;# 
   397  068F                     	;# 
   398  0690                     	;# 
   399  0691                     	;# 
   400  0692                     	;# 
   401  0693                     	;# 
   402  0694                     	;# 
   403  070C                     	;# 
   404  070D                     	;# 
   405  070E                     	;# 
   406  070F                     	;# 
   407  0710                     	;# 
   408  0711                     	;# 
   409  0712                     	;# 
   410  0713                     	;# 
   411  0714                     	;# 
   412  0716                     	;# 
   413  0717                     	;# 
   414  0718                     	;# 
   415  0719                     	;# 
   416  071A                     	;# 
   417  071B                     	;# 
   418  071C                     	;# 
   419  071D                     	;# 
   420  071E                     	;# 
   421  0796                     	;# 
   422  0797                     	;# 
   423  0798                     	;# 
   424  0799                     	;# 
   425  079A                     	;# 
   426  079B                     	;# 
   427  080C                     	;# 
   428  080D                     	;# 
   429  080E                     	;# 
   430  080F                     	;# 
   431  0810                     	;# 
   432  0811                     	;# 
   433  0812                     	;# 
   434  0813                     	;# 
   435  0814                     	;# 
   436  081A                     	;# 
   437  081B                     	;# 
   438  081C                     	;# 
   439  081D                     	;# 
   440  081E                     	;# 
   441  081F                     	;# 
   442  088C                     	;# 
   443  088D                     	;# 
   444  088E                     	;# 
   445  088F                     	;# 
   446  0890                     	;# 
   447  0891                     	;# 
   448  0892                     	;# 
   449  0893                     	;# 
   450  0895                     	;# 
   451  0896                     	;# 
   452  0897                     	;# 
   453  0898                     	;# 
   454  0899                     	;# 
   455  089A                     	;# 
   456  089B                     	;# 
   457  090C                     	;# 
   458  090E                     	;# 
   459  090F                     	;# 
   460  091F                     	;# 
   461  091F                     	;# 
   462  098F                     	;# 
   463  098F                     	;# 
   464  0990                     	;# 
   465  0991                     	;# 
   466  0992                     	;# 
   467  0993                     	;# 
   468  0994                     	;# 
   469  0995                     	;# 
   470  0996                     	;# 
   471  0997                     	;# 
   472  0E0F                     	;# 
   473  0E10                     	;# 
   474  0E11                     	;# 
   475  0E12                     	;# 
   476  0E13                     	;# 
   477  0E14                     	;# 
   478  0E15                     	;# 
   479  0E16                     	;# 
   480  0E17                     	;# 
   481  0E18                     	;# 
   482  0E19                     	;# 
   483  0E1A                     	;# 
   484  0E1B                     	;# 
   485  0E1C                     	;# 
   486  0E1D                     	;# 
   487  0E1E                     	;# 
   488  0E1F                     	;# 
   489  0E20                     	;# 
   490  0E21                     	;# 
   491  0E22                     	;# 
   492  0E23                     	;# 
   493  0E24                     	;# 
   494  0E25                     	;# 
   495  0E26                     	;# 
   496  0E27                     	;# 
   497  0E28                     	;# 
   498  0E29                     	;# 
   499  0E2A                     	;# 
   500  0E2B                     	;# 
   501  0E2C                     	;# 
   502  0E2D                     	;# 
   503  0E2E                     	;# 
   504  0E2F                     	;# 
   505  0E30                     	;# 
   506  0E31                     	;# 
   507  0E32                     	;# 
   508  0E33                     	;# 
   509  0E34                     	;# 
   510  0E35                     	;# 
   511  0E36                     	;# 
   512  0E37                     	;# 
   513  0E8F                     	;# 
   514  0E90                     	;# 
   515  0E91                     	;# 
   516  0E92                     	;# 
   517  0E93                     	;# 
   518  0E94                     	;# 
   519  0E95                     	;# 
   520  0E96                     	;# 
   521  0E97                     	;# 
   522  0E9C                     	;# 
   523  0E9D                     	;# 
   524  0E9E                     	;# 
   525  0EA1                     	;# 
   526  0EA2                     	;# 
   527  0EA3                     	;# 
   528  0EA4                     	;# 
   529  0EA5                     	;# 
   530  0EA9                     	;# 
   531  0EAA                     	;# 
   532  0EAB                     	;# 
   533  0EAC                     	;# 
   534  0EB1                     	;# 
   535  0EB2                     	;# 
   536  0EB3                     	;# 
   537  0EB8                     	;# 
   538  0EB9                     	;# 
   539  0EBA                     	;# 
   540  0EBB                     	;# 
   541  0EBC                     	;# 
   542  0EBD                     	;# 
   543  0EBE                     	;# 
   544  0EC3                     	;# 
   545  0EC5                     	;# 
   546  0EC6                     	;# 
   547  0EC7                     	;# 
   548  0EC8                     	;# 
   549  0EC9                     	;# 
   550  0ECA                     	;# 
   551  0ECB                     	;# 
   552  0ECC                     	;# 
   553  0F10                     	;# 
   554  0F11                     	;# 
   555  0F12                     	;# 
   556  0F13                     	;# 
   557  0F14                     	;# 
   558  0F15                     	;# 
   559  0F16                     	;# 
   560  0F17                     	;# 
   561  0F18                     	;# 
   562  0F19                     	;# 
   563  0F1A                     	;# 
   564  0F1B                     	;# 
   565  0F1C                     	;# 
   566  0F1D                     	;# 
   567  0F1E                     	;# 
   568  0F1F                     	;# 
   569  0F20                     	;# 
   570  0F21                     	;# 
   571  0F22                     	;# 
   572  0F23                     	;# 
   573  0F24                     	;# 
   574  0F25                     	;# 
   575  0F26                     	;# 
   576  0F27                     	;# 
   577  0F38                     	;# 
   578  0F39                     	;# 
   579  0F3A                     	;# 
   580  0F3B                     	;# 
   581  0F3C                     	;# 
   582  0F3D                     	;# 
   583  0F3E                     	;# 
   584  0F3F                     	;# 
   585  0F40                     	;# 
   586  0F41                     	;# 
   587  0F43                     	;# 
   588  0F44                     	;# 
   589  0F45                     	;# 
   590  0F46                     	;# 
   591  0F47                     	;# 
   592  0F48                     	;# 
   593  0F49                     	;# 
   594  0F4A                     	;# 
   595  0F4B                     	;# 
   596  0F4C                     	;# 
   597  0F4E                     	;# 
   598  0F4F                     	;# 
   599  0F50                     	;# 
   600  0F51                     	;# 
   601  0F52                     	;# 
   602  0F53                     	;# 
   603  0F54                     	;# 
   604  0F55                     	;# 
   605  0F56                     	;# 
   606  0F57                     	;# 
   607  0F65                     	;# 
   608  0F68                     	;# 
   609  0F69                     	;# 
   610  0F6A                     	;# 
   611  0F6B                     	;# 
   612  0FE4                     	;# 
   613  0FE5                     	;# 
   614  0FE6                     	;# 
   615  0FE7                     	;# 
   616  0FE8                     	;# 
   617  0FE9                     	;# 
   618  0FEA                     	;# 
   619  0FEB                     	;# 
   620  0FED                     	;# 
   621  0FEE                     	;# 
   622  0FEF                     	;# 
   623  0000                     	;# 
   624  0001                     	;# 
   625  0002                     	;# 
   626  0003                     	;# 
   627  0004                     	;# 
   628  0005                     	;# 
   629  0006                     	;# 
   630  0007                     	;# 
   631  0008                     	;# 
   632  0009                     	;# 
   633  000A                     	;# 
   634  000B                     	;# 
   635  000C                     	;# 
   636  000D                     	;# 
   637  000E                     	;# 
   638  0010                     	;# 
   639  0011                     	;# 
   640  0012                     	;# 
   641  0013                     	;# 
   642  0016                     	;# 
   643  0017                     	;# 
   644  0018                     	;# 
   645  001C                     	;# 
   646  001C                     	;# 
   647  001D                     	;# 
   648  001D                     	;# 
   649  001E                     	;# 
   650  001F                     	;# 
   651  008C                     	;# 
   652  008C                     	;# 
   653  008D                     	;# 
   654  008E                     	;# 
   655  008E                     	;# 
   656  008F                     	;# 
   657  0090                     	;# 
   658  0090                     	;# 
   659  0091                     	;# 
   660  0093                     	;# 
   661  0094                     	;# 
   662  0095                     	;# 
   663  0096                     	;# 
   664  0097                     	;# 
   665  0098                     	;# 
   666  0099                     	;# 
   667  009A                     	;# 
   668  009B                     	;# 
   669  009C                     	;# 
   670  009D                     	;# 
   671  009E                     	;# 
   672  010C                     	;# 
   673  010D                     	;# 
   674  010E                     	;# 
   675  010E                     	;# 
   676  010F                     	;# 
   677  0110                     	;# 
   678  0110                     	;# 
   679  0111                     	;# 
   680  0112                     	;# 
   681  0112                     	;# 
   682  0113                     	;# 
   683  0114                     	;# 
   684  0114                     	;# 
   685  0115                     	;# 
   686  0116                     	;# 
   687  0116                     	;# 
   688  0117                     	;# 
   689  0119                     	;# 
   690  0119                     	;# 
   691  0119                     	;# 
   692  011A                     	;# 
   693  011A                     	;# 
   694  011A                     	;# 
   695  011B                     	;# 
   696  011B                     	;# 
   697  011B                     	;# 
   698  011B                     	;# 
   699  011B                     	;# 
   700  011C                     	;# 
   701  011C                     	;# 
   702  011C                     	;# 
   703  011D                     	;# 
   704  011D                     	;# 
   705  011D                     	;# 
   706  011E                     	;# 
   707  011E                     	;# 
   708  011E                     	;# 
   709  011F                     	;# 
   710  011F                     	;# 
   711  011F                     	;# 
   712  011F                     	;# 
   713  011F                     	;# 
   714  018C                     	;# 
   715  018D                     	;# 
   716  018E                     	;# 
   717  018F                     	;# 
   718  0190                     	;# 
   719  0191                     	;# 
   720  0192                     	;# 
   721  0196                     	;# 
   722  0197                     	;# 
   723  0198                     	;# 
   724  0199                     	;# 
   725  019A                     	;# 
   726  019B                     	;# 
   727  019C                     	;# 
   728  020C                     	;# 
   729  020C                     	;# 
   730  020D                     	;# 
   731  020E                     	;# 
   732  020F                     	;# 
   733  020F                     	;# 
   734  0210                     	;# 
   735  0210                     	;# 
   736  0211                     	;# 
   737  0211                     	;# 
   738  0212                     	;# 
   739  0212                     	;# 
   740  0213                     	;# 
   741  0214                     	;# 
   742  0215                     	;# 
   743  0215                     	;# 
   744  0216                     	;# 
   745  0216                     	;# 
   746  0217                     	;# 
   747  0217                     	;# 
   748  0218                     	;# 
   749  0218                     	;# 
   750  0219                     	;# 
   751  021A                     	;# 
   752  021B                     	;# 
   753  021B                     	;# 
   754  021C                     	;# 
   755  021C                     	;# 
   756  021D                     	;# 
   757  021D                     	;# 
   758  021E                     	;# 
   759  021F                     	;# 
   760  028C                     	;# 
   761  028C                     	;# 
   762  028D                     	;# 
   763  028D                     	;# 
   764  028E                     	;# 
   765  028F                     	;# 
   766  0290                     	;# 
   767  0290                     	;# 
   768  0291                     	;# 
   769  0292                     	;# 
   770  0292                     	;# 
   771  0293                     	;# 
   772  0293                     	;# 
   773  0294                     	;# 
   774  0295                     	;# 
   775  0296                     	;# 
   776  0296                     	;# 
   777  0297                     	;# 
   778  0298                     	;# 
   779  0298                     	;# 
   780  0299                     	;# 
   781  0299                     	;# 
   782  029A                     	;# 
   783  029B                     	;# 
   784  029C                     	;# 
   785  029C                     	;# 
   786  029D                     	;# 
   787  030C                     	;# 
   788  030C                     	;# 
   789  030D                     	;# 
   790  030E                     	;# 
   791  030F                     	;# 
   792  0310                     	;# 
   793  0310                     	;# 
   794  0311                     	;# 
   795  0312                     	;# 
   796  0313                     	;# 
   797  0314                     	;# 
   798  0314                     	;# 
   799  0315                     	;# 
   800  0316                     	;# 
   801  0317                     	;# 
   802  0318                     	;# 
   803  0318                     	;# 
   804  0319                     	;# 
   805  031A                     	;# 
   806  031B                     	;# 
   807  031C                     	;# 
   808  031C                     	;# 
   809  031D                     	;# 
   810  031E                     	;# 
   811  031F                     	;# 
   812  038C                     	;# 
   813  038D                     	;# 
   814  038E                     	;# 
   815  0390                     	;# 
   816  0391                     	;# 
   817  0392                     	;# 
   818  040C                     	;# 
   819  040D                     	;# 
   820  040E                     	;# 
   821  040F                     	;# 
   822  0410                     	;# 
   823  0411                     	;# 
   824  0416                     	;# 
   825  0416                     	;# 
   826  0417                     	;# 
   827  0418                     	;# 
   828  0418                     	;# 
   829  0419                     	;# 
   830  041A                     	;# 
   831  041A                     	;# 
   832  041B                     	;# 
   833  041C                     	;# 
   834  041C                     	;# 
   835  041D                     	;# 
   836  041E                     	;# 
   837  041F                     	;# 
   838  048C                     	;# 
   839  048C                     	;# 
   840  048D                     	;# 
   841  048E                     	;# 
   842  048F                     	;# 
   843  048F                     	;# 
   844  0490                     	;# 
   845  0491                     	;# 
   846  0492                     	;# 
   847  0492                     	;# 
   848  0493                     	;# 
   849  0494                     	;# 
   850  0495                     	;# 
   851  0495                     	;# 
   852  0496                     	;# 
   853  0497                     	;# 
   854  0498                     	;# 
   855  0499                     	;# 
   856  049A                     	;# 
   857  049B                     	;# 
   858  049C                     	;# 
   859  049D                     	;# 
   860  050C                     	;# 
   861  050C                     	;# 
   862  050D                     	;# 
   863  050E                     	;# 
   864  050F                     	;# 
   865  050F                     	;# 
   866  0510                     	;# 
   867  0511                     	;# 
   868  0512                     	;# 
   869  0512                     	;# 
   870  0513                     	;# 
   871  0514                     	;# 
   872  0515                     	;# 
   873  0515                     	;# 
   874  0516                     	;# 
   875  0517                     	;# 
   876  0518                     	;# 
   877  0519                     	;# 
   878  051A                     	;# 
   879  051B                     	;# 
   880  051C                     	;# 
   881  051D                     	;# 
   882  058C                     	;# 
   883  058C                     	;# 
   884  058D                     	;# 
   885  058E                     	;# 
   886  058F                     	;# 
   887  058F                     	;# 
   888  0590                     	;# 
   889  0591                     	;# 
   890  0592                     	;# 
   891  0593                     	;# 
   892  060C                     	;# 
   893  060D                     	;# 
   894  060E                     	;# 
   895  060F                     	;# 
   896  0610                     	;# 
   897  0611                     	;# 
   898  0612                     	;# 
   899  0613                     	;# 
   900  0614                     	;# 
   901  0616                     	;# 
   902  0617                     	;# 
   903  0618                     	;# 
   904  0619                     	;# 
   905  061A                     	;# 
   906  061B                     	;# 
   907  061C                     	;# 
   908  061D                     	;# 
   909  061E                     	;# 
   910  068C                     	;# 
   911  068D                     	;# 
   912  068E                     	;# 
   913  068F                     	;# 
   914  0690                     	;# 
   915  0691                     	;# 
   916  0692                     	;# 
   917  0693                     	;# 
   918  0694                     	;# 
   919  070C                     	;# 
   920  070D                     	;# 
   921  070E                     	;# 
   922  070F                     	;# 
   923  0710                     	;# 
   924  0711                     	;# 
   925  0712                     	;# 
   926  0713                     	;# 
   927  0714                     	;# 
   928  0716                     	;# 
   929  0717                     	;# 
   930  0718                     	;# 
   931  0719                     	;# 
   932  071A                     	;# 
   933  071B                     	;# 
   934  071C                     	;# 
   935  071D                     	;# 
   936  071E                     	;# 
   937  0796                     	;# 
   938  0797                     	;# 
   939  0798                     	;# 
   940  0799                     	;# 
   941  079A                     	;# 
   942  079B                     	;# 
   943  080C                     	;# 
   944  080D                     	;# 
   945  080E                     	;# 
   946  080F                     	;# 
   947  0810                     	;# 
   948  0811                     	;# 
   949  0812                     	;# 
   950  0813                     	;# 
   951  0814                     	;# 
   952  081A                     	;# 
   953  081B                     	;# 
   954  081C                     	;# 
   955  081D                     	;# 
   956  081E                     	;# 
   957  081F                     	;# 
   958  088C                     	;# 
   959  088D                     	;# 
   960  088E                     	;# 
   961  088F                     	;# 
   962  0890                     	;# 
   963  0891                     	;# 
   964  0892                     	;# 
   965  0893                     	;# 
   966  0895                     	;# 
   967  0896                     	;# 
   968  0897                     	;# 
   969  0898                     	;# 
   970  0899                     	;# 
   971  089A                     	;# 
   972  089B                     	;# 
   973  090C                     	;# 
   974  090E                     	;# 
   975  090F                     	;# 
   976  091F                     	;# 
   977  091F                     	;# 
   978  098F                     	;# 
   979  098F                     	;# 
   980  0990                     	;# 
   981  0991                     	;# 
   982  0992                     	;# 
   983  0993                     	;# 
   984  0994                     	;# 
   985  0995                     	;# 
   986  0996                     	;# 
   987  0997                     	;# 
   988  0E0F                     	;# 
   989  0E10                     	;# 
   990  0E11                     	;# 
   991  0E12                     	;# 
   992  0E13                     	;# 
   993  0E14                     	;# 
   994  0E15                     	;# 
   995  0E16                     	;# 
   996  0E17                     	;# 
   997  0E18                     	;# 
   998  0E19                     	;# 
   999  0E1A                     	;# 
  1000  0E1B                     	;# 
  1001  0E1C                     	;# 
  1002  0E1D                     	;# 
  1003  0E1E                     	;# 
  1004  0E1F                     	;# 
  1005  0E20                     	;# 
  1006  0E21                     	;# 
  1007  0E22                     	;# 
  1008  0E23                     	;# 
  1009  0E24                     	;# 
  1010  0E25                     	;# 
  1011  0E26                     	;# 
  1012  0E27                     	;# 
  1013  0E28                     	;# 
  1014  0E29                     	;# 
  1015  0E2A                     	;# 
  1016  0E2B                     	;# 
  1017  0E2C                     	;# 
  1018  0E2D                     	;# 
  1019  0E2E                     	;# 
  1020  0E2F                     	;# 
  1021  0E30                     	;# 
  1022  0E31                     	;# 
  1023  0E32                     	;# 
  1024  0E33                     	;# 
  1025  0E34                     	;# 
  1026  0E35                     	;# 
  1027  0E36                     	;# 
  1028  0E37                     	;# 
  1029  0E8F                     	;# 
  1030  0E90                     	;# 
  1031  0E91                     	;# 
  1032  0E92                     	;# 
  1033  0E93                     	;# 
  1034  0E94                     	;# 
  1035  0E95                     	;# 
  1036  0E96                     	;# 
  1037  0E97                     	;# 
  1038  0E9C                     	;# 
  1039  0E9D                     	;# 
  1040  0E9E                     	;# 
  1041  0EA1                     	;# 
  1042  0EA2                     	;# 
  1043  0EA3                     	;# 
  1044  0EA4                     	;# 
  1045  0EA5                     	;# 
  1046  0EA9                     	;# 
  1047  0EAA                     	;# 
  1048  0EAB                     	;# 
  1049  0EAC                     	;# 
  1050  0EB1                     	;# 
  1051  0EB2                     	;# 
  1052  0EB3                     	;# 
  1053  0EB8                     	;# 
  1054  0EB9                     	;# 
  1055  0EBA                     	;# 
  1056  0EBB                     	;# 
  1057  0EBC                     	;# 
  1058  0EBD                     	;# 
  1059  0EBE                     	;# 
  1060  0EC3                     	;# 
  1061  0EC5                     	;# 
  1062  0EC6                     	;# 
  1063  0EC7                     	;# 
  1064  0EC8                     	;# 
  1065  0EC9                     	;# 
  1066  0ECA                     	;# 
  1067  0ECB                     	;# 
  1068  0ECC                     	;# 
  1069  0F10                     	;# 
  1070  0F11                     	;# 
  1071  0F12                     	;# 
  1072  0F13                     	;# 
  1073  0F14                     	;# 
  1074  0F15                     	;# 
  1075  0F16                     	;# 
  1076  0F17                     	;# 
  1077  0F18                     	;# 
  1078  0F19                     	;# 
  1079  0F1A                     	;# 
  1080  0F1B                     	;# 
  1081  0F1C                     	;# 
  1082  0F1D                     	;# 
  1083  0F1E                     	;# 
  1084  0F1F                     	;# 
  1085  0F20                     	;# 
  1086  0F21                     	;# 
  1087  0F22                     	;# 
  1088  0F23                     	;# 
  1089  0F24                     	;# 
  1090  0F25                     	;# 
  1091  0F26                     	;# 
  1092  0F27                     	;# 
  1093  0F38                     	;# 
  1094  0F39                     	;# 
  1095  0F3A                     	;# 
  1096  0F3B                     	;# 
  1097  0F3C                     	;# 
  1098  0F3D                     	;# 
  1099  0F3E                     	;# 
  1100  0F3F                     	;# 
  1101  0F40                     	;# 
  1102  0F41                     	;# 
  1103  0F43                     	;# 
  1104  0F44                     	;# 
  1105  0F45                     	;# 
  1106  0F46                     	;# 
  1107  0F47                     	;# 
  1108  0F48                     	;# 
  1109  0F49                     	;# 
  1110  0F4A                     	;# 
  1111  0F4B                     	;# 
  1112  0F4C                     	;# 
  1113  0F4E                     	;# 
  1114  0F4F                     	;# 
  1115  0F50                     	;# 
  1116  0F51                     	;# 
  1117  0F52                     	;# 
  1118  0F53                     	;# 
  1119  0F54                     	;# 
  1120  0F55                     	;# 
  1121  0F56                     	;# 
  1122  0F57                     	;# 
  1123  0F65                     	;# 
  1124  0F68                     	;# 
  1125  0F69                     	;# 
  1126  0F6A                     	;# 
  1127  0F6B                     	;# 
  1128  0FE4                     	;# 
  1129  0FE5                     	;# 
  1130  0FE6                     	;# 
  1131  0FE7                     	;# 
  1132  0FE8                     	;# 
  1133  0FE9                     	;# 
  1134  0FEA                     	;# 
  1135  0FEB                     	;# 
  1136  0FED                     	;# 
  1137  0FEE                     	;# 
  1138  0FEF                     	;# 
  1139  0000                     	;# 
  1140  0001                     	;# 
  1141  0002                     	;# 
  1142  0003                     	;# 
  1143  0004                     	;# 
  1144  0005                     	;# 
  1145  0006                     	;# 
  1146  0007                     	;# 
  1147  0008                     	;# 
  1148  0009                     	;# 
  1149  000A                     	;# 
  1150  000B                     	;# 
  1151  000C                     	;# 
  1152  000D                     	;# 
  1153  000E                     	;# 
  1154  0010                     	;# 
  1155  0011                     	;# 
  1156  0012                     	;# 
  1157  0013                     	;# 
  1158  0016                     	;# 
  1159  0017                     	;# 
  1160  0018                     	;# 
  1161  001C                     	;# 
  1162  001C                     	;# 
  1163  001D                     	;# 
  1164  001D                     	;# 
  1165  001E                     	;# 
  1166  001F                     	;# 
  1167  008C                     	;# 
  1168  008C                     	;# 
  1169  008D                     	;# 
  1170  008E                     	;# 
  1171  008E                     	;# 
  1172  008F                     	;# 
  1173  0090                     	;# 
  1174  0090                     	;# 
  1175  0091                     	;# 
  1176  0093                     	;# 
  1177  0094                     	;# 
  1178  0095                     	;# 
  1179  0096                     	;# 
  1180  0097                     	;# 
  1181  0098                     	;# 
  1182  0099                     	;# 
  1183  009A                     	;# 
  1184  009B                     	;# 
  1185  009C                     	;# 
  1186  009D                     	;# 
  1187  009E                     	;# 
  1188  010C                     	;# 
  1189  010D                     	;# 
  1190  010E                     	;# 
  1191  010E                     	;# 
  1192  010F                     	;# 
  1193  0110                     	;# 
  1194  0110                     	;# 
  1195  0111                     	;# 
  1196  0112                     	;# 
  1197  0112                     	;# 
  1198  0113                     	;# 
  1199  0114                     	;# 
  1200  0114                     	;# 
  1201  0115                     	;# 
  1202  0116                     	;# 
  1203  0116                     	;# 
  1204  0117                     	;# 
  1205  0119                     	;# 
  1206  0119                     	;# 
  1207  0119                     	;# 
  1208  011A                     	;# 
  1209  011A                     	;# 
  1210  011A                     	;# 
  1211  011B                     	;# 
  1212  011B                     	;# 
  1213  011B                     	;# 
  1214  011B                     	;# 
  1215  011B                     	;# 
  1216  011C                     	;# 
  1217  011C                     	;# 
  1218  011C                     	;# 
  1219  011D                     	;# 
  1220  011D                     	;# 
  1221  011D                     	;# 
  1222  011E                     	;# 
  1223  011E                     	;# 
  1224  011E                     	;# 
  1225  011F                     	;# 
  1226  011F                     	;# 
  1227  011F                     	;# 
  1228  011F                     	;# 
  1229  011F                     	;# 
  1230  018C                     	;# 
  1231  018D                     	;# 
  1232  018E                     	;# 
  1233  018F                     	;# 
  1234  0190                     	;# 
  1235  0191                     	;# 
  1236  0192                     	;# 
  1237  0196                     	;# 
  1238  0197                     	;# 
  1239  0198                     	;# 
  1240  0199                     	;# 
  1241  019A                     	;# 
  1242  019B                     	;# 
  1243  019C                     	;# 
  1244  020C                     	;# 
  1245  020C                     	;# 
  1246  020D                     	;# 
  1247  020E                     	;# 
  1248  020F                     	;# 
  1249  020F                     	;# 
  1250  0210                     	;# 
  1251  0210                     	;# 
  1252  0211                     	;# 
  1253  0211                     	;# 
  1254  0212                     	;# 
  1255  0212                     	;# 
  1256  0213                     	;# 
  1257  0214                     	;# 
  1258  0215                     	;# 
  1259  0215                     	;# 
  1260  0216                     	;# 
  1261  0216                     	;# 
  1262  0217                     	;# 
  1263  0217                     	;# 
  1264  0218                     	;# 
  1265  0218                     	;# 
  1266  0219                     	;# 
  1267  021A                     	;# 
  1268  021B                     	;# 
  1269  021B                     	;# 
  1270  021C                     	;# 
  1271  021C                     	;# 
  1272  021D                     	;# 
  1273  021D                     	;# 
  1274  021E                     	;# 
  1275  021F                     	;# 
  1276  028C                     	;# 
  1277  028C                     	;# 
  1278  028D                     	;# 
  1279  028D                     	;# 
  1280  028E                     	;# 
  1281  028F                     	;# 
  1282  0290                     	;# 
  1283  0290                     	;# 
  1284  0291                     	;# 
  1285  0292                     	;# 
  1286  0292                     	;# 
  1287  0293                     	;# 
  1288  0293                     	;# 
  1289  0294                     	;# 
  1290  0295                     	;# 
  1291  0296                     	;# 
  1292  0296                     	;# 
  1293  0297                     	;# 
  1294  0298                     	;# 
  1295  0298                     	;# 
  1296  0299                     	;# 
  1297  0299                     	;# 
  1298  029A                     	;# 
  1299  029B                     	;# 
  1300  029C                     	;# 
  1301  029C                     	;# 
  1302  029D                     	;# 
  1303  030C                     	;# 
  1304  030C                     	;# 
  1305  030D                     	;# 
  1306  030E                     	;# 
  1307  030F                     	;# 
  1308  0310                     	;# 
  1309  0310                     	;# 
  1310  0311                     	;# 
  1311  0312                     	;# 
  1312  0313                     	;# 
  1313  0314                     	;# 
  1314  0314                     	;# 
  1315  0315                     	;# 
  1316  0316                     	;# 
  1317  0317                     	;# 
  1318  0318                     	;# 
  1319  0318                     	;# 
  1320  0319                     	;# 
  1321  031A                     	;# 
  1322  031B                     	;# 
  1323  031C                     	;# 
  1324  031C                     	;# 
  1325  031D                     	;# 
  1326  031E                     	;# 
  1327  031F                     	;# 
  1328  038C                     	;# 
  1329  038D                     	;# 
  1330  038E                     	;# 
  1331  0390                     	;# 
  1332  0391                     	;# 
  1333  0392                     	;# 
  1334  040C                     	;# 
  1335  040D                     	;# 
  1336  040E                     	;# 
  1337  040F                     	;# 
  1338  0410                     	;# 
  1339  0411                     	;# 
  1340  0416                     	;# 
  1341  0416                     	;# 
  1342  0417                     	;# 
  1343  0418                     	;# 
  1344  0418                     	;# 
  1345  0419                     	;# 
  1346  041A                     	;# 
  1347  041A                     	;# 
  1348  041B                     	;# 
  1349  041C                     	;# 
  1350  041C                     	;# 
  1351  041D                     	;# 
  1352  041E                     	;# 
  1353  041F                     	;# 
  1354  048C                     	;# 
  1355  048C                     	;# 
  1356  048D                     	;# 
  1357  048E                     	;# 
  1358  048F                     	;# 
  1359  048F                     	;# 
  1360  0490                     	;# 
  1361  0491                     	;# 
  1362  0492                     	;# 
  1363  0492                     	;# 
  1364  0493                     	;# 
  1365  0494                     	;# 
  1366  0495                     	;# 
  1367  0495                     	;# 
  1368  0496                     	;# 
  1369  0497                     	;# 
  1370  0498                     	;# 
  1371  0499                     	;# 
  1372  049A                     	;# 
  1373  049B                     	;# 
  1374  049C                     	;# 
  1375  049D                     	;# 
  1376  050C                     	;# 
  1377  050C                     	;# 
  1378  050D                     	;# 
  1379  050E                     	;# 
  1380  050F                     	;# 
  1381  050F                     	;# 
  1382  0510                     	;# 
  1383  0511                     	;# 
  1384  0512                     	;# 
  1385  0512                     	;# 
  1386  0513                     	;# 
  1387  0514                     	;# 
  1388  0515                     	;# 
  1389  0515                     	;# 
  1390  0516                     	;# 
  1391  0517                     	;# 
  1392  0518                     	;# 
  1393  0519                     	;# 
  1394  051A                     	;# 
  1395  051B                     	;# 
  1396  051C                     	;# 
  1397  051D                     	;# 
  1398  058C                     	;# 
  1399  058C                     	;# 
  1400  058D                     	;# 
  1401  058E                     	;# 
  1402  058F                     	;# 
  1403  058F                     	;# 
  1404  0590                     	;# 
  1405  0591                     	;# 
  1406  0592                     	;# 
  1407  0593                     	;# 
  1408  060C                     	;# 
  1409  060D                     	;# 
  1410  060E                     	;# 
  1411  060F                     	;# 
  1412  0610                     	;# 
  1413  0611                     	;# 
  1414  0612                     	;# 
  1415  0613                     	;# 
  1416  0614                     	;# 
  1417  0616                     	;# 
  1418  0617                     	;# 
  1419  0618                     	;# 
  1420  0619                     	;# 
  1421  061A                     	;# 
  1422  061B                     	;# 
  1423  061C                     	;# 
  1424  061D                     	;# 
  1425  061E                     	;# 
  1426  068C                     	;# 
  1427  068D                     	;# 
  1428  068E                     	;# 
  1429  068F                     	;# 
  1430  0690                     	;# 
  1431  0691                     	;# 
  1432  0692                     	;# 
  1433  0693                     	;# 
  1434  0694                     	;# 
  1435  070C                     	;# 
  1436  070D                     	;# 
  1437  070E                     	;# 
  1438  070F                     	;# 
  1439  0710                     	;# 
  1440  0711                     	;# 
  1441  0712                     	;# 
  1442  0713                     	;# 
  1443  0714                     	;# 
  1444  0716                     	;# 
  1445  0717                     	;# 
  1446  0718                     	;# 
  1447  0719                     	;# 
  1448  071A                     	;# 
  1449  071B                     	;# 
  1450  071C                     	;# 
  1451  071D                     	;# 
  1452  071E                     	;# 
  1453  0796                     	;# 
  1454  0797                     	;# 
  1455  0798                     	;# 
  1456  0799                     	;# 
  1457  079A                     	;# 
  1458  079B                     	;# 
  1459  080C                     	;# 
  1460  080D                     	;# 
  1461  080E                     	;# 
  1462  080F                     	;# 
  1463  0810                     	;# 
  1464  0811                     	;# 
  1465  0812                     	;# 
  1466  0813                     	;# 
  1467  0814                     	;# 
  1468  081A                     	;# 
  1469  081B                     	;# 
  1470  081C                     	;# 
  1471  081D                     	;# 
  1472  081E                     	;# 
  1473  081F                     	;# 
  1474  088C                     	;# 
  1475  088D                     	;# 
  1476  088E                     	;# 
  1477  088F                     	;# 
  1478  0890                     	;# 
  1479  0891                     	;# 
  1480  0892                     	;# 
  1481  0893                     	;# 
  1482  0895                     	;# 
  1483  0896                     	;# 
  1484  0897                     	;# 
  1485  0898                     	;# 
  1486  0899                     	;# 
  1487  089A                     	;# 
  1488  089B                     	;# 
  1489  090C                     	;# 
  1490  090E                     	;# 
  1491  090F                     	;# 
  1492  091F                     	;# 
  1493  091F                     	;# 
  1494  098F                     	;# 
  1495  098F                     	;# 
  1496  0990                     	;# 
  1497  0991                     	;# 
  1498  0992                     	;# 
  1499  0993                     	;# 
  1500  0994                     	;# 
  1501  0995                     	;# 
  1502  0996                     	;# 
  1503  0997                     	;# 
  1504  0E0F                     	;# 
  1505  0E10                     	;# 
  1506  0E11                     	;# 
  1507  0E12                     	;# 
  1508  0E13                     	;# 
  1509  0E14                     	;# 
  1510  0E15                     	;# 
  1511  0E16                     	;# 
  1512  0E17                     	;# 
  1513  0E18                     	;# 
  1514  0E19                     	;# 
  1515  0E1A                     	;# 
  1516  0E1B                     	;# 
  1517  0E1C                     	;# 
  1518  0E1D                     	;# 
  1519  0E1E                     	;# 
  1520  0E1F                     	;# 
  1521  0E20                     	;# 
  1522  0E21                     	;# 
  1523  0E22                     	;# 
  1524  0E23                     	;# 
  1525  0E24                     	;# 
  1526  0E25                     	;# 
  1527  0E26                     	;# 
  1528  0E27                     	;# 
  1529  0E28                     	;# 
  1530  0E29                     	;# 
  1531  0E2A                     	;# 
  1532  0E2B                     	;# 
  1533  0E2C                     	;# 
  1534  0E2D                     	;# 
  1535  0E2E                     	;# 
  1536  0E2F                     	;# 
  1537  0E30                     	;# 
  1538  0E31                     	;# 
  1539  0E32                     	;# 
  1540  0E33                     	;# 
  1541  0E34                     	;# 
  1542  0E35                     	;# 
  1543  0E36                     	;# 
  1544  0E37                     	;# 
  1545  0E8F                     	;# 
  1546  0E90                     	;# 
  1547  0E91                     	;# 
  1548  0E92                     	;# 
  1549  0E93                     	;# 
  1550  0E94                     	;# 
  1551  0E95                     	;# 
  1552  0E96                     	;# 
  1553  0E97                     	;# 
  1554  0E9C                     	;# 
  1555  0E9D                     	;# 
  1556  0E9E                     	;# 
  1557  0EA1                     	;# 
  1558  0EA2                     	;# 
  1559  0EA3                     	;# 
  1560  0EA4                     	;# 
  1561  0EA5                     	;# 
  1562  0EA9                     	;# 
  1563  0EAA                     	;# 
  1564  0EAB                     	;# 
  1565  0EAC                     	;# 
  1566  0EB1                     	;# 
  1567  0EB2                     	;# 
  1568  0EB3                     	;# 
  1569  0EB8                     	;# 
  1570  0EB9                     	;# 
  1571  0EBA                     	;# 
  1572  0EBB                     	;# 
  1573  0EBC                     	;# 
  1574  0EBD                     	;# 
  1575  0EBE                     	;# 
  1576  0EC3                     	;# 
  1577  0EC5                     	;# 
  1578  0EC6                     	;# 
  1579  0EC7                     	;# 
  1580  0EC8                     	;# 
  1581  0EC9                     	;# 
  1582  0ECA                     	;# 
  1583  0ECB                     	;# 
  1584  0ECC                     	;# 
  1585  0F10                     	;# 
  1586  0F11                     	;# 
  1587  0F12                     	;# 
  1588  0F13                     	;# 
  1589  0F14                     	;# 
  1590  0F15                     	;# 
  1591  0F16                     	;# 
  1592  0F17                     	;# 
  1593  0F18                     	;# 
  1594  0F19                     	;# 
  1595  0F1A                     	;# 
  1596  0F1B                     	;# 
  1597  0F1C                     	;# 
  1598  0F1D                     	;# 
  1599  0F1E                     	;# 
  1600  0F1F                     	;# 
  1601  0F20                     	;# 
  1602  0F21                     	;# 
  1603  0F22                     	;# 
  1604  0F23                     	;# 
  1605  0F24                     	;# 
  1606  0F25                     	;# 
  1607  0F26                     	;# 
  1608  0F27                     	;# 
  1609  0F38                     	;# 
  1610  0F39                     	;# 
  1611  0F3A                     	;# 
  1612  0F3B                     	;# 
  1613  0F3C                     	;# 
  1614  0F3D                     	;# 
  1615  0F3E                     	;# 
  1616  0F3F                     	;# 
  1617  0F40                     	;# 
  1618  0F41                     	;# 
  1619  0F43                     	;# 
  1620  0F44                     	;# 
  1621  0F45                     	;# 
  1622  0F46                     	;# 
  1623  0F47                     	;# 
  1624  0F48                     	;# 
  1625  0F49                     	;# 
  1626  0F4A                     	;# 
  1627  0F4B                     	;# 
  1628  0F4C                     	;# 
  1629  0F4E                     	;# 
  1630  0F4F                     	;# 
  1631  0F50                     	;# 
  1632  0F51                     	;# 
  1633  0F52                     	;# 
  1634  0F53                     	;# 
  1635  0F54                     	;# 
  1636  0F55                     	;# 
  1637  0F56                     	;# 
  1638  0F57                     	;# 
  1639  0F65                     	;# 
  1640  0F68                     	;# 
  1641  0F69                     	;# 
  1642  0F6A                     	;# 
  1643  0F6B                     	;# 
  1644  0FE4                     	;# 
  1645  0FE5                     	;# 
  1646  0FE6                     	;# 
  1647  0FE7                     	;# 
  1648  0FE8                     	;# 
  1649  0FE9                     	;# 
  1650  0FEA                     	;# 
  1651  0FEB                     	;# 
  1652  0FED                     	;# 
  1653  0FEE                     	;# 
  1654  0FEF                     	;# 
  1655  0000                     	;# 
  1656  0001                     	;# 
  1657  0002                     	;# 
  1658  0003                     	;# 
  1659  0004                     	;# 
  1660  0005                     	;# 
  1661  0006                     	;# 
  1662  0007                     	;# 
  1663  0008                     	;# 
  1664  0009                     	;# 
  1665  000A                     	;# 
  1666  000B                     	;# 
  1667  000C                     	;# 
  1668  000D                     	;# 
  1669  000E                     	;# 
  1670  0010                     	;# 
  1671  0011                     	;# 
  1672  0012                     	;# 
  1673  0013                     	;# 
  1674  0016                     	;# 
  1675  0017                     	;# 
  1676  0018                     	;# 
  1677  001C                     	;# 
  1678  001C                     	;# 
  1679  001D                     	;# 
  1680  001D                     	;# 
  1681  001E                     	;# 
  1682  001F                     	;# 
  1683  008C                     	;# 
  1684  008C                     	;# 
  1685  008D                     	;# 
  1686  008E                     	;# 
  1687  008E                     	;# 
  1688  008F                     	;# 
  1689  0090                     	;# 
  1690  0090                     	;# 
  1691  0091                     	;# 
  1692  0093                     	;# 
  1693  0094                     	;# 
  1694  0095                     	;# 
  1695  0096                     	;# 
  1696  0097                     	;# 
  1697  0098                     	;# 
  1698  0099                     	;# 
  1699  009A                     	;# 
  1700  009B                     	;# 
  1701  009C                     	;# 
  1702  009D                     	;# 
  1703  009E                     	;# 
  1704  010C                     	;# 
  1705  010D                     	;# 
  1706  010E                     	;# 
  1707  010E                     	;# 
  1708  010F                     	;# 
  1709  0110                     	;# 
  1710  0110                     	;# 
  1711  0111                     	;# 
  1712  0112                     	;# 
  1713  0112                     	;# 
  1714  0113                     	;# 
  1715  0114                     	;# 
  1716  0114                     	;# 
  1717  0115                     	;# 
  1718  0116                     	;# 
  1719  0116                     	;# 
  1720  0117                     	;# 
  1721  0119                     	;# 
  1722  0119                     	;# 
  1723  0119                     	;# 
  1724  011A                     	;# 
  1725  011A                     	;# 
  1726  011A                     	;# 
  1727  011B                     	;# 
  1728  011B                     	;# 
  1729  011B                     	;# 
  1730  011B                     	;# 
  1731  011B                     	;# 
  1732  011C                     	;# 
  1733  011C                     	;# 
  1734  011C                     	;# 
  1735  011D                     	;# 
  1736  011D                     	;# 
  1737  011D                     	;# 
  1738  011E                     	;# 
  1739  011E                     	;# 
  1740  011E                     	;# 
  1741  011F                     	;# 
  1742  011F                     	;# 
  1743  011F                     	;# 
  1744  011F                     	;# 
  1745  011F                     	;# 
  1746  018C                     	;# 
  1747  018D                     	;# 
  1748  018E                     	;# 
  1749  018F                     	;# 
  1750  0190                     	;# 
  1751  0191                     	;# 
  1752  0192                     	;# 
  1753  0196                     	;# 
  1754  0197                     	;# 
  1755  0198                     	;# 
  1756  0199                     	;# 
  1757  019A                     	;# 
  1758  019B                     	;# 
  1759  019C                     	;# 
  1760  020C                     	;# 
  1761  020C                     	;# 
  1762  020D                     	;# 
  1763  020E                     	;# 
  1764  020F                     	;# 
  1765  020F                     	;# 
  1766  0210                     	;# 
  1767  0210                     	;# 
  1768  0211                     	;# 
  1769  0211                     	;# 
  1770  0212                     	;# 
  1771  0212                     	;# 
  1772  0213                     	;# 
  1773  0214                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0216                     	;# 
  1777  0216                     	;# 
  1778  0217                     	;# 
  1779  0217                     	;# 
  1780  0218                     	;# 
  1781  0218                     	;# 
  1782  0219                     	;# 
  1783  021A                     	;# 
  1784  021B                     	;# 
  1785  021B                     	;# 
  1786  021C                     	;# 
  1787  021C                     	;# 
  1788  021D                     	;# 
  1789  021D                     	;# 
  1790  021E                     	;# 
  1791  021F                     	;# 
  1792  028C                     	;# 
  1793  028C                     	;# 
  1794  028D                     	;# 
  1795  028D                     	;# 
  1796  028E                     	;# 
  1797  028F                     	;# 
  1798  0290                     	;# 
  1799  0290                     	;# 
  1800  0291                     	;# 
  1801  0292                     	;# 
  1802  0292                     	;# 
  1803  0293                     	;# 
  1804  0293                     	;# 
  1805  0294                     	;# 
  1806  0295                     	;# 
  1807  0296                     	;# 
  1808  0296                     	;# 
  1809  0297                     	;# 
  1810  0298                     	;# 
  1811  0298                     	;# 
  1812  0299                     	;# 
  1813  0299                     	;# 
  1814  029A                     	;# 
  1815  029B                     	;# 
  1816  029C                     	;# 
  1817  029C                     	;# 
  1818  029D                     	;# 
  1819  030C                     	;# 
  1820  030C                     	;# 
  1821  030D                     	;# 
  1822  030E                     	;# 
  1823  030F                     	;# 
  1824  0310                     	;# 
  1825  0310                     	;# 
  1826  0311                     	;# 
  1827  0312                     	;# 
  1828  0313                     	;# 
  1829  0314                     	;# 
  1830  0314                     	;# 
  1831  0315                     	;# 
  1832  0316                     	;# 
  1833  0317                     	;# 
  1834  0318                     	;# 
  1835  0318                     	;# 
  1836  0319                     	;# 
  1837  031A                     	;# 
  1838  031B                     	;# 
  1839  031C                     	;# 
  1840  031C                     	;# 
  1841  031D                     	;# 
  1842  031E                     	;# 
  1843  031F                     	;# 
  1844  038C                     	;# 
  1845  038D                     	;# 
  1846  038E                     	;# 
  1847  0390                     	;# 
  1848  0391                     	;# 
  1849  0392                     	;# 
  1850  040C                     	;# 
  1851  040D                     	;# 
  1852  040E                     	;# 
  1853  040F                     	;# 
  1854  0410                     	;# 
  1855  0411                     	;# 
  1856  0416                     	;# 
  1857  0416                     	;# 
  1858  0417                     	;# 
  1859  0418                     	;# 
  1860  0418                     	;# 
  1861  0419                     	;# 
  1862  041A                     	;# 
  1863  041A                     	;# 
  1864  041B                     	;# 
  1865  041C                     	;# 
  1866  041C                     	;# 
  1867  041D                     	;# 
  1868  041E                     	;# 
  1869  041F                     	;# 
  1870  048C                     	;# 
  1871  048C                     	;# 
  1872  048D                     	;# 
  1873  048E                     	;# 
  1874  048F                     	;# 
  1875  048F                     	;# 
  1876  0490                     	;# 
  1877  0491                     	;# 
  1878  0492                     	;# 
  1879  0492                     	;# 
  1880  0493                     	;# 
  1881  0494                     	;# 
  1882  0495                     	;# 
  1883  0495                     	;# 
  1884  0496                     	;# 
  1885  0497                     	;# 
  1886  0498                     	;# 
  1887  0499                     	;# 
  1888  049A                     	;# 
  1889  049B                     	;# 
  1890  049C                     	;# 
  1891  049D                     	;# 
  1892  050C                     	;# 
  1893  050C                     	;# 
  1894  050D                     	;# 
  1895  050E                     	;# 
  1896  050F                     	;# 
  1897  050F                     	;# 
  1898  0510                     	;# 
  1899  0511                     	;# 
  1900  0512                     	;# 
  1901  0512                     	;# 
  1902  0513                     	;# 
  1903  0514                     	;# 
  1904  0515                     	;# 
  1905  0515                     	;# 
  1906  0516                     	;# 
  1907  0517                     	;# 
  1908  0518                     	;# 
  1909  0519                     	;# 
  1910  051A                     	;# 
  1911  051B                     	;# 
  1912  051C                     	;# 
  1913  051D                     	;# 
  1914  058C                     	;# 
  1915  058C                     	;# 
  1916  058D                     	;# 
  1917  058E                     	;# 
  1918  058F                     	;# 
  1919  058F                     	;# 
  1920  0590                     	;# 
  1921  0591                     	;# 
  1922  0592                     	;# 
  1923  0593                     	;# 
  1924  060C                     	;# 
  1925  060D                     	;# 
  1926  060E                     	;# 
  1927  060F                     	;# 
  1928  0610                     	;# 
  1929  0611                     	;# 
  1930  0612                     	;# 
  1931  0613                     	;# 
  1932  0614                     	;# 
  1933  0616                     	;# 
  1934  0617                     	;# 
  1935  0618                     	;# 
  1936  0619                     	;# 
  1937  061A                     	;# 
  1938  061B                     	;# 
  1939  061C                     	;# 
  1940  061D                     	;# 
  1941  061E                     	;# 
  1942  068C                     	;# 
  1943  068D                     	;# 
  1944  068E                     	;# 
  1945  068F                     	;# 
  1946  0690                     	;# 
  1947  0691                     	;# 
  1948  0692                     	;# 
  1949  0693                     	;# 
  1950  0694                     	;# 
  1951  070C                     	;# 
  1952  070D                     	;# 
  1953  070E                     	;# 
  1954  070F                     	;# 
  1955  0710                     	;# 
  1956  0711                     	;# 
  1957  0712                     	;# 
  1958  0713                     	;# 
  1959  0714                     	;# 
  1960  0716                     	;# 
  1961  0717                     	;# 
  1962  0718                     	;# 
  1963  0719                     	;# 
  1964  071A                     	;# 
  1965  071B                     	;# 
  1966  071C                     	;# 
  1967  071D                     	;# 
  1968  071E                     	;# 
  1969  0796                     	;# 
  1970  0797                     	;# 
  1971  0798                     	;# 
  1972  0799                     	;# 
  1973  079A                     	;# 
  1974  079B                     	;# 
  1975  080C                     	;# 
  1976  080D                     	;# 
  1977  080E                     	;# 
  1978  080F                     	;# 
  1979  0810                     	;# 
  1980  0811                     	;# 
  1981  0812                     	;# 
  1982  0813                     	;# 
  1983  0814                     	;# 
  1984  081A                     	;# 
  1985  081B                     	;# 
  1986  081C                     	;# 
  1987  081D                     	;# 
  1988  081E                     	;# 
  1989  081F                     	;# 
  1990  088C                     	;# 
  1991  088D                     	;# 
  1992  088E                     	;# 
  1993  088F                     	;# 
  1994  0890                     	;# 
  1995  0891                     	;# 
  1996  0892                     	;# 
  1997  0893                     	;# 
  1998  0895                     	;# 
  1999  0896                     	;# 
  2000  0897                     	;# 
  2001  0898                     	;# 
  2002  0899                     	;# 
  2003  089A                     	;# 
  2004  089B                     	;# 
  2005  090C                     	;# 
  2006  090E                     	;# 
  2007  090F                     	;# 
  2008  091F                     	;# 
  2009  091F                     	;# 
  2010  098F                     	;# 
  2011  098F                     	;# 
  2012  0990                     	;# 
  2013  0991                     	;# 
  2014  0992                     	;# 
  2015  0993                     	;# 
  2016  0994                     	;# 
  2017  0995                     	;# 
  2018  0996                     	;# 
  2019  0997                     	;# 
  2020  0E0F                     	;# 
  2021  0E10                     	;# 
  2022  0E11                     	;# 
  2023  0E12                     	;# 
  2024  0E13                     	;# 
  2025  0E14                     	;# 
  2026  0E15                     	;# 
  2027  0E16                     	;# 
  2028  0E17                     	;# 
  2029  0E18                     	;# 
  2030  0E19                     	;# 
  2031  0E1A                     	;# 
  2032  0E1B                     	;# 
  2033  0E1C                     	;# 
  2034  0E1D                     	;# 
  2035  0E1E                     	;# 
  2036  0E1F                     	;# 
  2037  0E20                     	;# 
  2038  0E21                     	;# 
  2039  0E22                     	;# 
  2040  0E23                     	;# 
  2041  0E24                     	;# 
  2042  0E25                     	;# 
  2043  0E26                     	;# 
  2044  0E27                     	;# 
  2045  0E28                     	;# 
  2046  0E29                     	;# 
  2047  0E2A                     	;# 
  2048  0E2B                     	;# 
  2049  0E2C                     	;# 
  2050  0E2D                     	;# 
  2051  0E2E                     	;# 
  2052  0E2F                     	;# 
  2053  0E30                     	;# 
  2054  0E31                     	;# 
  2055  0E32                     	;# 
  2056  0E33                     	;# 
  2057  0E34                     	;# 
  2058  0E35                     	;# 
  2059  0E36                     	;# 
  2060  0E37                     	;# 
  2061  0E8F                     	;# 
  2062  0E90                     	;# 
  2063  0E91                     	;# 
  2064  0E92                     	;# 
  2065  0E93                     	;# 
  2066  0E94                     	;# 
  2067  0E95                     	;# 
  2068  0E96                     	;# 
  2069  0E97                     	;# 
  2070  0E9C                     	;# 
  2071  0E9D                     	;# 
  2072  0E9E                     	;# 
  2073  0EA1                     	;# 
  2074  0EA2                     	;# 
  2075  0EA3                     	;# 
  2076  0EA4                     	;# 
  2077  0EA5                     	;# 
  2078  0EA9                     	;# 
  2079  0EAA                     	;# 
  2080  0EAB                     	;# 
  2081  0EAC                     	;# 
  2082  0EB1                     	;# 
  2083  0EB2                     	;# 
  2084  0EB3                     	;# 
  2085  0EB8                     	;# 
  2086  0EB9                     	;# 
  2087  0EBA                     	;# 
  2088  0EBB                     	;# 
  2089  0EBC                     	;# 
  2090  0EBD                     	;# 
  2091  0EBE                     	;# 
  2092  0EC3                     	;# 
  2093  0EC5                     	;# 
  2094  0EC6                     	;# 
  2095  0EC7                     	;# 
  2096  0EC8                     	;# 
  2097  0EC9                     	;# 
  2098  0ECA                     	;# 
  2099  0ECB                     	;# 
  2100  0ECC                     	;# 
  2101  0F10                     	;# 
  2102  0F11                     	;# 
  2103  0F12                     	;# 
  2104  0F13                     	;# 
  2105  0F14                     	;# 
  2106  0F15                     	;# 
  2107  0F16                     	;# 
  2108  0F17                     	;# 
  2109  0F18                     	;# 
  2110  0F19                     	;# 
  2111  0F1A                     	;# 
  2112  0F1B                     	;# 
  2113  0F1C                     	;# 
  2114  0F1D                     	;# 
  2115  0F1E                     	;# 
  2116  0F1F                     	;# 
  2117  0F20                     	;# 
  2118  0F21                     	;# 
  2119  0F22                     	;# 
  2120  0F23                     	;# 
  2121  0F24                     	;# 
  2122  0F25                     	;# 
  2123  0F26                     	;# 
  2124  0F27                     	;# 
  2125  0F38                     	;# 
  2126  0F39                     	;# 
  2127  0F3A                     	;# 
  2128  0F3B                     	;# 
  2129  0F3C                     	;# 
  2130  0F3D                     	;# 
  2131  0F3E                     	;# 
  2132  0F3F                     	;# 
  2133  0F40                     	;# 
  2134  0F41                     	;# 
  2135  0F43                     	;# 
  2136  0F44                     	;# 
  2137  0F45                     	;# 
  2138  0F46                     	;# 
  2139  0F47                     	;# 
  2140  0F48                     	;# 
  2141  0F49                     	;# 
  2142  0F4A                     	;# 
  2143  0F4B                     	;# 
  2144  0F4C                     	;# 
  2145  0F4E                     	;# 
  2146  0F4F                     	;# 
  2147  0F50                     	;# 
  2148  0F51                     	;# 
  2149  0F52                     	;# 
  2150  0F53                     	;# 
  2151  0F54                     	;# 
  2152  0F55                     	;# 
  2153  0F56                     	;# 
  2154  0F57                     	;# 
  2155  0F65                     	;# 
  2156  0F68                     	;# 
  2157  0F69                     	;# 
  2158  0F6A                     	;# 
  2159  0F6B                     	;# 
  2160  0FE4                     	;# 
  2161  0FE5                     	;# 
  2162  0FE6                     	;# 
  2163  0FE7                     	;# 
  2164  0FE8                     	;# 
  2165  0FE9                     	;# 
  2166  0FEA                     	;# 
  2167  0FEB                     	;# 
  2168  0FED                     	;# 
  2169  0FEE                     	;# 
  2170  0FEF                     	;# 
  2171  0000                     	;# 
  2172  0001                     	;# 
  2173  0002                     	;# 
  2174  0003                     	;# 
  2175  0004                     	;# 
  2176  0005                     	;# 
  2177  0006                     	;# 
  2178  0007                     	;# 
  2179  0008                     	;# 
  2180  0009                     	;# 
  2181  000A                     	;# 
  2182  000B                     	;# 
  2183  000C                     	;# 
  2184  000D                     	;# 
  2185  000E                     	;# 
  2186  0010                     	;# 
  2187  0011                     	;# 
  2188  0012                     	;# 
  2189  0013                     	;# 
  2190  0016                     	;# 
  2191  0017                     	;# 
  2192  0018                     	;# 
  2193  001C                     	;# 
  2194  001C                     	;# 
  2195  001D                     	;# 
  2196  001D                     	;# 
  2197  001E                     	;# 
  2198  001F                     	;# 
  2199  008C                     	;# 
  2200  008C                     	;# 
  2201  008D                     	;# 
  2202  008E                     	;# 
  2203  008E                     	;# 
  2204  008F                     	;# 
  2205  0090                     	;# 
  2206  0090                     	;# 
  2207  0091                     	;# 
  2208  0093                     	;# 
  2209  0094                     	;# 
  2210  0095                     	;# 
  2211  0096                     	;# 
  2212  0097                     	;# 
  2213  0098                     	;# 
  2214  0099                     	;# 
  2215  009A                     	;# 
  2216  009B                     	;# 
  2217  009C                     	;# 
  2218  009D                     	;# 
  2219  009E                     	;# 
  2220  010C                     	;# 
  2221  010D                     	;# 
  2222  010E                     	;# 
  2223  010E                     	;# 
  2224  010F                     	;# 
  2225  0110                     	;# 
  2226  0110                     	;# 
  2227  0111                     	;# 
  2228  0112                     	;# 
  2229  0112                     	;# 
  2230  0113                     	;# 
  2231  0114                     	;# 
  2232  0114                     	;# 
  2233  0115                     	;# 
  2234  0116                     	;# 
  2235  0116                     	;# 
  2236  0117                     	;# 
  2237  0119                     	;# 
  2238  0119                     	;# 
  2239  0119                     	;# 
  2240  011A                     	;# 
  2241  011A                     	;# 
  2242  011A                     	;# 
  2243  011B                     	;# 
  2244  011B                     	;# 
  2245  011B                     	;# 
  2246  011B                     	;# 
  2247  011B                     	;# 
  2248  011C                     	;# 
  2249  011C                     	;# 
  2250  011C                     	;# 
  2251  011D                     	;# 
  2252  011D                     	;# 
  2253  011D                     	;# 
  2254  011E                     	;# 
  2255  011E                     	;# 
  2256  011E                     	;# 
  2257  011F                     	;# 
  2258  011F                     	;# 
  2259  011F                     	;# 
  2260  011F                     	;# 
  2261  011F                     	;# 
  2262  018C                     	;# 
  2263  018D                     	;# 
  2264  018E                     	;# 
  2265  018F                     	;# 
  2266  0190                     	;# 
  2267  0191                     	;# 
  2268  0192                     	;# 
  2269  0196                     	;# 
  2270  0197                     	;# 
  2271  0198                     	;# 
  2272  0199                     	;# 
  2273  019A                     	;# 
  2274  019B                     	;# 
  2275  019C                     	;# 
  2276  020C                     	;# 
  2277  020C                     	;# 
  2278  020D                     	;# 
  2279  020E                     	;# 
  2280  020F                     	;# 
  2281  020F                     	;# 
  2282  0210                     	;# 
  2283  0210                     	;# 
  2284  0211                     	;# 
  2285  0211                     	;# 
  2286  0212                     	;# 
  2287  0212                     	;# 
  2288  0213                     	;# 
  2289  0214                     	;# 
  2290  0215                     	;# 
  2291  0215                     	;# 
  2292  0216                     	;# 
  2293  0216                     	;# 
  2294  0217                     	;# 
  2295  0217                     	;# 
  2296  0218                     	;# 
  2297  0218                     	;# 
  2298  0219                     	;# 
  2299  021A                     	;# 
  2300  021B                     	;# 
  2301  021B                     	;# 
  2302  021C                     	;# 
  2303  021C                     	;# 
  2304  021D                     	;# 
  2305  021D                     	;# 
  2306  021E                     	;# 
  2307  021F                     	;# 
  2308  028C                     	;# 
  2309  028C                     	;# 
  2310  028D                     	;# 
  2311  028D                     	;# 
  2312  028E                     	;# 
  2313  028F                     	;# 
  2314  0290                     	;# 
  2315  0290                     	;# 
  2316  0291                     	;# 
  2317  0292                     	;# 
  2318  0292                     	;# 
  2319  0293                     	;# 
  2320  0293                     	;# 
  2321  0294                     	;# 
  2322  0295                     	;# 
  2323  0296                     	;# 
  2324  0296                     	;# 
  2325  0297                     	;# 
  2326  0298                     	;# 
  2327  0298                     	;# 
  2328  0299                     	;# 
  2329  0299                     	;# 
  2330  029A                     	;# 
  2331  029B                     	;# 
  2332  029C                     	;# 
  2333  029C                     	;# 
  2334  029D                     	;# 
  2335  030C                     	;# 
  2336  030C                     	;# 
  2337  030D                     	;# 
  2338  030E                     	;# 
  2339  030F                     	;# 
  2340  0310                     	;# 
  2341  0310                     	;# 
  2342  0311                     	;# 
  2343  0312                     	;# 
  2344  0313                     	;# 
  2345  0314                     	;# 
  2346  0314                     	;# 
  2347  0315                     	;# 
  2348  0316                     	;# 
  2349  0317                     	;# 
  2350  0318                     	;# 
  2351  0318                     	;# 
  2352  0319                     	;# 
  2353  031A                     	;# 
  2354  031B                     	;# 
  2355  031C                     	;# 
  2356  031C                     	;# 
  2357  031D                     	;# 
  2358  031E                     	;# 
  2359  031F                     	;# 
  2360  038C                     	;# 
  2361  038D                     	;# 
  2362  038E                     	;# 
  2363  0390                     	;# 
  2364  0391                     	;# 
  2365  0392                     	;# 
  2366  040C                     	;# 
  2367  040D                     	;# 
  2368  040E                     	;# 
  2369  040F                     	;# 
  2370  0410                     	;# 
  2371  0411                     	;# 
  2372  0416                     	;# 
  2373  0416                     	;# 
  2374  0417                     	;# 
  2375  0418                     	;# 
  2376  0418                     	;# 
  2377  0419                     	;# 
  2378  041A                     	;# 
  2379  041A                     	;# 
  2380  041B                     	;# 
  2381  041C                     	;# 
  2382  041C                     	;# 
  2383  041D                     	;# 
  2384  041E                     	;# 
  2385  041F                     	;# 
  2386  048C                     	;# 
  2387  048C                     	;# 
  2388  048D                     	;# 
  2389  048E                     	;# 
  2390  048F                     	;# 
  2391  048F                     	;# 
  2392  0490                     	;# 
  2393  0491                     	;# 
  2394  0492                     	;# 
  2395  0492                     	;# 
  2396  0493                     	;# 
  2397  0494                     	;# 
  2398  0495                     	;# 
  2399  0495                     	;# 
  2400  0496                     	;# 
  2401  0497                     	;# 
  2402  0498                     	;# 
  2403  0499                     	;# 
  2404  049A                     	;# 
  2405  049B                     	;# 
  2406  049C                     	;# 
  2407  049D                     	;# 
  2408  050C                     	;# 
  2409  050C                     	;# 
  2410  050D                     	;# 
  2411  050E                     	;# 
  2412  050F                     	;# 
  2413  050F                     	;# 
  2414  0510                     	;# 
  2415  0511                     	;# 
  2416  0512                     	;# 
  2417  0512                     	;# 
  2418  0513                     	;# 
  2419  0514                     	;# 
  2420  0515                     	;# 
  2421  0515                     	;# 
  2422  0516                     	;# 
  2423  0517                     	;# 
  2424  0518                     	;# 
  2425  0519                     	;# 
  2426  051A                     	;# 
  2427  051B                     	;# 
  2428  051C                     	;# 
  2429  051D                     	;# 
  2430  058C                     	;# 
  2431  058C                     	;# 
  2432  058D                     	;# 
  2433  058E                     	;# 
  2434  058F                     	;# 
  2435  058F                     	;# 
  2436  0590                     	;# 
  2437  0591                     	;# 
  2438  0592                     	;# 
  2439  0593                     	;# 
  2440  060C                     	;# 
  2441  060D                     	;# 
  2442  060E                     	;# 
  2443  060F                     	;# 
  2444  0610                     	;# 
  2445  0611                     	;# 
  2446  0612                     	;# 
  2447  0613                     	;# 
  2448  0614                     	;# 
  2449  0616                     	;# 
  2450  0617                     	;# 
  2451  0618                     	;# 
  2452  0619                     	;# 
  2453  061A                     	;# 
  2454  061B                     	;# 
  2455  061C                     	;# 
  2456  061D                     	;# 
  2457  061E                     	;# 
  2458  068C                     	;# 
  2459  068D                     	;# 
  2460  068E                     	;# 
  2461  068F                     	;# 
  2462  0690                     	;# 
  2463  0691                     	;# 
  2464  0692                     	;# 
  2465  0693                     	;# 
  2466  0694                     	;# 
  2467  070C                     	;# 
  2468  070D                     	;# 
  2469  070E                     	;# 
  2470  070F                     	;# 
  2471  0710                     	;# 
  2472  0711                     	;# 
  2473  0712                     	;# 
  2474  0713                     	;# 
  2475  0714                     	;# 
  2476  0716                     	;# 
  2477  0717                     	;# 
  2478  0718                     	;# 
  2479  0719                     	;# 
  2480  071A                     	;# 
  2481  071B                     	;# 
  2482  071C                     	;# 
  2483  071D                     	;# 
  2484  071E                     	;# 
  2485  0796                     	;# 
  2486  0797                     	;# 
  2487  0798                     	;# 
  2488  0799                     	;# 
  2489  079A                     	;# 
  2490  079B                     	;# 
  2491  080C                     	;# 
  2492  080D                     	;# 
  2493  080E                     	;# 
  2494  080F                     	;# 
  2495  0810                     	;# 
  2496  0811                     	;# 
  2497  0812                     	;# 
  2498  0813                     	;# 
  2499  0814                     	;# 
  2500  081A                     	;# 
  2501  081B                     	;# 
  2502  081C                     	;# 
  2503  081D                     	;# 
  2504  081E                     	;# 
  2505  081F                     	;# 
  2506  088C                     	;# 
  2507  088D                     	;# 
  2508  088E                     	;# 
  2509  088F                     	;# 
  2510  0890                     	;# 
  2511  0891                     	;# 
  2512  0892                     	;# 
  2513  0893                     	;# 
  2514  0895                     	;# 
  2515  0896                     	;# 
  2516  0897                     	;# 
  2517  0898                     	;# 
  2518  0899                     	;# 
  2519  089A                     	;# 
  2520  089B                     	;# 
  2521  090C                     	;# 
  2522  090E                     	;# 
  2523  090F                     	;# 
  2524  091F                     	;# 
  2525  091F                     	;# 
  2526  098F                     	;# 
  2527  098F                     	;# 
  2528  0990                     	;# 
  2529  0991                     	;# 
  2530  0992                     	;# 
  2531  0993                     	;# 
  2532  0994                     	;# 
  2533  0995                     	;# 
  2534  0996                     	;# 
  2535  0997                     	;# 
  2536  0E0F                     	;# 
  2537  0E10                     	;# 
  2538  0E11                     	;# 
  2539  0E12                     	;# 
  2540  0E13                     	;# 
  2541  0E14                     	;# 
  2542  0E15                     	;# 
  2543  0E16                     	;# 
  2544  0E17                     	;# 
  2545  0E18                     	;# 
  2546  0E19                     	;# 
  2547  0E1A                     	;# 
  2548  0E1B                     	;# 
  2549  0E1C                     	;# 
  2550  0E1D                     	;# 
  2551  0E1E                     	;# 
  2552  0E1F                     	;# 
  2553  0E20                     	;# 
  2554  0E21                     	;# 
  2555  0E22                     	;# 
  2556  0E23                     	;# 
  2557  0E24                     	;# 
  2558  0E25                     	;# 
  2559  0E26                     	;# 
  2560  0E27                     	;# 
  2561  0E28                     	;# 
  2562  0E29                     	;# 
  2563  0E2A                     	;# 
  2564  0E2B                     	;# 
  2565  0E2C                     	;# 
  2566  0E2D                     	;# 
  2567  0E2E                     	;# 
  2568  0E2F                     	;# 
  2569  0E30                     	;# 
  2570  0E31                     	;# 
  2571  0E32                     	;# 
  2572  0E33                     	;# 
  2573  0E34                     	;# 
  2574  0E35                     	;# 
  2575  0E36                     	;# 
  2576  0E37                     	;# 
  2577  0E8F                     	;# 
  2578  0E90                     	;# 
  2579  0E91                     	;# 
  2580  0E92                     	;# 
  2581  0E93                     	;# 
  2582  0E94                     	;# 
  2583  0E95                     	;# 
  2584  0E96                     	;# 
  2585  0E97                     	;# 
  2586  0E9C                     	;# 
  2587  0E9D                     	;# 
  2588  0E9E                     	;# 
  2589  0EA1                     	;# 
  2590  0EA2                     	;# 
  2591  0EA3                     	;# 
  2592  0EA4                     	;# 
  2593  0EA5                     	;# 
  2594  0EA9                     	;# 
  2595  0EAA                     	;# 
  2596  0EAB                     	;# 
  2597  0EAC                     	;# 
  2598  0EB1                     	;# 
  2599  0EB2                     	;# 
  2600  0EB3                     	;# 
  2601  0EB8                     	;# 
  2602  0EB9                     	;# 
  2603  0EBA                     	;# 
  2604  0EBB                     	;# 
  2605  0EBC                     	;# 
  2606  0EBD                     	;# 
  2607  0EBE                     	;# 
  2608  0EC3                     	;# 
  2609  0EC5                     	;# 
  2610  0EC6                     	;# 
  2611  0EC7                     	;# 
  2612  0EC8                     	;# 
  2613  0EC9                     	;# 
  2614  0ECA                     	;# 
  2615  0ECB                     	;# 
  2616  0ECC                     	;# 
  2617  0F10                     	;# 
  2618  0F11                     	;# 
  2619  0F12                     	;# 
  2620  0F13                     	;# 
  2621  0F14                     	;# 
  2622  0F15                     	;# 
  2623  0F16                     	;# 
  2624  0F17                     	;# 
  2625  0F18                     	;# 
  2626  0F19                     	;# 
  2627  0F1A                     	;# 
  2628  0F1B                     	;# 
  2629  0F1C                     	;# 
  2630  0F1D                     	;# 
  2631  0F1E                     	;# 
  2632  0F1F                     	;# 
  2633  0F20                     	;# 
  2634  0F21                     	;# 
  2635  0F22                     	;# 
  2636  0F23                     	;# 
  2637  0F24                     	;# 
  2638  0F25                     	;# 
  2639  0F26                     	;# 
  2640  0F27                     	;# 
  2641  0F38                     	;# 
  2642  0F39                     	;# 
  2643  0F3A                     	;# 
  2644  0F3B                     	;# 
  2645  0F3C                     	;# 
  2646  0F3D                     	;# 
  2647  0F3E                     	;# 
  2648  0F3F                     	;# 
  2649  0F40                     	;# 
  2650  0F41                     	;# 
  2651  0F43                     	;# 
  2652  0F44                     	;# 
  2653  0F45                     	;# 
  2654  0F46                     	;# 
  2655  0F47                     	;# 
  2656  0F48                     	;# 
  2657  0F49                     	;# 
  2658  0F4A                     	;# 
  2659  0F4B                     	;# 
  2660  0F4C                     	;# 
  2661  0F4E                     	;# 
  2662  0F4F                     	;# 
  2663  0F50                     	;# 
  2664  0F51                     	;# 
  2665  0F52                     	;# 
  2666  0F53                     	;# 
  2667  0F54                     	;# 
  2668  0F55                     	;# 
  2669  0F56                     	;# 
  2670  0F57                     	;# 
  2671  0F65                     	;# 
  2672  0F68                     	;# 
  2673  0F69                     	;# 
  2674  0F6A                     	;# 
  2675  0F6B                     	;# 
  2676  0FE4                     	;# 
  2677  0FE5                     	;# 
  2678  0FE6                     	;# 
  2679  0FE7                     	;# 
  2680  0FE8                     	;# 
  2681  0FE9                     	;# 
  2682  0FEA                     	;# 
  2683  0FEB                     	;# 
  2684  0FED                     	;# 
  2685  0FEE                     	;# 
  2686  0FEF                     	;# 
  2687  0000                     	;# 
  2688  0001                     	;# 
  2689  0002                     	;# 
  2690  0003                     	;# 
  2691  0004                     	;# 
  2692  0005                     	;# 
  2693  0006                     	;# 
  2694  0007                     	;# 
  2695  0008                     	;# 
  2696  0009                     	;# 
  2697  000A                     	;# 
  2698  000B                     	;# 
  2699  000C                     	;# 
  2700  000D                     	;# 
  2701  000E                     	;# 
  2702  0010                     	;# 
  2703  0011                     	;# 
  2704  0012                     	;# 
  2705  0013                     	;# 
  2706  0016                     	;# 
  2707  0017                     	;# 
  2708  0018                     	;# 
  2709  001C                     	;# 
  2710  001C                     	;# 
  2711  001D                     	;# 
  2712  001D                     	;# 
  2713  001E                     	;# 
  2714  001F                     	;# 
  2715  008C                     	;# 
  2716  008C                     	;# 
  2717  008D                     	;# 
  2718  008E                     	;# 
  2719  008E                     	;# 
  2720  008F                     	;# 
  2721  0090                     	;# 
  2722  0090                     	;# 
  2723  0091                     	;# 
  2724  0093                     	;# 
  2725  0094                     	;# 
  2726  0095                     	;# 
  2727  0096                     	;# 
  2728  0097                     	;# 
  2729  0098                     	;# 
  2730  0099                     	;# 
  2731  009A                     	;# 
  2732  009B                     	;# 
  2733  009C                     	;# 
  2734  009D                     	;# 
  2735  009E                     	;# 
  2736  010C                     	;# 
  2737  010D                     	;# 
  2738  010E                     	;# 
  2739  010E                     	;# 
  2740  010F                     	;# 
  2741  0110                     	;# 
  2742  0110                     	;# 
  2743  0111                     	;# 
  2744  0112                     	;# 
  2745  0112                     	;# 
  2746  0113                     	;# 
  2747  0114                     	;# 
  2748  0114                     	;# 
  2749  0115                     	;# 
  2750  0116                     	;# 
  2751  0116                     	;# 
  2752  0117                     	;# 
  2753  0119                     	;# 
  2754  0119                     	;# 
  2755  0119                     	;# 
  2756  011A                     	;# 
  2757  011A                     	;# 
  2758  011A                     	;# 
  2759  011B                     	;# 
  2760  011B                     	;# 
  2761  011B                     	;# 
  2762  011B                     	;# 
  2763  011B                     	;# 
  2764  011C                     	;# 
  2765  011C                     	;# 
  2766  011C                     	;# 
  2767  011D                     	;# 
  2768  011D                     	;# 
  2769  011D                     	;# 
  2770  011E                     	;# 
  2771  011E                     	;# 
  2772  011E                     	;# 
  2773  011F                     	;# 
  2774  011F                     	;# 
  2775  011F                     	;# 
  2776  011F                     	;# 
  2777  011F                     	;# 
  2778  018C                     	;# 
  2779  018D                     	;# 
  2780  018E                     	;# 
  2781  018F                     	;# 
  2782  0190                     	;# 
  2783  0191                     	;# 
  2784  0192                     	;# 
  2785  0196                     	;# 
  2786  0197                     	;# 
  2787  0198                     	;# 
  2788  0199                     	;# 
  2789  019A                     	;# 
  2790  019B                     	;# 
  2791  019C                     	;# 
  2792  020C                     	;# 
  2793  020C                     	;# 
  2794  020D                     	;# 
  2795  020E                     	;# 
  2796  020F                     	;# 
  2797  020F                     	;# 
  2798  0210                     	;# 
  2799  0210                     	;# 
  2800  0211                     	;# 
  2801  0211                     	;# 
  2802  0212                     	;# 
  2803  0212                     	;# 
  2804  0213                     	;# 
  2805  0214                     	;# 
  2806  0215                     	;# 
  2807  0215                     	;# 
  2808  0216                     	;# 
  2809  0216                     	;# 
  2810  0217                     	;# 
  2811  0217                     	;# 
  2812  0218                     	;# 
  2813  0218                     	;# 
  2814  0219                     	;# 
  2815  021A                     	;# 
  2816  021B                     	;# 
  2817  021B                     	;# 
  2818  021C                     	;# 
  2819  021C                     	;# 
  2820  021D                     	;# 
  2821  021D                     	;# 
  2822  021E                     	;# 
  2823  021F                     	;# 
  2824  028C                     	;# 
  2825  028C                     	;# 
  2826  028D                     	;# 
  2827  028D                     	;# 
  2828  028E                     	;# 
  2829  028F                     	;# 
  2830  0290                     	;# 
  2831  0290                     	;# 
  2832  0291                     	;# 
  2833  0292                     	;# 
  2834  0292                     	;# 
  2835  0293                     	;# 
  2836  0293                     	;# 
  2837  0294                     	;# 
  2838  0295                     	;# 
  2839  0296                     	;# 
  2840  0296                     	;# 
  2841  0297                     	;# 
  2842  0298                     	;# 
  2843  0298                     	;# 
  2844  0299                     	;# 
  2845  0299                     	;# 
  2846  029A                     	;# 
  2847  029B                     	;# 
  2848  029C                     	;# 
  2849  029C                     	;# 
  2850  029D                     	;# 
  2851  030C                     	;# 
  2852  030C                     	;# 
  2853  030D                     	;# 
  2854  030E                     	;# 
  2855  030F                     	;# 
  2856  0310                     	;# 
  2857  0310                     	;# 
  2858  0311                     	;# 
  2859  0312                     	;# 
  2860  0313                     	;# 
  2861  0314                     	;# 
  2862  0314                     	;# 
  2863  0315                     	;# 
  2864  0316                     	;# 
  2865  0317                     	;# 
  2866  0318                     	;# 
  2867  0318                     	;# 
  2868  0319                     	;# 
  2869  031A                     	;# 
  2870  031B                     	;# 
  2871  031C                     	;# 
  2872  031C                     	;# 
  2873  031D                     	;# 
  2874  031E                     	;# 
  2875  031F                     	;# 
  2876  038C                     	;# 
  2877  038D                     	;# 
  2878  038E                     	;# 
  2879  0390                     	;# 
  2880  0391                     	;# 
  2881  0392                     	;# 
  2882  040C                     	;# 
  2883  040D                     	;# 
  2884  040E                     	;# 
  2885  040F                     	;# 
  2886  0410                     	;# 
  2887  0411                     	;# 
  2888  0416                     	;# 
  2889  0416                     	;# 
  2890  0417                     	;# 
  2891  0418                     	;# 
  2892  0418                     	;# 
  2893  0419                     	;# 
  2894  041A                     	;# 
  2895  041A                     	;# 
  2896  041B                     	;# 
  2897  041C                     	;# 
  2898  041C                     	;# 
  2899  041D                     	;# 
  2900  041E                     	;# 
  2901  041F                     	;# 
  2902  048C                     	;# 
  2903  048C                     	;# 
  2904  048D                     	;# 
  2905  048E                     	;# 
  2906  048F                     	;# 
  2907  048F                     	;# 
  2908  0490                     	;# 
  2909  0491                     	;# 
  2910  0492                     	;# 
  2911  0492                     	;# 
  2912  0493                     	;# 
  2913  0494                     	;# 
  2914  0495                     	;# 
  2915  0495                     	;# 
  2916  0496                     	;# 
  2917  0497                     	;# 
  2918  0498                     	;# 
  2919  0499                     	;# 
  2920  049A                     	;# 
  2921  049B                     	;# 
  2922  049C                     	;# 
  2923  049D                     	;# 
  2924  050C                     	;# 
  2925  050C                     	;# 
  2926  050D                     	;# 
  2927  050E                     	;# 
  2928  050F                     	;# 
  2929  050F                     	;# 
  2930  0510                     	;# 
  2931  0511                     	;# 
  2932  0512                     	;# 
  2933  0512                     	;# 
  2934  0513                     	;# 
  2935  0514                     	;# 
  2936  0515                     	;# 
  2937  0515                     	;# 
  2938  0516                     	;# 
  2939  0517                     	;# 
  2940  0518                     	;# 
  2941  0519                     	;# 
  2942  051A                     	;# 
  2943  051B                     	;# 
  2944  051C                     	;# 
  2945  051D                     	;# 
  2946  058C                     	;# 
  2947  058C                     	;# 
  2948  058D                     	;# 
  2949  058E                     	;# 
  2950  058F                     	;# 
  2951  058F                     	;# 
  2952  0590                     	;# 
  2953  0591                     	;# 
  2954  0592                     	;# 
  2955  0593                     	;# 
  2956  060C                     	;# 
  2957  060D                     	;# 
  2958  060E                     	;# 
  2959  060F                     	;# 
  2960  0610                     	;# 
  2961  0611                     	;# 
  2962  0612                     	;# 
  2963  0613                     	;# 
  2964  0614                     	;# 
  2965  0616                     	;# 
  2966  0617                     	;# 
  2967  0618                     	;# 
  2968  0619                     	;# 
  2969  061A                     	;# 
  2970  061B                     	;# 
  2971  061C                     	;# 
  2972  061D                     	;# 
  2973  061E                     	;# 
  2974  068C                     	;# 
  2975  068D                     	;# 
  2976  068E                     	;# 
  2977  068F                     	;# 
  2978  0690                     	;# 
  2979  0691                     	;# 
  2980  0692                     	;# 
  2981  0693                     	;# 
  2982  0694                     	;# 
  2983  070C                     	;# 
  2984  070D                     	;# 
  2985  070E                     	;# 
  2986  070F                     	;# 
  2987  0710                     	;# 
  2988  0711                     	;# 
  2989  0712                     	;# 
  2990  0713                     	;# 
  2991  0714                     	;# 
  2992  0716                     	;# 
  2993  0717                     	;# 
  2994  0718                     	;# 
  2995  0719                     	;# 
  2996  071A                     	;# 
  2997  071B                     	;# 
  2998  071C                     	;# 
  2999  071D                     	;# 
  3000  071E                     	;# 
  3001  0796                     	;# 
  3002  0797                     	;# 
  3003  0798                     	;# 
  3004  0799                     	;# 
  3005  079A                     	;# 
  3006  079B                     	;# 
  3007  080C                     	;# 
  3008  080D                     	;# 
  3009  080E                     	;# 
  3010  080F                     	;# 
  3011  0810                     	;# 
  3012  0811                     	;# 
  3013  0812                     	;# 
  3014  0813                     	;# 
  3015  0814                     	;# 
  3016  081A                     	;# 
  3017  081B                     	;# 
  3018  081C                     	;# 
  3019  081D                     	;# 
  3020  081E                     	;# 
  3021  081F                     	;# 
  3022  088C                     	;# 
  3023  088D                     	;# 
  3024  088E                     	;# 
  3025  088F                     	;# 
  3026  0890                     	;# 
  3027  0891                     	;# 
  3028  0892                     	;# 
  3029  0893                     	;# 
  3030  0895                     	;# 
  3031  0896                     	;# 
  3032  0897                     	;# 
  3033  0898                     	;# 
  3034  0899                     	;# 
  3035  089A                     	;# 
  3036  089B                     	;# 
  3037  090C                     	;# 
  3038  090E                     	;# 
  3039  090F                     	;# 
  3040  091F                     	;# 
  3041  091F                     	;# 
  3042  098F                     	;# 
  3043  098F                     	;# 
  3044  0990                     	;# 
  3045  0991                     	;# 
  3046  0992                     	;# 
  3047  0993                     	;# 
  3048  0994                     	;# 
  3049  0995                     	;# 
  3050  0996                     	;# 
  3051  0997                     	;# 
  3052  0E0F                     	;# 
  3053  0E10                     	;# 
  3054  0E11                     	;# 
  3055  0E12                     	;# 
  3056  0E13                     	;# 
  3057  0E14                     	;# 
  3058  0E15                     	;# 
  3059  0E16                     	;# 
  3060  0E17                     	;# 
  3061  0E18                     	;# 
  3062  0E19                     	;# 
  3063  0E1A                     	;# 
  3064  0E1B                     	;# 
  3065  0E1C                     	;# 
  3066  0E1D                     	;# 
  3067  0E1E                     	;# 
  3068  0E1F                     	;# 
  3069  0E20                     	;# 
  3070  0E21                     	;# 
  3071  0E22                     	;# 
  3072  0E23                     	;# 
  3073  0E24                     	;# 
  3074  0E25                     	;# 
  3075  0E26                     	;# 
  3076  0E27                     	;# 
  3077  0E28                     	;# 
  3078  0E29                     	;# 
  3079  0E2A                     	;# 
  3080  0E2B                     	;# 
  3081  0E2C                     	;# 
  3082  0E2D                     	;# 
  3083  0E2E                     	;# 
  3084  0E2F                     	;# 
  3085  0E30                     	;# 
  3086  0E31                     	;# 
  3087  0E32                     	;# 
  3088  0E33                     	;# 
  3089  0E34                     	;# 
  3090  0E35                     	;# 
  3091  0E36                     	;# 
  3092  0E37                     	;# 
  3093  0E8F                     	;# 
  3094  0E90                     	;# 
  3095  0E91                     	;# 
  3096  0E92                     	;# 
  3097  0E93                     	;# 
  3098  0E94                     	;# 
  3099  0E95                     	;# 
  3100  0E96                     	;# 
  3101  0E97                     	;# 
  3102  0E9C                     	;# 
  3103  0E9D                     	;# 
  3104  0E9E                     	;# 
  3105  0EA1                     	;# 
  3106  0EA2                     	;# 
  3107  0EA3                     	;# 
  3108  0EA4                     	;# 
  3109  0EA5                     	;# 
  3110  0EA9                     	;# 
  3111  0EAA                     	;# 
  3112  0EAB                     	;# 
  3113  0EAC                     	;# 
  3114  0EB1                     	;# 
  3115  0EB2                     	;# 
  3116  0EB3                     	;# 
  3117  0EB8                     	;# 
  3118  0EB9                     	;# 
  3119  0EBA                     	;# 
  3120  0EBB                     	;# 
  3121  0EBC                     	;# 
  3122  0EBD                     	;# 
  3123  0EBE                     	;# 
  3124  0EC3                     	;# 
  3125  0EC5                     	;# 
  3126  0EC6                     	;# 
  3127  0EC7                     	;# 
  3128  0EC8                     	;# 
  3129  0EC9                     	;# 
  3130  0ECA                     	;# 
  3131  0ECB                     	;# 
  3132  0ECC                     	;# 
  3133  0F10                     	;# 
  3134  0F11                     	;# 
  3135  0F12                     	;# 
  3136  0F13                     	;# 
  3137  0F14                     	;# 
  3138  0F15                     	;# 
  3139  0F16                     	;# 
  3140  0F17                     	;# 
  3141  0F18                     	;# 
  3142  0F19                     	;# 
  3143  0F1A                     	;# 
  3144  0F1B                     	;# 
  3145  0F1C                     	;# 
  3146  0F1D                     	;# 
  3147  0F1E                     	;# 
  3148  0F1F                     	;# 
  3149  0F20                     	;# 
  3150  0F21                     	;# 
  3151  0F22                     	;# 
  3152  0F23                     	;# 
  3153  0F24                     	;# 
  3154  0F25                     	;# 
  3155  0F26                     	;# 
  3156  0F27                     	;# 
  3157  0F38                     	;# 
  3158  0F39                     	;# 
  3159  0F3A                     	;# 
  3160  0F3B                     	;# 
  3161  0F3C                     	;# 
  3162  0F3D                     	;# 
  3163  0F3E                     	;# 
  3164  0F3F                     	;# 
  3165  0F40                     	;# 
  3166  0F41                     	;# 
  3167  0F43                     	;# 
  3168  0F44                     	;# 
  3169  0F45                     	;# 
  3170  0F46                     	;# 
  3171  0F47                     	;# 
  3172  0F48                     	;# 
  3173  0F49                     	;# 
  3174  0F4A                     	;# 
  3175  0F4B                     	;# 
  3176  0F4C                     	;# 
  3177  0F4E                     	;# 
  3178  0F4F                     	;# 
  3179  0F50                     	;# 
  3180  0F51                     	;# 
  3181  0F52                     	;# 
  3182  0F53                     	;# 
  3183  0F54                     	;# 
  3184  0F55                     	;# 
  3185  0F56                     	;# 
  3186  0F57                     	;# 
  3187  0F65                     	;# 
  3188  0F68                     	;# 
  3189  0F69                     	;# 
  3190  0F6A                     	;# 
  3191  0F6B                     	;# 
  3192  0FE4                     	;# 
  3193  0FE5                     	;# 
  3194  0FE6                     	;# 
  3195  0FE7                     	;# 
  3196  0FE8                     	;# 
  3197  0FE9                     	;# 
  3198  0FEA                     	;# 
  3199  0FEB                     	;# 
  3200  0FED                     	;# 
  3201  0FEE                     	;# 
  3202  0FEF                     	;# 
  3203  0000                     	;# 
  3204  0001                     	;# 
  3205  0002                     	;# 
  3206  0003                     	;# 
  3207  0004                     	;# 
  3208  0005                     	;# 
  3209  0006                     	;# 
  3210  0007                     	;# 
  3211  0008                     	;# 
  3212  0009                     	;# 
  3213  000A                     	;# 
  3214  000B                     	;# 
  3215  000C                     	;# 
  3216  000D                     	;# 
  3217  000E                     	;# 
  3218  0010                     	;# 
  3219  0011                     	;# 
  3220  0012                     	;# 
  3221  0013                     	;# 
  3222  0016                     	;# 
  3223  0017                     	;# 
  3224  0018                     	;# 
  3225  001C                     	;# 
  3226  001C                     	;# 
  3227  001D                     	;# 
  3228  001D                     	;# 
  3229  001E                     	;# 
  3230  001F                     	;# 
  3231  008C                     	;# 
  3232  008C                     	;# 
  3233  008D                     	;# 
  3234  008E                     	;# 
  3235  008E                     	;# 
  3236  008F                     	;# 
  3237  0090                     	;# 
  3238  0090                     	;# 
  3239  0091                     	;# 
  3240  0093                     	;# 
  3241  0094                     	;# 
  3242  0095                     	;# 
  3243  0096                     	;# 
  3244  0097                     	;# 
  3245  0098                     	;# 
  3246  0099                     	;# 
  3247  009A                     	;# 
  3248  009B                     	;# 
  3249  009C                     	;# 
  3250  009D                     	;# 
  3251  009E                     	;# 
  3252  010C                     	;# 
  3253  010D                     	;# 
  3254  010E                     	;# 
  3255  010E                     	;# 
  3256  010F                     	;# 
  3257  0110                     	;# 
  3258  0110                     	;# 
  3259  0111                     	;# 
  3260  0112                     	;# 
  3261  0112                     	;# 
  3262  0113                     	;# 
  3263  0114                     	;# 
  3264  0114                     	;# 
  3265  0115                     	;# 
  3266  0116                     	;# 
  3267  0116                     	;# 
  3268  0117                     	;# 
  3269  0119                     	;# 
  3270  0119                     	;# 
  3271  0119                     	;# 
  3272  011A                     	;# 
  3273  011A                     	;# 
  3274  011A                     	;# 
  3275  011B                     	;# 
  3276  011B                     	;# 
  3277  011B                     	;# 
  3278  011B                     	;# 
  3279  011B                     	;# 
  3280  011C                     	;# 
  3281  011C                     	;# 
  3282  011C                     	;# 
  3283  011D                     	;# 
  3284  011D                     	;# 
  3285  011D                     	;# 
  3286  011E                     	;# 
  3287  011E                     	;# 
  3288  011E                     	;# 
  3289  011F                     	;# 
  3290  011F                     	;# 
  3291  011F                     	;# 
  3292  011F                     	;# 
  3293  011F                     	;# 
  3294  018C                     	;# 
  3295  018D                     	;# 
  3296  018E                     	;# 
  3297  018F                     	;# 
  3298  0190                     	;# 
  3299  0191                     	;# 
  3300  0192                     	;# 
  3301  0196                     	;# 
  3302  0197                     	;# 
  3303  0198                     	;# 
  3304  0199                     	;# 
  3305  019A                     	;# 
  3306  019B                     	;# 
  3307  019C                     	;# 
  3308  020C                     	;# 
  3309  020C                     	;# 
  3310  020D                     	;# 
  3311  020E                     	;# 
  3312  020F                     	;# 
  3313  020F                     	;# 
  3314  0210                     	;# 
  3315  0210                     	;# 
  3316  0211                     	;# 
  3317  0211                     	;# 
  3318  0212                     	;# 
  3319  0212                     	;# 
  3320  0213                     	;# 
  3321  0214                     	;# 
  3322  0215                     	;# 
  3323  0215                     	;# 
  3324  0216                     	;# 
  3325  0216                     	;# 
  3326  0217                     	;# 
  3327  0217                     	;# 
  3328  0218                     	;# 
  3329  0218                     	;# 
  3330  0219                     	;# 
  3331  021A                     	;# 
  3332  021B                     	;# 
  3333  021B                     	;# 
  3334  021C                     	;# 
  3335  021C                     	;# 
  3336  021D                     	;# 
  3337  021D                     	;# 
  3338  021E                     	;# 
  3339  021F                     	;# 
  3340  028C                     	;# 
  3341  028C                     	;# 
  3342  028D                     	;# 
  3343  028D                     	;# 
  3344  028E                     	;# 
  3345  028F                     	;# 
  3346  0290                     	;# 
  3347  0290                     	;# 
  3348  0291                     	;# 
  3349  0292                     	;# 
  3350  0292                     	;# 
  3351  0293                     	;# 
  3352  0293                     	;# 
  3353  0294                     	;# 
  3354  0295                     	;# 
  3355  0296                     	;# 
  3356  0296                     	;# 
  3357  0297                     	;# 
  3358  0298                     	;# 
  3359  0298                     	;# 
  3360  0299                     	;# 
  3361  0299                     	;# 
  3362  029A                     	;# 
  3363  029B                     	;# 
  3364  029C                     	;# 
  3365  029C                     	;# 
  3366  029D                     	;# 
  3367  030C                     	;# 
  3368  030C                     	;# 
  3369  030D                     	;# 
  3370  030E                     	;# 
  3371  030F                     	;# 
  3372  0310                     	;# 
  3373  0310                     	;# 
  3374  0311                     	;# 
  3375  0312                     	;# 
  3376  0313                     	;# 
  3377  0314                     	;# 
  3378  0314                     	;# 
  3379  0315                     	;# 
  3380  0316                     	;# 
  3381  0317                     	;# 
  3382  0318                     	;# 
  3383  0318                     	;# 
  3384  0319                     	;# 
  3385  031A                     	;# 
  3386  031B                     	;# 
  3387  031C                     	;# 
  3388  031C                     	;# 
  3389  031D                     	;# 
  3390  031E                     	;# 
  3391  031F                     	;# 
  3392  038C                     	;# 
  3393  038D                     	;# 
  3394  038E                     	;# 
  3395  0390                     	;# 
  3396  0391                     	;# 
  3397  0392                     	;# 
  3398  040C                     	;# 
  3399  040D                     	;# 
  3400  040E                     	;# 
  3401  040F                     	;# 
  3402  0410                     	;# 
  3403  0411                     	;# 
  3404  0416                     	;# 
  3405  0416                     	;# 
  3406  0417                     	;# 
  3407  0418                     	;# 
  3408  0418                     	;# 
  3409  0419                     	;# 
  3410  041A                     	;# 
  3411  041A                     	;# 
  3412  041B                     	;# 
  3413  041C                     	;# 
  3414  041C                     	;# 
  3415  041D                     	;# 
  3416  041E                     	;# 
  3417  041F                     	;# 
  3418  048C                     	;# 
  3419  048C                     	;# 
  3420  048D                     	;# 
  3421  048E                     	;# 
  3422  048F                     	;# 
  3423  048F                     	;# 
  3424  0490                     	;# 
  3425  0491                     	;# 
  3426  0492                     	;# 
  3427  0492                     	;# 
  3428  0493                     	;# 
  3429  0494                     	;# 
  3430  0495                     	;# 
  3431  0495                     	;# 
  3432  0496                     	;# 
  3433  0497                     	;# 
  3434  0498                     	;# 
  3435  0499                     	;# 
  3436  049A                     	;# 
  3437  049B                     	;# 
  3438  049C                     	;# 
  3439  049D                     	;# 
  3440  050C                     	;# 
  3441  050C                     	;# 
  3442  050D                     	;# 
  3443  050E                     	;# 
  3444  050F                     	;# 
  3445  050F                     	;# 
  3446  0510                     	;# 
  3447  0511                     	;# 
  3448  0512                     	;# 
  3449  0512                     	;# 
  3450  0513                     	;# 
  3451  0514                     	;# 
  3452  0515                     	;# 
  3453  0515                     	;# 
  3454  0516                     	;# 
  3455  0517                     	;# 
  3456  0518                     	;# 
  3457  0519                     	;# 
  3458  051A                     	;# 
  3459  051B                     	;# 
  3460  051C                     	;# 
  3461  051D                     	;# 
  3462  058C                     	;# 
  3463  058C                     	;# 
  3464  058D                     	;# 
  3465  058E                     	;# 
  3466  058F                     	;# 
  3467  058F                     	;# 
  3468  0590                     	;# 
  3469  0591                     	;# 
  3470  0592                     	;# 
  3471  0593                     	;# 
  3472  060C                     	;# 
  3473  060D                     	;# 
  3474  060E                     	;# 
  3475  060F                     	;# 
  3476  0610                     	;# 
  3477  0611                     	;# 
  3478  0612                     	;# 
  3479  0613                     	;# 
  3480  0614                     	;# 
  3481  0616                     	;# 
  3482  0617                     	;# 
  3483  0618                     	;# 
  3484  0619                     	;# 
  3485  061A                     	;# 
  3486  061B                     	;# 
  3487  061C                     	;# 
  3488  061D                     	;# 
  3489  061E                     	;# 
  3490  068C                     	;# 
  3491  068D                     	;# 
  3492  068E                     	;# 
  3493  068F                     	;# 
  3494  0690                     	;# 
  3495  0691                     	;# 
  3496  0692                     	;# 
  3497  0693                     	;# 
  3498  0694                     	;# 
  3499  070C                     	;# 
  3500  070D                     	;# 
  3501  070E                     	;# 
  3502  070F                     	;# 
  3503  0710                     	;# 
  3504  0711                     	;# 
  3505  0712                     	;# 
  3506  0713                     	;# 
  3507  0714                     	;# 
  3508  0716                     	;# 
  3509  0717                     	;# 
  3510  0718                     	;# 
  3511  0719                     	;# 
  3512  071A                     	;# 
  3513  071B                     	;# 
  3514  071C                     	;# 
  3515  071D                     	;# 
  3516  071E                     	;# 
  3517  0796                     	;# 
  3518  0797                     	;# 
  3519  0798                     	;# 
  3520  0799                     	;# 
  3521  079A                     	;# 
  3522  079B                     	;# 
  3523  080C                     	;# 
  3524  080D                     	;# 
  3525  080E                     	;# 
  3526  080F                     	;# 
  3527  0810                     	;# 
  3528  0811                     	;# 
  3529  0812                     	;# 
  3530  0813                     	;# 
  3531  0814                     	;# 
  3532  081A                     	;# 
  3533  081B                     	;# 
  3534  081C                     	;# 
  3535  081D                     	;# 
  3536  081E                     	;# 
  3537  081F                     	;# 
  3538  088C                     	;# 
  3539  088D                     	;# 
  3540  088E                     	;# 
  3541  088F                     	;# 
  3542  0890                     	;# 
  3543  0891                     	;# 
  3544  0892                     	;# 
  3545  0893                     	;# 
  3546  0895                     	;# 
  3547  0896                     	;# 
  3548  0897                     	;# 
  3549  0898                     	;# 
  3550  0899                     	;# 
  3551  089A                     	;# 
  3552  089B                     	;# 
  3553  090C                     	;# 
  3554  090E                     	;# 
  3555  090F                     	;# 
  3556  091F                     	;# 
  3557  091F                     	;# 
  3558  098F                     	;# 
  3559  098F                     	;# 
  3560  0990                     	;# 
  3561  0991                     	;# 
  3562  0992                     	;# 
  3563  0993                     	;# 
  3564  0994                     	;# 
  3565  0995                     	;# 
  3566  0996                     	;# 
  3567  0997                     	;# 
  3568  0E0F                     	;# 
  3569  0E10                     	;# 
  3570  0E11                     	;# 
  3571  0E12                     	;# 
  3572  0E13                     	;# 
  3573  0E14                     	;# 
  3574  0E15                     	;# 
  3575  0E16                     	;# 
  3576  0E17                     	;# 
  3577  0E18                     	;# 
  3578  0E19                     	;# 
  3579  0E1A                     	;# 
  3580  0E1B                     	;# 
  3581  0E1C                     	;# 
  3582  0E1D                     	;# 
  3583  0E1E                     	;# 
  3584  0E1F                     	;# 
  3585  0E20                     	;# 
  3586  0E21                     	;# 
  3587  0E22                     	;# 
  3588  0E23                     	;# 
  3589  0E24                     	;# 
  3590  0E25                     	;# 
  3591  0E26                     	;# 
  3592  0E27                     	;# 
  3593  0E28                     	;# 
  3594  0E29                     	;# 
  3595  0E2A                     	;# 
  3596  0E2B                     	;# 
  3597  0E2C                     	;# 
  3598  0E2D                     	;# 
  3599  0E2E                     	;# 
  3600  0E2F                     	;# 
  3601  0E30                     	;# 
  3602  0E31                     	;# 
  3603  0E32                     	;# 
  3604  0E33                     	;# 
  3605  0E34                     	;# 
  3606  0E35                     	;# 
  3607  0E36                     	;# 
  3608  0E37                     	;# 
  3609  0E8F                     	;# 
  3610  0E90                     	;# 
  3611  0E91                     	;# 
  3612  0E92                     	;# 
  3613  0E93                     	;# 
  3614  0E94                     	;# 
  3615  0E95                     	;# 
  3616  0E96                     	;# 
  3617  0E97                     	;# 
  3618  0E9C                     	;# 
  3619  0E9D                     	;# 
  3620  0E9E                     	;# 
  3621  0EA1                     	;# 
  3622  0EA2                     	;# 
  3623  0EA3                     	;# 
  3624  0EA4                     	;# 
  3625  0EA5                     	;# 
  3626  0EA9                     	;# 
  3627  0EAA                     	;# 
  3628  0EAB                     	;# 
  3629  0EAC                     	;# 
  3630  0EB1                     	;# 
  3631  0EB2                     	;# 
  3632  0EB3                     	;# 
  3633  0EB8                     	;# 
  3634  0EB9                     	;# 
  3635  0EBA                     	;# 
  3636  0EBB                     	;# 
  3637  0EBC                     	;# 
  3638  0EBD                     	;# 
  3639  0EBE                     	;# 
  3640  0EC3                     	;# 
  3641  0EC5                     	;# 
  3642  0EC6                     	;# 
  3643  0EC7                     	;# 
  3644  0EC8                     	;# 
  3645  0EC9                     	;# 
  3646  0ECA                     	;# 
  3647  0ECB                     	;# 
  3648  0ECC                     	;# 
  3649  0F10                     	;# 
  3650  0F11                     	;# 
  3651  0F12                     	;# 
  3652  0F13                     	;# 
  3653  0F14                     	;# 
  3654  0F15                     	;# 
  3655  0F16                     	;# 
  3656  0F17                     	;# 
  3657  0F18                     	;# 
  3658  0F19                     	;# 
  3659  0F1A                     	;# 
  3660  0F1B                     	;# 
  3661  0F1C                     	;# 
  3662  0F1D                     	;# 
  3663  0F1E                     	;# 
  3664  0F1F                     	;# 
  3665  0F20                     	;# 
  3666  0F21                     	;# 
  3667  0F22                     	;# 
  3668  0F23                     	;# 
  3669  0F24                     	;# 
  3670  0F25                     	;# 
  3671  0F26                     	;# 
  3672  0F27                     	;# 
  3673  0F38                     	;# 
  3674  0F39                     	;# 
  3675  0F3A                     	;# 
  3676  0F3B                     	;# 
  3677  0F3C                     	;# 
  3678  0F3D                     	;# 
  3679  0F3E                     	;# 
  3680  0F3F                     	;# 
  3681  0F40                     	;# 
  3682  0F41                     	;# 
  3683  0F43                     	;# 
  3684  0F44                     	;# 
  3685  0F45                     	;# 
  3686  0F46                     	;# 
  3687  0F47                     	;# 
  3688  0F48                     	;# 
  3689  0F49                     	;# 
  3690  0F4A                     	;# 
  3691  0F4B                     	;# 
  3692  0F4C                     	;# 
  3693  0F4E                     	;# 
  3694  0F4F                     	;# 
  3695  0F50                     	;# 
  3696  0F51                     	;# 
  3697  0F52                     	;# 
  3698  0F53                     	;# 
  3699  0F54                     	;# 
  3700  0F55                     	;# 
  3701  0F56                     	;# 
  3702  0F57                     	;# 
  3703  0F65                     	;# 
  3704  0F68                     	;# 
  3705  0F69                     	;# 
  3706  0F6A                     	;# 
  3707  0F6B                     	;# 
  3708  0FE4                     	;# 
  3709  0FE5                     	;# 
  3710  0FE6                     	;# 
  3711  0FE7                     	;# 
  3712  0FE8                     	;# 
  3713  0FE9                     	;# 
  3714  0FEA                     	;# 
  3715  0FEB                     	;# 
  3716  0FED                     	;# 
  3717  0FEE                     	;# 
  3718  0FEF                     	;# 
  3719  0000                     	;# 
  3720  0001                     	;# 
  3721  0002                     	;# 
  3722  0003                     	;# 
  3723  0004                     	;# 
  3724  0005                     	;# 
  3725  0006                     	;# 
  3726  0007                     	;# 
  3727  0008                     	;# 
  3728  0009                     	;# 
  3729  000A                     	;# 
  3730  000B                     	;# 
  3731  000C                     	;# 
  3732  000D                     	;# 
  3733  000E                     	;# 
  3734  0010                     	;# 
  3735  0011                     	;# 
  3736  0012                     	;# 
  3737  0013                     	;# 
  3738  0016                     	;# 
  3739  0017                     	;# 
  3740  0018                     	;# 
  3741  001C                     	;# 
  3742  001C                     	;# 
  3743  001D                     	;# 
  3744  001D                     	;# 
  3745  001E                     	;# 
  3746  001F                     	;# 
  3747  008C                     	;# 
  3748  008C                     	;# 
  3749  008D                     	;# 
  3750  008E                     	;# 
  3751  008E                     	;# 
  3752  008F                     	;# 
  3753  0090                     	;# 
  3754  0090                     	;# 
  3755  0091                     	;# 
  3756  0093                     	;# 
  3757  0094                     	;# 
  3758  0095                     	;# 
  3759  0096                     	;# 
  3760  0097                     	;# 
  3761  0098                     	;# 
  3762  0099                     	;# 
  3763  009A                     	;# 
  3764  009B                     	;# 
  3765  009C                     	;# 
  3766  009D                     	;# 
  3767  009E                     	;# 
  3768  010C                     	;# 
  3769  010D                     	;# 
  3770  010E                     	;# 
  3771  010E                     	;# 
  3772  010F                     	;# 
  3773  0110                     	;# 
  3774  0110                     	;# 
  3775  0111                     	;# 
  3776  0112                     	;# 
  3777  0112                     	;# 
  3778  0113                     	;# 
  3779  0114                     	;# 
  3780  0114                     	;# 
  3781  0115                     	;# 
  3782  0116                     	;# 
  3783  0116                     	;# 
  3784  0117                     	;# 
  3785  0119                     	;# 
  3786  0119                     	;# 
  3787  0119                     	;# 
  3788  011A                     	;# 
  3789  011A                     	;# 
  3790  011A                     	;# 
  3791  011B                     	;# 
  3792  011B                     	;# 
  3793  011B                     	;# 
  3794  011B                     	;# 
  3795  011B                     	;# 
  3796  011C                     	;# 
  3797  011C                     	;# 
  3798  011C                     	;# 
  3799  011D                     	;# 
  3800  011D                     	;# 
  3801  011D                     	;# 
  3802  011E                     	;# 
  3803  011E                     	;# 
  3804  011E                     	;# 
  3805  011F                     	;# 
  3806  011F                     	;# 
  3807  011F                     	;# 
  3808  011F                     	;# 
  3809  011F                     	;# 
  3810  018C                     	;# 
  3811  018D                     	;# 
  3812  018E                     	;# 
  3813  018F                     	;# 
  3814  0190                     	;# 
  3815  0191                     	;# 
  3816  0192                     	;# 
  3817  0196                     	;# 
  3818  0197                     	;# 
  3819  0198                     	;# 
  3820  0199                     	;# 
  3821  019A                     	;# 
  3822  019B                     	;# 
  3823  019C                     	;# 
  3824  020C                     	;# 
  3825  020C                     	;# 
  3826  020D                     	;# 
  3827  020E                     	;# 
  3828  020F                     	;# 
  3829  020F                     	;# 
  3830  0210                     	;# 
  3831  0210                     	;# 
  3832  0211                     	;# 
  3833  0211                     	;# 
  3834  0212                     	;# 
  3835  0212                     	;# 
  3836  0213                     	;# 
  3837  0214                     	;# 
  3838  0215                     	;# 
  3839  0215                     	;# 
  3840  0216                     	;# 
  3841  0216                     	;# 
  3842  0217                     	;# 
  3843  0217                     	;# 
  3844  0218                     	;# 
  3845  0218                     	;# 
  3846  0219                     	;# 
  3847  021A                     	;# 
  3848  021B                     	;# 
  3849  021B                     	;# 
  3850  021C                     	;# 
  3851  021C                     	;# 
  3852  021D                     	;# 
  3853  021D                     	;# 
  3854  021E                     	;# 
  3855  021F                     	;# 
  3856  028C                     	;# 
  3857  028C                     	;# 
  3858  028D                     	;# 
  3859  028D                     	;# 
  3860  028E                     	;# 
  3861  028F                     	;# 
  3862  0290                     	;# 
  3863  0290                     	;# 
  3864  0291                     	;# 
  3865  0292                     	;# 
  3866  0292                     	;# 
  3867  0293                     	;# 
  3868  0293                     	;# 
  3869  0294                     	;# 
  3870  0295                     	;# 
  3871  0296                     	;# 
  3872  0296                     	;# 
  3873  0297                     	;# 
  3874  0298                     	;# 
  3875  0298                     	;# 
  3876  0299                     	;# 
  3877  0299                     	;# 
  3878  029A                     	;# 
  3879  029B                     	;# 
  3880  029C                     	;# 
  3881  029C                     	;# 
  3882  029D                     	;# 
  3883  030C                     	;# 
  3884  030C                     	;# 
  3885  030D                     	;# 
  3886  030E                     	;# 
  3887  030F                     	;# 
  3888  0310                     	;# 
  3889  0310                     	;# 
  3890  0311                     	;# 
  3891  0312                     	;# 
  3892  0313                     	;# 
  3893  0314                     	;# 
  3894  0314                     	;# 
  3895  0315                     	;# 
  3896  0316                     	;# 
  3897  0317                     	;# 
  3898  0318                     	;# 
  3899  0318                     	;# 
  3900  0319                     	;# 
  3901  031A                     	;# 
  3902  031B                     	;# 
  3903  031C                     	;# 
  3904  031C                     	;# 
  3905  031D                     	;# 
  3906  031E                     	;# 
  3907  031F                     	;# 
  3908  038C                     	;# 
  3909  038D                     	;# 
  3910  038E                     	;# 
  3911  0390                     	;# 
  3912  0391                     	;# 
  3913  0392                     	;# 
  3914  040C                     	;# 
  3915  040D                     	;# 
  3916  040E                     	;# 
  3917  040F                     	;# 
  3918  0410                     	;# 
  3919  0411                     	;# 
  3920  0416                     	;# 
  3921  0416                     	;# 
  3922  0417                     	;# 
  3923  0418                     	;# 
  3924  0418                     	;# 
  3925  0419                     	;# 
  3926  041A                     	;# 
  3927  041A                     	;# 
  3928  041B                     	;# 
  3929  041C                     	;# 
  3930  041C                     	;# 
  3931  041D                     	;# 
  3932  041E                     	;# 
  3933  041F                     	;# 
  3934  048C                     	;# 
  3935  048C                     	;# 
  3936  048D                     	;# 
  3937  048E                     	;# 
  3938  048F                     	;# 
  3939  048F                     	;# 
  3940  0490                     	;# 
  3941  0491                     	;# 
  3942  0492                     	;# 
  3943  0492                     	;# 
  3944  0493                     	;# 
  3945  0494                     	;# 
  3946  0495                     	;# 
  3947  0495                     	;# 
  3948  0496                     	;# 
  3949  0497                     	;# 
  3950  0498                     	;# 
  3951  0499                     	;# 
  3952  049A                     	;# 
  3953  049B                     	;# 
  3954  049C                     	;# 
  3955  049D                     	;# 
  3956  050C                     	;# 
  3957  050C                     	;# 
  3958  050D                     	;# 
  3959  050E                     	;# 
  3960  050F                     	;# 
  3961  050F                     	;# 
  3962  0510                     	;# 
  3963  0511                     	;# 
  3964  0512                     	;# 
  3965  0512                     	;# 
  3966  0513                     	;# 
  3967  0514                     	;# 
  3968  0515                     	;# 
  3969  0515                     	;# 
  3970  0516                     	;# 
  3971  0517                     	;# 
  3972  0518                     	;# 
  3973  0519                     	;# 
  3974  051A                     	;# 
  3975  051B                     	;# 
  3976  051C                     	;# 
  3977  051D                     	;# 
  3978  058C                     	;# 
  3979  058C                     	;# 
  3980  058D                     	;# 
  3981  058E                     	;# 
  3982  058F                     	;# 
  3983  058F                     	;# 
  3984  0590                     	;# 
  3985  0591                     	;# 
  3986  0592                     	;# 
  3987  0593                     	;# 
  3988  060C                     	;# 
  3989  060D                     	;# 
  3990  060E                     	;# 
  3991  060F                     	;# 
  3992  0610                     	;# 
  3993  0611                     	;# 
  3994  0612                     	;# 
  3995  0613                     	;# 
  3996  0614                     	;# 
  3997  0616                     	;# 
  3998  0617                     	;# 
  3999  0618                     	;# 
  4000  0619                     	;# 
  4001  061A                     	;# 
  4002  061B                     	;# 
  4003  061C                     	;# 
  4004  061D                     	;# 
  4005  061E                     	;# 
  4006  068C                     	;# 
  4007  068D                     	;# 
  4008  068E                     	;# 
  4009  068F                     	;# 
  4010  0690                     	;# 
  4011  0691                     	;# 
  4012  0692                     	;# 
  4013  0693                     	;# 
  4014  0694                     	;# 
  4015  070C                     	;# 
  4016  070D                     	;# 
  4017  070E                     	;# 
  4018  070F                     	;# 
  4019  0710                     	;# 
  4020  0711                     	;# 
  4021  0712                     	;# 
  4022  0713                     	;# 
  4023  0714                     	;# 
  4024  0716                     	;# 
  4025  0717                     	;# 
  4026  0718                     	;# 
  4027  0719                     	;# 
  4028  071A                     	;# 
  4029  071B                     	;# 
  4030  071C                     	;# 
  4031  071D                     	;# 
  4032  071E                     	;# 
  4033  0796                     	;# 
  4034  0797                     	;# 
  4035  0798                     	;# 
  4036  0799                     	;# 
  4037  079A                     	;# 
  4038  079B                     	;# 
  4039  080C                     	;# 
  4040  080D                     	;# 
  4041  080E                     	;# 
  4042  080F                     	;# 
  4043  0810                     	;# 
  4044  0811                     	;# 
  4045  0812                     	;# 
  4046  0813                     	;# 
  4047  0814                     	;# 
  4048  081A                     	;# 
  4049  081B                     	;# 
  4050  081C                     	;# 
  4051  081D                     	;# 
  4052  081E                     	;# 
  4053  081F                     	;# 
  4054  088C                     	;# 
  4055  088D                     	;# 
  4056  088E                     	;# 
  4057  088F                     	;# 
  4058  0890                     	;# 
  4059  0891                     	;# 
  4060  0892                     	;# 
  4061  0893                     	;# 
  4062  0895                     	;# 
  4063  0896                     	;# 
  4064  0897                     	;# 
  4065  0898                     	;# 
  4066  0899                     	;# 
  4067  089A                     	;# 
  4068  089B                     	;# 
  4069  090C                     	;# 
  4070  090E                     	;# 
  4071  090F                     	;# 
  4072  091F                     	;# 
  4073  091F                     	;# 
  4074  098F                     	;# 
  4075  098F                     	;# 
  4076  0990                     	;# 
  4077  0991                     	;# 
  4078  0992                     	;# 
  4079  0993                     	;# 
  4080  0994                     	;# 
  4081  0995                     	;# 
  4082  0996                     	;# 
  4083  0997                     	;# 
  4084  0E0F                     	;# 
  4085  0E10                     	;# 
  4086  0E11                     	;# 
  4087  0E12                     	;# 
  4088  0E13                     	;# 
  4089  0E14                     	;# 
  4090  0E15                     	;# 
  4091  0E16                     	;# 
  4092  0E17                     	;# 
  4093  0E18                     	;# 
  4094  0E19                     	;# 
  4095  0E1A                     	;# 
  4096  0E1B                     	;# 
  4097  0E1C                     	;# 
  4098  0E1D                     	;# 
  4099  0E1E                     	;# 
  4100  0E1F                     	;# 
  4101  0E20                     	;# 
  4102  0E21                     	;# 
  4103  0E22                     	;# 
  4104  0E23                     	;# 
  4105  0E24                     	;# 
  4106  0E25                     	;# 
  4107  0E26                     	;# 
  4108  0E27                     	;# 
  4109  0E28                     	;# 
  4110  0E29                     	;# 
  4111  0E2A                     	;# 
  4112  0E2B                     	;# 
  4113  0E2C                     	;# 
  4114  0E2D                     	;# 
  4115  0E2E                     	;# 
  4116  0E2F                     	;# 
  4117  0E30                     	;# 
  4118  0E31                     	;# 
  4119  0E32                     	;# 
  4120  0E33                     	;# 
  4121  0E34                     	;# 
  4122  0E35                     	;# 
  4123  0E36                     	;# 
  4124  0E37                     	;# 
  4125  0E8F                     	;# 
  4126  0E90                     	;# 
  4127  0E91                     	;# 
  4128  0E92                     	;# 
  4129  0E93                     	;# 
  4130  0E94                     	;# 
  4131  0E95                     	;# 
  4132  0E96                     	;# 
  4133  0E97                     	;# 
  4134  0E9C                     	;# 
  4135  0E9D                     	;# 
  4136  0E9E                     	;# 
  4137  0EA1                     	;# 
  4138  0EA2                     	;# 
  4139  0EA3                     	;# 
  4140  0EA4                     	;# 
  4141  0EA5                     	;# 
  4142  0EA9                     	;# 
  4143  0EAA                     	;# 
  4144  0EAB                     	;# 
  4145  0EAC                     	;# 
  4146  0EB1                     	;# 
  4147  0EB2                     	;# 
  4148  0EB3                     	;# 
  4149  0EB8                     	;# 
  4150  0EB9                     	;# 
  4151  0EBA                     	;# 
  4152  0EBB                     	;# 
  4153  0EBC                     	;# 
  4154  0EBD                     	;# 
  4155  0EBE                     	;# 
  4156  0EC3                     	;# 
  4157  0EC5                     	;# 
  4158  0EC6                     	;# 
  4159  0EC7                     	;# 
  4160  0EC8                     	;# 
  4161  0EC9                     	;# 
  4162  0ECA                     	;# 
  4163  0ECB                     	;# 
  4164  0ECC                     	;# 
  4165  0F10                     	;# 
  4166  0F11                     	;# 
  4167  0F12                     	;# 
  4168  0F13                     	;# 
  4169  0F14                     	;# 
  4170  0F15                     	;# 
  4171  0F16                     	;# 
  4172  0F17                     	;# 
  4173  0F18                     	;# 
  4174  0F19                     	;# 
  4175  0F1A                     	;# 
  4176  0F1B                     	;# 
  4177  0F1C                     	;# 
  4178  0F1D                     	;# 
  4179  0F1E                     	;# 
  4180  0F1F                     	;# 
  4181  0F20                     	;# 
  4182  0F21                     	;# 
  4183  0F22                     	;# 
  4184  0F23                     	;# 
  4185  0F24                     	;# 
  4186  0F25                     	;# 
  4187  0F26                     	;# 
  4188  0F27                     	;# 
  4189  0F38                     	;# 
  4190  0F39                     	;# 
  4191  0F3A                     	;# 
  4192  0F3B                     	;# 
  4193  0F3C                     	;# 
  4194  0F3D                     	;# 
  4195  0F3E                     	;# 
  4196  0F3F                     	;# 
  4197  0F40                     	;# 
  4198  0F41                     	;# 
  4199  0F43                     	;# 
  4200  0F44                     	;# 
  4201  0F45                     	;# 
  4202  0F46                     	;# 
  4203  0F47                     	;# 
  4204  0F48                     	;# 
  4205  0F49                     	;# 
  4206  0F4A                     	;# 
  4207  0F4B                     	;# 
  4208  0F4C                     	;# 
  4209  0F4E                     	;# 
  4210  0F4F                     	;# 
  4211  0F50                     	;# 
  4212  0F51                     	;# 
  4213  0F52                     	;# 
  4214  0F53                     	;# 
  4215  0F54                     	;# 
  4216  0F55                     	;# 
  4217  0F56                     	;# 
  4218  0F57                     	;# 
  4219  0F65                     	;# 
  4220  0F68                     	;# 
  4221  0F69                     	;# 
  4222  0F6A                     	;# 
  4223  0F6B                     	;# 
  4224  0FE4                     	;# 
  4225  0FE5                     	;# 
  4226  0FE6                     	;# 
  4227  0FE7                     	;# 
  4228  0FE8                     	;# 
  4229  0FE9                     	;# 
  4230  0FEA                     	;# 
  4231  0FEB                     	;# 
  4232  0FED                     	;# 
  4233  0FEE                     	;# 
  4234  0FEF                     	;# 
  4235  0000                     	;# 
  4236  0001                     	;# 
  4237  0002                     	;# 
  4238  0003                     	;# 
  4239  0004                     	;# 
  4240  0005                     	;# 
  4241  0006                     	;# 
  4242  0007                     	;# 
  4243  0008                     	;# 
  4244  0009                     	;# 
  4245  000A                     	;# 
  4246  000B                     	;# 
  4247  000C                     	;# 
  4248  000D                     	;# 
  4249  000E                     	;# 
  4250  0010                     	;# 
  4251  0011                     	;# 
  4252  0012                     	;# 
  4253  0013                     	;# 
  4254  0016                     	;# 
  4255  0017                     	;# 
  4256  0018                     	;# 
  4257  001C                     	;# 
  4258  001C                     	;# 
  4259  001D                     	;# 
  4260  001D                     	;# 
  4261  001E                     	;# 
  4262  001F                     	;# 
  4263  008C                     	;# 
  4264  008C                     	;# 
  4265  008D                     	;# 
  4266  008E                     	;# 
  4267  008E                     	;# 
  4268  008F                     	;# 
  4269  0090                     	;# 
  4270  0090                     	;# 
  4271  0091                     	;# 
  4272  0093                     	;# 
  4273  0094                     	;# 
  4274  0095                     	;# 
  4275  0096                     	;# 
  4276  0097                     	;# 
  4277  0098                     	;# 
  4278  0099                     	;# 
  4279  009A                     	;# 
  4280  009B                     	;# 
  4281  009C                     	;# 
  4282  009D                     	;# 
  4283  009E                     	;# 
  4284  010C                     	;# 
  4285  010D                     	;# 
  4286  010E                     	;# 
  4287  010E                     	;# 
  4288  010F                     	;# 
  4289  0110                     	;# 
  4290  0110                     	;# 
  4291  0111                     	;# 
  4292  0112                     	;# 
  4293  0112                     	;# 
  4294  0113                     	;# 
  4295  0114                     	;# 
  4296  0114                     	;# 
  4297  0115                     	;# 
  4298  0116                     	;# 
  4299  0116                     	;# 
  4300  0117                     	;# 
  4301  0119                     	;# 
  4302  0119                     	;# 
  4303  0119                     	;# 
  4304  011A                     	;# 
  4305  011A                     	;# 
  4306  011A                     	;# 
  4307  011B                     	;# 
  4308  011B                     	;# 
  4309  011B                     	;# 
  4310  011B                     	;# 
  4311  011B                     	;# 
  4312  011C                     	;# 
  4313  011C                     	;# 
  4314  011C                     	;# 
  4315  011D                     	;# 
  4316  011D                     	;# 
  4317  011D                     	;# 
  4318  011E                     	;# 
  4319  011E                     	;# 
  4320  011E                     	;# 
  4321  011F                     	;# 
  4322  011F                     	;# 
  4323  011F                     	;# 
  4324  011F                     	;# 
  4325  011F                     	;# 
  4326  018C                     	;# 
  4327  018D                     	;# 
  4328  018E                     	;# 
  4329  018F                     	;# 
  4330  0190                     	;# 
  4331  0191                     	;# 
  4332  0192                     	;# 
  4333  0196                     	;# 
  4334  0197                     	;# 
  4335  0198                     	;# 
  4336  0199                     	;# 
  4337  019A                     	;# 
  4338  019B                     	;# 
  4339  019C                     	;# 
  4340  020C                     	;# 
  4341  020C                     	;# 
  4342  020D                     	;# 
  4343  020E                     	;# 
  4344  020F                     	;# 
  4345  020F                     	;# 
  4346  0210                     	;# 
  4347  0210                     	;# 
  4348  0211                     	;# 
  4349  0211                     	;# 
  4350  0212                     	;# 
  4351  0212                     	;# 
  4352  0213                     	;# 
  4353  0214                     	;# 
  4354  0215                     	;# 
  4355  0215                     	;# 
  4356  0216                     	;# 
  4357  0216                     	;# 
  4358  0217                     	;# 
  4359  0217                     	;# 
  4360  0218                     	;# 
  4361  0218                     	;# 
  4362  0219                     	;# 
  4363  021A                     	;# 
  4364  021B                     	;# 
  4365  021B                     	;# 
  4366  021C                     	;# 
  4367  021C                     	;# 
  4368  021D                     	;# 
  4369  021D                     	;# 
  4370  021E                     	;# 
  4371  021F                     	;# 
  4372  028C                     	;# 
  4373  028C                     	;# 
  4374  028D                     	;# 
  4375  028D                     	;# 
  4376  028E                     	;# 
  4377  028F                     	;# 
  4378  0290                     	;# 
  4379  0290                     	;# 
  4380  0291                     	;# 
  4381  0292                     	;# 
  4382  0292                     	;# 
  4383  0293                     	;# 
  4384  0293                     	;# 
  4385  0294                     	;# 
  4386  0295                     	;# 
  4387  0296                     	;# 
  4388  0296                     	;# 
  4389  0297                     	;# 
  4390  0298                     	;# 
  4391  0298                     	;# 
  4392  0299                     	;# 
  4393  0299                     	;# 
  4394  029A                     	;# 
  4395  029B                     	;# 
  4396  029C                     	;# 
  4397  029C                     	;# 
  4398  029D                     	;# 
  4399  030C                     	;# 
  4400  030C                     	;# 
  4401  030D                     	;# 
  4402  030E                     	;# 
  4403  030F                     	;# 
  4404  0310                     	;# 
  4405  0310                     	;# 
  4406  0311                     	;# 
  4407  0312                     	;# 
  4408  0313                     	;# 
  4409  0314                     	;# 
  4410  0314                     	;# 
  4411  0315                     	;# 
  4412  0316                     	;# 
  4413  0317                     	;# 
  4414  0318                     	;# 
  4415  0318                     	;# 
  4416  0319                     	;# 
  4417  031A                     	;# 
  4418  031B                     	;# 
  4419  031C                     	;# 
  4420  031C                     	;# 
  4421  031D                     	;# 
  4422  031E                     	;# 
  4423  031F                     	;# 
  4424  038C                     	;# 
  4425  038D                     	;# 
  4426  038E                     	;# 
  4427  0390                     	;# 
  4428  0391                     	;# 
  4429  0392                     	;# 
  4430  040C                     	;# 
  4431  040D                     	;# 
  4432  040E                     	;# 
  4433  040F                     	;# 
  4434  0410                     	;# 
  4435  0411                     	;# 
  4436  0416                     	;# 
  4437  0416                     	;# 
  4438  0417                     	;# 
  4439  0418                     	;# 
  4440  0418                     	;# 
  4441  0419                     	;# 
  4442  041A                     	;# 
  4443  041A                     	;# 
  4444  041B                     	;# 
  4445  041C                     	;# 
  4446  041C                     	;# 
  4447  041D                     	;# 
  4448  041E                     	;# 
  4449  041F                     	;# 
  4450  048C                     	;# 
  4451  048C                     	;# 
  4452  048D                     	;# 
  4453  048E                     	;# 
  4454  048F                     	;# 
  4455  048F                     	;# 
  4456  0490                     	;# 
  4457  0491                     	;# 
  4458  0492                     	;# 
  4459  0492                     	;# 
  4460  0493                     	;# 
  4461  0494                     	;# 
  4462  0495                     	;# 
  4463  0495                     	;# 
  4464  0496                     	;# 
  4465  0497                     	;# 
  4466  0498                     	;# 
  4467  0499                     	;# 
  4468  049A                     	;# 
  4469  049B                     	;# 
  4470  049C                     	;# 
  4471  049D                     	;# 
  4472  050C                     	;# 
  4473  050C                     	;# 
  4474  050D                     	;# 
  4475  050E                     	;# 
  4476  050F                     	;# 
  4477  050F                     	;# 
  4478  0510                     	;# 
  4479  0511                     	;# 
  4480  0512                     	;# 
  4481  0512                     	;# 
  4482  0513                     	;# 
  4483  0514                     	;# 
  4484  0515                     	;# 
  4485  0515                     	;# 
  4486  0516                     	;# 
  4487  0517                     	;# 
  4488  0518                     	;# 
  4489  0519                     	;# 
  4490  051A                     	;# 
  4491  051B                     	;# 
  4492  051C                     	;# 
  4493  051D                     	;# 
  4494  058C                     	;# 
  4495  058C                     	;# 
  4496  058D                     	;# 
  4497  058E                     	;# 
  4498  058F                     	;# 
  4499  058F                     	;# 
  4500  0590                     	;# 
  4501  0591                     	;# 
  4502  0592                     	;# 
  4503  0593                     	;# 
  4504  060C                     	;# 
  4505  060D                     	;# 
  4506  060E                     	;# 
  4507  060F                     	;# 
  4508  0610                     	;# 
  4509  0611                     	;# 
  4510  0612                     	;# 
  4511  0613                     	;# 
  4512  0614                     	;# 
  4513  0616                     	;# 
  4514  0617                     	;# 
  4515  0618                     	;# 
  4516  0619                     	;# 
  4517  061A                     	;# 
  4518  061B                     	;# 
  4519  061C                     	;# 
  4520  061D                     	;# 
  4521  061E                     	;# 
  4522  068C                     	;# 
  4523  068D                     	;# 
  4524  068E                     	;# 
  4525  068F                     	;# 
  4526  0690                     	;# 
  4527  0691                     	;# 
  4528  0692                     	;# 
  4529  0693                     	;# 
  4530  0694                     	;# 
  4531  070C                     	;# 
  4532  070D                     	;# 
  4533  070E                     	;# 
  4534  070F                     	;# 
  4535  0710                     	;# 
  4536  0711                     	;# 
  4537  0712                     	;# 
  4538  0713                     	;# 
  4539  0714                     	;# 
  4540  0716                     	;# 
  4541  0717                     	;# 
  4542  0718                     	;# 
  4543  0719                     	;# 
  4544  071A                     	;# 
  4545  071B                     	;# 
  4546  071C                     	;# 
  4547  071D                     	;# 
  4548  071E                     	;# 
  4549  0796                     	;# 
  4550  0797                     	;# 
  4551  0798                     	;# 
  4552  0799                     	;# 
  4553  079A                     	;# 
  4554  079B                     	;# 
  4555  080C                     	;# 
  4556  080D                     	;# 
  4557  080E                     	;# 
  4558  080F                     	;# 
  4559  0810                     	;# 
  4560  0811                     	;# 
  4561  0812                     	;# 
  4562  0813                     	;# 
  4563  0814                     	;# 
  4564  081A                     	;# 
  4565  081B                     	;# 
  4566  081C                     	;# 
  4567  081D                     	;# 
  4568  081E                     	;# 
  4569  081F                     	;# 
  4570  088C                     	;# 
  4571  088D                     	;# 
  4572  088E                     	;# 
  4573  088F                     	;# 
  4574  0890                     	;# 
  4575  0891                     	;# 
  4576  0892                     	;# 
  4577  0893                     	;# 
  4578  0895                     	;# 
  4579  0896                     	;# 
  4580  0897                     	;# 
  4581  0898                     	;# 
  4582  0899                     	;# 
  4583  089A                     	;# 
  4584  089B                     	;# 
  4585  090C                     	;# 
  4586  090E                     	;# 
  4587  090F                     	;# 
  4588  091F                     	;# 
  4589  091F                     	;# 
  4590  098F                     	;# 
  4591  098F                     	;# 
  4592  0990                     	;# 
  4593  0991                     	;# 
  4594  0992                     	;# 
  4595  0993                     	;# 
  4596  0994                     	;# 
  4597  0995                     	;# 
  4598  0996                     	;# 
  4599  0997                     	;# 
  4600  0E0F                     	;# 
  4601  0E10                     	;# 
  4602  0E11                     	;# 
  4603  0E12                     	;# 
  4604  0E13                     	;# 
  4605  0E14                     	;# 
  4606  0E15                     	;# 
  4607  0E16                     	;# 
  4608  0E17                     	;# 
  4609  0E18                     	;# 
  4610  0E19                     	;# 
  4611  0E1A                     	;# 
  4612  0E1B                     	;# 
  4613  0E1C                     	;# 
  4614  0E1D                     	;# 
  4615  0E1E                     	;# 
  4616  0E1F                     	;# 
  4617  0E20                     	;# 
  4618  0E21                     	;# 
  4619  0E22                     	;# 
  4620  0E23                     	;# 
  4621  0E24                     	;# 
  4622  0E25                     	;# 
  4623  0E26                     	;# 
  4624  0E27                     	;# 
  4625  0E28                     	;# 
  4626  0E29                     	;# 
  4627  0E2A                     	;# 
  4628  0E2B                     	;# 
  4629  0E2C                     	;# 
  4630  0E2D                     	;# 
  4631  0E2E                     	;# 
  4632  0E2F                     	;# 
  4633  0E30                     	;# 
  4634  0E31                     	;# 
  4635  0E32                     	;# 
  4636  0E33                     	;# 
  4637  0E34                     	;# 
  4638  0E35                     	;# 
  4639  0E36                     	;# 
  4640  0E37                     	;# 
  4641  0E8F                     	;# 
  4642  0E90                     	;# 
  4643  0E91                     	;# 
  4644  0E92                     	;# 
  4645  0E93                     	;# 
  4646  0E94                     	;# 
  4647  0E95                     	;# 
  4648  0E96                     	;# 
  4649  0E97                     	;# 
  4650  0E9C                     	;# 
  4651  0E9D                     	;# 
  4652  0E9E                     	;# 
  4653  0EA1                     	;# 
  4654  0EA2                     	;# 
  4655  0EA3                     	;# 
  4656  0EA4                     	;# 
  4657  0EA5                     	;# 
  4658  0EA9                     	;# 
  4659  0EAA                     	;# 
  4660  0EAB                     	;# 
  4661  0EAC                     	;# 
  4662  0EB1                     	;# 
  4663  0EB2                     	;# 
  4664  0EB3                     	;# 
  4665  0EB8                     	;# 
  4666  0EB9                     	;# 
  4667  0EBA                     	;# 
  4668  0EBB                     	;# 
  4669  0EBC                     	;# 
  4670  0EBD                     	;# 
  4671  0EBE                     	;# 
  4672  0EC3                     	;# 
  4673  0EC5                     	;# 
  4674  0EC6                     	;# 
  4675  0EC7                     	;# 
  4676  0EC8                     	;# 
  4677  0EC9                     	;# 
  4678  0ECA                     	;# 
  4679  0ECB                     	;# 
  4680  0ECC                     	;# 
  4681  0F10                     	;# 
  4682  0F11                     	;# 
  4683  0F12                     	;# 
  4684  0F13                     	;# 
  4685  0F14                     	;# 
  4686  0F15                     	;# 
  4687  0F16                     	;# 
  4688  0F17                     	;# 
  4689  0F18                     	;# 
  4690  0F19                     	;# 
  4691  0F1A                     	;# 
  4692  0F1B                     	;# 
  4693  0F1C                     	;# 
  4694  0F1D                     	;# 
  4695  0F1E                     	;# 
  4696  0F1F                     	;# 
  4697  0F20                     	;# 
  4698  0F21                     	;# 
  4699  0F22                     	;# 
  4700  0F23                     	;# 
  4701  0F24                     	;# 
  4702  0F25                     	;# 
  4703  0F26                     	;# 
  4704  0F27                     	;# 
  4705  0F38                     	;# 
  4706  0F39                     	;# 
  4707  0F3A                     	;# 
  4708  0F3B                     	;# 
  4709  0F3C                     	;# 
  4710  0F3D                     	;# 
  4711  0F3E                     	;# 
  4712  0F3F                     	;# 
  4713  0F40                     	;# 
  4714  0F41                     	;# 
  4715  0F43                     	;# 
  4716  0F44                     	;# 
  4717  0F45                     	;# 
  4718  0F46                     	;# 
  4719  0F47                     	;# 
  4720  0F48                     	;# 
  4721  0F49                     	;# 
  4722  0F4A                     	;# 
  4723  0F4B                     	;# 
  4724  0F4C                     	;# 
  4725  0F4E                     	;# 
  4726  0F4F                     	;# 
  4727  0F50                     	;# 
  4728  0F51                     	;# 
  4729  0F52                     	;# 
  4730  0F53                     	;# 
  4731  0F54                     	;# 
  4732  0F55                     	;# 
  4733  0F56                     	;# 
  4734  0F57                     	;# 
  4735  0F65                     	;# 
  4736  0F68                     	;# 
  4737  0F69                     	;# 
  4738  0F6A                     	;# 
  4739  0F6B                     	;# 
  4740  0FE4                     	;# 
  4741  0FE5                     	;# 
  4742  0FE6                     	;# 
  4743  0FE7                     	;# 
  4744  0FE8                     	;# 
  4745  0FE9                     	;# 
  4746  0FEA                     	;# 
  4747  0FEB                     	;# 
  4748  0FED                     	;# 
  4749  0FEE                     	;# 
  4750  0FEF                     	;# 
  4751  0000                     	;# 
  4752  0001                     	;# 
  4753  0002                     	;# 
  4754  0003                     	;# 
  4755  0004                     	;# 
  4756  0005                     	;# 
  4757  0006                     	;# 
  4758  0007                     	;# 
  4759  0008                     	;# 
  4760  0009                     	;# 
  4761  000A                     	;# 
  4762  000B                     	;# 
  4763  000C                     	;# 
  4764  000D                     	;# 
  4765  000E                     	;# 
  4766  0010                     	;# 
  4767  0011                     	;# 
  4768  0012                     	;# 
  4769  0013                     	;# 
  4770  0016                     	;# 
  4771  0017                     	;# 
  4772  0018                     	;# 
  4773  001C                     	;# 
  4774  001C                     	;# 
  4775  001D                     	;# 
  4776  001D                     	;# 
  4777  001E                     	;# 
  4778  001F                     	;# 
  4779  008C                     	;# 
  4780  008C                     	;# 
  4781  008D                     	;# 
  4782  008E                     	;# 
  4783  008E                     	;# 
  4784  008F                     	;# 
  4785  0090                     	;# 
  4786  0090                     	;# 
  4787  0091                     	;# 
  4788  0093                     	;# 
  4789  0094                     	;# 
  4790  0095                     	;# 
  4791  0096                     	;# 
  4792  0097                     	;# 
  4793  0098                     	;# 
  4794  0099                     	;# 
  4795  009A                     	;# 
  4796  009B                     	;# 
  4797  009C                     	;# 
  4798  009D                     	;# 
  4799  009E                     	;# 
  4800  010C                     	;# 
  4801  010D                     	;# 
  4802  010E                     	;# 
  4803  010E                     	;# 
  4804  010F                     	;# 
  4805  0110                     	;# 
  4806  0110                     	;# 
  4807  0111                     	;# 
  4808  0112                     	;# 
  4809  0112                     	;# 
  4810  0113                     	;# 
  4811  0114                     	;# 
  4812  0114                     	;# 
  4813  0115                     	;# 
  4814  0116                     	;# 
  4815  0116                     	;# 
  4816  0117                     	;# 
  4817  0119                     	;# 
  4818  0119                     	;# 
  4819  0119                     	;# 
  4820  011A                     	;# 
  4821  011A                     	;# 
  4822  011A                     	;# 
  4823  011B                     	;# 
  4824  011B                     	;# 
  4825  011B                     	;# 
  4826  011B                     	;# 
  4827  011B                     	;# 
  4828  011C                     	;# 
  4829  011C                     	;# 
  4830  011C                     	;# 
  4831  011D                     	;# 
  4832  011D                     	;# 
  4833  011D                     	;# 
  4834  011E                     	;# 
  4835  011E                     	;# 
  4836  011E                     	;# 
  4837  011F                     	;# 
  4838  011F                     	;# 
  4839  011F                     	;# 
  4840  011F                     	;# 
  4841  011F                     	;# 
  4842  018C                     	;# 
  4843  018D                     	;# 
  4844  018E                     	;# 
  4845  018F                     	;# 
  4846  0190                     	;# 
  4847  0191                     	;# 
  4848  0192                     	;# 
  4849  0196                     	;# 
  4850  0197                     	;# 
  4851  0198                     	;# 
  4852  0199                     	;# 
  4853  019A                     	;# 
  4854  019B                     	;# 
  4855  019C                     	;# 
  4856  020C                     	;# 
  4857  020C                     	;# 
  4858  020D                     	;# 
  4859  020E                     	;# 
  4860  020F                     	;# 
  4861  020F                     	;# 
  4862  0210                     	;# 
  4863  0210                     	;# 
  4864  0211                     	;# 
  4865  0211                     	;# 
  4866  0212                     	;# 
  4867  0212                     	;# 
  4868  0213                     	;# 
  4869  0214                     	;# 
  4870  0215                     	;# 
  4871  0215                     	;# 
  4872  0216                     	;# 
  4873  0216                     	;# 
  4874  0217                     	;# 
  4875  0217                     	;# 
  4876  0218                     	;# 
  4877  0218                     	;# 
  4878  0219                     	;# 
  4879  021A                     	;# 
  4880  021B                     	;# 
  4881  021B                     	;# 
  4882  021C                     	;# 
  4883  021C                     	;# 
  4884  021D                     	;# 
  4885  021D                     	;# 
  4886  021E                     	;# 
  4887  021F                     	;# 
  4888  028C                     	;# 
  4889  028C                     	;# 
  4890  028D                     	;# 
  4891  028D                     	;# 
  4892  028E                     	;# 
  4893  028F                     	;# 
  4894  0290                     	;# 
  4895  0290                     	;# 
  4896  0291                     	;# 
  4897  0292                     	;# 
  4898  0292                     	;# 
  4899  0293                     	;# 
  4900  0293                     	;# 
  4901  0294                     	;# 
  4902  0295                     	;# 
  4903  0296                     	;# 
  4904  0296                     	;# 
  4905  0297                     	;# 
  4906  0298                     	;# 
  4907  0298                     	;# 
  4908  0299                     	;# 
  4909  0299                     	;# 
  4910  029A                     	;# 
  4911  029B                     	;# 
  4912  029C                     	;# 
  4913  029C                     	;# 
  4914  029D                     	;# 
  4915  030C                     	;# 
  4916  030C                     	;# 
  4917  030D                     	;# 
  4918  030E                     	;# 
  4919  030F                     	;# 
  4920  0310                     	;# 
  4921  0310                     	;# 
  4922  0311                     	;# 
  4923  0312                     	;# 
  4924  0313                     	;# 
  4925  0314                     	;# 
  4926  0314                     	;# 
  4927  0315                     	;# 
  4928  0316                     	;# 
  4929  0317                     	;# 
  4930  0318                     	;# 
  4931  0318                     	;# 
  4932  0319                     	;# 
  4933  031A                     	;# 
  4934  031B                     	;# 
  4935  031C                     	;# 
  4936  031C                     	;# 
  4937  031D                     	;# 
  4938  031E                     	;# 
  4939  031F                     	;# 
  4940  038C                     	;# 
  4941  038D                     	;# 
  4942  038E                     	;# 
  4943  0390                     	;# 
  4944  0391                     	;# 
  4945  0392                     	;# 
  4946  040C                     	;# 
  4947  040D                     	;# 
  4948  040E                     	;# 
  4949  040F                     	;# 
  4950  0410                     	;# 
  4951  0411                     	;# 
  4952  0416                     	;# 
  4953  0416                     	;# 
  4954  0417                     	;# 
  4955  0418                     	;# 
  4956  0418                     	;# 
  4957  0419                     	;# 
  4958  041A                     	;# 
  4959  041A                     	;# 
  4960  041B                     	;# 
  4961  041C                     	;# 
  4962  041C                     	;# 
  4963  041D                     	;# 
  4964  041E                     	;# 
  4965  041F                     	;# 
  4966  048C                     	;# 
  4967  048C                     	;# 
  4968  048D                     	;# 
  4969  048E                     	;# 
  4970  048F                     	;# 
  4971  048F                     	;# 
  4972  0490                     	;# 
  4973  0491                     	;# 
  4974  0492                     	;# 
  4975  0492                     	;# 
  4976  0493                     	;# 
  4977  0494                     	;# 
  4978  0495                     	;# 
  4979  0495                     	;# 
  4980  0496                     	;# 
  4981  0497                     	;# 
  4982  0498                     	;# 
  4983  0499                     	;# 
  4984  049A                     	;# 
  4985  049B                     	;# 
  4986  049C                     	;# 
  4987  049D                     	;# 
  4988  050C                     	;# 
  4989  050C                     	;# 
  4990  050D                     	;# 
  4991  050E                     	;# 
  4992  050F                     	;# 
  4993  050F                     	;# 
  4994  0510                     	;# 
  4995  0511                     	;# 
  4996  0512                     	;# 
  4997  0512                     	;# 
  4998  0513                     	;# 
  4999  0514                     	;# 
  5000  0515                     	;# 
  5001  0515                     	;# 
  5002  0516                     	;# 
  5003  0517                     	;# 
  5004  0518                     	;# 
  5005  0519                     	;# 
  5006  051A                     	;# 
  5007  051B                     	;# 
  5008  051C                     	;# 
  5009  051D                     	;# 
  5010  058C                     	;# 
  5011  058C                     	;# 
  5012  058D                     	;# 
  5013  058E                     	;# 
  5014  058F                     	;# 
  5015  058F                     	;# 
  5016  0590                     	;# 
  5017  0591                     	;# 
  5018  0592                     	;# 
  5019  0593                     	;# 
  5020  060C                     	;# 
  5021  060D                     	;# 
  5022  060E                     	;# 
  5023  060F                     	;# 
  5024  0610                     	;# 
  5025  0611                     	;# 
  5026  0612                     	;# 
  5027  0613                     	;# 
  5028  0614                     	;# 
  5029  0616                     	;# 
  5030  0617                     	;# 
  5031  0618                     	;# 
  5032  0619                     	;# 
  5033  061A                     	;# 
  5034  061B                     	;# 
  5035  061C                     	;# 
  5036  061D                     	;# 
  5037  061E                     	;# 
  5038  068C                     	;# 
  5039  068D                     	;# 
  5040  068E                     	;# 
  5041  068F                     	;# 
  5042  0690                     	;# 
  5043  0691                     	;# 
  5044  0692                     	;# 
  5045  0693                     	;# 
  5046  0694                     	;# 
  5047  070C                     	;# 
  5048  070D                     	;# 
  5049  070E                     	;# 
  5050  070F                     	;# 
  5051  0710                     	;# 
  5052  0711                     	;# 
  5053  0712                     	;# 
  5054  0713                     	;# 
  5055  0714                     	;# 
  5056  0716                     	;# 
  5057  0717                     	;# 
  5058  0718                     	;# 
  5059  0719                     	;# 
  5060  071A                     	;# 
  5061  071B                     	;# 
  5062  071C                     	;# 
  5063  071D                     	;# 
  5064  071E                     	;# 
  5065  0796                     	;# 
  5066  0797                     	;# 
  5067  0798                     	;# 
  5068  0799                     	;# 
  5069  079A                     	;# 
  5070  079B                     	;# 
  5071  080C                     	;# 
  5072  080D                     	;# 
  5073  080E                     	;# 
  5074  080F                     	;# 
  5075  0810                     	;# 
  5076  0811                     	;# 
  5077  0812                     	;# 
  5078  0813                     	;# 
  5079  0814                     	;# 
  5080  081A                     	;# 
  5081  081B                     	;# 
  5082  081C                     	;# 
  5083  081D                     	;# 
  5084  081E                     	;# 
  5085  081F                     	;# 
  5086  088C                     	;# 
  5087  088D                     	;# 
  5088  088E                     	;# 
  5089  088F                     	;# 
  5090  0890                     	;# 
  5091  0891                     	;# 
  5092  0892                     	;# 
  5093  0893                     	;# 
  5094  0895                     	;# 
  5095  0896                     	;# 
  5096  0897                     	;# 
  5097  0898                     	;# 
  5098  0899                     	;# 
  5099  089A                     	;# 
  5100  089B                     	;# 
  5101  090C                     	;# 
  5102  090E                     	;# 
  5103  090F                     	;# 
  5104  091F                     	;# 
  5105  091F                     	;# 
  5106  098F                     	;# 
  5107  098F                     	;# 
  5108  0990                     	;# 
  5109  0991                     	;# 
  5110  0992                     	;# 
  5111  0993                     	;# 
  5112  0994                     	;# 
  5113  0995                     	;# 
  5114  0996                     	;# 
  5115  0997                     	;# 
  5116  0E0F                     	;# 
  5117  0E10                     	;# 
  5118  0E11                     	;# 
  5119  0E12                     	;# 
  5120  0E13                     	;# 
  5121  0E14                     	;# 
  5122  0E15                     	;# 
  5123  0E16                     	;# 
  5124  0E17                     	;# 
  5125  0E18                     	;# 
  5126  0E19                     	;# 
  5127  0E1A                     	;# 
  5128  0E1B                     	;# 
  5129  0E1C                     	;# 
  5130  0E1D                     	;# 
  5131  0E1E                     	;# 
  5132  0E1F                     	;# 
  5133  0E20                     	;# 
  5134  0E21                     	;# 
  5135  0E22                     	;# 
  5136  0E23                     	;# 
  5137  0E24                     	;# 
  5138  0E25                     	;# 
  5139  0E26                     	;# 
  5140  0E27                     	;# 
  5141  0E28                     	;# 
  5142  0E29                     	;# 
  5143  0E2A                     	;# 
  5144  0E2B                     	;# 
  5145  0E2C                     	;# 
  5146  0E2D                     	;# 
  5147  0E2E                     	;# 
  5148  0E2F                     	;# 
  5149  0E30                     	;# 
  5150  0E31                     	;# 
  5151  0E32                     	;# 
  5152  0E33                     	;# 
  5153  0E34                     	;# 
  5154  0E35                     	;# 
  5155  0E36                     	;# 
  5156  0E37                     	;# 
  5157  0E8F                     	;# 
  5158  0E90                     	;# 
  5159  0E91                     	;# 
  5160  0E92                     	;# 
  5161  0E93                     	;# 
  5162  0E94                     	;# 
  5163  0E95                     	;# 
  5164  0E96                     	;# 
  5165  0E97                     	;# 
  5166  0E9C                     	;# 
  5167  0E9D                     	;# 
  5168  0E9E                     	;# 
  5169  0EA1                     	;# 
  5170  0EA2                     	;# 
  5171  0EA3                     	;# 
  5172  0EA4                     	;# 
  5173  0EA5                     	;# 
  5174  0EA9                     	;# 
  5175  0EAA                     	;# 
  5176  0EAB                     	;# 
  5177  0EAC                     	;# 
  5178  0EB1                     	;# 
  5179  0EB2                     	;# 
  5180  0EB3                     	;# 
  5181  0EB8                     	;# 
  5182  0EB9                     	;# 
  5183  0EBA                     	;# 
  5184  0EBB                     	;# 
  5185  0EBC                     	;# 
  5186  0EBD                     	;# 
  5187  0EBE                     	;# 
  5188  0EC3                     	;# 
  5189  0EC5                     	;# 
  5190  0EC6                     	;# 
  5191  0EC7                     	;# 
  5192  0EC8                     	;# 
  5193  0EC9                     	;# 
  5194  0ECA                     	;# 
  5195  0ECB                     	;# 
  5196  0ECC                     	;# 
  5197  0F10                     	;# 
  5198  0F11                     	;# 
  5199  0F12                     	;# 
  5200  0F13                     	;# 
  5201  0F14                     	;# 
  5202  0F15                     	;# 
  5203  0F16                     	;# 
  5204  0F17                     	;# 
  5205  0F18                     	;# 
  5206  0F19                     	;# 
  5207  0F1A                     	;# 
  5208  0F1B                     	;# 
  5209  0F1C                     	;# 
  5210  0F1D                     	;# 
  5211  0F1E                     	;# 
  5212  0F1F                     	;# 
  5213  0F20                     	;# 
  5214  0F21                     	;# 
  5215  0F22                     	;# 
  5216  0F23                     	;# 
  5217  0F24                     	;# 
  5218  0F25                     	;# 
  5219  0F26                     	;# 
  5220  0F27                     	;# 
  5221  0F38                     	;# 
  5222  0F39                     	;# 
  5223  0F3A                     	;# 
  5224  0F3B                     	;# 
  5225  0F3C                     	;# 
  5226  0F3D                     	;# 
  5227  0F3E                     	;# 
  5228  0F3F                     	;# 
  5229  0F40                     	;# 
  5230  0F41                     	;# 
  5231  0F43                     	;# 
  5232  0F44                     	;# 
  5233  0F45                     	;# 
  5234  0F46                     	;# 
  5235  0F47                     	;# 
  5236  0F48                     	;# 
  5237  0F49                     	;# 
  5238  0F4A                     	;# 
  5239  0F4B                     	;# 
  5240  0F4C                     	;# 
  5241  0F4E                     	;# 
  5242  0F4F                     	;# 
  5243  0F50                     	;# 
  5244  0F51                     	;# 
  5245  0F52                     	;# 
  5246  0F53                     	;# 
  5247  0F54                     	;# 
  5248  0F55                     	;# 
  5249  0F56                     	;# 
  5250  0F57                     	;# 
  5251  0F65                     	;# 
  5252  0F68                     	;# 
  5253  0F69                     	;# 
  5254  0F6A                     	;# 
  5255  0F6B                     	;# 
  5256  0FE4                     	;# 
  5257  0FE5                     	;# 
  5258  0FE6                     	;# 
  5259  0FE7                     	;# 
  5260  0FE8                     	;# 
  5261  0FE9                     	;# 
  5262  0FEA                     	;# 
  5263  0FEB                     	;# 
  5264  0FED                     	;# 
  5265  0FEE                     	;# 
  5266  0FEF                     	;_Isamples
  5267                           
  5268                           	psect	idataBANK0
  5269  0005                     __pidataBANK0:	
  5270                           
  5271                           ;initializer for _batteryTemp
  5272  0005  34FA               	retlw	250
  5273  0006  3400               	retlw	0
  5274                           
  5275                           	psect	idataBANK2
  5276  1E50                     __pidataBANK2:	
  5277                           
  5278                           ;initializer for _Vchannels
  5279  1E50  3415               	retlw	21
  5280  1E51  3400               	retlw	0
  5281  1E52  3411               	retlw	17
  5282  1E53  3400               	retlw	0
  5283  1E54  3417               	retlw	23
  5284  1E55  3400               	retlw	0
  5285  1E56  3413               	retlw	19
  5286  1E57  3400               	retlw	0
  5287                           
  5288                           ;initializer for _Ichannels
  5289  1E58  3414               	retlw	20
  5290  1E59  3400               	retlw	0
  5291  1E5A  3410               	retlw	16
  5292  1E5B  3400               	retlw	0
  5293  1E5C  3416               	retlw	22
  5294  1E5D  3400               	retlw	0
  5295  1E5E  3412               	retlw	18
  5296  1E5F  3400               	retlw	0
  5297                           
  5298                           	psect	stringtext1
  5299  1000                     __pstringtext1:	
  5300  1000                     _fonts:	
  5301  1000  3400               	retlw	0
  5302  1001  3400               	retlw	0
  5303  1002  3400               	retlw	0
  5304  1003  3400               	retlw	0
  5305  1004  344E               	retlw	78
  5306  1005  3400               	retlw	0
  5307  1006  3406               	retlw	6
  5308  1007  3400               	retlw	0
  5309  1008  3406               	retlw	6
  5310  1009  34FF               	retlw	255
  5311  100A  34FF               	retlw	255
  5312  100B  34FF               	retlw	255
  5313  100C  3448               	retlw	72
  5314  100D  34D6               	retlw	214
  5315  100E  3424               	retlw	36
  5316  100F  3412               	retlw	18
  5317  1010  3408               	retlw	8
  5318  1011  3424               	retlw	36
  5319  1012  34FF               	retlw	255
  5320  1013  34FF               	retlw	255
  5321  1014  34FF               	retlw	255
  5322  1015  3400               	retlw	0
  5323  1016  3406               	retlw	6
  5324  1017  3400               	retlw	0
  5325  1018  3438               	retlw	56
  5326  1019  3444               	retlw	68
  5327  101A  3482               	retlw	130
  5328  101B  3482               	retlw	130
  5329  101C  3444               	retlw	68
  5330  101D  3438               	retlw	56
  5331  101E  3414               	retlw	20
  5332  101F  3408               	retlw	8
  5333  1020  343E               	retlw	62
  5334  1021  3410               	retlw	16
  5335  1022  3438               	retlw	56
  5336  1023  3410               	retlw	16
  5337  1024  34A0               	retlw	160
  5338  1025  3460               	retlw	96
  5339  1026  3400               	retlw	0
  5340  1027  3410               	retlw	16
  5341  1028  3410               	retlw	16
  5342  1029  3410               	retlw	16
  5343  102A  3460               	retlw	96
  5344  102B  3460               	retlw	96
  5345  102C  3400               	retlw	0
  5346  102D  3460               	retlw	96
  5347  102E  3418               	retlw	24
  5348  102F  3406               	retlw	6
  5349  1030  347C               	retlw	124
  5350  1031  3442               	retlw	66
  5351  1032  347C               	retlw	124
  5352  1033  3444               	retlw	68
  5353  1034  347E               	retlw	126
  5354  1035  3440               	retlw	64
  5355  1036  3464               	retlw	100
  5356  1037  3452               	retlw	82
  5357  1038  344C               	retlw	76
  5358  1039  344A               	retlw	74
  5359  103A  344A               	retlw	74
  5360  103B  3434               	retlw	52
  5361  103C  3438               	retlw	56
  5362  103D  3424               	retlw	36
  5363  103E  347E               	retlw	126
  5364  103F  344E               	retlw	78
  5365  1040  344A               	retlw	74
  5366  1041  3432               	retlw	50
  5367  1042  343C               	retlw	60
  5368  1043  344A               	retlw	74
  5369  1044  3432               	retlw	50
  5370  1045  3462               	retlw	98
  5371  1046  341A               	retlw	26
  5372  1047  3406               	retlw	6
  5373  1048  3476               	retlw	118
  5374  1049  344A               	retlw	74
  5375  104A  3476               	retlw	118
  5376  104B  344C               	retlw	76
  5377  104C  3452               	retlw	82
  5378  104D  343C               	retlw	60
  5379  104E  346C               	retlw	108
  5380  104F  346C               	retlw	108
  5381  1050  3400               	retlw	0
  5382  1051  34AC               	retlw	172
  5383  1052  346C               	retlw	108
  5384  1053  3400               	retlw	0
  5385  1054  3410               	retlw	16
  5386  1055  3428               	retlw	40
  5387  1056  3444               	retlw	68
  5388  1057  3428               	retlw	40
  5389  1058  3428               	retlw	40
  5390  1059  3428               	retlw	40
  5391  105A  3444               	retlw	68
  5392  105B  3428               	retlw	40
  5393  105C  3410               	retlw	16
  5394  105D  3402               	retlw	2
  5395  105E  3459               	retlw	89
  5396  105F  3406               	retlw	6
  5397  1060  34FF               	retlw	255
  5398  1061  34FF               	retlw	255
  5399  1062  34FF               	retlw	255
  5400  1063  347C               	retlw	124
  5401  1064  3412               	retlw	18
  5402  1065  347C               	retlw	124
  5403  1066  347E               	retlw	126
  5404  1067  345A               	retlw	90
  5405  1068  3434               	retlw	52
  5406  1069  343C               	retlw	60
  5407  106A  3442               	retlw	66
  5408  106B  3442               	retlw	66
  5409  106C  347E               	retlw	126
  5410  106D  3442               	retlw	66
  5411  106E  343C               	retlw	60
  5412  106F  347E               	retlw	126
  5413  1070  344A               	retlw	74
  5414  1071  3442               	retlw	66
  5415  1072  347E               	retlw	126
  5416  1073  340A               	retlw	10
  5417  1074  340A               	retlw	10
  5418  1075  343C               	retlw	60
  5419  1076  3452               	retlw	82
  5420  1077  3434               	retlw	52
  5421  1078  347E               	retlw	126
  5422  1079  3408               	retlw	8
  5423  107A  347E               	retlw	126
  5424  107B  3442               	retlw	66
  5425  107C  347E               	retlw	126
  5426  107D  3442               	retlw	66
  5427  107E  3430               	retlw	48
  5428  107F  3440               	retlw	64
  5429  1080  343E               	retlw	62
  5430  1081  347E               	retlw	126
  5431  1082  3418               	retlw	24
  5432  1083  3466               	retlw	102
  5433  1084  347E               	retlw	126
  5434  1085  3440               	retlw	64
  5435  1086  3440               	retlw	64
  5436  1087  347E               	retlw	126
  5437  1088  341C               	retlw	28
  5438  1089  347E               	retlw	126
  5439  108A  347E               	retlw	126
  5440  108B  3402               	retlw	2
  5441  108C  347E               	retlw	126
  5442  108D  343C               	retlw	60
  5443  108E  3442               	retlw	66
  5444  108F  343C               	retlw	60
  5445  1090  347E               	retlw	126
  5446  1091  3412               	retlw	18
  5447  1092  340C               	retlw	12
  5448  1093  347E               	retlw	126
  5449  1094  3462               	retlw	98
  5450  1095  34FE               	retlw	254
  5451  1096  347E               	retlw	126
  5452  1097  3432               	retlw	50
  5453  1098  344E               	retlw	78
  5454  1099  3444               	retlw	68
  5455  109A  344A               	retlw	74
  5456  109B  3432               	retlw	50
  5457  109C  3402               	retlw	2
  5458  109D  347E               	retlw	126
  5459  109E  3402               	retlw	2
  5460  109F  347E               	retlw	126
  5461  10A0  3440               	retlw	64
  5462  10A1  347E               	retlw	126
  5463  10A2  343E               	retlw	62
  5464  10A3  3440               	retlw	64
  5465  10A4  343E               	retlw	62
  5466  10A5  347E               	retlw	126
  5467  10A6  3438               	retlw	56
  5468  10A7  347E               	retlw	126
  5469  10A8  3466               	retlw	102
  5470  10A9  3418               	retlw	24
  5471  10AA  3466               	retlw	102
  5472  10AB  340E               	retlw	14
  5473  10AC  3470               	retlw	112
  5474  10AD  340E               	retlw	14
  5475  10AE  3462               	retlw	98
  5476  10AF  345A               	retlw	90
  5477  10B0  3446               	retlw	70
  5478  10B1  3400               	retlw	0
  5479  10B2  347E               	retlw	126
  5480  10B3  3442               	retlw	66
  5481  10B4  3406               	retlw	6
  5482  10B5  3418               	retlw	24
  5483  10B6  3460               	retlw	96
  5484  10B7  3442               	retlw	66
  5485  10B8  347E               	retlw	126
  5486  10B9  3400               	retlw	0
  5487  10BA  3404               	retlw	4
  5488  10BB  3402               	retlw	2
  5489  10BC  3404               	retlw	4
  5490  10BD  3440               	retlw	64
  5491  10BE  3440               	retlw	64
  5492  10BF  3440               	retlw	64
  5493  10C0  3400               	retlw	0
  5494  10C1  3402               	retlw	2
  5495  10C2  3404               	retlw	4
  5496  10C3  3474               	retlw	116
  5497  10C4  3454               	retlw	84
  5498  10C5  3478               	retlw	120
  5499  10C6  347E               	retlw	126
  5500  10C7  3448               	retlw	72
  5501  10C8  3430               	retlw	48
  5502  10C9  3430               	retlw	48
  5503  10CA  3448               	retlw	72
  5504  10CB  3448               	retlw	72
  5505  10CC  3430               	retlw	48
  5506  10CD  3448               	retlw	72
  5507  10CE  347E               	retlw	126
  5508  10CF  3438               	retlw	56
  5509  10D0  3454               	retlw	84
  5510  10D1  3458               	retlw	88
  5511  10D2  347C               	retlw	124
  5512  10D3  340A               	retlw	10
  5513  10D4  3402               	retlw	2
  5514  10D5  3498               	retlw	152
  5515  10D6  34A4               	retlw	164
  5516  10D7  347C               	retlw	124
  5517  10D8  347E               	retlw	126
  5518  10D9  3408               	retlw	8
  5519  10DA  3470               	retlw	112
  5520  10DB  3448               	retlw	72
  5521  10DC  347A               	retlw	122
  5522  10DD  3440               	retlw	64
  5523  10DE  3488               	retlw	136
  5524  10DF  34FA               	retlw	250
  5525  10E0  3400               	retlw	0
  5526  10E1  347E               	retlw	126
  5527  10E2  3418               	retlw	24
  5528  10E3  3464               	retlw	100
  5529  10E4  3442               	retlw	66
  5530  10E5  347E               	retlw	126
  5531  10E6  3440               	retlw	64
  5532  10E7  347C               	retlw	124
  5533  10E8  3438               	retlw	56
  5534  10E9  347C               	retlw	124
  5535  10EA  347C               	retlw	124
  5536  10EB  3404               	retlw	4
  5537  10EC  3478               	retlw	120
  5538  10ED  3438               	retlw	56
  5539  10EE  3444               	retlw	68
  5540  10EF  3438               	retlw	56
  5541  10F0  34FC               	retlw	252
  5542  10F1  3424               	retlw	36
  5543  10F2  3418               	retlw	24
  5544  10F3  3418               	retlw	24
  5545  10F4  3424               	retlw	36
  5546  10F5  34FC               	retlw	252
  5547  10F6  3478               	retlw	120
  5548  10F7  3404               	retlw	4
  5549  10F8  3404               	retlw	4
  5550  10F9  3448               	retlw	72
  5551  10FA  3454               	retlw	84
  5552  10FB  3424               	retlw	36
  5553  10FC  3404               	retlw	4
  5554  10FD  343E               	retlw	62
  5555  10FE  3444               	retlw	68
  5556  10FF  347C               	retlw	124
  5557  1100  3440               	retlw	64
  5558  1101  347C               	retlw	124
  5559  1102  343C               	retlw	60
  5560  1103  3440               	retlw	64
  5561  1104  343C               	retlw	60
  5562  1105  347C               	retlw	124
  5563  1106  3430               	retlw	48
  5564  1107  347C               	retlw	124
  5565  1108  346C               	retlw	108
  5566  1109  3410               	retlw	16
  5567  110A  346C               	retlw	108
  5568  110B  349C               	retlw	156
  5569  110C  34A0               	retlw	160
  5570  110D  347C               	retlw	124
  5571  110E  3464               	retlw	100
  5572  110F  3454               	retlw	84
  5573  1110  344C               	retlw	76
  5574  1111  340C               	retlw	12
  5575  1112  3412               	retlw	18
  5576  1113  340C               	retlw	12
  5577  1114  34FF               	retlw	255
  5578  1115  34FF               	retlw	255
  5579  1116  34FF               	retlw	255
  5580  1117  34FF               	retlw	255
  5581  1118  34FF               	retlw	255
  5582  1119  34FF               	retlw	255
  5583  111A  34FF               	retlw	255
  5584  111B  34FF               	retlw	255
  5585  111C  34FF               	retlw	255
  5586  111D  34FF               	retlw	255
  5587  111E  34FF               	retlw	255
  5588  111F  34FF               	retlw	255
  5589  1120  34FF               	retlw	255
  5590  1121  34FF               	retlw	255
  5591  1122  34FF               	retlw	255
  5592  1123  34FF               	retlw	255
  5593  1124  34FF               	retlw	255
  5594  1125  34FF               	retlw	255
  5595  1126  34FC               	retlw	252
  5596  1127  3440               	retlw	64
  5597  1128  347C               	retlw	124
  5598  1129  34FF               	retlw	255
  5599  112A  34FF               	retlw	255
  5600  112B  34FF               	retlw	255
  5601  112C  34FF               	retlw	255
  5602  112D  34FF               	retlw	255
  5603  112E  34FF               	retlw	255
  5604  112F                     __end_of_fonts:	
  5605                           
  5606                           	psect	stringtext2
  5607  1800                     __pstringtext2:	
  5608  1800                     log@coeff:	
  5609  1800  3400               	retlw	0
  5610  1801  3400               	retlw	0
  5611  1802  3400               	retlw	0
  5612  1803  3400               	retlw	0
  5613  1804  3480               	retlw	128
  5614  1805  343F               	retlw	63
  5615  1806  34F0               	retlw	240
  5616  1807  34FF               	retlw	255
  5617  1808  34BE               	retlw	190
  5618  1809  34E2               	retlw	226
  5619  180A  34A9               	retlw	169
  5620  180B  343E               	retlw	62
  5621  180C  3483               	retlw	131
  5622  180D  3476               	retlw	118
  5623  180E  34BE               	retlw	190
  5624  180F  34AE               	retlw	174
  5625  1810  342B               	retlw	43
  5626  1811  343E               	retlw	62
  5627  1812  343C               	retlw	60
  5628  1813  34C3               	retlw	195
  5629  1814  34BD               	retlw	189
  5630  1815  34D2               	retlw	210
  5631  1816  3413               	retlw	19
  5632  1817  343D               	retlw	61
  5633  1818  3478               	retlw	120
  5634  1819  34D3               	retlw	211
  5635  181A  34BB               	retlw	187
  5636  181B                     __end_oflog@coeff:	
  5637  0013                     _TRISC	set	19
  5638  0012                     _TRISB	set	18
  5639  0011                     _TRISA	set	17
  5640  0018                     _LATC	set	24
  5641  0017                     _LATB	set	23
  5642  0016                     _LATA	set	22
  5643  0016                     _LATAbits	set	22
  5644  0011                     _TRISAbits	set	17
  5645  00B5                     _LATA5	set	181
  5646  006A                     _RB2	set	106
  5647  005F                     _GIE	set	95
  5648  0093                     _ADCON0	set	147
  5649  009D                     _ADACQ	set	157
  5650  009C                     _ADPRE	set	156
  5651  009B                     _ADCAP	set	155
  5652  009A                     _ADREF	set	154
  5653  0098                     _ADCLK	set	152
  5654  0097                     _ADSTAT	set	151
  5655  0099                     _ADACT	set	153
  5656  0096                     _ADCON3	set	150
  5657  0095                     _ADCON2	set	149
  5658  0094                     _ADCON1	set	148
  5659  008C                     _ADRESL	set	140
  5660  008D                     _ADRESH	set	141
  5661  0093                     _ADCON0bits	set	147
  5662  009E                     _ADPCH	set	158
  5663  0113                     _ADSTPTH	set	275
  5664  0112                     _ADSTPTL	set	274
  5665  0111                     _ADUTHH	set	273
  5666  0110                     _ADUTHL	set	272
  5667  010F                     _ADLTHH	set	271
  5668  010E                     _ADLTHL	set	270
  5669  010D                     _ADRPT	set	269
  5670  021E                     _CCPTMRS0bits	set	542
  5671  021F                     _CCPTMRS1bits	set	543
  5672  0294                     _T4CONbits	set	660
  5673  0292                     _T4TMR	set	658
  5674  0293                     _T4PR	set	659
  5675  0297                     _T4RST	set	663
  5676  0295                     _T4HLT	set	661
  5677  0296                     _T4CLKCON	set	662
  5678  0294                     _T4CON	set	660
  5679  028E                     _T2CONbits	set	654
  5680  028C                     _T2TMR	set	652
  5681  028D                     _T2PR	set	653
  5682  0291                     _T2RST	set	657
  5683  028F                     _T2HLT	set	655
  5684  0290                     _T2CLKCON	set	656
  5685  028E                     _T2CON	set	654
  5686  030C                     _CCPR1L	set	780
  5687  030D                     _CCPR1H	set	781
  5688  030E                     _CCP1CONbits	set	782
  5689  0390                     _PWM7DCL	set	912
  5690  0391                     _PWM7DCH	set	913
  5691  0392                     _PWM7CON	set	914
  5692  038C                     _PWM6DCL	set	908
  5693  038D                     _PWM6DCH	set	909
  5694  038E                     _PWM6CON	set	910
  5695  0710                     _PIR4bits	set	1808
  5696  0716                     _PIE0bits	set	1814
  5697  0892                     _OSCTUNE	set	2194
  5698  0893                     _OSCFRQ	set	2195
  5699  0891                     _OSCEN	set	2193
  5700  088F                     _OSCCON3	set	2191
  5701  088D                     _OSCCON1	set	2189
  5702  090C                     _FVRCON	set	2316
  5703  0E8F                     _PPSLOCKbits	set	3727
  5704  0E8F                     _PPSLOCK	set	3727
  5705  0F18                     _RB0PPS	set	3864
  5706  0F17                     _RA7PPS	set	3863
  5707  0F16                     _RA6PPS	set	3862
  5708  0F4E                     _ANSELC	set	3918
  5709  0F43                     _ANSELB	set	3907
  5710  0F38                     _ANSELA	set	3896
  5711  0F65                     _WPUE	set	3941
  5712  0F4F                     _WPUC	set	3919
  5713  0F44                     _WPUB	set	3908
  5714  0F39                     _WPUA	set	3897
  5715                           
  5716                           ; #config settings
  5717  0000                     
  5718                           	psect	cinit
  5719  07B1                     start_initialization:	
  5720  07B1                     __initialization:		;BIGRAM
  5721                           
  5722                           ; Initialize objects allocated to BANK0
  5723  07B1  3180  2005  3187   	fcall	__pidataBANK0	;fetch initializer
  5724  07B4  00ED               	movwf	__pdataBANK0& (0+127)
  5725  07B5  3180  2006  3187   	fcall	__pidataBANK0+1	;fetch initializer
  5726  07B8  00EE               	movwf	(__pdataBANK0+1)& (0+127)
  5727                           
  5728                           ; Initialize objects allocated to BANK2
  5729  07B9  3050               	movlw	low __pidataBANK2
  5730  07BA  0084               	movwf	4
  5731  07BB  309E               	movlw	(high __pidataBANK2)| (0+128)
  5732  07BC  0085               	movwf	5
  5733  07BD  3059               	movlw	low __pdataBANK2
  5734  07BE  0086               	movwf	6
  5735  07BF  3001               	movlw	high __pdataBANK2
  5736  07C0  0087               	movwf	7
  5737  07C1  3000               	movlw	0
  5738  07C2  00FF               	movwf	btemp+1
  5739  07C3  3010               	movlw	16
  5740  07C4  319E  2628  3187   	fcall	init_ram
  5741                           
  5742                           ; Clear objects allocated to BIGRAM
  5743  07C7  3060               	movlw	low (0+8800)
  5744  07C8  0084               	movwf	4
  5745  07C9  3022               	movlw	high (0+8800)
  5746  07CA  0085               	movwf	5
  5747  07CB  3090               	movlw	144
  5748  07CC  00FE               	movwf	btemp
  5749  07CD  3001               	movlw	1
  5750  07CE  00FF               	movwf	btemp+1
  5751  07CF  319E  261C  3187   	fcall	clear_ram0
  5752                           
  5753                           ; Clear objects allocated to BANK0
  5754  07D2  305E               	movlw	low __pbssBANK0
  5755  07D3  0084               	movwf	4
  5756  07D4  3000               	movlw	high __pbssBANK0
  5757  07D5  0085               	movwf	5
  5758  07D6  300F               	movlw	15
  5759  07D7  00FE               	movwf	btemp
  5760  07D8  3000               	movlw	0
  5761  07D9  00FF               	movwf	btemp+1
  5762  07DA  319E  261C  3187   	fcall	clear_ram0
  5763                           
  5764                           ; Clear objects allocated to BANK1
  5765  07DD  30A0               	movlw	low __pbssBANK1
  5766  07DE  0084               	movwf	4
  5767  07DF  3000               	movlw	high __pbssBANK1
  5768  07E0  0085               	movwf	5
  5769  07E1  302A               	movlw	42
  5770  07E2  00FE               	movwf	btemp
  5771  07E3  3000               	movlw	0
  5772  07E4  00FF               	movwf	btemp+1
  5773  07E5  319E  261C  3187   	fcall	clear_ram0
  5774                           
  5775                           ; Clear objects allocated to BANK2
  5776  07E8  3020               	movlw	low __pbssBANK2
  5777  07E9  0084               	movwf	4
  5778  07EA  3001               	movlw	high __pbssBANK2
  5779  07EB  0085               	movwf	5
  5780  07EC  3039               	movlw	57
  5781  07ED  00FE               	movwf	btemp
  5782  07EE  3000               	movlw	0
  5783  07EF  00FF               	movwf	btemp+1
  5784  07F0  319E  261C  3187   	fcall	clear_ram0
  5785                           
  5786                           ; Clear objects allocated to BANK3
  5787  07F3  30A0               	movlw	low __pbssBANK3
  5788  07F4  0084               	movwf	4
  5789  07F5  3001               	movlw	high __pbssBANK3
  5790  07F6  0085               	movwf	5
  5791  07F7  3028               	movlw	40
  5792  07F8  00FE               	movwf	btemp
  5793  07F9  3000               	movlw	0
  5794  07FA  00FF               	movwf	btemp+1
  5795  07FB  319E  261C         	fcall	clear_ram0
  5796  07FD                     end_of_initialization:	
  5797                           ;End of C runtime variable initialization code
  5798                           
  5799  07FD                     __end_of__initialization:	
  5800  07FD  0020               	movlb	0
  5801  07FE  3180  2843         	ljmp	_main	;jump to C main() function
  5802                           
  5803                           	psect	bssBANK0
  5804  005E                     __pbssBANK0:	
  5805  005E                     _readButtons:	
  5806  005E                     	ds	2
  5807  0060                     _VHoldMode:	
  5808  0060                     	ds	2
  5809  0062                     _Imode:	
  5810  0062                     	ds	2
  5811  0064                     _batteryState:	
  5812  0064                     	ds	2
  5813  0066                     _IsampleIndex:	
  5814  0066                     	ds	2
  5815  0068                     _j:	
  5816  0068                     	ds	1
  5817  0069                     _lastButton:	
  5818  0069                     	ds	1
  5819  006A                     _button:	
  5820  006A                     	ds	1
  5821  006B                     _otherState:	
  5822  006B                     	ds	1
  5823  006C                     _x:	
  5824  006C                     	ds	1
  5825                           
  5826                           	psect	dataBANK0
  5827  006D                     __pdataBANK0:	
  5828  006D                     _batteryTemp:	
  5829  006D                     	ds	2
  5830                           
  5831                           	psect	bssBANK1
  5832  00A0                     __pbssBANK1:	
  5833  00A0                     _voltage:	
  5834  00A0                     	ds	8
  5835  00A8                     _current:	
  5836  00A8                     	ds	8
  5837  00B0                     _Vref:	
  5838  00B0                     	ds	4
  5839  00B4                     _stateCounter:	
  5840  00B4                     	ds	4
  5841  00B8                     _Iref:	
  5842  00B8                     	ds	4
  5843  00BC                     _IminCount:	
  5844  00BC                     	ds	4
  5845  00C0                     _errno:	
  5846  00C0                     	ds	2
  5847  00C2                     _floatCount:	
  5848  00C2                     	ds	2
  5849  00C4                     _Iout:	
  5850  00C4                     	ds	2
  5851  00C6                     _cc_cv:	
  5852  00C6                     	ds	2
  5853  00C8                     _VsampleIndex:	
  5854  00C8                     	ds	2
  5855                           
  5856                           	psect	bssBANK2
  5857  0120                     __pbssBANK2:	
  5858  0120                     _Vtotals:	
  5859  0120                     	ds	16
  5860  0130                     _Itotals:	
  5861  0130                     	ds	16
  5862  0140                     _Ianalogs:	
  5863  0140                     	ds	8
  5864  0148                     _Vanalogs:	
  5865  0148                     	ds	8
  5866  0150                     LCDWriteInt@F14392:	
  5867  0150                     	ds	5
  5868  0155                     _Imin:	
  5869  0155                     	ds	4
  5870                           
  5871                           	psect	dataBANK2
  5872  0159                     __pdataBANK2:	
  5873  0159                     _Vchannels:	
  5874  0159                     	ds	8
  5875  0161                     _Ichannels:	
  5876  0161                     	ds	8
  5877                           
  5878                           	psect	bssBANK3
  5879  01A0                     __pbssBANK3:	
  5880  01A0                     _Vsamples:	
  5881  01A0                     	ds	40
  5882                           
  5883                           	psect	inittext
  5884  1E28                     init_ram:	
  5885  1E28  00FE               	movwf	126
  5886  1E29                     initloop:	
  5887  1E29  0012               	moviw fsr0++
  5888  1E2A  001E               	movwi fsr1++
  5889  1E2B  3001               	movlw	1
  5890  1E2C  02FE               	subwf	126,f
  5891  1E2D  3000               	movlw	0
  5892  1E2E  3BFF               	subwfb	127,f
  5893  1E2F  087F               	movf	127,w
  5894  1E30  047E               	iorwf	126,w
  5895  1E31  1903               	btfsc	3,2
  5896  1E32  3400               	retlw	0
  5897  1E33  2E29               	goto	initloop
  5898                           
  5899                           	psect	clrtext
  5900  1E1C                     clear_ram0:	
  5901                           ;	Called with FSR0 containing the base address, and
  5902                           ;	btemp/btemp+1 has the size to clear
  5903                           
  5904  1E1C  0064               	clrwdt	;clear the watchdog before getting into this loop
  5905  1E1D                     clrloop0:	
  5906  1E1D  0180               	clrf	0	;clear RAM location pointed to by FSR
  5907  1E1E  3101               	addfsr 0,1
  5908  1E1F  3001               	movlw	1
  5909  1E20  02FE               	subwf	126,f
  5910  1E21  3000               	movlw	0
  5911  1E22  3BFF               	subwfb	127,f
  5912  1E23  087F               	movf	127,w
  5913  1E24  047E               	iorwf	126,w
  5914  1E25  1903               	btfsc	3,2
  5915  1E26  3400               	retlw	0	;all done for this memory range, return
  5916  1E27  2E1D               	goto	clrloop0	;have we reached the end yet?
  5917                           
  5918                           	psect	cstackBANK1
  5919  00CA                     __pcstackBANK1:	
  5920  00CA                     main@efficiency:	
  5921                           
  5922                           ; 3 bytes @ 0x0
  5923  00CA                     	ds	3
  5924  00CD                     main@fastLoop:	
  5925                           
  5926                           ; 1 bytes @ 0x3
  5927  00CD                     	ds	1
  5928  00CE                     main@faultCount:	
  5929                           
  5930                           ; 2 bytes @ 0x4
  5931  00CE                     	ds	2
  5932  00D0                     main@faultNotReset:	
  5933                           
  5934                           ; 2 bytes @ 0x6
  5935  00D0                     	ds	2
  5936  00D2                     main@tempVoltage:	
  5937                           
  5938                           ; 8 bytes @ 0x8
  5939  00D2                     	ds	8
  5940  00DA                     main@displayRefresh:	
  5941                           
  5942                           ; 1 bytes @ 0x10
  5943  00DA                     	ds	1
  5944  00DB                     main@slowLoop:	
  5945                           
  5946                           ; 1 bytes @ 0x11
  5947  00DB                     	ds	1
  5948  00DC                     main@MPPT0:	
  5949                           
  5950                           ; 2 bytes @ 0x12
  5951  00DC                     	ds	2
  5952  00DE                     main@MPPT1:	
  5953                           
  5954                           ; 2 bytes @ 0x14
  5955  00DE                     	ds	2
  5956  00E0                     main@largerIOut:	
  5957                           
  5958                           ; 2 bytes @ 0x16
  5959  00E0                     	ds	2
  5960  00E2                     main@menuButton:	
  5961                           
  5962                           ; 1 bytes @ 0x18
  5963  00E2                     	ds	1
  5964  00E3                     main@dutyCycle1:	
  5965                           
  5966                           ; 2 bytes @ 0x19
  5967  00E3                     	ds	2
  5968  00E5                     main@tempFanOutput:	
  5969                           
  5970                           ; 2 bytes @ 0x1B
  5971  00E5                     	ds	2
  5972  00E7                     _main$1305:	
  5973                           
  5974                           ; 3 bytes @ 0x1D
  5975  00E7                     	ds	3
  5976  00EA                     main@dutyCycle6:	
  5977                           
  5978                           ; 2 bytes @ 0x20
  5979  00EA                     	ds	2
  5980  00EC                     main@dutyCycle7:	
  5981                           
  5982                           ; 2 bytes @ 0x22
  5983  00EC                     	ds	2
  5984  00EE                     main@j:	
  5985                           
  5986                           ; 1 bytes @ 0x24
  5987  00EE                     	ds	1
  5988                           
  5989                           	psect	cstackCOMMON
  5990  0070                     __pcstackCOMMON:	
  5991  0070                     ?_LCDWrite:	
  5992  0070                     ?_OSCILLATOR_Initialize:	
  5993                           ; 1 bytes @ 0x0
  5994                           
  5995  0070                     ??_OSCILLATOR_Initialize:	
  5996                           ; 1 bytes @ 0x0
  5997                           
  5998  0070                     ?_TMR2_Initialize:	
  5999                           ; 1 bytes @ 0x0
  6000                           
  6001  0070                     ??_TMR2_Initialize:	
  6002                           ; 1 bytes @ 0x0
  6003                           
  6004  0070                     ?_TMR4_Initialize:	
  6005                           ; 1 bytes @ 0x0
  6006                           
  6007  0070                     ??_TMR4_Initialize:	
  6008                           ; 1 bytes @ 0x0
  6009                           
  6010  0070                     ?_calculateCurrent0:	
  6011                           ; 1 bytes @ 0x0
  6012                           
  6013  0070                     ?_calculateCurrent2:	
  6014                           ; 1 bytes @ 0x0
  6015                           
  6016  0070                     ??_calculateCurrent2:	
  6017                           ; 1 bytes @ 0x0
  6018                           
  6019  0070                     ?_calculateCurrent3:	
  6020                           ; 1 bytes @ 0x0
  6021                           
  6022  0070                     ?_ADC_Initialize:	
  6023                           ; 1 bytes @ 0x0
  6024                           
  6025  0070                     ??_ADC_Initialize:	
  6026                           ; 1 bytes @ 0x0
  6027                           
  6028  0070                     ?_Init_Battery_State_Machine:	
  6029                           ; 1 bytes @ 0x0
  6030                           
  6031  0070                     ?_Battery_State_Machine:	
  6032                           ; 1 bytes @ 0x0
  6033                           
  6034  0070                     ?_cc_cv_mode:	
  6035                           ; 1 bytes @ 0x0
  6036                           
  6037  0070                     ?_readButton:	
  6038                           ; 1 bytes @ 0x0
  6039                           
  6040  0070                     ?_LCDWriteCharacter:	
  6041                           ; 1 bytes @ 0x0
  6042                           
  6043  0070                     ?_LCDClear:	
  6044                           ; 1 bytes @ 0x0
  6045                           
  6046  0070                     ?_LCDInit:	
  6047                           ; 1 bytes @ 0x0
  6048                           
  6049  0070                     ?_PIN_MANAGER_Initialize:	
  6050                           ; 1 bytes @ 0x0
  6051                           
  6052  0070                     ??_PIN_MANAGER_Initialize:	
  6053                           ; 1 bytes @ 0x0
  6054                           
  6055  0070                     ?_PWM_Initialize:	
  6056                           ; 1 bytes @ 0x0
  6057                           
  6058  0070                     ??_PWM_Initialize:	
  6059                           ; 1 bytes @ 0x0
  6060                           
  6061  0070                     ?_PWM6_LoadDutyValue:	
  6062                           ; 1 bytes @ 0x0
  6063                           
  6064  0070                     ?_PWM7_LoadDutyValue:	
  6065                           ; 1 bytes @ 0x0
  6066                           
  6067  0070                     ?_PWM1_LoadDutyValue:	
  6068                           ; 1 bytes @ 0x0
  6069                           
  6070  0070                     ?_SYSTEM_Initialize:	
  6071                           ; 1 bytes @ 0x0
  6072                           
  6073  0070                     ?_main:	
  6074                           ; 1 bytes @ 0x0
  6075                           
  6076  0070                     ?___bmul:	
  6077                           ; 1 bytes @ 0x0
  6078                           
  6079  0070                     ?_ADCRead:	
  6080                           ; 1 bytes @ 0x0
  6081                           
  6082  0070                     ?___wmul:	
  6083                           ; 2 bytes @ 0x0
  6084                           
  6085  0070                     ?___awdiv:	
  6086                           ; 2 bytes @ 0x0
  6087                           
  6088  0070                     ?___lwmod:	
  6089                           ; 2 bytes @ 0x0
  6090                           
  6091  0070                     ?___ftpack:	
  6092                           ; 2 bytes @ 0x0
  6093                           
  6094  0070                     ?_frexp:	
  6095                           ; 3 bytes @ 0x0
  6096                           
  6097  0070                     ?___aldiv:	
  6098                           ; 3 bytes @ 0x0
  6099                           
  6100  0070                     LCDWrite@data:	
  6101                           ; 4 bytes @ 0x0
  6102                           
  6103  0070                     PIN_MANAGER_Initialize@state:	
  6104                           ; 1 bytes @ 0x0
  6105                           
  6106  0070                     ___bmul@multiplicand:	
  6107                           ; 1 bytes @ 0x0
  6108                           
  6109  0070                     PWM6_LoadDutyValue@dutyCycle6:	
  6110                           ; 1 bytes @ 0x0
  6111                           
  6112  0070                     PWM7_LoadDutyValue@dutyCycle7:	
  6113                           ; 2 bytes @ 0x0
  6114                           
  6115  0070                     PWM1_LoadDutyValue@dutyCycle1:	
  6116                           ; 2 bytes @ 0x0
  6117                           
  6118  0070                     ___wmul@multiplier:	
  6119                           ; 2 bytes @ 0x0
  6120                           
  6121  0070                     ___awdiv@divisor:	
  6122                           ; 2 bytes @ 0x0
  6123                           
  6124  0070                     ___lwmod@divisor:	
  6125                           ; 2 bytes @ 0x0
  6126                           
  6127  0070                     ___ftpack@arg:	
  6128                           ; 2 bytes @ 0x0
  6129                           
  6130  0070                     frexp@value:	
  6131                           ; 3 bytes @ 0x0
  6132                           
  6133  0070                     ___aldiv@divisor:	
  6134                           ; 3 bytes @ 0x0
  6135                           
  6136                           
  6137                           ; 4 bytes @ 0x0
  6138  0070                     	ds	1
  6139  0071                     ??_LCDWrite:	
  6140  0071                     ??___bmul:	
  6141                           ; 1 bytes @ 0x1
  6142                           
  6143                           
  6144                           ; 1 bytes @ 0x1
  6145  0071                     	ds	1
  6146  0072                     ??_PWM6_LoadDutyValue:	
  6147  0072                     ??_PWM7_LoadDutyValue:	
  6148                           ; 1 bytes @ 0x2
  6149                           
  6150  0072                     ??_PWM1_LoadDutyValue:	
  6151                           ; 1 bytes @ 0x2
  6152                           
  6153  0072                     LCDWrite@data_or_command:	
  6154                           ; 1 bytes @ 0x2
  6155                           
  6156  0072                     ___bmul@product:	
  6157                           ; 1 bytes @ 0x2
  6158                           
  6159  0072                     ___wmul@multiplicand:	
  6160                           ; 1 bytes @ 0x2
  6161                           
  6162  0072                     ___awdiv@dividend:	
  6163                           ; 2 bytes @ 0x2
  6164                           
  6165  0072                     ___lwmod@dividend:	
  6166                           ; 2 bytes @ 0x2
  6167                           
  6168                           
  6169                           ; 2 bytes @ 0x2
  6170  0072                     	ds	1
  6171  0073                     ??_ADCRead:	
  6172  0073                     ADCRead@channel:	
  6173                           ; 1 bytes @ 0x3
  6174                           
  6175  0073                     LCDWrite@d:	
  6176                           ; 1 bytes @ 0x3
  6177                           
  6178  0073                     ___bmul@multiplier:	
  6179                           ; 1 bytes @ 0x3
  6180                           
  6181  0073                     ___ftpack@exp:	
  6182                           ; 1 bytes @ 0x3
  6183                           
  6184  0073                     frexp@eptr:	
  6185                           ; 1 bytes @ 0x3
  6186                           
  6187                           
  6188                           ; 1 bytes @ 0x3
  6189  0073                     	ds	1
  6190  0074                     ??_frexp:	
  6191  0074                     ??_readButton:	
  6192                           ; 1 bytes @ 0x4
  6193                           
  6194  0074                     ??___wmul:	
  6195                           ; 1 bytes @ 0x4
  6196                           
  6197  0074                     ??___awdiv:	
  6198                           ; 1 bytes @ 0x4
  6199                           
  6200  0074                     ??___lwmod:	
  6201                           ; 1 bytes @ 0x4
  6202                           
  6203  0074                     LCDWrite@i:	
  6204                           ; 1 bytes @ 0x4
  6205                           
  6206  0074                     ___ftpack@sign:	
  6207                           ; 1 bytes @ 0x4
  6208                           
  6209  0074                     ___wmul@product:	
  6210                           ; 1 bytes @ 0x4
  6211                           
  6212  0074                     ___aldiv@dividend:	
  6213                           ; 2 bytes @ 0x4
  6214                           
  6215                           
  6216                           ; 4 bytes @ 0x4
  6217  0074                     	ds	1
  6218  0075                     ??___ftpack:	
  6219  0075                     ?_gotoXY:	
  6220                           ; 1 bytes @ 0x5
  6221                           
  6222  0075                     ??_LCDInit:	
  6223                           ; 1 bytes @ 0x5
  6224                           
  6225  0075                     gotoXY@y:	
  6226                           ; 1 bytes @ 0x5
  6227                           
  6228  0075                     ___awdiv@counter:	
  6229                           ; 1 bytes @ 0x5
  6230                           
  6231  0075                     ___lwmod@counter:	
  6232                           ; 1 bytes @ 0x5
  6233                           
  6234                           
  6235                           ; 1 bytes @ 0x5
  6236  0075                     	ds	1
  6237  0076                     ??_gotoXY:	
  6238  0076                     ??_LCDWriteCharacter:	
  6239                           ; 1 bytes @ 0x6
  6240                           
  6241  0076                     ___awdiv@sign:	
  6242                           ; 1 bytes @ 0x6
  6243                           
  6244                           
  6245                           ; 1 bytes @ 0x6
  6246  0076                     	ds	1
  6247  0077                     gotoXY@x:	
  6248  0077                     ___awdiv@quotient:	
  6249                           ; 1 bytes @ 0x7
  6250                           
  6251                           
  6252                           ; 2 bytes @ 0x7
  6253  0077                     	ds	1
  6254  0078                     ??_LCDClear:	
  6255  0078                     ??___aldiv:	
  6256                           ; 1 bytes @ 0x8
  6257                           
  6258                           
  6259                           ; 1 bytes @ 0x8
  6260  0078                     	ds	1
  6261  0079                     ?___awtoft:	
  6262  0079                     LCDWriteCharacter@character:	
  6263                           ; 3 bytes @ 0x9
  6264                           
  6265  0079                     readIAnalog@analog_channel:	
  6266                           ; 1 bytes @ 0x9
  6267                           
  6268  0079                     readVAnalog@analog_channel:	
  6269                           ; 2 bytes @ 0x9
  6270                           
  6271  0079                     LCDClear@index:	
  6272                           ; 2 bytes @ 0x9
  6273                           
  6274  0079                     ___awtoft@c:	
  6275                           ; 2 bytes @ 0x9
  6276                           
  6277                           
  6278                           ; 2 bytes @ 0x9
  6279  0079                     	ds	1
  6280  007A                     LCDWriteCharacter@base:	
  6281                           
  6282                           ; 2 bytes @ 0xA
  6283  007A                     	ds	1
  6284  007B                     readIAnalog@value:	
  6285  007B                     readVAnalog@value:	
  6286                           ; 2 bytes @ 0xB
  6287                           
  6288                           
  6289                           ; 2 bytes @ 0xB
  6290  007B                     	ds	1
  6291  007C                     ??___awtoft:	
  6292                           
  6293                           ; 1 bytes @ 0xC
  6294  007C                     	ds	2
  6295  007E                     ??_eval_poly:	
  6296  007E                     ??_tempCalc:	
  6297                           ; 1 bytes @ 0xE
  6298                           
  6299  007E                     ??___ftsub:	
  6300                           ; 1 bytes @ 0xE
  6301                           
  6302                           
  6303                           	psect	cstackBANK0
  6304  0020                     __pcstackBANK0:	
  6305                           ; 1 bytes @ 0xE
  6306                           
  6307  0020                     ___aldiv@counter:	
  6308  0020                     ___awtoft@sign:	
  6309                           ; 1 bytes @ 0x0
  6310                           
  6311                           
  6312                           ; 1 bytes @ 0x0
  6313  0020                     	ds	1
  6314  0021                     ?___ftdiv:	
  6315  0021                     ?___ftmul:	
  6316                           ; 3 bytes @ 0x1
  6317                           
  6318  0021                     ___aldiv@sign:	
  6319                           ; 3 bytes @ 0x1
  6320                           
  6321  0021                     ___ftdiv@f2:	
  6322                           ; 1 bytes @ 0x1
  6323                           
  6324  0021                     ___ftmul@f1:	
  6325                           ; 3 bytes @ 0x1
  6326                           
  6327                           
  6328                           ; 3 bytes @ 0x1
  6329  0021                     	ds	1
  6330  0022                     ___aldiv@quotient:	
  6331                           
  6332                           ; 4 bytes @ 0x2
  6333  0022                     	ds	2
  6334  0024                     ___ftdiv@f1:	
  6335  0024                     ___ftmul@f2:	
  6336                           ; 3 bytes @ 0x4
  6337                           
  6338                           
  6339                           ; 3 bytes @ 0x4
  6340  0024                     	ds	2
  6341  0026                     ?_readIAnalog:	
  6342  0026                     ?_readVAnalog:	
  6343                           ; 2 bytes @ 0x6
  6344                           
  6345  0026                     readIAnalog@channel:	
  6346                           ; 2 bytes @ 0x6
  6347                           
  6348  0026                     readVAnalog@channel:	
  6349                           ; 2 bytes @ 0x6
  6350                           
  6351                           
  6352                           ; 2 bytes @ 0x6
  6353  0026                     	ds	1
  6354  0027                     ??___ftdiv:	
  6355  0027                     ??___ftmul:	
  6356                           ; 1 bytes @ 0x7
  6357                           
  6358                           
  6359                           ; 1 bytes @ 0x7
  6360  0027                     	ds	1
  6361  0028                     ??_readIAnalog:	
  6362  0028                     ??_readVAnalog:	
  6363                           ; 1 bytes @ 0x8
  6364                           
  6365                           
  6366                           ; 1 bytes @ 0x8
  6367  0028                     	ds	3
  6368  002B                     ___ftdiv@cntr:	
  6369  002B                     ___ftmul@exp:	
  6370                           ; 1 bytes @ 0xB
  6371                           
  6372                           
  6373                           ; 1 bytes @ 0xB
  6374  002B                     	ds	1
  6375  002C                     ___ftdiv@f3:	
  6376  002C                     ___ftmul@f3_as_product:	
  6377                           ; 3 bytes @ 0xC
  6378                           
  6379                           
  6380                           ; 3 bytes @ 0xC
  6381  002C                     	ds	3
  6382  002F                     ___ftdiv@exp:	
  6383  002F                     ___ftmul@cntr:	
  6384                           ; 1 bytes @ 0xF
  6385                           
  6386                           
  6387                           ; 1 bytes @ 0xF
  6388  002F                     	ds	1
  6389  0030                     ___ftdiv@sign:	
  6390  0030                     ___ftmul@sign:	
  6391                           ; 1 bytes @ 0x10
  6392                           
  6393                           
  6394                           ; 1 bytes @ 0x10
  6395  0030                     	ds	1
  6396  0031                     ?___ftge:	
  6397  0031                     ?___ftadd:	
  6398                           ; 1 bit 
  6399                           
  6400  0031                     ?___fttol:	
  6401                           ; 3 bytes @ 0x11
  6402                           
  6403  0031                     ___ftadd@f1:	
  6404                           ; 4 bytes @ 0x11
  6405                           
  6406  0031                     ___ftge@ff1:	
  6407                           ; 3 bytes @ 0x11
  6408                           
  6409  0031                     ___fttol@f1:	
  6410                           ; 3 bytes @ 0x11
  6411                           
  6412                           
  6413                           ; 3 bytes @ 0x11
  6414  0031                     	ds	3
  6415  0034                     ___ftadd@f2:	
  6416  0034                     ___ftge@ff2:	
  6417                           ; 3 bytes @ 0x14
  6418                           
  6419                           
  6420                           ; 3 bytes @ 0x14
  6421  0034                     	ds	1
  6422  0035                     ??___fttol:	
  6423                           
  6424                           ; 1 bytes @ 0x15
  6425  0035                     	ds	2
  6426  0037                     ??___ftadd:	
  6427  0037                     ??___ftge:	
  6428                           ; 1 bytes @ 0x17
  6429                           
  6430                           
  6431                           ; 1 bytes @ 0x17
  6432  0037                     	ds	2
  6433  0039                     ___fttol@sign1:	
  6434                           
  6435                           ; 1 bytes @ 0x19
  6436  0039                     	ds	1
  6437  003A                     ___fttol@lval:	
  6438                           
  6439                           ; 4 bytes @ 0x1A
  6440  003A                     	ds	1
  6441  003B                     ___ftadd@sign:	
  6442                           
  6443                           ; 1 bytes @ 0x1B
  6444  003B                     	ds	1
  6445  003C                     ___ftadd@exp2:	
  6446                           
  6447                           ; 1 bytes @ 0x1C
  6448  003C                     	ds	1
  6449  003D                     ___ftadd@exp1:	
  6450                           
  6451                           ; 1 bytes @ 0x1D
  6452  003D                     	ds	1
  6453  003E                     ?_eval_poly:	
  6454  003E                     ?___ftsub:	
  6455                           ; 3 bytes @ 0x1E
  6456                           
  6457  003E                     ___fttol@exp1:	
  6458                           ; 3 bytes @ 0x1E
  6459                           
  6460  003E                     ___ftsub@f2:	
  6461                           ; 1 bytes @ 0x1E
  6462                           
  6463  003E                     eval_poly@x:	
  6464                           ; 3 bytes @ 0x1E
  6465                           
  6466                           
  6467                           ; 3 bytes @ 0x1E
  6468  003E                     	ds	1
  6469  003F                     ??_calculateCurrent0:	
  6470  003F                     ??_calculateCurrent3:	
  6471                           ; 1 bytes @ 0x1F
  6472                           
  6473  003F                     ??_Init_Battery_State_Machine:	
  6474                           ; 1 bytes @ 0x1F
  6475                           
  6476  003F                     ??_Battery_State_Machine:	
  6477                           ; 1 bytes @ 0x1F
  6478                           
  6479  003F                     ??_cc_cv_mode:	
  6480                           ; 1 bytes @ 0x1F
  6481                           
  6482  003F                     ?_LCDWriteInt:	
  6483                           ; 1 bytes @ 0x1F
  6484                           
  6485  003F                     LCDWriteInt@value:	
  6486                           ; 1 bytes @ 0x1F
  6487                           
  6488                           
  6489                           ; 2 bytes @ 0x1F
  6490  003F                     	ds	2
  6491  0041                     LCDWriteInt@fieldLength:	
  6492  0041                     eval_poly@d:	
  6493                           ; 1 bytes @ 0x21
  6494                           
  6495  0041                     ___ftsub@f1:	
  6496                           ; 2 bytes @ 0x21
  6497                           
  6498                           
  6499                           ; 3 bytes @ 0x21
  6500  0041                     	ds	1
  6501  0042                     LCDWriteInt@numPlaces:	
  6502                           
  6503                           ; 1 bytes @ 0x22
  6504  0042                     	ds	1
  6505  0043                     Init_Battery_State_Machine@z:	
  6506  0043                     LCDWriteInt@sign:	
  6507                           ; 1 bytes @ 0x23
  6508                           
  6509  0043                     eval_poly@n:	
  6510                           ; 1 bytes @ 0x23
  6511                           
  6512                           
  6513                           ; 2 bytes @ 0x23
  6514  0043                     	ds	1
  6515  0044                     ??_LCDWriteInt:	
  6516  0044                     ??_SYSTEM_Initialize:	
  6517                           ; 1 bytes @ 0x24
  6518                           
  6519  0044                     Battery_State_Machine@z:	
  6520                           ; 1 bytes @ 0x24
  6521                           
  6522                           
  6523                           ; 1 bytes @ 0x24
  6524  0044                     	ds	1
  6525  0045                     eval_poly@res:	
  6526                           
  6527                           ; 3 bytes @ 0x25
  6528  0045                     	ds	1
  6529  0046                     cc_cv_mode@z:	
  6530                           
  6531                           ; 1 bytes @ 0x26
  6532  0046                     	ds	2
  6533  0048                     ?_log:	
  6534  0048                     log@x:	
  6535                           ; 3 bytes @ 0x28
  6536                           
  6537  0048                     LCDWriteInt@str:	
  6538                           ; 3 bytes @ 0x28
  6539                           
  6540                           
  6541                           ; 5 bytes @ 0x28
  6542  0048                     	ds	3
  6543  004B                     ??_log:	
  6544                           
  6545                           ; 1 bytes @ 0x2B
  6546  004B                     	ds	1
  6547  004C                     log@exponent:	
  6548                           
  6549                           ; 2 bytes @ 0x2C
  6550  004C                     	ds	1
  6551  004D                     LCDWriteInt@j:	
  6552                           
  6553                           ; 1 bytes @ 0x2D
  6554  004D                     	ds	1
  6555  004E                     ?_tempCalc:	
  6556  004E                     LCDWriteInt@i:	
  6557                           ; 2 bytes @ 0x2E
  6558                           
  6559  004E                     tempCalc@analogValue:	
  6560                           ; 1 bytes @ 0x2E
  6561                           
  6562                           
  6563                           ; 2 bytes @ 0x2E
  6564  004E                     	ds	2
  6565  0050                     tempCalc@R:	
  6566                           
  6567                           ; 3 bytes @ 0x30
  6568  0050                     	ds	3
  6569  0053                     _tempCalc$1304:	
  6570                           
  6571                           ; 3 bytes @ 0x33
  6572  0053                     	ds	3
  6573  0056                     tempCalc@steinhart:	
  6574                           
  6575                           ; 3 bytes @ 0x36
  6576  0056                     	ds	3
  6577  0059                     ??_main:	
  6578                           
  6579                           ; 1 bytes @ 0x39
  6580  0059                     	ds	5
  6581                           
  6582                           	psect	maintext
  6583  0043                     __pmaintext:	
  6584 ;;
  6585 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  6586 ;;
  6587 ;; *************** function _main *****************
  6588 ;; Defined at:
  6589 ;;		line 33 in file "main.c"
  6590 ;; Parameters:    Size  Location     Type
  6591 ;;		None
  6592 ;; Auto vars:     Size  Location     Type
  6593 ;;  tempVoltage     8    8[BANK1 ] int [4]
  6594 ;;  efficiency      3    0[BANK1 ] float 
  6595 ;;  dutyCycle7      2   34[BANK1 ] unsigned int 
  6596 ;;  dutyCycle6      2   32[BANK1 ] unsigned int 
  6597 ;;  tempFanOutpu    2   27[BANK1 ] unsigned int 
  6598 ;;  dutyCycle1      2   25[BANK1 ] unsigned int 
  6599 ;;  largerIOut      2   22[BANK1 ] int 
  6600 ;;  MPPT1           2   20[BANK1 ] int 
  6601 ;;  MPPT0           2   18[BANK1 ] int 
  6602 ;;  faultNotRese    2    6[BANK1 ] unsigned int 
  6603 ;;  faultCount      2    4[BANK1 ] unsigned int 
  6604 ;;  j               1   36[BANK1 ] unsigned char 
  6605 ;;  menuButton      1   24[BANK1 ] unsigned char 
  6606 ;;  slowLoop        1   17[BANK1 ] unsigned char 
  6607 ;;  displayRefre    1   16[BANK1 ] unsigned char 
  6608 ;;  fastLoop        1    3[BANK1 ] unsigned char 
  6609 ;; Return value:  Size  Location     Type
  6610 ;;                  1    wreg      void 
  6611 ;; Registers used:
  6612 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6613 ;; Tracked objects:
  6614 ;;		On entry : B1F/0
  6615 ;;		On exit  : 0/0
  6616 ;;		Unchanged: 0/0
  6617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6619 ;;      Locals:         0       0      37       0       0       0       0       0       0       0       0       0       
      +0       0
  6620 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6621 ;;      Totals:         0       5      37       0       0       0       0       0       0       0       0       0       
      +0       0
  6622 ;;Total ram usage:       42 bytes
  6623 ;; Hardware stack levels required when called:    5
  6624 ;; This function calls:
  6625 ;;		_ADCRead
  6626 ;;		_Battery_State_Machine
  6627 ;;		_LCDClear
  6628 ;;		_LCDInit
  6629 ;;		_LCDWriteCharacter
  6630 ;;		_LCDWriteInt
  6631 ;;		_PWM1_LoadDutyValue
  6632 ;;		_PWM6_LoadDutyValue
  6633 ;;		_PWM7_LoadDutyValue
  6634 ;;		_SYSTEM_Initialize
  6635 ;;		___awdiv
  6636 ;;		___awtoft
  6637 ;;		___ftdiv
  6638 ;;		___ftge
  6639 ;;		___ftmul
  6640 ;;		___fttol
  6641 ;;		_calculateCurrent0
  6642 ;;		_calculateCurrent2
  6643 ;;		_calculateCurrent3
  6644 ;;		_cc_cv_mode
  6645 ;;		_gotoXY
  6646 ;;		_readButton
  6647 ;;		_readIAnalog
  6648 ;;		_readVAnalog
  6649 ;;		_tempCalc
  6650 ;; This function is called by:
  6651 ;;		Startup code after reset
  6652 ;; This function uses a non-reentrant model
  6653 ;;
  6654                           
  6655                           
  6656                           ;psect for function _main
  6657  0043                     _main:	
  6658                           
  6659                           ;main.c: 35: int16_t MPPT0 = 3144;
  6660                           
  6661                           ;incstack = 0
  6662                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6663  0043  3048               	movlw	72
  6664  0044  0021               	movlb	1	; select bank1
  6665  0045  00DC               	movwf	main@MPPT0^(0+128)
  6666  0046  300C               	movlw	12
  6667  0047  00DD               	movwf	(main@MPPT0^(0+128)+1)
  6668                           
  6669                           ;main.c: 36: int16_t MPPT1 = 3144;
  6670  0048  3048               	movlw	72
  6671  0049  00DE               	movwf	main@MPPT1^(0+128)
  6672  004A  300C               	movlw	12
  6673  004B  00DF               	movwf	(main@MPPT1^(0+128)+1)
  6674                           
  6675                           ;main.c: 38: extern uint8_t batteryState[2];
  6676                           ;main.c: 39: uint8_t displayRefresh = 0;
  6677  004C  01DA               	clrf	main@displayRefresh^(0+128)
  6678                           
  6679                           ;main.c: 40: uint16_t dutyCycle6 = 1023;
  6680  004D  30FF               	movlw	255
  6681  004E  00EA               	movwf	main@dutyCycle6^(0+128)
  6682  004F  3003               	movlw	3
  6683  0050  00EB               	movwf	(main@dutyCycle6^(0+128)+1)
  6684                           
  6685                           ;main.c: 41: uint16_t dutyCycle7 = 1023;
  6686  0051  30FF               	movlw	255
  6687  0052  00EC               	movwf	main@dutyCycle7^(0+128)
  6688  0053  3003               	movlw	3
  6689  0054  00ED               	movwf	(main@dutyCycle7^(0+128)+1)
  6690                           
  6691                           ;main.c: 42: uint16_t dutyCycle1 = 260;
  6692  0055  3004               	movlw	4
  6693  0056  00E3               	movwf	main@dutyCycle1^(0+128)
  6694  0057  3001               	movlw	1
  6695  0058  00E4               	movwf	(main@dutyCycle1^(0+128)+1)
  6696                           
  6697                           ;main.c: 43: float efficiency = 0;
  6698  0059  3000               	movlw	0
  6699  005A  00CA               	movwf	main@efficiency^(0+128)
  6700  005B  3000               	movlw	0
  6701  005C  00CB               	movwf	(main@efficiency+1)^(0+128)
  6702  005D  3000               	movlw	0
  6703  005E  00CC               	movwf	(main@efficiency+2)^(0+128)
  6704                           
  6705                           ;main.c: 44: uint16_t faultCount = 0;
  6706  005F  01CE               	clrf	main@faultCount^(0+128)
  6707  0060  01CF               	clrf	(main@faultCount+1)^(0+128)
  6708                           
  6709                           ;main.c: 45: uint16_t faultNotReset = 0;
  6710  0061  01D0               	clrf	main@faultNotReset^(0+128)
  6711  0062  01D1               	clrf	(main@faultNotReset+1)^(0+128)
  6712                           
  6713                           ;main.c: 47: extern int8_t Imode[2];
  6714                           ;main.c: 48: int16_t largerIOut = 0;
  6715  0063  01E0               	clrf	main@largerIOut^(0+128)
  6716  0064  01E1               	clrf	(main@largerIOut+1)^(0+128)
  6717                           
  6718                           ;main.c: 49: extern int16_t Iref[2];
  6719                           ;main.c: 50: uint8_t j = 0;
  6720  0065  01EE               	clrf	main@j^(0+128)
  6721                           
  6722                           ;main.c: 51: uint8_t menuButton = 0;
  6723  0066  01E2               	clrf	main@menuButton^(0+128)
  6724                           
  6725                           ;main.c: 52: uint8_t fastLoop = 0;
  6726  0067  01CD               	clrf	main@fastLoop^(0+128)
  6727                           
  6728                           ;main.c: 53: uint8_t slowLoop = 200;
  6729  0068  30C8               	movlw	200
  6730  0069  0020               	movlb	0	; select bank0
  6731  006A  00D9               	movwf	??_main
  6732  006B  0859               	movf	??_main,w
  6733  006C  0021               	movlb	1	; select bank1
  6734  006D  00DB               	movwf	main@slowLoop^(0+128)
  6735                           
  6736                           ;main.c: 54: uint16_t tempFanOutput = 60;
  6737  006E  303C               	movlw	60
  6738  006F  00E5               	movwf	main@tempFanOutput^(0+128)
  6739  0070  3000               	movlw	0
  6740  0071  00E6               	movwf	(main@tempFanOutput^(0+128)+1)
  6741                           
  6742                           ;main.c: 55: extern int8_t VHoldMode[2];
  6743                           ;main.c: 56: extern int16_t Vref[2];
  6744                           ;main.c: 57: int16_t tempVoltage[4];
  6745                           ;main.c: 60: SYSTEM_Initialize();
  6746  0072  3191  219B  3180   	fcall	_SYSTEM_Initialize
  6747                           
  6748                           ;main.c: 62: LCDClear();
  6749  0075  319F  27A3  3180   	fcall	_LCDClear
  6750  0078                     l3332:	
  6751                           ;main.c: 64: void calculateCurrent0(void);
  6752                           ;main.c: 66: void calculateCurrent2(void);
  6753                           ;main.c: 67: void calculateCurrent3(void);
  6754                           ;main.c: 70: while (1)
  6755                           
  6756                           
  6757                           ;main.c: 71: {
  6758                           ;main.c: 72: if(!(RB2))
  6759  0078  0020               	movlb	0	; select bank0
  6760  0079  190D               	btfsc	13,2	;volatile
  6761  007A  288C               	goto	l3340
  6762                           
  6763                           ;main.c: 73: {
  6764                           ;main.c: 74: LATA5=0;
  6765  007B  1296               	bcf	22,5	;volatile
  6766                           
  6767                           ;main.c: 75: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  6768  007C  300B               	movlw	11
  6769  007D  0020               	movlb	0	; select bank0
  6770  007E  00D9               	movwf	??_main
  6771  007F  3062               	movlw	98
  6772  0080                     u4507:	
  6773  0080  0B89               	decfsz	9,f
  6774  0081  2880               	goto	u4507
  6775  0082  0BD9               	decfsz	??_main,f
  6776  0083  2880               	goto	u4507
  6777  0084  0000               	nop
  6778                           
  6779                           ;main.c: 76: faultCount+=1;
  6780  0085  3001               	movlw	1
  6781  0086  0021               	movlb	1	; select bank1
  6782  0087  07CE               	addwf	main@faultCount^(0+128),f
  6783  0088  3000               	movlw	0
  6784  0089  3DCF               	addwfc	(main@faultCount+1)^(0+128),f
  6785                           
  6786                           ;main.c: 77: LATA5=1;
  6787  008A  0020               	movlb	0	; select bank0
  6788  008B  1696               	bsf	22,5	;volatile
  6789  008C                     l3340:	
  6790                           
  6791                           ;main.c: 78: }
  6792                           ;main.c: 79: for(j=0;j<4;j++) Ianalogs[j]=readIAnalog(j);
  6793  008C  0021               	movlb	1	; select bank1
  6794  008D  01EE               	clrf	main@j^(0+128)
  6795  008E  3004               	movlw	4
  6796  008F  026E               	subwf	main@j^(0+128),w
  6797  0090  1803               	btfsc	3,0
  6798  0091  28B1               	goto	l3352
  6799  0092                     l3346:	
  6800  0092  086E               	movf	main@j^(0+128),w
  6801  0093  0020               	movlb	0	; select bank0
  6802  0094  00D9               	movwf	??_main
  6803  0095  01DA               	clrf	??_main+1
  6804  0096  0859               	movf	??_main,w
  6805  0097  00A6               	movwf	readIAnalog@channel
  6806  0098  085A               	movf	??_main+1,w
  6807  0099  00A7               	movwf	readIAnalog@channel+1
  6808  009A  318B  23CE  3180   	fcall	_readIAnalog
  6809  009D  0021               	movlb	1	; select bank1
  6810  009E  356E               	lslf	main@j^(0+128),w
  6811  009F  3E40               	addlw	(low (_Ianalogs| (0+256)))& (0+255)
  6812  00A0  0086               	movwf	6
  6813  00A1  3001               	movlw	1	; select bank2/3
  6814  00A2  0087               	movwf	7
  6815  00A3  0020               	movlb	0	; select bank0
  6816  00A4  0826               	movf	?_readIAnalog,w
  6817  00A5  3FC0               	movwi [0]fsr1
  6818  00A6  0827               	movf	?_readIAnalog+1,w
  6819  00A7  3FC1               	movwi [1]fsr1
  6820  00A8  3001               	movlw	1
  6821  00A9  00D9               	movwf	??_main
  6822  00AA  0859               	movf	??_main,w
  6823  00AB  0021               	movlb	1	; select bank1
  6824  00AC  07EE               	addwf	main@j^(0+128),f
  6825  00AD  3004               	movlw	4
  6826  00AE  026E               	subwf	main@j^(0+128),w
  6827  00AF  1C03               	skipc
  6828  00B0  2892               	goto	l3346
  6829  00B1                     l3352:	
  6830                           
  6831                           ;main.c: 81: for(j=0;j<4;j++) Vanalogs[j]=readVAnalog(j);
  6832  00B1  01EE               	clrf	main@j^(0+128)
  6833  00B2  3004               	movlw	4
  6834  00B3  026E               	subwf	main@j^(0+128),w
  6835  00B4  1803               	btfsc	3,0
  6836  00B5  28D5               	goto	l472
  6837  00B6                     l3358:	
  6838  00B6  086E               	movf	main@j^(0+128),w
  6839  00B7  0020               	movlb	0	; select bank0
  6840  00B8  00D9               	movwf	??_main
  6841  00B9  01DA               	clrf	??_main+1
  6842  00BA  0859               	movf	??_main,w
  6843  00BB  00A6               	movwf	readVAnalog@channel
  6844  00BC  085A               	movf	??_main+1,w
  6845  00BD  00A7               	movwf	readVAnalog@channel+1
  6846  00BE  318A  22AC  3180   	fcall	_readVAnalog
  6847  00C1  0021               	movlb	1	; select bank1
  6848  00C2  356E               	lslf	main@j^(0+128),w
  6849  00C3  3E48               	addlw	(low (_Vanalogs| (0+256)))& (0+255)
  6850  00C4  0086               	movwf	6
  6851  00C5  3001               	movlw	1	; select bank2/3
  6852  00C6  0087               	movwf	7
  6853  00C7  0020               	movlb	0	; select bank0
  6854  00C8  0826               	movf	?_readVAnalog,w
  6855  00C9  3FC0               	movwi [0]fsr1
  6856  00CA  0827               	movf	?_readVAnalog+1,w
  6857  00CB  3FC1               	movwi [1]fsr1
  6858  00CC  3001               	movlw	1
  6859  00CD  00D9               	movwf	??_main
  6860  00CE  0859               	movf	??_main,w
  6861  00CF  0021               	movlb	1	; select bank1
  6862  00D0  07EE               	addwf	main@j^(0+128),f
  6863  00D1  3004               	movlw	4
  6864  00D2  026E               	subwf	main@j^(0+128),w
  6865  00D3  1C03               	skipc
  6866  00D4  28B6               	goto	l3358
  6867  00D5                     l472:	
  6868                           
  6869                           ;main.c: 83: if(!(RB2))faultNotReset+=1;
  6870  00D5  0020               	movlb	0	; select bank0
  6871  00D6  190D               	btfsc	13,2	;volatile
  6872  00D7  28DD               	goto	l3366
  6873  00D8  3001               	movlw	1
  6874  00D9  0021               	movlb	1	; select bank1
  6875  00DA  07D0               	addwf	main@faultNotReset^(0+128),f
  6876  00DB  3000               	movlw	0
  6877  00DC  3DD1               	addwfc	(main@faultNotReset+1)^(0+128),f
  6878  00DD                     l3366:	
  6879                           
  6880                           ;main.c: 87: tempVoltage[0]=(int16_t)(Vanalogs[0]/.54245);
  6881  00DD  0022               	movlb	2	; select bank2
  6882  00DE  0849               	movf	(_Vanalogs+1)^(0+256),w
  6883  00DF  00FA               	movwf	___awtoft@c+1
  6884  00E0  0848               	movf	_Vanalogs^(0+256),w
  6885  00E1  00F9               	movwf	___awtoft@c
  6886  00E2  319F  273C  3180   	fcall	___awtoft
  6887  00E5  0879               	movf	?___awtoft,w
  6888  00E6  0020               	movlb	0	; select bank0
  6889  00E7  00A4               	movwf	___ftdiv@f1
  6890  00E8  087A               	movf	?___awtoft+1,w
  6891  00E9  00A5               	movwf	___ftdiv@f1+1
  6892  00EA  087B               	movf	?___awtoft+2,w
  6893  00EB  00A6               	movwf	___ftdiv@f1+2
  6894  00EC  30DE               	movlw	222
  6895  00ED  00A1               	movwf	___ftdiv@f2
  6896  00EE  300A               	movlw	10
  6897  00EF  00A2               	movwf	___ftdiv@f2+1
  6898  00F0  303F               	movlw	63
  6899  00F1  00A3               	movwf	___ftdiv@f2+2
  6900  00F2  3195  25F3  3180   	fcall	___ftdiv
  6901  00F5  0020               	movlb	0	; select bank0
  6902  00F6  0821               	movf	?___ftdiv,w
  6903  00F7  00B1               	movwf	___fttol@f1
  6904  00F8  0822               	movf	?___ftdiv+1,w
  6905  00F9  00B2               	movwf	___fttol@f1+1
  6906  00FA  0823               	movf	?___ftdiv+2,w
  6907  00FB  00B3               	movwf	___fttol@f1+2
  6908  00FC  3195  256C  3180   	fcall	___fttol
  6909  00FF  0020               	movlb	0	; select bank0
  6910  0100  0832               	movf	?___fttol+1,w
  6911  0101  0021               	movlb	1	; select bank1
  6912  0102  00D3               	movwf	(main@tempVoltage+1)^(0+128)
  6913  0103  0020               	movlb	0	; select bank0
  6914  0104  0831               	movf	?___fttol,w
  6915  0105  0021               	movlb	1	; select bank1
  6916  0106  00D2               	movwf	main@tempVoltage^(0+128)
  6917                           
  6918                           ;main.c: 89: tempVoltage[1]=(int16_t)(Vanalogs[1]/.54395);
  6919  0107  0022               	movlb	2	; select bank2
  6920  0108  084B               	movf	((_Vanalogs+1)^(0+256)+2),w
  6921  0109  00FA               	movwf	___awtoft@c+1
  6922  010A  084A               	movf	(_Vanalogs^(0+256)+2),w
  6923  010B  00F9               	movwf	___awtoft@c
  6924  010C  319F  273C  3180   	fcall	___awtoft
  6925  010F  0879               	movf	?___awtoft,w
  6926  0110  0020               	movlb	0	; select bank0
  6927  0111  00A4               	movwf	___ftdiv@f1
  6928  0112  087A               	movf	?___awtoft+1,w
  6929  0113  00A5               	movwf	___ftdiv@f1+1
  6930  0114  087B               	movf	?___awtoft+2,w
  6931  0115  00A6               	movwf	___ftdiv@f1+2
  6932  0116  3040               	movlw	64
  6933  0117  00A1               	movwf	___ftdiv@f2
  6934  0118  300B               	movlw	11
  6935  0119  00A2               	movwf	___ftdiv@f2+1
  6936  011A  303F               	movlw	63
  6937  011B  00A3               	movwf	___ftdiv@f2+2
  6938  011C  3195  25F3  3180   	fcall	___ftdiv
  6939  011F  0020               	movlb	0	; select bank0
  6940  0120  0821               	movf	?___ftdiv,w
  6941  0121  00B1               	movwf	___fttol@f1
  6942  0122  0822               	movf	?___ftdiv+1,w
  6943  0123  00B2               	movwf	___fttol@f1+1
  6944  0124  0823               	movf	?___ftdiv+2,w
  6945  0125  00B3               	movwf	___fttol@f1+2
  6946  0126  3195  256C  3180   	fcall	___fttol
  6947  0129  0020               	movlb	0	; select bank0
  6948  012A  0832               	movf	?___fttol+1,w
  6949  012B  0021               	movlb	1	; select bank1
  6950  012C  00D5               	movwf	((main@tempVoltage+1)^(0+128)+2)
  6951  012D  0020               	movlb	0	; select bank0
  6952  012E  0831               	movf	?___fttol,w
  6953  012F  0021               	movlb	1	; select bank1
  6954  0130  00D4               	movwf	(main@tempVoltage^(0+128)+2)
  6955                           
  6956                           ;main.c: 91: tempVoltage[2]=(int16_t)(Vanalogs[2]/.208100558);
  6957  0131  0022               	movlb	2	; select bank2
  6958  0132  084D               	movf	((_Vanalogs+1)^(0+256)+4),w
  6959  0133  00FA               	movwf	___awtoft@c+1
  6960  0134  084C               	movf	(_Vanalogs^(0+256)+4),w
  6961  0135  00F9               	movwf	___awtoft@c
  6962  0136  319F  273C  3180   	fcall	___awtoft
  6963  0139  0879               	movf	?___awtoft,w
  6964  013A  0020               	movlb	0	; select bank0
  6965  013B  00A4               	movwf	___ftdiv@f1
  6966  013C  087A               	movf	?___awtoft+1,w
  6967  013D  00A5               	movwf	___ftdiv@f1+1
  6968  013E  087B               	movf	?___awtoft+2,w
  6969  013F  00A6               	movwf	___ftdiv@f1+2
  6970  0140  3018               	movlw	24
  6971  0141  00A1               	movwf	___ftdiv@f2
  6972  0142  3055               	movlw	85
  6973  0143  00A2               	movwf	___ftdiv@f2+1
  6974  0144  303E               	movlw	62
  6975  0145  00A3               	movwf	___ftdiv@f2+2
  6976  0146  3195  25F3  3180   	fcall	___ftdiv
  6977  0149  0020               	movlb	0	; select bank0
  6978  014A  0821               	movf	?___ftdiv,w
  6979  014B  00B1               	movwf	___fttol@f1
  6980  014C  0822               	movf	?___ftdiv+1,w
  6981  014D  00B2               	movwf	___fttol@f1+1
  6982  014E  0823               	movf	?___ftdiv+2,w
  6983  014F  00B3               	movwf	___fttol@f1+2
  6984  0150  3195  256C  3180   	fcall	___fttol
  6985  0153  0020               	movlb	0	; select bank0
  6986  0154  0832               	movf	?___fttol+1,w
  6987  0155  0021               	movlb	1	; select bank1
  6988  0156  00D7               	movwf	((main@tempVoltage+1)^(0+128)+4)
  6989  0157  0020               	movlb	0	; select bank0
  6990  0158  0831               	movf	?___fttol,w
  6991  0159  0021               	movlb	1	; select bank1
  6992  015A  00D6               	movwf	(main@tempVoltage^(0+128)+4)
  6993                           
  6994                           ;main.c: 93: tempVoltage[3]=(int16_t)(Vanalogs[3]/.207755);
  6995  015B  0022               	movlb	2	; select bank2
  6996  015C  084F               	movf	((_Vanalogs+1)^(0+256)+6),w
  6997  015D  00FA               	movwf	___awtoft@c+1
  6998  015E  084E               	movf	(_Vanalogs^(0+256)+6),w
  6999  015F  00F9               	movwf	___awtoft@c
  7000  0160  319F  273C  3180   	fcall	___awtoft
  7001  0163  0879               	movf	?___awtoft,w
  7002  0164  0020               	movlb	0	; select bank0
  7003  0165  00A4               	movwf	___ftdiv@f1
  7004  0166  087A               	movf	?___awtoft+1,w
  7005  0167  00A5               	movwf	___ftdiv@f1+1
  7006  0168  087B               	movf	?___awtoft+2,w
  7007  0169  00A6               	movwf	___ftdiv@f1+2
  7008  016A  30BE               	movlw	190
  7009  016B  00A1               	movwf	___ftdiv@f2
  7010  016C  3054               	movlw	84
  7011  016D  00A2               	movwf	___ftdiv@f2+1
  7012  016E  303E               	movlw	62
  7013  016F  00A3               	movwf	___ftdiv@f2+2
  7014  0170  3195  25F3  3180   	fcall	___ftdiv
  7015  0173  0020               	movlb	0	; select bank0
  7016  0174  0821               	movf	?___ftdiv,w
  7017  0175  00B1               	movwf	___fttol@f1
  7018  0176  0822               	movf	?___ftdiv+1,w
  7019  0177  00B2               	movwf	___fttol@f1+1
  7020  0178  0823               	movf	?___ftdiv+2,w
  7021  0179  00B3               	movwf	___fttol@f1+2
  7022  017A  3195  256C  3180   	fcall	___fttol
  7023  017D  0020               	movlb	0	; select bank0
  7024  017E  0832               	movf	?___fttol+1,w
  7025  017F  0021               	movlb	1	; select bank1
  7026  0180  00D9               	movwf	((main@tempVoltage+1)^(0+128)+6)
  7027  0181  0020               	movlb	0	; select bank0
  7028  0182  0831               	movf	?___fttol,w
  7029  0183  0021               	movlb	1	; select bank1
  7030  0184  00D8               	movwf	(main@tempVoltage^(0+128)+6)
  7031                           
  7032                           ;main.c: 95: for(j=0;j<4;j++)
  7033  0185  01EE               	clrf	main@j^(0+128)
  7034  0186  3004               	movlw	4
  7035  0187  026E               	subwf	main@j^(0+128),w
  7036  0188  1803               	btfsc	3,0
  7037  0189  29E9               	goto	l3392
  7038  018A                     l3380:	
  7039                           
  7040                           ;main.c: 96: {
  7041                           ;main.c: 97: if(tempVoltage[j]>voltage[j])voltage[j]+=1;
  7042  018A  356E               	lslf	main@j^(0+128),w
  7043  018B  3ED2               	addlw	(low (main@tempVoltage| 0))& (0+255)
  7044  018C  0086               	movwf	6
  7045  018D  0187               	clrf	7
  7046  018E  3F40               	moviw [0]fsr1
  7047  018F  0020               	movlb	0	; select bank0
  7048  0190  00D9               	movwf	??_main
  7049  0191  3F41               	moviw [1]fsr1
  7050  0192  00DA               	movwf	??_main+1
  7051  0193  0021               	movlb	1	; select bank1
  7052  0194  356E               	lslf	main@j^(0+128),w
  7053  0195  3EA0               	addlw	(low (_voltage| 0))& (0+255)
  7054  0196  0086               	movwf	6
  7055  0197  0187               	clrf	7
  7056  0198  3F40               	moviw [0]fsr1
  7057  0199  0020               	movlb	0	; select bank0
  7058  019A  00DB               	movwf	??_main+2
  7059  019B  3F41               	moviw [1]fsr1
  7060  019C  00DC               	movwf	??_main+3
  7061  019D  085C               	movf	??_main+3,w
  7062  019E  3A80               	xorlw	128
  7063  019F  00DD               	movwf	??_main+4
  7064  01A0  085A               	movf	??_main+1,w
  7065  01A1  3A80               	xorlw	128
  7066  01A2  025D               	subwf	??_main+4,w
  7067  01A3  1D03               	skipz
  7068  01A4  29A7               	goto	u4135
  7069  01A5  0859               	movf	??_main,w
  7070  01A6  025B               	subwf	??_main+2,w
  7071  01A7                     u4135:	
  7072  01A7  1803               	skipnc
  7073  01A8  29B4               	goto	l3384
  7074  01A9  0021               	movlb	1	; select bank1
  7075  01AA  356E               	lslf	main@j^(0+128),w
  7076  01AB  3EA0               	addlw	(low (_voltage| 0))& (0+255)
  7077  01AC  0086               	movwf	6
  7078  01AD  0187               	clrf	7
  7079  01AE  3001               	movlw	1
  7080  01AF  0781               	addwf	1,f
  7081  01B0  3141               	addfsr 1,1
  7082  01B1  1803               	skipnc
  7083  01B2  0A81               	incf	1,f
  7084  01B3  29DF               	goto	l3388
  7085  01B4                     l3384:	
  7086                           
  7087                           ;main.c: 98: else if(tempVoltage[j]<voltage[j])voltage[j]-=1;
  7088  01B4  0021               	movlb	1	; select bank1
  7089  01B5  356E               	lslf	main@j^(0+128),w
  7090  01B6  3EA0               	addlw	(low (_voltage| 0))& (0+255)
  7091  01B7  0086               	movwf	6
  7092  01B8  0187               	clrf	7
  7093  01B9  3F40               	moviw [0]fsr1
  7094  01BA  0020               	movlb	0	; select bank0
  7095  01BB  00D9               	movwf	??_main
  7096  01BC  3F41               	moviw [1]fsr1
  7097  01BD  00DA               	movwf	??_main+1
  7098  01BE  0021               	movlb	1	; select bank1
  7099  01BF  356E               	lslf	main@j^(0+128),w
  7100  01C0  3ED2               	addlw	(low (main@tempVoltage| 0))& (0+255)
  7101  01C1  0086               	movwf	6
  7102  01C2  0187               	clrf	7
  7103  01C3  3F40               	moviw [0]fsr1
  7104  01C4  0020               	movlb	0	; select bank0
  7105  01C5  00DB               	movwf	??_main+2
  7106  01C6  3F41               	moviw [1]fsr1
  7107  01C7  00DC               	movwf	??_main+3
  7108  01C8  085C               	movf	??_main+3,w
  7109  01C9  3A80               	xorlw	128
  7110  01CA  00DD               	movwf	??_main+4
  7111  01CB  085A               	movf	??_main+1,w
  7112  01CC  3A80               	xorlw	128
  7113  01CD  025D               	subwf	??_main+4,w
  7114  01CE  1D03               	skipz
  7115  01CF  29D2               	goto	u4145
  7116  01D0  0859               	movf	??_main,w
  7117  01D1  025B               	subwf	??_main+2,w
  7118  01D2                     u4145:	
  7119  01D2  1803               	skipnc
  7120  01D3  29DF               	goto	l3388
  7121  01D4  0021               	movlb	1	; select bank1
  7122  01D5  356E               	lslf	main@j^(0+128),w
  7123  01D6  3EA0               	addlw	(low (_voltage| 0))& (0+255)
  7124  01D7  0086               	movwf	6
  7125  01D8  0187               	clrf	7
  7126  01D9  30FF               	movlw	255
  7127  01DA  0781               	addwf	1,f
  7128  01DB  3141               	addfsr 1,1
  7129  01DC  30FF               	movlw	255
  7130  01DD  3D81               	addwfc	1,f
  7131  01DE  317F               	addfsr 1,-1
  7132  01DF                     l3388:	
  7133  01DF  3001               	movlw	1
  7134  01E0  0020               	movlb	0	; select bank0
  7135  01E1  00D9               	movwf	??_main
  7136  01E2  0859               	movf	??_main,w
  7137  01E3  0021               	movlb	1	; select bank1
  7138  01E4  07EE               	addwf	main@j^(0+128),f
  7139  01E5  3004               	movlw	4
  7140  01E6  026E               	subwf	main@j^(0+128),w
  7141  01E7  1C03               	skipc
  7142  01E8  298A               	goto	l3380
  7143  01E9                     l3392:	
  7144                           
  7145                           ;main.c: 100: }
  7146                           ;main.c: 102: calculateCurrent0();
  7147  01E9  3192  2211  3180   	fcall	_calculateCurrent0
  7148                           
  7149                           ;main.c: 106: calculateCurrent2();
  7150  01EC  319F  275D  3180   	fcall	_calculateCurrent2
  7151                           
  7152                           ;main.c: 108: calculateCurrent3();
  7153  01EF  3192  2256  3180   	fcall	_calculateCurrent3
  7154                           
  7155                           ;main.c: 110: current[1]=(int16_t)(current[3]*(voltage[3]/voltage[1]*.9));
  7156  01F2  0021               	movlb	1	; select bank1
  7157  01F3  0827               	movf	((_voltage+1)^(0+128)+6),w
  7158  01F4  00F3               	movwf	___awdiv@dividend+1
  7159  01F5  0826               	movf	(_voltage^(0+128)+6),w
  7160  01F6  00F2               	movwf	___awdiv@dividend
  7161  01F7  0823               	movf	((_voltage+1)^(0+128)+2),w
  7162  01F8  00F1               	movwf	___awdiv@divisor+1
  7163  01F9  0822               	movf	(_voltage^(0+128)+2),w
  7164  01FA  00F0               	movwf	___awdiv@divisor
  7165  01FB  3192  229B  3180   	fcall	___awdiv
  7166  01FE  0871               	movf	?___awdiv+1,w
  7167  01FF  00FA               	movwf	___awtoft@c+1
  7168  0200  0870               	movf	?___awdiv,w
  7169  0201  00F9               	movwf	___awtoft@c
  7170  0202  319F  273C  3180   	fcall	___awtoft
  7171  0205  0879               	movf	?___awtoft,w
  7172  0206  0020               	movlb	0	; select bank0
  7173  0207  00A4               	movwf	___ftmul@f2
  7174  0208  087A               	movf	?___awtoft+1,w
  7175  0209  00A5               	movwf	___ftmul@f2+1
  7176  020A  087B               	movf	?___awtoft+2,w
  7177  020B  00A6               	movwf	___ftmul@f2+2
  7178  020C  3066               	movlw	102
  7179  020D  00A1               	movwf	___ftmul@f1
  7180  020E  3066               	movlw	102
  7181  020F  00A2               	movwf	___ftmul@f1+1
  7182  0210  303F               	movlw	63
  7183  0211  00A3               	movwf	___ftmul@f1+2
  7184  0212  3197  274C  3180   	fcall	___ftmul
  7185  0215  0020               	movlb	0	; select bank0
  7186  0216  0821               	movf	?___ftmul,w
  7187  0217  0021               	movlb	1	; select bank1
  7188  0218  00E7               	movwf	_main$1305^(0+128)
  7189  0219  0020               	movlb	0	; select bank0
  7190  021A  0822               	movf	?___ftmul+1,w
  7191  021B  0021               	movlb	1	; select bank1
  7192  021C  00E8               	movwf	(_main$1305+1)^(0+128)
  7193  021D  0020               	movlb	0	; select bank0
  7194  021E  0823               	movf	?___ftmul+2,w
  7195  021F  0021               	movlb	1	; select bank1
  7196  0220  00E9               	movwf	(_main$1305+2)^(0+128)
  7197                           
  7198                           ;main.c: 110: current[1]=(int16_t)(current[3]*(voltage[3]/voltage[1]*.9));
  7199  0221  082F               	movf	((_current+1)^(0+128)+6),w
  7200  0222  00FA               	movwf	___awtoft@c+1
  7201  0223  082E               	movf	(_current^(0+128)+6),w
  7202  0224  00F9               	movwf	___awtoft@c
  7203  0225  319F  273C  3180   	fcall	___awtoft
  7204  0228  0879               	movf	?___awtoft,w
  7205  0229  0020               	movlb	0	; select bank0
  7206  022A  00A4               	movwf	___ftmul@f2
  7207  022B  087A               	movf	?___awtoft+1,w
  7208  022C  00A5               	movwf	___ftmul@f2+1
  7209  022D  087B               	movf	?___awtoft+2,w
  7210  022E  00A6               	movwf	___ftmul@f2+2
  7211  022F  0021               	movlb	1	; select bank1
  7212  0230  0867               	movf	_main$1305^(0+128),w
  7213  0231  0020               	movlb	0	; select bank0
  7214  0232  00A1               	movwf	___ftmul@f1
  7215  0233  0021               	movlb	1	; select bank1
  7216  0234  0868               	movf	(_main$1305+1)^(0+128),w
  7217  0235  0020               	movlb	0	; select bank0
  7218  0236  00A2               	movwf	___ftmul@f1+1
  7219  0237  0021               	movlb	1	; select bank1
  7220  0238  0869               	movf	(_main$1305+2)^(0+128),w
  7221  0239  0020               	movlb	0	; select bank0
  7222  023A  00A3               	movwf	___ftmul@f1+2
  7223  023B  3197  274C  3180   	fcall	___ftmul
  7224  023E  0020               	movlb	0	; select bank0
  7225  023F  0821               	movf	?___ftmul,w
  7226  0240  00B1               	movwf	___fttol@f1
  7227  0241  0822               	movf	?___ftmul+1,w
  7228  0242  00B2               	movwf	___fttol@f1+1
  7229  0243  0823               	movf	?___ftmul+2,w
  7230  0244  00B3               	movwf	___fttol@f1+2
  7231  0245  3195  256C  3180   	fcall	___fttol
  7232  0248  0020               	movlb	0	; select bank0
  7233  0249  0832               	movf	?___fttol+1,w
  7234  024A  0021               	movlb	1	; select bank1
  7235  024B  00AB               	movwf	((_current+1)^(0+128)+2)
  7236  024C  0020               	movlb	0	; select bank0
  7237  024D  0831               	movf	?___fttol,w
  7238  024E  0021               	movlb	1	; select bank1
  7239  024F  00AA               	movwf	(_current^(0+128)+2)
  7240                           
  7241                           ;main.c: 112: if(Imode[0])
  7242  0250  0020               	movlb	0	; select bank0
  7243  0251  0862               	movf	_Imode,w
  7244  0252  1903               	btfsc	3,2
  7245  0253  2A75               	goto	l3408
  7246                           
  7247                           ;main.c: 113: {
  7248                           ;main.c: 114: if(voltage[2]<MPPT0)
  7249  0254  0021               	movlb	1	; select bank1
  7250  0255  0825               	movf	((_voltage+1)^(0+128)+4),w
  7251  0256  3A80               	xorlw	128
  7252  0257  0020               	movlb	0	; select bank0
  7253  0258  00D9               	movwf	??_main
  7254  0259  0021               	movlb	1	; select bank1
  7255  025A  085D               	movf	(main@MPPT0+1)^(0+128),w
  7256  025B  3A80               	xorlw	128
  7257  025C  0020               	movlb	0	; select bank0
  7258  025D  0259               	subwf	??_main,w
  7259  025E  1D03               	skipz
  7260  025F  2A63               	goto	u4175
  7261  0260  0021               	movlb	1	; select bank1
  7262  0261  085C               	movf	main@MPPT0^(0+128),w
  7263  0262  0224               	subwf	(_voltage^(0+128)+4),w
  7264  0263                     u4175:	
  7265  0263  1C03               	btfss	3,0
  7266  0264  2A86               	goto	L3
  7267                           
  7268                           ;main.c: 121: else if(voltage[2]>MPPT0)
  7269                           
  7270                           ;main.c: 119: }
  7271                           ;main.c: 120: }
  7272                           
  7273                           ;main.c: 117: {
  7274                           ;main.c: 118: dutyCycle6+=1;
  7275                           
  7276                           ;main.c: 115: {
  7277                           ;main.c: 116: if(dutyCycle6<1023)
  7278  0265  0021               	movlb	1	; select bank1
  7279  0266  085D               	movf	(main@MPPT0+1)^(0+128),w
  7280  0267  3A80               	xorlw	128
  7281  0268  0020               	movlb	0	; select bank0
  7282  0269  00D9               	movwf	??_main
  7283  026A  0021               	movlb	1	; select bank1
  7284  026B  0825               	movf	((_voltage+1)^(0+128)+4),w
  7285  026C  3A80               	xorlw	128
  7286  026D  0020               	movlb	0	; select bank0
  7287  026E  0259               	subwf	??_main,w
  7288  026F  1D03               	skipz
  7289  0270  2AA2               	goto	u4235
  7290  0271  0021               	movlb	1	; select bank1
  7291  0272  0824               	movf	(_voltage^(0+128)+4),w
  7292  0273  025C               	subwf	main@MPPT0^(0+128),w
  7293  0274  2AA2               	goto	u4235
  7294  0275                     l3408:	
  7295                           ;main.c: 129: }
  7296                           
  7297                           ;main.c: 126: }
  7298                           ;main.c: 127: }
  7299                           
  7300                           ;main.c: 124: {
  7301                           ;main.c: 125: dutyCycle6-=1;
  7302                           
  7303                           ;main.c: 122: {
  7304                           ;main.c: 123: if(dutyCycle6>0)
  7305                           
  7306                           
  7307                           ;main.c: 130: else
  7308                           ;main.c: 131: {
  7309                           ;main.c: 132: if(voltage[0]>(int16_t)Vref[0])
  7310  0275  0021               	movlb	1	; select bank1
  7311  0276  0831               	movf	(_Vref+1)^(0+128),w
  7312  0277  3A80               	xorlw	128
  7313  0278  0020               	movlb	0	; select bank0
  7314  0279  00D9               	movwf	??_main
  7315  027A  0021               	movlb	1	; select bank1
  7316  027B  0821               	movf	(_voltage+1)^(0+128),w
  7317  027C  3A80               	xorlw	128
  7318  027D  0020               	movlb	0	; select bank0
  7319  027E  0259               	subwf	??_main,w
  7320  027F  1D03               	skipz
  7321  0280  2A84               	goto	u4215
  7322  0281  0021               	movlb	1	; select bank1
  7323  0282  0820               	movf	_voltage^(0+128),w
  7324  0283  0230               	subwf	_Vref^(0+128),w
  7325  0284                     u4215:	
  7326  0284  1803               	skipnc
  7327  0285  2A93               	goto	l3414
  7328  0286                     L3:	
  7329                           
  7330                           ;main.c: 133: {
  7331                           ;main.c: 134: if(dutyCycle6<1023) dutyCycle6+=1;
  7332  0286  3003               	movlw	3
  7333  0287  0021               	movlb	1	; select bank1
  7334  0288  026B               	subwf	(main@dutyCycle6+1)^(0+128),w
  7335  0289  30FF               	movlw	255
  7336  028A  1903               	skipnz
  7337  028B  026A               	subwf	main@dutyCycle6^(0+128),w
  7338  028C  1803               	skipnc
  7339  028D  2AAD               	goto	l3420
  7340  028E  3001               	movlw	1
  7341  028F  07EA               	addwf	main@dutyCycle6^(0+128),f
  7342  0290  3000               	movlw	0
  7343  0291  3DEB               	addwfc	(main@dutyCycle6+1)^(0+128),f
  7344                           
  7345                           ;main.c: 135: }
  7346  0292  2AAD               	goto	l3420
  7347  0293                     l3414:	
  7348                           
  7349                           ;main.c: 136: else if(voltage[0]<(int16_t)Vref[0])
  7350  0293  0021               	movlb	1	; select bank1
  7351  0294  0821               	movf	(_voltage+1)^(0+128),w
  7352  0295  3A80               	xorlw	128
  7353  0296  0020               	movlb	0	; select bank0
  7354  0297  00D9               	movwf	??_main
  7355  0298  0021               	movlb	1	; select bank1
  7356  0299  0831               	movf	(_Vref+1)^(0+128),w
  7357  029A  3A80               	xorlw	128
  7358  029B  0020               	movlb	0	; select bank0
  7359  029C  0259               	subwf	??_main,w
  7360  029D  1D03               	skipz
  7361  029E  2AA2               	goto	u4235
  7362  029F  0021               	movlb	1	; select bank1
  7363  02A0  0830               	movf	_Vref^(0+128),w
  7364  02A1  0220               	subwf	_voltage^(0+128),w
  7365  02A2                     u4235:	
  7366  02A2  1803               	skipnc
  7367  02A3  2AAD               	goto	l3420
  7368                           
  7369                           ;main.c: 137: {
  7370                           ;main.c: 138: if(dutyCycle6>0) dutyCycle6-=1;;
  7371  02A4  0021               	movlb	1	; select bank1
  7372  02A5  086A               	movf	main@dutyCycle6^(0+128),w
  7373  02A6  046B               	iorwf	(main@dutyCycle6+1)^(0+128),w
  7374  02A7  1903               	btfsc	3,2
  7375  02A8  2AAD               	goto	l3420
  7376  02A9  3001               	movlw	1
  7377  02AA  02EA               	subwf	main@dutyCycle6^(0+128),f
  7378  02AB  3000               	movlw	0
  7379  02AC  3BEB               	subwfb	(main@dutyCycle6+1)^(0+128),f
  7380  02AD                     l3420:	
  7381                           ;main.c: 139: }
  7382                           
  7383                           
  7384                           ;main.c: 141: }
  7385                           ;main.c: 143: if(Imode[1])
  7386  02AD  0020               	movlb	0	; select bank0
  7387  02AE  0863               	movf	_Imode+1,w
  7388  02AF  1903               	btfsc	3,2
  7389  02B0  2AC3               	goto	l3432
  7390                           
  7391                           ;main.c: 144: {
  7392                           ;main.c: 145: if(voltage[3]<MPPT1)
  7393  02B1  0021               	movlb	1	; select bank1
  7394  02B2  0827               	movf	((_voltage+1)^(0+128)+6),w
  7395  02B3  3A80               	xorlw	128
  7396  02B4  0020               	movlb	0	; select bank0
  7397  02B5  00D9               	movwf	??_main
  7398  02B6  0021               	movlb	1	; select bank1
  7399  02B7  085F               	movf	(main@MPPT1+1)^(0+128),w
  7400  02B8  3A80               	xorlw	128
  7401  02B9  0020               	movlb	0	; select bank0
  7402  02BA  0259               	subwf	??_main,w
  7403  02BB  1D03               	skipz
  7404  02BC  2AC0               	goto	u4265
  7405  02BD  0021               	movlb	1	; select bank1
  7406  02BE  085E               	movf	main@MPPT1^(0+128),w
  7407  02BF  0226               	subwf	(_voltage^(0+128)+6),w
  7408  02C0                     u4265:	
  7409  02C0  1C03               	btfss	3,0
  7410  02C1  2AD4               	goto	L4
  7411                           
  7412                           ;main.c: 150: }
  7413                           ;main.c: 151: }
  7414                           
  7415                           ;main.c: 148: {
  7416                           ;main.c: 149: dutyCycle7+=1;
  7417                           
  7418                           ;main.c: 146: {
  7419                           ;main.c: 147: if(dutyCycle7<1023)
  7420  02C2  2AF2               	goto	L5
  7421  02C3                     l3432:	
  7422                           ;main.c: 155: }
  7423                           ;main.c: 156: }
  7424                           
  7425                           ;main.c: 153: {
  7426                           ;main.c: 154: dutyCycle7-=1;
  7427                           
  7428                           ;main.c: 152: else if(dutyCycle7>0)
  7429                           
  7430                           
  7431                           ;main.c: 157: else
  7432                           ;main.c: 158: {
  7433                           ;main.c: 159: if(voltage[1]>(int16_t)Vref[1])
  7434  02C3  0021               	movlb	1	; select bank1
  7435  02C4  0833               	movf	((_Vref+1)^(0+128)+2),w
  7436  02C5  3A80               	xorlw	128
  7437  02C6  0020               	movlb	0	; select bank0
  7438  02C7  00D9               	movwf	??_main
  7439  02C8  0021               	movlb	1	; select bank1
  7440  02C9  0823               	movf	((_voltage+1)^(0+128)+2),w
  7441  02CA  3A80               	xorlw	128
  7442  02CB  0020               	movlb	0	; select bank0
  7443  02CC  0259               	subwf	??_main,w
  7444  02CD  1D03               	skipz
  7445  02CE  2AD2               	goto	u4295
  7446  02CF  0021               	movlb	1	; select bank1
  7447  02D0  0822               	movf	(_voltage^(0+128)+2),w
  7448  02D1  0232               	subwf	(_Vref^(0+128)+2),w
  7449  02D2                     u4295:	
  7450  02D2  1803               	skipnc
  7451  02D3  2AE1               	goto	l3438
  7452  02D4                     L4:	
  7453                           
  7454                           ;main.c: 160: {
  7455                           ;main.c: 161: if(dutyCycle7<1023) dutyCycle7+=1;
  7456  02D4  3003               	movlw	3
  7457  02D5  0021               	movlb	1	; select bank1
  7458  02D6  026D               	subwf	(main@dutyCycle7+1)^(0+128),w
  7459  02D7  30FF               	movlw	255
  7460  02D8  1903               	skipnz
  7461  02D9  026C               	subwf	main@dutyCycle7^(0+128),w
  7462  02DA  1803               	skipnc
  7463  02DB  2AFB               	goto	l3444
  7464  02DC  3001               	movlw	1
  7465  02DD  07EC               	addwf	main@dutyCycle7^(0+128),f
  7466  02DE  3000               	movlw	0
  7467  02DF  3DED               	addwfc	(main@dutyCycle7+1)^(0+128),f
  7468                           
  7469                           ;main.c: 162: }
  7470  02E0  2AFB               	goto	l3444
  7471  02E1                     l3438:	
  7472                           
  7473                           ;main.c: 163: else if(voltage[1]<(int16_t)Vref[1])
  7474  02E1  0021               	movlb	1	; select bank1
  7475  02E2  0823               	movf	((_voltage+1)^(0+128)+2),w
  7476  02E3  3A80               	xorlw	128
  7477  02E4  0020               	movlb	0	; select bank0
  7478  02E5  00D9               	movwf	??_main
  7479  02E6  0021               	movlb	1	; select bank1
  7480  02E7  0833               	movf	((_Vref+1)^(0+128)+2),w
  7481  02E8  3A80               	xorlw	128
  7482  02E9  0020               	movlb	0	; select bank0
  7483  02EA  0259               	subwf	??_main,w
  7484  02EB  1D03               	skipz
  7485  02EC  2AF0               	goto	u4315
  7486  02ED  0021               	movlb	1	; select bank1
  7487  02EE  0832               	movf	(_Vref^(0+128)+2),w
  7488  02EF  0222               	subwf	(_voltage^(0+128)+2),w
  7489  02F0                     u4315:	
  7490  02F0  1803               	skipnc
  7491  02F1  2AFB               	goto	l3444
  7492  02F2                     L5:	
  7493                           
  7494                           ;main.c: 164: {
  7495                           ;main.c: 165: if(dutyCycle7>0) dutyCycle7-=1;;
  7496  02F2  0021               	movlb	1	; select bank1
  7497  02F3  086C               	movf	main@dutyCycle7^(0+128),w
  7498  02F4  046D               	iorwf	(main@dutyCycle7+1)^(0+128),w
  7499  02F5  1903               	btfsc	3,2
  7500  02F6  2AFB               	goto	l3444
  7501  02F7  3001               	movlw	1
  7502  02F8  02EC               	subwf	main@dutyCycle7^(0+128),f
  7503  02F9  3000               	movlw	0
  7504  02FA  3BED               	subwfb	(main@dutyCycle7+1)^(0+128),f
  7505  02FB                     l3444:	
  7506                           ;main.c: 166: }
  7507                           
  7508                           
  7509                           ;main.c: 168: }
  7510                           ;main.c: 169: PWM6_LoadDutyValue(dutyCycle6);
  7511  02FB  0021               	movlb	1	; select bank1
  7512  02FC  086B               	movf	(main@dutyCycle6+1)^(0+128),w
  7513  02FD  00F1               	movwf	PWM6_LoadDutyValue@dutyCycle6+1
  7514  02FE  086A               	movf	main@dutyCycle6^(0+128),w
  7515  02FF  00F0               	movwf	PWM6_LoadDutyValue@dutyCycle6
  7516  0300  319E  26AF  3180   	fcall	_PWM6_LoadDutyValue
  7517                           
  7518                           ;main.c: 170: PWM7_LoadDutyValue(dutyCycle7);
  7519  0303  0021               	movlb	1	; select bank1
  7520  0304  086D               	movf	(main@dutyCycle7+1)^(0+128),w
  7521  0305  00F1               	movwf	PWM7_LoadDutyValue@dutyCycle7+1
  7522  0306  086C               	movf	main@dutyCycle7^(0+128),w
  7523  0307  00F0               	movwf	PWM7_LoadDutyValue@dutyCycle7
  7524  0308  3188  2000  3180   	fcall	_PWM7_LoadDutyValue
  7525                           
  7526                           ;main.c: 171: fastLoop=0;
  7527  030B  0021               	movlb	1	; select bank1
  7528  030C  01CD               	clrf	main@fastLoop^(0+128)
  7529                           
  7530                           ;main.c: 175: slowLoop+=1;
  7531  030D  3001               	movlw	1
  7532  030E  0020               	movlb	0	; select bank0
  7533  030F  00D9               	movwf	??_main
  7534  0310  0859               	movf	??_main,w
  7535  0311  0021               	movlb	1	; select bank1
  7536  0312  07DB               	addwf	main@slowLoop^(0+128),f
  7537                           
  7538                           ;main.c: 178: menuButton = readButton();
  7539  0313  3194  2468  3180   	fcall	_readButton
  7540  0316  0020               	movlb	0	; select bank0
  7541  0317  00D9               	movwf	??_main
  7542  0318  0859               	movf	??_main,w
  7543  0319  0021               	movlb	1	; select bank1
  7544  031A  00E2               	movwf	main@menuButton^(0+128)
  7545                           
  7546                           ;main.c: 179: if(menuButton == 2) if(MPPT1>2700)MPPT1-=1;
  7547  031B  3002               	movlw	2
  7548  031C  0662               	xorwf	main@menuButton^(0+128),w
  7549  031D  1D03               	btfss	3,2
  7550  031E  2B31               	goto	l3458
  7551  031F  085F               	movf	(main@MPPT1+1)^(0+128),w
  7552  0320  3A80               	xorlw	128
  7553  0321  0020               	movlb	0	; select bank0
  7554  0322  00D9               	movwf	??_main
  7555  0323  308A               	movlw	138
  7556  0324  0259               	subwf	??_main,w
  7557  0325  1D03               	skipz
  7558  0326  2B2A               	goto	u4345
  7559  0327  308D               	movlw	141
  7560  0328  0021               	movlb	1	; select bank1
  7561  0329  025E               	subwf	main@MPPT1^(0+128),w
  7562  032A                     u4345:	
  7563  032A  1C03               	skipc
  7564  032B  2B31               	goto	l3458
  7565  032C  30FF               	movlw	255
  7566  032D  0021               	movlb	1	; select bank1
  7567  032E  07DE               	addwf	main@MPPT1^(0+128),f
  7568  032F  30FF               	movlw	255
  7569  0330  3DDF               	addwfc	(main@MPPT1+1)^(0+128),f
  7570  0331                     l3458:	
  7571                           
  7572                           ;main.c: 180: if(menuButton == 3)if(MPPT1<3200)MPPT1+=1;
  7573  0331  3003               	movlw	3
  7574  0332  0021               	movlb	1	; select bank1
  7575  0333  0662               	xorwf	main@menuButton^(0+128),w
  7576  0334  1D03               	btfss	3,2
  7577  0335  2B48               	goto	l3464
  7578  0336  085F               	movf	(main@MPPT1+1)^(0+128),w
  7579  0337  3A80               	xorlw	128
  7580  0338  0020               	movlb	0	; select bank0
  7581  0339  00D9               	movwf	??_main
  7582  033A  308C               	movlw	140
  7583  033B  0259               	subwf	??_main,w
  7584  033C  1D03               	skipz
  7585  033D  2B41               	goto	u4365
  7586  033E  3080               	movlw	128
  7587  033F  0021               	movlb	1	; select bank1
  7588  0340  025E               	subwf	main@MPPT1^(0+128),w
  7589  0341                     u4365:	
  7590  0341  1803               	skipnc
  7591  0342  2B48               	goto	l3464
  7592  0343  3001               	movlw	1
  7593  0344  0021               	movlb	1	; select bank1
  7594  0345  07DE               	addwf	main@MPPT1^(0+128),f
  7595  0346  3000               	movlw	0
  7596  0347  3DDF               	addwfc	(main@MPPT1+1)^(0+128),f
  7597  0348                     l3464:	
  7598                           
  7599                           ;main.c: 181: if(menuButton == 1)LCDInit();
  7600  0348  0021               	movlb	1	; select bank1
  7601  0349  0362               	decf	main@menuButton^(0+128),w
  7602  034A  1D03               	btfss	3,2
  7603  034B  2B4F               	goto	l3468
  7604  034C  3191  2160  3180   	fcall	_LCDInit
  7605  034F                     l3468:	
  7606                           
  7607                           ;main.c: 183: if(slowLoop>250)
  7608  034F  30FB               	movlw	251
  7609  0350  0021               	movlb	1	; select bank1
  7610  0351  025B               	subwf	main@slowLoop^(0+128),w
  7611  0352  1C03               	skipc
  7612  0353  2878               	goto	l3332
  7613                           
  7614                           ;main.c: 184: {
  7615                           ;main.c: 185: if(current[0]>current[3]*(voltage[3]/voltage[1]*.9))
  7616  0354  0827               	movf	((_voltage+1)^(0+128)+6),w
  7617  0355  00F3               	movwf	___awdiv@dividend+1
  7618  0356  0826               	movf	(_voltage^(0+128)+6),w
  7619  0357  00F2               	movwf	___awdiv@dividend
  7620  0358  0823               	movf	((_voltage+1)^(0+128)+2),w
  7621  0359  00F1               	movwf	___awdiv@divisor+1
  7622  035A  0822               	movf	(_voltage^(0+128)+2),w
  7623  035B  00F0               	movwf	___awdiv@divisor
  7624  035C  3192  229B  3180   	fcall	___awdiv
  7625  035F  0871               	movf	?___awdiv+1,w
  7626  0360  00FA               	movwf	___awtoft@c+1
  7627  0361  0870               	movf	?___awdiv,w
  7628  0362  00F9               	movwf	___awtoft@c
  7629  0363  319F  273C  3180   	fcall	___awtoft
  7630  0366  0879               	movf	?___awtoft,w
  7631  0367  0020               	movlb	0	; select bank0
  7632  0368  00A4               	movwf	___ftmul@f2
  7633  0369  087A               	movf	?___awtoft+1,w
  7634  036A  00A5               	movwf	___ftmul@f2+1
  7635  036B  087B               	movf	?___awtoft+2,w
  7636  036C  00A6               	movwf	___ftmul@f2+2
  7637  036D  3066               	movlw	102
  7638  036E  00A1               	movwf	___ftmul@f1
  7639  036F  3066               	movlw	102
  7640  0370  00A2               	movwf	___ftmul@f1+1
  7641  0371  303F               	movlw	63
  7642  0372  00A3               	movwf	___ftmul@f1+2
  7643  0373  3197  274C  3180   	fcall	___ftmul
  7644  0376  0020               	movlb	0	; select bank0
  7645  0377  0821               	movf	?___ftmul,w
  7646  0378  0021               	movlb	1	; select bank1
  7647  0379  00E7               	movwf	_main$1305^(0+128)
  7648  037A  0020               	movlb	0	; select bank0
  7649  037B  0822               	movf	?___ftmul+1,w
  7650  037C  0021               	movlb	1	; select bank1
  7651  037D  00E8               	movwf	(_main$1305+1)^(0+128)
  7652  037E  0020               	movlb	0	; select bank0
  7653  037F  0823               	movf	?___ftmul+2,w
  7654  0380  0021               	movlb	1	; select bank1
  7655  0381  00E9               	movwf	(_main$1305+2)^(0+128)
  7656                           
  7657                           ;main.c: 184: {
  7658                           ;main.c: 185: if(current[0]>current[3]*(voltage[3]/voltage[1]*.9))
  7659  0382  0867               	movf	_main$1305^(0+128),w
  7660  0383  0020               	movlb	0	; select bank0
  7661  0384  00A1               	movwf	___ftmul@f1
  7662  0385  0021               	movlb	1	; select bank1
  7663  0386  0868               	movf	(_main$1305+1)^(0+128),w
  7664  0387  0020               	movlb	0	; select bank0
  7665  0388  00A2               	movwf	___ftmul@f1+1
  7666  0389  0021               	movlb	1	; select bank1
  7667  038A  0869               	movf	(_main$1305+2)^(0+128),w
  7668  038B  0020               	movlb	0	; select bank0
  7669  038C  00A3               	movwf	___ftmul@f1+2
  7670  038D  0021               	movlb	1	; select bank1
  7671  038E  082F               	movf	((_current+1)^(0+128)+6),w
  7672  038F  00FA               	movwf	___awtoft@c+1
  7673  0390  082E               	movf	(_current^(0+128)+6),w
  7674  0391  00F9               	movwf	___awtoft@c
  7675  0392  319F  273C  3180   	fcall	___awtoft
  7676  0395  0879               	movf	?___awtoft,w
  7677  0396  0020               	movlb	0	; select bank0
  7678  0397  00A4               	movwf	___ftmul@f2
  7679  0398  087A               	movf	?___awtoft+1,w
  7680  0399  00A5               	movwf	___ftmul@f2+1
  7681  039A  087B               	movf	?___awtoft+2,w
  7682  039B  00A6               	movwf	___ftmul@f2+2
  7683  039C  3197  274C  3180   	fcall	___ftmul
  7684  039F  0020               	movlb	0	; select bank0
  7685  03A0  0821               	movf	?___ftmul,w
  7686  03A1  00B1               	movwf	___ftge@ff1
  7687  03A2  0822               	movf	?___ftmul+1,w
  7688  03A3  00B2               	movwf	___ftge@ff1+1
  7689  03A4  0823               	movf	?___ftmul+2,w
  7690  03A5  00B3               	movwf	___ftge@ff1+2
  7691  03A6  0021               	movlb	1	; select bank1
  7692  03A7  0829               	movf	(_current+1)^(0+128),w
  7693  03A8  00FA               	movwf	___awtoft@c+1
  7694  03A9  0828               	movf	_current^(0+128),w
  7695  03AA  00F9               	movwf	___awtoft@c
  7696  03AB  319F  273C  3180   	fcall	___awtoft
  7697  03AE  0879               	movf	?___awtoft,w
  7698  03AF  0020               	movlb	0	; select bank0
  7699  03B0  00B4               	movwf	___ftge@ff2
  7700  03B1  087A               	movf	?___awtoft+1,w
  7701  03B2  00B5               	movwf	___ftge@ff2+1
  7702  03B3  087B               	movf	?___awtoft+2,w
  7703  03B4  00B6               	movwf	___ftge@ff2+2
  7704  03B5  3180  2007  3180   	fcall	___ftge
  7705  03B8  1803               	btfsc	3,0
  7706  03B9  2BBF               	goto	l3474
  7707                           
  7708                           ;main.c: 186: {
  7709                           ;main.c: 187: largerIOut=current[0];
  7710  03BA  0021               	movlb	1	; select bank1
  7711  03BB  0829               	movf	(_current+1)^(0+128),w
  7712  03BC  00E1               	movwf	(main@largerIOut+1)^(0+128)
  7713  03BD  0828               	movf	_current^(0+128),w
  7714  03BE  2C1C               	goto	L1
  7715  03BF                     l3474:	
  7716                           ;main.c: 188: }
  7717                           
  7718                           
  7719                           ;main.c: 189: else
  7720                           ;main.c: 190: {
  7721                           ;main.c: 191: largerIOut=(int16_t)(current[3]*(voltage[3]/voltage[1]*.9));
  7722  03BF  0021               	movlb	1	; select bank1
  7723  03C0  0827               	movf	((_voltage+1)^(0+128)+6),w
  7724  03C1  00F3               	movwf	___awdiv@dividend+1
  7725  03C2  0826               	movf	(_voltage^(0+128)+6),w
  7726  03C3  00F2               	movwf	___awdiv@dividend
  7727  03C4  0823               	movf	((_voltage+1)^(0+128)+2),w
  7728  03C5  00F1               	movwf	___awdiv@divisor+1
  7729  03C6  0822               	movf	(_voltage^(0+128)+2),w
  7730  03C7  00F0               	movwf	___awdiv@divisor
  7731  03C8  3192  229B  3180   	fcall	___awdiv
  7732  03CB  0871               	movf	?___awdiv+1,w
  7733  03CC  00FA               	movwf	___awtoft@c+1
  7734  03CD  0870               	movf	?___awdiv,w
  7735  03CE  00F9               	movwf	___awtoft@c
  7736  03CF  319F  273C  3180   	fcall	___awtoft
  7737  03D2  0879               	movf	?___awtoft,w
  7738  03D3  0020               	movlb	0	; select bank0
  7739  03D4  00A4               	movwf	___ftmul@f2
  7740  03D5  087A               	movf	?___awtoft+1,w
  7741  03D6  00A5               	movwf	___ftmul@f2+1
  7742  03D7  087B               	movf	?___awtoft+2,w
  7743  03D8  00A6               	movwf	___ftmul@f2+2
  7744  03D9  3066               	movlw	102
  7745  03DA  00A1               	movwf	___ftmul@f1
  7746  03DB  3066               	movlw	102
  7747  03DC  00A2               	movwf	___ftmul@f1+1
  7748  03DD  303F               	movlw	63
  7749  03DE  00A3               	movwf	___ftmul@f1+2
  7750  03DF  3197  274C  3180   	fcall	___ftmul
  7751  03E2  0020               	movlb	0	; select bank0
  7752  03E3  0821               	movf	?___ftmul,w
  7753  03E4  0021               	movlb	1	; select bank1
  7754  03E5  00E7               	movwf	_main$1305^(0+128)
  7755  03E6  0020               	movlb	0	; select bank0
  7756  03E7  0822               	movf	?___ftmul+1,w
  7757  03E8  0021               	movlb	1	; select bank1
  7758  03E9  00E8               	movwf	(_main$1305+1)^(0+128)
  7759  03EA  0020               	movlb	0	; select bank0
  7760  03EB  0823               	movf	?___ftmul+2,w
  7761  03EC  0021               	movlb	1	; select bank1
  7762  03ED  00E9               	movwf	(_main$1305+2)^(0+128)
  7763                           
  7764                           ;main.c: 189: else
  7765                           ;main.c: 190: {
  7766                           ;main.c: 191: largerIOut=(int16_t)(current[3]*(voltage[3]/voltage[1]*.9));
  7767  03EE  082F               	movf	((_current+1)^(0+128)+6),w
  7768  03EF  00FA               	movwf	___awtoft@c+1
  7769  03F0  082E               	movf	(_current^(0+128)+6),w
  7770  03F1  00F9               	movwf	___awtoft@c
  7771  03F2  319F  273C  3180   	fcall	___awtoft
  7772  03F5  0879               	movf	?___awtoft,w
  7773  03F6  0020               	movlb	0	; select bank0
  7774  03F7  00A4               	movwf	___ftmul@f2
  7775  03F8  087A               	movf	?___awtoft+1,w
  7776  03F9  00A5               	movwf	___ftmul@f2+1
  7777  03FA  087B               	movf	?___awtoft+2,w
  7778  03FB  00A6               	movwf	___ftmul@f2+2
  7779  03FC  0021               	movlb	1	; select bank1
  7780  03FD  0867               	movf	_main$1305^(0+128),w
  7781  03FE  0020               	movlb	0	; select bank0
  7782  03FF  00A1               	movwf	___ftmul@f1
  7783  0400  0021               	movlb	1	; select bank1
  7784  0401  0868               	movf	(_main$1305+1)^(0+128),w
  7785  0402  0020               	movlb	0	; select bank0
  7786  0403  00A2               	movwf	___ftmul@f1+1
  7787  0404  0021               	movlb	1	; select bank1
  7788  0405  0869               	movf	(_main$1305+2)^(0+128),w
  7789  0406  0020               	movlb	0	; select bank0
  7790  0407  00A3               	movwf	___ftmul@f1+2
  7791  0408  3197  274C  3180   	fcall	___ftmul
  7792  040B  0020               	movlb	0	; select bank0
  7793  040C  0821               	movf	?___ftmul,w
  7794  040D  00B1               	movwf	___fttol@f1
  7795  040E  0822               	movf	?___ftmul+1,w
  7796  040F  00B2               	movwf	___fttol@f1+1
  7797  0410  0823               	movf	?___ftmul+2,w
  7798  0411  00B3               	movwf	___fttol@f1+2
  7799  0412  3195  256C  3180   	fcall	___fttol
  7800  0415  0020               	movlb	0	; select bank0
  7801  0416  0832               	movf	?___fttol+1,w
  7802  0417  0021               	movlb	1	; select bank1
  7803  0418  00E1               	movwf	(main@largerIOut+1)^(0+128)
  7804  0419  0020               	movlb	0	; select bank0
  7805  041A  0831               	movf	?___fttol,w
  7806  041B  0021               	movlb	1	; select bank1
  7807  041C                     L1:	
  7808  041C  00E0               	movwf	main@largerIOut^(0+128)
  7809                           
  7810                           ;main.c: 193: }
  7811                           ;main.c: 195: if(largerIOut>25)
  7812  041D  0861               	movf	(main@largerIOut+1)^(0+128),w
  7813  041E  3A80               	xorlw	128
  7814  041F  0020               	movlb	0	; select bank0
  7815  0420  00D9               	movwf	??_main
  7816  0421  3080               	movlw	128
  7817  0422  0259               	subwf	??_main,w
  7818  0423  1D03               	skipz
  7819  0424  2C28               	goto	u4405
  7820  0425  301A               	movlw	26
  7821  0426  0021               	movlb	1	; select bank1
  7822  0427  0260               	subwf	main@largerIOut^(0+128),w
  7823  0428                     u4405:	
  7824  0428  1C03               	skipc
  7825  0429  2C7C               	goto	l3496
  7826                           
  7827                           ;main.c: 196: {
  7828                           ;main.c: 197: if((uint16_t)largerIOut+5>dutyCycle1)
  7829  042A  0021               	movlb	1	; select bank1
  7830  042B  0860               	movf	main@largerIOut^(0+128),w
  7831  042C  3E05               	addlw	5
  7832  042D  0020               	movlb	0	; select bank0
  7833  042E  00D9               	movwf	??_main
  7834  042F  3000               	movlw	0
  7835  0430  0021               	movlb	1	; select bank1
  7836  0431  3D61               	addwfc	(main@largerIOut+1)^(0+128),w
  7837  0432  0020               	movlb	0	; select bank0
  7838  0433  00DA               	movwf	??_main+1
  7839  0434  085A               	movf	??_main+1,w
  7840  0435  0021               	movlb	1	; select bank1
  7841  0436  0264               	subwf	(main@dutyCycle1+1)^(0+128),w
  7842  0437  1D03               	skipz
  7843  0438  2C3D               	goto	u4415
  7844  0439  0020               	movlb	0	; select bank0
  7845  043A  0859               	movf	??_main,w
  7846  043B  0021               	movlb	1	; select bank1
  7847  043C  0263               	subwf	main@dutyCycle1^(0+128),w
  7848  043D                     u4415:	
  7849  043D  1803               	skipnc
  7850  043E  2C44               	goto	l3482
  7851                           
  7852                           ;main.c: 198: {
  7853                           ;main.c: 199: dutyCycle1+=1;
  7854  043F  3001               	movlw	1
  7855  0440  07E3               	addwf	main@dutyCycle1^(0+128),f
  7856  0441  3000               	movlw	0
  7857  0442  3DE4               	addwfc	(main@dutyCycle1+1)^(0+128),f
  7858                           
  7859                           ;main.c: 200: }
  7860  0443  2C48               	goto	l3484
  7861  0444                     l3482:	
  7862                           
  7863                           ;main.c: 201: else dutyCycle1-=1;
  7864  0444  3001               	movlw	1
  7865  0445  02E3               	subwf	main@dutyCycle1^(0+128),f
  7866  0446  3000               	movlw	0
  7867  0447  3BE4               	subwfb	(main@dutyCycle1+1)^(0+128),f
  7868  0448                     l3484:	
  7869                           
  7870                           ;main.c: 203: if((uint16_t)largerIOut+5>tempFanOutput)
  7871  0448  0860               	movf	main@largerIOut^(0+128),w
  7872  0449  3E05               	addlw	5
  7873  044A  0020               	movlb	0	; select bank0
  7874  044B  00D9               	movwf	??_main
  7875  044C  3000               	movlw	0
  7876  044D  0021               	movlb	1	; select bank1
  7877  044E  3D61               	addwfc	(main@largerIOut+1)^(0+128),w
  7878  044F  0020               	movlb	0	; select bank0
  7879  0450  00DA               	movwf	??_main+1
  7880  0451  085A               	movf	??_main+1,w
  7881  0452  0021               	movlb	1	; select bank1
  7882  0453  0266               	subwf	(main@tempFanOutput+1)^(0+128),w
  7883  0454  1D03               	skipz
  7884  0455  2C5A               	goto	u4425
  7885  0456  0020               	movlb	0	; select bank0
  7886  0457  0859               	movf	??_main,w
  7887  0458  0021               	movlb	1	; select bank1
  7888  0459  0265               	subwf	main@tempFanOutput^(0+128),w
  7889  045A                     u4425:	
  7890  045A  1803               	skipnc
  7891  045B  2C68               	goto	l3490
  7892                           
  7893                           ;main.c: 204: {
  7894                           ;main.c: 205: if(tempFanOutput<75)
  7895  045C  3000               	movlw	0
  7896  045D  0266               	subwf	(main@tempFanOutput+1)^(0+128),w
  7897  045E  304B               	movlw	75
  7898  045F  1903               	skipnz
  7899  0460  0265               	subwf	main@tempFanOutput^(0+128),w
  7900  0461  1803               	skipnc
  7901  0462  2C70               	goto	l519
  7902                           
  7903                           ;main.c: 206: {
  7904                           ;main.c: 207: tempFanOutput+=1;
  7905  0463  3001               	movlw	1
  7906  0464  07E5               	addwf	main@tempFanOutput^(0+128),f
  7907  0465  3000               	movlw	0
  7908  0466  3DE6               	addwfc	(main@tempFanOutput+1)^(0+128),f
  7909                           
  7910                           ;main.c: 208: }
  7911                           ;main.c: 209: }
  7912  0467  2C70               	goto	l519
  7913  0468                     l3490:	
  7914                           
  7915                           ;main.c: 210: else
  7916                           ;main.c: 211: {
  7917                           ;main.c: 212: if(tempFanOutput>0)tempFanOutput-=1;
  7918  0468  0865               	movf	main@tempFanOutput^(0+128),w
  7919  0469  0466               	iorwf	(main@tempFanOutput+1)^(0+128),w
  7920  046A  1903               	btfsc	3,2
  7921  046B  2C70               	goto	l519
  7922  046C  3001               	movlw	1
  7923  046D  02E5               	subwf	main@tempFanOutput^(0+128),f
  7924  046E  3000               	movlw	0
  7925  046F  3BE6               	subwfb	(main@tempFanOutput+1)^(0+128),f
  7926  0470                     l519:	
  7927                           
  7928                           ;main.c: 213: }
  7929                           ;main.c: 215: dutyCycle1=tempFanOutput;
  7930  0470  0866               	movf	(main@tempFanOutput+1)^(0+128),w
  7931  0471  00E4               	movwf	(main@dutyCycle1+1)^(0+128)
  7932  0472  0865               	movf	main@tempFanOutput^(0+128),w
  7933  0473  00E3               	movwf	main@dutyCycle1^(0+128)
  7934                           
  7935                           ;main.c: 216: if(dutyCycle1<19)dutyCycle1=0;
  7936  0474  3000               	movlw	0
  7937  0475  0264               	subwf	(main@dutyCycle1+1)^(0+128),w
  7938  0476  3013               	movlw	19
  7939  0477  1903               	skipnz
  7940  0478  0263               	subwf	main@dutyCycle1^(0+128),w
  7941  0479  1803               	skipnc
  7942  047A  2C7F               	goto	l3498
  7943  047B  2C7D               	goto	L2
  7944  047C                     l3496:	
  7945                           ;main.c: 217: }
  7946                           
  7947                           
  7948                           ;main.c: 218: else
  7949                           ;main.c: 219: {
  7950                           ;main.c: 220: dutyCycle1=0;
  7951  047C  0021               	movlb	1	; select bank1
  7952  047D                     L2:	
  7953  047D  01E3               	clrf	main@dutyCycle1^(0+128)
  7954  047E  01E4               	clrf	(main@dutyCycle1+1)^(0+128)
  7955  047F                     l3498:	
  7956                           
  7957                           ;main.c: 221: }
  7958                           ;main.c: 222: if(!(RB2))
  7959  047F  0020               	movlb	0	; select bank0
  7960  0480  190D               	btfsc	13,2	;volatile
  7961  0481  2C90               	goto	l3502
  7962                           
  7963                           ;main.c: 223: {
  7964                           ;main.c: 224: dutyCycle1=55;
  7965  0482  3037               	movlw	55
  7966  0483  0021               	movlb	1	; select bank1
  7967  0484  00E3               	movwf	main@dutyCycle1^(0+128)
  7968  0485  3000               	movlw	0
  7969  0486  00E4               	movwf	(main@dutyCycle1^(0+128)+1)
  7970                           
  7971                           ;main.c: 225: batteryState[0]=CHARGE;
  7972  0487  3004               	movlw	4
  7973  0488  0020               	movlb	0	; select bank0
  7974  0489  00D9               	movwf	??_main
  7975  048A  0859               	movf	??_main,w
  7976  048B  00E4               	movwf	_batteryState
  7977                           
  7978                           ;main.c: 226: batteryState[1]=CHARGE;
  7979  048C  3004               	movlw	4
  7980  048D  00D9               	movwf	??_main
  7981  048E  0859               	movf	??_main,w
  7982  048F  00E5               	movwf	_batteryState+1
  7983  0490                     l3502:	
  7984                           
  7985                           ;main.c: 227: }
  7986                           ;main.c: 229: PWM1_LoadDutyValue(dutyCycle1);
  7987  0490  0021               	movlb	1	; select bank1
  7988  0491  0864               	movf	(main@dutyCycle1+1)^(0+128),w
  7989  0492  00F1               	movwf	PWM1_LoadDutyValue@dutyCycle1+1
  7990  0493  0863               	movf	main@dutyCycle1^(0+128),w
  7991  0494  00F0               	movwf	PWM1_LoadDutyValue@dutyCycle1
  7992  0495  319E  2699  3180   	fcall	_PWM1_LoadDutyValue
  7993                           
  7994                           ;main.c: 231: ADREF = 0x00;
  7995  0498  0021               	movlb	1	; select bank1
  7996  0499  019A               	clrf	26	;volatile
  7997                           
  7998                           ;main.c: 232: batteryTemp=tempCalc(ADCRead(9));
  7999  049A  3009               	movlw	9
  8000  049B  319E  2684  3180   	fcall	_ADCRead
  8001  049E  0871               	movf	?_ADCRead+1,w
  8002  049F  0020               	movlb	0	; select bank0
  8003  04A0  00CF               	movwf	tempCalc@analogValue+1
  8004  04A1  0870               	movf	?_ADCRead,w
  8005  04A2  00CE               	movwf	tempCalc@analogValue
  8006  04A3  3188  20CF  3180   	fcall	_tempCalc
  8007  04A6  0020               	movlb	0	; select bank0
  8008  04A7  084F               	movf	?_tempCalc+1,w
  8009  04A8  00EE               	movwf	_batteryTemp+1
  8010  04A9  084E               	movf	?_tempCalc,w
  8011  04AA  00ED               	movwf	_batteryTemp
  8012                           
  8013                           ;main.c: 233: ADREF = 0x03;
  8014  04AB  3003               	movlw	3
  8015  04AC  0021               	movlb	1	; select bank1
  8016  04AD  009A               	movwf	26	;volatile
  8017                           
  8018                           ;main.c: 235: displayRefresh+=1;
  8019  04AE  3001               	movlw	1
  8020  04AF  0020               	movlb	0	; select bank0
  8021  04B0  00D9               	movwf	??_main
  8022  04B1  0859               	movf	??_main,w
  8023  04B2  0021               	movlb	1	; select bank1
  8024  04B3  07DA               	addwf	main@displayRefresh^(0+128),f
  8025                           
  8026                           ;main.c: 236: if(displayRefresh>80)
  8027  04B4  3051               	movlw	81
  8028  04B5  025A               	subwf	main@displayRefresh^(0+128),w
  8029  04B6  1C03               	skipc
  8030  04B7  2CBD               	goto	l3518
  8031                           
  8032                           ;main.c: 237: {
  8033                           ;main.c: 238: LCDClear();
  8034  04B8  319F  27A3  3180   	fcall	_LCDClear
  8035                           
  8036                           ;main.c: 239: displayRefresh=0;
  8037  04BB  0021               	movlb	1	; select bank1
  8038  04BC  01DA               	clrf	main@displayRefresh^(0+128)
  8039  04BD                     l3518:	
  8040                           
  8041                           ;main.c: 241: }
  8042                           ;main.c: 242: Battery_State_Machine(0);
  8043  04BD  3000               	movlw	0
  8044  04BE  318E  264B  3180   	fcall	_Battery_State_Machine
  8045                           
  8046                           ;main.c: 243: Battery_State_Machine(1);
  8047  04C1  3001               	movlw	1
  8048  04C2  318E  264B  3180   	fcall	_Battery_State_Machine
  8049                           
  8050                           ;main.c: 248: { gotoXY(0,0); LCDWriteInt(faultCount,5, 0, 0);};
  8051  04C5  01F5               	clrf	gotoXY@y
  8052  04C6  3000               	movlw	0
  8053  04C7  319E  2671  3180   	fcall	_gotoXY
  8054  04CA  0021               	movlb	1	; select bank1
  8055  04CB  084F               	movf	(main@faultCount+1)^(0+128),w
  8056  04CC  0020               	movlb	0	; select bank0
  8057  04CD  00C0               	movwf	LCDWriteInt@value+1
  8058  04CE  0021               	movlb	1	; select bank1
  8059  04CF  084E               	movf	main@faultCount^(0+128),w
  8060  04D0  0020               	movlb	0	; select bank0
  8061  04D1  00BF               	movwf	LCDWriteInt@value
  8062  04D2  3005               	movlw	5
  8063  04D3  00D9               	movwf	??_main
  8064  04D4  0859               	movf	??_main,w
  8065  04D5  00C1               	movwf	LCDWriteInt@fieldLength
  8066  04D6  01C2               	clrf	LCDWriteInt@numPlaces
  8067  04D7  01C3               	clrf	LCDWriteInt@sign
  8068  04D8  3188  2016  3180   	fcall	_LCDWriteInt
  8069                           
  8070                           ;main.c: 249: { gotoXY(32,0); LCDWriteInt(faultNotReset,5, 0, 0);};
  8071  04DB  01F5               	clrf	gotoXY@y
  8072  04DC  3020               	movlw	32
  8073  04DD  319E  2671  3180   	fcall	_gotoXY
  8074  04E0  0021               	movlb	1	; select bank1
  8075  04E1  0851               	movf	(main@faultNotReset+1)^(0+128),w
  8076  04E2  0020               	movlb	0	; select bank0
  8077  04E3  00C0               	movwf	LCDWriteInt@value+1
  8078  04E4  0021               	movlb	1	; select bank1
  8079  04E5  0850               	movf	main@faultNotReset^(0+128),w
  8080  04E6  0020               	movlb	0	; select bank0
  8081  04E7  00BF               	movwf	LCDWriteInt@value
  8082  04E8  3005               	movlw	5
  8083  04E9  00D9               	movwf	??_main
  8084  04EA  0859               	movf	??_main,w
  8085  04EB  00C1               	movwf	LCDWriteInt@fieldLength
  8086  04EC  01C2               	clrf	LCDWriteInt@numPlaces
  8087  04ED  01C3               	clrf	LCDWriteInt@sign
  8088  04EE  3188  2016  3180   	fcall	_LCDWriteInt
  8089                           
  8090                           ;main.c: 258: { gotoXY(0,1); LCDWriteInt(voltage[2],4, 2, 0);};
  8091  04F1  01F5               	clrf	gotoXY@y
  8092  04F2  0AF5               	incf	gotoXY@y,f
  8093  04F3  3000               	movlw	0
  8094  04F4  319E  2671  3180   	fcall	_gotoXY
  8095  04F7  0021               	movlb	1	; select bank1
  8096  04F8  0825               	movf	((_voltage+1)^(0+128)+4),w
  8097  04F9  0020               	movlb	0	; select bank0
  8098  04FA  00C0               	movwf	LCDWriteInt@value+1
  8099  04FB  0021               	movlb	1	; select bank1
  8100  04FC  0824               	movf	(_voltage^(0+128)+4),w
  8101  04FD  0020               	movlb	0	; select bank0
  8102  04FE  00BF               	movwf	LCDWriteInt@value
  8103  04FF  3004               	movlw	4
  8104  0500  00D9               	movwf	??_main
  8105  0501  0859               	movf	??_main,w
  8106  0502  00C1               	movwf	LCDWriteInt@fieldLength
  8107  0503  3002               	movlw	2
  8108  0504  00DA               	movwf	??_main+1
  8109  0505  085A               	movf	??_main+1,w
  8110  0506  00C2               	movwf	LCDWriteInt@numPlaces
  8111  0507  01C3               	clrf	LCDWriteInt@sign
  8112  0508  3188  2016  3180   	fcall	_LCDWriteInt
  8113                           
  8114                           ;main.c: 260: LCDWriteCharacter('V');
  8115  050B  3056               	movlw	86
  8116  050C  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8117                           
  8118                           ;main.c: 262: { gotoXY(26,1); LCDWriteInt(voltage[0],4, 2, 0);};
  8119  050F  01F5               	clrf	gotoXY@y
  8120  0510  0AF5               	incf	gotoXY@y,f
  8121  0511  301A               	movlw	26
  8122  0512  319E  2671  3180   	fcall	_gotoXY
  8123  0515  0021               	movlb	1	; select bank1
  8124  0516  0821               	movf	(_voltage+1)^(0+128),w
  8125  0517  0020               	movlb	0	; select bank0
  8126  0518  00C0               	movwf	LCDWriteInt@value+1
  8127  0519  0021               	movlb	1	; select bank1
  8128  051A  0820               	movf	_voltage^(0+128),w
  8129  051B  0020               	movlb	0	; select bank0
  8130  051C  00BF               	movwf	LCDWriteInt@value
  8131  051D  3004               	movlw	4
  8132  051E  00D9               	movwf	??_main
  8133  051F  0859               	movf	??_main,w
  8134  0520  00C1               	movwf	LCDWriteInt@fieldLength
  8135  0521  3002               	movlw	2
  8136  0522  00DA               	movwf	??_main+1
  8137  0523  085A               	movf	??_main+1,w
  8138  0524  00C2               	movwf	LCDWriteInt@numPlaces
  8139  0525  01C3               	clrf	LCDWriteInt@sign
  8140  0526  3188  2016  3180   	fcall	_LCDWriteInt
  8141                           
  8142                           ;main.c: 264: LCDWriteCharacter('V');
  8143  0529  3056               	movlw	86
  8144  052A  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8145                           
  8146                           ;main.c: 266: { gotoXY(52,1); LCDWriteInt(Vref[0],4, 2, 0);};
  8147  052D  01F5               	clrf	gotoXY@y
  8148  052E  0AF5               	incf	gotoXY@y,f
  8149  052F  3034               	movlw	52
  8150  0530  319E  2671  3180   	fcall	_gotoXY
  8151  0533  0021               	movlb	1	; select bank1
  8152  0534  0831               	movf	(_Vref+1)^(0+128),w
  8153  0535  0020               	movlb	0	; select bank0
  8154  0536  00C0               	movwf	LCDWriteInt@value+1
  8155  0537  0021               	movlb	1	; select bank1
  8156  0538  0830               	movf	_Vref^(0+128),w
  8157  0539  0020               	movlb	0	; select bank0
  8158  053A  00BF               	movwf	LCDWriteInt@value
  8159  053B  3004               	movlw	4
  8160  053C  00D9               	movwf	??_main
  8161  053D  0859               	movf	??_main,w
  8162  053E  00C1               	movwf	LCDWriteInt@fieldLength
  8163  053F  3002               	movlw	2
  8164  0540  00DA               	movwf	??_main+1
  8165  0541  085A               	movf	??_main+1,w
  8166  0542  00C2               	movwf	LCDWriteInt@numPlaces
  8167  0543  01C3               	clrf	LCDWriteInt@sign
  8168  0544  3188  2016  3180   	fcall	_LCDWriteInt
  8169                           
  8170                           ;main.c: 267: LCDWriteCharacter('V');
  8171  0547  3056               	movlw	86
  8172  0548  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8173                           
  8174                           ;main.c: 269: { gotoXY(80,1); LCDWriteInt(Imode[0],1, 0, 0);};
  8175  054B  01F5               	clrf	gotoXY@y
  8176  054C  0AF5               	incf	gotoXY@y,f
  8177  054D  3050               	movlw	80
  8178  054E  319E  2671  3180   	fcall	_gotoXY
  8179  0551  0020               	movlb	0	; select bank0
  8180  0552  0862               	movf	_Imode,w
  8181  0553  00BF               	movwf	LCDWriteInt@value
  8182  0554  01C0               	clrf	LCDWriteInt@value+1
  8183  0555  1BBF               	btfsc	LCDWriteInt@value,7
  8184  0556  03C0               	decf	LCDWriteInt@value+1,f
  8185  0557  01C1               	clrf	LCDWriteInt@fieldLength
  8186  0558  0AC1               	incf	LCDWriteInt@fieldLength,f
  8187  0559  01C2               	clrf	LCDWriteInt@numPlaces
  8188  055A  01C3               	clrf	LCDWriteInt@sign
  8189  055B  3188  2016  3180   	fcall	_LCDWriteInt
  8190                           
  8191                           ;main.c: 272: { gotoXY(0,2); LCDWriteInt(current[2],3, 1, 0);};
  8192  055E  3002               	movlw	2
  8193  055F  0020               	movlb	0	; select bank0
  8194  0560  00D9               	movwf	??_main
  8195  0561  0859               	movf	??_main,w
  8196  0562  00F5               	movwf	gotoXY@y
  8197  0563  3000               	movlw	0
  8198  0564  319E  2671  3180   	fcall	_gotoXY
  8199  0567  0021               	movlb	1	; select bank1
  8200  0568  082D               	movf	((_current+1)^(0+128)+4),w
  8201  0569  0020               	movlb	0	; select bank0
  8202  056A  00C0               	movwf	LCDWriteInt@value+1
  8203  056B  0021               	movlb	1	; select bank1
  8204  056C  082C               	movf	(_current^(0+128)+4),w
  8205  056D  0020               	movlb	0	; select bank0
  8206  056E  00BF               	movwf	LCDWriteInt@value
  8207  056F  3003               	movlw	3
  8208  0570  00D9               	movwf	??_main
  8209  0571  0859               	movf	??_main,w
  8210  0572  00C1               	movwf	LCDWriteInt@fieldLength
  8211  0573  01C2               	clrf	LCDWriteInt@numPlaces
  8212  0574  0AC2               	incf	LCDWriteInt@numPlaces,f
  8213  0575  01C3               	clrf	LCDWriteInt@sign
  8214  0576  3188  2016  3180   	fcall	_LCDWriteInt
  8215                           
  8216                           ;main.c: 273: LCDWriteCharacter('A');
  8217  0579  3041               	movlw	65
  8218  057A  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8219                           
  8220                           ;main.c: 276: { gotoXY(26,2); LCDWriteInt(current[0],3, 1, 0);};
  8221  057D  3002               	movlw	2
  8222  057E  0020               	movlb	0	; select bank0
  8223  057F  00D9               	movwf	??_main
  8224  0580  0859               	movf	??_main,w
  8225  0581  00F5               	movwf	gotoXY@y
  8226  0582  301A               	movlw	26
  8227  0583  319E  2671  3180   	fcall	_gotoXY
  8228  0586  0021               	movlb	1	; select bank1
  8229  0587  0829               	movf	(_current+1)^(0+128),w
  8230  0588  0020               	movlb	0	; select bank0
  8231  0589  00C0               	movwf	LCDWriteInt@value+1
  8232  058A  0021               	movlb	1	; select bank1
  8233  058B  0828               	movf	_current^(0+128),w
  8234  058C  0020               	movlb	0	; select bank0
  8235  058D  00BF               	movwf	LCDWriteInt@value
  8236  058E  3003               	movlw	3
  8237  058F  00D9               	movwf	??_main
  8238  0590  0859               	movf	??_main,w
  8239  0591  00C1               	movwf	LCDWriteInt@fieldLength
  8240  0592  01C2               	clrf	LCDWriteInt@numPlaces
  8241  0593  0AC2               	incf	LCDWriteInt@numPlaces,f
  8242  0594  01C3               	clrf	LCDWriteInt@sign
  8243  0595  3188  2016  3180   	fcall	_LCDWriteInt
  8244                           
  8245                           ;main.c: 277: LCDWriteCharacter('A');
  8246  0598  3041               	movlw	65
  8247  0599  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8248                           
  8249                           ;main.c: 279: { gotoXY(52,2); LCDWriteInt(Iref[0],3, 1, 0);};
  8250  059C  3002               	movlw	2
  8251  059D  0020               	movlb	0	; select bank0
  8252  059E  00D9               	movwf	??_main
  8253  059F  0859               	movf	??_main,w
  8254  05A0  00F5               	movwf	gotoXY@y
  8255  05A1  3034               	movlw	52
  8256  05A2  319E  2671  3180   	fcall	_gotoXY
  8257  05A5  0021               	movlb	1	; select bank1
  8258  05A6  0839               	movf	(_Iref+1)^(0+128),w
  8259  05A7  0020               	movlb	0	; select bank0
  8260  05A8  00C0               	movwf	LCDWriteInt@value+1
  8261  05A9  0021               	movlb	1	; select bank1
  8262  05AA  0838               	movf	_Iref^(0+128),w
  8263  05AB  0020               	movlb	0	; select bank0
  8264  05AC  00BF               	movwf	LCDWriteInt@value
  8265  05AD  3003               	movlw	3
  8266  05AE  00D9               	movwf	??_main
  8267  05AF  0859               	movf	??_main,w
  8268  05B0  00C1               	movwf	LCDWriteInt@fieldLength
  8269  05B1  01C2               	clrf	LCDWriteInt@numPlaces
  8270  05B2  0AC2               	incf	LCDWriteInt@numPlaces,f
  8271  05B3  01C3               	clrf	LCDWriteInt@sign
  8272  05B4  3188  2016  3180   	fcall	_LCDWriteInt
  8273                           
  8274                           ;main.c: 280: LCDWriteCharacter('A');
  8275  05B7  3041               	movlw	65
  8276  05B8  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8277                           
  8278                           ;main.c: 282: { gotoXY(80,2); LCDWriteInt(batteryState[0],1, 0, 0);};
  8279  05BB  3002               	movlw	2
  8280  05BC  0020               	movlb	0	; select bank0
  8281  05BD  00D9               	movwf	??_main
  8282  05BE  0859               	movf	??_main,w
  8283  05BF  00F5               	movwf	gotoXY@y
  8284  05C0  3050               	movlw	80
  8285  05C1  319E  2671  3180   	fcall	_gotoXY
  8286  05C4  0020               	movlb	0	; select bank0
  8287  05C5  0864               	movf	_batteryState,w
  8288  05C6  00D9               	movwf	??_main
  8289  05C7  01DA               	clrf	??_main+1
  8290  05C8  0859               	movf	??_main,w
  8291  05C9  00BF               	movwf	LCDWriteInt@value
  8292  05CA  085A               	movf	??_main+1,w
  8293  05CB  00C0               	movwf	LCDWriteInt@value+1
  8294  05CC  01C1               	clrf	LCDWriteInt@fieldLength
  8295  05CD  0AC1               	incf	LCDWriteInt@fieldLength,f
  8296  05CE  01C2               	clrf	LCDWriteInt@numPlaces
  8297  05CF  01C3               	clrf	LCDWriteInt@sign
  8298  05D0  3188  2016  3180   	fcall	_LCDWriteInt
  8299                           
  8300                           ;main.c: 284: { gotoXY(0,3); LCDWriteInt(voltage[3],4, 2, 0);};
  8301  05D3  3003               	movlw	3
  8302  05D4  0020               	movlb	0	; select bank0
  8303  05D5  00D9               	movwf	??_main
  8304  05D6  0859               	movf	??_main,w
  8305  05D7  00F5               	movwf	gotoXY@y
  8306  05D8  3000               	movlw	0
  8307  05D9  319E  2671  3180   	fcall	_gotoXY
  8308  05DC  0021               	movlb	1	; select bank1
  8309  05DD  0827               	movf	((_voltage+1)^(0+128)+6),w
  8310  05DE  0020               	movlb	0	; select bank0
  8311  05DF  00C0               	movwf	LCDWriteInt@value+1
  8312  05E0  0021               	movlb	1	; select bank1
  8313  05E1  0826               	movf	(_voltage^(0+128)+6),w
  8314  05E2  0020               	movlb	0	; select bank0
  8315  05E3  00BF               	movwf	LCDWriteInt@value
  8316  05E4  3004               	movlw	4
  8317  05E5  00D9               	movwf	??_main
  8318  05E6  0859               	movf	??_main,w
  8319  05E7  00C1               	movwf	LCDWriteInt@fieldLength
  8320  05E8  3002               	movlw	2
  8321  05E9  00DA               	movwf	??_main+1
  8322  05EA  085A               	movf	??_main+1,w
  8323  05EB  00C2               	movwf	LCDWriteInt@numPlaces
  8324  05EC  01C3               	clrf	LCDWriteInt@sign
  8325  05ED  3188  2016  3180   	fcall	_LCDWriteInt
  8326                           
  8327                           ;main.c: 286: LCDWriteCharacter('V');
  8328  05F0  3056               	movlw	86
  8329  05F1  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8330                           
  8331                           ;main.c: 288: { gotoXY(26,3); LCDWriteInt(voltage[1],4, 2, 0);};
  8332  05F4  3003               	movlw	3
  8333  05F5  0020               	movlb	0	; select bank0
  8334  05F6  00D9               	movwf	??_main
  8335  05F7  0859               	movf	??_main,w
  8336  05F8  00F5               	movwf	gotoXY@y
  8337  05F9  301A               	movlw	26
  8338  05FA  319E  2671  3180   	fcall	_gotoXY
  8339  05FD  0021               	movlb	1	; select bank1
  8340  05FE  0823               	movf	((_voltage+1)^(0+128)+2),w
  8341  05FF  0020               	movlb	0	; select bank0
  8342  0600  00C0               	movwf	LCDWriteInt@value+1
  8343  0601  0021               	movlb	1	; select bank1
  8344  0602  0822               	movf	(_voltage^(0+128)+2),w
  8345  0603  0020               	movlb	0	; select bank0
  8346  0604  00BF               	movwf	LCDWriteInt@value
  8347  0605  3004               	movlw	4
  8348  0606  00D9               	movwf	??_main
  8349  0607  0859               	movf	??_main,w
  8350  0608  00C1               	movwf	LCDWriteInt@fieldLength
  8351  0609  3002               	movlw	2
  8352  060A  00DA               	movwf	??_main+1
  8353  060B  085A               	movf	??_main+1,w
  8354  060C  00C2               	movwf	LCDWriteInt@numPlaces
  8355  060D  01C3               	clrf	LCDWriteInt@sign
  8356  060E  3188  2016  3180   	fcall	_LCDWriteInt
  8357                           
  8358                           ;main.c: 290: LCDWriteCharacter('V');
  8359  0611  3056               	movlw	86
  8360  0612  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8361                           
  8362                           ;main.c: 292: { gotoXY(52,3); LCDWriteInt(Vref[1],4, 2, 0);};
  8363  0615  3003               	movlw	3
  8364  0616  0020               	movlb	0	; select bank0
  8365  0617  00D9               	movwf	??_main
  8366  0618  0859               	movf	??_main,w
  8367  0619  00F5               	movwf	gotoXY@y
  8368  061A  3034               	movlw	52
  8369  061B  319E  2671  3180   	fcall	_gotoXY
  8370  061E  0021               	movlb	1	; select bank1
  8371  061F  0833               	movf	((_Vref+1)^(0+128)+2),w
  8372  0620  0020               	movlb	0	; select bank0
  8373  0621  00C0               	movwf	LCDWriteInt@value+1
  8374  0622  0021               	movlb	1	; select bank1
  8375  0623  0832               	movf	(_Vref^(0+128)+2),w
  8376  0624  0020               	movlb	0	; select bank0
  8377  0625  00BF               	movwf	LCDWriteInt@value
  8378  0626  3004               	movlw	4
  8379  0627  00D9               	movwf	??_main
  8380  0628  0859               	movf	??_main,w
  8381  0629  00C1               	movwf	LCDWriteInt@fieldLength
  8382  062A  3002               	movlw	2
  8383  062B  00DA               	movwf	??_main+1
  8384  062C  085A               	movf	??_main+1,w
  8385  062D  00C2               	movwf	LCDWriteInt@numPlaces
  8386  062E  01C3               	clrf	LCDWriteInt@sign
  8387  062F  3188  2016  3180   	fcall	_LCDWriteInt
  8388                           
  8389                           ;main.c: 293: LCDWriteCharacter('V');
  8390  0632  3056               	movlw	86
  8391  0633  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8392                           
  8393                           ;main.c: 295: { gotoXY(80,3); LCDWriteInt(Imode[1],1, 0, 0);};
  8394  0636  3003               	movlw	3
  8395  0637  0020               	movlb	0	; select bank0
  8396  0638  00D9               	movwf	??_main
  8397  0639  0859               	movf	??_main,w
  8398  063A  00F5               	movwf	gotoXY@y
  8399  063B  3050               	movlw	80
  8400  063C  319E  2671  3180   	fcall	_gotoXY
  8401  063F  0020               	movlb	0	; select bank0
  8402  0640  0863               	movf	_Imode+1,w
  8403  0641  00BF               	movwf	LCDWriteInt@value
  8404  0642  01C0               	clrf	LCDWriteInt@value+1
  8405  0643  1BBF               	btfsc	LCDWriteInt@value,7
  8406  0644  03C0               	decf	LCDWriteInt@value+1,f
  8407  0645  01C1               	clrf	LCDWriteInt@fieldLength
  8408  0646  0AC1               	incf	LCDWriteInt@fieldLength,f
  8409  0647  01C2               	clrf	LCDWriteInt@numPlaces
  8410  0648  01C3               	clrf	LCDWriteInt@sign
  8411  0649  3188  2016  3180   	fcall	_LCDWriteInt
  8412                           
  8413                           ;main.c: 305: { gotoXY(0,4); LCDWriteInt(current[3],3, 1, 0);};
  8414  064C  3004               	movlw	4
  8415  064D  0020               	movlb	0	; select bank0
  8416  064E  00D9               	movwf	??_main
  8417  064F  0859               	movf	??_main,w
  8418  0650  00F5               	movwf	gotoXY@y
  8419  0651  3000               	movlw	0
  8420  0652  319E  2671  3180   	fcall	_gotoXY
  8421  0655  0021               	movlb	1	; select bank1
  8422  0656  082F               	movf	((_current+1)^(0+128)+6),w
  8423  0657  0020               	movlb	0	; select bank0
  8424  0658  00C0               	movwf	LCDWriteInt@value+1
  8425  0659  0021               	movlb	1	; select bank1
  8426  065A  082E               	movf	(_current^(0+128)+6),w
  8427  065B  0020               	movlb	0	; select bank0
  8428  065C  00BF               	movwf	LCDWriteInt@value
  8429  065D  3003               	movlw	3
  8430  065E  00D9               	movwf	??_main
  8431  065F  0859               	movf	??_main,w
  8432  0660  00C1               	movwf	LCDWriteInt@fieldLength
  8433  0661  01C2               	clrf	LCDWriteInt@numPlaces
  8434  0662  0AC2               	incf	LCDWriteInt@numPlaces,f
  8435  0663  01C3               	clrf	LCDWriteInt@sign
  8436  0664  3188  2016  3180   	fcall	_LCDWriteInt
  8437                           
  8438                           ;main.c: 306: LCDWriteCharacter('A');
  8439  0667  3041               	movlw	65
  8440  0668  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8441                           
  8442                           ;main.c: 308: { gotoXY(26,4); LCDWriteInt((int16_t)(current[3]*(voltage[3]/voltage[1]*.9
      +                          )),3, 1, 0);};
  8443  066B  3004               	movlw	4
  8444  066C  0020               	movlb	0	; select bank0
  8445  066D  00D9               	movwf	??_main
  8446  066E  0859               	movf	??_main,w
  8447  066F  00F5               	movwf	gotoXY@y
  8448  0670  301A               	movlw	26
  8449  0671  319E  2671  3180   	fcall	_gotoXY
  8450  0674  0021               	movlb	1	; select bank1
  8451  0675  0827               	movf	((_voltage+1)^(0+128)+6),w
  8452  0676  00F3               	movwf	___awdiv@dividend+1
  8453  0677  0826               	movf	(_voltage^(0+128)+6),w
  8454  0678  00F2               	movwf	___awdiv@dividend
  8455  0679  0823               	movf	((_voltage+1)^(0+128)+2),w
  8456  067A  00F1               	movwf	___awdiv@divisor+1
  8457  067B  0822               	movf	(_voltage^(0+128)+2),w
  8458  067C  00F0               	movwf	___awdiv@divisor
  8459  067D  3192  229B  3180   	fcall	___awdiv
  8460  0680  0871               	movf	?___awdiv+1,w
  8461  0681  00FA               	movwf	___awtoft@c+1
  8462  0682  0870               	movf	?___awdiv,w
  8463  0683  00F9               	movwf	___awtoft@c
  8464  0684  319F  273C  3180   	fcall	___awtoft
  8465  0687  0879               	movf	?___awtoft,w
  8466  0688  0020               	movlb	0	; select bank0
  8467  0689  00A4               	movwf	___ftmul@f2
  8468  068A  087A               	movf	?___awtoft+1,w
  8469  068B  00A5               	movwf	___ftmul@f2+1
  8470  068C  087B               	movf	?___awtoft+2,w
  8471  068D  00A6               	movwf	___ftmul@f2+2
  8472  068E  3066               	movlw	102
  8473  068F  00A1               	movwf	___ftmul@f1
  8474  0690  3066               	movlw	102
  8475  0691  00A2               	movwf	___ftmul@f1+1
  8476  0692  303F               	movlw	63
  8477  0693  00A3               	movwf	___ftmul@f1+2
  8478  0694  3197  274C  3180   	fcall	___ftmul
  8479  0697  0020               	movlb	0	; select bank0
  8480  0698  0821               	movf	?___ftmul,w
  8481  0699  0021               	movlb	1	; select bank1
  8482  069A  00E7               	movwf	_main$1305^(0+128)
  8483  069B  0020               	movlb	0	; select bank0
  8484  069C  0822               	movf	?___ftmul+1,w
  8485  069D  0021               	movlb	1	; select bank1
  8486  069E  00E8               	movwf	(_main$1305+1)^(0+128)
  8487  069F  0020               	movlb	0	; select bank0
  8488  06A0  0823               	movf	?___ftmul+2,w
  8489  06A1  0021               	movlb	1	; select bank1
  8490  06A2  00E9               	movwf	(_main$1305+2)^(0+128)
  8491  06A3  082F               	movf	((_current+1)^(0+128)+6),w
  8492  06A4  00FA               	movwf	___awtoft@c+1
  8493  06A5  082E               	movf	(_current^(0+128)+6),w
  8494  06A6  00F9               	movwf	___awtoft@c
  8495  06A7  319F  273C  3180   	fcall	___awtoft
  8496  06AA  0879               	movf	?___awtoft,w
  8497  06AB  0020               	movlb	0	; select bank0
  8498  06AC  00A4               	movwf	___ftmul@f2
  8499  06AD  087A               	movf	?___awtoft+1,w
  8500  06AE  00A5               	movwf	___ftmul@f2+1
  8501  06AF  087B               	movf	?___awtoft+2,w
  8502  06B0  00A6               	movwf	___ftmul@f2+2
  8503  06B1  0021               	movlb	1	; select bank1
  8504  06B2  0867               	movf	_main$1305^(0+128),w
  8505  06B3  0020               	movlb	0	; select bank0
  8506  06B4  00A1               	movwf	___ftmul@f1
  8507  06B5  0021               	movlb	1	; select bank1
  8508  06B6  0868               	movf	(_main$1305+1)^(0+128),w
  8509  06B7  0020               	movlb	0	; select bank0
  8510  06B8  00A2               	movwf	___ftmul@f1+1
  8511  06B9  0021               	movlb	1	; select bank1
  8512  06BA  0869               	movf	(_main$1305+2)^(0+128),w
  8513  06BB  0020               	movlb	0	; select bank0
  8514  06BC  00A3               	movwf	___ftmul@f1+2
  8515  06BD  3197  274C  3180   	fcall	___ftmul
  8516  06C0  0020               	movlb	0	; select bank0
  8517  06C1  0821               	movf	?___ftmul,w
  8518  06C2  00B1               	movwf	___fttol@f1
  8519  06C3  0822               	movf	?___ftmul+1,w
  8520  06C4  00B2               	movwf	___fttol@f1+1
  8521  06C5  0823               	movf	?___ftmul+2,w
  8522  06C6  00B3               	movwf	___fttol@f1+2
  8523  06C7  3195  256C  3180   	fcall	___fttol
  8524  06CA  0020               	movlb	0	; select bank0
  8525  06CB  0832               	movf	?___fttol+1,w
  8526  06CC  00C0               	movwf	LCDWriteInt@value+1
  8527  06CD  0831               	movf	?___fttol,w
  8528  06CE  00BF               	movwf	LCDWriteInt@value
  8529  06CF  3003               	movlw	3
  8530  06D0  00D9               	movwf	??_main
  8531  06D1  0859               	movf	??_main,w
  8532  06D2  00C1               	movwf	LCDWriteInt@fieldLength
  8533  06D3  01C2               	clrf	LCDWriteInt@numPlaces
  8534  06D4  0AC2               	incf	LCDWriteInt@numPlaces,f
  8535  06D5  01C3               	clrf	LCDWriteInt@sign
  8536  06D6  3188  2016  3180   	fcall	_LCDWriteInt
  8537                           
  8538                           ;main.c: 310: LCDWriteCharacter('A');
  8539  06D9  3041               	movlw	65
  8540  06DA  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8541                           
  8542                           ;main.c: 312: { gotoXY(52,4); LCDWriteInt(Iref[1],3, 1, 0);};
  8543  06DD  3004               	movlw	4
  8544  06DE  0020               	movlb	0	; select bank0
  8545  06DF  00D9               	movwf	??_main
  8546  06E0  0859               	movf	??_main,w
  8547  06E1  00F5               	movwf	gotoXY@y
  8548  06E2  3034               	movlw	52
  8549  06E3  319E  2671  3180   	fcall	_gotoXY
  8550  06E6  0021               	movlb	1	; select bank1
  8551  06E7  083B               	movf	((_Iref+1)^(0+128)+2),w
  8552  06E8  0020               	movlb	0	; select bank0
  8553  06E9  00C0               	movwf	LCDWriteInt@value+1
  8554  06EA  0021               	movlb	1	; select bank1
  8555  06EB  083A               	movf	(_Iref^(0+128)+2),w
  8556  06EC  0020               	movlb	0	; select bank0
  8557  06ED  00BF               	movwf	LCDWriteInt@value
  8558  06EE  3003               	movlw	3
  8559  06EF  00D9               	movwf	??_main
  8560  06F0  0859               	movf	??_main,w
  8561  06F1  00C1               	movwf	LCDWriteInt@fieldLength
  8562  06F2  01C2               	clrf	LCDWriteInt@numPlaces
  8563  06F3  0AC2               	incf	LCDWriteInt@numPlaces,f
  8564  06F4  01C3               	clrf	LCDWriteInt@sign
  8565  06F5  3188  2016  3180   	fcall	_LCDWriteInt
  8566                           
  8567                           ;main.c: 313: LCDWriteCharacter('A');
  8568  06F8  3041               	movlw	65
  8569  06F9  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8570                           
  8571                           ;main.c: 315: { gotoXY(80,4); LCDWriteInt(batteryState[1],1, 0, 0);};
  8572  06FC  3004               	movlw	4
  8573  06FD  0020               	movlb	0	; select bank0
  8574  06FE  00D9               	movwf	??_main
  8575  06FF  0859               	movf	??_main,w
  8576  0700  00F5               	movwf	gotoXY@y
  8577  0701  3050               	movlw	80
  8578  0702  319E  2671  3180   	fcall	_gotoXY
  8579  0705  0020               	movlb	0	; select bank0
  8580  0706  0865               	movf	_batteryState+1,w
  8581  0707  00D9               	movwf	??_main
  8582  0708  01DA               	clrf	??_main+1
  8583  0709  0859               	movf	??_main,w
  8584  070A  00BF               	movwf	LCDWriteInt@value
  8585  070B  085A               	movf	??_main+1,w
  8586  070C  00C0               	movwf	LCDWriteInt@value+1
  8587  070D  01C1               	clrf	LCDWriteInt@fieldLength
  8588  070E  0AC1               	incf	LCDWriteInt@fieldLength,f
  8589  070F  01C2               	clrf	LCDWriteInt@numPlaces
  8590  0710  01C3               	clrf	LCDWriteInt@sign
  8591  0711  3188  2016  3180   	fcall	_LCDWriteInt
  8592                           
  8593                           ;main.c: 319: { gotoXY(0,5); LCDWriteInt(dutyCycle6,4, 0, 0);};
  8594  0714  3005               	movlw	5
  8595  0715  0020               	movlb	0	; select bank0
  8596  0716  00D9               	movwf	??_main
  8597  0717  0859               	movf	??_main,w
  8598  0718  00F5               	movwf	gotoXY@y
  8599  0719  3000               	movlw	0
  8600  071A  319E  2671  3180   	fcall	_gotoXY
  8601  071D  0021               	movlb	1	; select bank1
  8602  071E  086B               	movf	(main@dutyCycle6+1)^(0+128),w
  8603  071F  0020               	movlb	0	; select bank0
  8604  0720  00C0               	movwf	LCDWriteInt@value+1
  8605  0721  0021               	movlb	1	; select bank1
  8606  0722  086A               	movf	main@dutyCycle6^(0+128),w
  8607  0723  0020               	movlb	0	; select bank0
  8608  0724  00BF               	movwf	LCDWriteInt@value
  8609  0725  3004               	movlw	4
  8610  0726  00D9               	movwf	??_main
  8611  0727  0859               	movf	??_main,w
  8612  0728  00C1               	movwf	LCDWriteInt@fieldLength
  8613  0729  01C2               	clrf	LCDWriteInt@numPlaces
  8614  072A  01C3               	clrf	LCDWriteInt@sign
  8615  072B  3188  2016  3180   	fcall	_LCDWriteInt
  8616                           
  8617                           ;main.c: 320: { gotoXY(18,5); LCDWriteInt(VHoldMode[0],1, 0, 0);};
  8618  072E  3005               	movlw	5
  8619  072F  0020               	movlb	0	; select bank0
  8620  0730  00D9               	movwf	??_main
  8621  0731  0859               	movf	??_main,w
  8622  0732  00F5               	movwf	gotoXY@y
  8623  0733  3012               	movlw	18
  8624  0734  319E  2671  3180   	fcall	_gotoXY
  8625  0737  0020               	movlb	0	; select bank0
  8626  0738  0860               	movf	_VHoldMode,w
  8627  0739  00BF               	movwf	LCDWriteInt@value
  8628  073A  01C0               	clrf	LCDWriteInt@value+1
  8629  073B  1BBF               	btfsc	LCDWriteInt@value,7
  8630  073C  03C0               	decf	LCDWriteInt@value+1,f
  8631  073D  01C1               	clrf	LCDWriteInt@fieldLength
  8632  073E  0AC1               	incf	LCDWriteInt@fieldLength,f
  8633  073F  01C2               	clrf	LCDWriteInt@numPlaces
  8634  0740  01C3               	clrf	LCDWriteInt@sign
  8635  0741  3188  2016  3180   	fcall	_LCDWriteInt
  8636                           
  8637                           ;main.c: 321: LCDWriteCharacter(' ');
  8638  0744  3020               	movlw	32
  8639  0745  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8640                           
  8641                           ;main.c: 322: { gotoXY(28,5); LCDWriteInt(dutyCycle7,4, 0, 0);};
  8642  0748  3005               	movlw	5
  8643  0749  0020               	movlb	0	; select bank0
  8644  074A  00D9               	movwf	??_main
  8645  074B  0859               	movf	??_main,w
  8646  074C  00F5               	movwf	gotoXY@y
  8647  074D  301C               	movlw	28
  8648  074E  319E  2671  3180   	fcall	_gotoXY
  8649  0751  0021               	movlb	1	; select bank1
  8650  0752  086D               	movf	(main@dutyCycle7+1)^(0+128),w
  8651  0753  0020               	movlb	0	; select bank0
  8652  0754  00C0               	movwf	LCDWriteInt@value+1
  8653  0755  0021               	movlb	1	; select bank1
  8654  0756  086C               	movf	main@dutyCycle7^(0+128),w
  8655  0757  0020               	movlb	0	; select bank0
  8656  0758  00BF               	movwf	LCDWriteInt@value
  8657  0759  3004               	movlw	4
  8658  075A  00D9               	movwf	??_main
  8659  075B  0859               	movf	??_main,w
  8660  075C  00C1               	movwf	LCDWriteInt@fieldLength
  8661  075D  01C2               	clrf	LCDWriteInt@numPlaces
  8662  075E  01C3               	clrf	LCDWriteInt@sign
  8663  075F  3188  2016  3180   	fcall	_LCDWriteInt
  8664                           
  8665                           ;main.c: 323: { gotoXY(46,5); LCDWriteInt(VHoldMode[1],1, 0, 0);};
  8666  0762  3005               	movlw	5
  8667  0763  0020               	movlb	0	; select bank0
  8668  0764  00D9               	movwf	??_main
  8669  0765  0859               	movf	??_main,w
  8670  0766  00F5               	movwf	gotoXY@y
  8671  0767  302E               	movlw	46
  8672  0768  319E  2671  3180   	fcall	_gotoXY
  8673  076B  0020               	movlb	0	; select bank0
  8674  076C  0861               	movf	_VHoldMode+1,w
  8675  076D  00BF               	movwf	LCDWriteInt@value
  8676  076E  01C0               	clrf	LCDWriteInt@value+1
  8677  076F  1BBF               	btfsc	LCDWriteInt@value,7
  8678  0770  03C0               	decf	LCDWriteInt@value+1,f
  8679  0771  01C1               	clrf	LCDWriteInt@fieldLength
  8680  0772  0AC1               	incf	LCDWriteInt@fieldLength,f
  8681  0773  01C2               	clrf	LCDWriteInt@numPlaces
  8682  0774  01C3               	clrf	LCDWriteInt@sign
  8683  0775  3188  2016  3180   	fcall	_LCDWriteInt
  8684                           
  8685                           ;main.c: 324: LCDWriteCharacter(' ');
  8686  0778  3020               	movlw	32
  8687  0779  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8688                           
  8689                           ;main.c: 325: { gotoXY(56,5); LCDWriteInt(batteryTemp,3, 1, 0);};
  8690  077C  3005               	movlw	5
  8691  077D  0020               	movlb	0	; select bank0
  8692  077E  00D9               	movwf	??_main
  8693  077F  0859               	movf	??_main,w
  8694  0780  00F5               	movwf	gotoXY@y
  8695  0781  3038               	movlw	56
  8696  0782  319E  2671  3180   	fcall	_gotoXY
  8697  0785  0020               	movlb	0	; select bank0
  8698  0786  086E               	movf	_batteryTemp+1,w
  8699  0787  00C0               	movwf	LCDWriteInt@value+1
  8700  0788  086D               	movf	_batteryTemp,w
  8701  0789  00BF               	movwf	LCDWriteInt@value
  8702  078A  3003               	movlw	3
  8703  078B  00D9               	movwf	??_main
  8704  078C  0859               	movf	??_main,w
  8705  078D  00C1               	movwf	LCDWriteInt@fieldLength
  8706  078E  01C2               	clrf	LCDWriteInt@numPlaces
  8707  078F  0AC2               	incf	LCDWriteInt@numPlaces,f
  8708  0790  01C3               	clrf	LCDWriteInt@sign
  8709  0791  3188  2016  3180   	fcall	_LCDWriteInt
  8710                           
  8711                           ;main.c: 326: LCDWriteCharacter(123);
  8712  0794  307B               	movlw	123
  8713  0795  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8714                           
  8715                           ;main.c: 327: LCDWriteCharacter('C');
  8716  0798  3043               	movlw	67
  8717  0799  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8718                           
  8719                           ;main.c: 397: if(batteryState[0] > FINISHED)
  8720  079C  3003               	movlw	3
  8721  079D  0020               	movlb	0	; select bank0
  8722  079E  0264               	subwf	_batteryState,w
  8723  079F  1C03               	skipc
  8724  07A0  2FA5               	goto	l3652
  8725                           
  8726                           ;main.c: 398: {
  8727                           ;main.c: 399: cc_cv_mode(0);
  8728  07A1  3000               	movlw	0
  8729  07A2  318D  250C  3180   	fcall	_cc_cv_mode
  8730  07A5                     l3652:	
  8731                           
  8732                           ;main.c: 400: }
  8733                           ;main.c: 401: if(batteryState[1] > FINISHED)
  8734  07A5  3003               	movlw	3
  8735  07A6  0020               	movlb	0	; select bank0
  8736  07A7  0265               	subwf	_batteryState+1,w
  8737  07A8  1C03               	skipc
  8738  07A9  2FAE               	goto	l3656
  8739                           
  8740                           ;main.c: 402: {
  8741                           ;main.c: 403: cc_cv_mode(1);
  8742  07AA  3001               	movlw	1
  8743  07AB  318D  250C  3180   	fcall	_cc_cv_mode
  8744  07AE                     l3656:	
  8745                           
  8746                           ;main.c: 404: }
  8747                           ;main.c: 405: slowLoop=0;
  8748  07AE  0021               	movlb	1	; select bank1
  8749  07AF  01DB               	clrf	main@slowLoop^(0+128)
  8750  07B0  2878               	goto	l3332
  8751  07B1                     __end_of_main:	
  8752                           
  8753                           	psect	text1
  8754  08CF                     __ptext1:	
  8755 ;; *************** function _tempCalc *****************
  8756 ;; Defined at:
  8757 ;;		line 4 in file "tempCalc.c"
  8758 ;; Parameters:    Size  Location     Type
  8759 ;;  analogValue     2   46[BANK0 ] int 
  8760 ;; Auto vars:     Size  Location     Type
  8761 ;;  steinhart       3   54[BANK0 ] float 
  8762 ;;  R               3   48[BANK0 ] float 
  8763 ;; Return value:  Size  Location     Type
  8764 ;;                  2   46[BANK0 ] int 
  8765 ;; Registers used:
  8766 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8767 ;; Tracked objects:
  8768 ;;		On entry : 0/0
  8769 ;;		On exit  : 0/0
  8770 ;;		Unchanged: 0/0
  8771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8772 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8773 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8775 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8776 ;;Total ram usage:       11 bytes
  8777 ;; Hardware stack levels used:    1
  8778 ;; Hardware stack levels required when called:    4
  8779 ;; This function calls:
  8780 ;;		___awtoft
  8781 ;;		___ftadd
  8782 ;;		___ftdiv
  8783 ;;		___ftmul
  8784 ;;		___ftsub
  8785 ;;		___fttol
  8786 ;;		_log
  8787 ;; This function is called by:
  8788 ;;		_main
  8789 ;; This function uses a non-reentrant model
  8790 ;;
  8791                           
  8792                           
  8793                           ;psect for function _tempCalc
  8794  08CF                     _tempCalc:	
  8795                           
  8796                           ;tempCalc.c: 6: float R, steinhart;
  8797                           ;tempCalc.c: 7: R=10030/(1023/(float)analogValue-1);
  8798                           
  8799                           ;incstack = 0
  8800                           ; Regs used in _tempCalc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8801  08CF  3000               	movlw	0
  8802  08D0  0020               	movlb	0	; select bank0
  8803  08D1  00B1               	movwf	___ftadd@f1
  8804  08D2  3080               	movlw	128
  8805  08D3  00B2               	movwf	___ftadd@f1+1
  8806  08D4  30BF               	movlw	191
  8807  08D5  00B3               	movwf	___ftadd@f1+2
  8808  08D6  084F               	movf	tempCalc@analogValue+1,w
  8809  08D7  00FA               	movwf	___awtoft@c+1
  8810  08D8  084E               	movf	tempCalc@analogValue,w
  8811  08D9  00F9               	movwf	___awtoft@c
  8812  08DA  319F  273C  3188   	fcall	___awtoft
  8813  08DD  0879               	movf	?___awtoft,w
  8814  08DE  0020               	movlb	0	; select bank0
  8815  08DF  00A1               	movwf	___ftdiv@f2
  8816  08E0  087A               	movf	?___awtoft+1,w
  8817  08E1  00A2               	movwf	___ftdiv@f2+1
  8818  08E2  087B               	movf	?___awtoft+2,w
  8819  08E3  00A3               	movwf	___ftdiv@f2+2
  8820  08E4  30C0               	movlw	192
  8821  08E5  00A4               	movwf	___ftdiv@f1
  8822  08E6  307F               	movlw	127
  8823  08E7  00A5               	movwf	___ftdiv@f1+1
  8824  08E8  3044               	movlw	68
  8825  08E9  00A6               	movwf	___ftdiv@f1+2
  8826  08EA  3195  25F3  3188   	fcall	___ftdiv
  8827  08ED  0020               	movlb	0	; select bank0
  8828  08EE  0821               	movf	?___ftdiv,w
  8829  08EF  00B4               	movwf	___ftadd@f2
  8830  08F0  0822               	movf	?___ftdiv+1,w
  8831  08F1  00B5               	movwf	___ftadd@f2+1
  8832  08F2  0823               	movf	?___ftdiv+2,w
  8833  08F3  00B6               	movwf	___ftadd@f2+2
  8834  08F4  3189  21B6  3188   	fcall	___ftadd
  8835  08F7  0020               	movlb	0	; select bank0
  8836  08F8  0831               	movf	?___ftadd,w
  8837  08F9  00D3               	movwf	_tempCalc$1304
  8838  08FA  0832               	movf	?___ftadd+1,w
  8839  08FB  00D4               	movwf	_tempCalc$1304+1
  8840  08FC  0833               	movf	?___ftadd+2,w
  8841  08FD  00D5               	movwf	_tempCalc$1304+2
  8842                           
  8843                           ;tempCalc.c: 6: float R, steinhart;
  8844                           ;tempCalc.c: 7: R=10030/(1023/(float)analogValue-1);
  8845  08FE  0853               	movf	_tempCalc$1304,w
  8846  08FF  00A1               	movwf	___ftdiv@f2
  8847  0900  0854               	movf	_tempCalc$1304+1,w
  8848  0901  00A2               	movwf	___ftdiv@f2+1
  8849  0902  0855               	movf	_tempCalc$1304+2,w
  8850  0903  00A3               	movwf	___ftdiv@f2+2
  8851  0904  30B8               	movlw	184
  8852  0905  00A4               	movwf	___ftdiv@f1
  8853  0906  301C               	movlw	28
  8854  0907  00A5               	movwf	___ftdiv@f1+1
  8855  0908  3046               	movlw	70
  8856  0909  00A6               	movwf	___ftdiv@f1+2
  8857  090A  3195  25F3  3188   	fcall	___ftdiv
  8858  090D  0020               	movlb	0	; select bank0
  8859  090E  0821               	movf	?___ftdiv,w
  8860  090F  00D0               	movwf	tempCalc@R
  8861  0910  0822               	movf	?___ftdiv+1,w
  8862  0911  00D1               	movwf	tempCalc@R+1
  8863  0912  0823               	movf	?___ftdiv+2,w
  8864  0913  00D2               	movwf	tempCalc@R+2
  8865                           
  8866                           ;tempCalc.c: 8: steinhart=R/10010;
  8867  0914  3068               	movlw	104
  8868  0915  00A1               	movwf	___ftdiv@f2
  8869  0916  301C               	movlw	28
  8870  0917  00A2               	movwf	___ftdiv@f2+1
  8871  0918  3046               	movlw	70
  8872  0919  00A3               	movwf	___ftdiv@f2+2
  8873  091A  0850               	movf	tempCalc@R,w
  8874  091B  00A4               	movwf	___ftdiv@f1
  8875  091C  0851               	movf	tempCalc@R+1,w
  8876  091D  00A5               	movwf	___ftdiv@f1+1
  8877  091E  0852               	movf	tempCalc@R+2,w
  8878  091F  00A6               	movwf	___ftdiv@f1+2
  8879  0920  3195  25F3  3188   	fcall	___ftdiv
  8880  0923  0020               	movlb	0	; select bank0
  8881  0924  0821               	movf	?___ftdiv,w
  8882  0925  00D6               	movwf	tempCalc@steinhart
  8883  0926  0822               	movf	?___ftdiv+1,w
  8884  0927  00D7               	movwf	tempCalc@steinhart+1
  8885  0928  0823               	movf	?___ftdiv+2,w
  8886  0929  00D8               	movwf	tempCalc@steinhart+2
  8887                           
  8888                           ;tempCalc.c: 9: steinhart=log(steinhart);
  8889  092A  0856               	movf	tempCalc@steinhart,w
  8890  092B  00C8               	movwf	log@x
  8891  092C  0857               	movf	tempCalc@steinhart+1,w
  8892  092D  00C9               	movwf	log@x+1
  8893  092E  0858               	movf	tempCalc@steinhart+2,w
  8894  092F  00CA               	movwf	log@x+2
  8895  0930  3196  269C  3188   	fcall	_log
  8896  0933  0020               	movlb	0	; select bank0
  8897  0934  0848               	movf	?_log,w
  8898  0935  00D6               	movwf	tempCalc@steinhart
  8899  0936  0849               	movf	?_log+1,w
  8900  0937  00D7               	movwf	tempCalc@steinhart+1
  8901  0938  084A               	movf	?_log+2,w
  8902  0939  00D8               	movwf	tempCalc@steinhart+2
  8903                           
  8904                           ;tempCalc.c: 10: steinhart/=3795.3;
  8905  093A  3035               	movlw	53
  8906  093B  00A1               	movwf	___ftdiv@f2
  8907  093C  306D               	movlw	109
  8908  093D  00A2               	movwf	___ftdiv@f2+1
  8909  093E  3045               	movlw	69
  8910  093F  00A3               	movwf	___ftdiv@f2+2
  8911  0940  0856               	movf	tempCalc@steinhart,w
  8912  0941  00A4               	movwf	___ftdiv@f1
  8913  0942  0857               	movf	tempCalc@steinhart+1,w
  8914  0943  00A5               	movwf	___ftdiv@f1+1
  8915  0944  0858               	movf	tempCalc@steinhart+2,w
  8916  0945  00A6               	movwf	___ftdiv@f1+2
  8917  0946  3195  25F3  3188   	fcall	___ftdiv
  8918  0949  0020               	movlb	0	; select bank0
  8919  094A  0821               	movf	?___ftdiv,w
  8920  094B  00D6               	movwf	tempCalc@steinhart
  8921  094C  0822               	movf	?___ftdiv+1,w
  8922  094D  00D7               	movwf	tempCalc@steinhart+1
  8923  094E  0823               	movf	?___ftdiv+2,w
  8924  094F  00D8               	movwf	tempCalc@steinhart+2
  8925                           
  8926                           ;tempCalc.c: 11: steinhart+=1.0/(25+273.15);
  8927  0950  30CF               	movlw	207
  8928  0951  00B1               	movwf	___ftadd@f1
  8929  0952  305B               	movlw	91
  8930  0953  00B2               	movwf	___ftadd@f1+1
  8931  0954  303B               	movlw	59
  8932  0955  00B3               	movwf	___ftadd@f1+2
  8933  0956  0856               	movf	tempCalc@steinhart,w
  8934  0957  00B4               	movwf	___ftadd@f2
  8935  0958  0857               	movf	tempCalc@steinhart+1,w
  8936  0959  00B5               	movwf	___ftadd@f2+1
  8937  095A  0858               	movf	tempCalc@steinhart+2,w
  8938  095B  00B6               	movwf	___ftadd@f2+2
  8939  095C  3189  21B6  3188   	fcall	___ftadd
  8940  095F  0020               	movlb	0	; select bank0
  8941  0960  0831               	movf	?___ftadd,w
  8942  0961  00D6               	movwf	tempCalc@steinhart
  8943  0962  0832               	movf	?___ftadd+1,w
  8944  0963  00D7               	movwf	tempCalc@steinhart+1
  8945  0964  0833               	movf	?___ftadd+2,w
  8946  0965  00D8               	movwf	tempCalc@steinhart+2
  8947                           
  8948                           ;tempCalc.c: 12: steinhart=1.0/steinhart;
  8949  0966  0856               	movf	tempCalc@steinhart,w
  8950  0967  00A1               	movwf	___ftdiv@f2
  8951  0968  0857               	movf	tempCalc@steinhart+1,w
  8952  0969  00A2               	movwf	___ftdiv@f2+1
  8953  096A  0858               	movf	tempCalc@steinhart+2,w
  8954  096B  00A3               	movwf	___ftdiv@f2+2
  8955  096C  3000               	movlw	0
  8956  096D  00A4               	movwf	___ftdiv@f1
  8957  096E  3080               	movlw	128
  8958  096F  00A5               	movwf	___ftdiv@f1+1
  8959  0970  303F               	movlw	63
  8960  0971  00A6               	movwf	___ftdiv@f1+2
  8961  0972  3195  25F3  3188   	fcall	___ftdiv
  8962  0975  0020               	movlb	0	; select bank0
  8963  0976  0821               	movf	?___ftdiv,w
  8964  0977  00D6               	movwf	tempCalc@steinhart
  8965  0978  0822               	movf	?___ftdiv+1,w
  8966  0979  00D7               	movwf	tempCalc@steinhart+1
  8967  097A  0823               	movf	?___ftdiv+2,w
  8968  097B  00D8               	movwf	tempCalc@steinhart+2
  8969                           
  8970                           ;tempCalc.c: 13: steinhart-=273;
  8971  097C  3080               	movlw	128
  8972  097D  00BE               	movwf	___ftsub@f2
  8973  097E  3088               	movlw	136
  8974  097F  00BF               	movwf	___ftsub@f2+1
  8975  0980  3043               	movlw	67
  8976  0981  00C0               	movwf	___ftsub@f2+2
  8977  0982  0856               	movf	tempCalc@steinhart,w
  8978  0983  00C1               	movwf	___ftsub@f1
  8979  0984  0857               	movf	tempCalc@steinhart+1,w
  8980  0985  00C2               	movwf	___ftsub@f1+1
  8981  0986  0858               	movf	tempCalc@steinhart+2,w
  8982  0987  00C3               	movwf	___ftsub@f1+2
  8983  0988  319E  26E0  3188   	fcall	___ftsub
  8984  098B  0020               	movlb	0	; select bank0
  8985  098C  083E               	movf	?___ftsub,w
  8986  098D  00D6               	movwf	tempCalc@steinhart
  8987  098E  083F               	movf	?___ftsub+1,w
  8988  098F  00D7               	movwf	tempCalc@steinhart+1
  8989  0990  0840               	movf	?___ftsub+2,w
  8990  0991  00D8               	movwf	tempCalc@steinhart+2
  8991                           
  8992                           ;tempCalc.c: 15: steinhart*=10;
  8993  0992  3000               	movlw	0
  8994  0993  00A1               	movwf	___ftmul@f1
  8995  0994  3020               	movlw	32
  8996  0995  00A2               	movwf	___ftmul@f1+1
  8997  0996  3041               	movlw	65
  8998  0997  00A3               	movwf	___ftmul@f1+2
  8999  0998  0856               	movf	tempCalc@steinhart,w
  9000  0999  00A4               	movwf	___ftmul@f2
  9001  099A  0857               	movf	tempCalc@steinhart+1,w
  9002  099B  00A5               	movwf	___ftmul@f2+1
  9003  099C  0858               	movf	tempCalc@steinhart+2,w
  9004  099D  00A6               	movwf	___ftmul@f2+2
  9005  099E  3197  274C  3188   	fcall	___ftmul
  9006  09A1  0020               	movlb	0	; select bank0
  9007  09A2  0821               	movf	?___ftmul,w
  9008  09A3  00D6               	movwf	tempCalc@steinhart
  9009  09A4  0822               	movf	?___ftmul+1,w
  9010  09A5  00D7               	movwf	tempCalc@steinhart+1
  9011  09A6  0823               	movf	?___ftmul+2,w
  9012  09A7  00D8               	movwf	tempCalc@steinhart+2
  9013                           
  9014                           ;tempCalc.c: 18: return (int16_t)steinhart;
  9015  09A8  0856               	movf	tempCalc@steinhart,w
  9016  09A9  00B1               	movwf	___fttol@f1
  9017  09AA  0857               	movf	tempCalc@steinhart+1,w
  9018  09AB  00B2               	movwf	___fttol@f1+1
  9019  09AC  0858               	movf	tempCalc@steinhart+2,w
  9020  09AD  00B3               	movwf	___fttol@f1+2
  9021  09AE  3195  256C         	fcall	___fttol
  9022  09B0  0020               	movlb	0	; select bank0
  9023  09B1  0832               	movf	?___fttol+1,w
  9024  09B2  00CF               	movwf	?_tempCalc+1
  9025  09B3  0831               	movf	?___fttol,w
  9026  09B4  00CE               	movwf	?_tempCalc
  9027  09B5  0008               	return
  9028  09B6                     __end_of_tempCalc:	
  9029                           
  9030                           	psect	text2
  9031  169C                     __ptext2:	
  9032 ;; *************** function _log *****************
  9033 ;; Defined at:
  9034 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\log.c"
  9035 ;; Parameters:    Size  Location     Type
  9036 ;;  x               3   40[BANK0 ] int 
  9037 ;; Auto vars:     Size  Location     Type
  9038 ;;  exponent        2   44[BANK0 ] int 
  9039 ;; Return value:  Size  Location     Type
  9040 ;;                  3   40[BANK0 ] int 
  9041 ;; Registers used:
  9042 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9043 ;; Tracked objects:
  9044 ;;		On entry : 0/0
  9045 ;;		On exit  : 0/0
  9046 ;;		Unchanged: 0/0
  9047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9048 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9049 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9050 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9051 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9052 ;;Total ram usage:        6 bytes
  9053 ;; Hardware stack levels used:    1
  9054 ;; Hardware stack levels required when called:    3
  9055 ;; This function calls:
  9056 ;;		___awtoft
  9057 ;;		___ftadd
  9058 ;;		___ftge
  9059 ;;		___ftmul
  9060 ;;		_eval_poly
  9061 ;;		_frexp
  9062 ;; This function is called by:
  9063 ;;		_tempCalc
  9064 ;; This function uses a non-reentrant model
  9065 ;;
  9066                           
  9067                           
  9068                           ;psect for function _log
  9069  169C                     _log:	
  9070                           
  9071                           ;incstack = 0
  9072                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9073  169C  0020               	movlb	0	; select bank0
  9074  169D  0848               	movf	log@x,w
  9075  169E  00B1               	movwf	___ftge@ff1
  9076  169F  0849               	movf	log@x+1,w
  9077  16A0  00B2               	movwf	___ftge@ff1+1
  9078  16A1  084A               	movf	log@x+2,w
  9079  16A2  00B3               	movwf	___ftge@ff1+2
  9080  16A3  3000               	movlw	0
  9081  16A4  00B4               	movwf	___ftge@ff2
  9082  16A5  3000               	movlw	0
  9083  16A6  00B5               	movwf	___ftge@ff2+1
  9084  16A7  3000               	movlw	0
  9085  16A8  00B6               	movwf	___ftge@ff2+2
  9086  16A9  3180  2007  3196   	fcall	___ftge
  9087  16AC  1803               	btfsc	3,0
  9088  16AD  2EBB               	goto	l2830
  9089  16AE  3021               	movlw	33
  9090  16AF  0021               	movlb	1	; select bank1
  9091  16B0  00C0               	movwf	_errno^(0+128)
  9092  16B1  3000               	movlw	0
  9093  16B2  00C1               	movwf	(_errno^(0+128)+1)
  9094  16B3  3000               	movlw	0
  9095  16B4  0020               	movlb	0	; select bank0
  9096  16B5  00C8               	movwf	?_log
  9097  16B6  3000               	movlw	0
  9098  16B7  00C9               	movwf	?_log+1
  9099  16B8  3000               	movlw	0
  9100  16B9  00CA               	movwf	?_log+2
  9101  16BA  0008               	return
  9102  16BB                     l2830:	
  9103  16BB  0020               	movlb	0	; select bank0
  9104  16BC  084A               	movf	log@x+2,w
  9105  16BD  0449               	iorwf	log@x+1,w
  9106  16BE  0448               	iorwf	log@x,w
  9107  16BF  1D03               	skipz
  9108  16C0  2ECE               	goto	l2836
  9109  16C1  3022               	movlw	34
  9110  16C2  0021               	movlb	1	; select bank1
  9111  16C3  00C0               	movwf	_errno^(0+128)
  9112  16C4  3000               	movlw	0
  9113  16C5  00C1               	movwf	(_errno^(0+128)+1)
  9114  16C6  3000               	movlw	0
  9115  16C7  0020               	movlb	0	; select bank0
  9116  16C8  00C8               	movwf	?_log
  9117  16C9  3000               	movlw	0
  9118  16CA  00C9               	movwf	?_log+1
  9119  16CB  3000               	movlw	0
  9120  16CC  00CA               	movwf	?_log+2
  9121  16CD  0008               	return
  9122  16CE                     l2836:	
  9123  16CE  3000               	movlw	0
  9124  16CF  00B1               	movwf	___ftadd@f1
  9125  16D0  3080               	movlw	128
  9126  16D1  00B2               	movwf	___ftadd@f1+1
  9127  16D2  30BF               	movlw	191
  9128  16D3  00B3               	movwf	___ftadd@f1+2
  9129  16D4  3000               	movlw	0
  9130  16D5  00A1               	movwf	___ftmul@f1
  9131  16D6  3000               	movlw	0
  9132  16D7  00A2               	movwf	___ftmul@f1+1
  9133  16D8  3040               	movlw	64
  9134  16D9  00A3               	movwf	___ftmul@f1+2
  9135  16DA  304C               	movlw	(low (log@exponent| 0))& (0+255)
  9136  16DB  00CB               	movwf	??_log
  9137  16DC  084B               	movf	??_log,w
  9138  16DD  00F3               	movwf	frexp@eptr
  9139  16DE  0848               	movf	log@x,w
  9140  16DF  00F0               	movwf	frexp@value
  9141  16E0  0849               	movf	log@x+1,w
  9142  16E1  00F1               	movwf	frexp@value+1
  9143  16E2  084A               	movf	log@x+2,w
  9144  16E3  00F2               	movwf	frexp@value+2
  9145  16E4  3191  21D6  3196   	fcall	_frexp
  9146  16E7  0870               	movf	?_frexp,w
  9147  16E8  0020               	movlb	0	; select bank0
  9148  16E9  00A4               	movwf	___ftmul@f2
  9149  16EA  0871               	movf	?_frexp+1,w
  9150  16EB  00A5               	movwf	___ftmul@f2+1
  9151  16EC  0872               	movf	?_frexp+2,w
  9152  16ED  00A6               	movwf	___ftmul@f2+2
  9153  16EE  3197  274C  3196   	fcall	___ftmul
  9154  16F1  0020               	movlb	0	; select bank0
  9155  16F2  0821               	movf	?___ftmul,w
  9156  16F3  00B4               	movwf	___ftadd@f2
  9157  16F4  0822               	movf	?___ftmul+1,w
  9158  16F5  00B5               	movwf	___ftadd@f2+1
  9159  16F6  0823               	movf	?___ftmul+2,w
  9160  16F7  00B6               	movwf	___ftadd@f2+2
  9161  16F8  3189  21B6  3196   	fcall	___ftadd
  9162  16FB  0020               	movlb	0	; select bank0
  9163  16FC  0831               	movf	?___ftadd,w
  9164  16FD  00C8               	movwf	log@x
  9165  16FE  0832               	movf	?___ftadd+1,w
  9166  16FF  00C9               	movwf	log@x+1
  9167  1700  0833               	movf	?___ftadd+2,w
  9168  1701  00CA               	movwf	log@x+2
  9169  1702  30FF               	movlw	255
  9170  1703  07CC               	addwf	log@exponent,f
  9171  1704  30FF               	movlw	255
  9172  1705  3DCD               	addwfc	log@exponent+1,f
  9173  1706  0848               	movf	log@x,w
  9174  1707  00BE               	movwf	eval_poly@x
  9175  1708  0849               	movf	log@x+1,w
  9176  1709  00BF               	movwf	eval_poly@x+1
  9177  170A  084A               	movf	log@x+2,w
  9178  170B  00C0               	movwf	eval_poly@x+2
  9179  170C  3000               	movlw	low (log@coeff| (0+32768))
  9180  170D  00C1               	movwf	eval_poly@d
  9181  170E  3098               	movlw	high (log@coeff| (0+32768))
  9182  170F  00C2               	movwf	eval_poly@d+1
  9183  1710  3008               	movlw	8
  9184  1711  00C3               	movwf	eval_poly@n
  9185  1712  3000               	movlw	0
  9186  1713  00C4               	movwf	eval_poly@n+1
  9187  1714  3193  2340  3196   	fcall	_eval_poly
  9188  1717  0020               	movlb	0	; select bank0
  9189  1718  083E               	movf	?_eval_poly,w
  9190  1719  00C8               	movwf	log@x
  9191  171A  083F               	movf	?_eval_poly+1,w
  9192  171B  00C9               	movwf	log@x+1
  9193  171C  0840               	movf	?_eval_poly+2,w
  9194  171D  00CA               	movwf	log@x+2
  9195  171E  0848               	movf	log@x,w
  9196  171F  00B1               	movwf	___ftadd@f1
  9197  1720  0849               	movf	log@x+1,w
  9198  1721  00B2               	movwf	___ftadd@f1+1
  9199  1722  084A               	movf	log@x+2,w
  9200  1723  00B3               	movwf	___ftadd@f1+2
  9201  1724  3072               	movlw	114
  9202  1725  00A1               	movwf	___ftmul@f1
  9203  1726  3031               	movlw	49
  9204  1727  00A2               	movwf	___ftmul@f1+1
  9205  1728  303F               	movlw	63
  9206  1729  00A3               	movwf	___ftmul@f1+2
  9207  172A  084D               	movf	log@exponent+1,w
  9208  172B  00FA               	movwf	___awtoft@c+1
  9209  172C  084C               	movf	log@exponent,w
  9210  172D  00F9               	movwf	___awtoft@c
  9211  172E  319F  273C  3196   	fcall	___awtoft
  9212  1731  0879               	movf	?___awtoft,w
  9213  1732  0020               	movlb	0	; select bank0
  9214  1733  00A4               	movwf	___ftmul@f2
  9215  1734  087A               	movf	?___awtoft+1,w
  9216  1735  00A5               	movwf	___ftmul@f2+1
  9217  1736  087B               	movf	?___awtoft+2,w
  9218  1737  00A6               	movwf	___ftmul@f2+2
  9219  1738  3197  274C  3196   	fcall	___ftmul
  9220  173B  0020               	movlb	0	; select bank0
  9221  173C  0821               	movf	?___ftmul,w
  9222  173D  00B4               	movwf	___ftadd@f2
  9223  173E  0822               	movf	?___ftmul+1,w
  9224  173F  00B5               	movwf	___ftadd@f2+1
  9225  1740  0823               	movf	?___ftmul+2,w
  9226  1741  00B6               	movwf	___ftadd@f2+2
  9227  1742  3189  21B6         	fcall	___ftadd
  9228  1744  0020               	movlb	0	; select bank0
  9229  1745  0831               	movf	?___ftadd,w
  9230  1746  00C8               	movwf	?_log
  9231  1747  0832               	movf	?___ftadd+1,w
  9232  1748  00C9               	movwf	?_log+1
  9233  1749  0833               	movf	?___ftadd+2,w
  9234  174A  00CA               	movwf	?_log+2
  9235  174B  0008               	return
  9236  174C                     __end_of_log:	
  9237                           
  9238                           	psect	text3
  9239  11D6                     __ptext3:	
  9240 ;; *************** function _frexp *****************
  9241 ;; Defined at:
  9242 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
  9243 ;; Parameters:    Size  Location     Type
  9244 ;;  value           3    0[COMMON] int 
  9245 ;;  eptr            1    3[COMMON] PTR int 
  9246 ;;		 -> log@exponent(2), 
  9247 ;; Auto vars:     Size  Location     Type
  9248 ;;		None
  9249 ;; Return value:  Size  Location     Type
  9250 ;;                  3    0[COMMON] PTR int 
  9251 ;; Registers used:
  9252 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9253 ;; Tracked objects:
  9254 ;;		On entry : 0/0
  9255 ;;		On exit  : 0/0
  9256 ;;		Unchanged: 0/0
  9257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9258 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9260 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9261 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9262 ;;Total ram usage:        6 bytes
  9263 ;; Hardware stack levels used:    1
  9264 ;; This function calls:
  9265 ;;		Nothing
  9266 ;; This function is called by:
  9267 ;;		_log
  9268 ;; This function uses a non-reentrant model
  9269 ;;
  9270                           
  9271                           
  9272                           ;psect for function _frexp
  9273  11D6                     _frexp:	
  9274                           
  9275                           ;incstack = 0
  9276                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  9277  11D6  0872               	movf	frexp@value+2,w
  9278  11D7  0471               	iorwf	frexp@value+1,w
  9279  11D8  0470               	iorwf	frexp@value,w
  9280  11D9  1D03               	skipz
  9281  11DA  29E8               	goto	l2626
  9282  11DB  0873               	movf	frexp@eptr,w
  9283  11DC  0086               	movwf	6
  9284  11DD  0187               	clrf	7
  9285  11DE  3000               	movlw	0
  9286  11DF  3FC0               	movwi [0]fsr1
  9287  11E0  3FC1               	movwi [1]fsr1
  9288  11E1  3000               	movlw	0
  9289  11E2  00F0               	movwf	?_frexp
  9290  11E3  3000               	movlw	0
  9291  11E4  00F1               	movwf	?_frexp+1
  9292  11E5  3000               	movlw	0
  9293  11E6  00F2               	movwf	?_frexp+2
  9294  11E7  0008               	return
  9295  11E8                     l2626:	
  9296  11E8  0872               	movf	frexp@value+2,w
  9297  11E9  397F               	andlw	127
  9298  11EA  00F4               	movwf	??_frexp
  9299  11EB  01F5               	clrf	??_frexp+1
  9300  11EC  35F4               	lslf	??_frexp,f
  9301  11ED  0DF5               	rlf	??_frexp+1,f
  9302  11EE  0873               	movf	frexp@eptr,w
  9303  11EF  0086               	movwf	6
  9304  11F0  0187               	clrf	7
  9305  11F1  0874               	movf	??_frexp,w
  9306  11F2  3FC0               	movwi [0]fsr1
  9307  11F3  0875               	movf	??_frexp+1,w
  9308  11F4  3FC1               	movwi [1]fsr1
  9309  11F5  0D71               	rlf	frexp@value+1,w
  9310  11F6  0D71               	rlf	frexp@value+1,w
  9311  11F7  3901               	andlw	1
  9312  11F8  00F4               	movwf	??_frexp
  9313  11F9  01F5               	clrf	??_frexp+1
  9314  11FA  0873               	movf	frexp@eptr,w
  9315  11FB  0086               	movwf	6
  9316  11FC  0187               	clrf	7
  9317  11FD  0874               	movf	??_frexp,w
  9318  11FE  0481               	iorwf	1,f
  9319  11FF  3141               	addfsr 1,1
  9320  1200  0875               	movf	??_frexp+1,w
  9321  1201  0481               	iorwf	1,f
  9322  1202  0873               	movf	frexp@eptr,w
  9323  1203  0086               	movwf	6
  9324  1204  0187               	clrf	7
  9325  1205  3082               	movlw	130
  9326  1206  0781               	addwf	1,f
  9327  1207  3141               	addfsr 1,1
  9328  1208  30FF               	movlw	255
  9329  1209  3D81               	addwfc	1,f
  9330  120A  317F               	addfsr 1,-1
  9331  120B  0872               	movf	frexp@value+2,w
  9332  120C  3980               	andlw	-128
  9333  120D  383F               	iorlw	63
  9334  120E  00F2               	movwf	frexp@value+2
  9335  120F  13F1               	bcf	frexp@value+1,7
  9336  1210  0008               	return
  9337  1211                     __end_of_frexp:	
  9338                           
  9339                           	psect	text4
  9340  1340                     __ptext4:	
  9341 ;; *************** function _eval_poly *****************
  9342 ;; Defined at:
  9343 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\evalpoly.c"
  9344 ;; Parameters:    Size  Location     Type
  9345 ;;  x               3   30[BANK0 ] PTR int 
  9346 ;;  d               2   33[BANK0 ] PTR const 
  9347 ;;		 -> log@coeff(27), 
  9348 ;;  n               2   35[BANK0 ] int 
  9349 ;; Auto vars:     Size  Location     Type
  9350 ;;  res             3   37[BANK0 ] int 
  9351 ;; Return value:  Size  Location     Type
  9352 ;;                  3   30[BANK0 ] int 
  9353 ;; Registers used:
  9354 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9355 ;; Tracked objects:
  9356 ;;		On entry : 0/0
  9357 ;;		On exit  : 0/0
  9358 ;;		Unchanged: 0/0
  9359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9360 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9361 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9363 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9364 ;;Total ram usage:       10 bytes
  9365 ;; Hardware stack levels used:    1
  9366 ;; Hardware stack levels required when called:    2
  9367 ;; This function calls:
  9368 ;;		___ftadd
  9369 ;;		___ftmul
  9370 ;;		___wmul
  9371 ;; This function is called by:
  9372 ;;		_log
  9373 ;; This function uses a non-reentrant model
  9374 ;;
  9375                           
  9376                           
  9377                           ;psect for function _eval_poly
  9378  1340                     _eval_poly:	
  9379                           
  9380                           ;incstack = 0
  9381                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9382  1340  0020               	movlb	0	; select bank0
  9383  1341  0844               	movf	eval_poly@n+1,w
  9384  1342  00F1               	movwf	___wmul@multiplier+1
  9385  1343  0843               	movf	eval_poly@n,w
  9386  1344  00F0               	movwf	___wmul@multiplier
  9387  1345  3003               	movlw	3
  9388  1346  00F2               	movwf	___wmul@multiplicand
  9389  1347  3000               	movlw	0
  9390  1348  00F3               	movwf	___wmul@multiplicand+1
  9391  1349  319E  26C5  3193   	fcall	___wmul
  9392  134C  0020               	movlb	0	; select bank0
  9393  134D  0841               	movf	eval_poly@d,w
  9394  134E  0770               	addwf	?___wmul,w
  9395  134F  0084               	movwf	4
  9396  1350  0842               	movf	eval_poly@d+1,w
  9397  1351  3D71               	addwfc	?___wmul+1,w
  9398  1352  0085               	movwf	5
  9399  1353  3F00               	moviw [0]fsr0
  9400  1354  00C5               	movwf	eval_poly@res
  9401  1355  3F01               	moviw [1]fsr0
  9402  1356  00C6               	movwf	eval_poly@res+1
  9403  1357  3F02               	moviw [2]fsr0
  9404  1358                     L6:	
  9405  1358  00C7               	movwf	eval_poly@res+2
  9406  1359  0843               	movf	eval_poly@n,w
  9407  135A  0444               	iorwf	eval_poly@n+1,w
  9408  135B  1903               	btfsc	3,2
  9409  135C  2B99               	goto	l2644
  9410  135D  30FF               	movlw	255
  9411  135E  07C3               	addwf	eval_poly@n,f
  9412  135F  30FF               	movlw	255
  9413  1360  3DC4               	addwfc	eval_poly@n+1,f
  9414  1361  0844               	movf	eval_poly@n+1,w
  9415  1362  00F1               	movwf	___wmul@multiplier+1
  9416  1363  0843               	movf	eval_poly@n,w
  9417  1364  00F0               	movwf	___wmul@multiplier
  9418  1365  3003               	movlw	3
  9419  1366  00F2               	movwf	___wmul@multiplicand
  9420  1367  3000               	movlw	0
  9421  1368  00F3               	movwf	___wmul@multiplicand+1
  9422  1369  319E  26C5  3193   	fcall	___wmul
  9423  136C  0020               	movlb	0	; select bank0
  9424  136D  0841               	movf	eval_poly@d,w
  9425  136E  0770               	addwf	?___wmul,w
  9426  136F  0084               	movwf	4
  9427  1370  0842               	movf	eval_poly@d+1,w
  9428  1371  3D71               	addwfc	?___wmul+1,w
  9429  1372  0085               	movwf	5
  9430  1373  3F00               	moviw [0]fsr0
  9431  1374  00B1               	movwf	___ftadd@f1
  9432  1375  3F01               	moviw [1]fsr0
  9433  1376  00B2               	movwf	___ftadd@f1+1
  9434  1377  3F02               	moviw [2]fsr0
  9435  1378  00B3               	movwf	___ftadd@f1+2
  9436  1379  0845               	movf	eval_poly@res,w
  9437  137A  00A1               	movwf	___ftmul@f1
  9438  137B  0846               	movf	eval_poly@res+1,w
  9439  137C  00A2               	movwf	___ftmul@f1+1
  9440  137D  0847               	movf	eval_poly@res+2,w
  9441  137E  00A3               	movwf	___ftmul@f1+2
  9442  137F  083E               	movf	eval_poly@x,w
  9443  1380  00A4               	movwf	___ftmul@f2
  9444  1381  083F               	movf	eval_poly@x+1,w
  9445  1382  00A5               	movwf	___ftmul@f2+1
  9446  1383  0840               	movf	eval_poly@x+2,w
  9447  1384  00A6               	movwf	___ftmul@f2+2
  9448  1385  3197  274C  3193   	fcall	___ftmul
  9449  1388  0020               	movlb	0	; select bank0
  9450  1389  0821               	movf	?___ftmul,w
  9451  138A  00B4               	movwf	___ftadd@f2
  9452  138B  0822               	movf	?___ftmul+1,w
  9453  138C  00B5               	movwf	___ftadd@f2+1
  9454  138D  0823               	movf	?___ftmul+2,w
  9455  138E  00B6               	movwf	___ftadd@f2+2
  9456  138F  3189  21B6  3193   	fcall	___ftadd
  9457  1392  0020               	movlb	0	; select bank0
  9458  1393  0831               	movf	?___ftadd,w
  9459  1394  00C5               	movwf	eval_poly@res
  9460  1395  0832               	movf	?___ftadd+1,w
  9461  1396  00C6               	movwf	eval_poly@res+1
  9462  1397  0833               	movf	?___ftadd+2,w
  9463  1398  2B58               	goto	L6
  9464  1399                     l2644:	
  9465  1399  0845               	movf	eval_poly@res,w
  9466  139A  00BE               	movwf	?_eval_poly
  9467  139B  0846               	movf	eval_poly@res+1,w
  9468  139C  00BF               	movwf	?_eval_poly+1
  9469  139D  0847               	movf	eval_poly@res+2,w
  9470  139E  00C0               	movwf	?_eval_poly+2
  9471  139F  0008               	return
  9472  13A0                     __end_of_eval_poly:	
  9473                           
  9474                           	psect	text5
  9475  0007                     __ptext5:	
  9476 ;; *************** function ___ftge *****************
  9477 ;; Defined at:
  9478 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  9479 ;; Parameters:    Size  Location     Type
  9480 ;;  ff1             3   17[BANK0 ] float 
  9481 ;;  ff2             3   20[BANK0 ] float 
  9482 ;; Auto vars:     Size  Location     Type
  9483 ;;		None
  9484 ;; Return value:  Size  Location     Type
  9485 ;;		None               void
  9486 ;; Registers used:
  9487 ;;		wreg, status,2, status,0
  9488 ;; Tracked objects:
  9489 ;;		On entry : 0/0
  9490 ;;		On exit  : 0/0
  9491 ;;		Unchanged: 0/0
  9492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9493 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9495 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9496 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;Total ram usage:        9 bytes
  9498 ;; Hardware stack levels used:    1
  9499 ;; This function calls:
  9500 ;;		Nothing
  9501 ;; This function is called by:
  9502 ;;		_main
  9503 ;;		_log
  9504 ;; This function uses a non-reentrant model
  9505 ;;
  9506                           
  9507                           
  9508                           ;psect for function ___ftge
  9509  0007                     ___ftge:	
  9510                           
  9511                           ;incstack = 0
  9512                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  9513  0007  0020               	movlb	0	; select bank0
  9514  0008  1FB3               	btfss	___ftge@ff1+2,7
  9515  0009  281E               	goto	l2560
  9516  000A  0931               	comf	___ftge@ff1,w
  9517  000B  00B7               	movwf	??___ftge
  9518  000C  0932               	comf	___ftge@ff1+1,w
  9519  000D  00B8               	movwf	??___ftge+1
  9520  000E  0933               	comf	___ftge@ff1+2,w
  9521  000F  00B9               	movwf	??___ftge+2
  9522  0010  0AB7               	incf	??___ftge,f
  9523  0011  1903               	skipnz
  9524  0012  0AB8               	incf	??___ftge+1,f
  9525  0013  1903               	skipnz
  9526  0014  0AB9               	incf	??___ftge+2,f
  9527  0015  3000               	movlw	0
  9528  0016  0737               	addwf	??___ftge,w
  9529  0017  00B1               	movwf	___ftge@ff1
  9530  0018  3000               	movlw	0
  9531  0019  3D38               	addwfc	??___ftge+1,w
  9532  001A  00B2               	movwf	___ftge@ff1+1
  9533  001B  3080               	movlw	128
  9534  001C  3D39               	addwfc	??___ftge+2,w
  9535  001D  00B3               	movwf	___ftge@ff1+2
  9536  001E                     l2560:	
  9537  001E  1FB6               	btfss	___ftge@ff2+2,7
  9538  001F  2834               	goto	l2564
  9539  0020  0934               	comf	___ftge@ff2,w
  9540  0021  00B7               	movwf	??___ftge
  9541  0022  0935               	comf	___ftge@ff2+1,w
  9542  0023  00B8               	movwf	??___ftge+1
  9543  0024  0936               	comf	___ftge@ff2+2,w
  9544  0025  00B9               	movwf	??___ftge+2
  9545  0026  0AB7               	incf	??___ftge,f
  9546  0027  1903               	skipnz
  9547  0028  0AB8               	incf	??___ftge+1,f
  9548  0029  1903               	skipnz
  9549  002A  0AB9               	incf	??___ftge+2,f
  9550  002B  3000               	movlw	0
  9551  002C  0737               	addwf	??___ftge,w
  9552  002D  00B4               	movwf	___ftge@ff2
  9553  002E  3000               	movlw	0
  9554  002F  3D38               	addwfc	??___ftge+1,w
  9555  0030  00B5               	movwf	___ftge@ff2+1
  9556  0031  3080               	movlw	128
  9557  0032  3D39               	addwfc	??___ftge+2,w
  9558  0033  00B6               	movwf	___ftge@ff2+2
  9559  0034                     l2564:	
  9560  0034  3080               	movlw	128
  9561  0035  06B3               	xorwf	___ftge@ff1+2,f
  9562  0036  3080               	movlw	128
  9563  0037  06B6               	xorwf	___ftge@ff2+2,f
  9564  0038  0836               	movf	___ftge@ff2+2,w
  9565  0039  0233               	subwf	___ftge@ff1+2,w
  9566  003A  1D03               	skipz
  9567  003B  0008               	return
  9568  003C  0835               	movf	___ftge@ff2+1,w
  9569  003D  0232               	subwf	___ftge@ff1+1,w
  9570  003E  1D03               	skipz
  9571  003F  0008               	return
  9572  0040  0834               	movf	___ftge@ff2,w
  9573  0041  0231               	subwf	___ftge@ff1,w
  9574  0042  0008               	return
  9575  0043                     __end_of___ftge:	
  9576                           
  9577                           	psect	text6
  9578  1EE0                     __ptext6:	
  9579 ;; *************** function ___ftsub *****************
  9580 ;; Defined at:
  9581 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftsub.c"
  9582 ;; Parameters:    Size  Location     Type
  9583 ;;  f2              3   30[BANK0 ] float 
  9584 ;;  f1              3   33[BANK0 ] float 
  9585 ;; Auto vars:     Size  Location     Type
  9586 ;;		None
  9587 ;; Return value:  Size  Location     Type
  9588 ;;                  3   30[BANK0 ] float 
  9589 ;; Registers used:
  9590 ;;		wreg, status,2, status,0, pclath, cstack
  9591 ;; Tracked objects:
  9592 ;;		On entry : 0/0
  9593 ;;		On exit  : 0/0
  9594 ;;		Unchanged: 0/0
  9595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9596 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9599 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9600 ;;Total ram usage:        6 bytes
  9601 ;; Hardware stack levels used:    1
  9602 ;; Hardware stack levels required when called:    2
  9603 ;; This function calls:
  9604 ;;		___ftadd
  9605 ;; This function is called by:
  9606 ;;		_tempCalc
  9607 ;; This function uses a non-reentrant model
  9608 ;;
  9609                           
  9610                           
  9611                           ;psect for function ___ftsub
  9612  1EE0                     ___ftsub:	
  9613                           
  9614                           ;incstack = 0
  9615                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9616  1EE0  0020               	movlb	0	; select bank0
  9617  1EE1  0840               	movf	___ftsub@f2+2,w
  9618  1EE2  043F               	iorwf	___ftsub@f2+1,w
  9619  1EE3  043E               	iorwf	___ftsub@f2,w
  9620  1EE4  1903               	skipnz
  9621  1EE5  2EE8               	goto	l2990
  9622  1EE6  3080               	movlw	128
  9623  1EE7  06C0               	xorwf	___ftsub@f2+2,f
  9624  1EE8                     l2990:	
  9625  1EE8  0841               	movf	___ftsub@f1,w
  9626  1EE9  00B1               	movwf	___ftadd@f1
  9627  1EEA  0842               	movf	___ftsub@f1+1,w
  9628  1EEB  00B2               	movwf	___ftadd@f1+1
  9629  1EEC  0843               	movf	___ftsub@f1+2,w
  9630  1EED  00B3               	movwf	___ftadd@f1+2
  9631  1EEE  083E               	movf	___ftsub@f2,w
  9632  1EEF  00B4               	movwf	___ftadd@f2
  9633  1EF0  083F               	movf	___ftsub@f2+1,w
  9634  1EF1  00B5               	movwf	___ftadd@f2+1
  9635  1EF2  0840               	movf	___ftsub@f2+2,w
  9636  1EF3  00B6               	movwf	___ftadd@f2+2
  9637  1EF4  3189  21B6         	fcall	___ftadd
  9638  1EF6  0020               	movlb	0	; select bank0
  9639  1EF7  0831               	movf	?___ftadd,w
  9640  1EF8  00BE               	movwf	?___ftsub
  9641  1EF9  0832               	movf	?___ftadd+1,w
  9642  1EFA  00BF               	movwf	?___ftsub+1
  9643  1EFB  0833               	movf	?___ftadd+2,w
  9644  1EFC  00C0               	movwf	?___ftsub+2
  9645  1EFD  0008               	return
  9646  1EFE                     __end_of___ftsub:	
  9647                           
  9648                           	psect	text7
  9649  09B6                     __ptext7:	
  9650 ;; *************** function ___ftadd *****************
  9651 ;; Defined at:
  9652 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  9653 ;; Parameters:    Size  Location     Type
  9654 ;;  f1              3   17[BANK0 ] float 
  9655 ;;  f2              3   20[BANK0 ] float 
  9656 ;; Auto vars:     Size  Location     Type
  9657 ;;  exp1            1   29[BANK0 ] unsigned char 
  9658 ;;  exp2            1   28[BANK0 ] unsigned char 
  9659 ;;  sign            1   27[BANK0 ] unsigned char 
  9660 ;; Return value:  Size  Location     Type
  9661 ;;                  3   17[BANK0 ] float 
  9662 ;; Registers used:
  9663 ;;		wreg, status,2, status,0, pclath, cstack
  9664 ;; Tracked objects:
  9665 ;;		On entry : 0/0
  9666 ;;		On exit  : 0/0
  9667 ;;		Unchanged: 0/0
  9668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9669 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9670 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9671 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9672 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9673 ;;Total ram usage:       13 bytes
  9674 ;; Hardware stack levels used:    1
  9675 ;; Hardware stack levels required when called:    1
  9676 ;; This function calls:
  9677 ;;		___ftpack
  9678 ;; This function is called by:
  9679 ;;		_tempCalc
  9680 ;;		___ftsub
  9681 ;;		_log
  9682 ;;		_eval_poly
  9683 ;; This function uses a non-reentrant model
  9684 ;;
  9685                           
  9686                           
  9687                           ;psect for function ___ftadd
  9688  09B6                     ___ftadd:	
  9689                           
  9690                           ;incstack = 0
  9691                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9692  09B6  0020               	movlb	0	; select bank0
  9693  09B7  0831               	movf	___ftadd@f1,w
  9694  09B8  00B7               	movwf	??___ftadd
  9695  09B9  0832               	movf	___ftadd@f1+1,w
  9696  09BA  00B8               	movwf	??___ftadd+1
  9697  09BB  0833               	movf	___ftadd@f1+2,w
  9698  09BC  00B9               	movwf	??___ftadd+2
  9699  09BD  1003               	clrc
  9700  09BE  0D38               	rlf	??___ftadd+1,w
  9701  09BF  0D39               	rlf	??___ftadd+2,w
  9702  09C0  00BA               	movwf	??___ftadd+3
  9703  09C1  083A               	movf	??___ftadd+3,w
  9704  09C2  00BD               	movwf	___ftadd@exp1
  9705  09C3  0834               	movf	___ftadd@f2,w
  9706  09C4  00B7               	movwf	??___ftadd
  9707  09C5  0835               	movf	___ftadd@f2+1,w
  9708  09C6  00B8               	movwf	??___ftadd+1
  9709  09C7  0836               	movf	___ftadd@f2+2,w
  9710  09C8  00B9               	movwf	??___ftadd+2
  9711  09C9  1003               	clrc
  9712  09CA  0D38               	rlf	??___ftadd+1,w
  9713  09CB  0D39               	rlf	??___ftadd+2,w
  9714  09CC  00BA               	movwf	??___ftadd+3
  9715  09CD  083A               	movf	??___ftadd+3,w
  9716  09CE  00BC               	movwf	___ftadd@exp2
  9717  09CF  083D               	movf	___ftadd@exp1,w
  9718  09D0  1903               	btfsc	3,2
  9719  09D1  29DE               	goto	l2428
  9720  09D2  083C               	movf	___ftadd@exp2,w
  9721  09D3  023D               	subwf	___ftadd@exp1,w
  9722  09D4  1803               	skipnc
  9723  09D5  29E5               	goto	l2432
  9724  09D6  033D               	decf	___ftadd@exp1,w
  9725  09D7  3AFF               	xorlw	255
  9726  09D8  073C               	addwf	___ftadd@exp2,w
  9727  09D9  00B7               	movwf	??___ftadd
  9728  09DA  3019               	movlw	25
  9729  09DB  0237               	subwf	??___ftadd,w
  9730  09DC  1C03               	skipc
  9731  09DD  29E5               	goto	l2432
  9732  09DE                     l2428:	
  9733  09DE  0834               	movf	___ftadd@f2,w
  9734  09DF  00B1               	movwf	?___ftadd
  9735  09E0  0835               	movf	___ftadd@f2+1,w
  9736  09E1  00B2               	movwf	?___ftadd+1
  9737  09E2  0836               	movf	___ftadd@f2+2,w
  9738  09E3  00B3               	movwf	?___ftadd+2
  9739  09E4  0008               	return
  9740  09E5                     l2432:	
  9741  09E5  083C               	movf	___ftadd@exp2,w
  9742  09E6  1903               	btfsc	3,2
  9743  09E7  0008               	return
  9744  09E8  083D               	movf	___ftadd@exp1,w
  9745  09E9  023C               	subwf	___ftadd@exp2,w
  9746  09EA  1803               	skipnc
  9747  09EB  29F4               	goto	l2438
  9748  09EC  033C               	decf	___ftadd@exp2,w
  9749  09ED  3AFF               	xorlw	255
  9750  09EE  073D               	addwf	___ftadd@exp1,w
  9751  09EF  00B7               	movwf	??___ftadd
  9752  09F0  3019               	movlw	25
  9753  09F1  0237               	subwf	??___ftadd,w
  9754  09F2  1803               	btfsc	3,0
  9755  09F3  0008               	return
  9756  09F4                     l2438:	
  9757  09F4  3006               	movlw	6
  9758  09F5  00B7               	movwf	??___ftadd
  9759  09F6  0837               	movf	??___ftadd,w
  9760  09F7  00BB               	movwf	___ftadd@sign
  9761  09F8  1BB3               	btfsc	___ftadd@f1+2,7
  9762  09F9  17BB               	bsf	___ftadd@sign,7
  9763  09FA  1BB6               	btfsc	___ftadd@f2+2,7
  9764  09FB  173B               	bsf	___ftadd@sign,6
  9765  09FC  17B2               	bsf	___ftadd@f1+1,7
  9766  09FD  30FF               	movlw	255
  9767  09FE  05B1               	andwf	___ftadd@f1,f
  9768  09FF  30FF               	movlw	255
  9769  0A00  05B2               	andwf	___ftadd@f1+1,f
  9770  0A01  3000               	movlw	0
  9771  0A02  05B3               	andwf	___ftadd@f1+2,f
  9772  0A03  17B5               	bsf	___ftadd@f2+1,7
  9773  0A04  30FF               	movlw	255
  9774  0A05  05B4               	andwf	___ftadd@f2,f
  9775  0A06  30FF               	movlw	255
  9776  0A07  05B5               	andwf	___ftadd@f2+1,f
  9777  0A08  3000               	movlw	0
  9778  0A09  05B6               	andwf	___ftadd@f2+2,f
  9779  0A0A  083C               	movf	___ftadd@exp2,w
  9780  0A0B  023D               	subwf	___ftadd@exp1,w
  9781  0A0C  1803               	skipnc
  9782  0A0D  2A30               	goto	l2460
  9783  0A0E                     l2450:	
  9784  0A0E  3001               	movlw	1
  9785  0A0F                     u2545:	
  9786  0A0F  35B4               	lslf	___ftadd@f2,f
  9787  0A10  0DB5               	rlf	___ftadd@f2+1,f
  9788  0A11  0DB6               	rlf	___ftadd@f2+2,f
  9789  0A12  0B89               	decfsz	9,f
  9790  0A13  2A0F               	goto	u2545
  9791  0A14  3001               	movlw	1
  9792  0A15  02BC               	subwf	___ftadd@exp2,f
  9793  0A16  083C               	movf	___ftadd@exp2,w
  9794  0A17  063D               	xorwf	___ftadd@exp1,w
  9795  0A18  1903               	skipnz
  9796  0A19  2A2B               	goto	l2458
  9797  0A1A  3001               	movlw	1
  9798  0A1B  02BB               	subwf	___ftadd@sign,f
  9799  0A1C  083B               	movf	___ftadd@sign,w
  9800  0A1D  3907               	andlw	7
  9801  0A1E  1903               	btfsc	3,2
  9802  0A1F  2A2B               	goto	l2458
  9803  0A20  2A0E               	goto	l2450
  9804  0A21                     l2456:	
  9805  0A21  3001               	movlw	1
  9806  0A22                     u2575:	
  9807  0A22  36B3               	lsrf	___ftadd@f1+2,f
  9808  0A23  0CB2               	rrf	___ftadd@f1+1,f
  9809  0A24  0CB1               	rrf	___ftadd@f1,f
  9810  0A25  0B89               	decfsz	9,f
  9811  0A26  2A22               	goto	u2575
  9812  0A27  3001               	movlw	1
  9813  0A28  00B7               	movwf	??___ftadd
  9814  0A29  0837               	movf	??___ftadd,w
  9815  0A2A  07BD               	addwf	___ftadd@exp1,f
  9816  0A2B                     l2458:	
  9817  0A2B  083D               	movf	___ftadd@exp1,w
  9818  0A2C  063C               	xorwf	___ftadd@exp2,w
  9819  0A2D  1903               	btfsc	3,2
  9820  0A2E  2A55               	goto	l818
  9821  0A2F  2A21               	goto	l2456
  9822  0A30                     l2460:	
  9823  0A30  083D               	movf	___ftadd@exp1,w
  9824  0A31  023C               	subwf	___ftadd@exp2,w
  9825  0A32  1803               	skipnc
  9826  0A33  2A55               	goto	l818
  9827  0A34                     l2462:	
  9828  0A34  3001               	movlw	1
  9829  0A35                     u2605:	
  9830  0A35  35B1               	lslf	___ftadd@f1,f
  9831  0A36  0DB2               	rlf	___ftadd@f1+1,f
  9832  0A37  0DB3               	rlf	___ftadd@f1+2,f
  9833  0A38  0B89               	decfsz	9,f
  9834  0A39  2A35               	goto	u2605
  9835  0A3A  3001               	movlw	1
  9836  0A3B  02BD               	subwf	___ftadd@exp1,f
  9837  0A3C  083C               	movf	___ftadd@exp2,w
  9838  0A3D  063D               	xorwf	___ftadd@exp1,w
  9839  0A3E  1903               	skipnz
  9840  0A3F  2A51               	goto	l2470
  9841  0A40  3001               	movlw	1
  9842  0A41  02BB               	subwf	___ftadd@sign,f
  9843  0A42  083B               	movf	___ftadd@sign,w
  9844  0A43  3907               	andlw	7
  9845  0A44  1903               	btfsc	3,2
  9846  0A45  2A51               	goto	l2470
  9847  0A46  2A34               	goto	l2462
  9848  0A47                     l2468:	
  9849  0A47  3001               	movlw	1
  9850  0A48                     u2635:	
  9851  0A48  36B6               	lsrf	___ftadd@f2+2,f
  9852  0A49  0CB5               	rrf	___ftadd@f2+1,f
  9853  0A4A  0CB4               	rrf	___ftadd@f2,f
  9854  0A4B  0B89               	decfsz	9,f
  9855  0A4C  2A48               	goto	u2635
  9856  0A4D  3001               	movlw	1
  9857  0A4E  00B7               	movwf	??___ftadd
  9858  0A4F  0837               	movf	??___ftadd,w
  9859  0A50  07BC               	addwf	___ftadd@exp2,f
  9860  0A51                     l2470:	
  9861  0A51  083D               	movf	___ftadd@exp1,w
  9862  0A52  063C               	xorwf	___ftadd@exp2,w
  9863  0A53  1D03               	skipz
  9864  0A54  2A47               	goto	l2468
  9865  0A55                     l818:	
  9866  0A55  1FBB               	btfss	___ftadd@sign,7
  9867  0A56  2A67               	goto	l2474
  9868  0A57  30FF               	movlw	255
  9869  0A58  06B1               	xorwf	___ftadd@f1,f
  9870  0A59  30FF               	movlw	255
  9871  0A5A  06B2               	xorwf	___ftadd@f1+1,f
  9872  0A5B  30FF               	movlw	255
  9873  0A5C  06B3               	xorwf	___ftadd@f1+2,f
  9874  0A5D  3001               	movlw	1
  9875  0A5E  07B1               	addwf	___ftadd@f1,f
  9876  0A5F  3000               	movlw	0
  9877  0A60  1803               	skipnc
  9878  0A61  3001               	movlw	1
  9879  0A62  07B2               	addwf	___ftadd@f1+1,f
  9880  0A63  3000               	movlw	0
  9881  0A64  1803               	skipnc
  9882  0A65  3001               	movlw	1
  9883  0A66  07B3               	addwf	___ftadd@f1+2,f
  9884  0A67                     l2474:	
  9885  0A67  1F3B               	btfss	___ftadd@sign,6
  9886  0A68  2A79               	goto	l2478
  9887  0A69  30FF               	movlw	255
  9888  0A6A  06B4               	xorwf	___ftadd@f2,f
  9889  0A6B  30FF               	movlw	255
  9890  0A6C  06B5               	xorwf	___ftadd@f2+1,f
  9891  0A6D  30FF               	movlw	255
  9892  0A6E  06B6               	xorwf	___ftadd@f2+2,f
  9893  0A6F  3001               	movlw	1
  9894  0A70  07B4               	addwf	___ftadd@f2,f
  9895  0A71  3000               	movlw	0
  9896  0A72  1803               	skipnc
  9897  0A73  3001               	movlw	1
  9898  0A74  07B5               	addwf	___ftadd@f2+1,f
  9899  0A75  3000               	movlw	0
  9900  0A76  1803               	skipnc
  9901  0A77  3001               	movlw	1
  9902  0A78  07B6               	addwf	___ftadd@f2+2,f
  9903  0A79                     l2478:	
  9904  0A79  01BB               	clrf	___ftadd@sign
  9905  0A7A  0831               	movf	___ftadd@f1,w
  9906  0A7B  07B4               	addwf	___ftadd@f2,f
  9907  0A7C  0832               	movf	___ftadd@f1+1,w
  9908  0A7D  3DB5               	addwfc	___ftadd@f2+1,f
  9909  0A7E  0833               	movf	___ftadd@f1+2,w
  9910  0A7F  3DB6               	addwfc	___ftadd@f2+2,f
  9911  0A80  1FB6               	btfss	___ftadd@f2+2,7
  9912  0A81  2A94               	goto	l2488
  9913  0A82  30FF               	movlw	255
  9914  0A83  06B4               	xorwf	___ftadd@f2,f
  9915  0A84  30FF               	movlw	255
  9916  0A85  06B5               	xorwf	___ftadd@f2+1,f
  9917  0A86  30FF               	movlw	255
  9918  0A87  06B6               	xorwf	___ftadd@f2+2,f
  9919  0A88  3001               	movlw	1
  9920  0A89  07B4               	addwf	___ftadd@f2,f
  9921  0A8A  3000               	movlw	0
  9922  0A8B  1803               	skipnc
  9923  0A8C  3001               	movlw	1
  9924  0A8D  07B5               	addwf	___ftadd@f2+1,f
  9925  0A8E  3000               	movlw	0
  9926  0A8F  1803               	skipnc
  9927  0A90  3001               	movlw	1
  9928  0A91  07B6               	addwf	___ftadd@f2+2,f
  9929  0A92  01BB               	clrf	___ftadd@sign
  9930  0A93  0ABB               	incf	___ftadd@sign,f
  9931  0A94                     l2488:	
  9932  0A94  0834               	movf	___ftadd@f2,w
  9933  0A95  00F0               	movwf	___ftpack@arg
  9934  0A96  0835               	movf	___ftadd@f2+1,w
  9935  0A97  00F1               	movwf	___ftpack@arg+1
  9936  0A98  0836               	movf	___ftadd@f2+2,w
  9937  0A99  00F2               	movwf	___ftpack@arg+2
  9938  0A9A  083D               	movf	___ftadd@exp1,w
  9939  0A9B  00B7               	movwf	??___ftadd
  9940  0A9C  0837               	movf	??___ftadd,w
  9941  0A9D  00F3               	movwf	___ftpack@exp
  9942  0A9E  083B               	movf	___ftadd@sign,w
  9943  0A9F  00B8               	movwf	??___ftadd+1
  9944  0AA0  0838               	movf	??___ftadd+1,w
  9945  0AA1  00F4               	movwf	___ftpack@sign
  9946  0AA2  3193  23A0         	fcall	___ftpack
  9947  0AA4  0870               	movf	?___ftpack,w
  9948  0AA5  0020               	movlb	0	; select bank0
  9949  0AA6  00B1               	movwf	?___ftadd
  9950  0AA7  0871               	movf	?___ftpack+1,w
  9951  0AA8  00B2               	movwf	?___ftadd+1
  9952  0AA9  0872               	movf	?___ftpack+2,w
  9953  0AAA  00B3               	movwf	?___ftadd+2
  9954  0AAB  0008               	return
  9955  0AAC                     __end_of___ftadd:	
  9956                           
  9957                           	psect	text8
  9958  0AAC                     __ptext8:	
  9959 ;; *************** function _readVAnalog *****************
  9960 ;; Defined at:
  9961 ;;		line 103 in file "adc.c"
  9962 ;; Parameters:    Size  Location     Type
  9963 ;;  channel         2    6[BANK0 ] unsigned int 
  9964 ;; Auto vars:     Size  Location     Type
  9965 ;;  value           2   11[COMMON] int 
  9966 ;;  analog_chann    2    9[COMMON] unsigned int 
  9967 ;; Return value:  Size  Location     Type
  9968 ;;                  2    6[BANK0 ] int 
  9969 ;; Registers used:
  9970 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9971 ;; Tracked objects:
  9972 ;;		On entry : 0/0
  9973 ;;		On exit  : 0/0
  9974 ;;		Unchanged: 0/0
  9975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9976 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9977 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9978 ;;      Temps:          0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9979 ;;      Totals:         4      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9980 ;;Total ram usage:       21 bytes
  9981 ;; Hardware stack levels used:    1
  9982 ;; Hardware stack levels required when called:    1
  9983 ;; This function calls:
  9984 ;;		_ADCRead
  9985 ;;		___aldiv
  9986 ;;		___bmul
  9987 ;; This function is called by:
  9988 ;;		_main
  9989 ;; This function uses a non-reentrant model
  9990 ;;
  9991                           
  9992                           
  9993                           ;psect for function _readVAnalog
  9994  0AAC                     _readVAnalog:	
  9995                           
  9996                           ;adc.c: 105: int16_t value;
  9997                           ;adc.c: 107: uint16_t analog_channel = Vchannels[channel];
  9998                           
  9999                           ;incstack = 0
 10000                           ; Regs used in _readVAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10001  0AAC  0020               	movlb	0	; select bank0
 10002  0AAD  3526               	lslf	readVAnalog@channel,w
 10003  0AAE  3E59               	addlw	(low (_Vchannels| (0+256)))& (0+255)
 10004  0AAF  0086               	movwf	6
 10005  0AB0  3001               	movlw	1	; select bank2/3
 10006  0AB1  0087               	movwf	7
 10007  0AB2  3F40               	moviw [0]fsr1
 10008  0AB3  00F9               	movwf	readVAnalog@analog_channel
 10009  0AB4  3F41               	moviw [1]fsr1
 10010  0AB5  00FA               	movwf	readVAnalog@analog_channel+1
 10011                           
 10012                           ;adc.c: 109: value = ADCRead(analog_channel);
 10013  0AB6  0879               	movf	readVAnalog@analog_channel,w
 10014  0AB7  319E  2684  318A   	fcall	_ADCRead
 10015  0ABA  0871               	movf	?_ADCRead+1,w
 10016  0ABB  00FC               	movwf	readVAnalog@value+1
 10017  0ABC  0870               	movf	?_ADCRead,w
 10018  0ABD  00FB               	movwf	readVAnalog@value
 10019                           
 10020                           ;adc.c: 111: Vtotals[channel] = Vtotals[channel]-Vsamples[channel][VsampleIndex];
 10021  0ABE  0020               	movlb	0	; select bank0
 10022  0ABF  0826               	movf	readVAnalog@channel,w
 10023  0AC0  00A8               	movwf	??_readVAnalog
 10024  0AC1  3001               	movlw	1
 10025  0AC2                     u3485:	
 10026  0AC2  35A8               	lslf	??_readVAnalog,f
 10027  0AC3  3EFF               	addlw	-1
 10028  0AC4  1D03               	skipz
 10029  0AC5  2AC2               	goto	u3485
 10030  0AC6  3528               	lslf	??_readVAnalog,w
 10031  0AC7  3E20               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10032  0AC8  0086               	movwf	6
 10033  0AC9  3001               	movlw	1	; select bank2/3
 10034  0ACA  0087               	movwf	7
 10035  0ACB  3F40               	moviw [0]fsr1
 10036  0ACC  00A9               	movwf	??_readVAnalog+1
 10037  0ACD  3F41               	moviw [1]fsr1
 10038  0ACE  00AA               	movwf	??_readVAnalog+2
 10039  0ACF  3F42               	moviw [2]fsr1
 10040  0AD0  00AB               	movwf	??_readVAnalog+3
 10041  0AD1  3F43               	moviw [3]fsr1
 10042  0AD2  00AC               	movwf	??_readVAnalog+4
 10043  0AD3  0021               	movlb	1	; select bank1
 10044  0AD4  0848               	movf	_VsampleIndex^(0+128),w
 10045  0AD5  0020               	movlb	0	; select bank0
 10046  0AD6  00AD               	movwf	??_readVAnalog+5
 10047  0AD7  3001               	movlw	1
 10048  0AD8                     u3495:	
 10049  0AD8  35AD               	lslf	??_readVAnalog+5,f
 10050  0AD9  0B89               	decfsz	9,f
 10051  0ADA  2AD8               	goto	u3495
 10052  0ADB  300A               	movlw	10
 10053  0ADC  00AE               	movwf	??_readVAnalog+6
 10054  0ADD  082E               	movf	??_readVAnalog+6,w
 10055  0ADE  00F0               	movwf	___bmul@multiplicand
 10056  0ADF  0826               	movf	readVAnalog@channel,w
 10057  0AE0  319E  2660  318A   	fcall	___bmul
 10058  0AE3  3EA0               	addlw	(low (_Vsamples| (0+256)))& (0+255)
 10059  0AE4  0020               	movlb	0	; select bank0
 10060  0AE5  072D               	addwf	??_readVAnalog+5,w
 10061  0AE6  00AF               	movwf	??_readVAnalog+7
 10062  0AE7  082F               	movf	??_readVAnalog+7,w
 10063  0AE8  0086               	movwf	6
 10064  0AE9  3001               	movlw	1	; select bank3/4
 10065  0AEA  0087               	movwf	7
 10066  0AEB  3F40               	moviw [0]fsr1
 10067  0AEC  00B0               	movwf	??_readVAnalog+8
 10068  0AED  3F41               	moviw [1]fsr1
 10069  0AEE  00B1               	movwf	??_readVAnalog+9
 10070  0AEF  0830               	movf	??_readVAnalog+8,w
 10071  0AF0  00B2               	movwf	??_readVAnalog+10
 10072  0AF1  0831               	movf	??_readVAnalog+9,w
 10073  0AF2  00B3               	movwf	??_readVAnalog+11
 10074  0AF3  3000               	movlw	0
 10075  0AF4  1BB3               	btfsc	??_readVAnalog+11,7
 10076  0AF5  30FF               	movlw	255
 10077  0AF6  00B4               	movwf	??_readVAnalog+12
 10078  0AF7  00B5               	movwf	??_readVAnalog+13
 10079  0AF8  09B2               	comf	??_readVAnalog+10,f
 10080  0AF9  09B3               	comf	??_readVAnalog+11,f
 10081  0AFA  09B4               	comf	??_readVAnalog+12,f
 10082  0AFB  09B5               	comf	??_readVAnalog+13,f
 10083  0AFC  0AB2               	incf	??_readVAnalog+10,f
 10084  0AFD  1903               	skipnz
 10085  0AFE  0AB3               	incf	??_readVAnalog+11,f
 10086  0AFF  1903               	skipnz
 10087  0B00  0AB4               	incf	??_readVAnalog+12,f
 10088  0B01  1903               	skipnz
 10089  0B02  0AB5               	incf	??_readVAnalog+13,f
 10090  0B03  0832               	movf	??_readVAnalog+10,w
 10091  0B04  07A9               	addwf	??_readVAnalog+1,f
 10092  0B05  0833               	movf	??_readVAnalog+11,w
 10093  0B06  3DAA               	addwfc	??_readVAnalog+2,f
 10094  0B07  0834               	movf	??_readVAnalog+12,w
 10095  0B08  3DAB               	addwfc	??_readVAnalog+3,f
 10096  0B09  0835               	movf	??_readVAnalog+13,w
 10097  0B0A  3DAC               	addwfc	??_readVAnalog+4,f
 10098  0B0B  0826               	movf	readVAnalog@channel,w
 10099  0B0C  00B6               	movwf	??_readVAnalog+14
 10100  0B0D  3001               	movlw	1
 10101  0B0E                     u3505:	
 10102  0B0E  35B6               	lslf	??_readVAnalog+14,f
 10103  0B0F  3EFF               	addlw	-1
 10104  0B10  1D03               	skipz
 10105  0B11  2B0E               	goto	u3505
 10106  0B12  3536               	lslf	??_readVAnalog+14,w
 10107  0B13  3E20               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10108  0B14  0086               	movwf	6
 10109  0B15  3001               	movlw	1	; select bank2/3
 10110  0B16  0087               	movwf	7
 10111  0B17  0829               	movf	??_readVAnalog+1,w
 10112  0B18  3FC0               	movwi [0]fsr1
 10113  0B19  082A               	movf	??_readVAnalog+2,w
 10114  0B1A  3FC1               	movwi [1]fsr1
 10115  0B1B  082B               	movf	??_readVAnalog+3,w
 10116  0B1C  3FC2               	movwi [2]fsr1
 10117  0B1D  082C               	movf	??_readVAnalog+4,w
 10118  0B1E  3FC3               	movwi [3]fsr1
 10119                           
 10120                           ;adc.c: 113: Vsamples[channel][VsampleIndex] = value;
 10121  0B1F  0021               	movlb	1	; select bank1
 10122  0B20  0848               	movf	_VsampleIndex^(0+128),w
 10123  0B21  0020               	movlb	0	; select bank0
 10124  0B22  00A8               	movwf	??_readVAnalog
 10125  0B23  3001               	movlw	1
 10126  0B24                     u3515:	
 10127  0B24  35A8               	lslf	??_readVAnalog,f
 10128  0B25  0B89               	decfsz	9,f
 10129  0B26  2B24               	goto	u3515
 10130  0B27  300A               	movlw	10
 10131  0B28  00A9               	movwf	??_readVAnalog+1
 10132  0B29  0829               	movf	??_readVAnalog+1,w
 10133  0B2A  00F0               	movwf	___bmul@multiplicand
 10134  0B2B  0826               	movf	readVAnalog@channel,w
 10135  0B2C  319E  2660  318A   	fcall	___bmul
 10136  0B2F  3EA0               	addlw	(low (_Vsamples| (0+256)))& (0+255)
 10137  0B30  0020               	movlb	0	; select bank0
 10138  0B31  0728               	addwf	??_readVAnalog,w
 10139  0B32  00AA               	movwf	??_readVAnalog+2
 10140  0B33  082A               	movf	??_readVAnalog+2,w
 10141  0B34  0086               	movwf	6
 10142  0B35  3001               	movlw	1	; select bank3/4
 10143  0B36  0087               	movwf	7
 10144  0B37  087B               	movf	readVAnalog@value,w
 10145  0B38  3FC0               	movwi [0]fsr1
 10146  0B39  087C               	movf	readVAnalog@value+1,w
 10147  0B3A  3FC1               	movwi [1]fsr1
 10148                           
 10149                           ;adc.c: 115: Vtotals[channel] = Vtotals[channel]+Vsamples[channel][VsampleIndex];
 10150  0B3B  0826               	movf	readVAnalog@channel,w
 10151  0B3C  00A8               	movwf	??_readVAnalog
 10152  0B3D  3001               	movlw	1
 10153  0B3E                     u3525:	
 10154  0B3E  35A8               	lslf	??_readVAnalog,f
 10155  0B3F  3EFF               	addlw	-1
 10156  0B40  1D03               	skipz
 10157  0B41  2B3E               	goto	u3525
 10158  0B42  3528               	lslf	??_readVAnalog,w
 10159  0B43  3E20               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10160  0B44  0086               	movwf	6
 10161  0B45  3001               	movlw	1	; select bank2/3
 10162  0B46  0087               	movwf	7
 10163  0B47  3F40               	moviw [0]fsr1
 10164  0B48  00A9               	movwf	??_readVAnalog+1
 10165  0B49  3F41               	moviw [1]fsr1
 10166  0B4A  00AA               	movwf	??_readVAnalog+2
 10167  0B4B  3F42               	moviw [2]fsr1
 10168  0B4C  00AB               	movwf	??_readVAnalog+3
 10169  0B4D  3F43               	moviw [3]fsr1
 10170  0B4E  00AC               	movwf	??_readVAnalog+4
 10171  0B4F  0021               	movlb	1	; select bank1
 10172  0B50  0848               	movf	_VsampleIndex^(0+128),w
 10173  0B51  0020               	movlb	0	; select bank0
 10174  0B52  00AD               	movwf	??_readVAnalog+5
 10175  0B53  3001               	movlw	1
 10176  0B54                     u3535:	
 10177  0B54  35AD               	lslf	??_readVAnalog+5,f
 10178  0B55  0B89               	decfsz	9,f
 10179  0B56  2B54               	goto	u3535
 10180  0B57  300A               	movlw	10
 10181  0B58  00AE               	movwf	??_readVAnalog+6
 10182  0B59  082E               	movf	??_readVAnalog+6,w
 10183  0B5A  00F0               	movwf	___bmul@multiplicand
 10184  0B5B  0826               	movf	readVAnalog@channel,w
 10185  0B5C  319E  2660  318A   	fcall	___bmul
 10186  0B5F  3EA0               	addlw	(low (_Vsamples| (0+256)))& (0+255)
 10187  0B60  0020               	movlb	0	; select bank0
 10188  0B61  072D               	addwf	??_readVAnalog+5,w
 10189  0B62  00AF               	movwf	??_readVAnalog+7
 10190  0B63  082F               	movf	??_readVAnalog+7,w
 10191  0B64  0086               	movwf	6
 10192  0B65  3001               	movlw	1	; select bank3/4
 10193  0B66  0087               	movwf	7
 10194  0B67  3F40               	moviw [0]fsr1
 10195  0B68  00B0               	movwf	??_readVAnalog+8
 10196  0B69  3F41               	moviw [1]fsr1
 10197  0B6A  00B1               	movwf	??_readVAnalog+9
 10198  0B6B  0830               	movf	??_readVAnalog+8,w
 10199  0B6C  00B2               	movwf	??_readVAnalog+10
 10200  0B6D  0831               	movf	??_readVAnalog+9,w
 10201  0B6E  00B3               	movwf	??_readVAnalog+11
 10202  0B6F  3000               	movlw	0
 10203  0B70  1BB3               	btfsc	??_readVAnalog+11,7
 10204  0B71  30FF               	movlw	255
 10205  0B72  00B4               	movwf	??_readVAnalog+12
 10206  0B73  00B5               	movwf	??_readVAnalog+13
 10207  0B74  0832               	movf	??_readVAnalog+10,w
 10208  0B75  07A9               	addwf	??_readVAnalog+1,f
 10209  0B76  0833               	movf	??_readVAnalog+11,w
 10210  0B77  3DAA               	addwfc	??_readVAnalog+2,f
 10211  0B78  0834               	movf	??_readVAnalog+12,w
 10212  0B79  3DAB               	addwfc	??_readVAnalog+3,f
 10213  0B7A  0835               	movf	??_readVAnalog+13,w
 10214  0B7B  3DAC               	addwfc	??_readVAnalog+4,f
 10215  0B7C  0826               	movf	readVAnalog@channel,w
 10216  0B7D  00B6               	movwf	??_readVAnalog+14
 10217  0B7E  3001               	movlw	1
 10218  0B7F                     u3545:	
 10219  0B7F  35B6               	lslf	??_readVAnalog+14,f
 10220  0B80  3EFF               	addlw	-1
 10221  0B81  1D03               	skipz
 10222  0B82  2B7F               	goto	u3545
 10223  0B83  3536               	lslf	??_readVAnalog+14,w
 10224  0B84  3E20               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10225  0B85  0086               	movwf	6
 10226  0B86  3001               	movlw	1	; select bank2/3
 10227  0B87  0087               	movwf	7
 10228  0B88  0829               	movf	??_readVAnalog+1,w
 10229  0B89  3FC0               	movwi [0]fsr1
 10230  0B8A  082A               	movf	??_readVAnalog+2,w
 10231  0B8B  3FC1               	movwi [1]fsr1
 10232  0B8C  082B               	movf	??_readVAnalog+3,w
 10233  0B8D  3FC2               	movwi [2]fsr1
 10234  0B8E  082C               	movf	??_readVAnalog+4,w
 10235  0B8F  3FC3               	movwi [3]fsr1
 10236                           
 10237                           ;adc.c: 117: if(channel>=(4-1))
 10238  0B90  3000               	movlw	0
 10239  0B91  0227               	subwf	readVAnalog@channel+1,w
 10240  0B92  3003               	movlw	3
 10241  0B93  1903               	skipnz
 10242  0B94  0226               	subwf	readVAnalog@channel,w
 10243  0B95  1C03               	skipc
 10244  0B96  2BA5               	goto	l3050
 10245                           
 10246                           ;adc.c: 118: {
 10247                           ;adc.c: 119: VsampleIndex+=1;
 10248  0B97  3001               	movlw	1
 10249  0B98  0021               	movlb	1	; select bank1
 10250  0B99  07C8               	addwf	_VsampleIndex^(0+128),f
 10251  0B9A  3000               	movlw	0
 10252  0B9B  3DC9               	addwfc	(_VsampleIndex+1)^(0+128),f
 10253                           
 10254                           ;adc.c: 120: if(VsampleIndex >= 5)VsampleIndex = 0;
 10255  0B9C  3000               	movlw	0
 10256  0B9D  0249               	subwf	(_VsampleIndex+1)^(0+128),w
 10257  0B9E  3005               	movlw	5
 10258  0B9F  1903               	skipnz
 10259  0BA0  0248               	subwf	_VsampleIndex^(0+128),w
 10260  0BA1  1C03               	skipc
 10261  0BA2  2BA5               	goto	l3050
 10262  0BA3  01C8               	clrf	_VsampleIndex^(0+128)
 10263  0BA4  01C9               	clrf	(_VsampleIndex+1)^(0+128)
 10264  0BA5                     l3050:	
 10265                           
 10266                           ;adc.c: 121: }
 10267                           ;adc.c: 123: value = Vtotals[channel]/5;
 10268  0BA5  3000               	movlw	0
 10269  0BA6  00F3               	movwf	___aldiv@divisor+3
 10270  0BA7  3000               	movlw	0
 10271  0BA8  00F2               	movwf	___aldiv@divisor+2
 10272  0BA9  3000               	movlw	0
 10273  0BAA  00F1               	movwf	___aldiv@divisor+1
 10274  0BAB  3005               	movlw	5
 10275  0BAC  00F0               	movwf	___aldiv@divisor
 10276  0BAD  0020               	movlb	0	; select bank0
 10277  0BAE  0826               	movf	readVAnalog@channel,w
 10278  0BAF  00A8               	movwf	??_readVAnalog
 10279  0BB0  3001               	movlw	1
 10280  0BB1                     u3575:	
 10281  0BB1  35A8               	lslf	??_readVAnalog,f
 10282  0BB2  3EFF               	addlw	-1
 10283  0BB3  1D03               	skipz
 10284  0BB4  2BB1               	goto	u3575
 10285  0BB5  3528               	lslf	??_readVAnalog,w
 10286  0BB6  3E20               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10287  0BB7  0086               	movwf	6
 10288  0BB8  3001               	movlw	1	; select bank2/3
 10289  0BB9  0087               	movwf	7
 10290  0BBA  3F40               	moviw [0]fsr1
 10291  0BBB  00F4               	movwf	___aldiv@dividend
 10292  0BBC  3F41               	moviw [1]fsr1
 10293  0BBD  00F5               	movwf	___aldiv@dividend+1
 10294  0BBE  3F42               	moviw [2]fsr1
 10295  0BBF  00F6               	movwf	___aldiv@dividend+2
 10296  0BC0  3F43               	moviw [3]fsr1
 10297  0BC1  00F7               	movwf	___aldiv@dividend+3
 10298  0BC2  3194  24EA         	fcall	___aldiv
 10299  0BC4  0871               	movf	?___aldiv+1,w
 10300  0BC5  00FC               	movwf	readVAnalog@value+1
 10301  0BC6  0870               	movf	?___aldiv,w
 10302  0BC7  00FB               	movwf	readVAnalog@value
 10303                           
 10304                           ;adc.c: 125: return value;
 10305  0BC8  087C               	movf	readVAnalog@value+1,w
 10306  0BC9  0020               	movlb	0	; select bank0
 10307  0BCA  00A7               	movwf	?_readVAnalog+1
 10308  0BCB  087B               	movf	readVAnalog@value,w
 10309  0BCC  00A6               	movwf	?_readVAnalog
 10310  0BCD  0008               	return
 10311  0BCE                     __end_of_readVAnalog:	
 10312                           
 10313                           	psect	text9
 10314  1E60                     __ptext9:	
 10315 ;; *************** function ___bmul *****************
 10316 ;; Defined at:
 10317 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul8.c"
 10318 ;; Parameters:    Size  Location     Type
 10319 ;;  multiplier      1    wreg     unsigned char 
 10320 ;;  multiplicand    1    0[COMMON] unsigned char 
 10321 ;; Auto vars:     Size  Location     Type
 10322 ;;  multiplier      1    3[COMMON] unsigned char 
 10323 ;;  product         1    2[COMMON] unsigned char 
 10324 ;; Return value:  Size  Location     Type
 10325 ;;                  1    wreg      unsigned char 
 10326 ;; Registers used:
 10327 ;;		wreg, status,2, status,0
 10328 ;; Tracked objects:
 10329 ;;		On entry : 0/0
 10330 ;;		On exit  : 0/0
 10331 ;;		Unchanged: 0/0
 10332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10333 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10334 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10335 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10336 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10337 ;;Total ram usage:        4 bytes
 10338 ;; Hardware stack levels used:    1
 10339 ;; This function calls:
 10340 ;;		Nothing
 10341 ;; This function is called by:
 10342 ;;		_readVAnalog
 10343 ;; This function uses a non-reentrant model
 10344 ;;
 10345                           
 10346                           
 10347                           ;psect for function ___bmul
 10348  1E60                     ___bmul:	
 10349                           
 10350                           ;incstack = 0
 10351                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 10352                           ;___bmul@multiplier stored from wreg
 10353  1E60  00F3               	movwf	___bmul@multiplier
 10354  1E61  01F2               	clrf	___bmul@product
 10355  1E62                     l2848:	
 10356  1E62  1C73               	btfss	___bmul@multiplier,0
 10357  1E63  2E68               	goto	l2852
 10358  1E64  0870               	movf	___bmul@multiplicand,w
 10359  1E65  00F1               	movwf	??___bmul
 10360  1E66  0871               	movf	??___bmul,w
 10361  1E67  07F2               	addwf	___bmul@product,f
 10362  1E68                     l2852:	
 10363  1E68  1003               	clrc
 10364  1E69  0DF0               	rlf	___bmul@multiplicand,f
 10365  1E6A  1003               	clrc
 10366  1E6B  0CF3               	rrf	___bmul@multiplier,f
 10367  1E6C  0873               	movf	___bmul@multiplier,w
 10368  1E6D  1D03               	btfss	3,2
 10369  1E6E  2E62               	goto	l2848
 10370  1E6F  0872               	movf	___bmul@product,w
 10371  1E70  0008               	return
 10372  1E71                     __end_of___bmul:	
 10373                           
 10374                           	psect	text10
 10375  0BCE                     __ptext10:	
 10376 ;; *************** function _readIAnalog *****************
 10377 ;; Defined at:
 10378 ;;		line 77 in file "adc.c"
 10379 ;; Parameters:    Size  Location     Type
 10380 ;;  channel         2    6[BANK0 ] unsigned int 
 10381 ;; Auto vars:     Size  Location     Type
 10382 ;;  value           2   11[COMMON] int 
 10383 ;;  analog_chann    2    9[COMMON] unsigned int 
 10384 ;; Return value:  Size  Location     Type
 10385 ;;                  2    6[BANK0 ] int 
 10386 ;; Registers used:
 10387 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10388 ;; Tracked objects:
 10389 ;;		On entry : 0/0
 10390 ;;		On exit  : 0/0
 10391 ;;		Unchanged: 0/0
 10392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10393 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10394 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10395 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10396 ;;      Totals:         4      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10397 ;;Total ram usage:       24 bytes
 10398 ;; Hardware stack levels used:    1
 10399 ;; Hardware stack levels required when called:    1
 10400 ;; This function calls:
 10401 ;;		_ADCRead
 10402 ;;		___aldiv
 10403 ;;		___wmul
 10404 ;; This function is called by:
 10405 ;;		_main
 10406 ;; This function uses a non-reentrant model
 10407 ;;
 10408                           
 10409                           
 10410                           ;psect for function _readIAnalog
 10411  0BCE                     _readIAnalog:	
 10412                           
 10413                           ;adc.c: 79: int16_t value;
 10414                           ;adc.c: 81: uint16_t analog_channel = Ichannels[channel];
 10415                           
 10416                           ;incstack = 0
 10417                           ; Regs used in _readIAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10418  0BCE  0020               	movlb	0	; select bank0
 10419  0BCF  3526               	lslf	readIAnalog@channel,w
 10420  0BD0  3E61               	addlw	(low (_Ichannels| (0+256)))& (0+255)
 10421  0BD1  0086               	movwf	6
 10422  0BD2  3001               	movlw	1	; select bank2/3
 10423  0BD3  0087               	movwf	7
 10424  0BD4  3F40               	moviw [0]fsr1
 10425  0BD5  00F9               	movwf	readIAnalog@analog_channel
 10426  0BD6  3F41               	moviw [1]fsr1
 10427  0BD7  00FA               	movwf	readIAnalog@analog_channel+1
 10428                           
 10429                           ;adc.c: 83: value = ADCRead(analog_channel);
 10430  0BD8  0879               	movf	readIAnalog@analog_channel,w
 10431  0BD9  319E  2684  318B   	fcall	_ADCRead
 10432  0BDC  0871               	movf	?_ADCRead+1,w
 10433  0BDD  00FC               	movwf	readIAnalog@value+1
 10434  0BDE  0870               	movf	?_ADCRead,w
 10435  0BDF  00FB               	movwf	readIAnalog@value
 10436                           
 10437                           ;adc.c: 85: Itotals[channel] = Itotals[channel]-Isamples[channel][IsampleIndex];
 10438  0BE0  0020               	movlb	0	; select bank0
 10439  0BE1  0826               	movf	readIAnalog@channel,w
 10440  0BE2  00A8               	movwf	??_readIAnalog
 10441  0BE3  3001               	movlw	1
 10442  0BE4                     u3415:	
 10443  0BE4  35A8               	lslf	??_readIAnalog,f
 10444  0BE5  3EFF               	addlw	-1
 10445  0BE6  1D03               	skipz
 10446  0BE7  2BE4               	goto	u3415
 10447  0BE8  3528               	lslf	??_readIAnalog,w
 10448  0BE9  3E30               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10449  0BEA  0086               	movwf	6
 10450  0BEB  3001               	movlw	1	; select bank2/3
 10451  0BEC  0087               	movwf	7
 10452  0BED  3F40               	moviw [0]fsr1
 10453  0BEE  00A9               	movwf	??_readIAnalog+1
 10454  0BEF  3F41               	moviw [1]fsr1
 10455  0BF0  00AA               	movwf	??_readIAnalog+2
 10456  0BF1  3F42               	moviw [2]fsr1
 10457  0BF2  00AB               	movwf	??_readIAnalog+3
 10458  0BF3  3F43               	moviw [3]fsr1
 10459  0BF4  00AC               	movwf	??_readIAnalog+4
 10460  0BF5  0867               	movf	_IsampleIndex+1,w
 10461  0BF6  00AE               	movwf	??_readIAnalog+6
 10462  0BF7  0866               	movf	_IsampleIndex,w
 10463  0BF8  00AD               	movwf	??_readIAnalog+5
 10464  0BF9  35AD               	lslf	??_readIAnalog+5,f
 10465  0BFA  0DAE               	rlf	??_readIAnalog+6,f
 10466  0BFB  0827               	movf	readIAnalog@channel+1,w
 10467  0BFC  00F1               	movwf	___wmul@multiplier+1
 10468  0BFD  0826               	movf	readIAnalog@channel,w
 10469  0BFE  00F0               	movwf	___wmul@multiplier
 10470  0BFF  3064               	movlw	100
 10471  0C00  00F2               	movwf	___wmul@multiplicand
 10472  0C01  3000               	movlw	0
 10473  0C02  00F3               	movwf	___wmul@multiplicand+1
 10474  0C03  319E  26C5  318B   	fcall	___wmul
 10475  0C06  3060               	movlw	96
 10476  0C07  0020               	movlb	0	; select bank0
 10477  0C08  00AF               	movwf	??_readIAnalog+7
 10478  0C09  3022               	movlw	34
 10479  0C0A  00B0               	movwf	??_readIAnalog+8
 10480  0C0B  0870               	movf	?___wmul,w
 10481  0C0C  072F               	addwf	??_readIAnalog+7,w
 10482  0C0D  00B1               	movwf	??_readIAnalog+9
 10483  0C0E  0871               	movf	?___wmul+1,w
 10484  0C0F  3D30               	addwfc	??_readIAnalog+8,w
 10485  0C10  00B2               	movwf	??_readIAnalog+10
 10486  0C11  082D               	movf	??_readIAnalog+5,w
 10487  0C12  0731               	addwf	??_readIAnalog+9,w
 10488  0C13  0086               	movwf	6
 10489  0C14  082E               	movf	??_readIAnalog+6,w
 10490  0C15  3D32               	addwfc	??_readIAnalog+10,w
 10491  0C16  0087               	movwf	7
 10492  0C17  3F40               	moviw [0]fsr1
 10493  0C18  00B3               	movwf	??_readIAnalog+11
 10494  0C19  3F41               	moviw [1]fsr1
 10495  0C1A  00B4               	movwf	??_readIAnalog+12
 10496  0C1B  0833               	movf	??_readIAnalog+11,w
 10497  0C1C  00B5               	movwf	??_readIAnalog+13
 10498  0C1D  0834               	movf	??_readIAnalog+12,w
 10499  0C1E  00B6               	movwf	??_readIAnalog+14
 10500  0C1F  3000               	movlw	0
 10501  0C20  1BB6               	btfsc	??_readIAnalog+14,7
 10502  0C21  30FF               	movlw	255
 10503  0C22  00B7               	movwf	??_readIAnalog+15
 10504  0C23  00B8               	movwf	??_readIAnalog+16
 10505  0C24  09B5               	comf	??_readIAnalog+13,f
 10506  0C25  09B6               	comf	??_readIAnalog+14,f
 10507  0C26  09B7               	comf	??_readIAnalog+15,f
 10508  0C27  09B8               	comf	??_readIAnalog+16,f
 10509  0C28  0AB5               	incf	??_readIAnalog+13,f
 10510  0C29  1903               	skipnz
 10511  0C2A  0AB6               	incf	??_readIAnalog+14,f
 10512  0C2B  1903               	skipnz
 10513  0C2C  0AB7               	incf	??_readIAnalog+15,f
 10514  0C2D  1903               	skipnz
 10515  0C2E  0AB8               	incf	??_readIAnalog+16,f
 10516  0C2F  0835               	movf	??_readIAnalog+13,w
 10517  0C30  07A9               	addwf	??_readIAnalog+1,f
 10518  0C31  0836               	movf	??_readIAnalog+14,w
 10519  0C32  3DAA               	addwfc	??_readIAnalog+2,f
 10520  0C33  0837               	movf	??_readIAnalog+15,w
 10521  0C34  3DAB               	addwfc	??_readIAnalog+3,f
 10522  0C35  0838               	movf	??_readIAnalog+16,w
 10523  0C36  3DAC               	addwfc	??_readIAnalog+4,f
 10524  0C37  0826               	movf	readIAnalog@channel,w
 10525  0C38  00B9               	movwf	??_readIAnalog+17
 10526  0C39  3001               	movlw	1
 10527  0C3A                     u3425:	
 10528  0C3A  35B9               	lslf	??_readIAnalog+17,f
 10529  0C3B  3EFF               	addlw	-1
 10530  0C3C  1D03               	skipz
 10531  0C3D  2C3A               	goto	u3425
 10532  0C3E  3539               	lslf	??_readIAnalog+17,w
 10533  0C3F  3E30               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10534  0C40  0086               	movwf	6
 10535  0C41  3001               	movlw	1	; select bank2/3
 10536  0C42  0087               	movwf	7
 10537  0C43  0829               	movf	??_readIAnalog+1,w
 10538  0C44  3FC0               	movwi [0]fsr1
 10539  0C45  082A               	movf	??_readIAnalog+2,w
 10540  0C46  3FC1               	movwi [1]fsr1
 10541  0C47  082B               	movf	??_readIAnalog+3,w
 10542  0C48  3FC2               	movwi [2]fsr1
 10543  0C49  082C               	movf	??_readIAnalog+4,w
 10544  0C4A  3FC3               	movwi [3]fsr1
 10545                           
 10546                           ;adc.c: 87: Isamples[channel][IsampleIndex] = value;
 10547  0C4B  0867               	movf	_IsampleIndex+1,w
 10548  0C4C  00A9               	movwf	??_readIAnalog+1
 10549  0C4D  0866               	movf	_IsampleIndex,w
 10550  0C4E  00A8               	movwf	??_readIAnalog
 10551  0C4F  35A8               	lslf	??_readIAnalog,f
 10552  0C50  0DA9               	rlf	??_readIAnalog+1,f
 10553  0C51  0827               	movf	readIAnalog@channel+1,w
 10554  0C52  00F1               	movwf	___wmul@multiplier+1
 10555  0C53  0826               	movf	readIAnalog@channel,w
 10556  0C54  00F0               	movwf	___wmul@multiplier
 10557  0C55  3064               	movlw	100
 10558  0C56  00F2               	movwf	___wmul@multiplicand
 10559  0C57  3000               	movlw	0
 10560  0C58  00F3               	movwf	___wmul@multiplicand+1
 10561  0C59  319E  26C5  318B   	fcall	___wmul
 10562  0C5C  3060               	movlw	96
 10563  0C5D  0020               	movlb	0	; select bank0
 10564  0C5E  00AA               	movwf	??_readIAnalog+2
 10565  0C5F  3022               	movlw	34
 10566  0C60  00AB               	movwf	??_readIAnalog+3
 10567  0C61  0870               	movf	?___wmul,w
 10568  0C62  072A               	addwf	??_readIAnalog+2,w
 10569  0C63  00AC               	movwf	??_readIAnalog+4
 10570  0C64  0871               	movf	?___wmul+1,w
 10571  0C65  3D2B               	addwfc	??_readIAnalog+3,w
 10572  0C66  00AD               	movwf	??_readIAnalog+5
 10573  0C67  0828               	movf	??_readIAnalog,w
 10574  0C68  072C               	addwf	??_readIAnalog+4,w
 10575  0C69  0086               	movwf	6
 10576  0C6A  0829               	movf	??_readIAnalog+1,w
 10577  0C6B  3D2D               	addwfc	??_readIAnalog+5,w
 10578  0C6C  0087               	movwf	7
 10579  0C6D  087B               	movf	readIAnalog@value,w
 10580  0C6E  3FC0               	movwi [0]fsr1
 10581  0C6F  087C               	movf	readIAnalog@value+1,w
 10582  0C70  3FC1               	movwi [1]fsr1
 10583                           
 10584                           ;adc.c: 89: Itotals[channel] = Itotals[channel]+Isamples[channel][IsampleIndex];
 10585  0C71  0826               	movf	readIAnalog@channel,w
 10586  0C72  00A8               	movwf	??_readIAnalog
 10587  0C73  3001               	movlw	1
 10588  0C74                     u3435:	
 10589  0C74  35A8               	lslf	??_readIAnalog,f
 10590  0C75  3EFF               	addlw	-1
 10591  0C76  1D03               	skipz
 10592  0C77  2C74               	goto	u3435
 10593  0C78  3528               	lslf	??_readIAnalog,w
 10594  0C79  3E30               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10595  0C7A  0086               	movwf	6
 10596  0C7B  3001               	movlw	1	; select bank2/3
 10597  0C7C  0087               	movwf	7
 10598  0C7D  3F40               	moviw [0]fsr1
 10599  0C7E  00A9               	movwf	??_readIAnalog+1
 10600  0C7F  3F41               	moviw [1]fsr1
 10601  0C80  00AA               	movwf	??_readIAnalog+2
 10602  0C81  3F42               	moviw [2]fsr1
 10603  0C82  00AB               	movwf	??_readIAnalog+3
 10604  0C83  3F43               	moviw [3]fsr1
 10605  0C84  00AC               	movwf	??_readIAnalog+4
 10606  0C85  0867               	movf	_IsampleIndex+1,w
 10607  0C86  00AE               	movwf	??_readIAnalog+6
 10608  0C87  0866               	movf	_IsampleIndex,w
 10609  0C88  00AD               	movwf	??_readIAnalog+5
 10610  0C89  35AD               	lslf	??_readIAnalog+5,f
 10611  0C8A  0DAE               	rlf	??_readIAnalog+6,f
 10612  0C8B  0827               	movf	readIAnalog@channel+1,w
 10613  0C8C  00F1               	movwf	___wmul@multiplier+1
 10614  0C8D  0826               	movf	readIAnalog@channel,w
 10615  0C8E  00F0               	movwf	___wmul@multiplier
 10616  0C8F  3064               	movlw	100
 10617  0C90  00F2               	movwf	___wmul@multiplicand
 10618  0C91  3000               	movlw	0
 10619  0C92  00F3               	movwf	___wmul@multiplicand+1
 10620  0C93  319E  26C5  318B   	fcall	___wmul
 10621  0C96  3060               	movlw	96
 10622  0C97  0020               	movlb	0	; select bank0
 10623  0C98  00AF               	movwf	??_readIAnalog+7
 10624  0C99  3022               	movlw	34
 10625  0C9A  00B0               	movwf	??_readIAnalog+8
 10626  0C9B  0870               	movf	?___wmul,w
 10627  0C9C  072F               	addwf	??_readIAnalog+7,w
 10628  0C9D  00B1               	movwf	??_readIAnalog+9
 10629  0C9E  0871               	movf	?___wmul+1,w
 10630  0C9F  3D30               	addwfc	??_readIAnalog+8,w
 10631  0CA0  00B2               	movwf	??_readIAnalog+10
 10632  0CA1  082D               	movf	??_readIAnalog+5,w
 10633  0CA2  0731               	addwf	??_readIAnalog+9,w
 10634  0CA3  0086               	movwf	6
 10635  0CA4  082E               	movf	??_readIAnalog+6,w
 10636  0CA5  3D32               	addwfc	??_readIAnalog+10,w
 10637  0CA6  0087               	movwf	7
 10638  0CA7  3F40               	moviw [0]fsr1
 10639  0CA8  00B3               	movwf	??_readIAnalog+11
 10640  0CA9  3F41               	moviw [1]fsr1
 10641  0CAA  00B4               	movwf	??_readIAnalog+12
 10642  0CAB  0833               	movf	??_readIAnalog+11,w
 10643  0CAC  00B5               	movwf	??_readIAnalog+13
 10644  0CAD  0834               	movf	??_readIAnalog+12,w
 10645  0CAE  00B6               	movwf	??_readIAnalog+14
 10646  0CAF  3000               	movlw	0
 10647  0CB0  1BB6               	btfsc	??_readIAnalog+14,7
 10648  0CB1  30FF               	movlw	255
 10649  0CB2  00B7               	movwf	??_readIAnalog+15
 10650  0CB3  00B8               	movwf	??_readIAnalog+16
 10651  0CB4  0835               	movf	??_readIAnalog+13,w
 10652  0CB5  07A9               	addwf	??_readIAnalog+1,f
 10653  0CB6  0836               	movf	??_readIAnalog+14,w
 10654  0CB7  3DAA               	addwfc	??_readIAnalog+2,f
 10655  0CB8  0837               	movf	??_readIAnalog+15,w
 10656  0CB9  3DAB               	addwfc	??_readIAnalog+3,f
 10657  0CBA  0838               	movf	??_readIAnalog+16,w
 10658  0CBB  3DAC               	addwfc	??_readIAnalog+4,f
 10659  0CBC  0826               	movf	readIAnalog@channel,w
 10660  0CBD  00B9               	movwf	??_readIAnalog+17
 10661  0CBE  3001               	movlw	1
 10662  0CBF                     u3445:	
 10663  0CBF  35B9               	lslf	??_readIAnalog+17,f
 10664  0CC0  3EFF               	addlw	-1
 10665  0CC1  1D03               	skipz
 10666  0CC2  2CBF               	goto	u3445
 10667  0CC3  3539               	lslf	??_readIAnalog+17,w
 10668  0CC4  3E30               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10669  0CC5  0086               	movwf	6
 10670  0CC6  3001               	movlw	1	; select bank2/3
 10671  0CC7  0087               	movwf	7
 10672  0CC8  0829               	movf	??_readIAnalog+1,w
 10673  0CC9  3FC0               	movwi [0]fsr1
 10674  0CCA  082A               	movf	??_readIAnalog+2,w
 10675  0CCB  3FC1               	movwi [1]fsr1
 10676  0CCC  082B               	movf	??_readIAnalog+3,w
 10677  0CCD  3FC2               	movwi [2]fsr1
 10678  0CCE  082C               	movf	??_readIAnalog+4,w
 10679  0CCF  3FC3               	movwi [3]fsr1
 10680                           
 10681                           ;adc.c: 91: if(channel>=(4-1))
 10682  0CD0  3000               	movlw	0
 10683  0CD1  0227               	subwf	readIAnalog@channel+1,w
 10684  0CD2  3003               	movlw	3
 10685  0CD3  1903               	skipnz
 10686  0CD4  0226               	subwf	readIAnalog@channel,w
 10687  0CD5  1C03               	skipc
 10688  0CD6  2CE4               	goto	l3030
 10689                           
 10690                           ;adc.c: 92: {
 10691                           ;adc.c: 93: IsampleIndex+=1;
 10692  0CD7  3001               	movlw	1
 10693  0CD8  07E6               	addwf	_IsampleIndex,f
 10694  0CD9  3000               	movlw	0
 10695  0CDA  3DE7               	addwfc	_IsampleIndex+1,f
 10696                           
 10697                           ;adc.c: 94: if(IsampleIndex >= 50)IsampleIndex = 0;
 10698  0CDB  3000               	movlw	0
 10699  0CDC  0267               	subwf	_IsampleIndex+1,w
 10700  0CDD  3032               	movlw	50
 10701  0CDE  1903               	skipnz
 10702  0CDF  0266               	subwf	_IsampleIndex,w
 10703  0CE0  1C03               	skipc
 10704  0CE1  2CE4               	goto	l3030
 10705  0CE2  01E6               	clrf	_IsampleIndex
 10706  0CE3  01E7               	clrf	_IsampleIndex+1
 10707  0CE4                     l3030:	
 10708                           
 10709                           ;adc.c: 95: }
 10710                           ;adc.c: 97: value = Itotals[channel]/50;
 10711  0CE4  3000               	movlw	0
 10712  0CE5  00F3               	movwf	___aldiv@divisor+3
 10713  0CE6  3000               	movlw	0
 10714  0CE7  00F2               	movwf	___aldiv@divisor+2
 10715  0CE8  3000               	movlw	0
 10716  0CE9  00F1               	movwf	___aldiv@divisor+1
 10717  0CEA  3032               	movlw	50
 10718  0CEB  00F0               	movwf	___aldiv@divisor
 10719  0CEC  0826               	movf	readIAnalog@channel,w
 10720  0CED  00A8               	movwf	??_readIAnalog
 10721  0CEE  3001               	movlw	1
 10722  0CEF                     u3475:	
 10723  0CEF  35A8               	lslf	??_readIAnalog,f
 10724  0CF0  3EFF               	addlw	-1
 10725  0CF1  1D03               	skipz
 10726  0CF2  2CEF               	goto	u3475
 10727  0CF3  3528               	lslf	??_readIAnalog,w
 10728  0CF4  3E30               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10729  0CF5  0086               	movwf	6
 10730  0CF6  3001               	movlw	1	; select bank2/3
 10731  0CF7  0087               	movwf	7
 10732  0CF8  3F40               	moviw [0]fsr1
 10733  0CF9  00F4               	movwf	___aldiv@dividend
 10734  0CFA  3F41               	moviw [1]fsr1
 10735  0CFB  00F5               	movwf	___aldiv@dividend+1
 10736  0CFC  3F42               	moviw [2]fsr1
 10737  0CFD  00F6               	movwf	___aldiv@dividend+2
 10738  0CFE  3F43               	moviw [3]fsr1
 10739  0CFF  00F7               	movwf	___aldiv@dividend+3
 10740  0D00  3194  24EA         	fcall	___aldiv
 10741  0D02  0871               	movf	?___aldiv+1,w
 10742  0D03  00FC               	movwf	readIAnalog@value+1
 10743  0D04  0870               	movf	?___aldiv,w
 10744  0D05  00FB               	movwf	readIAnalog@value
 10745                           
 10746                           ;adc.c: 99: return value;
 10747  0D06  087C               	movf	readIAnalog@value+1,w
 10748  0D07  0020               	movlb	0	; select bank0
 10749  0D08  00A7               	movwf	?_readIAnalog+1
 10750  0D09  087B               	movf	readIAnalog@value,w
 10751  0D0A  00A6               	movwf	?_readIAnalog
 10752  0D0B  0008               	return
 10753  0D0C                     __end_of_readIAnalog:	
 10754                           
 10755                           	psect	text11
 10756  14EA                     __ptext11:	
 10757 ;; *************** function ___aldiv *****************
 10758 ;; Defined at:
 10759 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
 10760 ;; Parameters:    Size  Location     Type
 10761 ;;  divisor         4    0[COMMON] long 
 10762 ;;  dividend        4    4[COMMON] long 
 10763 ;; Auto vars:     Size  Location     Type
 10764 ;;  quotient        4    2[BANK0 ] long 
 10765 ;;  sign            1    1[BANK0 ] unsigned char 
 10766 ;;  counter         1    0[BANK0 ] unsigned char 
 10767 ;; Return value:  Size  Location     Type
 10768 ;;                  4    0[COMMON] long 
 10769 ;; Registers used:
 10770 ;;		wreg, status,2, status,0
 10771 ;; Tracked objects:
 10772 ;;		On entry : 0/0
 10773 ;;		On exit  : 0/0
 10774 ;;		Unchanged: 0/0
 10775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10776 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10778 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10779 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10780 ;;Total ram usage:       15 bytes
 10781 ;; Hardware stack levels used:    1
 10782 ;; This function calls:
 10783 ;;		Nothing
 10784 ;; This function is called by:
 10785 ;;		_readIAnalog
 10786 ;;		_readVAnalog
 10787 ;; This function uses a non-reentrant model
 10788 ;;
 10789                           
 10790                           
 10791                           ;psect for function ___aldiv
 10792  14EA                     ___aldiv:	
 10793                           
 10794                           ;incstack = 0
 10795                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 10796  14EA  0020               	movlb	0	; select bank0
 10797  14EB  01A1               	clrf	___aldiv@sign
 10798  14EC  1FF3               	btfss	___aldiv@divisor+3,7
 10799  14ED  2CFB               	goto	l681
 10800  14EE  09F0               	comf	___aldiv@divisor,f
 10801  14EF  09F1               	comf	___aldiv@divisor+1,f
 10802  14F0  09F2               	comf	___aldiv@divisor+2,f
 10803  14F1  09F3               	comf	___aldiv@divisor+3,f
 10804  14F2  0AF0               	incf	___aldiv@divisor,f
 10805  14F3  1903               	skipnz
 10806  14F4  0AF1               	incf	___aldiv@divisor+1,f
 10807  14F5  1903               	skipnz
 10808  14F6  0AF2               	incf	___aldiv@divisor+2,f
 10809  14F7  1903               	skipnz
 10810  14F8  0AF3               	incf	___aldiv@divisor+3,f
 10811  14F9  01A1               	clrf	___aldiv@sign
 10812  14FA  0AA1               	incf	___aldiv@sign,f
 10813  14FB                     l681:	
 10814  14FB  1FF7               	btfss	___aldiv@dividend+3,7
 10815  14FC  2D0C               	goto	l2870
 10816  14FD  09F4               	comf	___aldiv@dividend,f
 10817  14FE  09F5               	comf	___aldiv@dividend+1,f
 10818  14FF  09F6               	comf	___aldiv@dividend+2,f
 10819  1500  09F7               	comf	___aldiv@dividend+3,f
 10820  1501  0AF4               	incf	___aldiv@dividend,f
 10821  1502  1903               	skipnz
 10822  1503  0AF5               	incf	___aldiv@dividend+1,f
 10823  1504  1903               	skipnz
 10824  1505  0AF6               	incf	___aldiv@dividend+2,f
 10825  1506  1903               	skipnz
 10826  1507  0AF7               	incf	___aldiv@dividend+3,f
 10827  1508  3001               	movlw	1
 10828  1509  00F8               	movwf	??___aldiv
 10829  150A  0878               	movf	??___aldiv,w
 10830  150B  06A1               	xorwf	___aldiv@sign,f
 10831  150C                     l2870:	
 10832  150C  3000               	movlw	0
 10833  150D  00A5               	movwf	___aldiv@quotient+3
 10834  150E  3000               	movlw	0
 10835  150F  00A4               	movwf	___aldiv@quotient+2
 10836  1510  3000               	movlw	0
 10837  1511  00A3               	movwf	___aldiv@quotient+1
 10838  1512  3000               	movlw	0
 10839  1513  00A2               	movwf	___aldiv@quotient
 10840  1514  0873               	movf	___aldiv@divisor+3,w
 10841  1515  0472               	iorwf	___aldiv@divisor+2,w
 10842  1516  0471               	iorwf	___aldiv@divisor+1,w
 10843  1517  0470               	iorwf	___aldiv@divisor,w
 10844  1518  1903               	skipnz
 10845  1519  2D55               	goto	l2892
 10846  151A  01A0               	clrf	___aldiv@counter
 10847  151B  0AA0               	incf	___aldiv@counter,f
 10848  151C                     l2878:	
 10849  151C  1BF3               	btfsc	___aldiv@divisor+3,7
 10850  151D  2D2A               	goto	l2880
 10851  151E  3001               	movlw	1
 10852  151F                     u3095:	
 10853  151F  35F0               	lslf	___aldiv@divisor,f
 10854  1520  0DF1               	rlf	___aldiv@divisor+1,f
 10855  1521  0DF2               	rlf	___aldiv@divisor+2,f
 10856  1522  0DF3               	rlf	___aldiv@divisor+3,f
 10857  1523  0B89               	decfsz	9,f
 10858  1524  2D1F               	goto	u3095
 10859  1525  3001               	movlw	1
 10860  1526  00F8               	movwf	??___aldiv
 10861  1527  0878               	movf	??___aldiv,w
 10862  1528  07A0               	addwf	___aldiv@counter,f
 10863  1529  2D1C               	goto	l2878
 10864  152A                     l2880:	
 10865  152A  3001               	movlw	1
 10866  152B                     u3115:	
 10867  152B  35A2               	lslf	___aldiv@quotient,f
 10868  152C  0DA3               	rlf	___aldiv@quotient+1,f
 10869  152D  0DA4               	rlf	___aldiv@quotient+2,f
 10870  152E  0DA5               	rlf	___aldiv@quotient+3,f
 10871  152F  0B89               	decfsz	9,f
 10872  1530  2D2B               	goto	u3115
 10873  1531  0873               	movf	___aldiv@divisor+3,w
 10874  1532  0277               	subwf	___aldiv@dividend+3,w
 10875  1533  1D03               	skipz
 10876  1534  2D3F               	goto	u3125
 10877  1535  0872               	movf	___aldiv@divisor+2,w
 10878  1536  0276               	subwf	___aldiv@dividend+2,w
 10879  1537  1D03               	skipz
 10880  1538  2D3F               	goto	u3125
 10881  1539  0871               	movf	___aldiv@divisor+1,w
 10882  153A  0275               	subwf	___aldiv@dividend+1,w
 10883  153B  1D03               	skipz
 10884  153C  2D3F               	goto	u3125
 10885  153D  0870               	movf	___aldiv@divisor,w
 10886  153E  0274               	subwf	___aldiv@dividend,w
 10887  153F                     u3125:	
 10888  153F  1C03               	skipc
 10889  1540  2D4A               	goto	l2888
 10890  1541  0870               	movf	___aldiv@divisor,w
 10891  1542  02F4               	subwf	___aldiv@dividend,f
 10892  1543  0871               	movf	___aldiv@divisor+1,w
 10893  1544  3BF5               	subwfb	___aldiv@dividend+1,f
 10894  1545  0872               	movf	___aldiv@divisor+2,w
 10895  1546  3BF6               	subwfb	___aldiv@dividend+2,f
 10896  1547  0873               	movf	___aldiv@divisor+3,w
 10897  1548  3BF7               	subwfb	___aldiv@dividend+3,f
 10898  1549  1422               	bsf	___aldiv@quotient,0
 10899  154A                     l2888:	
 10900  154A  3001               	movlw	1
 10901  154B                     u3135:	
 10902  154B  36F3               	lsrf	___aldiv@divisor+3,f
 10903  154C  0CF2               	rrf	___aldiv@divisor+2,f
 10904  154D  0CF1               	rrf	___aldiv@divisor+1,f
 10905  154E  0CF0               	rrf	___aldiv@divisor,f
 10906  154F  0B89               	decfsz	9,f
 10907  1550  2D4B               	goto	u3135
 10908  1551  3001               	movlw	1
 10909  1552  02A0               	subwf	___aldiv@counter,f
 10910  1553  1D03               	btfss	3,2
 10911  1554  2D2A               	goto	l2880
 10912  1555                     l2892:	
 10913  1555  0821               	movf	___aldiv@sign,w
 10914  1556  1903               	btfsc	3,2
 10915  1557  2D63               	goto	l2896
 10916  1558  09A2               	comf	___aldiv@quotient,f
 10917  1559  09A3               	comf	___aldiv@quotient+1,f
 10918  155A  09A4               	comf	___aldiv@quotient+2,f
 10919  155B  09A5               	comf	___aldiv@quotient+3,f
 10920  155C  0AA2               	incf	___aldiv@quotient,f
 10921  155D  1903               	skipnz
 10922  155E  0AA3               	incf	___aldiv@quotient+1,f
 10923  155F  1903               	skipnz
 10924  1560  0AA4               	incf	___aldiv@quotient+2,f
 10925  1561  1903               	skipnz
 10926  1562  0AA5               	incf	___aldiv@quotient+3,f
 10927  1563                     l2896:	
 10928  1563  0825               	movf	___aldiv@quotient+3,w
 10929  1564  00F3               	movwf	?___aldiv+3
 10930  1565  0824               	movf	___aldiv@quotient+2,w
 10931  1566  00F2               	movwf	?___aldiv+2
 10932  1567  0823               	movf	___aldiv@quotient+1,w
 10933  1568  00F1               	movwf	?___aldiv+1
 10934  1569  0822               	movf	___aldiv@quotient,w
 10935  156A  00F0               	movwf	?___aldiv
 10936  156B  0008               	return
 10937  156C                     __end_of___aldiv:	
 10938                           
 10939                           	psect	text12
 10940  1468                     __ptext12:	
 10941 ;; *************** function _readButton *****************
 10942 ;; Defined at:
 10943 ;;		line 8 in file "buttons.c"
 10944 ;; Parameters:    Size  Location     Type
 10945 ;;		None
 10946 ;; Auto vars:     Size  Location     Type
 10947 ;;		None
 10948 ;; Return value:  Size  Location     Type
 10949 ;;                  1    wreg      unsigned char 
 10950 ;; Registers used:
 10951 ;;		wreg, status,2, status,0, pclath, cstack
 10952 ;; Tracked objects:
 10953 ;;		On entry : 0/0
 10954 ;;		On exit  : 0/0
 10955 ;;		Unchanged: 0/0
 10956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10959 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10960 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10961 ;;Total ram usage:        2 bytes
 10962 ;; Hardware stack levels used:    1
 10963 ;; Hardware stack levels required when called:    1
 10964 ;; This function calls:
 10965 ;;		_ADCRead
 10966 ;; This function is called by:
 10967 ;;		_main
 10968 ;; This function uses a non-reentrant model
 10969 ;;
 10970                           
 10971                           
 10972                           ;psect for function _readButton
 10973  1468                     _readButton:	
 10974                           
 10975                           ;buttons.c: 10: readButtons=ADCRead(11);
 10976                           
 10977                           ;incstack = 0
 10978                           ; Regs used in _readButton: [wreg+status,2+status,0+pclath+cstack]
 10979  1468  300B               	movlw	11
 10980  1469  319E  2684  3194   	fcall	_ADCRead
 10981  146C  0871               	movf	?_ADCRead+1,w
 10982  146D  0020               	movlb	0	; select bank0
 10983  146E  00DF               	movwf	_readButtons+1
 10984  146F  0870               	movf	?_ADCRead,w
 10985  1470  00DE               	movwf	_readButtons
 10986                           
 10987                           ;buttons.c: 12: if(readButtons>=365&&readButtons<405)
 10988  1471  085F               	movf	_readButtons+1,w
 10989  1472  3A80               	xorlw	128
 10990  1473  00F4               	movwf	??_readButton
 10991  1474  3081               	movlw	129
 10992  1475  0274               	subwf	??_readButton,w
 10993  1476  1D03               	skipz
 10994  1477  2C7A               	goto	u3815
 10995  1478  306D               	movlw	109
 10996  1479  025E               	subwf	_readButtons,w
 10997  147A                     u3815:	
 10998  147A  1C03               	skipc
 10999  147B  2C8C               	goto	l3152
 11000  147C  0020               	movlb	0	; select bank0
 11001  147D  085F               	movf	_readButtons+1,w
 11002  147E  3A80               	xorlw	128
 11003  147F  00F4               	movwf	??_readButton
 11004  1480  3081               	movlw	129
 11005  1481  0274               	subwf	??_readButton,w
 11006  1482  1D03               	skipz
 11007  1483  2C86               	goto	u3825
 11008  1484  3095               	movlw	149
 11009  1485  025E               	subwf	_readButtons,w
 11010  1486                     u3825:	
 11011  1486  1803               	skipnc
 11012  1487  2C8C               	goto	l3152
 11013                           
 11014                           ;buttons.c: 13: {
 11015                           ;buttons.c: 14: button=1;
 11016  1488  0020               	movlb	0	; select bank0
 11017  1489  01EA               	clrf	_button
 11018  148A  0AEA               	incf	_button,f
 11019                           
 11020                           ;buttons.c: 15: }
 11021  148B  2CBA               	goto	l3164
 11022  148C                     l3152:	
 11023                           
 11024                           ;buttons.c: 17: else if(readButtons>=535&&readButtons<590)
 11025  148C  0020               	movlb	0	; select bank0
 11026  148D  085F               	movf	_readButtons+1,w
 11027  148E  3A80               	xorlw	128
 11028  148F  00F4               	movwf	??_readButton
 11029  1490  3082               	movlw	130
 11030  1491  0274               	subwf	??_readButton,w
 11031  1492  1D03               	skipz
 11032  1493  2C96               	goto	u3835
 11033  1494  3017               	movlw	23
 11034  1495  025E               	subwf	_readButtons,w
 11035  1496                     u3835:	
 11036  1496  1C03               	skipc
 11037  1497  2CA6               	goto	l3158
 11038  1498  0020               	movlb	0	; select bank0
 11039  1499  085F               	movf	_readButtons+1,w
 11040  149A  3A80               	xorlw	128
 11041  149B  00F4               	movwf	??_readButton
 11042  149C  3082               	movlw	130
 11043  149D  0274               	subwf	??_readButton,w
 11044  149E  1D03               	skipz
 11045  149F  2CA2               	goto	u3845
 11046  14A0  304E               	movlw	78
 11047  14A1  025E               	subwf	_readButtons,w
 11048  14A2                     u3845:	
 11049  14A2  1803               	skipnc
 11050  14A3  2CA6               	goto	l3158
 11051                           
 11052                           ;buttons.c: 18: {
 11053                           ;buttons.c: 19: button=2;
 11054  14A4  3002               	movlw	2
 11055  14A5  2CB3               	goto	L8
 11056  14A6                     l3158:	
 11057                           ;buttons.c: 20: }
 11058                           
 11059                           
 11060                           ;buttons.c: 22: else if(readButtons>745)
 11061  14A6  0020               	movlb	0	; select bank0
 11062  14A7  085F               	movf	_readButtons+1,w
 11063  14A8  3A80               	xorlw	128
 11064  14A9  00F4               	movwf	??_readButton
 11065  14AA  3082               	movlw	130
 11066  14AB  0274               	subwf	??_readButton,w
 11067  14AC  1D03               	skipz
 11068  14AD  2CB0               	goto	u3855
 11069  14AE  30EA               	movlw	234
 11070  14AF  025E               	subwf	_readButtons,w
 11071  14B0                     u3855:	
 11072  14B0  1C03               	skipc
 11073  14B1  2CB8               	goto	l3162
 11074                           
 11075                           ;buttons.c: 23: {
 11076                           ;buttons.c: 24: button=3;
 11077  14B2  3003               	movlw	3
 11078  14B3                     L8:	
 11079  14B3  00F4               	movwf	??_readButton
 11080  14B4  0874               	movf	??_readButton,w
 11081  14B5  0020               	movlb	0	; select bank0
 11082  14B6  00EA               	movwf	_button
 11083                           
 11084                           ;buttons.c: 25: }
 11085  14B7  2CBA               	goto	l3164
 11086  14B8                     l3162:	
 11087                           
 11088                           ;buttons.c: 27: else
 11089                           ;buttons.c: 28: {
 11090                           ;buttons.c: 29: button=0;
 11091  14B8  0020               	movlb	0	; select bank0
 11092  14B9  01EA               	clrf	_button
 11093  14BA                     l3164:	
 11094                           
 11095                           ;buttons.c: 30: }
 11096                           ;buttons.c: 32: if (button!=0)
 11097  14BA  086A               	movf	_button,w
 11098  14BB  1903               	btfsc	3,2
 11099  14BC  2CE7               	goto	l3184
 11100                           
 11101                           ;buttons.c: 33: {
 11102                           ;buttons.c: 34: if (button!=lastButton)
 11103  14BD  086A               	movf	_button,w
 11104  14BE  0669               	xorwf	_lastButton,w
 11105  14BF  1903               	skipnz
 11106  14C0  2CC6               	goto	l3172
 11107                           
 11108                           ;buttons.c: 35: {
 11109                           ;buttons.c: 36: lastButton=button;
 11110  14C1  086A               	movf	_button,w
 11111  14C2  00F4               	movwf	??_readButton
 11112  14C3  0874               	movf	??_readButton,w
 11113  14C4  00E9               	movwf	_lastButton
 11114  14C5  2CE7               	goto	l3184
 11115  14C6                     l3172:	
 11116                           ;buttons.c: 38: }
 11117                           
 11118                           ;buttons.c: 37: j=0;
 11119                           
 11120                           
 11121                           ;buttons.c: 39: else
 11122                           ;buttons.c: 40: {
 11123                           ;buttons.c: 41: j+=1;
 11124  14C6  3001               	movlw	1
 11125  14C7  00F4               	movwf	??_readButton
 11126  14C8  0874               	movf	??_readButton,w
 11127  14C9  07E8               	addwf	_j,f
 11128                           
 11129                           ;buttons.c: 43: if(j==1)
 11130  14CA  0368               	decf	_j,w
 11131  14CB  1D03               	btfss	3,2
 11132  14CC  2CCF               	goto	l3178
 11133                           
 11134                           ;buttons.c: 44: {
 11135                           ;buttons.c: 45: return (lastButton);
 11136  14CD  0869               	movf	_lastButton,w
 11137  14CE  0008               	return
 11138  14CF                     l3178:	
 11139                           
 11140                           ;buttons.c: 46: }
 11141                           ;buttons.c: 48: if (j>10)
 11142  14CF  0868               	movf	_j,w
 11143  14D0  3A80               	xorlw	128
 11144  14D1  3E75               	addlw	-139
 11145  14D2  1C03               	skipc
 11146  14D3  2CE8               	goto	l3186
 11147                           
 11148                           ;buttons.c: 49: {
 11149                           ;buttons.c: 50: _delay((unsigned long)((25)*(32000000/4000.0)));
 11150  14D4  3002               	movlw	2
 11151  14D5  00F5               	movwf	??_readButton+1
 11152  14D6  3004               	movlw	4
 11153  14D7  00F4               	movwf	??_readButton
 11154  14D8  30BA               	movlw	186
 11155  14D9                     u4517:	
 11156  14D9  0B89               	decfsz	9,f
 11157  14DA  2CD9               	goto	u4517
 11158  14DB  0BF4               	decfsz	??_readButton,f
 11159  14DC  2CD9               	goto	u4517
 11160  14DD  0BF5               	decfsz	??_readButton+1,f
 11161  14DE  2CD9               	goto	u4517
 11162  14DF  3200               	nop2
 11163                           
 11164                           ;buttons.c: 51: j=10;
 11165  14E0  300A               	movlw	10
 11166  14E1  00F4               	movwf	??_readButton
 11167  14E2  0874               	movf	??_readButton,w
 11168  14E3  0020               	movlb	0	; select bank0
 11169  14E4  00E8               	movwf	_j
 11170                           
 11171                           ;buttons.c: 52: return (lastButton);
 11172  14E5  0869               	movf	_lastButton,w
 11173  14E6  0008               	return
 11174  14E7                     l3184:	
 11175                           ;buttons.c: 53: }
 11176                           ;buttons.c: 54: }
 11177                           ;buttons.c: 55: goto end;
 11178                           
 11179                           
 11180                           ;buttons.c: 56: }
 11181                           ;buttons.c: 58: j=0;
 11182  14E7  01E8               	clrf	_j
 11183  14E8                     l3186:	
 11184                           ;buttons.c: 60: end:
 11185                           
 11186                           
 11187                           ;buttons.c: 62: return (0);
 11188  14E8  3000               	movlw	0
 11189  14E9  0008               	return
 11190  14EA                     __end_of_readButton:	
 11191                           
 11192                           	psect	text13
 11193  1E84                     __ptext13:	
 11194 ;; *************** function _ADCRead *****************
 11195 ;; Defined at:
 11196 ;;		line 21 in file "adc.c"
 11197 ;; Parameters:    Size  Location     Type
 11198 ;;  channel         1    wreg     enum E14315
 11199 ;; Auto vars:     Size  Location     Type
 11200 ;;  channel         1    3[COMMON] enum E14315
 11201 ;; Return value:  Size  Location     Type
 11202 ;;                  2    0[COMMON] int 
 11203 ;; Registers used:
 11204 ;;		wreg
 11205 ;; Tracked objects:
 11206 ;;		On entry : 0/0
 11207 ;;		On exit  : 0/0
 11208 ;;		Unchanged: 0/0
 11209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11210 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11211 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11213 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11214 ;;Total ram usage:        4 bytes
 11215 ;; Hardware stack levels used:    1
 11216 ;; This function calls:
 11217 ;;		Nothing
 11218 ;; This function is called by:
 11219 ;;		_readIAnalog
 11220 ;;		_readVAnalog
 11221 ;;		_readButton
 11222 ;;		_main
 11223 ;; This function uses a non-reentrant model
 11224 ;;
 11225                           
 11226                           
 11227                           ;psect for function _ADCRead
 11228  1E84                     _ADCRead:	
 11229                           
 11230                           ;incstack = 0
 11231                           ; Regs used in _ADCRead: [wreg]
 11232                           ;ADCRead@channel stored from wreg
 11233  1E84  00F3               	movwf	ADCRead@channel
 11234                           
 11235                           ;adc.c: 23: ADPCH = channel_VSS;
 11236  1E85  303C               	movlw	60
 11237  1E86  0021               	movlb	1	; select bank1
 11238  1E87  009E               	movwf	30	;volatile
 11239                           
 11240                           ;adc.c: 25: ADCON0bits.ADON = 1;
 11241  1E88  1793               	bsf	19,7	;volatile
 11242                           
 11243                           ;adc.c: 27: ADCON0bits.ADCONT = 0;
 11244  1E89  1313               	bcf	19,6	;volatile
 11245                           
 11246                           ;adc.c: 29: ADCON0bits.ADGO = 1;
 11247  1E8A  1413               	bsf	19,0	;volatile
 11248  1E8B                     l65:	
 11249                           ;adc.c: 32: {
 11250                           
 11251                           ;adc.c: 31: while(ADCON0bits.ADGO)
 11252                           
 11253  1E8B  1813               	btfsc	19,0	;volatile
 11254  1E8C  2E8B               	goto	l65
 11255                           
 11256                           ;adc.c: 33: }
 11257                           ;adc.c: 35: ADPCH = channel;
 11258  1E8D  0873               	movf	ADCRead@channel,w
 11259  1E8E  009E               	movwf	30	;volatile
 11260                           
 11261                           ;adc.c: 37: ADCON0bits.ADON = 1;
 11262  1E8F  1793               	bsf	19,7	;volatile
 11263                           
 11264                           ;adc.c: 39: ADCON0bits.ADCONT = 0;
 11265  1E90  1313               	bcf	19,6	;volatile
 11266                           
 11267                           ;adc.c: 41: ADCON0bits.ADGO = 1;
 11268  1E91  1413               	bsf	19,0	;volatile
 11269  1E92                     l68:	
 11270                           ;adc.c: 44: {
 11271                           
 11272                           ;adc.c: 43: while(ADCON0bits.ADGO)
 11273                           
 11274  1E92  1813               	btfsc	19,0	;volatile
 11275  1E93  2E92               	goto	l68
 11276                           
 11277                           ;adc.c: 45: }
 11278                           ;adc.c: 47: return ((ADRESH<<8)+ADRESL);
 11279  1E94  080D               	movf	13,w	;volatile
 11280  1E95  00F1               	movwf	?_ADCRead+1
 11281  1E96  080C               	movf	12,w	;volatile
 11282  1E97  00F0               	movwf	?_ADCRead
 11283  1E98  0008               	return
 11284  1E99                     __end_of_ADCRead:	
 11285                           
 11286                           	psect	text14
 11287  0D0C                     __ptext14:	
 11288 ;; *************** function _cc_cv_mode *****************
 11289 ;; Defined at:
 11290 ;;		line 103 in file "battery_charger.c"
 11291 ;; Parameters:    Size  Location     Type
 11292 ;;  z               1    wreg     unsigned char 
 11293 ;; Auto vars:     Size  Location     Type
 11294 ;;  z               1   38[BANK0 ] unsigned char 
 11295 ;; Return value:  Size  Location     Type
 11296 ;;                  1    wreg      void 
 11297 ;; Registers used:
 11298 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11299 ;; Tracked objects:
 11300 ;;		On entry : 0/0
 11301 ;;		On exit  : 0/0
 11302 ;;		Unchanged: 0/0
 11303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11305 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11306 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11307 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11308 ;;Total ram usage:        8 bytes
 11309 ;; Hardware stack levels used:    1
 11310 ;; Hardware stack levels required when called:    2
 11311 ;; This function calls:
 11312 ;;		___awtoft
 11313 ;;		___ftmul
 11314 ;;		___fttol
 11315 ;; This function is called by:
 11316 ;;		_main
 11317 ;; This function uses a non-reentrant model
 11318 ;;
 11319                           
 11320                           
 11321                           ;psect for function _cc_cv_mode
 11322  0D0C                     _cc_cv_mode:	
 11323                           
 11324                           ;incstack = 0
 11325                           ; Regs used in _cc_cv_mode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11326                           ;cc_cv_mode@z stored from wreg
 11327  0D0C  0020               	movlb	0	; select bank0
 11328  0D0D  00C6               	movwf	cc_cv_mode@z
 11329                           
 11330                           ;battery_charger.c: 105: if(voltage[z]>=Vref[z])
 11331  0D0E  3546               	lslf	cc_cv_mode@z,w
 11332  0D0F  3EB0               	addlw	(low (_Vref| 0))& (0+255)
 11333  0D10  0086               	movwf	6
 11334  0D11  0187               	clrf	7
 11335  0D12  3F40               	moviw [0]fsr1
 11336  0D13  00BF               	movwf	??_cc_cv_mode
 11337  0D14  3F41               	moviw [1]fsr1
 11338  0D15  00C0               	movwf	??_cc_cv_mode+1
 11339  0D16  3546               	lslf	cc_cv_mode@z,w
 11340  0D17  3EA0               	addlw	(low (_voltage| 0))& (0+255)
 11341  0D18  0086               	movwf	6
 11342  0D19  0187               	clrf	7
 11343  0D1A  3F40               	moviw [0]fsr1
 11344  0D1B  00C1               	movwf	??_cc_cv_mode+2
 11345  0D1C  3F41               	moviw [1]fsr1
 11346  0D1D  00C2               	movwf	??_cc_cv_mode+3
 11347  0D1E  0842               	movf	??_cc_cv_mode+3,w
 11348  0D1F  3A80               	xorlw	128
 11349  0D20  00C3               	movwf	??_cc_cv_mode+4
 11350  0D21  0840               	movf	??_cc_cv_mode+1,w
 11351  0D22  3A80               	xorlw	128
 11352  0D23  0243               	subwf	??_cc_cv_mode+4,w
 11353  0D24  1D03               	skipz
 11354  0D25  2D28               	goto	u3715
 11355  0D26  083F               	movf	??_cc_cv_mode,w
 11356  0D27  0241               	subwf	??_cc_cv_mode+2,w
 11357  0D28                     u3715:	
 11358  0D28  1C03               	skipc
 11359  0D29  2D68               	goto	l3128
 11360                           
 11361                           ;battery_charger.c: 106: {
 11362                           ;battery_charger.c: 107: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 11363  0D2A  0020               	movlb	0	; select bank0
 11364  0D2B  0846               	movf	cc_cv_mode@z,w
 11365  0D2C  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 11366  0D2D  0086               	movwf	6
 11367  0D2E  0187               	clrf	7
 11368  0D2F  0801               	movf	1,w
 11369  0D30  3A80               	xorlw	128
 11370  0D31  3E77               	addlw	-137
 11371  0D32  1803               	skipnc
 11372  0D33  2D3C               	goto	l147
 11373  0D34  3001               	movlw	1
 11374  0D35  00BF               	movwf	??_cc_cv_mode
 11375  0D36  0846               	movf	cc_cv_mode@z,w
 11376  0D37  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 11377  0D38  0086               	movwf	6
 11378  0D39  0187               	clrf	7
 11379  0D3A  083F               	movf	??_cc_cv_mode,w
 11380  0D3B  0781               	addwf	1,f
 11381  0D3C                     l147:	
 11382                           
 11383                           ;battery_charger.c: 108: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 11384  0D3C  0846               	movf	cc_cv_mode@z,w
 11385  0D3D  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 11386  0D3E  0086               	movwf	6
 11387  0D3F  0187               	clrf	7
 11388  0D40  0801               	movf	1,w
 11389  0D41  3A80               	xorlw	128
 11390  0D42  3E77               	addlw	-137
 11391  0D43  1803               	skipnc
 11392  0D44  2D4D               	goto	l148
 11393  0D45  3001               	movlw	1
 11394  0D46  00BF               	movwf	??_cc_cv_mode
 11395  0D47  0846               	movf	cc_cv_mode@z,w
 11396  0D48  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 11397  0D49  0086               	movwf	6
 11398  0D4A  0187               	clrf	7
 11399  0D4B  083F               	movf	??_cc_cv_mode,w
 11400  0D4C  0781               	addwf	1,f
 11401  0D4D                     l148:	
 11402                           
 11403                           ;battery_charger.c: 110: if(cc_cv[z])
 11404  0D4D  0846               	movf	cc_cv_mode@z,w
 11405  0D4E  3EC6               	addlw	(low (_cc_cv| 0))& (0+255)
 11406  0D4F  0086               	movwf	6
 11407  0D50  0187               	clrf	7
 11408  0D51  0801               	movf	1,w
 11409  0D52  1903               	btfsc	3,2
 11410  0D53  2D5B               	goto	l3124
 11411                           
 11412                           ;battery_charger.c: 111: {
 11413                           ;battery_charger.c: 112: cc_cv[z]-=1;
 11414  0D54  0846               	movf	cc_cv_mode@z,w
 11415  0D55  3EC6               	addlw	(low (_cc_cv| 0))& (0+255)
 11416  0D56  0086               	movwf	6
 11417  0D57  0187               	clrf	7
 11418  0D58  3001               	movlw	1
 11419  0D59  0281               	subwf	1,f
 11420                           
 11421                           ;battery_charger.c: 113: }
 11422  0D5A  2D90               	goto	l152
 11423  0D5B                     l3124:	
 11424                           
 11425                           ;battery_charger.c: 114: else
 11426                           ;battery_charger.c: 115: {
 11427                           ;battery_charger.c: 116: if(Imode[z])
 11428  0D5B  0846               	movf	cc_cv_mode@z,w
 11429  0D5C  3E62               	addlw	(low (_Imode| 0))& (0+255)
 11430  0D5D  0086               	movwf	6
 11431  0D5E  0187               	clrf	7
 11432  0D5F  0801               	movf	1,w
 11433  0D60  1903               	btfsc	3,2
 11434  0D61  2D90               	goto	l152
 11435                           
 11436                           ;battery_charger.c: 117: {
 11437                           ;battery_charger.c: 118: Imode[z]=0;
 11438  0D62  0846               	movf	cc_cv_mode@z,w
 11439  0D63  3E62               	addlw	(low (_Imode| 0))& (0+255)
 11440  0D64  0086               	movwf	6
 11441  0D65  0187               	clrf	7
 11442  0D66  0181               	clrf	1
 11443                           
 11444                           ;battery_charger.c: 119: }
 11445                           ;battery_charger.c: 120: }
 11446                           ;battery_charger.c: 121: }
 11447  0D67  2D90               	goto	l152
 11448  0D68                     l3128:	
 11449                           
 11450                           ;battery_charger.c: 122: else
 11451                           ;battery_charger.c: 123: {
 11452                           ;battery_charger.c: 124: VHoldMode[z]-=1;
 11453  0D68  30FF               	movlw	255
 11454  0D69  0020               	movlb	0	; select bank0
 11455  0D6A  00BF               	movwf	??_cc_cv_mode
 11456  0D6B  0846               	movf	cc_cv_mode@z,w
 11457  0D6C  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 11458  0D6D  0086               	movwf	6
 11459  0D6E  0187               	clrf	7
 11460  0D6F  083F               	movf	??_cc_cv_mode,w
 11461  0D70  0781               	addwf	1,f
 11462                           
 11463                           ;battery_charger.c: 125: if(VHoldMode[z]<(9*-1))
 11464  0D71  0846               	movf	cc_cv_mode@z,w
 11465  0D72  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 11466  0D73  0086               	movwf	6
 11467  0D74  0187               	clrf	7
 11468  0D75  0801               	movf	1,w
 11469  0D76  3A80               	xorlw	128
 11470  0D77  3E89               	addlw	137
 11471  0D78  1803               	skipnc
 11472  0D79  2D90               	goto	l152
 11473                           
 11474                           ;battery_charger.c: 126: {
 11475                           ;battery_charger.c: 127: Imode[z]=1;
 11476  0D7A  0846               	movf	cc_cv_mode@z,w
 11477  0D7B  3E62               	addlw	(low (_Imode| 0))& (0+255)
 11478  0D7C  0086               	movwf	6
 11479  0D7D  0187               	clrf	7
 11480  0D7E  0181               	clrf	1
 11481  0D7F  0A81               	incf	1,f
 11482                           
 11483                           ;battery_charger.c: 128: cc_cv[z]=(9*2);
 11484  0D80  3012               	movlw	18
 11485  0D81  00BF               	movwf	??_cc_cv_mode
 11486  0D82  0846               	movf	cc_cv_mode@z,w
 11487  0D83  3EC6               	addlw	(low (_cc_cv| 0))& (0+255)
 11488  0D84  0086               	movwf	6
 11489  0D85  0187               	clrf	7
 11490  0D86  083F               	movf	??_cc_cv_mode,w
 11491  0D87  0081               	movwf	1
 11492                           
 11493                           ;battery_charger.c: 129: VHoldMode[z]=(9*-1);
 11494  0D88  30F7               	movlw	247
 11495  0D89  00BF               	movwf	??_cc_cv_mode
 11496  0D8A  0846               	movf	cc_cv_mode@z,w
 11497  0D8B  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 11498  0D8C  0086               	movwf	6
 11499  0D8D  0187               	clrf	7
 11500  0D8E  083F               	movf	??_cc_cv_mode,w
 11501  0D8F  0081               	movwf	1
 11502  0D90                     l152:	
 11503                           
 11504                           ;battery_charger.c: 130: }
 11505                           ;battery_charger.c: 131: }
 11506                           ;battery_charger.c: 133: if(current[z]>Iref[z])
 11507  0D90  3546               	lslf	cc_cv_mode@z,w
 11508  0D91  3EA8               	addlw	(low (_current| 0))& (0+255)
 11509  0D92  0086               	movwf	6
 11510  0D93  0187               	clrf	7
 11511  0D94  3F40               	moviw [0]fsr1
 11512  0D95  00BF               	movwf	??_cc_cv_mode
 11513  0D96  3F41               	moviw [1]fsr1
 11514  0D97  00C0               	movwf	??_cc_cv_mode+1
 11515  0D98  3546               	lslf	cc_cv_mode@z,w
 11516  0D99  3EB8               	addlw	(low (_Iref| 0))& (0+255)
 11517  0D9A  0086               	movwf	6
 11518  0D9B  0187               	clrf	7
 11519  0D9C  3F40               	moviw [0]fsr1
 11520  0D9D  00C1               	movwf	??_cc_cv_mode+2
 11521  0D9E  3F41               	moviw [1]fsr1
 11522  0D9F  00C2               	movwf	??_cc_cv_mode+3
 11523  0DA0  0842               	movf	??_cc_cv_mode+3,w
 11524  0DA1  3A80               	xorlw	128
 11525  0DA2  00C3               	movwf	??_cc_cv_mode+4
 11526  0DA3  0840               	movf	??_cc_cv_mode+1,w
 11527  0DA4  3A80               	xorlw	128
 11528  0DA5  0243               	subwf	??_cc_cv_mode+4,w
 11529  0DA6  1D03               	skipz
 11530  0DA7  2DAA               	goto	u3775
 11531  0DA8  083F               	movf	??_cc_cv_mode,w
 11532  0DA9  0241               	subwf	??_cc_cv_mode+2,w
 11533  0DAA                     u3775:	
 11534  0DAA  1803               	skipnc
 11535  0DAB  0008               	return
 11536                           
 11537                           ;battery_charger.c: 134: {
 11538                           ;battery_charger.c: 135: if(!(Imode[z]))
 11539  0DAC  0020               	movlb	0	; select bank0
 11540  0DAD  0846               	movf	cc_cv_mode@z,w
 11541  0DAE  3E62               	addlw	(low (_Imode| 0))& (0+255)
 11542  0DAF  0086               	movwf	6
 11543  0DB0  0187               	clrf	7
 11544  0DB1  0801               	movf	1,w
 11545  0DB2  1D03               	btfss	3,2
 11546  0DB3  0008               	return
 11547                           
 11548                           ;battery_charger.c: 136: {
 11549                           ;battery_charger.c: 137: if(batteryState[z]==FLOAT)
 11550  0DB4  0846               	movf	cc_cv_mode@z,w
 11551  0DB5  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 11552  0DB6  0086               	movwf	6
 11553  0DB7  0187               	clrf	7
 11554  0DB8  3005               	movlw	5
 11555  0DB9  0601               	xorwf	1,w
 11556  0DBA  1D03               	btfss	3,2
 11557  0DBB  0008               	return
 11558                           
 11559                           ;battery_charger.c: 138: {
 11560                           ;battery_charger.c: 139: if(voltage[z]<1350+(int16_t)((250-batteryTemp)*.24)-70)
 11561  0DBC  096D               	comf	_batteryTemp,w
 11562  0DBD  00BF               	movwf	??_cc_cv_mode
 11563  0DBE  096E               	comf	_batteryTemp+1,w
 11564  0DBF  00C0               	movwf	??_cc_cv_mode+1
 11565  0DC0  0ABF               	incf	??_cc_cv_mode,f
 11566  0DC1  1903               	skipnz
 11567  0DC2  0AC0               	incf	??_cc_cv_mode+1,f
 11568  0DC3  083F               	movf	??_cc_cv_mode,w
 11569  0DC4  3EFA               	addlw	250
 11570  0DC5  00F9               	movwf	___awtoft@c
 11571  0DC6  3000               	movlw	0
 11572  0DC7  3D40               	addwfc	??_cc_cv_mode+1,w
 11573  0DC8  00FA               	movwf	___awtoft@c+1
 11574  0DC9  319F  273C  318D   	fcall	___awtoft
 11575  0DCC  0879               	movf	?___awtoft,w
 11576  0DCD  0020               	movlb	0	; select bank0
 11577  0DCE  00A4               	movwf	___ftmul@f2
 11578  0DCF  087A               	movf	?___awtoft+1,w
 11579  0DD0  00A5               	movwf	___ftmul@f2+1
 11580  0DD1  087B               	movf	?___awtoft+2,w
 11581  0DD2  00A6               	movwf	___ftmul@f2+2
 11582  0DD3  30C3               	movlw	195
 11583  0DD4  00A1               	movwf	___ftmul@f1
 11584  0DD5  3075               	movlw	117
 11585  0DD6  00A2               	movwf	___ftmul@f1+1
 11586  0DD7  303E               	movlw	62
 11587  0DD8  00A3               	movwf	___ftmul@f1+2
 11588  0DD9  3197  274C  318D   	fcall	___ftmul
 11589  0DDC  0020               	movlb	0	; select bank0
 11590  0DDD  0821               	movf	?___ftmul,w
 11591  0DDE  00B1               	movwf	___fttol@f1
 11592  0DDF  0822               	movf	?___ftmul+1,w
 11593  0DE0  00B2               	movwf	___fttol@f1+1
 11594  0DE1  0823               	movf	?___ftmul+2,w
 11595  0DE2  00B3               	movwf	___fttol@f1+2
 11596  0DE3  3195  256C  318D   	fcall	___fttol
 11597  0DE6  0020               	movlb	0	; select bank0
 11598  0DE7  0831               	movf	?___fttol,w
 11599  0DE8  3E00               	addlw	0
 11600  0DE9  00C1               	movwf	??_cc_cv_mode+2
 11601  0DEA  3005               	movlw	5
 11602  0DEB  3D32               	addwfc	?___fttol+1,w
 11603  0DEC  00C2               	movwf	??_cc_cv_mode+3
 11604  0DED  3546               	lslf	cc_cv_mode@z,w
 11605  0DEE  3EA0               	addlw	(low (_voltage| 0))& (0+255)
 11606  0DEF  0086               	movwf	6
 11607  0DF0  0187               	clrf	7
 11608  0DF1  3F40               	moviw [0]fsr1
 11609  0DF2  00C3               	movwf	??_cc_cv_mode+4
 11610  0DF3  3F41               	moviw [1]fsr1
 11611  0DF4  00C4               	movwf	??_cc_cv_mode+5
 11612  0DF5  0844               	movf	??_cc_cv_mode+5,w
 11613  0DF6  3A80               	xorlw	128
 11614  0DF7  00C5               	movwf	??_cc_cv_mode+6
 11615  0DF8  0842               	movf	??_cc_cv_mode+3,w
 11616  0DF9  3A80               	xorlw	128
 11617  0DFA  0245               	subwf	??_cc_cv_mode+6,w
 11618  0DFB  1D03               	skipz
 11619  0DFC  2DFF               	goto	u3805
 11620  0DFD  0841               	movf	??_cc_cv_mode+2,w
 11621  0DFE  0243               	subwf	??_cc_cv_mode+4,w
 11622  0DFF                     u3805:	
 11623  0DFF  1803               	skipnc
 11624  0E00  0008               	return
 11625                           
 11626                           ;battery_charger.c: 140: {
 11627                           ;battery_charger.c: 141: batteryState[z]=CHARGE;
 11628  0E01  3004               	movlw	4
 11629  0E02  0020               	movlb	0	; select bank0
 11630  0E03  00BF               	movwf	??_cc_cv_mode
 11631  0E04  0846               	movf	cc_cv_mode@z,w
 11632  0E05  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 11633  0E06  0086               	movwf	6
 11634  0E07  0187               	clrf	7
 11635  0E08  083F               	movf	??_cc_cv_mode,w
 11636  0E09  0081               	movwf	1
 11637                           
 11638                           ;battery_charger.c: 142: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 11639  0E0A  096D               	comf	_batteryTemp,w
 11640  0E0B  00BF               	movwf	??_cc_cv_mode
 11641  0E0C  096E               	comf	_batteryTemp+1,w
 11642  0E0D  00C0               	movwf	??_cc_cv_mode+1
 11643  0E0E  0ABF               	incf	??_cc_cv_mode,f
 11644  0E0F  1903               	skipnz
 11645  0E10  0AC0               	incf	??_cc_cv_mode+1,f
 11646  0E11  083F               	movf	??_cc_cv_mode,w
 11647  0E12  3EFA               	addlw	250
 11648  0E13  00F9               	movwf	___awtoft@c
 11649  0E14  3000               	movlw	0
 11650  0E15  3D40               	addwfc	??_cc_cv_mode+1,w
 11651  0E16  00FA               	movwf	___awtoft@c+1
 11652  0E17  319F  273C  318D   	fcall	___awtoft
 11653  0E1A  0879               	movf	?___awtoft,w
 11654  0E1B  0020               	movlb	0	; select bank0
 11655  0E1C  00A4               	movwf	___ftmul@f2
 11656  0E1D  087A               	movf	?___awtoft+1,w
 11657  0E1E  00A5               	movwf	___ftmul@f2+1
 11658  0E1F  087B               	movf	?___awtoft+2,w
 11659  0E20  00A6               	movwf	___ftmul@f2+2
 11660  0E21  30C3               	movlw	195
 11661  0E22  00A1               	movwf	___ftmul@f1
 11662  0E23  3075               	movlw	117
 11663  0E24  00A2               	movwf	___ftmul@f1+1
 11664  0E25  303E               	movlw	62
 11665  0E26  00A3               	movwf	___ftmul@f1+2
 11666  0E27  3197  274C  318D   	fcall	___ftmul
 11667  0E2A  0020               	movlb	0	; select bank0
 11668  0E2B  0821               	movf	?___ftmul,w
 11669  0E2C  00B1               	movwf	___fttol@f1
 11670  0E2D  0822               	movf	?___ftmul+1,w
 11671  0E2E  00B2               	movwf	___fttol@f1+1
 11672  0E2F  0823               	movf	?___ftmul+2,w
 11673  0E30  00B3               	movwf	___fttol@f1+2
 11674  0E31  3195  256C         	fcall	___fttol
 11675  0E33  0020               	movlb	0	; select bank0
 11676  0E34  0831               	movf	?___fttol,w
 11677  0E35  3E91               	addlw	145
 11678  0E36  00C1               	movwf	??_cc_cv_mode+2
 11679  0E37  3005               	movlw	5
 11680  0E38  3D32               	addwfc	?___fttol+1,w
 11681  0E39  00C2               	movwf	??_cc_cv_mode+3
 11682  0E3A  3546               	lslf	cc_cv_mode@z,w
 11683  0E3B  3EB0               	addlw	(low (_Vref| 0))& (0+255)
 11684  0E3C  0086               	movwf	6
 11685  0E3D  0187               	clrf	7
 11686  0E3E  0841               	movf	??_cc_cv_mode+2,w
 11687  0E3F  3FC0               	movwi [0]fsr1
 11688  0E40  0842               	movf	??_cc_cv_mode+3,w
 11689  0E41  3FC1               	movwi [1]fsr1
 11690                           
 11691                           ;battery_charger.c: 143: Iref[z]=30;
 11692  0E42  3546               	lslf	cc_cv_mode@z,w
 11693  0E43  3EB8               	addlw	(low (_Iref| 0))& (0+255)
 11694  0E44  0086               	movwf	6
 11695  0E45  0187               	clrf	7
 11696  0E46  301E               	movlw	30
 11697  0E47  3FC0               	movwi [0]fsr1
 11698  0E48  3000               	movlw	0
 11699  0E49  3FC1               	movwi [1]fsr1
 11700  0E4A  0008               	return
 11701  0E4B                     __end_of_cc_cv_mode:	
 11702                           
 11703                           	psect	text15
 11704  1256                     __ptext15:	
 11705 ;; *************** function _calculateCurrent3 *****************
 11706 ;; Defined at:
 11707 ;;		line 447 in file "main.c"
 11708 ;; Parameters:    Size  Location     Type
 11709 ;;		None
 11710 ;; Auto vars:     Size  Location     Type
 11711 ;;		None
 11712 ;; Return value:  Size  Location     Type
 11713 ;;                  1    wreg      void 
 11714 ;; Registers used:
 11715 ;;		wreg, status,2, status,0, pclath, cstack
 11716 ;; Tracked objects:
 11717 ;;		On entry : 0/0
 11718 ;;		On exit  : 0/0
 11719 ;;		Unchanged: 0/0
 11720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11723 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11724 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11725 ;;Total ram usage:        3 bytes
 11726 ;; Hardware stack levels used:    1
 11727 ;; Hardware stack levels required when called:    2
 11728 ;; This function calls:
 11729 ;;		___awtoft
 11730 ;;		___ftdiv
 11731 ;;		___fttol
 11732 ;; This function is called by:
 11733 ;;		_main
 11734 ;; This function uses a non-reentrant model
 11735 ;;
 11736                           
 11737                           
 11738                           ;psect for function _calculateCurrent3
 11739  1256                     _calculateCurrent3:	
 11740                           
 11741                           ;main.c: 449: if(Ianalogs[3]-570<=0)
 11742                           
 11743                           ;incstack = 0
 11744                           ; Regs used in _calculateCurrent3: [wreg+status,2+status,0+pclath+cstack]
 11745  1256  0022               	movlb	2	; select bank2
 11746  1257  0846               	movf	(_Ianalogs^(0+256)+6),w
 11747  1258  3EC6               	addlw	198
 11748  1259  0020               	movlb	0	; select bank0
 11749  125A  00BF               	movwf	??_calculateCurrent3
 11750  125B  30FD               	movlw	253
 11751  125C  0022               	movlb	2	; select bank2
 11752  125D  3D47               	addwfc	((_Ianalogs+1)^(0+256)+6),w
 11753  125E  0020               	movlb	0	; select bank0
 11754  125F  00C0               	movwf	??_calculateCurrent3+1
 11755  1260  0840               	movf	??_calculateCurrent3+1,w
 11756  1261  3A80               	xorlw	128
 11757  1262  00C1               	movwf	??_calculateCurrent3+2
 11758  1263  3080               	movlw	128
 11759  1264  0241               	subwf	??_calculateCurrent3+2,w
 11760  1265  1D03               	skipz
 11761  1266  2A69               	goto	u4045
 11762  1267  3001               	movlw	1
 11763  1268  023F               	subwf	??_calculateCurrent3,w
 11764  1269                     u4045:	
 11765  1269  1803               	skipnc
 11766  126A  2A6F               	goto	l3290
 11767                           
 11768                           ;main.c: 450: {
 11769                           ;main.c: 451: current[3]=0;
 11770  126B  0021               	movlb	1	; select bank1
 11771  126C  01AE               	clrf	(_current^(0+128)+6)
 11772  126D  01AF               	clrf	((_current+1)^(0+128)+6)
 11773                           
 11774                           ;main.c: 452: }
 11775  126E  0008               	return
 11776  126F                     l3290:	
 11777                           
 11778                           ;main.c: 453: else
 11779                           ;main.c: 454: {
 11780                           ;main.c: 455: current[3]=(int16_t)((Ianalogs[3]-570)/2.8);
 11781  126F  0022               	movlb	2	; select bank2
 11782  1270  0846               	movf	(_Ianalogs^(0+256)+6),w
 11783  1271  3EC6               	addlw	198
 11784  1272  00F9               	movwf	___awtoft@c
 11785  1273  30FD               	movlw	253
 11786  1274  3D47               	addwfc	((_Ianalogs+1)^(0+256)+6),w
 11787  1275  00FA               	movwf	___awtoft@c+1
 11788  1276  319F  273C  3192   	fcall	___awtoft
 11789  1279  0879               	movf	?___awtoft,w
 11790  127A  0020               	movlb	0	; select bank0
 11791  127B  00A4               	movwf	___ftdiv@f1
 11792  127C  087A               	movf	?___awtoft+1,w
 11793  127D  00A5               	movwf	___ftdiv@f1+1
 11794  127E  087B               	movf	?___awtoft+2,w
 11795  127F  00A6               	movwf	___ftdiv@f1+2
 11796  1280  3033               	movlw	51
 11797  1281  00A1               	movwf	___ftdiv@f2
 11798  1282  3033               	movlw	51
 11799  1283  00A2               	movwf	___ftdiv@f2+1
 11800  1284  3040               	movlw	64
 11801  1285  00A3               	movwf	___ftdiv@f2+2
 11802  1286  3195  25F3  3192   	fcall	___ftdiv
 11803  1289  0020               	movlb	0	; select bank0
 11804  128A  0821               	movf	?___ftdiv,w
 11805  128B  00B1               	movwf	___fttol@f1
 11806  128C  0822               	movf	?___ftdiv+1,w
 11807  128D  00B2               	movwf	___fttol@f1+1
 11808  128E  0823               	movf	?___ftdiv+2,w
 11809  128F  00B3               	movwf	___fttol@f1+2
 11810  1290  3195  256C         	fcall	___fttol
 11811  1292  0020               	movlb	0	; select bank0
 11812  1293  0832               	movf	?___fttol+1,w
 11813  1294  0021               	movlb	1	; select bank1
 11814  1295  00AF               	movwf	((_current+1)^(0+128)+6)
 11815  1296  0020               	movlb	0	; select bank0
 11816  1297  0831               	movf	?___fttol,w
 11817  1298  0021               	movlb	1	; select bank1
 11818  1299  00AE               	movwf	(_current^(0+128)+6)
 11819  129A  0008               	return
 11820  129B                     __end_of_calculateCurrent3:	
 11821                           
 11822                           	psect	text16
 11823  1F5D                     __ptext16:	
 11824 ;; *************** function _calculateCurrent2 *****************
 11825 ;; Defined at:
 11826 ;;		line 435 in file "main.c"
 11827 ;; Parameters:    Size  Location     Type
 11828 ;;		None
 11829 ;; Auto vars:     Size  Location     Type
 11830 ;;		None
 11831 ;; Return value:  Size  Location     Type
 11832 ;;                  1    wreg      void 
 11833 ;; Registers used:
 11834 ;;		wreg, status,2, status,0
 11835 ;; Tracked objects:
 11836 ;;		On entry : 0/0
 11837 ;;		On exit  : 0/0
 11838 ;;		Unchanged: 0/0
 11839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11842 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11843 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11844 ;;Total ram usage:        3 bytes
 11845 ;; Hardware stack levels used:    1
 11846 ;; This function calls:
 11847 ;;		Nothing
 11848 ;; This function is called by:
 11849 ;;		_main
 11850 ;; This function uses a non-reentrant model
 11851 ;;
 11852                           
 11853                           
 11854                           ;psect for function _calculateCurrent2
 11855  1F5D                     _calculateCurrent2:	
 11856                           
 11857                           ;main.c: 437: if(Ianalogs[2]-570<=0)
 11858                           
 11859                           ;incstack = 0
 11860                           ; Regs used in _calculateCurrent2: [wreg+status,2+status,0]
 11861  1F5D  0022               	movlb	2	; select bank2
 11862  1F5E  0844               	movf	(_Ianalogs^(0+256)+4),w
 11863  1F5F  3EC6               	addlw	198
 11864  1F60  00F0               	movwf	??_calculateCurrent2
 11865  1F61  30FD               	movlw	253
 11866  1F62  3D45               	addwfc	((_Ianalogs+1)^(0+256)+4),w
 11867  1F63  00F1               	movwf	??_calculateCurrent2+1
 11868  1F64  0871               	movf	??_calculateCurrent2+1,w
 11869  1F65  3A80               	xorlw	128
 11870  1F66  00F2               	movwf	??_calculateCurrent2+2
 11871  1F67  3080               	movlw	128
 11872  1F68  0272               	subwf	??_calculateCurrent2+2,w
 11873  1F69  1D03               	skipz
 11874  1F6A  2F6D               	goto	u4035
 11875  1F6B  3001               	movlw	1
 11876  1F6C  0270               	subwf	??_calculateCurrent2,w
 11877  1F6D                     u4035:	
 11878  1F6D  1803               	skipnc
 11879  1F6E  2F73               	goto	l3284
 11880                           
 11881                           ;main.c: 438: {
 11882                           ;main.c: 439: current[2]=0;
 11883  1F6F  0021               	movlb	1	; select bank1
 11884  1F70  01AC               	clrf	(_current^(0+128)+4)
 11885  1F71  01AD               	clrf	((_current+1)^(0+128)+4)
 11886                           
 11887                           ;main.c: 440: }
 11888  1F72  0008               	return
 11889  1F73                     l3284:	
 11890                           
 11891                           ;main.c: 441: else
 11892                           ;main.c: 442: {
 11893                           ;main.c: 443: current[2]=(int16_t)(Ianalogs[2]-570);
 11894  1F73  0022               	movlb	2	; select bank2
 11895  1F74  0844               	movf	(_Ianalogs^(0+256)+4),w
 11896  1F75  3EC6               	addlw	198
 11897  1F76  0021               	movlb	1	; select bank1
 11898  1F77  00AC               	movwf	(_current^(0+128)+4)
 11899  1F78  30FD               	movlw	253
 11900  1F79  0022               	movlb	2	; select bank2
 11901  1F7A  3D45               	addwfc	((_Ianalogs+1)^(0+256)+4),w
 11902  1F7B  0021               	movlb	1	; select bank1
 11903  1F7C  00AD               	movwf	((_current+1)^(0+128)+4)
 11904  1F7D  0008               	return
 11905  1F7E                     __end_of_calculateCurrent2:	
 11906                           
 11907                           	psect	text17
 11908  1211                     __ptext17:	
 11909 ;; *************** function _calculateCurrent0 *****************
 11910 ;; Defined at:
 11911 ;;		line 411 in file "main.c"
 11912 ;; Parameters:    Size  Location     Type
 11913 ;;		None
 11914 ;; Auto vars:     Size  Location     Type
 11915 ;;		None
 11916 ;; Return value:  Size  Location     Type
 11917 ;;                  1    wreg      void 
 11918 ;; Registers used:
 11919 ;;		wreg, status,2, status,0, pclath, cstack
 11920 ;; Tracked objects:
 11921 ;;		On entry : 0/0
 11922 ;;		On exit  : 0/0
 11923 ;;		Unchanged: 0/0
 11924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11927 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11928 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11929 ;;Total ram usage:        3 bytes
 11930 ;; Hardware stack levels used:    1
 11931 ;; Hardware stack levels required when called:    2
 11932 ;; This function calls:
 11933 ;;		___awtoft
 11934 ;;		___ftdiv
 11935 ;;		___fttol
 11936 ;; This function is called by:
 11937 ;;		_main
 11938 ;; This function uses a non-reentrant model
 11939 ;;
 11940                           
 11941                           
 11942                           ;psect for function _calculateCurrent0
 11943  1211                     _calculateCurrent0:	
 11944                           
 11945                           ;main.c: 413: if(Ianalogs[0]-562<=0)
 11946                           
 11947                           ;incstack = 0
 11948                           ; Regs used in _calculateCurrent0: [wreg+status,2+status,0+pclath+cstack]
 11949  1211  0022               	movlb	2	; select bank2
 11950  1212  0840               	movf	_Ianalogs^(0+256),w
 11951  1213  3ECE               	addlw	206
 11952  1214  0020               	movlb	0	; select bank0
 11953  1215  00BF               	movwf	??_calculateCurrent0
 11954  1216  30FD               	movlw	253
 11955  1217  0022               	movlb	2	; select bank2
 11956  1218  3D41               	addwfc	(_Ianalogs+1)^(0+256),w
 11957  1219  0020               	movlb	0	; select bank0
 11958  121A  00C0               	movwf	??_calculateCurrent0+1
 11959  121B  0840               	movf	??_calculateCurrent0+1,w
 11960  121C  3A80               	xorlw	128
 11961  121D  00C1               	movwf	??_calculateCurrent0+2
 11962  121E  3080               	movlw	128
 11963  121F  0241               	subwf	??_calculateCurrent0+2,w
 11964  1220  1D03               	skipz
 11965  1221  2A24               	goto	u4025
 11966  1222  3001               	movlw	1
 11967  1223  023F               	subwf	??_calculateCurrent0,w
 11968  1224                     u4025:	
 11969  1224  1803               	skipnc
 11970  1225  2A2A               	goto	l3278
 11971                           
 11972                           ;main.c: 414: {
 11973                           ;main.c: 415: current[0]=0;
 11974  1226  0021               	movlb	1	; select bank1
 11975  1227  01A8               	clrf	_current^(0+128)
 11976  1228  01A9               	clrf	(_current+1)^(0+128)
 11977                           
 11978                           ;main.c: 416: }
 11979  1229  0008               	return
 11980  122A                     l3278:	
 11981                           
 11982                           ;main.c: 417: else
 11983                           ;main.c: 418: {
 11984                           ;main.c: 419: current[0]=(int16_t)((Ianalogs[0]-562)/2.9943);
 11985  122A  0022               	movlb	2	; select bank2
 11986  122B  0840               	movf	_Ianalogs^(0+256),w
 11987  122C  3ECE               	addlw	206
 11988  122D  00F9               	movwf	___awtoft@c
 11989  122E  30FD               	movlw	253
 11990  122F  3D41               	addwfc	(_Ianalogs+1)^(0+256),w
 11991  1230  00FA               	movwf	___awtoft@c+1
 11992  1231  319F  273C  3192   	fcall	___awtoft
 11993  1234  0879               	movf	?___awtoft,w
 11994  1235  0020               	movlb	0	; select bank0
 11995  1236  00A4               	movwf	___ftdiv@f1
 11996  1237  087A               	movf	?___awtoft+1,w
 11997  1238  00A5               	movwf	___ftdiv@f1+1
 11998  1239  087B               	movf	?___awtoft+2,w
 11999  123A  00A6               	movwf	___ftdiv@f1+2
 12000  123B  30A3               	movlw	163
 12001  123C  00A1               	movwf	___ftdiv@f2
 12002  123D  303F               	movlw	63
 12003  123E  00A2               	movwf	___ftdiv@f2+1
 12004  123F  3040               	movlw	64
 12005  1240  00A3               	movwf	___ftdiv@f2+2
 12006  1241  3195  25F3  3192   	fcall	___ftdiv
 12007  1244  0020               	movlb	0	; select bank0
 12008  1245  0821               	movf	?___ftdiv,w
 12009  1246  00B1               	movwf	___fttol@f1
 12010  1247  0822               	movf	?___ftdiv+1,w
 12011  1248  00B2               	movwf	___fttol@f1+1
 12012  1249  0823               	movf	?___ftdiv+2,w
 12013  124A  00B3               	movwf	___fttol@f1+2
 12014  124B  3195  256C         	fcall	___fttol
 12015  124D  0020               	movlb	0	; select bank0
 12016  124E  0832               	movf	?___fttol+1,w
 12017  124F  0021               	movlb	1	; select bank1
 12018  1250  00A9               	movwf	(_current+1)^(0+128)
 12019  1251  0020               	movlb	0	; select bank0
 12020  1252  0831               	movf	?___fttol,w
 12021  1253  0021               	movlb	1	; select bank1
 12022  1254  00A8               	movwf	_current^(0+128)
 12023  1255  0008               	return
 12024  1256                     __end_of_calculateCurrent0:	
 12025                           
 12026                           	psect	text18
 12027  15F3                     __ptext18:	
 12028 ;; *************** function ___ftdiv *****************
 12029 ;; Defined at:
 12030 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdiv.c"
 12031 ;; Parameters:    Size  Location     Type
 12032 ;;  f2              3    1[BANK0 ] float 
 12033 ;;  f1              3    4[BANK0 ] float 
 12034 ;; Auto vars:     Size  Location     Type
 12035 ;;  f3              3   12[BANK0 ] float 
 12036 ;;  sign            1   16[BANK0 ] unsigned char 
 12037 ;;  exp             1   15[BANK0 ] unsigned char 
 12038 ;;  cntr            1   11[BANK0 ] unsigned char 
 12039 ;; Return value:  Size  Location     Type
 12040 ;;                  3    1[BANK0 ] float 
 12041 ;; Registers used:
 12042 ;;		wreg, status,2, status,0, pclath, cstack
 12043 ;; Tracked objects:
 12044 ;;		On entry : 0/0
 12045 ;;		On exit  : 0/0
 12046 ;;		Unchanged: 0/0
 12047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12048 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12049 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12050 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12051 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12052 ;;Total ram usage:       16 bytes
 12053 ;; Hardware stack levels used:    1
 12054 ;; Hardware stack levels required when called:    1
 12055 ;; This function calls:
 12056 ;;		___ftpack
 12057 ;; This function is called by:
 12058 ;;		_tempCalc
 12059 ;;		_main
 12060 ;;		_calculateCurrent0
 12061 ;;		_calculateCurrent3
 12062 ;; This function uses a non-reentrant model
 12063 ;;
 12064                           
 12065                           
 12066                           ;psect for function ___ftdiv
 12067  15F3                     ___ftdiv:	
 12068                           
 12069                           ;incstack = 0
 12070                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 12071  15F3  0020               	movlb	0	; select bank0
 12072  15F4  0824               	movf	___ftdiv@f1,w
 12073  15F5  00A7               	movwf	??___ftdiv
 12074  15F6  0825               	movf	___ftdiv@f1+1,w
 12075  15F7  00A8               	movwf	??___ftdiv+1
 12076  15F8  0826               	movf	___ftdiv@f1+2,w
 12077  15F9  00A9               	movwf	??___ftdiv+2
 12078  15FA  1003               	clrc
 12079  15FB  0D28               	rlf	??___ftdiv+1,w
 12080  15FC  0D29               	rlf	??___ftdiv+2,w
 12081  15FD  00AA               	movwf	??___ftdiv+3
 12082  15FE  082A               	movf	??___ftdiv+3,w
 12083  15FF  00AF               	movwf	___ftdiv@exp
 12084  1600  082F               	movf	___ftdiv@exp,w
 12085  1601  1D03               	btfss	3,2
 12086  1602  2E0A               	goto	l2950
 12087  1603  3000               	movlw	0
 12088  1604  00A1               	movwf	?___ftdiv
 12089  1605  3000               	movlw	0
 12090  1606  00A2               	movwf	?___ftdiv+1
 12091  1607  3000               	movlw	0
 12092  1608  00A3               	movwf	?___ftdiv+2
 12093  1609  0008               	return
 12094  160A                     l2950:	
 12095  160A  0821               	movf	___ftdiv@f2,w
 12096  160B  00A7               	movwf	??___ftdiv
 12097  160C  0822               	movf	___ftdiv@f2+1,w
 12098  160D  00A8               	movwf	??___ftdiv+1
 12099  160E  0823               	movf	___ftdiv@f2+2,w
 12100  160F  00A9               	movwf	??___ftdiv+2
 12101  1610  1003               	clrc
 12102  1611  0D28               	rlf	??___ftdiv+1,w
 12103  1612  0D29               	rlf	??___ftdiv+2,w
 12104  1613  00AA               	movwf	??___ftdiv+3
 12105  1614  082A               	movf	??___ftdiv+3,w
 12106  1615  00B0               	movwf	___ftdiv@sign
 12107  1616  0830               	movf	___ftdiv@sign,w
 12108  1617  1D03               	btfss	3,2
 12109  1618  2E20               	goto	l2956
 12110  1619  3000               	movlw	0
 12111  161A  00A1               	movwf	?___ftdiv
 12112  161B  3000               	movlw	0
 12113  161C  00A2               	movwf	?___ftdiv+1
 12114  161D  3000               	movlw	0
 12115  161E  00A3               	movwf	?___ftdiv+2
 12116  161F  0008               	return
 12117  1620                     l2956:	
 12118  1620  3000               	movlw	0
 12119  1621  00AC               	movwf	___ftdiv@f3
 12120  1622  3000               	movlw	0
 12121  1623  00AD               	movwf	___ftdiv@f3+1
 12122  1624  3000               	movlw	0
 12123  1625  00AE               	movwf	___ftdiv@f3+2
 12124  1626  3089               	movlw	137
 12125  1627  0730               	addwf	___ftdiv@sign,w
 12126  1628  00A7               	movwf	??___ftdiv
 12127  1629  0827               	movf	??___ftdiv,w
 12128  162A  02AF               	subwf	___ftdiv@exp,f
 12129  162B  0824               	movf	___ftdiv@f1,w
 12130  162C  00A7               	movwf	??___ftdiv
 12131  162D  0825               	movf	___ftdiv@f1+1,w
 12132  162E  00A8               	movwf	??___ftdiv+1
 12133  162F  0826               	movf	___ftdiv@f1+2,w
 12134  1630  00A9               	movwf	??___ftdiv+2
 12135  1631  3010               	movlw	16
 12136  1632                     u3285:	
 12137  1632  36A9               	lsrf	??___ftdiv+2,f
 12138  1633  0CA8               	rrf	??___ftdiv+1,f
 12139  1634  0CA7               	rrf	??___ftdiv,f
 12140  1635  0B89               	decfsz	9,f
 12141  1636  2E32               	goto	u3285
 12142  1637  0827               	movf	??___ftdiv,w
 12143  1638  00AA               	movwf	??___ftdiv+3
 12144  1639  082A               	movf	??___ftdiv+3,w
 12145  163A  00B0               	movwf	___ftdiv@sign
 12146  163B  0821               	movf	___ftdiv@f2,w
 12147  163C  00A7               	movwf	??___ftdiv
 12148  163D  0822               	movf	___ftdiv@f2+1,w
 12149  163E  00A8               	movwf	??___ftdiv+1
 12150  163F  0823               	movf	___ftdiv@f2+2,w
 12151  1640  00A9               	movwf	??___ftdiv+2
 12152  1641  3010               	movlw	16
 12153  1642                     u3295:	
 12154  1642  36A9               	lsrf	??___ftdiv+2,f
 12155  1643  0CA8               	rrf	??___ftdiv+1,f
 12156  1644  0CA7               	rrf	??___ftdiv,f
 12157  1645  0B89               	decfsz	9,f
 12158  1646  2E42               	goto	u3295
 12159  1647  0827               	movf	??___ftdiv,w
 12160  1648  00AA               	movwf	??___ftdiv+3
 12161  1649  082A               	movf	??___ftdiv+3,w
 12162  164A  06B0               	xorwf	___ftdiv@sign,f
 12163  164B  3080               	movlw	128
 12164  164C  00A7               	movwf	??___ftdiv
 12165  164D  0827               	movf	??___ftdiv,w
 12166  164E  05B0               	andwf	___ftdiv@sign,f
 12167  164F  17A5               	bsf	___ftdiv@f1+1,7
 12168  1650  30FF               	movlw	255
 12169  1651  05A4               	andwf	___ftdiv@f1,f
 12170  1652  30FF               	movlw	255
 12171  1653  05A5               	andwf	___ftdiv@f1+1,f
 12172  1654  3000               	movlw	0
 12173  1655  05A6               	andwf	___ftdiv@f1+2,f
 12174  1656  17A2               	bsf	___ftdiv@f2+1,7
 12175  1657  30FF               	movlw	255
 12176  1658  05A1               	andwf	___ftdiv@f2,f
 12177  1659  30FF               	movlw	255
 12178  165A  05A2               	andwf	___ftdiv@f2+1,f
 12179  165B  3000               	movlw	0
 12180  165C  05A3               	andwf	___ftdiv@f2+2,f
 12181  165D  3018               	movlw	24
 12182  165E  00A7               	movwf	??___ftdiv
 12183  165F  0827               	movf	??___ftdiv,w
 12184  1660  00AB               	movwf	___ftdiv@cntr
 12185  1661                     l2970:	
 12186  1661  3001               	movlw	1
 12187  1662                     u3305:	
 12188  1662  35AC               	lslf	___ftdiv@f3,f
 12189  1663  0DAD               	rlf	___ftdiv@f3+1,f
 12190  1664  0DAE               	rlf	___ftdiv@f3+2,f
 12191  1665  0B89               	decfsz	9,f
 12192  1666  2E62               	goto	u3305
 12193  1667  0823               	movf	___ftdiv@f2+2,w
 12194  1668  0226               	subwf	___ftdiv@f1+2,w
 12195  1669  1D03               	skipz
 12196  166A  2E71               	goto	u3315
 12197  166B  0822               	movf	___ftdiv@f2+1,w
 12198  166C  0225               	subwf	___ftdiv@f1+1,w
 12199  166D  1D03               	skipz
 12200  166E  2E71               	goto	u3315
 12201  166F  0821               	movf	___ftdiv@f2,w
 12202  1670  0224               	subwf	___ftdiv@f1,w
 12203  1671                     u3315:	
 12204  1671  1C03               	skipc
 12205  1672  2E7A               	goto	l2978
 12206  1673  0821               	movf	___ftdiv@f2,w
 12207  1674  02A4               	subwf	___ftdiv@f1,f
 12208  1675  0822               	movf	___ftdiv@f2+1,w
 12209  1676  3BA5               	subwfb	___ftdiv@f1+1,f
 12210  1677  0823               	movf	___ftdiv@f2+2,w
 12211  1678  3BA6               	subwfb	___ftdiv@f1+2,f
 12212  1679  142C               	bsf	___ftdiv@f3,0
 12213  167A                     l2978:	
 12214  167A  3001               	movlw	1
 12215  167B                     u3325:	
 12216  167B  35A4               	lslf	___ftdiv@f1,f
 12217  167C  0DA5               	rlf	___ftdiv@f1+1,f
 12218  167D  0DA6               	rlf	___ftdiv@f1+2,f
 12219  167E  0B89               	decfsz	9,f
 12220  167F  2E7B               	goto	u3325
 12221  1680  3001               	movlw	1
 12222  1681  02AB               	subwf	___ftdiv@cntr,f
 12223  1682  1D03               	btfss	3,2
 12224  1683  2E61               	goto	l2970
 12225  1684  082C               	movf	___ftdiv@f3,w
 12226  1685  00F0               	movwf	___ftpack@arg
 12227  1686  082D               	movf	___ftdiv@f3+1,w
 12228  1687  00F1               	movwf	___ftpack@arg+1
 12229  1688  082E               	movf	___ftdiv@f3+2,w
 12230  1689  00F2               	movwf	___ftpack@arg+2
 12231  168A  082F               	movf	___ftdiv@exp,w
 12232  168B  00A7               	movwf	??___ftdiv
 12233  168C  0827               	movf	??___ftdiv,w
 12234  168D  00F3               	movwf	___ftpack@exp
 12235  168E  0830               	movf	___ftdiv@sign,w
 12236  168F  00A8               	movwf	??___ftdiv+1
 12237  1690  0828               	movf	??___ftdiv+1,w
 12238  1691  00F4               	movwf	___ftpack@sign
 12239  1692  3193  23A0         	fcall	___ftpack
 12240  1694  0870               	movf	?___ftpack,w
 12241  1695  0020               	movlb	0	; select bank0
 12242  1696  00A1               	movwf	?___ftdiv
 12243  1697  0871               	movf	?___ftpack+1,w
 12244  1698  00A2               	movwf	?___ftdiv+1
 12245  1699  0872               	movf	?___ftpack+2,w
 12246  169A  00A3               	movwf	?___ftdiv+2
 12247  169B  0008               	return
 12248  169C                     __end_of___ftdiv:	
 12249                           
 12250                           	psect	text19
 12251  119B                     __ptext19:	
 12252 ;; *************** function _SYSTEM_Initialize *****************
 12253 ;; Defined at:
 12254 ;;		line 35 in file "system.c"
 12255 ;; Parameters:    Size  Location     Type
 12256 ;;		None
 12257 ;; Auto vars:     Size  Location     Type
 12258 ;;		None
 12259 ;; Return value:  Size  Location     Type
 12260 ;;                  1    wreg      void 
 12261 ;; Registers used:
 12262 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12263 ;; Tracked objects:
 12264 ;;		On entry : 0/0
 12265 ;;		On exit  : 0/0
 12266 ;;		Unchanged: 0/0
 12267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12270 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12271 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12272 ;;Total ram usage:        2 bytes
 12273 ;; Hardware stack levels used:    1
 12274 ;; Hardware stack levels required when called:    3
 12275 ;; This function calls:
 12276 ;;		_ADC_Initialize
 12277 ;;		_Init_Battery_State_Machine
 12278 ;;		_LCDClear
 12279 ;;		_LCDInit
 12280 ;;		_OSCILLATOR_Initialize
 12281 ;;		_PIN_MANAGER_Initialize
 12282 ;;		_PWM_Initialize
 12283 ;;		_TMR2_Initialize
 12284 ;;		_TMR4_Initialize
 12285 ;; This function is called by:
 12286 ;;		_main
 12287 ;; This function uses a non-reentrant model
 12288 ;;
 12289                           
 12290                           
 12291                           ;psect for function _SYSTEM_Initialize
 12292  119B                     _SYSTEM_Initialize:	
 12293                           
 12294                           ;system.c: 37: PIN_MANAGER_Initialize();
 12295                           
 12296                           ;incstack = 0
 12297                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12298  119B  319F  27C9  3191   	fcall	_PIN_MANAGER_Initialize
 12299                           
 12300                           ;system.c: 38: OSCILLATOR_Initialize();
 12301  119E  319E  2613  3191   	fcall	_OSCILLATOR_Initialize
 12302                           
 12303                           ;system.c: 40: ADC_Initialize();
 12304  11A1  319E  26FE  3191   	fcall	_ADC_Initialize
 12305                           
 12306                           ;system.c: 41: PWM_Initialize();
 12307  11A4  319F  271D  3191   	fcall	_PWM_Initialize
 12308                           
 12309                           ;system.c: 43: TMR2_Initialize();
 12310  11A7  319E  2634  3191   	fcall	_TMR2_Initialize
 12311                           
 12312                           ;system.c: 44: TMR4_Initialize();
 12313  11AA  319E  2642  3191   	fcall	_TMR4_Initialize
 12314                           
 12315                           ;system.c: 45: Init_Battery_State_Machine(0);
 12316  11AD  3000               	movlw	0
 12317  11AE  3194  2404  3191   	fcall	_Init_Battery_State_Machine
 12318                           
 12319                           ;system.c: 46: Init_Battery_State_Machine(1);
 12320  11B1  3001               	movlw	1
 12321  11B2  3194  2404  3191   	fcall	_Init_Battery_State_Machine
 12322                           
 12323                           ;system.c: 47: LCDInit();
 12324  11B5  3191  2160  3191   	fcall	_LCDInit
 12325                           
 12326                           ;system.c: 48: _delay((unsigned long)((200)*(32000000/4000.0)));
 12327  11B8  3009               	movlw	9
 12328  11B9  0020               	movlb	0	; select bank0
 12329  11BA  00C5               	movwf	??_SYSTEM_Initialize+1
 12330  11BB  301E               	movlw	30
 12331  11BC  00C4               	movwf	??_SYSTEM_Initialize
 12332  11BD  30E4               	movlw	228
 12333  11BE                     u4527:	
 12334  11BE  0B89               	decfsz	9,f
 12335  11BF  29BE               	goto	u4527
 12336  11C0  0BC4               	decfsz	??_SYSTEM_Initialize,f
 12337  11C1  29BE               	goto	u4527
 12338  11C2  0BC5               	decfsz	??_SYSTEM_Initialize+1,f
 12339  11C3  29BE               	goto	u4527
 12340  11C4  0000               	nop
 12341                           
 12342                           ;system.c: 49: LCDClear();
 12343  11C5  319F  27A3  3191   	fcall	_LCDClear
 12344                           
 12345                           ;system.c: 50: _delay((unsigned long)((200)*(32000000/4000.0)));
 12346  11C8  3009               	movlw	9
 12347  11C9  0020               	movlb	0	; select bank0
 12348  11CA  00C5               	movwf	??_SYSTEM_Initialize+1
 12349  11CB  301E               	movlw	30
 12350  11CC  00C4               	movwf	??_SYSTEM_Initialize
 12351  11CD  30E4               	movlw	228
 12352  11CE                     u4537:	
 12353  11CE  0B89               	decfsz	9,f
 12354  11CF  29CE               	goto	u4537
 12355  11D0  0BC4               	decfsz	??_SYSTEM_Initialize,f
 12356  11D1  29CE               	goto	u4537
 12357  11D2  0BC5               	decfsz	??_SYSTEM_Initialize+1,f
 12358  11D3  29CE               	goto	u4537
 12359  11D4  0000               	nop
 12360  11D5  0008               	return
 12361  11D6                     __end_of_SYSTEM_Initialize:	
 12362                           
 12363                           	psect	text20
 12364  1E42                     __ptext20:	
 12365 ;; *************** function _TMR4_Initialize *****************
 12366 ;; Defined at:
 12367 ;;		line 25 in file "tmr.c"
 12368 ;; Parameters:    Size  Location     Type
 12369 ;;		None
 12370 ;; Auto vars:     Size  Location     Type
 12371 ;;		None
 12372 ;; Return value:  Size  Location     Type
 12373 ;;                  1    wreg      void 
 12374 ;; Registers used:
 12375 ;;		wreg, status,2
 12376 ;; Tracked objects:
 12377 ;;		On entry : 0/0
 12378 ;;		On exit  : 0/0
 12379 ;;		Unchanged: 0/0
 12380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12385 ;;Total ram usage:        0 bytes
 12386 ;; Hardware stack levels used:    1
 12387 ;; This function calls:
 12388 ;;		Nothing
 12389 ;; This function is called by:
 12390 ;;		_SYSTEM_Initialize
 12391 ;; This function uses a non-reentrant model
 12392 ;;
 12393                           
 12394                           
 12395                           ;psect for function _TMR4_Initialize
 12396  1E42                     _TMR4_Initialize:	
 12397                           
 12398                           ;tmr.c: 27: T4CON = 0x00;
 12399                           
 12400                           ;incstack = 0
 12401                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
 12402  1E42  0025               	movlb	5	; select bank5
 12403  1E43  0194               	clrf	20	;volatile
 12404                           
 12405                           ;tmr.c: 29: T4CLKCON = 0x01;
 12406  1E44  3001               	movlw	1
 12407  1E45  0096               	movwf	22	;volatile
 12408                           
 12409                           ;tmr.c: 31: T4HLT = 0x00;
 12410  1E46  0195               	clrf	21	;volatile
 12411                           
 12412                           ;tmr.c: 33: T4RST = 0x00;
 12413  1E47  0197               	clrf	23	;volatile
 12414                           
 12415                           ;tmr.c: 35: T4PR = 0xFE;
 12416  1E48  30FE               	movlw	254
 12417  1E49  0093               	movwf	19	;volatile
 12418                           
 12419                           ;tmr.c: 39: T4TMR = 0x00;
 12420  1E4A  0192               	clrf	18	;volatile
 12421                           
 12422                           ;tmr.c: 41: PIR4bits.TMR4IF = 0;
 12423  1E4B  002E               	movlb	14	; select bank14
 12424  1E4C  1190               	bcf	16,3	;volatile
 12425                           
 12426                           ;tmr.c: 43: T4CONbits.TMR4ON = 1;
 12427  1E4D  0025               	movlb	5	; select bank5
 12428  1E4E  1794               	bsf	20,7	;volatile
 12429  1E4F  0008               	return
 12430  1E50                     __end_of_TMR4_Initialize:	
 12431                           
 12432                           	psect	text21
 12433  1E34                     __ptext21:	
 12434 ;; *************** function _TMR2_Initialize *****************
 12435 ;; Defined at:
 12436 ;;		line 3 in file "tmr.c"
 12437 ;; Parameters:    Size  Location     Type
 12438 ;;		None
 12439 ;; Auto vars:     Size  Location     Type
 12440 ;;		None
 12441 ;; Return value:  Size  Location     Type
 12442 ;;                  1    wreg      void 
 12443 ;; Registers used:
 12444 ;;		wreg, status,2
 12445 ;; Tracked objects:
 12446 ;;		On entry : 0/0
 12447 ;;		On exit  : 0/0
 12448 ;;		Unchanged: 0/0
 12449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12454 ;;Total ram usage:        0 bytes
 12455 ;; Hardware stack levels used:    1
 12456 ;; This function calls:
 12457 ;;		Nothing
 12458 ;; This function is called by:
 12459 ;;		_SYSTEM_Initialize
 12460 ;; This function uses a non-reentrant model
 12461 ;;
 12462                           
 12463                           
 12464                           ;psect for function _TMR2_Initialize
 12465  1E34                     _TMR2_Initialize:	
 12466                           
 12467                           ;tmr.c: 5: T2CON = 0x00;
 12468                           
 12469                           ;incstack = 0
 12470                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 12471  1E34  0025               	movlb	5	; select bank5
 12472  1E35  018E               	clrf	14	;volatile
 12473                           
 12474                           ;tmr.c: 7: T2CLKCON = 0x01;
 12475  1E36  3001               	movlw	1
 12476  1E37  0090               	movwf	16	;volatile
 12477                           
 12478                           ;tmr.c: 9: T2HLT = 0x00;
 12479  1E38  018F               	clrf	15	;volatile
 12480                           
 12481                           ;tmr.c: 11: T2RST = 0x00;
 12482  1E39  0191               	clrf	17	;volatile
 12483                           
 12484                           ;tmr.c: 13: T2PR = 0xFE;
 12485  1E3A  30FE               	movlw	254
 12486  1E3B  008D               	movwf	13	;volatile
 12487                           
 12488                           ;tmr.c: 18: T2TMR = 0x00;
 12489  1E3C  018C               	clrf	12	;volatile
 12490                           
 12491                           ;tmr.c: 20: PIR4bits.TMR2IF = 0;
 12492  1E3D  002E               	movlb	14	; select bank14
 12493  1E3E  1090               	bcf	16,1	;volatile
 12494                           
 12495                           ;tmr.c: 22: T2CONbits.TMR2ON = 1;
 12496  1E3F  0025               	movlb	5	; select bank5
 12497  1E40  178E               	bsf	14,7	;volatile
 12498  1E41  0008               	return
 12499  1E42                     __end_of_TMR2_Initialize:	
 12500                           
 12501                           	psect	text22
 12502  1F1D                     __ptext22:	
 12503 ;; *************** function _PWM_Initialize *****************
 12504 ;; Defined at:
 12505 ;;		line 3 in file "pwm.c"
 12506 ;; Parameters:    Size  Location     Type
 12507 ;;		None
 12508 ;; Auto vars:     Size  Location     Type
 12509 ;;		None
 12510 ;; Return value:  Size  Location     Type
 12511 ;;                  1    wreg      void 
 12512 ;; Registers used:
 12513 ;;		wreg, status,2, status,0
 12514 ;; Tracked objects:
 12515 ;;		On entry : 0/0
 12516 ;;		On exit  : 0/0
 12517 ;;		Unchanged: 0/0
 12518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12523 ;;Total ram usage:        0 bytes
 12524 ;; Hardware stack levels used:    1
 12525 ;; This function calls:
 12526 ;;		Nothing
 12527 ;; This function is called by:
 12528 ;;		_SYSTEM_Initialize
 12529 ;; This function uses a non-reentrant model
 12530 ;;
 12531                           
 12532                           
 12533                           ;psect for function _PWM_Initialize
 12534  1F1D                     _PWM_Initialize:	
 12535                           
 12536                           ;pwm.c: 5: PWM6CON = 0x80;
 12537                           
 12538                           ;incstack = 0
 12539                           ; Regs used in _PWM_Initialize: [wreg+status,2+status,0]
 12540  1F1D  3080               	movlw	128
 12541  1F1E  0027               	movlb	7	; select bank7
 12542  1F1F  008E               	movwf	14	;volatile
 12543                           
 12544                           ;pwm.c: 7: PWM6DCH = 0x00;
 12545  1F20  018D               	clrf	13	;volatile
 12546                           
 12547                           ;pwm.c: 9: PWM6DCL = 0x00;
 12548  1F21  018C               	clrf	12	;volatile
 12549                           
 12550                           ;pwm.c: 11: CCPTMRS1bits.P6TSEL = 0x01;
 12551  1F22  0024               	movlb	4	; select bank4
 12552  1F23  081F               	movf	31,w	;volatile
 12553  1F24  39F3               	andlw	-13
 12554  1F25  3804               	iorlw	4
 12555  1F26  009F               	movwf	31	;volatile
 12556                           
 12557                           ;pwm.c: 14: PWM7CON = 0x80;
 12558  1F27  3080               	movlw	128
 12559  1F28  0027               	movlb	7	; select bank7
 12560  1F29  0092               	movwf	18	;volatile
 12561                           
 12562                           ;pwm.c: 16: PWM7DCH = 0x00;
 12563  1F2A  0191               	clrf	17	;volatile
 12564                           
 12565                           ;pwm.c: 18: PWM7DCL = 0x00;
 12566  1F2B  0190               	clrf	16	;volatile
 12567                           
 12568                           ;pwm.c: 20: CCPTMRS1bits.P7TSEL = 0x02;
 12569  1F2C  0024               	movlb	4	; select bank4
 12570  1F2D  081F               	movf	31,w	;volatile
 12571  1F2E  39CF               	andlw	-49
 12572  1F2F  3820               	iorlw	32
 12573  1F30  009F               	movwf	31	;volatile
 12574                           
 12575                           ;pwm.c: 23: CCP1CONbits.CCP1EN = 1;
 12576  1F31  0026               	movlb	6	; select bank6
 12577  1F32  178E               	bsf	14,7	;volatile
 12578                           
 12579                           ;pwm.c: 24: CCP1CONbits.CCP1FMT = 1;
 12580  1F33  160E               	bsf	14,4	;volatile
 12581                           
 12582                           ;pwm.c: 25: CCP1CONbits.CCP1MODE = 0xF;
 12583  1F34  300F               	movlw	15
 12584  1F35  048E               	iorwf	14,f	;volatile
 12585                           
 12586                           ;pwm.c: 26: CCPTMRS0bits.C1TSEL = 0x1;
 12587  1F36  0024               	movlb	4	; select bank4
 12588  1F37  081E               	movf	30,w	;volatile
 12589  1F38  39FC               	andlw	-4
 12590  1F39  3801               	iorlw	1
 12591  1F3A  009E               	movwf	30	;volatile
 12592  1F3B  0008               	return
 12593  1F3C                     __end_of_PWM_Initialize:	
 12594                           
 12595                           	psect	text23
 12596  1FC9                     __ptext23:	
 12597 ;; *************** function _PIN_MANAGER_Initialize *****************
 12598 ;; Defined at:
 12599 ;;		line 3 in file "pin_manager.c"
 12600 ;; Parameters:    Size  Location     Type
 12601 ;;		None
 12602 ;; Auto vars:     Size  Location     Type
 12603 ;;  state           1    0[COMMON] char 
 12604 ;; Return value:  Size  Location     Type
 12605 ;;                  1    wreg      void 
 12606 ;; Registers used:
 12607 ;;		wreg, status,2
 12608 ;; Tracked objects:
 12609 ;;		On entry : 0/0
 12610 ;;		On exit  : 0/0
 12611 ;;		Unchanged: 0/0
 12612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12614 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12616 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12617 ;;Total ram usage:        1 bytes
 12618 ;; Hardware stack levels used:    1
 12619 ;; This function calls:
 12620 ;;		Nothing
 12621 ;; This function is called by:
 12622 ;;		_SYSTEM_Initialize
 12623 ;; This function uses a non-reentrant model
 12624 ;;
 12625                           
 12626                           
 12627                           ;psect for function _PIN_MANAGER_Initialize
 12628  1FC9                     _PIN_MANAGER_Initialize:	
 12629                           
 12630                           ;pin_manager.c: 5: LATA = 0x20;
 12631                           
 12632                           ;incstack = 0
 12633                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 12634  1FC9  3020               	movlw	32
 12635  1FCA  0020               	movlb	0	; select bank0
 12636  1FCB  0096               	movwf	22	;volatile
 12637                           
 12638                           ;pin_manager.c: 6: LATB = 0x00;
 12639  1FCC  0197               	clrf	23	;volatile
 12640                           
 12641                           ;pin_manager.c: 7: LATC = 0x00;
 12642  1FCD  0198               	clrf	24	;volatile
 12643                           
 12644                           ;pin_manager.c: 9: WPUA = 0x00;
 12645  1FCE  003E               	movlb	30	; select bank30
 12646  1FCF  01B9               	clrf	57	;volatile
 12647                           
 12648                           ;pin_manager.c: 10: WPUB = 0x00;
 12649  1FD0  01C4               	clrf	68	;volatile
 12650                           
 12651                           ;pin_manager.c: 11: WPUC = 0x00;
 12652  1FD1  01CF               	clrf	79	;volatile
 12653                           
 12654                           ;pin_manager.c: 12: WPUE = 0x8;
 12655  1FD2  3008               	movlw	8
 12656  1FD3  00E5               	movwf	101	;volatile
 12657                           
 12658                           ;pin_manager.c: 14: TRISA = 0x00;
 12659  1FD4  0020               	movlb	0	; select bank0
 12660  1FD5  0191               	clrf	17	;volatile
 12661                           
 12662                           ;pin_manager.c: 15: TRISB = 0x0E;
 12663  1FD6  300E               	movlw	14
 12664  1FD7  0092               	movwf	18	;volatile
 12665                           
 12666                           ;pin_manager.c: 16: TRISC = 0xFF;
 12667  1FD8  30FF               	movlw	255
 12668  1FD9  0093               	movwf	19	;volatile
 12669                           
 12670                           ;pin_manager.c: 18: ANSELA = 0x00;
 12671  1FDA  003E               	movlb	30	; select bank30
 12672  1FDB  01B8               	clrf	56	;volatile
 12673                           
 12674                           ;pin_manager.c: 19: ANSELB = 0x0A;
 12675  1FDC  300A               	movlw	10
 12676  1FDD  00C3               	movwf	67	;volatile
 12677                           
 12678                           ;pin_manager.c: 20: ANSELC = 0xFF;
 12679  1FDE  30FF               	movlw	255
 12680  1FDF  00CE               	movwf	78	;volatile
 12681                           
 12682                           ;pin_manager.c: 23: PIE0bits.IOCIE = 0;
 12683  1FE0  002E               	movlb	14	; select bank14
 12684  1FE1  1216               	bcf	22,4	;volatile
 12685                           
 12686                           ;pin_manager.c: 24: int8_t state = GIE;
 12687  1FE2  3000               	movlw	0
 12688  1FE3  1B8B               	btfsc	11,7	;volatile
 12689  1FE4  3001               	movlw	1
 12690  1FE5  00F0               	movwf	PIN_MANAGER_Initialize@state
 12691                           
 12692                           ;pin_manager.c: 25: GIE = 0;
 12693  1FE6  138B               	bcf	11,7	;volatile
 12694                           
 12695                           ;pin_manager.c: 26: PPSLOCK = 0x55;
 12696  1FE7  3055               	movlw	85
 12697  1FE8  003D               	movlb	29	; select bank29
 12698  1FE9  008F               	movwf	15	;volsfr
 12699                           
 12700                           ;pin_manager.c: 27: PPSLOCK = 0xAA;
 12701  1FEA  30AA               	movlw	170
 12702  1FEB  008F               	movwf	15	;volsfr
 12703                           
 12704                           ;pin_manager.c: 28: PPSLOCKbits.PPSLOCKED = 0x00;
 12705  1FEC  100F               	bcf	15,0	;volsfr
 12706                           
 12707                           ;pin_manager.c: 30: RA6PPS = 0x0E;
 12708  1FED  300E               	movlw	14
 12709  1FEE  003E               	movlb	30	; select bank30
 12710  1FEF  0096               	movwf	22	;volatile
 12711                           
 12712                           ;pin_manager.c: 31: RA7PPS = 0x0F;
 12713  1FF0  300F               	movlw	15
 12714  1FF1  0097               	movwf	23	;volatile
 12715                           
 12716                           ;pin_manager.c: 32: RB0PPS = 0x09;
 12717  1FF2  3009               	movlw	9
 12718  1FF3  0098               	movwf	24	;volatile
 12719                           
 12720                           ;pin_manager.c: 33: PPSLOCK = 0x55;
 12721  1FF4  3055               	movlw	85
 12722  1FF5  003D               	movlb	29	; select bank29
 12723  1FF6  008F               	movwf	15	;volsfr
 12724                           
 12725                           ;pin_manager.c: 34: PPSLOCK = 0xAA;
 12726  1FF7  30AA               	movlw	170
 12727  1FF8  008F               	movwf	15	;volsfr
 12728                           
 12729                           ;pin_manager.c: 35: PPSLOCKbits.PPSLOCKED = 0x01;
 12730  1FF9  140F               	bsf	15,0	;volsfr
 12731                           
 12732                           ;pin_manager.c: 36: GIE = state;
 12733  1FFA  1C70               	btfss	PIN_MANAGER_Initialize@state,0
 12734  1FFB  2FFE               	goto	u3000
 12735  1FFC  178B               	bsf	11,7	;volatile
 12736  1FFD  0008               	return
 12737  1FFE                     u3000:	
 12738  1FFE  138B               	bcf	11,7	;volatile
 12739  1FFF  0008               	return
 12740  2000                     __end_of_PIN_MANAGER_Initialize:	
 12741                           
 12742                           	psect	text24
 12743  1E13                     __ptext24:	
 12744 ;; *************** function _OSCILLATOR_Initialize *****************
 12745 ;; Defined at:
 12746 ;;		line 53 in file "system.c"
 12747 ;; Parameters:    Size  Location     Type
 12748 ;;		None
 12749 ;; Auto vars:     Size  Location     Type
 12750 ;;		None
 12751 ;; Return value:  Size  Location     Type
 12752 ;;                  1    wreg      void 
 12753 ;; Registers used:
 12754 ;;		wreg, status,2
 12755 ;; Tracked objects:
 12756 ;;		On entry : 0/0
 12757 ;;		On exit  : 0/0
 12758 ;;		Unchanged: 0/0
 12759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12764 ;;Total ram usage:        0 bytes
 12765 ;; Hardware stack levels used:    1
 12766 ;; This function calls:
 12767 ;;		Nothing
 12768 ;; This function is called by:
 12769 ;;		_SYSTEM_Initialize
 12770 ;; This function uses a non-reentrant model
 12771 ;;
 12772                           
 12773                           
 12774                           ;psect for function _OSCILLATOR_Initialize
 12775  1E13                     _OSCILLATOR_Initialize:	
 12776                           
 12777                           ;system.c: 55: OSCCON1 = 0x60;
 12778                           
 12779                           ;incstack = 0
 12780                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 12781  1E13  3060               	movlw	96
 12782  1E14  0031               	movlb	17	; select bank17
 12783  1E15  008D               	movwf	13	;volatile
 12784                           
 12785                           ;system.c: 56: OSCCON3 = 0x00;
 12786  1E16  018F               	clrf	15	;volatile
 12787                           
 12788                           ;system.c: 57: OSCEN = 0x00;
 12789  1E17  0191               	clrf	17	;volatile
 12790                           
 12791                           ;system.c: 58: OSCFRQ = 0x06;
 12792  1E18  3006               	movlw	6
 12793  1E19  0093               	movwf	19	;volatile
 12794                           
 12795                           ;system.c: 59: OSCTUNE = 0x00;
 12796  1E1A  0192               	clrf	18	;volatile
 12797  1E1B  0008               	return
 12798  1E1C                     __end_of_OSCILLATOR_Initialize:	
 12799                           
 12800                           	psect	text25
 12801  1160                     __ptext25:	
 12802 ;; *************** function _LCDInit *****************
 12803 ;; Defined at:
 12804 ;;		line 247 in file "lcd.c"
 12805 ;; Parameters:    Size  Location     Type
 12806 ;;		None
 12807 ;; Auto vars:     Size  Location     Type
 12808 ;;		None
 12809 ;; Return value:  Size  Location     Type
 12810 ;;                  1    wreg      void 
 12811 ;; Registers used:
 12812 ;;		wreg, status,2, status,0, pclath, cstack
 12813 ;; Tracked objects:
 12814 ;;		On entry : 0/0
 12815 ;;		On exit  : 0/0
 12816 ;;		Unchanged: 0/0
 12817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12820 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12821 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12822 ;;Total ram usage:        1 bytes
 12823 ;; Hardware stack levels used:    1
 12824 ;; Hardware stack levels required when called:    1
 12825 ;; This function calls:
 12826 ;;		_LCDWrite
 12827 ;; This function is called by:
 12828 ;;		_SYSTEM_Initialize
 12829 ;;		_main
 12830 ;; This function uses a non-reentrant model
 12831 ;;
 12832                           
 12833                           
 12834                           ;psect for function _LCDInit
 12835  1160                     _LCDInit:	
 12836                           
 12837                           ;lcd.c: 249: TRISAbits.TRISA0 = 0;
 12838                           
 12839                           ;incstack = 0
 12840                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
 12841  1160  0020               	movlb	0	; select bank0
 12842  1161  1011               	bcf	17,0	;volatile
 12843                           
 12844                           ;lcd.c: 250: TRISAbits.TRISA1 = 0;
 12845  1162  1091               	bcf	17,1	;volatile
 12846                           
 12847                           ;lcd.c: 251: TRISAbits.TRISA2 = 0;
 12848  1163  1111               	bcf	17,2	;volatile
 12849                           
 12850                           ;lcd.c: 252: TRISAbits.TRISA3 = 0;
 12851  1164  1191               	bcf	17,3	;volatile
 12852                           
 12853                           ;lcd.c: 253: TRISAbits.TRISA4 = 0;
 12854  1165  1211               	bcf	17,4	;volatile
 12855                           
 12856                           ;lcd.c: 254: LATAbits.LATA3 = 0;
 12857  1166  1196               	bcf	22,3	;volatile
 12858                           
 12859                           ;lcd.c: 255: LATAbits.LATA4 = 0;
 12860  1167  1216               	bcf	22,4	;volatile
 12861                           
 12862                           ;lcd.c: 256: LATAbits.LATA2 = 0;
 12863  1168  1116               	bcf	22,2	;volatile
 12864                           
 12865                           ;lcd.c: 257: LATAbits.LATA0 = 0;
 12866  1169  1016               	bcf	22,0	;volatile
 12867                           
 12868                           ;lcd.c: 259: LATAbits.LATA0 = 1;
 12869  116A  1416               	bsf	22,0	;volatile
 12870                           
 12871                           ;lcd.c: 261: LCDWrite(0, 0x21);
 12872  116B  3021               	movlw	33
 12873  116C  00F5               	movwf	??_LCDInit
 12874  116D  0875               	movf	??_LCDInit,w
 12875  116E  00F0               	movwf	LCDWrite@data
 12876  116F  3000               	movlw	0
 12877  1170  319F  277E  3191   	fcall	_LCDWrite
 12878                           
 12879                           ;lcd.c: 269: LCDWrite(0, 0XB9);
 12880  1173  30B9               	movlw	185
 12881  1174  00F5               	movwf	??_LCDInit
 12882  1175  0875               	movf	??_LCDInit,w
 12883  1176  00F0               	movwf	LCDWrite@data
 12884  1177  3000               	movlw	0
 12885  1178  319F  277E  3191   	fcall	_LCDWrite
 12886                           
 12887                           ;lcd.c: 271: LCDWrite(0, 0x04);
 12888  117B  3004               	movlw	4
 12889  117C  00F5               	movwf	??_LCDInit
 12890  117D  0875               	movf	??_LCDInit,w
 12891  117E  00F0               	movwf	LCDWrite@data
 12892  117F  3000               	movlw	0
 12893  1180  319F  277E  3191   	fcall	_LCDWrite
 12894                           
 12895                           ;lcd.c: 273: LCDWrite(0, 0x14);
 12896  1183  3014               	movlw	20
 12897  1184  00F5               	movwf	??_LCDInit
 12898  1185  0875               	movf	??_LCDInit,w
 12899  1186  00F0               	movwf	LCDWrite@data
 12900  1187  3000               	movlw	0
 12901  1188  319F  277E  3191   	fcall	_LCDWrite
 12902                           
 12903                           ;lcd.c: 275: LCDWrite(0, 0x20);
 12904  118B  3020               	movlw	32
 12905  118C  00F5               	movwf	??_LCDInit
 12906  118D  0875               	movf	??_LCDInit,w
 12907  118E  00F0               	movwf	LCDWrite@data
 12908  118F  3000               	movlw	0
 12909  1190  319F  277E  3191   	fcall	_LCDWrite
 12910                           
 12911                           ;lcd.c: 277: LCDWrite(0, 0x0C);
 12912  1193  300C               	movlw	12
 12913  1194  00F5               	movwf	??_LCDInit
 12914  1195  0875               	movf	??_LCDInit,w
 12915  1196  00F0               	movwf	LCDWrite@data
 12916  1197  3000               	movlw	0
 12917  1198  319F  277E         	fcall	_LCDWrite
 12918  119A  0008               	return
 12919  119B                     __end_of_LCDInit:	
 12920                           
 12921                           	psect	text26
 12922  1FA3                     __ptext26:	
 12923 ;; *************** function _LCDClear *****************
 12924 ;; Defined at:
 12925 ;;		line 182 in file "lcd.c"
 12926 ;; Parameters:    Size  Location     Type
 12927 ;;		None
 12928 ;; Auto vars:     Size  Location     Type
 12929 ;;  index           2    9[COMMON] int 
 12930 ;; Return value:  Size  Location     Type
 12931 ;;                  1    wreg      void 
 12932 ;; Registers used:
 12933 ;;		wreg, status,2, status,0, pclath, cstack
 12934 ;; Tracked objects:
 12935 ;;		On entry : 0/0
 12936 ;;		On exit  : 0/0
 12937 ;;		Unchanged: 0/0
 12938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12940 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12941 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12942 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12943 ;;Total ram usage:        3 bytes
 12944 ;; Hardware stack levels used:    1
 12945 ;; Hardware stack levels required when called:    2
 12946 ;; This function calls:
 12947 ;;		_LCDWrite
 12948 ;;		_gotoXY
 12949 ;; This function is called by:
 12950 ;;		_SYSTEM_Initialize
 12951 ;;		_main
 12952 ;; This function uses a non-reentrant model
 12953 ;;
 12954                           
 12955                           
 12956                           ;psect for function _LCDClear
 12957  1FA3                     _LCDClear:	
 12958                           
 12959                           ;lcd.c: 184: int index;
 12960                           ;lcd.c: 185: for (index = 0 ; index < (84 * 48 / 8) ; index++)
 12961                           
 12962                           ;incstack = 0
 12963                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
 12964  1FA3  01F9               	clrf	LCDClear@index
 12965  1FA4  01FA               	clrf	LCDClear@index+1
 12966  1FA5  087A               	movf	LCDClear@index+1,w
 12967  1FA6  3A80               	xorlw	128
 12968  1FA7  00F8               	movwf	??_LCDClear
 12969  1FA8  3081               	movlw	129
 12970  1FA9  0278               	subwf	??_LCDClear,w
 12971  1FAA  1D03               	skipz
 12972  1FAB  2FAE               	goto	u2985
 12973  1FAC  30F8               	movlw	248
 12974  1FAD  0279               	subwf	LCDClear@index,w
 12975  1FAE                     u2985:	
 12976  1FAE  1803               	btfsc	3,0
 12977  1FAF  2FC4               	goto	l2730
 12978  1FB0                     l2724:	
 12979                           
 12980                           ;lcd.c: 186: LCDWrite(1, 0x00);
 12981  1FB0  01F0               	clrf	LCDWrite@data
 12982  1FB1  3001               	movlw	1
 12983  1FB2  319F  277E  319F   	fcall	_LCDWrite
 12984  1FB5  3001               	movlw	1
 12985  1FB6  07F9               	addwf	LCDClear@index,f
 12986  1FB7  3000               	movlw	0
 12987  1FB8  3DFA               	addwfc	LCDClear@index+1,f
 12988  1FB9  087A               	movf	LCDClear@index+1,w
 12989  1FBA  3A80               	xorlw	128
 12990  1FBB  00F8               	movwf	??_LCDClear
 12991  1FBC  3081               	movlw	129
 12992  1FBD  0278               	subwf	??_LCDClear,w
 12993  1FBE  1D03               	skipz
 12994  1FBF  2FC2               	goto	u2995
 12995  1FC0  30F8               	movlw	248
 12996  1FC1  0279               	subwf	LCDClear@index,w
 12997  1FC2                     u2995:	
 12998  1FC2  1C03               	skipc
 12999  1FC3  2FB0               	goto	l2724
 13000  1FC4                     l2730:	
 13001                           
 13002                           ;lcd.c: 187: gotoXY(0, 0);
 13003  1FC4  01F5               	clrf	gotoXY@y
 13004  1FC5  3000               	movlw	0
 13005  1FC6  319E  2671         	fcall	_gotoXY
 13006  1FC8  0008               	return
 13007  1FC9                     __end_of_LCDClear:	
 13008                           
 13009                           	psect	text27
 13010  1E71                     __ptext27:	
 13011 ;; *************** function _gotoXY *****************
 13012 ;; Defined at:
 13013 ;;		line 124 in file "lcd.c"
 13014 ;; Parameters:    Size  Location     Type
 13015 ;;  x               1    wreg     unsigned char 
 13016 ;;  y               1    5[COMMON] unsigned char 
 13017 ;; Auto vars:     Size  Location     Type
 13018 ;;  x               1    7[COMMON] unsigned char 
 13019 ;; Return value:  Size  Location     Type
 13020 ;;                  1    wreg      void 
 13021 ;; Registers used:
 13022 ;;		wreg, status,2, status,0, pclath, cstack
 13023 ;; Tracked objects:
 13024 ;;		On entry : 0/0
 13025 ;;		On exit  : 0/0
 13026 ;;		Unchanged: 0/0
 13027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13028 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13029 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13030 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13031 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13032 ;;Total ram usage:        3 bytes
 13033 ;; Hardware stack levels used:    1
 13034 ;; Hardware stack levels required when called:    1
 13035 ;; This function calls:
 13036 ;;		_LCDWrite
 13037 ;; This function is called by:
 13038 ;;		_LCDClear
 13039 ;;		_main
 13040 ;; This function uses a non-reentrant model
 13041 ;;
 13042                           
 13043                           
 13044                           ;psect for function _gotoXY
 13045  1E71                     _gotoXY:	
 13046                           
 13047                           ;incstack = 0
 13048                           ; Regs used in _gotoXY: [wreg+status,2+status,0+pclath+cstack]
 13049                           ;gotoXY@x stored from wreg
 13050  1E71  00F7               	movwf	gotoXY@x
 13051                           
 13052                           ;lcd.c: 126: LCDWrite(0,(uint8_t)(0x80 | x));
 13053  1E72  0877               	movf	gotoXY@x,w
 13054  1E73  3880               	iorlw	128
 13055  1E74  00F6               	movwf	??_gotoXY
 13056  1E75  0876               	movf	??_gotoXY,w
 13057  1E76  00F0               	movwf	LCDWrite@data
 13058  1E77  3000               	movlw	0
 13059  1E78  319F  277E  319E   	fcall	_LCDWrite
 13060                           
 13061                           ;lcd.c: 127: LCDWrite(0,(uint8_t)(0x40 | y));
 13062  1E7B  0875               	movf	gotoXY@y,w
 13063  1E7C  3840               	iorlw	64
 13064  1E7D  00F6               	movwf	??_gotoXY
 13065  1E7E  0876               	movf	??_gotoXY,w
 13066  1E7F  00F0               	movwf	LCDWrite@data
 13067  1E80  3000               	movlw	0
 13068  1E81  319F  277E         	fcall	_LCDWrite
 13069  1E83  0008               	return
 13070  1E84                     __end_of_gotoXY:	
 13071                           
 13072                           	psect	text28
 13073  1404                     __ptext28:	
 13074 ;; *************** function _Init_Battery_State_Machine *****************
 13075 ;; Defined at:
 13076 ;;		line 21 in file "battery_charger.c"
 13077 ;; Parameters:    Size  Location     Type
 13078 ;;  z               1    wreg     unsigned char 
 13079 ;; Auto vars:     Size  Location     Type
 13080 ;;  z               1   35[BANK0 ] unsigned char 
 13081 ;; Return value:  Size  Location     Type
 13082 ;;                  1    wreg      void 
 13083 ;; Registers used:
 13084 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13085 ;; Tracked objects:
 13086 ;;		On entry : 0/0
 13087 ;;		On exit  : 0/0
 13088 ;;		Unchanged: 0/0
 13089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13091 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13092 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13093 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13094 ;;Total ram usage:        5 bytes
 13095 ;; Hardware stack levels used:    1
 13096 ;; Hardware stack levels required when called:    2
 13097 ;; This function calls:
 13098 ;;		___awtoft
 13099 ;;		___ftmul
 13100 ;;		___fttol
 13101 ;; This function is called by:
 13102 ;;		_SYSTEM_Initialize
 13103 ;; This function uses a non-reentrant model
 13104 ;;
 13105                           
 13106                           
 13107                           ;psect for function _Init_Battery_State_Machine
 13108  1404                     _Init_Battery_State_Machine:	
 13109                           
 13110                           ;incstack = 0
 13111                           ; Regs used in _Init_Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13112                           ;Init_Battery_State_Machine@z stored from wreg
 13113  1404  0020               	movlb	0	; select bank0
 13114  1405  00C3               	movwf	Init_Battery_State_Machine@z
 13115                           
 13116                           ;battery_charger.c: 23: batteryState[z] =PRECHARGE;
 13117  1406  3003               	movlw	3
 13118  1407  00BF               	movwf	??_Init_Battery_State_Machine
 13119  1408  0843               	movf	Init_Battery_State_Machine@z,w
 13120  1409  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 13121  140A  0086               	movwf	6
 13122  140B  0187               	clrf	7
 13123  140C  083F               	movf	??_Init_Battery_State_Machine,w
 13124  140D  0081               	movwf	1
 13125                           
 13126                           ;battery_charger.c: 24: stateCounter[z] =5;
 13127  140E  3543               	lslf	Init_Battery_State_Machine@z,w
 13128  140F  3EB4               	addlw	(low (_stateCounter| 0))& (0+255)
 13129  1410  0086               	movwf	6
 13130  1411  0187               	clrf	7
 13131  1412  3005               	movlw	5
 13132  1413  3FC0               	movwi [0]fsr1
 13133  1414  3000               	movlw	0
 13134  1415  3FC1               	movwi [1]fsr1
 13135                           
 13136                           ;battery_charger.c: 25: Iref[z] =10;
 13137  1416  3543               	lslf	Init_Battery_State_Machine@z,w
 13138  1417  3EB8               	addlw	(low (_Iref| 0))& (0+255)
 13139  1418  0086               	movwf	6
 13140  1419  0187               	clrf	7
 13141  141A  300A               	movlw	10
 13142  141B  3FC0               	movwi [0]fsr1
 13143  141C  3000               	movlw	0
 13144  141D  3FC1               	movwi [1]fsr1
 13145                           
 13146                           ;battery_charger.c: 26: Vref[z] =1425+(int16_t)((250-batteryTemp)*.24);
 13147  141E  096D               	comf	_batteryTemp,w
 13148  141F  00BF               	movwf	??_Init_Battery_State_Machine
 13149  1420  096E               	comf	_batteryTemp+1,w
 13150  1421  00C0               	movwf	??_Init_Battery_State_Machine+1
 13151  1422  0ABF               	incf	??_Init_Battery_State_Machine,f
 13152  1423  1903               	skipnz
 13153  1424  0AC0               	incf	??_Init_Battery_State_Machine+1,f
 13154  1425  083F               	movf	??_Init_Battery_State_Machine,w
 13155  1426  3EFA               	addlw	250
 13156  1427  00F9               	movwf	___awtoft@c
 13157  1428  3000               	movlw	0
 13158  1429  3D40               	addwfc	??_Init_Battery_State_Machine+1,w
 13159  142A  00FA               	movwf	___awtoft@c+1
 13160  142B  319F  273C  3194   	fcall	___awtoft
 13161  142E  0879               	movf	?___awtoft,w
 13162  142F  0020               	movlb	0	; select bank0
 13163  1430  00A4               	movwf	___ftmul@f2
 13164  1431  087A               	movf	?___awtoft+1,w
 13165  1432  00A5               	movwf	___ftmul@f2+1
 13166  1433  087B               	movf	?___awtoft+2,w
 13167  1434  00A6               	movwf	___ftmul@f2+2
 13168  1435  30C3               	movlw	195
 13169  1436  00A1               	movwf	___ftmul@f1
 13170  1437  3075               	movlw	117
 13171  1438  00A2               	movwf	___ftmul@f1+1
 13172  1439  303E               	movlw	62
 13173  143A  00A3               	movwf	___ftmul@f1+2
 13174  143B  3197  274C  3194   	fcall	___ftmul
 13175  143E  0020               	movlb	0	; select bank0
 13176  143F  0821               	movf	?___ftmul,w
 13177  1440  00B1               	movwf	___fttol@f1
 13178  1441  0822               	movf	?___ftmul+1,w
 13179  1442  00B2               	movwf	___fttol@f1+1
 13180  1443  0823               	movf	?___ftmul+2,w
 13181  1444  00B3               	movwf	___fttol@f1+2
 13182  1445  3195  256C         	fcall	___fttol
 13183  1447  0020               	movlb	0	; select bank0
 13184  1448  0831               	movf	?___fttol,w
 13185  1449  3E91               	addlw	145
 13186  144A  00C1               	movwf	??_Init_Battery_State_Machine+2
 13187  144B  3005               	movlw	5
 13188  144C  3D32               	addwfc	?___fttol+1,w
 13189  144D  00C2               	movwf	??_Init_Battery_State_Machine+3
 13190  144E  3543               	lslf	Init_Battery_State_Machine@z,w
 13191  144F  3EB0               	addlw	(low (_Vref| 0))& (0+255)
 13192  1450  0086               	movwf	6
 13193  1451  0187               	clrf	7
 13194  1452  0841               	movf	??_Init_Battery_State_Machine+2,w
 13195  1453  3FC0               	movwi [0]fsr1
 13196  1454  0842               	movf	??_Init_Battery_State_Machine+3,w
 13197  1455  3FC1               	movwi [1]fsr1
 13198                           
 13199                           ;battery_charger.c: 27: Imin[z] =15;
 13200  1456  3543               	lslf	Init_Battery_State_Machine@z,w
 13201  1457  3E55               	addlw	(low (_Imin| (0+256)))& (0+255)
 13202  1458  0086               	movwf	6
 13203  1459  3001               	movlw	1	; select bank2/3
 13204  145A  0087               	movwf	7
 13205  145B  300F               	movlw	15
 13206  145C  3FC0               	movwi [0]fsr1
 13207  145D  3000               	movlw	0
 13208  145E  3FC1               	movwi [1]fsr1
 13209                           
 13210                           ;battery_charger.c: 28: IminCount[z] = 600;
 13211  145F  3543               	lslf	Init_Battery_State_Machine@z,w
 13212  1460  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 13213  1461  0086               	movwf	6
 13214  1462  0187               	clrf	7
 13215  1463  3058               	movlw	88
 13216  1464  3FC0               	movwi [0]fsr1
 13217  1465  3002               	movlw	2
 13218  1466  3FC1               	movwi [1]fsr1
 13219  1467  0008               	return
 13220  1468                     __end_of_Init_Battery_State_Machine:	
 13221                           
 13222                           	psect	text29
 13223  1EFE                     __ptext29:	
 13224 ;; *************** function _ADC_Initialize *****************
 13225 ;; Defined at:
 13226 ;;		line 138 in file "adc.c"
 13227 ;; Parameters:    Size  Location     Type
 13228 ;;		None
 13229 ;; Auto vars:     Size  Location     Type
 13230 ;;		None
 13231 ;; Return value:  Size  Location     Type
 13232 ;;                  1    wreg      void 
 13233 ;; Registers used:
 13234 ;;		wreg, status,2
 13235 ;; Tracked objects:
 13236 ;;		On entry : 0/0
 13237 ;;		On exit  : 0/0
 13238 ;;		Unchanged: 0/0
 13239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13244 ;;Total ram usage:        0 bytes
 13245 ;; Hardware stack levels used:    1
 13246 ;; This function calls:
 13247 ;;		Nothing
 13248 ;; This function is called by:
 13249 ;;		_SYSTEM_Initialize
 13250 ;; This function uses a non-reentrant model
 13251 ;;
 13252                           
 13253                           
 13254                           ;psect for function _ADC_Initialize
 13255  1EFE                     _ADC_Initialize:	
 13256                           
 13257                           ;adc.c: 140: ADCON1 = 0x00;
 13258                           
 13259                           ;incstack = 0
 13260                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 13261  1EFE  0021               	movlb	1	; select bank1
 13262  1EFF  0194               	clrf	20	;volatile
 13263                           
 13264                           ;adc.c: 142: ADCON2 = 0x00;
 13265  1F00  0195               	clrf	21	;volatile
 13266                           
 13267                           ;adc.c: 144: ADCON3 = 0x00;
 13268  1F01  0196               	clrf	22	;volatile
 13269                           
 13270                           ;adc.c: 146: ADACT = 0x00;
 13271  1F02  0199               	clrf	25	;volatile
 13272                           
 13273                           ;adc.c: 148: ADSTAT = 0x00;
 13274  1F03  0197               	clrf	23	;volatile
 13275                           
 13276                           ;adc.c: 150: FVRCON = 0b11000011;
 13277  1F04  30C3               	movlw	195
 13278  1F05  0032               	movlb	18	; select bank18
 13279  1F06  008C               	movwf	12	;volatile
 13280                           
 13281                           ;adc.c: 151: ADCLK = 0x3F;
 13282  1F07  303F               	movlw	63
 13283  1F08  0021               	movlb	1	; select bank1
 13284  1F09  0098               	movwf	24	;volatile
 13285                           
 13286                           ;adc.c: 158: ADREF = 0x03;
 13287  1F0A  3003               	movlw	3
 13288  1F0B  009A               	movwf	26	;volatile
 13289                           
 13290                           ;adc.c: 161: ADCAP = 0x00;
 13291  1F0C  019B               	clrf	27	;volatile
 13292                           
 13293                           ;adc.c: 164: ADPRE = 0x07;
 13294  1F0D  3007               	movlw	7
 13295  1F0E  009C               	movwf	28	;volatile
 13296                           
 13297                           ;adc.c: 166: ADACQ = 0x00;
 13298  1F0F  019D               	clrf	29	;volatile
 13299                           
 13300                           ;adc.c: 168: ADPCH = 0x00;
 13301  1F10  019E               	clrf	30	;volatile
 13302                           
 13303                           ;adc.c: 170: ADRPT = 0x00;
 13304  1F11  0022               	movlb	2	; select bank2
 13305  1F12  018D               	clrf	13	;volatile
 13306                           
 13307                           ;adc.c: 172: ADLTHL = 0x00;
 13308  1F13  018E               	clrf	14	;volatile
 13309                           
 13310                           ;adc.c: 174: ADLTHH = 0x00;
 13311  1F14  018F               	clrf	15	;volatile
 13312                           
 13313                           ;adc.c: 176: ADUTHL = 0x00;
 13314  1F15  0190               	clrf	16	;volatile
 13315                           
 13316                           ;adc.c: 178: ADUTHH = 0x00;
 13317  1F16  0191               	clrf	17	;volatile
 13318                           
 13319                           ;adc.c: 180: ADSTPTL = 0x00;
 13320  1F17  0192               	clrf	18	;volatile
 13321                           
 13322                           ;adc.c: 182: ADSTPTH = 0x00;
 13323  1F18  0193               	clrf	19	;volatile
 13324                           
 13325                           ;adc.c: 184: ADCON0 = 0x84;
 13326  1F19  3084               	movlw	132
 13327  1F1A  0021               	movlb	1	; select bank1
 13328  1F1B  0093               	movwf	19	;volatile
 13329  1F1C  0008               	return
 13330  1F1D                     __end_of_ADC_Initialize:	
 13331                           
 13332                           	psect	text30
 13333  0800                     __ptext30:	
 13334 ;; *************** function _PWM7_LoadDutyValue *****************
 13335 ;; Defined at:
 13336 ;;		line 37 in file "pwm.c"
 13337 ;; Parameters:    Size  Location     Type
 13338 ;;  dutyCycle7      2    0[COMMON] unsigned int 
 13339 ;; Auto vars:     Size  Location     Type
 13340 ;;		None
 13341 ;; Return value:  Size  Location     Type
 13342 ;;                  1    wreg      void 
 13343 ;; Registers used:
 13344 ;;		wreg, status,2, status,0
 13345 ;; Tracked objects:
 13346 ;;		On entry : 0/0
 13347 ;;		On exit  : 0/0
 13348 ;;		Unchanged: 0/0
 13349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13350 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13352 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13353 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13354 ;;Total ram usage:        4 bytes
 13355 ;; Hardware stack levels used:    1
 13356 ;; This function calls:
 13357 ;;		Nothing
 13358 ;; This function is called by:
 13359 ;;		_main
 13360 ;; This function uses a non-reentrant model
 13361 ;;
 13362                           
 13363                           
 13364                           ;psect for function _PWM7_LoadDutyValue
 13365  0800                     _PWM7_LoadDutyValue:	
 13366                           
 13367                           ;pwm.c: 39: PWM7DCH = (dutyCycle7 & 0x03FC)>>2;
 13368                           
 13369                           ;incstack = 0
 13370                           ; Regs used in _PWM7_LoadDutyValue: [wreg+status,2+status,0]
 13371  0800  0871               	movf	PWM7_LoadDutyValue@dutyCycle7+1,w
 13372  0801  00F3               	movwf	??_PWM7_LoadDutyValue+1
 13373  0802  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 13374  0803  00F2               	movwf	??_PWM7_LoadDutyValue
 13375  0804  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 13376  0805  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 13377  0806  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 13378  0807  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 13379  0808  0872               	movf	??_PWM7_LoadDutyValue,w
 13380  0809  0027               	movlb	7	; select bank7
 13381  080A  0091               	movwf	17	;volatile
 13382                           
 13383                           ;pwm.c: 41: PWM7DCL = (dutyCycle7 & 0x0003)<<6;
 13384  080B  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 13385  080C  3903               	andlw	3
 13386  080D  00F2               	movwf	??_PWM7_LoadDutyValue
 13387  080E  3005               	movlw	5
 13388  080F                     u4005:	
 13389  080F  35F2               	lslf	??_PWM7_LoadDutyValue,f
 13390  0810  3EFF               	addlw	-1
 13391  0811  1D03               	skipz
 13392  0812  280F               	goto	u4005
 13393  0813  3572               	lslf	??_PWM7_LoadDutyValue,w
 13394  0814  0090               	movwf	16	;volatile
 13395  0815  0008               	return
 13396  0816                     __end_of_PWM7_LoadDutyValue:	
 13397                           
 13398                           	psect	text31
 13399  1EAF                     __ptext31:	
 13400 ;; *************** function _PWM6_LoadDutyValue *****************
 13401 ;; Defined at:
 13402 ;;		line 30 in file "pwm.c"
 13403 ;; Parameters:    Size  Location     Type
 13404 ;;  dutyCycle6      2    0[COMMON] unsigned int 
 13405 ;; Auto vars:     Size  Location     Type
 13406 ;;		None
 13407 ;; Return value:  Size  Location     Type
 13408 ;;                  1    wreg      void 
 13409 ;; Registers used:
 13410 ;;		wreg, status,2, status,0
 13411 ;; Tracked objects:
 13412 ;;		On entry : 0/0
 13413 ;;		On exit  : 0/0
 13414 ;;		Unchanged: 0/0
 13415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13416 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13418 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13419 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13420 ;;Total ram usage:        4 bytes
 13421 ;; Hardware stack levels used:    1
 13422 ;; This function calls:
 13423 ;;		Nothing
 13424 ;; This function is called by:
 13425 ;;		_main
 13426 ;; This function uses a non-reentrant model
 13427 ;;
 13428                           
 13429                           
 13430                           ;psect for function _PWM6_LoadDutyValue
 13431  1EAF                     _PWM6_LoadDutyValue:	
 13432                           
 13433                           ;pwm.c: 32: PWM6DCH = (dutyCycle6 & 0x03FC)>>2;
 13434                           
 13435                           ;incstack = 0
 13436                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 13437  1EAF  0871               	movf	PWM6_LoadDutyValue@dutyCycle6+1,w
 13438  1EB0  00F3               	movwf	??_PWM6_LoadDutyValue+1
 13439  1EB1  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 13440  1EB2  00F2               	movwf	??_PWM6_LoadDutyValue
 13441  1EB3  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13442  1EB4  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13443  1EB5  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13444  1EB6  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13445  1EB7  0872               	movf	??_PWM6_LoadDutyValue,w
 13446  1EB8  0027               	movlb	7	; select bank7
 13447  1EB9  008D               	movwf	13	;volatile
 13448                           
 13449                           ;pwm.c: 34: PWM6DCL = (dutyCycle6 & 0x0003)<<6;
 13450  1EBA  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 13451  1EBB  3903               	andlw	3
 13452  1EBC  00F2               	movwf	??_PWM6_LoadDutyValue
 13453  1EBD  3005               	movlw	5
 13454  1EBE                     u3995:	
 13455  1EBE  35F2               	lslf	??_PWM6_LoadDutyValue,f
 13456  1EBF  3EFF               	addlw	-1
 13457  1EC0  1D03               	skipz
 13458  1EC1  2EBE               	goto	u3995
 13459  1EC2  3572               	lslf	??_PWM6_LoadDutyValue,w
 13460  1EC3  008C               	movwf	12	;volatile
 13461  1EC4  0008               	return
 13462  1EC5                     __end_of_PWM6_LoadDutyValue:	
 13463                           
 13464                           	psect	text32
 13465  1E99                     __ptext32:	
 13466 ;; *************** function _PWM1_LoadDutyValue *****************
 13467 ;; Defined at:
 13468 ;;		line 44 in file "pwm.c"
 13469 ;; Parameters:    Size  Location     Type
 13470 ;;  dutyCycle1      2    0[COMMON] unsigned int 
 13471 ;; Auto vars:     Size  Location     Type
 13472 ;;		None
 13473 ;; Return value:  Size  Location     Type
 13474 ;;                  1    wreg      void 
 13475 ;; Registers used:
 13476 ;;		wreg, status,2, status,0
 13477 ;; Tracked objects:
 13478 ;;		On entry : 0/0
 13479 ;;		On exit  : 0/0
 13480 ;;		Unchanged: 0/0
 13481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13482 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13484 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13485 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13486 ;;Total ram usage:        4 bytes
 13487 ;; Hardware stack levels used:    1
 13488 ;; This function calls:
 13489 ;;		Nothing
 13490 ;; This function is called by:
 13491 ;;		_main
 13492 ;; This function uses a non-reentrant model
 13493 ;;
 13494                           
 13495                           
 13496                           ;psect for function _PWM1_LoadDutyValue
 13497  1E99                     _PWM1_LoadDutyValue:	
 13498                           
 13499                           ;pwm.c: 46: CCPR1H = (dutyCycle1& 0x03FC)>>2;
 13500                           
 13501                           ;incstack = 0
 13502                           ; Regs used in _PWM1_LoadDutyValue: [wreg+status,2+status,0]
 13503  1E99  0871               	movf	PWM1_LoadDutyValue@dutyCycle1+1,w
 13504  1E9A  00F3               	movwf	??_PWM1_LoadDutyValue+1
 13505  1E9B  0870               	movf	PWM1_LoadDutyValue@dutyCycle1,w
 13506  1E9C  00F2               	movwf	??_PWM1_LoadDutyValue
 13507  1E9D  36F3               	lsrf	??_PWM1_LoadDutyValue+1,f
 13508  1E9E  0CF2               	rrf	??_PWM1_LoadDutyValue,f
 13509  1E9F  36F3               	lsrf	??_PWM1_LoadDutyValue+1,f
 13510  1EA0  0CF2               	rrf	??_PWM1_LoadDutyValue,f
 13511  1EA1  0872               	movf	??_PWM1_LoadDutyValue,w
 13512  1EA2  0026               	movlb	6	; select bank6
 13513  1EA3  008D               	movwf	13	;volatile
 13514                           
 13515                           ;pwm.c: 47: CCPR1L = (dutyCycle1 & 0x0003)<<6;
 13516  1EA4  0870               	movf	PWM1_LoadDutyValue@dutyCycle1,w
 13517  1EA5  3903               	andlw	3
 13518  1EA6  00F2               	movwf	??_PWM1_LoadDutyValue
 13519  1EA7  3005               	movlw	5
 13520  1EA8                     u4015:	
 13521  1EA8  35F2               	lslf	??_PWM1_LoadDutyValue,f
 13522  1EA9  3EFF               	addlw	-1
 13523  1EAA  1D03               	skipz
 13524  1EAB  2EA8               	goto	u4015
 13525  1EAC  3572               	lslf	??_PWM1_LoadDutyValue,w
 13526  1EAD  008C               	movwf	12	;volatile
 13527  1EAE  0008               	return
 13528  1EAF                     __end_of_PWM1_LoadDutyValue:	
 13529                           
 13530                           	psect	text33
 13531  0816                     __ptext33:	
 13532 ;; *************** function _LCDWriteInt *****************
 13533 ;; Defined at:
 13534 ;;		line 190 in file "lcd.c"
 13535 ;; Parameters:    Size  Location     Type
 13536 ;;  value           2   31[BANK0 ] int 
 13537 ;;  fieldLength     1   33[BANK0 ] char 
 13538 ;;  numPlaces       1   34[BANK0 ] unsigned char 
 13539 ;;  sign            1   35[BANK0 ] unsigned char 
 13540 ;; Auto vars:     Size  Location     Type
 13541 ;;  str             5   40[BANK0 ] unsigned char [5]
 13542 ;;  i               1   46[BANK0 ] unsigned char 
 13543 ;;  j               1   45[BANK0 ] unsigned char 
 13544 ;; Return value:  Size  Location     Type
 13545 ;;                  1    wreg      void 
 13546 ;; Registers used:
 13547 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13548 ;; Tracked objects:
 13549 ;;		On entry : 0/0
 13550 ;;		On exit  : 0/0
 13551 ;;		Unchanged: 0/0
 13552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13553 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13554 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13555 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13556 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13557 ;;Total ram usage:       16 bytes
 13558 ;; Hardware stack levels used:    1
 13559 ;; Hardware stack levels required when called:    2
 13560 ;; This function calls:
 13561 ;;		_LCDWriteCharacter
 13562 ;;		___awdiv
 13563 ;;		___lwmod
 13564 ;; This function is called by:
 13565 ;;		_main
 13566 ;; This function uses a non-reentrant model
 13567 ;;
 13568                           
 13569                           
 13570                           ;psect for function _LCDWriteInt
 13571  0816                     _LCDWriteInt:	
 13572                           
 13573                           ;lcd.c: 192: uint8_t str[5]={0,0,0,0,0};
 13574                           
 13575                           ;incstack = 0
 13576                           ; Regs used in _LCDWriteInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13577  0816  3050               	movlw	low LCDWriteInt@F14392
 13578  0817  0086               	movwf	6
 13579  0818  3001               	movlw	high LCDWriteInt@F14392
 13580  0819  0087               	movwf	7
 13581  081A  3048               	movlw	low LCDWriteInt@str
 13582  081B  0084               	movwf	4
 13583  081C  3000               	movlw	high LCDWriteInt@str
 13584  081D  0085               	movwf	5
 13585  081E  3005               	movlw	5
 13586  081F  0020               	movlb	0	; select bank0
 13587  0820  00C4               	movwf	??_LCDWriteInt
 13588  0821                     u3900:	
 13589  0821  0016               	moviw fsr1++
 13590  0822  001A               	movwi fsr0++
 13591  0823  0BC4               	decfsz	??_LCDWriteInt,f
 13592  0824  2821               	goto	u3900
 13593                           
 13594                           ;lcd.c: 193: uint8_t i=4,j=0;
 13595  0825  3004               	movlw	4
 13596  0826  00C4               	movwf	??_LCDWriteInt
 13597  0827  0844               	movf	??_LCDWriteInt,w
 13598  0828  00CE               	movwf	LCDWriteInt@i
 13599  0829  01CD               	clrf	LCDWriteInt@j
 13600                           
 13601                           ;lcd.c: 195: if(value<0)
 13602  082A  1FC0               	btfss	LCDWriteInt@value+1,7
 13603  082B  2837               	goto	l3202
 13604                           
 13605                           ;lcd.c: 196: {
 13606                           ;lcd.c: 197: LCDWriteCharacter('-');
 13607  082C  302D               	movlw	45
 13608  082D  3192  22EC  3188   	fcall	_LCDWriteCharacter
 13609                           
 13610                           ;lcd.c: 198: value=value*-1;
 13611  0830  0020               	movlb	0	; select bank0
 13612  0831  09BF               	comf	LCDWriteInt@value,f
 13613  0832  09C0               	comf	LCDWriteInt@value+1,f
 13614  0833  0ABF               	incf	LCDWriteInt@value,f
 13615  0834  1903               	skipnz
 13616  0835  0AC0               	incf	LCDWriteInt@value+1,f
 13617                           
 13618                           ;lcd.c: 199: }
 13619  0836  283E               	goto	l3212
 13620  0837                     l3202:	
 13621                           
 13622                           ;lcd.c: 201: else
 13623                           ;lcd.c: 202: {
 13624                           ;lcd.c: 203: if(sign == 1)
 13625  0837  0343               	decf	LCDWriteInt@sign,w
 13626  0838  1D03               	btfss	3,2
 13627  0839  283E               	goto	l3212
 13628                           
 13629                           ;lcd.c: 204: {
 13630                           ;lcd.c: 205: LCDWriteCharacter('+');
 13631  083A  302B               	movlw	43
 13632  083B  3192  22EC  3188   	fcall	_LCDWriteCharacter
 13633  083E                     l3212:	
 13634                           ;lcd.c: 206: }
 13635                           ;lcd.c: 207: }
 13636                           ;lcd.c: 209: while(value)
 13637                           
 13638  083E  0020               	movlb	0	; select bank0
 13639  083F  083F               	movf	LCDWriteInt@value,w
 13640  0840  0440               	iorwf	LCDWriteInt@value+1,w
 13641  0841  1903               	btfsc	3,2
 13642  0842  286B               	goto	l3214
 13643                           
 13644                           ;lcd.c: 210: {
 13645                           ;lcd.c: 211: str[i]=(uint16_t)value%10;
 13646  0843  300A               	movlw	10
 13647  0844  00F0               	movwf	___lwmod@divisor
 13648  0845  3000               	movlw	0
 13649  0846  00F1               	movwf	___lwmod@divisor+1
 13650  0847  0020               	movlb	0	; select bank0
 13651  0848  0840               	movf	LCDWriteInt@value+1,w
 13652  0849  00F3               	movwf	___lwmod@dividend+1
 13653  084A  083F               	movf	LCDWriteInt@value,w
 13654  084B  00F2               	movwf	___lwmod@dividend
 13655  084C  3191  2134  3188   	fcall	___lwmod
 13656  084F  0870               	movf	?___lwmod,w
 13657  0850  0020               	movlb	0	; select bank0
 13658  0851  00C4               	movwf	??_LCDWriteInt
 13659  0852  084E               	movf	LCDWriteInt@i,w
 13660  0853  3E48               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13661  0854  0086               	movwf	6
 13662  0855  0187               	clrf	7
 13663  0856  0844               	movf	??_LCDWriteInt,w
 13664  0857  0081               	movwf	1
 13665                           
 13666                           ;lcd.c: 212: value=value/10;
 13667  0858  300A               	movlw	10
 13668  0859  00F0               	movwf	___awdiv@divisor
 13669  085A  3000               	movlw	0
 13670  085B  00F1               	movwf	___awdiv@divisor+1
 13671  085C  0840               	movf	LCDWriteInt@value+1,w
 13672  085D  00F3               	movwf	___awdiv@dividend+1
 13673  085E  083F               	movf	LCDWriteInt@value,w
 13674  085F  00F2               	movwf	___awdiv@dividend
 13675  0860  3192  229B  3188   	fcall	___awdiv
 13676  0863  0871               	movf	?___awdiv+1,w
 13677  0864  0020               	movlb	0	; select bank0
 13678  0865  00C0               	movwf	LCDWriteInt@value+1
 13679  0866  0870               	movf	?___awdiv,w
 13680  0867  00BF               	movwf	LCDWriteInt@value
 13681                           
 13682                           ;lcd.c: 213: i--;
 13683  0868  3001               	movlw	1
 13684  0869  02CE               	subwf	LCDWriteInt@i,f
 13685  086A  283E               	goto	l3212
 13686  086B                     l3214:	
 13687                           
 13688                           ;lcd.c: 214: }
 13689                           ;lcd.c: 215: if(fieldLength==-1)
 13690  086B  0A41               	incf	LCDWriteInt@fieldLength,w
 13691  086C  1903               	btfsc	3,2
 13692  086D  2873               	goto	l3220
 13693  086E  287B               	goto	l3222
 13694  086F                     l3218:	
 13695                           ;lcd.c: 216: {
 13696                           ;lcd.c: 217: while(str[j]==0)
 13697                           
 13698                           
 13699                           ;lcd.c: 218: {
 13700                           ;lcd.c: 219: j++;
 13701  086F  3001               	movlw	1
 13702  0870  00C4               	movwf	??_LCDWriteInt
 13703  0871  0844               	movf	??_LCDWriteInt,w
 13704  0872  07CD               	addwf	LCDWriteInt@j,f
 13705  0873                     l3220:	
 13706  0873  084D               	movf	LCDWriteInt@j,w
 13707  0874  3E48               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13708  0875  0086               	movwf	6
 13709  0876  0187               	clrf	7
 13710  0877  0801               	movf	1,w
 13711  0878  1D03               	btfss	3,2
 13712  0879  2881               	goto	l3224
 13713  087A  286F               	goto	l3218
 13714  087B                     l3222:	
 13715                           ;lcd.c: 220: }
 13716                           ;lcd.c: 221: }
 13717                           
 13718                           
 13719                           ;lcd.c: 222: else
 13720                           ;lcd.c: 223: {
 13721                           ;lcd.c: 224: j=(uint8_t)(5-fieldLength);
 13722  087B  0341               	decf	LCDWriteInt@fieldLength,w
 13723  087C  3AFF               	xorlw	255
 13724  087D  3E05               	addlw	5
 13725  087E  00C4               	movwf	??_LCDWriteInt
 13726  087F  0844               	movf	??_LCDWriteInt,w
 13727  0880  00CD               	movwf	LCDWriteInt@j
 13728  0881                     l3224:	
 13729                           
 13730                           ;lcd.c: 225: }
 13731                           ;lcd.c: 227: for(i=j;i<(5-numPlaces);i++)
 13732  0881  084D               	movf	LCDWriteInt@j,w
 13733  0882  00C4               	movwf	??_LCDWriteInt
 13734  0883  0844               	movf	??_LCDWriteInt,w
 13735  0884  00CE               	movwf	LCDWriteInt@i
 13736  0885                     l3230:	
 13737  0885  0842               	movf	LCDWriteInt@numPlaces,w
 13738  0886  00C4               	movwf	??_LCDWriteInt
 13739  0887  01C5               	clrf	??_LCDWriteInt+1
 13740  0888  09C4               	comf	??_LCDWriteInt,f
 13741  0889  09C5               	comf	??_LCDWriteInt+1,f
 13742  088A  0AC4               	incf	??_LCDWriteInt,f
 13743  088B  1903               	skipnz
 13744  088C  0AC5               	incf	??_LCDWriteInt+1,f
 13745  088D  0844               	movf	??_LCDWriteInt,w
 13746  088E  3E05               	addlw	5
 13747  088F  00C6               	movwf	??_LCDWriteInt+2
 13748  0890  3000               	movlw	0
 13749  0891  3D45               	addwfc	??_LCDWriteInt+1,w
 13750  0892  00C7               	movwf	??_LCDWriteInt+3
 13751  0893  0847               	movf	??_LCDWriteInt+3,w
 13752  0894  3A80               	xorlw	128
 13753  0895  3C80               	sublw	128
 13754  0896  1D03               	skipz
 13755  0897  289A               	goto	u3965
 13756  0898  0846               	movf	??_LCDWriteInt+2,w
 13757  0899  024E               	subwf	LCDWriteInt@i,w
 13758  089A                     u3965:	
 13759  089A  1803               	btfsc	3,0
 13760  089B  28AC               	goto	l3232
 13761                           
 13762                           ;lcd.c: 228: {
 13763                           ;lcd.c: 229: LCDWriteCharacter((uint8_t)(48+str[i]));
 13764  089C  0020               	movlb	0	; select bank0
 13765  089D  084E               	movf	LCDWriteInt@i,w
 13766  089E  3E48               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13767  089F  0086               	movwf	6
 13768  08A0  0187               	clrf	7
 13769  08A1  0801               	movf	1,w
 13770  08A2  3E30               	addlw	48
 13771  08A3  3192  22EC  3188   	fcall	_LCDWriteCharacter
 13772  08A6  3001               	movlw	1
 13773  08A7  0020               	movlb	0	; select bank0
 13774  08A8  00C4               	movwf	??_LCDWriteInt
 13775  08A9  0844               	movf	??_LCDWriteInt,w
 13776  08AA  07CE               	addwf	LCDWriteInt@i,f
 13777  08AB  2885               	goto	l3230
 13778  08AC                     l3232:	
 13779                           
 13780                           ;lcd.c: 230: }
 13781                           ;lcd.c: 232: if(numPlaces == 1)
 13782  08AC  0020               	movlb	0	; select bank0
 13783  08AD  0342               	decf	LCDWriteInt@numPlaces,w
 13784  08AE  1D03               	btfss	3,2
 13785  08AF  28BA               	goto	l3236
 13786                           
 13787                           ;lcd.c: 233: {
 13788                           ;lcd.c: 234: LCDWriteCharacter(46);
 13789  08B0  302E               	movlw	46
 13790  08B1  3192  22EC  3188   	fcall	_LCDWriteCharacter
 13791                           
 13792                           ;lcd.c: 235: LCDWriteCharacter ((uint8_t)(48+str[4]));
 13793  08B4  0020               	movlb	0	; select bank0
 13794  08B5  084C               	movf	LCDWriteInt@str+4,w
 13795  08B6  3E30               	addlw	48
 13796  08B7  3192  22EC  3188   	fcall	_LCDWriteCharacter
 13797  08BA                     l3236:	
 13798                           
 13799                           ;lcd.c: 236: }
 13800                           ;lcd.c: 238: if(numPlaces == 2)
 13801  08BA  3002               	movlw	2
 13802  08BB  0020               	movlb	0	; select bank0
 13803  08BC  0642               	xorwf	LCDWriteInt@numPlaces,w
 13804  08BD  1D03               	btfss	3,2
 13805  08BE  0008               	return
 13806                           
 13807                           ;lcd.c: 239: {
 13808                           ;lcd.c: 240: LCDWriteCharacter(46);
 13809  08BF  302E               	movlw	46
 13810  08C0  3192  22EC  3188   	fcall	_LCDWriteCharacter
 13811                           
 13812                           ;lcd.c: 241: LCDWriteCharacter((uint8_t)(48+str[3]));
 13813  08C3  0020               	movlb	0	; select bank0
 13814  08C4  084B               	movf	LCDWriteInt@str+3,w
 13815  08C5  3E30               	addlw	48
 13816  08C6  3192  22EC  3188   	fcall	_LCDWriteCharacter
 13817                           
 13818                           ;lcd.c: 242: LCDWriteCharacter((uint8_t)(48+str[4]));
 13819  08C9  0020               	movlb	0	; select bank0
 13820  08CA  084C               	movf	LCDWriteInt@str+4,w
 13821  08CB  3E30               	addlw	48
 13822  08CC  3192  22EC         	fcall	_LCDWriteCharacter
 13823  08CE  0008               	return
 13824  08CF                     __end_of_LCDWriteInt:	
 13825                           
 13826                           	psect	text34
 13827  1134                     __ptext34:	
 13828 ;; *************** function ___lwmod *****************
 13829 ;; Defined at:
 13830 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
 13831 ;; Parameters:    Size  Location     Type
 13832 ;;  divisor         2    0[COMMON] unsigned int 
 13833 ;;  dividend        2    2[COMMON] unsigned int 
 13834 ;; Auto vars:     Size  Location     Type
 13835 ;;  counter         1    5[COMMON] unsigned char 
 13836 ;; Return value:  Size  Location     Type
 13837 ;;                  2    0[COMMON] unsigned int 
 13838 ;; Registers used:
 13839 ;;		wreg, status,2, status,0
 13840 ;; Tracked objects:
 13841 ;;		On entry : 0/0
 13842 ;;		On exit  : 0/0
 13843 ;;		Unchanged: 0/0
 13844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13845 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13846 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13847 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13848 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13849 ;;Total ram usage:        6 bytes
 13850 ;; Hardware stack levels used:    1
 13851 ;; This function calls:
 13852 ;;		Nothing
 13853 ;; This function is called by:
 13854 ;;		_LCDWriteInt
 13855 ;; This function uses a non-reentrant model
 13856 ;;
 13857                           
 13858                           
 13859                           ;psect for function ___lwmod
 13860  1134                     ___lwmod:	
 13861                           
 13862                           ;incstack = 0
 13863                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 13864  1134  0870               	movf	___lwmod@divisor,w
 13865  1135  0471               	iorwf	___lwmod@divisor+1,w
 13866  1136  1903               	btfsc	3,2
 13867  1137  295B               	goto	l3012
 13868  1138  01F5               	clrf	___lwmod@counter
 13869  1139  0AF5               	incf	___lwmod@counter,f
 13870  113A                     l3002:	
 13871  113A  1BF1               	btfsc	___lwmod@divisor+1,7
 13872  113B  2946               	goto	l3004
 13873  113C  3001               	movlw	1
 13874  113D                     u3365:	
 13875  113D  35F0               	lslf	___lwmod@divisor,f
 13876  113E  0DF1               	rlf	___lwmod@divisor+1,f
 13877  113F  0B89               	decfsz	9,f
 13878  1140  293D               	goto	u3365
 13879  1141  3001               	movlw	1
 13880  1142  00F4               	movwf	??___lwmod
 13881  1143  0874               	movf	??___lwmod,w
 13882  1144  07F5               	addwf	___lwmod@counter,f
 13883  1145  293A               	goto	l3002
 13884  1146                     l3004:	
 13885  1146  0871               	movf	___lwmod@divisor+1,w
 13886  1147  0273               	subwf	___lwmod@dividend+1,w
 13887  1148  1D03               	skipz
 13888  1149  294C               	goto	u3385
 13889  114A  0870               	movf	___lwmod@divisor,w
 13890  114B  0272               	subwf	___lwmod@dividend,w
 13891  114C                     u3385:	
 13892  114C  1C03               	skipc
 13893  114D  2952               	goto	l3008
 13894  114E  0870               	movf	___lwmod@divisor,w
 13895  114F  02F2               	subwf	___lwmod@dividend,f
 13896  1150  0871               	movf	___lwmod@divisor+1,w
 13897  1151  3BF3               	subwfb	___lwmod@dividend+1,f
 13898  1152                     l3008:	
 13899  1152  3001               	movlw	1
 13900  1153                     u3395:	
 13901  1153  36F1               	lsrf	___lwmod@divisor+1,f
 13902  1154  0CF0               	rrf	___lwmod@divisor,f
 13903  1155  0B89               	decfsz	9,f
 13904  1156  2953               	goto	u3395
 13905  1157  3001               	movlw	1
 13906  1158  02F5               	subwf	___lwmod@counter,f
 13907  1159  1D03               	btfss	3,2
 13908  115A  2946               	goto	l3004
 13909  115B                     l3012:	
 13910  115B  0873               	movf	___lwmod@dividend+1,w
 13911  115C  00F1               	movwf	?___lwmod+1
 13912  115D  0872               	movf	___lwmod@dividend,w
 13913  115E  00F0               	movwf	?___lwmod
 13914  115F  0008               	return
 13915  1160                     __end_of___lwmod:	
 13916                           
 13917                           	psect	text35
 13918  129B                     __ptext35:	
 13919 ;; *************** function ___awdiv *****************
 13920 ;; Defined at:
 13921 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
 13922 ;; Parameters:    Size  Location     Type
 13923 ;;  divisor         2    0[COMMON] int 
 13924 ;;  dividend        2    2[COMMON] int 
 13925 ;; Auto vars:     Size  Location     Type
 13926 ;;  quotient        2    7[COMMON] int 
 13927 ;;  sign            1    6[COMMON] unsigned char 
 13928 ;;  counter         1    5[COMMON] unsigned char 
 13929 ;; Return value:  Size  Location     Type
 13930 ;;                  2    0[COMMON] int 
 13931 ;; Registers used:
 13932 ;;		wreg, status,2, status,0
 13933 ;; Tracked objects:
 13934 ;;		On entry : 0/0
 13935 ;;		On exit  : 0/0
 13936 ;;		Unchanged: 0/0
 13937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13938 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13939 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13940 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13941 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13942 ;;Total ram usage:        9 bytes
 13943 ;; Hardware stack levels used:    1
 13944 ;; This function calls:
 13945 ;;		Nothing
 13946 ;; This function is called by:
 13947 ;;		_LCDWriteInt
 13948 ;;		_main
 13949 ;; This function uses a non-reentrant model
 13950 ;;
 13951                           
 13952                           
 13953                           ;psect for function ___awdiv
 13954  129B                     ___awdiv:	
 13955                           
 13956                           ;incstack = 0
 13957                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 13958  129B  01F6               	clrf	___awdiv@sign
 13959  129C  1FF1               	btfss	___awdiv@divisor+1,7
 13960  129D  2AA5               	goto	l2908
 13961  129E  09F0               	comf	___awdiv@divisor,f
 13962  129F  09F1               	comf	___awdiv@divisor+1,f
 13963  12A0  0AF0               	incf	___awdiv@divisor,f
 13964  12A1  1903               	skipnz
 13965  12A2  0AF1               	incf	___awdiv@divisor+1,f
 13966  12A3  01F6               	clrf	___awdiv@sign
 13967  12A4  0AF6               	incf	___awdiv@sign,f
 13968  12A5                     l2908:	
 13969  12A5  1FF3               	btfss	___awdiv@dividend+1,7
 13970  12A6  2AB0               	goto	l2914
 13971  12A7  09F2               	comf	___awdiv@dividend,f
 13972  12A8  09F3               	comf	___awdiv@dividend+1,f
 13973  12A9  0AF2               	incf	___awdiv@dividend,f
 13974  12AA  1903               	skipnz
 13975  12AB  0AF3               	incf	___awdiv@dividend+1,f
 13976  12AC  3001               	movlw	1
 13977  12AD  00F4               	movwf	??___awdiv
 13978  12AE  0874               	movf	??___awdiv,w
 13979  12AF  06F6               	xorwf	___awdiv@sign,f
 13980  12B0                     l2914:	
 13981  12B0  01F7               	clrf	___awdiv@quotient
 13982  12B1  01F8               	clrf	___awdiv@quotient+1
 13983  12B2  0870               	movf	___awdiv@divisor,w
 13984  12B3  0471               	iorwf	___awdiv@divisor+1,w
 13985  12B4  1903               	btfsc	3,2
 13986  12B5  2ADF               	goto	l2936
 13987  12B6  01F5               	clrf	___awdiv@counter
 13988  12B7  0AF5               	incf	___awdiv@counter,f
 13989  12B8                     l2924:	
 13990  12B8  1BF1               	btfsc	___awdiv@divisor+1,7
 13991  12B9  2AC4               	goto	l2926
 13992  12BA  3001               	movlw	1
 13993  12BB                     u3195:	
 13994  12BB  35F0               	lslf	___awdiv@divisor,f
 13995  12BC  0DF1               	rlf	___awdiv@divisor+1,f
 13996  12BD  0B89               	decfsz	9,f
 13997  12BE  2ABB               	goto	u3195
 13998  12BF  3001               	movlw	1
 13999  12C0  00F4               	movwf	??___awdiv
 14000  12C1  0874               	movf	??___awdiv,w
 14001  12C2  07F5               	addwf	___awdiv@counter,f
 14002  12C3  2AB8               	goto	l2924
 14003  12C4                     l2926:	
 14004  12C4  3001               	movlw	1
 14005  12C5                     u3215:	
 14006  12C5  35F7               	lslf	___awdiv@quotient,f
 14007  12C6  0DF8               	rlf	___awdiv@quotient+1,f
 14008  12C7  0B89               	decfsz	9,f
 14009  12C8  2AC5               	goto	u3215
 14010  12C9  0871               	movf	___awdiv@divisor+1,w
 14011  12CA  0273               	subwf	___awdiv@dividend+1,w
 14012  12CB  1D03               	skipz
 14013  12CC  2ACF               	goto	u3225
 14014  12CD  0870               	movf	___awdiv@divisor,w
 14015  12CE  0272               	subwf	___awdiv@dividend,w
 14016  12CF                     u3225:	
 14017  12CF  1C03               	skipc
 14018  12D0  2AD6               	goto	l2932
 14019  12D1  0870               	movf	___awdiv@divisor,w
 14020  12D2  02F2               	subwf	___awdiv@dividend,f
 14021  12D3  0871               	movf	___awdiv@divisor+1,w
 14022  12D4  3BF3               	subwfb	___awdiv@dividend+1,f
 14023  12D5  1477               	bsf	___awdiv@quotient,0
 14024  12D6                     l2932:	
 14025  12D6  3001               	movlw	1
 14026  12D7                     u3235:	
 14027  12D7  36F1               	lsrf	___awdiv@divisor+1,f
 14028  12D8  0CF0               	rrf	___awdiv@divisor,f
 14029  12D9  0B89               	decfsz	9,f
 14030  12DA  2AD7               	goto	u3235
 14031  12DB  3001               	movlw	1
 14032  12DC  02F5               	subwf	___awdiv@counter,f
 14033  12DD  1D03               	btfss	3,2
 14034  12DE  2AC4               	goto	l2926
 14035  12DF                     l2936:	
 14036  12DF  0876               	movf	___awdiv@sign,w
 14037  12E0  1903               	btfsc	3,2
 14038  12E1  2AE7               	goto	l2940
 14039  12E2  09F7               	comf	___awdiv@quotient,f
 14040  12E3  09F8               	comf	___awdiv@quotient+1,f
 14041  12E4  0AF7               	incf	___awdiv@quotient,f
 14042  12E5  1903               	skipnz
 14043  12E6  0AF8               	incf	___awdiv@quotient+1,f
 14044  12E7                     l2940:	
 14045  12E7  0878               	movf	___awdiv@quotient+1,w
 14046  12E8  00F1               	movwf	?___awdiv+1
 14047  12E9  0877               	movf	___awdiv@quotient,w
 14048  12EA  00F0               	movwf	?___awdiv
 14049  12EB  0008               	return
 14050  12EC                     __end_of___awdiv:	
 14051                           
 14052                           	psect	text36
 14053  12EC                     __ptext36:	
 14054 ;; *************** function _LCDWriteCharacter *****************
 14055 ;; Defined at:
 14056 ;;		line 140 in file "lcd.c"
 14057 ;; Parameters:    Size  Location     Type
 14058 ;;  character       1    wreg     const unsigned char 
 14059 ;; Auto vars:     Size  Location     Type
 14060 ;;  character       1    9[COMMON] const unsigned char 
 14061 ;;  base            2   10[COMMON] unsigned int 
 14062 ;; Return value:  Size  Location     Type
 14063 ;;                  1    wreg      void 
 14064 ;; Registers used:
 14065 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14066 ;; Tracked objects:
 14067 ;;		On entry : 0/0
 14068 ;;		On exit  : 0/0
 14069 ;;		Unchanged: 0/0
 14070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14072 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14073 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14074 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14075 ;;Total ram usage:        6 bytes
 14076 ;; Hardware stack levels used:    1
 14077 ;; Hardware stack levels required when called:    1
 14078 ;; This function calls:
 14079 ;;		_LCDWrite
 14080 ;;		___wmul
 14081 ;; This function is called by:
 14082 ;;		_LCDWriteInt
 14083 ;;		_main
 14084 ;;		_LCDWriteString
 14085 ;; This function uses a non-reentrant model
 14086 ;;
 14087                           
 14088                           
 14089                           ;psect for function _LCDWriteCharacter
 14090  12EC                     _LCDWriteCharacter:	
 14091                           
 14092                           ;incstack = 0
 14093                           ; Regs used in _LCDWriteCharacter: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14094                           ;LCDWriteCharacter@character stored from wreg
 14095  12EC  00F9               	movwf	LCDWriteCharacter@character
 14096                           
 14097                           ;lcd.c: 142: uint16_t base;
 14098                           ;lcd.c: 143: base = character - 0x20;
 14099  12ED  0879               	movf	LCDWriteCharacter@character,w
 14100  12EE  3EE0               	addlw	224
 14101  12EF  00FA               	movwf	LCDWriteCharacter@base
 14102  12F0  30FF               	movlw	255
 14103  12F1  1803               	skipnc
 14104  12F2  3000               	movlw	0
 14105  12F3  00FB               	movwf	LCDWriteCharacter@base+1
 14106                           
 14107                           ;lcd.c: 144: base *= 3;
 14108  12F4  3003               	movlw	3
 14109  12F5  00F0               	movwf	___wmul@multiplier
 14110  12F6  3000               	movlw	0
 14111  12F7  00F1               	movwf	___wmul@multiplier+1
 14112  12F8  087B               	movf	LCDWriteCharacter@base+1,w
 14113  12F9  00F3               	movwf	___wmul@multiplicand+1
 14114  12FA  087A               	movf	LCDWriteCharacter@base,w
 14115  12FB  00F2               	movwf	___wmul@multiplicand
 14116  12FC  319E  26C5  3192   	fcall	___wmul
 14117  12FF  0871               	movf	?___wmul+1,w
 14118  1300  00FB               	movwf	LCDWriteCharacter@base+1
 14119  1301  0870               	movf	?___wmul,w
 14120  1302  00FA               	movwf	LCDWriteCharacter@base
 14121                           
 14122                           ;lcd.c: 145: LCDWrite(1,fonts[base]);
 14123  1303  087B               	movf	LCDWriteCharacter@base+1,w
 14124  1304  0085               	movwf	5
 14125  1305  087A               	movf	LCDWriteCharacter@base,w
 14126  1306  0084               	movwf	4
 14127  1307  3000               	movlw	low (_fonts| (0+32768))
 14128  1308  0784               	addwf	4,f
 14129  1309  3090               	movlw	high (_fonts| (0+32768))
 14130  130A  3D85               	addwfc	5,f
 14131  130B  0800               	movf	0,w	;code access
 14132  130C  00F6               	movwf	??_LCDWriteCharacter
 14133  130D  0876               	movf	??_LCDWriteCharacter,w
 14134  130E  00F0               	movwf	LCDWrite@data
 14135  130F  3001               	movlw	1
 14136  1310  319F  277E  3192   	fcall	_LCDWrite
 14137                           
 14138                           ;lcd.c: 146: LCDWrite(1,fonts[base + 1]);
 14139  1313  087A               	movf	LCDWriteCharacter@base,w
 14140  1314  3E01               	addlw	1
 14141  1315  00F6               	movwf	??_LCDWriteCharacter
 14142  1316  3000               	movlw	0
 14143  1317  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 14144  1318  00F7               	movwf	??_LCDWriteCharacter+1
 14145  1319  3000               	movlw	low (_fonts| (0+32768))
 14146  131A  0776               	addwf	??_LCDWriteCharacter,w
 14147  131B  0084               	movwf	4
 14148  131C  3090               	movlw	high (_fonts| (0+32768))
 14149  131D  3D77               	addwfc	??_LCDWriteCharacter+1,w
 14150  131E  0085               	movwf	5
 14151  131F  0800               	movf	0,w	;code access
 14152  1320  00F8               	movwf	??_LCDWriteCharacter+2
 14153  1321  0878               	movf	??_LCDWriteCharacter+2,w
 14154  1322  00F0               	movwf	LCDWrite@data
 14155  1323  3001               	movlw	1
 14156  1324  319F  277E  3192   	fcall	_LCDWrite
 14157                           
 14158                           ;lcd.c: 147: LCDWrite(1,fonts[base + 2]);
 14159  1327  087A               	movf	LCDWriteCharacter@base,w
 14160  1328  3E02               	addlw	2
 14161  1329  00F6               	movwf	??_LCDWriteCharacter
 14162  132A  3000               	movlw	0
 14163  132B  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 14164  132C  00F7               	movwf	??_LCDWriteCharacter+1
 14165  132D  3000               	movlw	low (_fonts| (0+32768))
 14166  132E  0776               	addwf	??_LCDWriteCharacter,w
 14167  132F  0084               	movwf	4
 14168  1330  3090               	movlw	high (_fonts| (0+32768))
 14169  1331  3D77               	addwfc	??_LCDWriteCharacter+1,w
 14170  1332  0085               	movwf	5
 14171  1333  0800               	movf	0,w	;code access
 14172  1334  00F8               	movwf	??_LCDWriteCharacter+2
 14173  1335  0878               	movf	??_LCDWriteCharacter+2,w
 14174  1336  00F0               	movwf	LCDWrite@data
 14175  1337  3001               	movlw	1
 14176  1338  319F  277E  3192   	fcall	_LCDWrite
 14177                           
 14178                           ;lcd.c: 148: LCDWrite(1, 0x00);
 14179  133B  01F0               	clrf	LCDWrite@data
 14180  133C  3001               	movlw	1
 14181  133D  319F  277E         	fcall	_LCDWrite
 14182  133F  0008               	return
 14183  1340                     __end_of_LCDWriteCharacter:	
 14184                           
 14185                           	psect	text37
 14186  1EC5                     __ptext37:	
 14187 ;; *************** function ___wmul *****************
 14188 ;; Defined at:
 14189 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
 14190 ;; Parameters:    Size  Location     Type
 14191 ;;  multiplier      2    0[COMMON] unsigned int 
 14192 ;;  multiplicand    2    2[COMMON] unsigned int 
 14193 ;; Auto vars:     Size  Location     Type
 14194 ;;  product         2    4[COMMON] unsigned int 
 14195 ;; Return value:  Size  Location     Type
 14196 ;;                  2    0[COMMON] unsigned int 
 14197 ;; Registers used:
 14198 ;;		wreg, status,2, status,0
 14199 ;; Tracked objects:
 14200 ;;		On entry : 0/0
 14201 ;;		On exit  : 0/0
 14202 ;;		Unchanged: 0/0
 14203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14204 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14205 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14207 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14208 ;;Total ram usage:        6 bytes
 14209 ;; Hardware stack levels used:    1
 14210 ;; This function calls:
 14211 ;;		Nothing
 14212 ;; This function is called by:
 14213 ;;		_readIAnalog
 14214 ;;		_LCDWriteCharacter
 14215 ;;		_eval_poly
 14216 ;; This function uses a non-reentrant model
 14217 ;;
 14218                           
 14219                           
 14220                           ;psect for function ___wmul
 14221  1EC5                     ___wmul:	
 14222                           
 14223                           ;incstack = 0
 14224                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 14225  1EC5  01F4               	clrf	___wmul@product
 14226  1EC6  01F5               	clrf	___wmul@product+1
 14227  1EC7                     l2410:	
 14228  1EC7  1C70               	btfss	___wmul@multiplier,0
 14229  1EC8  2ECD               	goto	l626
 14230  1EC9  0872               	movf	___wmul@multiplicand,w
 14231  1ECA  07F4               	addwf	___wmul@product,f
 14232  1ECB  0873               	movf	___wmul@multiplicand+1,w
 14233  1ECC  3DF5               	addwfc	___wmul@product+1,f
 14234  1ECD                     l626:	
 14235  1ECD  3001               	movlw	1
 14236  1ECE                     u2425:	
 14237  1ECE  35F2               	lslf	___wmul@multiplicand,f
 14238  1ECF  0DF3               	rlf	___wmul@multiplicand+1,f
 14239  1ED0  0B89               	decfsz	9,f
 14240  1ED1  2ECE               	goto	u2425
 14241  1ED2  3001               	movlw	1
 14242  1ED3                     u2435:	
 14243  1ED3  36F1               	lsrf	___wmul@multiplier+1,f
 14244  1ED4  0CF0               	rrf	___wmul@multiplier,f
 14245  1ED5  0B89               	decfsz	9,f
 14246  1ED6  2ED3               	goto	u2435
 14247  1ED7  0870               	movf	___wmul@multiplier,w
 14248  1ED8  0471               	iorwf	___wmul@multiplier+1,w
 14249  1ED9  1D03               	btfss	3,2
 14250  1EDA  2EC7               	goto	l2410
 14251  1EDB  0875               	movf	___wmul@product+1,w
 14252  1EDC  00F1               	movwf	?___wmul+1
 14253  1EDD  0874               	movf	___wmul@product,w
 14254  1EDE  00F0               	movwf	?___wmul
 14255  1EDF  0008               	return
 14256  1EE0                     __end_of___wmul:	
 14257                           
 14258                           	psect	text38
 14259  1F7E                     __ptext38:	
 14260 ;; *************** function _LCDWrite *****************
 14261 ;; Defined at:
 14262 ;;		line 281 in file "lcd.c"
 14263 ;; Parameters:    Size  Location     Type
 14264 ;;  data_or_comm    1    wreg     unsigned char 
 14265 ;;  data            1    0[COMMON] unsigned char 
 14266 ;; Auto vars:     Size  Location     Type
 14267 ;;  data_or_comm    1    2[COMMON] unsigned char 
 14268 ;;  i               1    4[COMMON] unsigned char 
 14269 ;;  d               1    3[COMMON] unsigned char 
 14270 ;; Return value:  Size  Location     Type
 14271 ;;                  1    wreg      void 
 14272 ;; Registers used:
 14273 ;;		wreg, status,2, status,0
 14274 ;; Tracked objects:
 14275 ;;		On entry : 0/0
 14276 ;;		On exit  : 0/0
 14277 ;;		Unchanged: 0/0
 14278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14279 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14280 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14281 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14282 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14283 ;;Total ram usage:        5 bytes
 14284 ;; Hardware stack levels used:    1
 14285 ;; This function calls:
 14286 ;;		Nothing
 14287 ;; This function is called by:
 14288 ;;		_gotoXY
 14289 ;;		_LCDWriteCharacter
 14290 ;;		_LCDClear
 14291 ;;		_LCDInit
 14292 ;; This function uses a non-reentrant model
 14293 ;;
 14294                           
 14295                           
 14296                           ;psect for function _LCDWrite
 14297  1F7E                     _LCDWrite:	
 14298                           
 14299                           ;incstack = 0
 14300                           ; Regs used in _LCDWrite: [wreg+status,2+status,0]
 14301                           ;LCDWrite@data_or_command stored from wreg
 14302  1F7E  00F2               	movwf	LCDWrite@data_or_command
 14303                           
 14304                           ;lcd.c: 283: uint8_t i,d;
 14305                           ;lcd.c: 285: d=data;
 14306  1F7F  0870               	movf	LCDWrite@data,w
 14307  1F80  00F1               	movwf	??_LCDWrite
 14308  1F81  0871               	movf	??_LCDWrite,w
 14309  1F82  00F3               	movwf	LCDWrite@d
 14310                           
 14311                           ;lcd.c: 287: if(data_or_command == 0)
 14312  1F83  0872               	movf	LCDWrite@data_or_command,w
 14313  1F84  1D03               	btfss	3,2
 14314  1F85  2F89               	goto	l237
 14315                           
 14316                           ;lcd.c: 288: {
 14317                           ;lcd.c: 289: LATAbits.LATA2 = 0;
 14318  1F86  0020               	movlb	0	; select bank0
 14319  1F87  1116               	bcf	22,2	;volatile
 14320                           
 14321                           ;lcd.c: 290: }
 14322  1F88  2F8B               	goto	l238
 14323  1F89                     l237:	
 14324                           
 14325                           ;lcd.c: 291: else
 14326                           ;lcd.c: 292: {
 14327                           ;lcd.c: 293: LATAbits.LATA2 = 1;
 14328  1F89  0020               	movlb	0	; select bank0
 14329  1F8A  1516               	bsf	22,2	;volatile
 14330  1F8B                     l238:	
 14331                           
 14332                           ;lcd.c: 294: }
 14333                           ;lcd.c: 296: LATAbits.LATA1 = 0;
 14334  1F8B  1096               	bcf	22,1	;volatile
 14335                           
 14336                           ;lcd.c: 298: for(i=0;i<8;i++)
 14337  1F8C  01F4               	clrf	LCDWrite@i
 14338  1F8D  3008               	movlw	8
 14339  1F8E  0274               	subwf	LCDWrite@i,w
 14340  1F8F  1803               	btfsc	3,0
 14341  1F90  2FA1               	goto	l240
 14342  1F91                     l239:	
 14343                           
 14344                           ;lcd.c: 299: {
 14345                           ;lcd.c: 300: LATAbits.LATA3 = 0;
 14346  1F91  1196               	bcf	22,3	;volatile
 14347                           
 14348                           ;lcd.c: 302: if(d&0x80)
 14349  1F92  1FF3               	btfss	LCDWrite@d,7
 14350  1F93  2F95               	goto	l241
 14351                           
 14352                           ;lcd.c: 303: {
 14353                           ;lcd.c: 304: LATAbits.LATA3 = 1;
 14354  1F94  1596               	bsf	22,3	;volatile
 14355  1F95                     l241:	
 14356                           
 14357                           ;lcd.c: 305: }
 14358                           ;lcd.c: 307: LATAbits.LATA4 = 1;
 14359  1F95  1616               	bsf	22,4	;volatile
 14360                           
 14361                           ;lcd.c: 309: d<<=1;
 14362  1F96  1003               	clrc
 14363  1F97  0DF3               	rlf	LCDWrite@d,f
 14364                           
 14365                           ;lcd.c: 311: LATAbits.LATA4=0;
 14366  1F98  1216               	bcf	22,4	;volatile
 14367  1F99  3001               	movlw	1
 14368  1F9A  00F1               	movwf	??_LCDWrite
 14369  1F9B  0871               	movf	??_LCDWrite,w
 14370  1F9C  07F4               	addwf	LCDWrite@i,f
 14371  1F9D  3008               	movlw	8
 14372  1F9E  0274               	subwf	LCDWrite@i,w
 14373  1F9F  1C03               	skipc
 14374  1FA0  2F91               	goto	l239
 14375  1FA1                     l240:	
 14376                           
 14377                           ;lcd.c: 312: }
 14378                           ;lcd.c: 314: LATAbits.LATA1 = 1;
 14379  1FA1  1496               	bsf	22,1	;volatile
 14380  1FA2  0008               	return
 14381  1FA3                     __end_of_LCDWrite:	
 14382                           
 14383                           	psect	text39
 14384  0E4B                     __ptext39:	
 14385 ;; *************** function _Battery_State_Machine *****************
 14386 ;; Defined at:
 14387 ;;		line 31 in file "battery_charger.c"
 14388 ;; Parameters:    Size  Location     Type
 14389 ;;  z               1    wreg     unsigned char 
 14390 ;; Auto vars:     Size  Location     Type
 14391 ;;  z               1   36[BANK0 ] unsigned char 
 14392 ;; Return value:  Size  Location     Type
 14393 ;;                  1    wreg      void 
 14394 ;; Registers used:
 14395 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14396 ;; Tracked objects:
 14397 ;;		On entry : 0/0
 14398 ;;		On exit  : 0/0
 14399 ;;		Unchanged: 0/0
 14400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14402 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14403 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14404 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14405 ;;Total ram usage:        6 bytes
 14406 ;; Hardware stack levels used:    1
 14407 ;; Hardware stack levels required when called:    2
 14408 ;; This function calls:
 14409 ;;		___awtoft
 14410 ;;		___ftmul
 14411 ;;		___fttol
 14412 ;; This function is called by:
 14413 ;;		_main
 14414 ;; This function uses a non-reentrant model
 14415 ;;
 14416                           
 14417                           
 14418                           ;psect for function _Battery_State_Machine
 14419  0E4B                     _Battery_State_Machine:	
 14420                           
 14421                           ;incstack = 0
 14422                           ; Regs used in _Battery_State_Machine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14423                           ;Battery_State_Machine@z stored from wreg
 14424  0E4B  0020               	movlb	0	; select bank0
 14425  0E4C  00C4               	movwf	Battery_State_Machine@z
 14426                           
 14427                           ;battery_charger.c: 33: if(batteryState[z]==PRECHARGE)
 14428  0E4D  0844               	movf	Battery_State_Machine@z,w
 14429  0E4E  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14430  0E4F  0086               	movwf	6
 14431  0E50  0187               	clrf	7
 14432  0E51  3003               	movlw	3
 14433  0E52  0601               	xorwf	1,w
 14434  0E53  1D03               	btfss	3,2
 14435  0E54  2EA2               	goto	l3068
 14436                           
 14437                           ;battery_charger.c: 34: {
 14438                           ;battery_charger.c: 35: if(voltage[z]<1075)
 14439  0E55  3544               	lslf	Battery_State_Machine@z,w
 14440  0E56  3EA0               	addlw	(low (_voltage| 0))& (0+255)
 14441  0E57  0086               	movwf	6
 14442  0E58  0187               	clrf	7
 14443  0E59  3F40               	moviw [0]fsr1
 14444  0E5A  00BF               	movwf	??_Battery_State_Machine
 14445  0E5B  3F41               	moviw [1]fsr1
 14446  0E5C  00C0               	movwf	??_Battery_State_Machine+1
 14447  0E5D  0840               	movf	??_Battery_State_Machine+1,w
 14448  0E5E  3A80               	xorlw	128
 14449  0E5F  00C1               	movwf	??_Battery_State_Machine+2
 14450  0E60  3084               	movlw	132
 14451  0E61  0241               	subwf	??_Battery_State_Machine+2,w
 14452  0E62  1D03               	skipz
 14453  0E63  2E66               	goto	u3595
 14454  0E64  3033               	movlw	51
 14455  0E65  023F               	subwf	??_Battery_State_Machine,w
 14456  0E66                     u3595:	
 14457  0E66  1803               	skipnc
 14458  0E67  2E90               	goto	l3066
 14459                           
 14460                           ;battery_charger.c: 36: {
 14461                           ;battery_charger.c: 37: if(stateCounter[z]>0)
 14462  0E68  0020               	movlb	0	; select bank0
 14463  0E69  3544               	lslf	Battery_State_Machine@z,w
 14464  0E6A  3EB4               	addlw	(low (_stateCounter| 0))& (0+255)
 14465  0E6B  0086               	movwf	6
 14466  0E6C  0187               	clrf	7
 14467  0E6D  3F40               	moviw [0]fsr1
 14468  0E6E  00BF               	movwf	??_Battery_State_Machine
 14469  0E6F  3F41               	moviw [1]fsr1
 14470  0E70  00C0               	movwf	??_Battery_State_Machine+1
 14471  0E71  0840               	movf	??_Battery_State_Machine+1,w
 14472  0E72  3A80               	xorlw	128
 14473  0E73  00C1               	movwf	??_Battery_State_Machine+2
 14474  0E74  3080               	movlw	128
 14475  0E75  0241               	subwf	??_Battery_State_Machine+2,w
 14476  0E76  1D03               	skipz
 14477  0E77  2E7A               	goto	u3605
 14478  0E78  3001               	movlw	1
 14479  0E79  023F               	subwf	??_Battery_State_Machine,w
 14480  0E7A                     u3605:	
 14481  0E7A  1C03               	skipc
 14482  0E7B  2E88               	goto	l3064
 14483                           
 14484                           ;battery_charger.c: 38: {
 14485                           ;battery_charger.c: 39: stateCounter[z]-=1;
 14486  0E7C  0020               	movlb	0	; select bank0
 14487  0E7D  3544               	lslf	Battery_State_Machine@z,w
 14488  0E7E  3EB4               	addlw	(low (_stateCounter| 0))& (0+255)
 14489  0E7F  0086               	movwf	6
 14490  0E80  0187               	clrf	7
 14491  0E81  30FF               	movlw	255
 14492  0E82  0781               	addwf	1,f
 14493  0E83  3141               	addfsr 1,1
 14494  0E84  30FF               	movlw	255
 14495  0E85  3D81               	addwfc	1,f
 14496  0E86  317F               	addfsr 1,-1
 14497                           
 14498                           ;battery_charger.c: 40: }
 14499  0E87  0008               	return
 14500  0E88                     l3064:	
 14501                           
 14502                           ;battery_charger.c: 41: else
 14503                           ;battery_charger.c: 42: {
 14504                           ;battery_charger.c: 43: batteryState[z]=FAULT;
 14505  0E88  0020               	movlb	0	; select bank0
 14506  0E89  0844               	movf	Battery_State_Machine@z,w
 14507  0E8A  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14508  0E8B  0086               	movwf	6
 14509  0E8C  0187               	clrf	7
 14510  0E8D  0181               	clrf	1
 14511  0E8E  0A81               	incf	1,f
 14512                           
 14513                           ;battery_charger.c: 44: }
 14514                           ;battery_charger.c: 45: }
 14515  0E8F  0008               	return
 14516  0E90                     l3066:	
 14517                           
 14518                           ;battery_charger.c: 46: else
 14519                           ;battery_charger.c: 47: {
 14520                           ;battery_charger.c: 48: batteryState[z]=CHARGE;
 14521  0E90  3004               	movlw	4
 14522  0E91  0020               	movlb	0	; select bank0
 14523  0E92  00BF               	movwf	??_Battery_State_Machine
 14524  0E93  0844               	movf	Battery_State_Machine@z,w
 14525  0E94  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14526  0E95  0086               	movwf	6
 14527  0E96  0187               	clrf	7
 14528  0E97  083F               	movf	??_Battery_State_Machine,w
 14529  0E98  0081               	movwf	1
 14530                           
 14531                           ;battery_charger.c: 49: Iref[z]=30;
 14532  0E99  3544               	lslf	Battery_State_Machine@z,w
 14533  0E9A  3EB8               	addlw	(low (_Iref| 0))& (0+255)
 14534  0E9B  0086               	movwf	6
 14535  0E9C  0187               	clrf	7
 14536  0E9D  301E               	movlw	30
 14537  0E9E  3FC0               	movwi [0]fsr1
 14538  0E9F  3000               	movlw	0
 14539  0EA0  3FC1               	movwi [1]fsr1
 14540                           
 14541                           ;battery_charger.c: 50: }
 14542                           ;battery_charger.c: 51: }
 14543  0EA1  0008               	return
 14544  0EA2                     l3068:	
 14545                           
 14546                           ;battery_charger.c: 52: else if(batteryState[z]==CHARGE)
 14547  0EA2  0844               	movf	Battery_State_Machine@z,w
 14548  0EA3  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14549  0EA4  0086               	movwf	6
 14550  0EA5  0187               	clrf	7
 14551  0EA6  3004               	movlw	4
 14552  0EA7  0601               	xorwf	1,w
 14553  0EA8  1D03               	btfss	3,2
 14554  0EA9  2F65               	goto	l3088
 14555                           
 14556                           ;battery_charger.c: 53: {
 14557                           ;battery_charger.c: 54: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 14558  0EAA  096D               	comf	_batteryTemp,w
 14559  0EAB  00BF               	movwf	??_Battery_State_Machine
 14560  0EAC  096E               	comf	_batteryTemp+1,w
 14561  0EAD  00C0               	movwf	??_Battery_State_Machine+1
 14562  0EAE  0ABF               	incf	??_Battery_State_Machine,f
 14563  0EAF  1903               	skipnz
 14564  0EB0  0AC0               	incf	??_Battery_State_Machine+1,f
 14565  0EB1  083F               	movf	??_Battery_State_Machine,w
 14566  0EB2  3EFA               	addlw	250
 14567  0EB3  00F9               	movwf	___awtoft@c
 14568  0EB4  3000               	movlw	0
 14569  0EB5  3D40               	addwfc	??_Battery_State_Machine+1,w
 14570  0EB6  00FA               	movwf	___awtoft@c+1
 14571  0EB7  319F  273C  318E   	fcall	___awtoft
 14572  0EBA  0879               	movf	?___awtoft,w
 14573  0EBB  0020               	movlb	0	; select bank0
 14574  0EBC  00A4               	movwf	___ftmul@f2
 14575  0EBD  087A               	movf	?___awtoft+1,w
 14576  0EBE  00A5               	movwf	___ftmul@f2+1
 14577  0EBF  087B               	movf	?___awtoft+2,w
 14578  0EC0  00A6               	movwf	___ftmul@f2+2
 14579  0EC1  30C3               	movlw	195
 14580  0EC2  00A1               	movwf	___ftmul@f1
 14581  0EC3  3075               	movlw	117
 14582  0EC4  00A2               	movwf	___ftmul@f1+1
 14583  0EC5  303E               	movlw	62
 14584  0EC6  00A3               	movwf	___ftmul@f1+2
 14585  0EC7  3197  274C  318E   	fcall	___ftmul
 14586  0ECA  0020               	movlb	0	; select bank0
 14587  0ECB  0821               	movf	?___ftmul,w
 14588  0ECC  00B1               	movwf	___fttol@f1
 14589  0ECD  0822               	movf	?___ftmul+1,w
 14590  0ECE  00B2               	movwf	___fttol@f1+1
 14591  0ECF  0823               	movf	?___ftmul+2,w
 14592  0ED0  00B3               	movwf	___fttol@f1+2
 14593  0ED1  3195  256C  318E   	fcall	___fttol
 14594  0ED4  0020               	movlb	0	; select bank0
 14595  0ED5  0831               	movf	?___fttol,w
 14596  0ED6  3E91               	addlw	145
 14597  0ED7  00C1               	movwf	??_Battery_State_Machine+2
 14598  0ED8  3005               	movlw	5
 14599  0ED9  3D32               	addwfc	?___fttol+1,w
 14600  0EDA  00C2               	movwf	??_Battery_State_Machine+3
 14601  0EDB  3544               	lslf	Battery_State_Machine@z,w
 14602  0EDC  3EB0               	addlw	(low (_Vref| 0))& (0+255)
 14603  0EDD  0086               	movwf	6
 14604  0EDE  0187               	clrf	7
 14605  0EDF  0841               	movf	??_Battery_State_Machine+2,w
 14606  0EE0  3FC0               	movwi [0]fsr1
 14607  0EE1  0842               	movf	??_Battery_State_Machine+3,w
 14608  0EE2  3FC1               	movwi [1]fsr1
 14609                           
 14610                           ;battery_charger.c: 55: if(!(Imode[z]))
 14611  0EE3  0844               	movf	Battery_State_Machine@z,w
 14612  0EE4  3E62               	addlw	(low (_Imode| 0))& (0+255)
 14613  0EE5  0086               	movwf	6
 14614  0EE6  0187               	clrf	7
 14615  0EE7  0801               	movf	1,w
 14616  0EE8  1D03               	btfss	3,2
 14617  0EE9  2F4C               	goto	l3084
 14618                           
 14619                           ;battery_charger.c: 56: {
 14620                           ;battery_charger.c: 57: if(current[z] < Imin[z])
 14621  0EEA  3544               	lslf	Battery_State_Machine@z,w
 14622  0EEB  3E55               	addlw	(low (_Imin| (0+256)))& (0+255)
 14623  0EEC  0086               	movwf	6
 14624  0EED  3001               	movlw	1	; select bank2/3
 14625  0EEE  0087               	movwf	7
 14626  0EEF  3F40               	moviw [0]fsr1
 14627  0EF0  00BF               	movwf	??_Battery_State_Machine
 14628  0EF1  3F41               	moviw [1]fsr1
 14629  0EF2  00C0               	movwf	??_Battery_State_Machine+1
 14630  0EF3  3544               	lslf	Battery_State_Machine@z,w
 14631  0EF4  3EA8               	addlw	(low (_current| 0))& (0+255)
 14632  0EF5  0086               	movwf	6
 14633  0EF6  0187               	clrf	7
 14634  0EF7  3F40               	moviw [0]fsr1
 14635  0EF8  00C1               	movwf	??_Battery_State_Machine+2
 14636  0EF9  3F41               	moviw [1]fsr1
 14637  0EFA  00C2               	movwf	??_Battery_State_Machine+3
 14638  0EFB  0842               	movf	??_Battery_State_Machine+3,w
 14639  0EFC  3A80               	xorlw	128
 14640  0EFD  00C3               	movwf	??_Battery_State_Machine+4
 14641  0EFE  0840               	movf	??_Battery_State_Machine+1,w
 14642  0EFF  3A80               	xorlw	128
 14643  0F00  0243               	subwf	??_Battery_State_Machine+4,w
 14644  0F01  1D03               	skipz
 14645  0F02  2F05               	goto	u3635
 14646  0F03  083F               	movf	??_Battery_State_Machine,w
 14647  0F04  0241               	subwf	??_Battery_State_Machine+2,w
 14648  0F05                     u3635:	
 14649  0F05  1803               	skipnc
 14650  0F06  2F32               	goto	l3080
 14651                           
 14652                           ;battery_charger.c: 58: {
 14653                           ;battery_charger.c: 59: IminCount[z]-=2;
 14654  0F07  0020               	movlb	0	; select bank0
 14655  0F08  3544               	lslf	Battery_State_Machine@z,w
 14656  0F09  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 14657  0F0A  0086               	movwf	6
 14658  0F0B  0187               	clrf	7
 14659  0F0C  3002               	movlw	2
 14660  0F0D  0281               	subwf	1,f
 14661  0F0E  3141               	addfsr 1,1
 14662  0F0F  3000               	movlw	0
 14663  0F10  3B81               	subwfb	1,f
 14664  0F11  317F               	addfsr 1,-1
 14665                           
 14666                           ;battery_charger.c: 60: if(IminCount[z]<10)
 14667  0F12  3544               	lslf	Battery_State_Machine@z,w
 14668  0F13  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 14669  0F14  0086               	movwf	6
 14670  0F15  0187               	clrf	7
 14671  0F16  3F40               	moviw [0]fsr1
 14672  0F17  00BF               	movwf	??_Battery_State_Machine
 14673  0F18  3F41               	moviw [1]fsr1
 14674  0F19  00C0               	movwf	??_Battery_State_Machine+1
 14675  0F1A  3000               	movlw	0
 14676  0F1B  0240               	subwf	??_Battery_State_Machine+1,w
 14677  0F1C  300A               	movlw	10
 14678  0F1D  1903               	skipnz
 14679  0F1E  023F               	subwf	??_Battery_State_Machine,w
 14680  0F1F  1803               	skipnc
 14681  0F20  0008               	return
 14682                           
 14683                           ;battery_charger.c: 61: {
 14684                           ;battery_charger.c: 62: batteryState[z] = FLOAT;
 14685  0F21  3005               	movlw	5
 14686  0F22  00BF               	movwf	??_Battery_State_Machine
 14687  0F23  0844               	movf	Battery_State_Machine@z,w
 14688  0F24  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14689  0F25  0086               	movwf	6
 14690  0F26  0187               	clrf	7
 14691  0F27  083F               	movf	??_Battery_State_Machine,w
 14692  0F28  0081               	movwf	1
 14693                           
 14694                           ;battery_charger.c: 63: IminCount[z]=10;
 14695  0F29  3544               	lslf	Battery_State_Machine@z,w
 14696  0F2A  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 14697  0F2B  0086               	movwf	6
 14698  0F2C  0187               	clrf	7
 14699  0F2D  300A               	movlw	10
 14700  0F2E  3FC0               	movwi [0]fsr1
 14701  0F2F  3000               	movlw	0
 14702  0F30  3FC1               	movwi [1]fsr1
 14703                           
 14704                           ;battery_charger.c: 64: }
 14705                           ;battery_charger.c: 65: }
 14706  0F31  0008               	return
 14707  0F32                     l3080:	
 14708                           
 14709                           ;battery_charger.c: 66: else
 14710                           ;battery_charger.c: 67: {
 14711                           ;battery_charger.c: 68: if(IminCount[z]<600)IminCount[z]+=1;
 14712  0F32  0020               	movlb	0	; select bank0
 14713  0F33  3544               	lslf	Battery_State_Machine@z,w
 14714  0F34  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 14715  0F35  0086               	movwf	6
 14716  0F36  0187               	clrf	7
 14717  0F37  3F40               	moviw [0]fsr1
 14718  0F38  00BF               	movwf	??_Battery_State_Machine
 14719  0F39  3F41               	moviw [1]fsr1
 14720  0F3A  00C0               	movwf	??_Battery_State_Machine+1
 14721  0F3B  3002               	movlw	2
 14722  0F3C  0240               	subwf	??_Battery_State_Machine+1,w
 14723  0F3D  3058               	movlw	88
 14724  0F3E  1903               	skipnz
 14725  0F3F  023F               	subwf	??_Battery_State_Machine,w
 14726  0F40  1803               	skipnc
 14727  0F41  0008               	return
 14728  0F42  3544               	lslf	Battery_State_Machine@z,w
 14729  0F43  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 14730  0F44  0086               	movwf	6
 14731  0F45  0187               	clrf	7
 14732  0F46  3001               	movlw	1
 14733  0F47  0781               	addwf	1,f
 14734  0F48  3141               	addfsr 1,1
 14735  0F49  1803               	skipnc
 14736  0F4A  0A81               	incf	1,f
 14737                           
 14738                           ;battery_charger.c: 69: }
 14739                           ;battery_charger.c: 70: }
 14740  0F4B  0008               	return
 14741  0F4C                     l3084:	
 14742                           
 14743                           ;battery_charger.c: 71: else if(IminCount[z]<600)IminCount[z]+=1;
 14744  0F4C  3544               	lslf	Battery_State_Machine@z,w
 14745  0F4D  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 14746  0F4E  0086               	movwf	6
 14747  0F4F  0187               	clrf	7
 14748  0F50  3F40               	moviw [0]fsr1
 14749  0F51  00BF               	movwf	??_Battery_State_Machine
 14750  0F52  3F41               	moviw [1]fsr1
 14751  0F53  00C0               	movwf	??_Battery_State_Machine+1
 14752  0F54  3002               	movlw	2
 14753  0F55  0240               	subwf	??_Battery_State_Machine+1,w
 14754  0F56  3058               	movlw	88
 14755  0F57  1903               	skipnz
 14756  0F58  023F               	subwf	??_Battery_State_Machine,w
 14757  0F59  1803               	skipnc
 14758  0F5A  0008               	return
 14759  0F5B  3544               	lslf	Battery_State_Machine@z,w
 14760  0F5C  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 14761  0F5D  0086               	movwf	6
 14762  0F5E  0187               	clrf	7
 14763  0F5F  3001               	movlw	1
 14764  0F60  0781               	addwf	1,f
 14765  0F61  3141               	addfsr 1,1
 14766  0F62  1803               	skipnc
 14767  0F63  0A81               	incf	1,f
 14768                           
 14769                           ;battery_charger.c: 72: }
 14770  0F64  0008               	return
 14771  0F65                     l3088:	
 14772                           
 14773                           ;battery_charger.c: 73: else if(batteryState[z] == FLOAT)
 14774  0F65  0844               	movf	Battery_State_Machine@z,w
 14775  0F66  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14776  0F67  0086               	movwf	6
 14777  0F68  0187               	clrf	7
 14778  0F69  3005               	movlw	5
 14779  0F6A  0601               	xorwf	1,w
 14780  0F6B  1D03               	btfss	3,2
 14781  0F6C  2FF0               	goto	l3110
 14782                           
 14783                           ;battery_charger.c: 74: {
 14784                           ;battery_charger.c: 75: otherState=(uint8_t)(1-z);
 14785  0F6D  0344               	decf	Battery_State_Machine@z,w
 14786  0F6E  3AFF               	xorlw	255
 14787  0F6F  3E01               	addlw	1
 14788  0F70  00BF               	movwf	??_Battery_State_Machine
 14789  0F71  083F               	movf	??_Battery_State_Machine,w
 14790  0F72  00EB               	movwf	_otherState
 14791                           
 14792                           ;battery_charger.c: 77: if(batteryState[otherState]==CHARGE)
 14793  0F73  086B               	movf	_otherState,w
 14794  0F74  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14795  0F75  0086               	movwf	6
 14796  0F76  0187               	clrf	7
 14797  0F77  3004               	movlw	4
 14798  0F78  0601               	xorwf	1,w
 14799  0F79  1D03               	btfss	3,2
 14800  0F7A  2FA5               	goto	l3102
 14801                           
 14802                           ;battery_charger.c: 78: {
 14803                           ;battery_charger.c: 79: floatCount[z]+=1;
 14804  0F7B  3001               	movlw	1
 14805  0F7C  00BF               	movwf	??_Battery_State_Machine
 14806  0F7D  0844               	movf	Battery_State_Machine@z,w
 14807  0F7E  3EC2               	addlw	(low (_floatCount| 0))& (0+255)
 14808  0F7F  0086               	movwf	6
 14809  0F80  0187               	clrf	7
 14810  0F81  083F               	movf	??_Battery_State_Machine,w
 14811  0F82  0781               	addwf	1,f
 14812                           
 14813                           ;battery_charger.c: 81: if(floatCount[z]>5)
 14814  0F83  0844               	movf	Battery_State_Machine@z,w
 14815  0F84  3EC2               	addlw	(low (_floatCount| 0))& (0+255)
 14816  0F85  0086               	movwf	6
 14817  0F86  0187               	clrf	7
 14818  0F87  3006               	movlw	6
 14819  0F88  0201               	subwf	1,w
 14820  0F89  1C03               	skipc
 14821  0F8A  0008               	return
 14822                           
 14823                           ;battery_charger.c: 82: {
 14824                           ;battery_charger.c: 83: IminCount[z]=IminCount[otherState];
 14825  0F8B  356B               	lslf	_otherState,w
 14826  0F8C  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 14827  0F8D  0086               	movwf	6
 14828  0F8E  0187               	clrf	7
 14829  0F8F  3544               	lslf	Battery_State_Machine@z,w
 14830  0F90  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 14831  0F91  0084               	movwf	4
 14832  0F92  0185               	clrf	5
 14833  0F93  3F40               	moviw [0]fsr1
 14834  0F94  3F80               	movwi [0]fsr0
 14835  0F95  3F41               	moviw [1]fsr1
 14836  0F96  3F81               	movwi [1]fsr0
 14837                           
 14838                           ;battery_charger.c: 84: floatCount[z]=0;
 14839  0F97  0844               	movf	Battery_State_Machine@z,w
 14840  0F98  3EC2               	addlw	(low (_floatCount| 0))& (0+255)
 14841  0F99  0086               	movwf	6
 14842  0F9A  0187               	clrf	7
 14843  0F9B  0181               	clrf	1
 14844                           
 14845                           ;battery_charger.c: 85: batteryState[z] = CHARGE;
 14846  0F9C  3004               	movlw	4
 14847  0F9D  00BF               	movwf	??_Battery_State_Machine
 14848  0F9E  0844               	movf	Battery_State_Machine@z,w
 14849  0F9F  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14850  0FA0  0086               	movwf	6
 14851  0FA1  0187               	clrf	7
 14852  0FA2  083F               	movf	??_Battery_State_Machine,w
 14853  0FA3  0081               	movwf	1
 14854                           
 14855                           ;battery_charger.c: 86: }
 14856                           ;battery_charger.c: 87: }
 14857  0FA4  0008               	return
 14858  0FA5                     l3102:	
 14859                           
 14860                           ;battery_charger.c: 88: else
 14861                           ;battery_charger.c: 89: {
 14862                           ;battery_charger.c: 90: Vref[z]=1350+(int16_t)((250-batteryTemp)*.24);
 14863  0FA5  096D               	comf	_batteryTemp,w
 14864  0FA6  00BF               	movwf	??_Battery_State_Machine
 14865  0FA7  096E               	comf	_batteryTemp+1,w
 14866  0FA8  00C0               	movwf	??_Battery_State_Machine+1
 14867  0FA9  0ABF               	incf	??_Battery_State_Machine,f
 14868  0FAA  1903               	skipnz
 14869  0FAB  0AC0               	incf	??_Battery_State_Machine+1,f
 14870  0FAC  083F               	movf	??_Battery_State_Machine,w
 14871  0FAD  3EFA               	addlw	250
 14872  0FAE  00F9               	movwf	___awtoft@c
 14873  0FAF  3000               	movlw	0
 14874  0FB0  3D40               	addwfc	??_Battery_State_Machine+1,w
 14875  0FB1  00FA               	movwf	___awtoft@c+1
 14876  0FB2  319F  273C  318E   	fcall	___awtoft
 14877  0FB5  0879               	movf	?___awtoft,w
 14878  0FB6  0020               	movlb	0	; select bank0
 14879  0FB7  00A4               	movwf	___ftmul@f2
 14880  0FB8  087A               	movf	?___awtoft+1,w
 14881  0FB9  00A5               	movwf	___ftmul@f2+1
 14882  0FBA  087B               	movf	?___awtoft+2,w
 14883  0FBB  00A6               	movwf	___ftmul@f2+2
 14884  0FBC  30C3               	movlw	195
 14885  0FBD  00A1               	movwf	___ftmul@f1
 14886  0FBE  3075               	movlw	117
 14887  0FBF  00A2               	movwf	___ftmul@f1+1
 14888  0FC0  303E               	movlw	62
 14889  0FC1  00A3               	movwf	___ftmul@f1+2
 14890  0FC2  3197  274C  318E   	fcall	___ftmul
 14891  0FC5  0020               	movlb	0	; select bank0
 14892  0FC6  0821               	movf	?___ftmul,w
 14893  0FC7  00B1               	movwf	___fttol@f1
 14894  0FC8  0822               	movf	?___ftmul+1,w
 14895  0FC9  00B2               	movwf	___fttol@f1+1
 14896  0FCA  0823               	movf	?___ftmul+2,w
 14897  0FCB  00B3               	movwf	___fttol@f1+2
 14898  0FCC  3195  256C         	fcall	___fttol
 14899  0FCE  0020               	movlb	0	; select bank0
 14900  0FCF  0831               	movf	?___fttol,w
 14901  0FD0  3E46               	addlw	70
 14902  0FD1  00C1               	movwf	??_Battery_State_Machine+2
 14903  0FD2  3005               	movlw	5
 14904  0FD3  3D32               	addwfc	?___fttol+1,w
 14905  0FD4  00C2               	movwf	??_Battery_State_Machine+3
 14906  0FD5  3544               	lslf	Battery_State_Machine@z,w
 14907  0FD6  3EB0               	addlw	(low (_Vref| 0))& (0+255)
 14908  0FD7  0086               	movwf	6
 14909  0FD8  0187               	clrf	7
 14910  0FD9  0841               	movf	??_Battery_State_Machine+2,w
 14911  0FDA  3FC0               	movwi [0]fsr1
 14912  0FDB  0842               	movf	??_Battery_State_Machine+3,w
 14913  0FDC  3FC1               	movwi [1]fsr1
 14914                           
 14915                           ;battery_charger.c: 91: Iref[z]=15;
 14916  0FDD  3544               	lslf	Battery_State_Machine@z,w
 14917  0FDE  3EB8               	addlw	(low (_Iref| 0))& (0+255)
 14918  0FDF  0086               	movwf	6
 14919  0FE0  0187               	clrf	7
 14920  0FE1  300F               	movlw	15
 14921  0FE2  3FC0               	movwi [0]fsr1
 14922  0FE3  3000               	movlw	0
 14923  0FE4  3FC1               	movwi [1]fsr1
 14924                           
 14925                           ;battery_charger.c: 92: Imode[z]=0;
 14926  0FE5  0844               	movf	Battery_State_Machine@z,w
 14927  0FE6  3E62               	addlw	(low (_Imode| 0))& (0+255)
 14928  0FE7  0086               	movwf	6
 14929  0FE8  0187               	clrf	7
 14930  0FE9  0181               	clrf	1
 14931                           
 14932                           ;battery_charger.c: 93: floatCount[z]=0;
 14933  0FEA  0844               	movf	Battery_State_Machine@z,w
 14934  0FEB  3EC2               	addlw	(low (_floatCount| 0))& (0+255)
 14935  0FEC  0086               	movwf	6
 14936  0FED  0187               	clrf	7
 14937  0FEE  0181               	clrf	1
 14938                           
 14939                           ;battery_charger.c: 94: }
 14940                           ;battery_charger.c: 95: }
 14941  0FEF  0008               	return
 14942  0FF0                     l3110:	
 14943                           
 14944                           ;battery_charger.c: 96: else
 14945                           ;battery_charger.c: 97: if(batteryState[z] == FAULT)
 14946  0FF0  0844               	movf	Battery_State_Machine@z,w
 14947  0FF1  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14948  0FF2  0086               	movwf	6
 14949  0FF3  0187               	clrf	7
 14950  0FF4  0301               	decf	1,w
 14951  0FF5  1D03               	btfss	3,2
 14952  0FF6  0008               	return
 14953                           
 14954                           ;battery_charger.c: 98: {
 14955                           ;battery_charger.c: 99: batteryState[z]=PRECHARGE;
 14956  0FF7  3003               	movlw	3
 14957  0FF8  00BF               	movwf	??_Battery_State_Machine
 14958  0FF9  0844               	movf	Battery_State_Machine@z,w
 14959  0FFA  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14960  0FFB  0086               	movwf	6
 14961  0FFC  0187               	clrf	7
 14962  0FFD  083F               	movf	??_Battery_State_Machine,w
 14963  0FFE  0081               	movwf	1
 14964  0FFF  0008               	return
 14965  1000                     __end_of_Battery_State_Machine:	
 14966                           
 14967                           	psect	text40
 14968  156C                     __ptext40:	
 14969 ;; *************** function ___fttol *****************
 14970 ;; Defined at:
 14971 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
 14972 ;; Parameters:    Size  Location     Type
 14973 ;;  f1              3   17[BANK0 ] float 
 14974 ;; Auto vars:     Size  Location     Type
 14975 ;;  lval            4   26[BANK0 ] unsigned long 
 14976 ;;  exp1            1   30[BANK0 ] unsigned char 
 14977 ;;  sign1           1   25[BANK0 ] unsigned char 
 14978 ;; Return value:  Size  Location     Type
 14979 ;;                  4   17[BANK0 ] long 
 14980 ;; Registers used:
 14981 ;;		wreg, status,2, status,0
 14982 ;; Tracked objects:
 14983 ;;		On entry : 0/0
 14984 ;;		On exit  : 0/0
 14985 ;;		Unchanged: 0/0
 14986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14987 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14988 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14989 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14990 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14991 ;;Total ram usage:       14 bytes
 14992 ;; Hardware stack levels used:    1
 14993 ;; This function calls:
 14994 ;;		Nothing
 14995 ;; This function is called by:
 14996 ;;		_tempCalc
 14997 ;;		_main
 14998 ;;		_calculateCurrent0
 14999 ;;		_calculateCurrent3
 15000 ;;		_Init_Battery_State_Machine
 15001 ;;		_Battery_State_Machine
 15002 ;;		_cc_cv_mode
 15003 ;; This function uses a non-reentrant model
 15004 ;;
 15005                           
 15006                           
 15007                           ;psect for function ___fttol
 15008  156C                     ___fttol:	
 15009                           
 15010                           ;incstack = 0
 15011                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15012  156C  0020               	movlb	0	; select bank0
 15013  156D  0831               	movf	___fttol@f1,w
 15014  156E  00B5               	movwf	??___fttol
 15015  156F  0832               	movf	___fttol@f1+1,w
 15016  1570  00B6               	movwf	??___fttol+1
 15017  1571  0833               	movf	___fttol@f1+2,w
 15018  1572  00B7               	movwf	??___fttol+2
 15019  1573  1003               	clrc
 15020  1574  0D36               	rlf	??___fttol+1,w
 15021  1575  0D37               	rlf	??___fttol+2,w
 15022  1576  00B8               	movwf	??___fttol+3
 15023  1577  0838               	movf	??___fttol+3,w
 15024  1578  00BE               	movwf	___fttol@exp1
 15025  1579  083E               	movf	___fttol@exp1,w
 15026  157A  1D03               	btfss	3,2
 15027  157B  2D85               	goto	l2582
 15028  157C  3000               	movlw	0
 15029  157D  00B4               	movwf	?___fttol+3
 15030  157E  3000               	movlw	0
 15031  157F  00B3               	movwf	?___fttol+2
 15032  1580  3000               	movlw	0
 15033  1581  00B2               	movwf	?___fttol+1
 15034  1582  3000               	movlw	0
 15035  1583  00B1               	movwf	?___fttol
 15036  1584  0008               	return
 15037  1585                     l2582:	
 15038  1585  0831               	movf	___fttol@f1,w
 15039  1586  00B5               	movwf	??___fttol
 15040  1587  0832               	movf	___fttol@f1+1,w
 15041  1588  00B6               	movwf	??___fttol+1
 15042  1589  0833               	movf	___fttol@f1+2,w
 15043  158A  00B7               	movwf	??___fttol+2
 15044  158B  3017               	movlw	23
 15045  158C                     u2855:	
 15046  158C  36B7               	lsrf	??___fttol+2,f
 15047  158D  0CB6               	rrf	??___fttol+1,f
 15048  158E  0CB5               	rrf	??___fttol,f
 15049  158F  0B89               	decfsz	9,f
 15050  1590  2D8C               	goto	u2855
 15051  1591  0835               	movf	??___fttol,w
 15052  1592  00B8               	movwf	??___fttol+3
 15053  1593  0838               	movf	??___fttol+3,w
 15054  1594  00B9               	movwf	___fttol@sign1
 15055  1595  17B2               	bsf	___fttol@f1+1,7
 15056  1596  30FF               	movlw	255
 15057  1597  05B1               	andwf	___fttol@f1,f
 15058  1598  30FF               	movlw	255
 15059  1599  05B2               	andwf	___fttol@f1+1,f
 15060  159A  3000               	movlw	0
 15061  159B  05B3               	andwf	___fttol@f1+2,f
 15062  159C  0831               	movf	___fttol@f1,w
 15063  159D  00BA               	movwf	___fttol@lval
 15064  159E  0832               	movf	___fttol@f1+1,w
 15065  159F  00BB               	movwf	___fttol@lval+1
 15066  15A0  0833               	movf	___fttol@f1+2,w
 15067  15A1  00BC               	movwf	___fttol@lval+2
 15068  15A2  01BD               	clrf	___fttol@lval+3
 15069  15A3  308E               	movlw	142
 15070  15A4  02BE               	subwf	___fttol@exp1,f
 15071  15A5  1FBE               	btfss	___fttol@exp1,7
 15072  15A6  2DC3               	goto	l2602
 15073  15A7  083E               	movf	___fttol@exp1,w
 15074  15A8  3A80               	xorlw	128
 15075  15A9  3E8F               	addlw	143
 15076  15AA  1803               	skipnc
 15077  15AB  2DB5               	goto	l2600
 15078  15AC  3000               	movlw	0
 15079  15AD  00B4               	movwf	?___fttol+3
 15080  15AE  3000               	movlw	0
 15081  15AF  00B3               	movwf	?___fttol+2
 15082  15B0  3000               	movlw	0
 15083  15B1  00B2               	movwf	?___fttol+1
 15084  15B2  3000               	movlw	0
 15085  15B3  00B1               	movwf	?___fttol
 15086  15B4  0008               	return
 15087  15B5                     l2600:	
 15088  15B5  3001               	movlw	1
 15089  15B6                     u2885:	
 15090  15B6  36BD               	lsrf	___fttol@lval+3,f
 15091  15B7  0CBC               	rrf	___fttol@lval+2,f
 15092  15B8  0CBB               	rrf	___fttol@lval+1,f
 15093  15B9  0CBA               	rrf	___fttol@lval,f
 15094  15BA  0B89               	decfsz	9,f
 15095  15BB  2DB6               	goto	u2885
 15096  15BC  3001               	movlw	1
 15097  15BD  00B5               	movwf	??___fttol
 15098  15BE  0835               	movf	??___fttol,w
 15099  15BF  07BE               	addwf	___fttol@exp1,f
 15100  15C0  1903               	btfsc	3,2
 15101  15C1  2DDC               	goto	l2610
 15102  15C2  2DB5               	goto	l2600
 15103  15C3                     l2602:	
 15104  15C3  3018               	movlw	24
 15105  15C4  023E               	subwf	___fttol@exp1,w
 15106  15C5  1C03               	skipc
 15107  15C6  2DD9               	goto	l878
 15108  15C7  3000               	movlw	0
 15109  15C8  00B4               	movwf	?___fttol+3
 15110  15C9  3000               	movlw	0
 15111  15CA  00B3               	movwf	?___fttol+2
 15112  15CB  3000               	movlw	0
 15113  15CC  00B2               	movwf	?___fttol+1
 15114  15CD  3000               	movlw	0
 15115  15CE  00B1               	movwf	?___fttol
 15116  15CF  0008               	return
 15117  15D0                     l2608:	
 15118  15D0  3001               	movlw	1
 15119  15D1                     u2915:	
 15120  15D1  35BA               	lslf	___fttol@lval,f
 15121  15D2  0DBB               	rlf	___fttol@lval+1,f
 15122  15D3  0DBC               	rlf	___fttol@lval+2,f
 15123  15D4  0DBD               	rlf	___fttol@lval+3,f
 15124  15D5  0B89               	decfsz	9,f
 15125  15D6  2DD1               	goto	u2915
 15126  15D7  3001               	movlw	1
 15127  15D8  02BE               	subwf	___fttol@exp1,f
 15128  15D9                     l878:	
 15129  15D9  083E               	movf	___fttol@exp1,w
 15130  15DA  1D03               	btfss	3,2
 15131  15DB  2DD0               	goto	l2608
 15132  15DC                     l2610:	
 15133  15DC  0839               	movf	___fttol@sign1,w
 15134  15DD  1903               	btfsc	3,2
 15135  15DE  2DEA               	goto	l2614
 15136  15DF  09BA               	comf	___fttol@lval,f
 15137  15E0  09BB               	comf	___fttol@lval+1,f
 15138  15E1  09BC               	comf	___fttol@lval+2,f
 15139  15E2  09BD               	comf	___fttol@lval+3,f
 15140  15E3  0ABA               	incf	___fttol@lval,f
 15141  15E4  1903               	skipnz
 15142  15E5  0ABB               	incf	___fttol@lval+1,f
 15143  15E6  1903               	skipnz
 15144  15E7  0ABC               	incf	___fttol@lval+2,f
 15145  15E8  1903               	skipnz
 15146  15E9  0ABD               	incf	___fttol@lval+3,f
 15147  15EA                     l2614:	
 15148  15EA  083D               	movf	___fttol@lval+3,w
 15149  15EB  00B4               	movwf	?___fttol+3
 15150  15EC  083C               	movf	___fttol@lval+2,w
 15151  15ED  00B3               	movwf	?___fttol+2
 15152  15EE  083B               	movf	___fttol@lval+1,w
 15153  15EF  00B2               	movwf	?___fttol+1
 15154  15F0  083A               	movf	___fttol@lval,w
 15155  15F1  00B1               	movwf	?___fttol
 15156  15F2  0008               	return
 15157  15F3                     __end_of___fttol:	
 15158                           
 15159                           	psect	text41
 15160  174C                     __ptext41:	
 15161 ;; *************** function ___ftmul *****************
 15162 ;; Defined at:
 15163 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
 15164 ;; Parameters:    Size  Location     Type
 15165 ;;  f1              3    1[BANK0 ] float 
 15166 ;;  f2              3    4[BANK0 ] float 
 15167 ;; Auto vars:     Size  Location     Type
 15168 ;;  f3_as_produc    3   12[BANK0 ] unsigned um
 15169 ;;  sign            1   16[BANK0 ] unsigned char 
 15170 ;;  cntr            1   15[BANK0 ] unsigned char 
 15171 ;;  exp             1   11[BANK0 ] unsigned char 
 15172 ;; Return value:  Size  Location     Type
 15173 ;;                  3    1[BANK0 ] float 
 15174 ;; Registers used:
 15175 ;;		wreg, status,2, status,0, pclath, cstack
 15176 ;; Tracked objects:
 15177 ;;		On entry : 0/0
 15178 ;;		On exit  : 0/0
 15179 ;;		Unchanged: 0/0
 15180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15181 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15182 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15183 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15184 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15185 ;;Total ram usage:       16 bytes
 15186 ;; Hardware stack levels used:    1
 15187 ;; Hardware stack levels required when called:    1
 15188 ;; This function calls:
 15189 ;;		___ftpack
 15190 ;; This function is called by:
 15191 ;;		_Init_Battery_State_Machine
 15192 ;;		_Battery_State_Machine
 15193 ;;		_cc_cv_mode
 15194 ;;		_tempCalc
 15195 ;;		_main
 15196 ;;		_log
 15197 ;;		_eval_poly
 15198 ;; This function uses a non-reentrant model
 15199 ;;
 15200                           
 15201                           
 15202                           ;psect for function ___ftmul
 15203  174C                     ___ftmul:	
 15204                           
 15205                           ;incstack = 0
 15206                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 15207  174C  0020               	movlb	0	; select bank0
 15208  174D  0821               	movf	___ftmul@f1,w
 15209  174E  00A7               	movwf	??___ftmul
 15210  174F  0822               	movf	___ftmul@f1+1,w
 15211  1750  00A8               	movwf	??___ftmul+1
 15212  1751  0823               	movf	___ftmul@f1+2,w
 15213  1752  00A9               	movwf	??___ftmul+2
 15214  1753  1003               	clrc
 15215  1754  0D28               	rlf	??___ftmul+1,w
 15216  1755  0D29               	rlf	??___ftmul+2,w
 15217  1756  00AA               	movwf	??___ftmul+3
 15218  1757  082A               	movf	??___ftmul+3,w
 15219  1758  00AB               	movwf	___ftmul@exp
 15220  1759  082B               	movf	___ftmul@exp,w
 15221  175A  1D03               	btfss	3,2
 15222  175B  2F63               	goto	l2498
 15223  175C  3000               	movlw	0
 15224  175D  00A1               	movwf	?___ftmul
 15225  175E  3000               	movlw	0
 15226  175F  00A2               	movwf	?___ftmul+1
 15227  1760  3000               	movlw	0
 15228  1761  00A3               	movwf	?___ftmul+2
 15229  1762  0008               	return
 15230  1763                     l2498:	
 15231  1763  0824               	movf	___ftmul@f2,w
 15232  1764  00A7               	movwf	??___ftmul
 15233  1765  0825               	movf	___ftmul@f2+1,w
 15234  1766  00A8               	movwf	??___ftmul+1
 15235  1767  0826               	movf	___ftmul@f2+2,w
 15236  1768  00A9               	movwf	??___ftmul+2
 15237  1769  1003               	clrc
 15238  176A  0D28               	rlf	??___ftmul+1,w
 15239  176B  0D29               	rlf	??___ftmul+2,w
 15240  176C  00AA               	movwf	??___ftmul+3
 15241  176D  082A               	movf	??___ftmul+3,w
 15242  176E  00B0               	movwf	___ftmul@sign
 15243  176F  0830               	movf	___ftmul@sign,w
 15244  1770  1D03               	btfss	3,2
 15245  1771  2F79               	goto	l2504
 15246  1772  3000               	movlw	0
 15247  1773  00A1               	movwf	?___ftmul
 15248  1774  3000               	movlw	0
 15249  1775  00A2               	movwf	?___ftmul+1
 15250  1776  3000               	movlw	0
 15251  1777  00A3               	movwf	?___ftmul+2
 15252  1778  0008               	return
 15253  1779                     l2504:	
 15254  1779  0830               	movf	___ftmul@sign,w
 15255  177A  3E7B               	addlw	123
 15256  177B  00A7               	movwf	??___ftmul
 15257  177C  0827               	movf	??___ftmul,w
 15258  177D  07AB               	addwf	___ftmul@exp,f
 15259  177E  0821               	movf	___ftmul@f1,w
 15260  177F  00A7               	movwf	??___ftmul
 15261  1780  0822               	movf	___ftmul@f1+1,w
 15262  1781  00A8               	movwf	??___ftmul+1
 15263  1782  0823               	movf	___ftmul@f1+2,w
 15264  1783  00A9               	movwf	??___ftmul+2
 15265  1784  3010               	movlw	16
 15266  1785                     u2705:	
 15267  1785  36A9               	lsrf	??___ftmul+2,f
 15268  1786  0CA8               	rrf	??___ftmul+1,f
 15269  1787  0CA7               	rrf	??___ftmul,f
 15270  1788  0B89               	decfsz	9,f
 15271  1789  2F85               	goto	u2705
 15272  178A  0827               	movf	??___ftmul,w
 15273  178B  00AA               	movwf	??___ftmul+3
 15274  178C  082A               	movf	??___ftmul+3,w
 15275  178D  00B0               	movwf	___ftmul@sign
 15276  178E  0824               	movf	___ftmul@f2,w
 15277  178F  00A7               	movwf	??___ftmul
 15278  1790  0825               	movf	___ftmul@f2+1,w
 15279  1791  00A8               	movwf	??___ftmul+1
 15280  1792  0826               	movf	___ftmul@f2+2,w
 15281  1793  00A9               	movwf	??___ftmul+2
 15282  1794  3010               	movlw	16
 15283  1795                     u2715:	
 15284  1795  36A9               	lsrf	??___ftmul+2,f
 15285  1796  0CA8               	rrf	??___ftmul+1,f
 15286  1797  0CA7               	rrf	??___ftmul,f
 15287  1798  0B89               	decfsz	9,f
 15288  1799  2F95               	goto	u2715
 15289  179A  0827               	movf	??___ftmul,w
 15290  179B  00AA               	movwf	??___ftmul+3
 15291  179C  082A               	movf	??___ftmul+3,w
 15292  179D  06B0               	xorwf	___ftmul@sign,f
 15293  179E  3080               	movlw	128
 15294  179F  00A7               	movwf	??___ftmul
 15295  17A0  0827               	movf	??___ftmul,w
 15296  17A1  05B0               	andwf	___ftmul@sign,f
 15297  17A2  17A2               	bsf	___ftmul@f1+1,7
 15298  17A3  17A5               	bsf	___ftmul@f2+1,7
 15299  17A4  30FF               	movlw	255
 15300  17A5  05A4               	andwf	___ftmul@f2,f
 15301  17A6  30FF               	movlw	255
 15302  17A7  05A5               	andwf	___ftmul@f2+1,f
 15303  17A8  3000               	movlw	0
 15304  17A9  05A6               	andwf	___ftmul@f2+2,f
 15305  17AA  3000               	movlw	0
 15306  17AB  00AC               	movwf	___ftmul@f3_as_product
 15307  17AC  3000               	movlw	0
 15308  17AD  00AD               	movwf	___ftmul@f3_as_product+1
 15309  17AE  3000               	movlw	0
 15310  17AF  00AE               	movwf	___ftmul@f3_as_product+2
 15311  17B0  3007               	movlw	7
 15312  17B1  00A7               	movwf	??___ftmul
 15313  17B2  0827               	movf	??___ftmul,w
 15314  17B3  00AF               	movwf	___ftmul@cntr
 15315  17B4                     l2516:	
 15316  17B4  1C21               	btfss	___ftmul@f1,0
 15317  17B5  2FBC               	goto	l2520
 15318  17B6  0824               	movf	___ftmul@f2,w
 15319  17B7  07AC               	addwf	___ftmul@f3_as_product,f
 15320  17B8  0825               	movf	___ftmul@f2+1,w
 15321  17B9  3DAD               	addwfc	___ftmul@f3_as_product+1,f
 15322  17BA  0826               	movf	___ftmul@f2+2,w
 15323  17BB  3DAE               	addwfc	___ftmul@f3_as_product+2,f
 15324  17BC                     l2520:	
 15325  17BC  3001               	movlw	1
 15326  17BD                     u2735:	
 15327  17BD  36A3               	lsrf	___ftmul@f1+2,f
 15328  17BE  0CA2               	rrf	___ftmul@f1+1,f
 15329  17BF  0CA1               	rrf	___ftmul@f1,f
 15330  17C0  0B89               	decfsz	9,f
 15331  17C1  2FBD               	goto	u2735
 15332  17C2  3001               	movlw	1
 15333  17C3                     u2745:	
 15334  17C3  35A4               	lslf	___ftmul@f2,f
 15335  17C4  0DA5               	rlf	___ftmul@f2+1,f
 15336  17C5  0DA6               	rlf	___ftmul@f2+2,f
 15337  17C6  0B89               	decfsz	9,f
 15338  17C7  2FC3               	goto	u2745
 15339  17C8  3001               	movlw	1
 15340  17C9  02AF               	subwf	___ftmul@cntr,f
 15341  17CA  1D03               	btfss	3,2
 15342  17CB  2FB4               	goto	l2516
 15343  17CC  3009               	movlw	9
 15344  17CD  00A7               	movwf	??___ftmul
 15345  17CE  0827               	movf	??___ftmul,w
 15346  17CF  00AF               	movwf	___ftmul@cntr
 15347  17D0                     l2528:	
 15348  17D0  1C21               	btfss	___ftmul@f1,0
 15349  17D1  2FD8               	goto	l2532
 15350  17D2  0824               	movf	___ftmul@f2,w
 15351  17D3  07AC               	addwf	___ftmul@f3_as_product,f
 15352  17D4  0825               	movf	___ftmul@f2+1,w
 15353  17D5  3DAD               	addwfc	___ftmul@f3_as_product+1,f
 15354  17D6  0826               	movf	___ftmul@f2+2,w
 15355  17D7  3DAE               	addwfc	___ftmul@f3_as_product+2,f
 15356  17D8                     l2532:	
 15357  17D8  3001               	movlw	1
 15358  17D9                     u2775:	
 15359  17D9  36A3               	lsrf	___ftmul@f1+2,f
 15360  17DA  0CA2               	rrf	___ftmul@f1+1,f
 15361  17DB  0CA1               	rrf	___ftmul@f1,f
 15362  17DC  0B89               	decfsz	9,f
 15363  17DD  2FD9               	goto	u2775
 15364  17DE  3001               	movlw	1
 15365  17DF                     u2785:	
 15366  17DF  36AE               	lsrf	___ftmul@f3_as_product+2,f
 15367  17E0  0CAD               	rrf	___ftmul@f3_as_product+1,f
 15368  17E1  0CAC               	rrf	___ftmul@f3_as_product,f
 15369  17E2  0B89               	decfsz	9,f
 15370  17E3  2FDF               	goto	u2785
 15371  17E4  3001               	movlw	1
 15372  17E5  02AF               	subwf	___ftmul@cntr,f
 15373  17E6  1D03               	btfss	3,2
 15374  17E7  2FD0               	goto	l2528
 15375  17E8  082C               	movf	___ftmul@f3_as_product,w
 15376  17E9  00F0               	movwf	___ftpack@arg
 15377  17EA  082D               	movf	___ftmul@f3_as_product+1,w
 15378  17EB  00F1               	movwf	___ftpack@arg+1
 15379  17EC  082E               	movf	___ftmul@f3_as_product+2,w
 15380  17ED  00F2               	movwf	___ftpack@arg+2
 15381  17EE  082B               	movf	___ftmul@exp,w
 15382  17EF  00A7               	movwf	??___ftmul
 15383  17F0  0827               	movf	??___ftmul,w
 15384  17F1  00F3               	movwf	___ftpack@exp
 15385  17F2  0830               	movf	___ftmul@sign,w
 15386  17F3  00A8               	movwf	??___ftmul+1
 15387  17F4  0828               	movf	??___ftmul+1,w
 15388  17F5  00F4               	movwf	___ftpack@sign
 15389  17F6  3193  23A0         	fcall	___ftpack
 15390  17F8  0870               	movf	?___ftpack,w
 15391  17F9  0020               	movlb	0	; select bank0
 15392  17FA  00A1               	movwf	?___ftmul
 15393  17FB  0871               	movf	?___ftpack+1,w
 15394  17FC  00A2               	movwf	?___ftmul+1
 15395  17FD  0872               	movf	?___ftpack+2,w
 15396  17FE  00A3               	movwf	?___ftmul+2
 15397  17FF  0008               	return
 15398  1800                     __end_of___ftmul:	
 15399                           
 15400                           	psect	text42
 15401  1F3C                     __ptext42:	
 15402 ;; *************** function ___awtoft *****************
 15403 ;; Defined at:
 15404 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awtoft.c"
 15405 ;; Parameters:    Size  Location     Type
 15406 ;;  c               2    9[COMMON] int 
 15407 ;; Auto vars:     Size  Location     Type
 15408 ;;  sign            1    0[BANK0 ] unsigned char 
 15409 ;; Return value:  Size  Location     Type
 15410 ;;                  3    9[COMMON] float 
 15411 ;; Registers used:
 15412 ;;		wreg, status,2, status,0, pclath, cstack
 15413 ;; Tracked objects:
 15414 ;;		On entry : 0/0
 15415 ;;		On exit  : 0/0
 15416 ;;		Unchanged: 0/0
 15417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15418 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15420 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15421 ;;      Totals:         5       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15422 ;;Total ram usage:        6 bytes
 15423 ;; Hardware stack levels used:    1
 15424 ;; Hardware stack levels required when called:    1
 15425 ;; This function calls:
 15426 ;;		___ftpack
 15427 ;; This function is called by:
 15428 ;;		_Init_Battery_State_Machine
 15429 ;;		_Battery_State_Machine
 15430 ;;		_cc_cv_mode
 15431 ;;		_tempCalc
 15432 ;;		_main
 15433 ;;		_calculateCurrent0
 15434 ;;		_calculateCurrent3
 15435 ;;		_log
 15436 ;; This function uses a non-reentrant model
 15437 ;;
 15438                           
 15439                           
 15440                           ;psect for function ___awtoft
 15441  1F3C                     ___awtoft:	
 15442                           
 15443                           ;incstack = 0
 15444                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15445  1F3C  0020               	movlb	0	; select bank0
 15446  1F3D  01A0               	clrf	___awtoft@sign
 15447  1F3E  1FFA               	btfss	___awtoft@c+1,7
 15448  1F3F  2F47               	goto	l2552
 15449  1F40  09F9               	comf	___awtoft@c,f
 15450  1F41  09FA               	comf	___awtoft@c+1,f
 15451  1F42  0AF9               	incf	___awtoft@c,f
 15452  1F43  1903               	skipnz
 15453  1F44  0AFA               	incf	___awtoft@c+1,f
 15454  1F45  01A0               	clrf	___awtoft@sign
 15455  1F46  0AA0               	incf	___awtoft@sign,f
 15456  1F47                     l2552:	
 15457  1F47  0879               	movf	___awtoft@c,w
 15458  1F48  00F0               	movwf	___ftpack@arg
 15459  1F49  087A               	movf	___awtoft@c+1,w
 15460  1F4A  00F1               	movwf	___ftpack@arg+1
 15461  1F4B  01F2               	clrf	___ftpack@arg+2
 15462  1F4C  308E               	movlw	142
 15463  1F4D  00FC               	movwf	??___awtoft
 15464  1F4E  087C               	movf	??___awtoft,w
 15465  1F4F  00F3               	movwf	___ftpack@exp
 15466  1F50  0820               	movf	___awtoft@sign,w
 15467  1F51  00FD               	movwf	??___awtoft+1
 15468  1F52  087D               	movf	??___awtoft+1,w
 15469  1F53  00F4               	movwf	___ftpack@sign
 15470  1F54  3193  23A0         	fcall	___ftpack
 15471  1F56  0870               	movf	?___ftpack,w
 15472  1F57  00F9               	movwf	?___awtoft
 15473  1F58  0871               	movf	?___ftpack+1,w
 15474  1F59  00FA               	movwf	?___awtoft+1
 15475  1F5A  0872               	movf	?___ftpack+2,w
 15476  1F5B  00FB               	movwf	?___awtoft+2
 15477  1F5C  0008               	return
 15478  1F5D                     __end_of___awtoft:	
 15479                           
 15480                           	psect	text43
 15481  13A0                     __ptext43:	
 15482 ;; *************** function ___ftpack *****************
 15483 ;; Defined at:
 15484 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
 15485 ;; Parameters:    Size  Location     Type
 15486 ;;  arg             3    0[COMMON] unsigned um
 15487 ;;  exp             1    3[COMMON] unsigned char 
 15488 ;;  sign            1    4[COMMON] unsigned char 
 15489 ;; Auto vars:     Size  Location     Type
 15490 ;;		None
 15491 ;; Return value:  Size  Location     Type
 15492 ;;                  3    0[COMMON] float 
 15493 ;; Registers used:
 15494 ;;		wreg, status,2, status,0
 15495 ;; Tracked objects:
 15496 ;;		On entry : 0/0
 15497 ;;		On exit  : 0/0
 15498 ;;		Unchanged: 0/0
 15499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15500 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15502 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15503 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15504 ;;Total ram usage:        8 bytes
 15505 ;; Hardware stack levels used:    1
 15506 ;; This function calls:
 15507 ;;		Nothing
 15508 ;; This function is called by:
 15509 ;;		___awtoft
 15510 ;;		___ftadd
 15511 ;;		___ftdiv
 15512 ;;		___ftmul
 15513 ;; This function uses a non-reentrant model
 15514 ;;
 15515                           
 15516                           
 15517                           ;psect for function ___ftpack
 15518  13A0                     ___ftpack:	
 15519                           
 15520                           ;incstack = 0
 15521                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15522  13A0  0873               	movf	___ftpack@exp,w
 15523  13A1  1903               	btfsc	3,2
 15524  13A2  2BA8               	goto	l2358
 15525  13A3  0872               	movf	___ftpack@arg+2,w
 15526  13A4  0471               	iorwf	___ftpack@arg+1,w
 15527  13A5  0470               	iorwf	___ftpack@arg,w
 15528  13A6  1D03               	skipz
 15529  13A7  2BB9               	goto	l2364
 15530  13A8                     l2358:	
 15531  13A8  3000               	movlw	0
 15532  13A9  00F0               	movwf	?___ftpack
 15533  13AA  3000               	movlw	0
 15534  13AB  00F1               	movwf	?___ftpack+1
 15535  13AC  3000               	movlw	0
 15536  13AD  00F2               	movwf	?___ftpack+2
 15537  13AE  0008               	return
 15538  13AF                     l2362:	
 15539  13AF  3001               	movlw	1
 15540  13B0  00F5               	movwf	??___ftpack
 15541  13B1  0875               	movf	??___ftpack,w
 15542  13B2  07F3               	addwf	___ftpack@exp,f
 15543  13B3  3001               	movlw	1
 15544  13B4                     u2275:	
 15545  13B4  36F2               	lsrf	___ftpack@arg+2,f
 15546  13B5  0CF1               	rrf	___ftpack@arg+1,f
 15547  13B6  0CF0               	rrf	___ftpack@arg,f
 15548  13B7  0B89               	decfsz	9,f
 15549  13B8  2BB4               	goto	u2275
 15550  13B9                     l2364:	
 15551  13B9  30FE               	movlw	254
 15552  13BA  0572               	andwf	___ftpack@arg+2,w
 15553  13BB  1903               	btfsc	3,2
 15554  13BC  2BD2               	goto	l787
 15555  13BD  2BAF               	goto	l2362
 15556  13BE                     l2366:	
 15557  13BE  3001               	movlw	1
 15558  13BF  00F5               	movwf	??___ftpack
 15559  13C0  0875               	movf	??___ftpack,w
 15560  13C1  07F3               	addwf	___ftpack@exp,f
 15561  13C2  3001               	movlw	1
 15562  13C3  07F0               	addwf	___ftpack@arg,f
 15563  13C4  3000               	movlw	0
 15564  13C5  1803               	skipnc
 15565  13C6  3001               	movlw	1
 15566  13C7  07F1               	addwf	___ftpack@arg+1,f
 15567  13C8  3000               	movlw	0
 15568  13C9  1803               	skipnc
 15569  13CA  3001               	movlw	1
 15570  13CB  07F2               	addwf	___ftpack@arg+2,f
 15571  13CC  3001               	movlw	1
 15572  13CD                     u2295:	
 15573  13CD  36F2               	lsrf	___ftpack@arg+2,f
 15574  13CE  0CF1               	rrf	___ftpack@arg+1,f
 15575  13CF  0CF0               	rrf	___ftpack@arg,f
 15576  13D0  0B89               	decfsz	9,f
 15577  13D1  2BCD               	goto	u2295
 15578  13D2                     l787:	
 15579  13D2  30FF               	movlw	255
 15580  13D3  0572               	andwf	___ftpack@arg+2,w
 15581  13D4  1903               	btfsc	3,2
 15582  13D5  2BDF               	goto	l2374
 15583  13D6  2BBE               	goto	l2366
 15584  13D7                     l2372:	
 15585  13D7  3001               	movlw	1
 15586  13D8  02F3               	subwf	___ftpack@exp,f
 15587  13D9  3001               	movlw	1
 15588  13DA                     u2315:	
 15589  13DA  35F0               	lslf	___ftpack@arg,f
 15590  13DB  0DF1               	rlf	___ftpack@arg+1,f
 15591  13DC  0DF2               	rlf	___ftpack@arg+2,f
 15592  13DD  0B89               	decfsz	9,f
 15593  13DE  2BDA               	goto	u2315
 15594  13DF                     l2374:	
 15595  13DF  1BF1               	btfsc	___ftpack@arg+1,7
 15596  13E0  2BE5               	goto	l794
 15597  13E1  3002               	movlw	2
 15598  13E2  0273               	subwf	___ftpack@exp,w
 15599  13E3  1803               	skipnc
 15600  13E4  2BD7               	goto	l2372
 15601  13E5                     l794:	
 15602  13E5  1873               	btfsc	___ftpack@exp,0
 15603  13E6  2BED               	goto	l795
 15604  13E7  30FF               	movlw	255
 15605  13E8  05F0               	andwf	___ftpack@arg,f
 15606  13E9  307F               	movlw	127
 15607  13EA  05F1               	andwf	___ftpack@arg+1,f
 15608  13EB  30FF               	movlw	255
 15609  13EC  05F2               	andwf	___ftpack@arg+2,f
 15610  13ED                     l795:	
 15611  13ED  1003               	clrc
 15612  13EE  0CF3               	rrf	___ftpack@exp,f
 15613  13EF  0873               	movf	___ftpack@exp,w
 15614  13F0  00F5               	movwf	??___ftpack
 15615  13F1  01F6               	clrf	??___ftpack+1
 15616  13F2  01F7               	clrf	??___ftpack+2
 15617  13F3  3010               	movlw	16
 15618  13F4                     u2355:	
 15619  13F4  35F5               	lslf	??___ftpack,f
 15620  13F5  0DF6               	rlf	??___ftpack+1,f
 15621  13F6  0DF7               	rlf	??___ftpack+2,f
 15622  13F7  0B89               	decfsz	9,f
 15623  13F8  2BF4               	goto	u2355
 15624  13F9  0875               	movf	??___ftpack,w
 15625  13FA  04F0               	iorwf	___ftpack@arg,f
 15626  13FB  0876               	movf	??___ftpack+1,w
 15627  13FC  04F1               	iorwf	___ftpack@arg+1,f
 15628  13FD  0877               	movf	??___ftpack+2,w
 15629  13FE  04F2               	iorwf	___ftpack@arg+2,f
 15630  13FF  0874               	movf	___ftpack@sign,w
 15631  1400  1903               	btfsc	3,2
 15632  1401  0008               	return
 15633  1402  17F2               	bsf	___ftpack@arg+2,7
 15634  1403  0008               	return
 15635  1404                     __end_of___ftpack:	
 15636  007E                     btemp	set	126	;btemp
 15637  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    330
    Data        18
    BSS         154
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     62      79
    BANK1            80     37      79
    BANK2            80      0      73
    BANK3            80      0      40
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            48      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 


Critical Paths under _main in COMMON

    _main->___awtoft
    _tempCalc->___awtoft
    _log->___awtoft
    ___ftge->___awtoft
    ___ftadd->___awtoft
    _readVAnalog->___aldiv
    _readIAnalog->___aldiv
    _readButton->_ADCRead
    _cc_cv_mode->___awtoft
    _calculateCurrent3->___awtoft
    _calculateCurrent0->___awtoft
    ___ftdiv->___awtoft
    _LCDInit->_LCDWrite
    _LCDClear->_gotoXY
    _gotoXY->_LCDWrite
    _Init_Battery_State_Machine->___awtoft
    _LCDWriteInt->___awtoft
    _LCDWriteCharacter->___wmul
    _Battery_State_Machine->___awtoft
    ___fttol->___awtoft
    ___ftmul->___awtoft
    ___awtoft->___awdiv

Critical Paths under _main in BANK0

    _main->_tempCalc
    _tempCalc->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftge->___ftmul
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftadd->___ftmul
    _readVAnalog->___aldiv
    _readIAnalog->___aldiv
    _cc_cv_mode->___fttol
    _calculateCurrent3->___fttol
    _calculateCurrent0->___fttol
    ___ftdiv->___awtoft
    _SYSTEM_Initialize->_Init_Battery_State_Machine
    _Init_Battery_State_Machine->___fttol
    _LCDWriteInt->___fttol
    _Battery_State_Machine->___fttol
    ___fttol->___ftdiv
    ___fttol->___ftmul
    ___ftmul->___awtoft

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                42    42      0  111563
                                             57 BANK0      5     5      0
                                              0 BANK1     37    37      0
                            _ADCRead
              _Battery_State_Machine
                           _LCDClear
                            _LCDInit
                  _LCDWriteCharacter
                        _LCDWriteInt
                 _PWM1_LoadDutyValue
                 _PWM6_LoadDutyValue
                 _PWM7_LoadDutyValue
                  _SYSTEM_Initialize
                            ___awdiv
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                  _calculateCurrent0
                  _calculateCurrent2
                  _calculateCurrent3
                         _cc_cv_mode
                             _gotoXY
                         _readButton
                        _readIAnalog
                        _readVAnalog
                           _tempCalc
 ---------------------------------------------------------------------------------
 (1) _tempCalc                                            11     9      2   37043
                                             46 BANK0     11     9      2
                            _ADCRead (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                            ___fttol
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   19403
                                             40 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     330
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           10     3      7    8325
                                             30 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     428
                                             17 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3356
                                             30 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3183
                                             17 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (1) _readVAnalog                                         21    19      2    1046
                                              9 COMMON     4     4      0
                                              6 BANK0     17    15      2
                            _ADCRead
                            ___aldiv
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     170
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _readIAnalog                                         24    22      2    1766
                                              9 COMMON     4     4      0
                                              6 BANK0     20    18      2
                            _ADCRead
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     512
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _readButton                                           2     2      0      22
                                              4 COMMON     2     2      0
                            _ADCRead
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     1      3      22
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _cc_cv_mode                                           8     8      0    8172
                                             31 BANK0      8     8      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent3                                    3     3      0    6904
                                             31 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent2                                    3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent0                                    3     3      0    6904
                                             31 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3153
                                              1 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    2     2      0   11592
                                             36 BANK0      2     2      0
                     _ADC_Initialize
         _Init_Battery_State_Machine
                           _LCDClear
                            _LCDInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PWM_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              1     1      0     803
                                              5 COMMON     1     1      0
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             3     3      0    2968
                                              8 COMMON     3     3      0
                           _LCDWrite
                             _gotoXY
 ---------------------------------------------------------------------------------
 (1) _gotoXY                                               3     2      1    2119
                                              5 COMMON     3     2      1
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _Init_Battery_State_Machine                           5     5      0    7798
                                             31 BANK0      5     5      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM7_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM6_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM1_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         16    11      5    8277
                                             31 BANK0     16    11      5
                  _LCDWriteCharacter
                            ___awdiv
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _LCDWriteCharacter                                    6     6      0    1805
                                              6 COMMON     6     6      0
                           _LCDWrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     890
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _LCDWrite                                             5     4      1     803
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _Battery_State_Machine                                6     6      0    8392
                                             31 BANK0      6     6      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     787
                                             17 BANK0     14    10      4
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    3915
                                              1 BANK0     16    10      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2964
                                              9 COMMON     5     2      3
                                              0 BANK0      1     1      0
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1707
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _Battery_State_Machine
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _LCDClear
     _LCDWrite
     _gotoXY
       _LCDWrite
   _LCDInit
     _LCDWrite
   _LCDWriteCharacter
     _LCDWrite
     ___wmul
   _LCDWriteInt
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
     ___awdiv
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     ___lwmod (ARG)
   _PWM1_LoadDutyValue
   _PWM6_LoadDutyValue
   _PWM7_LoadDutyValue
   _SYSTEM_Initialize
     _ADC_Initialize
     _Init_Battery_State_Machine
       ___awtoft
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
     _LCDClear
       _LCDWrite
       _gotoXY
         _LCDWrite
     _LCDInit
       _LCDWrite
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM_Initialize
     _TMR2_Initialize
     _TMR4_Initialize
   ___awdiv
   ___awtoft
     ___awdiv (ARG)
     ___ftpack (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftge
     ___awdiv (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
   ___ftmul
     ___awdiv (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     _frexp (ARG)
   ___fttol
     ___awdiv (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
   _calculateCurrent0
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent2
   _calculateCurrent3
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _cc_cv_mode
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _gotoXY
     _LCDWrite
   _readButton
     _ADCRead
   _readIAnalog
     _ADCRead
     ___aldiv
     ___wmul
   _readVAnalog
     _ADCRead
     ___aldiv
     ___bmul
   _tempCalc
     _ADCRead (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___fttol (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     _log (ARG)
       ___awtoft
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftge
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
       ___ftmul
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul
       _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3E      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     25      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      49       9       91.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      28      11       50.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               30      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     11D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     11D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Fri Sep 14 13:09:04 2018

                       _stateCounter 00B4                                    _j 0068  
                                  _x 006C               LCDWriteInt@fieldLength 0041  
                     ___bmul@product 0072              __size_of_PWM_Initialize 001F  
                        __CFG_CP$OFF 0000                                   l65 1E8B  
                                 l68 1E92                         ___awdiv@sign 0076  
                ___wmul@multiplicand 0072          __size_of_PWM6_LoadDutyValue 0016  
                       ___ftadd@exp1 003D                         ___ftadd@exp2 003C  
                        __CFG_LVP$ON 0000                         ___ftadd@sign 003B  
                                l240 1FA1                                  l152 0D90  
                                l241 1F95                                  l147 0D3C  
                                l148 0D4D                                  l237 1F89  
                                l238 1F8B                                  l239 1F91  
                      LCDClear@index 0079                                  l519 0470  
                                l472 00D5                                  l626 1ECD  
                                l681 14FB                                  l818 0A55  
                                l794 13E5                                  l795 13ED  
                                l787 13D2                                  l878 15D9  
                                _GIE 005F                                  _RB2 006A  
                       __CFG_CPD$OFF 0000                         _VsampleIndex 00C8  
                                _log 169C                      __end_of_ADCRead 1E99  
                    _TMR2_Initialize 1E34                         __CFG_BORV$LO 0000  
                                wreg 0009                      __end_of_LCDInit 119B  
                       ?_LCDWriteInt 003F                         __CFG_ZCD$OFF 0000  
                       ___ftdiv@cntr 002B                         ___ftdiv@sign 0030  
                               l3002 113A                                 l3004 1146  
                               l3012 115B                                 l3102 0FA5  
                               l3110 0FF0                                 l3030 0CE4  
                               l3008 1152                                 l2410 1EC7  
                               l3202 0837                                 l3050 0BA5  
                               l3220 0873                                 l3212 083E  
                               l3124 0D5B                                 l3230 0885  
                               l3222 087B                                 l3214 086B  
                               l2520 17BC                                 l2504 1779  
                               l2600 15B5                                 l3080 0F32  
                               l3064 0E88                                 l3232 08AC  
                               l3224 0881                                 l3128 0D68  
                               l3152 148C                                 l2432 09E5  
                               l2362 13AF                                 l2610 15DC  
                               l2602 15C3                                 l3066 0E90  
                               l3218 086F                                 l3162 14B8  
                               l2450 0A0E                                 l2372 13D7  
                               l2364 13B9                                 l2532 17D8  
                               l2516 17B4                                 l3084 0F4C  
                               l3068 0EA2                                 l3236 08BA  
                               l3172 14C6                                 l3164 14BA  
                               l2460 0A30                                 l2428 09DE  
                               l3420 02AD                                 l3340 008C  
                               l3332 0078                                 l2374 13DF  
                               l2366 13BE                                 l2358 13A8  
                               l2614 15EA                                 l3158 14A6  
                               l2470 0A51                                 l2462 0A34  
                               l2438 09F4                                 l3502 0490  
                               l3414 0293                                 l2552 1F47  
                               l2528 17D0                                 l2608 15D0  
                               l3088 0F65                                 l3184 14E7  
                               l2456 0A21                                 l2560 001E  
                               l3432 02C3                                 l3408 0275  
                               l3352 00B1                                 l2730 1FC4  
                               l3290 126F                                 l3178 14CF  
                               l3186 14E8                                 l2474 0A67  
                               l2458 0A2B                                 l2626 11E8  
                               l3346 0092                                 l2724 1FB0  
                               l3284 1F73                                 l2468 0A47  
                               l2564 0034                                 l2644 1399  
                               l3444 02FB                                 l3380 018A  
                               l2582 1585                                 l3278 122A  
                               l2478 0A79                                 l2830 16BB  
                               l3518 04BD                                 l3438 02E1  
                               l3366 00DD                                 l3358 00B6  
                               l2488 0A94                                 l3464 0348  
                               l3384 01B4                                 l3392 01E9  
                               l2498 1763                                 l2914 12B0  
                               l3490 0468                                 l3482 0444  
                               l3474 03BF                                 l3458 0331  
                               l2940 12E7                                 l2932 12D6  
                               l2924 12B8                                 l2908 12A5  
                               l2852 1E68                                 l2836 16CE  
                               l3652 07A5                                 l3484 0448  
                               l3468 034F                                 l3388 01DF  
                               l2926 12C4                                 l2950 160A  
                               l2870 150C                                 l2936 12DF  
                               l2880 152A                                 l2848 1E62  
                               l3656 07AE                                 l3496 047C  
                               l2970 1661                                 l3498 047F  
                               l2956 1620                                 l2892 1555  
                               l2878 151C                                 l2990 1EE8  
                               l2896 1563                                 l2888 154A  
                               l2978 167A                                 ?_log 0048  
                               u3000 1FFE                                 _LATA 0016  
                               _LATB 0017                                 _LATC 0018  
                               u2315 13DA                                 u3115 152B  
                               u4005 080F                                 u3125 153F  
                               u3215 12C5                                 u4015 1EA8  
                               u3135 154B                                 u2425 1ECE  
                               u3225 12CF                                 u3305 1662  
                               u4025 1224                                 _T2PR 028D  
                               u2355 13F4                                 u2275 13B4  
                               u2435 1ED3                                 u3235 12D7  
                               u3315 1671                                 u4035 1F6D  
                               u3325 167B                                 u4045 1269  
                               u2605 0A35                                 u2295 13CD  
                               u3095 151F                                 u3415 0BE4  
                               u4215 0284                                 u4135 01A7  
                               u2705 1785                                 u3425 0C3A  
                               u3505 0B0E                                 u2545 0A0F  
                               u4145 01D2                                 _T4PR 0293  
                               u2715 1795                                 u3195 12BB  
                               u3435 0C74                                 u3515 0B24  
                               u2635 0A48                                 u4315 02F0  
                               u4235 02A2                                 u3605 0E7A  
                               u3365 113D                                 u3285 1632  
                               u3445 0CBF                                 u3525 0B3E  
                               u4405 0428                                 u2735 17BD  
                               u3295 1642                                 u3535 0B54  
                               u2575 0A22                                 u4415 043D  
                               u4175 0263                                 u2745 17C3  
                               u3385 114C                                 u3545 0B7F  
                               u4425 045A                                 u4345 032A  
                               u4265 02C0                                 u2915 15D1  
                               u3635 0F05                                 u3395 1153  
                               u3715 0D28                                 u3475 0CEF  
                               u4507 0080                                 u3900 0821  
                               u3805 0DFF                                 u4517 14D9  
                               u3485 0AC2                                 u4365 0341  
                               u2775 17D9                                 u2855 158C  
                               u4527 11BE                                 u3815 147A  
                               u3575 0BB1                                 u3495 0AD8  
                               u4295 02D2                                 u2785 17DF  
                               u4537 11CE                                 u3825 1486  
                               u3595 0E66                                 u3835 1496  
                               u2885 15B6                                 u3845 14A2  
                               u3775 0DAA                                 u3855 14B0  
                               u2985 1FAE                                 u2995 1FC2  
                               u3965 089A                                 u3995 1EBE  
                tempCalc@analogValue 004E                                 _WPUA 0F39  
                               _WPUB 0F44                                 _WPUC 0F4F  
                               _WPUE 0F65                                 _Imin 0155  
                               _Iref 00B8                                 _Iout 00C4  
                       __CFG_WRT$OFF 0000                        __CFG_FCMEN$ON 0000  
                               _Vref 00B0                                 _main 0043  
                       ___ftpack@arg 0070                         ___ftpack@exp 0073  
                               fsr0h 0005                                 fsr1h 0007  
                               indf0 0000                                 fsr0l 0004  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E                                 log@x 0048  
                       ?_readIAnalog 0026                        __CFG_BOREN$ON 0000  
                               start 0002                        __CFG_CSWEN$ON 0000  
                  ___bmul@multiplier 0073                        __CFG_MCLRE$ON 0000  
                       ___ftmul@cntr 002F                         ___ftmul@sign 0030  
                       ?_readVAnalog 0026                     __end_of_LCDClear 1FC9  
                       ___fttol@exp1 003E                                ??_log 004B  
                       ___fttol@lval 003A                         main@fastLoop 00CD  
__size_of_Init_Battery_State_Machine 0064       __size_of_OSCILLATOR_Initialize 0009  
                   __end_of_LCDWrite 1FA3        __end_of_OSCILLATOR_Initialize 1E1C  
                    __end_of___aldiv 156C                                _ADACQ 009D  
                              _ADACT 0099                                _ADCAP 009B  
                              ?_main 0070                                _ADCLK 0098  
                              _ADPCH 009E                                _ADREF 009A  
                    __end_of___awdiv 12EC                                _ADPRE 009C  
                    __end_of___ftadd 0AAC                        __CFG_WDTE$OFF 0000  
                              _ADRPT 010D                      __end_of___ftdiv 169C  
                    __end_of___ftmul 1800                      ___awdiv@divisor 0070  
                    __end_of___ftsub 1EFE                      __end_of___fttol 15F3  
                              _T2CON 028E                                _LATA5 00B5  
                              _T4CON 0294                                _T2HLT 028F  
                              _T4HLT 0295                                _T2TMR 028C  
                              _T2RST 0291                      __end_of___lwmod 1160  
                              _T4TMR 0292                                _T4RST 0297  
                    ___awdiv@counter 0075                                _OSCEN 0891  
                              _TRISA 0011                                _TRISB 0012  
                              _TRISC 0013                      _TMR4_Initialize 1E42  
                              _Imode 0062               ?_Battery_State_Machine 0070  
                              _cc_cv 00C6                        ___awtoft@sign 0020  
                              _frexp 11D6                                _fonts 1000  
                              _errno 00C0                        ___ftpack@sign 0074  
                              main@j 00EE                         main@slowLoop 00DB  
                              status 0003                                wtemp0 007E  
                    __initialization 07B1                          log@exponent 004C  
                       __end_of_main 07B1              __end_of_TMR2_Initialize 1E42  
                          ??_ADCRead 0073                               ??_main 0059  
                      ___fttol@sign1 0039                            ??_LCDInit 0075  
             Battery_State_Machine@z 0044              LCDWrite@data_or_command 0072  
                             _ADCON0 0093                               _ADCON1 0094  
                             _ADCON2 0095                               _ADCON3 0096  
                             ?_frexp 0070                               _ADLTHH 010F  
                             _ADLTHL 010E                               _ADRESH 008D  
                             _ADRESL 008C                               _CCPR1H 030D  
                             _CCPR1L 030C                               _ADSTAT 0097  
                             _ADUTHH 0111                     ___awdiv@dividend 0072  
                             _ADUTHL 0110                     __end_of___awtoft 1F5D  
                             _ANSELA 0F38                               _ANSELB 0F43  
                             _ANSELC 0F4E                     __end_of___ftpack 1404  
                             _RB0PPS 0F18                               _RA6PPS 0F16  
                             _RA7PPS 0F17                       __CFG_WDTCCS$SC 0000  
                             _FVRCON 090C                               _OSCFRQ 0893  
                     __CFG_PWRTE$OFF 0000                         _CCPTMRS0bits 021E  
                       _CCPTMRS1bits 021F                               ___bmul 1E60  
                             ___ftge 0007                            ??___aldiv 0078  
                             ___wmul 1EC5                            ??___awdiv 0074  
                          ??___ftadd 0037                       __CFG_STVREN$ON 0000  
                     _PWM_Initialize 1F1D                            ??___ftdiv 0027  
                          ??___ftmul 0027                            ??___ftsub 007E  
                          ??___fttol 0035                            ??___lwmod 0074  
                             _gotoXY 1E71                               _button 006A  
            __end_of_TMR4_Initialize 1E50                     ___awdiv@quotient 0077  
          readVAnalog@analog_channel 0079                ___ftmul@f3_as_product 002C  
                   __end_of_tempCalc 09B6                         LCDWrite@data 0070  
                       LCDWriteInt@i 004E                         LCDWriteInt@j 004D  
                          ?_LCDClear 0070                    _SYSTEM_Initialize 119B  
               __size_of_LCDWriteInt 00B9                     __end_oflog@coeff 181B  
            __end_of__initialization 07FD                           ___ftadd@f1 0031  
                         ___ftadd@f2 0034                           ___ftge@ff1 0031  
                         ___ftge@ff2 0034                            ?_LCDWrite 0070  
                 ?_SYSTEM_Initialize 0070                         eval_poly@res 0045  
                         ___ftdiv@f1 0024                           ___ftdiv@f2 0021  
                         ___ftdiv@f3 002C                           ___awtoft@c 0079  
                ___bmul@multiplicand 0070                           ___ftmul@f1 0021  
                         ___ftmul@f2 0024               __end_of_PWM_Initialize 1F3C  
               __size_of_readIAnalog 013E                           ___ftsub@f1 0041  
                         ___ftsub@f2 003E                           ___fttol@f1 0031  
                     __pcstackCOMMON 0070                         __pidataBANK0 0005  
                       __pidataBANK2 1E50                  ??_SYSTEM_Initialize 0044  
                      __end_of_frexp 1211                        __end_of_fonts 112F  
                          LCDWrite@d 0073                            LCDWrite@i 0074  
               __size_of_readVAnalog 0122                   _PWM1_LoadDutyValue 1E99  
                   ?_TMR2_Initialize 0070                           _cc_cv_mode 0D0C  
        __size_of_PWM7_LoadDutyValue 0016                       main@efficiency 00CA  
                ?_PWM1_LoadDutyValue 0070                    LCDWriteInt@F14392 0150  
                  _calculateCurrent0 1211                    _calculateCurrent2 1F5D  
                  _calculateCurrent3 1256                              ??_frexp 0074  
          __end_of_SYSTEM_Initialize 11D6                           __pbssBANK0 005E  
                         __pbssBANK1 00A0                           __pbssBANK2 0120  
                         __pbssBANK3 01A0                   ?_calculateCurrent0 0070  
                 ?_calculateCurrent2 0070                   ?_calculateCurrent3 0070  
                       _batteryState 0064                   __size_of_eval_poly 0060  
                         ??_LCDClear 0078                       main@faultCount 00CE  
                         ??_LCDWrite 0071                 ??_PWM1_LoadDutyValue 0072  
                ??_calculateCurrent0 003F                  ??_calculateCurrent2 0070  
                ??_calculateCurrent3 003F                      ?_PWM_Initialize 0070  
                         __pmaintext 0043                              ?___bmul 0070  
                            ?___ftge 0031                              ?___wmul 0070  
                    __CFG_PPS1WAY$ON 0000           __end_of_PWM6_LoadDutyValue 1EC5  
                            ?_gotoXY 0075                              _ADCRead 1E84  
                   ?_TMR4_Initialize 0070                            ?___awtoft 0079  
                          ?___ftpack 0070                              _ADSTPTH 0113  
                            _ADSTPTL 0112             __CFG_SCANE$not_available 0000  
                __CFG_RSTOSC$HFINT32 0000              __size_of_ADC_Initialize 001F  
            ??_Battery_State_Machine 003F                       main@largerIOut 00E0  
                            _LCDInit 1160            __end_of_calculateCurrent0 1256  
          __end_of_calculateCurrent2 1F7E            __end_of_calculateCurrent3 129B  
                            _OSCCON1 088D                              _OSCCON3 088F  
                            _OSCTUNE 0892                              _PWM6DCH 038D  
                            _PWM6DCL 038C                              _PWM7DCH 0391  
                            _PWM7DCL 0390                              _PWM6CON 038E  
                            _PWM7CON 0392                              _PPSLOCK 0E8F  
                         _floatCount 00C2                       main@menuButton 00E2  
                     main@dutyCycle1 00E3                       main@dutyCycle6 00EA  
                     main@dutyCycle7 00EC                    main@tempFanOutput 00E5  
                         _lastButton 0069                            ?_tempCalc 004E  
                            _Itotals 0130                              ___aldiv 14EA  
                    __size_of___bmul 0011                      __size_of___ftge 003C  
                            ___awdiv 129B                              ___ftadd 09B6  
                         _readButton 1468                              ___ftdiv 15F3  
                    __size_of___wmul 001B                              ___ftmul 174C  
                            ___ftsub 1EE0                              ___fttol 156C  
                 main@displayRefresh 00DA                              ___lwmod 1134  
                            _Vtotals 0120                      __size_of_gotoXY 0013  
                         ??___awtoft 007C                           ??___ftpack 0075  
                  __end_of_eval_poly 13A0                              __ptext1 08CF  
                            __ptext2 169C                              __ptext3 11D6  
                            __ptext4 1340                              __ptext5 0007  
                            __ptext6 1EE0                              __ptext7 09B6  
                            __ptext8 0AAC                              __ptext9 1E60  
                        ?_cc_cv_mode 0070                _OSCILLATOR_Initialize 1E13  
                          _T2CONbits 028E                              _current 00A8  
                       __size_of_log 00B0                       ADCRead@channel 0073  
                   ___aldiv@dividend 0074                            _T4CONbits 0294  
           ??_PIN_MANAGER_Initialize 0070           __size_of_SYSTEM_Initialize 003B  
                            clrloop0 1E1D                              _voltage 00A0  
       ??_Init_Battery_State_Machine 003F                 end_of_initialization 07FD  
              LCDWriteCharacter@base 007A                              gotoXY@x 0077  
                            gotoXY@y 0075                              init_ram 1E28  
                            initloop 1E29                           ??_tempCalc 007E  
                   ___aldiv@quotient 0022                           _otherState 006B  
                  _LCDWriteCharacter 12EC                __CFG_WDTCPS$WDTCPS_31 0000  
                 ?_LCDWriteCharacter 0070                   readVAnalog@channel 0026  
         __size_of_calculateCurrent0 0045           __size_of_calculateCurrent2 0021  
         __size_of_calculateCurrent3 0045                            _TRISAbits 0011  
                ??_LCDWriteCharacter 0076                     __CFG_FEXTOSC$OFF 0000  
       PWM1_LoadDutyValue@dutyCycle1 0070                          _CCP1CONbits 030E  
                        ___ftdiv@exp 002F                  __size_of_cc_cv_mode 013F  
                  __size_of_LCDClear 0026           LCDWriteCharacter@character 0079  
                  __size_of_LCDWrite 0025                          ___ftmul@exp 002B  
          __end_of_LCDWriteCharacter 1340                          ?_readButton 0070  
                          _Ichannels 0161            readIAnalog@analog_channel 0079  
                     __end_of___bmul 1E71                       __end_of___ftge 0043  
                          _VHoldMode 0060                       __end_of___wmul 1EE0  
                     _ADC_Initialize 1EFE                       __end_of_gotoXY 1E84  
             ?_OSCILLATOR_Initialize 0070                            _IminCount 00BC  
                start_initialization 07B1                           eval_poly@d 0041  
                         eval_poly@n 0043                           eval_poly@x 003E  
                  main@faultNotReset 00D0      __size_of_PIN_MANAGER_Initialize 0037  
                        __end_of_log 174C                        ??_LCDWriteInt 0044  
                         frexp@value 0070                         _IsampleIndex 0066  
                   ??_PWM_Initialize 0070                        ??_readIAnalog 0028  
                          _Vchannels 0159                     __CFG_LPBOREN$OFF 0000  
                      ??_readVAnalog 0028                             ??___bmul 0071  
                           ??___ftge 0037                    tempCalc@steinhart 0056  
                           ??___wmul 0074               __end_of_ADC_Initialize 1F1D  
                      _tempCalc$1304 0053                          __pdataBANK0 006D  
                        __pdataBANK2 0159           __end_of_PWM7_LoadDutyValue 0816  
                           ??_gotoXY 0076                             ?_ADCRead 0070  
       PWM7_LoadDutyValue@dutyCycle7 0070                    __size_of___awtoft 0021  
                           ?_LCDInit 0070                    __size_of___ftpack 0064  
                        __pbssBIGRAM 2260                     readVAnalog@value 007B  
     __size_of_Battery_State_Machine 01B5        __end_of_Battery_State_Machine 1000  
                          ___latbits 0002                        __pcstackBANK0 0020  
                      __pcstackBANK1 00CA                   _PWM6_LoadDutyValue 1EAF  
           __size_of_TMR2_Initialize 000E   __end_of_Init_Battery_State_Machine 1468  
         _Init_Battery_State_Machine 1404                  __size_of_readButton 0082  
                ?_PWM6_LoadDutyValue 0070                  __end_of_LCDWriteInt 08CF  
                        _batteryTemp 006D          __size_of_PWM1_LoadDutyValue 0016  
                          _main$1305 00E7               _PIN_MANAGER_Initialize 1FC9  
         __size_of_LCDWriteCharacter 0054                             ?___aldiv 0070  
                __end_of_readIAnalog 0D0C                    __size_of_tempCalc 00E7  
                           ?___awdiv 0070                             ?___ftadd 0031  
                           ?___ftdiv 0021                             ?___ftmul 0021  
                           ?___ftsub 003E                             ?___fttol 0031  
                   LCDWriteInt@value 003F                             ?___lwmod 0070  
                    ?_ADC_Initialize 0070                 ??_PWM6_LoadDutyValue 0072  
                       ??_cc_cv_mode 003F                  __end_of_readVAnalog 0BCE  
                          _eval_poly 1340             __size_of_TMR4_Initialize 000E  
                     __size_of_frexp 003B                             _T2CLKCON 0290  
                           _T4CLKCON 0296                          cc_cv_mode@z 0046  
                           _LCDClear 1FA3                      ___aldiv@divisor 0070  
                    ___aldiv@counter 0020                       ___wmul@product 0074  
                           _LATAbits 0016                             _LCDWrite 1F7E  
                          clear_ram0 1E1C                             _PIE0bits 0716  
                 __end_of_cc_cv_mode 0E4B                             _PIR4bits 0710  
                   readIAnalog@value 007B                            main@MPPT0 00DC  
                          main@MPPT1 00DE                     __size_of_ADCRead 0015  
                         _ADCON0bits 0093                    ___wmul@multiplier 0070  
                         ?_eval_poly 003E                     __size_of_LCDInit 003B  
                           _Ianalogs 0140                          _LCDWriteInt 0816  
        Init_Battery_State_Machine@z 0043                    ??_TMR2_Initialize 0070  
                           _Isamples 2260                          _readIAnalog 0BCE  
                          frexp@eptr 0073                             _Vanalogs 0148  
                        _readVAnalog 0AAC                         ??_readButton 0074  
            ??_OSCILLATOR_Initialize 0070                 LCDWriteInt@numPlaces 0042  
                   __size_of___aldiv 0082                     __size_of___awdiv 0051  
                   __size_of___ftadd 00F6                     __size_of___ftdiv 00A9  
                   __size_of___ftmul 00B4                     __size_of___ftsub 001E  
                   __size_of___fttol 0087                             _Vsamples 01A0  
                   __size_of___lwmod 002C                          _readButtons 005E  
                           ___awtoft 1F3C                             ___ftpack 13A0  
                           __ptext10 0BCE                             __ptext11 14EA  
                           __ptext20 1E42                             __ptext12 1468  
                           __ptext21 1E34                             __ptext13 1E84  
                           __ptext30 0800                             __ptext22 1F1D  
                           __ptext14 0D0C                             __ptext31 1EAF  
                           __ptext23 1FC9                             __ptext15 1256  
                           __ptext40 156C                             __ptext32 1E99  
                           __ptext24 1E13                             __ptext16 1F5D  
                           __ptext41 174C                             __ptext33 0816  
                           __ptext25 1160                             __ptext17 1211  
                           __ptext42 1F3C                             __ptext34 1134  
                           __ptext26 1FA3                             __ptext18 15F3  
                           __ptext43 13A0                             __ptext35 129B  
                           __ptext27 1E71                             __ptext19 119B  
                           __ptext36 12EC                             __ptext28 1404  
                           __ptext37 1EC5                             __ptext29 1EFE  
                           __ptext38 1F7E                             __ptext39 0E4B  
                    LCDWriteInt@sign 0043                            tempCalc@R 0050  
                 __end_of_readButton 14EA                    ??_TMR4_Initialize 0070  
                      __size_of_main 076E                 __CFG_WDTCWS$WDTCWS_7 0000  
                           _tempCalc 08CF                      main@tempVoltage 00D2  
        PIN_MANAGER_Initialize@state 0070                             log@coeff 1800  
                        ??_eval_poly 007E                   _PWM7_LoadDutyValue 0800  
        ?_Init_Battery_State_Machine 0070                     ___lwmod@dividend 0072  
                     LCDWriteInt@str 0048              ?_PIN_MANAGER_Initialize 0070  
                ?_PWM7_LoadDutyValue 0070                    __CFG_CLKOUTEN$OFF 0000  
                        _PPSLOCKbits 0E8F                     ??_ADC_Initialize 0070  
       PWM6_LoadDutyValue@dutyCycle6 0070                        __pstringtext1 1000  
                      __pstringtext2 1800                 ??_PWM7_LoadDutyValue 0072  
                    ___lwmod@divisor 0070                      ___lwmod@counter 0075  
                       ___aldiv@sign 0021                   readIAnalog@channel 0026  
              _Battery_State_Machine 0E4B       __end_of_PIN_MANAGER_Initialize 2000  
         __end_of_PWM1_LoadDutyValue 1EAF  
