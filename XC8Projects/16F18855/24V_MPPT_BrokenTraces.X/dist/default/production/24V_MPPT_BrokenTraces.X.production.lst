

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Thu Sep 13 13:28:04 2018

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	dabs	1,0x620,48
    65                           	dabs	1,0x5A0,80
    66                           	dabs	1,0x520,80
    67                           	dabs	1,0x4A0,80
    68                           	dabs	1,0x420,80
    69                           	dabs	1,0x3D0,32
    70                           	dabs	1,0x2260,0,_Isamples
    71                           	dabs	1,0x7E,2
    72  0000                     	;# 
    73  0001                     	;# 
    74  0002                     	;# 
    75  0003                     	;# 
    76  0004                     	;# 
    77  0005                     	;# 
    78  0006                     	;# 
    79  0007                     	;# 
    80  0008                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  000C                     	;# 
    85  000D                     	;# 
    86  000E                     	;# 
    87  0010                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0013                     	;# 
    91  0016                     	;# 
    92  0017                     	;# 
    93  0018                     	;# 
    94  001C                     	;# 
    95  001C                     	;# 
    96  001D                     	;# 
    97  001D                     	;# 
    98  001E                     	;# 
    99  001F                     	;# 
   100  008C                     	;# 
   101  008C                     	;# 
   102  008D                     	;# 
   103  008E                     	;# 
   104  008E                     	;# 
   105  008F                     	;# 
   106  0090                     	;# 
   107  0090                     	;# 
   108  0091                     	;# 
   109  0093                     	;# 
   110  0094                     	;# 
   111  0095                     	;# 
   112  0096                     	;# 
   113  0097                     	;# 
   114  0098                     	;# 
   115  0099                     	;# 
   116  009A                     	;# 
   117  009B                     	;# 
   118  009C                     	;# 
   119  009D                     	;# 
   120  009E                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  010E                     	;# 
   125  010F                     	;# 
   126  0110                     	;# 
   127  0110                     	;# 
   128  0111                     	;# 
   129  0112                     	;# 
   130  0112                     	;# 
   131  0113                     	;# 
   132  0114                     	;# 
   133  0114                     	;# 
   134  0115                     	;# 
   135  0116                     	;# 
   136  0116                     	;# 
   137  0117                     	;# 
   138  0119                     	;# 
   139  0119                     	;# 
   140  0119                     	;# 
   141  011A                     	;# 
   142  011A                     	;# 
   143  011A                     	;# 
   144  011B                     	;# 
   145  011B                     	;# 
   146  011B                     	;# 
   147  011B                     	;# 
   148  011B                     	;# 
   149  011C                     	;# 
   150  011C                     	;# 
   151  011C                     	;# 
   152  011D                     	;# 
   153  011D                     	;# 
   154  011D                     	;# 
   155  011E                     	;# 
   156  011E                     	;# 
   157  011E                     	;# 
   158  011F                     	;# 
   159  011F                     	;# 
   160  011F                     	;# 
   161  011F                     	;# 
   162  011F                     	;# 
   163  018C                     	;# 
   164  018D                     	;# 
   165  018E                     	;# 
   166  018F                     	;# 
   167  0190                     	;# 
   168  0191                     	;# 
   169  0192                     	;# 
   170  0196                     	;# 
   171  0197                     	;# 
   172  0198                     	;# 
   173  0199                     	;# 
   174  019A                     	;# 
   175  019B                     	;# 
   176  019C                     	;# 
   177  020C                     	;# 
   178  020D                     	;# 
   179  020E                     	;# 
   180  020F                     	;# 
   181  020F                     	;# 
   182  0210                     	;# 
   183  0210                     	;# 
   184  0211                     	;# 
   185  0211                     	;# 
   186  0212                     	;# 
   187  0213                     	;# 
   188  0214                     	;# 
   189  0215                     	;# 
   190  0215                     	;# 
   191  0216                     	;# 
   192  0216                     	;# 
   193  0217                     	;# 
   194  0217                     	;# 
   195  0218                     	;# 
   196  0219                     	;# 
   197  021A                     	;# 
   198  021B                     	;# 
   199  021B                     	;# 
   200  021C                     	;# 
   201  021C                     	;# 
   202  021D                     	;# 
   203  021D                     	;# 
   204  021E                     	;# 
   205  021F                     	;# 
   206  028C                     	;# 
   207  028C                     	;# 
   208  028D                     	;# 
   209  028D                     	;# 
   210  028E                     	;# 
   211  028F                     	;# 
   212  0290                     	;# 
   213  0290                     	;# 
   214  0291                     	;# 
   215  0292                     	;# 
   216  0292                     	;# 
   217  0293                     	;# 
   218  0293                     	;# 
   219  0294                     	;# 
   220  0295                     	;# 
   221  0296                     	;# 
   222  0296                     	;# 
   223  0297                     	;# 
   224  0298                     	;# 
   225  0298                     	;# 
   226  0299                     	;# 
   227  0299                     	;# 
   228  029A                     	;# 
   229  029B                     	;# 
   230  029C                     	;# 
   231  029C                     	;# 
   232  029D                     	;# 
   233  030C                     	;# 
   234  030C                     	;# 
   235  030D                     	;# 
   236  030E                     	;# 
   237  030F                     	;# 
   238  0310                     	;# 
   239  0310                     	;# 
   240  0311                     	;# 
   241  0312                     	;# 
   242  0313                     	;# 
   243  0314                     	;# 
   244  0314                     	;# 
   245  0315                     	;# 
   246  0316                     	;# 
   247  0317                     	;# 
   248  0318                     	;# 
   249  0318                     	;# 
   250  0319                     	;# 
   251  031A                     	;# 
   252  031B                     	;# 
   253  031C                     	;# 
   254  031C                     	;# 
   255  031D                     	;# 
   256  031E                     	;# 
   257  031F                     	;# 
   258  038C                     	;# 
   259  038D                     	;# 
   260  038E                     	;# 
   261  0390                     	;# 
   262  0391                     	;# 
   263  0392                     	;# 
   264  040C                     	;# 
   265  040D                     	;# 
   266  040E                     	;# 
   267  040F                     	;# 
   268  0410                     	;# 
   269  0411                     	;# 
   270  0416                     	;# 
   271  0416                     	;# 
   272  0417                     	;# 
   273  0418                     	;# 
   274  0418                     	;# 
   275  0419                     	;# 
   276  041A                     	;# 
   277  041A                     	;# 
   278  041B                     	;# 
   279  041C                     	;# 
   280  041C                     	;# 
   281  041D                     	;# 
   282  041E                     	;# 
   283  041F                     	;# 
   284  048C                     	;# 
   285  048C                     	;# 
   286  048D                     	;# 
   287  048E                     	;# 
   288  048F                     	;# 
   289  048F                     	;# 
   290  0490                     	;# 
   291  0491                     	;# 
   292  0492                     	;# 
   293  0492                     	;# 
   294  0493                     	;# 
   295  0494                     	;# 
   296  0495                     	;# 
   297  0495                     	;# 
   298  0496                     	;# 
   299  0497                     	;# 
   300  0498                     	;# 
   301  0499                     	;# 
   302  049A                     	;# 
   303  049B                     	;# 
   304  049C                     	;# 
   305  049D                     	;# 
   306  050C                     	;# 
   307  050C                     	;# 
   308  050D                     	;# 
   309  050E                     	;# 
   310  050F                     	;# 
   311  050F                     	;# 
   312  0510                     	;# 
   313  0511                     	;# 
   314  0512                     	;# 
   315  0512                     	;# 
   316  0513                     	;# 
   317  0514                     	;# 
   318  0515                     	;# 
   319  0515                     	;# 
   320  0516                     	;# 
   321  0517                     	;# 
   322  0518                     	;# 
   323  0519                     	;# 
   324  051A                     	;# 
   325  051B                     	;# 
   326  051C                     	;# 
   327  051D                     	;# 
   328  058C                     	;# 
   329  058C                     	;# 
   330  058D                     	;# 
   331  058E                     	;# 
   332  058F                     	;# 
   333  058F                     	;# 
   334  0590                     	;# 
   335  0591                     	;# 
   336  0592                     	;# 
   337  0593                     	;# 
   338  060C                     	;# 
   339  060D                     	;# 
   340  060E                     	;# 
   341  060F                     	;# 
   342  0610                     	;# 
   343  0611                     	;# 
   344  0612                     	;# 
   345  0613                     	;# 
   346  0614                     	;# 
   347  0616                     	;# 
   348  0617                     	;# 
   349  0618                     	;# 
   350  0619                     	;# 
   351  061A                     	;# 
   352  061B                     	;# 
   353  061C                     	;# 
   354  061D                     	;# 
   355  061E                     	;# 
   356  068C                     	;# 
   357  068D                     	;# 
   358  068E                     	;# 
   359  068F                     	;# 
   360  0690                     	;# 
   361  0691                     	;# 
   362  0692                     	;# 
   363  0693                     	;# 
   364  0694                     	;# 
   365  070C                     	;# 
   366  070D                     	;# 
   367  070E                     	;# 
   368  070F                     	;# 
   369  0710                     	;# 
   370  0711                     	;# 
   371  0712                     	;# 
   372  0713                     	;# 
   373  0714                     	;# 
   374  0716                     	;# 
   375  0717                     	;# 
   376  0718                     	;# 
   377  0719                     	;# 
   378  071A                     	;# 
   379  071B                     	;# 
   380  071C                     	;# 
   381  071D                     	;# 
   382  071E                     	;# 
   383  0796                     	;# 
   384  0797                     	;# 
   385  0798                     	;# 
   386  0799                     	;# 
   387  079A                     	;# 
   388  079B                     	;# 
   389  080C                     	;# 
   390  080D                     	;# 
   391  080E                     	;# 
   392  080F                     	;# 
   393  0810                     	;# 
   394  0811                     	;# 
   395  0812                     	;# 
   396  0813                     	;# 
   397  0814                     	;# 
   398  081A                     	;# 
   399  081B                     	;# 
   400  081C                     	;# 
   401  081D                     	;# 
   402  081E                     	;# 
   403  081F                     	;# 
   404  088C                     	;# 
   405  088D                     	;# 
   406  088E                     	;# 
   407  088F                     	;# 
   408  0890                     	;# 
   409  0891                     	;# 
   410  0892                     	;# 
   411  0893                     	;# 
   412  0895                     	;# 
   413  0896                     	;# 
   414  0897                     	;# 
   415  0898                     	;# 
   416  0899                     	;# 
   417  089A                     	;# 
   418  089B                     	;# 
   419  090C                     	;# 
   420  090E                     	;# 
   421  090F                     	;# 
   422  091F                     	;# 
   423  091F                     	;# 
   424  098F                     	;# 
   425  098F                     	;# 
   426  0990                     	;# 
   427  0991                     	;# 
   428  0992                     	;# 
   429  0993                     	;# 
   430  0994                     	;# 
   431  0995                     	;# 
   432  0996                     	;# 
   433  0997                     	;# 
   434  0E0F                     	;# 
   435  0E10                     	;# 
   436  0E11                     	;# 
   437  0E12                     	;# 
   438  0E13                     	;# 
   439  0E14                     	;# 
   440  0E15                     	;# 
   441  0E16                     	;# 
   442  0E17                     	;# 
   443  0E18                     	;# 
   444  0E19                     	;# 
   445  0E1A                     	;# 
   446  0E1B                     	;# 
   447  0E1C                     	;# 
   448  0E1D                     	;# 
   449  0E1E                     	;# 
   450  0E1F                     	;# 
   451  0E20                     	;# 
   452  0E21                     	;# 
   453  0E22                     	;# 
   454  0E23                     	;# 
   455  0E24                     	;# 
   456  0E25                     	;# 
   457  0E26                     	;# 
   458  0E27                     	;# 
   459  0E28                     	;# 
   460  0E29                     	;# 
   461  0E2A                     	;# 
   462  0E2B                     	;# 
   463  0E2C                     	;# 
   464  0E2D                     	;# 
   465  0E2E                     	;# 
   466  0E2F                     	;# 
   467  0E30                     	;# 
   468  0E31                     	;# 
   469  0E32                     	;# 
   470  0E33                     	;# 
   471  0E34                     	;# 
   472  0E35                     	;# 
   473  0E36                     	;# 
   474  0E37                     	;# 
   475  0E8F                     	;# 
   476  0E90                     	;# 
   477  0E91                     	;# 
   478  0E92                     	;# 
   479  0E93                     	;# 
   480  0E94                     	;# 
   481  0E95                     	;# 
   482  0E96                     	;# 
   483  0E97                     	;# 
   484  0E9C                     	;# 
   485  0E9D                     	;# 
   486  0E9E                     	;# 
   487  0EA1                     	;# 
   488  0EA2                     	;# 
   489  0EA3                     	;# 
   490  0EA4                     	;# 
   491  0EA5                     	;# 
   492  0EA9                     	;# 
   493  0EAA                     	;# 
   494  0EAB                     	;# 
   495  0EAC                     	;# 
   496  0EB1                     	;# 
   497  0EB2                     	;# 
   498  0EB3                     	;# 
   499  0EB8                     	;# 
   500  0EB9                     	;# 
   501  0EBA                     	;# 
   502  0EBB                     	;# 
   503  0EBC                     	;# 
   504  0EBD                     	;# 
   505  0EBE                     	;# 
   506  0EC3                     	;# 
   507  0EC5                     	;# 
   508  0EC6                     	;# 
   509  0EC7                     	;# 
   510  0EC8                     	;# 
   511  0EC9                     	;# 
   512  0ECA                     	;# 
   513  0ECB                     	;# 
   514  0ECC                     	;# 
   515  0F10                     	;# 
   516  0F11                     	;# 
   517  0F12                     	;# 
   518  0F13                     	;# 
   519  0F14                     	;# 
   520  0F15                     	;# 
   521  0F16                     	;# 
   522  0F17                     	;# 
   523  0F18                     	;# 
   524  0F19                     	;# 
   525  0F1A                     	;# 
   526  0F1B                     	;# 
   527  0F1C                     	;# 
   528  0F1D                     	;# 
   529  0F1E                     	;# 
   530  0F1F                     	;# 
   531  0F20                     	;# 
   532  0F21                     	;# 
   533  0F22                     	;# 
   534  0F23                     	;# 
   535  0F24                     	;# 
   536  0F25                     	;# 
   537  0F26                     	;# 
   538  0F27                     	;# 
   539  0F38                     	;# 
   540  0F39                     	;# 
   541  0F3A                     	;# 
   542  0F3B                     	;# 
   543  0F3C                     	;# 
   544  0F3D                     	;# 
   545  0F3E                     	;# 
   546  0F3F                     	;# 
   547  0F40                     	;# 
   548  0F41                     	;# 
   549  0F43                     	;# 
   550  0F44                     	;# 
   551  0F45                     	;# 
   552  0F46                     	;# 
   553  0F47                     	;# 
   554  0F48                     	;# 
   555  0F49                     	;# 
   556  0F4A                     	;# 
   557  0F4B                     	;# 
   558  0F4C                     	;# 
   559  0F4E                     	;# 
   560  0F4F                     	;# 
   561  0F50                     	;# 
   562  0F51                     	;# 
   563  0F52                     	;# 
   564  0F53                     	;# 
   565  0F54                     	;# 
   566  0F55                     	;# 
   567  0F56                     	;# 
   568  0F57                     	;# 
   569  0F65                     	;# 
   570  0F68                     	;# 
   571  0F69                     	;# 
   572  0F6A                     	;# 
   573  0F6B                     	;# 
   574  0FE4                     	;# 
   575  0FE5                     	;# 
   576  0FE6                     	;# 
   577  0FE7                     	;# 
   578  0FE8                     	;# 
   579  0FE9                     	;# 
   580  0FEA                     	;# 
   581  0FEB                     	;# 
   582  0FED                     	;# 
   583  0FEE                     	;# 
   584  0FEF                     	;# 
   585  0000                     	;# 
   586  0001                     	;# 
   587  0002                     	;# 
   588  0003                     	;# 
   589  0004                     	;# 
   590  0005                     	;# 
   591  0006                     	;# 
   592  0007                     	;# 
   593  0008                     	;# 
   594  0009                     	;# 
   595  000A                     	;# 
   596  000B                     	;# 
   597  000C                     	;# 
   598  000D                     	;# 
   599  000E                     	;# 
   600  0010                     	;# 
   601  0011                     	;# 
   602  0012                     	;# 
   603  0013                     	;# 
   604  0016                     	;# 
   605  0017                     	;# 
   606  0018                     	;# 
   607  001C                     	;# 
   608  001C                     	;# 
   609  001D                     	;# 
   610  001D                     	;# 
   611  001E                     	;# 
   612  001F                     	;# 
   613  008C                     	;# 
   614  008C                     	;# 
   615  008D                     	;# 
   616  008E                     	;# 
   617  008E                     	;# 
   618  008F                     	;# 
   619  0090                     	;# 
   620  0090                     	;# 
   621  0091                     	;# 
   622  0093                     	;# 
   623  0094                     	;# 
   624  0095                     	;# 
   625  0096                     	;# 
   626  0097                     	;# 
   627  0098                     	;# 
   628  0099                     	;# 
   629  009A                     	;# 
   630  009B                     	;# 
   631  009C                     	;# 
   632  009D                     	;# 
   633  009E                     	;# 
   634  010C                     	;# 
   635  010D                     	;# 
   636  010E                     	;# 
   637  010E                     	;# 
   638  010F                     	;# 
   639  0110                     	;# 
   640  0110                     	;# 
   641  0111                     	;# 
   642  0112                     	;# 
   643  0112                     	;# 
   644  0113                     	;# 
   645  0114                     	;# 
   646  0114                     	;# 
   647  0115                     	;# 
   648  0116                     	;# 
   649  0116                     	;# 
   650  0117                     	;# 
   651  0119                     	;# 
   652  0119                     	;# 
   653  0119                     	;# 
   654  011A                     	;# 
   655  011A                     	;# 
   656  011A                     	;# 
   657  011B                     	;# 
   658  011B                     	;# 
   659  011B                     	;# 
   660  011B                     	;# 
   661  011B                     	;# 
   662  011C                     	;# 
   663  011C                     	;# 
   664  011C                     	;# 
   665  011D                     	;# 
   666  011D                     	;# 
   667  011D                     	;# 
   668  011E                     	;# 
   669  011E                     	;# 
   670  011E                     	;# 
   671  011F                     	;# 
   672  011F                     	;# 
   673  011F                     	;# 
   674  011F                     	;# 
   675  011F                     	;# 
   676  018C                     	;# 
   677  018D                     	;# 
   678  018E                     	;# 
   679  018F                     	;# 
   680  0190                     	;# 
   681  0191                     	;# 
   682  0192                     	;# 
   683  0196                     	;# 
   684  0197                     	;# 
   685  0198                     	;# 
   686  0199                     	;# 
   687  019A                     	;# 
   688  019B                     	;# 
   689  019C                     	;# 
   690  020C                     	;# 
   691  020D                     	;# 
   692  020E                     	;# 
   693  020F                     	;# 
   694  020F                     	;# 
   695  0210                     	;# 
   696  0210                     	;# 
   697  0211                     	;# 
   698  0211                     	;# 
   699  0212                     	;# 
   700  0213                     	;# 
   701  0214                     	;# 
   702  0215                     	;# 
   703  0215                     	;# 
   704  0216                     	;# 
   705  0216                     	;# 
   706  0217                     	;# 
   707  0217                     	;# 
   708  0218                     	;# 
   709  0219                     	;# 
   710  021A                     	;# 
   711  021B                     	;# 
   712  021B                     	;# 
   713  021C                     	;# 
   714  021C                     	;# 
   715  021D                     	;# 
   716  021D                     	;# 
   717  021E                     	;# 
   718  021F                     	;# 
   719  028C                     	;# 
   720  028C                     	;# 
   721  028D                     	;# 
   722  028D                     	;# 
   723  028E                     	;# 
   724  028F                     	;# 
   725  0290                     	;# 
   726  0290                     	;# 
   727  0291                     	;# 
   728  0292                     	;# 
   729  0292                     	;# 
   730  0293                     	;# 
   731  0293                     	;# 
   732  0294                     	;# 
   733  0295                     	;# 
   734  0296                     	;# 
   735  0296                     	;# 
   736  0297                     	;# 
   737  0298                     	;# 
   738  0298                     	;# 
   739  0299                     	;# 
   740  0299                     	;# 
   741  029A                     	;# 
   742  029B                     	;# 
   743  029C                     	;# 
   744  029C                     	;# 
   745  029D                     	;# 
   746  030C                     	;# 
   747  030C                     	;# 
   748  030D                     	;# 
   749  030E                     	;# 
   750  030F                     	;# 
   751  0310                     	;# 
   752  0310                     	;# 
   753  0311                     	;# 
   754  0312                     	;# 
   755  0313                     	;# 
   756  0314                     	;# 
   757  0314                     	;# 
   758  0315                     	;# 
   759  0316                     	;# 
   760  0317                     	;# 
   761  0318                     	;# 
   762  0318                     	;# 
   763  0319                     	;# 
   764  031A                     	;# 
   765  031B                     	;# 
   766  031C                     	;# 
   767  031C                     	;# 
   768  031D                     	;# 
   769  031E                     	;# 
   770  031F                     	;# 
   771  038C                     	;# 
   772  038D                     	;# 
   773  038E                     	;# 
   774  0390                     	;# 
   775  0391                     	;# 
   776  0392                     	;# 
   777  040C                     	;# 
   778  040D                     	;# 
   779  040E                     	;# 
   780  040F                     	;# 
   781  0410                     	;# 
   782  0411                     	;# 
   783  0416                     	;# 
   784  0416                     	;# 
   785  0417                     	;# 
   786  0418                     	;# 
   787  0418                     	;# 
   788  0419                     	;# 
   789  041A                     	;# 
   790  041A                     	;# 
   791  041B                     	;# 
   792  041C                     	;# 
   793  041C                     	;# 
   794  041D                     	;# 
   795  041E                     	;# 
   796  041F                     	;# 
   797  048C                     	;# 
   798  048C                     	;# 
   799  048D                     	;# 
   800  048E                     	;# 
   801  048F                     	;# 
   802  048F                     	;# 
   803  0490                     	;# 
   804  0491                     	;# 
   805  0492                     	;# 
   806  0492                     	;# 
   807  0493                     	;# 
   808  0494                     	;# 
   809  0495                     	;# 
   810  0495                     	;# 
   811  0496                     	;# 
   812  0497                     	;# 
   813  0498                     	;# 
   814  0499                     	;# 
   815  049A                     	;# 
   816  049B                     	;# 
   817  049C                     	;# 
   818  049D                     	;# 
   819  050C                     	;# 
   820  050C                     	;# 
   821  050D                     	;# 
   822  050E                     	;# 
   823  050F                     	;# 
   824  050F                     	;# 
   825  0510                     	;# 
   826  0511                     	;# 
   827  0512                     	;# 
   828  0512                     	;# 
   829  0513                     	;# 
   830  0514                     	;# 
   831  0515                     	;# 
   832  0515                     	;# 
   833  0516                     	;# 
   834  0517                     	;# 
   835  0518                     	;# 
   836  0519                     	;# 
   837  051A                     	;# 
   838  051B                     	;# 
   839  051C                     	;# 
   840  051D                     	;# 
   841  058C                     	;# 
   842  058C                     	;# 
   843  058D                     	;# 
   844  058E                     	;# 
   845  058F                     	;# 
   846  058F                     	;# 
   847  0590                     	;# 
   848  0591                     	;# 
   849  0592                     	;# 
   850  0593                     	;# 
   851  060C                     	;# 
   852  060D                     	;# 
   853  060E                     	;# 
   854  060F                     	;# 
   855  0610                     	;# 
   856  0611                     	;# 
   857  0612                     	;# 
   858  0613                     	;# 
   859  0614                     	;# 
   860  0616                     	;# 
   861  0617                     	;# 
   862  0618                     	;# 
   863  0619                     	;# 
   864  061A                     	;# 
   865  061B                     	;# 
   866  061C                     	;# 
   867  061D                     	;# 
   868  061E                     	;# 
   869  068C                     	;# 
   870  068D                     	;# 
   871  068E                     	;# 
   872  068F                     	;# 
   873  0690                     	;# 
   874  0691                     	;# 
   875  0692                     	;# 
   876  0693                     	;# 
   877  0694                     	;# 
   878  070C                     	;# 
   879  070D                     	;# 
   880  070E                     	;# 
   881  070F                     	;# 
   882  0710                     	;# 
   883  0711                     	;# 
   884  0712                     	;# 
   885  0713                     	;# 
   886  0714                     	;# 
   887  0716                     	;# 
   888  0717                     	;# 
   889  0718                     	;# 
   890  0719                     	;# 
   891  071A                     	;# 
   892  071B                     	;# 
   893  071C                     	;# 
   894  071D                     	;# 
   895  071E                     	;# 
   896  0796                     	;# 
   897  0797                     	;# 
   898  0798                     	;# 
   899  0799                     	;# 
   900  079A                     	;# 
   901  079B                     	;# 
   902  080C                     	;# 
   903  080D                     	;# 
   904  080E                     	;# 
   905  080F                     	;# 
   906  0810                     	;# 
   907  0811                     	;# 
   908  0812                     	;# 
   909  0813                     	;# 
   910  0814                     	;# 
   911  081A                     	;# 
   912  081B                     	;# 
   913  081C                     	;# 
   914  081D                     	;# 
   915  081E                     	;# 
   916  081F                     	;# 
   917  088C                     	;# 
   918  088D                     	;# 
   919  088E                     	;# 
   920  088F                     	;# 
   921  0890                     	;# 
   922  0891                     	;# 
   923  0892                     	;# 
   924  0893                     	;# 
   925  0895                     	;# 
   926  0896                     	;# 
   927  0897                     	;# 
   928  0898                     	;# 
   929  0899                     	;# 
   930  089A                     	;# 
   931  089B                     	;# 
   932  090C                     	;# 
   933  090E                     	;# 
   934  090F                     	;# 
   935  091F                     	;# 
   936  091F                     	;# 
   937  098F                     	;# 
   938  098F                     	;# 
   939  0990                     	;# 
   940  0991                     	;# 
   941  0992                     	;# 
   942  0993                     	;# 
   943  0994                     	;# 
   944  0995                     	;# 
   945  0996                     	;# 
   946  0997                     	;# 
   947  0E0F                     	;# 
   948  0E10                     	;# 
   949  0E11                     	;# 
   950  0E12                     	;# 
   951  0E13                     	;# 
   952  0E14                     	;# 
   953  0E15                     	;# 
   954  0E16                     	;# 
   955  0E17                     	;# 
   956  0E18                     	;# 
   957  0E19                     	;# 
   958  0E1A                     	;# 
   959  0E1B                     	;# 
   960  0E1C                     	;# 
   961  0E1D                     	;# 
   962  0E1E                     	;# 
   963  0E1F                     	;# 
   964  0E20                     	;# 
   965  0E21                     	;# 
   966  0E22                     	;# 
   967  0E23                     	;# 
   968  0E24                     	;# 
   969  0E25                     	;# 
   970  0E26                     	;# 
   971  0E27                     	;# 
   972  0E28                     	;# 
   973  0E29                     	;# 
   974  0E2A                     	;# 
   975  0E2B                     	;# 
   976  0E2C                     	;# 
   977  0E2D                     	;# 
   978  0E2E                     	;# 
   979  0E2F                     	;# 
   980  0E30                     	;# 
   981  0E31                     	;# 
   982  0E32                     	;# 
   983  0E33                     	;# 
   984  0E34                     	;# 
   985  0E35                     	;# 
   986  0E36                     	;# 
   987  0E37                     	;# 
   988  0E8F                     	;# 
   989  0E90                     	;# 
   990  0E91                     	;# 
   991  0E92                     	;# 
   992  0E93                     	;# 
   993  0E94                     	;# 
   994  0E95                     	;# 
   995  0E96                     	;# 
   996  0E97                     	;# 
   997  0E9C                     	;# 
   998  0E9D                     	;# 
   999  0E9E                     	;# 
  1000  0EA1                     	;# 
  1001  0EA2                     	;# 
  1002  0EA3                     	;# 
  1003  0EA4                     	;# 
  1004  0EA5                     	;# 
  1005  0EA9                     	;# 
  1006  0EAA                     	;# 
  1007  0EAB                     	;# 
  1008  0EAC                     	;# 
  1009  0EB1                     	;# 
  1010  0EB2                     	;# 
  1011  0EB3                     	;# 
  1012  0EB8                     	;# 
  1013  0EB9                     	;# 
  1014  0EBA                     	;# 
  1015  0EBB                     	;# 
  1016  0EBC                     	;# 
  1017  0EBD                     	;# 
  1018  0EBE                     	;# 
  1019  0EC3                     	;# 
  1020  0EC5                     	;# 
  1021  0EC6                     	;# 
  1022  0EC7                     	;# 
  1023  0EC8                     	;# 
  1024  0EC9                     	;# 
  1025  0ECA                     	;# 
  1026  0ECB                     	;# 
  1027  0ECC                     	;# 
  1028  0F10                     	;# 
  1029  0F11                     	;# 
  1030  0F12                     	;# 
  1031  0F13                     	;# 
  1032  0F14                     	;# 
  1033  0F15                     	;# 
  1034  0F16                     	;# 
  1035  0F17                     	;# 
  1036  0F18                     	;# 
  1037  0F19                     	;# 
  1038  0F1A                     	;# 
  1039  0F1B                     	;# 
  1040  0F1C                     	;# 
  1041  0F1D                     	;# 
  1042  0F1E                     	;# 
  1043  0F1F                     	;# 
  1044  0F20                     	;# 
  1045  0F21                     	;# 
  1046  0F22                     	;# 
  1047  0F23                     	;# 
  1048  0F24                     	;# 
  1049  0F25                     	;# 
  1050  0F26                     	;# 
  1051  0F27                     	;# 
  1052  0F38                     	;# 
  1053  0F39                     	;# 
  1054  0F3A                     	;# 
  1055  0F3B                     	;# 
  1056  0F3C                     	;# 
  1057  0F3D                     	;# 
  1058  0F3E                     	;# 
  1059  0F3F                     	;# 
  1060  0F40                     	;# 
  1061  0F41                     	;# 
  1062  0F43                     	;# 
  1063  0F44                     	;# 
  1064  0F45                     	;# 
  1065  0F46                     	;# 
  1066  0F47                     	;# 
  1067  0F48                     	;# 
  1068  0F49                     	;# 
  1069  0F4A                     	;# 
  1070  0F4B                     	;# 
  1071  0F4C                     	;# 
  1072  0F4E                     	;# 
  1073  0F4F                     	;# 
  1074  0F50                     	;# 
  1075  0F51                     	;# 
  1076  0F52                     	;# 
  1077  0F53                     	;# 
  1078  0F54                     	;# 
  1079  0F55                     	;# 
  1080  0F56                     	;# 
  1081  0F57                     	;# 
  1082  0F65                     	;# 
  1083  0F68                     	;# 
  1084  0F69                     	;# 
  1085  0F6A                     	;# 
  1086  0F6B                     	;# 
  1087  0FE4                     	;# 
  1088  0FE5                     	;# 
  1089  0FE6                     	;# 
  1090  0FE7                     	;# 
  1091  0FE8                     	;# 
  1092  0FE9                     	;# 
  1093  0FEA                     	;# 
  1094  0FEB                     	;# 
  1095  0FED                     	;# 
  1096  0FEE                     	;# 
  1097  0FEF                     	;# 
  1098  0000                     	;# 
  1099  0001                     	;# 
  1100  0002                     	;# 
  1101  0003                     	;# 
  1102  0004                     	;# 
  1103  0005                     	;# 
  1104  0006                     	;# 
  1105  0007                     	;# 
  1106  0008                     	;# 
  1107  0009                     	;# 
  1108  000A                     	;# 
  1109  000B                     	;# 
  1110  000C                     	;# 
  1111  000D                     	;# 
  1112  000E                     	;# 
  1113  0010                     	;# 
  1114  0011                     	;# 
  1115  0012                     	;# 
  1116  0013                     	;# 
  1117  0016                     	;# 
  1118  0017                     	;# 
  1119  0018                     	;# 
  1120  001C                     	;# 
  1121  001C                     	;# 
  1122  001D                     	;# 
  1123  001D                     	;# 
  1124  001E                     	;# 
  1125  001F                     	;# 
  1126  008C                     	;# 
  1127  008C                     	;# 
  1128  008D                     	;# 
  1129  008E                     	;# 
  1130  008E                     	;# 
  1131  008F                     	;# 
  1132  0090                     	;# 
  1133  0090                     	;# 
  1134  0091                     	;# 
  1135  0093                     	;# 
  1136  0094                     	;# 
  1137  0095                     	;# 
  1138  0096                     	;# 
  1139  0097                     	;# 
  1140  0098                     	;# 
  1141  0099                     	;# 
  1142  009A                     	;# 
  1143  009B                     	;# 
  1144  009C                     	;# 
  1145  009D                     	;# 
  1146  009E                     	;# 
  1147  010C                     	;# 
  1148  010D                     	;# 
  1149  010E                     	;# 
  1150  010E                     	;# 
  1151  010F                     	;# 
  1152  0110                     	;# 
  1153  0110                     	;# 
  1154  0111                     	;# 
  1155  0112                     	;# 
  1156  0112                     	;# 
  1157  0113                     	;# 
  1158  0114                     	;# 
  1159  0114                     	;# 
  1160  0115                     	;# 
  1161  0116                     	;# 
  1162  0116                     	;# 
  1163  0117                     	;# 
  1164  0119                     	;# 
  1165  0119                     	;# 
  1166  0119                     	;# 
  1167  011A                     	;# 
  1168  011A                     	;# 
  1169  011A                     	;# 
  1170  011B                     	;# 
  1171  011B                     	;# 
  1172  011B                     	;# 
  1173  011B                     	;# 
  1174  011B                     	;# 
  1175  011C                     	;# 
  1176  011C                     	;# 
  1177  011C                     	;# 
  1178  011D                     	;# 
  1179  011D                     	;# 
  1180  011D                     	;# 
  1181  011E                     	;# 
  1182  011E                     	;# 
  1183  011E                     	;# 
  1184  011F                     	;# 
  1185  011F                     	;# 
  1186  011F                     	;# 
  1187  011F                     	;# 
  1188  011F                     	;# 
  1189  018C                     	;# 
  1190  018D                     	;# 
  1191  018E                     	;# 
  1192  018F                     	;# 
  1193  0190                     	;# 
  1194  0191                     	;# 
  1195  0192                     	;# 
  1196  0196                     	;# 
  1197  0197                     	;# 
  1198  0198                     	;# 
  1199  0199                     	;# 
  1200  019A                     	;# 
  1201  019B                     	;# 
  1202  019C                     	;# 
  1203  020C                     	;# 
  1204  020D                     	;# 
  1205  020E                     	;# 
  1206  020F                     	;# 
  1207  020F                     	;# 
  1208  0210                     	;# 
  1209  0210                     	;# 
  1210  0211                     	;# 
  1211  0211                     	;# 
  1212  0212                     	;# 
  1213  0213                     	;# 
  1214  0214                     	;# 
  1215  0215                     	;# 
  1216  0215                     	;# 
  1217  0216                     	;# 
  1218  0216                     	;# 
  1219  0217                     	;# 
  1220  0217                     	;# 
  1221  0218                     	;# 
  1222  0219                     	;# 
  1223  021A                     	;# 
  1224  021B                     	;# 
  1225  021B                     	;# 
  1226  021C                     	;# 
  1227  021C                     	;# 
  1228  021D                     	;# 
  1229  021D                     	;# 
  1230  021E                     	;# 
  1231  021F                     	;# 
  1232  028C                     	;# 
  1233  028C                     	;# 
  1234  028D                     	;# 
  1235  028D                     	;# 
  1236  028E                     	;# 
  1237  028F                     	;# 
  1238  0290                     	;# 
  1239  0290                     	;# 
  1240  0291                     	;# 
  1241  0292                     	;# 
  1242  0292                     	;# 
  1243  0293                     	;# 
  1244  0293                     	;# 
  1245  0294                     	;# 
  1246  0295                     	;# 
  1247  0296                     	;# 
  1248  0296                     	;# 
  1249  0297                     	;# 
  1250  0298                     	;# 
  1251  0298                     	;# 
  1252  0299                     	;# 
  1253  0299                     	;# 
  1254  029A                     	;# 
  1255  029B                     	;# 
  1256  029C                     	;# 
  1257  029C                     	;# 
  1258  029D                     	;# 
  1259  030C                     	;# 
  1260  030C                     	;# 
  1261  030D                     	;# 
  1262  030E                     	;# 
  1263  030F                     	;# 
  1264  0310                     	;# 
  1265  0310                     	;# 
  1266  0311                     	;# 
  1267  0312                     	;# 
  1268  0313                     	;# 
  1269  0314                     	;# 
  1270  0314                     	;# 
  1271  0315                     	;# 
  1272  0316                     	;# 
  1273  0317                     	;# 
  1274  0318                     	;# 
  1275  0318                     	;# 
  1276  0319                     	;# 
  1277  031A                     	;# 
  1278  031B                     	;# 
  1279  031C                     	;# 
  1280  031C                     	;# 
  1281  031D                     	;# 
  1282  031E                     	;# 
  1283  031F                     	;# 
  1284  038C                     	;# 
  1285  038D                     	;# 
  1286  038E                     	;# 
  1287  0390                     	;# 
  1288  0391                     	;# 
  1289  0392                     	;# 
  1290  040C                     	;# 
  1291  040D                     	;# 
  1292  040E                     	;# 
  1293  040F                     	;# 
  1294  0410                     	;# 
  1295  0411                     	;# 
  1296  0416                     	;# 
  1297  0416                     	;# 
  1298  0417                     	;# 
  1299  0418                     	;# 
  1300  0418                     	;# 
  1301  0419                     	;# 
  1302  041A                     	;# 
  1303  041A                     	;# 
  1304  041B                     	;# 
  1305  041C                     	;# 
  1306  041C                     	;# 
  1307  041D                     	;# 
  1308  041E                     	;# 
  1309  041F                     	;# 
  1310  048C                     	;# 
  1311  048C                     	;# 
  1312  048D                     	;# 
  1313  048E                     	;# 
  1314  048F                     	;# 
  1315  048F                     	;# 
  1316  0490                     	;# 
  1317  0491                     	;# 
  1318  0492                     	;# 
  1319  0492                     	;# 
  1320  0493                     	;# 
  1321  0494                     	;# 
  1322  0495                     	;# 
  1323  0495                     	;# 
  1324  0496                     	;# 
  1325  0497                     	;# 
  1326  0498                     	;# 
  1327  0499                     	;# 
  1328  049A                     	;# 
  1329  049B                     	;# 
  1330  049C                     	;# 
  1331  049D                     	;# 
  1332  050C                     	;# 
  1333  050C                     	;# 
  1334  050D                     	;# 
  1335  050E                     	;# 
  1336  050F                     	;# 
  1337  050F                     	;# 
  1338  0510                     	;# 
  1339  0511                     	;# 
  1340  0512                     	;# 
  1341  0512                     	;# 
  1342  0513                     	;# 
  1343  0514                     	;# 
  1344  0515                     	;# 
  1345  0515                     	;# 
  1346  0516                     	;# 
  1347  0517                     	;# 
  1348  0518                     	;# 
  1349  0519                     	;# 
  1350  051A                     	;# 
  1351  051B                     	;# 
  1352  051C                     	;# 
  1353  051D                     	;# 
  1354  058C                     	;# 
  1355  058C                     	;# 
  1356  058D                     	;# 
  1357  058E                     	;# 
  1358  058F                     	;# 
  1359  058F                     	;# 
  1360  0590                     	;# 
  1361  0591                     	;# 
  1362  0592                     	;# 
  1363  0593                     	;# 
  1364  060C                     	;# 
  1365  060D                     	;# 
  1366  060E                     	;# 
  1367  060F                     	;# 
  1368  0610                     	;# 
  1369  0611                     	;# 
  1370  0612                     	;# 
  1371  0613                     	;# 
  1372  0614                     	;# 
  1373  0616                     	;# 
  1374  0617                     	;# 
  1375  0618                     	;# 
  1376  0619                     	;# 
  1377  061A                     	;# 
  1378  061B                     	;# 
  1379  061C                     	;# 
  1380  061D                     	;# 
  1381  061E                     	;# 
  1382  068C                     	;# 
  1383  068D                     	;# 
  1384  068E                     	;# 
  1385  068F                     	;# 
  1386  0690                     	;# 
  1387  0691                     	;# 
  1388  0692                     	;# 
  1389  0693                     	;# 
  1390  0694                     	;# 
  1391  070C                     	;# 
  1392  070D                     	;# 
  1393  070E                     	;# 
  1394  070F                     	;# 
  1395  0710                     	;# 
  1396  0711                     	;# 
  1397  0712                     	;# 
  1398  0713                     	;# 
  1399  0714                     	;# 
  1400  0716                     	;# 
  1401  0717                     	;# 
  1402  0718                     	;# 
  1403  0719                     	;# 
  1404  071A                     	;# 
  1405  071B                     	;# 
  1406  071C                     	;# 
  1407  071D                     	;# 
  1408  071E                     	;# 
  1409  0796                     	;# 
  1410  0797                     	;# 
  1411  0798                     	;# 
  1412  0799                     	;# 
  1413  079A                     	;# 
  1414  079B                     	;# 
  1415  080C                     	;# 
  1416  080D                     	;# 
  1417  080E                     	;# 
  1418  080F                     	;# 
  1419  0810                     	;# 
  1420  0811                     	;# 
  1421  0812                     	;# 
  1422  0813                     	;# 
  1423  0814                     	;# 
  1424  081A                     	;# 
  1425  081B                     	;# 
  1426  081C                     	;# 
  1427  081D                     	;# 
  1428  081E                     	;# 
  1429  081F                     	;# 
  1430  088C                     	;# 
  1431  088D                     	;# 
  1432  088E                     	;# 
  1433  088F                     	;# 
  1434  0890                     	;# 
  1435  0891                     	;# 
  1436  0892                     	;# 
  1437  0893                     	;# 
  1438  0895                     	;# 
  1439  0896                     	;# 
  1440  0897                     	;# 
  1441  0898                     	;# 
  1442  0899                     	;# 
  1443  089A                     	;# 
  1444  089B                     	;# 
  1445  090C                     	;# 
  1446  090E                     	;# 
  1447  090F                     	;# 
  1448  091F                     	;# 
  1449  091F                     	;# 
  1450  098F                     	;# 
  1451  098F                     	;# 
  1452  0990                     	;# 
  1453  0991                     	;# 
  1454  0992                     	;# 
  1455  0993                     	;# 
  1456  0994                     	;# 
  1457  0995                     	;# 
  1458  0996                     	;# 
  1459  0997                     	;# 
  1460  0E0F                     	;# 
  1461  0E10                     	;# 
  1462  0E11                     	;# 
  1463  0E12                     	;# 
  1464  0E13                     	;# 
  1465  0E14                     	;# 
  1466  0E15                     	;# 
  1467  0E16                     	;# 
  1468  0E17                     	;# 
  1469  0E18                     	;# 
  1470  0E19                     	;# 
  1471  0E1A                     	;# 
  1472  0E1B                     	;# 
  1473  0E1C                     	;# 
  1474  0E1D                     	;# 
  1475  0E1E                     	;# 
  1476  0E1F                     	;# 
  1477  0E20                     	;# 
  1478  0E21                     	;# 
  1479  0E22                     	;# 
  1480  0E23                     	;# 
  1481  0E24                     	;# 
  1482  0E25                     	;# 
  1483  0E26                     	;# 
  1484  0E27                     	;# 
  1485  0E28                     	;# 
  1486  0E29                     	;# 
  1487  0E2A                     	;# 
  1488  0E2B                     	;# 
  1489  0E2C                     	;# 
  1490  0E2D                     	;# 
  1491  0E2E                     	;# 
  1492  0E2F                     	;# 
  1493  0E30                     	;# 
  1494  0E31                     	;# 
  1495  0E32                     	;# 
  1496  0E33                     	;# 
  1497  0E34                     	;# 
  1498  0E35                     	;# 
  1499  0E36                     	;# 
  1500  0E37                     	;# 
  1501  0E8F                     	;# 
  1502  0E90                     	;# 
  1503  0E91                     	;# 
  1504  0E92                     	;# 
  1505  0E93                     	;# 
  1506  0E94                     	;# 
  1507  0E95                     	;# 
  1508  0E96                     	;# 
  1509  0E97                     	;# 
  1510  0E9C                     	;# 
  1511  0E9D                     	;# 
  1512  0E9E                     	;# 
  1513  0EA1                     	;# 
  1514  0EA2                     	;# 
  1515  0EA3                     	;# 
  1516  0EA4                     	;# 
  1517  0EA5                     	;# 
  1518  0EA9                     	;# 
  1519  0EAA                     	;# 
  1520  0EAB                     	;# 
  1521  0EAC                     	;# 
  1522  0EB1                     	;# 
  1523  0EB2                     	;# 
  1524  0EB3                     	;# 
  1525  0EB8                     	;# 
  1526  0EB9                     	;# 
  1527  0EBA                     	;# 
  1528  0EBB                     	;# 
  1529  0EBC                     	;# 
  1530  0EBD                     	;# 
  1531  0EBE                     	;# 
  1532  0EC3                     	;# 
  1533  0EC5                     	;# 
  1534  0EC6                     	;# 
  1535  0EC7                     	;# 
  1536  0EC8                     	;# 
  1537  0EC9                     	;# 
  1538  0ECA                     	;# 
  1539  0ECB                     	;# 
  1540  0ECC                     	;# 
  1541  0F10                     	;# 
  1542  0F11                     	;# 
  1543  0F12                     	;# 
  1544  0F13                     	;# 
  1545  0F14                     	;# 
  1546  0F15                     	;# 
  1547  0F16                     	;# 
  1548  0F17                     	;# 
  1549  0F18                     	;# 
  1550  0F19                     	;# 
  1551  0F1A                     	;# 
  1552  0F1B                     	;# 
  1553  0F1C                     	;# 
  1554  0F1D                     	;# 
  1555  0F1E                     	;# 
  1556  0F1F                     	;# 
  1557  0F20                     	;# 
  1558  0F21                     	;# 
  1559  0F22                     	;# 
  1560  0F23                     	;# 
  1561  0F24                     	;# 
  1562  0F25                     	;# 
  1563  0F26                     	;# 
  1564  0F27                     	;# 
  1565  0F38                     	;# 
  1566  0F39                     	;# 
  1567  0F3A                     	;# 
  1568  0F3B                     	;# 
  1569  0F3C                     	;# 
  1570  0F3D                     	;# 
  1571  0F3E                     	;# 
  1572  0F3F                     	;# 
  1573  0F40                     	;# 
  1574  0F41                     	;# 
  1575  0F43                     	;# 
  1576  0F44                     	;# 
  1577  0F45                     	;# 
  1578  0F46                     	;# 
  1579  0F47                     	;# 
  1580  0F48                     	;# 
  1581  0F49                     	;# 
  1582  0F4A                     	;# 
  1583  0F4B                     	;# 
  1584  0F4C                     	;# 
  1585  0F4E                     	;# 
  1586  0F4F                     	;# 
  1587  0F50                     	;# 
  1588  0F51                     	;# 
  1589  0F52                     	;# 
  1590  0F53                     	;# 
  1591  0F54                     	;# 
  1592  0F55                     	;# 
  1593  0F56                     	;# 
  1594  0F57                     	;# 
  1595  0F65                     	;# 
  1596  0F68                     	;# 
  1597  0F69                     	;# 
  1598  0F6A                     	;# 
  1599  0F6B                     	;# 
  1600  0FE4                     	;# 
  1601  0FE5                     	;# 
  1602  0FE6                     	;# 
  1603  0FE7                     	;# 
  1604  0FE8                     	;# 
  1605  0FE9                     	;# 
  1606  0FEA                     	;# 
  1607  0FEB                     	;# 
  1608  0FED                     	;# 
  1609  0FEE                     	;# 
  1610  0FEF                     	;# 
  1611  0000                     	;# 
  1612  0001                     	;# 
  1613  0002                     	;# 
  1614  0003                     	;# 
  1615  0004                     	;# 
  1616  0005                     	;# 
  1617  0006                     	;# 
  1618  0007                     	;# 
  1619  0008                     	;# 
  1620  0009                     	;# 
  1621  000A                     	;# 
  1622  000B                     	;# 
  1623  000C                     	;# 
  1624  000D                     	;# 
  1625  000E                     	;# 
  1626  0010                     	;# 
  1627  0011                     	;# 
  1628  0012                     	;# 
  1629  0013                     	;# 
  1630  0016                     	;# 
  1631  0017                     	;# 
  1632  0018                     	;# 
  1633  001C                     	;# 
  1634  001C                     	;# 
  1635  001D                     	;# 
  1636  001D                     	;# 
  1637  001E                     	;# 
  1638  001F                     	;# 
  1639  008C                     	;# 
  1640  008C                     	;# 
  1641  008D                     	;# 
  1642  008E                     	;# 
  1643  008E                     	;# 
  1644  008F                     	;# 
  1645  0090                     	;# 
  1646  0090                     	;# 
  1647  0091                     	;# 
  1648  0093                     	;# 
  1649  0094                     	;# 
  1650  0095                     	;# 
  1651  0096                     	;# 
  1652  0097                     	;# 
  1653  0098                     	;# 
  1654  0099                     	;# 
  1655  009A                     	;# 
  1656  009B                     	;# 
  1657  009C                     	;# 
  1658  009D                     	;# 
  1659  009E                     	;# 
  1660  010C                     	;# 
  1661  010D                     	;# 
  1662  010E                     	;# 
  1663  010E                     	;# 
  1664  010F                     	;# 
  1665  0110                     	;# 
  1666  0110                     	;# 
  1667  0111                     	;# 
  1668  0112                     	;# 
  1669  0112                     	;# 
  1670  0113                     	;# 
  1671  0114                     	;# 
  1672  0114                     	;# 
  1673  0115                     	;# 
  1674  0116                     	;# 
  1675  0116                     	;# 
  1676  0117                     	;# 
  1677  0119                     	;# 
  1678  0119                     	;# 
  1679  0119                     	;# 
  1680  011A                     	;# 
  1681  011A                     	;# 
  1682  011A                     	;# 
  1683  011B                     	;# 
  1684  011B                     	;# 
  1685  011B                     	;# 
  1686  011B                     	;# 
  1687  011B                     	;# 
  1688  011C                     	;# 
  1689  011C                     	;# 
  1690  011C                     	;# 
  1691  011D                     	;# 
  1692  011D                     	;# 
  1693  011D                     	;# 
  1694  011E                     	;# 
  1695  011E                     	;# 
  1696  011E                     	;# 
  1697  011F                     	;# 
  1698  011F                     	;# 
  1699  011F                     	;# 
  1700  011F                     	;# 
  1701  011F                     	;# 
  1702  018C                     	;# 
  1703  018D                     	;# 
  1704  018E                     	;# 
  1705  018F                     	;# 
  1706  0190                     	;# 
  1707  0191                     	;# 
  1708  0192                     	;# 
  1709  0196                     	;# 
  1710  0197                     	;# 
  1711  0198                     	;# 
  1712  0199                     	;# 
  1713  019A                     	;# 
  1714  019B                     	;# 
  1715  019C                     	;# 
  1716  020C                     	;# 
  1717  020D                     	;# 
  1718  020E                     	;# 
  1719  020F                     	;# 
  1720  020F                     	;# 
  1721  0210                     	;# 
  1722  0210                     	;# 
  1723  0211                     	;# 
  1724  0211                     	;# 
  1725  0212                     	;# 
  1726  0213                     	;# 
  1727  0214                     	;# 
  1728  0215                     	;# 
  1729  0215                     	;# 
  1730  0216                     	;# 
  1731  0216                     	;# 
  1732  0217                     	;# 
  1733  0217                     	;# 
  1734  0218                     	;# 
  1735  0219                     	;# 
  1736  021A                     	;# 
  1737  021B                     	;# 
  1738  021B                     	;# 
  1739  021C                     	;# 
  1740  021C                     	;# 
  1741  021D                     	;# 
  1742  021D                     	;# 
  1743  021E                     	;# 
  1744  021F                     	;# 
  1745  028C                     	;# 
  1746  028C                     	;# 
  1747  028D                     	;# 
  1748  028D                     	;# 
  1749  028E                     	;# 
  1750  028F                     	;# 
  1751  0290                     	;# 
  1752  0290                     	;# 
  1753  0291                     	;# 
  1754  0292                     	;# 
  1755  0292                     	;# 
  1756  0293                     	;# 
  1757  0293                     	;# 
  1758  0294                     	;# 
  1759  0295                     	;# 
  1760  0296                     	;# 
  1761  0296                     	;# 
  1762  0297                     	;# 
  1763  0298                     	;# 
  1764  0298                     	;# 
  1765  0299                     	;# 
  1766  0299                     	;# 
  1767  029A                     	;# 
  1768  029B                     	;# 
  1769  029C                     	;# 
  1770  029C                     	;# 
  1771  029D                     	;# 
  1772  030C                     	;# 
  1773  030C                     	;# 
  1774  030D                     	;# 
  1775  030E                     	;# 
  1776  030F                     	;# 
  1777  0310                     	;# 
  1778  0310                     	;# 
  1779  0311                     	;# 
  1780  0312                     	;# 
  1781  0313                     	;# 
  1782  0314                     	;# 
  1783  0314                     	;# 
  1784  0315                     	;# 
  1785  0316                     	;# 
  1786  0317                     	;# 
  1787  0318                     	;# 
  1788  0318                     	;# 
  1789  0319                     	;# 
  1790  031A                     	;# 
  1791  031B                     	;# 
  1792  031C                     	;# 
  1793  031C                     	;# 
  1794  031D                     	;# 
  1795  031E                     	;# 
  1796  031F                     	;# 
  1797  038C                     	;# 
  1798  038D                     	;# 
  1799  038E                     	;# 
  1800  0390                     	;# 
  1801  0391                     	;# 
  1802  0392                     	;# 
  1803  040C                     	;# 
  1804  040D                     	;# 
  1805  040E                     	;# 
  1806  040F                     	;# 
  1807  0410                     	;# 
  1808  0411                     	;# 
  1809  0416                     	;# 
  1810  0416                     	;# 
  1811  0417                     	;# 
  1812  0418                     	;# 
  1813  0418                     	;# 
  1814  0419                     	;# 
  1815  041A                     	;# 
  1816  041A                     	;# 
  1817  041B                     	;# 
  1818  041C                     	;# 
  1819  041C                     	;# 
  1820  041D                     	;# 
  1821  041E                     	;# 
  1822  041F                     	;# 
  1823  048C                     	;# 
  1824  048C                     	;# 
  1825  048D                     	;# 
  1826  048E                     	;# 
  1827  048F                     	;# 
  1828  048F                     	;# 
  1829  0490                     	;# 
  1830  0491                     	;# 
  1831  0492                     	;# 
  1832  0492                     	;# 
  1833  0493                     	;# 
  1834  0494                     	;# 
  1835  0495                     	;# 
  1836  0495                     	;# 
  1837  0496                     	;# 
  1838  0497                     	;# 
  1839  0498                     	;# 
  1840  0499                     	;# 
  1841  049A                     	;# 
  1842  049B                     	;# 
  1843  049C                     	;# 
  1844  049D                     	;# 
  1845  050C                     	;# 
  1846  050C                     	;# 
  1847  050D                     	;# 
  1848  050E                     	;# 
  1849  050F                     	;# 
  1850  050F                     	;# 
  1851  0510                     	;# 
  1852  0511                     	;# 
  1853  0512                     	;# 
  1854  0512                     	;# 
  1855  0513                     	;# 
  1856  0514                     	;# 
  1857  0515                     	;# 
  1858  0515                     	;# 
  1859  0516                     	;# 
  1860  0517                     	;# 
  1861  0518                     	;# 
  1862  0519                     	;# 
  1863  051A                     	;# 
  1864  051B                     	;# 
  1865  051C                     	;# 
  1866  051D                     	;# 
  1867  058C                     	;# 
  1868  058C                     	;# 
  1869  058D                     	;# 
  1870  058E                     	;# 
  1871  058F                     	;# 
  1872  058F                     	;# 
  1873  0590                     	;# 
  1874  0591                     	;# 
  1875  0592                     	;# 
  1876  0593                     	;# 
  1877  060C                     	;# 
  1878  060D                     	;# 
  1879  060E                     	;# 
  1880  060F                     	;# 
  1881  0610                     	;# 
  1882  0611                     	;# 
  1883  0612                     	;# 
  1884  0613                     	;# 
  1885  0614                     	;# 
  1886  0616                     	;# 
  1887  0617                     	;# 
  1888  0618                     	;# 
  1889  0619                     	;# 
  1890  061A                     	;# 
  1891  061B                     	;# 
  1892  061C                     	;# 
  1893  061D                     	;# 
  1894  061E                     	;# 
  1895  068C                     	;# 
  1896  068D                     	;# 
  1897  068E                     	;# 
  1898  068F                     	;# 
  1899  0690                     	;# 
  1900  0691                     	;# 
  1901  0692                     	;# 
  1902  0693                     	;# 
  1903  0694                     	;# 
  1904  070C                     	;# 
  1905  070D                     	;# 
  1906  070E                     	;# 
  1907  070F                     	;# 
  1908  0710                     	;# 
  1909  0711                     	;# 
  1910  0712                     	;# 
  1911  0713                     	;# 
  1912  0714                     	;# 
  1913  0716                     	;# 
  1914  0717                     	;# 
  1915  0718                     	;# 
  1916  0719                     	;# 
  1917  071A                     	;# 
  1918  071B                     	;# 
  1919  071C                     	;# 
  1920  071D                     	;# 
  1921  071E                     	;# 
  1922  0796                     	;# 
  1923  0797                     	;# 
  1924  0798                     	;# 
  1925  0799                     	;# 
  1926  079A                     	;# 
  1927  079B                     	;# 
  1928  080C                     	;# 
  1929  080D                     	;# 
  1930  080E                     	;# 
  1931  080F                     	;# 
  1932  0810                     	;# 
  1933  0811                     	;# 
  1934  0812                     	;# 
  1935  0813                     	;# 
  1936  0814                     	;# 
  1937  081A                     	;# 
  1938  081B                     	;# 
  1939  081C                     	;# 
  1940  081D                     	;# 
  1941  081E                     	;# 
  1942  081F                     	;# 
  1943  088C                     	;# 
  1944  088D                     	;# 
  1945  088E                     	;# 
  1946  088F                     	;# 
  1947  0890                     	;# 
  1948  0891                     	;# 
  1949  0892                     	;# 
  1950  0893                     	;# 
  1951  0895                     	;# 
  1952  0896                     	;# 
  1953  0897                     	;# 
  1954  0898                     	;# 
  1955  0899                     	;# 
  1956  089A                     	;# 
  1957  089B                     	;# 
  1958  090C                     	;# 
  1959  090E                     	;# 
  1960  090F                     	;# 
  1961  091F                     	;# 
  1962  091F                     	;# 
  1963  098F                     	;# 
  1964  098F                     	;# 
  1965  0990                     	;# 
  1966  0991                     	;# 
  1967  0992                     	;# 
  1968  0993                     	;# 
  1969  0994                     	;# 
  1970  0995                     	;# 
  1971  0996                     	;# 
  1972  0997                     	;# 
  1973  0E0F                     	;# 
  1974  0E10                     	;# 
  1975  0E11                     	;# 
  1976  0E12                     	;# 
  1977  0E13                     	;# 
  1978  0E14                     	;# 
  1979  0E15                     	;# 
  1980  0E16                     	;# 
  1981  0E17                     	;# 
  1982  0E18                     	;# 
  1983  0E19                     	;# 
  1984  0E1A                     	;# 
  1985  0E1B                     	;# 
  1986  0E1C                     	;# 
  1987  0E1D                     	;# 
  1988  0E1E                     	;# 
  1989  0E1F                     	;# 
  1990  0E20                     	;# 
  1991  0E21                     	;# 
  1992  0E22                     	;# 
  1993  0E23                     	;# 
  1994  0E24                     	;# 
  1995  0E25                     	;# 
  1996  0E26                     	;# 
  1997  0E27                     	;# 
  1998  0E28                     	;# 
  1999  0E29                     	;# 
  2000  0E2A                     	;# 
  2001  0E2B                     	;# 
  2002  0E2C                     	;# 
  2003  0E2D                     	;# 
  2004  0E2E                     	;# 
  2005  0E2F                     	;# 
  2006  0E30                     	;# 
  2007  0E31                     	;# 
  2008  0E32                     	;# 
  2009  0E33                     	;# 
  2010  0E34                     	;# 
  2011  0E35                     	;# 
  2012  0E36                     	;# 
  2013  0E37                     	;# 
  2014  0E8F                     	;# 
  2015  0E90                     	;# 
  2016  0E91                     	;# 
  2017  0E92                     	;# 
  2018  0E93                     	;# 
  2019  0E94                     	;# 
  2020  0E95                     	;# 
  2021  0E96                     	;# 
  2022  0E97                     	;# 
  2023  0E9C                     	;# 
  2024  0E9D                     	;# 
  2025  0E9E                     	;# 
  2026  0EA1                     	;# 
  2027  0EA2                     	;# 
  2028  0EA3                     	;# 
  2029  0EA4                     	;# 
  2030  0EA5                     	;# 
  2031  0EA9                     	;# 
  2032  0EAA                     	;# 
  2033  0EAB                     	;# 
  2034  0EAC                     	;# 
  2035  0EB1                     	;# 
  2036  0EB2                     	;# 
  2037  0EB3                     	;# 
  2038  0EB8                     	;# 
  2039  0EB9                     	;# 
  2040  0EBA                     	;# 
  2041  0EBB                     	;# 
  2042  0EBC                     	;# 
  2043  0EBD                     	;# 
  2044  0EBE                     	;# 
  2045  0EC3                     	;# 
  2046  0EC5                     	;# 
  2047  0EC6                     	;# 
  2048  0EC7                     	;# 
  2049  0EC8                     	;# 
  2050  0EC9                     	;# 
  2051  0ECA                     	;# 
  2052  0ECB                     	;# 
  2053  0ECC                     	;# 
  2054  0F10                     	;# 
  2055  0F11                     	;# 
  2056  0F12                     	;# 
  2057  0F13                     	;# 
  2058  0F14                     	;# 
  2059  0F15                     	;# 
  2060  0F16                     	;# 
  2061  0F17                     	;# 
  2062  0F18                     	;# 
  2063  0F19                     	;# 
  2064  0F1A                     	;# 
  2065  0F1B                     	;# 
  2066  0F1C                     	;# 
  2067  0F1D                     	;# 
  2068  0F1E                     	;# 
  2069  0F1F                     	;# 
  2070  0F20                     	;# 
  2071  0F21                     	;# 
  2072  0F22                     	;# 
  2073  0F23                     	;# 
  2074  0F24                     	;# 
  2075  0F25                     	;# 
  2076  0F26                     	;# 
  2077  0F27                     	;# 
  2078  0F38                     	;# 
  2079  0F39                     	;# 
  2080  0F3A                     	;# 
  2081  0F3B                     	;# 
  2082  0F3C                     	;# 
  2083  0F3D                     	;# 
  2084  0F3E                     	;# 
  2085  0F3F                     	;# 
  2086  0F40                     	;# 
  2087  0F41                     	;# 
  2088  0F43                     	;# 
  2089  0F44                     	;# 
  2090  0F45                     	;# 
  2091  0F46                     	;# 
  2092  0F47                     	;# 
  2093  0F48                     	;# 
  2094  0F49                     	;# 
  2095  0F4A                     	;# 
  2096  0F4B                     	;# 
  2097  0F4C                     	;# 
  2098  0F4E                     	;# 
  2099  0F4F                     	;# 
  2100  0F50                     	;# 
  2101  0F51                     	;# 
  2102  0F52                     	;# 
  2103  0F53                     	;# 
  2104  0F54                     	;# 
  2105  0F55                     	;# 
  2106  0F56                     	;# 
  2107  0F57                     	;# 
  2108  0F65                     	;# 
  2109  0F68                     	;# 
  2110  0F69                     	;# 
  2111  0F6A                     	;# 
  2112  0F6B                     	;# 
  2113  0FE4                     	;# 
  2114  0FE5                     	;# 
  2115  0FE6                     	;# 
  2116  0FE7                     	;# 
  2117  0FE8                     	;# 
  2118  0FE9                     	;# 
  2119  0FEA                     	;# 
  2120  0FEB                     	;# 
  2121  0FED                     	;# 
  2122  0FEE                     	;# 
  2123  0FEF                     	;# 
  2124  0000                     	;# 
  2125  0001                     	;# 
  2126  0002                     	;# 
  2127  0003                     	;# 
  2128  0004                     	;# 
  2129  0005                     	;# 
  2130  0006                     	;# 
  2131  0007                     	;# 
  2132  0008                     	;# 
  2133  0009                     	;# 
  2134  000A                     	;# 
  2135  000B                     	;# 
  2136  000C                     	;# 
  2137  000D                     	;# 
  2138  000E                     	;# 
  2139  0010                     	;# 
  2140  0011                     	;# 
  2141  0012                     	;# 
  2142  0013                     	;# 
  2143  0016                     	;# 
  2144  0017                     	;# 
  2145  0018                     	;# 
  2146  001C                     	;# 
  2147  001C                     	;# 
  2148  001D                     	;# 
  2149  001D                     	;# 
  2150  001E                     	;# 
  2151  001F                     	;# 
  2152  008C                     	;# 
  2153  008C                     	;# 
  2154  008D                     	;# 
  2155  008E                     	;# 
  2156  008E                     	;# 
  2157  008F                     	;# 
  2158  0090                     	;# 
  2159  0090                     	;# 
  2160  0091                     	;# 
  2161  0093                     	;# 
  2162  0094                     	;# 
  2163  0095                     	;# 
  2164  0096                     	;# 
  2165  0097                     	;# 
  2166  0098                     	;# 
  2167  0099                     	;# 
  2168  009A                     	;# 
  2169  009B                     	;# 
  2170  009C                     	;# 
  2171  009D                     	;# 
  2172  009E                     	;# 
  2173  010C                     	;# 
  2174  010D                     	;# 
  2175  010E                     	;# 
  2176  010E                     	;# 
  2177  010F                     	;# 
  2178  0110                     	;# 
  2179  0110                     	;# 
  2180  0111                     	;# 
  2181  0112                     	;# 
  2182  0112                     	;# 
  2183  0113                     	;# 
  2184  0114                     	;# 
  2185  0114                     	;# 
  2186  0115                     	;# 
  2187  0116                     	;# 
  2188  0116                     	;# 
  2189  0117                     	;# 
  2190  0119                     	;# 
  2191  0119                     	;# 
  2192  0119                     	;# 
  2193  011A                     	;# 
  2194  011A                     	;# 
  2195  011A                     	;# 
  2196  011B                     	;# 
  2197  011B                     	;# 
  2198  011B                     	;# 
  2199  011B                     	;# 
  2200  011B                     	;# 
  2201  011C                     	;# 
  2202  011C                     	;# 
  2203  011C                     	;# 
  2204  011D                     	;# 
  2205  011D                     	;# 
  2206  011D                     	;# 
  2207  011E                     	;# 
  2208  011E                     	;# 
  2209  011E                     	;# 
  2210  011F                     	;# 
  2211  011F                     	;# 
  2212  011F                     	;# 
  2213  011F                     	;# 
  2214  011F                     	;# 
  2215  018C                     	;# 
  2216  018D                     	;# 
  2217  018E                     	;# 
  2218  018F                     	;# 
  2219  0190                     	;# 
  2220  0191                     	;# 
  2221  0192                     	;# 
  2222  0196                     	;# 
  2223  0197                     	;# 
  2224  0198                     	;# 
  2225  0199                     	;# 
  2226  019A                     	;# 
  2227  019B                     	;# 
  2228  019C                     	;# 
  2229  020C                     	;# 
  2230  020D                     	;# 
  2231  020E                     	;# 
  2232  020F                     	;# 
  2233  020F                     	;# 
  2234  0210                     	;# 
  2235  0210                     	;# 
  2236  0211                     	;# 
  2237  0211                     	;# 
  2238  0212                     	;# 
  2239  0213                     	;# 
  2240  0214                     	;# 
  2241  0215                     	;# 
  2242  0215                     	;# 
  2243  0216                     	;# 
  2244  0216                     	;# 
  2245  0217                     	;# 
  2246  0217                     	;# 
  2247  0218                     	;# 
  2248  0219                     	;# 
  2249  021A                     	;# 
  2250  021B                     	;# 
  2251  021B                     	;# 
  2252  021C                     	;# 
  2253  021C                     	;# 
  2254  021D                     	;# 
  2255  021D                     	;# 
  2256  021E                     	;# 
  2257  021F                     	;# 
  2258  028C                     	;# 
  2259  028C                     	;# 
  2260  028D                     	;# 
  2261  028D                     	;# 
  2262  028E                     	;# 
  2263  028F                     	;# 
  2264  0290                     	;# 
  2265  0290                     	;# 
  2266  0291                     	;# 
  2267  0292                     	;# 
  2268  0292                     	;# 
  2269  0293                     	;# 
  2270  0293                     	;# 
  2271  0294                     	;# 
  2272  0295                     	;# 
  2273  0296                     	;# 
  2274  0296                     	;# 
  2275  0297                     	;# 
  2276  0298                     	;# 
  2277  0298                     	;# 
  2278  0299                     	;# 
  2279  0299                     	;# 
  2280  029A                     	;# 
  2281  029B                     	;# 
  2282  029C                     	;# 
  2283  029C                     	;# 
  2284  029D                     	;# 
  2285  030C                     	;# 
  2286  030C                     	;# 
  2287  030D                     	;# 
  2288  030E                     	;# 
  2289  030F                     	;# 
  2290  0310                     	;# 
  2291  0310                     	;# 
  2292  0311                     	;# 
  2293  0312                     	;# 
  2294  0313                     	;# 
  2295  0314                     	;# 
  2296  0314                     	;# 
  2297  0315                     	;# 
  2298  0316                     	;# 
  2299  0317                     	;# 
  2300  0318                     	;# 
  2301  0318                     	;# 
  2302  0319                     	;# 
  2303  031A                     	;# 
  2304  031B                     	;# 
  2305  031C                     	;# 
  2306  031C                     	;# 
  2307  031D                     	;# 
  2308  031E                     	;# 
  2309  031F                     	;# 
  2310  038C                     	;# 
  2311  038D                     	;# 
  2312  038E                     	;# 
  2313  0390                     	;# 
  2314  0391                     	;# 
  2315  0392                     	;# 
  2316  040C                     	;# 
  2317  040D                     	;# 
  2318  040E                     	;# 
  2319  040F                     	;# 
  2320  0410                     	;# 
  2321  0411                     	;# 
  2322  0416                     	;# 
  2323  0416                     	;# 
  2324  0417                     	;# 
  2325  0418                     	;# 
  2326  0418                     	;# 
  2327  0419                     	;# 
  2328  041A                     	;# 
  2329  041A                     	;# 
  2330  041B                     	;# 
  2331  041C                     	;# 
  2332  041C                     	;# 
  2333  041D                     	;# 
  2334  041E                     	;# 
  2335  041F                     	;# 
  2336  048C                     	;# 
  2337  048C                     	;# 
  2338  048D                     	;# 
  2339  048E                     	;# 
  2340  048F                     	;# 
  2341  048F                     	;# 
  2342  0490                     	;# 
  2343  0491                     	;# 
  2344  0492                     	;# 
  2345  0492                     	;# 
  2346  0493                     	;# 
  2347  0494                     	;# 
  2348  0495                     	;# 
  2349  0495                     	;# 
  2350  0496                     	;# 
  2351  0497                     	;# 
  2352  0498                     	;# 
  2353  0499                     	;# 
  2354  049A                     	;# 
  2355  049B                     	;# 
  2356  049C                     	;# 
  2357  049D                     	;# 
  2358  050C                     	;# 
  2359  050C                     	;# 
  2360  050D                     	;# 
  2361  050E                     	;# 
  2362  050F                     	;# 
  2363  050F                     	;# 
  2364  0510                     	;# 
  2365  0511                     	;# 
  2366  0512                     	;# 
  2367  0512                     	;# 
  2368  0513                     	;# 
  2369  0514                     	;# 
  2370  0515                     	;# 
  2371  0515                     	;# 
  2372  0516                     	;# 
  2373  0517                     	;# 
  2374  0518                     	;# 
  2375  0519                     	;# 
  2376  051A                     	;# 
  2377  051B                     	;# 
  2378  051C                     	;# 
  2379  051D                     	;# 
  2380  058C                     	;# 
  2381  058C                     	;# 
  2382  058D                     	;# 
  2383  058E                     	;# 
  2384  058F                     	;# 
  2385  058F                     	;# 
  2386  0590                     	;# 
  2387  0591                     	;# 
  2388  0592                     	;# 
  2389  0593                     	;# 
  2390  060C                     	;# 
  2391  060D                     	;# 
  2392  060E                     	;# 
  2393  060F                     	;# 
  2394  0610                     	;# 
  2395  0611                     	;# 
  2396  0612                     	;# 
  2397  0613                     	;# 
  2398  0614                     	;# 
  2399  0616                     	;# 
  2400  0617                     	;# 
  2401  0618                     	;# 
  2402  0619                     	;# 
  2403  061A                     	;# 
  2404  061B                     	;# 
  2405  061C                     	;# 
  2406  061D                     	;# 
  2407  061E                     	;# 
  2408  068C                     	;# 
  2409  068D                     	;# 
  2410  068E                     	;# 
  2411  068F                     	;# 
  2412  0690                     	;# 
  2413  0691                     	;# 
  2414  0692                     	;# 
  2415  0693                     	;# 
  2416  0694                     	;# 
  2417  070C                     	;# 
  2418  070D                     	;# 
  2419  070E                     	;# 
  2420  070F                     	;# 
  2421  0710                     	;# 
  2422  0711                     	;# 
  2423  0712                     	;# 
  2424  0713                     	;# 
  2425  0714                     	;# 
  2426  0716                     	;# 
  2427  0717                     	;# 
  2428  0718                     	;# 
  2429  0719                     	;# 
  2430  071A                     	;# 
  2431  071B                     	;# 
  2432  071C                     	;# 
  2433  071D                     	;# 
  2434  071E                     	;# 
  2435  0796                     	;# 
  2436  0797                     	;# 
  2437  0798                     	;# 
  2438  0799                     	;# 
  2439  079A                     	;# 
  2440  079B                     	;# 
  2441  080C                     	;# 
  2442  080D                     	;# 
  2443  080E                     	;# 
  2444  080F                     	;# 
  2445  0810                     	;# 
  2446  0811                     	;# 
  2447  0812                     	;# 
  2448  0813                     	;# 
  2449  0814                     	;# 
  2450  081A                     	;# 
  2451  081B                     	;# 
  2452  081C                     	;# 
  2453  081D                     	;# 
  2454  081E                     	;# 
  2455  081F                     	;# 
  2456  088C                     	;# 
  2457  088D                     	;# 
  2458  088E                     	;# 
  2459  088F                     	;# 
  2460  0890                     	;# 
  2461  0891                     	;# 
  2462  0892                     	;# 
  2463  0893                     	;# 
  2464  0895                     	;# 
  2465  0896                     	;# 
  2466  0897                     	;# 
  2467  0898                     	;# 
  2468  0899                     	;# 
  2469  089A                     	;# 
  2470  089B                     	;# 
  2471  090C                     	;# 
  2472  090E                     	;# 
  2473  090F                     	;# 
  2474  091F                     	;# 
  2475  091F                     	;# 
  2476  098F                     	;# 
  2477  098F                     	;# 
  2478  0990                     	;# 
  2479  0991                     	;# 
  2480  0992                     	;# 
  2481  0993                     	;# 
  2482  0994                     	;# 
  2483  0995                     	;# 
  2484  0996                     	;# 
  2485  0997                     	;# 
  2486  0E0F                     	;# 
  2487  0E10                     	;# 
  2488  0E11                     	;# 
  2489  0E12                     	;# 
  2490  0E13                     	;# 
  2491  0E14                     	;# 
  2492  0E15                     	;# 
  2493  0E16                     	;# 
  2494  0E17                     	;# 
  2495  0E18                     	;# 
  2496  0E19                     	;# 
  2497  0E1A                     	;# 
  2498  0E1B                     	;# 
  2499  0E1C                     	;# 
  2500  0E1D                     	;# 
  2501  0E1E                     	;# 
  2502  0E1F                     	;# 
  2503  0E20                     	;# 
  2504  0E21                     	;# 
  2505  0E22                     	;# 
  2506  0E23                     	;# 
  2507  0E24                     	;# 
  2508  0E25                     	;# 
  2509  0E26                     	;# 
  2510  0E27                     	;# 
  2511  0E28                     	;# 
  2512  0E29                     	;# 
  2513  0E2A                     	;# 
  2514  0E2B                     	;# 
  2515  0E2C                     	;# 
  2516  0E2D                     	;# 
  2517  0E2E                     	;# 
  2518  0E2F                     	;# 
  2519  0E30                     	;# 
  2520  0E31                     	;# 
  2521  0E32                     	;# 
  2522  0E33                     	;# 
  2523  0E34                     	;# 
  2524  0E35                     	;# 
  2525  0E36                     	;# 
  2526  0E37                     	;# 
  2527  0E8F                     	;# 
  2528  0E90                     	;# 
  2529  0E91                     	;# 
  2530  0E92                     	;# 
  2531  0E93                     	;# 
  2532  0E94                     	;# 
  2533  0E95                     	;# 
  2534  0E96                     	;# 
  2535  0E97                     	;# 
  2536  0E9C                     	;# 
  2537  0E9D                     	;# 
  2538  0E9E                     	;# 
  2539  0EA1                     	;# 
  2540  0EA2                     	;# 
  2541  0EA3                     	;# 
  2542  0EA4                     	;# 
  2543  0EA5                     	;# 
  2544  0EA9                     	;# 
  2545  0EAA                     	;# 
  2546  0EAB                     	;# 
  2547  0EAC                     	;# 
  2548  0EB1                     	;# 
  2549  0EB2                     	;# 
  2550  0EB3                     	;# 
  2551  0EB8                     	;# 
  2552  0EB9                     	;# 
  2553  0EBA                     	;# 
  2554  0EBB                     	;# 
  2555  0EBC                     	;# 
  2556  0EBD                     	;# 
  2557  0EBE                     	;# 
  2558  0EC3                     	;# 
  2559  0EC5                     	;# 
  2560  0EC6                     	;# 
  2561  0EC7                     	;# 
  2562  0EC8                     	;# 
  2563  0EC9                     	;# 
  2564  0ECA                     	;# 
  2565  0ECB                     	;# 
  2566  0ECC                     	;# 
  2567  0F10                     	;# 
  2568  0F11                     	;# 
  2569  0F12                     	;# 
  2570  0F13                     	;# 
  2571  0F14                     	;# 
  2572  0F15                     	;# 
  2573  0F16                     	;# 
  2574  0F17                     	;# 
  2575  0F18                     	;# 
  2576  0F19                     	;# 
  2577  0F1A                     	;# 
  2578  0F1B                     	;# 
  2579  0F1C                     	;# 
  2580  0F1D                     	;# 
  2581  0F1E                     	;# 
  2582  0F1F                     	;# 
  2583  0F20                     	;# 
  2584  0F21                     	;# 
  2585  0F22                     	;# 
  2586  0F23                     	;# 
  2587  0F24                     	;# 
  2588  0F25                     	;# 
  2589  0F26                     	;# 
  2590  0F27                     	;# 
  2591  0F38                     	;# 
  2592  0F39                     	;# 
  2593  0F3A                     	;# 
  2594  0F3B                     	;# 
  2595  0F3C                     	;# 
  2596  0F3D                     	;# 
  2597  0F3E                     	;# 
  2598  0F3F                     	;# 
  2599  0F40                     	;# 
  2600  0F41                     	;# 
  2601  0F43                     	;# 
  2602  0F44                     	;# 
  2603  0F45                     	;# 
  2604  0F46                     	;# 
  2605  0F47                     	;# 
  2606  0F48                     	;# 
  2607  0F49                     	;# 
  2608  0F4A                     	;# 
  2609  0F4B                     	;# 
  2610  0F4C                     	;# 
  2611  0F4E                     	;# 
  2612  0F4F                     	;# 
  2613  0F50                     	;# 
  2614  0F51                     	;# 
  2615  0F52                     	;# 
  2616  0F53                     	;# 
  2617  0F54                     	;# 
  2618  0F55                     	;# 
  2619  0F56                     	;# 
  2620  0F57                     	;# 
  2621  0F65                     	;# 
  2622  0F68                     	;# 
  2623  0F69                     	;# 
  2624  0F6A                     	;# 
  2625  0F6B                     	;# 
  2626  0FE4                     	;# 
  2627  0FE5                     	;# 
  2628  0FE6                     	;# 
  2629  0FE7                     	;# 
  2630  0FE8                     	;# 
  2631  0FE9                     	;# 
  2632  0FEA                     	;# 
  2633  0FEB                     	;# 
  2634  0FED                     	;# 
  2635  0FEE                     	;# 
  2636  0FEF                     	;# 
  2637  0000                     	;# 
  2638  0001                     	;# 
  2639  0002                     	;# 
  2640  0003                     	;# 
  2641  0004                     	;# 
  2642  0005                     	;# 
  2643  0006                     	;# 
  2644  0007                     	;# 
  2645  0008                     	;# 
  2646  0009                     	;# 
  2647  000A                     	;# 
  2648  000B                     	;# 
  2649  000C                     	;# 
  2650  000D                     	;# 
  2651  000E                     	;# 
  2652  0010                     	;# 
  2653  0011                     	;# 
  2654  0012                     	;# 
  2655  0013                     	;# 
  2656  0016                     	;# 
  2657  0017                     	;# 
  2658  0018                     	;# 
  2659  001C                     	;# 
  2660  001C                     	;# 
  2661  001D                     	;# 
  2662  001D                     	;# 
  2663  001E                     	;# 
  2664  001F                     	;# 
  2665  008C                     	;# 
  2666  008C                     	;# 
  2667  008D                     	;# 
  2668  008E                     	;# 
  2669  008E                     	;# 
  2670  008F                     	;# 
  2671  0090                     	;# 
  2672  0090                     	;# 
  2673  0091                     	;# 
  2674  0093                     	;# 
  2675  0094                     	;# 
  2676  0095                     	;# 
  2677  0096                     	;# 
  2678  0097                     	;# 
  2679  0098                     	;# 
  2680  0099                     	;# 
  2681  009A                     	;# 
  2682  009B                     	;# 
  2683  009C                     	;# 
  2684  009D                     	;# 
  2685  009E                     	;# 
  2686  010C                     	;# 
  2687  010D                     	;# 
  2688  010E                     	;# 
  2689  010E                     	;# 
  2690  010F                     	;# 
  2691  0110                     	;# 
  2692  0110                     	;# 
  2693  0111                     	;# 
  2694  0112                     	;# 
  2695  0112                     	;# 
  2696  0113                     	;# 
  2697  0114                     	;# 
  2698  0114                     	;# 
  2699  0115                     	;# 
  2700  0116                     	;# 
  2701  0116                     	;# 
  2702  0117                     	;# 
  2703  0119                     	;# 
  2704  0119                     	;# 
  2705  0119                     	;# 
  2706  011A                     	;# 
  2707  011A                     	;# 
  2708  011A                     	;# 
  2709  011B                     	;# 
  2710  011B                     	;# 
  2711  011B                     	;# 
  2712  011B                     	;# 
  2713  011B                     	;# 
  2714  011C                     	;# 
  2715  011C                     	;# 
  2716  011C                     	;# 
  2717  011D                     	;# 
  2718  011D                     	;# 
  2719  011D                     	;# 
  2720  011E                     	;# 
  2721  011E                     	;# 
  2722  011E                     	;# 
  2723  011F                     	;# 
  2724  011F                     	;# 
  2725  011F                     	;# 
  2726  011F                     	;# 
  2727  011F                     	;# 
  2728  018C                     	;# 
  2729  018D                     	;# 
  2730  018E                     	;# 
  2731  018F                     	;# 
  2732  0190                     	;# 
  2733  0191                     	;# 
  2734  0192                     	;# 
  2735  0196                     	;# 
  2736  0197                     	;# 
  2737  0198                     	;# 
  2738  0199                     	;# 
  2739  019A                     	;# 
  2740  019B                     	;# 
  2741  019C                     	;# 
  2742  020C                     	;# 
  2743  020D                     	;# 
  2744  020E                     	;# 
  2745  020F                     	;# 
  2746  020F                     	;# 
  2747  0210                     	;# 
  2748  0210                     	;# 
  2749  0211                     	;# 
  2750  0211                     	;# 
  2751  0212                     	;# 
  2752  0213                     	;# 
  2753  0214                     	;# 
  2754  0215                     	;# 
  2755  0215                     	;# 
  2756  0216                     	;# 
  2757  0216                     	;# 
  2758  0217                     	;# 
  2759  0217                     	;# 
  2760  0218                     	;# 
  2761  0219                     	;# 
  2762  021A                     	;# 
  2763  021B                     	;# 
  2764  021B                     	;# 
  2765  021C                     	;# 
  2766  021C                     	;# 
  2767  021D                     	;# 
  2768  021D                     	;# 
  2769  021E                     	;# 
  2770  021F                     	;# 
  2771  028C                     	;# 
  2772  028C                     	;# 
  2773  028D                     	;# 
  2774  028D                     	;# 
  2775  028E                     	;# 
  2776  028F                     	;# 
  2777  0290                     	;# 
  2778  0290                     	;# 
  2779  0291                     	;# 
  2780  0292                     	;# 
  2781  0292                     	;# 
  2782  0293                     	;# 
  2783  0293                     	;# 
  2784  0294                     	;# 
  2785  0295                     	;# 
  2786  0296                     	;# 
  2787  0296                     	;# 
  2788  0297                     	;# 
  2789  0298                     	;# 
  2790  0298                     	;# 
  2791  0299                     	;# 
  2792  0299                     	;# 
  2793  029A                     	;# 
  2794  029B                     	;# 
  2795  029C                     	;# 
  2796  029C                     	;# 
  2797  029D                     	;# 
  2798  030C                     	;# 
  2799  030C                     	;# 
  2800  030D                     	;# 
  2801  030E                     	;# 
  2802  030F                     	;# 
  2803  0310                     	;# 
  2804  0310                     	;# 
  2805  0311                     	;# 
  2806  0312                     	;# 
  2807  0313                     	;# 
  2808  0314                     	;# 
  2809  0314                     	;# 
  2810  0315                     	;# 
  2811  0316                     	;# 
  2812  0317                     	;# 
  2813  0318                     	;# 
  2814  0318                     	;# 
  2815  0319                     	;# 
  2816  031A                     	;# 
  2817  031B                     	;# 
  2818  031C                     	;# 
  2819  031C                     	;# 
  2820  031D                     	;# 
  2821  031E                     	;# 
  2822  031F                     	;# 
  2823  038C                     	;# 
  2824  038D                     	;# 
  2825  038E                     	;# 
  2826  0390                     	;# 
  2827  0391                     	;# 
  2828  0392                     	;# 
  2829  040C                     	;# 
  2830  040D                     	;# 
  2831  040E                     	;# 
  2832  040F                     	;# 
  2833  0410                     	;# 
  2834  0411                     	;# 
  2835  0416                     	;# 
  2836  0416                     	;# 
  2837  0417                     	;# 
  2838  0418                     	;# 
  2839  0418                     	;# 
  2840  0419                     	;# 
  2841  041A                     	;# 
  2842  041A                     	;# 
  2843  041B                     	;# 
  2844  041C                     	;# 
  2845  041C                     	;# 
  2846  041D                     	;# 
  2847  041E                     	;# 
  2848  041F                     	;# 
  2849  048C                     	;# 
  2850  048C                     	;# 
  2851  048D                     	;# 
  2852  048E                     	;# 
  2853  048F                     	;# 
  2854  048F                     	;# 
  2855  0490                     	;# 
  2856  0491                     	;# 
  2857  0492                     	;# 
  2858  0492                     	;# 
  2859  0493                     	;# 
  2860  0494                     	;# 
  2861  0495                     	;# 
  2862  0495                     	;# 
  2863  0496                     	;# 
  2864  0497                     	;# 
  2865  0498                     	;# 
  2866  0499                     	;# 
  2867  049A                     	;# 
  2868  049B                     	;# 
  2869  049C                     	;# 
  2870  049D                     	;# 
  2871  050C                     	;# 
  2872  050C                     	;# 
  2873  050D                     	;# 
  2874  050E                     	;# 
  2875  050F                     	;# 
  2876  050F                     	;# 
  2877  0510                     	;# 
  2878  0511                     	;# 
  2879  0512                     	;# 
  2880  0512                     	;# 
  2881  0513                     	;# 
  2882  0514                     	;# 
  2883  0515                     	;# 
  2884  0515                     	;# 
  2885  0516                     	;# 
  2886  0517                     	;# 
  2887  0518                     	;# 
  2888  0519                     	;# 
  2889  051A                     	;# 
  2890  051B                     	;# 
  2891  051C                     	;# 
  2892  051D                     	;# 
  2893  058C                     	;# 
  2894  058C                     	;# 
  2895  058D                     	;# 
  2896  058E                     	;# 
  2897  058F                     	;# 
  2898  058F                     	;# 
  2899  0590                     	;# 
  2900  0591                     	;# 
  2901  0592                     	;# 
  2902  0593                     	;# 
  2903  060C                     	;# 
  2904  060D                     	;# 
  2905  060E                     	;# 
  2906  060F                     	;# 
  2907  0610                     	;# 
  2908  0611                     	;# 
  2909  0612                     	;# 
  2910  0613                     	;# 
  2911  0614                     	;# 
  2912  0616                     	;# 
  2913  0617                     	;# 
  2914  0618                     	;# 
  2915  0619                     	;# 
  2916  061A                     	;# 
  2917  061B                     	;# 
  2918  061C                     	;# 
  2919  061D                     	;# 
  2920  061E                     	;# 
  2921  068C                     	;# 
  2922  068D                     	;# 
  2923  068E                     	;# 
  2924  068F                     	;# 
  2925  0690                     	;# 
  2926  0691                     	;# 
  2927  0692                     	;# 
  2928  0693                     	;# 
  2929  0694                     	;# 
  2930  070C                     	;# 
  2931  070D                     	;# 
  2932  070E                     	;# 
  2933  070F                     	;# 
  2934  0710                     	;# 
  2935  0711                     	;# 
  2936  0712                     	;# 
  2937  0713                     	;# 
  2938  0714                     	;# 
  2939  0716                     	;# 
  2940  0717                     	;# 
  2941  0718                     	;# 
  2942  0719                     	;# 
  2943  071A                     	;# 
  2944  071B                     	;# 
  2945  071C                     	;# 
  2946  071D                     	;# 
  2947  071E                     	;# 
  2948  0796                     	;# 
  2949  0797                     	;# 
  2950  0798                     	;# 
  2951  0799                     	;# 
  2952  079A                     	;# 
  2953  079B                     	;# 
  2954  080C                     	;# 
  2955  080D                     	;# 
  2956  080E                     	;# 
  2957  080F                     	;# 
  2958  0810                     	;# 
  2959  0811                     	;# 
  2960  0812                     	;# 
  2961  0813                     	;# 
  2962  0814                     	;# 
  2963  081A                     	;# 
  2964  081B                     	;# 
  2965  081C                     	;# 
  2966  081D                     	;# 
  2967  081E                     	;# 
  2968  081F                     	;# 
  2969  088C                     	;# 
  2970  088D                     	;# 
  2971  088E                     	;# 
  2972  088F                     	;# 
  2973  0890                     	;# 
  2974  0891                     	;# 
  2975  0892                     	;# 
  2976  0893                     	;# 
  2977  0895                     	;# 
  2978  0896                     	;# 
  2979  0897                     	;# 
  2980  0898                     	;# 
  2981  0899                     	;# 
  2982  089A                     	;# 
  2983  089B                     	;# 
  2984  090C                     	;# 
  2985  090E                     	;# 
  2986  090F                     	;# 
  2987  091F                     	;# 
  2988  091F                     	;# 
  2989  098F                     	;# 
  2990  098F                     	;# 
  2991  0990                     	;# 
  2992  0991                     	;# 
  2993  0992                     	;# 
  2994  0993                     	;# 
  2995  0994                     	;# 
  2996  0995                     	;# 
  2997  0996                     	;# 
  2998  0997                     	;# 
  2999  0E0F                     	;# 
  3000  0E10                     	;# 
  3001  0E11                     	;# 
  3002  0E12                     	;# 
  3003  0E13                     	;# 
  3004  0E14                     	;# 
  3005  0E15                     	;# 
  3006  0E16                     	;# 
  3007  0E17                     	;# 
  3008  0E18                     	;# 
  3009  0E19                     	;# 
  3010  0E1A                     	;# 
  3011  0E1B                     	;# 
  3012  0E1C                     	;# 
  3013  0E1D                     	;# 
  3014  0E1E                     	;# 
  3015  0E1F                     	;# 
  3016  0E20                     	;# 
  3017  0E21                     	;# 
  3018  0E22                     	;# 
  3019  0E23                     	;# 
  3020  0E24                     	;# 
  3021  0E25                     	;# 
  3022  0E26                     	;# 
  3023  0E27                     	;# 
  3024  0E28                     	;# 
  3025  0E29                     	;# 
  3026  0E2A                     	;# 
  3027  0E2B                     	;# 
  3028  0E2C                     	;# 
  3029  0E2D                     	;# 
  3030  0E2E                     	;# 
  3031  0E2F                     	;# 
  3032  0E30                     	;# 
  3033  0E31                     	;# 
  3034  0E32                     	;# 
  3035  0E33                     	;# 
  3036  0E34                     	;# 
  3037  0E35                     	;# 
  3038  0E36                     	;# 
  3039  0E37                     	;# 
  3040  0E8F                     	;# 
  3041  0E90                     	;# 
  3042  0E91                     	;# 
  3043  0E92                     	;# 
  3044  0E93                     	;# 
  3045  0E94                     	;# 
  3046  0E95                     	;# 
  3047  0E96                     	;# 
  3048  0E97                     	;# 
  3049  0E9C                     	;# 
  3050  0E9D                     	;# 
  3051  0E9E                     	;# 
  3052  0EA1                     	;# 
  3053  0EA2                     	;# 
  3054  0EA3                     	;# 
  3055  0EA4                     	;# 
  3056  0EA5                     	;# 
  3057  0EA9                     	;# 
  3058  0EAA                     	;# 
  3059  0EAB                     	;# 
  3060  0EAC                     	;# 
  3061  0EB1                     	;# 
  3062  0EB2                     	;# 
  3063  0EB3                     	;# 
  3064  0EB8                     	;# 
  3065  0EB9                     	;# 
  3066  0EBA                     	;# 
  3067  0EBB                     	;# 
  3068  0EBC                     	;# 
  3069  0EBD                     	;# 
  3070  0EBE                     	;# 
  3071  0EC3                     	;# 
  3072  0EC5                     	;# 
  3073  0EC6                     	;# 
  3074  0EC7                     	;# 
  3075  0EC8                     	;# 
  3076  0EC9                     	;# 
  3077  0ECA                     	;# 
  3078  0ECB                     	;# 
  3079  0ECC                     	;# 
  3080  0F10                     	;# 
  3081  0F11                     	;# 
  3082  0F12                     	;# 
  3083  0F13                     	;# 
  3084  0F14                     	;# 
  3085  0F15                     	;# 
  3086  0F16                     	;# 
  3087  0F17                     	;# 
  3088  0F18                     	;# 
  3089  0F19                     	;# 
  3090  0F1A                     	;# 
  3091  0F1B                     	;# 
  3092  0F1C                     	;# 
  3093  0F1D                     	;# 
  3094  0F1E                     	;# 
  3095  0F1F                     	;# 
  3096  0F20                     	;# 
  3097  0F21                     	;# 
  3098  0F22                     	;# 
  3099  0F23                     	;# 
  3100  0F24                     	;# 
  3101  0F25                     	;# 
  3102  0F26                     	;# 
  3103  0F27                     	;# 
  3104  0F38                     	;# 
  3105  0F39                     	;# 
  3106  0F3A                     	;# 
  3107  0F3B                     	;# 
  3108  0F3C                     	;# 
  3109  0F3D                     	;# 
  3110  0F3E                     	;# 
  3111  0F3F                     	;# 
  3112  0F40                     	;# 
  3113  0F41                     	;# 
  3114  0F43                     	;# 
  3115  0F44                     	;# 
  3116  0F45                     	;# 
  3117  0F46                     	;# 
  3118  0F47                     	;# 
  3119  0F48                     	;# 
  3120  0F49                     	;# 
  3121  0F4A                     	;# 
  3122  0F4B                     	;# 
  3123  0F4C                     	;# 
  3124  0F4E                     	;# 
  3125  0F4F                     	;# 
  3126  0F50                     	;# 
  3127  0F51                     	;# 
  3128  0F52                     	;# 
  3129  0F53                     	;# 
  3130  0F54                     	;# 
  3131  0F55                     	;# 
  3132  0F56                     	;# 
  3133  0F57                     	;# 
  3134  0F65                     	;# 
  3135  0F68                     	;# 
  3136  0F69                     	;# 
  3137  0F6A                     	;# 
  3138  0F6B                     	;# 
  3139  0FE4                     	;# 
  3140  0FE5                     	;# 
  3141  0FE6                     	;# 
  3142  0FE7                     	;# 
  3143  0FE8                     	;# 
  3144  0FE9                     	;# 
  3145  0FEA                     	;# 
  3146  0FEB                     	;# 
  3147  0FED                     	;# 
  3148  0FEE                     	;# 
  3149  0FEF                     	;# 
  3150  0000                     	;# 
  3151  0001                     	;# 
  3152  0002                     	;# 
  3153  0003                     	;# 
  3154  0004                     	;# 
  3155  0005                     	;# 
  3156  0006                     	;# 
  3157  0007                     	;# 
  3158  0008                     	;# 
  3159  0009                     	;# 
  3160  000A                     	;# 
  3161  000B                     	;# 
  3162  000C                     	;# 
  3163  000D                     	;# 
  3164  000E                     	;# 
  3165  0010                     	;# 
  3166  0011                     	;# 
  3167  0012                     	;# 
  3168  0013                     	;# 
  3169  0016                     	;# 
  3170  0017                     	;# 
  3171  0018                     	;# 
  3172  001C                     	;# 
  3173  001C                     	;# 
  3174  001D                     	;# 
  3175  001D                     	;# 
  3176  001E                     	;# 
  3177  001F                     	;# 
  3178  008C                     	;# 
  3179  008C                     	;# 
  3180  008D                     	;# 
  3181  008E                     	;# 
  3182  008E                     	;# 
  3183  008F                     	;# 
  3184  0090                     	;# 
  3185  0090                     	;# 
  3186  0091                     	;# 
  3187  0093                     	;# 
  3188  0094                     	;# 
  3189  0095                     	;# 
  3190  0096                     	;# 
  3191  0097                     	;# 
  3192  0098                     	;# 
  3193  0099                     	;# 
  3194  009A                     	;# 
  3195  009B                     	;# 
  3196  009C                     	;# 
  3197  009D                     	;# 
  3198  009E                     	;# 
  3199  010C                     	;# 
  3200  010D                     	;# 
  3201  010E                     	;# 
  3202  010E                     	;# 
  3203  010F                     	;# 
  3204  0110                     	;# 
  3205  0110                     	;# 
  3206  0111                     	;# 
  3207  0112                     	;# 
  3208  0112                     	;# 
  3209  0113                     	;# 
  3210  0114                     	;# 
  3211  0114                     	;# 
  3212  0115                     	;# 
  3213  0116                     	;# 
  3214  0116                     	;# 
  3215  0117                     	;# 
  3216  0119                     	;# 
  3217  0119                     	;# 
  3218  0119                     	;# 
  3219  011A                     	;# 
  3220  011A                     	;# 
  3221  011A                     	;# 
  3222  011B                     	;# 
  3223  011B                     	;# 
  3224  011B                     	;# 
  3225  011B                     	;# 
  3226  011B                     	;# 
  3227  011C                     	;# 
  3228  011C                     	;# 
  3229  011C                     	;# 
  3230  011D                     	;# 
  3231  011D                     	;# 
  3232  011D                     	;# 
  3233  011E                     	;# 
  3234  011E                     	;# 
  3235  011E                     	;# 
  3236  011F                     	;# 
  3237  011F                     	;# 
  3238  011F                     	;# 
  3239  011F                     	;# 
  3240  011F                     	;# 
  3241  018C                     	;# 
  3242  018D                     	;# 
  3243  018E                     	;# 
  3244  018F                     	;# 
  3245  0190                     	;# 
  3246  0191                     	;# 
  3247  0192                     	;# 
  3248  0196                     	;# 
  3249  0197                     	;# 
  3250  0198                     	;# 
  3251  0199                     	;# 
  3252  019A                     	;# 
  3253  019B                     	;# 
  3254  019C                     	;# 
  3255  020C                     	;# 
  3256  020D                     	;# 
  3257  020E                     	;# 
  3258  020F                     	;# 
  3259  020F                     	;# 
  3260  0210                     	;# 
  3261  0210                     	;# 
  3262  0211                     	;# 
  3263  0211                     	;# 
  3264  0212                     	;# 
  3265  0213                     	;# 
  3266  0214                     	;# 
  3267  0215                     	;# 
  3268  0215                     	;# 
  3269  0216                     	;# 
  3270  0216                     	;# 
  3271  0217                     	;# 
  3272  0217                     	;# 
  3273  0218                     	;# 
  3274  0219                     	;# 
  3275  021A                     	;# 
  3276  021B                     	;# 
  3277  021B                     	;# 
  3278  021C                     	;# 
  3279  021C                     	;# 
  3280  021D                     	;# 
  3281  021D                     	;# 
  3282  021E                     	;# 
  3283  021F                     	;# 
  3284  028C                     	;# 
  3285  028C                     	;# 
  3286  028D                     	;# 
  3287  028D                     	;# 
  3288  028E                     	;# 
  3289  028F                     	;# 
  3290  0290                     	;# 
  3291  0290                     	;# 
  3292  0291                     	;# 
  3293  0292                     	;# 
  3294  0292                     	;# 
  3295  0293                     	;# 
  3296  0293                     	;# 
  3297  0294                     	;# 
  3298  0295                     	;# 
  3299  0296                     	;# 
  3300  0296                     	;# 
  3301  0297                     	;# 
  3302  0298                     	;# 
  3303  0298                     	;# 
  3304  0299                     	;# 
  3305  0299                     	;# 
  3306  029A                     	;# 
  3307  029B                     	;# 
  3308  029C                     	;# 
  3309  029C                     	;# 
  3310  029D                     	;# 
  3311  030C                     	;# 
  3312  030C                     	;# 
  3313  030D                     	;# 
  3314  030E                     	;# 
  3315  030F                     	;# 
  3316  0310                     	;# 
  3317  0310                     	;# 
  3318  0311                     	;# 
  3319  0312                     	;# 
  3320  0313                     	;# 
  3321  0314                     	;# 
  3322  0314                     	;# 
  3323  0315                     	;# 
  3324  0316                     	;# 
  3325  0317                     	;# 
  3326  0318                     	;# 
  3327  0318                     	;# 
  3328  0319                     	;# 
  3329  031A                     	;# 
  3330  031B                     	;# 
  3331  031C                     	;# 
  3332  031C                     	;# 
  3333  031D                     	;# 
  3334  031E                     	;# 
  3335  031F                     	;# 
  3336  038C                     	;# 
  3337  038D                     	;# 
  3338  038E                     	;# 
  3339  0390                     	;# 
  3340  0391                     	;# 
  3341  0392                     	;# 
  3342  040C                     	;# 
  3343  040D                     	;# 
  3344  040E                     	;# 
  3345  040F                     	;# 
  3346  0410                     	;# 
  3347  0411                     	;# 
  3348  0416                     	;# 
  3349  0416                     	;# 
  3350  0417                     	;# 
  3351  0418                     	;# 
  3352  0418                     	;# 
  3353  0419                     	;# 
  3354  041A                     	;# 
  3355  041A                     	;# 
  3356  041B                     	;# 
  3357  041C                     	;# 
  3358  041C                     	;# 
  3359  041D                     	;# 
  3360  041E                     	;# 
  3361  041F                     	;# 
  3362  048C                     	;# 
  3363  048C                     	;# 
  3364  048D                     	;# 
  3365  048E                     	;# 
  3366  048F                     	;# 
  3367  048F                     	;# 
  3368  0490                     	;# 
  3369  0491                     	;# 
  3370  0492                     	;# 
  3371  0492                     	;# 
  3372  0493                     	;# 
  3373  0494                     	;# 
  3374  0495                     	;# 
  3375  0495                     	;# 
  3376  0496                     	;# 
  3377  0497                     	;# 
  3378  0498                     	;# 
  3379  0499                     	;# 
  3380  049A                     	;# 
  3381  049B                     	;# 
  3382  049C                     	;# 
  3383  049D                     	;# 
  3384  050C                     	;# 
  3385  050C                     	;# 
  3386  050D                     	;# 
  3387  050E                     	;# 
  3388  050F                     	;# 
  3389  050F                     	;# 
  3390  0510                     	;# 
  3391  0511                     	;# 
  3392  0512                     	;# 
  3393  0512                     	;# 
  3394  0513                     	;# 
  3395  0514                     	;# 
  3396  0515                     	;# 
  3397  0515                     	;# 
  3398  0516                     	;# 
  3399  0517                     	;# 
  3400  0518                     	;# 
  3401  0519                     	;# 
  3402  051A                     	;# 
  3403  051B                     	;# 
  3404  051C                     	;# 
  3405  051D                     	;# 
  3406  058C                     	;# 
  3407  058C                     	;# 
  3408  058D                     	;# 
  3409  058E                     	;# 
  3410  058F                     	;# 
  3411  058F                     	;# 
  3412  0590                     	;# 
  3413  0591                     	;# 
  3414  0592                     	;# 
  3415  0593                     	;# 
  3416  060C                     	;# 
  3417  060D                     	;# 
  3418  060E                     	;# 
  3419  060F                     	;# 
  3420  0610                     	;# 
  3421  0611                     	;# 
  3422  0612                     	;# 
  3423  0613                     	;# 
  3424  0614                     	;# 
  3425  0616                     	;# 
  3426  0617                     	;# 
  3427  0618                     	;# 
  3428  0619                     	;# 
  3429  061A                     	;# 
  3430  061B                     	;# 
  3431  061C                     	;# 
  3432  061D                     	;# 
  3433  061E                     	;# 
  3434  068C                     	;# 
  3435  068D                     	;# 
  3436  068E                     	;# 
  3437  068F                     	;# 
  3438  0690                     	;# 
  3439  0691                     	;# 
  3440  0692                     	;# 
  3441  0693                     	;# 
  3442  0694                     	;# 
  3443  070C                     	;# 
  3444  070D                     	;# 
  3445  070E                     	;# 
  3446  070F                     	;# 
  3447  0710                     	;# 
  3448  0711                     	;# 
  3449  0712                     	;# 
  3450  0713                     	;# 
  3451  0714                     	;# 
  3452  0716                     	;# 
  3453  0717                     	;# 
  3454  0718                     	;# 
  3455  0719                     	;# 
  3456  071A                     	;# 
  3457  071B                     	;# 
  3458  071C                     	;# 
  3459  071D                     	;# 
  3460  071E                     	;# 
  3461  0796                     	;# 
  3462  0797                     	;# 
  3463  0798                     	;# 
  3464  0799                     	;# 
  3465  079A                     	;# 
  3466  079B                     	;# 
  3467  080C                     	;# 
  3468  080D                     	;# 
  3469  080E                     	;# 
  3470  080F                     	;# 
  3471  0810                     	;# 
  3472  0811                     	;# 
  3473  0812                     	;# 
  3474  0813                     	;# 
  3475  0814                     	;# 
  3476  081A                     	;# 
  3477  081B                     	;# 
  3478  081C                     	;# 
  3479  081D                     	;# 
  3480  081E                     	;# 
  3481  081F                     	;# 
  3482  088C                     	;# 
  3483  088D                     	;# 
  3484  088E                     	;# 
  3485  088F                     	;# 
  3486  0890                     	;# 
  3487  0891                     	;# 
  3488  0892                     	;# 
  3489  0893                     	;# 
  3490  0895                     	;# 
  3491  0896                     	;# 
  3492  0897                     	;# 
  3493  0898                     	;# 
  3494  0899                     	;# 
  3495  089A                     	;# 
  3496  089B                     	;# 
  3497  090C                     	;# 
  3498  090E                     	;# 
  3499  090F                     	;# 
  3500  091F                     	;# 
  3501  091F                     	;# 
  3502  098F                     	;# 
  3503  098F                     	;# 
  3504  0990                     	;# 
  3505  0991                     	;# 
  3506  0992                     	;# 
  3507  0993                     	;# 
  3508  0994                     	;# 
  3509  0995                     	;# 
  3510  0996                     	;# 
  3511  0997                     	;# 
  3512  0E0F                     	;# 
  3513  0E10                     	;# 
  3514  0E11                     	;# 
  3515  0E12                     	;# 
  3516  0E13                     	;# 
  3517  0E14                     	;# 
  3518  0E15                     	;# 
  3519  0E16                     	;# 
  3520  0E17                     	;# 
  3521  0E18                     	;# 
  3522  0E19                     	;# 
  3523  0E1A                     	;# 
  3524  0E1B                     	;# 
  3525  0E1C                     	;# 
  3526  0E1D                     	;# 
  3527  0E1E                     	;# 
  3528  0E1F                     	;# 
  3529  0E20                     	;# 
  3530  0E21                     	;# 
  3531  0E22                     	;# 
  3532  0E23                     	;# 
  3533  0E24                     	;# 
  3534  0E25                     	;# 
  3535  0E26                     	;# 
  3536  0E27                     	;# 
  3537  0E28                     	;# 
  3538  0E29                     	;# 
  3539  0E2A                     	;# 
  3540  0E2B                     	;# 
  3541  0E2C                     	;# 
  3542  0E2D                     	;# 
  3543  0E2E                     	;# 
  3544  0E2F                     	;# 
  3545  0E30                     	;# 
  3546  0E31                     	;# 
  3547  0E32                     	;# 
  3548  0E33                     	;# 
  3549  0E34                     	;# 
  3550  0E35                     	;# 
  3551  0E36                     	;# 
  3552  0E37                     	;# 
  3553  0E8F                     	;# 
  3554  0E90                     	;# 
  3555  0E91                     	;# 
  3556  0E92                     	;# 
  3557  0E93                     	;# 
  3558  0E94                     	;# 
  3559  0E95                     	;# 
  3560  0E96                     	;# 
  3561  0E97                     	;# 
  3562  0E9C                     	;# 
  3563  0E9D                     	;# 
  3564  0E9E                     	;# 
  3565  0EA1                     	;# 
  3566  0EA2                     	;# 
  3567  0EA3                     	;# 
  3568  0EA4                     	;# 
  3569  0EA5                     	;# 
  3570  0EA9                     	;# 
  3571  0EAA                     	;# 
  3572  0EAB                     	;# 
  3573  0EAC                     	;# 
  3574  0EB1                     	;# 
  3575  0EB2                     	;# 
  3576  0EB3                     	;# 
  3577  0EB8                     	;# 
  3578  0EB9                     	;# 
  3579  0EBA                     	;# 
  3580  0EBB                     	;# 
  3581  0EBC                     	;# 
  3582  0EBD                     	;# 
  3583  0EBE                     	;# 
  3584  0EC3                     	;# 
  3585  0EC5                     	;# 
  3586  0EC6                     	;# 
  3587  0EC7                     	;# 
  3588  0EC8                     	;# 
  3589  0EC9                     	;# 
  3590  0ECA                     	;# 
  3591  0ECB                     	;# 
  3592  0ECC                     	;# 
  3593  0F10                     	;# 
  3594  0F11                     	;# 
  3595  0F12                     	;# 
  3596  0F13                     	;# 
  3597  0F14                     	;# 
  3598  0F15                     	;# 
  3599  0F16                     	;# 
  3600  0F17                     	;# 
  3601  0F18                     	;# 
  3602  0F19                     	;# 
  3603  0F1A                     	;# 
  3604  0F1B                     	;# 
  3605  0F1C                     	;# 
  3606  0F1D                     	;# 
  3607  0F1E                     	;# 
  3608  0F1F                     	;# 
  3609  0F20                     	;# 
  3610  0F21                     	;# 
  3611  0F22                     	;# 
  3612  0F23                     	;# 
  3613  0F24                     	;# 
  3614  0F25                     	;# 
  3615  0F26                     	;# 
  3616  0F27                     	;# 
  3617  0F38                     	;# 
  3618  0F39                     	;# 
  3619  0F3A                     	;# 
  3620  0F3B                     	;# 
  3621  0F3C                     	;# 
  3622  0F3D                     	;# 
  3623  0F3E                     	;# 
  3624  0F3F                     	;# 
  3625  0F40                     	;# 
  3626  0F41                     	;# 
  3627  0F43                     	;# 
  3628  0F44                     	;# 
  3629  0F45                     	;# 
  3630  0F46                     	;# 
  3631  0F47                     	;# 
  3632  0F48                     	;# 
  3633  0F49                     	;# 
  3634  0F4A                     	;# 
  3635  0F4B                     	;# 
  3636  0F4C                     	;# 
  3637  0F4E                     	;# 
  3638  0F4F                     	;# 
  3639  0F50                     	;# 
  3640  0F51                     	;# 
  3641  0F52                     	;# 
  3642  0F53                     	;# 
  3643  0F54                     	;# 
  3644  0F55                     	;# 
  3645  0F56                     	;# 
  3646  0F57                     	;# 
  3647  0F65                     	;# 
  3648  0F68                     	;# 
  3649  0F69                     	;# 
  3650  0F6A                     	;# 
  3651  0F6B                     	;# 
  3652  0FE4                     	;# 
  3653  0FE5                     	;# 
  3654  0FE6                     	;# 
  3655  0FE7                     	;# 
  3656  0FE8                     	;# 
  3657  0FE9                     	;# 
  3658  0FEA                     	;# 
  3659  0FEB                     	;# 
  3660  0FED                     	;# 
  3661  0FEE                     	;# 
  3662  0FEF                     	;# 
  3663  0000                     	;# 
  3664  0001                     	;# 
  3665  0002                     	;# 
  3666  0003                     	;# 
  3667  0004                     	;# 
  3668  0005                     	;# 
  3669  0006                     	;# 
  3670  0007                     	;# 
  3671  0008                     	;# 
  3672  0009                     	;# 
  3673  000A                     	;# 
  3674  000B                     	;# 
  3675  000C                     	;# 
  3676  000D                     	;# 
  3677  000E                     	;# 
  3678  0010                     	;# 
  3679  0011                     	;# 
  3680  0012                     	;# 
  3681  0013                     	;# 
  3682  0016                     	;# 
  3683  0017                     	;# 
  3684  0018                     	;# 
  3685  001C                     	;# 
  3686  001C                     	;# 
  3687  001D                     	;# 
  3688  001D                     	;# 
  3689  001E                     	;# 
  3690  001F                     	;# 
  3691  008C                     	;# 
  3692  008C                     	;# 
  3693  008D                     	;# 
  3694  008E                     	;# 
  3695  008E                     	;# 
  3696  008F                     	;# 
  3697  0090                     	;# 
  3698  0090                     	;# 
  3699  0091                     	;# 
  3700  0093                     	;# 
  3701  0094                     	;# 
  3702  0095                     	;# 
  3703  0096                     	;# 
  3704  0097                     	;# 
  3705  0098                     	;# 
  3706  0099                     	;# 
  3707  009A                     	;# 
  3708  009B                     	;# 
  3709  009C                     	;# 
  3710  009D                     	;# 
  3711  009E                     	;# 
  3712  010C                     	;# 
  3713  010D                     	;# 
  3714  010E                     	;# 
  3715  010E                     	;# 
  3716  010F                     	;# 
  3717  0110                     	;# 
  3718  0110                     	;# 
  3719  0111                     	;# 
  3720  0112                     	;# 
  3721  0112                     	;# 
  3722  0113                     	;# 
  3723  0114                     	;# 
  3724  0114                     	;# 
  3725  0115                     	;# 
  3726  0116                     	;# 
  3727  0116                     	;# 
  3728  0117                     	;# 
  3729  0119                     	;# 
  3730  0119                     	;# 
  3731  0119                     	;# 
  3732  011A                     	;# 
  3733  011A                     	;# 
  3734  011A                     	;# 
  3735  011B                     	;# 
  3736  011B                     	;# 
  3737  011B                     	;# 
  3738  011B                     	;# 
  3739  011B                     	;# 
  3740  011C                     	;# 
  3741  011C                     	;# 
  3742  011C                     	;# 
  3743  011D                     	;# 
  3744  011D                     	;# 
  3745  011D                     	;# 
  3746  011E                     	;# 
  3747  011E                     	;# 
  3748  011E                     	;# 
  3749  011F                     	;# 
  3750  011F                     	;# 
  3751  011F                     	;# 
  3752  011F                     	;# 
  3753  011F                     	;# 
  3754  018C                     	;# 
  3755  018D                     	;# 
  3756  018E                     	;# 
  3757  018F                     	;# 
  3758  0190                     	;# 
  3759  0191                     	;# 
  3760  0192                     	;# 
  3761  0196                     	;# 
  3762  0197                     	;# 
  3763  0198                     	;# 
  3764  0199                     	;# 
  3765  019A                     	;# 
  3766  019B                     	;# 
  3767  019C                     	;# 
  3768  020C                     	;# 
  3769  020D                     	;# 
  3770  020E                     	;# 
  3771  020F                     	;# 
  3772  020F                     	;# 
  3773  0210                     	;# 
  3774  0210                     	;# 
  3775  0211                     	;# 
  3776  0211                     	;# 
  3777  0212                     	;# 
  3778  0213                     	;# 
  3779  0214                     	;# 
  3780  0215                     	;# 
  3781  0215                     	;# 
  3782  0216                     	;# 
  3783  0216                     	;# 
  3784  0217                     	;# 
  3785  0217                     	;# 
  3786  0218                     	;# 
  3787  0219                     	;# 
  3788  021A                     	;# 
  3789  021B                     	;# 
  3790  021B                     	;# 
  3791  021C                     	;# 
  3792  021C                     	;# 
  3793  021D                     	;# 
  3794  021D                     	;# 
  3795  021E                     	;# 
  3796  021F                     	;# 
  3797  028C                     	;# 
  3798  028C                     	;# 
  3799  028D                     	;# 
  3800  028D                     	;# 
  3801  028E                     	;# 
  3802  028F                     	;# 
  3803  0290                     	;# 
  3804  0290                     	;# 
  3805  0291                     	;# 
  3806  0292                     	;# 
  3807  0292                     	;# 
  3808  0293                     	;# 
  3809  0293                     	;# 
  3810  0294                     	;# 
  3811  0295                     	;# 
  3812  0296                     	;# 
  3813  0296                     	;# 
  3814  0297                     	;# 
  3815  0298                     	;# 
  3816  0298                     	;# 
  3817  0299                     	;# 
  3818  0299                     	;# 
  3819  029A                     	;# 
  3820  029B                     	;# 
  3821  029C                     	;# 
  3822  029C                     	;# 
  3823  029D                     	;# 
  3824  030C                     	;# 
  3825  030C                     	;# 
  3826  030D                     	;# 
  3827  030E                     	;# 
  3828  030F                     	;# 
  3829  0310                     	;# 
  3830  0310                     	;# 
  3831  0311                     	;# 
  3832  0312                     	;# 
  3833  0313                     	;# 
  3834  0314                     	;# 
  3835  0314                     	;# 
  3836  0315                     	;# 
  3837  0316                     	;# 
  3838  0317                     	;# 
  3839  0318                     	;# 
  3840  0318                     	;# 
  3841  0319                     	;# 
  3842  031A                     	;# 
  3843  031B                     	;# 
  3844  031C                     	;# 
  3845  031C                     	;# 
  3846  031D                     	;# 
  3847  031E                     	;# 
  3848  031F                     	;# 
  3849  038C                     	;# 
  3850  038D                     	;# 
  3851  038E                     	;# 
  3852  0390                     	;# 
  3853  0391                     	;# 
  3854  0392                     	;# 
  3855  040C                     	;# 
  3856  040D                     	;# 
  3857  040E                     	;# 
  3858  040F                     	;# 
  3859  0410                     	;# 
  3860  0411                     	;# 
  3861  0416                     	;# 
  3862  0416                     	;# 
  3863  0417                     	;# 
  3864  0418                     	;# 
  3865  0418                     	;# 
  3866  0419                     	;# 
  3867  041A                     	;# 
  3868  041A                     	;# 
  3869  041B                     	;# 
  3870  041C                     	;# 
  3871  041C                     	;# 
  3872  041D                     	;# 
  3873  041E                     	;# 
  3874  041F                     	;# 
  3875  048C                     	;# 
  3876  048C                     	;# 
  3877  048D                     	;# 
  3878  048E                     	;# 
  3879  048F                     	;# 
  3880  048F                     	;# 
  3881  0490                     	;# 
  3882  0491                     	;# 
  3883  0492                     	;# 
  3884  0492                     	;# 
  3885  0493                     	;# 
  3886  0494                     	;# 
  3887  0495                     	;# 
  3888  0495                     	;# 
  3889  0496                     	;# 
  3890  0497                     	;# 
  3891  0498                     	;# 
  3892  0499                     	;# 
  3893  049A                     	;# 
  3894  049B                     	;# 
  3895  049C                     	;# 
  3896  049D                     	;# 
  3897  050C                     	;# 
  3898  050C                     	;# 
  3899  050D                     	;# 
  3900  050E                     	;# 
  3901  050F                     	;# 
  3902  050F                     	;# 
  3903  0510                     	;# 
  3904  0511                     	;# 
  3905  0512                     	;# 
  3906  0512                     	;# 
  3907  0513                     	;# 
  3908  0514                     	;# 
  3909  0515                     	;# 
  3910  0515                     	;# 
  3911  0516                     	;# 
  3912  0517                     	;# 
  3913  0518                     	;# 
  3914  0519                     	;# 
  3915  051A                     	;# 
  3916  051B                     	;# 
  3917  051C                     	;# 
  3918  051D                     	;# 
  3919  058C                     	;# 
  3920  058C                     	;# 
  3921  058D                     	;# 
  3922  058E                     	;# 
  3923  058F                     	;# 
  3924  058F                     	;# 
  3925  0590                     	;# 
  3926  0591                     	;# 
  3927  0592                     	;# 
  3928  0593                     	;# 
  3929  060C                     	;# 
  3930  060D                     	;# 
  3931  060E                     	;# 
  3932  060F                     	;# 
  3933  0610                     	;# 
  3934  0611                     	;# 
  3935  0612                     	;# 
  3936  0613                     	;# 
  3937  0614                     	;# 
  3938  0616                     	;# 
  3939  0617                     	;# 
  3940  0618                     	;# 
  3941  0619                     	;# 
  3942  061A                     	;# 
  3943  061B                     	;# 
  3944  061C                     	;# 
  3945  061D                     	;# 
  3946  061E                     	;# 
  3947  068C                     	;# 
  3948  068D                     	;# 
  3949  068E                     	;# 
  3950  068F                     	;# 
  3951  0690                     	;# 
  3952  0691                     	;# 
  3953  0692                     	;# 
  3954  0693                     	;# 
  3955  0694                     	;# 
  3956  070C                     	;# 
  3957  070D                     	;# 
  3958  070E                     	;# 
  3959  070F                     	;# 
  3960  0710                     	;# 
  3961  0711                     	;# 
  3962  0712                     	;# 
  3963  0713                     	;# 
  3964  0714                     	;# 
  3965  0716                     	;# 
  3966  0717                     	;# 
  3967  0718                     	;# 
  3968  0719                     	;# 
  3969  071A                     	;# 
  3970  071B                     	;# 
  3971  071C                     	;# 
  3972  071D                     	;# 
  3973  071E                     	;# 
  3974  0796                     	;# 
  3975  0797                     	;# 
  3976  0798                     	;# 
  3977  0799                     	;# 
  3978  079A                     	;# 
  3979  079B                     	;# 
  3980  080C                     	;# 
  3981  080D                     	;# 
  3982  080E                     	;# 
  3983  080F                     	;# 
  3984  0810                     	;# 
  3985  0811                     	;# 
  3986  0812                     	;# 
  3987  0813                     	;# 
  3988  0814                     	;# 
  3989  081A                     	;# 
  3990  081B                     	;# 
  3991  081C                     	;# 
  3992  081D                     	;# 
  3993  081E                     	;# 
  3994  081F                     	;# 
  3995  088C                     	;# 
  3996  088D                     	;# 
  3997  088E                     	;# 
  3998  088F                     	;# 
  3999  0890                     	;# 
  4000  0891                     	;# 
  4001  0892                     	;# 
  4002  0893                     	;# 
  4003  0895                     	;# 
  4004  0896                     	;# 
  4005  0897                     	;# 
  4006  0898                     	;# 
  4007  0899                     	;# 
  4008  089A                     	;# 
  4009  089B                     	;# 
  4010  090C                     	;# 
  4011  090E                     	;# 
  4012  090F                     	;# 
  4013  091F                     	;# 
  4014  091F                     	;# 
  4015  098F                     	;# 
  4016  098F                     	;# 
  4017  0990                     	;# 
  4018  0991                     	;# 
  4019  0992                     	;# 
  4020  0993                     	;# 
  4021  0994                     	;# 
  4022  0995                     	;# 
  4023  0996                     	;# 
  4024  0997                     	;# 
  4025  0E0F                     	;# 
  4026  0E10                     	;# 
  4027  0E11                     	;# 
  4028  0E12                     	;# 
  4029  0E13                     	;# 
  4030  0E14                     	;# 
  4031  0E15                     	;# 
  4032  0E16                     	;# 
  4033  0E17                     	;# 
  4034  0E18                     	;# 
  4035  0E19                     	;# 
  4036  0E1A                     	;# 
  4037  0E1B                     	;# 
  4038  0E1C                     	;# 
  4039  0E1D                     	;# 
  4040  0E1E                     	;# 
  4041  0E1F                     	;# 
  4042  0E20                     	;# 
  4043  0E21                     	;# 
  4044  0E22                     	;# 
  4045  0E23                     	;# 
  4046  0E24                     	;# 
  4047  0E25                     	;# 
  4048  0E26                     	;# 
  4049  0E27                     	;# 
  4050  0E28                     	;# 
  4051  0E29                     	;# 
  4052  0E2A                     	;# 
  4053  0E2B                     	;# 
  4054  0E2C                     	;# 
  4055  0E2D                     	;# 
  4056  0E2E                     	;# 
  4057  0E2F                     	;# 
  4058  0E30                     	;# 
  4059  0E31                     	;# 
  4060  0E32                     	;# 
  4061  0E33                     	;# 
  4062  0E34                     	;# 
  4063  0E35                     	;# 
  4064  0E36                     	;# 
  4065  0E37                     	;# 
  4066  0E8F                     	;# 
  4067  0E90                     	;# 
  4068  0E91                     	;# 
  4069  0E92                     	;# 
  4070  0E93                     	;# 
  4071  0E94                     	;# 
  4072  0E95                     	;# 
  4073  0E96                     	;# 
  4074  0E97                     	;# 
  4075  0E9C                     	;# 
  4076  0E9D                     	;# 
  4077  0E9E                     	;# 
  4078  0EA1                     	;# 
  4079  0EA2                     	;# 
  4080  0EA3                     	;# 
  4081  0EA4                     	;# 
  4082  0EA5                     	;# 
  4083  0EA9                     	;# 
  4084  0EAA                     	;# 
  4085  0EAB                     	;# 
  4086  0EAC                     	;# 
  4087  0EB1                     	;# 
  4088  0EB2                     	;# 
  4089  0EB3                     	;# 
  4090  0EB8                     	;# 
  4091  0EB9                     	;# 
  4092  0EBA                     	;# 
  4093  0EBB                     	;# 
  4094  0EBC                     	;# 
  4095  0EBD                     	;# 
  4096  0EBE                     	;# 
  4097  0EC3                     	;# 
  4098  0EC5                     	;# 
  4099  0EC6                     	;# 
  4100  0EC7                     	;# 
  4101  0EC8                     	;# 
  4102  0EC9                     	;# 
  4103  0ECA                     	;# 
  4104  0ECB                     	;# 
  4105  0ECC                     	;# 
  4106  0F10                     	;# 
  4107  0F11                     	;# 
  4108  0F12                     	;# 
  4109  0F13                     	;# 
  4110  0F14                     	;# 
  4111  0F15                     	;# 
  4112  0F16                     	;# 
  4113  0F17                     	;# 
  4114  0F18                     	;# 
  4115  0F19                     	;# 
  4116  0F1A                     	;# 
  4117  0F1B                     	;# 
  4118  0F1C                     	;# 
  4119  0F1D                     	;# 
  4120  0F1E                     	;# 
  4121  0F1F                     	;# 
  4122  0F20                     	;# 
  4123  0F21                     	;# 
  4124  0F22                     	;# 
  4125  0F23                     	;# 
  4126  0F24                     	;# 
  4127  0F25                     	;# 
  4128  0F26                     	;# 
  4129  0F27                     	;# 
  4130  0F38                     	;# 
  4131  0F39                     	;# 
  4132  0F3A                     	;# 
  4133  0F3B                     	;# 
  4134  0F3C                     	;# 
  4135  0F3D                     	;# 
  4136  0F3E                     	;# 
  4137  0F3F                     	;# 
  4138  0F40                     	;# 
  4139  0F41                     	;# 
  4140  0F43                     	;# 
  4141  0F44                     	;# 
  4142  0F45                     	;# 
  4143  0F46                     	;# 
  4144  0F47                     	;# 
  4145  0F48                     	;# 
  4146  0F49                     	;# 
  4147  0F4A                     	;# 
  4148  0F4B                     	;# 
  4149  0F4C                     	;# 
  4150  0F4E                     	;# 
  4151  0F4F                     	;# 
  4152  0F50                     	;# 
  4153  0F51                     	;# 
  4154  0F52                     	;# 
  4155  0F53                     	;# 
  4156  0F54                     	;# 
  4157  0F55                     	;# 
  4158  0F56                     	;# 
  4159  0F57                     	;# 
  4160  0F65                     	;# 
  4161  0F68                     	;# 
  4162  0F69                     	;# 
  4163  0F6A                     	;# 
  4164  0F6B                     	;# 
  4165  0FE4                     	;# 
  4166  0FE5                     	;# 
  4167  0FE6                     	;# 
  4168  0FE7                     	;# 
  4169  0FE8                     	;# 
  4170  0FE9                     	;# 
  4171  0FEA                     	;# 
  4172  0FEB                     	;# 
  4173  0FED                     	;# 
  4174  0FEE                     	;# 
  4175  0FEF                     	;# 
  4176  0000                     	;# 
  4177  0001                     	;# 
  4178  0002                     	;# 
  4179  0003                     	;# 
  4180  0004                     	;# 
  4181  0005                     	;# 
  4182  0006                     	;# 
  4183  0007                     	;# 
  4184  0008                     	;# 
  4185  0009                     	;# 
  4186  000A                     	;# 
  4187  000B                     	;# 
  4188  000C                     	;# 
  4189  000D                     	;# 
  4190  000E                     	;# 
  4191  0010                     	;# 
  4192  0011                     	;# 
  4193  0012                     	;# 
  4194  0013                     	;# 
  4195  0016                     	;# 
  4196  0017                     	;# 
  4197  0018                     	;# 
  4198  001C                     	;# 
  4199  001C                     	;# 
  4200  001D                     	;# 
  4201  001D                     	;# 
  4202  001E                     	;# 
  4203  001F                     	;# 
  4204  008C                     	;# 
  4205  008C                     	;# 
  4206  008D                     	;# 
  4207  008E                     	;# 
  4208  008E                     	;# 
  4209  008F                     	;# 
  4210  0090                     	;# 
  4211  0090                     	;# 
  4212  0091                     	;# 
  4213  0093                     	;# 
  4214  0094                     	;# 
  4215  0095                     	;# 
  4216  0096                     	;# 
  4217  0097                     	;# 
  4218  0098                     	;# 
  4219  0099                     	;# 
  4220  009A                     	;# 
  4221  009B                     	;# 
  4222  009C                     	;# 
  4223  009D                     	;# 
  4224  009E                     	;# 
  4225  010C                     	;# 
  4226  010D                     	;# 
  4227  010E                     	;# 
  4228  010E                     	;# 
  4229  010F                     	;# 
  4230  0110                     	;# 
  4231  0110                     	;# 
  4232  0111                     	;# 
  4233  0112                     	;# 
  4234  0112                     	;# 
  4235  0113                     	;# 
  4236  0114                     	;# 
  4237  0114                     	;# 
  4238  0115                     	;# 
  4239  0116                     	;# 
  4240  0116                     	;# 
  4241  0117                     	;# 
  4242  0119                     	;# 
  4243  0119                     	;# 
  4244  0119                     	;# 
  4245  011A                     	;# 
  4246  011A                     	;# 
  4247  011A                     	;# 
  4248  011B                     	;# 
  4249  011B                     	;# 
  4250  011B                     	;# 
  4251  011B                     	;# 
  4252  011B                     	;# 
  4253  011C                     	;# 
  4254  011C                     	;# 
  4255  011C                     	;# 
  4256  011D                     	;# 
  4257  011D                     	;# 
  4258  011D                     	;# 
  4259  011E                     	;# 
  4260  011E                     	;# 
  4261  011E                     	;# 
  4262  011F                     	;# 
  4263  011F                     	;# 
  4264  011F                     	;# 
  4265  011F                     	;# 
  4266  011F                     	;# 
  4267  018C                     	;# 
  4268  018D                     	;# 
  4269  018E                     	;# 
  4270  018F                     	;# 
  4271  0190                     	;# 
  4272  0191                     	;# 
  4273  0192                     	;# 
  4274  0196                     	;# 
  4275  0197                     	;# 
  4276  0198                     	;# 
  4277  0199                     	;# 
  4278  019A                     	;# 
  4279  019B                     	;# 
  4280  019C                     	;# 
  4281  020C                     	;# 
  4282  020D                     	;# 
  4283  020E                     	;# 
  4284  020F                     	;# 
  4285  020F                     	;# 
  4286  0210                     	;# 
  4287  0210                     	;# 
  4288  0211                     	;# 
  4289  0211                     	;# 
  4290  0212                     	;# 
  4291  0213                     	;# 
  4292  0214                     	;# 
  4293  0215                     	;# 
  4294  0215                     	;# 
  4295  0216                     	;# 
  4296  0216                     	;# 
  4297  0217                     	;# 
  4298  0217                     	;# 
  4299  0218                     	;# 
  4300  0219                     	;# 
  4301  021A                     	;# 
  4302  021B                     	;# 
  4303  021B                     	;# 
  4304  021C                     	;# 
  4305  021C                     	;# 
  4306  021D                     	;# 
  4307  021D                     	;# 
  4308  021E                     	;# 
  4309  021F                     	;# 
  4310  028C                     	;# 
  4311  028C                     	;# 
  4312  028D                     	;# 
  4313  028D                     	;# 
  4314  028E                     	;# 
  4315  028F                     	;# 
  4316  0290                     	;# 
  4317  0290                     	;# 
  4318  0291                     	;# 
  4319  0292                     	;# 
  4320  0292                     	;# 
  4321  0293                     	;# 
  4322  0293                     	;# 
  4323  0294                     	;# 
  4324  0295                     	;# 
  4325  0296                     	;# 
  4326  0296                     	;# 
  4327  0297                     	;# 
  4328  0298                     	;# 
  4329  0298                     	;# 
  4330  0299                     	;# 
  4331  0299                     	;# 
  4332  029A                     	;# 
  4333  029B                     	;# 
  4334  029C                     	;# 
  4335  029C                     	;# 
  4336  029D                     	;# 
  4337  030C                     	;# 
  4338  030C                     	;# 
  4339  030D                     	;# 
  4340  030E                     	;# 
  4341  030F                     	;# 
  4342  0310                     	;# 
  4343  0310                     	;# 
  4344  0311                     	;# 
  4345  0312                     	;# 
  4346  0313                     	;# 
  4347  0314                     	;# 
  4348  0314                     	;# 
  4349  0315                     	;# 
  4350  0316                     	;# 
  4351  0317                     	;# 
  4352  0318                     	;# 
  4353  0318                     	;# 
  4354  0319                     	;# 
  4355  031A                     	;# 
  4356  031B                     	;# 
  4357  031C                     	;# 
  4358  031C                     	;# 
  4359  031D                     	;# 
  4360  031E                     	;# 
  4361  031F                     	;# 
  4362  038C                     	;# 
  4363  038D                     	;# 
  4364  038E                     	;# 
  4365  0390                     	;# 
  4366  0391                     	;# 
  4367  0392                     	;# 
  4368  040C                     	;# 
  4369  040D                     	;# 
  4370  040E                     	;# 
  4371  040F                     	;# 
  4372  0410                     	;# 
  4373  0411                     	;# 
  4374  0416                     	;# 
  4375  0416                     	;# 
  4376  0417                     	;# 
  4377  0418                     	;# 
  4378  0418                     	;# 
  4379  0419                     	;# 
  4380  041A                     	;# 
  4381  041A                     	;# 
  4382  041B                     	;# 
  4383  041C                     	;# 
  4384  041C                     	;# 
  4385  041D                     	;# 
  4386  041E                     	;# 
  4387  041F                     	;# 
  4388  048C                     	;# 
  4389  048C                     	;# 
  4390  048D                     	;# 
  4391  048E                     	;# 
  4392  048F                     	;# 
  4393  048F                     	;# 
  4394  0490                     	;# 
  4395  0491                     	;# 
  4396  0492                     	;# 
  4397  0492                     	;# 
  4398  0493                     	;# 
  4399  0494                     	;# 
  4400  0495                     	;# 
  4401  0495                     	;# 
  4402  0496                     	;# 
  4403  0497                     	;# 
  4404  0498                     	;# 
  4405  0499                     	;# 
  4406  049A                     	;# 
  4407  049B                     	;# 
  4408  049C                     	;# 
  4409  049D                     	;# 
  4410  050C                     	;# 
  4411  050C                     	;# 
  4412  050D                     	;# 
  4413  050E                     	;# 
  4414  050F                     	;# 
  4415  050F                     	;# 
  4416  0510                     	;# 
  4417  0511                     	;# 
  4418  0512                     	;# 
  4419  0512                     	;# 
  4420  0513                     	;# 
  4421  0514                     	;# 
  4422  0515                     	;# 
  4423  0515                     	;# 
  4424  0516                     	;# 
  4425  0517                     	;# 
  4426  0518                     	;# 
  4427  0519                     	;# 
  4428  051A                     	;# 
  4429  051B                     	;# 
  4430  051C                     	;# 
  4431  051D                     	;# 
  4432  058C                     	;# 
  4433  058C                     	;# 
  4434  058D                     	;# 
  4435  058E                     	;# 
  4436  058F                     	;# 
  4437  058F                     	;# 
  4438  0590                     	;# 
  4439  0591                     	;# 
  4440  0592                     	;# 
  4441  0593                     	;# 
  4442  060C                     	;# 
  4443  060D                     	;# 
  4444  060E                     	;# 
  4445  060F                     	;# 
  4446  0610                     	;# 
  4447  0611                     	;# 
  4448  0612                     	;# 
  4449  0613                     	;# 
  4450  0614                     	;# 
  4451  0616                     	;# 
  4452  0617                     	;# 
  4453  0618                     	;# 
  4454  0619                     	;# 
  4455  061A                     	;# 
  4456  061B                     	;# 
  4457  061C                     	;# 
  4458  061D                     	;# 
  4459  061E                     	;# 
  4460  068C                     	;# 
  4461  068D                     	;# 
  4462  068E                     	;# 
  4463  068F                     	;# 
  4464  0690                     	;# 
  4465  0691                     	;# 
  4466  0692                     	;# 
  4467  0693                     	;# 
  4468  0694                     	;# 
  4469  070C                     	;# 
  4470  070D                     	;# 
  4471  070E                     	;# 
  4472  070F                     	;# 
  4473  0710                     	;# 
  4474  0711                     	;# 
  4475  0712                     	;# 
  4476  0713                     	;# 
  4477  0714                     	;# 
  4478  0716                     	;# 
  4479  0717                     	;# 
  4480  0718                     	;# 
  4481  0719                     	;# 
  4482  071A                     	;# 
  4483  071B                     	;# 
  4484  071C                     	;# 
  4485  071D                     	;# 
  4486  071E                     	;# 
  4487  0796                     	;# 
  4488  0797                     	;# 
  4489  0798                     	;# 
  4490  0799                     	;# 
  4491  079A                     	;# 
  4492  079B                     	;# 
  4493  080C                     	;# 
  4494  080D                     	;# 
  4495  080E                     	;# 
  4496  080F                     	;# 
  4497  0810                     	;# 
  4498  0811                     	;# 
  4499  0812                     	;# 
  4500  0813                     	;# 
  4501  0814                     	;# 
  4502  081A                     	;# 
  4503  081B                     	;# 
  4504  081C                     	;# 
  4505  081D                     	;# 
  4506  081E                     	;# 
  4507  081F                     	;# 
  4508  088C                     	;# 
  4509  088D                     	;# 
  4510  088E                     	;# 
  4511  088F                     	;# 
  4512  0890                     	;# 
  4513  0891                     	;# 
  4514  0892                     	;# 
  4515  0893                     	;# 
  4516  0895                     	;# 
  4517  0896                     	;# 
  4518  0897                     	;# 
  4519  0898                     	;# 
  4520  0899                     	;# 
  4521  089A                     	;# 
  4522  089B                     	;# 
  4523  090C                     	;# 
  4524  090E                     	;# 
  4525  090F                     	;# 
  4526  091F                     	;# 
  4527  091F                     	;# 
  4528  098F                     	;# 
  4529  098F                     	;# 
  4530  0990                     	;# 
  4531  0991                     	;# 
  4532  0992                     	;# 
  4533  0993                     	;# 
  4534  0994                     	;# 
  4535  0995                     	;# 
  4536  0996                     	;# 
  4537  0997                     	;# 
  4538  0E0F                     	;# 
  4539  0E10                     	;# 
  4540  0E11                     	;# 
  4541  0E12                     	;# 
  4542  0E13                     	;# 
  4543  0E14                     	;# 
  4544  0E15                     	;# 
  4545  0E16                     	;# 
  4546  0E17                     	;# 
  4547  0E18                     	;# 
  4548  0E19                     	;# 
  4549  0E1A                     	;# 
  4550  0E1B                     	;# 
  4551  0E1C                     	;# 
  4552  0E1D                     	;# 
  4553  0E1E                     	;# 
  4554  0E1F                     	;# 
  4555  0E20                     	;# 
  4556  0E21                     	;# 
  4557  0E22                     	;# 
  4558  0E23                     	;# 
  4559  0E24                     	;# 
  4560  0E25                     	;# 
  4561  0E26                     	;# 
  4562  0E27                     	;# 
  4563  0E28                     	;# 
  4564  0E29                     	;# 
  4565  0E2A                     	;# 
  4566  0E2B                     	;# 
  4567  0E2C                     	;# 
  4568  0E2D                     	;# 
  4569  0E2E                     	;# 
  4570  0E2F                     	;# 
  4571  0E30                     	;# 
  4572  0E31                     	;# 
  4573  0E32                     	;# 
  4574  0E33                     	;# 
  4575  0E34                     	;# 
  4576  0E35                     	;# 
  4577  0E36                     	;# 
  4578  0E37                     	;# 
  4579  0E8F                     	;# 
  4580  0E90                     	;# 
  4581  0E91                     	;# 
  4582  0E92                     	;# 
  4583  0E93                     	;# 
  4584  0E94                     	;# 
  4585  0E95                     	;# 
  4586  0E96                     	;# 
  4587  0E97                     	;# 
  4588  0E9C                     	;# 
  4589  0E9D                     	;# 
  4590  0E9E                     	;# 
  4591  0EA1                     	;# 
  4592  0EA2                     	;# 
  4593  0EA3                     	;# 
  4594  0EA4                     	;# 
  4595  0EA5                     	;# 
  4596  0EA9                     	;# 
  4597  0EAA                     	;# 
  4598  0EAB                     	;# 
  4599  0EAC                     	;# 
  4600  0EB1                     	;# 
  4601  0EB2                     	;# 
  4602  0EB3                     	;# 
  4603  0EB8                     	;# 
  4604  0EB9                     	;# 
  4605  0EBA                     	;# 
  4606  0EBB                     	;# 
  4607  0EBC                     	;# 
  4608  0EBD                     	;# 
  4609  0EBE                     	;# 
  4610  0EC3                     	;# 
  4611  0EC5                     	;# 
  4612  0EC6                     	;# 
  4613  0EC7                     	;# 
  4614  0EC8                     	;# 
  4615  0EC9                     	;# 
  4616  0ECA                     	;# 
  4617  0ECB                     	;# 
  4618  0ECC                     	;# 
  4619  0F10                     	;# 
  4620  0F11                     	;# 
  4621  0F12                     	;# 
  4622  0F13                     	;# 
  4623  0F14                     	;# 
  4624  0F15                     	;# 
  4625  0F16                     	;# 
  4626  0F17                     	;# 
  4627  0F18                     	;# 
  4628  0F19                     	;# 
  4629  0F1A                     	;# 
  4630  0F1B                     	;# 
  4631  0F1C                     	;# 
  4632  0F1D                     	;# 
  4633  0F1E                     	;# 
  4634  0F1F                     	;# 
  4635  0F20                     	;# 
  4636  0F21                     	;# 
  4637  0F22                     	;# 
  4638  0F23                     	;# 
  4639  0F24                     	;# 
  4640  0F25                     	;# 
  4641  0F26                     	;# 
  4642  0F27                     	;# 
  4643  0F38                     	;# 
  4644  0F39                     	;# 
  4645  0F3A                     	;# 
  4646  0F3B                     	;# 
  4647  0F3C                     	;# 
  4648  0F3D                     	;# 
  4649  0F3E                     	;# 
  4650  0F3F                     	;# 
  4651  0F40                     	;# 
  4652  0F41                     	;# 
  4653  0F43                     	;# 
  4654  0F44                     	;# 
  4655  0F45                     	;# 
  4656  0F46                     	;# 
  4657  0F47                     	;# 
  4658  0F48                     	;# 
  4659  0F49                     	;# 
  4660  0F4A                     	;# 
  4661  0F4B                     	;# 
  4662  0F4C                     	;# 
  4663  0F4E                     	;# 
  4664  0F4F                     	;# 
  4665  0F50                     	;# 
  4666  0F51                     	;# 
  4667  0F52                     	;# 
  4668  0F53                     	;# 
  4669  0F54                     	;# 
  4670  0F55                     	;# 
  4671  0F56                     	;# 
  4672  0F57                     	;# 
  4673  0F65                     	;# 
  4674  0F68                     	;# 
  4675  0F69                     	;# 
  4676  0F6A                     	;# 
  4677  0F6B                     	;# 
  4678  0FE4                     	;# 
  4679  0FE5                     	;# 
  4680  0FE6                     	;# 
  4681  0FE7                     	;# 
  4682  0FE8                     	;# 
  4683  0FE9                     	;# 
  4684  0FEA                     	;# 
  4685  0FEB                     	;# 
  4686  0FED                     	;# 
  4687  0FEE                     	;# 
  4688  0FEF                     	;# 
  4689  0000                     	;# 
  4690  0001                     	;# 
  4691  0002                     	;# 
  4692  0003                     	;# 
  4693  0004                     	;# 
  4694  0005                     	;# 
  4695  0006                     	;# 
  4696  0007                     	;# 
  4697  0008                     	;# 
  4698  0009                     	;# 
  4699  000A                     	;# 
  4700  000B                     	;# 
  4701  000C                     	;# 
  4702  000D                     	;# 
  4703  000E                     	;# 
  4704  0010                     	;# 
  4705  0011                     	;# 
  4706  0012                     	;# 
  4707  0013                     	;# 
  4708  0016                     	;# 
  4709  0017                     	;# 
  4710  0018                     	;# 
  4711  001C                     	;# 
  4712  001C                     	;# 
  4713  001D                     	;# 
  4714  001D                     	;# 
  4715  001E                     	;# 
  4716  001F                     	;# 
  4717  008C                     	;# 
  4718  008C                     	;# 
  4719  008D                     	;# 
  4720  008E                     	;# 
  4721  008E                     	;# 
  4722  008F                     	;# 
  4723  0090                     	;# 
  4724  0090                     	;# 
  4725  0091                     	;# 
  4726  0093                     	;# 
  4727  0094                     	;# 
  4728  0095                     	;# 
  4729  0096                     	;# 
  4730  0097                     	;# 
  4731  0098                     	;# 
  4732  0099                     	;# 
  4733  009A                     	;# 
  4734  009B                     	;# 
  4735  009C                     	;# 
  4736  009D                     	;# 
  4737  009E                     	;# 
  4738  010C                     	;# 
  4739  010D                     	;# 
  4740  010E                     	;# 
  4741  010E                     	;# 
  4742  010F                     	;# 
  4743  0110                     	;# 
  4744  0110                     	;# 
  4745  0111                     	;# 
  4746  0112                     	;# 
  4747  0112                     	;# 
  4748  0113                     	;# 
  4749  0114                     	;# 
  4750  0114                     	;# 
  4751  0115                     	;# 
  4752  0116                     	;# 
  4753  0116                     	;# 
  4754  0117                     	;# 
  4755  0119                     	;# 
  4756  0119                     	;# 
  4757  0119                     	;# 
  4758  011A                     	;# 
  4759  011A                     	;# 
  4760  011A                     	;# 
  4761  011B                     	;# 
  4762  011B                     	;# 
  4763  011B                     	;# 
  4764  011B                     	;# 
  4765  011B                     	;# 
  4766  011C                     	;# 
  4767  011C                     	;# 
  4768  011C                     	;# 
  4769  011D                     	;# 
  4770  011D                     	;# 
  4771  011D                     	;# 
  4772  011E                     	;# 
  4773  011E                     	;# 
  4774  011E                     	;# 
  4775  011F                     	;# 
  4776  011F                     	;# 
  4777  011F                     	;# 
  4778  011F                     	;# 
  4779  011F                     	;# 
  4780  018C                     	;# 
  4781  018D                     	;# 
  4782  018E                     	;# 
  4783  018F                     	;# 
  4784  0190                     	;# 
  4785  0191                     	;# 
  4786  0192                     	;# 
  4787  0196                     	;# 
  4788  0197                     	;# 
  4789  0198                     	;# 
  4790  0199                     	;# 
  4791  019A                     	;# 
  4792  019B                     	;# 
  4793  019C                     	;# 
  4794  020C                     	;# 
  4795  020D                     	;# 
  4796  020E                     	;# 
  4797  020F                     	;# 
  4798  020F                     	;# 
  4799  0210                     	;# 
  4800  0210                     	;# 
  4801  0211                     	;# 
  4802  0211                     	;# 
  4803  0212                     	;# 
  4804  0213                     	;# 
  4805  0214                     	;# 
  4806  0215                     	;# 
  4807  0215                     	;# 
  4808  0216                     	;# 
  4809  0216                     	;# 
  4810  0217                     	;# 
  4811  0217                     	;# 
  4812  0218                     	;# 
  4813  0219                     	;# 
  4814  021A                     	;# 
  4815  021B                     	;# 
  4816  021B                     	;# 
  4817  021C                     	;# 
  4818  021C                     	;# 
  4819  021D                     	;# 
  4820  021D                     	;# 
  4821  021E                     	;# 
  4822  021F                     	;# 
  4823  028C                     	;# 
  4824  028C                     	;# 
  4825  028D                     	;# 
  4826  028D                     	;# 
  4827  028E                     	;# 
  4828  028F                     	;# 
  4829  0290                     	;# 
  4830  0290                     	;# 
  4831  0291                     	;# 
  4832  0292                     	;# 
  4833  0292                     	;# 
  4834  0293                     	;# 
  4835  0293                     	;# 
  4836  0294                     	;# 
  4837  0295                     	;# 
  4838  0296                     	;# 
  4839  0296                     	;# 
  4840  0297                     	;# 
  4841  0298                     	;# 
  4842  0298                     	;# 
  4843  0299                     	;# 
  4844  0299                     	;# 
  4845  029A                     	;# 
  4846  029B                     	;# 
  4847  029C                     	;# 
  4848  029C                     	;# 
  4849  029D                     	;# 
  4850  030C                     	;# 
  4851  030C                     	;# 
  4852  030D                     	;# 
  4853  030E                     	;# 
  4854  030F                     	;# 
  4855  0310                     	;# 
  4856  0310                     	;# 
  4857  0311                     	;# 
  4858  0312                     	;# 
  4859  0313                     	;# 
  4860  0314                     	;# 
  4861  0314                     	;# 
  4862  0315                     	;# 
  4863  0316                     	;# 
  4864  0317                     	;# 
  4865  0318                     	;# 
  4866  0318                     	;# 
  4867  0319                     	;# 
  4868  031A                     	;# 
  4869  031B                     	;# 
  4870  031C                     	;# 
  4871  031C                     	;# 
  4872  031D                     	;# 
  4873  031E                     	;# 
  4874  031F                     	;# 
  4875  038C                     	;# 
  4876  038D                     	;# 
  4877  038E                     	;# 
  4878  0390                     	;# 
  4879  0391                     	;# 
  4880  0392                     	;# 
  4881  040C                     	;# 
  4882  040D                     	;# 
  4883  040E                     	;# 
  4884  040F                     	;# 
  4885  0410                     	;# 
  4886  0411                     	;# 
  4887  0416                     	;# 
  4888  0416                     	;# 
  4889  0417                     	;# 
  4890  0418                     	;# 
  4891  0418                     	;# 
  4892  0419                     	;# 
  4893  041A                     	;# 
  4894  041A                     	;# 
  4895  041B                     	;# 
  4896  041C                     	;# 
  4897  041C                     	;# 
  4898  041D                     	;# 
  4899  041E                     	;# 
  4900  041F                     	;# 
  4901  048C                     	;# 
  4902  048C                     	;# 
  4903  048D                     	;# 
  4904  048E                     	;# 
  4905  048F                     	;# 
  4906  048F                     	;# 
  4907  0490                     	;# 
  4908  0491                     	;# 
  4909  0492                     	;# 
  4910  0492                     	;# 
  4911  0493                     	;# 
  4912  0494                     	;# 
  4913  0495                     	;# 
  4914  0495                     	;# 
  4915  0496                     	;# 
  4916  0497                     	;# 
  4917  0498                     	;# 
  4918  0499                     	;# 
  4919  049A                     	;# 
  4920  049B                     	;# 
  4921  049C                     	;# 
  4922  049D                     	;# 
  4923  050C                     	;# 
  4924  050C                     	;# 
  4925  050D                     	;# 
  4926  050E                     	;# 
  4927  050F                     	;# 
  4928  050F                     	;# 
  4929  0510                     	;# 
  4930  0511                     	;# 
  4931  0512                     	;# 
  4932  0512                     	;# 
  4933  0513                     	;# 
  4934  0514                     	;# 
  4935  0515                     	;# 
  4936  0515                     	;# 
  4937  0516                     	;# 
  4938  0517                     	;# 
  4939  0518                     	;# 
  4940  0519                     	;# 
  4941  051A                     	;# 
  4942  051B                     	;# 
  4943  051C                     	;# 
  4944  051D                     	;# 
  4945  058C                     	;# 
  4946  058C                     	;# 
  4947  058D                     	;# 
  4948  058E                     	;# 
  4949  058F                     	;# 
  4950  058F                     	;# 
  4951  0590                     	;# 
  4952  0591                     	;# 
  4953  0592                     	;# 
  4954  0593                     	;# 
  4955  060C                     	;# 
  4956  060D                     	;# 
  4957  060E                     	;# 
  4958  060F                     	;# 
  4959  0610                     	;# 
  4960  0611                     	;# 
  4961  0612                     	;# 
  4962  0613                     	;# 
  4963  0614                     	;# 
  4964  0616                     	;# 
  4965  0617                     	;# 
  4966  0618                     	;# 
  4967  0619                     	;# 
  4968  061A                     	;# 
  4969  061B                     	;# 
  4970  061C                     	;# 
  4971  061D                     	;# 
  4972  061E                     	;# 
  4973  068C                     	;# 
  4974  068D                     	;# 
  4975  068E                     	;# 
  4976  068F                     	;# 
  4977  0690                     	;# 
  4978  0691                     	;# 
  4979  0692                     	;# 
  4980  0693                     	;# 
  4981  0694                     	;# 
  4982  070C                     	;# 
  4983  070D                     	;# 
  4984  070E                     	;# 
  4985  070F                     	;# 
  4986  0710                     	;# 
  4987  0711                     	;# 
  4988  0712                     	;# 
  4989  0713                     	;# 
  4990  0714                     	;# 
  4991  0716                     	;# 
  4992  0717                     	;# 
  4993  0718                     	;# 
  4994  0719                     	;# 
  4995  071A                     	;# 
  4996  071B                     	;# 
  4997  071C                     	;# 
  4998  071D                     	;# 
  4999  071E                     	;# 
  5000  0796                     	;# 
  5001  0797                     	;# 
  5002  0798                     	;# 
  5003  0799                     	;# 
  5004  079A                     	;# 
  5005  079B                     	;# 
  5006  080C                     	;# 
  5007  080D                     	;# 
  5008  080E                     	;# 
  5009  080F                     	;# 
  5010  0810                     	;# 
  5011  0811                     	;# 
  5012  0812                     	;# 
  5013  0813                     	;# 
  5014  0814                     	;# 
  5015  081A                     	;# 
  5016  081B                     	;# 
  5017  081C                     	;# 
  5018  081D                     	;# 
  5019  081E                     	;# 
  5020  081F                     	;# 
  5021  088C                     	;# 
  5022  088D                     	;# 
  5023  088E                     	;# 
  5024  088F                     	;# 
  5025  0890                     	;# 
  5026  0891                     	;# 
  5027  0892                     	;# 
  5028  0893                     	;# 
  5029  0895                     	;# 
  5030  0896                     	;# 
  5031  0897                     	;# 
  5032  0898                     	;# 
  5033  0899                     	;# 
  5034  089A                     	;# 
  5035  089B                     	;# 
  5036  090C                     	;# 
  5037  090E                     	;# 
  5038  090F                     	;# 
  5039  091F                     	;# 
  5040  091F                     	;# 
  5041  098F                     	;# 
  5042  098F                     	;# 
  5043  0990                     	;# 
  5044  0991                     	;# 
  5045  0992                     	;# 
  5046  0993                     	;# 
  5047  0994                     	;# 
  5048  0995                     	;# 
  5049  0996                     	;# 
  5050  0997                     	;# 
  5051  0E0F                     	;# 
  5052  0E10                     	;# 
  5053  0E11                     	;# 
  5054  0E12                     	;# 
  5055  0E13                     	;# 
  5056  0E14                     	;# 
  5057  0E15                     	;# 
  5058  0E16                     	;# 
  5059  0E17                     	;# 
  5060  0E18                     	;# 
  5061  0E19                     	;# 
  5062  0E1A                     	;# 
  5063  0E1B                     	;# 
  5064  0E1C                     	;# 
  5065  0E1D                     	;# 
  5066  0E1E                     	;# 
  5067  0E1F                     	;# 
  5068  0E20                     	;# 
  5069  0E21                     	;# 
  5070  0E22                     	;# 
  5071  0E23                     	;# 
  5072  0E24                     	;# 
  5073  0E25                     	;# 
  5074  0E26                     	;# 
  5075  0E27                     	;# 
  5076  0E28                     	;# 
  5077  0E29                     	;# 
  5078  0E2A                     	;# 
  5079  0E2B                     	;# 
  5080  0E2C                     	;# 
  5081  0E2D                     	;# 
  5082  0E2E                     	;# 
  5083  0E2F                     	;# 
  5084  0E30                     	;# 
  5085  0E31                     	;# 
  5086  0E32                     	;# 
  5087  0E33                     	;# 
  5088  0E34                     	;# 
  5089  0E35                     	;# 
  5090  0E36                     	;# 
  5091  0E37                     	;# 
  5092  0E8F                     	;# 
  5093  0E90                     	;# 
  5094  0E91                     	;# 
  5095  0E92                     	;# 
  5096  0E93                     	;# 
  5097  0E94                     	;# 
  5098  0E95                     	;# 
  5099  0E96                     	;# 
  5100  0E97                     	;# 
  5101  0E9C                     	;# 
  5102  0E9D                     	;# 
  5103  0E9E                     	;# 
  5104  0EA1                     	;# 
  5105  0EA2                     	;# 
  5106  0EA3                     	;# 
  5107  0EA4                     	;# 
  5108  0EA5                     	;# 
  5109  0EA9                     	;# 
  5110  0EAA                     	;# 
  5111  0EAB                     	;# 
  5112  0EAC                     	;# 
  5113  0EB1                     	;# 
  5114  0EB2                     	;# 
  5115  0EB3                     	;# 
  5116  0EB8                     	;# 
  5117  0EB9                     	;# 
  5118  0EBA                     	;# 
  5119  0EBB                     	;# 
  5120  0EBC                     	;# 
  5121  0EBD                     	;# 
  5122  0EBE                     	;# 
  5123  0EC3                     	;# 
  5124  0EC5                     	;# 
  5125  0EC6                     	;# 
  5126  0EC7                     	;# 
  5127  0EC8                     	;# 
  5128  0EC9                     	;# 
  5129  0ECA                     	;# 
  5130  0ECB                     	;# 
  5131  0ECC                     	;# 
  5132  0F10                     	;# 
  5133  0F11                     	;# 
  5134  0F12                     	;# 
  5135  0F13                     	;# 
  5136  0F14                     	;# 
  5137  0F15                     	;# 
  5138  0F16                     	;# 
  5139  0F17                     	;# 
  5140  0F18                     	;# 
  5141  0F19                     	;# 
  5142  0F1A                     	;# 
  5143  0F1B                     	;# 
  5144  0F1C                     	;# 
  5145  0F1D                     	;# 
  5146  0F1E                     	;# 
  5147  0F1F                     	;# 
  5148  0F20                     	;# 
  5149  0F21                     	;# 
  5150  0F22                     	;# 
  5151  0F23                     	;# 
  5152  0F24                     	;# 
  5153  0F25                     	;# 
  5154  0F26                     	;# 
  5155  0F27                     	;# 
  5156  0F38                     	;# 
  5157  0F39                     	;# 
  5158  0F3A                     	;# 
  5159  0F3B                     	;# 
  5160  0F3C                     	;# 
  5161  0F3D                     	;# 
  5162  0F3E                     	;# 
  5163  0F3F                     	;# 
  5164  0F40                     	;# 
  5165  0F41                     	;# 
  5166  0F43                     	;# 
  5167  0F44                     	;# 
  5168  0F45                     	;# 
  5169  0F46                     	;# 
  5170  0F47                     	;# 
  5171  0F48                     	;# 
  5172  0F49                     	;# 
  5173  0F4A                     	;# 
  5174  0F4B                     	;# 
  5175  0F4C                     	;# 
  5176  0F4E                     	;# 
  5177  0F4F                     	;# 
  5178  0F50                     	;# 
  5179  0F51                     	;# 
  5180  0F52                     	;# 
  5181  0F53                     	;# 
  5182  0F54                     	;# 
  5183  0F55                     	;# 
  5184  0F56                     	;# 
  5185  0F57                     	;# 
  5186  0F65                     	;# 
  5187  0F68                     	;# 
  5188  0F69                     	;# 
  5189  0F6A                     	;# 
  5190  0F6B                     	;# 
  5191  0FE4                     	;# 
  5192  0FE5                     	;# 
  5193  0FE6                     	;# 
  5194  0FE7                     	;# 
  5195  0FE8                     	;# 
  5196  0FE9                     	;# 
  5197  0FEA                     	;# 
  5198  0FEB                     	;# 
  5199  0FED                     	;# 
  5200  0FEE                     	;# 
  5201  0FEF                     	;_Isamples
  5202                           
  5203                           	psect	idataBANK1
  5204  1158                     __pidataBANK1:	
  5205                           
  5206                           ;initializer for _batteryTemp
  5207  1158  34FA               	retlw	250
  5208  1159  3400               	retlw	0
  5209                           
  5210                           	psect	idataBANK2
  5211  1DFA                     __pidataBANK2:	
  5212                           
  5213                           ;initializer for _Ichannels
  5214  1DFA  3414               	retlw	20
  5215  1DFB  3400               	retlw	0
  5216  1DFC  3410               	retlw	16
  5217  1DFD  3400               	retlw	0
  5218  1DFE  3416               	retlw	22
  5219  1DFF  3400               	retlw	0
  5220  1E00  3412               	retlw	18
  5221  1E01  3400               	retlw	0
  5222                           
  5223                           ;initializer for _Vchannels
  5224  1E02  3415               	retlw	21
  5225  1E03  3400               	retlw	0
  5226  1E04  3411               	retlw	17
  5227  1E05  3400               	retlw	0
  5228  1E06  3417               	retlw	23
  5229  1E07  3400               	retlw	0
  5230  1E08  3413               	retlw	19
  5231  1E09  3400               	retlw	0
  5232                           
  5233                           	psect	stringtext
  5234  1000                     __pstringtext:	
  5235  1000                     _fonts:	
  5236  1000  3400               	retlw	0
  5237  1001  3400               	retlw	0
  5238  1002  3400               	retlw	0
  5239  1003  3400               	retlw	0
  5240  1004  344E               	retlw	78
  5241  1005  3400               	retlw	0
  5242  1006  3406               	retlw	6
  5243  1007  3400               	retlw	0
  5244  1008  3406               	retlw	6
  5245  1009  34FF               	retlw	255
  5246  100A  34FF               	retlw	255
  5247  100B  34FF               	retlw	255
  5248  100C  3448               	retlw	72
  5249  100D  34D6               	retlw	214
  5250  100E  3424               	retlw	36
  5251  100F  3412               	retlw	18
  5252  1010  3408               	retlw	8
  5253  1011  3424               	retlw	36
  5254  1012  34FF               	retlw	255
  5255  1013  34FF               	retlw	255
  5256  1014  34FF               	retlw	255
  5257  1015  3400               	retlw	0
  5258  1016  3406               	retlw	6
  5259  1017  3400               	retlw	0
  5260  1018  3438               	retlw	56
  5261  1019  3444               	retlw	68
  5262  101A  3482               	retlw	130
  5263  101B  3482               	retlw	130
  5264  101C  3444               	retlw	68
  5265  101D  3438               	retlw	56
  5266  101E  3414               	retlw	20
  5267  101F  3408               	retlw	8
  5268  1020  343E               	retlw	62
  5269  1021  3410               	retlw	16
  5270  1022  3438               	retlw	56
  5271  1023  3410               	retlw	16
  5272  1024  34A0               	retlw	160
  5273  1025  3460               	retlw	96
  5274  1026  3400               	retlw	0
  5275  1027  3410               	retlw	16
  5276  1028  3410               	retlw	16
  5277  1029  3410               	retlw	16
  5278  102A  3460               	retlw	96
  5279  102B  3460               	retlw	96
  5280  102C  3400               	retlw	0
  5281  102D  3460               	retlw	96
  5282  102E  3418               	retlw	24
  5283  102F  3406               	retlw	6
  5284  1030  347C               	retlw	124
  5285  1031  3442               	retlw	66
  5286  1032  347C               	retlw	124
  5287  1033  3444               	retlw	68
  5288  1034  347E               	retlw	126
  5289  1035  3440               	retlw	64
  5290  1036  3464               	retlw	100
  5291  1037  3452               	retlw	82
  5292  1038  344C               	retlw	76
  5293  1039  344A               	retlw	74
  5294  103A  344A               	retlw	74
  5295  103B  3434               	retlw	52
  5296  103C  3438               	retlw	56
  5297  103D  3424               	retlw	36
  5298  103E  347E               	retlw	126
  5299  103F  344E               	retlw	78
  5300  1040  344A               	retlw	74
  5301  1041  3432               	retlw	50
  5302  1042  343C               	retlw	60
  5303  1043  344A               	retlw	74
  5304  1044  3432               	retlw	50
  5305  1045  3462               	retlw	98
  5306  1046  341A               	retlw	26
  5307  1047  3406               	retlw	6
  5308  1048  3476               	retlw	118
  5309  1049  344A               	retlw	74
  5310  104A  3476               	retlw	118
  5311  104B  344C               	retlw	76
  5312  104C  3452               	retlw	82
  5313  104D  343C               	retlw	60
  5314  104E  346C               	retlw	108
  5315  104F  346C               	retlw	108
  5316  1050  3400               	retlw	0
  5317  1051  34AC               	retlw	172
  5318  1052  346C               	retlw	108
  5319  1053  3400               	retlw	0
  5320  1054  3410               	retlw	16
  5321  1055  3428               	retlw	40
  5322  1056  3444               	retlw	68
  5323  1057  3428               	retlw	40
  5324  1058  3428               	retlw	40
  5325  1059  3428               	retlw	40
  5326  105A  3444               	retlw	68
  5327  105B  3428               	retlw	40
  5328  105C  3410               	retlw	16
  5329  105D  3402               	retlw	2
  5330  105E  3459               	retlw	89
  5331  105F  3406               	retlw	6
  5332  1060  34FF               	retlw	255
  5333  1061  34FF               	retlw	255
  5334  1062  34FF               	retlw	255
  5335  1063  347C               	retlw	124
  5336  1064  3412               	retlw	18
  5337  1065  347C               	retlw	124
  5338  1066  347E               	retlw	126
  5339  1067  345A               	retlw	90
  5340  1068  3434               	retlw	52
  5341  1069  343C               	retlw	60
  5342  106A  3442               	retlw	66
  5343  106B  3442               	retlw	66
  5344  106C  347E               	retlw	126
  5345  106D  3442               	retlw	66
  5346  106E  343C               	retlw	60
  5347  106F  347E               	retlw	126
  5348  1070  344A               	retlw	74
  5349  1071  3442               	retlw	66
  5350  1072  347E               	retlw	126
  5351  1073  340A               	retlw	10
  5352  1074  340A               	retlw	10
  5353  1075  343C               	retlw	60
  5354  1076  3452               	retlw	82
  5355  1077  3434               	retlw	52
  5356  1078  347E               	retlw	126
  5357  1079  3408               	retlw	8
  5358  107A  347E               	retlw	126
  5359  107B  3442               	retlw	66
  5360  107C  347E               	retlw	126
  5361  107D  3442               	retlw	66
  5362  107E  3430               	retlw	48
  5363  107F  3440               	retlw	64
  5364  1080  343E               	retlw	62
  5365  1081  347E               	retlw	126
  5366  1082  3418               	retlw	24
  5367  1083  3466               	retlw	102
  5368  1084  347E               	retlw	126
  5369  1085  3440               	retlw	64
  5370  1086  3440               	retlw	64
  5371  1087  347E               	retlw	126
  5372  1088  341C               	retlw	28
  5373  1089  347E               	retlw	126
  5374  108A  347E               	retlw	126
  5375  108B  3402               	retlw	2
  5376  108C  347E               	retlw	126
  5377  108D  343C               	retlw	60
  5378  108E  3442               	retlw	66
  5379  108F  343C               	retlw	60
  5380  1090  347E               	retlw	126
  5381  1091  3412               	retlw	18
  5382  1092  340C               	retlw	12
  5383  1093  347E               	retlw	126
  5384  1094  3462               	retlw	98
  5385  1095  34FE               	retlw	254
  5386  1096  347E               	retlw	126
  5387  1097  3432               	retlw	50
  5388  1098  344E               	retlw	78
  5389  1099  3444               	retlw	68
  5390  109A  344A               	retlw	74
  5391  109B  3432               	retlw	50
  5392  109C  3402               	retlw	2
  5393  109D  347E               	retlw	126
  5394  109E  3402               	retlw	2
  5395  109F  347E               	retlw	126
  5396  10A0  3440               	retlw	64
  5397  10A1  347E               	retlw	126
  5398  10A2  343E               	retlw	62
  5399  10A3  3440               	retlw	64
  5400  10A4  343E               	retlw	62
  5401  10A5  347E               	retlw	126
  5402  10A6  3438               	retlw	56
  5403  10A7  347E               	retlw	126
  5404  10A8  3466               	retlw	102
  5405  10A9  3418               	retlw	24
  5406  10AA  3466               	retlw	102
  5407  10AB  340E               	retlw	14
  5408  10AC  3470               	retlw	112
  5409  10AD  340E               	retlw	14
  5410  10AE  3462               	retlw	98
  5411  10AF  345A               	retlw	90
  5412  10B0  3446               	retlw	70
  5413  10B1  3400               	retlw	0
  5414  10B2  347E               	retlw	126
  5415  10B3  3442               	retlw	66
  5416  10B4  3406               	retlw	6
  5417  10B5  3418               	retlw	24
  5418  10B6  3460               	retlw	96
  5419  10B7  3442               	retlw	66
  5420  10B8  347E               	retlw	126
  5421  10B9  3400               	retlw	0
  5422  10BA  3404               	retlw	4
  5423  10BB  3402               	retlw	2
  5424  10BC  3404               	retlw	4
  5425  10BD  3440               	retlw	64
  5426  10BE  3440               	retlw	64
  5427  10BF  3440               	retlw	64
  5428  10C0  3400               	retlw	0
  5429  10C1  3402               	retlw	2
  5430  10C2  3404               	retlw	4
  5431  10C3  3474               	retlw	116
  5432  10C4  3454               	retlw	84
  5433  10C5  3478               	retlw	120
  5434  10C6  347E               	retlw	126
  5435  10C7  3448               	retlw	72
  5436  10C8  3430               	retlw	48
  5437  10C9  3430               	retlw	48
  5438  10CA  3448               	retlw	72
  5439  10CB  3448               	retlw	72
  5440  10CC  3430               	retlw	48
  5441  10CD  3448               	retlw	72
  5442  10CE  347E               	retlw	126
  5443  10CF  3438               	retlw	56
  5444  10D0  3454               	retlw	84
  5445  10D1  3458               	retlw	88
  5446  10D2  347C               	retlw	124
  5447  10D3  340A               	retlw	10
  5448  10D4  3402               	retlw	2
  5449  10D5  3498               	retlw	152
  5450  10D6  34A4               	retlw	164
  5451  10D7  347C               	retlw	124
  5452  10D8  347E               	retlw	126
  5453  10D9  3408               	retlw	8
  5454  10DA  3470               	retlw	112
  5455  10DB  3448               	retlw	72
  5456  10DC  347A               	retlw	122
  5457  10DD  3440               	retlw	64
  5458  10DE  3488               	retlw	136
  5459  10DF  34FA               	retlw	250
  5460  10E0  3400               	retlw	0
  5461  10E1  347E               	retlw	126
  5462  10E2  3418               	retlw	24
  5463  10E3  3464               	retlw	100
  5464  10E4  3442               	retlw	66
  5465  10E5  347E               	retlw	126
  5466  10E6  3440               	retlw	64
  5467  10E7  347C               	retlw	124
  5468  10E8  3438               	retlw	56
  5469  10E9  347C               	retlw	124
  5470  10EA  347C               	retlw	124
  5471  10EB  3404               	retlw	4
  5472  10EC  3478               	retlw	120
  5473  10ED  3438               	retlw	56
  5474  10EE  3444               	retlw	68
  5475  10EF  3438               	retlw	56
  5476  10F0  34FC               	retlw	252
  5477  10F1  3424               	retlw	36
  5478  10F2  3418               	retlw	24
  5479  10F3  3418               	retlw	24
  5480  10F4  3424               	retlw	36
  5481  10F5  34FC               	retlw	252
  5482  10F6  3478               	retlw	120
  5483  10F7  3404               	retlw	4
  5484  10F8  3404               	retlw	4
  5485  10F9  3448               	retlw	72
  5486  10FA  3454               	retlw	84
  5487  10FB  3424               	retlw	36
  5488  10FC  3404               	retlw	4
  5489  10FD  343E               	retlw	62
  5490  10FE  3444               	retlw	68
  5491  10FF  347C               	retlw	124
  5492  1100  3440               	retlw	64
  5493  1101  347C               	retlw	124
  5494  1102  343C               	retlw	60
  5495  1103  3440               	retlw	64
  5496  1104  343C               	retlw	60
  5497  1105  347C               	retlw	124
  5498  1106  3430               	retlw	48
  5499  1107  347C               	retlw	124
  5500  1108  346C               	retlw	108
  5501  1109  3410               	retlw	16
  5502  110A  346C               	retlw	108
  5503  110B  349C               	retlw	156
  5504  110C  34A0               	retlw	160
  5505  110D  347C               	retlw	124
  5506  110E  3464               	retlw	100
  5507  110F  3454               	retlw	84
  5508  1110  344C               	retlw	76
  5509  1111  340C               	retlw	12
  5510  1112  3412               	retlw	18
  5511  1113  340C               	retlw	12
  5512  1114  34FF               	retlw	255
  5513  1115  34FF               	retlw	255
  5514  1116  34FF               	retlw	255
  5515  1117  34FF               	retlw	255
  5516  1118  34FF               	retlw	255
  5517  1119  34FF               	retlw	255
  5518  111A  34FF               	retlw	255
  5519  111B  34FF               	retlw	255
  5520  111C  34FF               	retlw	255
  5521  111D  34FF               	retlw	255
  5522  111E  34FF               	retlw	255
  5523  111F  34FF               	retlw	255
  5524  1120  34FF               	retlw	255
  5525  1121  34FF               	retlw	255
  5526  1122  34FF               	retlw	255
  5527  1123  34FF               	retlw	255
  5528  1124  34FF               	retlw	255
  5529  1125  34FF               	retlw	255
  5530  1126  34FC               	retlw	252
  5531  1127  3440               	retlw	64
  5532  1128  347C               	retlw	124
  5533  1129  34FF               	retlw	255
  5534  112A  34FF               	retlw	255
  5535  112B  34FF               	retlw	255
  5536  112C  34FF               	retlw	255
  5537  112D  34FF               	retlw	255
  5538  112E  34FF               	retlw	255
  5539  112F                     __end_of_fonts:	
  5540  112F                     log@coeff:	
  5541  112F  3400               	retlw	0
  5542  1130  3400               	retlw	0
  5543  1131  3400               	retlw	0
  5544  1132  3400               	retlw	0
  5545  1133  3480               	retlw	128
  5546  1134  343F               	retlw	63
  5547  1135  34F0               	retlw	240
  5548  1136  34FF               	retlw	255
  5549  1137  34BE               	retlw	190
  5550  1138  34E2               	retlw	226
  5551  1139  34A9               	retlw	169
  5552  113A  343E               	retlw	62
  5553  113B  3483               	retlw	131
  5554  113C  3476               	retlw	118
  5555  113D  34BE               	retlw	190
  5556  113E  34AE               	retlw	174
  5557  113F  342B               	retlw	43
  5558  1140  343E               	retlw	62
  5559  1141  343C               	retlw	60
  5560  1142  34C3               	retlw	195
  5561  1143  34BD               	retlw	189
  5562  1144  34D2               	retlw	210
  5563  1145  3413               	retlw	19
  5564  1146  343D               	retlw	61
  5565  1147  3478               	retlw	120
  5566  1148  34D3               	retlw	211
  5567  1149  34BB               	retlw	187
  5568  114A                     __end_oflog@coeff:	
  5569  0016                     _LATA	set	22
  5570  0016                     _LATAbits	set	22
  5571  0017                     _LATB	set	23
  5572  0018                     _LATC	set	24
  5573  0011                     _TRISA	set	17
  5574  0011                     _TRISAbits	set	17
  5575  0012                     _TRISB	set	18
  5576  0013                     _TRISC	set	19
  5577  005F                     _GIE	set	95
  5578  00B5                     _LATA5	set	181
  5579  006A                     _RB2	set	106
  5580  009D                     _ADACQ	set	157
  5581  0099                     _ADACT	set	153
  5582  009B                     _ADCAP	set	155
  5583  0098                     _ADCLK	set	152
  5584  0093                     _ADCON0	set	147
  5585  0093                     _ADCON0bits	set	147
  5586  0094                     _ADCON1	set	148
  5587  0095                     _ADCON2	set	149
  5588  0096                     _ADCON3	set	150
  5589  009E                     _ADPCH	set	158
  5590  009C                     _ADPRE	set	156
  5591  009A                     _ADREF	set	154
  5592  008D                     _ADRESH	set	141
  5593  008C                     _ADRESL	set	140
  5594  0097                     _ADSTAT	set	151
  5595  010F                     _ADLTHH	set	271
  5596  010E                     _ADLTHL	set	270
  5597  010D                     _ADRPT	set	269
  5598  0113                     _ADSTPTH	set	275
  5599  0112                     _ADSTPTL	set	274
  5600  0111                     _ADUTHH	set	273
  5601  0110                     _ADUTHL	set	272
  5602  021E                     _CCPTMRS0bits	set	542
  5603  021F                     _CCPTMRS1bits	set	543
  5604  0290                     _T2CLKCON	set	656
  5605  028E                     _T2CON	set	654
  5606  028E                     _T2CONbits	set	654
  5607  028F                     _T2HLT	set	655
  5608  028D                     _T2PR	set	653
  5609  0291                     _T2RST	set	657
  5610  028C                     _T2TMR	set	652
  5611  0296                     _T4CLKCON	set	662
  5612  0294                     _T4CON	set	660
  5613  0294                     _T4CONbits	set	660
  5614  0295                     _T4HLT	set	661
  5615  0293                     _T4PR	set	659
  5616  0297                     _T4RST	set	663
  5617  0292                     _T4TMR	set	658
  5618  030E                     _CCP1CONbits	set	782
  5619  030D                     _CCPR1H	set	781
  5620  030C                     _CCPR1L	set	780
  5621  038E                     _PWM6CON	set	910
  5622  038D                     _PWM6DCH	set	909
  5623  038C                     _PWM6DCL	set	908
  5624  0392                     _PWM7CON	set	914
  5625  0391                     _PWM7DCH	set	913
  5626  0390                     _PWM7DCL	set	912
  5627  0716                     _PIE0bits	set	1814
  5628  0710                     _PIR4bits	set	1808
  5629  088D                     _OSCCON1	set	2189
  5630  088F                     _OSCCON3	set	2191
  5631  0891                     _OSCEN	set	2193
  5632  0893                     _OSCFRQ	set	2195
  5633  0892                     _OSCTUNE	set	2194
  5634  090C                     _FVRCON	set	2316
  5635  0E8F                     _PPSLOCK	set	3727
  5636  0E8F                     _PPSLOCKbits	set	3727
  5637  0F38                     _ANSELA	set	3896
  5638  0F43                     _ANSELB	set	3907
  5639  0F4E                     _ANSELC	set	3918
  5640  0F16                     _RA6PPS	set	3862
  5641  0F17                     _RA7PPS	set	3863
  5642  0F18                     _RB0PPS	set	3864
  5643  0F39                     _WPUA	set	3897
  5644  0F44                     _WPUB	set	3908
  5645  0F4F                     _WPUC	set	3919
  5646  0F65                     _WPUE	set	3941
  5647  114A                     STR_3:	
  5648  114A  3452               	retlw	82	;'R'
  5649  114B  3465               	retlw	101	;'e'
  5650  114C  3466               	retlw	102	;'f'
  5651  114D  343A               	retlw	58	;':'
  5652  114E  3400               	retlw	0
  5653  114F                     STR_2:	
  5654  114F  344F               	retlw	79	;'O'
  5655  1150  3475               	retlw	117	;'u'
  5656  1151  3474               	retlw	116	;'t'
  5657  1152  343A               	retlw	58	;':'
  5658  1153  3400               	retlw	0
  5659  1154                     STR_1:	
  5660  1154  3449               	retlw	73	;'I'
  5661  1155  346E               	retlw	110	;'n'
  5662  1156  343A               	retlw	58	;':'
  5663  1157  3400               	retlw	0
  5664                           
  5665                           ; #config settings
  5666  0000                     
  5667                           	psect	cinit
  5668  07B0                     start_initialization:	
  5669  07B0                     __initialization:		;BIGRAM
  5670                           
  5671                           ; Initialize objects allocated to BANK1
  5672  07B0  0021               	movlb	1	; select bank1
  5673  07B1  3191  2158  3187   	fcall	__pidataBANK1	;fetch initializer
  5674  07B4  00ED               	movwf	__pdataBANK1& (0+127)
  5675  07B5  3191  2159  3187   	fcall	__pidataBANK1+1	;fetch initializer
  5676  07B8  00EE               	movwf	(__pdataBANK1+1)& (0+127)
  5677                           
  5678                           ; Initialize objects allocated to BANK2
  5679  07B9  30FA               	movlw	low __pidataBANK2
  5680  07BA  0084               	movwf	4
  5681  07BB  309D               	movlw	(high __pidataBANK2)| (0+128)
  5682  07BC  0085               	movwf	5
  5683  07BD  3059               	movlw	low __pdataBANK2
  5684  07BE  0086               	movwf	6
  5685  07BF  3001               	movlw	high __pdataBANK2
  5686  07C0  0087               	movwf	7
  5687  07C1  3000               	movlw	0
  5688  07C2  00FF               	movwf	btemp+1
  5689  07C3  3010               	movlw	16
  5690  07C4  319D  25E0  3187   	fcall	init_ram
  5691                           
  5692                           ; Clear objects allocated to BIGRAM
  5693  07C7  3060               	movlw	low (0+8800)
  5694  07C8  0084               	movwf	4
  5695  07C9  3022               	movlw	high (0+8800)
  5696  07CA  0085               	movwf	5
  5697  07CB  3090               	movlw	144
  5698  07CC  00FE               	movwf	btemp
  5699  07CD  3001               	movlw	1
  5700  07CE  00FF               	movwf	btemp+1
  5701  07CF  319D  25D4  3187   	fcall	clear_ram0
  5702                           
  5703                           ; Clear objects allocated to BANK0
  5704  07D2  305E               	movlw	low __pbssBANK0
  5705  07D3  0084               	movwf	4
  5706  07D4  3000               	movlw	high __pbssBANK0
  5707  07D5  0085               	movwf	5
  5708  07D6  3011               	movlw	17
  5709  07D7  00FE               	movwf	btemp
  5710  07D8  3000               	movlw	0
  5711  07D9  00FF               	movwf	btemp+1
  5712  07DA  319D  25D4  3187   	fcall	clear_ram0
  5713                           
  5714                           ; Clear objects allocated to BANK1
  5715  07DD  30A0               	movlw	low __pbssBANK1
  5716  07DE  0084               	movwf	4
  5717  07DF  3000               	movlw	high __pbssBANK1
  5718  07E0  0085               	movwf	5
  5719  07E1  3028               	movlw	40
  5720  07E2  00FE               	movwf	btemp
  5721  07E3  3000               	movlw	0
  5722  07E4  00FF               	movwf	btemp+1
  5723  07E5  319D  25D4  3187   	fcall	clear_ram0
  5724                           
  5725                           ; Clear objects allocated to BANK2
  5726  07E8  3020               	movlw	low __pbssBANK2
  5727  07E9  0084               	movwf	4
  5728  07EA  3001               	movlw	high __pbssBANK2
  5729  07EB  0085               	movwf	5
  5730  07EC  3039               	movlw	57
  5731  07ED  00FE               	movwf	btemp
  5732  07EE  3000               	movlw	0
  5733  07EF  00FF               	movwf	btemp+1
  5734  07F0  319D  25D4  3187   	fcall	clear_ram0
  5735                           
  5736                           ; Clear objects allocated to BANK3
  5737  07F3  30A0               	movlw	low __pbssBANK3
  5738  07F4  0084               	movwf	4
  5739  07F5  3001               	movlw	high __pbssBANK3
  5740  07F6  0085               	movwf	5
  5741  07F7  3028               	movlw	40
  5742  07F8  00FE               	movwf	btemp
  5743  07F9  3000               	movlw	0
  5744  07FA  00FF               	movwf	btemp+1
  5745  07FB  319D  25D4         	fcall	clear_ram0
  5746  07FD                     end_of_initialization:	
  5747                           ;End of C runtime variable initialization code
  5748                           
  5749  07FD                     __end_of__initialization:	
  5750  07FD  0020               	movlb	0
  5751  07FE  3180  2841         	ljmp	_main	;jump to C main() function
  5752                           
  5753                           	psect	bssBANK0
  5754  005E                     __pbssBANK0:	
  5755  005E                     _IminCount:	
  5756  005E                     	ds	4
  5757  0062                     _IsampleIndex:	
  5758  0062                     	ds	2
  5759  0064                     _VsampleIndex:	
  5760  0064                     	ds	2
  5761  0066                     _floatCount:	
  5762  0066                     	ds	2
  5763  0068                     _readButtons:	
  5764  0068                     	ds	2
  5765  006A                     _button:	
  5766  006A                     	ds	1
  5767  006B                     _j:	
  5768  006B                     	ds	1
  5769  006C                     _lastButton:	
  5770  006C                     	ds	1
  5771  006D                     _otherState:	
  5772  006D                     	ds	1
  5773  006E                     _x:	
  5774  006E                     	ds	1
  5775                           
  5776                           	psect	bssBANK1
  5777  00A0                     __pbssBANK1:	
  5778  00A0                     _current:	
  5779  00A0                     	ds	8
  5780  00A8                     _voltage:	
  5781  00A8                     	ds	8
  5782  00B0                     _Iref:	
  5783  00B0                     	ds	4
  5784  00B4                     _Vref:	
  5785  00B4                     	ds	4
  5786  00B8                     _stateCounter:	
  5787  00B8                     	ds	4
  5788  00BC                     _Imode:	
  5789  00BC                     	ds	2
  5790  00BE                     _Iout:	
  5791  00BE                     	ds	2
  5792  00C0                     _VHoldMode:	
  5793  00C0                     	ds	2
  5794  00C2                     _batteryState:	
  5795  00C2                     	ds	2
  5796  00C4                     _cc_cv:	
  5797  00C4                     	ds	2
  5798  00C6                     _errno:	
  5799  00C6                     	ds	2
  5800                           
  5801                           	psect	dataBANK1
  5802  00ED                     __pdataBANK1:	
  5803  00ED                     _batteryTemp:	
  5804  00ED                     	ds	2
  5805                           
  5806                           	psect	bssBANK2
  5807  0120                     __pbssBANK2:	
  5808  0120                     _Itotals:	
  5809  0120                     	ds	16
  5810  0130                     _Vtotals:	
  5811  0130                     	ds	16
  5812  0140                     _Ianalogs:	
  5813  0140                     	ds	8
  5814  0148                     _Vanalogs:	
  5815  0148                     	ds	8
  5816  0150                     LCDWriteInt@F13692:	
  5817  0150                     	ds	5
  5818  0155                     _Imin:	
  5819  0155                     	ds	4
  5820                           
  5821                           	psect	dataBANK2
  5822  0159                     __pdataBANK2:	
  5823  0159                     _Ichannels:	
  5824  0159                     	ds	8
  5825  0161                     _Vchannels:	
  5826  0161                     	ds	8
  5827                           
  5828                           	psect	bssBANK3
  5829  01A0                     __pbssBANK3:	
  5830  01A0                     _Vsamples:	
  5831  01A0                     	ds	40
  5832                           
  5833                           	psect	inittext
  5834  1DE0                     init_ram:	
  5835  1DE0  00FE               	movwf	126
  5836  1DE1                     initloop:	
  5837  1DE1  0012               	moviw fsr0++
  5838  1DE2  001E               	movwi fsr1++
  5839  1DE3  3001               	movlw	1
  5840  1DE4  02FE               	subwf	126,f
  5841  1DE5  3000               	movlw	0
  5842  1DE6  3BFF               	subwfb	127,f
  5843  1DE7  087F               	movf	127,w
  5844  1DE8  047E               	iorwf	126,w
  5845  1DE9  1903               	btfsc	3,2
  5846  1DEA  3400               	retlw	0
  5847  1DEB  2DE1               	goto	initloop
  5848                           
  5849                           	psect	clrtext
  5850  1DD4                     clear_ram0:	
  5851                           ;	Called with FSR0 containing the base address, and
  5852                           ;	btemp/btemp+1 has the size to clear
  5853                           
  5854  1DD4  0064               	clrwdt	;clear the watchdog before getting into this loop
  5855  1DD5                     clrloop0:	
  5856  1DD5  0180               	clrf	0	;clear RAM location pointed to by FSR
  5857  1DD6  3101               	addfsr 0,1
  5858  1DD7  3001               	movlw	1
  5859  1DD8  02FE               	subwf	126,f
  5860  1DD9  3000               	movlw	0
  5861  1DDA  3BFF               	subwfb	127,f
  5862  1DDB  087F               	movf	127,w
  5863  1DDC  047E               	iorwf	126,w
  5864  1DDD  1903               	btfsc	3,2
  5865  1DDE  3400               	retlw	0	;all done for this memory range, return
  5866  1DDF  2DD5               	goto	clrloop0	;have we reached the end yet?
  5867                           
  5868                           	psect	cstackBANK1
  5869  00C8                     __pcstackBANK1:	
  5870  00C8                     main@efficiency:	
  5871                           
  5872                           ; 3 bytes @ 0x0
  5873  00C8                     	ds	3
  5874  00CB                     main@faultCount:	
  5875                           
  5876                           ; 2 bytes @ 0x3
  5877  00CB                     	ds	2
  5878  00CD                     main@faultNotReset:	
  5879                           
  5880                           ; 2 bytes @ 0x5
  5881  00CD                     	ds	2
  5882  00CF                     main@fastLoop:	
  5883                           
  5884                           ; 1 bytes @ 0x7
  5885  00CF                     	ds	1
  5886  00D0                     main@tempVoltage:	
  5887                           
  5888                           ; 8 bytes @ 0x8
  5889  00D0                     	ds	8
  5890  00D8                     main@displayRefresh:	
  5891                           
  5892                           ; 1 bytes @ 0x10
  5893  00D8                     	ds	1
  5894  00D9                     main@slowLoop:	
  5895                           
  5896                           ; 1 bytes @ 0x11
  5897  00D9                     	ds	1
  5898  00DA                     main@MPPT0:	
  5899                           
  5900                           ; 2 bytes @ 0x12
  5901  00DA                     	ds	2
  5902  00DC                     main@MPPT1:	
  5903                           
  5904                           ; 2 bytes @ 0x14
  5905  00DC                     	ds	2
  5906  00DE                     main@largerIOut:	
  5907                           
  5908                           ; 2 bytes @ 0x16
  5909  00DE                     	ds	2
  5910  00E0                     main@menuButton:	
  5911                           
  5912                           ; 1 bytes @ 0x18
  5913  00E0                     	ds	1
  5914  00E1                     main@dutyCycle1:	
  5915                           
  5916                           ; 2 bytes @ 0x19
  5917  00E1                     	ds	2
  5918  00E3                     main@tempFanOutput:	
  5919                           
  5920                           ; 2 bytes @ 0x1B
  5921  00E3                     	ds	2
  5922  00E5                     _main$1304:	
  5923                           
  5924                           ; 3 bytes @ 0x1D
  5925  00E5                     	ds	3
  5926  00E8                     main@dutyCycle6:	
  5927                           
  5928                           ; 2 bytes @ 0x20
  5929  00E8                     	ds	2
  5930  00EA                     main@dutyCycle7:	
  5931                           
  5932                           ; 2 bytes @ 0x22
  5933  00EA                     	ds	2
  5934  00EC                     main@j:	
  5935                           
  5936                           ; 1 bytes @ 0x24
  5937  00EC                     	ds	1
  5938                           
  5939                           	psect	cstackCOMMON
  5940  0070                     __pcstackCOMMON:	
  5941  0070                     ?_SYSTEM_Initialize:	
  5942  0070                     ?_LCDClear:	
  5943                           ; 1 bytes @ 0x0
  5944                           
  5945  0070                     ?_PWM6_LoadDutyValue:	
  5946                           ; 1 bytes @ 0x0
  5947                           
  5948  0070                     ?_PWM7_LoadDutyValue:	
  5949                           ; 1 bytes @ 0x0
  5950                           
  5951  0070                     ?_readButton:	
  5952                           ; 1 bytes @ 0x0
  5953                           
  5954  0070                     ?_LCDInit:	
  5955                           ; 1 bytes @ 0x0
  5956                           
  5957  0070                     ?_PWM1_LoadDutyValue:	
  5958                           ; 1 bytes @ 0x0
  5959                           
  5960  0070                     ?_Battery_State_Machine:	
  5961                           ; 1 bytes @ 0x0
  5962                           
  5963  0070                     ?_LCDWriteCharacter:	
  5964                           ; 1 bytes @ 0x0
  5965                           
  5966  0070                     ?_cc_cv_mode:	
  5967                           ; 1 bytes @ 0x0
  5968                           
  5969  0070                     ?_calculateCurrent0:	
  5970                           ; 1 bytes @ 0x0
  5971                           
  5972  0070                     ?_calculateCurrent2:	
  5973                           ; 1 bytes @ 0x0
  5974                           
  5975  0070                     ??_calculateCurrent2:	
  5976                           ; 1 bytes @ 0x0
  5977                           
  5978  0070                     ?_calculateCurrent3:	
  5979                           ; 1 bytes @ 0x0
  5980                           
  5981  0070                     ?_LCDWrite:	
  5982                           ; 1 bytes @ 0x0
  5983                           
  5984  0070                     ?_OSCILLATOR_Initialize:	
  5985                           ; 1 bytes @ 0x0
  5986                           
  5987  0070                     ??_OSCILLATOR_Initialize:	
  5988                           ; 1 bytes @ 0x0
  5989                           
  5990  0070                     ?_TMR2_Initialize:	
  5991                           ; 1 bytes @ 0x0
  5992                           
  5993  0070                     ??_TMR2_Initialize:	
  5994                           ; 1 bytes @ 0x0
  5995                           
  5996  0070                     ?_TMR4_Initialize:	
  5997                           ; 1 bytes @ 0x0
  5998                           
  5999  0070                     ??_TMR4_Initialize:	
  6000                           ; 1 bytes @ 0x0
  6001                           
  6002  0070                     ?_main:	
  6003                           ; 1 bytes @ 0x0
  6004                           
  6005  0070                     ?_ADC_Initialize:	
  6006                           ; 1 bytes @ 0x0
  6007                           
  6008  0070                     ??_ADC_Initialize:	
  6009                           ; 1 bytes @ 0x0
  6010                           
  6011  0070                     ?_Init_Battery_State_Machine:	
  6012                           ; 1 bytes @ 0x0
  6013                           
  6014  0070                     ?_PIN_MANAGER_Initialize:	
  6015                           ; 1 bytes @ 0x0
  6016                           
  6017  0070                     ??_PIN_MANAGER_Initialize:	
  6018                           ; 1 bytes @ 0x0
  6019                           
  6020  0070                     ?_PWM_Initialize:	
  6021                           ; 1 bytes @ 0x0
  6022                           
  6023  0070                     ??_PWM_Initialize:	
  6024                           ; 1 bytes @ 0x0
  6025                           
  6026  0070                     ?___bmul:	
  6027                           ; 1 bytes @ 0x0
  6028                           
  6029  0070                     ?_ADCRead:	
  6030                           ; 1 bytes @ 0x0
  6031                           
  6032  0070                     ?___wmul:	
  6033                           ; 2 bytes @ 0x0
  6034                           
  6035  0070                     ?___awdiv:	
  6036                           ; 2 bytes @ 0x0
  6037                           
  6038  0070                     ?___lwmod:	
  6039                           ; 2 bytes @ 0x0
  6040                           
  6041  0070                     ?___ftpack:	
  6042                           ; 2 bytes @ 0x0
  6043                           
  6044  0070                     ?_frexp:	
  6045                           ; 3 bytes @ 0x0
  6046                           
  6047  0070                     ?___aldiv:	
  6048                           ; 3 bytes @ 0x0
  6049                           
  6050  0070                     LCDWrite@data:	
  6051                           ; 4 bytes @ 0x0
  6052                           
  6053  0070                     PIN_MANAGER_Initialize@state:	
  6054                           ; 1 bytes @ 0x0
  6055                           
  6056  0070                     ___bmul@multiplicand:	
  6057                           ; 1 bytes @ 0x0
  6058                           
  6059  0070                     PWM6_LoadDutyValue@dutyCycle6:	
  6060                           ; 1 bytes @ 0x0
  6061                           
  6062  0070                     PWM7_LoadDutyValue@dutyCycle7:	
  6063                           ; 2 bytes @ 0x0
  6064                           
  6065  0070                     PWM1_LoadDutyValue@dutyCycle1:	
  6066                           ; 2 bytes @ 0x0
  6067                           
  6068  0070                     ___wmul@multiplier:	
  6069                           ; 2 bytes @ 0x0
  6070                           
  6071  0070                     ___awdiv@divisor:	
  6072                           ; 2 bytes @ 0x0
  6073                           
  6074  0070                     ___lwmod@divisor:	
  6075                           ; 2 bytes @ 0x0
  6076                           
  6077  0070                     ___ftpack@arg:	
  6078                           ; 2 bytes @ 0x0
  6079                           
  6080  0070                     frexp@value:	
  6081                           ; 3 bytes @ 0x0
  6082                           
  6083  0070                     ___aldiv@divisor:	
  6084                           ; 3 bytes @ 0x0
  6085                           
  6086                           
  6087                           ; 4 bytes @ 0x0
  6088  0070                     	ds	1
  6089  0071                     ??_LCDWrite:	
  6090  0071                     ??___bmul:	
  6091                           ; 1 bytes @ 0x1
  6092                           
  6093                           
  6094                           ; 1 bytes @ 0x1
  6095  0071                     	ds	1
  6096  0072                     ??_PWM6_LoadDutyValue:	
  6097  0072                     ??_PWM7_LoadDutyValue:	
  6098                           ; 1 bytes @ 0x2
  6099                           
  6100  0072                     ??_PWM1_LoadDutyValue:	
  6101                           ; 1 bytes @ 0x2
  6102                           
  6103  0072                     LCDWrite@data_or_command:	
  6104                           ; 1 bytes @ 0x2
  6105                           
  6106  0072                     ___bmul@product:	
  6107                           ; 1 bytes @ 0x2
  6108                           
  6109  0072                     ___wmul@multiplicand:	
  6110                           ; 1 bytes @ 0x2
  6111                           
  6112  0072                     ___awdiv@dividend:	
  6113                           ; 2 bytes @ 0x2
  6114                           
  6115  0072                     ___lwmod@dividend:	
  6116                           ; 2 bytes @ 0x2
  6117                           
  6118                           
  6119                           ; 2 bytes @ 0x2
  6120  0072                     	ds	1
  6121  0073                     ??_ADCRead:	
  6122  0073                     ADCRead@channel:	
  6123                           ; 1 bytes @ 0x3
  6124                           
  6125  0073                     LCDWrite@d:	
  6126                           ; 1 bytes @ 0x3
  6127                           
  6128  0073                     ___bmul@multiplier:	
  6129                           ; 1 bytes @ 0x3
  6130                           
  6131  0073                     ___ftpack@exp:	
  6132                           ; 1 bytes @ 0x3
  6133                           
  6134  0073                     frexp@eptr:	
  6135                           ; 1 bytes @ 0x3
  6136                           
  6137                           
  6138                           ; 1 bytes @ 0x3
  6139  0073                     	ds	1
  6140  0074                     ??_readButton:	
  6141  0074                     ??_frexp:	
  6142                           ; 1 bytes @ 0x4
  6143                           
  6144  0074                     ??___wmul:	
  6145                           ; 1 bytes @ 0x4
  6146                           
  6147  0074                     ??___awdiv:	
  6148                           ; 1 bytes @ 0x4
  6149                           
  6150  0074                     ??___lwmod:	
  6151                           ; 1 bytes @ 0x4
  6152                           
  6153  0074                     LCDWrite@i:	
  6154                           ; 1 bytes @ 0x4
  6155                           
  6156  0074                     ___ftpack@sign:	
  6157                           ; 1 bytes @ 0x4
  6158                           
  6159  0074                     ___wmul@product:	
  6160                           ; 1 bytes @ 0x4
  6161                           
  6162  0074                     ___aldiv@dividend:	
  6163                           ; 2 bytes @ 0x4
  6164                           
  6165                           
  6166                           ; 4 bytes @ 0x4
  6167  0074                     	ds	1
  6168  0075                     ??_LCDInit:	
  6169  0075                     ?_gotoXY:	
  6170                           ; 1 bytes @ 0x5
  6171                           
  6172  0075                     ??___ftpack:	
  6173                           ; 1 bytes @ 0x5
  6174                           
  6175  0075                     gotoXY@y:	
  6176                           ; 1 bytes @ 0x5
  6177                           
  6178  0075                     ___awdiv@counter:	
  6179                           ; 1 bytes @ 0x5
  6180                           
  6181  0075                     ___lwmod@counter:	
  6182                           ; 1 bytes @ 0x5
  6183                           
  6184                           
  6185                           ; 1 bytes @ 0x5
  6186  0075                     	ds	1
  6187  0076                     ??_gotoXY:	
  6188  0076                     ??_LCDWriteCharacter:	
  6189                           ; 1 bytes @ 0x6
  6190                           
  6191  0076                     ___awdiv@sign:	
  6192                           ; 1 bytes @ 0x6
  6193                           
  6194                           
  6195                           ; 1 bytes @ 0x6
  6196  0076                     	ds	1
  6197  0077                     gotoXY@x:	
  6198  0077                     ___awdiv@quotient:	
  6199                           ; 1 bytes @ 0x7
  6200                           
  6201                           
  6202                           ; 2 bytes @ 0x7
  6203  0077                     	ds	1
  6204  0078                     ??_LCDClear:	
  6205  0078                     ??___aldiv:	
  6206                           ; 1 bytes @ 0x8
  6207                           
  6208                           
  6209                           ; 1 bytes @ 0x8
  6210  0078                     	ds	1
  6211  0079                     ?___awtoft:	
  6212  0079                     LCDWriteCharacter@character:	
  6213                           ; 3 bytes @ 0x9
  6214                           
  6215  0079                     readIAnalog@analog_channel:	
  6216                           ; 1 bytes @ 0x9
  6217                           
  6218  0079                     readVAnalog@analog_channel:	
  6219                           ; 2 bytes @ 0x9
  6220                           
  6221  0079                     LCDClear@index:	
  6222                           ; 2 bytes @ 0x9
  6223                           
  6224  0079                     ___awtoft@c:	
  6225                           ; 2 bytes @ 0x9
  6226                           
  6227                           
  6228                           ; 2 bytes @ 0x9
  6229  0079                     	ds	1
  6230  007A                     LCDWriteCharacter@base:	
  6231                           
  6232                           ; 2 bytes @ 0xA
  6233  007A                     	ds	1
  6234  007B                     readIAnalog@value:	
  6235  007B                     readVAnalog@value:	
  6236                           ; 2 bytes @ 0xB
  6237                           
  6238                           
  6239                           ; 2 bytes @ 0xB
  6240  007B                     	ds	1
  6241  007C                     ?_LCDWriteString:	
  6242  007C                     ??___awtoft:	
  6243                           ; 1 bytes @ 0xC
  6244                           
  6245  007C                     LCDWriteString@characters:	
  6246                           ; 1 bytes @ 0xC
  6247                           
  6248                           
  6249                           ; 2 bytes @ 0xC
  6250  007C                     	ds	2
  6251  007E                     ??_tempCalc:	
  6252  007E                     ??_eval_poly:	
  6253                           ; 1 bytes @ 0xE
  6254                           
  6255  007E                     ??___ftsub:	
  6256                           ; 1 bytes @ 0xE
  6257                           
  6258                           
  6259                           	psect	cstackBANK0
  6260  0020                     __pcstackBANK0:	
  6261                           ; 1 bytes @ 0xE
  6262                           
  6263  0020                     ??_LCDWriteString:	
  6264  0020                     ___aldiv@counter:	
  6265                           ; 1 bytes @ 0x0
  6266                           
  6267  0020                     ___awtoft@sign:	
  6268                           ; 1 bytes @ 0x0
  6269                           
  6270                           
  6271                           ; 1 bytes @ 0x0
  6272  0020                     	ds	1
  6273  0021                     ?___ftdiv:	
  6274  0021                     ?___ftmul:	
  6275                           ; 3 bytes @ 0x1
  6276                           
  6277  0021                     ___aldiv@sign:	
  6278                           ; 3 bytes @ 0x1
  6279                           
  6280  0021                     ___ftdiv@f2:	
  6281                           ; 1 bytes @ 0x1
  6282                           
  6283  0021                     ___ftmul@f1:	
  6284                           ; 3 bytes @ 0x1
  6285                           
  6286                           
  6287                           ; 3 bytes @ 0x1
  6288  0021                     	ds	1
  6289  0022                     ___aldiv@quotient:	
  6290                           
  6291                           ; 4 bytes @ 0x2
  6292  0022                     	ds	2
  6293  0024                     ___ftdiv@f1:	
  6294  0024                     ___ftmul@f2:	
  6295                           ; 3 bytes @ 0x4
  6296                           
  6297                           
  6298                           ; 3 bytes @ 0x4
  6299  0024                     	ds	2
  6300  0026                     ?_readIAnalog:	
  6301  0026                     ?_readVAnalog:	
  6302                           ; 2 bytes @ 0x6
  6303                           
  6304  0026                     readIAnalog@channel:	
  6305                           ; 2 bytes @ 0x6
  6306                           
  6307  0026                     readVAnalog@channel:	
  6308                           ; 2 bytes @ 0x6
  6309                           
  6310                           
  6311                           ; 2 bytes @ 0x6
  6312  0026                     	ds	1
  6313  0027                     ??___ftdiv:	
  6314  0027                     ??___ftmul:	
  6315                           ; 1 bytes @ 0x7
  6316                           
  6317                           
  6318                           ; 1 bytes @ 0x7
  6319  0027                     	ds	1
  6320  0028                     ??_readIAnalog:	
  6321  0028                     ??_readVAnalog:	
  6322                           ; 1 bytes @ 0x8
  6323                           
  6324                           
  6325                           ; 1 bytes @ 0x8
  6326  0028                     	ds	3
  6327  002B                     ___ftdiv@cntr:	
  6328  002B                     ___ftmul@exp:	
  6329                           ; 1 bytes @ 0xB
  6330                           
  6331                           
  6332                           ; 1 bytes @ 0xB
  6333  002B                     	ds	1
  6334  002C                     ___ftdiv@f3:	
  6335  002C                     ___ftmul@f3_as_product:	
  6336                           ; 3 bytes @ 0xC
  6337                           
  6338                           
  6339                           ; 3 bytes @ 0xC
  6340  002C                     	ds	3
  6341  002F                     ___ftdiv@exp:	
  6342  002F                     ___ftmul@cntr:	
  6343                           ; 1 bytes @ 0xF
  6344                           
  6345                           
  6346                           ; 1 bytes @ 0xF
  6347  002F                     	ds	1
  6348  0030                     ___ftdiv@sign:	
  6349  0030                     ___ftmul@sign:	
  6350                           ; 1 bytes @ 0x10
  6351                           
  6352                           
  6353                           ; 1 bytes @ 0x10
  6354  0030                     	ds	1
  6355  0031                     ?___ftge:	
  6356  0031                     ?___ftadd:	
  6357                           ; 1 bit 
  6358                           
  6359  0031                     ?___fttol:	
  6360                           ; 3 bytes @ 0x11
  6361                           
  6362  0031                     ___ftadd@f1:	
  6363                           ; 4 bytes @ 0x11
  6364                           
  6365  0031                     ___ftge@ff1:	
  6366                           ; 3 bytes @ 0x11
  6367                           
  6368  0031                     ___fttol@f1:	
  6369                           ; 3 bytes @ 0x11
  6370                           
  6371                           
  6372                           ; 3 bytes @ 0x11
  6373  0031                     	ds	3
  6374  0034                     ___ftadd@f2:	
  6375  0034                     ___ftge@ff2:	
  6376                           ; 3 bytes @ 0x14
  6377                           
  6378                           
  6379                           ; 3 bytes @ 0x14
  6380  0034                     	ds	1
  6381  0035                     ??___fttol:	
  6382                           
  6383                           ; 1 bytes @ 0x15
  6384  0035                     	ds	2
  6385  0037                     ??___ftadd:	
  6386  0037                     ??___ftge:	
  6387                           ; 1 bytes @ 0x17
  6388                           
  6389                           
  6390                           ; 1 bytes @ 0x17
  6391  0037                     	ds	2
  6392  0039                     ___fttol@sign1:	
  6393                           
  6394                           ; 1 bytes @ 0x19
  6395  0039                     	ds	1
  6396  003A                     ___fttol@lval:	
  6397                           
  6398                           ; 4 bytes @ 0x1A
  6399  003A                     	ds	1
  6400  003B                     ___ftadd@sign:	
  6401                           
  6402                           ; 1 bytes @ 0x1B
  6403  003B                     	ds	1
  6404  003C                     ___ftadd@exp2:	
  6405                           
  6406                           ; 1 bytes @ 0x1C
  6407  003C                     	ds	1
  6408  003D                     ___ftadd@exp1:	
  6409                           
  6410                           ; 1 bytes @ 0x1D
  6411  003D                     	ds	1
  6412  003E                     ?_eval_poly:	
  6413  003E                     ?___ftsub:	
  6414                           ; 3 bytes @ 0x1E
  6415                           
  6416  003E                     ___fttol@exp1:	
  6417                           ; 3 bytes @ 0x1E
  6418                           
  6419  003E                     ___ftsub@f2:	
  6420                           ; 1 bytes @ 0x1E
  6421                           
  6422  003E                     eval_poly@x:	
  6423                           ; 3 bytes @ 0x1E
  6424                           
  6425                           
  6426                           ; 3 bytes @ 0x1E
  6427  003E                     	ds	1
  6428  003F                     ??_Battery_State_Machine:	
  6429  003F                     ?_LCDWriteInt:	
  6430                           ; 1 bytes @ 0x1F
  6431                           
  6432  003F                     ??_cc_cv_mode:	
  6433                           ; 1 bytes @ 0x1F
  6434                           
  6435  003F                     ??_calculateCurrent0:	
  6436                           ; 1 bytes @ 0x1F
  6437                           
  6438  003F                     ??_calculateCurrent3:	
  6439                           ; 1 bytes @ 0x1F
  6440                           
  6441  003F                     ??_Init_Battery_State_Machine:	
  6442                           ; 1 bytes @ 0x1F
  6443                           
  6444  003F                     LCDWriteInt@value:	
  6445                           ; 1 bytes @ 0x1F
  6446                           
  6447                           
  6448                           ; 2 bytes @ 0x1F
  6449  003F                     	ds	2
  6450  0041                     LCDWriteInt@fieldLength:	
  6451  0041                     eval_poly@d:	
  6452                           ; 1 bytes @ 0x21
  6453                           
  6454  0041                     ___ftsub@f1:	
  6455                           ; 2 bytes @ 0x21
  6456                           
  6457                           
  6458                           ; 3 bytes @ 0x21
  6459  0041                     	ds	1
  6460  0042                     LCDWriteInt@numPlaces:	
  6461                           
  6462                           ; 1 bytes @ 0x22
  6463  0042                     	ds	1
  6464  0043                     Init_Battery_State_Machine@z:	
  6465  0043                     LCDWriteInt@sign:	
  6466                           ; 1 bytes @ 0x23
  6467                           
  6468  0043                     eval_poly@n:	
  6469                           ; 1 bytes @ 0x23
  6470                           
  6471                           
  6472                           ; 2 bytes @ 0x23
  6473  0043                     	ds	1
  6474  0044                     ??_SYSTEM_Initialize:	
  6475  0044                     ??_LCDWriteInt:	
  6476                           ; 1 bytes @ 0x24
  6477                           
  6478  0044                     Battery_State_Machine@z:	
  6479                           ; 1 bytes @ 0x24
  6480                           
  6481                           
  6482                           ; 1 bytes @ 0x24
  6483  0044                     	ds	1
  6484  0045                     eval_poly@res:	
  6485                           
  6486                           ; 3 bytes @ 0x25
  6487  0045                     	ds	1
  6488  0046                     cc_cv_mode@z:	
  6489                           
  6490                           ; 1 bytes @ 0x26
  6491  0046                     	ds	2
  6492  0048                     ?_log:	
  6493  0048                     log@x:	
  6494                           ; 3 bytes @ 0x28
  6495                           
  6496  0048                     LCDWriteInt@str:	
  6497                           ; 3 bytes @ 0x28
  6498                           
  6499                           
  6500                           ; 5 bytes @ 0x28
  6501  0048                     	ds	3
  6502  004B                     ??_log:	
  6503                           
  6504                           ; 1 bytes @ 0x2B
  6505  004B                     	ds	1
  6506  004C                     log@exponent:	
  6507                           
  6508                           ; 2 bytes @ 0x2C
  6509  004C                     	ds	1
  6510  004D                     LCDWriteInt@j:	
  6511                           
  6512                           ; 1 bytes @ 0x2D
  6513  004D                     	ds	1
  6514  004E                     ?_tempCalc:	
  6515  004E                     LCDWriteInt@i:	
  6516                           ; 2 bytes @ 0x2E
  6517                           
  6518  004E                     tempCalc@analogValue:	
  6519                           ; 1 bytes @ 0x2E
  6520                           
  6521                           
  6522                           ; 2 bytes @ 0x2E
  6523  004E                     	ds	2
  6524  0050                     tempCalc@R:	
  6525                           
  6526                           ; 3 bytes @ 0x30
  6527  0050                     	ds	3
  6528  0053                     _tempCalc$1305:	
  6529                           
  6530                           ; 3 bytes @ 0x33
  6531  0053                     	ds	3
  6532  0056                     tempCalc@steinhart:	
  6533                           
  6534                           ; 3 bytes @ 0x36
  6535  0056                     	ds	3
  6536  0059                     ??_main:	
  6537                           
  6538                           ; 1 bytes @ 0x39
  6539  0059                     	ds	5
  6540                           
  6541                           	psect	maintext
  6542  0041                     __pmaintext:	
  6543 ;;
  6544 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  6545 ;;
  6546 ;; *************** function _main *****************
  6547 ;; Defined at:
  6548 ;;		line 33 in file "main.c"
  6549 ;; Parameters:    Size  Location     Type
  6550 ;;		None
  6551 ;; Auto vars:     Size  Location     Type
  6552 ;;  tempVoltage     8    8[BANK1 ] int [4]
  6553 ;;  efficiency      3    0[BANK1 ] float 
  6554 ;;  dutyCycle7      2   34[BANK1 ] unsigned int 
  6555 ;;  dutyCycle6      2   32[BANK1 ] unsigned int 
  6556 ;;  tempFanOutpu    2   27[BANK1 ] unsigned int 
  6557 ;;  dutyCycle1      2   25[BANK1 ] unsigned int 
  6558 ;;  largerIOut      2   22[BANK1 ] int 
  6559 ;;  MPPT1           2   20[BANK1 ] int 
  6560 ;;  MPPT0           2   18[BANK1 ] int 
  6561 ;;  faultNotRese    2    5[BANK1 ] unsigned int 
  6562 ;;  faultCount      2    3[BANK1 ] unsigned int 
  6563 ;;  j               1   36[BANK1 ] unsigned char 
  6564 ;;  menuButton      1   24[BANK1 ] unsigned char 
  6565 ;;  slowLoop        1   17[BANK1 ] unsigned char 
  6566 ;;  displayRefre    1   16[BANK1 ] unsigned char 
  6567 ;;  fastLoop        1    7[BANK1 ] unsigned char 
  6568 ;; Return value:  Size  Location     Type
  6569 ;;                  1    wreg      void 
  6570 ;; Registers used:
  6571 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6572 ;; Tracked objects:
  6573 ;;		On entry : B1F/0
  6574 ;;		On exit  : 0/0
  6575 ;;		Unchanged: 0/0
  6576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6578 ;;      Locals:         0       0      37       0       0       0       0       0       0       0       0       0       
      +0       0
  6579 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6580 ;;      Totals:         0       5      37       0       0       0       0       0       0       0       0       0       
      +0       0
  6581 ;;Total ram usage:       42 bytes
  6582 ;; Hardware stack levels required when called:    5
  6583 ;; This function calls:
  6584 ;;		_ADCRead
  6585 ;;		_Battery_State_Machine
  6586 ;;		_LCDClear
  6587 ;;		_LCDInit
  6588 ;;		_LCDWriteCharacter
  6589 ;;		_LCDWriteInt
  6590 ;;		_LCDWriteString
  6591 ;;		_PWM1_LoadDutyValue
  6592 ;;		_PWM6_LoadDutyValue
  6593 ;;		_PWM7_LoadDutyValue
  6594 ;;		_SYSTEM_Initialize
  6595 ;;		___awdiv
  6596 ;;		___awtoft
  6597 ;;		___ftdiv
  6598 ;;		___ftge
  6599 ;;		___ftmul
  6600 ;;		___fttol
  6601 ;;		_calculateCurrent0
  6602 ;;		_calculateCurrent2
  6603 ;;		_calculateCurrent3
  6604 ;;		_cc_cv_mode
  6605 ;;		_gotoXY
  6606 ;;		_readButton
  6607 ;;		_readIAnalog
  6608 ;;		_readVAnalog
  6609 ;;		_tempCalc
  6610 ;; This function is called by:
  6611 ;;		Startup code after reset
  6612 ;; This function uses a non-reentrant model
  6613 ;;
  6614                           
  6615                           
  6616                           ;psect for function _main
  6617  0041                     _main:	
  6618                           
  6619                           ;main.c: 35: int16_t MPPT0 = 3144;
  6620                           
  6621                           ;incstack = 0
  6622                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6623  0041  3048               	movlw	72
  6624  0042  0021               	movlb	1	; select bank1
  6625  0043  00DA               	movwf	main@MPPT0^(0+128)
  6626  0044  300C               	movlw	12
  6627  0045  00DB               	movwf	(main@MPPT0^(0+128)+1)
  6628                           
  6629                           ;main.c: 36: int16_t MPPT1 = 3144;
  6630  0046  3048               	movlw	72
  6631  0047  00DC               	movwf	main@MPPT1^(0+128)
  6632  0048  300C               	movlw	12
  6633  0049  00DD               	movwf	(main@MPPT1^(0+128)+1)
  6634                           
  6635                           ;main.c: 38: extern uint8_t batteryState[2];
  6636                           ;main.c: 39: uint8_t displayRefresh = 0;
  6637  004A  01D8               	clrf	main@displayRefresh^(0+128)
  6638                           
  6639                           ;main.c: 40: uint16_t dutyCycle6 = 1023;
  6640  004B  30FF               	movlw	255
  6641  004C  00E8               	movwf	main@dutyCycle6^(0+128)
  6642  004D  3003               	movlw	3
  6643  004E  00E9               	movwf	(main@dutyCycle6^(0+128)+1)
  6644                           
  6645                           ;main.c: 41: uint16_t dutyCycle7 = 1023;
  6646  004F  30FF               	movlw	255
  6647  0050  00EA               	movwf	main@dutyCycle7^(0+128)
  6648  0051  3003               	movlw	3
  6649  0052  00EB               	movwf	(main@dutyCycle7^(0+128)+1)
  6650                           
  6651                           ;main.c: 42: uint16_t dutyCycle1 = 260;
  6652  0053  3004               	movlw	4
  6653  0054  00E1               	movwf	main@dutyCycle1^(0+128)
  6654  0055  3001               	movlw	1
  6655  0056  00E2               	movwf	(main@dutyCycle1^(0+128)+1)
  6656                           
  6657                           ;main.c: 43: float efficiency = 0;
  6658  0057  3000               	movlw	0
  6659  0058  00C8               	movwf	main@efficiency^(0+128)
  6660  0059  3000               	movlw	0
  6661  005A  00C9               	movwf	(main@efficiency+1)^(0+128)
  6662  005B  3000               	movlw	0
  6663  005C  00CA               	movwf	(main@efficiency+2)^(0+128)
  6664                           
  6665                           ;main.c: 44: uint16_t faultCount = 0;
  6666  005D  01CB               	clrf	main@faultCount^(0+128)
  6667  005E  01CC               	clrf	(main@faultCount+1)^(0+128)
  6668                           
  6669                           ;main.c: 45: uint16_t faultNotReset = 0;
  6670  005F  01CD               	clrf	main@faultNotReset^(0+128)
  6671  0060  01CE               	clrf	(main@faultNotReset+1)^(0+128)
  6672                           
  6673                           ;main.c: 47: extern int8_t Imode[2];
  6674                           ;main.c: 48: int16_t largerIOut = 0;
  6675  0061  01DE               	clrf	main@largerIOut^(0+128)
  6676  0062  01DF               	clrf	(main@largerIOut+1)^(0+128)
  6677                           
  6678                           ;main.c: 49: extern int16_t Iref[2];
  6679                           ;main.c: 50: uint8_t j = 0;
  6680  0063  01EC               	clrf	main@j^(0+128)
  6681                           
  6682                           ;main.c: 51: uint8_t menuButton = 0;
  6683  0064  01E0               	clrf	main@menuButton^(0+128)
  6684                           
  6685                           ;main.c: 52: uint8_t fastLoop = 0;
  6686  0065  01CF               	clrf	main@fastLoop^(0+128)
  6687                           
  6688                           ;main.c: 53: uint8_t slowLoop = 200;
  6689  0066  30C8               	movlw	200
  6690  0067  0020               	movlb	0	; select bank0
  6691  0068  00D9               	movwf	??_main
  6692  0069  0859               	movf	??_main,w
  6693  006A  0021               	movlb	1	; select bank1
  6694  006B  00D9               	movwf	main@slowLoop^(0+128)
  6695                           
  6696                           ;main.c: 54: uint16_t tempFanOutput = 60;
  6697  006C  303C               	movlw	60
  6698  006D  00E3               	movwf	main@tempFanOutput^(0+128)
  6699  006E  3000               	movlw	0
  6700  006F  00E4               	movwf	(main@tempFanOutput^(0+128)+1)
  6701                           
  6702                           ;main.c: 55: extern int8_t VHoldMode[2];
  6703                           ;main.c: 56: extern int16_t Vref[2];
  6704                           ;main.c: 57: int16_t tempVoltage[4];
  6705                           ;main.c: 60: SYSTEM_Initialize();
  6706  0070  3180  2004  3180   	fcall	_SYSTEM_Initialize
  6707                           
  6708                           ;main.c: 62: LCDClear();
  6709  0073  319F  2777  3180   	fcall	_LCDClear
  6710  0076                     l3352:	
  6711                           ;main.c: 64: void calculateCurrent0(void);
  6712                           ;main.c: 66: void calculateCurrent2(void);
  6713                           ;main.c: 67: void calculateCurrent3(void);
  6714                           ;main.c: 70: while (1)
  6715                           
  6716                           
  6717                           ;main.c: 71: {
  6718                           ;main.c: 72: if(!(RB2))
  6719  0076  0020               	movlb	0	; select bank0
  6720  0077  190D               	btfsc	13,2	;volatile
  6721  0078  288A               	goto	l3360
  6722                           
  6723                           ;main.c: 73: {
  6724                           ;main.c: 74: LATA5=0;
  6725  0079  1296               	bcf	22,5	;volatile
  6726                           
  6727                           ;main.c: 75: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  6728  007A  300B               	movlw	11
  6729  007B  00DA               	movwf	??_main+1
  6730  007C  3062               	movlw	98
  6731  007D  00D9               	movwf	??_main
  6732  007E                     u4517:	
  6733  007E  0BD9               	decfsz	??_main,f
  6734  007F  287E               	goto	u4517
  6735  0080  0BDA               	decfsz	??_main+1,f
  6736  0081  287E               	goto	u4517
  6737  0082  0000               	nop
  6738                           
  6739                           ;main.c: 76: faultCount+=1;
  6740  0083  3001               	movlw	1
  6741  0084  0021               	movlb	1	; select bank1
  6742  0085  07CB               	addwf	main@faultCount^(0+128),f
  6743  0086  3000               	movlw	0
  6744  0087  3DCC               	addwfc	(main@faultCount+1)^(0+128),f
  6745                           
  6746                           ;main.c: 77: LATA5=1;
  6747  0088  0020               	movlb	0	; select bank0
  6748  0089  1696               	bsf	22,5	;volatile
  6749  008A                     l3360:	
  6750                           
  6751                           ;main.c: 78: }
  6752                           ;main.c: 79: for(j=0;j<4;j++) Ianalogs[j]=readIAnalog(j);
  6753  008A  0021               	movlb	1	; select bank1
  6754  008B  01EC               	clrf	main@j^(0+128)
  6755  008C  3004               	movlw	4
  6756  008D  026C               	subwf	main@j^(0+128),w
  6757  008E  1803               	btfsc	3,0
  6758  008F  28AF               	goto	l3372
  6759  0090                     l3366:	
  6760  0090  086C               	movf	main@j^(0+128),w
  6761  0091  0020               	movlb	0	; select bank0
  6762  0092  00D9               	movwf	??_main
  6763  0093  01DA               	clrf	??_main+1
  6764  0094  0859               	movf	??_main,w
  6765  0095  00A6               	movwf	readIAnalog@channel
  6766  0096  085A               	movf	??_main+1,w
  6767  0097  00A7               	movwf	readIAnalog@channel+1
  6768  0098  318B  23BE  3180   	fcall	_readIAnalog
  6769  009B  0021               	movlb	1	; select bank1
  6770  009C  356C               	lslf	main@j^(0+128),w
  6771  009D  3E40               	addlw	(low (_Ianalogs| (0+256)))& (0+255)
  6772  009E  0086               	movwf	6
  6773  009F  3001               	movlw	1	; select bank2/3
  6774  00A0  0087               	movwf	7
  6775  00A1  0020               	movlb	0	; select bank0
  6776  00A2  0826               	movf	?_readIAnalog,w
  6777  00A3  3FC0               	movwi [0]fsr1
  6778  00A4  0827               	movf	?_readIAnalog+1,w
  6779  00A5  3FC1               	movwi [1]fsr1
  6780  00A6  3001               	movlw	1
  6781  00A7  00D9               	movwf	??_main
  6782  00A8  0859               	movf	??_main,w
  6783  00A9  0021               	movlb	1	; select bank1
  6784  00AA  07EC               	addwf	main@j^(0+128),f
  6785  00AB  3004               	movlw	4
  6786  00AC  026C               	subwf	main@j^(0+128),w
  6787  00AD  1C03               	skipc
  6788  00AE  2890               	goto	l3366
  6789  00AF                     l3372:	
  6790                           
  6791                           ;main.c: 81: for(j=0;j<4;j++) Vanalogs[j]=readVAnalog(j);
  6792  00AF  01EC               	clrf	main@j^(0+128)
  6793  00B0  3004               	movlw	4
  6794  00B1  026C               	subwf	main@j^(0+128),w
  6795  00B2  1803               	btfsc	3,0
  6796  00B3  28D3               	goto	l76
  6797  00B4                     l3378:	
  6798  00B4  086C               	movf	main@j^(0+128),w
  6799  00B5  0020               	movlb	0	; select bank0
  6800  00B6  00D9               	movwf	??_main
  6801  00B7  01DA               	clrf	??_main+1
  6802  00B8  0859               	movf	??_main,w
  6803  00B9  00A6               	movwf	readVAnalog@channel
  6804  00BA  085A               	movf	??_main+1,w
  6805  00BB  00A7               	movwf	readVAnalog@channel+1
  6806  00BC  318A  22A4  3180   	fcall	_readVAnalog
  6807  00BF  0021               	movlb	1	; select bank1
  6808  00C0  356C               	lslf	main@j^(0+128),w
  6809  00C1  3E48               	addlw	(low (_Vanalogs| (0+256)))& (0+255)
  6810  00C2  0086               	movwf	6
  6811  00C3  3001               	movlw	1	; select bank2/3
  6812  00C4  0087               	movwf	7
  6813  00C5  0020               	movlb	0	; select bank0
  6814  00C6  0826               	movf	?_readVAnalog,w
  6815  00C7  3FC0               	movwi [0]fsr1
  6816  00C8  0827               	movf	?_readVAnalog+1,w
  6817  00C9  3FC1               	movwi [1]fsr1
  6818  00CA  3001               	movlw	1
  6819  00CB  00D9               	movwf	??_main
  6820  00CC  0859               	movf	??_main,w
  6821  00CD  0021               	movlb	1	; select bank1
  6822  00CE  07EC               	addwf	main@j^(0+128),f
  6823  00CF  3004               	movlw	4
  6824  00D0  026C               	subwf	main@j^(0+128),w
  6825  00D1  1C03               	skipc
  6826  00D2  28B4               	goto	l3378
  6827  00D3                     l76:	
  6828                           
  6829                           ;main.c: 83: if(!(RB2))faultNotReset+=1;
  6830  00D3  0020               	movlb	0	; select bank0
  6831  00D4  190D               	btfsc	13,2	;volatile
  6832  00D5  28DB               	goto	l3386
  6833  00D6  3001               	movlw	1
  6834  00D7  0021               	movlb	1	; select bank1
  6835  00D8  07CD               	addwf	main@faultNotReset^(0+128),f
  6836  00D9  3000               	movlw	0
  6837  00DA  3DCE               	addwfc	(main@faultNotReset+1)^(0+128),f
  6838  00DB                     l3386:	
  6839                           
  6840                           ;main.c: 87: tempVoltage[0]=(int16_t)(Vanalogs[0]/.54245);
  6841  00DB  0022               	movlb	2	; select bank2
  6842  00DC  0849               	movf	(_Vanalogs+1)^(0+256),w
  6843  00DD  00FA               	movwf	___awtoft@c+1
  6844  00DE  0848               	movf	_Vanalogs^(0+256),w
  6845  00DF  00F9               	movwf	___awtoft@c
  6846  00E0  319F  2710  3180   	fcall	___awtoft
  6847  00E3  0879               	movf	?___awtoft,w
  6848  00E4  0020               	movlb	0	; select bank0
  6849  00E5  00A4               	movwf	___ftdiv@f1
  6850  00E6  087A               	movf	?___awtoft+1,w
  6851  00E7  00A5               	movwf	___ftdiv@f1+1
  6852  00E8  087B               	movf	?___awtoft+2,w
  6853  00E9  00A6               	movwf	___ftdiv@f1+2
  6854  00EA  30DE               	movlw	222
  6855  00EB  00A1               	movwf	___ftdiv@f2
  6856  00EC  300A               	movlw	10
  6857  00ED  00A2               	movwf	___ftdiv@f2+1
  6858  00EE  303F               	movlw	63
  6859  00EF  00A3               	movwf	___ftdiv@f2+2
  6860  00F0  3195  25F3  3180   	fcall	___ftdiv
  6861  00F3  0020               	movlb	0	; select bank0
  6862  00F4  0821               	movf	?___ftdiv,w
  6863  00F5  00B1               	movwf	___fttol@f1
  6864  00F6  0822               	movf	?___ftdiv+1,w
  6865  00F7  00B2               	movwf	___fttol@f1+1
  6866  00F8  0823               	movf	?___ftdiv+2,w
  6867  00F9  00B3               	movwf	___fttol@f1+2
  6868  00FA  3195  256C  3180   	fcall	___fttol
  6869  00FD  0020               	movlb	0	; select bank0
  6870  00FE  0832               	movf	?___fttol+1,w
  6871  00FF  0021               	movlb	1	; select bank1
  6872  0100  00D1               	movwf	(main@tempVoltage+1)^(0+128)
  6873  0101  0020               	movlb	0	; select bank0
  6874  0102  0831               	movf	?___fttol,w
  6875  0103  0021               	movlb	1	; select bank1
  6876  0104  00D0               	movwf	main@tempVoltage^(0+128)
  6877                           
  6878                           ;main.c: 89: tempVoltage[1]=(int16_t)(Vanalogs[1]/.54395);
  6879  0105  0022               	movlb	2	; select bank2
  6880  0106  084B               	movf	((_Vanalogs+1)^(0+256)+2),w
  6881  0107  00FA               	movwf	___awtoft@c+1
  6882  0108  084A               	movf	(_Vanalogs^(0+256)+2),w
  6883  0109  00F9               	movwf	___awtoft@c
  6884  010A  319F  2710  3180   	fcall	___awtoft
  6885  010D  0879               	movf	?___awtoft,w
  6886  010E  0020               	movlb	0	; select bank0
  6887  010F  00A4               	movwf	___ftdiv@f1
  6888  0110  087A               	movf	?___awtoft+1,w
  6889  0111  00A5               	movwf	___ftdiv@f1+1
  6890  0112  087B               	movf	?___awtoft+2,w
  6891  0113  00A6               	movwf	___ftdiv@f1+2
  6892  0114  3040               	movlw	64
  6893  0115  00A1               	movwf	___ftdiv@f2
  6894  0116  300B               	movlw	11
  6895  0117  00A2               	movwf	___ftdiv@f2+1
  6896  0118  303F               	movlw	63
  6897  0119  00A3               	movwf	___ftdiv@f2+2
  6898  011A  3195  25F3  3180   	fcall	___ftdiv
  6899  011D  0020               	movlb	0	; select bank0
  6900  011E  0821               	movf	?___ftdiv,w
  6901  011F  00B1               	movwf	___fttol@f1
  6902  0120  0822               	movf	?___ftdiv+1,w
  6903  0121  00B2               	movwf	___fttol@f1+1
  6904  0122  0823               	movf	?___ftdiv+2,w
  6905  0123  00B3               	movwf	___fttol@f1+2
  6906  0124  3195  256C  3180   	fcall	___fttol
  6907  0127  0020               	movlb	0	; select bank0
  6908  0128  0832               	movf	?___fttol+1,w
  6909  0129  0021               	movlb	1	; select bank1
  6910  012A  00D3               	movwf	((main@tempVoltage+1)^(0+128)+2)
  6911  012B  0020               	movlb	0	; select bank0
  6912  012C  0831               	movf	?___fttol,w
  6913  012D  0021               	movlb	1	; select bank1
  6914  012E  00D2               	movwf	(main@tempVoltage^(0+128)+2)
  6915                           
  6916                           ;main.c: 91: tempVoltage[2]=(int16_t)(Vanalogs[2]/.208100558);
  6917  012F  0022               	movlb	2	; select bank2
  6918  0130  084D               	movf	((_Vanalogs+1)^(0+256)+4),w
  6919  0131  00FA               	movwf	___awtoft@c+1
  6920  0132  084C               	movf	(_Vanalogs^(0+256)+4),w
  6921  0133  00F9               	movwf	___awtoft@c
  6922  0134  319F  2710  3180   	fcall	___awtoft
  6923  0137  0879               	movf	?___awtoft,w
  6924  0138  0020               	movlb	0	; select bank0
  6925  0139  00A4               	movwf	___ftdiv@f1
  6926  013A  087A               	movf	?___awtoft+1,w
  6927  013B  00A5               	movwf	___ftdiv@f1+1
  6928  013C  087B               	movf	?___awtoft+2,w
  6929  013D  00A6               	movwf	___ftdiv@f1+2
  6930  013E  3018               	movlw	24
  6931  013F  00A1               	movwf	___ftdiv@f2
  6932  0140  3055               	movlw	85
  6933  0141  00A2               	movwf	___ftdiv@f2+1
  6934  0142  303E               	movlw	62
  6935  0143  00A3               	movwf	___ftdiv@f2+2
  6936  0144  3195  25F3  3180   	fcall	___ftdiv
  6937  0147  0020               	movlb	0	; select bank0
  6938  0148  0821               	movf	?___ftdiv,w
  6939  0149  00B1               	movwf	___fttol@f1
  6940  014A  0822               	movf	?___ftdiv+1,w
  6941  014B  00B2               	movwf	___fttol@f1+1
  6942  014C  0823               	movf	?___ftdiv+2,w
  6943  014D  00B3               	movwf	___fttol@f1+2
  6944  014E  3195  256C  3180   	fcall	___fttol
  6945  0151  0020               	movlb	0	; select bank0
  6946  0152  0832               	movf	?___fttol+1,w
  6947  0153  0021               	movlb	1	; select bank1
  6948  0154  00D5               	movwf	((main@tempVoltage+1)^(0+128)+4)
  6949  0155  0020               	movlb	0	; select bank0
  6950  0156  0831               	movf	?___fttol,w
  6951  0157  0021               	movlb	1	; select bank1
  6952  0158  00D4               	movwf	(main@tempVoltage^(0+128)+4)
  6953                           
  6954                           ;main.c: 93: tempVoltage[3]=(int16_t)(Vanalogs[3]/.207755);
  6955  0159  0022               	movlb	2	; select bank2
  6956  015A  084F               	movf	((_Vanalogs+1)^(0+256)+6),w
  6957  015B  00FA               	movwf	___awtoft@c+1
  6958  015C  084E               	movf	(_Vanalogs^(0+256)+6),w
  6959  015D  00F9               	movwf	___awtoft@c
  6960  015E  319F  2710  3180   	fcall	___awtoft
  6961  0161  0879               	movf	?___awtoft,w
  6962  0162  0020               	movlb	0	; select bank0
  6963  0163  00A4               	movwf	___ftdiv@f1
  6964  0164  087A               	movf	?___awtoft+1,w
  6965  0165  00A5               	movwf	___ftdiv@f1+1
  6966  0166  087B               	movf	?___awtoft+2,w
  6967  0167  00A6               	movwf	___ftdiv@f1+2
  6968  0168  30BE               	movlw	190
  6969  0169  00A1               	movwf	___ftdiv@f2
  6970  016A  3054               	movlw	84
  6971  016B  00A2               	movwf	___ftdiv@f2+1
  6972  016C  303E               	movlw	62
  6973  016D  00A3               	movwf	___ftdiv@f2+2
  6974  016E  3195  25F3  3180   	fcall	___ftdiv
  6975  0171  0020               	movlb	0	; select bank0
  6976  0172  0821               	movf	?___ftdiv,w
  6977  0173  00B1               	movwf	___fttol@f1
  6978  0174  0822               	movf	?___ftdiv+1,w
  6979  0175  00B2               	movwf	___fttol@f1+1
  6980  0176  0823               	movf	?___ftdiv+2,w
  6981  0177  00B3               	movwf	___fttol@f1+2
  6982  0178  3195  256C  3180   	fcall	___fttol
  6983  017B  0020               	movlb	0	; select bank0
  6984  017C  0832               	movf	?___fttol+1,w
  6985  017D  0021               	movlb	1	; select bank1
  6986  017E  00D7               	movwf	((main@tempVoltage+1)^(0+128)+6)
  6987  017F  0020               	movlb	0	; select bank0
  6988  0180  0831               	movf	?___fttol,w
  6989  0181  0021               	movlb	1	; select bank1
  6990  0182  00D6               	movwf	(main@tempVoltage^(0+128)+6)
  6991                           
  6992                           ;main.c: 95: for(j=0;j<4;j++)
  6993  0183  01EC               	clrf	main@j^(0+128)
  6994  0184  3004               	movlw	4
  6995  0185  026C               	subwf	main@j^(0+128),w
  6996  0186  1803               	btfsc	3,0
  6997  0187  29E7               	goto	l3412
  6998  0188                     l3400:	
  6999                           
  7000                           ;main.c: 96: {
  7001                           ;main.c: 97: if(tempVoltage[j]>voltage[j])voltage[j]+=1;
  7002  0188  356C               	lslf	main@j^(0+128),w
  7003  0189  3ED0               	addlw	(low (main@tempVoltage| 0))& (0+255)
  7004  018A  0086               	movwf	6
  7005  018B  0187               	clrf	7
  7006  018C  3F40               	moviw [0]fsr1
  7007  018D  0020               	movlb	0	; select bank0
  7008  018E  00D9               	movwf	??_main
  7009  018F  3F41               	moviw [1]fsr1
  7010  0190  00DA               	movwf	??_main+1
  7011  0191  0021               	movlb	1	; select bank1
  7012  0192  356C               	lslf	main@j^(0+128),w
  7013  0193  3EA8               	addlw	(low (_voltage| 0))& (0+255)
  7014  0194  0086               	movwf	6
  7015  0195  0187               	clrf	7
  7016  0196  3F40               	moviw [0]fsr1
  7017  0197  0020               	movlb	0	; select bank0
  7018  0198  00DB               	movwf	??_main+2
  7019  0199  3F41               	moviw [1]fsr1
  7020  019A  00DC               	movwf	??_main+3
  7021  019B  085C               	movf	??_main+3,w
  7022  019C  3A80               	xorlw	128
  7023  019D  00DD               	movwf	??_main+4
  7024  019E  085A               	movf	??_main+1,w
  7025  019F  3A80               	xorlw	128
  7026  01A0  025D               	subwf	??_main+4,w
  7027  01A1  1D03               	skipz
  7028  01A2  29A5               	goto	u4145
  7029  01A3  0859               	movf	??_main,w
  7030  01A4  025B               	subwf	??_main+2,w
  7031  01A5                     u4145:	
  7032  01A5  1803               	skipnc
  7033  01A6  29B2               	goto	l3404
  7034  01A7  0021               	movlb	1	; select bank1
  7035  01A8  356C               	lslf	main@j^(0+128),w
  7036  01A9  3EA8               	addlw	(low (_voltage| 0))& (0+255)
  7037  01AA  0086               	movwf	6
  7038  01AB  0187               	clrf	7
  7039  01AC  3001               	movlw	1
  7040  01AD  0781               	addwf	1,f
  7041  01AE  3141               	addfsr 1,1
  7042  01AF  1803               	skipnc
  7043  01B0  0A81               	incf	1,f
  7044  01B1  29DD               	goto	l3408
  7045  01B2                     l3404:	
  7046                           
  7047                           ;main.c: 98: else if(tempVoltage[j]>voltage[j])voltage[j]-=1;
  7048  01B2  0021               	movlb	1	; select bank1
  7049  01B3  356C               	lslf	main@j^(0+128),w
  7050  01B4  3ED0               	addlw	(low (main@tempVoltage| 0))& (0+255)
  7051  01B5  0086               	movwf	6
  7052  01B6  0187               	clrf	7
  7053  01B7  3F40               	moviw [0]fsr1
  7054  01B8  0020               	movlb	0	; select bank0
  7055  01B9  00D9               	movwf	??_main
  7056  01BA  3F41               	moviw [1]fsr1
  7057  01BB  00DA               	movwf	??_main+1
  7058  01BC  0021               	movlb	1	; select bank1
  7059  01BD  356C               	lslf	main@j^(0+128),w
  7060  01BE  3EA8               	addlw	(low (_voltage| 0))& (0+255)
  7061  01BF  0086               	movwf	6
  7062  01C0  0187               	clrf	7
  7063  01C1  3F40               	moviw [0]fsr1
  7064  01C2  0020               	movlb	0	; select bank0
  7065  01C3  00DB               	movwf	??_main+2
  7066  01C4  3F41               	moviw [1]fsr1
  7067  01C5  00DC               	movwf	??_main+3
  7068  01C6  085C               	movf	??_main+3,w
  7069  01C7  3A80               	xorlw	128
  7070  01C8  00DD               	movwf	??_main+4
  7071  01C9  085A               	movf	??_main+1,w
  7072  01CA  3A80               	xorlw	128
  7073  01CB  025D               	subwf	??_main+4,w
  7074  01CC  1D03               	skipz
  7075  01CD  29D0               	goto	u4155
  7076  01CE  0859               	movf	??_main,w
  7077  01CF  025B               	subwf	??_main+2,w
  7078  01D0                     u4155:	
  7079  01D0  1803               	skipnc
  7080  01D1  29DD               	goto	l3408
  7081  01D2  0021               	movlb	1	; select bank1
  7082  01D3  356C               	lslf	main@j^(0+128),w
  7083  01D4  3EA8               	addlw	(low (_voltage| 0))& (0+255)
  7084  01D5  0086               	movwf	6
  7085  01D6  0187               	clrf	7
  7086  01D7  30FF               	movlw	255
  7087  01D8  0781               	addwf	1,f
  7088  01D9  3141               	addfsr 1,1
  7089  01DA  30FF               	movlw	255
  7090  01DB  3D81               	addwfc	1,f
  7091  01DC  317F               	addfsr 1,-1
  7092  01DD                     l3408:	
  7093  01DD  3001               	movlw	1
  7094  01DE  0020               	movlb	0	; select bank0
  7095  01DF  00D9               	movwf	??_main
  7096  01E0  0859               	movf	??_main,w
  7097  01E1  0021               	movlb	1	; select bank1
  7098  01E2  07EC               	addwf	main@j^(0+128),f
  7099  01E3  3004               	movlw	4
  7100  01E4  026C               	subwf	main@j^(0+128),w
  7101  01E5  1C03               	skipc
  7102  01E6  2988               	goto	l3400
  7103  01E7                     l3412:	
  7104                           
  7105                           ;main.c: 100: }
  7106                           ;main.c: 102: calculateCurrent0();
  7107  01E7  3192  220C  3180   	fcall	_calculateCurrent0
  7108                           
  7109                           ;main.c: 106: calculateCurrent2();
  7110  01EA  319F  2731  3180   	fcall	_calculateCurrent2
  7111                           
  7112                           ;main.c: 108: calculateCurrent3();
  7113  01ED  3192  2251  3180   	fcall	_calculateCurrent3
  7114                           
  7115                           ;main.c: 110: current[1]=(int16_t)(current[3]*(voltage[3]/voltage[1]*.9));
  7116  01F0  0021               	movlb	1	; select bank1
  7117  01F1  082F               	movf	((_voltage+1)^(0+128)+6),w
  7118  01F2  00F3               	movwf	___awdiv@dividend+1
  7119  01F3  082E               	movf	(_voltage^(0+128)+6),w
  7120  01F4  00F2               	movwf	___awdiv@dividend
  7121  01F5  082B               	movf	((_voltage+1)^(0+128)+2),w
  7122  01F6  00F1               	movwf	___awdiv@divisor+1
  7123  01F7  082A               	movf	(_voltage^(0+128)+2),w
  7124  01F8  00F0               	movwf	___awdiv@divisor
  7125  01F9  3192  2296  3180   	fcall	___awdiv
  7126  01FC  0871               	movf	?___awdiv+1,w
  7127  01FD  00FA               	movwf	___awtoft@c+1
  7128  01FE  0870               	movf	?___awdiv,w
  7129  01FF  00F9               	movwf	___awtoft@c
  7130  0200  319F  2710  3180   	fcall	___awtoft
  7131  0203  0879               	movf	?___awtoft,w
  7132  0204  0020               	movlb	0	; select bank0
  7133  0205  00A4               	movwf	___ftmul@f2
  7134  0206  087A               	movf	?___awtoft+1,w
  7135  0207  00A5               	movwf	___ftmul@f2+1
  7136  0208  087B               	movf	?___awtoft+2,w
  7137  0209  00A6               	movwf	___ftmul@f2+2
  7138  020A  3066               	movlw	102
  7139  020B  00A1               	movwf	___ftmul@f1
  7140  020C  3066               	movlw	102
  7141  020D  00A2               	movwf	___ftmul@f1+1
  7142  020E  303F               	movlw	63
  7143  020F  00A3               	movwf	___ftmul@f1+2
  7144  0210  3197  274C  3180   	fcall	___ftmul
  7145  0213  0020               	movlb	0	; select bank0
  7146  0214  0821               	movf	?___ftmul,w
  7147  0215  0021               	movlb	1	; select bank1
  7148  0216  00E5               	movwf	_main$1304^(0+128)
  7149  0217  0020               	movlb	0	; select bank0
  7150  0218  0822               	movf	?___ftmul+1,w
  7151  0219  0021               	movlb	1	; select bank1
  7152  021A  00E6               	movwf	(_main$1304+1)^(0+128)
  7153  021B  0020               	movlb	0	; select bank0
  7154  021C  0823               	movf	?___ftmul+2,w
  7155  021D  0021               	movlb	1	; select bank1
  7156  021E  00E7               	movwf	(_main$1304+2)^(0+128)
  7157                           
  7158                           ;main.c: 110: current[1]=(int16_t)(current[3]*(voltage[3]/voltage[1]*.9));
  7159  021F  0827               	movf	((_current+1)^(0+128)+6),w
  7160  0220  00FA               	movwf	___awtoft@c+1
  7161  0221  0826               	movf	(_current^(0+128)+6),w
  7162  0222  00F9               	movwf	___awtoft@c
  7163  0223  319F  2710  3180   	fcall	___awtoft
  7164  0226  0879               	movf	?___awtoft,w
  7165  0227  0020               	movlb	0	; select bank0
  7166  0228  00A4               	movwf	___ftmul@f2
  7167  0229  087A               	movf	?___awtoft+1,w
  7168  022A  00A5               	movwf	___ftmul@f2+1
  7169  022B  087B               	movf	?___awtoft+2,w
  7170  022C  00A6               	movwf	___ftmul@f2+2
  7171  022D  0021               	movlb	1	; select bank1
  7172  022E  0865               	movf	_main$1304^(0+128),w
  7173  022F  0020               	movlb	0	; select bank0
  7174  0230  00A1               	movwf	___ftmul@f1
  7175  0231  0021               	movlb	1	; select bank1
  7176  0232  0866               	movf	(_main$1304+1)^(0+128),w
  7177  0233  0020               	movlb	0	; select bank0
  7178  0234  00A2               	movwf	___ftmul@f1+1
  7179  0235  0021               	movlb	1	; select bank1
  7180  0236  0867               	movf	(_main$1304+2)^(0+128),w
  7181  0237  0020               	movlb	0	; select bank0
  7182  0238  00A3               	movwf	___ftmul@f1+2
  7183  0239  3197  274C  3180   	fcall	___ftmul
  7184  023C  0020               	movlb	0	; select bank0
  7185  023D  0821               	movf	?___ftmul,w
  7186  023E  00B1               	movwf	___fttol@f1
  7187  023F  0822               	movf	?___ftmul+1,w
  7188  0240  00B2               	movwf	___fttol@f1+1
  7189  0241  0823               	movf	?___ftmul+2,w
  7190  0242  00B3               	movwf	___fttol@f1+2
  7191  0243  3195  256C  3180   	fcall	___fttol
  7192  0246  0020               	movlb	0	; select bank0
  7193  0247  0832               	movf	?___fttol+1,w
  7194  0248  0021               	movlb	1	; select bank1
  7195  0249  00A3               	movwf	((_current+1)^(0+128)+2)
  7196  024A  0020               	movlb	0	; select bank0
  7197  024B  0831               	movf	?___fttol,w
  7198  024C  0021               	movlb	1	; select bank1
  7199  024D  00A2               	movwf	(_current^(0+128)+2)
  7200                           
  7201                           ;main.c: 112: if(Imode[0])
  7202  024E  083C               	movf	_Imode^(0+128),w
  7203  024F  1903               	btfsc	3,2
  7204  0250  2A71               	goto	l3428
  7205                           
  7206                           ;main.c: 113: {
  7207                           ;main.c: 114: if(voltage[2]<MPPT0)
  7208  0251  082D               	movf	((_voltage+1)^(0+128)+4),w
  7209  0252  3A80               	xorlw	128
  7210  0253  0020               	movlb	0	; select bank0
  7211  0254  00D9               	movwf	??_main
  7212  0255  0021               	movlb	1	; select bank1
  7213  0256  085B               	movf	(main@MPPT0+1)^(0+128),w
  7214  0257  3A80               	xorlw	128
  7215  0258  0020               	movlb	0	; select bank0
  7216  0259  0259               	subwf	??_main,w
  7217  025A  1D03               	skipz
  7218  025B  2A5F               	goto	u4185
  7219  025C  0021               	movlb	1	; select bank1
  7220  025D  085A               	movf	main@MPPT0^(0+128),w
  7221  025E  022C               	subwf	(_voltage^(0+128)+4),w
  7222  025F                     u4185:	
  7223  025F  1C03               	btfss	3,0
  7224  0260  2A81               	goto	L3
  7225                           
  7226                           ;main.c: 121: else if(voltage[2]>MPPT0)
  7227                           
  7228                           ;main.c: 119: }
  7229                           ;main.c: 120: }
  7230                           
  7231                           ;main.c: 117: {
  7232                           ;main.c: 118: dutyCycle6+=1;
  7233                           
  7234                           ;main.c: 115: {
  7235                           ;main.c: 116: if(dutyCycle6<1023)
  7236  0261  0021               	movlb	1	; select bank1
  7237  0262  085B               	movf	(main@MPPT0+1)^(0+128),w
  7238  0263  3A80               	xorlw	128
  7239  0264  0020               	movlb	0	; select bank0
  7240  0265  00D9               	movwf	??_main
  7241  0266  0021               	movlb	1	; select bank1
  7242  0267  082D               	movf	((_voltage+1)^(0+128)+4),w
  7243  0268  3A80               	xorlw	128
  7244  0269  0020               	movlb	0	; select bank0
  7245  026A  0259               	subwf	??_main,w
  7246  026B  1D03               	skipz
  7247  026C  2A9D               	goto	u4245
  7248  026D  0021               	movlb	1	; select bank1
  7249  026E  082C               	movf	(_voltage^(0+128)+4),w
  7250  026F  025A               	subwf	main@MPPT0^(0+128),w
  7251  0270  2A9D               	goto	u4245
  7252  0271                     l3428:	
  7253                           ;main.c: 129: }
  7254                           
  7255                           ;main.c: 126: }
  7256                           ;main.c: 127: }
  7257                           
  7258                           ;main.c: 124: {
  7259                           ;main.c: 125: dutyCycle6-=1;
  7260                           
  7261                           ;main.c: 122: {
  7262                           ;main.c: 123: if(dutyCycle6>0)
  7263                           
  7264                           
  7265                           ;main.c: 130: else
  7266                           ;main.c: 131: {
  7267                           ;main.c: 132: if(voltage[0]>(int16_t)Vref[0])
  7268  0271  0835               	movf	(_Vref+1)^(0+128),w
  7269  0272  3A80               	xorlw	128
  7270  0273  0020               	movlb	0	; select bank0
  7271  0274  00D9               	movwf	??_main
  7272  0275  0021               	movlb	1	; select bank1
  7273  0276  0829               	movf	(_voltage+1)^(0+128),w
  7274  0277  3A80               	xorlw	128
  7275  0278  0020               	movlb	0	; select bank0
  7276  0279  0259               	subwf	??_main,w
  7277  027A  1D03               	skipz
  7278  027B  2A7F               	goto	u4225
  7279  027C  0021               	movlb	1	; select bank1
  7280  027D  0828               	movf	_voltage^(0+128),w
  7281  027E  0234               	subwf	_Vref^(0+128),w
  7282  027F                     u4225:	
  7283  027F  1803               	skipnc
  7284  0280  2A8E               	goto	l3434
  7285  0281                     L3:	
  7286                           
  7287                           ;main.c: 133: {
  7288                           ;main.c: 134: if(dutyCycle6<1023) dutyCycle6+=1;
  7289  0281  3003               	movlw	3
  7290  0282  0021               	movlb	1	; select bank1
  7291  0283  0269               	subwf	(main@dutyCycle6+1)^(0+128),w
  7292  0284  30FF               	movlw	255
  7293  0285  1903               	skipnz
  7294  0286  0268               	subwf	main@dutyCycle6^(0+128),w
  7295  0287  1803               	skipnc
  7296  0288  2AA8               	goto	l3440
  7297  0289  3001               	movlw	1
  7298  028A  07E8               	addwf	main@dutyCycle6^(0+128),f
  7299  028B  3000               	movlw	0
  7300  028C  3DE9               	addwfc	(main@dutyCycle6+1)^(0+128),f
  7301                           
  7302                           ;main.c: 135: }
  7303  028D  2AA8               	goto	l3440
  7304  028E                     l3434:	
  7305                           
  7306                           ;main.c: 136: else if(voltage[0]<(int16_t)Vref[0])
  7307  028E  0021               	movlb	1	; select bank1
  7308  028F  0829               	movf	(_voltage+1)^(0+128),w
  7309  0290  3A80               	xorlw	128
  7310  0291  0020               	movlb	0	; select bank0
  7311  0292  00D9               	movwf	??_main
  7312  0293  0021               	movlb	1	; select bank1
  7313  0294  0835               	movf	(_Vref+1)^(0+128),w
  7314  0295  3A80               	xorlw	128
  7315  0296  0020               	movlb	0	; select bank0
  7316  0297  0259               	subwf	??_main,w
  7317  0298  1D03               	skipz
  7318  0299  2A9D               	goto	u4245
  7319  029A  0021               	movlb	1	; select bank1
  7320  029B  0834               	movf	_Vref^(0+128),w
  7321  029C  0228               	subwf	_voltage^(0+128),w
  7322  029D                     u4245:	
  7323  029D  1803               	skipnc
  7324  029E  2AA8               	goto	l3440
  7325                           
  7326                           ;main.c: 137: {
  7327                           ;main.c: 138: if(dutyCycle6>0) dutyCycle6-=1;;
  7328  029F  0021               	movlb	1	; select bank1
  7329  02A0  0868               	movf	main@dutyCycle6^(0+128),w
  7330  02A1  0469               	iorwf	(main@dutyCycle6+1)^(0+128),w
  7331  02A2  1903               	btfsc	3,2
  7332  02A3  2AA8               	goto	l3440
  7333  02A4  3001               	movlw	1
  7334  02A5  02E8               	subwf	main@dutyCycle6^(0+128),f
  7335  02A6  3000               	movlw	0
  7336  02A7  3BE9               	subwfb	(main@dutyCycle6+1)^(0+128),f
  7337  02A8                     l3440:	
  7338                           ;main.c: 139: }
  7339                           
  7340                           
  7341                           ;main.c: 141: }
  7342                           ;main.c: 143: if(Imode[1])
  7343  02A8  0021               	movlb	1	; select bank1
  7344  02A9  083D               	movf	(_Imode^(0+128)+1),w
  7345  02AA  1903               	btfsc	3,2
  7346  02AB  2ABD               	goto	l3452
  7347                           
  7348                           ;main.c: 144: {
  7349                           ;main.c: 145: if(voltage[3]<MPPT1)
  7350  02AC  082F               	movf	((_voltage+1)^(0+128)+6),w
  7351  02AD  3A80               	xorlw	128
  7352  02AE  0020               	movlb	0	; select bank0
  7353  02AF  00D9               	movwf	??_main
  7354  02B0  0021               	movlb	1	; select bank1
  7355  02B1  085D               	movf	(main@MPPT1+1)^(0+128),w
  7356  02B2  3A80               	xorlw	128
  7357  02B3  0020               	movlb	0	; select bank0
  7358  02B4  0259               	subwf	??_main,w
  7359  02B5  1D03               	skipz
  7360  02B6  2ABA               	goto	u4275
  7361  02B7  0021               	movlb	1	; select bank1
  7362  02B8  085C               	movf	main@MPPT1^(0+128),w
  7363  02B9  022E               	subwf	(_voltage^(0+128)+6),w
  7364  02BA                     u4275:	
  7365  02BA  1C03               	btfss	3,0
  7366  02BB  2ACD               	goto	L4
  7367                           
  7368                           ;main.c: 150: }
  7369                           ;main.c: 151: }
  7370                           
  7371                           ;main.c: 148: {
  7372                           ;main.c: 149: dutyCycle7+=1;
  7373                           
  7374                           ;main.c: 146: {
  7375                           ;main.c: 147: if(dutyCycle7<1023)
  7376  02BC  2AEB               	goto	L5
  7377  02BD                     l3452:	
  7378                           ;main.c: 155: }
  7379                           ;main.c: 156: }
  7380                           
  7381                           ;main.c: 153: {
  7382                           ;main.c: 154: dutyCycle7-=1;
  7383                           
  7384                           ;main.c: 152: else if(dutyCycle7>0)
  7385                           
  7386                           
  7387                           ;main.c: 157: else
  7388                           ;main.c: 158: {
  7389                           ;main.c: 159: if(voltage[1]>(int16_t)Vref[1])
  7390  02BD  0837               	movf	((_Vref+1)^(0+128)+2),w
  7391  02BE  3A80               	xorlw	128
  7392  02BF  0020               	movlb	0	; select bank0
  7393  02C0  00D9               	movwf	??_main
  7394  02C1  0021               	movlb	1	; select bank1
  7395  02C2  082B               	movf	((_voltage+1)^(0+128)+2),w
  7396  02C3  3A80               	xorlw	128
  7397  02C4  0020               	movlb	0	; select bank0
  7398  02C5  0259               	subwf	??_main,w
  7399  02C6  1D03               	skipz
  7400  02C7  2ACB               	goto	u4305
  7401  02C8  0021               	movlb	1	; select bank1
  7402  02C9  082A               	movf	(_voltage^(0+128)+2),w
  7403  02CA  0236               	subwf	(_Vref^(0+128)+2),w
  7404  02CB                     u4305:	
  7405  02CB  1803               	skipnc
  7406  02CC  2ADA               	goto	l3458
  7407  02CD                     L4:	
  7408                           
  7409                           ;main.c: 160: {
  7410                           ;main.c: 161: if(dutyCycle7<1023) dutyCycle7+=1;
  7411  02CD  3003               	movlw	3
  7412  02CE  0021               	movlb	1	; select bank1
  7413  02CF  026B               	subwf	(main@dutyCycle7+1)^(0+128),w
  7414  02D0  30FF               	movlw	255
  7415  02D1  1903               	skipnz
  7416  02D2  026A               	subwf	main@dutyCycle7^(0+128),w
  7417  02D3  1803               	skipnc
  7418  02D4  2AF4               	goto	l3464
  7419  02D5  3001               	movlw	1
  7420  02D6  07EA               	addwf	main@dutyCycle7^(0+128),f
  7421  02D7  3000               	movlw	0
  7422  02D8  3DEB               	addwfc	(main@dutyCycle7+1)^(0+128),f
  7423                           
  7424                           ;main.c: 162: }
  7425  02D9  2AF4               	goto	l3464
  7426  02DA                     l3458:	
  7427                           
  7428                           ;main.c: 163: else if(voltage[1]<(int16_t)Vref[1])
  7429  02DA  0021               	movlb	1	; select bank1
  7430  02DB  082B               	movf	((_voltage+1)^(0+128)+2),w
  7431  02DC  3A80               	xorlw	128
  7432  02DD  0020               	movlb	0	; select bank0
  7433  02DE  00D9               	movwf	??_main
  7434  02DF  0021               	movlb	1	; select bank1
  7435  02E0  0837               	movf	((_Vref+1)^(0+128)+2),w
  7436  02E1  3A80               	xorlw	128
  7437  02E2  0020               	movlb	0	; select bank0
  7438  02E3  0259               	subwf	??_main,w
  7439  02E4  1D03               	skipz
  7440  02E5  2AE9               	goto	u4325
  7441  02E6  0021               	movlb	1	; select bank1
  7442  02E7  0836               	movf	(_Vref^(0+128)+2),w
  7443  02E8  022A               	subwf	(_voltage^(0+128)+2),w
  7444  02E9                     u4325:	
  7445  02E9  1803               	skipnc
  7446  02EA  2AF4               	goto	l3464
  7447  02EB                     L5:	
  7448                           
  7449                           ;main.c: 164: {
  7450                           ;main.c: 165: if(dutyCycle7>0) dutyCycle7-=1;;
  7451  02EB  0021               	movlb	1	; select bank1
  7452  02EC  086A               	movf	main@dutyCycle7^(0+128),w
  7453  02ED  046B               	iorwf	(main@dutyCycle7+1)^(0+128),w
  7454  02EE  1903               	btfsc	3,2
  7455  02EF  2AF4               	goto	l3464
  7456  02F0  3001               	movlw	1
  7457  02F1  02EA               	subwf	main@dutyCycle7^(0+128),f
  7458  02F2  3000               	movlw	0
  7459  02F3  3BEB               	subwfb	(main@dutyCycle7+1)^(0+128),f
  7460  02F4                     l3464:	
  7461                           ;main.c: 166: }
  7462                           
  7463                           
  7464                           ;main.c: 168: }
  7465                           ;main.c: 169: PWM6_LoadDutyValue(dutyCycle6);
  7466  02F4  0021               	movlb	1	; select bank1
  7467  02F5  0869               	movf	(main@dutyCycle6+1)^(0+128),w
  7468  02F6  00F1               	movwf	PWM6_LoadDutyValue@dutyCycle6+1
  7469  02F7  0868               	movf	main@dutyCycle6^(0+128),w
  7470  02F8  00F0               	movwf	PWM6_LoadDutyValue@dutyCycle6
  7471  02F9  319E  266D  3180   	fcall	_PWM6_LoadDutyValue
  7472                           
  7473                           ;main.c: 170: PWM7_LoadDutyValue(dutyCycle7);
  7474  02FC  0021               	movlb	1	; select bank1
  7475  02FD  086B               	movf	(main@dutyCycle7+1)^(0+128),w
  7476  02FE  00F1               	movwf	PWM7_LoadDutyValue@dutyCycle7+1
  7477  02FF  086A               	movf	main@dutyCycle7^(0+128),w
  7478  0300  00F0               	movwf	PWM7_LoadDutyValue@dutyCycle7
  7479  0301  319E  2683  3180   	fcall	_PWM7_LoadDutyValue
  7480                           
  7481                           ;main.c: 171: fastLoop=0;
  7482  0304  0021               	movlb	1	; select bank1
  7483  0305  01CF               	clrf	main@fastLoop^(0+128)
  7484                           
  7485                           ;main.c: 175: slowLoop+=1;
  7486  0306  3001               	movlw	1
  7487  0307  0020               	movlb	0	; select bank0
  7488  0308  00D9               	movwf	??_main
  7489  0309  0859               	movf	??_main,w
  7490  030A  0021               	movlb	1	; select bank1
  7491  030B  07D9               	addwf	main@slowLoop^(0+128),f
  7492                           
  7493                           ;main.c: 178: menuButton = readButton();
  7494  030C  3194  24E9  3180   	fcall	_readButton
  7495  030F  0020               	movlb	0	; select bank0
  7496  0310  00D9               	movwf	??_main
  7497  0311  0859               	movf	??_main,w
  7498  0312  0021               	movlb	1	; select bank1
  7499  0313  00E0               	movwf	main@menuButton^(0+128)
  7500                           
  7501                           ;main.c: 179: if(menuButton == 2) if(MPPT1>2700)MPPT1-=1;
  7502  0314  3002               	movlw	2
  7503  0315  0660               	xorwf	main@menuButton^(0+128),w
  7504  0316  1D03               	btfss	3,2
  7505  0317  2B2A               	goto	l3478
  7506  0318  085D               	movf	(main@MPPT1+1)^(0+128),w
  7507  0319  3A80               	xorlw	128
  7508  031A  0020               	movlb	0	; select bank0
  7509  031B  00D9               	movwf	??_main
  7510  031C  308A               	movlw	138
  7511  031D  0259               	subwf	??_main,w
  7512  031E  1D03               	skipz
  7513  031F  2B23               	goto	u4355
  7514  0320  308D               	movlw	141
  7515  0321  0021               	movlb	1	; select bank1
  7516  0322  025C               	subwf	main@MPPT1^(0+128),w
  7517  0323                     u4355:	
  7518  0323  1C03               	skipc
  7519  0324  2B2A               	goto	l3478
  7520  0325  30FF               	movlw	255
  7521  0326  0021               	movlb	1	; select bank1
  7522  0327  07DC               	addwf	main@MPPT1^(0+128),f
  7523  0328  30FF               	movlw	255
  7524  0329  3DDD               	addwfc	(main@MPPT1+1)^(0+128),f
  7525  032A                     l3478:	
  7526                           
  7527                           ;main.c: 180: if(menuButton == 3)if(MPPT1<3200)MPPT1+=1;
  7528  032A  3003               	movlw	3
  7529  032B  0021               	movlb	1	; select bank1
  7530  032C  0660               	xorwf	main@menuButton^(0+128),w
  7531  032D  1D03               	btfss	3,2
  7532  032E  2B41               	goto	l3484
  7533  032F  085D               	movf	(main@MPPT1+1)^(0+128),w
  7534  0330  3A80               	xorlw	128
  7535  0331  0020               	movlb	0	; select bank0
  7536  0332  00D9               	movwf	??_main
  7537  0333  308C               	movlw	140
  7538  0334  0259               	subwf	??_main,w
  7539  0335  1D03               	skipz
  7540  0336  2B3A               	goto	u4375
  7541  0337  3080               	movlw	128
  7542  0338  0021               	movlb	1	; select bank1
  7543  0339  025C               	subwf	main@MPPT1^(0+128),w
  7544  033A                     u4375:	
  7545  033A  1803               	skipnc
  7546  033B  2B41               	goto	l3484
  7547  033C  3001               	movlw	1
  7548  033D  0021               	movlb	1	; select bank1
  7549  033E  07DC               	addwf	main@MPPT1^(0+128),f
  7550  033F  3000               	movlw	0
  7551  0340  3DDD               	addwfc	(main@MPPT1+1)^(0+128),f
  7552  0341                     l3484:	
  7553                           
  7554                           ;main.c: 181: if(menuButton == 1)LCDInit();
  7555  0341  0021               	movlb	1	; select bank1
  7556  0342  0360               	decf	main@menuButton^(0+128),w
  7557  0343  1D03               	btfss	3,2
  7558  0344  2B48               	goto	l3488
  7559  0345  3191  215A  3180   	fcall	_LCDInit
  7560  0348                     l3488:	
  7561                           
  7562                           ;main.c: 183: if(slowLoop>250)
  7563  0348  30FB               	movlw	251
  7564  0349  0021               	movlb	1	; select bank1
  7565  034A  0259               	subwf	main@slowLoop^(0+128),w
  7566  034B  1C03               	skipc
  7567  034C  2876               	goto	l3352
  7568                           
  7569                           ;main.c: 184: {
  7570                           ;main.c: 185: if(current[0]>current[3]*(voltage[3]/voltage[1]*.9))
  7571  034D  082F               	movf	((_voltage+1)^(0+128)+6),w
  7572  034E  00F3               	movwf	___awdiv@dividend+1
  7573  034F  082E               	movf	(_voltage^(0+128)+6),w
  7574  0350  00F2               	movwf	___awdiv@dividend
  7575  0351  082B               	movf	((_voltage+1)^(0+128)+2),w
  7576  0352  00F1               	movwf	___awdiv@divisor+1
  7577  0353  082A               	movf	(_voltage^(0+128)+2),w
  7578  0354  00F0               	movwf	___awdiv@divisor
  7579  0355  3192  2296  3180   	fcall	___awdiv
  7580  0358  0871               	movf	?___awdiv+1,w
  7581  0359  00FA               	movwf	___awtoft@c+1
  7582  035A  0870               	movf	?___awdiv,w
  7583  035B  00F9               	movwf	___awtoft@c
  7584  035C  319F  2710  3180   	fcall	___awtoft
  7585  035F  0879               	movf	?___awtoft,w
  7586  0360  0020               	movlb	0	; select bank0
  7587  0361  00A4               	movwf	___ftmul@f2
  7588  0362  087A               	movf	?___awtoft+1,w
  7589  0363  00A5               	movwf	___ftmul@f2+1
  7590  0364  087B               	movf	?___awtoft+2,w
  7591  0365  00A6               	movwf	___ftmul@f2+2
  7592  0366  3066               	movlw	102
  7593  0367  00A1               	movwf	___ftmul@f1
  7594  0368  3066               	movlw	102
  7595  0369  00A2               	movwf	___ftmul@f1+1
  7596  036A  303F               	movlw	63
  7597  036B  00A3               	movwf	___ftmul@f1+2
  7598  036C  3197  274C  3180   	fcall	___ftmul
  7599  036F  0020               	movlb	0	; select bank0
  7600  0370  0821               	movf	?___ftmul,w
  7601  0371  0021               	movlb	1	; select bank1
  7602  0372  00E5               	movwf	_main$1304^(0+128)
  7603  0373  0020               	movlb	0	; select bank0
  7604  0374  0822               	movf	?___ftmul+1,w
  7605  0375  0021               	movlb	1	; select bank1
  7606  0376  00E6               	movwf	(_main$1304+1)^(0+128)
  7607  0377  0020               	movlb	0	; select bank0
  7608  0378  0823               	movf	?___ftmul+2,w
  7609  0379  0021               	movlb	1	; select bank1
  7610  037A  00E7               	movwf	(_main$1304+2)^(0+128)
  7611                           
  7612                           ;main.c: 184: {
  7613                           ;main.c: 185: if(current[0]>current[3]*(voltage[3]/voltage[1]*.9))
  7614  037B  0865               	movf	_main$1304^(0+128),w
  7615  037C  0020               	movlb	0	; select bank0
  7616  037D  00A1               	movwf	___ftmul@f1
  7617  037E  0021               	movlb	1	; select bank1
  7618  037F  0866               	movf	(_main$1304+1)^(0+128),w
  7619  0380  0020               	movlb	0	; select bank0
  7620  0381  00A2               	movwf	___ftmul@f1+1
  7621  0382  0021               	movlb	1	; select bank1
  7622  0383  0867               	movf	(_main$1304+2)^(0+128),w
  7623  0384  0020               	movlb	0	; select bank0
  7624  0385  00A3               	movwf	___ftmul@f1+2
  7625  0386  0021               	movlb	1	; select bank1
  7626  0387  0827               	movf	((_current+1)^(0+128)+6),w
  7627  0388  00FA               	movwf	___awtoft@c+1
  7628  0389  0826               	movf	(_current^(0+128)+6),w
  7629  038A  00F9               	movwf	___awtoft@c
  7630  038B  319F  2710  3180   	fcall	___awtoft
  7631  038E  0879               	movf	?___awtoft,w
  7632  038F  0020               	movlb	0	; select bank0
  7633  0390  00A4               	movwf	___ftmul@f2
  7634  0391  087A               	movf	?___awtoft+1,w
  7635  0392  00A5               	movwf	___ftmul@f2+1
  7636  0393  087B               	movf	?___awtoft+2,w
  7637  0394  00A6               	movwf	___ftmul@f2+2
  7638  0395  3197  274C  3180   	fcall	___ftmul
  7639  0398  0020               	movlb	0	; select bank0
  7640  0399  0821               	movf	?___ftmul,w
  7641  039A  00B1               	movwf	___ftge@ff1
  7642  039B  0822               	movf	?___ftmul+1,w
  7643  039C  00B2               	movwf	___ftge@ff1+1
  7644  039D  0823               	movf	?___ftmul+2,w
  7645  039E  00B3               	movwf	___ftge@ff1+2
  7646  039F  0021               	movlb	1	; select bank1
  7647  03A0  0821               	movf	(_current+1)^(0+128),w
  7648  03A1  00FA               	movwf	___awtoft@c+1
  7649  03A2  0820               	movf	_current^(0+128),w
  7650  03A3  00F9               	movwf	___awtoft@c
  7651  03A4  319F  2710  3180   	fcall	___awtoft
  7652  03A7  0879               	movf	?___awtoft,w
  7653  03A8  0020               	movlb	0	; select bank0
  7654  03A9  00B4               	movwf	___ftge@ff2
  7655  03AA  087A               	movf	?___awtoft+1,w
  7656  03AB  00B5               	movwf	___ftge@ff2+1
  7657  03AC  087B               	movf	?___awtoft+2,w
  7658  03AD  00B6               	movwf	___ftge@ff2+2
  7659  03AE  3191  21D0  3180   	fcall	___ftge
  7660  03B1  1803               	btfsc	3,0
  7661  03B2  2BB8               	goto	l3494
  7662                           
  7663                           ;main.c: 186: {
  7664                           ;main.c: 187: largerIOut=current[0];
  7665  03B3  0021               	movlb	1	; select bank1
  7666  03B4  0821               	movf	(_current+1)^(0+128),w
  7667  03B5  00DF               	movwf	(main@largerIOut+1)^(0+128)
  7668  03B6  0820               	movf	_current^(0+128),w
  7669  03B7  2C15               	goto	L1
  7670  03B8                     l3494:	
  7671                           ;main.c: 188: }
  7672                           
  7673                           
  7674                           ;main.c: 189: else
  7675                           ;main.c: 190: {
  7676                           ;main.c: 191: largerIOut=(int16_t)(current[3]*(voltage[3]/voltage[1]*.9));
  7677  03B8  0021               	movlb	1	; select bank1
  7678  03B9  082F               	movf	((_voltage+1)^(0+128)+6),w
  7679  03BA  00F3               	movwf	___awdiv@dividend+1
  7680  03BB  082E               	movf	(_voltage^(0+128)+6),w
  7681  03BC  00F2               	movwf	___awdiv@dividend
  7682  03BD  082B               	movf	((_voltage+1)^(0+128)+2),w
  7683  03BE  00F1               	movwf	___awdiv@divisor+1
  7684  03BF  082A               	movf	(_voltage^(0+128)+2),w
  7685  03C0  00F0               	movwf	___awdiv@divisor
  7686  03C1  3192  2296  3180   	fcall	___awdiv
  7687  03C4  0871               	movf	?___awdiv+1,w
  7688  03C5  00FA               	movwf	___awtoft@c+1
  7689  03C6  0870               	movf	?___awdiv,w
  7690  03C7  00F9               	movwf	___awtoft@c
  7691  03C8  319F  2710  3180   	fcall	___awtoft
  7692  03CB  0879               	movf	?___awtoft,w
  7693  03CC  0020               	movlb	0	; select bank0
  7694  03CD  00A4               	movwf	___ftmul@f2
  7695  03CE  087A               	movf	?___awtoft+1,w
  7696  03CF  00A5               	movwf	___ftmul@f2+1
  7697  03D0  087B               	movf	?___awtoft+2,w
  7698  03D1  00A6               	movwf	___ftmul@f2+2
  7699  03D2  3066               	movlw	102
  7700  03D3  00A1               	movwf	___ftmul@f1
  7701  03D4  3066               	movlw	102
  7702  03D5  00A2               	movwf	___ftmul@f1+1
  7703  03D6  303F               	movlw	63
  7704  03D7  00A3               	movwf	___ftmul@f1+2
  7705  03D8  3197  274C  3180   	fcall	___ftmul
  7706  03DB  0020               	movlb	0	; select bank0
  7707  03DC  0821               	movf	?___ftmul,w
  7708  03DD  0021               	movlb	1	; select bank1
  7709  03DE  00E5               	movwf	_main$1304^(0+128)
  7710  03DF  0020               	movlb	0	; select bank0
  7711  03E0  0822               	movf	?___ftmul+1,w
  7712  03E1  0021               	movlb	1	; select bank1
  7713  03E2  00E6               	movwf	(_main$1304+1)^(0+128)
  7714  03E3  0020               	movlb	0	; select bank0
  7715  03E4  0823               	movf	?___ftmul+2,w
  7716  03E5  0021               	movlb	1	; select bank1
  7717  03E6  00E7               	movwf	(_main$1304+2)^(0+128)
  7718                           
  7719                           ;main.c: 189: else
  7720                           ;main.c: 190: {
  7721                           ;main.c: 191: largerIOut=(int16_t)(current[3]*(voltage[3]/voltage[1]*.9));
  7722  03E7  0827               	movf	((_current+1)^(0+128)+6),w
  7723  03E8  00FA               	movwf	___awtoft@c+1
  7724  03E9  0826               	movf	(_current^(0+128)+6),w
  7725  03EA  00F9               	movwf	___awtoft@c
  7726  03EB  319F  2710  3180   	fcall	___awtoft
  7727  03EE  0879               	movf	?___awtoft,w
  7728  03EF  0020               	movlb	0	; select bank0
  7729  03F0  00A4               	movwf	___ftmul@f2
  7730  03F1  087A               	movf	?___awtoft+1,w
  7731  03F2  00A5               	movwf	___ftmul@f2+1
  7732  03F3  087B               	movf	?___awtoft+2,w
  7733  03F4  00A6               	movwf	___ftmul@f2+2
  7734  03F5  0021               	movlb	1	; select bank1
  7735  03F6  0865               	movf	_main$1304^(0+128),w
  7736  03F7  0020               	movlb	0	; select bank0
  7737  03F8  00A1               	movwf	___ftmul@f1
  7738  03F9  0021               	movlb	1	; select bank1
  7739  03FA  0866               	movf	(_main$1304+1)^(0+128),w
  7740  03FB  0020               	movlb	0	; select bank0
  7741  03FC  00A2               	movwf	___ftmul@f1+1
  7742  03FD  0021               	movlb	1	; select bank1
  7743  03FE  0867               	movf	(_main$1304+2)^(0+128),w
  7744  03FF  0020               	movlb	0	; select bank0
  7745  0400  00A3               	movwf	___ftmul@f1+2
  7746  0401  3197  274C  3180   	fcall	___ftmul
  7747  0404  0020               	movlb	0	; select bank0
  7748  0405  0821               	movf	?___ftmul,w
  7749  0406  00B1               	movwf	___fttol@f1
  7750  0407  0822               	movf	?___ftmul+1,w
  7751  0408  00B2               	movwf	___fttol@f1+1
  7752  0409  0823               	movf	?___ftmul+2,w
  7753  040A  00B3               	movwf	___fttol@f1+2
  7754  040B  3195  256C  3180   	fcall	___fttol
  7755  040E  0020               	movlb	0	; select bank0
  7756  040F  0832               	movf	?___fttol+1,w
  7757  0410  0021               	movlb	1	; select bank1
  7758  0411  00DF               	movwf	(main@largerIOut+1)^(0+128)
  7759  0412  0020               	movlb	0	; select bank0
  7760  0413  0831               	movf	?___fttol,w
  7761  0414  0021               	movlb	1	; select bank1
  7762  0415                     L1:	
  7763  0415  00DE               	movwf	main@largerIOut^(0+128)
  7764                           
  7765                           ;main.c: 193: }
  7766                           ;main.c: 195: if(largerIOut>25)
  7767  0416  085F               	movf	(main@largerIOut+1)^(0+128),w
  7768  0417  3A80               	xorlw	128
  7769  0418  0020               	movlb	0	; select bank0
  7770  0419  00D9               	movwf	??_main
  7771  041A  3080               	movlw	128
  7772  041B  0259               	subwf	??_main,w
  7773  041C  1D03               	skipz
  7774  041D  2C21               	goto	u4415
  7775  041E  301A               	movlw	26
  7776  041F  0021               	movlb	1	; select bank1
  7777  0420  025E               	subwf	main@largerIOut^(0+128),w
  7778  0421                     u4415:	
  7779  0421  1C03               	skipc
  7780  0422  2C75               	goto	l3516
  7781                           
  7782                           ;main.c: 196: {
  7783                           ;main.c: 197: if((uint16_t)largerIOut+5>dutyCycle1)
  7784  0423  0021               	movlb	1	; select bank1
  7785  0424  085E               	movf	main@largerIOut^(0+128),w
  7786  0425  3E05               	addlw	5
  7787  0426  0020               	movlb	0	; select bank0
  7788  0427  00D9               	movwf	??_main
  7789  0428  3000               	movlw	0
  7790  0429  0021               	movlb	1	; select bank1
  7791  042A  3D5F               	addwfc	(main@largerIOut+1)^(0+128),w
  7792  042B  0020               	movlb	0	; select bank0
  7793  042C  00DA               	movwf	??_main+1
  7794  042D  085A               	movf	??_main+1,w
  7795  042E  0021               	movlb	1	; select bank1
  7796  042F  0262               	subwf	(main@dutyCycle1+1)^(0+128),w
  7797  0430  1D03               	skipz
  7798  0431  2C36               	goto	u4425
  7799  0432  0020               	movlb	0	; select bank0
  7800  0433  0859               	movf	??_main,w
  7801  0434  0021               	movlb	1	; select bank1
  7802  0435  0261               	subwf	main@dutyCycle1^(0+128),w
  7803  0436                     u4425:	
  7804  0436  1803               	skipnc
  7805  0437  2C3D               	goto	l3502
  7806                           
  7807                           ;main.c: 198: {
  7808                           ;main.c: 199: dutyCycle1+=1;
  7809  0438  3001               	movlw	1
  7810  0439  07E1               	addwf	main@dutyCycle1^(0+128),f
  7811  043A  3000               	movlw	0
  7812  043B  3DE2               	addwfc	(main@dutyCycle1+1)^(0+128),f
  7813                           
  7814                           ;main.c: 200: }
  7815  043C  2C41               	goto	l3504
  7816  043D                     l3502:	
  7817                           
  7818                           ;main.c: 201: else dutyCycle1-=1;
  7819  043D  3001               	movlw	1
  7820  043E  02E1               	subwf	main@dutyCycle1^(0+128),f
  7821  043F  3000               	movlw	0
  7822  0440  3BE2               	subwfb	(main@dutyCycle1+1)^(0+128),f
  7823  0441                     l3504:	
  7824                           
  7825                           ;main.c: 203: if((uint16_t)largerIOut+5>tempFanOutput)
  7826  0441  085E               	movf	main@largerIOut^(0+128),w
  7827  0442  3E05               	addlw	5
  7828  0443  0020               	movlb	0	; select bank0
  7829  0444  00D9               	movwf	??_main
  7830  0445  3000               	movlw	0
  7831  0446  0021               	movlb	1	; select bank1
  7832  0447  3D5F               	addwfc	(main@largerIOut+1)^(0+128),w
  7833  0448  0020               	movlb	0	; select bank0
  7834  0449  00DA               	movwf	??_main+1
  7835  044A  085A               	movf	??_main+1,w
  7836  044B  0021               	movlb	1	; select bank1
  7837  044C  0264               	subwf	(main@tempFanOutput+1)^(0+128),w
  7838  044D  1D03               	skipz
  7839  044E  2C53               	goto	u4435
  7840  044F  0020               	movlb	0	; select bank0
  7841  0450  0859               	movf	??_main,w
  7842  0451  0021               	movlb	1	; select bank1
  7843  0452  0263               	subwf	main@tempFanOutput^(0+128),w
  7844  0453                     u4435:	
  7845  0453  1803               	skipnc
  7846  0454  2C61               	goto	l3510
  7847                           
  7848                           ;main.c: 204: {
  7849                           ;main.c: 205: if(tempFanOutput<75)
  7850  0455  3000               	movlw	0
  7851  0456  0264               	subwf	(main@tempFanOutput+1)^(0+128),w
  7852  0457  304B               	movlw	75
  7853  0458  1903               	skipnz
  7854  0459  0263               	subwf	main@tempFanOutput^(0+128),w
  7855  045A  1803               	skipnc
  7856  045B  2C69               	goto	l123
  7857                           
  7858                           ;main.c: 206: {
  7859                           ;main.c: 207: tempFanOutput+=1;
  7860  045C  3001               	movlw	1
  7861  045D  07E3               	addwf	main@tempFanOutput^(0+128),f
  7862  045E  3000               	movlw	0
  7863  045F  3DE4               	addwfc	(main@tempFanOutput+1)^(0+128),f
  7864                           
  7865                           ;main.c: 208: }
  7866                           ;main.c: 209: }
  7867  0460  2C69               	goto	l123
  7868  0461                     l3510:	
  7869                           
  7870                           ;main.c: 210: else
  7871                           ;main.c: 211: {
  7872                           ;main.c: 212: if(tempFanOutput>0)tempFanOutput-=1;
  7873  0461  0863               	movf	main@tempFanOutput^(0+128),w
  7874  0462  0464               	iorwf	(main@tempFanOutput+1)^(0+128),w
  7875  0463  1903               	btfsc	3,2
  7876  0464  2C69               	goto	l123
  7877  0465  3001               	movlw	1
  7878  0466  02E3               	subwf	main@tempFanOutput^(0+128),f
  7879  0467  3000               	movlw	0
  7880  0468  3BE4               	subwfb	(main@tempFanOutput+1)^(0+128),f
  7881  0469                     l123:	
  7882                           
  7883                           ;main.c: 213: }
  7884                           ;main.c: 215: dutyCycle1=tempFanOutput;
  7885  0469  0864               	movf	(main@tempFanOutput+1)^(0+128),w
  7886  046A  00E2               	movwf	(main@dutyCycle1+1)^(0+128)
  7887  046B  0863               	movf	main@tempFanOutput^(0+128),w
  7888  046C  00E1               	movwf	main@dutyCycle1^(0+128)
  7889                           
  7890                           ;main.c: 216: if(dutyCycle1<19)dutyCycle1=0;
  7891  046D  3000               	movlw	0
  7892  046E  0262               	subwf	(main@dutyCycle1+1)^(0+128),w
  7893  046F  3013               	movlw	19
  7894  0470  1903               	skipnz
  7895  0471  0261               	subwf	main@dutyCycle1^(0+128),w
  7896  0472  1803               	skipnc
  7897  0473  2C78               	goto	l3518
  7898  0474  2C76               	goto	L2
  7899  0475                     l3516:	
  7900                           ;main.c: 217: }
  7901                           
  7902                           
  7903                           ;main.c: 218: else
  7904                           ;main.c: 219: {
  7905                           ;main.c: 220: dutyCycle1=0;
  7906  0475  0021               	movlb	1	; select bank1
  7907  0476                     L2:	
  7908  0476  01E1               	clrf	main@dutyCycle1^(0+128)
  7909  0477  01E2               	clrf	(main@dutyCycle1+1)^(0+128)
  7910  0478                     l3518:	
  7911                           
  7912                           ;main.c: 221: }
  7913                           ;main.c: 222: if(!(RB2))
  7914  0478  0020               	movlb	0	; select bank0
  7915  0479  190D               	btfsc	13,2	;volatile
  7916  047A  2C8C               	goto	l3522
  7917                           
  7918                           ;main.c: 223: {
  7919                           ;main.c: 224: dutyCycle1=55;
  7920  047B  3037               	movlw	55
  7921  047C  0021               	movlb	1	; select bank1
  7922  047D  00E1               	movwf	main@dutyCycle1^(0+128)
  7923  047E  3000               	movlw	0
  7924  047F  00E2               	movwf	(main@dutyCycle1^(0+128)+1)
  7925                           
  7926                           ;main.c: 225: batteryState[0]=CHARGE;
  7927  0480  3004               	movlw	4
  7928  0481  0020               	movlb	0	; select bank0
  7929  0482  00D9               	movwf	??_main
  7930  0483  0859               	movf	??_main,w
  7931  0484  0021               	movlb	1	; select bank1
  7932  0485  00C2               	movwf	_batteryState^(0+128)
  7933                           
  7934                           ;main.c: 226: batteryState[1]=CHARGE;
  7935  0486  3004               	movlw	4
  7936  0487  0020               	movlb	0	; select bank0
  7937  0488  00D9               	movwf	??_main
  7938  0489  0859               	movf	??_main,w
  7939  048A  0021               	movlb	1	; select bank1
  7940  048B  00C3               	movwf	(_batteryState^(0+128)+1)
  7941  048C                     l3522:	
  7942                           
  7943                           ;main.c: 227: }
  7944                           ;main.c: 229: PWM1_LoadDutyValue(dutyCycle1);
  7945  048C  0021               	movlb	1	; select bank1
  7946  048D  0862               	movf	(main@dutyCycle1+1)^(0+128),w
  7947  048E  00F1               	movwf	PWM1_LoadDutyValue@dutyCycle1+1
  7948  048F  0861               	movf	main@dutyCycle1^(0+128),w
  7949  0490  00F0               	movwf	PWM1_LoadDutyValue@dutyCycle1
  7950  0491  319E  2657  3180   	fcall	_PWM1_LoadDutyValue
  7951                           
  7952                           ;main.c: 231: ADREF = 0x00;
  7953  0494  0021               	movlb	1	; select bank1
  7954  0495  019A               	clrf	26	;volatile
  7955                           
  7956                           ;main.c: 232: batteryTemp=tempCalc(ADCRead(9));
  7957  0496  3009               	movlw	9
  7958  0497  319E  2642  3180   	fcall	_ADCRead
  7959  049A  0871               	movf	?_ADCRead+1,w
  7960  049B  0020               	movlb	0	; select bank0
  7961  049C  00CF               	movwf	tempCalc@analogValue+1
  7962  049D  0870               	movf	?_ADCRead,w
  7963  049E  00CE               	movwf	tempCalc@analogValue
  7964  049F  3188  20C7  3180   	fcall	_tempCalc
  7965  04A2  0020               	movlb	0	; select bank0
  7966  04A3  084F               	movf	?_tempCalc+1,w
  7967  04A4  0021               	movlb	1	; select bank1
  7968  04A5  00EE               	movwf	(_batteryTemp+1)^(0+128)
  7969  04A6  0020               	movlb	0	; select bank0
  7970  04A7  084E               	movf	?_tempCalc,w
  7971  04A8  0021               	movlb	1	; select bank1
  7972  04A9  00ED               	movwf	_batteryTemp^(0+128)
  7973                           
  7974                           ;main.c: 233: ADREF = 0x03;
  7975  04AA  3003               	movlw	3
  7976  04AB  009A               	movwf	26	;volatile
  7977                           
  7978                           ;main.c: 235: displayRefresh+=1;
  7979  04AC  3001               	movlw	1
  7980  04AD  0020               	movlb	0	; select bank0
  7981  04AE  00D9               	movwf	??_main
  7982  04AF  0859               	movf	??_main,w
  7983  04B0  0021               	movlb	1	; select bank1
  7984  04B1  07D8               	addwf	main@displayRefresh^(0+128),f
  7985                           
  7986                           ;main.c: 236: if(displayRefresh>80)
  7987  04B2  3051               	movlw	81
  7988  04B3  0258               	subwf	main@displayRefresh^(0+128),w
  7989  04B4  1C03               	skipc
  7990  04B5  2CBB               	goto	l3538
  7991                           
  7992                           ;main.c: 237: {
  7993                           ;main.c: 238: LCDClear();
  7994  04B6  319F  2777  3180   	fcall	_LCDClear
  7995                           
  7996                           ;main.c: 239: displayRefresh=0;
  7997  04B9  0021               	movlb	1	; select bank1
  7998  04BA  01D8               	clrf	main@displayRefresh^(0+128)
  7999  04BB                     l3538:	
  8000                           
  8001                           ;main.c: 241: }
  8002                           ;main.c: 242: Battery_State_Machine(0);
  8003  04BB  3000               	movlw	0
  8004  04BC  318E  2643  3180   	fcall	_Battery_State_Machine
  8005                           
  8006                           ;main.c: 243: Battery_State_Machine(1);
  8007  04BF  3001               	movlw	1
  8008  04C0  318E  2643  3180   	fcall	_Battery_State_Machine
  8009                           
  8010                           ;main.c: 246: { gotoXY(0,0); LCDWriteString("In:");};
  8011  04C3  01F5               	clrf	gotoXY@y
  8012  04C4  3000               	movlw	0
  8013  04C5  319E  261B  3180   	fcall	_gotoXY
  8014  04C8  3054               	movlw	low (STR_1| (0+32768))
  8015  04C9  00FC               	movwf	LCDWriteString@characters
  8016  04CA  3091               	movlw	high (STR_1| (0+32768))
  8017  04CB  00FD               	movwf	LCDWriteString@characters+1
  8018  04CC  319E  262E  3180   	fcall	_LCDWriteString
  8019                           
  8020                           ;main.c: 249: { gotoXY(26,0); LCDWriteString("Out:");};
  8021  04CF  01F5               	clrf	gotoXY@y
  8022  04D0  301A               	movlw	26
  8023  04D1  319E  261B  3180   	fcall	_gotoXY
  8024  04D4  304F               	movlw	low (STR_2| (0+32768))
  8025  04D5  00FC               	movwf	LCDWriteString@characters
  8026  04D6  3091               	movlw	high (STR_2| (0+32768))
  8027  04D7  00FD               	movwf	LCDWriteString@characters+1
  8028  04D8  319E  262E  3180   	fcall	_LCDWriteString
  8029                           
  8030                           ;main.c: 250: { gotoXY(52,0); LCDWriteString("Ref:");};
  8031  04DB  01F5               	clrf	gotoXY@y
  8032  04DC  3034               	movlw	52
  8033  04DD  319E  261B  3180   	fcall	_gotoXY
  8034  04E0  304A               	movlw	low (STR_3| (0+32768))
  8035  04E1  00FC               	movwf	LCDWriteString@characters
  8036  04E2  3091               	movlw	high (STR_3| (0+32768))
  8037  04E3  00FD               	movwf	LCDWriteString@characters+1
  8038  04E4  319E  262E  3180   	fcall	_LCDWriteString
  8039                           
  8040                           ;main.c: 252: { gotoXY(0,1); LCDWriteInt(voltage[2],4, 2, 0);};
  8041  04E7  01F5               	clrf	gotoXY@y
  8042  04E8  0AF5               	incf	gotoXY@y,f
  8043  04E9  3000               	movlw	0
  8044  04EA  319E  261B  3180   	fcall	_gotoXY
  8045  04ED  0021               	movlb	1	; select bank1
  8046  04EE  082D               	movf	((_voltage+1)^(0+128)+4),w
  8047  04EF  0020               	movlb	0	; select bank0
  8048  04F0  00C0               	movwf	LCDWriteInt@value+1
  8049  04F1  0021               	movlb	1	; select bank1
  8050  04F2  082C               	movf	(_voltage^(0+128)+4),w
  8051  04F3  0020               	movlb	0	; select bank0
  8052  04F4  00BF               	movwf	LCDWriteInt@value
  8053  04F5  3004               	movlw	4
  8054  04F6  00D9               	movwf	??_main
  8055  04F7  0859               	movf	??_main,w
  8056  04F8  00C1               	movwf	LCDWriteInt@fieldLength
  8057  04F9  3002               	movlw	2
  8058  04FA  00DA               	movwf	??_main+1
  8059  04FB  085A               	movf	??_main+1,w
  8060  04FC  00C2               	movwf	LCDWriteInt@numPlaces
  8061  04FD  01C3               	clrf	LCDWriteInt@sign
  8062  04FE  3188  200E  3180   	fcall	_LCDWriteInt
  8063                           
  8064                           ;main.c: 254: LCDWriteCharacter('V');
  8065  0501  3056               	movlw	86
  8066  0502  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8067                           
  8068                           ;main.c: 256: { gotoXY(26,1); LCDWriteInt(voltage[0],4, 2, 0);};
  8069  0505  01F5               	clrf	gotoXY@y
  8070  0506  0AF5               	incf	gotoXY@y,f
  8071  0507  301A               	movlw	26
  8072  0508  319E  261B  3180   	fcall	_gotoXY
  8073  050B  0021               	movlb	1	; select bank1
  8074  050C  0829               	movf	(_voltage+1)^(0+128),w
  8075  050D  0020               	movlb	0	; select bank0
  8076  050E  00C0               	movwf	LCDWriteInt@value+1
  8077  050F  0021               	movlb	1	; select bank1
  8078  0510  0828               	movf	_voltage^(0+128),w
  8079  0511  0020               	movlb	0	; select bank0
  8080  0512  00BF               	movwf	LCDWriteInt@value
  8081  0513  3004               	movlw	4
  8082  0514  00D9               	movwf	??_main
  8083  0515  0859               	movf	??_main,w
  8084  0516  00C1               	movwf	LCDWriteInt@fieldLength
  8085  0517  3002               	movlw	2
  8086  0518  00DA               	movwf	??_main+1
  8087  0519  085A               	movf	??_main+1,w
  8088  051A  00C2               	movwf	LCDWriteInt@numPlaces
  8089  051B  01C3               	clrf	LCDWriteInt@sign
  8090  051C  3188  200E  3180   	fcall	_LCDWriteInt
  8091                           
  8092                           ;main.c: 258: LCDWriteCharacter('V');
  8093  051F  3056               	movlw	86
  8094  0520  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8095                           
  8096                           ;main.c: 260: { gotoXY(52,1); LCDWriteInt(Vref[0],4, 2, 0);};
  8097  0523  01F5               	clrf	gotoXY@y
  8098  0524  0AF5               	incf	gotoXY@y,f
  8099  0525  3034               	movlw	52
  8100  0526  319E  261B  3180   	fcall	_gotoXY
  8101  0529  0021               	movlb	1	; select bank1
  8102  052A  0835               	movf	(_Vref+1)^(0+128),w
  8103  052B  0020               	movlb	0	; select bank0
  8104  052C  00C0               	movwf	LCDWriteInt@value+1
  8105  052D  0021               	movlb	1	; select bank1
  8106  052E  0834               	movf	_Vref^(0+128),w
  8107  052F  0020               	movlb	0	; select bank0
  8108  0530  00BF               	movwf	LCDWriteInt@value
  8109  0531  3004               	movlw	4
  8110  0532  00D9               	movwf	??_main
  8111  0533  0859               	movf	??_main,w
  8112  0534  00C1               	movwf	LCDWriteInt@fieldLength
  8113  0535  3002               	movlw	2
  8114  0536  00DA               	movwf	??_main+1
  8115  0537  085A               	movf	??_main+1,w
  8116  0538  00C2               	movwf	LCDWriteInt@numPlaces
  8117  0539  01C3               	clrf	LCDWriteInt@sign
  8118  053A  3188  200E  3180   	fcall	_LCDWriteInt
  8119                           
  8120                           ;main.c: 261: LCDWriteCharacter('V');
  8121  053D  3056               	movlw	86
  8122  053E  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8123                           
  8124                           ;main.c: 263: { gotoXY(80,1); LCDWriteInt(Imode[0],1, 0, 0);};
  8125  0541  01F5               	clrf	gotoXY@y
  8126  0542  0AF5               	incf	gotoXY@y,f
  8127  0543  3050               	movlw	80
  8128  0544  319E  261B  3180   	fcall	_gotoXY
  8129  0547  0021               	movlb	1	; select bank1
  8130  0548  083C               	movf	_Imode^(0+128),w
  8131  0549  0020               	movlb	0	; select bank0
  8132  054A  00BF               	movwf	LCDWriteInt@value
  8133  054B  01C0               	clrf	LCDWriteInt@value+1
  8134  054C  1BBF               	btfsc	LCDWriteInt@value,7
  8135  054D  03C0               	decf	LCDWriteInt@value+1,f
  8136  054E  01C1               	clrf	LCDWriteInt@fieldLength
  8137  054F  0AC1               	incf	LCDWriteInt@fieldLength,f
  8138  0550  01C2               	clrf	LCDWriteInt@numPlaces
  8139  0551  01C3               	clrf	LCDWriteInt@sign
  8140  0552  3188  200E  3180   	fcall	_LCDWriteInt
  8141                           
  8142                           ;main.c: 266: { gotoXY(0,2); LCDWriteInt(current[2],3, 1, 0);};
  8143  0555  3002               	movlw	2
  8144  0556  0020               	movlb	0	; select bank0
  8145  0557  00D9               	movwf	??_main
  8146  0558  0859               	movf	??_main,w
  8147  0559  00F5               	movwf	gotoXY@y
  8148  055A  3000               	movlw	0
  8149  055B  319E  261B  3180   	fcall	_gotoXY
  8150  055E  0021               	movlb	1	; select bank1
  8151  055F  0825               	movf	((_current+1)^(0+128)+4),w
  8152  0560  0020               	movlb	0	; select bank0
  8153  0561  00C0               	movwf	LCDWriteInt@value+1
  8154  0562  0021               	movlb	1	; select bank1
  8155  0563  0824               	movf	(_current^(0+128)+4),w
  8156  0564  0020               	movlb	0	; select bank0
  8157  0565  00BF               	movwf	LCDWriteInt@value
  8158  0566  3003               	movlw	3
  8159  0567  00D9               	movwf	??_main
  8160  0568  0859               	movf	??_main,w
  8161  0569  00C1               	movwf	LCDWriteInt@fieldLength
  8162  056A  01C2               	clrf	LCDWriteInt@numPlaces
  8163  056B  0AC2               	incf	LCDWriteInt@numPlaces,f
  8164  056C  01C3               	clrf	LCDWriteInt@sign
  8165  056D  3188  200E  3180   	fcall	_LCDWriteInt
  8166                           
  8167                           ;main.c: 267: LCDWriteCharacter('A');
  8168  0570  3041               	movlw	65
  8169  0571  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8170                           
  8171                           ;main.c: 270: { gotoXY(26,2); LCDWriteInt(current[0],3, 1, 0);};
  8172  0574  3002               	movlw	2
  8173  0575  0020               	movlb	0	; select bank0
  8174  0576  00D9               	movwf	??_main
  8175  0577  0859               	movf	??_main,w
  8176  0578  00F5               	movwf	gotoXY@y
  8177  0579  301A               	movlw	26
  8178  057A  319E  261B  3180   	fcall	_gotoXY
  8179  057D  0021               	movlb	1	; select bank1
  8180  057E  0821               	movf	(_current+1)^(0+128),w
  8181  057F  0020               	movlb	0	; select bank0
  8182  0580  00C0               	movwf	LCDWriteInt@value+1
  8183  0581  0021               	movlb	1	; select bank1
  8184  0582  0820               	movf	_current^(0+128),w
  8185  0583  0020               	movlb	0	; select bank0
  8186  0584  00BF               	movwf	LCDWriteInt@value
  8187  0585  3003               	movlw	3
  8188  0586  00D9               	movwf	??_main
  8189  0587  0859               	movf	??_main,w
  8190  0588  00C1               	movwf	LCDWriteInt@fieldLength
  8191  0589  01C2               	clrf	LCDWriteInt@numPlaces
  8192  058A  0AC2               	incf	LCDWriteInt@numPlaces,f
  8193  058B  01C3               	clrf	LCDWriteInt@sign
  8194  058C  3188  200E  3180   	fcall	_LCDWriteInt
  8195                           
  8196                           ;main.c: 271: LCDWriteCharacter('A');
  8197  058F  3041               	movlw	65
  8198  0590  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8199                           
  8200                           ;main.c: 273: { gotoXY(52,2); LCDWriteInt(Iref[0],3, 1, 0);};
  8201  0593  3002               	movlw	2
  8202  0594  0020               	movlb	0	; select bank0
  8203  0595  00D9               	movwf	??_main
  8204  0596  0859               	movf	??_main,w
  8205  0597  00F5               	movwf	gotoXY@y
  8206  0598  3034               	movlw	52
  8207  0599  319E  261B  3180   	fcall	_gotoXY
  8208  059C  0021               	movlb	1	; select bank1
  8209  059D  0831               	movf	(_Iref+1)^(0+128),w
  8210  059E  0020               	movlb	0	; select bank0
  8211  059F  00C0               	movwf	LCDWriteInt@value+1
  8212  05A0  0021               	movlb	1	; select bank1
  8213  05A1  0830               	movf	_Iref^(0+128),w
  8214  05A2  0020               	movlb	0	; select bank0
  8215  05A3  00BF               	movwf	LCDWriteInt@value
  8216  05A4  3003               	movlw	3
  8217  05A5  00D9               	movwf	??_main
  8218  05A6  0859               	movf	??_main,w
  8219  05A7  00C1               	movwf	LCDWriteInt@fieldLength
  8220  05A8  01C2               	clrf	LCDWriteInt@numPlaces
  8221  05A9  0AC2               	incf	LCDWriteInt@numPlaces,f
  8222  05AA  01C3               	clrf	LCDWriteInt@sign
  8223  05AB  3188  200E  3180   	fcall	_LCDWriteInt
  8224                           
  8225                           ;main.c: 274: LCDWriteCharacter('A');
  8226  05AE  3041               	movlw	65
  8227  05AF  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8228                           
  8229                           ;main.c: 276: { gotoXY(80,2); LCDWriteInt(batteryState[0],1, 0, 0);};
  8230  05B2  3002               	movlw	2
  8231  05B3  0020               	movlb	0	; select bank0
  8232  05B4  00D9               	movwf	??_main
  8233  05B5  0859               	movf	??_main,w
  8234  05B6  00F5               	movwf	gotoXY@y
  8235  05B7  3050               	movlw	80
  8236  05B8  319E  261B  3180   	fcall	_gotoXY
  8237  05BB  0021               	movlb	1	; select bank1
  8238  05BC  0842               	movf	_batteryState^(0+128),w
  8239  05BD  0020               	movlb	0	; select bank0
  8240  05BE  00D9               	movwf	??_main
  8241  05BF  01DA               	clrf	??_main+1
  8242  05C0  0859               	movf	??_main,w
  8243  05C1  00BF               	movwf	LCDWriteInt@value
  8244  05C2  085A               	movf	??_main+1,w
  8245  05C3  00C0               	movwf	LCDWriteInt@value+1
  8246  05C4  01C1               	clrf	LCDWriteInt@fieldLength
  8247  05C5  0AC1               	incf	LCDWriteInt@fieldLength,f
  8248  05C6  01C2               	clrf	LCDWriteInt@numPlaces
  8249  05C7  01C3               	clrf	LCDWriteInt@sign
  8250  05C8  3188  200E  3180   	fcall	_LCDWriteInt
  8251                           
  8252                           ;main.c: 278: { gotoXY(0,3); LCDWriteInt(voltage[3],4, 2, 0);};
  8253  05CB  3003               	movlw	3
  8254  05CC  0020               	movlb	0	; select bank0
  8255  05CD  00D9               	movwf	??_main
  8256  05CE  0859               	movf	??_main,w
  8257  05CF  00F5               	movwf	gotoXY@y
  8258  05D0  3000               	movlw	0
  8259  05D1  319E  261B  3180   	fcall	_gotoXY
  8260  05D4  0021               	movlb	1	; select bank1
  8261  05D5  082F               	movf	((_voltage+1)^(0+128)+6),w
  8262  05D6  0020               	movlb	0	; select bank0
  8263  05D7  00C0               	movwf	LCDWriteInt@value+1
  8264  05D8  0021               	movlb	1	; select bank1
  8265  05D9  082E               	movf	(_voltage^(0+128)+6),w
  8266  05DA  0020               	movlb	0	; select bank0
  8267  05DB  00BF               	movwf	LCDWriteInt@value
  8268  05DC  3004               	movlw	4
  8269  05DD  00D9               	movwf	??_main
  8270  05DE  0859               	movf	??_main,w
  8271  05DF  00C1               	movwf	LCDWriteInt@fieldLength
  8272  05E0  3002               	movlw	2
  8273  05E1  00DA               	movwf	??_main+1
  8274  05E2  085A               	movf	??_main+1,w
  8275  05E3  00C2               	movwf	LCDWriteInt@numPlaces
  8276  05E4  01C3               	clrf	LCDWriteInt@sign
  8277  05E5  3188  200E  3180   	fcall	_LCDWriteInt
  8278                           
  8279                           ;main.c: 280: LCDWriteCharacter('V');
  8280  05E8  3056               	movlw	86
  8281  05E9  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8282                           
  8283                           ;main.c: 282: { gotoXY(26,3); LCDWriteInt(voltage[1],4, 2, 0);};
  8284  05EC  3003               	movlw	3
  8285  05ED  0020               	movlb	0	; select bank0
  8286  05EE  00D9               	movwf	??_main
  8287  05EF  0859               	movf	??_main,w
  8288  05F0  00F5               	movwf	gotoXY@y
  8289  05F1  301A               	movlw	26
  8290  05F2  319E  261B  3180   	fcall	_gotoXY
  8291  05F5  0021               	movlb	1	; select bank1
  8292  05F6  082B               	movf	((_voltage+1)^(0+128)+2),w
  8293  05F7  0020               	movlb	0	; select bank0
  8294  05F8  00C0               	movwf	LCDWriteInt@value+1
  8295  05F9  0021               	movlb	1	; select bank1
  8296  05FA  082A               	movf	(_voltage^(0+128)+2),w
  8297  05FB  0020               	movlb	0	; select bank0
  8298  05FC  00BF               	movwf	LCDWriteInt@value
  8299  05FD  3004               	movlw	4
  8300  05FE  00D9               	movwf	??_main
  8301  05FF  0859               	movf	??_main,w
  8302  0600  00C1               	movwf	LCDWriteInt@fieldLength
  8303  0601  3002               	movlw	2
  8304  0602  00DA               	movwf	??_main+1
  8305  0603  085A               	movf	??_main+1,w
  8306  0604  00C2               	movwf	LCDWriteInt@numPlaces
  8307  0605  01C3               	clrf	LCDWriteInt@sign
  8308  0606  3188  200E  3180   	fcall	_LCDWriteInt
  8309                           
  8310                           ;main.c: 284: LCDWriteCharacter('V');
  8311  0609  3056               	movlw	86
  8312  060A  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8313                           
  8314                           ;main.c: 286: { gotoXY(52,3); LCDWriteInt(Vref[1],4, 2, 0);};
  8315  060D  3003               	movlw	3
  8316  060E  0020               	movlb	0	; select bank0
  8317  060F  00D9               	movwf	??_main
  8318  0610  0859               	movf	??_main,w
  8319  0611  00F5               	movwf	gotoXY@y
  8320  0612  3034               	movlw	52
  8321  0613  319E  261B  3180   	fcall	_gotoXY
  8322  0616  0021               	movlb	1	; select bank1
  8323  0617  0837               	movf	((_Vref+1)^(0+128)+2),w
  8324  0618  0020               	movlb	0	; select bank0
  8325  0619  00C0               	movwf	LCDWriteInt@value+1
  8326  061A  0021               	movlb	1	; select bank1
  8327  061B  0836               	movf	(_Vref^(0+128)+2),w
  8328  061C  0020               	movlb	0	; select bank0
  8329  061D  00BF               	movwf	LCDWriteInt@value
  8330  061E  3004               	movlw	4
  8331  061F  00D9               	movwf	??_main
  8332  0620  0859               	movf	??_main,w
  8333  0621  00C1               	movwf	LCDWriteInt@fieldLength
  8334  0622  3002               	movlw	2
  8335  0623  00DA               	movwf	??_main+1
  8336  0624  085A               	movf	??_main+1,w
  8337  0625  00C2               	movwf	LCDWriteInt@numPlaces
  8338  0626  01C3               	clrf	LCDWriteInt@sign
  8339  0627  3188  200E  3180   	fcall	_LCDWriteInt
  8340                           
  8341                           ;main.c: 287: LCDWriteCharacter('V');
  8342  062A  3056               	movlw	86
  8343  062B  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8344                           
  8345                           ;main.c: 289: { gotoXY(80,3); LCDWriteInt(Imode[1],1, 0, 0);};
  8346  062E  3003               	movlw	3
  8347  062F  0020               	movlb	0	; select bank0
  8348  0630  00D9               	movwf	??_main
  8349  0631  0859               	movf	??_main,w
  8350  0632  00F5               	movwf	gotoXY@y
  8351  0633  3050               	movlw	80
  8352  0634  319E  261B  3180   	fcall	_gotoXY
  8353  0637  0021               	movlb	1	; select bank1
  8354  0638  083D               	movf	(_Imode^(0+128)+1),w
  8355  0639  0020               	movlb	0	; select bank0
  8356  063A  00BF               	movwf	LCDWriteInt@value
  8357  063B  01C0               	clrf	LCDWriteInt@value+1
  8358  063C  1BBF               	btfsc	LCDWriteInt@value,7
  8359  063D  03C0               	decf	LCDWriteInt@value+1,f
  8360  063E  01C1               	clrf	LCDWriteInt@fieldLength
  8361  063F  0AC1               	incf	LCDWriteInt@fieldLength,f
  8362  0640  01C2               	clrf	LCDWriteInt@numPlaces
  8363  0641  01C3               	clrf	LCDWriteInt@sign
  8364  0642  3188  200E  3180   	fcall	_LCDWriteInt
  8365                           
  8366                           ;main.c: 299: { gotoXY(0,4); LCDWriteInt(current[3],3, 1, 0);};
  8367  0645  3004               	movlw	4
  8368  0646  0020               	movlb	0	; select bank0
  8369  0647  00D9               	movwf	??_main
  8370  0648  0859               	movf	??_main,w
  8371  0649  00F5               	movwf	gotoXY@y
  8372  064A  3000               	movlw	0
  8373  064B  319E  261B  3180   	fcall	_gotoXY
  8374  064E  0021               	movlb	1	; select bank1
  8375  064F  0827               	movf	((_current+1)^(0+128)+6),w
  8376  0650  0020               	movlb	0	; select bank0
  8377  0651  00C0               	movwf	LCDWriteInt@value+1
  8378  0652  0021               	movlb	1	; select bank1
  8379  0653  0826               	movf	(_current^(0+128)+6),w
  8380  0654  0020               	movlb	0	; select bank0
  8381  0655  00BF               	movwf	LCDWriteInt@value
  8382  0656  3003               	movlw	3
  8383  0657  00D9               	movwf	??_main
  8384  0658  0859               	movf	??_main,w
  8385  0659  00C1               	movwf	LCDWriteInt@fieldLength
  8386  065A  01C2               	clrf	LCDWriteInt@numPlaces
  8387  065B  0AC2               	incf	LCDWriteInt@numPlaces,f
  8388  065C  01C3               	clrf	LCDWriteInt@sign
  8389  065D  3188  200E  3180   	fcall	_LCDWriteInt
  8390                           
  8391                           ;main.c: 300: LCDWriteCharacter('A');
  8392  0660  3041               	movlw	65
  8393  0661  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8394                           
  8395                           ;main.c: 302: { gotoXY(26,4); LCDWriteInt((int16_t)(current[3]*(voltage[3]/voltage[1]*.9
      +                          )),3, 1, 0);};
  8396  0664  3004               	movlw	4
  8397  0665  0020               	movlb	0	; select bank0
  8398  0666  00D9               	movwf	??_main
  8399  0667  0859               	movf	??_main,w
  8400  0668  00F5               	movwf	gotoXY@y
  8401  0669  301A               	movlw	26
  8402  066A  319E  261B  3180   	fcall	_gotoXY
  8403  066D  0021               	movlb	1	; select bank1
  8404  066E  082F               	movf	((_voltage+1)^(0+128)+6),w
  8405  066F  00F3               	movwf	___awdiv@dividend+1
  8406  0670  082E               	movf	(_voltage^(0+128)+6),w
  8407  0671  00F2               	movwf	___awdiv@dividend
  8408  0672  082B               	movf	((_voltage+1)^(0+128)+2),w
  8409  0673  00F1               	movwf	___awdiv@divisor+1
  8410  0674  082A               	movf	(_voltage^(0+128)+2),w
  8411  0675  00F0               	movwf	___awdiv@divisor
  8412  0676  3192  2296  3180   	fcall	___awdiv
  8413  0679  0871               	movf	?___awdiv+1,w
  8414  067A  00FA               	movwf	___awtoft@c+1
  8415  067B  0870               	movf	?___awdiv,w
  8416  067C  00F9               	movwf	___awtoft@c
  8417  067D  319F  2710  3180   	fcall	___awtoft
  8418  0680  0879               	movf	?___awtoft,w
  8419  0681  0020               	movlb	0	; select bank0
  8420  0682  00A4               	movwf	___ftmul@f2
  8421  0683  087A               	movf	?___awtoft+1,w
  8422  0684  00A5               	movwf	___ftmul@f2+1
  8423  0685  087B               	movf	?___awtoft+2,w
  8424  0686  00A6               	movwf	___ftmul@f2+2
  8425  0687  3066               	movlw	102
  8426  0688  00A1               	movwf	___ftmul@f1
  8427  0689  3066               	movlw	102
  8428  068A  00A2               	movwf	___ftmul@f1+1
  8429  068B  303F               	movlw	63
  8430  068C  00A3               	movwf	___ftmul@f1+2
  8431  068D  3197  274C  3180   	fcall	___ftmul
  8432  0690  0020               	movlb	0	; select bank0
  8433  0691  0821               	movf	?___ftmul,w
  8434  0692  0021               	movlb	1	; select bank1
  8435  0693  00E5               	movwf	_main$1304^(0+128)
  8436  0694  0020               	movlb	0	; select bank0
  8437  0695  0822               	movf	?___ftmul+1,w
  8438  0696  0021               	movlb	1	; select bank1
  8439  0697  00E6               	movwf	(_main$1304+1)^(0+128)
  8440  0698  0020               	movlb	0	; select bank0
  8441  0699  0823               	movf	?___ftmul+2,w
  8442  069A  0021               	movlb	1	; select bank1
  8443  069B  00E7               	movwf	(_main$1304+2)^(0+128)
  8444  069C  0827               	movf	((_current+1)^(0+128)+6),w
  8445  069D  00FA               	movwf	___awtoft@c+1
  8446  069E  0826               	movf	(_current^(0+128)+6),w
  8447  069F  00F9               	movwf	___awtoft@c
  8448  06A0  319F  2710  3180   	fcall	___awtoft
  8449  06A3  0879               	movf	?___awtoft,w
  8450  06A4  0020               	movlb	0	; select bank0
  8451  06A5  00A4               	movwf	___ftmul@f2
  8452  06A6  087A               	movf	?___awtoft+1,w
  8453  06A7  00A5               	movwf	___ftmul@f2+1
  8454  06A8  087B               	movf	?___awtoft+2,w
  8455  06A9  00A6               	movwf	___ftmul@f2+2
  8456  06AA  0021               	movlb	1	; select bank1
  8457  06AB  0865               	movf	_main$1304^(0+128),w
  8458  06AC  0020               	movlb	0	; select bank0
  8459  06AD  00A1               	movwf	___ftmul@f1
  8460  06AE  0021               	movlb	1	; select bank1
  8461  06AF  0866               	movf	(_main$1304+1)^(0+128),w
  8462  06B0  0020               	movlb	0	; select bank0
  8463  06B1  00A2               	movwf	___ftmul@f1+1
  8464  06B2  0021               	movlb	1	; select bank1
  8465  06B3  0867               	movf	(_main$1304+2)^(0+128),w
  8466  06B4  0020               	movlb	0	; select bank0
  8467  06B5  00A3               	movwf	___ftmul@f1+2
  8468  06B6  3197  274C  3180   	fcall	___ftmul
  8469  06B9  0020               	movlb	0	; select bank0
  8470  06BA  0821               	movf	?___ftmul,w
  8471  06BB  00B1               	movwf	___fttol@f1
  8472  06BC  0822               	movf	?___ftmul+1,w
  8473  06BD  00B2               	movwf	___fttol@f1+1
  8474  06BE  0823               	movf	?___ftmul+2,w
  8475  06BF  00B3               	movwf	___fttol@f1+2
  8476  06C0  3195  256C  3180   	fcall	___fttol
  8477  06C3  0020               	movlb	0	; select bank0
  8478  06C4  0832               	movf	?___fttol+1,w
  8479  06C5  00C0               	movwf	LCDWriteInt@value+1
  8480  06C6  0831               	movf	?___fttol,w
  8481  06C7  00BF               	movwf	LCDWriteInt@value
  8482  06C8  3003               	movlw	3
  8483  06C9  00D9               	movwf	??_main
  8484  06CA  0859               	movf	??_main,w
  8485  06CB  00C1               	movwf	LCDWriteInt@fieldLength
  8486  06CC  01C2               	clrf	LCDWriteInt@numPlaces
  8487  06CD  0AC2               	incf	LCDWriteInt@numPlaces,f
  8488  06CE  01C3               	clrf	LCDWriteInt@sign
  8489  06CF  3188  200E  3180   	fcall	_LCDWriteInt
  8490                           
  8491                           ;main.c: 304: LCDWriteCharacter('A');
  8492  06D2  3041               	movlw	65
  8493  06D3  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8494                           
  8495                           ;main.c: 306: { gotoXY(52,4); LCDWriteInt(Iref[1],3, 1, 0);};
  8496  06D6  3004               	movlw	4
  8497  06D7  0020               	movlb	0	; select bank0
  8498  06D8  00D9               	movwf	??_main
  8499  06D9  0859               	movf	??_main,w
  8500  06DA  00F5               	movwf	gotoXY@y
  8501  06DB  3034               	movlw	52
  8502  06DC  319E  261B  3180   	fcall	_gotoXY
  8503  06DF  0021               	movlb	1	; select bank1
  8504  06E0  0833               	movf	((_Iref+1)^(0+128)+2),w
  8505  06E1  0020               	movlb	0	; select bank0
  8506  06E2  00C0               	movwf	LCDWriteInt@value+1
  8507  06E3  0021               	movlb	1	; select bank1
  8508  06E4  0832               	movf	(_Iref^(0+128)+2),w
  8509  06E5  0020               	movlb	0	; select bank0
  8510  06E6  00BF               	movwf	LCDWriteInt@value
  8511  06E7  3003               	movlw	3
  8512  06E8  00D9               	movwf	??_main
  8513  06E9  0859               	movf	??_main,w
  8514  06EA  00C1               	movwf	LCDWriteInt@fieldLength
  8515  06EB  01C2               	clrf	LCDWriteInt@numPlaces
  8516  06EC  0AC2               	incf	LCDWriteInt@numPlaces,f
  8517  06ED  01C3               	clrf	LCDWriteInt@sign
  8518  06EE  3188  200E  3180   	fcall	_LCDWriteInt
  8519                           
  8520                           ;main.c: 307: LCDWriteCharacter('A');
  8521  06F1  3041               	movlw	65
  8522  06F2  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8523                           
  8524                           ;main.c: 309: { gotoXY(80,4); LCDWriteInt(batteryState[1],1, 0, 0);};
  8525  06F5  3004               	movlw	4
  8526  06F6  0020               	movlb	0	; select bank0
  8527  06F7  00D9               	movwf	??_main
  8528  06F8  0859               	movf	??_main,w
  8529  06F9  00F5               	movwf	gotoXY@y
  8530  06FA  3050               	movlw	80
  8531  06FB  319E  261B  3180   	fcall	_gotoXY
  8532  06FE  0021               	movlb	1	; select bank1
  8533  06FF  0843               	movf	(_batteryState^(0+128)+1),w
  8534  0700  0020               	movlb	0	; select bank0
  8535  0701  00D9               	movwf	??_main
  8536  0702  01DA               	clrf	??_main+1
  8537  0703  0859               	movf	??_main,w
  8538  0704  00BF               	movwf	LCDWriteInt@value
  8539  0705  085A               	movf	??_main+1,w
  8540  0706  00C0               	movwf	LCDWriteInt@value+1
  8541  0707  01C1               	clrf	LCDWriteInt@fieldLength
  8542  0708  0AC1               	incf	LCDWriteInt@fieldLength,f
  8543  0709  01C2               	clrf	LCDWriteInt@numPlaces
  8544  070A  01C3               	clrf	LCDWriteInt@sign
  8545  070B  3188  200E  3180   	fcall	_LCDWriteInt
  8546                           
  8547                           ;main.c: 313: { gotoXY(0,5); LCDWriteInt(dutyCycle6,4, 0, 0);};
  8548  070E  3005               	movlw	5
  8549  070F  0020               	movlb	0	; select bank0
  8550  0710  00D9               	movwf	??_main
  8551  0711  0859               	movf	??_main,w
  8552  0712  00F5               	movwf	gotoXY@y
  8553  0713  3000               	movlw	0
  8554  0714  319E  261B  3180   	fcall	_gotoXY
  8555  0717  0021               	movlb	1	; select bank1
  8556  0718  0869               	movf	(main@dutyCycle6+1)^(0+128),w
  8557  0719  0020               	movlb	0	; select bank0
  8558  071A  00C0               	movwf	LCDWriteInt@value+1
  8559  071B  0021               	movlb	1	; select bank1
  8560  071C  0868               	movf	main@dutyCycle6^(0+128),w
  8561  071D  0020               	movlb	0	; select bank0
  8562  071E  00BF               	movwf	LCDWriteInt@value
  8563  071F  3004               	movlw	4
  8564  0720  00D9               	movwf	??_main
  8565  0721  0859               	movf	??_main,w
  8566  0722  00C1               	movwf	LCDWriteInt@fieldLength
  8567  0723  01C2               	clrf	LCDWriteInt@numPlaces
  8568  0724  01C3               	clrf	LCDWriteInt@sign
  8569  0725  3188  200E  3180   	fcall	_LCDWriteInt
  8570                           
  8571                           ;main.c: 314: { gotoXY(18,5); LCDWriteInt(VHoldMode[0],1, 0, 0);};
  8572  0728  3005               	movlw	5
  8573  0729  0020               	movlb	0	; select bank0
  8574  072A  00D9               	movwf	??_main
  8575  072B  0859               	movf	??_main,w
  8576  072C  00F5               	movwf	gotoXY@y
  8577  072D  3012               	movlw	18
  8578  072E  319E  261B  3180   	fcall	_gotoXY
  8579  0731  0021               	movlb	1	; select bank1
  8580  0732  0840               	movf	_VHoldMode^(0+128),w
  8581  0733  0020               	movlb	0	; select bank0
  8582  0734  00BF               	movwf	LCDWriteInt@value
  8583  0735  01C0               	clrf	LCDWriteInt@value+1
  8584  0736  1BBF               	btfsc	LCDWriteInt@value,7
  8585  0737  03C0               	decf	LCDWriteInt@value+1,f
  8586  0738  01C1               	clrf	LCDWriteInt@fieldLength
  8587  0739  0AC1               	incf	LCDWriteInt@fieldLength,f
  8588  073A  01C2               	clrf	LCDWriteInt@numPlaces
  8589  073B  01C3               	clrf	LCDWriteInt@sign
  8590  073C  3188  200E  3180   	fcall	_LCDWriteInt
  8591                           
  8592                           ;main.c: 315: LCDWriteCharacter(' ');
  8593  073F  3020               	movlw	32
  8594  0740  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8595                           
  8596                           ;main.c: 316: { gotoXY(28,5); LCDWriteInt(dutyCycle7,4, 0, 0);};
  8597  0743  3005               	movlw	5
  8598  0744  0020               	movlb	0	; select bank0
  8599  0745  00D9               	movwf	??_main
  8600  0746  0859               	movf	??_main,w
  8601  0747  00F5               	movwf	gotoXY@y
  8602  0748  301C               	movlw	28
  8603  0749  319E  261B  3180   	fcall	_gotoXY
  8604  074C  0021               	movlb	1	; select bank1
  8605  074D  086B               	movf	(main@dutyCycle7+1)^(0+128),w
  8606  074E  0020               	movlb	0	; select bank0
  8607  074F  00C0               	movwf	LCDWriteInt@value+1
  8608  0750  0021               	movlb	1	; select bank1
  8609  0751  086A               	movf	main@dutyCycle7^(0+128),w
  8610  0752  0020               	movlb	0	; select bank0
  8611  0753  00BF               	movwf	LCDWriteInt@value
  8612  0754  3004               	movlw	4
  8613  0755  00D9               	movwf	??_main
  8614  0756  0859               	movf	??_main,w
  8615  0757  00C1               	movwf	LCDWriteInt@fieldLength
  8616  0758  01C2               	clrf	LCDWriteInt@numPlaces
  8617  0759  01C3               	clrf	LCDWriteInt@sign
  8618  075A  3188  200E  3180   	fcall	_LCDWriteInt
  8619                           
  8620                           ;main.c: 317: { gotoXY(46,5); LCDWriteInt(VHoldMode[1],1, 0, 0);};
  8621  075D  3005               	movlw	5
  8622  075E  0020               	movlb	0	; select bank0
  8623  075F  00D9               	movwf	??_main
  8624  0760  0859               	movf	??_main,w
  8625  0761  00F5               	movwf	gotoXY@y
  8626  0762  302E               	movlw	46
  8627  0763  319E  261B  3180   	fcall	_gotoXY
  8628  0766  0021               	movlb	1	; select bank1
  8629  0767  0841               	movf	(_VHoldMode^(0+128)+1),w
  8630  0768  0020               	movlb	0	; select bank0
  8631  0769  00BF               	movwf	LCDWriteInt@value
  8632  076A  01C0               	clrf	LCDWriteInt@value+1
  8633  076B  1BBF               	btfsc	LCDWriteInt@value,7
  8634  076C  03C0               	decf	LCDWriteInt@value+1,f
  8635  076D  01C1               	clrf	LCDWriteInt@fieldLength
  8636  076E  0AC1               	incf	LCDWriteInt@fieldLength,f
  8637  076F  01C2               	clrf	LCDWriteInt@numPlaces
  8638  0770  01C3               	clrf	LCDWriteInt@sign
  8639  0771  3188  200E  3180   	fcall	_LCDWriteInt
  8640                           
  8641                           ;main.c: 318: LCDWriteCharacter(' ');
  8642  0774  3020               	movlw	32
  8643  0775  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8644                           
  8645                           ;main.c: 319: { gotoXY(56,5); LCDWriteInt(batteryTemp,3, 1, 0);};
  8646  0778  3005               	movlw	5
  8647  0779  0020               	movlb	0	; select bank0
  8648  077A  00D9               	movwf	??_main
  8649  077B  0859               	movf	??_main,w
  8650  077C  00F5               	movwf	gotoXY@y
  8651  077D  3038               	movlw	56
  8652  077E  319E  261B  3180   	fcall	_gotoXY
  8653  0781  0021               	movlb	1	; select bank1
  8654  0782  086E               	movf	(_batteryTemp+1)^(0+128),w
  8655  0783  0020               	movlb	0	; select bank0
  8656  0784  00C0               	movwf	LCDWriteInt@value+1
  8657  0785  0021               	movlb	1	; select bank1
  8658  0786  086D               	movf	_batteryTemp^(0+128),w
  8659  0787  0020               	movlb	0	; select bank0
  8660  0788  00BF               	movwf	LCDWriteInt@value
  8661  0789  3003               	movlw	3
  8662  078A  00D9               	movwf	??_main
  8663  078B  0859               	movf	??_main,w
  8664  078C  00C1               	movwf	LCDWriteInt@fieldLength
  8665  078D  01C2               	clrf	LCDWriteInt@numPlaces
  8666  078E  0AC2               	incf	LCDWriteInt@numPlaces,f
  8667  078F  01C3               	clrf	LCDWriteInt@sign
  8668  0790  3188  200E  3180   	fcall	_LCDWriteInt
  8669                           
  8670                           ;main.c: 320: LCDWriteCharacter(123);
  8671  0793  307B               	movlw	123
  8672  0794  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8673                           
  8674                           ;main.c: 321: LCDWriteCharacter('C');
  8675  0797  3043               	movlw	67
  8676  0798  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8677                           
  8678                           ;main.c: 391: if(batteryState[0] > FINISHED)
  8679  079B  3003               	movlw	3
  8680  079C  0021               	movlb	1	; select bank1
  8681  079D  0242               	subwf	_batteryState^(0+128),w
  8682  079E  1C03               	skipc
  8683  079F  2FA4               	goto	l3676
  8684                           
  8685                           ;main.c: 392: {
  8686                           ;main.c: 393: cc_cv_mode(0);
  8687  07A0  3000               	movlw	0
  8688  07A1  318C  24FC  3180   	fcall	_cc_cv_mode
  8689  07A4                     l3676:	
  8690                           
  8691                           ;main.c: 394: }
  8692                           ;main.c: 395: if(batteryState[1] > FINISHED)
  8693  07A4  3003               	movlw	3
  8694  07A5  0021               	movlb	1	; select bank1
  8695  07A6  0243               	subwf	(_batteryState^(0+128)+1),w
  8696  07A7  1C03               	skipc
  8697  07A8  2FAD               	goto	l3680
  8698                           
  8699                           ;main.c: 396: {
  8700                           ;main.c: 397: cc_cv_mode(1);
  8701  07A9  3001               	movlw	1
  8702  07AA  318C  24FC  3180   	fcall	_cc_cv_mode
  8703  07AD                     l3680:	
  8704                           
  8705                           ;main.c: 398: }
  8706                           ;main.c: 399: slowLoop=0;
  8707  07AD  0021               	movlb	1	; select bank1
  8708  07AE  01D9               	clrf	main@slowLoop^(0+128)
  8709  07AF  2876               	goto	l3352
  8710  07B0                     __end_of_main:	
  8711                           
  8712                           	psect	text1
  8713  08C7                     __ptext1:	
  8714 ;; *************** function _tempCalc *****************
  8715 ;; Defined at:
  8716 ;;		line 4 in file "tempCalc.c"
  8717 ;; Parameters:    Size  Location     Type
  8718 ;;  analogValue     2   46[BANK0 ] int 
  8719 ;; Auto vars:     Size  Location     Type
  8720 ;;  steinhart       3   54[BANK0 ] float 
  8721 ;;  R               3   48[BANK0 ] float 
  8722 ;; Return value:  Size  Location     Type
  8723 ;;                  2   46[BANK0 ] int 
  8724 ;; Registers used:
  8725 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8726 ;; Tracked objects:
  8727 ;;		On entry : 0/0
  8728 ;;		On exit  : 0/0
  8729 ;;		Unchanged: 0/0
  8730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8731 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8732 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8734 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8735 ;;Total ram usage:       11 bytes
  8736 ;; Hardware stack levels used:    1
  8737 ;; Hardware stack levels required when called:    4
  8738 ;; This function calls:
  8739 ;;		___awtoft
  8740 ;;		___ftadd
  8741 ;;		___ftdiv
  8742 ;;		___ftmul
  8743 ;;		___ftsub
  8744 ;;		___fttol
  8745 ;;		_log
  8746 ;; This function is called by:
  8747 ;;		_main
  8748 ;; This function uses a non-reentrant model
  8749 ;;
  8750                           
  8751                           
  8752                           ;psect for function _tempCalc
  8753  08C7                     _tempCalc:	
  8754                           
  8755                           ;tempCalc.c: 6: float R, steinhart;
  8756                           ;tempCalc.c: 7: R=10030/(1023/(float)analogValue-1);
  8757                           
  8758                           ;incstack = 0
  8759                           ; Regs used in _tempCalc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8760  08C7  3000               	movlw	0
  8761  08C8  0020               	movlb	0	; select bank0
  8762  08C9  00B1               	movwf	___ftadd@f1
  8763  08CA  3080               	movlw	128
  8764  08CB  00B2               	movwf	___ftadd@f1+1
  8765  08CC  30BF               	movlw	191
  8766  08CD  00B3               	movwf	___ftadd@f1+2
  8767  08CE  084F               	movf	tempCalc@analogValue+1,w
  8768  08CF  00FA               	movwf	___awtoft@c+1
  8769  08D0  084E               	movf	tempCalc@analogValue,w
  8770  08D1  00F9               	movwf	___awtoft@c
  8771  08D2  319F  2710  3188   	fcall	___awtoft
  8772  08D5  0879               	movf	?___awtoft,w
  8773  08D6  0020               	movlb	0	; select bank0
  8774  08D7  00A1               	movwf	___ftdiv@f2
  8775  08D8  087A               	movf	?___awtoft+1,w
  8776  08D9  00A2               	movwf	___ftdiv@f2+1
  8777  08DA  087B               	movf	?___awtoft+2,w
  8778  08DB  00A3               	movwf	___ftdiv@f2+2
  8779  08DC  30C0               	movlw	192
  8780  08DD  00A4               	movwf	___ftdiv@f1
  8781  08DE  307F               	movlw	127
  8782  08DF  00A5               	movwf	___ftdiv@f1+1
  8783  08E0  3044               	movlw	68
  8784  08E1  00A6               	movwf	___ftdiv@f1+2
  8785  08E2  3195  25F3  3188   	fcall	___ftdiv
  8786  08E5  0020               	movlb	0	; select bank0
  8787  08E6  0821               	movf	?___ftdiv,w
  8788  08E7  00B4               	movwf	___ftadd@f2
  8789  08E8  0822               	movf	?___ftdiv+1,w
  8790  08E9  00B5               	movwf	___ftadd@f2+1
  8791  08EA  0823               	movf	?___ftdiv+2,w
  8792  08EB  00B6               	movwf	___ftadd@f2+2
  8793  08EC  3189  21AE  3188   	fcall	___ftadd
  8794  08EF  0020               	movlb	0	; select bank0
  8795  08F0  0831               	movf	?___ftadd,w
  8796  08F1  00D3               	movwf	_tempCalc$1305
  8797  08F2  0832               	movf	?___ftadd+1,w
  8798  08F3  00D4               	movwf	_tempCalc$1305+1
  8799  08F4  0833               	movf	?___ftadd+2,w
  8800  08F5  00D5               	movwf	_tempCalc$1305+2
  8801                           
  8802                           ;tempCalc.c: 6: float R, steinhart;
  8803                           ;tempCalc.c: 7: R=10030/(1023/(float)analogValue-1);
  8804  08F6  0853               	movf	_tempCalc$1305,w
  8805  08F7  00A1               	movwf	___ftdiv@f2
  8806  08F8  0854               	movf	_tempCalc$1305+1,w
  8807  08F9  00A2               	movwf	___ftdiv@f2+1
  8808  08FA  0855               	movf	_tempCalc$1305+2,w
  8809  08FB  00A3               	movwf	___ftdiv@f2+2
  8810  08FC  30B8               	movlw	184
  8811  08FD  00A4               	movwf	___ftdiv@f1
  8812  08FE  301C               	movlw	28
  8813  08FF  00A5               	movwf	___ftdiv@f1+1
  8814  0900  3046               	movlw	70
  8815  0901  00A6               	movwf	___ftdiv@f1+2
  8816  0902  3195  25F3  3188   	fcall	___ftdiv
  8817  0905  0020               	movlb	0	; select bank0
  8818  0906  0821               	movf	?___ftdiv,w
  8819  0907  00D0               	movwf	tempCalc@R
  8820  0908  0822               	movf	?___ftdiv+1,w
  8821  0909  00D1               	movwf	tempCalc@R+1
  8822  090A  0823               	movf	?___ftdiv+2,w
  8823  090B  00D2               	movwf	tempCalc@R+2
  8824                           
  8825                           ;tempCalc.c: 8: steinhart=R/10010;
  8826  090C  3068               	movlw	104
  8827  090D  00A1               	movwf	___ftdiv@f2
  8828  090E  301C               	movlw	28
  8829  090F  00A2               	movwf	___ftdiv@f2+1
  8830  0910  3046               	movlw	70
  8831  0911  00A3               	movwf	___ftdiv@f2+2
  8832  0912  0850               	movf	tempCalc@R,w
  8833  0913  00A4               	movwf	___ftdiv@f1
  8834  0914  0851               	movf	tempCalc@R+1,w
  8835  0915  00A5               	movwf	___ftdiv@f1+1
  8836  0916  0852               	movf	tempCalc@R+2,w
  8837  0917  00A6               	movwf	___ftdiv@f1+2
  8838  0918  3195  25F3  3188   	fcall	___ftdiv
  8839  091B  0020               	movlb	0	; select bank0
  8840  091C  0821               	movf	?___ftdiv,w
  8841  091D  00D6               	movwf	tempCalc@steinhart
  8842  091E  0822               	movf	?___ftdiv+1,w
  8843  091F  00D7               	movwf	tempCalc@steinhart+1
  8844  0920  0823               	movf	?___ftdiv+2,w
  8845  0921  00D8               	movwf	tempCalc@steinhart+2
  8846                           
  8847                           ;tempCalc.c: 9: steinhart=log(steinhart);
  8848  0922  0856               	movf	tempCalc@steinhart,w
  8849  0923  00C8               	movwf	log@x
  8850  0924  0857               	movf	tempCalc@steinhart+1,w
  8851  0925  00C9               	movwf	log@x+1
  8852  0926  0858               	movf	tempCalc@steinhart+2,w
  8853  0927  00CA               	movwf	log@x+2
  8854  0928  3196  269C  3188   	fcall	_log
  8855  092B  0020               	movlb	0	; select bank0
  8856  092C  0848               	movf	?_log,w
  8857  092D  00D6               	movwf	tempCalc@steinhart
  8858  092E  0849               	movf	?_log+1,w
  8859  092F  00D7               	movwf	tempCalc@steinhart+1
  8860  0930  084A               	movf	?_log+2,w
  8861  0931  00D8               	movwf	tempCalc@steinhart+2
  8862                           
  8863                           ;tempCalc.c: 10: steinhart/=3795.3;
  8864  0932  3035               	movlw	53
  8865  0933  00A1               	movwf	___ftdiv@f2
  8866  0934  306D               	movlw	109
  8867  0935  00A2               	movwf	___ftdiv@f2+1
  8868  0936  3045               	movlw	69
  8869  0937  00A3               	movwf	___ftdiv@f2+2
  8870  0938  0856               	movf	tempCalc@steinhart,w
  8871  0939  00A4               	movwf	___ftdiv@f1
  8872  093A  0857               	movf	tempCalc@steinhart+1,w
  8873  093B  00A5               	movwf	___ftdiv@f1+1
  8874  093C  0858               	movf	tempCalc@steinhart+2,w
  8875  093D  00A6               	movwf	___ftdiv@f1+2
  8876  093E  3195  25F3  3188   	fcall	___ftdiv
  8877  0941  0020               	movlb	0	; select bank0
  8878  0942  0821               	movf	?___ftdiv,w
  8879  0943  00D6               	movwf	tempCalc@steinhart
  8880  0944  0822               	movf	?___ftdiv+1,w
  8881  0945  00D7               	movwf	tempCalc@steinhart+1
  8882  0946  0823               	movf	?___ftdiv+2,w
  8883  0947  00D8               	movwf	tempCalc@steinhart+2
  8884                           
  8885                           ;tempCalc.c: 11: steinhart+=1.0/(25+273.15);
  8886  0948  30CF               	movlw	207
  8887  0949  00B1               	movwf	___ftadd@f1
  8888  094A  305B               	movlw	91
  8889  094B  00B2               	movwf	___ftadd@f1+1
  8890  094C  303B               	movlw	59
  8891  094D  00B3               	movwf	___ftadd@f1+2
  8892  094E  0856               	movf	tempCalc@steinhart,w
  8893  094F  00B4               	movwf	___ftadd@f2
  8894  0950  0857               	movf	tempCalc@steinhart+1,w
  8895  0951  00B5               	movwf	___ftadd@f2+1
  8896  0952  0858               	movf	tempCalc@steinhart+2,w
  8897  0953  00B6               	movwf	___ftadd@f2+2
  8898  0954  3189  21AE  3188   	fcall	___ftadd
  8899  0957  0020               	movlb	0	; select bank0
  8900  0958  0831               	movf	?___ftadd,w
  8901  0959  00D6               	movwf	tempCalc@steinhart
  8902  095A  0832               	movf	?___ftadd+1,w
  8903  095B  00D7               	movwf	tempCalc@steinhart+1
  8904  095C  0833               	movf	?___ftadd+2,w
  8905  095D  00D8               	movwf	tempCalc@steinhart+2
  8906                           
  8907                           ;tempCalc.c: 12: steinhart=1.0/steinhart;
  8908  095E  0856               	movf	tempCalc@steinhart,w
  8909  095F  00A1               	movwf	___ftdiv@f2
  8910  0960  0857               	movf	tempCalc@steinhart+1,w
  8911  0961  00A2               	movwf	___ftdiv@f2+1
  8912  0962  0858               	movf	tempCalc@steinhart+2,w
  8913  0963  00A3               	movwf	___ftdiv@f2+2
  8914  0964  3000               	movlw	0
  8915  0965  00A4               	movwf	___ftdiv@f1
  8916  0966  3080               	movlw	128
  8917  0967  00A5               	movwf	___ftdiv@f1+1
  8918  0968  303F               	movlw	63
  8919  0969  00A6               	movwf	___ftdiv@f1+2
  8920  096A  3195  25F3  3188   	fcall	___ftdiv
  8921  096D  0020               	movlb	0	; select bank0
  8922  096E  0821               	movf	?___ftdiv,w
  8923  096F  00D6               	movwf	tempCalc@steinhart
  8924  0970  0822               	movf	?___ftdiv+1,w
  8925  0971  00D7               	movwf	tempCalc@steinhart+1
  8926  0972  0823               	movf	?___ftdiv+2,w
  8927  0973  00D8               	movwf	tempCalc@steinhart+2
  8928                           
  8929                           ;tempCalc.c: 13: steinhart-=273;
  8930  0974  3080               	movlw	128
  8931  0975  00BE               	movwf	___ftsub@f2
  8932  0976  3088               	movlw	136
  8933  0977  00BF               	movwf	___ftsub@f2+1
  8934  0978  3043               	movlw	67
  8935  0979  00C0               	movwf	___ftsub@f2+2
  8936  097A  0856               	movf	tempCalc@steinhart,w
  8937  097B  00C1               	movwf	___ftsub@f1
  8938  097C  0857               	movf	tempCalc@steinhart+1,w
  8939  097D  00C2               	movwf	___ftsub@f1+1
  8940  097E  0858               	movf	tempCalc@steinhart+2,w
  8941  097F  00C3               	movwf	___ftsub@f1+2
  8942  0980  319E  26B4  3188   	fcall	___ftsub
  8943  0983  0020               	movlb	0	; select bank0
  8944  0984  083E               	movf	?___ftsub,w
  8945  0985  00D6               	movwf	tempCalc@steinhart
  8946  0986  083F               	movf	?___ftsub+1,w
  8947  0987  00D7               	movwf	tempCalc@steinhart+1
  8948  0988  0840               	movf	?___ftsub+2,w
  8949  0989  00D8               	movwf	tempCalc@steinhart+2
  8950                           
  8951                           ;tempCalc.c: 15: steinhart*=10;
  8952  098A  3000               	movlw	0
  8953  098B  00A1               	movwf	___ftmul@f1
  8954  098C  3020               	movlw	32
  8955  098D  00A2               	movwf	___ftmul@f1+1
  8956  098E  3041               	movlw	65
  8957  098F  00A3               	movwf	___ftmul@f1+2
  8958  0990  0856               	movf	tempCalc@steinhart,w
  8959  0991  00A4               	movwf	___ftmul@f2
  8960  0992  0857               	movf	tempCalc@steinhart+1,w
  8961  0993  00A5               	movwf	___ftmul@f2+1
  8962  0994  0858               	movf	tempCalc@steinhart+2,w
  8963  0995  00A6               	movwf	___ftmul@f2+2
  8964  0996  3197  274C  3188   	fcall	___ftmul
  8965  0999  0020               	movlb	0	; select bank0
  8966  099A  0821               	movf	?___ftmul,w
  8967  099B  00D6               	movwf	tempCalc@steinhart
  8968  099C  0822               	movf	?___ftmul+1,w
  8969  099D  00D7               	movwf	tempCalc@steinhart+1
  8970  099E  0823               	movf	?___ftmul+2,w
  8971  099F  00D8               	movwf	tempCalc@steinhart+2
  8972                           
  8973                           ;tempCalc.c: 18: return (int16_t)steinhart;
  8974  09A0  0856               	movf	tempCalc@steinhart,w
  8975  09A1  00B1               	movwf	___fttol@f1
  8976  09A2  0857               	movf	tempCalc@steinhart+1,w
  8977  09A3  00B2               	movwf	___fttol@f1+1
  8978  09A4  0858               	movf	tempCalc@steinhart+2,w
  8979  09A5  00B3               	movwf	___fttol@f1+2
  8980  09A6  3195  256C         	fcall	___fttol
  8981  09A8  0020               	movlb	0	; select bank0
  8982  09A9  0832               	movf	?___fttol+1,w
  8983  09AA  00CF               	movwf	?_tempCalc+1
  8984  09AB  0831               	movf	?___fttol,w
  8985  09AC  00CE               	movwf	?_tempCalc
  8986  09AD  0008               	return
  8987  09AE                     __end_of_tempCalc:	
  8988                           
  8989                           	psect	text2
  8990  169C                     __ptext2:	
  8991 ;; *************** function _log *****************
  8992 ;; Defined at:
  8993 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\log.c"
  8994 ;; Parameters:    Size  Location     Type
  8995 ;;  x               3   40[BANK0 ] int 
  8996 ;; Auto vars:     Size  Location     Type
  8997 ;;  exponent        2   44[BANK0 ] int 
  8998 ;; Return value:  Size  Location     Type
  8999 ;;                  3   40[BANK0 ] int 
  9000 ;; Registers used:
  9001 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9002 ;; Tracked objects:
  9003 ;;		On entry : 0/0
  9004 ;;		On exit  : 0/0
  9005 ;;		Unchanged: 0/0
  9006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9007 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9008 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9009 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9010 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9011 ;;Total ram usage:        6 bytes
  9012 ;; Hardware stack levels used:    1
  9013 ;; Hardware stack levels required when called:    3
  9014 ;; This function calls:
  9015 ;;		___awtoft
  9016 ;;		___ftadd
  9017 ;;		___ftge
  9018 ;;		___ftmul
  9019 ;;		_eval_poly
  9020 ;;		_frexp
  9021 ;; This function is called by:
  9022 ;;		_tempCalc
  9023 ;; This function uses a non-reentrant model
  9024 ;;
  9025                           
  9026                           
  9027                           ;psect for function _log
  9028  169C                     _log:	
  9029                           
  9030                           ;incstack = 0
  9031                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9032  169C  0020               	movlb	0	; select bank0
  9033  169D  0848               	movf	log@x,w
  9034  169E  00B1               	movwf	___ftge@ff1
  9035  169F  0849               	movf	log@x+1,w
  9036  16A0  00B2               	movwf	___ftge@ff1+1
  9037  16A1  084A               	movf	log@x+2,w
  9038  16A2  00B3               	movwf	___ftge@ff1+2
  9039  16A3  3000               	movlw	0
  9040  16A4  00B4               	movwf	___ftge@ff2
  9041  16A5  3000               	movlw	0
  9042  16A6  00B5               	movwf	___ftge@ff2+1
  9043  16A7  3000               	movlw	0
  9044  16A8  00B6               	movwf	___ftge@ff2+2
  9045  16A9  3191  21D0  3196   	fcall	___ftge
  9046  16AC  1803               	btfsc	3,0
  9047  16AD  2EBB               	goto	l2850
  9048  16AE  3021               	movlw	33
  9049  16AF  0021               	movlb	1	; select bank1
  9050  16B0  00C6               	movwf	_errno^(0+128)
  9051  16B1  3000               	movlw	0
  9052  16B2  00C7               	movwf	(_errno^(0+128)+1)
  9053  16B3  3000               	movlw	0
  9054  16B4  0020               	movlb	0	; select bank0
  9055  16B5  00C8               	movwf	?_log
  9056  16B6  3000               	movlw	0
  9057  16B7  00C9               	movwf	?_log+1
  9058  16B8  3000               	movlw	0
  9059  16B9  00CA               	movwf	?_log+2
  9060  16BA  0008               	return
  9061  16BB                     l2850:	
  9062  16BB  0020               	movlb	0	; select bank0
  9063  16BC  084A               	movf	log@x+2,w
  9064  16BD  0449               	iorwf	log@x+1,w
  9065  16BE  0448               	iorwf	log@x,w
  9066  16BF  1D03               	skipz
  9067  16C0  2ECE               	goto	l2856
  9068  16C1  3022               	movlw	34
  9069  16C2  0021               	movlb	1	; select bank1
  9070  16C3  00C6               	movwf	_errno^(0+128)
  9071  16C4  3000               	movlw	0
  9072  16C5  00C7               	movwf	(_errno^(0+128)+1)
  9073  16C6  3000               	movlw	0
  9074  16C7  0020               	movlb	0	; select bank0
  9075  16C8  00C8               	movwf	?_log
  9076  16C9  3000               	movlw	0
  9077  16CA  00C9               	movwf	?_log+1
  9078  16CB  3000               	movlw	0
  9079  16CC  00CA               	movwf	?_log+2
  9080  16CD  0008               	return
  9081  16CE                     l2856:	
  9082  16CE  3000               	movlw	0
  9083  16CF  00B1               	movwf	___ftadd@f1
  9084  16D0  3080               	movlw	128
  9085  16D1  00B2               	movwf	___ftadd@f1+1
  9086  16D2  30BF               	movlw	191
  9087  16D3  00B3               	movwf	___ftadd@f1+2
  9088  16D4  3000               	movlw	0
  9089  16D5  00A1               	movwf	___ftmul@f1
  9090  16D6  3000               	movlw	0
  9091  16D7  00A2               	movwf	___ftmul@f1+1
  9092  16D8  3040               	movlw	64
  9093  16D9  00A3               	movwf	___ftmul@f1+2
  9094  16DA  304C               	movlw	(low (log@exponent| 0))& (0+255)
  9095  16DB  00CB               	movwf	??_log
  9096  16DC  084B               	movf	??_log,w
  9097  16DD  00F3               	movwf	frexp@eptr
  9098  16DE  0848               	movf	log@x,w
  9099  16DF  00F0               	movwf	frexp@value
  9100  16E0  0849               	movf	log@x+1,w
  9101  16E1  00F1               	movwf	frexp@value+1
  9102  16E2  084A               	movf	log@x+2,w
  9103  16E3  00F2               	movwf	frexp@value+2
  9104  16E4  3191  2195  3196   	fcall	_frexp
  9105  16E7  0870               	movf	?_frexp,w
  9106  16E8  0020               	movlb	0	; select bank0
  9107  16E9  00A4               	movwf	___ftmul@f2
  9108  16EA  0871               	movf	?_frexp+1,w
  9109  16EB  00A5               	movwf	___ftmul@f2+1
  9110  16EC  0872               	movf	?_frexp+2,w
  9111  16ED  00A6               	movwf	___ftmul@f2+2
  9112  16EE  3197  274C  3196   	fcall	___ftmul
  9113  16F1  0020               	movlb	0	; select bank0
  9114  16F2  0821               	movf	?___ftmul,w
  9115  16F3  00B4               	movwf	___ftadd@f2
  9116  16F4  0822               	movf	?___ftmul+1,w
  9117  16F5  00B5               	movwf	___ftadd@f2+1
  9118  16F6  0823               	movf	?___ftmul+2,w
  9119  16F7  00B6               	movwf	___ftadd@f2+2
  9120  16F8  3189  21AE  3196   	fcall	___ftadd
  9121  16FB  0020               	movlb	0	; select bank0
  9122  16FC  0831               	movf	?___ftadd,w
  9123  16FD  00C8               	movwf	log@x
  9124  16FE  0832               	movf	?___ftadd+1,w
  9125  16FF  00C9               	movwf	log@x+1
  9126  1700  0833               	movf	?___ftadd+2,w
  9127  1701  00CA               	movwf	log@x+2
  9128  1702  30FF               	movlw	255
  9129  1703  07CC               	addwf	log@exponent,f
  9130  1704  30FF               	movlw	255
  9131  1705  3DCD               	addwfc	log@exponent+1,f
  9132  1706  0848               	movf	log@x,w
  9133  1707  00BE               	movwf	eval_poly@x
  9134  1708  0849               	movf	log@x+1,w
  9135  1709  00BF               	movwf	eval_poly@x+1
  9136  170A  084A               	movf	log@x+2,w
  9137  170B  00C0               	movwf	eval_poly@x+2
  9138  170C  302F               	movlw	low (log@coeff| (0+32768))
  9139  170D  00C1               	movwf	eval_poly@d
  9140  170E  3091               	movlw	high (log@coeff| (0+32768))
  9141  170F  00C2               	movwf	eval_poly@d+1
  9142  1710  3008               	movlw	8
  9143  1711  00C3               	movwf	eval_poly@n
  9144  1712  3000               	movlw	0
  9145  1713  00C4               	movwf	eval_poly@n+1
  9146  1714  3193  233B  3196   	fcall	_eval_poly
  9147  1717  0020               	movlb	0	; select bank0
  9148  1718  083E               	movf	?_eval_poly,w
  9149  1719  00C8               	movwf	log@x
  9150  171A  083F               	movf	?_eval_poly+1,w
  9151  171B  00C9               	movwf	log@x+1
  9152  171C  0840               	movf	?_eval_poly+2,w
  9153  171D  00CA               	movwf	log@x+2
  9154  171E  0848               	movf	log@x,w
  9155  171F  00B1               	movwf	___ftadd@f1
  9156  1720  0849               	movf	log@x+1,w
  9157  1721  00B2               	movwf	___ftadd@f1+1
  9158  1722  084A               	movf	log@x+2,w
  9159  1723  00B3               	movwf	___ftadd@f1+2
  9160  1724  3072               	movlw	114
  9161  1725  00A1               	movwf	___ftmul@f1
  9162  1726  3031               	movlw	49
  9163  1727  00A2               	movwf	___ftmul@f1+1
  9164  1728  303F               	movlw	63
  9165  1729  00A3               	movwf	___ftmul@f1+2
  9166  172A  084D               	movf	log@exponent+1,w
  9167  172B  00FA               	movwf	___awtoft@c+1
  9168  172C  084C               	movf	log@exponent,w
  9169  172D  00F9               	movwf	___awtoft@c
  9170  172E  319F  2710  3196   	fcall	___awtoft
  9171  1731  0879               	movf	?___awtoft,w
  9172  1732  0020               	movlb	0	; select bank0
  9173  1733  00A4               	movwf	___ftmul@f2
  9174  1734  087A               	movf	?___awtoft+1,w
  9175  1735  00A5               	movwf	___ftmul@f2+1
  9176  1736  087B               	movf	?___awtoft+2,w
  9177  1737  00A6               	movwf	___ftmul@f2+2
  9178  1738  3197  274C  3196   	fcall	___ftmul
  9179  173B  0020               	movlb	0	; select bank0
  9180  173C  0821               	movf	?___ftmul,w
  9181  173D  00B4               	movwf	___ftadd@f2
  9182  173E  0822               	movf	?___ftmul+1,w
  9183  173F  00B5               	movwf	___ftadd@f2+1
  9184  1740  0823               	movf	?___ftmul+2,w
  9185  1741  00B6               	movwf	___ftadd@f2+2
  9186  1742  3189  21AE         	fcall	___ftadd
  9187  1744  0020               	movlb	0	; select bank0
  9188  1745  0831               	movf	?___ftadd,w
  9189  1746  00C8               	movwf	?_log
  9190  1747  0832               	movf	?___ftadd+1,w
  9191  1748  00C9               	movwf	?_log+1
  9192  1749  0833               	movf	?___ftadd+2,w
  9193  174A  00CA               	movwf	?_log+2
  9194  174B  0008               	return
  9195  174C                     __end_of_log:	
  9196                           
  9197                           	psect	text3
  9198  1195                     __ptext3:	
  9199 ;; *************** function _frexp *****************
  9200 ;; Defined at:
  9201 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\frexp.c"
  9202 ;; Parameters:    Size  Location     Type
  9203 ;;  value           3    0[COMMON] int 
  9204 ;;  eptr            1    3[COMMON] PTR int 
  9205 ;;		 -> log@exponent(2), 
  9206 ;; Auto vars:     Size  Location     Type
  9207 ;;		None
  9208 ;; Return value:  Size  Location     Type
  9209 ;;                  3    0[COMMON] PTR int 
  9210 ;; Registers used:
  9211 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9212 ;; Tracked objects:
  9213 ;;		On entry : 0/0
  9214 ;;		On exit  : 0/0
  9215 ;;		Unchanged: 0/0
  9216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9217 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9219 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9220 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9221 ;;Total ram usage:        6 bytes
  9222 ;; Hardware stack levels used:    1
  9223 ;; This function calls:
  9224 ;;		Nothing
  9225 ;; This function is called by:
  9226 ;;		_log
  9227 ;; This function uses a non-reentrant model
  9228 ;;
  9229                           
  9230                           
  9231                           ;psect for function _frexp
  9232  1195                     _frexp:	
  9233                           
  9234                           ;incstack = 0
  9235                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  9236  1195  0872               	movf	frexp@value+2,w
  9237  1196  0471               	iorwf	frexp@value+1,w
  9238  1197  0470               	iorwf	frexp@value,w
  9239  1198  1D03               	skipz
  9240  1199  29A7               	goto	l2646
  9241  119A  0873               	movf	frexp@eptr,w
  9242  119B  0086               	movwf	6
  9243  119C  0187               	clrf	7
  9244  119D  3000               	movlw	0
  9245  119E  3FC0               	movwi [0]fsr1
  9246  119F  3FC1               	movwi [1]fsr1
  9247  11A0  3000               	movlw	0
  9248  11A1  00F0               	movwf	?_frexp
  9249  11A2  3000               	movlw	0
  9250  11A3  00F1               	movwf	?_frexp+1
  9251  11A4  3000               	movlw	0
  9252  11A5  00F2               	movwf	?_frexp+2
  9253  11A6  0008               	return
  9254  11A7                     l2646:	
  9255  11A7  0872               	movf	frexp@value+2,w
  9256  11A8  397F               	andlw	127
  9257  11A9  00F4               	movwf	??_frexp
  9258  11AA  01F5               	clrf	??_frexp+1
  9259  11AB  35F4               	lslf	??_frexp,f
  9260  11AC  0DF5               	rlf	??_frexp+1,f
  9261  11AD  0873               	movf	frexp@eptr,w
  9262  11AE  0086               	movwf	6
  9263  11AF  0187               	clrf	7
  9264  11B0  0874               	movf	??_frexp,w
  9265  11B1  3FC0               	movwi [0]fsr1
  9266  11B2  0875               	movf	??_frexp+1,w
  9267  11B3  3FC1               	movwi [1]fsr1
  9268  11B4  0D71               	rlf	frexp@value+1,w
  9269  11B5  0D71               	rlf	frexp@value+1,w
  9270  11B6  3901               	andlw	1
  9271  11B7  00F4               	movwf	??_frexp
  9272  11B8  01F5               	clrf	??_frexp+1
  9273  11B9  0873               	movf	frexp@eptr,w
  9274  11BA  0086               	movwf	6
  9275  11BB  0187               	clrf	7
  9276  11BC  0874               	movf	??_frexp,w
  9277  11BD  0481               	iorwf	1,f
  9278  11BE  3141               	addfsr 1,1
  9279  11BF  0875               	movf	??_frexp+1,w
  9280  11C0  0481               	iorwf	1,f
  9281  11C1  0873               	movf	frexp@eptr,w
  9282  11C2  0086               	movwf	6
  9283  11C3  0187               	clrf	7
  9284  11C4  3082               	movlw	130
  9285  11C5  0781               	addwf	1,f
  9286  11C6  3141               	addfsr 1,1
  9287  11C7  30FF               	movlw	255
  9288  11C8  3D81               	addwfc	1,f
  9289  11C9  317F               	addfsr 1,-1
  9290  11CA  0872               	movf	frexp@value+2,w
  9291  11CB  3980               	andlw	-128
  9292  11CC  383F               	iorlw	63
  9293  11CD  00F2               	movwf	frexp@value+2
  9294  11CE  13F1               	bcf	frexp@value+1,7
  9295  11CF  0008               	return
  9296  11D0                     __end_of_frexp:	
  9297                           
  9298                           	psect	text4
  9299  133B                     __ptext4:	
  9300 ;; *************** function _eval_poly *****************
  9301 ;; Defined at:
  9302 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\evalpoly.c"
  9303 ;; Parameters:    Size  Location     Type
  9304 ;;  x               3   30[BANK0 ] PTR int 
  9305 ;;  d               2   33[BANK0 ] PTR const 
  9306 ;;		 -> log@coeff(27), 
  9307 ;;  n               2   35[BANK0 ] int 
  9308 ;; Auto vars:     Size  Location     Type
  9309 ;;  res             3   37[BANK0 ] int 
  9310 ;; Return value:  Size  Location     Type
  9311 ;;                  3   30[BANK0 ] int 
  9312 ;; Registers used:
  9313 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9314 ;; Tracked objects:
  9315 ;;		On entry : 0/0
  9316 ;;		On exit  : 0/0
  9317 ;;		Unchanged: 0/0
  9318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9319 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9320 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9322 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9323 ;;Total ram usage:       10 bytes
  9324 ;; Hardware stack levels used:    1
  9325 ;; Hardware stack levels required when called:    2
  9326 ;; This function calls:
  9327 ;;		___ftadd
  9328 ;;		___ftmul
  9329 ;;		___wmul
  9330 ;; This function is called by:
  9331 ;;		_log
  9332 ;; This function uses a non-reentrant model
  9333 ;;
  9334                           
  9335                           
  9336                           ;psect for function _eval_poly
  9337  133B                     _eval_poly:	
  9338                           
  9339                           ;incstack = 0
  9340                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9341  133B  0020               	movlb	0	; select bank0
  9342  133C  0844               	movf	eval_poly@n+1,w
  9343  133D  00F1               	movwf	___wmul@multiplier+1
  9344  133E  0843               	movf	eval_poly@n,w
  9345  133F  00F0               	movwf	___wmul@multiplier
  9346  1340  3003               	movlw	3
  9347  1341  00F2               	movwf	___wmul@multiplicand
  9348  1342  3000               	movlw	0
  9349  1343  00F3               	movwf	___wmul@multiplicand+1
  9350  1344  319E  2699  3193   	fcall	___wmul
  9351  1347  0020               	movlb	0	; select bank0
  9352  1348  0841               	movf	eval_poly@d,w
  9353  1349  0770               	addwf	?___wmul,w
  9354  134A  0084               	movwf	4
  9355  134B  0842               	movf	eval_poly@d+1,w
  9356  134C  3D71               	addwfc	?___wmul+1,w
  9357  134D  0085               	movwf	5
  9358  134E  3F00               	moviw [0]fsr0
  9359  134F  00C5               	movwf	eval_poly@res
  9360  1350  3F01               	moviw [1]fsr0
  9361  1351  00C6               	movwf	eval_poly@res+1
  9362  1352  3F02               	moviw [2]fsr0
  9363  1353                     L6:	
  9364  1353  00C7               	movwf	eval_poly@res+2
  9365  1354  0843               	movf	eval_poly@n,w
  9366  1355  0444               	iorwf	eval_poly@n+1,w
  9367  1356  1903               	btfsc	3,2
  9368  1357  2B94               	goto	l2664
  9369  1358  30FF               	movlw	255
  9370  1359  07C3               	addwf	eval_poly@n,f
  9371  135A  30FF               	movlw	255
  9372  135B  3DC4               	addwfc	eval_poly@n+1,f
  9373  135C  0844               	movf	eval_poly@n+1,w
  9374  135D  00F1               	movwf	___wmul@multiplier+1
  9375  135E  0843               	movf	eval_poly@n,w
  9376  135F  00F0               	movwf	___wmul@multiplier
  9377  1360  3003               	movlw	3
  9378  1361  00F2               	movwf	___wmul@multiplicand
  9379  1362  3000               	movlw	0
  9380  1363  00F3               	movwf	___wmul@multiplicand+1
  9381  1364  319E  2699  3193   	fcall	___wmul
  9382  1367  0020               	movlb	0	; select bank0
  9383  1368  0841               	movf	eval_poly@d,w
  9384  1369  0770               	addwf	?___wmul,w
  9385  136A  0084               	movwf	4
  9386  136B  0842               	movf	eval_poly@d+1,w
  9387  136C  3D71               	addwfc	?___wmul+1,w
  9388  136D  0085               	movwf	5
  9389  136E  3F00               	moviw [0]fsr0
  9390  136F  00B1               	movwf	___ftadd@f1
  9391  1370  3F01               	moviw [1]fsr0
  9392  1371  00B2               	movwf	___ftadd@f1+1
  9393  1372  3F02               	moviw [2]fsr0
  9394  1373  00B3               	movwf	___ftadd@f1+2
  9395  1374  0845               	movf	eval_poly@res,w
  9396  1375  00A1               	movwf	___ftmul@f1
  9397  1376  0846               	movf	eval_poly@res+1,w
  9398  1377  00A2               	movwf	___ftmul@f1+1
  9399  1378  0847               	movf	eval_poly@res+2,w
  9400  1379  00A3               	movwf	___ftmul@f1+2
  9401  137A  083E               	movf	eval_poly@x,w
  9402  137B  00A4               	movwf	___ftmul@f2
  9403  137C  083F               	movf	eval_poly@x+1,w
  9404  137D  00A5               	movwf	___ftmul@f2+1
  9405  137E  0840               	movf	eval_poly@x+2,w
  9406  137F  00A6               	movwf	___ftmul@f2+2
  9407  1380  3197  274C  3193   	fcall	___ftmul
  9408  1383  0020               	movlb	0	; select bank0
  9409  1384  0821               	movf	?___ftmul,w
  9410  1385  00B4               	movwf	___ftadd@f2
  9411  1386  0822               	movf	?___ftmul+1,w
  9412  1387  00B5               	movwf	___ftadd@f2+1
  9413  1388  0823               	movf	?___ftmul+2,w
  9414  1389  00B6               	movwf	___ftadd@f2+2
  9415  138A  3189  21AE  3193   	fcall	___ftadd
  9416  138D  0020               	movlb	0	; select bank0
  9417  138E  0831               	movf	?___ftadd,w
  9418  138F  00C5               	movwf	eval_poly@res
  9419  1390  0832               	movf	?___ftadd+1,w
  9420  1391  00C6               	movwf	eval_poly@res+1
  9421  1392  0833               	movf	?___ftadd+2,w
  9422  1393  2B53               	goto	L6
  9423  1394                     l2664:	
  9424  1394  0845               	movf	eval_poly@res,w
  9425  1395  00BE               	movwf	?_eval_poly
  9426  1396  0846               	movf	eval_poly@res+1,w
  9427  1397  00BF               	movwf	?_eval_poly+1
  9428  1398  0847               	movf	eval_poly@res+2,w
  9429  1399  00C0               	movwf	?_eval_poly+2
  9430  139A  0008               	return
  9431  139B                     __end_of_eval_poly:	
  9432                           
  9433                           	psect	text5
  9434  11D0                     __ptext5:	
  9435 ;; *************** function ___ftge *****************
  9436 ;; Defined at:
  9437 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
  9438 ;; Parameters:    Size  Location     Type
  9439 ;;  ff1             3   17[BANK0 ] float 
  9440 ;;  ff2             3   20[BANK0 ] float 
  9441 ;; Auto vars:     Size  Location     Type
  9442 ;;		None
  9443 ;; Return value:  Size  Location     Type
  9444 ;;		None               void
  9445 ;; Registers used:
  9446 ;;		wreg, status,2, status,0
  9447 ;; Tracked objects:
  9448 ;;		On entry : 0/0
  9449 ;;		On exit  : 0/0
  9450 ;;		Unchanged: 0/0
  9451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9452 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9454 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9455 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9456 ;;Total ram usage:        9 bytes
  9457 ;; Hardware stack levels used:    1
  9458 ;; This function calls:
  9459 ;;		Nothing
  9460 ;; This function is called by:
  9461 ;;		_main
  9462 ;;		_log
  9463 ;; This function uses a non-reentrant model
  9464 ;;
  9465                           
  9466                           
  9467                           ;psect for function ___ftge
  9468  11D0                     ___ftge:	
  9469                           
  9470                           ;incstack = 0
  9471                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  9472  11D0  0020               	movlb	0	; select bank0
  9473  11D1  1FB3               	btfss	___ftge@ff1+2,7
  9474  11D2  29E7               	goto	l2580
  9475  11D3  0931               	comf	___ftge@ff1,w
  9476  11D4  00B7               	movwf	??___ftge
  9477  11D5  0932               	comf	___ftge@ff1+1,w
  9478  11D6  00B8               	movwf	??___ftge+1
  9479  11D7  0933               	comf	___ftge@ff1+2,w
  9480  11D8  00B9               	movwf	??___ftge+2
  9481  11D9  0AB7               	incf	??___ftge,f
  9482  11DA  1903               	skipnz
  9483  11DB  0AB8               	incf	??___ftge+1,f
  9484  11DC  1903               	skipnz
  9485  11DD  0AB9               	incf	??___ftge+2,f
  9486  11DE  3000               	movlw	0
  9487  11DF  0737               	addwf	??___ftge,w
  9488  11E0  00B1               	movwf	___ftge@ff1
  9489  11E1  3000               	movlw	0
  9490  11E2  3D38               	addwfc	??___ftge+1,w
  9491  11E3  00B2               	movwf	___ftge@ff1+1
  9492  11E4  3080               	movlw	128
  9493  11E5  3D39               	addwfc	??___ftge+2,w
  9494  11E6  00B3               	movwf	___ftge@ff1+2
  9495  11E7                     l2580:	
  9496  11E7  1FB6               	btfss	___ftge@ff2+2,7
  9497  11E8  29FD               	goto	l2584
  9498  11E9  0934               	comf	___ftge@ff2,w
  9499  11EA  00B7               	movwf	??___ftge
  9500  11EB  0935               	comf	___ftge@ff2+1,w
  9501  11EC  00B8               	movwf	??___ftge+1
  9502  11ED  0936               	comf	___ftge@ff2+2,w
  9503  11EE  00B9               	movwf	??___ftge+2
  9504  11EF  0AB7               	incf	??___ftge,f
  9505  11F0  1903               	skipnz
  9506  11F1  0AB8               	incf	??___ftge+1,f
  9507  11F2  1903               	skipnz
  9508  11F3  0AB9               	incf	??___ftge+2,f
  9509  11F4  3000               	movlw	0
  9510  11F5  0737               	addwf	??___ftge,w
  9511  11F6  00B4               	movwf	___ftge@ff2
  9512  11F7  3000               	movlw	0
  9513  11F8  3D38               	addwfc	??___ftge+1,w
  9514  11F9  00B5               	movwf	___ftge@ff2+1
  9515  11FA  3080               	movlw	128
  9516  11FB  3D39               	addwfc	??___ftge+2,w
  9517  11FC  00B6               	movwf	___ftge@ff2+2
  9518  11FD                     l2584:	
  9519  11FD  3080               	movlw	128
  9520  11FE  06B3               	xorwf	___ftge@ff1+2,f
  9521  11FF  3080               	movlw	128
  9522  1200  06B6               	xorwf	___ftge@ff2+2,f
  9523  1201  0836               	movf	___ftge@ff2+2,w
  9524  1202  0233               	subwf	___ftge@ff1+2,w
  9525  1203  1D03               	skipz
  9526  1204  0008               	return
  9527  1205  0835               	movf	___ftge@ff2+1,w
  9528  1206  0232               	subwf	___ftge@ff1+1,w
  9529  1207  1D03               	skipz
  9530  1208  0008               	return
  9531  1209  0834               	movf	___ftge@ff2,w
  9532  120A  0231               	subwf	___ftge@ff1,w
  9533  120B  0008               	return
  9534  120C                     __end_of___ftge:	
  9535                           
  9536                           	psect	text6
  9537  1EB4                     __ptext6:	
  9538 ;; *************** function ___ftsub *****************
  9539 ;; Defined at:
  9540 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
  9541 ;; Parameters:    Size  Location     Type
  9542 ;;  f2              3   30[BANK0 ] float 
  9543 ;;  f1              3   33[BANK0 ] float 
  9544 ;; Auto vars:     Size  Location     Type
  9545 ;;		None
  9546 ;; Return value:  Size  Location     Type
  9547 ;;                  3   30[BANK0 ] float 
  9548 ;; Registers used:
  9549 ;;		wreg, status,2, status,0, pclath, cstack
  9550 ;; Tracked objects:
  9551 ;;		On entry : 0/0
  9552 ;;		On exit  : 0/0
  9553 ;;		Unchanged: 0/0
  9554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9555 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9558 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9559 ;;Total ram usage:        6 bytes
  9560 ;; Hardware stack levels used:    1
  9561 ;; Hardware stack levels required when called:    2
  9562 ;; This function calls:
  9563 ;;		___ftadd
  9564 ;; This function is called by:
  9565 ;;		_tempCalc
  9566 ;; This function uses a non-reentrant model
  9567 ;;
  9568                           
  9569                           
  9570                           ;psect for function ___ftsub
  9571  1EB4                     ___ftsub:	
  9572                           
  9573                           ;incstack = 0
  9574                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9575  1EB4  0020               	movlb	0	; select bank0
  9576  1EB5  0840               	movf	___ftsub@f2+2,w
  9577  1EB6  043F               	iorwf	___ftsub@f2+1,w
  9578  1EB7  043E               	iorwf	___ftsub@f2,w
  9579  1EB8  1903               	skipnz
  9580  1EB9  2EBC               	goto	l3010
  9581  1EBA  3080               	movlw	128
  9582  1EBB  06C0               	xorwf	___ftsub@f2+2,f
  9583  1EBC                     l3010:	
  9584  1EBC  0841               	movf	___ftsub@f1,w
  9585  1EBD  00B1               	movwf	___ftadd@f1
  9586  1EBE  0842               	movf	___ftsub@f1+1,w
  9587  1EBF  00B2               	movwf	___ftadd@f1+1
  9588  1EC0  0843               	movf	___ftsub@f1+2,w
  9589  1EC1  00B3               	movwf	___ftadd@f1+2
  9590  1EC2  083E               	movf	___ftsub@f2,w
  9591  1EC3  00B4               	movwf	___ftadd@f2
  9592  1EC4  083F               	movf	___ftsub@f2+1,w
  9593  1EC5  00B5               	movwf	___ftadd@f2+1
  9594  1EC6  0840               	movf	___ftsub@f2+2,w
  9595  1EC7  00B6               	movwf	___ftadd@f2+2
  9596  1EC8  3189  21AE         	fcall	___ftadd
  9597  1ECA  0020               	movlb	0	; select bank0
  9598  1ECB  0831               	movf	?___ftadd,w
  9599  1ECC  00BE               	movwf	?___ftsub
  9600  1ECD  0832               	movf	?___ftadd+1,w
  9601  1ECE  00BF               	movwf	?___ftsub+1
  9602  1ECF  0833               	movf	?___ftadd+2,w
  9603  1ED0  00C0               	movwf	?___ftsub+2
  9604  1ED1  0008               	return
  9605  1ED2                     __end_of___ftsub:	
  9606                           
  9607                           	psect	text7
  9608  09AE                     __ptext7:	
  9609 ;; *************** function ___ftadd *****************
  9610 ;; Defined at:
  9611 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
  9612 ;; Parameters:    Size  Location     Type
  9613 ;;  f1              3   17[BANK0 ] float 
  9614 ;;  f2              3   20[BANK0 ] float 
  9615 ;; Auto vars:     Size  Location     Type
  9616 ;;  exp1            1   29[BANK0 ] unsigned char 
  9617 ;;  exp2            1   28[BANK0 ] unsigned char 
  9618 ;;  sign            1   27[BANK0 ] unsigned char 
  9619 ;; Return value:  Size  Location     Type
  9620 ;;                  3   17[BANK0 ] float 
  9621 ;; Registers used:
  9622 ;;		wreg, status,2, status,0, pclath, cstack
  9623 ;; Tracked objects:
  9624 ;;		On entry : 0/0
  9625 ;;		On exit  : 0/0
  9626 ;;		Unchanged: 0/0
  9627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9628 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9629 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9630 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9631 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9632 ;;Total ram usage:       13 bytes
  9633 ;; Hardware stack levels used:    1
  9634 ;; Hardware stack levels required when called:    1
  9635 ;; This function calls:
  9636 ;;		___ftpack
  9637 ;; This function is called by:
  9638 ;;		_tempCalc
  9639 ;;		___ftsub
  9640 ;;		_log
  9641 ;;		_eval_poly
  9642 ;; This function uses a non-reentrant model
  9643 ;;
  9644                           
  9645                           
  9646                           ;psect for function ___ftadd
  9647  09AE                     ___ftadd:	
  9648                           
  9649                           ;incstack = 0
  9650                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9651  09AE  0020               	movlb	0	; select bank0
  9652  09AF  0831               	movf	___ftadd@f1,w
  9653  09B0  00B7               	movwf	??___ftadd
  9654  09B1  0832               	movf	___ftadd@f1+1,w
  9655  09B2  00B8               	movwf	??___ftadd+1
  9656  09B3  0833               	movf	___ftadd@f1+2,w
  9657  09B4  00B9               	movwf	??___ftadd+2
  9658  09B5  1003               	clrc
  9659  09B6  0D38               	rlf	??___ftadd+1,w
  9660  09B7  0D39               	rlf	??___ftadd+2,w
  9661  09B8  00BA               	movwf	??___ftadd+3
  9662  09B9  083A               	movf	??___ftadd+3,w
  9663  09BA  00BD               	movwf	___ftadd@exp1
  9664  09BB  0834               	movf	___ftadd@f2,w
  9665  09BC  00B7               	movwf	??___ftadd
  9666  09BD  0835               	movf	___ftadd@f2+1,w
  9667  09BE  00B8               	movwf	??___ftadd+1
  9668  09BF  0836               	movf	___ftadd@f2+2,w
  9669  09C0  00B9               	movwf	??___ftadd+2
  9670  09C1  1003               	clrc
  9671  09C2  0D38               	rlf	??___ftadd+1,w
  9672  09C3  0D39               	rlf	??___ftadd+2,w
  9673  09C4  00BA               	movwf	??___ftadd+3
  9674  09C5  083A               	movf	??___ftadd+3,w
  9675  09C6  00BC               	movwf	___ftadd@exp2
  9676  09C7  083D               	movf	___ftadd@exp1,w
  9677  09C8  1903               	btfsc	3,2
  9678  09C9  29D6               	goto	l2448
  9679  09CA  083C               	movf	___ftadd@exp2,w
  9680  09CB  023D               	subwf	___ftadd@exp1,w
  9681  09CC  1803               	skipnc
  9682  09CD  29DD               	goto	l2452
  9683  09CE  033D               	decf	___ftadd@exp1,w
  9684  09CF  3AFF               	xorlw	255
  9685  09D0  073C               	addwf	___ftadd@exp2,w
  9686  09D1  00B7               	movwf	??___ftadd
  9687  09D2  3019               	movlw	25
  9688  09D3  0237               	subwf	??___ftadd,w
  9689  09D4  1C03               	skipc
  9690  09D5  29DD               	goto	l2452
  9691  09D6                     l2448:	
  9692  09D6  0834               	movf	___ftadd@f2,w
  9693  09D7  00B1               	movwf	?___ftadd
  9694  09D8  0835               	movf	___ftadd@f2+1,w
  9695  09D9  00B2               	movwf	?___ftadd+1
  9696  09DA  0836               	movf	___ftadd@f2+2,w
  9697  09DB  00B3               	movwf	?___ftadd+2
  9698  09DC  0008               	return
  9699  09DD                     l2452:	
  9700  09DD  083C               	movf	___ftadd@exp2,w
  9701  09DE  1903               	btfsc	3,2
  9702  09DF  0008               	return
  9703  09E0  083D               	movf	___ftadd@exp1,w
  9704  09E1  023C               	subwf	___ftadd@exp2,w
  9705  09E2  1803               	skipnc
  9706  09E3  29EC               	goto	l2458
  9707  09E4  033C               	decf	___ftadd@exp2,w
  9708  09E5  3AFF               	xorlw	255
  9709  09E6  073D               	addwf	___ftadd@exp1,w
  9710  09E7  00B7               	movwf	??___ftadd
  9711  09E8  3019               	movlw	25
  9712  09E9  0237               	subwf	??___ftadd,w
  9713  09EA  1803               	btfsc	3,0
  9714  09EB  0008               	return
  9715  09EC                     l2458:	
  9716  09EC  3006               	movlw	6
  9717  09ED  00B7               	movwf	??___ftadd
  9718  09EE  0837               	movf	??___ftadd,w
  9719  09EF  00BB               	movwf	___ftadd@sign
  9720  09F0  1BB3               	btfsc	___ftadd@f1+2,7
  9721  09F1  17BB               	bsf	___ftadd@sign,7
  9722  09F2  1BB6               	btfsc	___ftadd@f2+2,7
  9723  09F3  173B               	bsf	___ftadd@sign,6
  9724  09F4  17B2               	bsf	___ftadd@f1+1,7
  9725  09F5  30FF               	movlw	255
  9726  09F6  05B1               	andwf	___ftadd@f1,f
  9727  09F7  30FF               	movlw	255
  9728  09F8  05B2               	andwf	___ftadd@f1+1,f
  9729  09F9  3000               	movlw	0
  9730  09FA  05B3               	andwf	___ftadd@f1+2,f
  9731  09FB  17B5               	bsf	___ftadd@f2+1,7
  9732  09FC  30FF               	movlw	255
  9733  09FD  05B4               	andwf	___ftadd@f2,f
  9734  09FE  30FF               	movlw	255
  9735  09FF  05B5               	andwf	___ftadd@f2+1,f
  9736  0A00  3000               	movlw	0
  9737  0A01  05B6               	andwf	___ftadd@f2+2,f
  9738  0A02  083C               	movf	___ftadd@exp2,w
  9739  0A03  023D               	subwf	___ftadd@exp1,w
  9740  0A04  1803               	skipnc
  9741  0A05  2A28               	goto	l2480
  9742  0A06                     l2470:	
  9743  0A06  3001               	movlw	1
  9744  0A07                     u2555:	
  9745  0A07  35B4               	lslf	___ftadd@f2,f
  9746  0A08  0DB5               	rlf	___ftadd@f2+1,f
  9747  0A09  0DB6               	rlf	___ftadd@f2+2,f
  9748  0A0A  0B89               	decfsz	9,f
  9749  0A0B  2A07               	goto	u2555
  9750  0A0C  3001               	movlw	1
  9751  0A0D  02BC               	subwf	___ftadd@exp2,f
  9752  0A0E  083C               	movf	___ftadd@exp2,w
  9753  0A0F  063D               	xorwf	___ftadd@exp1,w
  9754  0A10  1903               	skipnz
  9755  0A11  2A23               	goto	l2478
  9756  0A12  3001               	movlw	1
  9757  0A13  02BB               	subwf	___ftadd@sign,f
  9758  0A14  083B               	movf	___ftadd@sign,w
  9759  0A15  3907               	andlw	7
  9760  0A16  1903               	btfsc	3,2
  9761  0A17  2A23               	goto	l2478
  9762  0A18  2A06               	goto	l2470
  9763  0A19                     l2476:	
  9764  0A19  3001               	movlw	1
  9765  0A1A                     u2585:	
  9766  0A1A  36B3               	lsrf	___ftadd@f1+2,f
  9767  0A1B  0CB2               	rrf	___ftadd@f1+1,f
  9768  0A1C  0CB1               	rrf	___ftadd@f1,f
  9769  0A1D  0B89               	decfsz	9,f
  9770  0A1E  2A1A               	goto	u2585
  9771  0A1F  3001               	movlw	1
  9772  0A20  00B7               	movwf	??___ftadd
  9773  0A21  0837               	movf	??___ftadd,w
  9774  0A22  07BD               	addwf	___ftadd@exp1,f
  9775  0A23                     l2478:	
  9776  0A23  083D               	movf	___ftadd@exp1,w
  9777  0A24  063C               	xorwf	___ftadd@exp2,w
  9778  0A25  1903               	btfsc	3,2
  9779  0A26  2A4D               	goto	l818
  9780  0A27  2A19               	goto	l2476
  9781  0A28                     l2480:	
  9782  0A28  083D               	movf	___ftadd@exp1,w
  9783  0A29  023C               	subwf	___ftadd@exp2,w
  9784  0A2A  1803               	skipnc
  9785  0A2B  2A4D               	goto	l818
  9786  0A2C                     l2482:	
  9787  0A2C  3001               	movlw	1
  9788  0A2D                     u2615:	
  9789  0A2D  35B1               	lslf	___ftadd@f1,f
  9790  0A2E  0DB2               	rlf	___ftadd@f1+1,f
  9791  0A2F  0DB3               	rlf	___ftadd@f1+2,f
  9792  0A30  0B89               	decfsz	9,f
  9793  0A31  2A2D               	goto	u2615
  9794  0A32  3001               	movlw	1
  9795  0A33  02BD               	subwf	___ftadd@exp1,f
  9796  0A34  083C               	movf	___ftadd@exp2,w
  9797  0A35  063D               	xorwf	___ftadd@exp1,w
  9798  0A36  1903               	skipnz
  9799  0A37  2A49               	goto	l2490
  9800  0A38  3001               	movlw	1
  9801  0A39  02BB               	subwf	___ftadd@sign,f
  9802  0A3A  083B               	movf	___ftadd@sign,w
  9803  0A3B  3907               	andlw	7
  9804  0A3C  1903               	btfsc	3,2
  9805  0A3D  2A49               	goto	l2490
  9806  0A3E  2A2C               	goto	l2482
  9807  0A3F                     l2488:	
  9808  0A3F  3001               	movlw	1
  9809  0A40                     u2645:	
  9810  0A40  36B6               	lsrf	___ftadd@f2+2,f
  9811  0A41  0CB5               	rrf	___ftadd@f2+1,f
  9812  0A42  0CB4               	rrf	___ftadd@f2,f
  9813  0A43  0B89               	decfsz	9,f
  9814  0A44  2A40               	goto	u2645
  9815  0A45  3001               	movlw	1
  9816  0A46  00B7               	movwf	??___ftadd
  9817  0A47  0837               	movf	??___ftadd,w
  9818  0A48  07BC               	addwf	___ftadd@exp2,f
  9819  0A49                     l2490:	
  9820  0A49  083D               	movf	___ftadd@exp1,w
  9821  0A4A  063C               	xorwf	___ftadd@exp2,w
  9822  0A4B  1D03               	skipz
  9823  0A4C  2A3F               	goto	l2488
  9824  0A4D                     l818:	
  9825  0A4D  1FBB               	btfss	___ftadd@sign,7
  9826  0A4E  2A5F               	goto	l2494
  9827  0A4F  30FF               	movlw	255
  9828  0A50  06B1               	xorwf	___ftadd@f1,f
  9829  0A51  30FF               	movlw	255
  9830  0A52  06B2               	xorwf	___ftadd@f1+1,f
  9831  0A53  30FF               	movlw	255
  9832  0A54  06B3               	xorwf	___ftadd@f1+2,f
  9833  0A55  3001               	movlw	1
  9834  0A56  07B1               	addwf	___ftadd@f1,f
  9835  0A57  3000               	movlw	0
  9836  0A58  1803               	skipnc
  9837  0A59  3001               	movlw	1
  9838  0A5A  07B2               	addwf	___ftadd@f1+1,f
  9839  0A5B  3000               	movlw	0
  9840  0A5C  1803               	skipnc
  9841  0A5D  3001               	movlw	1
  9842  0A5E  07B3               	addwf	___ftadd@f1+2,f
  9843  0A5F                     l2494:	
  9844  0A5F  1F3B               	btfss	___ftadd@sign,6
  9845  0A60  2A71               	goto	l2498
  9846  0A61  30FF               	movlw	255
  9847  0A62  06B4               	xorwf	___ftadd@f2,f
  9848  0A63  30FF               	movlw	255
  9849  0A64  06B5               	xorwf	___ftadd@f2+1,f
  9850  0A65  30FF               	movlw	255
  9851  0A66  06B6               	xorwf	___ftadd@f2+2,f
  9852  0A67  3001               	movlw	1
  9853  0A68  07B4               	addwf	___ftadd@f2,f
  9854  0A69  3000               	movlw	0
  9855  0A6A  1803               	skipnc
  9856  0A6B  3001               	movlw	1
  9857  0A6C  07B5               	addwf	___ftadd@f2+1,f
  9858  0A6D  3000               	movlw	0
  9859  0A6E  1803               	skipnc
  9860  0A6F  3001               	movlw	1
  9861  0A70  07B6               	addwf	___ftadd@f2+2,f
  9862  0A71                     l2498:	
  9863  0A71  01BB               	clrf	___ftadd@sign
  9864  0A72  0831               	movf	___ftadd@f1,w
  9865  0A73  07B4               	addwf	___ftadd@f2,f
  9866  0A74  0832               	movf	___ftadd@f1+1,w
  9867  0A75  3DB5               	addwfc	___ftadd@f2+1,f
  9868  0A76  0833               	movf	___ftadd@f1+2,w
  9869  0A77  3DB6               	addwfc	___ftadd@f2+2,f
  9870  0A78  1FB6               	btfss	___ftadd@f2+2,7
  9871  0A79  2A8C               	goto	l2508
  9872  0A7A  30FF               	movlw	255
  9873  0A7B  06B4               	xorwf	___ftadd@f2,f
  9874  0A7C  30FF               	movlw	255
  9875  0A7D  06B5               	xorwf	___ftadd@f2+1,f
  9876  0A7E  30FF               	movlw	255
  9877  0A7F  06B6               	xorwf	___ftadd@f2+2,f
  9878  0A80  3001               	movlw	1
  9879  0A81  07B4               	addwf	___ftadd@f2,f
  9880  0A82  3000               	movlw	0
  9881  0A83  1803               	skipnc
  9882  0A84  3001               	movlw	1
  9883  0A85  07B5               	addwf	___ftadd@f2+1,f
  9884  0A86  3000               	movlw	0
  9885  0A87  1803               	skipnc
  9886  0A88  3001               	movlw	1
  9887  0A89  07B6               	addwf	___ftadd@f2+2,f
  9888  0A8A  01BB               	clrf	___ftadd@sign
  9889  0A8B  0ABB               	incf	___ftadd@sign,f
  9890  0A8C                     l2508:	
  9891  0A8C  0834               	movf	___ftadd@f2,w
  9892  0A8D  00F0               	movwf	___ftpack@arg
  9893  0A8E  0835               	movf	___ftadd@f2+1,w
  9894  0A8F  00F1               	movwf	___ftpack@arg+1
  9895  0A90  0836               	movf	___ftadd@f2+2,w
  9896  0A91  00F2               	movwf	___ftpack@arg+2
  9897  0A92  083D               	movf	___ftadd@exp1,w
  9898  0A93  00B7               	movwf	??___ftadd
  9899  0A94  0837               	movf	??___ftadd,w
  9900  0A95  00F3               	movwf	___ftpack@exp
  9901  0A96  083B               	movf	___ftadd@sign,w
  9902  0A97  00B8               	movwf	??___ftadd+1
  9903  0A98  0838               	movf	??___ftadd+1,w
  9904  0A99  00F4               	movwf	___ftpack@sign
  9905  0A9A  3193  239B         	fcall	___ftpack
  9906  0A9C  0870               	movf	?___ftpack,w
  9907  0A9D  0020               	movlb	0	; select bank0
  9908  0A9E  00B1               	movwf	?___ftadd
  9909  0A9F  0871               	movf	?___ftpack+1,w
  9910  0AA0  00B2               	movwf	?___ftadd+1
  9911  0AA1  0872               	movf	?___ftpack+2,w
  9912  0AA2  00B3               	movwf	?___ftadd+2
  9913  0AA3  0008               	return
  9914  0AA4                     __end_of___ftadd:	
  9915                           
  9916                           	psect	text8
  9917  0AA4                     __ptext8:	
  9918 ;; *************** function _readVAnalog *****************
  9919 ;; Defined at:
  9920 ;;		line 103 in file "adc.c"
  9921 ;; Parameters:    Size  Location     Type
  9922 ;;  channel         2    6[BANK0 ] unsigned int 
  9923 ;; Auto vars:     Size  Location     Type
  9924 ;;  value           2   11[COMMON] int 
  9925 ;;  analog_chann    2    9[COMMON] unsigned int 
  9926 ;; Return value:  Size  Location     Type
  9927 ;;                  2    6[BANK0 ] int 
  9928 ;; Registers used:
  9929 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9930 ;; Tracked objects:
  9931 ;;		On entry : 0/0
  9932 ;;		On exit  : 0/0
  9933 ;;		Unchanged: 0/0
  9934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9935 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9936 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9937 ;;      Temps:          0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9938 ;;      Totals:         4      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9939 ;;Total ram usage:       21 bytes
  9940 ;; Hardware stack levels used:    1
  9941 ;; Hardware stack levels required when called:    1
  9942 ;; This function calls:
  9943 ;;		_ADCRead
  9944 ;;		___aldiv
  9945 ;;		___bmul
  9946 ;; This function is called by:
  9947 ;;		_main
  9948 ;; This function uses a non-reentrant model
  9949 ;;
  9950                           
  9951                           
  9952                           ;psect for function _readVAnalog
  9953  0AA4                     _readVAnalog:	
  9954                           
  9955                           ;adc.c: 105: int16_t value;
  9956                           ;adc.c: 107: uint16_t analog_channel = Vchannels[channel];
  9957                           
  9958                           ;incstack = 0
  9959                           ; Regs used in _readVAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9960  0AA4  0020               	movlb	0	; select bank0
  9961  0AA5  3526               	lslf	readVAnalog@channel,w
  9962  0AA6  3E61               	addlw	(low (_Vchannels| (0+256)))& (0+255)
  9963  0AA7  0086               	movwf	6
  9964  0AA8  3001               	movlw	1	; select bank2/3
  9965  0AA9  0087               	movwf	7
  9966  0AAA  3F40               	moviw [0]fsr1
  9967  0AAB  00F9               	movwf	readVAnalog@analog_channel
  9968  0AAC  3F41               	moviw [1]fsr1
  9969  0AAD  00FA               	movwf	readVAnalog@analog_channel+1
  9970                           
  9971                           ;adc.c: 109: value = ADCRead(analog_channel);
  9972  0AAE  0879               	movf	readVAnalog@analog_channel,w
  9973  0AAF  319E  2642  318A   	fcall	_ADCRead
  9974  0AB2  0871               	movf	?_ADCRead+1,w
  9975  0AB3  00FC               	movwf	readVAnalog@value+1
  9976  0AB4  0870               	movf	?_ADCRead,w
  9977  0AB5  00FB               	movwf	readVAnalog@value
  9978                           
  9979                           ;adc.c: 111: Vtotals[channel] = Vtotals[channel]-Vsamples[channel][VsampleIndex];
  9980  0AB6  0020               	movlb	0	; select bank0
  9981  0AB7  0826               	movf	readVAnalog@channel,w
  9982  0AB8  00A8               	movwf	??_readVAnalog
  9983  0AB9  3001               	movlw	1
  9984  0ABA                     u3495:	
  9985  0ABA  35A8               	lslf	??_readVAnalog,f
  9986  0ABB  3EFF               	addlw	-1
  9987  0ABC  1D03               	skipz
  9988  0ABD  2ABA               	goto	u3495
  9989  0ABE  3528               	lslf	??_readVAnalog,w
  9990  0ABF  3E30               	addlw	(low (_Vtotals| (0+256)))& (0+255)
  9991  0AC0  0086               	movwf	6
  9992  0AC1  3001               	movlw	1	; select bank2/3
  9993  0AC2  0087               	movwf	7
  9994  0AC3  3F40               	moviw [0]fsr1
  9995  0AC4  00A9               	movwf	??_readVAnalog+1
  9996  0AC5  3F41               	moviw [1]fsr1
  9997  0AC6  00AA               	movwf	??_readVAnalog+2
  9998  0AC7  3F42               	moviw [2]fsr1
  9999  0AC8  00AB               	movwf	??_readVAnalog+3
 10000  0AC9  3F43               	moviw [3]fsr1
 10001  0ACA  00AC               	movwf	??_readVAnalog+4
 10002  0ACB  0864               	movf	_VsampleIndex,w
 10003  0ACC  00AD               	movwf	??_readVAnalog+5
 10004  0ACD  3001               	movlw	1
 10005  0ACE                     u3505:	
 10006  0ACE  35AD               	lslf	??_readVAnalog+5,f
 10007  0ACF  0B89               	decfsz	9,f
 10008  0AD0  2ACE               	goto	u3505
 10009  0AD1  300A               	movlw	10
 10010  0AD2  00AE               	movwf	??_readVAnalog+6
 10011  0AD3  082E               	movf	??_readVAnalog+6,w
 10012  0AD4  00F0               	movwf	___bmul@multiplicand
 10013  0AD5  0826               	movf	readVAnalog@channel,w
 10014  0AD6  319E  260A  318A   	fcall	___bmul
 10015  0AD9  3EA0               	addlw	(low (_Vsamples| (0+256)))& (0+255)
 10016  0ADA  0020               	movlb	0	; select bank0
 10017  0ADB  072D               	addwf	??_readVAnalog+5,w
 10018  0ADC  00AF               	movwf	??_readVAnalog+7
 10019  0ADD  082F               	movf	??_readVAnalog+7,w
 10020  0ADE  0086               	movwf	6
 10021  0ADF  3001               	movlw	1	; select bank3/4
 10022  0AE0  0087               	movwf	7
 10023  0AE1  3F40               	moviw [0]fsr1
 10024  0AE2  00B0               	movwf	??_readVAnalog+8
 10025  0AE3  3F41               	moviw [1]fsr1
 10026  0AE4  00B1               	movwf	??_readVAnalog+9
 10027  0AE5  0830               	movf	??_readVAnalog+8,w
 10028  0AE6  00B2               	movwf	??_readVAnalog+10
 10029  0AE7  0831               	movf	??_readVAnalog+9,w
 10030  0AE8  00B3               	movwf	??_readVAnalog+11
 10031  0AE9  3000               	movlw	0
 10032  0AEA  1BB3               	btfsc	??_readVAnalog+11,7
 10033  0AEB  30FF               	movlw	255
 10034  0AEC  00B4               	movwf	??_readVAnalog+12
 10035  0AED  00B5               	movwf	??_readVAnalog+13
 10036  0AEE  09B2               	comf	??_readVAnalog+10,f
 10037  0AEF  09B3               	comf	??_readVAnalog+11,f
 10038  0AF0  09B4               	comf	??_readVAnalog+12,f
 10039  0AF1  09B5               	comf	??_readVAnalog+13,f
 10040  0AF2  0AB2               	incf	??_readVAnalog+10,f
 10041  0AF3  1903               	skipnz
 10042  0AF4  0AB3               	incf	??_readVAnalog+11,f
 10043  0AF5  1903               	skipnz
 10044  0AF6  0AB4               	incf	??_readVAnalog+12,f
 10045  0AF7  1903               	skipnz
 10046  0AF8  0AB5               	incf	??_readVAnalog+13,f
 10047  0AF9  0832               	movf	??_readVAnalog+10,w
 10048  0AFA  07A9               	addwf	??_readVAnalog+1,f
 10049  0AFB  0833               	movf	??_readVAnalog+11,w
 10050  0AFC  3DAA               	addwfc	??_readVAnalog+2,f
 10051  0AFD  0834               	movf	??_readVAnalog+12,w
 10052  0AFE  3DAB               	addwfc	??_readVAnalog+3,f
 10053  0AFF  0835               	movf	??_readVAnalog+13,w
 10054  0B00  3DAC               	addwfc	??_readVAnalog+4,f
 10055  0B01  0826               	movf	readVAnalog@channel,w
 10056  0B02  00B6               	movwf	??_readVAnalog+14
 10057  0B03  3001               	movlw	1
 10058  0B04                     u3515:	
 10059  0B04  35B6               	lslf	??_readVAnalog+14,f
 10060  0B05  3EFF               	addlw	-1
 10061  0B06  1D03               	skipz
 10062  0B07  2B04               	goto	u3515
 10063  0B08  3536               	lslf	??_readVAnalog+14,w
 10064  0B09  3E30               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10065  0B0A  0086               	movwf	6
 10066  0B0B  3001               	movlw	1	; select bank2/3
 10067  0B0C  0087               	movwf	7
 10068  0B0D  0829               	movf	??_readVAnalog+1,w
 10069  0B0E  3FC0               	movwi [0]fsr1
 10070  0B0F  082A               	movf	??_readVAnalog+2,w
 10071  0B10  3FC1               	movwi [1]fsr1
 10072  0B11  082B               	movf	??_readVAnalog+3,w
 10073  0B12  3FC2               	movwi [2]fsr1
 10074  0B13  082C               	movf	??_readVAnalog+4,w
 10075  0B14  3FC3               	movwi [3]fsr1
 10076                           
 10077                           ;adc.c: 113: Vsamples[channel][VsampleIndex] = value;
 10078  0B15  0864               	movf	_VsampleIndex,w
 10079  0B16  00A8               	movwf	??_readVAnalog
 10080  0B17  3001               	movlw	1
 10081  0B18                     u3525:	
 10082  0B18  35A8               	lslf	??_readVAnalog,f
 10083  0B19  0B89               	decfsz	9,f
 10084  0B1A  2B18               	goto	u3525
 10085  0B1B  300A               	movlw	10
 10086  0B1C  00A9               	movwf	??_readVAnalog+1
 10087  0B1D  0829               	movf	??_readVAnalog+1,w
 10088  0B1E  00F0               	movwf	___bmul@multiplicand
 10089  0B1F  0826               	movf	readVAnalog@channel,w
 10090  0B20  319E  260A  318A   	fcall	___bmul
 10091  0B23  3EA0               	addlw	(low (_Vsamples| (0+256)))& (0+255)
 10092  0B24  0020               	movlb	0	; select bank0
 10093  0B25  0728               	addwf	??_readVAnalog,w
 10094  0B26  00AA               	movwf	??_readVAnalog+2
 10095  0B27  082A               	movf	??_readVAnalog+2,w
 10096  0B28  0086               	movwf	6
 10097  0B29  3001               	movlw	1	; select bank3/4
 10098  0B2A  0087               	movwf	7
 10099  0B2B  087B               	movf	readVAnalog@value,w
 10100  0B2C  3FC0               	movwi [0]fsr1
 10101  0B2D  087C               	movf	readVAnalog@value+1,w
 10102  0B2E  3FC1               	movwi [1]fsr1
 10103                           
 10104                           ;adc.c: 115: Vtotals[channel] = Vtotals[channel]+Vsamples[channel][VsampleIndex];
 10105  0B2F  0826               	movf	readVAnalog@channel,w
 10106  0B30  00A8               	movwf	??_readVAnalog
 10107  0B31  3001               	movlw	1
 10108  0B32                     u3535:	
 10109  0B32  35A8               	lslf	??_readVAnalog,f
 10110  0B33  3EFF               	addlw	-1
 10111  0B34  1D03               	skipz
 10112  0B35  2B32               	goto	u3535
 10113  0B36  3528               	lslf	??_readVAnalog,w
 10114  0B37  3E30               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10115  0B38  0086               	movwf	6
 10116  0B39  3001               	movlw	1	; select bank2/3
 10117  0B3A  0087               	movwf	7
 10118  0B3B  3F40               	moviw [0]fsr1
 10119  0B3C  00A9               	movwf	??_readVAnalog+1
 10120  0B3D  3F41               	moviw [1]fsr1
 10121  0B3E  00AA               	movwf	??_readVAnalog+2
 10122  0B3F  3F42               	moviw [2]fsr1
 10123  0B40  00AB               	movwf	??_readVAnalog+3
 10124  0B41  3F43               	moviw [3]fsr1
 10125  0B42  00AC               	movwf	??_readVAnalog+4
 10126  0B43  0864               	movf	_VsampleIndex,w
 10127  0B44  00AD               	movwf	??_readVAnalog+5
 10128  0B45  3001               	movlw	1
 10129  0B46                     u3545:	
 10130  0B46  35AD               	lslf	??_readVAnalog+5,f
 10131  0B47  0B89               	decfsz	9,f
 10132  0B48  2B46               	goto	u3545
 10133  0B49  300A               	movlw	10
 10134  0B4A  00AE               	movwf	??_readVAnalog+6
 10135  0B4B  082E               	movf	??_readVAnalog+6,w
 10136  0B4C  00F0               	movwf	___bmul@multiplicand
 10137  0B4D  0826               	movf	readVAnalog@channel,w
 10138  0B4E  319E  260A  318A   	fcall	___bmul
 10139  0B51  3EA0               	addlw	(low (_Vsamples| (0+256)))& (0+255)
 10140  0B52  0020               	movlb	0	; select bank0
 10141  0B53  072D               	addwf	??_readVAnalog+5,w
 10142  0B54  00AF               	movwf	??_readVAnalog+7
 10143  0B55  082F               	movf	??_readVAnalog+7,w
 10144  0B56  0086               	movwf	6
 10145  0B57  3001               	movlw	1	; select bank3/4
 10146  0B58  0087               	movwf	7
 10147  0B59  3F40               	moviw [0]fsr1
 10148  0B5A  00B0               	movwf	??_readVAnalog+8
 10149  0B5B  3F41               	moviw [1]fsr1
 10150  0B5C  00B1               	movwf	??_readVAnalog+9
 10151  0B5D  0830               	movf	??_readVAnalog+8,w
 10152  0B5E  00B2               	movwf	??_readVAnalog+10
 10153  0B5F  0831               	movf	??_readVAnalog+9,w
 10154  0B60  00B3               	movwf	??_readVAnalog+11
 10155  0B61  3000               	movlw	0
 10156  0B62  1BB3               	btfsc	??_readVAnalog+11,7
 10157  0B63  30FF               	movlw	255
 10158  0B64  00B4               	movwf	??_readVAnalog+12
 10159  0B65  00B5               	movwf	??_readVAnalog+13
 10160  0B66  0832               	movf	??_readVAnalog+10,w
 10161  0B67  07A9               	addwf	??_readVAnalog+1,f
 10162  0B68  0833               	movf	??_readVAnalog+11,w
 10163  0B69  3DAA               	addwfc	??_readVAnalog+2,f
 10164  0B6A  0834               	movf	??_readVAnalog+12,w
 10165  0B6B  3DAB               	addwfc	??_readVAnalog+3,f
 10166  0B6C  0835               	movf	??_readVAnalog+13,w
 10167  0B6D  3DAC               	addwfc	??_readVAnalog+4,f
 10168  0B6E  0826               	movf	readVAnalog@channel,w
 10169  0B6F  00B6               	movwf	??_readVAnalog+14
 10170  0B70  3001               	movlw	1
 10171  0B71                     u3555:	
 10172  0B71  35B6               	lslf	??_readVAnalog+14,f
 10173  0B72  3EFF               	addlw	-1
 10174  0B73  1D03               	skipz
 10175  0B74  2B71               	goto	u3555
 10176  0B75  3536               	lslf	??_readVAnalog+14,w
 10177  0B76  3E30               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10178  0B77  0086               	movwf	6
 10179  0B78  3001               	movlw	1	; select bank2/3
 10180  0B79  0087               	movwf	7
 10181  0B7A  0829               	movf	??_readVAnalog+1,w
 10182  0B7B  3FC0               	movwi [0]fsr1
 10183  0B7C  082A               	movf	??_readVAnalog+2,w
 10184  0B7D  3FC1               	movwi [1]fsr1
 10185  0B7E  082B               	movf	??_readVAnalog+3,w
 10186  0B7F  3FC2               	movwi [2]fsr1
 10187  0B80  082C               	movf	??_readVAnalog+4,w
 10188  0B81  3FC3               	movwi [3]fsr1
 10189                           
 10190                           ;adc.c: 117: if(channel>=(4-1))
 10191  0B82  3000               	movlw	0
 10192  0B83  0227               	subwf	readVAnalog@channel+1,w
 10193  0B84  3003               	movlw	3
 10194  0B85  1903               	skipnz
 10195  0B86  0226               	subwf	readVAnalog@channel,w
 10196  0B87  1C03               	skipc
 10197  0B88  2B96               	goto	l3080
 10198                           
 10199                           ;adc.c: 118: {
 10200                           ;adc.c: 119: VsampleIndex+=1;
 10201  0B89  3001               	movlw	1
 10202  0B8A  07E4               	addwf	_VsampleIndex,f
 10203  0B8B  3000               	movlw	0
 10204  0B8C  3DE5               	addwfc	_VsampleIndex+1,f
 10205                           
 10206                           ;adc.c: 120: if(VsampleIndex >= 5)VsampleIndex = 0;
 10207  0B8D  3000               	movlw	0
 10208  0B8E  0265               	subwf	_VsampleIndex+1,w
 10209  0B8F  3005               	movlw	5
 10210  0B90  1903               	skipnz
 10211  0B91  0264               	subwf	_VsampleIndex,w
 10212  0B92  1C03               	skipc
 10213  0B93  2B96               	goto	l3080
 10214  0B94  01E4               	clrf	_VsampleIndex
 10215  0B95  01E5               	clrf	_VsampleIndex+1
 10216  0B96                     l3080:	
 10217                           
 10218                           ;adc.c: 121: }
 10219                           ;adc.c: 123: value = Vtotals[channel]/5;
 10220  0B96  3000               	movlw	0
 10221  0B97  00F3               	movwf	___aldiv@divisor+3
 10222  0B98  3000               	movlw	0
 10223  0B99  00F2               	movwf	___aldiv@divisor+2
 10224  0B9A  3000               	movlw	0
 10225  0B9B  00F1               	movwf	___aldiv@divisor+1
 10226  0B9C  3005               	movlw	5
 10227  0B9D  00F0               	movwf	___aldiv@divisor
 10228  0B9E  0826               	movf	readVAnalog@channel,w
 10229  0B9F  00A8               	movwf	??_readVAnalog
 10230  0BA0  3001               	movlw	1
 10231  0BA1                     u3585:	
 10232  0BA1  35A8               	lslf	??_readVAnalog,f
 10233  0BA2  3EFF               	addlw	-1
 10234  0BA3  1D03               	skipz
 10235  0BA4  2BA1               	goto	u3585
 10236  0BA5  3528               	lslf	??_readVAnalog,w
 10237  0BA6  3E30               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10238  0BA7  0086               	movwf	6
 10239  0BA8  3001               	movlw	1	; select bank2/3
 10240  0BA9  0087               	movwf	7
 10241  0BAA  3F40               	moviw [0]fsr1
 10242  0BAB  00F4               	movwf	___aldiv@dividend
 10243  0BAC  3F41               	moviw [1]fsr1
 10244  0BAD  00F5               	movwf	___aldiv@dividend+1
 10245  0BAE  3F42               	moviw [2]fsr1
 10246  0BAF  00F6               	movwf	___aldiv@dividend+2
 10247  0BB0  3F43               	moviw [3]fsr1
 10248  0BB1  00F7               	movwf	___aldiv@dividend+3
 10249  0BB2  3194  2467         	fcall	___aldiv
 10250  0BB4  0871               	movf	?___aldiv+1,w
 10251  0BB5  00FC               	movwf	readVAnalog@value+1
 10252  0BB6  0870               	movf	?___aldiv,w
 10253  0BB7  00FB               	movwf	readVAnalog@value
 10254                           
 10255                           ;adc.c: 125: return value;
 10256  0BB8  087C               	movf	readVAnalog@value+1,w
 10257  0BB9  0020               	movlb	0	; select bank0
 10258  0BBA  00A7               	movwf	?_readVAnalog+1
 10259  0BBB  087B               	movf	readVAnalog@value,w
 10260  0BBC  00A6               	movwf	?_readVAnalog
 10261  0BBD  0008               	return
 10262  0BBE                     __end_of_readVAnalog:	
 10263                           
 10264                           	psect	text9
 10265  1E0A                     __ptext9:	
 10266 ;; *************** function ___bmul *****************
 10267 ;; Defined at:
 10268 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
 10269 ;; Parameters:    Size  Location     Type
 10270 ;;  multiplier      1    wreg     unsigned char 
 10271 ;;  multiplicand    1    0[COMMON] unsigned char 
 10272 ;; Auto vars:     Size  Location     Type
 10273 ;;  multiplier      1    3[COMMON] unsigned char 
 10274 ;;  product         1    2[COMMON] unsigned char 
 10275 ;; Return value:  Size  Location     Type
 10276 ;;                  1    wreg      unsigned char 
 10277 ;; Registers used:
 10278 ;;		wreg, status,2, status,0
 10279 ;; Tracked objects:
 10280 ;;		On entry : 0/0
 10281 ;;		On exit  : 0/0
 10282 ;;		Unchanged: 0/0
 10283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10284 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10285 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10286 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10287 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10288 ;;Total ram usage:        4 bytes
 10289 ;; Hardware stack levels used:    1
 10290 ;; This function calls:
 10291 ;;		Nothing
 10292 ;; This function is called by:
 10293 ;;		_readVAnalog
 10294 ;; This function uses a non-reentrant model
 10295 ;;
 10296                           
 10297                           
 10298                           ;psect for function ___bmul
 10299  1E0A                     ___bmul:	
 10300                           
 10301                           ;incstack = 0
 10302                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 10303                           ;___bmul@multiplier stored from wreg
 10304  1E0A  00F3               	movwf	___bmul@multiplier
 10305  1E0B  01F2               	clrf	___bmul@product
 10306  1E0C                     l2868:	
 10307  1E0C  1C73               	btfss	___bmul@multiplier,0
 10308  1E0D  2E12               	goto	l2872
 10309  1E0E  0870               	movf	___bmul@multiplicand,w
 10310  1E0F  00F1               	movwf	??___bmul
 10311  1E10  0871               	movf	??___bmul,w
 10312  1E11  07F2               	addwf	___bmul@product,f
 10313  1E12                     l2872:	
 10314  1E12  1003               	clrc
 10315  1E13  0DF0               	rlf	___bmul@multiplicand,f
 10316  1E14  1003               	clrc
 10317  1E15  0CF3               	rrf	___bmul@multiplier,f
 10318  1E16  0873               	movf	___bmul@multiplier,w
 10319  1E17  1D03               	btfss	3,2
 10320  1E18  2E0C               	goto	l2868
 10321  1E19  0872               	movf	___bmul@product,w
 10322  1E1A  0008               	return
 10323  1E1B                     __end_of___bmul:	
 10324                           
 10325                           	psect	text10
 10326  0BBE                     __ptext10:	
 10327 ;; *************** function _readIAnalog *****************
 10328 ;; Defined at:
 10329 ;;		line 77 in file "adc.c"
 10330 ;; Parameters:    Size  Location     Type
 10331 ;;  channel         2    6[BANK0 ] unsigned int 
 10332 ;; Auto vars:     Size  Location     Type
 10333 ;;  value           2   11[COMMON] int 
 10334 ;;  analog_chann    2    9[COMMON] unsigned int 
 10335 ;; Return value:  Size  Location     Type
 10336 ;;                  2    6[BANK0 ] int 
 10337 ;; Registers used:
 10338 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10339 ;; Tracked objects:
 10340 ;;		On entry : 0/0
 10341 ;;		On exit  : 0/0
 10342 ;;		Unchanged: 0/0
 10343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10344 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10345 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10346 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10347 ;;      Totals:         4      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10348 ;;Total ram usage:       24 bytes
 10349 ;; Hardware stack levels used:    1
 10350 ;; Hardware stack levels required when called:    1
 10351 ;; This function calls:
 10352 ;;		_ADCRead
 10353 ;;		___aldiv
 10354 ;;		___wmul
 10355 ;; This function is called by:
 10356 ;;		_main
 10357 ;; This function uses a non-reentrant model
 10358 ;;
 10359                           
 10360                           
 10361                           ;psect for function _readIAnalog
 10362  0BBE                     _readIAnalog:	
 10363                           
 10364                           ;adc.c: 79: int16_t value;
 10365                           ;adc.c: 81: uint16_t analog_channel = Ichannels[channel];
 10366                           
 10367                           ;incstack = 0
 10368                           ; Regs used in _readIAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10369  0BBE  0020               	movlb	0	; select bank0
 10370  0BBF  3526               	lslf	readIAnalog@channel,w
 10371  0BC0  3E59               	addlw	(low (_Ichannels| (0+256)))& (0+255)
 10372  0BC1  0086               	movwf	6
 10373  0BC2  3001               	movlw	1	; select bank2/3
 10374  0BC3  0087               	movwf	7
 10375  0BC4  3F40               	moviw [0]fsr1
 10376  0BC5  00F9               	movwf	readIAnalog@analog_channel
 10377  0BC6  3F41               	moviw [1]fsr1
 10378  0BC7  00FA               	movwf	readIAnalog@analog_channel+1
 10379                           
 10380                           ;adc.c: 83: value = ADCRead(analog_channel);
 10381  0BC8  0879               	movf	readIAnalog@analog_channel,w
 10382  0BC9  319E  2642  318B   	fcall	_ADCRead
 10383  0BCC  0871               	movf	?_ADCRead+1,w
 10384  0BCD  00FC               	movwf	readIAnalog@value+1
 10385  0BCE  0870               	movf	?_ADCRead,w
 10386  0BCF  00FB               	movwf	readIAnalog@value
 10387                           
 10388                           ;adc.c: 85: Itotals[channel] = Itotals[channel]-Isamples[channel][IsampleIndex];
 10389  0BD0  0020               	movlb	0	; select bank0
 10390  0BD1  0826               	movf	readIAnalog@channel,w
 10391  0BD2  00A8               	movwf	??_readIAnalog
 10392  0BD3  3001               	movlw	1
 10393  0BD4                     u3425:	
 10394  0BD4  35A8               	lslf	??_readIAnalog,f
 10395  0BD5  3EFF               	addlw	-1
 10396  0BD6  1D03               	skipz
 10397  0BD7  2BD4               	goto	u3425
 10398  0BD8  3528               	lslf	??_readIAnalog,w
 10399  0BD9  3E20               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10400  0BDA  0086               	movwf	6
 10401  0BDB  3001               	movlw	1	; select bank2/3
 10402  0BDC  0087               	movwf	7
 10403  0BDD  3F40               	moviw [0]fsr1
 10404  0BDE  00A9               	movwf	??_readIAnalog+1
 10405  0BDF  3F41               	moviw [1]fsr1
 10406  0BE0  00AA               	movwf	??_readIAnalog+2
 10407  0BE1  3F42               	moviw [2]fsr1
 10408  0BE2  00AB               	movwf	??_readIAnalog+3
 10409  0BE3  3F43               	moviw [3]fsr1
 10410  0BE4  00AC               	movwf	??_readIAnalog+4
 10411  0BE5  0863               	movf	_IsampleIndex+1,w
 10412  0BE6  00AE               	movwf	??_readIAnalog+6
 10413  0BE7  0862               	movf	_IsampleIndex,w
 10414  0BE8  00AD               	movwf	??_readIAnalog+5
 10415  0BE9  35AD               	lslf	??_readIAnalog+5,f
 10416  0BEA  0DAE               	rlf	??_readIAnalog+6,f
 10417  0BEB  0827               	movf	readIAnalog@channel+1,w
 10418  0BEC  00F1               	movwf	___wmul@multiplier+1
 10419  0BED  0826               	movf	readIAnalog@channel,w
 10420  0BEE  00F0               	movwf	___wmul@multiplier
 10421  0BEF  3064               	movlw	100
 10422  0BF0  00F2               	movwf	___wmul@multiplicand
 10423  0BF1  3000               	movlw	0
 10424  0BF2  00F3               	movwf	___wmul@multiplicand+1
 10425  0BF3  319E  2699  318B   	fcall	___wmul
 10426  0BF6  3060               	movlw	96
 10427  0BF7  0020               	movlb	0	; select bank0
 10428  0BF8  00AF               	movwf	??_readIAnalog+7
 10429  0BF9  3022               	movlw	34
 10430  0BFA  00B0               	movwf	??_readIAnalog+8
 10431  0BFB  0870               	movf	?___wmul,w
 10432  0BFC  072F               	addwf	??_readIAnalog+7,w
 10433  0BFD  00B1               	movwf	??_readIAnalog+9
 10434  0BFE  0871               	movf	?___wmul+1,w
 10435  0BFF  3D30               	addwfc	??_readIAnalog+8,w
 10436  0C00  00B2               	movwf	??_readIAnalog+10
 10437  0C01  082D               	movf	??_readIAnalog+5,w
 10438  0C02  0731               	addwf	??_readIAnalog+9,w
 10439  0C03  0086               	movwf	6
 10440  0C04  082E               	movf	??_readIAnalog+6,w
 10441  0C05  3D32               	addwfc	??_readIAnalog+10,w
 10442  0C06  0087               	movwf	7
 10443  0C07  3F40               	moviw [0]fsr1
 10444  0C08  00B3               	movwf	??_readIAnalog+11
 10445  0C09  3F41               	moviw [1]fsr1
 10446  0C0A  00B4               	movwf	??_readIAnalog+12
 10447  0C0B  0833               	movf	??_readIAnalog+11,w
 10448  0C0C  00B5               	movwf	??_readIAnalog+13
 10449  0C0D  0834               	movf	??_readIAnalog+12,w
 10450  0C0E  00B6               	movwf	??_readIAnalog+14
 10451  0C0F  3000               	movlw	0
 10452  0C10  1BB6               	btfsc	??_readIAnalog+14,7
 10453  0C11  30FF               	movlw	255
 10454  0C12  00B7               	movwf	??_readIAnalog+15
 10455  0C13  00B8               	movwf	??_readIAnalog+16
 10456  0C14  09B5               	comf	??_readIAnalog+13,f
 10457  0C15  09B6               	comf	??_readIAnalog+14,f
 10458  0C16  09B7               	comf	??_readIAnalog+15,f
 10459  0C17  09B8               	comf	??_readIAnalog+16,f
 10460  0C18  0AB5               	incf	??_readIAnalog+13,f
 10461  0C19  1903               	skipnz
 10462  0C1A  0AB6               	incf	??_readIAnalog+14,f
 10463  0C1B  1903               	skipnz
 10464  0C1C  0AB7               	incf	??_readIAnalog+15,f
 10465  0C1D  1903               	skipnz
 10466  0C1E  0AB8               	incf	??_readIAnalog+16,f
 10467  0C1F  0835               	movf	??_readIAnalog+13,w
 10468  0C20  07A9               	addwf	??_readIAnalog+1,f
 10469  0C21  0836               	movf	??_readIAnalog+14,w
 10470  0C22  3DAA               	addwfc	??_readIAnalog+2,f
 10471  0C23  0837               	movf	??_readIAnalog+15,w
 10472  0C24  3DAB               	addwfc	??_readIAnalog+3,f
 10473  0C25  0838               	movf	??_readIAnalog+16,w
 10474  0C26  3DAC               	addwfc	??_readIAnalog+4,f
 10475  0C27  0826               	movf	readIAnalog@channel,w
 10476  0C28  00B9               	movwf	??_readIAnalog+17
 10477  0C29  3001               	movlw	1
 10478  0C2A                     u3435:	
 10479  0C2A  35B9               	lslf	??_readIAnalog+17,f
 10480  0C2B  3EFF               	addlw	-1
 10481  0C2C  1D03               	skipz
 10482  0C2D  2C2A               	goto	u3435
 10483  0C2E  3539               	lslf	??_readIAnalog+17,w
 10484  0C2F  3E20               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10485  0C30  0086               	movwf	6
 10486  0C31  3001               	movlw	1	; select bank2/3
 10487  0C32  0087               	movwf	7
 10488  0C33  0829               	movf	??_readIAnalog+1,w
 10489  0C34  3FC0               	movwi [0]fsr1
 10490  0C35  082A               	movf	??_readIAnalog+2,w
 10491  0C36  3FC1               	movwi [1]fsr1
 10492  0C37  082B               	movf	??_readIAnalog+3,w
 10493  0C38  3FC2               	movwi [2]fsr1
 10494  0C39  082C               	movf	??_readIAnalog+4,w
 10495  0C3A  3FC3               	movwi [3]fsr1
 10496                           
 10497                           ;adc.c: 87: Isamples[channel][IsampleIndex] = value;
 10498  0C3B  0863               	movf	_IsampleIndex+1,w
 10499  0C3C  00A9               	movwf	??_readIAnalog+1
 10500  0C3D  0862               	movf	_IsampleIndex,w
 10501  0C3E  00A8               	movwf	??_readIAnalog
 10502  0C3F  35A8               	lslf	??_readIAnalog,f
 10503  0C40  0DA9               	rlf	??_readIAnalog+1,f
 10504  0C41  0827               	movf	readIAnalog@channel+1,w
 10505  0C42  00F1               	movwf	___wmul@multiplier+1
 10506  0C43  0826               	movf	readIAnalog@channel,w
 10507  0C44  00F0               	movwf	___wmul@multiplier
 10508  0C45  3064               	movlw	100
 10509  0C46  00F2               	movwf	___wmul@multiplicand
 10510  0C47  3000               	movlw	0
 10511  0C48  00F3               	movwf	___wmul@multiplicand+1
 10512  0C49  319E  2699  318B   	fcall	___wmul
 10513  0C4C  3060               	movlw	96
 10514  0C4D  0020               	movlb	0	; select bank0
 10515  0C4E  00AA               	movwf	??_readIAnalog+2
 10516  0C4F  3022               	movlw	34
 10517  0C50  00AB               	movwf	??_readIAnalog+3
 10518  0C51  0870               	movf	?___wmul,w
 10519  0C52  072A               	addwf	??_readIAnalog+2,w
 10520  0C53  00AC               	movwf	??_readIAnalog+4
 10521  0C54  0871               	movf	?___wmul+1,w
 10522  0C55  3D2B               	addwfc	??_readIAnalog+3,w
 10523  0C56  00AD               	movwf	??_readIAnalog+5
 10524  0C57  0828               	movf	??_readIAnalog,w
 10525  0C58  072C               	addwf	??_readIAnalog+4,w
 10526  0C59  0086               	movwf	6
 10527  0C5A  0829               	movf	??_readIAnalog+1,w
 10528  0C5B  3D2D               	addwfc	??_readIAnalog+5,w
 10529  0C5C  0087               	movwf	7
 10530  0C5D  087B               	movf	readIAnalog@value,w
 10531  0C5E  3FC0               	movwi [0]fsr1
 10532  0C5F  087C               	movf	readIAnalog@value+1,w
 10533  0C60  3FC1               	movwi [1]fsr1
 10534                           
 10535                           ;adc.c: 89: Itotals[channel] = Itotals[channel]+Isamples[channel][IsampleIndex];
 10536  0C61  0826               	movf	readIAnalog@channel,w
 10537  0C62  00A8               	movwf	??_readIAnalog
 10538  0C63  3001               	movlw	1
 10539  0C64                     u3445:	
 10540  0C64  35A8               	lslf	??_readIAnalog,f
 10541  0C65  3EFF               	addlw	-1
 10542  0C66  1D03               	skipz
 10543  0C67  2C64               	goto	u3445
 10544  0C68  3528               	lslf	??_readIAnalog,w
 10545  0C69  3E20               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10546  0C6A  0086               	movwf	6
 10547  0C6B  3001               	movlw	1	; select bank2/3
 10548  0C6C  0087               	movwf	7
 10549  0C6D  3F40               	moviw [0]fsr1
 10550  0C6E  00A9               	movwf	??_readIAnalog+1
 10551  0C6F  3F41               	moviw [1]fsr1
 10552  0C70  00AA               	movwf	??_readIAnalog+2
 10553  0C71  3F42               	moviw [2]fsr1
 10554  0C72  00AB               	movwf	??_readIAnalog+3
 10555  0C73  3F43               	moviw [3]fsr1
 10556  0C74  00AC               	movwf	??_readIAnalog+4
 10557  0C75  0863               	movf	_IsampleIndex+1,w
 10558  0C76  00AE               	movwf	??_readIAnalog+6
 10559  0C77  0862               	movf	_IsampleIndex,w
 10560  0C78  00AD               	movwf	??_readIAnalog+5
 10561  0C79  35AD               	lslf	??_readIAnalog+5,f
 10562  0C7A  0DAE               	rlf	??_readIAnalog+6,f
 10563  0C7B  0827               	movf	readIAnalog@channel+1,w
 10564  0C7C  00F1               	movwf	___wmul@multiplier+1
 10565  0C7D  0826               	movf	readIAnalog@channel,w
 10566  0C7E  00F0               	movwf	___wmul@multiplier
 10567  0C7F  3064               	movlw	100
 10568  0C80  00F2               	movwf	___wmul@multiplicand
 10569  0C81  3000               	movlw	0
 10570  0C82  00F3               	movwf	___wmul@multiplicand+1
 10571  0C83  319E  2699  318B   	fcall	___wmul
 10572  0C86  3060               	movlw	96
 10573  0C87  0020               	movlb	0	; select bank0
 10574  0C88  00AF               	movwf	??_readIAnalog+7
 10575  0C89  3022               	movlw	34
 10576  0C8A  00B0               	movwf	??_readIAnalog+8
 10577  0C8B  0870               	movf	?___wmul,w
 10578  0C8C  072F               	addwf	??_readIAnalog+7,w
 10579  0C8D  00B1               	movwf	??_readIAnalog+9
 10580  0C8E  0871               	movf	?___wmul+1,w
 10581  0C8F  3D30               	addwfc	??_readIAnalog+8,w
 10582  0C90  00B2               	movwf	??_readIAnalog+10
 10583  0C91  082D               	movf	??_readIAnalog+5,w
 10584  0C92  0731               	addwf	??_readIAnalog+9,w
 10585  0C93  0086               	movwf	6
 10586  0C94  082E               	movf	??_readIAnalog+6,w
 10587  0C95  3D32               	addwfc	??_readIAnalog+10,w
 10588  0C96  0087               	movwf	7
 10589  0C97  3F40               	moviw [0]fsr1
 10590  0C98  00B3               	movwf	??_readIAnalog+11
 10591  0C99  3F41               	moviw [1]fsr1
 10592  0C9A  00B4               	movwf	??_readIAnalog+12
 10593  0C9B  0833               	movf	??_readIAnalog+11,w
 10594  0C9C  00B5               	movwf	??_readIAnalog+13
 10595  0C9D  0834               	movf	??_readIAnalog+12,w
 10596  0C9E  00B6               	movwf	??_readIAnalog+14
 10597  0C9F  3000               	movlw	0
 10598  0CA0  1BB6               	btfsc	??_readIAnalog+14,7
 10599  0CA1  30FF               	movlw	255
 10600  0CA2  00B7               	movwf	??_readIAnalog+15
 10601  0CA3  00B8               	movwf	??_readIAnalog+16
 10602  0CA4  0835               	movf	??_readIAnalog+13,w
 10603  0CA5  07A9               	addwf	??_readIAnalog+1,f
 10604  0CA6  0836               	movf	??_readIAnalog+14,w
 10605  0CA7  3DAA               	addwfc	??_readIAnalog+2,f
 10606  0CA8  0837               	movf	??_readIAnalog+15,w
 10607  0CA9  3DAB               	addwfc	??_readIAnalog+3,f
 10608  0CAA  0838               	movf	??_readIAnalog+16,w
 10609  0CAB  3DAC               	addwfc	??_readIAnalog+4,f
 10610  0CAC  0826               	movf	readIAnalog@channel,w
 10611  0CAD  00B9               	movwf	??_readIAnalog+17
 10612  0CAE  3001               	movlw	1
 10613  0CAF                     u3455:	
 10614  0CAF  35B9               	lslf	??_readIAnalog+17,f
 10615  0CB0  3EFF               	addlw	-1
 10616  0CB1  1D03               	skipz
 10617  0CB2  2CAF               	goto	u3455
 10618  0CB3  3539               	lslf	??_readIAnalog+17,w
 10619  0CB4  3E20               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10620  0CB5  0086               	movwf	6
 10621  0CB6  3001               	movlw	1	; select bank2/3
 10622  0CB7  0087               	movwf	7
 10623  0CB8  0829               	movf	??_readIAnalog+1,w
 10624  0CB9  3FC0               	movwi [0]fsr1
 10625  0CBA  082A               	movf	??_readIAnalog+2,w
 10626  0CBB  3FC1               	movwi [1]fsr1
 10627  0CBC  082B               	movf	??_readIAnalog+3,w
 10628  0CBD  3FC2               	movwi [2]fsr1
 10629  0CBE  082C               	movf	??_readIAnalog+4,w
 10630  0CBF  3FC3               	movwi [3]fsr1
 10631                           
 10632                           ;adc.c: 91: if(channel>=(4-1))
 10633  0CC0  3000               	movlw	0
 10634  0CC1  0227               	subwf	readIAnalog@channel+1,w
 10635  0CC2  3003               	movlw	3
 10636  0CC3  1903               	skipnz
 10637  0CC4  0226               	subwf	readIAnalog@channel,w
 10638  0CC5  1C03               	skipc
 10639  0CC6  2CD4               	goto	l3060
 10640                           
 10641                           ;adc.c: 92: {
 10642                           ;adc.c: 93: IsampleIndex+=1;
 10643  0CC7  3001               	movlw	1
 10644  0CC8  07E2               	addwf	_IsampleIndex,f
 10645  0CC9  3000               	movlw	0
 10646  0CCA  3DE3               	addwfc	_IsampleIndex+1,f
 10647                           
 10648                           ;adc.c: 94: if(IsampleIndex >= 50)IsampleIndex = 0;
 10649  0CCB  3000               	movlw	0
 10650  0CCC  0263               	subwf	_IsampleIndex+1,w
 10651  0CCD  3032               	movlw	50
 10652  0CCE  1903               	skipnz
 10653  0CCF  0262               	subwf	_IsampleIndex,w
 10654  0CD0  1C03               	skipc
 10655  0CD1  2CD4               	goto	l3060
 10656  0CD2  01E2               	clrf	_IsampleIndex
 10657  0CD3  01E3               	clrf	_IsampleIndex+1
 10658  0CD4                     l3060:	
 10659                           
 10660                           ;adc.c: 95: }
 10661                           ;adc.c: 97: value = Itotals[channel]/50;
 10662  0CD4  3000               	movlw	0
 10663  0CD5  00F3               	movwf	___aldiv@divisor+3
 10664  0CD6  3000               	movlw	0
 10665  0CD7  00F2               	movwf	___aldiv@divisor+2
 10666  0CD8  3000               	movlw	0
 10667  0CD9  00F1               	movwf	___aldiv@divisor+1
 10668  0CDA  3032               	movlw	50
 10669  0CDB  00F0               	movwf	___aldiv@divisor
 10670  0CDC  0826               	movf	readIAnalog@channel,w
 10671  0CDD  00A8               	movwf	??_readIAnalog
 10672  0CDE  3001               	movlw	1
 10673  0CDF                     u3485:	
 10674  0CDF  35A8               	lslf	??_readIAnalog,f
 10675  0CE0  3EFF               	addlw	-1
 10676  0CE1  1D03               	skipz
 10677  0CE2  2CDF               	goto	u3485
 10678  0CE3  3528               	lslf	??_readIAnalog,w
 10679  0CE4  3E20               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10680  0CE5  0086               	movwf	6
 10681  0CE6  3001               	movlw	1	; select bank2/3
 10682  0CE7  0087               	movwf	7
 10683  0CE8  3F40               	moviw [0]fsr1
 10684  0CE9  00F4               	movwf	___aldiv@dividend
 10685  0CEA  3F41               	moviw [1]fsr1
 10686  0CEB  00F5               	movwf	___aldiv@dividend+1
 10687  0CEC  3F42               	moviw [2]fsr1
 10688  0CED  00F6               	movwf	___aldiv@dividend+2
 10689  0CEE  3F43               	moviw [3]fsr1
 10690  0CEF  00F7               	movwf	___aldiv@dividend+3
 10691  0CF0  3194  2467         	fcall	___aldiv
 10692  0CF2  0871               	movf	?___aldiv+1,w
 10693  0CF3  00FC               	movwf	readIAnalog@value+1
 10694  0CF4  0870               	movf	?___aldiv,w
 10695  0CF5  00FB               	movwf	readIAnalog@value
 10696                           
 10697                           ;adc.c: 99: return value;
 10698  0CF6  087C               	movf	readIAnalog@value+1,w
 10699  0CF7  0020               	movlb	0	; select bank0
 10700  0CF8  00A7               	movwf	?_readIAnalog+1
 10701  0CF9  087B               	movf	readIAnalog@value,w
 10702  0CFA  00A6               	movwf	?_readIAnalog
 10703  0CFB  0008               	return
 10704  0CFC                     __end_of_readIAnalog:	
 10705                           
 10706                           	psect	text11
 10707  1467                     __ptext11:	
 10708 ;; *************** function ___aldiv *****************
 10709 ;; Defined at:
 10710 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
 10711 ;; Parameters:    Size  Location     Type
 10712 ;;  divisor         4    0[COMMON] long 
 10713 ;;  dividend        4    4[COMMON] long 
 10714 ;; Auto vars:     Size  Location     Type
 10715 ;;  quotient        4    2[BANK0 ] long 
 10716 ;;  sign            1    1[BANK0 ] unsigned char 
 10717 ;;  counter         1    0[BANK0 ] unsigned char 
 10718 ;; Return value:  Size  Location     Type
 10719 ;;                  4    0[COMMON] long 
 10720 ;; Registers used:
 10721 ;;		wreg, status,2, status,0
 10722 ;; Tracked objects:
 10723 ;;		On entry : 0/0
 10724 ;;		On exit  : 0/0
 10725 ;;		Unchanged: 0/0
 10726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10727 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10728 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10729 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10730 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10731 ;;Total ram usage:       15 bytes
 10732 ;; Hardware stack levels used:    1
 10733 ;; This function calls:
 10734 ;;		Nothing
 10735 ;; This function is called by:
 10736 ;;		_readIAnalog
 10737 ;;		_readVAnalog
 10738 ;; This function uses a non-reentrant model
 10739 ;;
 10740                           
 10741                           
 10742                           ;psect for function ___aldiv
 10743  1467                     ___aldiv:	
 10744                           
 10745                           ;incstack = 0
 10746                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 10747  1467  0020               	movlb	0	; select bank0
 10748  1468  01A1               	clrf	___aldiv@sign
 10749  1469  1FF3               	btfss	___aldiv@divisor+3,7
 10750  146A  2C78               	goto	l681
 10751  146B  09F0               	comf	___aldiv@divisor,f
 10752  146C  09F1               	comf	___aldiv@divisor+1,f
 10753  146D  09F2               	comf	___aldiv@divisor+2,f
 10754  146E  09F3               	comf	___aldiv@divisor+3,f
 10755  146F  0AF0               	incf	___aldiv@divisor,f
 10756  1470  1903               	skipnz
 10757  1471  0AF1               	incf	___aldiv@divisor+1,f
 10758  1472  1903               	skipnz
 10759  1473  0AF2               	incf	___aldiv@divisor+2,f
 10760  1474  1903               	skipnz
 10761  1475  0AF3               	incf	___aldiv@divisor+3,f
 10762  1476  01A1               	clrf	___aldiv@sign
 10763  1477  0AA1               	incf	___aldiv@sign,f
 10764  1478                     l681:	
 10765  1478  1FF7               	btfss	___aldiv@dividend+3,7
 10766  1479  2C89               	goto	l2890
 10767  147A  09F4               	comf	___aldiv@dividend,f
 10768  147B  09F5               	comf	___aldiv@dividend+1,f
 10769  147C  09F6               	comf	___aldiv@dividend+2,f
 10770  147D  09F7               	comf	___aldiv@dividend+3,f
 10771  147E  0AF4               	incf	___aldiv@dividend,f
 10772  147F  1903               	skipnz
 10773  1480  0AF5               	incf	___aldiv@dividend+1,f
 10774  1481  1903               	skipnz
 10775  1482  0AF6               	incf	___aldiv@dividend+2,f
 10776  1483  1903               	skipnz
 10777  1484  0AF7               	incf	___aldiv@dividend+3,f
 10778  1485  3001               	movlw	1
 10779  1486  00F8               	movwf	??___aldiv
 10780  1487  0878               	movf	??___aldiv,w
 10781  1488  06A1               	xorwf	___aldiv@sign,f
 10782  1489                     l2890:	
 10783  1489  3000               	movlw	0
 10784  148A  00A5               	movwf	___aldiv@quotient+3
 10785  148B  3000               	movlw	0
 10786  148C  00A4               	movwf	___aldiv@quotient+2
 10787  148D  3000               	movlw	0
 10788  148E  00A3               	movwf	___aldiv@quotient+1
 10789  148F  3000               	movlw	0
 10790  1490  00A2               	movwf	___aldiv@quotient
 10791  1491  0873               	movf	___aldiv@divisor+3,w
 10792  1492  0472               	iorwf	___aldiv@divisor+2,w
 10793  1493  0471               	iorwf	___aldiv@divisor+1,w
 10794  1494  0470               	iorwf	___aldiv@divisor,w
 10795  1495  1903               	skipnz
 10796  1496  2CD2               	goto	l2912
 10797  1497  01A0               	clrf	___aldiv@counter
 10798  1498  0AA0               	incf	___aldiv@counter,f
 10799  1499                     l2898:	
 10800  1499  1BF3               	btfsc	___aldiv@divisor+3,7
 10801  149A  2CA7               	goto	l2900
 10802  149B  3001               	movlw	1
 10803  149C                     u3105:	
 10804  149C  35F0               	lslf	___aldiv@divisor,f
 10805  149D  0DF1               	rlf	___aldiv@divisor+1,f
 10806  149E  0DF2               	rlf	___aldiv@divisor+2,f
 10807  149F  0DF3               	rlf	___aldiv@divisor+3,f
 10808  14A0  0B89               	decfsz	9,f
 10809  14A1  2C9C               	goto	u3105
 10810  14A2  3001               	movlw	1
 10811  14A3  00F8               	movwf	??___aldiv
 10812  14A4  0878               	movf	??___aldiv,w
 10813  14A5  07A0               	addwf	___aldiv@counter,f
 10814  14A6  2C99               	goto	l2898
 10815  14A7                     l2900:	
 10816  14A7  3001               	movlw	1
 10817  14A8                     u3125:	
 10818  14A8  35A2               	lslf	___aldiv@quotient,f
 10819  14A9  0DA3               	rlf	___aldiv@quotient+1,f
 10820  14AA  0DA4               	rlf	___aldiv@quotient+2,f
 10821  14AB  0DA5               	rlf	___aldiv@quotient+3,f
 10822  14AC  0B89               	decfsz	9,f
 10823  14AD  2CA8               	goto	u3125
 10824  14AE  0873               	movf	___aldiv@divisor+3,w
 10825  14AF  0277               	subwf	___aldiv@dividend+3,w
 10826  14B0  1D03               	skipz
 10827  14B1  2CBC               	goto	u3135
 10828  14B2  0872               	movf	___aldiv@divisor+2,w
 10829  14B3  0276               	subwf	___aldiv@dividend+2,w
 10830  14B4  1D03               	skipz
 10831  14B5  2CBC               	goto	u3135
 10832  14B6  0871               	movf	___aldiv@divisor+1,w
 10833  14B7  0275               	subwf	___aldiv@dividend+1,w
 10834  14B8  1D03               	skipz
 10835  14B9  2CBC               	goto	u3135
 10836  14BA  0870               	movf	___aldiv@divisor,w
 10837  14BB  0274               	subwf	___aldiv@dividend,w
 10838  14BC                     u3135:	
 10839  14BC  1C03               	skipc
 10840  14BD  2CC7               	goto	l2908
 10841  14BE  0870               	movf	___aldiv@divisor,w
 10842  14BF  02F4               	subwf	___aldiv@dividend,f
 10843  14C0  0871               	movf	___aldiv@divisor+1,w
 10844  14C1  3BF5               	subwfb	___aldiv@dividend+1,f
 10845  14C2  0872               	movf	___aldiv@divisor+2,w
 10846  14C3  3BF6               	subwfb	___aldiv@dividend+2,f
 10847  14C4  0873               	movf	___aldiv@divisor+3,w
 10848  14C5  3BF7               	subwfb	___aldiv@dividend+3,f
 10849  14C6  1422               	bsf	___aldiv@quotient,0
 10850  14C7                     l2908:	
 10851  14C7  3001               	movlw	1
 10852  14C8                     u3145:	
 10853  14C8  36F3               	lsrf	___aldiv@divisor+3,f
 10854  14C9  0CF2               	rrf	___aldiv@divisor+2,f
 10855  14CA  0CF1               	rrf	___aldiv@divisor+1,f
 10856  14CB  0CF0               	rrf	___aldiv@divisor,f
 10857  14CC  0B89               	decfsz	9,f
 10858  14CD  2CC8               	goto	u3145
 10859  14CE  3001               	movlw	1
 10860  14CF  02A0               	subwf	___aldiv@counter,f
 10861  14D0  1D03               	btfss	3,2
 10862  14D1  2CA7               	goto	l2900
 10863  14D2                     l2912:	
 10864  14D2  0821               	movf	___aldiv@sign,w
 10865  14D3  1903               	btfsc	3,2
 10866  14D4  2CE0               	goto	l2916
 10867  14D5  09A2               	comf	___aldiv@quotient,f
 10868  14D6  09A3               	comf	___aldiv@quotient+1,f
 10869  14D7  09A4               	comf	___aldiv@quotient+2,f
 10870  14D8  09A5               	comf	___aldiv@quotient+3,f
 10871  14D9  0AA2               	incf	___aldiv@quotient,f
 10872  14DA  1903               	skipnz
 10873  14DB  0AA3               	incf	___aldiv@quotient+1,f
 10874  14DC  1903               	skipnz
 10875  14DD  0AA4               	incf	___aldiv@quotient+2,f
 10876  14DE  1903               	skipnz
 10877  14DF  0AA5               	incf	___aldiv@quotient+3,f
 10878  14E0                     l2916:	
 10879  14E0  0825               	movf	___aldiv@quotient+3,w
 10880  14E1  00F3               	movwf	?___aldiv+3
 10881  14E2  0824               	movf	___aldiv@quotient+2,w
 10882  14E3  00F2               	movwf	?___aldiv+2
 10883  14E4  0823               	movf	___aldiv@quotient+1,w
 10884  14E5  00F1               	movwf	?___aldiv+1
 10885  14E6  0822               	movf	___aldiv@quotient,w
 10886  14E7  00F0               	movwf	?___aldiv
 10887  14E8  0008               	return
 10888  14E9                     __end_of___aldiv:	
 10889                           
 10890                           	psect	text12
 10891  14E9                     __ptext12:	
 10892 ;; *************** function _readButton *****************
 10893 ;; Defined at:
 10894 ;;		line 8 in file "buttons.c"
 10895 ;; Parameters:    Size  Location     Type
 10896 ;;		None
 10897 ;; Auto vars:     Size  Location     Type
 10898 ;;		None
 10899 ;; Return value:  Size  Location     Type
 10900 ;;                  1    wreg      unsigned char 
 10901 ;; Registers used:
 10902 ;;		wreg, status,2, status,0, pclath, cstack
 10903 ;; Tracked objects:
 10904 ;;		On entry : 0/0
 10905 ;;		On exit  : 0/0
 10906 ;;		Unchanged: 0/0
 10907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10910 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10911 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10912 ;;Total ram usage:        3 bytes
 10913 ;; Hardware stack levels used:    1
 10914 ;; Hardware stack levels required when called:    1
 10915 ;; This function calls:
 10916 ;;		_ADCRead
 10917 ;; This function is called by:
 10918 ;;		_main
 10919 ;; This function uses a non-reentrant model
 10920 ;;
 10921                           
 10922                           
 10923                           ;psect for function _readButton
 10924  14E9                     _readButton:	
 10925                           
 10926                           ;buttons.c: 10: readButtons=ADCRead(11);
 10927                           
 10928                           ;incstack = 0
 10929                           ; Regs used in _readButton: [wreg+status,2+status,0+pclath+cstack]
 10930  14E9  300B               	movlw	11
 10931  14EA  319E  2642  3194   	fcall	_ADCRead
 10932  14ED  0871               	movf	?_ADCRead+1,w
 10933  14EE  0020               	movlb	0	; select bank0
 10934  14EF  00E9               	movwf	_readButtons+1
 10935  14F0  0870               	movf	?_ADCRead,w
 10936  14F1  00E8               	movwf	_readButtons
 10937                           
 10938                           ;buttons.c: 12: if(readButtons>=365&&readButtons<405)
 10939  14F2  0869               	movf	_readButtons+1,w
 10940  14F3  3A80               	xorlw	128
 10941  14F4  00F4               	movwf	??_readButton
 10942  14F5  3081               	movlw	129
 10943  14F6  0274               	subwf	??_readButton,w
 10944  14F7  1D03               	skipz
 10945  14F8  2CFB               	goto	u3645
 10946  14F9  306D               	movlw	109
 10947  14FA  0268               	subwf	_readButtons,w
 10948  14FB                     u3645:	
 10949  14FB  1C03               	skipc
 10950  14FC  2D0D               	goto	l3116
 10951  14FD  0020               	movlb	0	; select bank0
 10952  14FE  0869               	movf	_readButtons+1,w
 10953  14FF  3A80               	xorlw	128
 10954  1500  00F4               	movwf	??_readButton
 10955  1501  3081               	movlw	129
 10956  1502  0274               	subwf	??_readButton,w
 10957  1503  1D03               	skipz
 10958  1504  2D07               	goto	u3655
 10959  1505  3095               	movlw	149
 10960  1506  0268               	subwf	_readButtons,w
 10961  1507                     u3655:	
 10962  1507  1803               	skipnc
 10963  1508  2D0D               	goto	l3116
 10964                           
 10965                           ;buttons.c: 13: {
 10966                           ;buttons.c: 14: button=1;
 10967  1509  0020               	movlb	0	; select bank0
 10968  150A  01EA               	clrf	_button
 10969  150B  0AEA               	incf	_button,f
 10970                           
 10971                           ;buttons.c: 15: }
 10972  150C  2D3B               	goto	l3128
 10973  150D                     l3116:	
 10974                           
 10975                           ;buttons.c: 17: else if(readButtons>=535&&readButtons<590)
 10976  150D  0020               	movlb	0	; select bank0
 10977  150E  0869               	movf	_readButtons+1,w
 10978  150F  3A80               	xorlw	128
 10979  1510  00F4               	movwf	??_readButton
 10980  1511  3082               	movlw	130
 10981  1512  0274               	subwf	??_readButton,w
 10982  1513  1D03               	skipz
 10983  1514  2D17               	goto	u3665
 10984  1515  3017               	movlw	23
 10985  1516  0268               	subwf	_readButtons,w
 10986  1517                     u3665:	
 10987  1517  1C03               	skipc
 10988  1518  2D27               	goto	l3122
 10989  1519  0020               	movlb	0	; select bank0
 10990  151A  0869               	movf	_readButtons+1,w
 10991  151B  3A80               	xorlw	128
 10992  151C  00F4               	movwf	??_readButton
 10993  151D  3082               	movlw	130
 10994  151E  0274               	subwf	??_readButton,w
 10995  151F  1D03               	skipz
 10996  1520  2D23               	goto	u3675
 10997  1521  304E               	movlw	78
 10998  1522  0268               	subwf	_readButtons,w
 10999  1523                     u3675:	
 11000  1523  1803               	skipnc
 11001  1524  2D27               	goto	l3122
 11002                           
 11003                           ;buttons.c: 18: {
 11004                           ;buttons.c: 19: button=2;
 11005  1525  3002               	movlw	2
 11006  1526  2D34               	goto	L8
 11007  1527                     l3122:	
 11008                           ;buttons.c: 20: }
 11009                           
 11010                           
 11011                           ;buttons.c: 22: else if(readButtons>745)
 11012  1527  0020               	movlb	0	; select bank0
 11013  1528  0869               	movf	_readButtons+1,w
 11014  1529  3A80               	xorlw	128
 11015  152A  00F4               	movwf	??_readButton
 11016  152B  3082               	movlw	130
 11017  152C  0274               	subwf	??_readButton,w
 11018  152D  1D03               	skipz
 11019  152E  2D31               	goto	u3685
 11020  152F  30EA               	movlw	234
 11021  1530  0268               	subwf	_readButtons,w
 11022  1531                     u3685:	
 11023  1531  1C03               	skipc
 11024  1532  2D39               	goto	l3126
 11025                           
 11026                           ;buttons.c: 23: {
 11027                           ;buttons.c: 24: button=3;
 11028  1533  3003               	movlw	3
 11029  1534                     L8:	
 11030  1534  00F4               	movwf	??_readButton
 11031  1535  0874               	movf	??_readButton,w
 11032  1536  0020               	movlb	0	; select bank0
 11033  1537  00EA               	movwf	_button
 11034                           
 11035                           ;buttons.c: 25: }
 11036  1538  2D3B               	goto	l3128
 11037  1539                     l3126:	
 11038                           
 11039                           ;buttons.c: 27: else
 11040                           ;buttons.c: 28: {
 11041                           ;buttons.c: 29: button=0;
 11042  1539  0020               	movlb	0	; select bank0
 11043  153A  01EA               	clrf	_button
 11044  153B                     l3128:	
 11045                           
 11046                           ;buttons.c: 30: }
 11047                           ;buttons.c: 32: if (button!=0)
 11048  153B  086A               	movf	_button,w
 11049  153C  1903               	btfsc	3,2
 11050  153D  2D69               	goto	l3148
 11051                           
 11052                           ;buttons.c: 33: {
 11053                           ;buttons.c: 34: if (button!=lastButton)
 11054  153E  086A               	movf	_button,w
 11055  153F  066C               	xorwf	_lastButton,w
 11056  1540  1903               	skipnz
 11057  1541  2D47               	goto	l3136
 11058                           
 11059                           ;buttons.c: 35: {
 11060                           ;buttons.c: 36: lastButton=button;
 11061  1542  086A               	movf	_button,w
 11062  1543  00F4               	movwf	??_readButton
 11063  1544  0874               	movf	??_readButton,w
 11064  1545  00EC               	movwf	_lastButton
 11065  1546  2D69               	goto	l3148
 11066  1547                     l3136:	
 11067                           ;buttons.c: 38: }
 11068                           
 11069                           ;buttons.c: 37: j=0;
 11070                           
 11071                           
 11072                           ;buttons.c: 39: else
 11073                           ;buttons.c: 40: {
 11074                           ;buttons.c: 41: j+=1;
 11075  1547  3001               	movlw	1
 11076  1548  00F4               	movwf	??_readButton
 11077  1549  0874               	movf	??_readButton,w
 11078  154A  07EB               	addwf	_j,f
 11079                           
 11080                           ;buttons.c: 43: if(j==1)
 11081  154B  036B               	decf	_j,w
 11082  154C  1D03               	btfss	3,2
 11083  154D  2D50               	goto	l3142
 11084                           
 11085                           ;buttons.c: 44: {
 11086                           ;buttons.c: 45: return (lastButton);
 11087  154E  086C               	movf	_lastButton,w
 11088  154F  0008               	return
 11089  1550                     l3142:	
 11090                           
 11091                           ;buttons.c: 46: }
 11092                           ;buttons.c: 48: if (j>10)
 11093  1550  086B               	movf	_j,w
 11094  1551  3A80               	xorlw	128
 11095  1552  3E75               	addlw	-139
 11096  1553  1C03               	skipc
 11097  1554  2D6A               	goto	l3150
 11098                           
 11099                           ;buttons.c: 49: {
 11100                           ;buttons.c: 50: _delay((unsigned long)((25)*(32000000/4000.0)));
 11101  1555  3002               	movlw	2
 11102  1556  00F6               	movwf	??_readButton+2
 11103  1557  3004               	movlw	4
 11104  1558  00F5               	movwf	??_readButton+1
 11105  1559  30BA               	movlw	186
 11106  155A  00F4               	movwf	??_readButton
 11107  155B                     u4527:	
 11108  155B  0BF4               	decfsz	??_readButton,f
 11109  155C  2D5B               	goto	u4527
 11110  155D  0BF5               	decfsz	??_readButton+1,f
 11111  155E  2D5B               	goto	u4527
 11112  155F  0BF6               	decfsz	??_readButton+2,f
 11113  1560  2D5B               	goto	u4527
 11114  1561  0000               	nop
 11115                           
 11116                           ;buttons.c: 51: j=10;
 11117  1562  300A               	movlw	10
 11118  1563  00F4               	movwf	??_readButton
 11119  1564  0874               	movf	??_readButton,w
 11120  1565  0020               	movlb	0	; select bank0
 11121  1566  00EB               	movwf	_j
 11122                           
 11123                           ;buttons.c: 52: return (lastButton);
 11124  1567  086C               	movf	_lastButton,w
 11125  1568  0008               	return
 11126  1569                     l3148:	
 11127                           ;buttons.c: 53: }
 11128                           ;buttons.c: 54: }
 11129                           ;buttons.c: 55: goto end;
 11130                           
 11131                           
 11132                           ;buttons.c: 56: }
 11133                           ;buttons.c: 58: j=0;
 11134  1569  01EB               	clrf	_j
 11135  156A                     l3150:	
 11136                           ;buttons.c: 60: end:
 11137                           
 11138                           
 11139                           ;buttons.c: 62: return (0);
 11140  156A  3000               	movlw	0
 11141  156B  0008               	return
 11142  156C                     __end_of_readButton:	
 11143                           
 11144                           	psect	text13
 11145  1E42                     __ptext13:	
 11146 ;; *************** function _ADCRead *****************
 11147 ;; Defined at:
 11148 ;;		line 21 in file "adc.c"
 11149 ;; Parameters:    Size  Location     Type
 11150 ;;  channel         1    wreg     enum E13615
 11151 ;; Auto vars:     Size  Location     Type
 11152 ;;  channel         1    3[COMMON] enum E13615
 11153 ;; Return value:  Size  Location     Type
 11154 ;;                  2    0[COMMON] int 
 11155 ;; Registers used:
 11156 ;;		wreg
 11157 ;; Tracked objects:
 11158 ;;		On entry : 0/0
 11159 ;;		On exit  : 0/0
 11160 ;;		Unchanged: 0/0
 11161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11162 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11163 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11165 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11166 ;;Total ram usage:        4 bytes
 11167 ;; Hardware stack levels used:    1
 11168 ;; This function calls:
 11169 ;;		Nothing
 11170 ;; This function is called by:
 11171 ;;		_main
 11172 ;;		_readIAnalog
 11173 ;;		_readVAnalog
 11174 ;;		_readButton
 11175 ;; This function uses a non-reentrant model
 11176 ;;
 11177                           
 11178                           
 11179                           ;psect for function _ADCRead
 11180  1E42                     _ADCRead:	
 11181                           
 11182                           ;incstack = 0
 11183                           ; Regs used in _ADCRead: [wreg]
 11184                           ;ADCRead@channel stored from wreg
 11185  1E42  00F3               	movwf	ADCRead@channel
 11186                           
 11187                           ;adc.c: 23: ADPCH = channel_VSS;
 11188  1E43  303C               	movlw	60
 11189  1E44  0021               	movlb	1	; select bank1
 11190  1E45  009E               	movwf	30	;volatile
 11191                           
 11192                           ;adc.c: 25: ADCON0bits.ADON = 1;
 11193  1E46  1793               	bsf	19,7	;volatile
 11194                           
 11195                           ;adc.c: 27: ADCON0bits.ADCONT = 0;
 11196  1E47  1313               	bcf	19,6	;volatile
 11197                           
 11198                           ;adc.c: 29: ADCON0bits.ADGO = 1;
 11199  1E48  1413               	bsf	19,0	;volatile
 11200  1E49                     l213:	
 11201                           ;adc.c: 32: {
 11202                           
 11203                           ;adc.c: 31: while(ADCON0bits.ADGO)
 11204                           
 11205  1E49  1813               	btfsc	19,0	;volatile
 11206  1E4A  2E49               	goto	l213
 11207                           
 11208                           ;adc.c: 33: }
 11209                           ;adc.c: 35: ADPCH = channel;
 11210  1E4B  0873               	movf	ADCRead@channel,w
 11211  1E4C  009E               	movwf	30	;volatile
 11212                           
 11213                           ;adc.c: 37: ADCON0bits.ADON = 1;
 11214  1E4D  1793               	bsf	19,7	;volatile
 11215                           
 11216                           ;adc.c: 39: ADCON0bits.ADCONT = 0;
 11217  1E4E  1313               	bcf	19,6	;volatile
 11218                           
 11219                           ;adc.c: 41: ADCON0bits.ADGO = 1;
 11220  1E4F  1413               	bsf	19,0	;volatile
 11221  1E50                     l216:	
 11222                           ;adc.c: 44: {
 11223                           
 11224                           ;adc.c: 43: while(ADCON0bits.ADGO)
 11225                           
 11226  1E50  1813               	btfsc	19,0	;volatile
 11227  1E51  2E50               	goto	l216
 11228                           
 11229                           ;adc.c: 45: }
 11230                           ;adc.c: 47: return ((ADRESH<<8)+ADRESL);
 11231  1E52  080D               	movf	13,w	;volatile
 11232  1E53  00F1               	movwf	?_ADCRead+1
 11233  1E54  080C               	movf	12,w	;volatile
 11234  1E55  00F0               	movwf	?_ADCRead
 11235  1E56  0008               	return
 11236  1E57                     __end_of_ADCRead:	
 11237                           
 11238                           	psect	text14
 11239  0CFC                     __ptext14:	
 11240 ;; *************** function _cc_cv_mode *****************
 11241 ;; Defined at:
 11242 ;;		line 103 in file "battery_charger.c"
 11243 ;; Parameters:    Size  Location     Type
 11244 ;;  z               1    wreg     unsigned char 
 11245 ;; Auto vars:     Size  Location     Type
 11246 ;;  z               1   38[BANK0 ] unsigned char 
 11247 ;; Return value:  Size  Location     Type
 11248 ;;                  1    wreg      void 
 11249 ;; Registers used:
 11250 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11251 ;; Tracked objects:
 11252 ;;		On entry : 0/0
 11253 ;;		On exit  : 0/0
 11254 ;;		Unchanged: 0/0
 11255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11257 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11258 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11259 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11260 ;;Total ram usage:        8 bytes
 11261 ;; Hardware stack levels used:    1
 11262 ;; Hardware stack levels required when called:    2
 11263 ;; This function calls:
 11264 ;;		___awtoft
 11265 ;;		___ftmul
 11266 ;;		___fttol
 11267 ;; This function is called by:
 11268 ;;		_main
 11269 ;; This function uses a non-reentrant model
 11270 ;;
 11271                           
 11272                           
 11273                           ;psect for function _cc_cv_mode
 11274  0CFC                     _cc_cv_mode:	
 11275                           
 11276                           ;incstack = 0
 11277                           ; Regs used in _cc_cv_mode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11278                           ;cc_cv_mode@z stored from wreg
 11279  0CFC  0020               	movlb	0	; select bank0
 11280  0CFD  00C6               	movwf	cc_cv_mode@z
 11281                           
 11282                           ;battery_charger.c: 105: if(voltage[z]>=Vref[z])
 11283  0CFE  3546               	lslf	cc_cv_mode@z,w
 11284  0CFF  3EB4               	addlw	(low (_Vref| 0))& (0+255)
 11285  0D00  0086               	movwf	6
 11286  0D01  0187               	clrf	7
 11287  0D02  3F40               	moviw [0]fsr1
 11288  0D03  00BF               	movwf	??_cc_cv_mode
 11289  0D04  3F41               	moviw [1]fsr1
 11290  0D05  00C0               	movwf	??_cc_cv_mode+1
 11291  0D06  3546               	lslf	cc_cv_mode@z,w
 11292  0D07  3EA8               	addlw	(low (_voltage| 0))& (0+255)
 11293  0D08  0086               	movwf	6
 11294  0D09  0187               	clrf	7
 11295  0D0A  3F40               	moviw [0]fsr1
 11296  0D0B  00C1               	movwf	??_cc_cv_mode+2
 11297  0D0C  3F41               	moviw [1]fsr1
 11298  0D0D  00C2               	movwf	??_cc_cv_mode+3
 11299  0D0E  0842               	movf	??_cc_cv_mode+3,w
 11300  0D0F  3A80               	xorlw	128
 11301  0D10  00C3               	movwf	??_cc_cv_mode+4
 11302  0D11  0840               	movf	??_cc_cv_mode+1,w
 11303  0D12  3A80               	xorlw	128
 11304  0D13  0243               	subwf	??_cc_cv_mode+4,w
 11305  0D14  1D03               	skipz
 11306  0D15  2D18               	goto	u3975
 11307  0D16  083F               	movf	??_cc_cv_mode,w
 11308  0D17  0241               	subwf	??_cc_cv_mode+2,w
 11309  0D18                     u3975:	
 11310  0D18  1C03               	skipc
 11311  0D19  2D58               	goto	l3304
 11312                           
 11313                           ;battery_charger.c: 106: {
 11314                           ;battery_charger.c: 107: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 11315  0D1A  0020               	movlb	0	; select bank0
 11316  0D1B  0846               	movf	cc_cv_mode@z,w
 11317  0D1C  3EC0               	addlw	(low (_VHoldMode| 0))& (0+255)
 11318  0D1D  0086               	movwf	6
 11319  0D1E  0187               	clrf	7
 11320  0D1F  0801               	movf	1,w
 11321  0D20  3A80               	xorlw	128
 11322  0D21  3E77               	addlw	-137
 11323  0D22  1803               	skipnc
 11324  0D23  2D2C               	goto	l295
 11325  0D24  3001               	movlw	1
 11326  0D25  00BF               	movwf	??_cc_cv_mode
 11327  0D26  0846               	movf	cc_cv_mode@z,w
 11328  0D27  3EC0               	addlw	(low (_VHoldMode| 0))& (0+255)
 11329  0D28  0086               	movwf	6
 11330  0D29  0187               	clrf	7
 11331  0D2A  083F               	movf	??_cc_cv_mode,w
 11332  0D2B  0781               	addwf	1,f
 11333  0D2C                     l295:	
 11334                           
 11335                           ;battery_charger.c: 108: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 11336  0D2C  0846               	movf	cc_cv_mode@z,w
 11337  0D2D  3EC0               	addlw	(low (_VHoldMode| 0))& (0+255)
 11338  0D2E  0086               	movwf	6
 11339  0D2F  0187               	clrf	7
 11340  0D30  0801               	movf	1,w
 11341  0D31  3A80               	xorlw	128
 11342  0D32  3E77               	addlw	-137
 11343  0D33  1803               	skipnc
 11344  0D34  2D3D               	goto	l296
 11345  0D35  3001               	movlw	1
 11346  0D36  00BF               	movwf	??_cc_cv_mode
 11347  0D37  0846               	movf	cc_cv_mode@z,w
 11348  0D38  3EC0               	addlw	(low (_VHoldMode| 0))& (0+255)
 11349  0D39  0086               	movwf	6
 11350  0D3A  0187               	clrf	7
 11351  0D3B  083F               	movf	??_cc_cv_mode,w
 11352  0D3C  0781               	addwf	1,f
 11353  0D3D                     l296:	
 11354                           
 11355                           ;battery_charger.c: 110: if(cc_cv[z])
 11356  0D3D  0846               	movf	cc_cv_mode@z,w
 11357  0D3E  3EC4               	addlw	(low (_cc_cv| 0))& (0+255)
 11358  0D3F  0086               	movwf	6
 11359  0D40  0187               	clrf	7
 11360  0D41  0801               	movf	1,w
 11361  0D42  1903               	btfsc	3,2
 11362  0D43  2D4B               	goto	l3300
 11363                           
 11364                           ;battery_charger.c: 111: {
 11365                           ;battery_charger.c: 112: cc_cv[z]-=1;
 11366  0D44  0846               	movf	cc_cv_mode@z,w
 11367  0D45  3EC4               	addlw	(low (_cc_cv| 0))& (0+255)
 11368  0D46  0086               	movwf	6
 11369  0D47  0187               	clrf	7
 11370  0D48  3001               	movlw	1
 11371  0D49  0281               	subwf	1,f
 11372                           
 11373                           ;battery_charger.c: 113: }
 11374  0D4A  2D80               	goto	l300
 11375  0D4B                     l3300:	
 11376                           
 11377                           ;battery_charger.c: 114: else
 11378                           ;battery_charger.c: 115: {
 11379                           ;battery_charger.c: 116: if(Imode[z])
 11380  0D4B  0846               	movf	cc_cv_mode@z,w
 11381  0D4C  3EBC               	addlw	(low (_Imode| 0))& (0+255)
 11382  0D4D  0086               	movwf	6
 11383  0D4E  0187               	clrf	7
 11384  0D4F  0801               	movf	1,w
 11385  0D50  1903               	btfsc	3,2
 11386  0D51  2D80               	goto	l300
 11387                           
 11388                           ;battery_charger.c: 117: {
 11389                           ;battery_charger.c: 118: Imode[z]=0;
 11390  0D52  0846               	movf	cc_cv_mode@z,w
 11391  0D53  3EBC               	addlw	(low (_Imode| 0))& (0+255)
 11392  0D54  0086               	movwf	6
 11393  0D55  0187               	clrf	7
 11394  0D56  0181               	clrf	1
 11395                           
 11396                           ;battery_charger.c: 119: }
 11397                           ;battery_charger.c: 120: }
 11398                           ;battery_charger.c: 121: }
 11399  0D57  2D80               	goto	l300
 11400  0D58                     l3304:	
 11401                           
 11402                           ;battery_charger.c: 122: else
 11403                           ;battery_charger.c: 123: {
 11404                           ;battery_charger.c: 124: VHoldMode[z]-=1;
 11405  0D58  30FF               	movlw	255
 11406  0D59  0020               	movlb	0	; select bank0
 11407  0D5A  00BF               	movwf	??_cc_cv_mode
 11408  0D5B  0846               	movf	cc_cv_mode@z,w
 11409  0D5C  3EC0               	addlw	(low (_VHoldMode| 0))& (0+255)
 11410  0D5D  0086               	movwf	6
 11411  0D5E  0187               	clrf	7
 11412  0D5F  083F               	movf	??_cc_cv_mode,w
 11413  0D60  0781               	addwf	1,f
 11414                           
 11415                           ;battery_charger.c: 125: if(VHoldMode[z]<(9*-1))
 11416  0D61  0846               	movf	cc_cv_mode@z,w
 11417  0D62  3EC0               	addlw	(low (_VHoldMode| 0))& (0+255)
 11418  0D63  0086               	movwf	6
 11419  0D64  0187               	clrf	7
 11420  0D65  0801               	movf	1,w
 11421  0D66  3A80               	xorlw	128
 11422  0D67  3E89               	addlw	137
 11423  0D68  1803               	skipnc
 11424  0D69  2D80               	goto	l300
 11425                           
 11426                           ;battery_charger.c: 126: {
 11427                           ;battery_charger.c: 127: Imode[z]=1;
 11428  0D6A  0846               	movf	cc_cv_mode@z,w
 11429  0D6B  3EBC               	addlw	(low (_Imode| 0))& (0+255)
 11430  0D6C  0086               	movwf	6
 11431  0D6D  0187               	clrf	7
 11432  0D6E  0181               	clrf	1
 11433  0D6F  0A81               	incf	1,f
 11434                           
 11435                           ;battery_charger.c: 128: cc_cv[z]=(9*2);
 11436  0D70  3012               	movlw	18
 11437  0D71  00BF               	movwf	??_cc_cv_mode
 11438  0D72  0846               	movf	cc_cv_mode@z,w
 11439  0D73  3EC4               	addlw	(low (_cc_cv| 0))& (0+255)
 11440  0D74  0086               	movwf	6
 11441  0D75  0187               	clrf	7
 11442  0D76  083F               	movf	??_cc_cv_mode,w
 11443  0D77  0081               	movwf	1
 11444                           
 11445                           ;battery_charger.c: 129: VHoldMode[z]=(9*-1);
 11446  0D78  30F7               	movlw	247
 11447  0D79  00BF               	movwf	??_cc_cv_mode
 11448  0D7A  0846               	movf	cc_cv_mode@z,w
 11449  0D7B  3EC0               	addlw	(low (_VHoldMode| 0))& (0+255)
 11450  0D7C  0086               	movwf	6
 11451  0D7D  0187               	clrf	7
 11452  0D7E  083F               	movf	??_cc_cv_mode,w
 11453  0D7F  0081               	movwf	1
 11454  0D80                     l300:	
 11455                           
 11456                           ;battery_charger.c: 130: }
 11457                           ;battery_charger.c: 131: }
 11458                           ;battery_charger.c: 133: if(current[z]>Iref[z])
 11459  0D80  3546               	lslf	cc_cv_mode@z,w
 11460  0D81  3EA0               	addlw	(low (_current| 0))& (0+255)
 11461  0D82  0086               	movwf	6
 11462  0D83  0187               	clrf	7
 11463  0D84  3F40               	moviw [0]fsr1
 11464  0D85  00BF               	movwf	??_cc_cv_mode
 11465  0D86  3F41               	moviw [1]fsr1
 11466  0D87  00C0               	movwf	??_cc_cv_mode+1
 11467  0D88  3546               	lslf	cc_cv_mode@z,w
 11468  0D89  3EB0               	addlw	(low (_Iref| 0))& (0+255)
 11469  0D8A  0086               	movwf	6
 11470  0D8B  0187               	clrf	7
 11471  0D8C  3F40               	moviw [0]fsr1
 11472  0D8D  00C1               	movwf	??_cc_cv_mode+2
 11473  0D8E  3F41               	moviw [1]fsr1
 11474  0D8F  00C2               	movwf	??_cc_cv_mode+3
 11475  0D90  0842               	movf	??_cc_cv_mode+3,w
 11476  0D91  3A80               	xorlw	128
 11477  0D92  00C3               	movwf	??_cc_cv_mode+4
 11478  0D93  0840               	movf	??_cc_cv_mode+1,w
 11479  0D94  3A80               	xorlw	128
 11480  0D95  0243               	subwf	??_cc_cv_mode+4,w
 11481  0D96  1D03               	skipz
 11482  0D97  2D9A               	goto	u4035
 11483  0D98  083F               	movf	??_cc_cv_mode,w
 11484  0D99  0241               	subwf	??_cc_cv_mode+2,w
 11485  0D9A                     u4035:	
 11486  0D9A  1803               	skipnc
 11487  0D9B  0008               	return
 11488                           
 11489                           ;battery_charger.c: 134: {
 11490                           ;battery_charger.c: 135: if(!(Imode[z]))
 11491  0D9C  0020               	movlb	0	; select bank0
 11492  0D9D  0846               	movf	cc_cv_mode@z,w
 11493  0D9E  3EBC               	addlw	(low (_Imode| 0))& (0+255)
 11494  0D9F  0086               	movwf	6
 11495  0DA0  0187               	clrf	7
 11496  0DA1  0801               	movf	1,w
 11497  0DA2  1D03               	btfss	3,2
 11498  0DA3  0008               	return
 11499                           
 11500                           ;battery_charger.c: 136: {
 11501                           ;battery_charger.c: 137: if(batteryState[z]==FLOAT)
 11502  0DA4  0846               	movf	cc_cv_mode@z,w
 11503  0DA5  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 11504  0DA6  0086               	movwf	6
 11505  0DA7  0187               	clrf	7
 11506  0DA8  3005               	movlw	5
 11507  0DA9  0601               	xorwf	1,w
 11508  0DAA  1D03               	btfss	3,2
 11509  0DAB  0008               	return
 11510                           
 11511                           ;battery_charger.c: 138: {
 11512                           ;battery_charger.c: 139: if(voltage[z]<1350+(int16_t)((250-batteryTemp)*.24)-70)
 11513  0DAC  0021               	movlb	1	; select bank1
 11514  0DAD  096D               	comf	_batteryTemp^(0+128),w
 11515  0DAE  0020               	movlb	0	; select bank0
 11516  0DAF  00BF               	movwf	??_cc_cv_mode
 11517  0DB0  0021               	movlb	1	; select bank1
 11518  0DB1  096E               	comf	(_batteryTemp+1)^(0+128),w
 11519  0DB2  0020               	movlb	0	; select bank0
 11520  0DB3  00C0               	movwf	??_cc_cv_mode+1
 11521  0DB4  0ABF               	incf	??_cc_cv_mode,f
 11522  0DB5  1903               	skipnz
 11523  0DB6  0AC0               	incf	??_cc_cv_mode+1,f
 11524  0DB7  083F               	movf	??_cc_cv_mode,w
 11525  0DB8  3EFA               	addlw	250
 11526  0DB9  00F9               	movwf	___awtoft@c
 11527  0DBA  3000               	movlw	0
 11528  0DBB  3D40               	addwfc	??_cc_cv_mode+1,w
 11529  0DBC  00FA               	movwf	___awtoft@c+1
 11530  0DBD  319F  2710  318C   	fcall	___awtoft
 11531  0DC0  0879               	movf	?___awtoft,w
 11532  0DC1  0020               	movlb	0	; select bank0
 11533  0DC2  00A4               	movwf	___ftmul@f2
 11534  0DC3  087A               	movf	?___awtoft+1,w
 11535  0DC4  00A5               	movwf	___ftmul@f2+1
 11536  0DC5  087B               	movf	?___awtoft+2,w
 11537  0DC6  00A6               	movwf	___ftmul@f2+2
 11538  0DC7  30C3               	movlw	195
 11539  0DC8  00A1               	movwf	___ftmul@f1
 11540  0DC9  3075               	movlw	117
 11541  0DCA  00A2               	movwf	___ftmul@f1+1
 11542  0DCB  303E               	movlw	62
 11543  0DCC  00A3               	movwf	___ftmul@f1+2
 11544  0DCD  3197  274C  318C   	fcall	___ftmul
 11545  0DD0  0020               	movlb	0	; select bank0
 11546  0DD1  0821               	movf	?___ftmul,w
 11547  0DD2  00B1               	movwf	___fttol@f1
 11548  0DD3  0822               	movf	?___ftmul+1,w
 11549  0DD4  00B2               	movwf	___fttol@f1+1
 11550  0DD5  0823               	movf	?___ftmul+2,w
 11551  0DD6  00B3               	movwf	___fttol@f1+2
 11552  0DD7  3195  256C  318C   	fcall	___fttol
 11553  0DDA  0020               	movlb	0	; select bank0
 11554  0DDB  0831               	movf	?___fttol,w
 11555  0DDC  3E00               	addlw	0
 11556  0DDD  00C1               	movwf	??_cc_cv_mode+2
 11557  0DDE  3005               	movlw	5
 11558  0DDF  3D32               	addwfc	?___fttol+1,w
 11559  0DE0  00C2               	movwf	??_cc_cv_mode+3
 11560  0DE1  3546               	lslf	cc_cv_mode@z,w
 11561  0DE2  3EA8               	addlw	(low (_voltage| 0))& (0+255)
 11562  0DE3  0086               	movwf	6
 11563  0DE4  0187               	clrf	7
 11564  0DE5  3F40               	moviw [0]fsr1
 11565  0DE6  00C3               	movwf	??_cc_cv_mode+4
 11566  0DE7  3F41               	moviw [1]fsr1
 11567  0DE8  00C4               	movwf	??_cc_cv_mode+5
 11568  0DE9  0844               	movf	??_cc_cv_mode+5,w
 11569  0DEA  3A80               	xorlw	128
 11570  0DEB  00C5               	movwf	??_cc_cv_mode+6
 11571  0DEC  0842               	movf	??_cc_cv_mode+3,w
 11572  0DED  3A80               	xorlw	128
 11573  0DEE  0245               	subwf	??_cc_cv_mode+6,w
 11574  0DEF  1D03               	skipz
 11575  0DF0  2DF3               	goto	u4065
 11576  0DF1  0841               	movf	??_cc_cv_mode+2,w
 11577  0DF2  0243               	subwf	??_cc_cv_mode+4,w
 11578  0DF3                     u4065:	
 11579  0DF3  1803               	skipnc
 11580  0DF4  0008               	return
 11581                           
 11582                           ;battery_charger.c: 140: {
 11583                           ;battery_charger.c: 141: batteryState[z]=CHARGE;
 11584  0DF5  3004               	movlw	4
 11585  0DF6  0020               	movlb	0	; select bank0
 11586  0DF7  00BF               	movwf	??_cc_cv_mode
 11587  0DF8  0846               	movf	cc_cv_mode@z,w
 11588  0DF9  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 11589  0DFA  0086               	movwf	6
 11590  0DFB  0187               	clrf	7
 11591  0DFC  083F               	movf	??_cc_cv_mode,w
 11592  0DFD  0081               	movwf	1
 11593                           
 11594                           ;battery_charger.c: 142: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 11595  0DFE  0021               	movlb	1	; select bank1
 11596  0DFF  096D               	comf	_batteryTemp^(0+128),w
 11597  0E00  0020               	movlb	0	; select bank0
 11598  0E01  00BF               	movwf	??_cc_cv_mode
 11599  0E02  0021               	movlb	1	; select bank1
 11600  0E03  096E               	comf	(_batteryTemp+1)^(0+128),w
 11601  0E04  0020               	movlb	0	; select bank0
 11602  0E05  00C0               	movwf	??_cc_cv_mode+1
 11603  0E06  0ABF               	incf	??_cc_cv_mode,f
 11604  0E07  1903               	skipnz
 11605  0E08  0AC0               	incf	??_cc_cv_mode+1,f
 11606  0E09  083F               	movf	??_cc_cv_mode,w
 11607  0E0A  3EFA               	addlw	250
 11608  0E0B  00F9               	movwf	___awtoft@c
 11609  0E0C  3000               	movlw	0
 11610  0E0D  3D40               	addwfc	??_cc_cv_mode+1,w
 11611  0E0E  00FA               	movwf	___awtoft@c+1
 11612  0E0F  319F  2710  318C   	fcall	___awtoft
 11613  0E12  0879               	movf	?___awtoft,w
 11614  0E13  0020               	movlb	0	; select bank0
 11615  0E14  00A4               	movwf	___ftmul@f2
 11616  0E15  087A               	movf	?___awtoft+1,w
 11617  0E16  00A5               	movwf	___ftmul@f2+1
 11618  0E17  087B               	movf	?___awtoft+2,w
 11619  0E18  00A6               	movwf	___ftmul@f2+2
 11620  0E19  30C3               	movlw	195
 11621  0E1A  00A1               	movwf	___ftmul@f1
 11622  0E1B  3075               	movlw	117
 11623  0E1C  00A2               	movwf	___ftmul@f1+1
 11624  0E1D  303E               	movlw	62
 11625  0E1E  00A3               	movwf	___ftmul@f1+2
 11626  0E1F  3197  274C  318C   	fcall	___ftmul
 11627  0E22  0020               	movlb	0	; select bank0
 11628  0E23  0821               	movf	?___ftmul,w
 11629  0E24  00B1               	movwf	___fttol@f1
 11630  0E25  0822               	movf	?___ftmul+1,w
 11631  0E26  00B2               	movwf	___fttol@f1+1
 11632  0E27  0823               	movf	?___ftmul+2,w
 11633  0E28  00B3               	movwf	___fttol@f1+2
 11634  0E29  3195  256C         	fcall	___fttol
 11635  0E2B  0020               	movlb	0	; select bank0
 11636  0E2C  0831               	movf	?___fttol,w
 11637  0E2D  3E91               	addlw	145
 11638  0E2E  00C1               	movwf	??_cc_cv_mode+2
 11639  0E2F  3005               	movlw	5
 11640  0E30  3D32               	addwfc	?___fttol+1,w
 11641  0E31  00C2               	movwf	??_cc_cv_mode+3
 11642  0E32  3546               	lslf	cc_cv_mode@z,w
 11643  0E33  3EB4               	addlw	(low (_Vref| 0))& (0+255)
 11644  0E34  0086               	movwf	6
 11645  0E35  0187               	clrf	7
 11646  0E36  0841               	movf	??_cc_cv_mode+2,w
 11647  0E37  3FC0               	movwi [0]fsr1
 11648  0E38  0842               	movf	??_cc_cv_mode+3,w
 11649  0E39  3FC1               	movwi [1]fsr1
 11650                           
 11651                           ;battery_charger.c: 143: Iref[z]=30;
 11652  0E3A  3546               	lslf	cc_cv_mode@z,w
 11653  0E3B  3EB0               	addlw	(low (_Iref| 0))& (0+255)
 11654  0E3C  0086               	movwf	6
 11655  0E3D  0187               	clrf	7
 11656  0E3E  301E               	movlw	30
 11657  0E3F  3FC0               	movwi [0]fsr1
 11658  0E40  3000               	movlw	0
 11659  0E41  3FC1               	movwi [1]fsr1
 11660  0E42  0008               	return
 11661  0E43                     __end_of_cc_cv_mode:	
 11662                           
 11663                           	psect	text15
 11664  1251                     __ptext15:	
 11665 ;; *************** function _calculateCurrent3 *****************
 11666 ;; Defined at:
 11667 ;;		line 441 in file "main.c"
 11668 ;; Parameters:    Size  Location     Type
 11669 ;;		None
 11670 ;; Auto vars:     Size  Location     Type
 11671 ;;		None
 11672 ;; Return value:  Size  Location     Type
 11673 ;;                  1    wreg      void 
 11674 ;; Registers used:
 11675 ;;		wreg, status,2, status,0, pclath, cstack
 11676 ;; Tracked objects:
 11677 ;;		On entry : 0/0
 11678 ;;		On exit  : 0/0
 11679 ;;		Unchanged: 0/0
 11680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11683 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11684 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11685 ;;Total ram usage:        3 bytes
 11686 ;; Hardware stack levels used:    1
 11687 ;; Hardware stack levels required when called:    2
 11688 ;; This function calls:
 11689 ;;		___awtoft
 11690 ;;		___ftdiv
 11691 ;;		___fttol
 11692 ;; This function is called by:
 11693 ;;		_main
 11694 ;; This function uses a non-reentrant model
 11695 ;;
 11696                           
 11697                           
 11698                           ;psect for function _calculateCurrent3
 11699  1251                     _calculateCurrent3:	
 11700                           
 11701                           ;main.c: 443: if(Ianalogs[3]-570<=0)
 11702                           
 11703                           ;incstack = 0
 11704                           ; Regs used in _calculateCurrent3: [wreg+status,2+status,0+pclath+cstack]
 11705  1251  0022               	movlb	2	; select bank2
 11706  1252  0846               	movf	(_Ianalogs^(0+256)+6),w
 11707  1253  3EC6               	addlw	198
 11708  1254  0020               	movlb	0	; select bank0
 11709  1255  00BF               	movwf	??_calculateCurrent3
 11710  1256  30FD               	movlw	253
 11711  1257  0022               	movlb	2	; select bank2
 11712  1258  3D47               	addwfc	((_Ianalogs+1)^(0+256)+6),w
 11713  1259  0020               	movlb	0	; select bank0
 11714  125A  00C0               	movwf	??_calculateCurrent3+1
 11715  125B  0840               	movf	??_calculateCurrent3+1,w
 11716  125C  3A80               	xorlw	128
 11717  125D  00C1               	movwf	??_calculateCurrent3+2
 11718  125E  3080               	movlw	128
 11719  125F  0241               	subwf	??_calculateCurrent3+2,w
 11720  1260  1D03               	skipz
 11721  1261  2A64               	goto	u3615
 11722  1262  3001               	movlw	1
 11723  1263  023F               	subwf	??_calculateCurrent3,w
 11724  1264                     u3615:	
 11725  1264  1803               	skipnc
 11726  1265  2A6A               	goto	l3102
 11727                           
 11728                           ;main.c: 444: {
 11729                           ;main.c: 445: current[3]=0;
 11730  1266  0021               	movlb	1	; select bank1
 11731  1267  01A6               	clrf	(_current^(0+128)+6)
 11732  1268  01A7               	clrf	((_current+1)^(0+128)+6)
 11733                           
 11734                           ;main.c: 446: }
 11735  1269  0008               	return
 11736  126A                     l3102:	
 11737                           
 11738                           ;main.c: 447: else
 11739                           ;main.c: 448: {
 11740                           ;main.c: 449: current[3]=(int16_t)((Ianalogs[3]-570)/2.8);
 11741  126A  0022               	movlb	2	; select bank2
 11742  126B  0846               	movf	(_Ianalogs^(0+256)+6),w
 11743  126C  3EC6               	addlw	198
 11744  126D  00F9               	movwf	___awtoft@c
 11745  126E  30FD               	movlw	253
 11746  126F  3D47               	addwfc	((_Ianalogs+1)^(0+256)+6),w
 11747  1270  00FA               	movwf	___awtoft@c+1
 11748  1271  319F  2710  3192   	fcall	___awtoft
 11749  1274  0879               	movf	?___awtoft,w
 11750  1275  0020               	movlb	0	; select bank0
 11751  1276  00A4               	movwf	___ftdiv@f1
 11752  1277  087A               	movf	?___awtoft+1,w
 11753  1278  00A5               	movwf	___ftdiv@f1+1
 11754  1279  087B               	movf	?___awtoft+2,w
 11755  127A  00A6               	movwf	___ftdiv@f1+2
 11756  127B  3033               	movlw	51
 11757  127C  00A1               	movwf	___ftdiv@f2
 11758  127D  3033               	movlw	51
 11759  127E  00A2               	movwf	___ftdiv@f2+1
 11760  127F  3040               	movlw	64
 11761  1280  00A3               	movwf	___ftdiv@f2+2
 11762  1281  3195  25F3  3192   	fcall	___ftdiv
 11763  1284  0020               	movlb	0	; select bank0
 11764  1285  0821               	movf	?___ftdiv,w
 11765  1286  00B1               	movwf	___fttol@f1
 11766  1287  0822               	movf	?___ftdiv+1,w
 11767  1288  00B2               	movwf	___fttol@f1+1
 11768  1289  0823               	movf	?___ftdiv+2,w
 11769  128A  00B3               	movwf	___fttol@f1+2
 11770  128B  3195  256C         	fcall	___fttol
 11771  128D  0020               	movlb	0	; select bank0
 11772  128E  0832               	movf	?___fttol+1,w
 11773  128F  0021               	movlb	1	; select bank1
 11774  1290  00A7               	movwf	((_current+1)^(0+128)+6)
 11775  1291  0020               	movlb	0	; select bank0
 11776  1292  0831               	movf	?___fttol,w
 11777  1293  0021               	movlb	1	; select bank1
 11778  1294  00A6               	movwf	(_current^(0+128)+6)
 11779  1295  0008               	return
 11780  1296                     __end_of_calculateCurrent3:	
 11781                           
 11782                           	psect	text16
 11783  1F31                     __ptext16:	
 11784 ;; *************** function _calculateCurrent2 *****************
 11785 ;; Defined at:
 11786 ;;		line 429 in file "main.c"
 11787 ;; Parameters:    Size  Location     Type
 11788 ;;		None
 11789 ;; Auto vars:     Size  Location     Type
 11790 ;;		None
 11791 ;; Return value:  Size  Location     Type
 11792 ;;                  1    wreg      void 
 11793 ;; Registers used:
 11794 ;;		wreg, status,2, status,0
 11795 ;; Tracked objects:
 11796 ;;		On entry : 0/0
 11797 ;;		On exit  : 0/0
 11798 ;;		Unchanged: 0/0
 11799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11802 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11803 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11804 ;;Total ram usage:        3 bytes
 11805 ;; Hardware stack levels used:    1
 11806 ;; This function calls:
 11807 ;;		Nothing
 11808 ;; This function is called by:
 11809 ;;		_main
 11810 ;; This function uses a non-reentrant model
 11811 ;;
 11812                           
 11813                           
 11814                           ;psect for function _calculateCurrent2
 11815  1F31                     _calculateCurrent2:	
 11816                           
 11817                           ;main.c: 431: if(Ianalogs[2]-570<=0)
 11818                           
 11819                           ;incstack = 0
 11820                           ; Regs used in _calculateCurrent2: [wreg+status,2+status,0]
 11821  1F31  0022               	movlb	2	; select bank2
 11822  1F32  0844               	movf	(_Ianalogs^(0+256)+4),w
 11823  1F33  3EC6               	addlw	198
 11824  1F34  00F0               	movwf	??_calculateCurrent2
 11825  1F35  30FD               	movlw	253
 11826  1F36  3D45               	addwfc	((_Ianalogs+1)^(0+256)+4),w
 11827  1F37  00F1               	movwf	??_calculateCurrent2+1
 11828  1F38  0871               	movf	??_calculateCurrent2+1,w
 11829  1F39  3A80               	xorlw	128
 11830  1F3A  00F2               	movwf	??_calculateCurrent2+2
 11831  1F3B  3080               	movlw	128
 11832  1F3C  0272               	subwf	??_calculateCurrent2+2,w
 11833  1F3D  1D03               	skipz
 11834  1F3E  2F41               	goto	u3605
 11835  1F3F  3001               	movlw	1
 11836  1F40  0270               	subwf	??_calculateCurrent2,w
 11837  1F41                     u3605:	
 11838  1F41  1803               	skipnc
 11839  1F42  2F47               	goto	l3096
 11840                           
 11841                           ;main.c: 432: {
 11842                           ;main.c: 433: current[2]=0;
 11843  1F43  0021               	movlb	1	; select bank1
 11844  1F44  01A4               	clrf	(_current^(0+128)+4)
 11845  1F45  01A5               	clrf	((_current+1)^(0+128)+4)
 11846                           
 11847                           ;main.c: 434: }
 11848  1F46  0008               	return
 11849  1F47                     l3096:	
 11850                           
 11851                           ;main.c: 435: else
 11852                           ;main.c: 436: {
 11853                           ;main.c: 437: current[2]=(int16_t)(Ianalogs[2]-570);
 11854  1F47  0022               	movlb	2	; select bank2
 11855  1F48  0844               	movf	(_Ianalogs^(0+256)+4),w
 11856  1F49  3EC6               	addlw	198
 11857  1F4A  0021               	movlb	1	; select bank1
 11858  1F4B  00A4               	movwf	(_current^(0+128)+4)
 11859  1F4C  30FD               	movlw	253
 11860  1F4D  0022               	movlb	2	; select bank2
 11861  1F4E  3D45               	addwfc	((_Ianalogs+1)^(0+256)+4),w
 11862  1F4F  0021               	movlb	1	; select bank1
 11863  1F50  00A5               	movwf	((_current+1)^(0+128)+4)
 11864  1F51  0008               	return
 11865  1F52                     __end_of_calculateCurrent2:	
 11866                           
 11867                           	psect	text17
 11868  120C                     __ptext17:	
 11869 ;; *************** function _calculateCurrent0 *****************
 11870 ;; Defined at:
 11871 ;;		line 405 in file "main.c"
 11872 ;; Parameters:    Size  Location     Type
 11873 ;;		None
 11874 ;; Auto vars:     Size  Location     Type
 11875 ;;		None
 11876 ;; Return value:  Size  Location     Type
 11877 ;;                  1    wreg      void 
 11878 ;; Registers used:
 11879 ;;		wreg, status,2, status,0, pclath, cstack
 11880 ;; Tracked objects:
 11881 ;;		On entry : 0/0
 11882 ;;		On exit  : 0/0
 11883 ;;		Unchanged: 0/0
 11884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11887 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11888 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11889 ;;Total ram usage:        3 bytes
 11890 ;; Hardware stack levels used:    1
 11891 ;; Hardware stack levels required when called:    2
 11892 ;; This function calls:
 11893 ;;		___awtoft
 11894 ;;		___ftdiv
 11895 ;;		___fttol
 11896 ;; This function is called by:
 11897 ;;		_main
 11898 ;; This function uses a non-reentrant model
 11899 ;;
 11900                           
 11901                           
 11902                           ;psect for function _calculateCurrent0
 11903  120C                     _calculateCurrent0:	
 11904                           
 11905                           ;main.c: 407: if(Ianalogs[0]-562<=0)
 11906                           
 11907                           ;incstack = 0
 11908                           ; Regs used in _calculateCurrent0: [wreg+status,2+status,0+pclath+cstack]
 11909  120C  0022               	movlb	2	; select bank2
 11910  120D  0840               	movf	_Ianalogs^(0+256),w
 11911  120E  3ECE               	addlw	206
 11912  120F  0020               	movlb	0	; select bank0
 11913  1210  00BF               	movwf	??_calculateCurrent0
 11914  1211  30FD               	movlw	253
 11915  1212  0022               	movlb	2	; select bank2
 11916  1213  3D41               	addwfc	(_Ianalogs+1)^(0+256),w
 11917  1214  0020               	movlb	0	; select bank0
 11918  1215  00C0               	movwf	??_calculateCurrent0+1
 11919  1216  0840               	movf	??_calculateCurrent0+1,w
 11920  1217  3A80               	xorlw	128
 11921  1218  00C1               	movwf	??_calculateCurrent0+2
 11922  1219  3080               	movlw	128
 11923  121A  0241               	subwf	??_calculateCurrent0+2,w
 11924  121B  1D03               	skipz
 11925  121C  2A1F               	goto	u3595
 11926  121D  3001               	movlw	1
 11927  121E  023F               	subwf	??_calculateCurrent0,w
 11928  121F                     u3595:	
 11929  121F  1803               	skipnc
 11930  1220  2A25               	goto	l3090
 11931                           
 11932                           ;main.c: 408: {
 11933                           ;main.c: 409: current[0]=0;
 11934  1221  0021               	movlb	1	; select bank1
 11935  1222  01A0               	clrf	_current^(0+128)
 11936  1223  01A1               	clrf	(_current+1)^(0+128)
 11937                           
 11938                           ;main.c: 410: }
 11939  1224  0008               	return
 11940  1225                     l3090:	
 11941                           
 11942                           ;main.c: 411: else
 11943                           ;main.c: 412: {
 11944                           ;main.c: 413: current[0]=(int16_t)((Ianalogs[0]-562)/2.9943);
 11945  1225  0022               	movlb	2	; select bank2
 11946  1226  0840               	movf	_Ianalogs^(0+256),w
 11947  1227  3ECE               	addlw	206
 11948  1228  00F9               	movwf	___awtoft@c
 11949  1229  30FD               	movlw	253
 11950  122A  3D41               	addwfc	(_Ianalogs+1)^(0+256),w
 11951  122B  00FA               	movwf	___awtoft@c+1
 11952  122C  319F  2710  3192   	fcall	___awtoft
 11953  122F  0879               	movf	?___awtoft,w
 11954  1230  0020               	movlb	0	; select bank0
 11955  1231  00A4               	movwf	___ftdiv@f1
 11956  1232  087A               	movf	?___awtoft+1,w
 11957  1233  00A5               	movwf	___ftdiv@f1+1
 11958  1234  087B               	movf	?___awtoft+2,w
 11959  1235  00A6               	movwf	___ftdiv@f1+2
 11960  1236  30A3               	movlw	163
 11961  1237  00A1               	movwf	___ftdiv@f2
 11962  1238  303F               	movlw	63
 11963  1239  00A2               	movwf	___ftdiv@f2+1
 11964  123A  3040               	movlw	64
 11965  123B  00A3               	movwf	___ftdiv@f2+2
 11966  123C  3195  25F3  3192   	fcall	___ftdiv
 11967  123F  0020               	movlb	0	; select bank0
 11968  1240  0821               	movf	?___ftdiv,w
 11969  1241  00B1               	movwf	___fttol@f1
 11970  1242  0822               	movf	?___ftdiv+1,w
 11971  1243  00B2               	movwf	___fttol@f1+1
 11972  1244  0823               	movf	?___ftdiv+2,w
 11973  1245  00B3               	movwf	___fttol@f1+2
 11974  1246  3195  256C         	fcall	___fttol
 11975  1248  0020               	movlb	0	; select bank0
 11976  1249  0832               	movf	?___fttol+1,w
 11977  124A  0021               	movlb	1	; select bank1
 11978  124B  00A1               	movwf	(_current+1)^(0+128)
 11979  124C  0020               	movlb	0	; select bank0
 11980  124D  0831               	movf	?___fttol,w
 11981  124E  0021               	movlb	1	; select bank1
 11982  124F  00A0               	movwf	_current^(0+128)
 11983  1250  0008               	return
 11984  1251                     __end_of_calculateCurrent0:	
 11985                           
 11986                           	psect	text18
 11987  15F3                     __ptext18:	
 11988 ;; *************** function ___ftdiv *****************
 11989 ;; Defined at:
 11990 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
 11991 ;; Parameters:    Size  Location     Type
 11992 ;;  f2              3    1[BANK0 ] float 
 11993 ;;  f1              3    4[BANK0 ] float 
 11994 ;; Auto vars:     Size  Location     Type
 11995 ;;  f3              3   12[BANK0 ] float 
 11996 ;;  sign            1   16[BANK0 ] unsigned char 
 11997 ;;  exp             1   15[BANK0 ] unsigned char 
 11998 ;;  cntr            1   11[BANK0 ] unsigned char 
 11999 ;; Return value:  Size  Location     Type
 12000 ;;                  3    1[BANK0 ] float 
 12001 ;; Registers used:
 12002 ;;		wreg, status,2, status,0, pclath, cstack
 12003 ;; Tracked objects:
 12004 ;;		On entry : 0/0
 12005 ;;		On exit  : 0/0
 12006 ;;		Unchanged: 0/0
 12007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12008 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12009 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12010 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12011 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12012 ;;Total ram usage:       16 bytes
 12013 ;; Hardware stack levels used:    1
 12014 ;; Hardware stack levels required when called:    1
 12015 ;; This function calls:
 12016 ;;		___ftpack
 12017 ;; This function is called by:
 12018 ;;		_main
 12019 ;;		_calculateCurrent0
 12020 ;;		_calculateCurrent3
 12021 ;;		_tempCalc
 12022 ;; This function uses a non-reentrant model
 12023 ;;
 12024                           
 12025                           
 12026                           ;psect for function ___ftdiv
 12027  15F3                     ___ftdiv:	
 12028                           
 12029                           ;incstack = 0
 12030                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 12031  15F3  0020               	movlb	0	; select bank0
 12032  15F4  0824               	movf	___ftdiv@f1,w
 12033  15F5  00A7               	movwf	??___ftdiv
 12034  15F6  0825               	movf	___ftdiv@f1+1,w
 12035  15F7  00A8               	movwf	??___ftdiv+1
 12036  15F8  0826               	movf	___ftdiv@f1+2,w
 12037  15F9  00A9               	movwf	??___ftdiv+2
 12038  15FA  1003               	clrc
 12039  15FB  0D28               	rlf	??___ftdiv+1,w
 12040  15FC  0D29               	rlf	??___ftdiv+2,w
 12041  15FD  00AA               	movwf	??___ftdiv+3
 12042  15FE  082A               	movf	??___ftdiv+3,w
 12043  15FF  00AF               	movwf	___ftdiv@exp
 12044  1600  082F               	movf	___ftdiv@exp,w
 12045  1601  1D03               	btfss	3,2
 12046  1602  2E0A               	goto	l2970
 12047  1603  3000               	movlw	0
 12048  1604  00A1               	movwf	?___ftdiv
 12049  1605  3000               	movlw	0
 12050  1606  00A2               	movwf	?___ftdiv+1
 12051  1607  3000               	movlw	0
 12052  1608  00A3               	movwf	?___ftdiv+2
 12053  1609  0008               	return
 12054  160A                     l2970:	
 12055  160A  0821               	movf	___ftdiv@f2,w
 12056  160B  00A7               	movwf	??___ftdiv
 12057  160C  0822               	movf	___ftdiv@f2+1,w
 12058  160D  00A8               	movwf	??___ftdiv+1
 12059  160E  0823               	movf	___ftdiv@f2+2,w
 12060  160F  00A9               	movwf	??___ftdiv+2
 12061  1610  1003               	clrc
 12062  1611  0D28               	rlf	??___ftdiv+1,w
 12063  1612  0D29               	rlf	??___ftdiv+2,w
 12064  1613  00AA               	movwf	??___ftdiv+3
 12065  1614  082A               	movf	??___ftdiv+3,w
 12066  1615  00B0               	movwf	___ftdiv@sign
 12067  1616  0830               	movf	___ftdiv@sign,w
 12068  1617  1D03               	btfss	3,2
 12069  1618  2E20               	goto	l2976
 12070  1619  3000               	movlw	0
 12071  161A  00A1               	movwf	?___ftdiv
 12072  161B  3000               	movlw	0
 12073  161C  00A2               	movwf	?___ftdiv+1
 12074  161D  3000               	movlw	0
 12075  161E  00A3               	movwf	?___ftdiv+2
 12076  161F  0008               	return
 12077  1620                     l2976:	
 12078  1620  3000               	movlw	0
 12079  1621  00AC               	movwf	___ftdiv@f3
 12080  1622  3000               	movlw	0
 12081  1623  00AD               	movwf	___ftdiv@f3+1
 12082  1624  3000               	movlw	0
 12083  1625  00AE               	movwf	___ftdiv@f3+2
 12084  1626  3089               	movlw	137
 12085  1627  0730               	addwf	___ftdiv@sign,w
 12086  1628  00A7               	movwf	??___ftdiv
 12087  1629  0827               	movf	??___ftdiv,w
 12088  162A  02AF               	subwf	___ftdiv@exp,f
 12089  162B  0824               	movf	___ftdiv@f1,w
 12090  162C  00A7               	movwf	??___ftdiv
 12091  162D  0825               	movf	___ftdiv@f1+1,w
 12092  162E  00A8               	movwf	??___ftdiv+1
 12093  162F  0826               	movf	___ftdiv@f1+2,w
 12094  1630  00A9               	movwf	??___ftdiv+2
 12095  1631  3010               	movlw	16
 12096  1632                     u3295:	
 12097  1632  36A9               	lsrf	??___ftdiv+2,f
 12098  1633  0CA8               	rrf	??___ftdiv+1,f
 12099  1634  0CA7               	rrf	??___ftdiv,f
 12100  1635  0B89               	decfsz	9,f
 12101  1636  2E32               	goto	u3295
 12102  1637  0827               	movf	??___ftdiv,w
 12103  1638  00AA               	movwf	??___ftdiv+3
 12104  1639  082A               	movf	??___ftdiv+3,w
 12105  163A  00B0               	movwf	___ftdiv@sign
 12106  163B  0821               	movf	___ftdiv@f2,w
 12107  163C  00A7               	movwf	??___ftdiv
 12108  163D  0822               	movf	___ftdiv@f2+1,w
 12109  163E  00A8               	movwf	??___ftdiv+1
 12110  163F  0823               	movf	___ftdiv@f2+2,w
 12111  1640  00A9               	movwf	??___ftdiv+2
 12112  1641  3010               	movlw	16
 12113  1642                     u3305:	
 12114  1642  36A9               	lsrf	??___ftdiv+2,f
 12115  1643  0CA8               	rrf	??___ftdiv+1,f
 12116  1644  0CA7               	rrf	??___ftdiv,f
 12117  1645  0B89               	decfsz	9,f
 12118  1646  2E42               	goto	u3305
 12119  1647  0827               	movf	??___ftdiv,w
 12120  1648  00AA               	movwf	??___ftdiv+3
 12121  1649  082A               	movf	??___ftdiv+3,w
 12122  164A  06B0               	xorwf	___ftdiv@sign,f
 12123  164B  3080               	movlw	128
 12124  164C  00A7               	movwf	??___ftdiv
 12125  164D  0827               	movf	??___ftdiv,w
 12126  164E  05B0               	andwf	___ftdiv@sign,f
 12127  164F  17A5               	bsf	___ftdiv@f1+1,7
 12128  1650  30FF               	movlw	255
 12129  1651  05A4               	andwf	___ftdiv@f1,f
 12130  1652  30FF               	movlw	255
 12131  1653  05A5               	andwf	___ftdiv@f1+1,f
 12132  1654  3000               	movlw	0
 12133  1655  05A6               	andwf	___ftdiv@f1+2,f
 12134  1656  17A2               	bsf	___ftdiv@f2+1,7
 12135  1657  30FF               	movlw	255
 12136  1658  05A1               	andwf	___ftdiv@f2,f
 12137  1659  30FF               	movlw	255
 12138  165A  05A2               	andwf	___ftdiv@f2+1,f
 12139  165B  3000               	movlw	0
 12140  165C  05A3               	andwf	___ftdiv@f2+2,f
 12141  165D  3018               	movlw	24
 12142  165E  00A7               	movwf	??___ftdiv
 12143  165F  0827               	movf	??___ftdiv,w
 12144  1660  00AB               	movwf	___ftdiv@cntr
 12145  1661                     l2990:	
 12146  1661  3001               	movlw	1
 12147  1662                     u3315:	
 12148  1662  35AC               	lslf	___ftdiv@f3,f
 12149  1663  0DAD               	rlf	___ftdiv@f3+1,f
 12150  1664  0DAE               	rlf	___ftdiv@f3+2,f
 12151  1665  0B89               	decfsz	9,f
 12152  1666  2E62               	goto	u3315
 12153  1667  0823               	movf	___ftdiv@f2+2,w
 12154  1668  0226               	subwf	___ftdiv@f1+2,w
 12155  1669  1D03               	skipz
 12156  166A  2E71               	goto	u3325
 12157  166B  0822               	movf	___ftdiv@f2+1,w
 12158  166C  0225               	subwf	___ftdiv@f1+1,w
 12159  166D  1D03               	skipz
 12160  166E  2E71               	goto	u3325
 12161  166F  0821               	movf	___ftdiv@f2,w
 12162  1670  0224               	subwf	___ftdiv@f1,w
 12163  1671                     u3325:	
 12164  1671  1C03               	skipc
 12165  1672  2E7A               	goto	l2998
 12166  1673  0821               	movf	___ftdiv@f2,w
 12167  1674  02A4               	subwf	___ftdiv@f1,f
 12168  1675  0822               	movf	___ftdiv@f2+1,w
 12169  1676  3BA5               	subwfb	___ftdiv@f1+1,f
 12170  1677  0823               	movf	___ftdiv@f2+2,w
 12171  1678  3BA6               	subwfb	___ftdiv@f1+2,f
 12172  1679  142C               	bsf	___ftdiv@f3,0
 12173  167A                     l2998:	
 12174  167A  3001               	movlw	1
 12175  167B                     u3335:	
 12176  167B  35A4               	lslf	___ftdiv@f1,f
 12177  167C  0DA5               	rlf	___ftdiv@f1+1,f
 12178  167D  0DA6               	rlf	___ftdiv@f1+2,f
 12179  167E  0B89               	decfsz	9,f
 12180  167F  2E7B               	goto	u3335
 12181  1680  3001               	movlw	1
 12182  1681  02AB               	subwf	___ftdiv@cntr,f
 12183  1682  1D03               	btfss	3,2
 12184  1683  2E61               	goto	l2990
 12185  1684  082C               	movf	___ftdiv@f3,w
 12186  1685  00F0               	movwf	___ftpack@arg
 12187  1686  082D               	movf	___ftdiv@f3+1,w
 12188  1687  00F1               	movwf	___ftpack@arg+1
 12189  1688  082E               	movf	___ftdiv@f3+2,w
 12190  1689  00F2               	movwf	___ftpack@arg+2
 12191  168A  082F               	movf	___ftdiv@exp,w
 12192  168B  00A7               	movwf	??___ftdiv
 12193  168C  0827               	movf	??___ftdiv,w
 12194  168D  00F3               	movwf	___ftpack@exp
 12195  168E  0830               	movf	___ftdiv@sign,w
 12196  168F  00A8               	movwf	??___ftdiv+1
 12197  1690  0828               	movf	??___ftdiv+1,w
 12198  1691  00F4               	movwf	___ftpack@sign
 12199  1692  3193  239B         	fcall	___ftpack
 12200  1694  0870               	movf	?___ftpack,w
 12201  1695  0020               	movlb	0	; select bank0
 12202  1696  00A1               	movwf	?___ftdiv
 12203  1697  0871               	movf	?___ftpack+1,w
 12204  1698  00A2               	movwf	?___ftdiv+1
 12205  1699  0872               	movf	?___ftpack+2,w
 12206  169A  00A3               	movwf	?___ftdiv+2
 12207  169B  0008               	return
 12208  169C                     __end_of___ftdiv:	
 12209                           
 12210                           	psect	text19
 12211  0004                     __ptext19:	
 12212 ;; *************** function _SYSTEM_Initialize *****************
 12213 ;; Defined at:
 12214 ;;		line 35 in file "system.c"
 12215 ;; Parameters:    Size  Location     Type
 12216 ;;		None
 12217 ;; Auto vars:     Size  Location     Type
 12218 ;;		None
 12219 ;; Return value:  Size  Location     Type
 12220 ;;                  1    wreg      void 
 12221 ;; Registers used:
 12222 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12223 ;; Tracked objects:
 12224 ;;		On entry : 0/0
 12225 ;;		On exit  : 0/0
 12226 ;;		Unchanged: 0/0
 12227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12230 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12231 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12232 ;;Total ram usage:        3 bytes
 12233 ;; Hardware stack levels used:    1
 12234 ;; Hardware stack levels required when called:    3
 12235 ;; This function calls:
 12236 ;;		_ADC_Initialize
 12237 ;;		_Init_Battery_State_Machine
 12238 ;;		_LCDClear
 12239 ;;		_LCDInit
 12240 ;;		_OSCILLATOR_Initialize
 12241 ;;		_PIN_MANAGER_Initialize
 12242 ;;		_PWM_Initialize
 12243 ;;		_TMR2_Initialize
 12244 ;;		_TMR4_Initialize
 12245 ;; This function is called by:
 12246 ;;		_main
 12247 ;; This function uses a non-reentrant model
 12248 ;;
 12249                           
 12250                           
 12251                           ;psect for function _SYSTEM_Initialize
 12252  0004                     _SYSTEM_Initialize:	
 12253                           
 12254                           ;system.c: 37: PIN_MANAGER_Initialize();
 12255                           
 12256                           ;incstack = 0
 12257                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12258  0004  319F  27C9  3180   	fcall	_PIN_MANAGER_Initialize
 12259                           
 12260                           ;system.c: 38: OSCILLATOR_Initialize();
 12261  0007  319D  25CB  3180   	fcall	_OSCILLATOR_Initialize
 12262                           
 12263                           ;system.c: 40: ADC_Initialize();
 12264  000A  319E  26D2  3180   	fcall	_ADC_Initialize
 12265                           
 12266                           ;system.c: 41: PWM_Initialize();
 12267  000D  319E  26F1  3180   	fcall	_PWM_Initialize
 12268                           
 12269                           ;system.c: 43: TMR2_Initialize();
 12270  0010  319D  25EC  3180   	fcall	_TMR2_Initialize
 12271                           
 12272                           ;system.c: 44: TMR4_Initialize();
 12273  0013  3188  2000  3180   	fcall	_TMR4_Initialize
 12274                           
 12275                           ;system.c: 45: Init_Battery_State_Machine(0);
 12276  0016  3000               	movlw	0
 12277  0017  3193  23FF  3180   	fcall	_Init_Battery_State_Machine
 12278                           
 12279                           ;system.c: 46: Init_Battery_State_Machine(1);
 12280  001A  3001               	movlw	1
 12281  001B  3193  23FF  3180   	fcall	_Init_Battery_State_Machine
 12282                           
 12283                           ;system.c: 47: LCDInit();
 12284  001E  3191  215A  3180   	fcall	_LCDInit
 12285                           
 12286                           ;system.c: 48: _delay((unsigned long)((200)*(32000000/4000.0)));
 12287  0021  3009               	movlw	9
 12288  0022  0020               	movlb	0	; select bank0
 12289  0023  00C6               	movwf	??_SYSTEM_Initialize+2
 12290  0024  301E               	movlw	30
 12291  0025  00C5               	movwf	??_SYSTEM_Initialize+1
 12292  0026  30EB               	movlw	235
 12293  0027  00C4               	movwf	??_SYSTEM_Initialize
 12294  0028                     u4537:	
 12295  0028  0BC4               	decfsz	??_SYSTEM_Initialize,f
 12296  0029  2828               	goto	u4537
 12297  002A  0BC5               	decfsz	??_SYSTEM_Initialize+1,f
 12298  002B  2828               	goto	u4537
 12299  002C  0BC6               	decfsz	??_SYSTEM_Initialize+2,f
 12300  002D  2828               	goto	u4537
 12301  002E  0000               	nop
 12302                           
 12303                           ;system.c: 49: LCDClear();
 12304  002F  319F  2777  3180   	fcall	_LCDClear
 12305                           
 12306                           ;system.c: 50: _delay((unsigned long)((200)*(32000000/4000.0)));
 12307  0032  3009               	movlw	9
 12308  0033  0020               	movlb	0	; select bank0
 12309  0034  00C6               	movwf	??_SYSTEM_Initialize+2
 12310  0035  301E               	movlw	30
 12311  0036  00C5               	movwf	??_SYSTEM_Initialize+1
 12312  0037  30EB               	movlw	235
 12313  0038  00C4               	movwf	??_SYSTEM_Initialize
 12314  0039                     u4547:	
 12315  0039  0BC4               	decfsz	??_SYSTEM_Initialize,f
 12316  003A  2839               	goto	u4547
 12317  003B  0BC5               	decfsz	??_SYSTEM_Initialize+1,f
 12318  003C  2839               	goto	u4547
 12319  003D  0BC6               	decfsz	??_SYSTEM_Initialize+2,f
 12320  003E  2839               	goto	u4547
 12321  003F  0000               	nop
 12322  0040  0008               	return
 12323  0041                     __end_of_SYSTEM_Initialize:	
 12324                           
 12325                           	psect	text20
 12326  0800                     __ptext20:	
 12327 ;; *************** function _TMR4_Initialize *****************
 12328 ;; Defined at:
 12329 ;;		line 25 in file "tmr.c"
 12330 ;; Parameters:    Size  Location     Type
 12331 ;;		None
 12332 ;; Auto vars:     Size  Location     Type
 12333 ;;		None
 12334 ;; Return value:  Size  Location     Type
 12335 ;;                  1    wreg      void 
 12336 ;; Registers used:
 12337 ;;		wreg, status,2
 12338 ;; Tracked objects:
 12339 ;;		On entry : 0/0
 12340 ;;		On exit  : 0/0
 12341 ;;		Unchanged: 0/0
 12342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12346 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12347 ;;Total ram usage:        0 bytes
 12348 ;; Hardware stack levels used:    1
 12349 ;; This function calls:
 12350 ;;		Nothing
 12351 ;; This function is called by:
 12352 ;;		_SYSTEM_Initialize
 12353 ;; This function uses a non-reentrant model
 12354 ;;
 12355                           
 12356                           
 12357                           ;psect for function _TMR4_Initialize
 12358  0800                     _TMR4_Initialize:	
 12359                           
 12360                           ;tmr.c: 27: T4CON = 0x00;
 12361                           
 12362                           ;incstack = 0
 12363                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
 12364  0800  0025               	movlb	5	; select bank5
 12365  0801  0194               	clrf	20	;volatile
 12366                           
 12367                           ;tmr.c: 29: T4CLKCON = 0x01;
 12368  0802  3001               	movlw	1
 12369  0803  0096               	movwf	22	;volatile
 12370                           
 12371                           ;tmr.c: 31: T4HLT = 0x00;
 12372  0804  0195               	clrf	21	;volatile
 12373                           
 12374                           ;tmr.c: 33: T4RST = 0x00;
 12375  0805  0197               	clrf	23	;volatile
 12376                           
 12377                           ;tmr.c: 35: T4PR = 0xFE;
 12378  0806  30FE               	movlw	254
 12379  0807  0093               	movwf	19	;volatile
 12380                           
 12381                           ;tmr.c: 39: T4TMR = 0x00;
 12382  0808  0192               	clrf	18	;volatile
 12383                           
 12384                           ;tmr.c: 41: PIR4bits.TMR4IF = 0;
 12385  0809  002E               	movlb	14	; select bank14
 12386  080A  1190               	bcf	16,3	;volatile
 12387                           
 12388                           ;tmr.c: 43: T4CONbits.TMR4ON = 1;
 12389  080B  0025               	movlb	5	; select bank5
 12390  080C  1794               	bsf	20,7	;volatile
 12391  080D  0008               	return
 12392  080E                     __end_of_TMR4_Initialize:	
 12393                           
 12394                           	psect	text21
 12395  1DEC                     __ptext21:	
 12396 ;; *************** function _TMR2_Initialize *****************
 12397 ;; Defined at:
 12398 ;;		line 3 in file "tmr.c"
 12399 ;; Parameters:    Size  Location     Type
 12400 ;;		None
 12401 ;; Auto vars:     Size  Location     Type
 12402 ;;		None
 12403 ;; Return value:  Size  Location     Type
 12404 ;;                  1    wreg      void 
 12405 ;; Registers used:
 12406 ;;		wreg, status,2
 12407 ;; Tracked objects:
 12408 ;;		On entry : 0/0
 12409 ;;		On exit  : 0/0
 12410 ;;		Unchanged: 0/0
 12411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12416 ;;Total ram usage:        0 bytes
 12417 ;; Hardware stack levels used:    1
 12418 ;; This function calls:
 12419 ;;		Nothing
 12420 ;; This function is called by:
 12421 ;;		_SYSTEM_Initialize
 12422 ;; This function uses a non-reentrant model
 12423 ;;
 12424                           
 12425                           
 12426                           ;psect for function _TMR2_Initialize
 12427  1DEC                     _TMR2_Initialize:	
 12428                           
 12429                           ;tmr.c: 5: T2CON = 0x00;
 12430                           
 12431                           ;incstack = 0
 12432                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 12433  1DEC  0025               	movlb	5	; select bank5
 12434  1DED  018E               	clrf	14	;volatile
 12435                           
 12436                           ;tmr.c: 7: T2CLKCON = 0x01;
 12437  1DEE  3001               	movlw	1
 12438  1DEF  0090               	movwf	16	;volatile
 12439                           
 12440                           ;tmr.c: 9: T2HLT = 0x00;
 12441  1DF0  018F               	clrf	15	;volatile
 12442                           
 12443                           ;tmr.c: 11: T2RST = 0x00;
 12444  1DF1  0191               	clrf	17	;volatile
 12445                           
 12446                           ;tmr.c: 13: T2PR = 0xFE;
 12447  1DF2  30FE               	movlw	254
 12448  1DF3  008D               	movwf	13	;volatile
 12449                           
 12450                           ;tmr.c: 18: T2TMR = 0x00;
 12451  1DF4  018C               	clrf	12	;volatile
 12452                           
 12453                           ;tmr.c: 20: PIR4bits.TMR2IF = 0;
 12454  1DF5  002E               	movlb	14	; select bank14
 12455  1DF6  1090               	bcf	16,1	;volatile
 12456                           
 12457                           ;tmr.c: 22: T2CONbits.TMR2ON = 1;
 12458  1DF7  0025               	movlb	5	; select bank5
 12459  1DF8  178E               	bsf	14,7	;volatile
 12460  1DF9  0008               	return
 12461  1DFA                     __end_of_TMR2_Initialize:	
 12462                           
 12463                           	psect	text22
 12464  1EF1                     __ptext22:	
 12465 ;; *************** function _PWM_Initialize *****************
 12466 ;; Defined at:
 12467 ;;		line 3 in file "pwm.c"
 12468 ;; Parameters:    Size  Location     Type
 12469 ;;		None
 12470 ;; Auto vars:     Size  Location     Type
 12471 ;;		None
 12472 ;; Return value:  Size  Location     Type
 12473 ;;                  1    wreg      void 
 12474 ;; Registers used:
 12475 ;;		wreg, status,2, status,0
 12476 ;; Tracked objects:
 12477 ;;		On entry : 0/0
 12478 ;;		On exit  : 0/0
 12479 ;;		Unchanged: 0/0
 12480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12485 ;;Total ram usage:        0 bytes
 12486 ;; Hardware stack levels used:    1
 12487 ;; This function calls:
 12488 ;;		Nothing
 12489 ;; This function is called by:
 12490 ;;		_SYSTEM_Initialize
 12491 ;; This function uses a non-reentrant model
 12492 ;;
 12493                           
 12494                           
 12495                           ;psect for function _PWM_Initialize
 12496  1EF1                     _PWM_Initialize:	
 12497                           
 12498                           ;pwm.c: 5: PWM6CON = 0x80;
 12499                           
 12500                           ;incstack = 0
 12501                           ; Regs used in _PWM_Initialize: [wreg+status,2+status,0]
 12502  1EF1  3080               	movlw	128
 12503  1EF2  0027               	movlb	7	; select bank7
 12504  1EF3  008E               	movwf	14	;volatile
 12505                           
 12506                           ;pwm.c: 7: PWM6DCH = 0x00;
 12507  1EF4  018D               	clrf	13	;volatile
 12508                           
 12509                           ;pwm.c: 9: PWM6DCL = 0x00;
 12510  1EF5  018C               	clrf	12	;volatile
 12511                           
 12512                           ;pwm.c: 11: CCPTMRS1bits.P6TSEL = 0x01;
 12513  1EF6  0024               	movlb	4	; select bank4
 12514  1EF7  081F               	movf	31,w	;volatile
 12515  1EF8  39F3               	andlw	-13
 12516  1EF9  3804               	iorlw	4
 12517  1EFA  009F               	movwf	31	;volatile
 12518                           
 12519                           ;pwm.c: 14: PWM7CON = 0x80;
 12520  1EFB  3080               	movlw	128
 12521  1EFC  0027               	movlb	7	; select bank7
 12522  1EFD  0092               	movwf	18	;volatile
 12523                           
 12524                           ;pwm.c: 16: PWM7DCH = 0x00;
 12525  1EFE  0191               	clrf	17	;volatile
 12526                           
 12527                           ;pwm.c: 18: PWM7DCL = 0x00;
 12528  1EFF  0190               	clrf	16	;volatile
 12529                           
 12530                           ;pwm.c: 20: CCPTMRS1bits.P7TSEL = 0x02;
 12531  1F00  0024               	movlb	4	; select bank4
 12532  1F01  081F               	movf	31,w	;volatile
 12533  1F02  39CF               	andlw	-49
 12534  1F03  3820               	iorlw	32
 12535  1F04  009F               	movwf	31	;volatile
 12536                           
 12537                           ;pwm.c: 23: CCP1CONbits.CCP1EN = 1;
 12538  1F05  0026               	movlb	6	; select bank6
 12539  1F06  178E               	bsf	14,7	;volatile
 12540                           
 12541                           ;pwm.c: 24: CCP1CONbits.CCP1FMT = 1;
 12542  1F07  160E               	bsf	14,4	;volatile
 12543                           
 12544                           ;pwm.c: 25: CCP1CONbits.CCP1MODE = 0xF;
 12545  1F08  300F               	movlw	15
 12546  1F09  048E               	iorwf	14,f	;volatile
 12547                           
 12548                           ;pwm.c: 26: CCPTMRS0bits.C1TSEL = 0x1;
 12549  1F0A  0024               	movlb	4	; select bank4
 12550  1F0B  081E               	movf	30,w	;volatile
 12551  1F0C  39FC               	andlw	-4
 12552  1F0D  3801               	iorlw	1
 12553  1F0E  009E               	movwf	30	;volatile
 12554  1F0F  0008               	return
 12555  1F10                     __end_of_PWM_Initialize:	
 12556                           
 12557                           	psect	text23
 12558  1FC9                     __ptext23:	
 12559 ;; *************** function _PIN_MANAGER_Initialize *****************
 12560 ;; Defined at:
 12561 ;;		line 3 in file "pin_manager.c"
 12562 ;; Parameters:    Size  Location     Type
 12563 ;;		None
 12564 ;; Auto vars:     Size  Location     Type
 12565 ;;  state           1    0[COMMON] char 
 12566 ;; Return value:  Size  Location     Type
 12567 ;;                  1    wreg      void 
 12568 ;; Registers used:
 12569 ;;		wreg, status,2
 12570 ;; Tracked objects:
 12571 ;;		On entry : 0/0
 12572 ;;		On exit  : 0/0
 12573 ;;		Unchanged: 0/0
 12574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12576 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12578 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12579 ;;Total ram usage:        1 bytes
 12580 ;; Hardware stack levels used:    1
 12581 ;; This function calls:
 12582 ;;		Nothing
 12583 ;; This function is called by:
 12584 ;;		_SYSTEM_Initialize
 12585 ;; This function uses a non-reentrant model
 12586 ;;
 12587                           
 12588                           
 12589                           ;psect for function _PIN_MANAGER_Initialize
 12590  1FC9                     _PIN_MANAGER_Initialize:	
 12591                           
 12592                           ;pin_manager.c: 5: LATA = 0x20;
 12593                           
 12594                           ;incstack = 0
 12595                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 12596  1FC9  3020               	movlw	32
 12597  1FCA  0020               	movlb	0	; select bank0
 12598  1FCB  0096               	movwf	22	;volatile
 12599                           
 12600                           ;pin_manager.c: 6: LATB = 0x00;
 12601  1FCC  0197               	clrf	23	;volatile
 12602                           
 12603                           ;pin_manager.c: 7: LATC = 0x00;
 12604  1FCD  0198               	clrf	24	;volatile
 12605                           
 12606                           ;pin_manager.c: 9: WPUA = 0x00;
 12607  1FCE  003E               	movlb	30	; select bank30
 12608  1FCF  01B9               	clrf	57	;volatile
 12609                           
 12610                           ;pin_manager.c: 10: WPUB = 0x00;
 12611  1FD0  01C4               	clrf	68	;volatile
 12612                           
 12613                           ;pin_manager.c: 11: WPUC = 0x00;
 12614  1FD1  01CF               	clrf	79	;volatile
 12615                           
 12616                           ;pin_manager.c: 12: WPUE = 0x8;
 12617  1FD2  3008               	movlw	8
 12618  1FD3  00E5               	movwf	101	;volatile
 12619                           
 12620                           ;pin_manager.c: 14: TRISA = 0x00;
 12621  1FD4  0020               	movlb	0	; select bank0
 12622  1FD5  0191               	clrf	17	;volatile
 12623                           
 12624                           ;pin_manager.c: 15: TRISB = 0x0E;
 12625  1FD6  300E               	movlw	14
 12626  1FD7  0092               	movwf	18	;volatile
 12627                           
 12628                           ;pin_manager.c: 16: TRISC = 0xFF;
 12629  1FD8  30FF               	movlw	255
 12630  1FD9  0093               	movwf	19	;volatile
 12631                           
 12632                           ;pin_manager.c: 18: ANSELA = 0x00;
 12633  1FDA  003E               	movlb	30	; select bank30
 12634  1FDB  01B8               	clrf	56	;volatile
 12635                           
 12636                           ;pin_manager.c: 19: ANSELB = 0x0A;
 12637  1FDC  300A               	movlw	10
 12638  1FDD  00C3               	movwf	67	;volatile
 12639                           
 12640                           ;pin_manager.c: 20: ANSELC = 0xFF;
 12641  1FDE  30FF               	movlw	255
 12642  1FDF  00CE               	movwf	78	;volatile
 12643                           
 12644                           ;pin_manager.c: 23: PIE0bits.IOCIE = 0;
 12645  1FE0  002E               	movlb	14	; select bank14
 12646  1FE1  1216               	bcf	22,4	;volatile
 12647                           
 12648                           ;pin_manager.c: 24: int8_t state = GIE;
 12649  1FE2  3000               	movlw	0
 12650  1FE3  1B8B               	btfsc	11,7	;volatile
 12651  1FE4  3001               	movlw	1
 12652  1FE5  00F0               	movwf	PIN_MANAGER_Initialize@state
 12653                           
 12654                           ;pin_manager.c: 25: GIE = 0;
 12655  1FE6  138B               	bcf	11,7	;volatile
 12656                           
 12657                           ;pin_manager.c: 26: PPSLOCK = 0x55;
 12658  1FE7  3055               	movlw	85
 12659  1FE8  003D               	movlb	29	; select bank29
 12660  1FE9  008F               	movwf	15	;volatile
 12661                           
 12662                           ;pin_manager.c: 27: PPSLOCK = 0xAA;
 12663  1FEA  30AA               	movlw	170
 12664  1FEB  008F               	movwf	15	;volatile
 12665                           
 12666                           ;pin_manager.c: 28: PPSLOCKbits.PPSLOCKED = 0x00;
 12667  1FEC  100F               	bcf	15,0	;volatile
 12668                           
 12669                           ;pin_manager.c: 30: RA6PPS = 0x0E;
 12670  1FED  300E               	movlw	14
 12671  1FEE  003E               	movlb	30	; select bank30
 12672  1FEF  0096               	movwf	22	;volatile
 12673                           
 12674                           ;pin_manager.c: 31: RA7PPS = 0x0F;
 12675  1FF0  300F               	movlw	15
 12676  1FF1  0097               	movwf	23	;volatile
 12677                           
 12678                           ;pin_manager.c: 32: RB0PPS = 0x09;
 12679  1FF2  3009               	movlw	9
 12680  1FF3  0098               	movwf	24	;volatile
 12681                           
 12682                           ;pin_manager.c: 33: PPSLOCK = 0x55;
 12683  1FF4  3055               	movlw	85
 12684  1FF5  003D               	movlb	29	; select bank29
 12685  1FF6  008F               	movwf	15	;volatile
 12686                           
 12687                           ;pin_manager.c: 34: PPSLOCK = 0xAA;
 12688  1FF7  30AA               	movlw	170
 12689  1FF8  008F               	movwf	15	;volatile
 12690                           
 12691                           ;pin_manager.c: 35: PPSLOCKbits.PPSLOCKED = 0x01;
 12692  1FF9  140F               	bsf	15,0	;volatile
 12693                           
 12694                           ;pin_manager.c: 36: GIE = state;
 12695  1FFA  1C70               	btfss	PIN_MANAGER_Initialize@state,0
 12696  1FFB  2FFE               	goto	u3010
 12697  1FFC  178B               	bsf	11,7	;volatile
 12698  1FFD  0008               	return
 12699  1FFE                     u3010:	
 12700  1FFE  138B               	bcf	11,7	;volatile
 12701  1FFF  0008               	return
 12702  2000                     __end_of_PIN_MANAGER_Initialize:	
 12703                           
 12704                           	psect	text24
 12705  1DCB                     __ptext24:	
 12706 ;; *************** function _OSCILLATOR_Initialize *****************
 12707 ;; Defined at:
 12708 ;;		line 53 in file "system.c"
 12709 ;; Parameters:    Size  Location     Type
 12710 ;;		None
 12711 ;; Auto vars:     Size  Location     Type
 12712 ;;		None
 12713 ;; Return value:  Size  Location     Type
 12714 ;;                  1    wreg      void 
 12715 ;; Registers used:
 12716 ;;		wreg, status,2
 12717 ;; Tracked objects:
 12718 ;;		On entry : 0/0
 12719 ;;		On exit  : 0/0
 12720 ;;		Unchanged: 0/0
 12721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12726 ;;Total ram usage:        0 bytes
 12727 ;; Hardware stack levels used:    1
 12728 ;; This function calls:
 12729 ;;		Nothing
 12730 ;; This function is called by:
 12731 ;;		_SYSTEM_Initialize
 12732 ;; This function uses a non-reentrant model
 12733 ;;
 12734                           
 12735                           
 12736                           ;psect for function _OSCILLATOR_Initialize
 12737  1DCB                     _OSCILLATOR_Initialize:	
 12738                           
 12739                           ;system.c: 55: OSCCON1 = 0x60;
 12740                           
 12741                           ;incstack = 0
 12742                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 12743  1DCB  3060               	movlw	96
 12744  1DCC  0031               	movlb	17	; select bank17
 12745  1DCD  008D               	movwf	13	;volatile
 12746                           
 12747                           ;system.c: 56: OSCCON3 = 0x00;
 12748  1DCE  018F               	clrf	15	;volatile
 12749                           
 12750                           ;system.c: 57: OSCEN = 0x00;
 12751  1DCF  0191               	clrf	17	;volatile
 12752                           
 12753                           ;system.c: 58: OSCFRQ = 0x06;
 12754  1DD0  3006               	movlw	6
 12755  1DD1  0093               	movwf	19	;volatile
 12756                           
 12757                           ;system.c: 59: OSCTUNE = 0x00;
 12758  1DD2  0192               	clrf	18	;volatile
 12759  1DD3  0008               	return
 12760  1DD4                     __end_of_OSCILLATOR_Initialize:	
 12761                           
 12762                           	psect	text25
 12763  115A                     __ptext25:	
 12764 ;; *************** function _LCDInit *****************
 12765 ;; Defined at:
 12766 ;;		line 247 in file "lcd.c"
 12767 ;; Parameters:    Size  Location     Type
 12768 ;;		None
 12769 ;; Auto vars:     Size  Location     Type
 12770 ;;		None
 12771 ;; Return value:  Size  Location     Type
 12772 ;;                  1    wreg      void 
 12773 ;; Registers used:
 12774 ;;		wreg, status,2, status,0, pclath, cstack
 12775 ;; Tracked objects:
 12776 ;;		On entry : 0/0
 12777 ;;		On exit  : 0/0
 12778 ;;		Unchanged: 0/0
 12779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12782 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12783 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12784 ;;Total ram usage:        1 bytes
 12785 ;; Hardware stack levels used:    1
 12786 ;; Hardware stack levels required when called:    1
 12787 ;; This function calls:
 12788 ;;		_LCDWrite
 12789 ;; This function is called by:
 12790 ;;		_main
 12791 ;;		_SYSTEM_Initialize
 12792 ;; This function uses a non-reentrant model
 12793 ;;
 12794                           
 12795                           
 12796                           ;psect for function _LCDInit
 12797  115A                     _LCDInit:	
 12798                           
 12799                           ;lcd.c: 249: TRISAbits.TRISA0 = 0;
 12800                           
 12801                           ;incstack = 0
 12802                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
 12803  115A  0020               	movlb	0	; select bank0
 12804  115B  1011               	bcf	17,0	;volatile
 12805                           
 12806                           ;lcd.c: 250: TRISAbits.TRISA1 = 0;
 12807  115C  1091               	bcf	17,1	;volatile
 12808                           
 12809                           ;lcd.c: 251: TRISAbits.TRISA2 = 0;
 12810  115D  1111               	bcf	17,2	;volatile
 12811                           
 12812                           ;lcd.c: 252: TRISAbits.TRISA3 = 0;
 12813  115E  1191               	bcf	17,3	;volatile
 12814                           
 12815                           ;lcd.c: 253: TRISAbits.TRISA4 = 0;
 12816  115F  1211               	bcf	17,4	;volatile
 12817                           
 12818                           ;lcd.c: 254: LATAbits.LATA3 = 0;
 12819  1160  1196               	bcf	22,3	;volatile
 12820                           
 12821                           ;lcd.c: 255: LATAbits.LATA4 = 0;
 12822  1161  1216               	bcf	22,4	;volatile
 12823                           
 12824                           ;lcd.c: 256: LATAbits.LATA2 = 0;
 12825  1162  1116               	bcf	22,2	;volatile
 12826                           
 12827                           ;lcd.c: 257: LATAbits.LATA0 = 0;
 12828  1163  1016               	bcf	22,0	;volatile
 12829                           
 12830                           ;lcd.c: 259: LATAbits.LATA0 = 1;
 12831  1164  1416               	bsf	22,0	;volatile
 12832                           
 12833                           ;lcd.c: 261: LCDWrite(0, 0x21);
 12834  1165  3021               	movlw	33
 12835  1166  00F5               	movwf	??_LCDInit
 12836  1167  0875               	movf	??_LCDInit,w
 12837  1168  00F0               	movwf	LCDWrite@data
 12838  1169  3000               	movlw	0
 12839  116A  319F  2752  3191   	fcall	_LCDWrite
 12840                           
 12841                           ;lcd.c: 269: LCDWrite(0, 0XB9);
 12842  116D  30B9               	movlw	185
 12843  116E  00F5               	movwf	??_LCDInit
 12844  116F  0875               	movf	??_LCDInit,w
 12845  1170  00F0               	movwf	LCDWrite@data
 12846  1171  3000               	movlw	0
 12847  1172  319F  2752  3191   	fcall	_LCDWrite
 12848                           
 12849                           ;lcd.c: 271: LCDWrite(0, 0x04);
 12850  1175  3004               	movlw	4
 12851  1176  00F5               	movwf	??_LCDInit
 12852  1177  0875               	movf	??_LCDInit,w
 12853  1178  00F0               	movwf	LCDWrite@data
 12854  1179  3000               	movlw	0
 12855  117A  319F  2752  3191   	fcall	_LCDWrite
 12856                           
 12857                           ;lcd.c: 273: LCDWrite(0, 0x14);
 12858  117D  3014               	movlw	20
 12859  117E  00F5               	movwf	??_LCDInit
 12860  117F  0875               	movf	??_LCDInit,w
 12861  1180  00F0               	movwf	LCDWrite@data
 12862  1181  3000               	movlw	0
 12863  1182  319F  2752  3191   	fcall	_LCDWrite
 12864                           
 12865                           ;lcd.c: 275: LCDWrite(0, 0x20);
 12866  1185  3020               	movlw	32
 12867  1186  00F5               	movwf	??_LCDInit
 12868  1187  0875               	movf	??_LCDInit,w
 12869  1188  00F0               	movwf	LCDWrite@data
 12870  1189  3000               	movlw	0
 12871  118A  319F  2752  3191   	fcall	_LCDWrite
 12872                           
 12873                           ;lcd.c: 277: LCDWrite(0, 0x0C);
 12874  118D  300C               	movlw	12
 12875  118E  00F5               	movwf	??_LCDInit
 12876  118F  0875               	movf	??_LCDInit,w
 12877  1190  00F0               	movwf	LCDWrite@data
 12878  1191  3000               	movlw	0
 12879  1192  319F  2752         	fcall	_LCDWrite
 12880  1194  0008               	return
 12881  1195                     __end_of_LCDInit:	
 12882                           
 12883                           	psect	text26
 12884  1F77                     __ptext26:	
 12885 ;; *************** function _LCDClear *****************
 12886 ;; Defined at:
 12887 ;;		line 182 in file "lcd.c"
 12888 ;; Parameters:    Size  Location     Type
 12889 ;;		None
 12890 ;; Auto vars:     Size  Location     Type
 12891 ;;  index           2    9[COMMON] int 
 12892 ;; Return value:  Size  Location     Type
 12893 ;;                  1    wreg      void 
 12894 ;; Registers used:
 12895 ;;		wreg, status,2, status,0, pclath, cstack
 12896 ;; Tracked objects:
 12897 ;;		On entry : 0/0
 12898 ;;		On exit  : 0/0
 12899 ;;		Unchanged: 0/0
 12900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12902 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12903 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12904 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12905 ;;Total ram usage:        3 bytes
 12906 ;; Hardware stack levels used:    1
 12907 ;; Hardware stack levels required when called:    2
 12908 ;; This function calls:
 12909 ;;		_LCDWrite
 12910 ;;		_gotoXY
 12911 ;; This function is called by:
 12912 ;;		_main
 12913 ;;		_SYSTEM_Initialize
 12914 ;; This function uses a non-reentrant model
 12915 ;;
 12916                           
 12917                           
 12918                           ;psect for function _LCDClear
 12919  1F77                     _LCDClear:	
 12920                           
 12921                           ;lcd.c: 184: int index;
 12922                           ;lcd.c: 185: for (index = 0 ; index < (84 * 48 / 8) ; index++)
 12923                           
 12924                           ;incstack = 0
 12925                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
 12926  1F77  01F9               	clrf	LCDClear@index
 12927  1F78  01FA               	clrf	LCDClear@index+1
 12928  1F79  087A               	movf	LCDClear@index+1,w
 12929  1F7A  3A80               	xorlw	128
 12930  1F7B  00F8               	movwf	??_LCDClear
 12931  1F7C  3081               	movlw	129
 12932  1F7D  0278               	subwf	??_LCDClear,w
 12933  1F7E  1D03               	skipz
 12934  1F7F  2F82               	goto	u2975
 12935  1F80  30F8               	movlw	248
 12936  1F81  0279               	subwf	LCDClear@index,w
 12937  1F82                     u2975:	
 12938  1F82  1803               	btfsc	3,0
 12939  1F83  2F98               	goto	l2680
 12940  1F84                     l2674:	
 12941                           
 12942                           ;lcd.c: 186: LCDWrite(1, 0x00);
 12943  1F84  01F0               	clrf	LCDWrite@data
 12944  1F85  3001               	movlw	1
 12945  1F86  319F  2752  319F   	fcall	_LCDWrite
 12946  1F89  3001               	movlw	1
 12947  1F8A  07F9               	addwf	LCDClear@index,f
 12948  1F8B  3000               	movlw	0
 12949  1F8C  3DFA               	addwfc	LCDClear@index+1,f
 12950  1F8D  087A               	movf	LCDClear@index+1,w
 12951  1F8E  3A80               	xorlw	128
 12952  1F8F  00F8               	movwf	??_LCDClear
 12953  1F90  3081               	movlw	129
 12954  1F91  0278               	subwf	??_LCDClear,w
 12955  1F92  1D03               	skipz
 12956  1F93  2F96               	goto	u2985
 12957  1F94  30F8               	movlw	248
 12958  1F95  0279               	subwf	LCDClear@index,w
 12959  1F96                     u2985:	
 12960  1F96  1C03               	skipc
 12961  1F97  2F84               	goto	l2674
 12962  1F98                     l2680:	
 12963                           
 12964                           ;lcd.c: 187: gotoXY(0, 0);
 12965  1F98  01F5               	clrf	gotoXY@y
 12966  1F99  3000               	movlw	0
 12967  1F9A  319E  261B         	fcall	_gotoXY
 12968  1F9C  0008               	return
 12969  1F9D                     __end_of_LCDClear:	
 12970                           
 12971                           	psect	text27
 12972  1E1B                     __ptext27:	
 12973 ;; *************** function _gotoXY *****************
 12974 ;; Defined at:
 12975 ;;		line 124 in file "lcd.c"
 12976 ;; Parameters:    Size  Location     Type
 12977 ;;  x               1    wreg     unsigned char 
 12978 ;;  y               1    5[COMMON] unsigned char 
 12979 ;; Auto vars:     Size  Location     Type
 12980 ;;  x               1    7[COMMON] unsigned char 
 12981 ;; Return value:  Size  Location     Type
 12982 ;;                  1    wreg      void 
 12983 ;; Registers used:
 12984 ;;		wreg, status,2, status,0, pclath, cstack
 12985 ;; Tracked objects:
 12986 ;;		On entry : 0/0
 12987 ;;		On exit  : 0/0
 12988 ;;		Unchanged: 0/0
 12989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12990 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12991 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12992 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12993 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12994 ;;Total ram usage:        3 bytes
 12995 ;; Hardware stack levels used:    1
 12996 ;; Hardware stack levels required when called:    1
 12997 ;; This function calls:
 12998 ;;		_LCDWrite
 12999 ;; This function is called by:
 13000 ;;		_main
 13001 ;;		_LCDClear
 13002 ;; This function uses a non-reentrant model
 13003 ;;
 13004                           
 13005                           
 13006                           ;psect for function _gotoXY
 13007  1E1B                     _gotoXY:	
 13008                           
 13009                           ;incstack = 0
 13010                           ; Regs used in _gotoXY: [wreg+status,2+status,0+pclath+cstack]
 13011                           ;gotoXY@x stored from wreg
 13012  1E1B  00F7               	movwf	gotoXY@x
 13013                           
 13014                           ;lcd.c: 126: LCDWrite(0,(uint8_t)(0x80 | x));
 13015  1E1C  0877               	movf	gotoXY@x,w
 13016  1E1D  3880               	iorlw	128
 13017  1E1E  00F6               	movwf	??_gotoXY
 13018  1E1F  0876               	movf	??_gotoXY,w
 13019  1E20  00F0               	movwf	LCDWrite@data
 13020  1E21  3000               	movlw	0
 13021  1E22  319F  2752  319E   	fcall	_LCDWrite
 13022                           
 13023                           ;lcd.c: 127: LCDWrite(0,(uint8_t)(0x40 | y));
 13024  1E25  0875               	movf	gotoXY@y,w
 13025  1E26  3840               	iorlw	64
 13026  1E27  00F6               	movwf	??_gotoXY
 13027  1E28  0876               	movf	??_gotoXY,w
 13028  1E29  00F0               	movwf	LCDWrite@data
 13029  1E2A  3000               	movlw	0
 13030  1E2B  319F  2752         	fcall	_LCDWrite
 13031  1E2D  0008               	return
 13032  1E2E                     __end_of_gotoXY:	
 13033                           
 13034                           	psect	text28
 13035  13FF                     __ptext28:	
 13036 ;; *************** function _Init_Battery_State_Machine *****************
 13037 ;; Defined at:
 13038 ;;		line 21 in file "battery_charger.c"
 13039 ;; Parameters:    Size  Location     Type
 13040 ;;  z               1    wreg     unsigned char 
 13041 ;; Auto vars:     Size  Location     Type
 13042 ;;  z               1   35[BANK0 ] unsigned char 
 13043 ;; Return value:  Size  Location     Type
 13044 ;;                  1    wreg      void 
 13045 ;; Registers used:
 13046 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13047 ;; Tracked objects:
 13048 ;;		On entry : 0/0
 13049 ;;		On exit  : 0/0
 13050 ;;		Unchanged: 0/0
 13051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13053 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13054 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13055 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13056 ;;Total ram usage:        5 bytes
 13057 ;; Hardware stack levels used:    1
 13058 ;; Hardware stack levels required when called:    2
 13059 ;; This function calls:
 13060 ;;		___awtoft
 13061 ;;		___ftmul
 13062 ;;		___fttol
 13063 ;; This function is called by:
 13064 ;;		_SYSTEM_Initialize
 13065 ;; This function uses a non-reentrant model
 13066 ;;
 13067                           
 13068                           
 13069                           ;psect for function _Init_Battery_State_Machine
 13070  13FF                     _Init_Battery_State_Machine:	
 13071                           
 13072                           ;incstack = 0
 13073                           ; Regs used in _Init_Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13074                           ;Init_Battery_State_Machine@z stored from wreg
 13075  13FF  0020               	movlb	0	; select bank0
 13076  1400  00C3               	movwf	Init_Battery_State_Machine@z
 13077                           
 13078                           ;battery_charger.c: 23: batteryState[z] =PRECHARGE;
 13079  1401  3003               	movlw	3
 13080  1402  00BF               	movwf	??_Init_Battery_State_Machine
 13081  1403  0843               	movf	Init_Battery_State_Machine@z,w
 13082  1404  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 13083  1405  0086               	movwf	6
 13084  1406  0187               	clrf	7
 13085  1407  083F               	movf	??_Init_Battery_State_Machine,w
 13086  1408  0081               	movwf	1
 13087                           
 13088                           ;battery_charger.c: 24: stateCounter[z] =5;
 13089  1409  3543               	lslf	Init_Battery_State_Machine@z,w
 13090  140A  3EB8               	addlw	(low (_stateCounter| 0))& (0+255)
 13091  140B  0086               	movwf	6
 13092  140C  0187               	clrf	7
 13093  140D  3005               	movlw	5
 13094  140E  3FC0               	movwi [0]fsr1
 13095  140F  3000               	movlw	0
 13096  1410  3FC1               	movwi [1]fsr1
 13097                           
 13098                           ;battery_charger.c: 25: Iref[z] =10;
 13099  1411  3543               	lslf	Init_Battery_State_Machine@z,w
 13100  1412  3EB0               	addlw	(low (_Iref| 0))& (0+255)
 13101  1413  0086               	movwf	6
 13102  1414  0187               	clrf	7
 13103  1415  300A               	movlw	10
 13104  1416  3FC0               	movwi [0]fsr1
 13105  1417  3000               	movlw	0
 13106  1418  3FC1               	movwi [1]fsr1
 13107                           
 13108                           ;battery_charger.c: 26: Vref[z] =1425+(int16_t)((250-batteryTemp)*.24);
 13109  1419  0021               	movlb	1	; select bank1
 13110  141A  096D               	comf	_batteryTemp^(0+128),w
 13111  141B  0020               	movlb	0	; select bank0
 13112  141C  00BF               	movwf	??_Init_Battery_State_Machine
 13113  141D  0021               	movlb	1	; select bank1
 13114  141E  096E               	comf	(_batteryTemp+1)^(0+128),w
 13115  141F  0020               	movlb	0	; select bank0
 13116  1420  00C0               	movwf	??_Init_Battery_State_Machine+1
 13117  1421  0ABF               	incf	??_Init_Battery_State_Machine,f
 13118  1422  1903               	skipnz
 13119  1423  0AC0               	incf	??_Init_Battery_State_Machine+1,f
 13120  1424  083F               	movf	??_Init_Battery_State_Machine,w
 13121  1425  3EFA               	addlw	250
 13122  1426  00F9               	movwf	___awtoft@c
 13123  1427  3000               	movlw	0
 13124  1428  3D40               	addwfc	??_Init_Battery_State_Machine+1,w
 13125  1429  00FA               	movwf	___awtoft@c+1
 13126  142A  319F  2710  3193   	fcall	___awtoft
 13127  142D  0879               	movf	?___awtoft,w
 13128  142E  0020               	movlb	0	; select bank0
 13129  142F  00A4               	movwf	___ftmul@f2
 13130  1430  087A               	movf	?___awtoft+1,w
 13131  1431  00A5               	movwf	___ftmul@f2+1
 13132  1432  087B               	movf	?___awtoft+2,w
 13133  1433  00A6               	movwf	___ftmul@f2+2
 13134  1434  30C3               	movlw	195
 13135  1435  00A1               	movwf	___ftmul@f1
 13136  1436  3075               	movlw	117
 13137  1437  00A2               	movwf	___ftmul@f1+1
 13138  1438  303E               	movlw	62
 13139  1439  00A3               	movwf	___ftmul@f1+2
 13140  143A  3197  274C  3193   	fcall	___ftmul
 13141  143D  0020               	movlb	0	; select bank0
 13142  143E  0821               	movf	?___ftmul,w
 13143  143F  00B1               	movwf	___fttol@f1
 13144  1440  0822               	movf	?___ftmul+1,w
 13145  1441  00B2               	movwf	___fttol@f1+1
 13146  1442  0823               	movf	?___ftmul+2,w
 13147  1443  00B3               	movwf	___fttol@f1+2
 13148  1444  3195  256C         	fcall	___fttol
 13149  1446  0020               	movlb	0	; select bank0
 13150  1447  0831               	movf	?___fttol,w
 13151  1448  3E91               	addlw	145
 13152  1449  00C1               	movwf	??_Init_Battery_State_Machine+2
 13153  144A  3005               	movlw	5
 13154  144B  3D32               	addwfc	?___fttol+1,w
 13155  144C  00C2               	movwf	??_Init_Battery_State_Machine+3
 13156  144D  3543               	lslf	Init_Battery_State_Machine@z,w
 13157  144E  3EB4               	addlw	(low (_Vref| 0))& (0+255)
 13158  144F  0086               	movwf	6
 13159  1450  0187               	clrf	7
 13160  1451  0841               	movf	??_Init_Battery_State_Machine+2,w
 13161  1452  3FC0               	movwi [0]fsr1
 13162  1453  0842               	movf	??_Init_Battery_State_Machine+3,w
 13163  1454  3FC1               	movwi [1]fsr1
 13164                           
 13165                           ;battery_charger.c: 27: Imin[z] =15;
 13166  1455  3543               	lslf	Init_Battery_State_Machine@z,w
 13167  1456  3E55               	addlw	(low (_Imin| (0+256)))& (0+255)
 13168  1457  0086               	movwf	6
 13169  1458  3001               	movlw	1	; select bank2/3
 13170  1459  0087               	movwf	7
 13171  145A  300F               	movlw	15
 13172  145B  3FC0               	movwi [0]fsr1
 13173  145C  3000               	movlw	0
 13174  145D  3FC1               	movwi [1]fsr1
 13175                           
 13176                           ;battery_charger.c: 28: IminCount[z] = 600;
 13177  145E  3543               	lslf	Init_Battery_State_Machine@z,w
 13178  145F  3E5E               	addlw	(low (_IminCount| 0))& (0+255)
 13179  1460  0086               	movwf	6
 13180  1461  0187               	clrf	7
 13181  1462  3058               	movlw	88
 13182  1463  3FC0               	movwi [0]fsr1
 13183  1464  3002               	movlw	2
 13184  1465  3FC1               	movwi [1]fsr1
 13185  1466  0008               	return
 13186  1467                     __end_of_Init_Battery_State_Machine:	
 13187                           
 13188                           	psect	text29
 13189  1ED2                     __ptext29:	
 13190 ;; *************** function _ADC_Initialize *****************
 13191 ;; Defined at:
 13192 ;;		line 138 in file "adc.c"
 13193 ;; Parameters:    Size  Location     Type
 13194 ;;		None
 13195 ;; Auto vars:     Size  Location     Type
 13196 ;;		None
 13197 ;; Return value:  Size  Location     Type
 13198 ;;                  1    wreg      void 
 13199 ;; Registers used:
 13200 ;;		wreg, status,2
 13201 ;; Tracked objects:
 13202 ;;		On entry : 0/0
 13203 ;;		On exit  : 0/0
 13204 ;;		Unchanged: 0/0
 13205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13210 ;;Total ram usage:        0 bytes
 13211 ;; Hardware stack levels used:    1
 13212 ;; This function calls:
 13213 ;;		Nothing
 13214 ;; This function is called by:
 13215 ;;		_SYSTEM_Initialize
 13216 ;; This function uses a non-reentrant model
 13217 ;;
 13218                           
 13219                           
 13220                           ;psect for function _ADC_Initialize
 13221  1ED2                     _ADC_Initialize:	
 13222                           
 13223                           ;adc.c: 140: ADCON1 = 0x00;
 13224                           
 13225                           ;incstack = 0
 13226                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 13227  1ED2  0021               	movlb	1	; select bank1
 13228  1ED3  0194               	clrf	20	;volatile
 13229                           
 13230                           ;adc.c: 142: ADCON2 = 0x00;
 13231  1ED4  0195               	clrf	21	;volatile
 13232                           
 13233                           ;adc.c: 144: ADCON3 = 0x00;
 13234  1ED5  0196               	clrf	22	;volatile
 13235                           
 13236                           ;adc.c: 146: ADACT = 0x00;
 13237  1ED6  0199               	clrf	25	;volatile
 13238                           
 13239                           ;adc.c: 148: ADSTAT = 0x00;
 13240  1ED7  0197               	clrf	23	;volatile
 13241                           
 13242                           ;adc.c: 150: FVRCON = 0b11000011;
 13243  1ED8  30C3               	movlw	195
 13244  1ED9  0032               	movlb	18	; select bank18
 13245  1EDA  008C               	movwf	12	;volatile
 13246                           
 13247                           ;adc.c: 151: ADCLK = 0x3F;
 13248  1EDB  303F               	movlw	63
 13249  1EDC  0021               	movlb	1	; select bank1
 13250  1EDD  0098               	movwf	24	;volatile
 13251                           
 13252                           ;adc.c: 158: ADREF = 0x03;
 13253  1EDE  3003               	movlw	3
 13254  1EDF  009A               	movwf	26	;volatile
 13255                           
 13256                           ;adc.c: 161: ADCAP = 0x00;
 13257  1EE0  019B               	clrf	27	;volatile
 13258                           
 13259                           ;adc.c: 164: ADPRE = 0x07;
 13260  1EE1  3007               	movlw	7
 13261  1EE2  009C               	movwf	28	;volatile
 13262                           
 13263                           ;adc.c: 166: ADACQ = 0x00;
 13264  1EE3  019D               	clrf	29	;volatile
 13265                           
 13266                           ;adc.c: 168: ADPCH = 0x00;
 13267  1EE4  019E               	clrf	30	;volatile
 13268                           
 13269                           ;adc.c: 170: ADRPT = 0x00;
 13270  1EE5  0022               	movlb	2	; select bank2
 13271  1EE6  018D               	clrf	13	;volatile
 13272                           
 13273                           ;adc.c: 172: ADLTHL = 0x00;
 13274  1EE7  018E               	clrf	14	;volatile
 13275                           
 13276                           ;adc.c: 174: ADLTHH = 0x00;
 13277  1EE8  018F               	clrf	15	;volatile
 13278                           
 13279                           ;adc.c: 176: ADUTHL = 0x00;
 13280  1EE9  0190               	clrf	16	;volatile
 13281                           
 13282                           ;adc.c: 178: ADUTHH = 0x00;
 13283  1EEA  0191               	clrf	17	;volatile
 13284                           
 13285                           ;adc.c: 180: ADSTPTL = 0x00;
 13286  1EEB  0192               	clrf	18	;volatile
 13287                           
 13288                           ;adc.c: 182: ADSTPTH = 0x00;
 13289  1EEC  0193               	clrf	19	;volatile
 13290                           
 13291                           ;adc.c: 184: ADCON0 = 0x84;
 13292  1EED  3084               	movlw	132
 13293  1EEE  0021               	movlb	1	; select bank1
 13294  1EEF  0093               	movwf	19	;volatile
 13295  1EF0  0008               	return
 13296  1EF1                     __end_of_ADC_Initialize:	
 13297                           
 13298                           	psect	text30
 13299  1E83                     __ptext30:	
 13300 ;; *************** function _PWM7_LoadDutyValue *****************
 13301 ;; Defined at:
 13302 ;;		line 37 in file "pwm.c"
 13303 ;; Parameters:    Size  Location     Type
 13304 ;;  dutyCycle7      2    0[COMMON] unsigned int 
 13305 ;; Auto vars:     Size  Location     Type
 13306 ;;		None
 13307 ;; Return value:  Size  Location     Type
 13308 ;;                  1    wreg      void 
 13309 ;; Registers used:
 13310 ;;		wreg, status,2, status,0
 13311 ;; Tracked objects:
 13312 ;;		On entry : 0/0
 13313 ;;		On exit  : 0/0
 13314 ;;		Unchanged: 0/0
 13315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13316 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13318 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13319 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13320 ;;Total ram usage:        4 bytes
 13321 ;; Hardware stack levels used:    1
 13322 ;; This function calls:
 13323 ;;		Nothing
 13324 ;; This function is called by:
 13325 ;;		_main
 13326 ;; This function uses a non-reentrant model
 13327 ;;
 13328                           
 13329                           
 13330                           ;psect for function _PWM7_LoadDutyValue
 13331  1E83                     _PWM7_LoadDutyValue:	
 13332                           
 13333                           ;pwm.c: 39: PWM7DCH = (dutyCycle7 & 0x03FC)>>2;
 13334                           
 13335                           ;incstack = 0
 13336                           ; Regs used in _PWM7_LoadDutyValue: [wreg+status,2+status,0]
 13337  1E83  0871               	movf	PWM7_LoadDutyValue@dutyCycle7+1,w
 13338  1E84  00F3               	movwf	??_PWM7_LoadDutyValue+1
 13339  1E85  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 13340  1E86  00F2               	movwf	??_PWM7_LoadDutyValue
 13341  1E87  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 13342  1E88  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 13343  1E89  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 13344  1E8A  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 13345  1E8B  0872               	movf	??_PWM7_LoadDutyValue,w
 13346  1E8C  0027               	movlb	7	; select bank7
 13347  1E8D  0091               	movwf	17	;volatile
 13348                           
 13349                           ;pwm.c: 41: PWM7DCL = (dutyCycle7 & 0x0003)<<6;
 13350  1E8E  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 13351  1E8F  3903               	andlw	3
 13352  1E90  00F2               	movwf	??_PWM7_LoadDutyValue
 13353  1E91  3005               	movlw	5
 13354  1E92                     u3635:	
 13355  1E92  35F2               	lslf	??_PWM7_LoadDutyValue,f
 13356  1E93  3EFF               	addlw	-1
 13357  1E94  1D03               	skipz
 13358  1E95  2E92               	goto	u3635
 13359  1E96  3572               	lslf	??_PWM7_LoadDutyValue,w
 13360  1E97  0090               	movwf	16	;volatile
 13361  1E98  0008               	return
 13362  1E99                     __end_of_PWM7_LoadDutyValue:	
 13363                           
 13364                           	psect	text31
 13365  1E6D                     __ptext31:	
 13366 ;; *************** function _PWM6_LoadDutyValue *****************
 13367 ;; Defined at:
 13368 ;;		line 30 in file "pwm.c"
 13369 ;; Parameters:    Size  Location     Type
 13370 ;;  dutyCycle6      2    0[COMMON] unsigned int 
 13371 ;; Auto vars:     Size  Location     Type
 13372 ;;		None
 13373 ;; Return value:  Size  Location     Type
 13374 ;;                  1    wreg      void 
 13375 ;; Registers used:
 13376 ;;		wreg, status,2, status,0
 13377 ;; Tracked objects:
 13378 ;;		On entry : 0/0
 13379 ;;		On exit  : 0/0
 13380 ;;		Unchanged: 0/0
 13381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13382 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13384 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13385 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13386 ;;Total ram usage:        4 bytes
 13387 ;; Hardware stack levels used:    1
 13388 ;; This function calls:
 13389 ;;		Nothing
 13390 ;; This function is called by:
 13391 ;;		_main
 13392 ;; This function uses a non-reentrant model
 13393 ;;
 13394                           
 13395                           
 13396                           ;psect for function _PWM6_LoadDutyValue
 13397  1E6D                     _PWM6_LoadDutyValue:	
 13398                           
 13399                           ;pwm.c: 32: PWM6DCH = (dutyCycle6 & 0x03FC)>>2;
 13400                           
 13401                           ;incstack = 0
 13402                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 13403  1E6D  0871               	movf	PWM6_LoadDutyValue@dutyCycle6+1,w
 13404  1E6E  00F3               	movwf	??_PWM6_LoadDutyValue+1
 13405  1E6F  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 13406  1E70  00F2               	movwf	??_PWM6_LoadDutyValue
 13407  1E71  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13408  1E72  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13409  1E73  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13410  1E74  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13411  1E75  0872               	movf	??_PWM6_LoadDutyValue,w
 13412  1E76  0027               	movlb	7	; select bank7
 13413  1E77  008D               	movwf	13	;volatile
 13414                           
 13415                           ;pwm.c: 34: PWM6DCL = (dutyCycle6 & 0x0003)<<6;
 13416  1E78  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 13417  1E79  3903               	andlw	3
 13418  1E7A  00F2               	movwf	??_PWM6_LoadDutyValue
 13419  1E7B  3005               	movlw	5
 13420  1E7C                     u3625:	
 13421  1E7C  35F2               	lslf	??_PWM6_LoadDutyValue,f
 13422  1E7D  3EFF               	addlw	-1
 13423  1E7E  1D03               	skipz
 13424  1E7F  2E7C               	goto	u3625
 13425  1E80  3572               	lslf	??_PWM6_LoadDutyValue,w
 13426  1E81  008C               	movwf	12	;volatile
 13427  1E82  0008               	return
 13428  1E83                     __end_of_PWM6_LoadDutyValue:	
 13429                           
 13430                           	psect	text32
 13431  1E57                     __ptext32:	
 13432 ;; *************** function _PWM1_LoadDutyValue *****************
 13433 ;; Defined at:
 13434 ;;		line 44 in file "pwm.c"
 13435 ;; Parameters:    Size  Location     Type
 13436 ;;  dutyCycle1      2    0[COMMON] unsigned int 
 13437 ;; Auto vars:     Size  Location     Type
 13438 ;;		None
 13439 ;; Return value:  Size  Location     Type
 13440 ;;                  1    wreg      void 
 13441 ;; Registers used:
 13442 ;;		wreg, status,2, status,0
 13443 ;; Tracked objects:
 13444 ;;		On entry : 0/0
 13445 ;;		On exit  : 0/0
 13446 ;;		Unchanged: 0/0
 13447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13448 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13450 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13451 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13452 ;;Total ram usage:        4 bytes
 13453 ;; Hardware stack levels used:    1
 13454 ;; This function calls:
 13455 ;;		Nothing
 13456 ;; This function is called by:
 13457 ;;		_main
 13458 ;; This function uses a non-reentrant model
 13459 ;;
 13460                           
 13461                           
 13462                           ;psect for function _PWM1_LoadDutyValue
 13463  1E57                     _PWM1_LoadDutyValue:	
 13464                           
 13465                           ;pwm.c: 46: CCPR1H = (dutyCycle1& 0x03FC)>>2;
 13466                           
 13467                           ;incstack = 0
 13468                           ; Regs used in _PWM1_LoadDutyValue: [wreg+status,2+status,0]
 13469  1E57  0871               	movf	PWM1_LoadDutyValue@dutyCycle1+1,w
 13470  1E58  00F3               	movwf	??_PWM1_LoadDutyValue+1
 13471  1E59  0870               	movf	PWM1_LoadDutyValue@dutyCycle1,w
 13472  1E5A  00F2               	movwf	??_PWM1_LoadDutyValue
 13473  1E5B  36F3               	lsrf	??_PWM1_LoadDutyValue+1,f
 13474  1E5C  0CF2               	rrf	??_PWM1_LoadDutyValue,f
 13475  1E5D  36F3               	lsrf	??_PWM1_LoadDutyValue+1,f
 13476  1E5E  0CF2               	rrf	??_PWM1_LoadDutyValue,f
 13477  1E5F  0872               	movf	??_PWM1_LoadDutyValue,w
 13478  1E60  0026               	movlb	6	; select bank6
 13479  1E61  008D               	movwf	13	;volatile
 13480                           
 13481                           ;pwm.c: 47: CCPR1L = (dutyCycle1 & 0x0003)<<6;
 13482  1E62  0870               	movf	PWM1_LoadDutyValue@dutyCycle1,w
 13483  1E63  3903               	andlw	3
 13484  1E64  00F2               	movwf	??_PWM1_LoadDutyValue
 13485  1E65  3005               	movlw	5
 13486  1E66                     u3735:	
 13487  1E66  35F2               	lslf	??_PWM1_LoadDutyValue,f
 13488  1E67  3EFF               	addlw	-1
 13489  1E68  1D03               	skipz
 13490  1E69  2E66               	goto	u3735
 13491  1E6A  3572               	lslf	??_PWM1_LoadDutyValue,w
 13492  1E6B  008C               	movwf	12	;volatile
 13493  1E6C  0008               	return
 13494  1E6D                     __end_of_PWM1_LoadDutyValue:	
 13495                           
 13496                           	psect	text33
 13497  1E2E                     __ptext33:	
 13498 ;; *************** function _LCDWriteString *****************
 13499 ;; Defined at:
 13500 ;;		line 176 in file "lcd.c"
 13501 ;; Parameters:    Size  Location     Type
 13502 ;;  characters      2   12[COMMON] PTR const unsigned char 
 13503 ;;		 -> STR_3(5), STR_2(5), STR_1(4), 
 13504 ;; Auto vars:     Size  Location     Type
 13505 ;;		None
 13506 ;; Return value:  Size  Location     Type
 13507 ;;                  1    wreg      void 
 13508 ;; Registers used:
 13509 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13510 ;; Tracked objects:
 13511 ;;		On entry : 0/0
 13512 ;;		On exit  : 0/0
 13513 ;;		Unchanged: 0/0
 13514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13515 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13517 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13518 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13519 ;;Total ram usage:        3 bytes
 13520 ;; Hardware stack levels used:    1
 13521 ;; Hardware stack levels required when called:    2
 13522 ;; This function calls:
 13523 ;;		_LCDWriteCharacter
 13524 ;; This function is called by:
 13525 ;;		_main
 13526 ;; This function uses a non-reentrant model
 13527 ;;
 13528                           
 13529                           
 13530                           ;psect for function _LCDWriteString
 13531  1E2E                     _LCDWriteString:	
 13532  1E2E                     l3238:	
 13533                           ;lcd.c: 178: while (*characters)
 13534                           
 13535                           ;incstack = 0
 13536                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13537                           
 13538  1E2E  087C               	movf	LCDWriteString@characters,w
 13539  1E2F  0084               	movwf	4
 13540  1E30  087D               	movf	LCDWriteString@characters+1,w
 13541  1E31  0085               	movwf	5
 13542  1E32  0012               	moviw fsr0++
 13543  1E33  1903               	btfsc	3,2
 13544  1E34  0008               	return
 13545                           
 13546                           ;lcd.c: 179: LCDWriteCharacter(*characters++);
 13547  1E35  087C               	movf	LCDWriteString@characters,w
 13548  1E36  0084               	movwf	4
 13549  1E37  087D               	movf	LCDWriteString@characters+1,w
 13550  1E38  0085               	movwf	5
 13551  1E39  0800               	movf	0,w	;code access
 13552  1E3A  3192  22E7  319E   	fcall	_LCDWriteCharacter
 13553  1E3D  3001               	movlw	1
 13554  1E3E  07FC               	addwf	LCDWriteString@characters,f
 13555  1E3F  3000               	movlw	0
 13556  1E40  3DFD               	addwfc	LCDWriteString@characters+1,f
 13557  1E41  2E2E               	goto	l3238
 13558  1E42                     __end_of_LCDWriteString:	
 13559                           
 13560                           	psect	text34
 13561  080E                     __ptext34:	
 13562 ;; *************** function _LCDWriteInt *****************
 13563 ;; Defined at:
 13564 ;;		line 190 in file "lcd.c"
 13565 ;; Parameters:    Size  Location     Type
 13566 ;;  value           2   31[BANK0 ] int 
 13567 ;;  fieldLength     1   33[BANK0 ] char 
 13568 ;;  numPlaces       1   34[BANK0 ] unsigned char 
 13569 ;;  sign            1   35[BANK0 ] unsigned char 
 13570 ;; Auto vars:     Size  Location     Type
 13571 ;;  str             5   40[BANK0 ] unsigned char [5]
 13572 ;;  i               1   46[BANK0 ] unsigned char 
 13573 ;;  j               1   45[BANK0 ] unsigned char 
 13574 ;; Return value:  Size  Location     Type
 13575 ;;                  1    wreg      void 
 13576 ;; Registers used:
 13577 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13578 ;; Tracked objects:
 13579 ;;		On entry : 0/0
 13580 ;;		On exit  : 0/0
 13581 ;;		Unchanged: 0/0
 13582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13583 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13584 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13585 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13586 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13587 ;;Total ram usage:       16 bytes
 13588 ;; Hardware stack levels used:    1
 13589 ;; Hardware stack levels required when called:    2
 13590 ;; This function calls:
 13591 ;;		_LCDWriteCharacter
 13592 ;;		___awdiv
 13593 ;;		___lwmod
 13594 ;; This function is called by:
 13595 ;;		_main
 13596 ;; This function uses a non-reentrant model
 13597 ;;
 13598                           
 13599                           
 13600                           ;psect for function _LCDWriteInt
 13601  080E                     _LCDWriteInt:	
 13602                           
 13603                           ;lcd.c: 192: uint8_t str[5]={0,0,0,0,0};
 13604                           
 13605                           ;incstack = 0
 13606                           ; Regs used in _LCDWriteInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13607  080E  3050               	movlw	low LCDWriteInt@F13692
 13608  080F  0086               	movwf	6
 13609  0810  3001               	movlw	high LCDWriteInt@F13692
 13610  0811  0087               	movwf	7
 13611  0812  3048               	movlw	low LCDWriteInt@str
 13612  0813  0084               	movwf	4
 13613  0814  3000               	movlw	high LCDWriteInt@str
 13614  0815  0085               	movwf	5
 13615  0816  3005               	movlw	5
 13616  0817  0020               	movlb	0	; select bank0
 13617  0818  00C4               	movwf	??_LCDWriteInt
 13618  0819                     u3880:	
 13619  0819  0016               	moviw fsr1++
 13620  081A  001A               	movwi fsr0++
 13621  081B  0BC4               	decfsz	??_LCDWriteInt,f
 13622  081C  2819               	goto	u3880
 13623                           
 13624                           ;lcd.c: 193: uint8_t i=4,j=0;
 13625  081D  3004               	movlw	4
 13626  081E  00C4               	movwf	??_LCDWriteInt
 13627  081F  0844               	movf	??_LCDWriteInt,w
 13628  0820  00CE               	movwf	LCDWriteInt@i
 13629  0821  01CD               	clrf	LCDWriteInt@j
 13630                           
 13631                           ;lcd.c: 195: if(value<0)
 13632  0822  1FC0               	btfss	LCDWriteInt@value+1,7
 13633  0823  282F               	goto	l3252
 13634                           
 13635                           ;lcd.c: 196: {
 13636                           ;lcd.c: 197: LCDWriteCharacter('-');
 13637  0824  302D               	movlw	45
 13638  0825  3192  22E7  3188   	fcall	_LCDWriteCharacter
 13639                           
 13640                           ;lcd.c: 198: value=value*-1;
 13641  0828  0020               	movlb	0	; select bank0
 13642  0829  09BF               	comf	LCDWriteInt@value,f
 13643  082A  09C0               	comf	LCDWriteInt@value+1,f
 13644  082B  0ABF               	incf	LCDWriteInt@value,f
 13645  082C  1903               	skipnz
 13646  082D  0AC0               	incf	LCDWriteInt@value+1,f
 13647                           
 13648                           ;lcd.c: 199: }
 13649  082E  2836               	goto	l3262
 13650  082F                     l3252:	
 13651                           
 13652                           ;lcd.c: 201: else
 13653                           ;lcd.c: 202: {
 13654                           ;lcd.c: 203: if(sign == 1)
 13655  082F  0343               	decf	LCDWriteInt@sign,w
 13656  0830  1D03               	btfss	3,2
 13657  0831  2836               	goto	l3262
 13658                           
 13659                           ;lcd.c: 204: {
 13660                           ;lcd.c: 205: LCDWriteCharacter('+');
 13661  0832  302B               	movlw	43
 13662  0833  3192  22E7  3188   	fcall	_LCDWriteCharacter
 13663  0836                     l3262:	
 13664                           ;lcd.c: 206: }
 13665                           ;lcd.c: 207: }
 13666                           ;lcd.c: 209: while(value)
 13667                           
 13668  0836  0020               	movlb	0	; select bank0
 13669  0837  083F               	movf	LCDWriteInt@value,w
 13670  0838  0440               	iorwf	LCDWriteInt@value+1,w
 13671  0839  1903               	btfsc	3,2
 13672  083A  2863               	goto	l3264
 13673                           
 13674                           ;lcd.c: 210: {
 13675                           ;lcd.c: 211: str[i]=(uint16_t)value%10;
 13676  083B  300A               	movlw	10
 13677  083C  00F0               	movwf	___lwmod@divisor
 13678  083D  3000               	movlw	0
 13679  083E  00F1               	movwf	___lwmod@divisor+1
 13680  083F  0020               	movlb	0	; select bank0
 13681  0840  0840               	movf	LCDWriteInt@value+1,w
 13682  0841  00F3               	movwf	___lwmod@dividend+1
 13683  0842  083F               	movf	LCDWriteInt@value,w
 13684  0843  00F2               	movwf	___lwmod@dividend
 13685  0844  319F  279D  3188   	fcall	___lwmod
 13686  0847  0870               	movf	?___lwmod,w
 13687  0848  0020               	movlb	0	; select bank0
 13688  0849  00C4               	movwf	??_LCDWriteInt
 13689  084A  084E               	movf	LCDWriteInt@i,w
 13690  084B  3E48               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13691  084C  0086               	movwf	6
 13692  084D  0187               	clrf	7
 13693  084E  0844               	movf	??_LCDWriteInt,w
 13694  084F  0081               	movwf	1
 13695                           
 13696                           ;lcd.c: 212: value=value/10;
 13697  0850  300A               	movlw	10
 13698  0851  00F0               	movwf	___awdiv@divisor
 13699  0852  3000               	movlw	0
 13700  0853  00F1               	movwf	___awdiv@divisor+1
 13701  0854  0840               	movf	LCDWriteInt@value+1,w
 13702  0855  00F3               	movwf	___awdiv@dividend+1
 13703  0856  083F               	movf	LCDWriteInt@value,w
 13704  0857  00F2               	movwf	___awdiv@dividend
 13705  0858  3192  2296  3188   	fcall	___awdiv
 13706  085B  0871               	movf	?___awdiv+1,w
 13707  085C  0020               	movlb	0	; select bank0
 13708  085D  00C0               	movwf	LCDWriteInt@value+1
 13709  085E  0870               	movf	?___awdiv,w
 13710  085F  00BF               	movwf	LCDWriteInt@value
 13711                           
 13712                           ;lcd.c: 213: i--;
 13713  0860  3001               	movlw	1
 13714  0861  02CE               	subwf	LCDWriteInt@i,f
 13715  0862  2836               	goto	l3262
 13716  0863                     l3264:	
 13717                           
 13718                           ;lcd.c: 214: }
 13719                           ;lcd.c: 215: if(fieldLength==-1)
 13720  0863  0A41               	incf	LCDWriteInt@fieldLength,w
 13721  0864  1903               	btfsc	3,2
 13722  0865  286B               	goto	l3270
 13723  0866  2873               	goto	l3272
 13724  0867                     l3268:	
 13725                           ;lcd.c: 216: {
 13726                           ;lcd.c: 217: while(str[j]==0)
 13727                           
 13728                           
 13729                           ;lcd.c: 218: {
 13730                           ;lcd.c: 219: j++;
 13731  0867  3001               	movlw	1
 13732  0868  00C4               	movwf	??_LCDWriteInt
 13733  0869  0844               	movf	??_LCDWriteInt,w
 13734  086A  07CD               	addwf	LCDWriteInt@j,f
 13735  086B                     l3270:	
 13736  086B  084D               	movf	LCDWriteInt@j,w
 13737  086C  3E48               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13738  086D  0086               	movwf	6
 13739  086E  0187               	clrf	7
 13740  086F  0801               	movf	1,w
 13741  0870  1D03               	btfss	3,2
 13742  0871  2879               	goto	l3274
 13743  0872  2867               	goto	l3268
 13744  0873                     l3272:	
 13745                           ;lcd.c: 220: }
 13746                           ;lcd.c: 221: }
 13747                           
 13748                           
 13749                           ;lcd.c: 222: else
 13750                           ;lcd.c: 223: {
 13751                           ;lcd.c: 224: j=(uint8_t)(5-fieldLength);
 13752  0873  0341               	decf	LCDWriteInt@fieldLength,w
 13753  0874  3AFF               	xorlw	255
 13754  0875  3E05               	addlw	5
 13755  0876  00C4               	movwf	??_LCDWriteInt
 13756  0877  0844               	movf	??_LCDWriteInt,w
 13757  0878  00CD               	movwf	LCDWriteInt@j
 13758  0879                     l3274:	
 13759                           
 13760                           ;lcd.c: 225: }
 13761                           ;lcd.c: 227: for(i=j;i<(5-numPlaces);i++)
 13762  0879  084D               	movf	LCDWriteInt@j,w
 13763  087A  00C4               	movwf	??_LCDWriteInt
 13764  087B  0844               	movf	??_LCDWriteInt,w
 13765  087C  00CE               	movwf	LCDWriteInt@i
 13766  087D                     l3280:	
 13767  087D  0842               	movf	LCDWriteInt@numPlaces,w
 13768  087E  00C4               	movwf	??_LCDWriteInt
 13769  087F  01C5               	clrf	??_LCDWriteInt+1
 13770  0880  09C4               	comf	??_LCDWriteInt,f
 13771  0881  09C5               	comf	??_LCDWriteInt+1,f
 13772  0882  0AC4               	incf	??_LCDWriteInt,f
 13773  0883  1903               	skipnz
 13774  0884  0AC5               	incf	??_LCDWriteInt+1,f
 13775  0885  0844               	movf	??_LCDWriteInt,w
 13776  0886  3E05               	addlw	5
 13777  0887  00C6               	movwf	??_LCDWriteInt+2
 13778  0888  3000               	movlw	0
 13779  0889  3D45               	addwfc	??_LCDWriteInt+1,w
 13780  088A  00C7               	movwf	??_LCDWriteInt+3
 13781  088B  0847               	movf	??_LCDWriteInt+3,w
 13782  088C  3A80               	xorlw	128
 13783  088D  3C80               	sublw	128
 13784  088E  1D03               	skipz
 13785  088F  2892               	goto	u3945
 13786  0890  0846               	movf	??_LCDWriteInt+2,w
 13787  0891  024E               	subwf	LCDWriteInt@i,w
 13788  0892                     u3945:	
 13789  0892  1803               	btfsc	3,0
 13790  0893  28A4               	goto	l3282
 13791                           
 13792                           ;lcd.c: 228: {
 13793                           ;lcd.c: 229: LCDWriteCharacter((uint8_t)(48+str[i]));
 13794  0894  0020               	movlb	0	; select bank0
 13795  0895  084E               	movf	LCDWriteInt@i,w
 13796  0896  3E48               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13797  0897  0086               	movwf	6
 13798  0898  0187               	clrf	7
 13799  0899  0801               	movf	1,w
 13800  089A  3E30               	addlw	48
 13801  089B  3192  22E7  3188   	fcall	_LCDWriteCharacter
 13802  089E  3001               	movlw	1
 13803  089F  0020               	movlb	0	; select bank0
 13804  08A0  00C4               	movwf	??_LCDWriteInt
 13805  08A1  0844               	movf	??_LCDWriteInt,w
 13806  08A2  07CE               	addwf	LCDWriteInt@i,f
 13807  08A3  287D               	goto	l3280
 13808  08A4                     l3282:	
 13809                           
 13810                           ;lcd.c: 230: }
 13811                           ;lcd.c: 232: if(numPlaces == 1)
 13812  08A4  0020               	movlb	0	; select bank0
 13813  08A5  0342               	decf	LCDWriteInt@numPlaces,w
 13814  08A6  1D03               	btfss	3,2
 13815  08A7  28B2               	goto	l3286
 13816                           
 13817                           ;lcd.c: 233: {
 13818                           ;lcd.c: 234: LCDWriteCharacter(46);
 13819  08A8  302E               	movlw	46
 13820  08A9  3192  22E7  3188   	fcall	_LCDWriteCharacter
 13821                           
 13822                           ;lcd.c: 235: LCDWriteCharacter ((uint8_t)(48+str[4]));
 13823  08AC  0020               	movlb	0	; select bank0
 13824  08AD  084C               	movf	LCDWriteInt@str+4,w
 13825  08AE  3E30               	addlw	48
 13826  08AF  3192  22E7  3188   	fcall	_LCDWriteCharacter
 13827  08B2                     l3286:	
 13828                           
 13829                           ;lcd.c: 236: }
 13830                           ;lcd.c: 238: if(numPlaces == 2)
 13831  08B2  3002               	movlw	2
 13832  08B3  0020               	movlb	0	; select bank0
 13833  08B4  0642               	xorwf	LCDWriteInt@numPlaces,w
 13834  08B5  1D03               	btfss	3,2
 13835  08B6  0008               	return
 13836                           
 13837                           ;lcd.c: 239: {
 13838                           ;lcd.c: 240: LCDWriteCharacter(46);
 13839  08B7  302E               	movlw	46
 13840  08B8  3192  22E7  3188   	fcall	_LCDWriteCharacter
 13841                           
 13842                           ;lcd.c: 241: LCDWriteCharacter((uint8_t)(48+str[3]));
 13843  08BB  0020               	movlb	0	; select bank0
 13844  08BC  084B               	movf	LCDWriteInt@str+3,w
 13845  08BD  3E30               	addlw	48
 13846  08BE  3192  22E7  3188   	fcall	_LCDWriteCharacter
 13847                           
 13848                           ;lcd.c: 242: LCDWriteCharacter((uint8_t)(48+str[4]));
 13849  08C1  0020               	movlb	0	; select bank0
 13850  08C2  084C               	movf	LCDWriteInt@str+4,w
 13851  08C3  3E30               	addlw	48
 13852  08C4  3192  22E7         	fcall	_LCDWriteCharacter
 13853  08C6  0008               	return
 13854  08C7                     __end_of_LCDWriteInt:	
 13855                           
 13856                           	psect	text35
 13857  1F9D                     __ptext35:	
 13858 ;; *************** function ___lwmod *****************
 13859 ;; Defined at:
 13860 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
 13861 ;; Parameters:    Size  Location     Type
 13862 ;;  divisor         2    0[COMMON] unsigned int 
 13863 ;;  dividend        2    2[COMMON] unsigned int 
 13864 ;; Auto vars:     Size  Location     Type
 13865 ;;  counter         1    5[COMMON] unsigned char 
 13866 ;; Return value:  Size  Location     Type
 13867 ;;                  2    0[COMMON] unsigned int 
 13868 ;; Registers used:
 13869 ;;		wreg, status,2, status,0
 13870 ;; Tracked objects:
 13871 ;;		On entry : 0/0
 13872 ;;		On exit  : 0/0
 13873 ;;		Unchanged: 0/0
 13874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13875 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13876 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13877 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13878 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13879 ;;Total ram usage:        6 bytes
 13880 ;; Hardware stack levels used:    1
 13881 ;; This function calls:
 13882 ;;		Nothing
 13883 ;; This function is called by:
 13884 ;;		_LCDWriteInt
 13885 ;; This function uses a non-reentrant model
 13886 ;;
 13887                           
 13888                           
 13889                           ;psect for function ___lwmod
 13890  1F9D                     ___lwmod:	
 13891                           
 13892                           ;incstack = 0
 13893                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 13894  1F9D  0870               	movf	___lwmod@divisor,w
 13895  1F9E  0471               	iorwf	___lwmod@divisor+1,w
 13896  1F9F  1903               	btfsc	3,2
 13897  1FA0  2FC4               	goto	l3032
 13898  1FA1  01F5               	clrf	___lwmod@counter
 13899  1FA2  0AF5               	incf	___lwmod@counter,f
 13900  1FA3                     l3022:	
 13901  1FA3  1BF1               	btfsc	___lwmod@divisor+1,7
 13902  1FA4  2FAF               	goto	l3024
 13903  1FA5  3001               	movlw	1
 13904  1FA6                     u3375:	
 13905  1FA6  35F0               	lslf	___lwmod@divisor,f
 13906  1FA7  0DF1               	rlf	___lwmod@divisor+1,f
 13907  1FA8  0B89               	decfsz	9,f
 13908  1FA9  2FA6               	goto	u3375
 13909  1FAA  3001               	movlw	1
 13910  1FAB  00F4               	movwf	??___lwmod
 13911  1FAC  0874               	movf	??___lwmod,w
 13912  1FAD  07F5               	addwf	___lwmod@counter,f
 13913  1FAE  2FA3               	goto	l3022
 13914  1FAF                     l3024:	
 13915  1FAF  0871               	movf	___lwmod@divisor+1,w
 13916  1FB0  0273               	subwf	___lwmod@dividend+1,w
 13917  1FB1  1D03               	skipz
 13918  1FB2  2FB5               	goto	u3395
 13919  1FB3  0870               	movf	___lwmod@divisor,w
 13920  1FB4  0272               	subwf	___lwmod@dividend,w
 13921  1FB5                     u3395:	
 13922  1FB5  1C03               	skipc
 13923  1FB6  2FBB               	goto	l3028
 13924  1FB7  0870               	movf	___lwmod@divisor,w
 13925  1FB8  02F2               	subwf	___lwmod@dividend,f
 13926  1FB9  0871               	movf	___lwmod@divisor+1,w
 13927  1FBA  3BF3               	subwfb	___lwmod@dividend+1,f
 13928  1FBB                     l3028:	
 13929  1FBB  3001               	movlw	1
 13930  1FBC                     u3405:	
 13931  1FBC  36F1               	lsrf	___lwmod@divisor+1,f
 13932  1FBD  0CF0               	rrf	___lwmod@divisor,f
 13933  1FBE  0B89               	decfsz	9,f
 13934  1FBF  2FBC               	goto	u3405
 13935  1FC0  3001               	movlw	1
 13936  1FC1  02F5               	subwf	___lwmod@counter,f
 13937  1FC2  1D03               	btfss	3,2
 13938  1FC3  2FAF               	goto	l3024
 13939  1FC4                     l3032:	
 13940  1FC4  0873               	movf	___lwmod@dividend+1,w
 13941  1FC5  00F1               	movwf	?___lwmod+1
 13942  1FC6  0872               	movf	___lwmod@dividend,w
 13943  1FC7  00F0               	movwf	?___lwmod
 13944  1FC8  0008               	return
 13945  1FC9                     __end_of___lwmod:	
 13946                           
 13947                           	psect	text36
 13948  1296                     __ptext36:	
 13949 ;; *************** function ___awdiv *****************
 13950 ;; Defined at:
 13951 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
 13952 ;; Parameters:    Size  Location     Type
 13953 ;;  divisor         2    0[COMMON] int 
 13954 ;;  dividend        2    2[COMMON] int 
 13955 ;; Auto vars:     Size  Location     Type
 13956 ;;  quotient        2    7[COMMON] int 
 13957 ;;  sign            1    6[COMMON] unsigned char 
 13958 ;;  counter         1    5[COMMON] unsigned char 
 13959 ;; Return value:  Size  Location     Type
 13960 ;;                  2    0[COMMON] int 
 13961 ;; Registers used:
 13962 ;;		wreg, status,2, status,0
 13963 ;; Tracked objects:
 13964 ;;		On entry : 0/0
 13965 ;;		On exit  : 0/0
 13966 ;;		Unchanged: 0/0
 13967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13968 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13969 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13970 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13971 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13972 ;;Total ram usage:        9 bytes
 13973 ;; Hardware stack levels used:    1
 13974 ;; This function calls:
 13975 ;;		Nothing
 13976 ;; This function is called by:
 13977 ;;		_main
 13978 ;;		_LCDWriteInt
 13979 ;; This function uses a non-reentrant model
 13980 ;;
 13981                           
 13982                           
 13983                           ;psect for function ___awdiv
 13984  1296                     ___awdiv:	
 13985                           
 13986                           ;incstack = 0
 13987                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 13988  1296  01F6               	clrf	___awdiv@sign
 13989  1297  1FF1               	btfss	___awdiv@divisor+1,7
 13990  1298  2AA0               	goto	l2928
 13991  1299  09F0               	comf	___awdiv@divisor,f
 13992  129A  09F1               	comf	___awdiv@divisor+1,f
 13993  129B  0AF0               	incf	___awdiv@divisor,f
 13994  129C  1903               	skipnz
 13995  129D  0AF1               	incf	___awdiv@divisor+1,f
 13996  129E  01F6               	clrf	___awdiv@sign
 13997  129F  0AF6               	incf	___awdiv@sign,f
 13998  12A0                     l2928:	
 13999  12A0  1FF3               	btfss	___awdiv@dividend+1,7
 14000  12A1  2AAB               	goto	l2934
 14001  12A2  09F2               	comf	___awdiv@dividend,f
 14002  12A3  09F3               	comf	___awdiv@dividend+1,f
 14003  12A4  0AF2               	incf	___awdiv@dividend,f
 14004  12A5  1903               	skipnz
 14005  12A6  0AF3               	incf	___awdiv@dividend+1,f
 14006  12A7  3001               	movlw	1
 14007  12A8  00F4               	movwf	??___awdiv
 14008  12A9  0874               	movf	??___awdiv,w
 14009  12AA  06F6               	xorwf	___awdiv@sign,f
 14010  12AB                     l2934:	
 14011  12AB  01F7               	clrf	___awdiv@quotient
 14012  12AC  01F8               	clrf	___awdiv@quotient+1
 14013  12AD  0870               	movf	___awdiv@divisor,w
 14014  12AE  0471               	iorwf	___awdiv@divisor+1,w
 14015  12AF  1903               	btfsc	3,2
 14016  12B0  2ADA               	goto	l2956
 14017  12B1  01F5               	clrf	___awdiv@counter
 14018  12B2  0AF5               	incf	___awdiv@counter,f
 14019  12B3                     l2944:	
 14020  12B3  1BF1               	btfsc	___awdiv@divisor+1,7
 14021  12B4  2ABF               	goto	l2946
 14022  12B5  3001               	movlw	1
 14023  12B6                     u3205:	
 14024  12B6  35F0               	lslf	___awdiv@divisor,f
 14025  12B7  0DF1               	rlf	___awdiv@divisor+1,f
 14026  12B8  0B89               	decfsz	9,f
 14027  12B9  2AB6               	goto	u3205
 14028  12BA  3001               	movlw	1
 14029  12BB  00F4               	movwf	??___awdiv
 14030  12BC  0874               	movf	??___awdiv,w
 14031  12BD  07F5               	addwf	___awdiv@counter,f
 14032  12BE  2AB3               	goto	l2944
 14033  12BF                     l2946:	
 14034  12BF  3001               	movlw	1
 14035  12C0                     u3225:	
 14036  12C0  35F7               	lslf	___awdiv@quotient,f
 14037  12C1  0DF8               	rlf	___awdiv@quotient+1,f
 14038  12C2  0B89               	decfsz	9,f
 14039  12C3  2AC0               	goto	u3225
 14040  12C4  0871               	movf	___awdiv@divisor+1,w
 14041  12C5  0273               	subwf	___awdiv@dividend+1,w
 14042  12C6  1D03               	skipz
 14043  12C7  2ACA               	goto	u3235
 14044  12C8  0870               	movf	___awdiv@divisor,w
 14045  12C9  0272               	subwf	___awdiv@dividend,w
 14046  12CA                     u3235:	
 14047  12CA  1C03               	skipc
 14048  12CB  2AD1               	goto	l2952
 14049  12CC  0870               	movf	___awdiv@divisor,w
 14050  12CD  02F2               	subwf	___awdiv@dividend,f
 14051  12CE  0871               	movf	___awdiv@divisor+1,w
 14052  12CF  3BF3               	subwfb	___awdiv@dividend+1,f
 14053  12D0  1477               	bsf	___awdiv@quotient,0
 14054  12D1                     l2952:	
 14055  12D1  3001               	movlw	1
 14056  12D2                     u3245:	
 14057  12D2  36F1               	lsrf	___awdiv@divisor+1,f
 14058  12D3  0CF0               	rrf	___awdiv@divisor,f
 14059  12D4  0B89               	decfsz	9,f
 14060  12D5  2AD2               	goto	u3245
 14061  12D6  3001               	movlw	1
 14062  12D7  02F5               	subwf	___awdiv@counter,f
 14063  12D8  1D03               	btfss	3,2
 14064  12D9  2ABF               	goto	l2946
 14065  12DA                     l2956:	
 14066  12DA  0876               	movf	___awdiv@sign,w
 14067  12DB  1903               	btfsc	3,2
 14068  12DC  2AE2               	goto	l2960
 14069  12DD  09F7               	comf	___awdiv@quotient,f
 14070  12DE  09F8               	comf	___awdiv@quotient+1,f
 14071  12DF  0AF7               	incf	___awdiv@quotient,f
 14072  12E0  1903               	skipnz
 14073  12E1  0AF8               	incf	___awdiv@quotient+1,f
 14074  12E2                     l2960:	
 14075  12E2  0878               	movf	___awdiv@quotient+1,w
 14076  12E3  00F1               	movwf	?___awdiv+1
 14077  12E4  0877               	movf	___awdiv@quotient,w
 14078  12E5  00F0               	movwf	?___awdiv
 14079  12E6  0008               	return
 14080  12E7                     __end_of___awdiv:	
 14081                           
 14082                           	psect	text37
 14083  12E7                     __ptext37:	
 14084 ;; *************** function _LCDWriteCharacter *****************
 14085 ;; Defined at:
 14086 ;;		line 140 in file "lcd.c"
 14087 ;; Parameters:    Size  Location     Type
 14088 ;;  character       1    wreg     const unsigned char 
 14089 ;; Auto vars:     Size  Location     Type
 14090 ;;  character       1    9[COMMON] const unsigned char 
 14091 ;;  base            2   10[COMMON] unsigned int 
 14092 ;; Return value:  Size  Location     Type
 14093 ;;                  1    wreg      void 
 14094 ;; Registers used:
 14095 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14096 ;; Tracked objects:
 14097 ;;		On entry : 0/0
 14098 ;;		On exit  : 0/0
 14099 ;;		Unchanged: 0/0
 14100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14102 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14103 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14104 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14105 ;;Total ram usage:        6 bytes
 14106 ;; Hardware stack levels used:    1
 14107 ;; Hardware stack levels required when called:    1
 14108 ;; This function calls:
 14109 ;;		_LCDWrite
 14110 ;;		___wmul
 14111 ;; This function is called by:
 14112 ;;		_main
 14113 ;;		_LCDWriteString
 14114 ;;		_LCDWriteInt
 14115 ;; This function uses a non-reentrant model
 14116 ;;
 14117                           
 14118                           
 14119                           ;psect for function _LCDWriteCharacter
 14120  12E7                     _LCDWriteCharacter:	
 14121                           
 14122                           ;incstack = 0
 14123                           ; Regs used in _LCDWriteCharacter: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14124                           ;LCDWriteCharacter@character stored from wreg
 14125  12E7  00F9               	movwf	LCDWriteCharacter@character
 14126                           
 14127                           ;lcd.c: 142: uint16_t base;
 14128                           ;lcd.c: 143: base = character - 0x20;
 14129  12E8  0879               	movf	LCDWriteCharacter@character,w
 14130  12E9  3EE0               	addlw	224
 14131  12EA  00FA               	movwf	LCDWriteCharacter@base
 14132  12EB  30FF               	movlw	255
 14133  12EC  1803               	skipnc
 14134  12ED  3000               	movlw	0
 14135  12EE  00FB               	movwf	LCDWriteCharacter@base+1
 14136                           
 14137                           ;lcd.c: 144: base *= 3;
 14138  12EF  3003               	movlw	3
 14139  12F0  00F0               	movwf	___wmul@multiplier
 14140  12F1  3000               	movlw	0
 14141  12F2  00F1               	movwf	___wmul@multiplier+1
 14142  12F3  087B               	movf	LCDWriteCharacter@base+1,w
 14143  12F4  00F3               	movwf	___wmul@multiplicand+1
 14144  12F5  087A               	movf	LCDWriteCharacter@base,w
 14145  12F6  00F2               	movwf	___wmul@multiplicand
 14146  12F7  319E  2699  3192   	fcall	___wmul
 14147  12FA  0871               	movf	?___wmul+1,w
 14148  12FB  00FB               	movwf	LCDWriteCharacter@base+1
 14149  12FC  0870               	movf	?___wmul,w
 14150  12FD  00FA               	movwf	LCDWriteCharacter@base
 14151                           
 14152                           ;lcd.c: 145: LCDWrite(1,fonts[base]);
 14153  12FE  087B               	movf	LCDWriteCharacter@base+1,w
 14154  12FF  0085               	movwf	5
 14155  1300  087A               	movf	LCDWriteCharacter@base,w
 14156  1301  0084               	movwf	4
 14157  1302  3000               	movlw	low (_fonts| (0+32768))
 14158  1303  0784               	addwf	4,f
 14159  1304  3090               	movlw	high (_fonts| (0+32768))
 14160  1305  3D85               	addwfc	5,f
 14161  1306  0800               	movf	0,w	;code access
 14162  1307  00F6               	movwf	??_LCDWriteCharacter
 14163  1308  0876               	movf	??_LCDWriteCharacter,w
 14164  1309  00F0               	movwf	LCDWrite@data
 14165  130A  3001               	movlw	1
 14166  130B  319F  2752  3192   	fcall	_LCDWrite
 14167                           
 14168                           ;lcd.c: 146: LCDWrite(1,fonts[base + 1]);
 14169  130E  087A               	movf	LCDWriteCharacter@base,w
 14170  130F  3E01               	addlw	1
 14171  1310  00F6               	movwf	??_LCDWriteCharacter
 14172  1311  3000               	movlw	0
 14173  1312  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 14174  1313  00F7               	movwf	??_LCDWriteCharacter+1
 14175  1314  3000               	movlw	low (_fonts| (0+32768))
 14176  1315  0776               	addwf	??_LCDWriteCharacter,w
 14177  1316  0084               	movwf	4
 14178  1317  3090               	movlw	high (_fonts| (0+32768))
 14179  1318  3D77               	addwfc	??_LCDWriteCharacter+1,w
 14180  1319  0085               	movwf	5
 14181  131A  0800               	movf	0,w	;code access
 14182  131B  00F8               	movwf	??_LCDWriteCharacter+2
 14183  131C  0878               	movf	??_LCDWriteCharacter+2,w
 14184  131D  00F0               	movwf	LCDWrite@data
 14185  131E  3001               	movlw	1
 14186  131F  319F  2752  3192   	fcall	_LCDWrite
 14187                           
 14188                           ;lcd.c: 147: LCDWrite(1,fonts[base + 2]);
 14189  1322  087A               	movf	LCDWriteCharacter@base,w
 14190  1323  3E02               	addlw	2
 14191  1324  00F6               	movwf	??_LCDWriteCharacter
 14192  1325  3000               	movlw	0
 14193  1326  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 14194  1327  00F7               	movwf	??_LCDWriteCharacter+1
 14195  1328  3000               	movlw	low (_fonts| (0+32768))
 14196  1329  0776               	addwf	??_LCDWriteCharacter,w
 14197  132A  0084               	movwf	4
 14198  132B  3090               	movlw	high (_fonts| (0+32768))
 14199  132C  3D77               	addwfc	??_LCDWriteCharacter+1,w
 14200  132D  0085               	movwf	5
 14201  132E  0800               	movf	0,w	;code access
 14202  132F  00F8               	movwf	??_LCDWriteCharacter+2
 14203  1330  0878               	movf	??_LCDWriteCharacter+2,w
 14204  1331  00F0               	movwf	LCDWrite@data
 14205  1332  3001               	movlw	1
 14206  1333  319F  2752  3192   	fcall	_LCDWrite
 14207                           
 14208                           ;lcd.c: 148: LCDWrite(1, 0x00);
 14209  1336  01F0               	clrf	LCDWrite@data
 14210  1337  3001               	movlw	1
 14211  1338  319F  2752         	fcall	_LCDWrite
 14212  133A  0008               	return
 14213  133B                     __end_of_LCDWriteCharacter:	
 14214                           
 14215                           	psect	text38
 14216  1E99                     __ptext38:	
 14217 ;; *************** function ___wmul *****************
 14218 ;; Defined at:
 14219 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
 14220 ;; Parameters:    Size  Location     Type
 14221 ;;  multiplier      2    0[COMMON] unsigned int 
 14222 ;;  multiplicand    2    2[COMMON] unsigned int 
 14223 ;; Auto vars:     Size  Location     Type
 14224 ;;  product         2    4[COMMON] unsigned int 
 14225 ;; Return value:  Size  Location     Type
 14226 ;;                  2    0[COMMON] unsigned int 
 14227 ;; Registers used:
 14228 ;;		wreg, status,2, status,0
 14229 ;; Tracked objects:
 14230 ;;		On entry : 0/0
 14231 ;;		On exit  : 0/0
 14232 ;;		Unchanged: 0/0
 14233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14234 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14235 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14237 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14238 ;;Total ram usage:        6 bytes
 14239 ;; Hardware stack levels used:    1
 14240 ;; This function calls:
 14241 ;;		Nothing
 14242 ;; This function is called by:
 14243 ;;		_readIAnalog
 14244 ;;		_LCDWriteCharacter
 14245 ;;		_eval_poly
 14246 ;; This function uses a non-reentrant model
 14247 ;;
 14248                           
 14249                           
 14250                           ;psect for function ___wmul
 14251  1E99                     ___wmul:	
 14252                           
 14253                           ;incstack = 0
 14254                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 14255  1E99  01F4               	clrf	___wmul@product
 14256  1E9A  01F5               	clrf	___wmul@product+1
 14257  1E9B                     l2430:	
 14258  1E9B  1C70               	btfss	___wmul@multiplier,0
 14259  1E9C  2EA1               	goto	l626
 14260  1E9D  0872               	movf	___wmul@multiplicand,w
 14261  1E9E  07F4               	addwf	___wmul@product,f
 14262  1E9F  0873               	movf	___wmul@multiplicand+1,w
 14263  1EA0  3DF5               	addwfc	___wmul@product+1,f
 14264  1EA1                     l626:	
 14265  1EA1  3001               	movlw	1
 14266  1EA2                     u2435:	
 14267  1EA2  35F2               	lslf	___wmul@multiplicand,f
 14268  1EA3  0DF3               	rlf	___wmul@multiplicand+1,f
 14269  1EA4  0B89               	decfsz	9,f
 14270  1EA5  2EA2               	goto	u2435
 14271  1EA6  3001               	movlw	1
 14272  1EA7                     u2445:	
 14273  1EA7  36F1               	lsrf	___wmul@multiplier+1,f
 14274  1EA8  0CF0               	rrf	___wmul@multiplier,f
 14275  1EA9  0B89               	decfsz	9,f
 14276  1EAA  2EA7               	goto	u2445
 14277  1EAB  0870               	movf	___wmul@multiplier,w
 14278  1EAC  0471               	iorwf	___wmul@multiplier+1,w
 14279  1EAD  1D03               	btfss	3,2
 14280  1EAE  2E9B               	goto	l2430
 14281  1EAF  0875               	movf	___wmul@product+1,w
 14282  1EB0  00F1               	movwf	?___wmul+1
 14283  1EB1  0874               	movf	___wmul@product,w
 14284  1EB2  00F0               	movwf	?___wmul
 14285  1EB3  0008               	return
 14286  1EB4                     __end_of___wmul:	
 14287                           
 14288                           	psect	text39
 14289  1F52                     __ptext39:	
 14290 ;; *************** function _LCDWrite *****************
 14291 ;; Defined at:
 14292 ;;		line 281 in file "lcd.c"
 14293 ;; Parameters:    Size  Location     Type
 14294 ;;  data_or_comm    1    wreg     unsigned char 
 14295 ;;  data            1    0[COMMON] unsigned char 
 14296 ;; Auto vars:     Size  Location     Type
 14297 ;;  data_or_comm    1    2[COMMON] unsigned char 
 14298 ;;  i               1    4[COMMON] unsigned char 
 14299 ;;  d               1    3[COMMON] unsigned char 
 14300 ;; Return value:  Size  Location     Type
 14301 ;;                  1    wreg      void 
 14302 ;; Registers used:
 14303 ;;		wreg, status,2, status,0
 14304 ;; Tracked objects:
 14305 ;;		On entry : 0/0
 14306 ;;		On exit  : 0/0
 14307 ;;		Unchanged: 0/0
 14308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14309 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14310 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14311 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14312 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14313 ;;Total ram usage:        5 bytes
 14314 ;; Hardware stack levels used:    1
 14315 ;; This function calls:
 14316 ;;		Nothing
 14317 ;; This function is called by:
 14318 ;;		_gotoXY
 14319 ;;		_LCDWriteCharacter
 14320 ;;		_LCDClear
 14321 ;;		_LCDInit
 14322 ;; This function uses a non-reentrant model
 14323 ;;
 14324                           
 14325                           
 14326                           ;psect for function _LCDWrite
 14327  1F52                     _LCDWrite:	
 14328                           
 14329                           ;incstack = 0
 14330                           ; Regs used in _LCDWrite: [wreg+status,2+status,0]
 14331                           ;LCDWrite@data_or_command stored from wreg
 14332  1F52  00F2               	movwf	LCDWrite@data_or_command
 14333                           
 14334                           ;lcd.c: 283: uint8_t i,d;
 14335                           ;lcd.c: 285: d=data;
 14336  1F53  0870               	movf	LCDWrite@data,w
 14337  1F54  00F1               	movwf	??_LCDWrite
 14338  1F55  0871               	movf	??_LCDWrite,w
 14339  1F56  00F3               	movwf	LCDWrite@d
 14340                           
 14341                           ;lcd.c: 287: if(data_or_command == 0)
 14342  1F57  0872               	movf	LCDWrite@data_or_command,w
 14343  1F58  1D03               	btfss	3,2
 14344  1F59  2F5D               	goto	l385
 14345                           
 14346                           ;lcd.c: 288: {
 14347                           ;lcd.c: 289: LATAbits.LATA2 = 0;
 14348  1F5A  0020               	movlb	0	; select bank0
 14349  1F5B  1116               	bcf	22,2	;volatile
 14350                           
 14351                           ;lcd.c: 290: }
 14352  1F5C  2F5F               	goto	l386
 14353  1F5D                     l385:	
 14354                           
 14355                           ;lcd.c: 291: else
 14356                           ;lcd.c: 292: {
 14357                           ;lcd.c: 293: LATAbits.LATA2 = 1;
 14358  1F5D  0020               	movlb	0	; select bank0
 14359  1F5E  1516               	bsf	22,2	;volatile
 14360  1F5F                     l386:	
 14361                           
 14362                           ;lcd.c: 294: }
 14363                           ;lcd.c: 296: LATAbits.LATA1 = 0;
 14364  1F5F  1096               	bcf	22,1	;volatile
 14365                           
 14366                           ;lcd.c: 298: for(i=0;i<8;i++)
 14367  1F60  01F4               	clrf	LCDWrite@i
 14368  1F61  3008               	movlw	8
 14369  1F62  0274               	subwf	LCDWrite@i,w
 14370  1F63  1803               	btfsc	3,0
 14371  1F64  2F75               	goto	l388
 14372  1F65                     l387:	
 14373                           
 14374                           ;lcd.c: 299: {
 14375                           ;lcd.c: 300: LATAbits.LATA3 = 0;
 14376  1F65  1196               	bcf	22,3	;volatile
 14377                           
 14378                           ;lcd.c: 302: if(d&0x80)
 14379  1F66  1FF3               	btfss	LCDWrite@d,7
 14380  1F67  2F69               	goto	l389
 14381                           
 14382                           ;lcd.c: 303: {
 14383                           ;lcd.c: 304: LATAbits.LATA3 = 1;
 14384  1F68  1596               	bsf	22,3	;volatile
 14385  1F69                     l389:	
 14386                           
 14387                           ;lcd.c: 305: }
 14388                           ;lcd.c: 307: LATAbits.LATA4 = 1;
 14389  1F69  1616               	bsf	22,4	;volatile
 14390                           
 14391                           ;lcd.c: 309: d<<=1;
 14392  1F6A  1003               	clrc
 14393  1F6B  0DF3               	rlf	LCDWrite@d,f
 14394                           
 14395                           ;lcd.c: 311: LATAbits.LATA4=0;
 14396  1F6C  1216               	bcf	22,4	;volatile
 14397  1F6D  3001               	movlw	1
 14398  1F6E  00F1               	movwf	??_LCDWrite
 14399  1F6F  0871               	movf	??_LCDWrite,w
 14400  1F70  07F4               	addwf	LCDWrite@i,f
 14401  1F71  3008               	movlw	8
 14402  1F72  0274               	subwf	LCDWrite@i,w
 14403  1F73  1C03               	skipc
 14404  1F74  2F65               	goto	l387
 14405  1F75                     l388:	
 14406                           
 14407                           ;lcd.c: 312: }
 14408                           ;lcd.c: 314: LATAbits.LATA1 = 1;
 14409  1F75  1496               	bsf	22,1	;volatile
 14410  1F76  0008               	return
 14411  1F77                     __end_of_LCDWrite:	
 14412                           
 14413                           	psect	text40
 14414  0E43                     __ptext40:	
 14415 ;; *************** function _Battery_State_Machine *****************
 14416 ;; Defined at:
 14417 ;;		line 31 in file "battery_charger.c"
 14418 ;; Parameters:    Size  Location     Type
 14419 ;;  z               1    wreg     unsigned char 
 14420 ;; Auto vars:     Size  Location     Type
 14421 ;;  z               1   36[BANK0 ] unsigned char 
 14422 ;; Return value:  Size  Location     Type
 14423 ;;                  1    wreg      void 
 14424 ;; Registers used:
 14425 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14426 ;; Tracked objects:
 14427 ;;		On entry : 0/0
 14428 ;;		On exit  : 0/0
 14429 ;;		Unchanged: 0/0
 14430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14432 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14433 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14434 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14435 ;;Total ram usage:        6 bytes
 14436 ;; Hardware stack levels used:    1
 14437 ;; Hardware stack levels required when called:    2
 14438 ;; This function calls:
 14439 ;;		___awtoft
 14440 ;;		___ftmul
 14441 ;;		___fttol
 14442 ;; This function is called by:
 14443 ;;		_main
 14444 ;; This function uses a non-reentrant model
 14445 ;;
 14446                           
 14447                           
 14448                           ;psect for function _Battery_State_Machine
 14449  0E43                     _Battery_State_Machine:	
 14450                           
 14451                           ;incstack = 0
 14452                           ; Regs used in _Battery_State_Machine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14453                           ;Battery_State_Machine@z stored from wreg
 14454  0E43  0020               	movlb	0	; select bank0
 14455  0E44  00C4               	movwf	Battery_State_Machine@z
 14456                           
 14457                           ;battery_charger.c: 33: if(batteryState[z]==PRECHARGE)
 14458  0E45  0844               	movf	Battery_State_Machine@z,w
 14459  0E46  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 14460  0E47  0086               	movwf	6
 14461  0E48  0187               	clrf	7
 14462  0E49  3003               	movlw	3
 14463  0E4A  0601               	xorwf	1,w
 14464  0E4B  1D03               	btfss	3,2
 14465  0E4C  2E9A               	goto	l3186
 14466                           
 14467                           ;battery_charger.c: 34: {
 14468                           ;battery_charger.c: 35: if(voltage[z]<1075)
 14469  0E4D  3544               	lslf	Battery_State_Machine@z,w
 14470  0E4E  3EA8               	addlw	(low (_voltage| 0))& (0+255)
 14471  0E4F  0086               	movwf	6
 14472  0E50  0187               	clrf	7
 14473  0E51  3F40               	moviw [0]fsr1
 14474  0E52  00BF               	movwf	??_Battery_State_Machine
 14475  0E53  3F41               	moviw [1]fsr1
 14476  0E54  00C0               	movwf	??_Battery_State_Machine+1
 14477  0E55  0840               	movf	??_Battery_State_Machine+1,w
 14478  0E56  3A80               	xorlw	128
 14479  0E57  00C1               	movwf	??_Battery_State_Machine+2
 14480  0E58  3084               	movlw	132
 14481  0E59  0241               	subwf	??_Battery_State_Machine+2,w
 14482  0E5A  1D03               	skipz
 14483  0E5B  2E5E               	goto	u3755
 14484  0E5C  3033               	movlw	51
 14485  0E5D  023F               	subwf	??_Battery_State_Machine,w
 14486  0E5E                     u3755:	
 14487  0E5E  1803               	skipnc
 14488  0E5F  2E88               	goto	l3184
 14489                           
 14490                           ;battery_charger.c: 36: {
 14491                           ;battery_charger.c: 37: if(stateCounter[z]>0)
 14492  0E60  0020               	movlb	0	; select bank0
 14493  0E61  3544               	lslf	Battery_State_Machine@z,w
 14494  0E62  3EB8               	addlw	(low (_stateCounter| 0))& (0+255)
 14495  0E63  0086               	movwf	6
 14496  0E64  0187               	clrf	7
 14497  0E65  3F40               	moviw [0]fsr1
 14498  0E66  00BF               	movwf	??_Battery_State_Machine
 14499  0E67  3F41               	moviw [1]fsr1
 14500  0E68  00C0               	movwf	??_Battery_State_Machine+1
 14501  0E69  0840               	movf	??_Battery_State_Machine+1,w
 14502  0E6A  3A80               	xorlw	128
 14503  0E6B  00C1               	movwf	??_Battery_State_Machine+2
 14504  0E6C  3080               	movlw	128
 14505  0E6D  0241               	subwf	??_Battery_State_Machine+2,w
 14506  0E6E  1D03               	skipz
 14507  0E6F  2E72               	goto	u3765
 14508  0E70  3001               	movlw	1
 14509  0E71  023F               	subwf	??_Battery_State_Machine,w
 14510  0E72                     u3765:	
 14511  0E72  1C03               	skipc
 14512  0E73  2E80               	goto	l3182
 14513                           
 14514                           ;battery_charger.c: 38: {
 14515                           ;battery_charger.c: 39: stateCounter[z]-=1;
 14516  0E74  0020               	movlb	0	; select bank0
 14517  0E75  3544               	lslf	Battery_State_Machine@z,w
 14518  0E76  3EB8               	addlw	(low (_stateCounter| 0))& (0+255)
 14519  0E77  0086               	movwf	6
 14520  0E78  0187               	clrf	7
 14521  0E79  30FF               	movlw	255
 14522  0E7A  0781               	addwf	1,f
 14523  0E7B  3141               	addfsr 1,1
 14524  0E7C  30FF               	movlw	255
 14525  0E7D  3D81               	addwfc	1,f
 14526  0E7E  317F               	addfsr 1,-1
 14527                           
 14528                           ;battery_charger.c: 40: }
 14529  0E7F  0008               	return
 14530  0E80                     l3182:	
 14531                           
 14532                           ;battery_charger.c: 41: else
 14533                           ;battery_charger.c: 42: {
 14534                           ;battery_charger.c: 43: batteryState[z]=FAULT;
 14535  0E80  0020               	movlb	0	; select bank0
 14536  0E81  0844               	movf	Battery_State_Machine@z,w
 14537  0E82  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 14538  0E83  0086               	movwf	6
 14539  0E84  0187               	clrf	7
 14540  0E85  0181               	clrf	1
 14541  0E86  0A81               	incf	1,f
 14542                           
 14543                           ;battery_charger.c: 44: }
 14544                           ;battery_charger.c: 45: }
 14545  0E87  0008               	return
 14546  0E88                     l3184:	
 14547                           
 14548                           ;battery_charger.c: 46: else
 14549                           ;battery_charger.c: 47: {
 14550                           ;battery_charger.c: 48: batteryState[z]=CHARGE;
 14551  0E88  3004               	movlw	4
 14552  0E89  0020               	movlb	0	; select bank0
 14553  0E8A  00BF               	movwf	??_Battery_State_Machine
 14554  0E8B  0844               	movf	Battery_State_Machine@z,w
 14555  0E8C  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 14556  0E8D  0086               	movwf	6
 14557  0E8E  0187               	clrf	7
 14558  0E8F  083F               	movf	??_Battery_State_Machine,w
 14559  0E90  0081               	movwf	1
 14560                           
 14561                           ;battery_charger.c: 49: Iref[z]=30;
 14562  0E91  3544               	lslf	Battery_State_Machine@z,w
 14563  0E92  3EB0               	addlw	(low (_Iref| 0))& (0+255)
 14564  0E93  0086               	movwf	6
 14565  0E94  0187               	clrf	7
 14566  0E95  301E               	movlw	30
 14567  0E96  3FC0               	movwi [0]fsr1
 14568  0E97  3000               	movlw	0
 14569  0E98  3FC1               	movwi [1]fsr1
 14570                           
 14571                           ;battery_charger.c: 50: }
 14572                           ;battery_charger.c: 51: }
 14573  0E99  0008               	return
 14574  0E9A                     l3186:	
 14575                           
 14576                           ;battery_charger.c: 52: else if(batteryState[z]==CHARGE)
 14577  0E9A  0844               	movf	Battery_State_Machine@z,w
 14578  0E9B  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 14579  0E9C  0086               	movwf	6
 14580  0E9D  0187               	clrf	7
 14581  0E9E  3004               	movlw	4
 14582  0E9F  0601               	xorwf	1,w
 14583  0EA0  1D03               	btfss	3,2
 14584  0EA1  2F61               	goto	l3206
 14585                           
 14586                           ;battery_charger.c: 53: {
 14587                           ;battery_charger.c: 54: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 14588  0EA2  0021               	movlb	1	; select bank1
 14589  0EA3  096D               	comf	_batteryTemp^(0+128),w
 14590  0EA4  0020               	movlb	0	; select bank0
 14591  0EA5  00BF               	movwf	??_Battery_State_Machine
 14592  0EA6  0021               	movlb	1	; select bank1
 14593  0EA7  096E               	comf	(_batteryTemp+1)^(0+128),w
 14594  0EA8  0020               	movlb	0	; select bank0
 14595  0EA9  00C0               	movwf	??_Battery_State_Machine+1
 14596  0EAA  0ABF               	incf	??_Battery_State_Machine,f
 14597  0EAB  1903               	skipnz
 14598  0EAC  0AC0               	incf	??_Battery_State_Machine+1,f
 14599  0EAD  083F               	movf	??_Battery_State_Machine,w
 14600  0EAE  3EFA               	addlw	250
 14601  0EAF  00F9               	movwf	___awtoft@c
 14602  0EB0  3000               	movlw	0
 14603  0EB1  3D40               	addwfc	??_Battery_State_Machine+1,w
 14604  0EB2  00FA               	movwf	___awtoft@c+1
 14605  0EB3  319F  2710  318E   	fcall	___awtoft
 14606  0EB6  0879               	movf	?___awtoft,w
 14607  0EB7  0020               	movlb	0	; select bank0
 14608  0EB8  00A4               	movwf	___ftmul@f2
 14609  0EB9  087A               	movf	?___awtoft+1,w
 14610  0EBA  00A5               	movwf	___ftmul@f2+1
 14611  0EBB  087B               	movf	?___awtoft+2,w
 14612  0EBC  00A6               	movwf	___ftmul@f2+2
 14613  0EBD  30C3               	movlw	195
 14614  0EBE  00A1               	movwf	___ftmul@f1
 14615  0EBF  3075               	movlw	117
 14616  0EC0  00A2               	movwf	___ftmul@f1+1
 14617  0EC1  303E               	movlw	62
 14618  0EC2  00A3               	movwf	___ftmul@f1+2
 14619  0EC3  3197  274C  318E   	fcall	___ftmul
 14620  0EC6  0020               	movlb	0	; select bank0
 14621  0EC7  0821               	movf	?___ftmul,w
 14622  0EC8  00B1               	movwf	___fttol@f1
 14623  0EC9  0822               	movf	?___ftmul+1,w
 14624  0ECA  00B2               	movwf	___fttol@f1+1
 14625  0ECB  0823               	movf	?___ftmul+2,w
 14626  0ECC  00B3               	movwf	___fttol@f1+2
 14627  0ECD  3195  256C  318E   	fcall	___fttol
 14628  0ED0  0020               	movlb	0	; select bank0
 14629  0ED1  0831               	movf	?___fttol,w
 14630  0ED2  3E91               	addlw	145
 14631  0ED3  00C1               	movwf	??_Battery_State_Machine+2
 14632  0ED4  3005               	movlw	5
 14633  0ED5  3D32               	addwfc	?___fttol+1,w
 14634  0ED6  00C2               	movwf	??_Battery_State_Machine+3
 14635  0ED7  3544               	lslf	Battery_State_Machine@z,w
 14636  0ED8  3EB4               	addlw	(low (_Vref| 0))& (0+255)
 14637  0ED9  0086               	movwf	6
 14638  0EDA  0187               	clrf	7
 14639  0EDB  0841               	movf	??_Battery_State_Machine+2,w
 14640  0EDC  3FC0               	movwi [0]fsr1
 14641  0EDD  0842               	movf	??_Battery_State_Machine+3,w
 14642  0EDE  3FC1               	movwi [1]fsr1
 14643                           
 14644                           ;battery_charger.c: 55: if(!(Imode[z]))
 14645  0EDF  0844               	movf	Battery_State_Machine@z,w
 14646  0EE0  3EBC               	addlw	(low (_Imode| 0))& (0+255)
 14647  0EE1  0086               	movwf	6
 14648  0EE2  0187               	clrf	7
 14649  0EE3  0801               	movf	1,w
 14650  0EE4  1D03               	btfss	3,2
 14651  0EE5  2F48               	goto	l3202
 14652                           
 14653                           ;battery_charger.c: 56: {
 14654                           ;battery_charger.c: 57: if(current[z] < Imin[z])
 14655  0EE6  3544               	lslf	Battery_State_Machine@z,w
 14656  0EE7  3E55               	addlw	(low (_Imin| (0+256)))& (0+255)
 14657  0EE8  0086               	movwf	6
 14658  0EE9  3001               	movlw	1	; select bank2/3
 14659  0EEA  0087               	movwf	7
 14660  0EEB  3F40               	moviw [0]fsr1
 14661  0EEC  00BF               	movwf	??_Battery_State_Machine
 14662  0EED  3F41               	moviw [1]fsr1
 14663  0EEE  00C0               	movwf	??_Battery_State_Machine+1
 14664  0EEF  3544               	lslf	Battery_State_Machine@z,w
 14665  0EF0  3EA0               	addlw	(low (_current| 0))& (0+255)
 14666  0EF1  0086               	movwf	6
 14667  0EF2  0187               	clrf	7
 14668  0EF3  3F40               	moviw [0]fsr1
 14669  0EF4  00C1               	movwf	??_Battery_State_Machine+2
 14670  0EF5  3F41               	moviw [1]fsr1
 14671  0EF6  00C2               	movwf	??_Battery_State_Machine+3
 14672  0EF7  0842               	movf	??_Battery_State_Machine+3,w
 14673  0EF8  3A80               	xorlw	128
 14674  0EF9  00C3               	movwf	??_Battery_State_Machine+4
 14675  0EFA  0840               	movf	??_Battery_State_Machine+1,w
 14676  0EFB  3A80               	xorlw	128
 14677  0EFC  0243               	subwf	??_Battery_State_Machine+4,w
 14678  0EFD  1D03               	skipz
 14679  0EFE  2F01               	goto	u3795
 14680  0EFF  083F               	movf	??_Battery_State_Machine,w
 14681  0F00  0241               	subwf	??_Battery_State_Machine+2,w
 14682  0F01                     u3795:	
 14683  0F01  1803               	skipnc
 14684  0F02  2F2E               	goto	l3198
 14685                           
 14686                           ;battery_charger.c: 58: {
 14687                           ;battery_charger.c: 59: IminCount[z]-=2;
 14688  0F03  0020               	movlb	0	; select bank0
 14689  0F04  3544               	lslf	Battery_State_Machine@z,w
 14690  0F05  3E5E               	addlw	(low (_IminCount| 0))& (0+255)
 14691  0F06  0086               	movwf	6
 14692  0F07  0187               	clrf	7
 14693  0F08  3002               	movlw	2
 14694  0F09  0281               	subwf	1,f
 14695  0F0A  3141               	addfsr 1,1
 14696  0F0B  3000               	movlw	0
 14697  0F0C  3B81               	subwfb	1,f
 14698  0F0D  317F               	addfsr 1,-1
 14699                           
 14700                           ;battery_charger.c: 60: if(IminCount[z]<10)
 14701  0F0E  3544               	lslf	Battery_State_Machine@z,w
 14702  0F0F  3E5E               	addlw	(low (_IminCount| 0))& (0+255)
 14703  0F10  0086               	movwf	6
 14704  0F11  0187               	clrf	7
 14705  0F12  3F40               	moviw [0]fsr1
 14706  0F13  00BF               	movwf	??_Battery_State_Machine
 14707  0F14  3F41               	moviw [1]fsr1
 14708  0F15  00C0               	movwf	??_Battery_State_Machine+1
 14709  0F16  3000               	movlw	0
 14710  0F17  0240               	subwf	??_Battery_State_Machine+1,w
 14711  0F18  300A               	movlw	10
 14712  0F19  1903               	skipnz
 14713  0F1A  023F               	subwf	??_Battery_State_Machine,w
 14714  0F1B  1803               	skipnc
 14715  0F1C  0008               	return
 14716                           
 14717                           ;battery_charger.c: 61: {
 14718                           ;battery_charger.c: 62: batteryState[z] = FLOAT;
 14719  0F1D  3005               	movlw	5
 14720  0F1E  00BF               	movwf	??_Battery_State_Machine
 14721  0F1F  0844               	movf	Battery_State_Machine@z,w
 14722  0F20  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 14723  0F21  0086               	movwf	6
 14724  0F22  0187               	clrf	7
 14725  0F23  083F               	movf	??_Battery_State_Machine,w
 14726  0F24  0081               	movwf	1
 14727                           
 14728                           ;battery_charger.c: 63: IminCount[z]=10;
 14729  0F25  3544               	lslf	Battery_State_Machine@z,w
 14730  0F26  3E5E               	addlw	(low (_IminCount| 0))& (0+255)
 14731  0F27  0086               	movwf	6
 14732  0F28  0187               	clrf	7
 14733  0F29  300A               	movlw	10
 14734  0F2A  3FC0               	movwi [0]fsr1
 14735  0F2B  3000               	movlw	0
 14736  0F2C  3FC1               	movwi [1]fsr1
 14737                           
 14738                           ;battery_charger.c: 64: }
 14739                           ;battery_charger.c: 65: }
 14740  0F2D  0008               	return
 14741  0F2E                     l3198:	
 14742                           
 14743                           ;battery_charger.c: 66: else
 14744                           ;battery_charger.c: 67: {
 14745                           ;battery_charger.c: 68: if(IminCount[z]<600)IminCount[z]+=1;
 14746  0F2E  0020               	movlb	0	; select bank0
 14747  0F2F  3544               	lslf	Battery_State_Machine@z,w
 14748  0F30  3E5E               	addlw	(low (_IminCount| 0))& (0+255)
 14749  0F31  0086               	movwf	6
 14750  0F32  0187               	clrf	7
 14751  0F33  3F40               	moviw [0]fsr1
 14752  0F34  00BF               	movwf	??_Battery_State_Machine
 14753  0F35  3F41               	moviw [1]fsr1
 14754  0F36  00C0               	movwf	??_Battery_State_Machine+1
 14755  0F37  3002               	movlw	2
 14756  0F38  0240               	subwf	??_Battery_State_Machine+1,w
 14757  0F39  3058               	movlw	88
 14758  0F3A  1903               	skipnz
 14759  0F3B  023F               	subwf	??_Battery_State_Machine,w
 14760  0F3C  1803               	skipnc
 14761  0F3D  0008               	return
 14762  0F3E  3544               	lslf	Battery_State_Machine@z,w
 14763  0F3F  3E5E               	addlw	(low (_IminCount| 0))& (0+255)
 14764  0F40  0086               	movwf	6
 14765  0F41  0187               	clrf	7
 14766  0F42  3001               	movlw	1
 14767  0F43  0781               	addwf	1,f
 14768  0F44  3141               	addfsr 1,1
 14769  0F45  1803               	skipnc
 14770  0F46  0A81               	incf	1,f
 14771                           
 14772                           ;battery_charger.c: 69: }
 14773                           ;battery_charger.c: 70: }
 14774  0F47  0008               	return
 14775  0F48                     l3202:	
 14776                           
 14777                           ;battery_charger.c: 71: else if(IminCount[z]<600)IminCount[z]+=1;
 14778  0F48  3544               	lslf	Battery_State_Machine@z,w
 14779  0F49  3E5E               	addlw	(low (_IminCount| 0))& (0+255)
 14780  0F4A  0086               	movwf	6
 14781  0F4B  0187               	clrf	7
 14782  0F4C  3F40               	moviw [0]fsr1
 14783  0F4D  00BF               	movwf	??_Battery_State_Machine
 14784  0F4E  3F41               	moviw [1]fsr1
 14785  0F4F  00C0               	movwf	??_Battery_State_Machine+1
 14786  0F50  3002               	movlw	2
 14787  0F51  0240               	subwf	??_Battery_State_Machine+1,w
 14788  0F52  3058               	movlw	88
 14789  0F53  1903               	skipnz
 14790  0F54  023F               	subwf	??_Battery_State_Machine,w
 14791  0F55  1803               	skipnc
 14792  0F56  0008               	return
 14793  0F57  3544               	lslf	Battery_State_Machine@z,w
 14794  0F58  3E5E               	addlw	(low (_IminCount| 0))& (0+255)
 14795  0F59  0086               	movwf	6
 14796  0F5A  0187               	clrf	7
 14797  0F5B  3001               	movlw	1
 14798  0F5C  0781               	addwf	1,f
 14799  0F5D  3141               	addfsr 1,1
 14800  0F5E  1803               	skipnc
 14801  0F5F  0A81               	incf	1,f
 14802                           
 14803                           ;battery_charger.c: 72: }
 14804  0F60  0008               	return
 14805  0F61                     l3206:	
 14806                           
 14807                           ;battery_charger.c: 73: else if(batteryState[z] == FLOAT)
 14808  0F61  0844               	movf	Battery_State_Machine@z,w
 14809  0F62  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 14810  0F63  0086               	movwf	6
 14811  0F64  0187               	clrf	7
 14812  0F65  3005               	movlw	5
 14813  0F66  0601               	xorwf	1,w
 14814  0F67  1D03               	btfss	3,2
 14815  0F68  2FF0               	goto	l3228
 14816                           
 14817                           ;battery_charger.c: 74: {
 14818                           ;battery_charger.c: 75: otherState=(uint8_t)(1-z);
 14819  0F69  0344               	decf	Battery_State_Machine@z,w
 14820  0F6A  3AFF               	xorlw	255
 14821  0F6B  3E01               	addlw	1
 14822  0F6C  00BF               	movwf	??_Battery_State_Machine
 14823  0F6D  083F               	movf	??_Battery_State_Machine,w
 14824  0F6E  00ED               	movwf	_otherState
 14825                           
 14826                           ;battery_charger.c: 77: if(batteryState[otherState]==CHARGE)
 14827  0F6F  086D               	movf	_otherState,w
 14828  0F70  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 14829  0F71  0086               	movwf	6
 14830  0F72  0187               	clrf	7
 14831  0F73  3004               	movlw	4
 14832  0F74  0601               	xorwf	1,w
 14833  0F75  1D03               	btfss	3,2
 14834  0F76  2FA1               	goto	l3220
 14835                           
 14836                           ;battery_charger.c: 78: {
 14837                           ;battery_charger.c: 79: floatCount[z]+=1;
 14838  0F77  3001               	movlw	1
 14839  0F78  00BF               	movwf	??_Battery_State_Machine
 14840  0F79  0844               	movf	Battery_State_Machine@z,w
 14841  0F7A  3E66               	addlw	(low (_floatCount| 0))& (0+255)
 14842  0F7B  0086               	movwf	6
 14843  0F7C  0187               	clrf	7
 14844  0F7D  083F               	movf	??_Battery_State_Machine,w
 14845  0F7E  0781               	addwf	1,f
 14846                           
 14847                           ;battery_charger.c: 81: if(floatCount[z]>5)
 14848  0F7F  0844               	movf	Battery_State_Machine@z,w
 14849  0F80  3E66               	addlw	(low (_floatCount| 0))& (0+255)
 14850  0F81  0086               	movwf	6
 14851  0F82  0187               	clrf	7
 14852  0F83  3006               	movlw	6
 14853  0F84  0201               	subwf	1,w
 14854  0F85  1C03               	skipc
 14855  0F86  0008               	return
 14856                           
 14857                           ;battery_charger.c: 82: {
 14858                           ;battery_charger.c: 83: IminCount[z]=IminCount[otherState];
 14859  0F87  356D               	lslf	_otherState,w
 14860  0F88  3E5E               	addlw	(low (_IminCount| 0))& (0+255)
 14861  0F89  0086               	movwf	6
 14862  0F8A  0187               	clrf	7
 14863  0F8B  3544               	lslf	Battery_State_Machine@z,w
 14864  0F8C  3E5E               	addlw	(low (_IminCount| 0))& (0+255)
 14865  0F8D  0084               	movwf	4
 14866  0F8E  0185               	clrf	5
 14867  0F8F  3F40               	moviw [0]fsr1
 14868  0F90  3F80               	movwi [0]fsr0
 14869  0F91  3F41               	moviw [1]fsr1
 14870  0F92  3F81               	movwi [1]fsr0
 14871                           
 14872                           ;battery_charger.c: 84: floatCount[z]=0;
 14873  0F93  0844               	movf	Battery_State_Machine@z,w
 14874  0F94  3E66               	addlw	(low (_floatCount| 0))& (0+255)
 14875  0F95  0086               	movwf	6
 14876  0F96  0187               	clrf	7
 14877  0F97  0181               	clrf	1
 14878                           
 14879                           ;battery_charger.c: 85: batteryState[z] = CHARGE;
 14880  0F98  3004               	movlw	4
 14881  0F99  00BF               	movwf	??_Battery_State_Machine
 14882  0F9A  0844               	movf	Battery_State_Machine@z,w
 14883  0F9B  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 14884  0F9C  0086               	movwf	6
 14885  0F9D  0187               	clrf	7
 14886  0F9E  083F               	movf	??_Battery_State_Machine,w
 14887  0F9F  0081               	movwf	1
 14888                           
 14889                           ;battery_charger.c: 86: }
 14890                           ;battery_charger.c: 87: }
 14891  0FA0  0008               	return
 14892  0FA1                     l3220:	
 14893                           
 14894                           ;battery_charger.c: 88: else
 14895                           ;battery_charger.c: 89: {
 14896                           ;battery_charger.c: 90: Vref[z]=1350+(int16_t)((250-batteryTemp)*.24);
 14897  0FA1  0021               	movlb	1	; select bank1
 14898  0FA2  096D               	comf	_batteryTemp^(0+128),w
 14899  0FA3  0020               	movlb	0	; select bank0
 14900  0FA4  00BF               	movwf	??_Battery_State_Machine
 14901  0FA5  0021               	movlb	1	; select bank1
 14902  0FA6  096E               	comf	(_batteryTemp+1)^(0+128),w
 14903  0FA7  0020               	movlb	0	; select bank0
 14904  0FA8  00C0               	movwf	??_Battery_State_Machine+1
 14905  0FA9  0ABF               	incf	??_Battery_State_Machine,f
 14906  0FAA  1903               	skipnz
 14907  0FAB  0AC0               	incf	??_Battery_State_Machine+1,f
 14908  0FAC  083F               	movf	??_Battery_State_Machine,w
 14909  0FAD  3EFA               	addlw	250
 14910  0FAE  00F9               	movwf	___awtoft@c
 14911  0FAF  3000               	movlw	0
 14912  0FB0  3D40               	addwfc	??_Battery_State_Machine+1,w
 14913  0FB1  00FA               	movwf	___awtoft@c+1
 14914  0FB2  319F  2710  318E   	fcall	___awtoft
 14915  0FB5  0879               	movf	?___awtoft,w
 14916  0FB6  0020               	movlb	0	; select bank0
 14917  0FB7  00A4               	movwf	___ftmul@f2
 14918  0FB8  087A               	movf	?___awtoft+1,w
 14919  0FB9  00A5               	movwf	___ftmul@f2+1
 14920  0FBA  087B               	movf	?___awtoft+2,w
 14921  0FBB  00A6               	movwf	___ftmul@f2+2
 14922  0FBC  30C3               	movlw	195
 14923  0FBD  00A1               	movwf	___ftmul@f1
 14924  0FBE  3075               	movlw	117
 14925  0FBF  00A2               	movwf	___ftmul@f1+1
 14926  0FC0  303E               	movlw	62
 14927  0FC1  00A3               	movwf	___ftmul@f1+2
 14928  0FC2  3197  274C  318E   	fcall	___ftmul
 14929  0FC5  0020               	movlb	0	; select bank0
 14930  0FC6  0821               	movf	?___ftmul,w
 14931  0FC7  00B1               	movwf	___fttol@f1
 14932  0FC8  0822               	movf	?___ftmul+1,w
 14933  0FC9  00B2               	movwf	___fttol@f1+1
 14934  0FCA  0823               	movf	?___ftmul+2,w
 14935  0FCB  00B3               	movwf	___fttol@f1+2
 14936  0FCC  3195  256C         	fcall	___fttol
 14937  0FCE  0020               	movlb	0	; select bank0
 14938  0FCF  0831               	movf	?___fttol,w
 14939  0FD0  3E46               	addlw	70
 14940  0FD1  00C1               	movwf	??_Battery_State_Machine+2
 14941  0FD2  3005               	movlw	5
 14942  0FD3  3D32               	addwfc	?___fttol+1,w
 14943  0FD4  00C2               	movwf	??_Battery_State_Machine+3
 14944  0FD5  3544               	lslf	Battery_State_Machine@z,w
 14945  0FD6  3EB4               	addlw	(low (_Vref| 0))& (0+255)
 14946  0FD7  0086               	movwf	6
 14947  0FD8  0187               	clrf	7
 14948  0FD9  0841               	movf	??_Battery_State_Machine+2,w
 14949  0FDA  3FC0               	movwi [0]fsr1
 14950  0FDB  0842               	movf	??_Battery_State_Machine+3,w
 14951  0FDC  3FC1               	movwi [1]fsr1
 14952                           
 14953                           ;battery_charger.c: 91: Iref[z]=15;
 14954  0FDD  3544               	lslf	Battery_State_Machine@z,w
 14955  0FDE  3EB0               	addlw	(low (_Iref| 0))& (0+255)
 14956  0FDF  0086               	movwf	6
 14957  0FE0  0187               	clrf	7
 14958  0FE1  300F               	movlw	15
 14959  0FE2  3FC0               	movwi [0]fsr1
 14960  0FE3  3000               	movlw	0
 14961  0FE4  3FC1               	movwi [1]fsr1
 14962                           
 14963                           ;battery_charger.c: 92: Imode[z]=0;
 14964  0FE5  0844               	movf	Battery_State_Machine@z,w
 14965  0FE6  3EBC               	addlw	(low (_Imode| 0))& (0+255)
 14966  0FE7  0086               	movwf	6
 14967  0FE8  0187               	clrf	7
 14968  0FE9  0181               	clrf	1
 14969                           
 14970                           ;battery_charger.c: 93: floatCount[z]=0;
 14971  0FEA  0844               	movf	Battery_State_Machine@z,w
 14972  0FEB  3E66               	addlw	(low (_floatCount| 0))& (0+255)
 14973  0FEC  0086               	movwf	6
 14974  0FED  0187               	clrf	7
 14975  0FEE  0181               	clrf	1
 14976                           
 14977                           ;battery_charger.c: 94: }
 14978                           ;battery_charger.c: 95: }
 14979  0FEF  0008               	return
 14980  0FF0                     l3228:	
 14981                           
 14982                           ;battery_charger.c: 96: else
 14983                           ;battery_charger.c: 97: if(batteryState[z] == FAULT)
 14984  0FF0  0844               	movf	Battery_State_Machine@z,w
 14985  0FF1  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 14986  0FF2  0086               	movwf	6
 14987  0FF3  0187               	clrf	7
 14988  0FF4  0301               	decf	1,w
 14989  0FF5  1D03               	btfss	3,2
 14990  0FF6  0008               	return
 14991                           
 14992                           ;battery_charger.c: 98: {
 14993                           ;battery_charger.c: 99: batteryState[z]=PRECHARGE;
 14994  0FF7  3003               	movlw	3
 14995  0FF8  00BF               	movwf	??_Battery_State_Machine
 14996  0FF9  0844               	movf	Battery_State_Machine@z,w
 14997  0FFA  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 14998  0FFB  0086               	movwf	6
 14999  0FFC  0187               	clrf	7
 15000  0FFD  083F               	movf	??_Battery_State_Machine,w
 15001  0FFE  0081               	movwf	1
 15002  0FFF  0008               	return
 15003  1000                     __end_of_Battery_State_Machine:	
 15004                           
 15005                           	psect	text41
 15006  156C                     __ptext41:	
 15007 ;; *************** function ___fttol *****************
 15008 ;; Defined at:
 15009 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
 15010 ;; Parameters:    Size  Location     Type
 15011 ;;  f1              3   17[BANK0 ] float 
 15012 ;; Auto vars:     Size  Location     Type
 15013 ;;  lval            4   26[BANK0 ] unsigned long 
 15014 ;;  exp1            1   30[BANK0 ] unsigned char 
 15015 ;;  sign1           1   25[BANK0 ] unsigned char 
 15016 ;; Return value:  Size  Location     Type
 15017 ;;                  4   17[BANK0 ] long 
 15018 ;; Registers used:
 15019 ;;		wreg, status,2, status,0
 15020 ;; Tracked objects:
 15021 ;;		On entry : 0/0
 15022 ;;		On exit  : 0/0
 15023 ;;		Unchanged: 0/0
 15024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15025 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15026 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15027 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15028 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15029 ;;Total ram usage:       14 bytes
 15030 ;; Hardware stack levels used:    1
 15031 ;; This function calls:
 15032 ;;		Nothing
 15033 ;; This function is called by:
 15034 ;;		_main
 15035 ;;		_calculateCurrent0
 15036 ;;		_calculateCurrent3
 15037 ;;		_Init_Battery_State_Machine
 15038 ;;		_Battery_State_Machine
 15039 ;;		_cc_cv_mode
 15040 ;;		_tempCalc
 15041 ;; This function uses a non-reentrant model
 15042 ;;
 15043                           
 15044                           
 15045                           ;psect for function ___fttol
 15046  156C                     ___fttol:	
 15047                           
 15048                           ;incstack = 0
 15049                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15050  156C  0020               	movlb	0	; select bank0
 15051  156D  0831               	movf	___fttol@f1,w
 15052  156E  00B5               	movwf	??___fttol
 15053  156F  0832               	movf	___fttol@f1+1,w
 15054  1570  00B6               	movwf	??___fttol+1
 15055  1571  0833               	movf	___fttol@f1+2,w
 15056  1572  00B7               	movwf	??___fttol+2
 15057  1573  1003               	clrc
 15058  1574  0D36               	rlf	??___fttol+1,w
 15059  1575  0D37               	rlf	??___fttol+2,w
 15060  1576  00B8               	movwf	??___fttol+3
 15061  1577  0838               	movf	??___fttol+3,w
 15062  1578  00BE               	movwf	___fttol@exp1
 15063  1579  083E               	movf	___fttol@exp1,w
 15064  157A  1D03               	btfss	3,2
 15065  157B  2D85               	goto	l2602
 15066  157C  3000               	movlw	0
 15067  157D  00B4               	movwf	?___fttol+3
 15068  157E  3000               	movlw	0
 15069  157F  00B3               	movwf	?___fttol+2
 15070  1580  3000               	movlw	0
 15071  1581  00B2               	movwf	?___fttol+1
 15072  1582  3000               	movlw	0
 15073  1583  00B1               	movwf	?___fttol
 15074  1584  0008               	return
 15075  1585                     l2602:	
 15076  1585  0831               	movf	___fttol@f1,w
 15077  1586  00B5               	movwf	??___fttol
 15078  1587  0832               	movf	___fttol@f1+1,w
 15079  1588  00B6               	movwf	??___fttol+1
 15080  1589  0833               	movf	___fttol@f1+2,w
 15081  158A  00B7               	movwf	??___fttol+2
 15082  158B  3017               	movlw	23
 15083  158C                     u2865:	
 15084  158C  36B7               	lsrf	??___fttol+2,f
 15085  158D  0CB6               	rrf	??___fttol+1,f
 15086  158E  0CB5               	rrf	??___fttol,f
 15087  158F  0B89               	decfsz	9,f
 15088  1590  2D8C               	goto	u2865
 15089  1591  0835               	movf	??___fttol,w
 15090  1592  00B8               	movwf	??___fttol+3
 15091  1593  0838               	movf	??___fttol+3,w
 15092  1594  00B9               	movwf	___fttol@sign1
 15093  1595  17B2               	bsf	___fttol@f1+1,7
 15094  1596  30FF               	movlw	255
 15095  1597  05B1               	andwf	___fttol@f1,f
 15096  1598  30FF               	movlw	255
 15097  1599  05B2               	andwf	___fttol@f1+1,f
 15098  159A  3000               	movlw	0
 15099  159B  05B3               	andwf	___fttol@f1+2,f
 15100  159C  0831               	movf	___fttol@f1,w
 15101  159D  00BA               	movwf	___fttol@lval
 15102  159E  0832               	movf	___fttol@f1+1,w
 15103  159F  00BB               	movwf	___fttol@lval+1
 15104  15A0  0833               	movf	___fttol@f1+2,w
 15105  15A1  00BC               	movwf	___fttol@lval+2
 15106  15A2  01BD               	clrf	___fttol@lval+3
 15107  15A3  308E               	movlw	142
 15108  15A4  02BE               	subwf	___fttol@exp1,f
 15109  15A5  1FBE               	btfss	___fttol@exp1,7
 15110  15A6  2DC3               	goto	l2622
 15111  15A7  083E               	movf	___fttol@exp1,w
 15112  15A8  3A80               	xorlw	128
 15113  15A9  3E8F               	addlw	143
 15114  15AA  1803               	skipnc
 15115  15AB  2DB5               	goto	l2620
 15116  15AC  3000               	movlw	0
 15117  15AD  00B4               	movwf	?___fttol+3
 15118  15AE  3000               	movlw	0
 15119  15AF  00B3               	movwf	?___fttol+2
 15120  15B0  3000               	movlw	0
 15121  15B1  00B2               	movwf	?___fttol+1
 15122  15B2  3000               	movlw	0
 15123  15B3  00B1               	movwf	?___fttol
 15124  15B4  0008               	return
 15125  15B5                     l2620:	
 15126  15B5  3001               	movlw	1
 15127  15B6                     u2895:	
 15128  15B6  36BD               	lsrf	___fttol@lval+3,f
 15129  15B7  0CBC               	rrf	___fttol@lval+2,f
 15130  15B8  0CBB               	rrf	___fttol@lval+1,f
 15131  15B9  0CBA               	rrf	___fttol@lval,f
 15132  15BA  0B89               	decfsz	9,f
 15133  15BB  2DB6               	goto	u2895
 15134  15BC  3001               	movlw	1
 15135  15BD  00B5               	movwf	??___fttol
 15136  15BE  0835               	movf	??___fttol,w
 15137  15BF  07BE               	addwf	___fttol@exp1,f
 15138  15C0  1903               	btfsc	3,2
 15139  15C1  2DDC               	goto	l2630
 15140  15C2  2DB5               	goto	l2620
 15141  15C3                     l2622:	
 15142  15C3  3018               	movlw	24
 15143  15C4  023E               	subwf	___fttol@exp1,w
 15144  15C5  1C03               	skipc
 15145  15C6  2DD9               	goto	l878
 15146  15C7  3000               	movlw	0
 15147  15C8  00B4               	movwf	?___fttol+3
 15148  15C9  3000               	movlw	0
 15149  15CA  00B3               	movwf	?___fttol+2
 15150  15CB  3000               	movlw	0
 15151  15CC  00B2               	movwf	?___fttol+1
 15152  15CD  3000               	movlw	0
 15153  15CE  00B1               	movwf	?___fttol
 15154  15CF  0008               	return
 15155  15D0                     l2628:	
 15156  15D0  3001               	movlw	1
 15157  15D1                     u2925:	
 15158  15D1  35BA               	lslf	___fttol@lval,f
 15159  15D2  0DBB               	rlf	___fttol@lval+1,f
 15160  15D3  0DBC               	rlf	___fttol@lval+2,f
 15161  15D4  0DBD               	rlf	___fttol@lval+3,f
 15162  15D5  0B89               	decfsz	9,f
 15163  15D6  2DD1               	goto	u2925
 15164  15D7  3001               	movlw	1
 15165  15D8  02BE               	subwf	___fttol@exp1,f
 15166  15D9                     l878:	
 15167  15D9  083E               	movf	___fttol@exp1,w
 15168  15DA  1D03               	btfss	3,2
 15169  15DB  2DD0               	goto	l2628
 15170  15DC                     l2630:	
 15171  15DC  0839               	movf	___fttol@sign1,w
 15172  15DD  1903               	btfsc	3,2
 15173  15DE  2DEA               	goto	l2634
 15174  15DF  09BA               	comf	___fttol@lval,f
 15175  15E0  09BB               	comf	___fttol@lval+1,f
 15176  15E1  09BC               	comf	___fttol@lval+2,f
 15177  15E2  09BD               	comf	___fttol@lval+3,f
 15178  15E3  0ABA               	incf	___fttol@lval,f
 15179  15E4  1903               	skipnz
 15180  15E5  0ABB               	incf	___fttol@lval+1,f
 15181  15E6  1903               	skipnz
 15182  15E7  0ABC               	incf	___fttol@lval+2,f
 15183  15E8  1903               	skipnz
 15184  15E9  0ABD               	incf	___fttol@lval+3,f
 15185  15EA                     l2634:	
 15186  15EA  083D               	movf	___fttol@lval+3,w
 15187  15EB  00B4               	movwf	?___fttol+3
 15188  15EC  083C               	movf	___fttol@lval+2,w
 15189  15ED  00B3               	movwf	?___fttol+2
 15190  15EE  083B               	movf	___fttol@lval+1,w
 15191  15EF  00B2               	movwf	?___fttol+1
 15192  15F0  083A               	movf	___fttol@lval,w
 15193  15F1  00B1               	movwf	?___fttol
 15194  15F2  0008               	return
 15195  15F3                     __end_of___fttol:	
 15196                           
 15197                           	psect	text42
 15198  174C                     __ptext42:	
 15199 ;; *************** function ___ftmul *****************
 15200 ;; Defined at:
 15201 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
 15202 ;; Parameters:    Size  Location     Type
 15203 ;;  f1              3    1[BANK0 ] float 
 15204 ;;  f2              3    4[BANK0 ] float 
 15205 ;; Auto vars:     Size  Location     Type
 15206 ;;  f3_as_produc    3   12[BANK0 ] unsigned um
 15207 ;;  sign            1   16[BANK0 ] unsigned char 
 15208 ;;  cntr            1   15[BANK0 ] unsigned char 
 15209 ;;  exp             1   11[BANK0 ] unsigned char 
 15210 ;; Return value:  Size  Location     Type
 15211 ;;                  3    1[BANK0 ] float 
 15212 ;; Registers used:
 15213 ;;		wreg, status,2, status,0, pclath, cstack
 15214 ;; Tracked objects:
 15215 ;;		On entry : 0/0
 15216 ;;		On exit  : 0/0
 15217 ;;		Unchanged: 0/0
 15218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15219 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15220 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15221 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15222 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15223 ;;Total ram usage:       16 bytes
 15224 ;; Hardware stack levels used:    1
 15225 ;; Hardware stack levels required when called:    1
 15226 ;; This function calls:
 15227 ;;		___ftpack
 15228 ;; This function is called by:
 15229 ;;		_main
 15230 ;;		_Init_Battery_State_Machine
 15231 ;;		_Battery_State_Machine
 15232 ;;		_cc_cv_mode
 15233 ;;		_tempCalc
 15234 ;;		_log
 15235 ;;		_eval_poly
 15236 ;; This function uses a non-reentrant model
 15237 ;;
 15238                           
 15239                           
 15240                           ;psect for function ___ftmul
 15241  174C                     ___ftmul:	
 15242                           
 15243                           ;incstack = 0
 15244                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 15245  174C  0020               	movlb	0	; select bank0
 15246  174D  0821               	movf	___ftmul@f1,w
 15247  174E  00A7               	movwf	??___ftmul
 15248  174F  0822               	movf	___ftmul@f1+1,w
 15249  1750  00A8               	movwf	??___ftmul+1
 15250  1751  0823               	movf	___ftmul@f1+2,w
 15251  1752  00A9               	movwf	??___ftmul+2
 15252  1753  1003               	clrc
 15253  1754  0D28               	rlf	??___ftmul+1,w
 15254  1755  0D29               	rlf	??___ftmul+2,w
 15255  1756  00AA               	movwf	??___ftmul+3
 15256  1757  082A               	movf	??___ftmul+3,w
 15257  1758  00AB               	movwf	___ftmul@exp
 15258  1759  082B               	movf	___ftmul@exp,w
 15259  175A  1D03               	btfss	3,2
 15260  175B  2F63               	goto	l2518
 15261  175C  3000               	movlw	0
 15262  175D  00A1               	movwf	?___ftmul
 15263  175E  3000               	movlw	0
 15264  175F  00A2               	movwf	?___ftmul+1
 15265  1760  3000               	movlw	0
 15266  1761  00A3               	movwf	?___ftmul+2
 15267  1762  0008               	return
 15268  1763                     l2518:	
 15269  1763  0824               	movf	___ftmul@f2,w
 15270  1764  00A7               	movwf	??___ftmul
 15271  1765  0825               	movf	___ftmul@f2+1,w
 15272  1766  00A8               	movwf	??___ftmul+1
 15273  1767  0826               	movf	___ftmul@f2+2,w
 15274  1768  00A9               	movwf	??___ftmul+2
 15275  1769  1003               	clrc
 15276  176A  0D28               	rlf	??___ftmul+1,w
 15277  176B  0D29               	rlf	??___ftmul+2,w
 15278  176C  00AA               	movwf	??___ftmul+3
 15279  176D  082A               	movf	??___ftmul+3,w
 15280  176E  00B0               	movwf	___ftmul@sign
 15281  176F  0830               	movf	___ftmul@sign,w
 15282  1770  1D03               	btfss	3,2
 15283  1771  2F79               	goto	l2524
 15284  1772  3000               	movlw	0
 15285  1773  00A1               	movwf	?___ftmul
 15286  1774  3000               	movlw	0
 15287  1775  00A2               	movwf	?___ftmul+1
 15288  1776  3000               	movlw	0
 15289  1777  00A3               	movwf	?___ftmul+2
 15290  1778  0008               	return
 15291  1779                     l2524:	
 15292  1779  0830               	movf	___ftmul@sign,w
 15293  177A  3E7B               	addlw	123
 15294  177B  00A7               	movwf	??___ftmul
 15295  177C  0827               	movf	??___ftmul,w
 15296  177D  07AB               	addwf	___ftmul@exp,f
 15297  177E  0821               	movf	___ftmul@f1,w
 15298  177F  00A7               	movwf	??___ftmul
 15299  1780  0822               	movf	___ftmul@f1+1,w
 15300  1781  00A8               	movwf	??___ftmul+1
 15301  1782  0823               	movf	___ftmul@f1+2,w
 15302  1783  00A9               	movwf	??___ftmul+2
 15303  1784  3010               	movlw	16
 15304  1785                     u2715:	
 15305  1785  36A9               	lsrf	??___ftmul+2,f
 15306  1786  0CA8               	rrf	??___ftmul+1,f
 15307  1787  0CA7               	rrf	??___ftmul,f
 15308  1788  0B89               	decfsz	9,f
 15309  1789  2F85               	goto	u2715
 15310  178A  0827               	movf	??___ftmul,w
 15311  178B  00AA               	movwf	??___ftmul+3
 15312  178C  082A               	movf	??___ftmul+3,w
 15313  178D  00B0               	movwf	___ftmul@sign
 15314  178E  0824               	movf	___ftmul@f2,w
 15315  178F  00A7               	movwf	??___ftmul
 15316  1790  0825               	movf	___ftmul@f2+1,w
 15317  1791  00A8               	movwf	??___ftmul+1
 15318  1792  0826               	movf	___ftmul@f2+2,w
 15319  1793  00A9               	movwf	??___ftmul+2
 15320  1794  3010               	movlw	16
 15321  1795                     u2725:	
 15322  1795  36A9               	lsrf	??___ftmul+2,f
 15323  1796  0CA8               	rrf	??___ftmul+1,f
 15324  1797  0CA7               	rrf	??___ftmul,f
 15325  1798  0B89               	decfsz	9,f
 15326  1799  2F95               	goto	u2725
 15327  179A  0827               	movf	??___ftmul,w
 15328  179B  00AA               	movwf	??___ftmul+3
 15329  179C  082A               	movf	??___ftmul+3,w
 15330  179D  06B0               	xorwf	___ftmul@sign,f
 15331  179E  3080               	movlw	128
 15332  179F  00A7               	movwf	??___ftmul
 15333  17A0  0827               	movf	??___ftmul,w
 15334  17A1  05B0               	andwf	___ftmul@sign,f
 15335  17A2  17A2               	bsf	___ftmul@f1+1,7
 15336  17A3  17A5               	bsf	___ftmul@f2+1,7
 15337  17A4  30FF               	movlw	255
 15338  17A5  05A4               	andwf	___ftmul@f2,f
 15339  17A6  30FF               	movlw	255
 15340  17A7  05A5               	andwf	___ftmul@f2+1,f
 15341  17A8  3000               	movlw	0
 15342  17A9  05A6               	andwf	___ftmul@f2+2,f
 15343  17AA  3000               	movlw	0
 15344  17AB  00AC               	movwf	___ftmul@f3_as_product
 15345  17AC  3000               	movlw	0
 15346  17AD  00AD               	movwf	___ftmul@f3_as_product+1
 15347  17AE  3000               	movlw	0
 15348  17AF  00AE               	movwf	___ftmul@f3_as_product+2
 15349  17B0  3007               	movlw	7
 15350  17B1  00A7               	movwf	??___ftmul
 15351  17B2  0827               	movf	??___ftmul,w
 15352  17B3  00AF               	movwf	___ftmul@cntr
 15353  17B4                     l2536:	
 15354  17B4  1C21               	btfss	___ftmul@f1,0
 15355  17B5  2FBC               	goto	l2540
 15356  17B6  0824               	movf	___ftmul@f2,w
 15357  17B7  07AC               	addwf	___ftmul@f3_as_product,f
 15358  17B8  0825               	movf	___ftmul@f2+1,w
 15359  17B9  3DAD               	addwfc	___ftmul@f3_as_product+1,f
 15360  17BA  0826               	movf	___ftmul@f2+2,w
 15361  17BB  3DAE               	addwfc	___ftmul@f3_as_product+2,f
 15362  17BC                     l2540:	
 15363  17BC  3001               	movlw	1
 15364  17BD                     u2745:	
 15365  17BD  36A3               	lsrf	___ftmul@f1+2,f
 15366  17BE  0CA2               	rrf	___ftmul@f1+1,f
 15367  17BF  0CA1               	rrf	___ftmul@f1,f
 15368  17C0  0B89               	decfsz	9,f
 15369  17C1  2FBD               	goto	u2745
 15370  17C2  3001               	movlw	1
 15371  17C3                     u2755:	
 15372  17C3  35A4               	lslf	___ftmul@f2,f
 15373  17C4  0DA5               	rlf	___ftmul@f2+1,f
 15374  17C5  0DA6               	rlf	___ftmul@f2+2,f
 15375  17C6  0B89               	decfsz	9,f
 15376  17C7  2FC3               	goto	u2755
 15377  17C8  3001               	movlw	1
 15378  17C9  02AF               	subwf	___ftmul@cntr,f
 15379  17CA  1D03               	btfss	3,2
 15380  17CB  2FB4               	goto	l2536
 15381  17CC  3009               	movlw	9
 15382  17CD  00A7               	movwf	??___ftmul
 15383  17CE  0827               	movf	??___ftmul,w
 15384  17CF  00AF               	movwf	___ftmul@cntr
 15385  17D0                     l2548:	
 15386  17D0  1C21               	btfss	___ftmul@f1,0
 15387  17D1  2FD8               	goto	l2552
 15388  17D2  0824               	movf	___ftmul@f2,w
 15389  17D3  07AC               	addwf	___ftmul@f3_as_product,f
 15390  17D4  0825               	movf	___ftmul@f2+1,w
 15391  17D5  3DAD               	addwfc	___ftmul@f3_as_product+1,f
 15392  17D6  0826               	movf	___ftmul@f2+2,w
 15393  17D7  3DAE               	addwfc	___ftmul@f3_as_product+2,f
 15394  17D8                     l2552:	
 15395  17D8  3001               	movlw	1
 15396  17D9                     u2785:	
 15397  17D9  36A3               	lsrf	___ftmul@f1+2,f
 15398  17DA  0CA2               	rrf	___ftmul@f1+1,f
 15399  17DB  0CA1               	rrf	___ftmul@f1,f
 15400  17DC  0B89               	decfsz	9,f
 15401  17DD  2FD9               	goto	u2785
 15402  17DE  3001               	movlw	1
 15403  17DF                     u2795:	
 15404  17DF  36AE               	lsrf	___ftmul@f3_as_product+2,f
 15405  17E0  0CAD               	rrf	___ftmul@f3_as_product+1,f
 15406  17E1  0CAC               	rrf	___ftmul@f3_as_product,f
 15407  17E2  0B89               	decfsz	9,f
 15408  17E3  2FDF               	goto	u2795
 15409  17E4  3001               	movlw	1
 15410  17E5  02AF               	subwf	___ftmul@cntr,f
 15411  17E6  1D03               	btfss	3,2
 15412  17E7  2FD0               	goto	l2548
 15413  17E8  082C               	movf	___ftmul@f3_as_product,w
 15414  17E9  00F0               	movwf	___ftpack@arg
 15415  17EA  082D               	movf	___ftmul@f3_as_product+1,w
 15416  17EB  00F1               	movwf	___ftpack@arg+1
 15417  17EC  082E               	movf	___ftmul@f3_as_product+2,w
 15418  17ED  00F2               	movwf	___ftpack@arg+2
 15419  17EE  082B               	movf	___ftmul@exp,w
 15420  17EF  00A7               	movwf	??___ftmul
 15421  17F0  0827               	movf	??___ftmul,w
 15422  17F1  00F3               	movwf	___ftpack@exp
 15423  17F2  0830               	movf	___ftmul@sign,w
 15424  17F3  00A8               	movwf	??___ftmul+1
 15425  17F4  0828               	movf	??___ftmul+1,w
 15426  17F5  00F4               	movwf	___ftpack@sign
 15427  17F6  3193  239B         	fcall	___ftpack
 15428  17F8  0870               	movf	?___ftpack,w
 15429  17F9  0020               	movlb	0	; select bank0
 15430  17FA  00A1               	movwf	?___ftmul
 15431  17FB  0871               	movf	?___ftpack+1,w
 15432  17FC  00A2               	movwf	?___ftmul+1
 15433  17FD  0872               	movf	?___ftpack+2,w
 15434  17FE  00A3               	movwf	?___ftmul+2
 15435  17FF  0008               	return
 15436  1800                     __end_of___ftmul:	
 15437                           
 15438                           	psect	text43
 15439  1F10                     __ptext43:	
 15440 ;; *************** function ___awtoft *****************
 15441 ;; Defined at:
 15442 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awtoft.c"
 15443 ;; Parameters:    Size  Location     Type
 15444 ;;  c               2    9[COMMON] int 
 15445 ;; Auto vars:     Size  Location     Type
 15446 ;;  sign            1    0[BANK0 ] unsigned char 
 15447 ;; Return value:  Size  Location     Type
 15448 ;;                  3    9[COMMON] float 
 15449 ;; Registers used:
 15450 ;;		wreg, status,2, status,0, pclath, cstack
 15451 ;; Tracked objects:
 15452 ;;		On entry : 0/0
 15453 ;;		On exit  : 0/0
 15454 ;;		Unchanged: 0/0
 15455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15456 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15457 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15458 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15459 ;;      Totals:         5       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15460 ;;Total ram usage:        6 bytes
 15461 ;; Hardware stack levels used:    1
 15462 ;; Hardware stack levels required when called:    1
 15463 ;; This function calls:
 15464 ;;		___ftpack
 15465 ;; This function is called by:
 15466 ;;		_main
 15467 ;;		_calculateCurrent0
 15468 ;;		_calculateCurrent3
 15469 ;;		_Init_Battery_State_Machine
 15470 ;;		_Battery_State_Machine
 15471 ;;		_cc_cv_mode
 15472 ;;		_tempCalc
 15473 ;;		_log
 15474 ;; This function uses a non-reentrant model
 15475 ;;
 15476                           
 15477                           
 15478                           ;psect for function ___awtoft
 15479  1F10                     ___awtoft:	
 15480                           
 15481                           ;incstack = 0
 15482                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15483  1F10  0020               	movlb	0	; select bank0
 15484  1F11  01A0               	clrf	___awtoft@sign
 15485  1F12  1FFA               	btfss	___awtoft@c+1,7
 15486  1F13  2F1B               	goto	l2572
 15487  1F14  09F9               	comf	___awtoft@c,f
 15488  1F15  09FA               	comf	___awtoft@c+1,f
 15489  1F16  0AF9               	incf	___awtoft@c,f
 15490  1F17  1903               	skipnz
 15491  1F18  0AFA               	incf	___awtoft@c+1,f
 15492  1F19  01A0               	clrf	___awtoft@sign
 15493  1F1A  0AA0               	incf	___awtoft@sign,f
 15494  1F1B                     l2572:	
 15495  1F1B  0879               	movf	___awtoft@c,w
 15496  1F1C  00F0               	movwf	___ftpack@arg
 15497  1F1D  087A               	movf	___awtoft@c+1,w
 15498  1F1E  00F1               	movwf	___ftpack@arg+1
 15499  1F1F  01F2               	clrf	___ftpack@arg+2
 15500  1F20  308E               	movlw	142
 15501  1F21  00FC               	movwf	??___awtoft
 15502  1F22  087C               	movf	??___awtoft,w
 15503  1F23  00F3               	movwf	___ftpack@exp
 15504  1F24  0820               	movf	___awtoft@sign,w
 15505  1F25  00FD               	movwf	??___awtoft+1
 15506  1F26  087D               	movf	??___awtoft+1,w
 15507  1F27  00F4               	movwf	___ftpack@sign
 15508  1F28  3193  239B         	fcall	___ftpack
 15509  1F2A  0870               	movf	?___ftpack,w
 15510  1F2B  00F9               	movwf	?___awtoft
 15511  1F2C  0871               	movf	?___ftpack+1,w
 15512  1F2D  00FA               	movwf	?___awtoft+1
 15513  1F2E  0872               	movf	?___ftpack+2,w
 15514  1F2F  00FB               	movwf	?___awtoft+2
 15515  1F30  0008               	return
 15516  1F31                     __end_of___awtoft:	
 15517                           
 15518                           	psect	text44
 15519  139B                     __ptext44:	
 15520 ;; *************** function ___ftpack *****************
 15521 ;; Defined at:
 15522 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 15523 ;; Parameters:    Size  Location     Type
 15524 ;;  arg             3    0[COMMON] unsigned um
 15525 ;;  exp             1    3[COMMON] unsigned char 
 15526 ;;  sign            1    4[COMMON] unsigned char 
 15527 ;; Auto vars:     Size  Location     Type
 15528 ;;		None
 15529 ;; Return value:  Size  Location     Type
 15530 ;;                  3    0[COMMON] float 
 15531 ;; Registers used:
 15532 ;;		wreg, status,2, status,0
 15533 ;; Tracked objects:
 15534 ;;		On entry : 0/0
 15535 ;;		On exit  : 0/0
 15536 ;;		Unchanged: 0/0
 15537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15538 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15540 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15541 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15542 ;;Total ram usage:        8 bytes
 15543 ;; Hardware stack levels used:    1
 15544 ;; This function calls:
 15545 ;;		Nothing
 15546 ;; This function is called by:
 15547 ;;		___awtoft
 15548 ;;		___ftadd
 15549 ;;		___ftdiv
 15550 ;;		___ftmul
 15551 ;; This function uses a non-reentrant model
 15552 ;;
 15553                           
 15554                           
 15555                           ;psect for function ___ftpack
 15556  139B                     ___ftpack:	
 15557                           
 15558                           ;incstack = 0
 15559                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15560  139B  0873               	movf	___ftpack@exp,w
 15561  139C  1903               	btfsc	3,2
 15562  139D  2BA3               	goto	l2378
 15563  139E  0872               	movf	___ftpack@arg+2,w
 15564  139F  0471               	iorwf	___ftpack@arg+1,w
 15565  13A0  0470               	iorwf	___ftpack@arg,w
 15566  13A1  1D03               	skipz
 15567  13A2  2BB4               	goto	l2384
 15568  13A3                     l2378:	
 15569  13A3  3000               	movlw	0
 15570  13A4  00F0               	movwf	?___ftpack
 15571  13A5  3000               	movlw	0
 15572  13A6  00F1               	movwf	?___ftpack+1
 15573  13A7  3000               	movlw	0
 15574  13A8  00F2               	movwf	?___ftpack+2
 15575  13A9  0008               	return
 15576  13AA                     l2382:	
 15577  13AA  3001               	movlw	1
 15578  13AB  00F5               	movwf	??___ftpack
 15579  13AC  0875               	movf	??___ftpack,w
 15580  13AD  07F3               	addwf	___ftpack@exp,f
 15581  13AE  3001               	movlw	1
 15582  13AF                     u2285:	
 15583  13AF  36F2               	lsrf	___ftpack@arg+2,f
 15584  13B0  0CF1               	rrf	___ftpack@arg+1,f
 15585  13B1  0CF0               	rrf	___ftpack@arg,f
 15586  13B2  0B89               	decfsz	9,f
 15587  13B3  2BAF               	goto	u2285
 15588  13B4                     l2384:	
 15589  13B4  30FE               	movlw	254
 15590  13B5  0572               	andwf	___ftpack@arg+2,w
 15591  13B6  1903               	btfsc	3,2
 15592  13B7  2BCD               	goto	l787
 15593  13B8  2BAA               	goto	l2382
 15594  13B9                     l2386:	
 15595  13B9  3001               	movlw	1
 15596  13BA  00F5               	movwf	??___ftpack
 15597  13BB  0875               	movf	??___ftpack,w
 15598  13BC  07F3               	addwf	___ftpack@exp,f
 15599  13BD  3001               	movlw	1
 15600  13BE  07F0               	addwf	___ftpack@arg,f
 15601  13BF  3000               	movlw	0
 15602  13C0  1803               	skipnc
 15603  13C1  3001               	movlw	1
 15604  13C2  07F1               	addwf	___ftpack@arg+1,f
 15605  13C3  3000               	movlw	0
 15606  13C4  1803               	skipnc
 15607  13C5  3001               	movlw	1
 15608  13C6  07F2               	addwf	___ftpack@arg+2,f
 15609  13C7  3001               	movlw	1
 15610  13C8                     u2305:	
 15611  13C8  36F2               	lsrf	___ftpack@arg+2,f
 15612  13C9  0CF1               	rrf	___ftpack@arg+1,f
 15613  13CA  0CF0               	rrf	___ftpack@arg,f
 15614  13CB  0B89               	decfsz	9,f
 15615  13CC  2BC8               	goto	u2305
 15616  13CD                     l787:	
 15617  13CD  30FF               	movlw	255
 15618  13CE  0572               	andwf	___ftpack@arg+2,w
 15619  13CF  1903               	btfsc	3,2
 15620  13D0  2BDA               	goto	l2394
 15621  13D1  2BB9               	goto	l2386
 15622  13D2                     l2392:	
 15623  13D2  3001               	movlw	1
 15624  13D3  02F3               	subwf	___ftpack@exp,f
 15625  13D4  3001               	movlw	1
 15626  13D5                     u2325:	
 15627  13D5  35F0               	lslf	___ftpack@arg,f
 15628  13D6  0DF1               	rlf	___ftpack@arg+1,f
 15629  13D7  0DF2               	rlf	___ftpack@arg+2,f
 15630  13D8  0B89               	decfsz	9,f
 15631  13D9  2BD5               	goto	u2325
 15632  13DA                     l2394:	
 15633  13DA  1BF1               	btfsc	___ftpack@arg+1,7
 15634  13DB  2BE0               	goto	l794
 15635  13DC  3002               	movlw	2
 15636  13DD  0273               	subwf	___ftpack@exp,w
 15637  13DE  1803               	skipnc
 15638  13DF  2BD2               	goto	l2392
 15639  13E0                     l794:	
 15640  13E0  1873               	btfsc	___ftpack@exp,0
 15641  13E1  2BE8               	goto	l795
 15642  13E2  30FF               	movlw	255
 15643  13E3  05F0               	andwf	___ftpack@arg,f
 15644  13E4  307F               	movlw	127
 15645  13E5  05F1               	andwf	___ftpack@arg+1,f
 15646  13E6  30FF               	movlw	255
 15647  13E7  05F2               	andwf	___ftpack@arg+2,f
 15648  13E8                     l795:	
 15649  13E8  1003               	clrc
 15650  13E9  0CF3               	rrf	___ftpack@exp,f
 15651  13EA  0873               	movf	___ftpack@exp,w
 15652  13EB  00F5               	movwf	??___ftpack
 15653  13EC  01F6               	clrf	??___ftpack+1
 15654  13ED  01F7               	clrf	??___ftpack+2
 15655  13EE  3010               	movlw	16
 15656  13EF                     u2365:	
 15657  13EF  35F5               	lslf	??___ftpack,f
 15658  13F0  0DF6               	rlf	??___ftpack+1,f
 15659  13F1  0DF7               	rlf	??___ftpack+2,f
 15660  13F2  0B89               	decfsz	9,f
 15661  13F3  2BEF               	goto	u2365
 15662  13F4  0875               	movf	??___ftpack,w
 15663  13F5  04F0               	iorwf	___ftpack@arg,f
 15664  13F6  0876               	movf	??___ftpack+1,w
 15665  13F7  04F1               	iorwf	___ftpack@arg+1,f
 15666  13F8  0877               	movf	??___ftpack+2,w
 15667  13F9  04F2               	iorwf	___ftpack@arg+2,f
 15668  13FA  0874               	movf	___ftpack@sign,w
 15669  13FB  1903               	btfsc	3,2
 15670  13FC  0008               	return
 15671  13FD  17F2               	bsf	___ftpack@arg+2,7
 15672  13FE  0008               	return
 15673  13FF                     __end_of___ftpack:	
 15674  007E                     btemp	set	126	;btemp
 15675  007E                     wtemp	set	126
 15676  007E                     wtemp0	set	126
 15677  0080                     wtemp1	set	128
 15678  0082                     wtemp2	set	130
 15679  0084                     wtemp3	set	132
 15680  0086                     wtemp4	set	134
 15681  0088                     wtemp5	set	136
 15682  007F                     wtemp6	set	127
 15683  007E                     ttemp	set	126
 15684  007E                     ttemp0	set	126
 15685  0081                     ttemp1	set	129
 15686  0084                     ttemp2	set	132
 15687  0087                     ttemp3	set	135
 15688  007F                     ttemp4	set	127
 15689  007E                     ltemp	set	126
 15690  007E                     ltemp0	set	126
 15691  0082                     ltemp1	set	130
 15692  0086                     ltemp2	set	134
 15693  0080                     ltemp3	set	128


Data Sizes:
    Strings     14
    Constant    330
    Data        18
    BSS         154
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     62      79
    BANK1            80     37      79
    BANK2            80      0      73
    BANK3            80      0      40
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            48      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    LCDWriteString@characters	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _main->_LCDWriteString
    _main->___awtoft
    _tempCalc->___awtoft
    _log->___awtoft
    ___ftge->___awtoft
    ___ftadd->___awtoft
    _readVAnalog->___aldiv
    _readIAnalog->___aldiv
    _readButton->_ADCRead
    _cc_cv_mode->___awtoft
    _calculateCurrent3->___awtoft
    _calculateCurrent0->___awtoft
    ___ftdiv->___awtoft
    _LCDInit->_LCDWrite
    _LCDClear->_gotoXY
    _gotoXY->_LCDWrite
    _Init_Battery_State_Machine->___awtoft
    _LCDWriteString->_LCDWriteCharacter
    _LCDWriteInt->___awtoft
    _LCDWriteCharacter->___wmul
    _Battery_State_Machine->___awtoft
    ___fttol->___awtoft
    ___ftmul->___awtoft
    ___awtoft->___awdiv

Critical Paths under _main in BANK0

    _main->_tempCalc
    _tempCalc->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftge->___ftmul
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftadd->___ftmul
    _readVAnalog->___aldiv
    _readIAnalog->___aldiv
    _cc_cv_mode->___fttol
    _calculateCurrent3->___fttol
    _calculateCurrent0->___fttol
    ___ftdiv->___awtoft
    _SYSTEM_Initialize->_Init_Battery_State_Machine
    _Init_Battery_State_Machine->___fttol
    _LCDWriteInt->___fttol
    _Battery_State_Machine->___fttol
    ___fttol->___ftdiv
    ___fttol->___ftmul
    ___ftmul->___awtoft

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                51    51      0  115359
                                             57 BANK0      5     5      0
                                              0 BANK1     37    37      0
                            _ADCRead
              _Battery_State_Machine
                           _LCDClear
                            _LCDInit
                  _LCDWriteCharacter
                        _LCDWriteInt
                     _LCDWriteString
                 _PWM1_LoadDutyValue
                 _PWM6_LoadDutyValue
                 _PWM7_LoadDutyValue
                  _SYSTEM_Initialize
                            ___awdiv
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                  _calculateCurrent0
                  _calculateCurrent2
                  _calculateCurrent3
                         _cc_cv_mode
                             _gotoXY
                         _readButton
                        _readIAnalog
                        _readVAnalog
                           _tempCalc
 ---------------------------------------------------------------------------------
 (1) _tempCalc                                            11     9      2   37303
                                             46 BANK0     11     9      2
                            _ADCRead (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                            ___fttol
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   19403
                                             40 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     330
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           10     3      7    8325
                                             30 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     428
                                             17 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3356
                                             30 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3183
                                             17 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (1) _readVAnalog                                         21    19      2    1046
                                              9 COMMON     4     4      0
                                              6 BANK0     17    15      2
                            _ADCRead
                            ___aldiv
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     170
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _readIAnalog                                         24    22      2    1766
                                              9 COMMON     4     4      0
                                              6 BANK0     20    18      2
                            _ADCRead
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     512
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _readButton                                           3     3      0      22
                                              4 COMMON     3     3      0
                            _ADCRead
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     1      3      22
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _cc_cv_mode                                           8     8      0    8432
                                             31 BANK0      8     8      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent3                                    3     3      0    7164
                                             31 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent2                                    3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent0                                    3     3      0    7164
                                             31 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3153
                                              1 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    3     3      0   11905
                                             36 BANK0      3     3      0
                     _ADC_Initialize
         _Init_Battery_State_Machine
                           _LCDClear
                            _LCDInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PWM_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              1     1      0     803
                                              5 COMMON     1     1      0
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             3     3      0    3021
                                              8 COMMON     3     3      0
                           _LCDWrite
                             _gotoXY
 ---------------------------------------------------------------------------------
 (1) _gotoXY                                               3     2      1    2172
                                              5 COMMON     3     2      1
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _Init_Battery_State_Machine                           5     5      0    8058
                                             31 BANK0      5     5      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM7_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM6_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM1_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCDWriteString                                       3     1      2    2009
                                             12 COMMON     2     0      2
                                              0 BANK0      1     1      0
                  _LCDWriteCharacter
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         16    11      5    7853
                                             31 BANK0     16    11      5
                  _LCDWriteCharacter
                            ___awdiv
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _LCDWriteCharacter                                    6     6      0    1805
                                              6 COMMON     6     6      0
                           _LCDWrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     890
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _LCDWrite                                             5     4      1     803
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _Battery_State_Machine                                6     6      0    8652
                                             31 BANK0      6     6      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4    1047
                                             17 BANK0     14    10      4
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    3915
                                              1 BANK0     16    10      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2964
                                              9 COMMON     5     2      3
                                              0 BANK0      1     1      0
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1707
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _Battery_State_Machine
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _LCDClear
     _LCDWrite
     _gotoXY
       _LCDWrite
   _LCDInit
     _LCDWrite
   _LCDWriteCharacter
     _LCDWrite
     ___wmul
   _LCDWriteInt
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
     ___awdiv
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     ___lwmod (ARG)
   _LCDWriteString
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
   _PWM1_LoadDutyValue
   _PWM6_LoadDutyValue
   _PWM7_LoadDutyValue
   _SYSTEM_Initialize
     _ADC_Initialize
     _Init_Battery_State_Machine
       ___awtoft
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
     _LCDClear
       _LCDWrite
       _gotoXY
         _LCDWrite
     _LCDInit
       _LCDWrite
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM_Initialize
     _TMR2_Initialize
     _TMR4_Initialize
   ___awdiv
   ___awtoft
     ___awdiv (ARG)
     ___ftpack (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftge
     ___awdiv (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
   ___ftmul
     ___awdiv (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     _frexp (ARG)
   ___fttol
     ___awdiv (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
   _calculateCurrent0
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent2
   _calculateCurrent3
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _cc_cv_mode
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _gotoXY
     _LCDWrite
   _readButton
     _ADCRead
   _readIAnalog
     _ADCRead
     ___aldiv
     ___wmul
   _readVAnalog
     _ADCRead
     ___aldiv
     ___bmul
   _tempCalc
     _ADCRead (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___fttol (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     _log (ARG)
       ___awtoft
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftge
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
       ___ftmul
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul
       _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3E      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     25      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      49       9       91.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      28      11       50.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               30      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     11D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     11D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Sep 13 13:28:04 2018

                       _stateCounter 00B8                                    _j 006B  
                                  _x 006E               LCDWriteInt@fieldLength 0041  
                     ___bmul@product 0072              __size_of_PWM_Initialize 001F  
                        __CFG_CP$OFF 0000                                   l76 00D3  
                       ___awdiv@sign 0076                  ___wmul@multiplicand 0072  
        __size_of_PWM6_LoadDutyValue 0016                         ___ftadd@exp1 003D  
                       ___ftadd@exp2 003C                          __CFG_LVP$ON 0000  
                       ___ftadd@sign 003B                                  l123 0469  
                                l300 0D80                                  l213 1E49  
                                l216 1E50                        LCDClear@index 0079  
                                l295 0D2C                                  l296 0D3D  
                                l385 1F5D                                  l386 1F5F  
                                l626 1EA1                                  l387 1F65  
                                l388 1F75                                  l389 1F69  
                                l681 1478                                  l818 0A4D  
                                l794 13E0                                  l795 13E8  
                                l787 13CD                                  l878 15D9  
                                _GIE 005F                                  _RB2 006A  
                       __CFG_CPD$OFF 0000                         _VsampleIndex 0064  
                                _log 169C                      __end_of_ADCRead 1E57  
                    _TMR2_Initialize 1DEC                         __CFG_BORV$LO 0000  
                                wreg 0009                      __end_of_LCDInit 1195  
                       ?_LCDWriteInt 003F                         __CFG_ZCD$OFF 0000  
                       ___ftdiv@cntr 002B                         ___ftdiv@sign 0030  
                               l3010 1EBC                                 l3022 1FA3  
                               l3102 126A                                 l3024 1FAF  
                               l3032 1FC4                                 l3202 0F48  
                               l3122 1527                                 l3220 0FA1  
                               l3028 1FBB                                 l3300 0D4B  
                               l3116 150D                                 l3060 0CD4  
                               l3206 0F61                                 l2430 1E9B  
                               l3142 1550                                 l3150 156A  
                               l3126 1539                                 l3304 0D58  
                               l3136 1547                                 l3128 153B  
                               l3080 0B96                                 l3400 0188  
                               l2602 1585                                 l3090 1225  
                               l2540 17BC                                 l2524 1779  
                               l2620 15B5                                 l3228 0FF0  
                               l3252 082F                                 l3148 1569  
                               l2508 0A8C                                 l2452 09DD  
                               l3404 01B2                                 l3412 01E7  
                               l2382 13AA                                 l2518 1763  
                               l2630 15DC                                 l2622 15C3  
                               l3182 0E80                                 l3270 086B  
                               l3262 0836                                 l3238 1E2E  
                               l2470 0A06                                 l3510 0461  
                               l3502 043D                                 l2392 13D2  
                               l2384 13B4                                 l2552 17D8  
                               l2536 17B4                                 l3184 0E88  
                               l3280 087D                                 l3272 0873  
                               l3264 0863                                 l3096 1F47  
                               l2480 0A28                                 l2448 09D6  
                               l3504 0441                                 l3440 02A8  
                               l3408 01DD                                 l3360 008A  
                               l3352 0076                                 l2394 13DA  
                               l2386 13B9                                 l2378 13A3  
                               l2634 15EA                                 l3186 0E9A  
                               l3282 08A4                                 l3274 0879  
                               l2490 0A49                                 l2482 0A2C  
                               l2458 09EC                                 l3522 048C  
                               l3434 028E                                 l2572 1F1B  
                               l2548 17D0                                 l2628 15D0  
                               l3268 0867                                 l2900 14A7  
                               l2476 0A19                                 l2580 11E7  
                               l3516 0475                                 l3452 02BD  
                               l3428 0271                                 l3372 00AF  
                               l3198 0F2E                                 l3286 08B2  
                               l2494 0A5F                                 l2478 0A23  
                               l2646 11A7                                 l3518 0478  
                               l3366 0090                                 l2680 1F98  
                               l2912 14D2                                 l2488 0A3F  
                               l2584 11FD                                 l2664 1394  
                               l3464 02F4                                 l2674 1F84  
                               l2498 0A71                                 l2850 16BB  
                               l3538 04BB                                 l3458 02DA  
                               l3386 00DB                                 l3378 00B4  
                               l2916 14E0                                 l2908 14C7  
                               l3484 0341                                 l2934 12AB  
                               l3494 03B8                                 l3478 032A  
                               l2960 12E2                                 l2952 12D1  
                               l2944 12B3                                 l2928 12A0  
                               l2872 1E12                                 l2856 16CE  
                               l3680 07AD                                 l3488 0348  
                               l2946 12BF                                 l2970 160A  
                               l2890 1489                                 l2956 12DA  
                               l2868 1E0C                                 l3676 07A4  
                               l2990 1661                                 l2976 1620  
                               l2898 1499                                 ?_log 0048  
                               l2998 167A                                 STR_1 1154  
                               STR_2 114F                                 STR_3 114A  
                               u3010 1FFE                                 _LATA 0016  
                               _LATB 0017                                 _LATC 0018  
                               u2305 13C8                                 u3105 149C  
                               u2325 13D5                                 u3205 12B6  
                               u3125 14A8                                 u3135 14BC  
                               u3225 12C0                                 u3305 1642  
                               u3145 14C8                                 _T2PR 028D  
                               u2435 1EA2                                 u3235 12CA  
                               u3315 1662                                 u4035 0D9A  
                               u2365 13EF                                 u2285 13AF  
                               u2445 1EA7                                 u3245 12D2  
                               u3405 1FBC                                 u3325 1671  
                               u3335 167B                                 u2615 0A2D  
                               u4065 0DF3                                 u3425 0BD4  
                               u3505 0ACE                                 u4305 02CB  
                               u4225 027F                                 u4145 01A5  
                               _T4PR 0293                                 u2715 1785  
                               u3435 0C2A                                 u3515 0B04  
                               u2555 0A07                                 u4155 01D0  
                               u2725 1795                                 u3605 1F41  
                               u3445 0C64                                 u3525 0B18  
                               u2645 0A40                                 u4325 02E9  
                               u4245 029D                                 u3375 1FA6  
                               u3295 1632                                 u3615 1264  
                               u3455 0CAF                                 u3535 0B32  
                               u4415 0421                                 u2745 17BD  
                               u3625 1E7C                                 u3545 0B46  
                               u2585 0A1A                                 u4425 0436  
                               u4185 025F                                 u2755 17C3  
                               u3395 1FB5                                 u3635 1E92  
                               u3555 0B71                                 u4435 0453  
                               u4355 0323                                 u4275 02BA  
                               u2925 15D1                                 u3645 14FB  
                               u3485 0CDF                                 u4517 007E  
                               u3735 1E66                                 u4527 155B  
                               u3655 1507                                 u3495 0ABA  
                               u4375 033A                                 u2785 17D9  
                               u2865 158C                                 u4537 0028  
                               u3665 1517                                 u3585 0BA1  
                               u2795 17DF                                 u3755 0E5E  
                               u4547 0039                                 u3595 121F  
                               u3675 1523                                 u3765 0E72  
                               u3685 1531                                 u2895 15B6  
                               u2975 1F82                                 u3880 0819  
                               u3945 0892                                 u2985 1F96  
                               u3795 0F01                                 u3975 0D18  
                tempCalc@analogValue 004E                                 _WPUA 0F39  
                               _WPUB 0F44                                 _WPUC 0F4F  
                               _WPUE 0F65                                 _Imin 0155  
                               _Iref 00B0                                 _Iout 00BE  
                       __CFG_WRT$OFF 0000                        __CFG_FCMEN$ON 0000  
                               _Vref 00B4                                 _main 0041  
                       ___ftpack@arg 0070                         ___ftpack@exp 0073  
                               fsr0h 0005                                 fsr1h 0007  
                               fsr0l 0004                                 indf0 0000  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E                                 log@x 0048  
                       ?_readIAnalog 0026                        __CFG_BOREN$ON 0000  
                               ltemp 007E                                 start 0002  
                               ttemp 007E                                 wtemp 007E  
                      __CFG_CSWEN$ON 0000                    ___bmul@multiplier 0073  
                      __CFG_MCLRE$ON 0000                         ___ftmul@cntr 002F  
                       ___ftmul@sign 0030                         ?_readVAnalog 0026  
                   __end_of_LCDClear 1F9D                         ___fttol@exp1 003E  
                              ??_log 004B                         ___fttol@lval 003A  
                       main@fastLoop 00CF  __size_of_Init_Battery_State_Machine 0068  
     __size_of_OSCILLATOR_Initialize 0009                     __end_of_LCDWrite 1F77  
      __end_of_OSCILLATOR_Initialize 1DD4                      __end_of___aldiv 14E9  
                              _ADACQ 009D                                _ADCAP 009B  
                              _ADACT 0099                                ?_main 0070  
                              _ADCLK 0098                                _ADPCH 009E  
                              _ADREF 009A                      __end_of___awdiv 12E7  
                              _ADPRE 009C                      __end_of___ftadd 0AA4  
                      __CFG_WDTE$OFF 0000                                _ADRPT 010D  
                    __end_of___ftdiv 169C                      __end_of___ftmul 1800  
                    ___awdiv@divisor 0070                      __end_of___ftsub 1ED2  
                    __end_of___fttol 15F3                                _T2CON 028E  
                              _LATA5 00B5                                _T4CON 0294  
                              _T2HLT 028F                                _T4HLT 0295  
                              _T2TMR 028C                                _T2RST 0291  
                    __end_of___lwmod 1FC9                                _T4TMR 0292  
                              _T4RST 0297                      ___awdiv@counter 0075  
                              _OSCEN 0891                                _TRISA 0011  
                              _TRISB 0012                                _TRISC 0013  
                    _TMR4_Initialize 0800                                _Imode 00BC  
             ?_Battery_State_Machine 0070                                _cc_cv 00C4  
                      ___awtoft@sign 0020                                _frexp 1195  
                              _fonts 1000                                _errno 00C6  
                      ___ftpack@sign 0074                                main@j 00EC  
                              ltemp0 007E                                ltemp1 0082  
                              ltemp2 0086                                ltemp3 0080  
                       main@slowLoop 00D9                                ttemp0 007E  
                              ttemp1 0081                                ttemp2 0084  
                              ttemp3 0087                                ttemp4 007F  
                              status 0003                                wtemp0 007E  
                              wtemp1 0080                                wtemp2 0082  
                              wtemp3 0084                                wtemp4 0086  
                              wtemp5 0088                                wtemp6 007F  
                    __initialization 07B0                          log@exponent 004C  
                       __end_of_main 07B0              __end_of_TMR2_Initialize 1DFA  
                          ??_ADCRead 0073                               ??_main 0059  
                      ___fttol@sign1 0039                            ??_LCDInit 0075  
             Battery_State_Machine@z 0044              LCDWrite@data_or_command 0072  
                             _ADCON0 0093                               _ADCON1 0094  
                             _ADCON2 0095                               _ADCON3 0096  
                             ?_frexp 0070                               _ADLTHH 010F  
                             _ADLTHL 010E                               _ADRESH 008D  
                             _ADRESL 008C                               _CCPR1H 030D  
                             _CCPR1L 030C                               _ADSTAT 0097  
                             _ADUTHH 0111                     ___awdiv@dividend 0072  
                             _ADUTHL 0110                     __end_of___awtoft 1F31  
                             _ANSELA 0F38                               _ANSELB 0F43  
                             _ANSELC 0F4E                     __end_of___ftpack 13FF  
                             _RB0PPS 0F18                               _RA6PPS 0F16  
                             _RA7PPS 0F17                       __CFG_WDTCCS$SC 0000  
                             _FVRCON 090C                               _OSCFRQ 0893  
                     __CFG_PWRTE$OFF 0000                       _LCDWriteString 1E2E  
                       _CCPTMRS0bits 021E                         _CCPTMRS1bits 021F  
                             ___bmul 1E0A                               ___ftge 11D0  
                          ??___aldiv 0078                               ___wmul 1E99  
                          ??___awdiv 0074                            ??___ftadd 0037  
                     __CFG_STVREN$ON 0000                       _PWM_Initialize 1EF1  
                          ??___ftdiv 0027                            ??___ftmul 0027  
                          ??___ftsub 007E                            ??___fttol 0035  
                          ??___lwmod 0074                               _gotoXY 1E1B  
                             _button 006A              __end_of_TMR4_Initialize 080E  
                   ___awdiv@quotient 0077            readVAnalog@analog_channel 0079  
              ___ftmul@f3_as_product 002C                     __end_of_tempCalc 09AE  
                       LCDWrite@data 0070                         LCDWriteInt@i 004E  
                       LCDWriteInt@j 004D                            ?_LCDClear 0070  
                  _SYSTEM_Initialize 0004                 __size_of_LCDWriteInt 00B9  
                   __end_oflog@coeff 114A              __end_of__initialization 07FD  
                         ___ftadd@f1 0031                           ___ftadd@f2 0034  
                         ___ftge@ff1 0031                           ___ftge@ff2 0034  
                          ?_LCDWrite 0070                   ?_SYSTEM_Initialize 0070  
             __end_of_LCDWriteString 1E42                         eval_poly@res 0045  
                         ___ftdiv@f1 0024                           ___ftdiv@f2 0021  
                         ___ftdiv@f3 002C                           ___awtoft@c 0079  
                ___bmul@multiplicand 0070                           ___ftmul@f1 0021  
                         ___ftmul@f2 0024               __end_of_PWM_Initialize 1F10  
               __size_of_readIAnalog 013E                           ___ftsub@f1 0041  
                         ___ftsub@f2 003E                           ___fttol@f1 0031  
                     __pcstackCOMMON 0070                         __pidataBANK1 1158  
                       __pidataBANK2 1DFA                  ??_SYSTEM_Initialize 0044  
                      __end_of_frexp 11D0                        __end_of_fonts 112F  
                          LCDWrite@d 0073                            LCDWrite@i 0074  
               __size_of_readVAnalog 011A                   _PWM1_LoadDutyValue 1E57  
                   ?_TMR2_Initialize 0070                           _cc_cv_mode 0CFC  
        __size_of_PWM7_LoadDutyValue 0016                       main@efficiency 00C8  
                ?_PWM1_LoadDutyValue 0070                    LCDWriteInt@F13692 0150  
                  _calculateCurrent0 120C                    _calculateCurrent2 1F31  
                  _calculateCurrent3 1251                              ??_frexp 0074  
          __end_of_SYSTEM_Initialize 0041                           __pbssBANK0 005E  
                         __pbssBANK1 00A0                           __pbssBANK2 0120  
                         __pbssBANK3 01A0                   ?_calculateCurrent0 0070  
                 ?_calculateCurrent2 0070                   ?_calculateCurrent3 0070  
                       _batteryState 00C2                   __size_of_eval_poly 0060  
                         ??_LCDClear 0078                       main@faultCount 00CB  
                         ??_LCDWrite 0071                      ?_LCDWriteString 007C  
               ??_PWM1_LoadDutyValue 0072                  ??_calculateCurrent0 003F  
                ??_calculateCurrent2 0070                  ??_calculateCurrent3 003F  
                    ?_PWM_Initialize 0070                           __pmaintext 0041  
                            ?___bmul 0070                              ?___ftge 0031  
                            ?___wmul 0070                      __CFG_PPS1WAY$ON 0000  
         __end_of_PWM6_LoadDutyValue 1E83                              ?_gotoXY 0075  
                            _ADCRead 1E42                     ?_TMR4_Initialize 0070  
                          ?___awtoft 0079                            ?___ftpack 0070  
                            _ADSTPTH 0113                              _ADSTPTL 0112  
           __CFG_SCANE$not_available 0000                  __CFG_RSTOSC$HFINT32 0000  
            __size_of_ADC_Initialize 001F              ??_Battery_State_Machine 003F  
                     main@largerIOut 00DE                              _LCDInit 115A  
          __end_of_calculateCurrent0 1251            __end_of_calculateCurrent2 1F52  
          __end_of_calculateCurrent3 1296                              _OSCCON1 088D  
                            _OSCCON3 088F                              _OSCTUNE 0892  
                            _PWM6DCH 038D                              _PWM6DCL 038C  
                            _PWM7DCH 0391                              _PWM7DCL 0390  
                            _PWM6CON 038E                              _PWM7CON 0392  
                            _PPSLOCK 0E8F                           _floatCount 0066  
                     main@menuButton 00E0                       main@dutyCycle1 00E1  
                     main@dutyCycle6 00E8                       main@dutyCycle7 00EA  
                  main@tempFanOutput 00E3                           _lastButton 006C  
                          ?_tempCalc 004E                              _Itotals 0120  
                            ___aldiv 1467                      __size_of___bmul 0011  
                    __size_of___ftge 003C                              ___awdiv 1296  
                            ___ftadd 09AE                           _readButton 14E9  
                            ___ftdiv 15F3                      __size_of___wmul 001B  
                            ___ftmul 174C                              ___ftsub 1EB4  
                            ___fttol 156C                   main@displayRefresh 00D8  
                            ___lwmod 1F9D                              _Vtotals 0130  
                    __size_of_gotoXY 0013                           ??___awtoft 007C  
                         ??___ftpack 0075                    __end_of_eval_poly 139B  
                            __ptext1 08C7                              __ptext2 169C  
                            __ptext3 1195                              __ptext4 133B  
                            __ptext5 11D0                              __ptext6 1EB4  
                            __ptext7 09AE                              __ptext8 0AA4  
                            __ptext9 1E0A                          ?_cc_cv_mode 0070  
              _OSCILLATOR_Initialize 1DCB                            _T2CONbits 028E  
                            _current 00A0                         __size_of_log 00B0  
                     ADCRead@channel 0073                     ___aldiv@dividend 0074  
                          _T4CONbits 0294             ??_PIN_MANAGER_Initialize 0070  
         __size_of_SYSTEM_Initialize 003D                              clrloop0 1DD5  
                            _voltage 00A8         ??_Init_Battery_State_Machine 003F  
               end_of_initialization 07FD                LCDWriteCharacter@base 007A  
                            gotoXY@x 0077                              gotoXY@y 0075  
                            init_ram 1DE0                              initloop 1DE1  
                         ??_tempCalc 007E                     ___aldiv@quotient 0022  
                       __pstringtext 1000                           _otherState 006D  
                  _LCDWriteCharacter 12E7                __CFG_WDTCPS$WDTCPS_31 0000  
                 ?_LCDWriteCharacter 0070                   readVAnalog@channel 0026  
         __size_of_calculateCurrent0 0045           __size_of_calculateCurrent2 0021  
         __size_of_calculateCurrent3 0045                            _TRISAbits 0011  
                ??_LCDWriteCharacter 0076                     __CFG_FEXTOSC$OFF 0000  
       PWM1_LoadDutyValue@dutyCycle1 0070                          _CCP1CONbits 030E  
                        ___ftdiv@exp 002F                  __size_of_cc_cv_mode 0147  
                  __size_of_LCDClear 0026           LCDWriteCharacter@character 0079  
                  __size_of_LCDWrite 0025                          ___ftmul@exp 002B  
          __end_of_LCDWriteCharacter 133B                          ?_readButton 0070  
                          _Ichannels 0159            readIAnalog@analog_channel 0079  
                     __end_of___bmul 1E1B                       __end_of___ftge 120C  
                          _VHoldMode 00C0                       __end_of___wmul 1EB4  
                     _ADC_Initialize 1ED2                       __end_of_gotoXY 1E2E  
             ?_OSCILLATOR_Initialize 0070                            _IminCount 005E  
                start_initialization 07B0                           eval_poly@d 0041  
                         eval_poly@n 0043                           eval_poly@x 003E  
                  main@faultNotReset 00CD      __size_of_PIN_MANAGER_Initialize 0037  
                        __end_of_log 174C                        ??_LCDWriteInt 0044  
                   ??_LCDWriteString 0020                           frexp@value 0070  
                       _IsampleIndex 0062                     ??_PWM_Initialize 0070  
                      ??_readIAnalog 0028                            _Vchannels 0161  
                   __CFG_LPBOREN$OFF 0000                        ??_readVAnalog 0028  
                           ??___bmul 0071                             ??___ftge 0037  
                  tempCalc@steinhart 0056                             ??___wmul 0074  
             __end_of_ADC_Initialize 1EF1                        _tempCalc$1305 0053  
                        __pdataBANK1 00ED                          __pdataBANK2 0159  
         __end_of_PWM7_LoadDutyValue 1E99                             ??_gotoXY 0076  
                           ?_ADCRead 0070         PWM7_LoadDutyValue@dutyCycle7 0070  
                  __size_of___awtoft 0021                             ?_LCDInit 0070  
                  __size_of___ftpack 0064                          __pbssBIGRAM 2260  
                   readVAnalog@value 007B       __size_of_Battery_State_Machine 01BD  
      __end_of_Battery_State_Machine 1000                            ___latbits 0002  
                      __pcstackBANK0 0020                        __pcstackBANK1 00C8  
                 _PWM6_LoadDutyValue 1E6D             __size_of_TMR2_Initialize 000E  
 __end_of_Init_Battery_State_Machine 1467           _Init_Battery_State_Machine 13FF  
                __size_of_readButton 0083                  ?_PWM6_LoadDutyValue 0070  
                __end_of_LCDWriteInt 08C7                          _batteryTemp 00ED  
        __size_of_PWM1_LoadDutyValue 0016                            _main$1304 00E5  
             _PIN_MANAGER_Initialize 1FC9           __size_of_LCDWriteCharacter 0054  
                           ?___aldiv 0070                  __end_of_readIAnalog 0CFC  
                  __size_of_tempCalc 00E7                             ?___awdiv 0070  
                           ?___ftadd 0031                             ?___ftdiv 0021  
                           ?___ftmul 0021                             ?___ftsub 003E  
                           ?___fttol 0031                     LCDWriteInt@value 003F  
                           ?___lwmod 0070                      ?_ADC_Initialize 0070  
               ??_PWM6_LoadDutyValue 0072                         ??_cc_cv_mode 003F  
                __end_of_readVAnalog 0BBE                            _eval_poly 133B  
           __size_of_TMR4_Initialize 000E                       __size_of_frexp 003B  
                           _T2CLKCON 0290                             _T4CLKCON 0296  
                        cc_cv_mode@z 0046                             _LCDClear 1F77  
                    ___aldiv@divisor 0070                      ___aldiv@counter 0020  
                     ___wmul@product 0074                             _LATAbits 0016  
                           _LCDWrite 1F52                            clear_ram0 1DD4  
                           _PIE0bits 0716                   __end_of_cc_cv_mode 0E43  
                           _PIR4bits 0710                     readIAnalog@value 007B  
                          main@MPPT0 00DA                            main@MPPT1 00DC  
                   __size_of_ADCRead 0015                           _ADCON0bits 0093  
                  ___wmul@multiplier 0070                           ?_eval_poly 003E  
                   __size_of_LCDInit 003B                             _Ianalogs 0140  
                        _LCDWriteInt 080E          Init_Battery_State_Machine@z 0043  
                  ??_TMR2_Initialize 0070                             _Isamples 2260  
                        _readIAnalog 0BBE                            frexp@eptr 0073  
                           _Vanalogs 0148                          _readVAnalog 0AA4  
                       ??_readButton 0074              ??_OSCILLATOR_Initialize 0070  
               LCDWriteInt@numPlaces 0042                     __size_of___aldiv 0082  
                   __size_of___awdiv 0051                     __size_of___ftadd 00F6  
                   __size_of___ftdiv 00A9                     __size_of___ftmul 00B4  
                   __size_of___ftsub 001E                     __size_of___fttol 0087  
                           _Vsamples 01A0                     __size_of___lwmod 002C  
                        _readButtons 0068                             ___awtoft 1F10  
                           ___ftpack 139B                             __ptext10 0BBE  
                           __ptext11 1467                             __ptext20 0800  
                           __ptext12 14E9                             __ptext21 1DEC  
                           __ptext13 1E42                             __ptext30 1E83  
                           __ptext22 1EF1                             __ptext14 0CFC  
                           __ptext31 1E6D                             __ptext23 1FC9  
                           __ptext15 1251                             __ptext40 0E43  
                           __ptext32 1E57                             __ptext24 1DCB  
                           __ptext16 1F31                             __ptext41 156C  
                           __ptext33 1E2E                             __ptext25 115A  
                           __ptext17 120C                             __ptext42 174C  
                           __ptext34 080E                             __ptext26 1F77  
                           __ptext18 15F3                             __ptext43 1F10  
                           __ptext35 1F9D                             __ptext27 1E1B  
                           __ptext19 0004                             __ptext44 139B  
                           __ptext36 1296                             __ptext28 13FF  
                           __ptext37 12E7                             __ptext29 1ED2  
                           __ptext38 1E99                             __ptext39 1F52  
                    LCDWriteInt@sign 0043                            tempCalc@R 0050  
                 __end_of_readButton 156C                    ??_TMR4_Initialize 0070  
                      __size_of_main 076F                 __CFG_WDTCWS$WDTCWS_7 0000  
                           _tempCalc 08C7                      main@tempVoltage 00D0  
        PIN_MANAGER_Initialize@state 0070                             log@coeff 112F  
                        ??_eval_poly 007E                   _PWM7_LoadDutyValue 1E83  
        ?_Init_Battery_State_Machine 0070                     ___lwmod@dividend 0072  
                     LCDWriteInt@str 0048              ?_PIN_MANAGER_Initialize 0070  
                ?_PWM7_LoadDutyValue 0070                    __CFG_CLKOUTEN$OFF 0000  
                        _PPSLOCKbits 0E8F                     ??_ADC_Initialize 0070  
       PWM6_LoadDutyValue@dutyCycle6 0070                 ??_PWM7_LoadDutyValue 0072  
                    ___lwmod@divisor 0070                      ___lwmod@counter 0075  
           LCDWriteString@characters 007C                         ___aldiv@sign 0021  
                 readIAnalog@channel 0026                _Battery_State_Machine 0E43  
     __end_of_PIN_MANAGER_Initialize 2000           __end_of_PWM1_LoadDutyValue 1E6D  
            __size_of_LCDWriteString 0014  
