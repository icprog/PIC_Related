

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Fri Sep 14 12:20:34 2018

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	dabs	1,0x620,48
    64                           	dabs	1,0x5A0,80
    65                           	dabs	1,0x520,80
    66                           	dabs	1,0x4A0,80
    67                           	dabs	1,0x420,80
    68                           	dabs	1,0x3D0,32
    69                           	dabs	1,0x2260,0,_Isamples
    70                           	dabs	1,0x7E,2
    71  0000                     	;# 
    72  0001                     	;# 
    73  0002                     	;# 
    74  0003                     	;# 
    75  0004                     	;# 
    76  0005                     	;# 
    77  0006                     	;# 
    78  0007                     	;# 
    79  0008                     	;# 
    80  0009                     	;# 
    81  000A                     	;# 
    82  000B                     	;# 
    83  000C                     	;# 
    84  000D                     	;# 
    85  000E                     	;# 
    86  0010                     	;# 
    87  0011                     	;# 
    88  0012                     	;# 
    89  0013                     	;# 
    90  0016                     	;# 
    91  0017                     	;# 
    92  0018                     	;# 
    93  001C                     	;# 
    94  001C                     	;# 
    95  001D                     	;# 
    96  001D                     	;# 
    97  001E                     	;# 
    98  001F                     	;# 
    99  008C                     	;# 
   100  008C                     	;# 
   101  008D                     	;# 
   102  008E                     	;# 
   103  008E                     	;# 
   104  008F                     	;# 
   105  0090                     	;# 
   106  0090                     	;# 
   107  0091                     	;# 
   108  0093                     	;# 
   109  0094                     	;# 
   110  0095                     	;# 
   111  0096                     	;# 
   112  0097                     	;# 
   113  0098                     	;# 
   114  0099                     	;# 
   115  009A                     	;# 
   116  009B                     	;# 
   117  009C                     	;# 
   118  009D                     	;# 
   119  009E                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010E                     	;# 
   124  010F                     	;# 
   125  0110                     	;# 
   126  0110                     	;# 
   127  0111                     	;# 
   128  0112                     	;# 
   129  0112                     	;# 
   130  0113                     	;# 
   131  0114                     	;# 
   132  0114                     	;# 
   133  0115                     	;# 
   134  0116                     	;# 
   135  0116                     	;# 
   136  0117                     	;# 
   137  0119                     	;# 
   138  0119                     	;# 
   139  0119                     	;# 
   140  011A                     	;# 
   141  011A                     	;# 
   142  011A                     	;# 
   143  011B                     	;# 
   144  011B                     	;# 
   145  011B                     	;# 
   146  011B                     	;# 
   147  011B                     	;# 
   148  011C                     	;# 
   149  011C                     	;# 
   150  011C                     	;# 
   151  011D                     	;# 
   152  011D                     	;# 
   153  011D                     	;# 
   154  011E                     	;# 
   155  011E                     	;# 
   156  011E                     	;# 
   157  011F                     	;# 
   158  011F                     	;# 
   159  011F                     	;# 
   160  011F                     	;# 
   161  011F                     	;# 
   162  018C                     	;# 
   163  018D                     	;# 
   164  018E                     	;# 
   165  018F                     	;# 
   166  0190                     	;# 
   167  0191                     	;# 
   168  0192                     	;# 
   169  0196                     	;# 
   170  0197                     	;# 
   171  0198                     	;# 
   172  0199                     	;# 
   173  019A                     	;# 
   174  019B                     	;# 
   175  019C                     	;# 
   176  020C                     	;# 
   177  020D                     	;# 
   178  020E                     	;# 
   179  020F                     	;# 
   180  020F                     	;# 
   181  0210                     	;# 
   182  0210                     	;# 
   183  0211                     	;# 
   184  0211                     	;# 
   185  0212                     	;# 
   186  0213                     	;# 
   187  0214                     	;# 
   188  0215                     	;# 
   189  0215                     	;# 
   190  0216                     	;# 
   191  0216                     	;# 
   192  0217                     	;# 
   193  0217                     	;# 
   194  0218                     	;# 
   195  0219                     	;# 
   196  021A                     	;# 
   197  021B                     	;# 
   198  021B                     	;# 
   199  021C                     	;# 
   200  021C                     	;# 
   201  021D                     	;# 
   202  021D                     	;# 
   203  021E                     	;# 
   204  021F                     	;# 
   205  028C                     	;# 
   206  028C                     	;# 
   207  028D                     	;# 
   208  028D                     	;# 
   209  028E                     	;# 
   210  028F                     	;# 
   211  0290                     	;# 
   212  0290                     	;# 
   213  0291                     	;# 
   214  0292                     	;# 
   215  0292                     	;# 
   216  0293                     	;# 
   217  0293                     	;# 
   218  0294                     	;# 
   219  0295                     	;# 
   220  0296                     	;# 
   221  0296                     	;# 
   222  0297                     	;# 
   223  0298                     	;# 
   224  0298                     	;# 
   225  0299                     	;# 
   226  0299                     	;# 
   227  029A                     	;# 
   228  029B                     	;# 
   229  029C                     	;# 
   230  029C                     	;# 
   231  029D                     	;# 
   232  030C                     	;# 
   233  030C                     	;# 
   234  030D                     	;# 
   235  030E                     	;# 
   236  030F                     	;# 
   237  0310                     	;# 
   238  0310                     	;# 
   239  0311                     	;# 
   240  0312                     	;# 
   241  0313                     	;# 
   242  0314                     	;# 
   243  0314                     	;# 
   244  0315                     	;# 
   245  0316                     	;# 
   246  0317                     	;# 
   247  0318                     	;# 
   248  0318                     	;# 
   249  0319                     	;# 
   250  031A                     	;# 
   251  031B                     	;# 
   252  031C                     	;# 
   253  031C                     	;# 
   254  031D                     	;# 
   255  031E                     	;# 
   256  031F                     	;# 
   257  038C                     	;# 
   258  038D                     	;# 
   259  038E                     	;# 
   260  0390                     	;# 
   261  0391                     	;# 
   262  0392                     	;# 
   263  040C                     	;# 
   264  040D                     	;# 
   265  040E                     	;# 
   266  040F                     	;# 
   267  0410                     	;# 
   268  0411                     	;# 
   269  0416                     	;# 
   270  0416                     	;# 
   271  0417                     	;# 
   272  0418                     	;# 
   273  0418                     	;# 
   274  0419                     	;# 
   275  041A                     	;# 
   276  041A                     	;# 
   277  041B                     	;# 
   278  041C                     	;# 
   279  041C                     	;# 
   280  041D                     	;# 
   281  041E                     	;# 
   282  041F                     	;# 
   283  048C                     	;# 
   284  048C                     	;# 
   285  048D                     	;# 
   286  048E                     	;# 
   287  048F                     	;# 
   288  048F                     	;# 
   289  0490                     	;# 
   290  0491                     	;# 
   291  0492                     	;# 
   292  0492                     	;# 
   293  0493                     	;# 
   294  0494                     	;# 
   295  0495                     	;# 
   296  0495                     	;# 
   297  0496                     	;# 
   298  0497                     	;# 
   299  0498                     	;# 
   300  0499                     	;# 
   301  049A                     	;# 
   302  049B                     	;# 
   303  049C                     	;# 
   304  049D                     	;# 
   305  050C                     	;# 
   306  050C                     	;# 
   307  050D                     	;# 
   308  050E                     	;# 
   309  050F                     	;# 
   310  050F                     	;# 
   311  0510                     	;# 
   312  0511                     	;# 
   313  0512                     	;# 
   314  0512                     	;# 
   315  0513                     	;# 
   316  0514                     	;# 
   317  0515                     	;# 
   318  0515                     	;# 
   319  0516                     	;# 
   320  0517                     	;# 
   321  0518                     	;# 
   322  0519                     	;# 
   323  051A                     	;# 
   324  051B                     	;# 
   325  051C                     	;# 
   326  051D                     	;# 
   327  058C                     	;# 
   328  058C                     	;# 
   329  058D                     	;# 
   330  058E                     	;# 
   331  058F                     	;# 
   332  058F                     	;# 
   333  0590                     	;# 
   334  0591                     	;# 
   335  0592                     	;# 
   336  0593                     	;# 
   337  060C                     	;# 
   338  060D                     	;# 
   339  060E                     	;# 
   340  060F                     	;# 
   341  0610                     	;# 
   342  0611                     	;# 
   343  0612                     	;# 
   344  0613                     	;# 
   345  0614                     	;# 
   346  0616                     	;# 
   347  0617                     	;# 
   348  0618                     	;# 
   349  0619                     	;# 
   350  061A                     	;# 
   351  061B                     	;# 
   352  061C                     	;# 
   353  061D                     	;# 
   354  061E                     	;# 
   355  068C                     	;# 
   356  068D                     	;# 
   357  068E                     	;# 
   358  068F                     	;# 
   359  0690                     	;# 
   360  0691                     	;# 
   361  0692                     	;# 
   362  0693                     	;# 
   363  0694                     	;# 
   364  070C                     	;# 
   365  070D                     	;# 
   366  070E                     	;# 
   367  070F                     	;# 
   368  0710                     	;# 
   369  0711                     	;# 
   370  0712                     	;# 
   371  0713                     	;# 
   372  0714                     	;# 
   373  0716                     	;# 
   374  0717                     	;# 
   375  0718                     	;# 
   376  0719                     	;# 
   377  071A                     	;# 
   378  071B                     	;# 
   379  071C                     	;# 
   380  071D                     	;# 
   381  071E                     	;# 
   382  0796                     	;# 
   383  0797                     	;# 
   384  0798                     	;# 
   385  0799                     	;# 
   386  079A                     	;# 
   387  079B                     	;# 
   388  080C                     	;# 
   389  080D                     	;# 
   390  080E                     	;# 
   391  080F                     	;# 
   392  0810                     	;# 
   393  0811                     	;# 
   394  0812                     	;# 
   395  0813                     	;# 
   396  0814                     	;# 
   397  081A                     	;# 
   398  081B                     	;# 
   399  081C                     	;# 
   400  081D                     	;# 
   401  081E                     	;# 
   402  081F                     	;# 
   403  088C                     	;# 
   404  088D                     	;# 
   405  088E                     	;# 
   406  088F                     	;# 
   407  0890                     	;# 
   408  0891                     	;# 
   409  0892                     	;# 
   410  0893                     	;# 
   411  0895                     	;# 
   412  0896                     	;# 
   413  0897                     	;# 
   414  0898                     	;# 
   415  0899                     	;# 
   416  089A                     	;# 
   417  089B                     	;# 
   418  090C                     	;# 
   419  090E                     	;# 
   420  090F                     	;# 
   421  091F                     	;# 
   422  091F                     	;# 
   423  098F                     	;# 
   424  098F                     	;# 
   425  0990                     	;# 
   426  0991                     	;# 
   427  0992                     	;# 
   428  0993                     	;# 
   429  0994                     	;# 
   430  0995                     	;# 
   431  0996                     	;# 
   432  0997                     	;# 
   433  0E0F                     	;# 
   434  0E10                     	;# 
   435  0E11                     	;# 
   436  0E12                     	;# 
   437  0E13                     	;# 
   438  0E14                     	;# 
   439  0E15                     	;# 
   440  0E16                     	;# 
   441  0E17                     	;# 
   442  0E18                     	;# 
   443  0E19                     	;# 
   444  0E1A                     	;# 
   445  0E1B                     	;# 
   446  0E1C                     	;# 
   447  0E1D                     	;# 
   448  0E1E                     	;# 
   449  0E1F                     	;# 
   450  0E20                     	;# 
   451  0E21                     	;# 
   452  0E22                     	;# 
   453  0E23                     	;# 
   454  0E24                     	;# 
   455  0E25                     	;# 
   456  0E26                     	;# 
   457  0E27                     	;# 
   458  0E28                     	;# 
   459  0E29                     	;# 
   460  0E2A                     	;# 
   461  0E2B                     	;# 
   462  0E2C                     	;# 
   463  0E2D                     	;# 
   464  0E2E                     	;# 
   465  0E2F                     	;# 
   466  0E30                     	;# 
   467  0E31                     	;# 
   468  0E32                     	;# 
   469  0E33                     	;# 
   470  0E34                     	;# 
   471  0E35                     	;# 
   472  0E36                     	;# 
   473  0E37                     	;# 
   474  0E8F                     	;# 
   475  0E90                     	;# 
   476  0E91                     	;# 
   477  0E92                     	;# 
   478  0E93                     	;# 
   479  0E94                     	;# 
   480  0E95                     	;# 
   481  0E96                     	;# 
   482  0E97                     	;# 
   483  0E9C                     	;# 
   484  0E9D                     	;# 
   485  0E9E                     	;# 
   486  0EA1                     	;# 
   487  0EA2                     	;# 
   488  0EA3                     	;# 
   489  0EA4                     	;# 
   490  0EA5                     	;# 
   491  0EA9                     	;# 
   492  0EAA                     	;# 
   493  0EAB                     	;# 
   494  0EAC                     	;# 
   495  0EB1                     	;# 
   496  0EB2                     	;# 
   497  0EB3                     	;# 
   498  0EB8                     	;# 
   499  0EB9                     	;# 
   500  0EBA                     	;# 
   501  0EBB                     	;# 
   502  0EBC                     	;# 
   503  0EBD                     	;# 
   504  0EBE                     	;# 
   505  0EC3                     	;# 
   506  0EC5                     	;# 
   507  0EC6                     	;# 
   508  0EC7                     	;# 
   509  0EC8                     	;# 
   510  0EC9                     	;# 
   511  0ECA                     	;# 
   512  0ECB                     	;# 
   513  0ECC                     	;# 
   514  0F10                     	;# 
   515  0F11                     	;# 
   516  0F12                     	;# 
   517  0F13                     	;# 
   518  0F14                     	;# 
   519  0F15                     	;# 
   520  0F16                     	;# 
   521  0F17                     	;# 
   522  0F18                     	;# 
   523  0F19                     	;# 
   524  0F1A                     	;# 
   525  0F1B                     	;# 
   526  0F1C                     	;# 
   527  0F1D                     	;# 
   528  0F1E                     	;# 
   529  0F1F                     	;# 
   530  0F20                     	;# 
   531  0F21                     	;# 
   532  0F22                     	;# 
   533  0F23                     	;# 
   534  0F24                     	;# 
   535  0F25                     	;# 
   536  0F26                     	;# 
   537  0F27                     	;# 
   538  0F38                     	;# 
   539  0F39                     	;# 
   540  0F3A                     	;# 
   541  0F3B                     	;# 
   542  0F3C                     	;# 
   543  0F3D                     	;# 
   544  0F3E                     	;# 
   545  0F3F                     	;# 
   546  0F40                     	;# 
   547  0F41                     	;# 
   548  0F43                     	;# 
   549  0F44                     	;# 
   550  0F45                     	;# 
   551  0F46                     	;# 
   552  0F47                     	;# 
   553  0F48                     	;# 
   554  0F49                     	;# 
   555  0F4A                     	;# 
   556  0F4B                     	;# 
   557  0F4C                     	;# 
   558  0F4E                     	;# 
   559  0F4F                     	;# 
   560  0F50                     	;# 
   561  0F51                     	;# 
   562  0F52                     	;# 
   563  0F53                     	;# 
   564  0F54                     	;# 
   565  0F55                     	;# 
   566  0F56                     	;# 
   567  0F57                     	;# 
   568  0F65                     	;# 
   569  0F68                     	;# 
   570  0F69                     	;# 
   571  0F6A                     	;# 
   572  0F6B                     	;# 
   573  0FE4                     	;# 
   574  0FE5                     	;# 
   575  0FE6                     	;# 
   576  0FE7                     	;# 
   577  0FE8                     	;# 
   578  0FE9                     	;# 
   579  0FEA                     	;# 
   580  0FEB                     	;# 
   581  0FED                     	;# 
   582  0FEE                     	;# 
   583  0FEF                     	;# 
   584  0000                     	;# 
   585  0001                     	;# 
   586  0002                     	;# 
   587  0003                     	;# 
   588  0004                     	;# 
   589  0005                     	;# 
   590  0006                     	;# 
   591  0007                     	;# 
   592  0008                     	;# 
   593  0009                     	;# 
   594  000A                     	;# 
   595  000B                     	;# 
   596  000C                     	;# 
   597  000D                     	;# 
   598  000E                     	;# 
   599  0010                     	;# 
   600  0011                     	;# 
   601  0012                     	;# 
   602  0013                     	;# 
   603  0016                     	;# 
   604  0017                     	;# 
   605  0018                     	;# 
   606  001C                     	;# 
   607  001C                     	;# 
   608  001D                     	;# 
   609  001D                     	;# 
   610  001E                     	;# 
   611  001F                     	;# 
   612  008C                     	;# 
   613  008C                     	;# 
   614  008D                     	;# 
   615  008E                     	;# 
   616  008E                     	;# 
   617  008F                     	;# 
   618  0090                     	;# 
   619  0090                     	;# 
   620  0091                     	;# 
   621  0093                     	;# 
   622  0094                     	;# 
   623  0095                     	;# 
   624  0096                     	;# 
   625  0097                     	;# 
   626  0098                     	;# 
   627  0099                     	;# 
   628  009A                     	;# 
   629  009B                     	;# 
   630  009C                     	;# 
   631  009D                     	;# 
   632  009E                     	;# 
   633  010C                     	;# 
   634  010D                     	;# 
   635  010E                     	;# 
   636  010E                     	;# 
   637  010F                     	;# 
   638  0110                     	;# 
   639  0110                     	;# 
   640  0111                     	;# 
   641  0112                     	;# 
   642  0112                     	;# 
   643  0113                     	;# 
   644  0114                     	;# 
   645  0114                     	;# 
   646  0115                     	;# 
   647  0116                     	;# 
   648  0116                     	;# 
   649  0117                     	;# 
   650  0119                     	;# 
   651  0119                     	;# 
   652  0119                     	;# 
   653  011A                     	;# 
   654  011A                     	;# 
   655  011A                     	;# 
   656  011B                     	;# 
   657  011B                     	;# 
   658  011B                     	;# 
   659  011B                     	;# 
   660  011B                     	;# 
   661  011C                     	;# 
   662  011C                     	;# 
   663  011C                     	;# 
   664  011D                     	;# 
   665  011D                     	;# 
   666  011D                     	;# 
   667  011E                     	;# 
   668  011E                     	;# 
   669  011E                     	;# 
   670  011F                     	;# 
   671  011F                     	;# 
   672  011F                     	;# 
   673  011F                     	;# 
   674  011F                     	;# 
   675  018C                     	;# 
   676  018D                     	;# 
   677  018E                     	;# 
   678  018F                     	;# 
   679  0190                     	;# 
   680  0191                     	;# 
   681  0192                     	;# 
   682  0196                     	;# 
   683  0197                     	;# 
   684  0198                     	;# 
   685  0199                     	;# 
   686  019A                     	;# 
   687  019B                     	;# 
   688  019C                     	;# 
   689  020C                     	;# 
   690  020D                     	;# 
   691  020E                     	;# 
   692  020F                     	;# 
   693  020F                     	;# 
   694  0210                     	;# 
   695  0210                     	;# 
   696  0211                     	;# 
   697  0211                     	;# 
   698  0212                     	;# 
   699  0213                     	;# 
   700  0214                     	;# 
   701  0215                     	;# 
   702  0215                     	;# 
   703  0216                     	;# 
   704  0216                     	;# 
   705  0217                     	;# 
   706  0217                     	;# 
   707  0218                     	;# 
   708  0219                     	;# 
   709  021A                     	;# 
   710  021B                     	;# 
   711  021B                     	;# 
   712  021C                     	;# 
   713  021C                     	;# 
   714  021D                     	;# 
   715  021D                     	;# 
   716  021E                     	;# 
   717  021F                     	;# 
   718  028C                     	;# 
   719  028C                     	;# 
   720  028D                     	;# 
   721  028D                     	;# 
   722  028E                     	;# 
   723  028F                     	;# 
   724  0290                     	;# 
   725  0290                     	;# 
   726  0291                     	;# 
   727  0292                     	;# 
   728  0292                     	;# 
   729  0293                     	;# 
   730  0293                     	;# 
   731  0294                     	;# 
   732  0295                     	;# 
   733  0296                     	;# 
   734  0296                     	;# 
   735  0297                     	;# 
   736  0298                     	;# 
   737  0298                     	;# 
   738  0299                     	;# 
   739  0299                     	;# 
   740  029A                     	;# 
   741  029B                     	;# 
   742  029C                     	;# 
   743  029C                     	;# 
   744  029D                     	;# 
   745  030C                     	;# 
   746  030C                     	;# 
   747  030D                     	;# 
   748  030E                     	;# 
   749  030F                     	;# 
   750  0310                     	;# 
   751  0310                     	;# 
   752  0311                     	;# 
   753  0312                     	;# 
   754  0313                     	;# 
   755  0314                     	;# 
   756  0314                     	;# 
   757  0315                     	;# 
   758  0316                     	;# 
   759  0317                     	;# 
   760  0318                     	;# 
   761  0318                     	;# 
   762  0319                     	;# 
   763  031A                     	;# 
   764  031B                     	;# 
   765  031C                     	;# 
   766  031C                     	;# 
   767  031D                     	;# 
   768  031E                     	;# 
   769  031F                     	;# 
   770  038C                     	;# 
   771  038D                     	;# 
   772  038E                     	;# 
   773  0390                     	;# 
   774  0391                     	;# 
   775  0392                     	;# 
   776  040C                     	;# 
   777  040D                     	;# 
   778  040E                     	;# 
   779  040F                     	;# 
   780  0410                     	;# 
   781  0411                     	;# 
   782  0416                     	;# 
   783  0416                     	;# 
   784  0417                     	;# 
   785  0418                     	;# 
   786  0418                     	;# 
   787  0419                     	;# 
   788  041A                     	;# 
   789  041A                     	;# 
   790  041B                     	;# 
   791  041C                     	;# 
   792  041C                     	;# 
   793  041D                     	;# 
   794  041E                     	;# 
   795  041F                     	;# 
   796  048C                     	;# 
   797  048C                     	;# 
   798  048D                     	;# 
   799  048E                     	;# 
   800  048F                     	;# 
   801  048F                     	;# 
   802  0490                     	;# 
   803  0491                     	;# 
   804  0492                     	;# 
   805  0492                     	;# 
   806  0493                     	;# 
   807  0494                     	;# 
   808  0495                     	;# 
   809  0495                     	;# 
   810  0496                     	;# 
   811  0497                     	;# 
   812  0498                     	;# 
   813  0499                     	;# 
   814  049A                     	;# 
   815  049B                     	;# 
   816  049C                     	;# 
   817  049D                     	;# 
   818  050C                     	;# 
   819  050C                     	;# 
   820  050D                     	;# 
   821  050E                     	;# 
   822  050F                     	;# 
   823  050F                     	;# 
   824  0510                     	;# 
   825  0511                     	;# 
   826  0512                     	;# 
   827  0512                     	;# 
   828  0513                     	;# 
   829  0514                     	;# 
   830  0515                     	;# 
   831  0515                     	;# 
   832  0516                     	;# 
   833  0517                     	;# 
   834  0518                     	;# 
   835  0519                     	;# 
   836  051A                     	;# 
   837  051B                     	;# 
   838  051C                     	;# 
   839  051D                     	;# 
   840  058C                     	;# 
   841  058C                     	;# 
   842  058D                     	;# 
   843  058E                     	;# 
   844  058F                     	;# 
   845  058F                     	;# 
   846  0590                     	;# 
   847  0591                     	;# 
   848  0592                     	;# 
   849  0593                     	;# 
   850  060C                     	;# 
   851  060D                     	;# 
   852  060E                     	;# 
   853  060F                     	;# 
   854  0610                     	;# 
   855  0611                     	;# 
   856  0612                     	;# 
   857  0613                     	;# 
   858  0614                     	;# 
   859  0616                     	;# 
   860  0617                     	;# 
   861  0618                     	;# 
   862  0619                     	;# 
   863  061A                     	;# 
   864  061B                     	;# 
   865  061C                     	;# 
   866  061D                     	;# 
   867  061E                     	;# 
   868  068C                     	;# 
   869  068D                     	;# 
   870  068E                     	;# 
   871  068F                     	;# 
   872  0690                     	;# 
   873  0691                     	;# 
   874  0692                     	;# 
   875  0693                     	;# 
   876  0694                     	;# 
   877  070C                     	;# 
   878  070D                     	;# 
   879  070E                     	;# 
   880  070F                     	;# 
   881  0710                     	;# 
   882  0711                     	;# 
   883  0712                     	;# 
   884  0713                     	;# 
   885  0714                     	;# 
   886  0716                     	;# 
   887  0717                     	;# 
   888  0718                     	;# 
   889  0719                     	;# 
   890  071A                     	;# 
   891  071B                     	;# 
   892  071C                     	;# 
   893  071D                     	;# 
   894  071E                     	;# 
   895  0796                     	;# 
   896  0797                     	;# 
   897  0798                     	;# 
   898  0799                     	;# 
   899  079A                     	;# 
   900  079B                     	;# 
   901  080C                     	;# 
   902  080D                     	;# 
   903  080E                     	;# 
   904  080F                     	;# 
   905  0810                     	;# 
   906  0811                     	;# 
   907  0812                     	;# 
   908  0813                     	;# 
   909  0814                     	;# 
   910  081A                     	;# 
   911  081B                     	;# 
   912  081C                     	;# 
   913  081D                     	;# 
   914  081E                     	;# 
   915  081F                     	;# 
   916  088C                     	;# 
   917  088D                     	;# 
   918  088E                     	;# 
   919  088F                     	;# 
   920  0890                     	;# 
   921  0891                     	;# 
   922  0892                     	;# 
   923  0893                     	;# 
   924  0895                     	;# 
   925  0896                     	;# 
   926  0897                     	;# 
   927  0898                     	;# 
   928  0899                     	;# 
   929  089A                     	;# 
   930  089B                     	;# 
   931  090C                     	;# 
   932  090E                     	;# 
   933  090F                     	;# 
   934  091F                     	;# 
   935  091F                     	;# 
   936  098F                     	;# 
   937  098F                     	;# 
   938  0990                     	;# 
   939  0991                     	;# 
   940  0992                     	;# 
   941  0993                     	;# 
   942  0994                     	;# 
   943  0995                     	;# 
   944  0996                     	;# 
   945  0997                     	;# 
   946  0E0F                     	;# 
   947  0E10                     	;# 
   948  0E11                     	;# 
   949  0E12                     	;# 
   950  0E13                     	;# 
   951  0E14                     	;# 
   952  0E15                     	;# 
   953  0E16                     	;# 
   954  0E17                     	;# 
   955  0E18                     	;# 
   956  0E19                     	;# 
   957  0E1A                     	;# 
   958  0E1B                     	;# 
   959  0E1C                     	;# 
   960  0E1D                     	;# 
   961  0E1E                     	;# 
   962  0E1F                     	;# 
   963  0E20                     	;# 
   964  0E21                     	;# 
   965  0E22                     	;# 
   966  0E23                     	;# 
   967  0E24                     	;# 
   968  0E25                     	;# 
   969  0E26                     	;# 
   970  0E27                     	;# 
   971  0E28                     	;# 
   972  0E29                     	;# 
   973  0E2A                     	;# 
   974  0E2B                     	;# 
   975  0E2C                     	;# 
   976  0E2D                     	;# 
   977  0E2E                     	;# 
   978  0E2F                     	;# 
   979  0E30                     	;# 
   980  0E31                     	;# 
   981  0E32                     	;# 
   982  0E33                     	;# 
   983  0E34                     	;# 
   984  0E35                     	;# 
   985  0E36                     	;# 
   986  0E37                     	;# 
   987  0E8F                     	;# 
   988  0E90                     	;# 
   989  0E91                     	;# 
   990  0E92                     	;# 
   991  0E93                     	;# 
   992  0E94                     	;# 
   993  0E95                     	;# 
   994  0E96                     	;# 
   995  0E97                     	;# 
   996  0E9C                     	;# 
   997  0E9D                     	;# 
   998  0E9E                     	;# 
   999  0EA1                     	;# 
  1000  0EA2                     	;# 
  1001  0EA3                     	;# 
  1002  0EA4                     	;# 
  1003  0EA5                     	;# 
  1004  0EA9                     	;# 
  1005  0EAA                     	;# 
  1006  0EAB                     	;# 
  1007  0EAC                     	;# 
  1008  0EB1                     	;# 
  1009  0EB2                     	;# 
  1010  0EB3                     	;# 
  1011  0EB8                     	;# 
  1012  0EB9                     	;# 
  1013  0EBA                     	;# 
  1014  0EBB                     	;# 
  1015  0EBC                     	;# 
  1016  0EBD                     	;# 
  1017  0EBE                     	;# 
  1018  0EC3                     	;# 
  1019  0EC5                     	;# 
  1020  0EC6                     	;# 
  1021  0EC7                     	;# 
  1022  0EC8                     	;# 
  1023  0EC9                     	;# 
  1024  0ECA                     	;# 
  1025  0ECB                     	;# 
  1026  0ECC                     	;# 
  1027  0F10                     	;# 
  1028  0F11                     	;# 
  1029  0F12                     	;# 
  1030  0F13                     	;# 
  1031  0F14                     	;# 
  1032  0F15                     	;# 
  1033  0F16                     	;# 
  1034  0F17                     	;# 
  1035  0F18                     	;# 
  1036  0F19                     	;# 
  1037  0F1A                     	;# 
  1038  0F1B                     	;# 
  1039  0F1C                     	;# 
  1040  0F1D                     	;# 
  1041  0F1E                     	;# 
  1042  0F1F                     	;# 
  1043  0F20                     	;# 
  1044  0F21                     	;# 
  1045  0F22                     	;# 
  1046  0F23                     	;# 
  1047  0F24                     	;# 
  1048  0F25                     	;# 
  1049  0F26                     	;# 
  1050  0F27                     	;# 
  1051  0F38                     	;# 
  1052  0F39                     	;# 
  1053  0F3A                     	;# 
  1054  0F3B                     	;# 
  1055  0F3C                     	;# 
  1056  0F3D                     	;# 
  1057  0F3E                     	;# 
  1058  0F3F                     	;# 
  1059  0F40                     	;# 
  1060  0F41                     	;# 
  1061  0F43                     	;# 
  1062  0F44                     	;# 
  1063  0F45                     	;# 
  1064  0F46                     	;# 
  1065  0F47                     	;# 
  1066  0F48                     	;# 
  1067  0F49                     	;# 
  1068  0F4A                     	;# 
  1069  0F4B                     	;# 
  1070  0F4C                     	;# 
  1071  0F4E                     	;# 
  1072  0F4F                     	;# 
  1073  0F50                     	;# 
  1074  0F51                     	;# 
  1075  0F52                     	;# 
  1076  0F53                     	;# 
  1077  0F54                     	;# 
  1078  0F55                     	;# 
  1079  0F56                     	;# 
  1080  0F57                     	;# 
  1081  0F65                     	;# 
  1082  0F68                     	;# 
  1083  0F69                     	;# 
  1084  0F6A                     	;# 
  1085  0F6B                     	;# 
  1086  0FE4                     	;# 
  1087  0FE5                     	;# 
  1088  0FE6                     	;# 
  1089  0FE7                     	;# 
  1090  0FE8                     	;# 
  1091  0FE9                     	;# 
  1092  0FEA                     	;# 
  1093  0FEB                     	;# 
  1094  0FED                     	;# 
  1095  0FEE                     	;# 
  1096  0FEF                     	;# 
  1097  0000                     	;# 
  1098  0001                     	;# 
  1099  0002                     	;# 
  1100  0003                     	;# 
  1101  0004                     	;# 
  1102  0005                     	;# 
  1103  0006                     	;# 
  1104  0007                     	;# 
  1105  0008                     	;# 
  1106  0009                     	;# 
  1107  000A                     	;# 
  1108  000B                     	;# 
  1109  000C                     	;# 
  1110  000D                     	;# 
  1111  000E                     	;# 
  1112  0010                     	;# 
  1113  0011                     	;# 
  1114  0012                     	;# 
  1115  0013                     	;# 
  1116  0016                     	;# 
  1117  0017                     	;# 
  1118  0018                     	;# 
  1119  001C                     	;# 
  1120  001C                     	;# 
  1121  001D                     	;# 
  1122  001D                     	;# 
  1123  001E                     	;# 
  1124  001F                     	;# 
  1125  008C                     	;# 
  1126  008C                     	;# 
  1127  008D                     	;# 
  1128  008E                     	;# 
  1129  008E                     	;# 
  1130  008F                     	;# 
  1131  0090                     	;# 
  1132  0090                     	;# 
  1133  0091                     	;# 
  1134  0093                     	;# 
  1135  0094                     	;# 
  1136  0095                     	;# 
  1137  0096                     	;# 
  1138  0097                     	;# 
  1139  0098                     	;# 
  1140  0099                     	;# 
  1141  009A                     	;# 
  1142  009B                     	;# 
  1143  009C                     	;# 
  1144  009D                     	;# 
  1145  009E                     	;# 
  1146  010C                     	;# 
  1147  010D                     	;# 
  1148  010E                     	;# 
  1149  010E                     	;# 
  1150  010F                     	;# 
  1151  0110                     	;# 
  1152  0110                     	;# 
  1153  0111                     	;# 
  1154  0112                     	;# 
  1155  0112                     	;# 
  1156  0113                     	;# 
  1157  0114                     	;# 
  1158  0114                     	;# 
  1159  0115                     	;# 
  1160  0116                     	;# 
  1161  0116                     	;# 
  1162  0117                     	;# 
  1163  0119                     	;# 
  1164  0119                     	;# 
  1165  0119                     	;# 
  1166  011A                     	;# 
  1167  011A                     	;# 
  1168  011A                     	;# 
  1169  011B                     	;# 
  1170  011B                     	;# 
  1171  011B                     	;# 
  1172  011B                     	;# 
  1173  011B                     	;# 
  1174  011C                     	;# 
  1175  011C                     	;# 
  1176  011C                     	;# 
  1177  011D                     	;# 
  1178  011D                     	;# 
  1179  011D                     	;# 
  1180  011E                     	;# 
  1181  011E                     	;# 
  1182  011E                     	;# 
  1183  011F                     	;# 
  1184  011F                     	;# 
  1185  011F                     	;# 
  1186  011F                     	;# 
  1187  011F                     	;# 
  1188  018C                     	;# 
  1189  018D                     	;# 
  1190  018E                     	;# 
  1191  018F                     	;# 
  1192  0190                     	;# 
  1193  0191                     	;# 
  1194  0192                     	;# 
  1195  0196                     	;# 
  1196  0197                     	;# 
  1197  0198                     	;# 
  1198  0199                     	;# 
  1199  019A                     	;# 
  1200  019B                     	;# 
  1201  019C                     	;# 
  1202  020C                     	;# 
  1203  020D                     	;# 
  1204  020E                     	;# 
  1205  020F                     	;# 
  1206  020F                     	;# 
  1207  0210                     	;# 
  1208  0210                     	;# 
  1209  0211                     	;# 
  1210  0211                     	;# 
  1211  0212                     	;# 
  1212  0213                     	;# 
  1213  0214                     	;# 
  1214  0215                     	;# 
  1215  0215                     	;# 
  1216  0216                     	;# 
  1217  0216                     	;# 
  1218  0217                     	;# 
  1219  0217                     	;# 
  1220  0218                     	;# 
  1221  0219                     	;# 
  1222  021A                     	;# 
  1223  021B                     	;# 
  1224  021B                     	;# 
  1225  021C                     	;# 
  1226  021C                     	;# 
  1227  021D                     	;# 
  1228  021D                     	;# 
  1229  021E                     	;# 
  1230  021F                     	;# 
  1231  028C                     	;# 
  1232  028C                     	;# 
  1233  028D                     	;# 
  1234  028D                     	;# 
  1235  028E                     	;# 
  1236  028F                     	;# 
  1237  0290                     	;# 
  1238  0290                     	;# 
  1239  0291                     	;# 
  1240  0292                     	;# 
  1241  0292                     	;# 
  1242  0293                     	;# 
  1243  0293                     	;# 
  1244  0294                     	;# 
  1245  0295                     	;# 
  1246  0296                     	;# 
  1247  0296                     	;# 
  1248  0297                     	;# 
  1249  0298                     	;# 
  1250  0298                     	;# 
  1251  0299                     	;# 
  1252  0299                     	;# 
  1253  029A                     	;# 
  1254  029B                     	;# 
  1255  029C                     	;# 
  1256  029C                     	;# 
  1257  029D                     	;# 
  1258  030C                     	;# 
  1259  030C                     	;# 
  1260  030D                     	;# 
  1261  030E                     	;# 
  1262  030F                     	;# 
  1263  0310                     	;# 
  1264  0310                     	;# 
  1265  0311                     	;# 
  1266  0312                     	;# 
  1267  0313                     	;# 
  1268  0314                     	;# 
  1269  0314                     	;# 
  1270  0315                     	;# 
  1271  0316                     	;# 
  1272  0317                     	;# 
  1273  0318                     	;# 
  1274  0318                     	;# 
  1275  0319                     	;# 
  1276  031A                     	;# 
  1277  031B                     	;# 
  1278  031C                     	;# 
  1279  031C                     	;# 
  1280  031D                     	;# 
  1281  031E                     	;# 
  1282  031F                     	;# 
  1283  038C                     	;# 
  1284  038D                     	;# 
  1285  038E                     	;# 
  1286  0390                     	;# 
  1287  0391                     	;# 
  1288  0392                     	;# 
  1289  040C                     	;# 
  1290  040D                     	;# 
  1291  040E                     	;# 
  1292  040F                     	;# 
  1293  0410                     	;# 
  1294  0411                     	;# 
  1295  0416                     	;# 
  1296  0416                     	;# 
  1297  0417                     	;# 
  1298  0418                     	;# 
  1299  0418                     	;# 
  1300  0419                     	;# 
  1301  041A                     	;# 
  1302  041A                     	;# 
  1303  041B                     	;# 
  1304  041C                     	;# 
  1305  041C                     	;# 
  1306  041D                     	;# 
  1307  041E                     	;# 
  1308  041F                     	;# 
  1309  048C                     	;# 
  1310  048C                     	;# 
  1311  048D                     	;# 
  1312  048E                     	;# 
  1313  048F                     	;# 
  1314  048F                     	;# 
  1315  0490                     	;# 
  1316  0491                     	;# 
  1317  0492                     	;# 
  1318  0492                     	;# 
  1319  0493                     	;# 
  1320  0494                     	;# 
  1321  0495                     	;# 
  1322  0495                     	;# 
  1323  0496                     	;# 
  1324  0497                     	;# 
  1325  0498                     	;# 
  1326  0499                     	;# 
  1327  049A                     	;# 
  1328  049B                     	;# 
  1329  049C                     	;# 
  1330  049D                     	;# 
  1331  050C                     	;# 
  1332  050C                     	;# 
  1333  050D                     	;# 
  1334  050E                     	;# 
  1335  050F                     	;# 
  1336  050F                     	;# 
  1337  0510                     	;# 
  1338  0511                     	;# 
  1339  0512                     	;# 
  1340  0512                     	;# 
  1341  0513                     	;# 
  1342  0514                     	;# 
  1343  0515                     	;# 
  1344  0515                     	;# 
  1345  0516                     	;# 
  1346  0517                     	;# 
  1347  0518                     	;# 
  1348  0519                     	;# 
  1349  051A                     	;# 
  1350  051B                     	;# 
  1351  051C                     	;# 
  1352  051D                     	;# 
  1353  058C                     	;# 
  1354  058C                     	;# 
  1355  058D                     	;# 
  1356  058E                     	;# 
  1357  058F                     	;# 
  1358  058F                     	;# 
  1359  0590                     	;# 
  1360  0591                     	;# 
  1361  0592                     	;# 
  1362  0593                     	;# 
  1363  060C                     	;# 
  1364  060D                     	;# 
  1365  060E                     	;# 
  1366  060F                     	;# 
  1367  0610                     	;# 
  1368  0611                     	;# 
  1369  0612                     	;# 
  1370  0613                     	;# 
  1371  0614                     	;# 
  1372  0616                     	;# 
  1373  0617                     	;# 
  1374  0618                     	;# 
  1375  0619                     	;# 
  1376  061A                     	;# 
  1377  061B                     	;# 
  1378  061C                     	;# 
  1379  061D                     	;# 
  1380  061E                     	;# 
  1381  068C                     	;# 
  1382  068D                     	;# 
  1383  068E                     	;# 
  1384  068F                     	;# 
  1385  0690                     	;# 
  1386  0691                     	;# 
  1387  0692                     	;# 
  1388  0693                     	;# 
  1389  0694                     	;# 
  1390  070C                     	;# 
  1391  070D                     	;# 
  1392  070E                     	;# 
  1393  070F                     	;# 
  1394  0710                     	;# 
  1395  0711                     	;# 
  1396  0712                     	;# 
  1397  0713                     	;# 
  1398  0714                     	;# 
  1399  0716                     	;# 
  1400  0717                     	;# 
  1401  0718                     	;# 
  1402  0719                     	;# 
  1403  071A                     	;# 
  1404  071B                     	;# 
  1405  071C                     	;# 
  1406  071D                     	;# 
  1407  071E                     	;# 
  1408  0796                     	;# 
  1409  0797                     	;# 
  1410  0798                     	;# 
  1411  0799                     	;# 
  1412  079A                     	;# 
  1413  079B                     	;# 
  1414  080C                     	;# 
  1415  080D                     	;# 
  1416  080E                     	;# 
  1417  080F                     	;# 
  1418  0810                     	;# 
  1419  0811                     	;# 
  1420  0812                     	;# 
  1421  0813                     	;# 
  1422  0814                     	;# 
  1423  081A                     	;# 
  1424  081B                     	;# 
  1425  081C                     	;# 
  1426  081D                     	;# 
  1427  081E                     	;# 
  1428  081F                     	;# 
  1429  088C                     	;# 
  1430  088D                     	;# 
  1431  088E                     	;# 
  1432  088F                     	;# 
  1433  0890                     	;# 
  1434  0891                     	;# 
  1435  0892                     	;# 
  1436  0893                     	;# 
  1437  0895                     	;# 
  1438  0896                     	;# 
  1439  0897                     	;# 
  1440  0898                     	;# 
  1441  0899                     	;# 
  1442  089A                     	;# 
  1443  089B                     	;# 
  1444  090C                     	;# 
  1445  090E                     	;# 
  1446  090F                     	;# 
  1447  091F                     	;# 
  1448  091F                     	;# 
  1449  098F                     	;# 
  1450  098F                     	;# 
  1451  0990                     	;# 
  1452  0991                     	;# 
  1453  0992                     	;# 
  1454  0993                     	;# 
  1455  0994                     	;# 
  1456  0995                     	;# 
  1457  0996                     	;# 
  1458  0997                     	;# 
  1459  0E0F                     	;# 
  1460  0E10                     	;# 
  1461  0E11                     	;# 
  1462  0E12                     	;# 
  1463  0E13                     	;# 
  1464  0E14                     	;# 
  1465  0E15                     	;# 
  1466  0E16                     	;# 
  1467  0E17                     	;# 
  1468  0E18                     	;# 
  1469  0E19                     	;# 
  1470  0E1A                     	;# 
  1471  0E1B                     	;# 
  1472  0E1C                     	;# 
  1473  0E1D                     	;# 
  1474  0E1E                     	;# 
  1475  0E1F                     	;# 
  1476  0E20                     	;# 
  1477  0E21                     	;# 
  1478  0E22                     	;# 
  1479  0E23                     	;# 
  1480  0E24                     	;# 
  1481  0E25                     	;# 
  1482  0E26                     	;# 
  1483  0E27                     	;# 
  1484  0E28                     	;# 
  1485  0E29                     	;# 
  1486  0E2A                     	;# 
  1487  0E2B                     	;# 
  1488  0E2C                     	;# 
  1489  0E2D                     	;# 
  1490  0E2E                     	;# 
  1491  0E2F                     	;# 
  1492  0E30                     	;# 
  1493  0E31                     	;# 
  1494  0E32                     	;# 
  1495  0E33                     	;# 
  1496  0E34                     	;# 
  1497  0E35                     	;# 
  1498  0E36                     	;# 
  1499  0E37                     	;# 
  1500  0E8F                     	;# 
  1501  0E90                     	;# 
  1502  0E91                     	;# 
  1503  0E92                     	;# 
  1504  0E93                     	;# 
  1505  0E94                     	;# 
  1506  0E95                     	;# 
  1507  0E96                     	;# 
  1508  0E97                     	;# 
  1509  0E9C                     	;# 
  1510  0E9D                     	;# 
  1511  0E9E                     	;# 
  1512  0EA1                     	;# 
  1513  0EA2                     	;# 
  1514  0EA3                     	;# 
  1515  0EA4                     	;# 
  1516  0EA5                     	;# 
  1517  0EA9                     	;# 
  1518  0EAA                     	;# 
  1519  0EAB                     	;# 
  1520  0EAC                     	;# 
  1521  0EB1                     	;# 
  1522  0EB2                     	;# 
  1523  0EB3                     	;# 
  1524  0EB8                     	;# 
  1525  0EB9                     	;# 
  1526  0EBA                     	;# 
  1527  0EBB                     	;# 
  1528  0EBC                     	;# 
  1529  0EBD                     	;# 
  1530  0EBE                     	;# 
  1531  0EC3                     	;# 
  1532  0EC5                     	;# 
  1533  0EC6                     	;# 
  1534  0EC7                     	;# 
  1535  0EC8                     	;# 
  1536  0EC9                     	;# 
  1537  0ECA                     	;# 
  1538  0ECB                     	;# 
  1539  0ECC                     	;# 
  1540  0F10                     	;# 
  1541  0F11                     	;# 
  1542  0F12                     	;# 
  1543  0F13                     	;# 
  1544  0F14                     	;# 
  1545  0F15                     	;# 
  1546  0F16                     	;# 
  1547  0F17                     	;# 
  1548  0F18                     	;# 
  1549  0F19                     	;# 
  1550  0F1A                     	;# 
  1551  0F1B                     	;# 
  1552  0F1C                     	;# 
  1553  0F1D                     	;# 
  1554  0F1E                     	;# 
  1555  0F1F                     	;# 
  1556  0F20                     	;# 
  1557  0F21                     	;# 
  1558  0F22                     	;# 
  1559  0F23                     	;# 
  1560  0F24                     	;# 
  1561  0F25                     	;# 
  1562  0F26                     	;# 
  1563  0F27                     	;# 
  1564  0F38                     	;# 
  1565  0F39                     	;# 
  1566  0F3A                     	;# 
  1567  0F3B                     	;# 
  1568  0F3C                     	;# 
  1569  0F3D                     	;# 
  1570  0F3E                     	;# 
  1571  0F3F                     	;# 
  1572  0F40                     	;# 
  1573  0F41                     	;# 
  1574  0F43                     	;# 
  1575  0F44                     	;# 
  1576  0F45                     	;# 
  1577  0F46                     	;# 
  1578  0F47                     	;# 
  1579  0F48                     	;# 
  1580  0F49                     	;# 
  1581  0F4A                     	;# 
  1582  0F4B                     	;# 
  1583  0F4C                     	;# 
  1584  0F4E                     	;# 
  1585  0F4F                     	;# 
  1586  0F50                     	;# 
  1587  0F51                     	;# 
  1588  0F52                     	;# 
  1589  0F53                     	;# 
  1590  0F54                     	;# 
  1591  0F55                     	;# 
  1592  0F56                     	;# 
  1593  0F57                     	;# 
  1594  0F65                     	;# 
  1595  0F68                     	;# 
  1596  0F69                     	;# 
  1597  0F6A                     	;# 
  1598  0F6B                     	;# 
  1599  0FE4                     	;# 
  1600  0FE5                     	;# 
  1601  0FE6                     	;# 
  1602  0FE7                     	;# 
  1603  0FE8                     	;# 
  1604  0FE9                     	;# 
  1605  0FEA                     	;# 
  1606  0FEB                     	;# 
  1607  0FED                     	;# 
  1608  0FEE                     	;# 
  1609  0FEF                     	;# 
  1610  0000                     	;# 
  1611  0001                     	;# 
  1612  0002                     	;# 
  1613  0003                     	;# 
  1614  0004                     	;# 
  1615  0005                     	;# 
  1616  0006                     	;# 
  1617  0007                     	;# 
  1618  0008                     	;# 
  1619  0009                     	;# 
  1620  000A                     	;# 
  1621  000B                     	;# 
  1622  000C                     	;# 
  1623  000D                     	;# 
  1624  000E                     	;# 
  1625  0010                     	;# 
  1626  0011                     	;# 
  1627  0012                     	;# 
  1628  0013                     	;# 
  1629  0016                     	;# 
  1630  0017                     	;# 
  1631  0018                     	;# 
  1632  001C                     	;# 
  1633  001C                     	;# 
  1634  001D                     	;# 
  1635  001D                     	;# 
  1636  001E                     	;# 
  1637  001F                     	;# 
  1638  008C                     	;# 
  1639  008C                     	;# 
  1640  008D                     	;# 
  1641  008E                     	;# 
  1642  008E                     	;# 
  1643  008F                     	;# 
  1644  0090                     	;# 
  1645  0090                     	;# 
  1646  0091                     	;# 
  1647  0093                     	;# 
  1648  0094                     	;# 
  1649  0095                     	;# 
  1650  0096                     	;# 
  1651  0097                     	;# 
  1652  0098                     	;# 
  1653  0099                     	;# 
  1654  009A                     	;# 
  1655  009B                     	;# 
  1656  009C                     	;# 
  1657  009D                     	;# 
  1658  009E                     	;# 
  1659  010C                     	;# 
  1660  010D                     	;# 
  1661  010E                     	;# 
  1662  010E                     	;# 
  1663  010F                     	;# 
  1664  0110                     	;# 
  1665  0110                     	;# 
  1666  0111                     	;# 
  1667  0112                     	;# 
  1668  0112                     	;# 
  1669  0113                     	;# 
  1670  0114                     	;# 
  1671  0114                     	;# 
  1672  0115                     	;# 
  1673  0116                     	;# 
  1674  0116                     	;# 
  1675  0117                     	;# 
  1676  0119                     	;# 
  1677  0119                     	;# 
  1678  0119                     	;# 
  1679  011A                     	;# 
  1680  011A                     	;# 
  1681  011A                     	;# 
  1682  011B                     	;# 
  1683  011B                     	;# 
  1684  011B                     	;# 
  1685  011B                     	;# 
  1686  011B                     	;# 
  1687  011C                     	;# 
  1688  011C                     	;# 
  1689  011C                     	;# 
  1690  011D                     	;# 
  1691  011D                     	;# 
  1692  011D                     	;# 
  1693  011E                     	;# 
  1694  011E                     	;# 
  1695  011E                     	;# 
  1696  011F                     	;# 
  1697  011F                     	;# 
  1698  011F                     	;# 
  1699  011F                     	;# 
  1700  011F                     	;# 
  1701  018C                     	;# 
  1702  018D                     	;# 
  1703  018E                     	;# 
  1704  018F                     	;# 
  1705  0190                     	;# 
  1706  0191                     	;# 
  1707  0192                     	;# 
  1708  0196                     	;# 
  1709  0197                     	;# 
  1710  0198                     	;# 
  1711  0199                     	;# 
  1712  019A                     	;# 
  1713  019B                     	;# 
  1714  019C                     	;# 
  1715  020C                     	;# 
  1716  020D                     	;# 
  1717  020E                     	;# 
  1718  020F                     	;# 
  1719  020F                     	;# 
  1720  0210                     	;# 
  1721  0210                     	;# 
  1722  0211                     	;# 
  1723  0211                     	;# 
  1724  0212                     	;# 
  1725  0213                     	;# 
  1726  0214                     	;# 
  1727  0215                     	;# 
  1728  0215                     	;# 
  1729  0216                     	;# 
  1730  0216                     	;# 
  1731  0217                     	;# 
  1732  0217                     	;# 
  1733  0218                     	;# 
  1734  0219                     	;# 
  1735  021A                     	;# 
  1736  021B                     	;# 
  1737  021B                     	;# 
  1738  021C                     	;# 
  1739  021C                     	;# 
  1740  021D                     	;# 
  1741  021D                     	;# 
  1742  021E                     	;# 
  1743  021F                     	;# 
  1744  028C                     	;# 
  1745  028C                     	;# 
  1746  028D                     	;# 
  1747  028D                     	;# 
  1748  028E                     	;# 
  1749  028F                     	;# 
  1750  0290                     	;# 
  1751  0290                     	;# 
  1752  0291                     	;# 
  1753  0292                     	;# 
  1754  0292                     	;# 
  1755  0293                     	;# 
  1756  0293                     	;# 
  1757  0294                     	;# 
  1758  0295                     	;# 
  1759  0296                     	;# 
  1760  0296                     	;# 
  1761  0297                     	;# 
  1762  0298                     	;# 
  1763  0298                     	;# 
  1764  0299                     	;# 
  1765  0299                     	;# 
  1766  029A                     	;# 
  1767  029B                     	;# 
  1768  029C                     	;# 
  1769  029C                     	;# 
  1770  029D                     	;# 
  1771  030C                     	;# 
  1772  030C                     	;# 
  1773  030D                     	;# 
  1774  030E                     	;# 
  1775  030F                     	;# 
  1776  0310                     	;# 
  1777  0310                     	;# 
  1778  0311                     	;# 
  1779  0312                     	;# 
  1780  0313                     	;# 
  1781  0314                     	;# 
  1782  0314                     	;# 
  1783  0315                     	;# 
  1784  0316                     	;# 
  1785  0317                     	;# 
  1786  0318                     	;# 
  1787  0318                     	;# 
  1788  0319                     	;# 
  1789  031A                     	;# 
  1790  031B                     	;# 
  1791  031C                     	;# 
  1792  031C                     	;# 
  1793  031D                     	;# 
  1794  031E                     	;# 
  1795  031F                     	;# 
  1796  038C                     	;# 
  1797  038D                     	;# 
  1798  038E                     	;# 
  1799  0390                     	;# 
  1800  0391                     	;# 
  1801  0392                     	;# 
  1802  040C                     	;# 
  1803  040D                     	;# 
  1804  040E                     	;# 
  1805  040F                     	;# 
  1806  0410                     	;# 
  1807  0411                     	;# 
  1808  0416                     	;# 
  1809  0416                     	;# 
  1810  0417                     	;# 
  1811  0418                     	;# 
  1812  0418                     	;# 
  1813  0419                     	;# 
  1814  041A                     	;# 
  1815  041A                     	;# 
  1816  041B                     	;# 
  1817  041C                     	;# 
  1818  041C                     	;# 
  1819  041D                     	;# 
  1820  041E                     	;# 
  1821  041F                     	;# 
  1822  048C                     	;# 
  1823  048C                     	;# 
  1824  048D                     	;# 
  1825  048E                     	;# 
  1826  048F                     	;# 
  1827  048F                     	;# 
  1828  0490                     	;# 
  1829  0491                     	;# 
  1830  0492                     	;# 
  1831  0492                     	;# 
  1832  0493                     	;# 
  1833  0494                     	;# 
  1834  0495                     	;# 
  1835  0495                     	;# 
  1836  0496                     	;# 
  1837  0497                     	;# 
  1838  0498                     	;# 
  1839  0499                     	;# 
  1840  049A                     	;# 
  1841  049B                     	;# 
  1842  049C                     	;# 
  1843  049D                     	;# 
  1844  050C                     	;# 
  1845  050C                     	;# 
  1846  050D                     	;# 
  1847  050E                     	;# 
  1848  050F                     	;# 
  1849  050F                     	;# 
  1850  0510                     	;# 
  1851  0511                     	;# 
  1852  0512                     	;# 
  1853  0512                     	;# 
  1854  0513                     	;# 
  1855  0514                     	;# 
  1856  0515                     	;# 
  1857  0515                     	;# 
  1858  0516                     	;# 
  1859  0517                     	;# 
  1860  0518                     	;# 
  1861  0519                     	;# 
  1862  051A                     	;# 
  1863  051B                     	;# 
  1864  051C                     	;# 
  1865  051D                     	;# 
  1866  058C                     	;# 
  1867  058C                     	;# 
  1868  058D                     	;# 
  1869  058E                     	;# 
  1870  058F                     	;# 
  1871  058F                     	;# 
  1872  0590                     	;# 
  1873  0591                     	;# 
  1874  0592                     	;# 
  1875  0593                     	;# 
  1876  060C                     	;# 
  1877  060D                     	;# 
  1878  060E                     	;# 
  1879  060F                     	;# 
  1880  0610                     	;# 
  1881  0611                     	;# 
  1882  0612                     	;# 
  1883  0613                     	;# 
  1884  0614                     	;# 
  1885  0616                     	;# 
  1886  0617                     	;# 
  1887  0618                     	;# 
  1888  0619                     	;# 
  1889  061A                     	;# 
  1890  061B                     	;# 
  1891  061C                     	;# 
  1892  061D                     	;# 
  1893  061E                     	;# 
  1894  068C                     	;# 
  1895  068D                     	;# 
  1896  068E                     	;# 
  1897  068F                     	;# 
  1898  0690                     	;# 
  1899  0691                     	;# 
  1900  0692                     	;# 
  1901  0693                     	;# 
  1902  0694                     	;# 
  1903  070C                     	;# 
  1904  070D                     	;# 
  1905  070E                     	;# 
  1906  070F                     	;# 
  1907  0710                     	;# 
  1908  0711                     	;# 
  1909  0712                     	;# 
  1910  0713                     	;# 
  1911  0714                     	;# 
  1912  0716                     	;# 
  1913  0717                     	;# 
  1914  0718                     	;# 
  1915  0719                     	;# 
  1916  071A                     	;# 
  1917  071B                     	;# 
  1918  071C                     	;# 
  1919  071D                     	;# 
  1920  071E                     	;# 
  1921  0796                     	;# 
  1922  0797                     	;# 
  1923  0798                     	;# 
  1924  0799                     	;# 
  1925  079A                     	;# 
  1926  079B                     	;# 
  1927  080C                     	;# 
  1928  080D                     	;# 
  1929  080E                     	;# 
  1930  080F                     	;# 
  1931  0810                     	;# 
  1932  0811                     	;# 
  1933  0812                     	;# 
  1934  0813                     	;# 
  1935  0814                     	;# 
  1936  081A                     	;# 
  1937  081B                     	;# 
  1938  081C                     	;# 
  1939  081D                     	;# 
  1940  081E                     	;# 
  1941  081F                     	;# 
  1942  088C                     	;# 
  1943  088D                     	;# 
  1944  088E                     	;# 
  1945  088F                     	;# 
  1946  0890                     	;# 
  1947  0891                     	;# 
  1948  0892                     	;# 
  1949  0893                     	;# 
  1950  0895                     	;# 
  1951  0896                     	;# 
  1952  0897                     	;# 
  1953  0898                     	;# 
  1954  0899                     	;# 
  1955  089A                     	;# 
  1956  089B                     	;# 
  1957  090C                     	;# 
  1958  090E                     	;# 
  1959  090F                     	;# 
  1960  091F                     	;# 
  1961  091F                     	;# 
  1962  098F                     	;# 
  1963  098F                     	;# 
  1964  0990                     	;# 
  1965  0991                     	;# 
  1966  0992                     	;# 
  1967  0993                     	;# 
  1968  0994                     	;# 
  1969  0995                     	;# 
  1970  0996                     	;# 
  1971  0997                     	;# 
  1972  0E0F                     	;# 
  1973  0E10                     	;# 
  1974  0E11                     	;# 
  1975  0E12                     	;# 
  1976  0E13                     	;# 
  1977  0E14                     	;# 
  1978  0E15                     	;# 
  1979  0E16                     	;# 
  1980  0E17                     	;# 
  1981  0E18                     	;# 
  1982  0E19                     	;# 
  1983  0E1A                     	;# 
  1984  0E1B                     	;# 
  1985  0E1C                     	;# 
  1986  0E1D                     	;# 
  1987  0E1E                     	;# 
  1988  0E1F                     	;# 
  1989  0E20                     	;# 
  1990  0E21                     	;# 
  1991  0E22                     	;# 
  1992  0E23                     	;# 
  1993  0E24                     	;# 
  1994  0E25                     	;# 
  1995  0E26                     	;# 
  1996  0E27                     	;# 
  1997  0E28                     	;# 
  1998  0E29                     	;# 
  1999  0E2A                     	;# 
  2000  0E2B                     	;# 
  2001  0E2C                     	;# 
  2002  0E2D                     	;# 
  2003  0E2E                     	;# 
  2004  0E2F                     	;# 
  2005  0E30                     	;# 
  2006  0E31                     	;# 
  2007  0E32                     	;# 
  2008  0E33                     	;# 
  2009  0E34                     	;# 
  2010  0E35                     	;# 
  2011  0E36                     	;# 
  2012  0E37                     	;# 
  2013  0E8F                     	;# 
  2014  0E90                     	;# 
  2015  0E91                     	;# 
  2016  0E92                     	;# 
  2017  0E93                     	;# 
  2018  0E94                     	;# 
  2019  0E95                     	;# 
  2020  0E96                     	;# 
  2021  0E97                     	;# 
  2022  0E9C                     	;# 
  2023  0E9D                     	;# 
  2024  0E9E                     	;# 
  2025  0EA1                     	;# 
  2026  0EA2                     	;# 
  2027  0EA3                     	;# 
  2028  0EA4                     	;# 
  2029  0EA5                     	;# 
  2030  0EA9                     	;# 
  2031  0EAA                     	;# 
  2032  0EAB                     	;# 
  2033  0EAC                     	;# 
  2034  0EB1                     	;# 
  2035  0EB2                     	;# 
  2036  0EB3                     	;# 
  2037  0EB8                     	;# 
  2038  0EB9                     	;# 
  2039  0EBA                     	;# 
  2040  0EBB                     	;# 
  2041  0EBC                     	;# 
  2042  0EBD                     	;# 
  2043  0EBE                     	;# 
  2044  0EC3                     	;# 
  2045  0EC5                     	;# 
  2046  0EC6                     	;# 
  2047  0EC7                     	;# 
  2048  0EC8                     	;# 
  2049  0EC9                     	;# 
  2050  0ECA                     	;# 
  2051  0ECB                     	;# 
  2052  0ECC                     	;# 
  2053  0F10                     	;# 
  2054  0F11                     	;# 
  2055  0F12                     	;# 
  2056  0F13                     	;# 
  2057  0F14                     	;# 
  2058  0F15                     	;# 
  2059  0F16                     	;# 
  2060  0F17                     	;# 
  2061  0F18                     	;# 
  2062  0F19                     	;# 
  2063  0F1A                     	;# 
  2064  0F1B                     	;# 
  2065  0F1C                     	;# 
  2066  0F1D                     	;# 
  2067  0F1E                     	;# 
  2068  0F1F                     	;# 
  2069  0F20                     	;# 
  2070  0F21                     	;# 
  2071  0F22                     	;# 
  2072  0F23                     	;# 
  2073  0F24                     	;# 
  2074  0F25                     	;# 
  2075  0F26                     	;# 
  2076  0F27                     	;# 
  2077  0F38                     	;# 
  2078  0F39                     	;# 
  2079  0F3A                     	;# 
  2080  0F3B                     	;# 
  2081  0F3C                     	;# 
  2082  0F3D                     	;# 
  2083  0F3E                     	;# 
  2084  0F3F                     	;# 
  2085  0F40                     	;# 
  2086  0F41                     	;# 
  2087  0F43                     	;# 
  2088  0F44                     	;# 
  2089  0F45                     	;# 
  2090  0F46                     	;# 
  2091  0F47                     	;# 
  2092  0F48                     	;# 
  2093  0F49                     	;# 
  2094  0F4A                     	;# 
  2095  0F4B                     	;# 
  2096  0F4C                     	;# 
  2097  0F4E                     	;# 
  2098  0F4F                     	;# 
  2099  0F50                     	;# 
  2100  0F51                     	;# 
  2101  0F52                     	;# 
  2102  0F53                     	;# 
  2103  0F54                     	;# 
  2104  0F55                     	;# 
  2105  0F56                     	;# 
  2106  0F57                     	;# 
  2107  0F65                     	;# 
  2108  0F68                     	;# 
  2109  0F69                     	;# 
  2110  0F6A                     	;# 
  2111  0F6B                     	;# 
  2112  0FE4                     	;# 
  2113  0FE5                     	;# 
  2114  0FE6                     	;# 
  2115  0FE7                     	;# 
  2116  0FE8                     	;# 
  2117  0FE9                     	;# 
  2118  0FEA                     	;# 
  2119  0FEB                     	;# 
  2120  0FED                     	;# 
  2121  0FEE                     	;# 
  2122  0FEF                     	;# 
  2123  0000                     	;# 
  2124  0001                     	;# 
  2125  0002                     	;# 
  2126  0003                     	;# 
  2127  0004                     	;# 
  2128  0005                     	;# 
  2129  0006                     	;# 
  2130  0007                     	;# 
  2131  0008                     	;# 
  2132  0009                     	;# 
  2133  000A                     	;# 
  2134  000B                     	;# 
  2135  000C                     	;# 
  2136  000D                     	;# 
  2137  000E                     	;# 
  2138  0010                     	;# 
  2139  0011                     	;# 
  2140  0012                     	;# 
  2141  0013                     	;# 
  2142  0016                     	;# 
  2143  0017                     	;# 
  2144  0018                     	;# 
  2145  001C                     	;# 
  2146  001C                     	;# 
  2147  001D                     	;# 
  2148  001D                     	;# 
  2149  001E                     	;# 
  2150  001F                     	;# 
  2151  008C                     	;# 
  2152  008C                     	;# 
  2153  008D                     	;# 
  2154  008E                     	;# 
  2155  008E                     	;# 
  2156  008F                     	;# 
  2157  0090                     	;# 
  2158  0090                     	;# 
  2159  0091                     	;# 
  2160  0093                     	;# 
  2161  0094                     	;# 
  2162  0095                     	;# 
  2163  0096                     	;# 
  2164  0097                     	;# 
  2165  0098                     	;# 
  2166  0099                     	;# 
  2167  009A                     	;# 
  2168  009B                     	;# 
  2169  009C                     	;# 
  2170  009D                     	;# 
  2171  009E                     	;# 
  2172  010C                     	;# 
  2173  010D                     	;# 
  2174  010E                     	;# 
  2175  010E                     	;# 
  2176  010F                     	;# 
  2177  0110                     	;# 
  2178  0110                     	;# 
  2179  0111                     	;# 
  2180  0112                     	;# 
  2181  0112                     	;# 
  2182  0113                     	;# 
  2183  0114                     	;# 
  2184  0114                     	;# 
  2185  0115                     	;# 
  2186  0116                     	;# 
  2187  0116                     	;# 
  2188  0117                     	;# 
  2189  0119                     	;# 
  2190  0119                     	;# 
  2191  0119                     	;# 
  2192  011A                     	;# 
  2193  011A                     	;# 
  2194  011A                     	;# 
  2195  011B                     	;# 
  2196  011B                     	;# 
  2197  011B                     	;# 
  2198  011B                     	;# 
  2199  011B                     	;# 
  2200  011C                     	;# 
  2201  011C                     	;# 
  2202  011C                     	;# 
  2203  011D                     	;# 
  2204  011D                     	;# 
  2205  011D                     	;# 
  2206  011E                     	;# 
  2207  011E                     	;# 
  2208  011E                     	;# 
  2209  011F                     	;# 
  2210  011F                     	;# 
  2211  011F                     	;# 
  2212  011F                     	;# 
  2213  011F                     	;# 
  2214  018C                     	;# 
  2215  018D                     	;# 
  2216  018E                     	;# 
  2217  018F                     	;# 
  2218  0190                     	;# 
  2219  0191                     	;# 
  2220  0192                     	;# 
  2221  0196                     	;# 
  2222  0197                     	;# 
  2223  0198                     	;# 
  2224  0199                     	;# 
  2225  019A                     	;# 
  2226  019B                     	;# 
  2227  019C                     	;# 
  2228  020C                     	;# 
  2229  020D                     	;# 
  2230  020E                     	;# 
  2231  020F                     	;# 
  2232  020F                     	;# 
  2233  0210                     	;# 
  2234  0210                     	;# 
  2235  0211                     	;# 
  2236  0211                     	;# 
  2237  0212                     	;# 
  2238  0213                     	;# 
  2239  0214                     	;# 
  2240  0215                     	;# 
  2241  0215                     	;# 
  2242  0216                     	;# 
  2243  0216                     	;# 
  2244  0217                     	;# 
  2245  0217                     	;# 
  2246  0218                     	;# 
  2247  0219                     	;# 
  2248  021A                     	;# 
  2249  021B                     	;# 
  2250  021B                     	;# 
  2251  021C                     	;# 
  2252  021C                     	;# 
  2253  021D                     	;# 
  2254  021D                     	;# 
  2255  021E                     	;# 
  2256  021F                     	;# 
  2257  028C                     	;# 
  2258  028C                     	;# 
  2259  028D                     	;# 
  2260  028D                     	;# 
  2261  028E                     	;# 
  2262  028F                     	;# 
  2263  0290                     	;# 
  2264  0290                     	;# 
  2265  0291                     	;# 
  2266  0292                     	;# 
  2267  0292                     	;# 
  2268  0293                     	;# 
  2269  0293                     	;# 
  2270  0294                     	;# 
  2271  0295                     	;# 
  2272  0296                     	;# 
  2273  0296                     	;# 
  2274  0297                     	;# 
  2275  0298                     	;# 
  2276  0298                     	;# 
  2277  0299                     	;# 
  2278  0299                     	;# 
  2279  029A                     	;# 
  2280  029B                     	;# 
  2281  029C                     	;# 
  2282  029C                     	;# 
  2283  029D                     	;# 
  2284  030C                     	;# 
  2285  030C                     	;# 
  2286  030D                     	;# 
  2287  030E                     	;# 
  2288  030F                     	;# 
  2289  0310                     	;# 
  2290  0310                     	;# 
  2291  0311                     	;# 
  2292  0312                     	;# 
  2293  0313                     	;# 
  2294  0314                     	;# 
  2295  0314                     	;# 
  2296  0315                     	;# 
  2297  0316                     	;# 
  2298  0317                     	;# 
  2299  0318                     	;# 
  2300  0318                     	;# 
  2301  0319                     	;# 
  2302  031A                     	;# 
  2303  031B                     	;# 
  2304  031C                     	;# 
  2305  031C                     	;# 
  2306  031D                     	;# 
  2307  031E                     	;# 
  2308  031F                     	;# 
  2309  038C                     	;# 
  2310  038D                     	;# 
  2311  038E                     	;# 
  2312  0390                     	;# 
  2313  0391                     	;# 
  2314  0392                     	;# 
  2315  040C                     	;# 
  2316  040D                     	;# 
  2317  040E                     	;# 
  2318  040F                     	;# 
  2319  0410                     	;# 
  2320  0411                     	;# 
  2321  0416                     	;# 
  2322  0416                     	;# 
  2323  0417                     	;# 
  2324  0418                     	;# 
  2325  0418                     	;# 
  2326  0419                     	;# 
  2327  041A                     	;# 
  2328  041A                     	;# 
  2329  041B                     	;# 
  2330  041C                     	;# 
  2331  041C                     	;# 
  2332  041D                     	;# 
  2333  041E                     	;# 
  2334  041F                     	;# 
  2335  048C                     	;# 
  2336  048C                     	;# 
  2337  048D                     	;# 
  2338  048E                     	;# 
  2339  048F                     	;# 
  2340  048F                     	;# 
  2341  0490                     	;# 
  2342  0491                     	;# 
  2343  0492                     	;# 
  2344  0492                     	;# 
  2345  0493                     	;# 
  2346  0494                     	;# 
  2347  0495                     	;# 
  2348  0495                     	;# 
  2349  0496                     	;# 
  2350  0497                     	;# 
  2351  0498                     	;# 
  2352  0499                     	;# 
  2353  049A                     	;# 
  2354  049B                     	;# 
  2355  049C                     	;# 
  2356  049D                     	;# 
  2357  050C                     	;# 
  2358  050C                     	;# 
  2359  050D                     	;# 
  2360  050E                     	;# 
  2361  050F                     	;# 
  2362  050F                     	;# 
  2363  0510                     	;# 
  2364  0511                     	;# 
  2365  0512                     	;# 
  2366  0512                     	;# 
  2367  0513                     	;# 
  2368  0514                     	;# 
  2369  0515                     	;# 
  2370  0515                     	;# 
  2371  0516                     	;# 
  2372  0517                     	;# 
  2373  0518                     	;# 
  2374  0519                     	;# 
  2375  051A                     	;# 
  2376  051B                     	;# 
  2377  051C                     	;# 
  2378  051D                     	;# 
  2379  058C                     	;# 
  2380  058C                     	;# 
  2381  058D                     	;# 
  2382  058E                     	;# 
  2383  058F                     	;# 
  2384  058F                     	;# 
  2385  0590                     	;# 
  2386  0591                     	;# 
  2387  0592                     	;# 
  2388  0593                     	;# 
  2389  060C                     	;# 
  2390  060D                     	;# 
  2391  060E                     	;# 
  2392  060F                     	;# 
  2393  0610                     	;# 
  2394  0611                     	;# 
  2395  0612                     	;# 
  2396  0613                     	;# 
  2397  0614                     	;# 
  2398  0616                     	;# 
  2399  0617                     	;# 
  2400  0618                     	;# 
  2401  0619                     	;# 
  2402  061A                     	;# 
  2403  061B                     	;# 
  2404  061C                     	;# 
  2405  061D                     	;# 
  2406  061E                     	;# 
  2407  068C                     	;# 
  2408  068D                     	;# 
  2409  068E                     	;# 
  2410  068F                     	;# 
  2411  0690                     	;# 
  2412  0691                     	;# 
  2413  0692                     	;# 
  2414  0693                     	;# 
  2415  0694                     	;# 
  2416  070C                     	;# 
  2417  070D                     	;# 
  2418  070E                     	;# 
  2419  070F                     	;# 
  2420  0710                     	;# 
  2421  0711                     	;# 
  2422  0712                     	;# 
  2423  0713                     	;# 
  2424  0714                     	;# 
  2425  0716                     	;# 
  2426  0717                     	;# 
  2427  0718                     	;# 
  2428  0719                     	;# 
  2429  071A                     	;# 
  2430  071B                     	;# 
  2431  071C                     	;# 
  2432  071D                     	;# 
  2433  071E                     	;# 
  2434  0796                     	;# 
  2435  0797                     	;# 
  2436  0798                     	;# 
  2437  0799                     	;# 
  2438  079A                     	;# 
  2439  079B                     	;# 
  2440  080C                     	;# 
  2441  080D                     	;# 
  2442  080E                     	;# 
  2443  080F                     	;# 
  2444  0810                     	;# 
  2445  0811                     	;# 
  2446  0812                     	;# 
  2447  0813                     	;# 
  2448  0814                     	;# 
  2449  081A                     	;# 
  2450  081B                     	;# 
  2451  081C                     	;# 
  2452  081D                     	;# 
  2453  081E                     	;# 
  2454  081F                     	;# 
  2455  088C                     	;# 
  2456  088D                     	;# 
  2457  088E                     	;# 
  2458  088F                     	;# 
  2459  0890                     	;# 
  2460  0891                     	;# 
  2461  0892                     	;# 
  2462  0893                     	;# 
  2463  0895                     	;# 
  2464  0896                     	;# 
  2465  0897                     	;# 
  2466  0898                     	;# 
  2467  0899                     	;# 
  2468  089A                     	;# 
  2469  089B                     	;# 
  2470  090C                     	;# 
  2471  090E                     	;# 
  2472  090F                     	;# 
  2473  091F                     	;# 
  2474  091F                     	;# 
  2475  098F                     	;# 
  2476  098F                     	;# 
  2477  0990                     	;# 
  2478  0991                     	;# 
  2479  0992                     	;# 
  2480  0993                     	;# 
  2481  0994                     	;# 
  2482  0995                     	;# 
  2483  0996                     	;# 
  2484  0997                     	;# 
  2485  0E0F                     	;# 
  2486  0E10                     	;# 
  2487  0E11                     	;# 
  2488  0E12                     	;# 
  2489  0E13                     	;# 
  2490  0E14                     	;# 
  2491  0E15                     	;# 
  2492  0E16                     	;# 
  2493  0E17                     	;# 
  2494  0E18                     	;# 
  2495  0E19                     	;# 
  2496  0E1A                     	;# 
  2497  0E1B                     	;# 
  2498  0E1C                     	;# 
  2499  0E1D                     	;# 
  2500  0E1E                     	;# 
  2501  0E1F                     	;# 
  2502  0E20                     	;# 
  2503  0E21                     	;# 
  2504  0E22                     	;# 
  2505  0E23                     	;# 
  2506  0E24                     	;# 
  2507  0E25                     	;# 
  2508  0E26                     	;# 
  2509  0E27                     	;# 
  2510  0E28                     	;# 
  2511  0E29                     	;# 
  2512  0E2A                     	;# 
  2513  0E2B                     	;# 
  2514  0E2C                     	;# 
  2515  0E2D                     	;# 
  2516  0E2E                     	;# 
  2517  0E2F                     	;# 
  2518  0E30                     	;# 
  2519  0E31                     	;# 
  2520  0E32                     	;# 
  2521  0E33                     	;# 
  2522  0E34                     	;# 
  2523  0E35                     	;# 
  2524  0E36                     	;# 
  2525  0E37                     	;# 
  2526  0E8F                     	;# 
  2527  0E90                     	;# 
  2528  0E91                     	;# 
  2529  0E92                     	;# 
  2530  0E93                     	;# 
  2531  0E94                     	;# 
  2532  0E95                     	;# 
  2533  0E96                     	;# 
  2534  0E97                     	;# 
  2535  0E9C                     	;# 
  2536  0E9D                     	;# 
  2537  0E9E                     	;# 
  2538  0EA1                     	;# 
  2539  0EA2                     	;# 
  2540  0EA3                     	;# 
  2541  0EA4                     	;# 
  2542  0EA5                     	;# 
  2543  0EA9                     	;# 
  2544  0EAA                     	;# 
  2545  0EAB                     	;# 
  2546  0EAC                     	;# 
  2547  0EB1                     	;# 
  2548  0EB2                     	;# 
  2549  0EB3                     	;# 
  2550  0EB8                     	;# 
  2551  0EB9                     	;# 
  2552  0EBA                     	;# 
  2553  0EBB                     	;# 
  2554  0EBC                     	;# 
  2555  0EBD                     	;# 
  2556  0EBE                     	;# 
  2557  0EC3                     	;# 
  2558  0EC5                     	;# 
  2559  0EC6                     	;# 
  2560  0EC7                     	;# 
  2561  0EC8                     	;# 
  2562  0EC9                     	;# 
  2563  0ECA                     	;# 
  2564  0ECB                     	;# 
  2565  0ECC                     	;# 
  2566  0F10                     	;# 
  2567  0F11                     	;# 
  2568  0F12                     	;# 
  2569  0F13                     	;# 
  2570  0F14                     	;# 
  2571  0F15                     	;# 
  2572  0F16                     	;# 
  2573  0F17                     	;# 
  2574  0F18                     	;# 
  2575  0F19                     	;# 
  2576  0F1A                     	;# 
  2577  0F1B                     	;# 
  2578  0F1C                     	;# 
  2579  0F1D                     	;# 
  2580  0F1E                     	;# 
  2581  0F1F                     	;# 
  2582  0F20                     	;# 
  2583  0F21                     	;# 
  2584  0F22                     	;# 
  2585  0F23                     	;# 
  2586  0F24                     	;# 
  2587  0F25                     	;# 
  2588  0F26                     	;# 
  2589  0F27                     	;# 
  2590  0F38                     	;# 
  2591  0F39                     	;# 
  2592  0F3A                     	;# 
  2593  0F3B                     	;# 
  2594  0F3C                     	;# 
  2595  0F3D                     	;# 
  2596  0F3E                     	;# 
  2597  0F3F                     	;# 
  2598  0F40                     	;# 
  2599  0F41                     	;# 
  2600  0F43                     	;# 
  2601  0F44                     	;# 
  2602  0F45                     	;# 
  2603  0F46                     	;# 
  2604  0F47                     	;# 
  2605  0F48                     	;# 
  2606  0F49                     	;# 
  2607  0F4A                     	;# 
  2608  0F4B                     	;# 
  2609  0F4C                     	;# 
  2610  0F4E                     	;# 
  2611  0F4F                     	;# 
  2612  0F50                     	;# 
  2613  0F51                     	;# 
  2614  0F52                     	;# 
  2615  0F53                     	;# 
  2616  0F54                     	;# 
  2617  0F55                     	;# 
  2618  0F56                     	;# 
  2619  0F57                     	;# 
  2620  0F65                     	;# 
  2621  0F68                     	;# 
  2622  0F69                     	;# 
  2623  0F6A                     	;# 
  2624  0F6B                     	;# 
  2625  0FE4                     	;# 
  2626  0FE5                     	;# 
  2627  0FE6                     	;# 
  2628  0FE7                     	;# 
  2629  0FE8                     	;# 
  2630  0FE9                     	;# 
  2631  0FEA                     	;# 
  2632  0FEB                     	;# 
  2633  0FED                     	;# 
  2634  0FEE                     	;# 
  2635  0FEF                     	;# 
  2636  0000                     	;# 
  2637  0001                     	;# 
  2638  0002                     	;# 
  2639  0003                     	;# 
  2640  0004                     	;# 
  2641  0005                     	;# 
  2642  0006                     	;# 
  2643  0007                     	;# 
  2644  0008                     	;# 
  2645  0009                     	;# 
  2646  000A                     	;# 
  2647  000B                     	;# 
  2648  000C                     	;# 
  2649  000D                     	;# 
  2650  000E                     	;# 
  2651  0010                     	;# 
  2652  0011                     	;# 
  2653  0012                     	;# 
  2654  0013                     	;# 
  2655  0016                     	;# 
  2656  0017                     	;# 
  2657  0018                     	;# 
  2658  001C                     	;# 
  2659  001C                     	;# 
  2660  001D                     	;# 
  2661  001D                     	;# 
  2662  001E                     	;# 
  2663  001F                     	;# 
  2664  008C                     	;# 
  2665  008C                     	;# 
  2666  008D                     	;# 
  2667  008E                     	;# 
  2668  008E                     	;# 
  2669  008F                     	;# 
  2670  0090                     	;# 
  2671  0090                     	;# 
  2672  0091                     	;# 
  2673  0093                     	;# 
  2674  0094                     	;# 
  2675  0095                     	;# 
  2676  0096                     	;# 
  2677  0097                     	;# 
  2678  0098                     	;# 
  2679  0099                     	;# 
  2680  009A                     	;# 
  2681  009B                     	;# 
  2682  009C                     	;# 
  2683  009D                     	;# 
  2684  009E                     	;# 
  2685  010C                     	;# 
  2686  010D                     	;# 
  2687  010E                     	;# 
  2688  010E                     	;# 
  2689  010F                     	;# 
  2690  0110                     	;# 
  2691  0110                     	;# 
  2692  0111                     	;# 
  2693  0112                     	;# 
  2694  0112                     	;# 
  2695  0113                     	;# 
  2696  0114                     	;# 
  2697  0114                     	;# 
  2698  0115                     	;# 
  2699  0116                     	;# 
  2700  0116                     	;# 
  2701  0117                     	;# 
  2702  0119                     	;# 
  2703  0119                     	;# 
  2704  0119                     	;# 
  2705  011A                     	;# 
  2706  011A                     	;# 
  2707  011A                     	;# 
  2708  011B                     	;# 
  2709  011B                     	;# 
  2710  011B                     	;# 
  2711  011B                     	;# 
  2712  011B                     	;# 
  2713  011C                     	;# 
  2714  011C                     	;# 
  2715  011C                     	;# 
  2716  011D                     	;# 
  2717  011D                     	;# 
  2718  011D                     	;# 
  2719  011E                     	;# 
  2720  011E                     	;# 
  2721  011E                     	;# 
  2722  011F                     	;# 
  2723  011F                     	;# 
  2724  011F                     	;# 
  2725  011F                     	;# 
  2726  011F                     	;# 
  2727  018C                     	;# 
  2728  018D                     	;# 
  2729  018E                     	;# 
  2730  018F                     	;# 
  2731  0190                     	;# 
  2732  0191                     	;# 
  2733  0192                     	;# 
  2734  0196                     	;# 
  2735  0197                     	;# 
  2736  0198                     	;# 
  2737  0199                     	;# 
  2738  019A                     	;# 
  2739  019B                     	;# 
  2740  019C                     	;# 
  2741  020C                     	;# 
  2742  020D                     	;# 
  2743  020E                     	;# 
  2744  020F                     	;# 
  2745  020F                     	;# 
  2746  0210                     	;# 
  2747  0210                     	;# 
  2748  0211                     	;# 
  2749  0211                     	;# 
  2750  0212                     	;# 
  2751  0213                     	;# 
  2752  0214                     	;# 
  2753  0215                     	;# 
  2754  0215                     	;# 
  2755  0216                     	;# 
  2756  0216                     	;# 
  2757  0217                     	;# 
  2758  0217                     	;# 
  2759  0218                     	;# 
  2760  0219                     	;# 
  2761  021A                     	;# 
  2762  021B                     	;# 
  2763  021B                     	;# 
  2764  021C                     	;# 
  2765  021C                     	;# 
  2766  021D                     	;# 
  2767  021D                     	;# 
  2768  021E                     	;# 
  2769  021F                     	;# 
  2770  028C                     	;# 
  2771  028C                     	;# 
  2772  028D                     	;# 
  2773  028D                     	;# 
  2774  028E                     	;# 
  2775  028F                     	;# 
  2776  0290                     	;# 
  2777  0290                     	;# 
  2778  0291                     	;# 
  2779  0292                     	;# 
  2780  0292                     	;# 
  2781  0293                     	;# 
  2782  0293                     	;# 
  2783  0294                     	;# 
  2784  0295                     	;# 
  2785  0296                     	;# 
  2786  0296                     	;# 
  2787  0297                     	;# 
  2788  0298                     	;# 
  2789  0298                     	;# 
  2790  0299                     	;# 
  2791  0299                     	;# 
  2792  029A                     	;# 
  2793  029B                     	;# 
  2794  029C                     	;# 
  2795  029C                     	;# 
  2796  029D                     	;# 
  2797  030C                     	;# 
  2798  030C                     	;# 
  2799  030D                     	;# 
  2800  030E                     	;# 
  2801  030F                     	;# 
  2802  0310                     	;# 
  2803  0310                     	;# 
  2804  0311                     	;# 
  2805  0312                     	;# 
  2806  0313                     	;# 
  2807  0314                     	;# 
  2808  0314                     	;# 
  2809  0315                     	;# 
  2810  0316                     	;# 
  2811  0317                     	;# 
  2812  0318                     	;# 
  2813  0318                     	;# 
  2814  0319                     	;# 
  2815  031A                     	;# 
  2816  031B                     	;# 
  2817  031C                     	;# 
  2818  031C                     	;# 
  2819  031D                     	;# 
  2820  031E                     	;# 
  2821  031F                     	;# 
  2822  038C                     	;# 
  2823  038D                     	;# 
  2824  038E                     	;# 
  2825  0390                     	;# 
  2826  0391                     	;# 
  2827  0392                     	;# 
  2828  040C                     	;# 
  2829  040D                     	;# 
  2830  040E                     	;# 
  2831  040F                     	;# 
  2832  0410                     	;# 
  2833  0411                     	;# 
  2834  0416                     	;# 
  2835  0416                     	;# 
  2836  0417                     	;# 
  2837  0418                     	;# 
  2838  0418                     	;# 
  2839  0419                     	;# 
  2840  041A                     	;# 
  2841  041A                     	;# 
  2842  041B                     	;# 
  2843  041C                     	;# 
  2844  041C                     	;# 
  2845  041D                     	;# 
  2846  041E                     	;# 
  2847  041F                     	;# 
  2848  048C                     	;# 
  2849  048C                     	;# 
  2850  048D                     	;# 
  2851  048E                     	;# 
  2852  048F                     	;# 
  2853  048F                     	;# 
  2854  0490                     	;# 
  2855  0491                     	;# 
  2856  0492                     	;# 
  2857  0492                     	;# 
  2858  0493                     	;# 
  2859  0494                     	;# 
  2860  0495                     	;# 
  2861  0495                     	;# 
  2862  0496                     	;# 
  2863  0497                     	;# 
  2864  0498                     	;# 
  2865  0499                     	;# 
  2866  049A                     	;# 
  2867  049B                     	;# 
  2868  049C                     	;# 
  2869  049D                     	;# 
  2870  050C                     	;# 
  2871  050C                     	;# 
  2872  050D                     	;# 
  2873  050E                     	;# 
  2874  050F                     	;# 
  2875  050F                     	;# 
  2876  0510                     	;# 
  2877  0511                     	;# 
  2878  0512                     	;# 
  2879  0512                     	;# 
  2880  0513                     	;# 
  2881  0514                     	;# 
  2882  0515                     	;# 
  2883  0515                     	;# 
  2884  0516                     	;# 
  2885  0517                     	;# 
  2886  0518                     	;# 
  2887  0519                     	;# 
  2888  051A                     	;# 
  2889  051B                     	;# 
  2890  051C                     	;# 
  2891  051D                     	;# 
  2892  058C                     	;# 
  2893  058C                     	;# 
  2894  058D                     	;# 
  2895  058E                     	;# 
  2896  058F                     	;# 
  2897  058F                     	;# 
  2898  0590                     	;# 
  2899  0591                     	;# 
  2900  0592                     	;# 
  2901  0593                     	;# 
  2902  060C                     	;# 
  2903  060D                     	;# 
  2904  060E                     	;# 
  2905  060F                     	;# 
  2906  0610                     	;# 
  2907  0611                     	;# 
  2908  0612                     	;# 
  2909  0613                     	;# 
  2910  0614                     	;# 
  2911  0616                     	;# 
  2912  0617                     	;# 
  2913  0618                     	;# 
  2914  0619                     	;# 
  2915  061A                     	;# 
  2916  061B                     	;# 
  2917  061C                     	;# 
  2918  061D                     	;# 
  2919  061E                     	;# 
  2920  068C                     	;# 
  2921  068D                     	;# 
  2922  068E                     	;# 
  2923  068F                     	;# 
  2924  0690                     	;# 
  2925  0691                     	;# 
  2926  0692                     	;# 
  2927  0693                     	;# 
  2928  0694                     	;# 
  2929  070C                     	;# 
  2930  070D                     	;# 
  2931  070E                     	;# 
  2932  070F                     	;# 
  2933  0710                     	;# 
  2934  0711                     	;# 
  2935  0712                     	;# 
  2936  0713                     	;# 
  2937  0714                     	;# 
  2938  0716                     	;# 
  2939  0717                     	;# 
  2940  0718                     	;# 
  2941  0719                     	;# 
  2942  071A                     	;# 
  2943  071B                     	;# 
  2944  071C                     	;# 
  2945  071D                     	;# 
  2946  071E                     	;# 
  2947  0796                     	;# 
  2948  0797                     	;# 
  2949  0798                     	;# 
  2950  0799                     	;# 
  2951  079A                     	;# 
  2952  079B                     	;# 
  2953  080C                     	;# 
  2954  080D                     	;# 
  2955  080E                     	;# 
  2956  080F                     	;# 
  2957  0810                     	;# 
  2958  0811                     	;# 
  2959  0812                     	;# 
  2960  0813                     	;# 
  2961  0814                     	;# 
  2962  081A                     	;# 
  2963  081B                     	;# 
  2964  081C                     	;# 
  2965  081D                     	;# 
  2966  081E                     	;# 
  2967  081F                     	;# 
  2968  088C                     	;# 
  2969  088D                     	;# 
  2970  088E                     	;# 
  2971  088F                     	;# 
  2972  0890                     	;# 
  2973  0891                     	;# 
  2974  0892                     	;# 
  2975  0893                     	;# 
  2976  0895                     	;# 
  2977  0896                     	;# 
  2978  0897                     	;# 
  2979  0898                     	;# 
  2980  0899                     	;# 
  2981  089A                     	;# 
  2982  089B                     	;# 
  2983  090C                     	;# 
  2984  090E                     	;# 
  2985  090F                     	;# 
  2986  091F                     	;# 
  2987  091F                     	;# 
  2988  098F                     	;# 
  2989  098F                     	;# 
  2990  0990                     	;# 
  2991  0991                     	;# 
  2992  0992                     	;# 
  2993  0993                     	;# 
  2994  0994                     	;# 
  2995  0995                     	;# 
  2996  0996                     	;# 
  2997  0997                     	;# 
  2998  0E0F                     	;# 
  2999  0E10                     	;# 
  3000  0E11                     	;# 
  3001  0E12                     	;# 
  3002  0E13                     	;# 
  3003  0E14                     	;# 
  3004  0E15                     	;# 
  3005  0E16                     	;# 
  3006  0E17                     	;# 
  3007  0E18                     	;# 
  3008  0E19                     	;# 
  3009  0E1A                     	;# 
  3010  0E1B                     	;# 
  3011  0E1C                     	;# 
  3012  0E1D                     	;# 
  3013  0E1E                     	;# 
  3014  0E1F                     	;# 
  3015  0E20                     	;# 
  3016  0E21                     	;# 
  3017  0E22                     	;# 
  3018  0E23                     	;# 
  3019  0E24                     	;# 
  3020  0E25                     	;# 
  3021  0E26                     	;# 
  3022  0E27                     	;# 
  3023  0E28                     	;# 
  3024  0E29                     	;# 
  3025  0E2A                     	;# 
  3026  0E2B                     	;# 
  3027  0E2C                     	;# 
  3028  0E2D                     	;# 
  3029  0E2E                     	;# 
  3030  0E2F                     	;# 
  3031  0E30                     	;# 
  3032  0E31                     	;# 
  3033  0E32                     	;# 
  3034  0E33                     	;# 
  3035  0E34                     	;# 
  3036  0E35                     	;# 
  3037  0E36                     	;# 
  3038  0E37                     	;# 
  3039  0E8F                     	;# 
  3040  0E90                     	;# 
  3041  0E91                     	;# 
  3042  0E92                     	;# 
  3043  0E93                     	;# 
  3044  0E94                     	;# 
  3045  0E95                     	;# 
  3046  0E96                     	;# 
  3047  0E97                     	;# 
  3048  0E9C                     	;# 
  3049  0E9D                     	;# 
  3050  0E9E                     	;# 
  3051  0EA1                     	;# 
  3052  0EA2                     	;# 
  3053  0EA3                     	;# 
  3054  0EA4                     	;# 
  3055  0EA5                     	;# 
  3056  0EA9                     	;# 
  3057  0EAA                     	;# 
  3058  0EAB                     	;# 
  3059  0EAC                     	;# 
  3060  0EB1                     	;# 
  3061  0EB2                     	;# 
  3062  0EB3                     	;# 
  3063  0EB8                     	;# 
  3064  0EB9                     	;# 
  3065  0EBA                     	;# 
  3066  0EBB                     	;# 
  3067  0EBC                     	;# 
  3068  0EBD                     	;# 
  3069  0EBE                     	;# 
  3070  0EC3                     	;# 
  3071  0EC5                     	;# 
  3072  0EC6                     	;# 
  3073  0EC7                     	;# 
  3074  0EC8                     	;# 
  3075  0EC9                     	;# 
  3076  0ECA                     	;# 
  3077  0ECB                     	;# 
  3078  0ECC                     	;# 
  3079  0F10                     	;# 
  3080  0F11                     	;# 
  3081  0F12                     	;# 
  3082  0F13                     	;# 
  3083  0F14                     	;# 
  3084  0F15                     	;# 
  3085  0F16                     	;# 
  3086  0F17                     	;# 
  3087  0F18                     	;# 
  3088  0F19                     	;# 
  3089  0F1A                     	;# 
  3090  0F1B                     	;# 
  3091  0F1C                     	;# 
  3092  0F1D                     	;# 
  3093  0F1E                     	;# 
  3094  0F1F                     	;# 
  3095  0F20                     	;# 
  3096  0F21                     	;# 
  3097  0F22                     	;# 
  3098  0F23                     	;# 
  3099  0F24                     	;# 
  3100  0F25                     	;# 
  3101  0F26                     	;# 
  3102  0F27                     	;# 
  3103  0F38                     	;# 
  3104  0F39                     	;# 
  3105  0F3A                     	;# 
  3106  0F3B                     	;# 
  3107  0F3C                     	;# 
  3108  0F3D                     	;# 
  3109  0F3E                     	;# 
  3110  0F3F                     	;# 
  3111  0F40                     	;# 
  3112  0F41                     	;# 
  3113  0F43                     	;# 
  3114  0F44                     	;# 
  3115  0F45                     	;# 
  3116  0F46                     	;# 
  3117  0F47                     	;# 
  3118  0F48                     	;# 
  3119  0F49                     	;# 
  3120  0F4A                     	;# 
  3121  0F4B                     	;# 
  3122  0F4C                     	;# 
  3123  0F4E                     	;# 
  3124  0F4F                     	;# 
  3125  0F50                     	;# 
  3126  0F51                     	;# 
  3127  0F52                     	;# 
  3128  0F53                     	;# 
  3129  0F54                     	;# 
  3130  0F55                     	;# 
  3131  0F56                     	;# 
  3132  0F57                     	;# 
  3133  0F65                     	;# 
  3134  0F68                     	;# 
  3135  0F69                     	;# 
  3136  0F6A                     	;# 
  3137  0F6B                     	;# 
  3138  0FE4                     	;# 
  3139  0FE5                     	;# 
  3140  0FE6                     	;# 
  3141  0FE7                     	;# 
  3142  0FE8                     	;# 
  3143  0FE9                     	;# 
  3144  0FEA                     	;# 
  3145  0FEB                     	;# 
  3146  0FED                     	;# 
  3147  0FEE                     	;# 
  3148  0FEF                     	;# 
  3149  0000                     	;# 
  3150  0001                     	;# 
  3151  0002                     	;# 
  3152  0003                     	;# 
  3153  0004                     	;# 
  3154  0005                     	;# 
  3155  0006                     	;# 
  3156  0007                     	;# 
  3157  0008                     	;# 
  3158  0009                     	;# 
  3159  000A                     	;# 
  3160  000B                     	;# 
  3161  000C                     	;# 
  3162  000D                     	;# 
  3163  000E                     	;# 
  3164  0010                     	;# 
  3165  0011                     	;# 
  3166  0012                     	;# 
  3167  0013                     	;# 
  3168  0016                     	;# 
  3169  0017                     	;# 
  3170  0018                     	;# 
  3171  001C                     	;# 
  3172  001C                     	;# 
  3173  001D                     	;# 
  3174  001D                     	;# 
  3175  001E                     	;# 
  3176  001F                     	;# 
  3177  008C                     	;# 
  3178  008C                     	;# 
  3179  008D                     	;# 
  3180  008E                     	;# 
  3181  008E                     	;# 
  3182  008F                     	;# 
  3183  0090                     	;# 
  3184  0090                     	;# 
  3185  0091                     	;# 
  3186  0093                     	;# 
  3187  0094                     	;# 
  3188  0095                     	;# 
  3189  0096                     	;# 
  3190  0097                     	;# 
  3191  0098                     	;# 
  3192  0099                     	;# 
  3193  009A                     	;# 
  3194  009B                     	;# 
  3195  009C                     	;# 
  3196  009D                     	;# 
  3197  009E                     	;# 
  3198  010C                     	;# 
  3199  010D                     	;# 
  3200  010E                     	;# 
  3201  010E                     	;# 
  3202  010F                     	;# 
  3203  0110                     	;# 
  3204  0110                     	;# 
  3205  0111                     	;# 
  3206  0112                     	;# 
  3207  0112                     	;# 
  3208  0113                     	;# 
  3209  0114                     	;# 
  3210  0114                     	;# 
  3211  0115                     	;# 
  3212  0116                     	;# 
  3213  0116                     	;# 
  3214  0117                     	;# 
  3215  0119                     	;# 
  3216  0119                     	;# 
  3217  0119                     	;# 
  3218  011A                     	;# 
  3219  011A                     	;# 
  3220  011A                     	;# 
  3221  011B                     	;# 
  3222  011B                     	;# 
  3223  011B                     	;# 
  3224  011B                     	;# 
  3225  011B                     	;# 
  3226  011C                     	;# 
  3227  011C                     	;# 
  3228  011C                     	;# 
  3229  011D                     	;# 
  3230  011D                     	;# 
  3231  011D                     	;# 
  3232  011E                     	;# 
  3233  011E                     	;# 
  3234  011E                     	;# 
  3235  011F                     	;# 
  3236  011F                     	;# 
  3237  011F                     	;# 
  3238  011F                     	;# 
  3239  011F                     	;# 
  3240  018C                     	;# 
  3241  018D                     	;# 
  3242  018E                     	;# 
  3243  018F                     	;# 
  3244  0190                     	;# 
  3245  0191                     	;# 
  3246  0192                     	;# 
  3247  0196                     	;# 
  3248  0197                     	;# 
  3249  0198                     	;# 
  3250  0199                     	;# 
  3251  019A                     	;# 
  3252  019B                     	;# 
  3253  019C                     	;# 
  3254  020C                     	;# 
  3255  020D                     	;# 
  3256  020E                     	;# 
  3257  020F                     	;# 
  3258  020F                     	;# 
  3259  0210                     	;# 
  3260  0210                     	;# 
  3261  0211                     	;# 
  3262  0211                     	;# 
  3263  0212                     	;# 
  3264  0213                     	;# 
  3265  0214                     	;# 
  3266  0215                     	;# 
  3267  0215                     	;# 
  3268  0216                     	;# 
  3269  0216                     	;# 
  3270  0217                     	;# 
  3271  0217                     	;# 
  3272  0218                     	;# 
  3273  0219                     	;# 
  3274  021A                     	;# 
  3275  021B                     	;# 
  3276  021B                     	;# 
  3277  021C                     	;# 
  3278  021C                     	;# 
  3279  021D                     	;# 
  3280  021D                     	;# 
  3281  021E                     	;# 
  3282  021F                     	;# 
  3283  028C                     	;# 
  3284  028C                     	;# 
  3285  028D                     	;# 
  3286  028D                     	;# 
  3287  028E                     	;# 
  3288  028F                     	;# 
  3289  0290                     	;# 
  3290  0290                     	;# 
  3291  0291                     	;# 
  3292  0292                     	;# 
  3293  0292                     	;# 
  3294  0293                     	;# 
  3295  0293                     	;# 
  3296  0294                     	;# 
  3297  0295                     	;# 
  3298  0296                     	;# 
  3299  0296                     	;# 
  3300  0297                     	;# 
  3301  0298                     	;# 
  3302  0298                     	;# 
  3303  0299                     	;# 
  3304  0299                     	;# 
  3305  029A                     	;# 
  3306  029B                     	;# 
  3307  029C                     	;# 
  3308  029C                     	;# 
  3309  029D                     	;# 
  3310  030C                     	;# 
  3311  030C                     	;# 
  3312  030D                     	;# 
  3313  030E                     	;# 
  3314  030F                     	;# 
  3315  0310                     	;# 
  3316  0310                     	;# 
  3317  0311                     	;# 
  3318  0312                     	;# 
  3319  0313                     	;# 
  3320  0314                     	;# 
  3321  0314                     	;# 
  3322  0315                     	;# 
  3323  0316                     	;# 
  3324  0317                     	;# 
  3325  0318                     	;# 
  3326  0318                     	;# 
  3327  0319                     	;# 
  3328  031A                     	;# 
  3329  031B                     	;# 
  3330  031C                     	;# 
  3331  031C                     	;# 
  3332  031D                     	;# 
  3333  031E                     	;# 
  3334  031F                     	;# 
  3335  038C                     	;# 
  3336  038D                     	;# 
  3337  038E                     	;# 
  3338  0390                     	;# 
  3339  0391                     	;# 
  3340  0392                     	;# 
  3341  040C                     	;# 
  3342  040D                     	;# 
  3343  040E                     	;# 
  3344  040F                     	;# 
  3345  0410                     	;# 
  3346  0411                     	;# 
  3347  0416                     	;# 
  3348  0416                     	;# 
  3349  0417                     	;# 
  3350  0418                     	;# 
  3351  0418                     	;# 
  3352  0419                     	;# 
  3353  041A                     	;# 
  3354  041A                     	;# 
  3355  041B                     	;# 
  3356  041C                     	;# 
  3357  041C                     	;# 
  3358  041D                     	;# 
  3359  041E                     	;# 
  3360  041F                     	;# 
  3361  048C                     	;# 
  3362  048C                     	;# 
  3363  048D                     	;# 
  3364  048E                     	;# 
  3365  048F                     	;# 
  3366  048F                     	;# 
  3367  0490                     	;# 
  3368  0491                     	;# 
  3369  0492                     	;# 
  3370  0492                     	;# 
  3371  0493                     	;# 
  3372  0494                     	;# 
  3373  0495                     	;# 
  3374  0495                     	;# 
  3375  0496                     	;# 
  3376  0497                     	;# 
  3377  0498                     	;# 
  3378  0499                     	;# 
  3379  049A                     	;# 
  3380  049B                     	;# 
  3381  049C                     	;# 
  3382  049D                     	;# 
  3383  050C                     	;# 
  3384  050C                     	;# 
  3385  050D                     	;# 
  3386  050E                     	;# 
  3387  050F                     	;# 
  3388  050F                     	;# 
  3389  0510                     	;# 
  3390  0511                     	;# 
  3391  0512                     	;# 
  3392  0512                     	;# 
  3393  0513                     	;# 
  3394  0514                     	;# 
  3395  0515                     	;# 
  3396  0515                     	;# 
  3397  0516                     	;# 
  3398  0517                     	;# 
  3399  0518                     	;# 
  3400  0519                     	;# 
  3401  051A                     	;# 
  3402  051B                     	;# 
  3403  051C                     	;# 
  3404  051D                     	;# 
  3405  058C                     	;# 
  3406  058C                     	;# 
  3407  058D                     	;# 
  3408  058E                     	;# 
  3409  058F                     	;# 
  3410  058F                     	;# 
  3411  0590                     	;# 
  3412  0591                     	;# 
  3413  0592                     	;# 
  3414  0593                     	;# 
  3415  060C                     	;# 
  3416  060D                     	;# 
  3417  060E                     	;# 
  3418  060F                     	;# 
  3419  0610                     	;# 
  3420  0611                     	;# 
  3421  0612                     	;# 
  3422  0613                     	;# 
  3423  0614                     	;# 
  3424  0616                     	;# 
  3425  0617                     	;# 
  3426  0618                     	;# 
  3427  0619                     	;# 
  3428  061A                     	;# 
  3429  061B                     	;# 
  3430  061C                     	;# 
  3431  061D                     	;# 
  3432  061E                     	;# 
  3433  068C                     	;# 
  3434  068D                     	;# 
  3435  068E                     	;# 
  3436  068F                     	;# 
  3437  0690                     	;# 
  3438  0691                     	;# 
  3439  0692                     	;# 
  3440  0693                     	;# 
  3441  0694                     	;# 
  3442  070C                     	;# 
  3443  070D                     	;# 
  3444  070E                     	;# 
  3445  070F                     	;# 
  3446  0710                     	;# 
  3447  0711                     	;# 
  3448  0712                     	;# 
  3449  0713                     	;# 
  3450  0714                     	;# 
  3451  0716                     	;# 
  3452  0717                     	;# 
  3453  0718                     	;# 
  3454  0719                     	;# 
  3455  071A                     	;# 
  3456  071B                     	;# 
  3457  071C                     	;# 
  3458  071D                     	;# 
  3459  071E                     	;# 
  3460  0796                     	;# 
  3461  0797                     	;# 
  3462  0798                     	;# 
  3463  0799                     	;# 
  3464  079A                     	;# 
  3465  079B                     	;# 
  3466  080C                     	;# 
  3467  080D                     	;# 
  3468  080E                     	;# 
  3469  080F                     	;# 
  3470  0810                     	;# 
  3471  0811                     	;# 
  3472  0812                     	;# 
  3473  0813                     	;# 
  3474  0814                     	;# 
  3475  081A                     	;# 
  3476  081B                     	;# 
  3477  081C                     	;# 
  3478  081D                     	;# 
  3479  081E                     	;# 
  3480  081F                     	;# 
  3481  088C                     	;# 
  3482  088D                     	;# 
  3483  088E                     	;# 
  3484  088F                     	;# 
  3485  0890                     	;# 
  3486  0891                     	;# 
  3487  0892                     	;# 
  3488  0893                     	;# 
  3489  0895                     	;# 
  3490  0896                     	;# 
  3491  0897                     	;# 
  3492  0898                     	;# 
  3493  0899                     	;# 
  3494  089A                     	;# 
  3495  089B                     	;# 
  3496  090C                     	;# 
  3497  090E                     	;# 
  3498  090F                     	;# 
  3499  091F                     	;# 
  3500  091F                     	;# 
  3501  098F                     	;# 
  3502  098F                     	;# 
  3503  0990                     	;# 
  3504  0991                     	;# 
  3505  0992                     	;# 
  3506  0993                     	;# 
  3507  0994                     	;# 
  3508  0995                     	;# 
  3509  0996                     	;# 
  3510  0997                     	;# 
  3511  0E0F                     	;# 
  3512  0E10                     	;# 
  3513  0E11                     	;# 
  3514  0E12                     	;# 
  3515  0E13                     	;# 
  3516  0E14                     	;# 
  3517  0E15                     	;# 
  3518  0E16                     	;# 
  3519  0E17                     	;# 
  3520  0E18                     	;# 
  3521  0E19                     	;# 
  3522  0E1A                     	;# 
  3523  0E1B                     	;# 
  3524  0E1C                     	;# 
  3525  0E1D                     	;# 
  3526  0E1E                     	;# 
  3527  0E1F                     	;# 
  3528  0E20                     	;# 
  3529  0E21                     	;# 
  3530  0E22                     	;# 
  3531  0E23                     	;# 
  3532  0E24                     	;# 
  3533  0E25                     	;# 
  3534  0E26                     	;# 
  3535  0E27                     	;# 
  3536  0E28                     	;# 
  3537  0E29                     	;# 
  3538  0E2A                     	;# 
  3539  0E2B                     	;# 
  3540  0E2C                     	;# 
  3541  0E2D                     	;# 
  3542  0E2E                     	;# 
  3543  0E2F                     	;# 
  3544  0E30                     	;# 
  3545  0E31                     	;# 
  3546  0E32                     	;# 
  3547  0E33                     	;# 
  3548  0E34                     	;# 
  3549  0E35                     	;# 
  3550  0E36                     	;# 
  3551  0E37                     	;# 
  3552  0E8F                     	;# 
  3553  0E90                     	;# 
  3554  0E91                     	;# 
  3555  0E92                     	;# 
  3556  0E93                     	;# 
  3557  0E94                     	;# 
  3558  0E95                     	;# 
  3559  0E96                     	;# 
  3560  0E97                     	;# 
  3561  0E9C                     	;# 
  3562  0E9D                     	;# 
  3563  0E9E                     	;# 
  3564  0EA1                     	;# 
  3565  0EA2                     	;# 
  3566  0EA3                     	;# 
  3567  0EA4                     	;# 
  3568  0EA5                     	;# 
  3569  0EA9                     	;# 
  3570  0EAA                     	;# 
  3571  0EAB                     	;# 
  3572  0EAC                     	;# 
  3573  0EB1                     	;# 
  3574  0EB2                     	;# 
  3575  0EB3                     	;# 
  3576  0EB8                     	;# 
  3577  0EB9                     	;# 
  3578  0EBA                     	;# 
  3579  0EBB                     	;# 
  3580  0EBC                     	;# 
  3581  0EBD                     	;# 
  3582  0EBE                     	;# 
  3583  0EC3                     	;# 
  3584  0EC5                     	;# 
  3585  0EC6                     	;# 
  3586  0EC7                     	;# 
  3587  0EC8                     	;# 
  3588  0EC9                     	;# 
  3589  0ECA                     	;# 
  3590  0ECB                     	;# 
  3591  0ECC                     	;# 
  3592  0F10                     	;# 
  3593  0F11                     	;# 
  3594  0F12                     	;# 
  3595  0F13                     	;# 
  3596  0F14                     	;# 
  3597  0F15                     	;# 
  3598  0F16                     	;# 
  3599  0F17                     	;# 
  3600  0F18                     	;# 
  3601  0F19                     	;# 
  3602  0F1A                     	;# 
  3603  0F1B                     	;# 
  3604  0F1C                     	;# 
  3605  0F1D                     	;# 
  3606  0F1E                     	;# 
  3607  0F1F                     	;# 
  3608  0F20                     	;# 
  3609  0F21                     	;# 
  3610  0F22                     	;# 
  3611  0F23                     	;# 
  3612  0F24                     	;# 
  3613  0F25                     	;# 
  3614  0F26                     	;# 
  3615  0F27                     	;# 
  3616  0F38                     	;# 
  3617  0F39                     	;# 
  3618  0F3A                     	;# 
  3619  0F3B                     	;# 
  3620  0F3C                     	;# 
  3621  0F3D                     	;# 
  3622  0F3E                     	;# 
  3623  0F3F                     	;# 
  3624  0F40                     	;# 
  3625  0F41                     	;# 
  3626  0F43                     	;# 
  3627  0F44                     	;# 
  3628  0F45                     	;# 
  3629  0F46                     	;# 
  3630  0F47                     	;# 
  3631  0F48                     	;# 
  3632  0F49                     	;# 
  3633  0F4A                     	;# 
  3634  0F4B                     	;# 
  3635  0F4C                     	;# 
  3636  0F4E                     	;# 
  3637  0F4F                     	;# 
  3638  0F50                     	;# 
  3639  0F51                     	;# 
  3640  0F52                     	;# 
  3641  0F53                     	;# 
  3642  0F54                     	;# 
  3643  0F55                     	;# 
  3644  0F56                     	;# 
  3645  0F57                     	;# 
  3646  0F65                     	;# 
  3647  0F68                     	;# 
  3648  0F69                     	;# 
  3649  0F6A                     	;# 
  3650  0F6B                     	;# 
  3651  0FE4                     	;# 
  3652  0FE5                     	;# 
  3653  0FE6                     	;# 
  3654  0FE7                     	;# 
  3655  0FE8                     	;# 
  3656  0FE9                     	;# 
  3657  0FEA                     	;# 
  3658  0FEB                     	;# 
  3659  0FED                     	;# 
  3660  0FEE                     	;# 
  3661  0FEF                     	;# 
  3662  0000                     	;# 
  3663  0001                     	;# 
  3664  0002                     	;# 
  3665  0003                     	;# 
  3666  0004                     	;# 
  3667  0005                     	;# 
  3668  0006                     	;# 
  3669  0007                     	;# 
  3670  0008                     	;# 
  3671  0009                     	;# 
  3672  000A                     	;# 
  3673  000B                     	;# 
  3674  000C                     	;# 
  3675  000D                     	;# 
  3676  000E                     	;# 
  3677  0010                     	;# 
  3678  0011                     	;# 
  3679  0012                     	;# 
  3680  0013                     	;# 
  3681  0016                     	;# 
  3682  0017                     	;# 
  3683  0018                     	;# 
  3684  001C                     	;# 
  3685  001C                     	;# 
  3686  001D                     	;# 
  3687  001D                     	;# 
  3688  001E                     	;# 
  3689  001F                     	;# 
  3690  008C                     	;# 
  3691  008C                     	;# 
  3692  008D                     	;# 
  3693  008E                     	;# 
  3694  008E                     	;# 
  3695  008F                     	;# 
  3696  0090                     	;# 
  3697  0090                     	;# 
  3698  0091                     	;# 
  3699  0093                     	;# 
  3700  0094                     	;# 
  3701  0095                     	;# 
  3702  0096                     	;# 
  3703  0097                     	;# 
  3704  0098                     	;# 
  3705  0099                     	;# 
  3706  009A                     	;# 
  3707  009B                     	;# 
  3708  009C                     	;# 
  3709  009D                     	;# 
  3710  009E                     	;# 
  3711  010C                     	;# 
  3712  010D                     	;# 
  3713  010E                     	;# 
  3714  010E                     	;# 
  3715  010F                     	;# 
  3716  0110                     	;# 
  3717  0110                     	;# 
  3718  0111                     	;# 
  3719  0112                     	;# 
  3720  0112                     	;# 
  3721  0113                     	;# 
  3722  0114                     	;# 
  3723  0114                     	;# 
  3724  0115                     	;# 
  3725  0116                     	;# 
  3726  0116                     	;# 
  3727  0117                     	;# 
  3728  0119                     	;# 
  3729  0119                     	;# 
  3730  0119                     	;# 
  3731  011A                     	;# 
  3732  011A                     	;# 
  3733  011A                     	;# 
  3734  011B                     	;# 
  3735  011B                     	;# 
  3736  011B                     	;# 
  3737  011B                     	;# 
  3738  011B                     	;# 
  3739  011C                     	;# 
  3740  011C                     	;# 
  3741  011C                     	;# 
  3742  011D                     	;# 
  3743  011D                     	;# 
  3744  011D                     	;# 
  3745  011E                     	;# 
  3746  011E                     	;# 
  3747  011E                     	;# 
  3748  011F                     	;# 
  3749  011F                     	;# 
  3750  011F                     	;# 
  3751  011F                     	;# 
  3752  011F                     	;# 
  3753  018C                     	;# 
  3754  018D                     	;# 
  3755  018E                     	;# 
  3756  018F                     	;# 
  3757  0190                     	;# 
  3758  0191                     	;# 
  3759  0192                     	;# 
  3760  0196                     	;# 
  3761  0197                     	;# 
  3762  0198                     	;# 
  3763  0199                     	;# 
  3764  019A                     	;# 
  3765  019B                     	;# 
  3766  019C                     	;# 
  3767  020C                     	;# 
  3768  020D                     	;# 
  3769  020E                     	;# 
  3770  020F                     	;# 
  3771  020F                     	;# 
  3772  0210                     	;# 
  3773  0210                     	;# 
  3774  0211                     	;# 
  3775  0211                     	;# 
  3776  0212                     	;# 
  3777  0213                     	;# 
  3778  0214                     	;# 
  3779  0215                     	;# 
  3780  0215                     	;# 
  3781  0216                     	;# 
  3782  0216                     	;# 
  3783  0217                     	;# 
  3784  0217                     	;# 
  3785  0218                     	;# 
  3786  0219                     	;# 
  3787  021A                     	;# 
  3788  021B                     	;# 
  3789  021B                     	;# 
  3790  021C                     	;# 
  3791  021C                     	;# 
  3792  021D                     	;# 
  3793  021D                     	;# 
  3794  021E                     	;# 
  3795  021F                     	;# 
  3796  028C                     	;# 
  3797  028C                     	;# 
  3798  028D                     	;# 
  3799  028D                     	;# 
  3800  028E                     	;# 
  3801  028F                     	;# 
  3802  0290                     	;# 
  3803  0290                     	;# 
  3804  0291                     	;# 
  3805  0292                     	;# 
  3806  0292                     	;# 
  3807  0293                     	;# 
  3808  0293                     	;# 
  3809  0294                     	;# 
  3810  0295                     	;# 
  3811  0296                     	;# 
  3812  0296                     	;# 
  3813  0297                     	;# 
  3814  0298                     	;# 
  3815  0298                     	;# 
  3816  0299                     	;# 
  3817  0299                     	;# 
  3818  029A                     	;# 
  3819  029B                     	;# 
  3820  029C                     	;# 
  3821  029C                     	;# 
  3822  029D                     	;# 
  3823  030C                     	;# 
  3824  030C                     	;# 
  3825  030D                     	;# 
  3826  030E                     	;# 
  3827  030F                     	;# 
  3828  0310                     	;# 
  3829  0310                     	;# 
  3830  0311                     	;# 
  3831  0312                     	;# 
  3832  0313                     	;# 
  3833  0314                     	;# 
  3834  0314                     	;# 
  3835  0315                     	;# 
  3836  0316                     	;# 
  3837  0317                     	;# 
  3838  0318                     	;# 
  3839  0318                     	;# 
  3840  0319                     	;# 
  3841  031A                     	;# 
  3842  031B                     	;# 
  3843  031C                     	;# 
  3844  031C                     	;# 
  3845  031D                     	;# 
  3846  031E                     	;# 
  3847  031F                     	;# 
  3848  038C                     	;# 
  3849  038D                     	;# 
  3850  038E                     	;# 
  3851  0390                     	;# 
  3852  0391                     	;# 
  3853  0392                     	;# 
  3854  040C                     	;# 
  3855  040D                     	;# 
  3856  040E                     	;# 
  3857  040F                     	;# 
  3858  0410                     	;# 
  3859  0411                     	;# 
  3860  0416                     	;# 
  3861  0416                     	;# 
  3862  0417                     	;# 
  3863  0418                     	;# 
  3864  0418                     	;# 
  3865  0419                     	;# 
  3866  041A                     	;# 
  3867  041A                     	;# 
  3868  041B                     	;# 
  3869  041C                     	;# 
  3870  041C                     	;# 
  3871  041D                     	;# 
  3872  041E                     	;# 
  3873  041F                     	;# 
  3874  048C                     	;# 
  3875  048C                     	;# 
  3876  048D                     	;# 
  3877  048E                     	;# 
  3878  048F                     	;# 
  3879  048F                     	;# 
  3880  0490                     	;# 
  3881  0491                     	;# 
  3882  0492                     	;# 
  3883  0492                     	;# 
  3884  0493                     	;# 
  3885  0494                     	;# 
  3886  0495                     	;# 
  3887  0495                     	;# 
  3888  0496                     	;# 
  3889  0497                     	;# 
  3890  0498                     	;# 
  3891  0499                     	;# 
  3892  049A                     	;# 
  3893  049B                     	;# 
  3894  049C                     	;# 
  3895  049D                     	;# 
  3896  050C                     	;# 
  3897  050C                     	;# 
  3898  050D                     	;# 
  3899  050E                     	;# 
  3900  050F                     	;# 
  3901  050F                     	;# 
  3902  0510                     	;# 
  3903  0511                     	;# 
  3904  0512                     	;# 
  3905  0512                     	;# 
  3906  0513                     	;# 
  3907  0514                     	;# 
  3908  0515                     	;# 
  3909  0515                     	;# 
  3910  0516                     	;# 
  3911  0517                     	;# 
  3912  0518                     	;# 
  3913  0519                     	;# 
  3914  051A                     	;# 
  3915  051B                     	;# 
  3916  051C                     	;# 
  3917  051D                     	;# 
  3918  058C                     	;# 
  3919  058C                     	;# 
  3920  058D                     	;# 
  3921  058E                     	;# 
  3922  058F                     	;# 
  3923  058F                     	;# 
  3924  0590                     	;# 
  3925  0591                     	;# 
  3926  0592                     	;# 
  3927  0593                     	;# 
  3928  060C                     	;# 
  3929  060D                     	;# 
  3930  060E                     	;# 
  3931  060F                     	;# 
  3932  0610                     	;# 
  3933  0611                     	;# 
  3934  0612                     	;# 
  3935  0613                     	;# 
  3936  0614                     	;# 
  3937  0616                     	;# 
  3938  0617                     	;# 
  3939  0618                     	;# 
  3940  0619                     	;# 
  3941  061A                     	;# 
  3942  061B                     	;# 
  3943  061C                     	;# 
  3944  061D                     	;# 
  3945  061E                     	;# 
  3946  068C                     	;# 
  3947  068D                     	;# 
  3948  068E                     	;# 
  3949  068F                     	;# 
  3950  0690                     	;# 
  3951  0691                     	;# 
  3952  0692                     	;# 
  3953  0693                     	;# 
  3954  0694                     	;# 
  3955  070C                     	;# 
  3956  070D                     	;# 
  3957  070E                     	;# 
  3958  070F                     	;# 
  3959  0710                     	;# 
  3960  0711                     	;# 
  3961  0712                     	;# 
  3962  0713                     	;# 
  3963  0714                     	;# 
  3964  0716                     	;# 
  3965  0717                     	;# 
  3966  0718                     	;# 
  3967  0719                     	;# 
  3968  071A                     	;# 
  3969  071B                     	;# 
  3970  071C                     	;# 
  3971  071D                     	;# 
  3972  071E                     	;# 
  3973  0796                     	;# 
  3974  0797                     	;# 
  3975  0798                     	;# 
  3976  0799                     	;# 
  3977  079A                     	;# 
  3978  079B                     	;# 
  3979  080C                     	;# 
  3980  080D                     	;# 
  3981  080E                     	;# 
  3982  080F                     	;# 
  3983  0810                     	;# 
  3984  0811                     	;# 
  3985  0812                     	;# 
  3986  0813                     	;# 
  3987  0814                     	;# 
  3988  081A                     	;# 
  3989  081B                     	;# 
  3990  081C                     	;# 
  3991  081D                     	;# 
  3992  081E                     	;# 
  3993  081F                     	;# 
  3994  088C                     	;# 
  3995  088D                     	;# 
  3996  088E                     	;# 
  3997  088F                     	;# 
  3998  0890                     	;# 
  3999  0891                     	;# 
  4000  0892                     	;# 
  4001  0893                     	;# 
  4002  0895                     	;# 
  4003  0896                     	;# 
  4004  0897                     	;# 
  4005  0898                     	;# 
  4006  0899                     	;# 
  4007  089A                     	;# 
  4008  089B                     	;# 
  4009  090C                     	;# 
  4010  090E                     	;# 
  4011  090F                     	;# 
  4012  091F                     	;# 
  4013  091F                     	;# 
  4014  098F                     	;# 
  4015  098F                     	;# 
  4016  0990                     	;# 
  4017  0991                     	;# 
  4018  0992                     	;# 
  4019  0993                     	;# 
  4020  0994                     	;# 
  4021  0995                     	;# 
  4022  0996                     	;# 
  4023  0997                     	;# 
  4024  0E0F                     	;# 
  4025  0E10                     	;# 
  4026  0E11                     	;# 
  4027  0E12                     	;# 
  4028  0E13                     	;# 
  4029  0E14                     	;# 
  4030  0E15                     	;# 
  4031  0E16                     	;# 
  4032  0E17                     	;# 
  4033  0E18                     	;# 
  4034  0E19                     	;# 
  4035  0E1A                     	;# 
  4036  0E1B                     	;# 
  4037  0E1C                     	;# 
  4038  0E1D                     	;# 
  4039  0E1E                     	;# 
  4040  0E1F                     	;# 
  4041  0E20                     	;# 
  4042  0E21                     	;# 
  4043  0E22                     	;# 
  4044  0E23                     	;# 
  4045  0E24                     	;# 
  4046  0E25                     	;# 
  4047  0E26                     	;# 
  4048  0E27                     	;# 
  4049  0E28                     	;# 
  4050  0E29                     	;# 
  4051  0E2A                     	;# 
  4052  0E2B                     	;# 
  4053  0E2C                     	;# 
  4054  0E2D                     	;# 
  4055  0E2E                     	;# 
  4056  0E2F                     	;# 
  4057  0E30                     	;# 
  4058  0E31                     	;# 
  4059  0E32                     	;# 
  4060  0E33                     	;# 
  4061  0E34                     	;# 
  4062  0E35                     	;# 
  4063  0E36                     	;# 
  4064  0E37                     	;# 
  4065  0E8F                     	;# 
  4066  0E90                     	;# 
  4067  0E91                     	;# 
  4068  0E92                     	;# 
  4069  0E93                     	;# 
  4070  0E94                     	;# 
  4071  0E95                     	;# 
  4072  0E96                     	;# 
  4073  0E97                     	;# 
  4074  0E9C                     	;# 
  4075  0E9D                     	;# 
  4076  0E9E                     	;# 
  4077  0EA1                     	;# 
  4078  0EA2                     	;# 
  4079  0EA3                     	;# 
  4080  0EA4                     	;# 
  4081  0EA5                     	;# 
  4082  0EA9                     	;# 
  4083  0EAA                     	;# 
  4084  0EAB                     	;# 
  4085  0EAC                     	;# 
  4086  0EB1                     	;# 
  4087  0EB2                     	;# 
  4088  0EB3                     	;# 
  4089  0EB8                     	;# 
  4090  0EB9                     	;# 
  4091  0EBA                     	;# 
  4092  0EBB                     	;# 
  4093  0EBC                     	;# 
  4094  0EBD                     	;# 
  4095  0EBE                     	;# 
  4096  0EC3                     	;# 
  4097  0EC5                     	;# 
  4098  0EC6                     	;# 
  4099  0EC7                     	;# 
  4100  0EC8                     	;# 
  4101  0EC9                     	;# 
  4102  0ECA                     	;# 
  4103  0ECB                     	;# 
  4104  0ECC                     	;# 
  4105  0F10                     	;# 
  4106  0F11                     	;# 
  4107  0F12                     	;# 
  4108  0F13                     	;# 
  4109  0F14                     	;# 
  4110  0F15                     	;# 
  4111  0F16                     	;# 
  4112  0F17                     	;# 
  4113  0F18                     	;# 
  4114  0F19                     	;# 
  4115  0F1A                     	;# 
  4116  0F1B                     	;# 
  4117  0F1C                     	;# 
  4118  0F1D                     	;# 
  4119  0F1E                     	;# 
  4120  0F1F                     	;# 
  4121  0F20                     	;# 
  4122  0F21                     	;# 
  4123  0F22                     	;# 
  4124  0F23                     	;# 
  4125  0F24                     	;# 
  4126  0F25                     	;# 
  4127  0F26                     	;# 
  4128  0F27                     	;# 
  4129  0F38                     	;# 
  4130  0F39                     	;# 
  4131  0F3A                     	;# 
  4132  0F3B                     	;# 
  4133  0F3C                     	;# 
  4134  0F3D                     	;# 
  4135  0F3E                     	;# 
  4136  0F3F                     	;# 
  4137  0F40                     	;# 
  4138  0F41                     	;# 
  4139  0F43                     	;# 
  4140  0F44                     	;# 
  4141  0F45                     	;# 
  4142  0F46                     	;# 
  4143  0F47                     	;# 
  4144  0F48                     	;# 
  4145  0F49                     	;# 
  4146  0F4A                     	;# 
  4147  0F4B                     	;# 
  4148  0F4C                     	;# 
  4149  0F4E                     	;# 
  4150  0F4F                     	;# 
  4151  0F50                     	;# 
  4152  0F51                     	;# 
  4153  0F52                     	;# 
  4154  0F53                     	;# 
  4155  0F54                     	;# 
  4156  0F55                     	;# 
  4157  0F56                     	;# 
  4158  0F57                     	;# 
  4159  0F65                     	;# 
  4160  0F68                     	;# 
  4161  0F69                     	;# 
  4162  0F6A                     	;# 
  4163  0F6B                     	;# 
  4164  0FE4                     	;# 
  4165  0FE5                     	;# 
  4166  0FE6                     	;# 
  4167  0FE7                     	;# 
  4168  0FE8                     	;# 
  4169  0FE9                     	;# 
  4170  0FEA                     	;# 
  4171  0FEB                     	;# 
  4172  0FED                     	;# 
  4173  0FEE                     	;# 
  4174  0FEF                     	;# 
  4175  0000                     	;# 
  4176  0001                     	;# 
  4177  0002                     	;# 
  4178  0003                     	;# 
  4179  0004                     	;# 
  4180  0005                     	;# 
  4181  0006                     	;# 
  4182  0007                     	;# 
  4183  0008                     	;# 
  4184  0009                     	;# 
  4185  000A                     	;# 
  4186  000B                     	;# 
  4187  000C                     	;# 
  4188  000D                     	;# 
  4189  000E                     	;# 
  4190  0010                     	;# 
  4191  0011                     	;# 
  4192  0012                     	;# 
  4193  0013                     	;# 
  4194  0016                     	;# 
  4195  0017                     	;# 
  4196  0018                     	;# 
  4197  001C                     	;# 
  4198  001C                     	;# 
  4199  001D                     	;# 
  4200  001D                     	;# 
  4201  001E                     	;# 
  4202  001F                     	;# 
  4203  008C                     	;# 
  4204  008C                     	;# 
  4205  008D                     	;# 
  4206  008E                     	;# 
  4207  008E                     	;# 
  4208  008F                     	;# 
  4209  0090                     	;# 
  4210  0090                     	;# 
  4211  0091                     	;# 
  4212  0093                     	;# 
  4213  0094                     	;# 
  4214  0095                     	;# 
  4215  0096                     	;# 
  4216  0097                     	;# 
  4217  0098                     	;# 
  4218  0099                     	;# 
  4219  009A                     	;# 
  4220  009B                     	;# 
  4221  009C                     	;# 
  4222  009D                     	;# 
  4223  009E                     	;# 
  4224  010C                     	;# 
  4225  010D                     	;# 
  4226  010E                     	;# 
  4227  010E                     	;# 
  4228  010F                     	;# 
  4229  0110                     	;# 
  4230  0110                     	;# 
  4231  0111                     	;# 
  4232  0112                     	;# 
  4233  0112                     	;# 
  4234  0113                     	;# 
  4235  0114                     	;# 
  4236  0114                     	;# 
  4237  0115                     	;# 
  4238  0116                     	;# 
  4239  0116                     	;# 
  4240  0117                     	;# 
  4241  0119                     	;# 
  4242  0119                     	;# 
  4243  0119                     	;# 
  4244  011A                     	;# 
  4245  011A                     	;# 
  4246  011A                     	;# 
  4247  011B                     	;# 
  4248  011B                     	;# 
  4249  011B                     	;# 
  4250  011B                     	;# 
  4251  011B                     	;# 
  4252  011C                     	;# 
  4253  011C                     	;# 
  4254  011C                     	;# 
  4255  011D                     	;# 
  4256  011D                     	;# 
  4257  011D                     	;# 
  4258  011E                     	;# 
  4259  011E                     	;# 
  4260  011E                     	;# 
  4261  011F                     	;# 
  4262  011F                     	;# 
  4263  011F                     	;# 
  4264  011F                     	;# 
  4265  011F                     	;# 
  4266  018C                     	;# 
  4267  018D                     	;# 
  4268  018E                     	;# 
  4269  018F                     	;# 
  4270  0190                     	;# 
  4271  0191                     	;# 
  4272  0192                     	;# 
  4273  0196                     	;# 
  4274  0197                     	;# 
  4275  0198                     	;# 
  4276  0199                     	;# 
  4277  019A                     	;# 
  4278  019B                     	;# 
  4279  019C                     	;# 
  4280  020C                     	;# 
  4281  020D                     	;# 
  4282  020E                     	;# 
  4283  020F                     	;# 
  4284  020F                     	;# 
  4285  0210                     	;# 
  4286  0210                     	;# 
  4287  0211                     	;# 
  4288  0211                     	;# 
  4289  0212                     	;# 
  4290  0213                     	;# 
  4291  0214                     	;# 
  4292  0215                     	;# 
  4293  0215                     	;# 
  4294  0216                     	;# 
  4295  0216                     	;# 
  4296  0217                     	;# 
  4297  0217                     	;# 
  4298  0218                     	;# 
  4299  0219                     	;# 
  4300  021A                     	;# 
  4301  021B                     	;# 
  4302  021B                     	;# 
  4303  021C                     	;# 
  4304  021C                     	;# 
  4305  021D                     	;# 
  4306  021D                     	;# 
  4307  021E                     	;# 
  4308  021F                     	;# 
  4309  028C                     	;# 
  4310  028C                     	;# 
  4311  028D                     	;# 
  4312  028D                     	;# 
  4313  028E                     	;# 
  4314  028F                     	;# 
  4315  0290                     	;# 
  4316  0290                     	;# 
  4317  0291                     	;# 
  4318  0292                     	;# 
  4319  0292                     	;# 
  4320  0293                     	;# 
  4321  0293                     	;# 
  4322  0294                     	;# 
  4323  0295                     	;# 
  4324  0296                     	;# 
  4325  0296                     	;# 
  4326  0297                     	;# 
  4327  0298                     	;# 
  4328  0298                     	;# 
  4329  0299                     	;# 
  4330  0299                     	;# 
  4331  029A                     	;# 
  4332  029B                     	;# 
  4333  029C                     	;# 
  4334  029C                     	;# 
  4335  029D                     	;# 
  4336  030C                     	;# 
  4337  030C                     	;# 
  4338  030D                     	;# 
  4339  030E                     	;# 
  4340  030F                     	;# 
  4341  0310                     	;# 
  4342  0310                     	;# 
  4343  0311                     	;# 
  4344  0312                     	;# 
  4345  0313                     	;# 
  4346  0314                     	;# 
  4347  0314                     	;# 
  4348  0315                     	;# 
  4349  0316                     	;# 
  4350  0317                     	;# 
  4351  0318                     	;# 
  4352  0318                     	;# 
  4353  0319                     	;# 
  4354  031A                     	;# 
  4355  031B                     	;# 
  4356  031C                     	;# 
  4357  031C                     	;# 
  4358  031D                     	;# 
  4359  031E                     	;# 
  4360  031F                     	;# 
  4361  038C                     	;# 
  4362  038D                     	;# 
  4363  038E                     	;# 
  4364  0390                     	;# 
  4365  0391                     	;# 
  4366  0392                     	;# 
  4367  040C                     	;# 
  4368  040D                     	;# 
  4369  040E                     	;# 
  4370  040F                     	;# 
  4371  0410                     	;# 
  4372  0411                     	;# 
  4373  0416                     	;# 
  4374  0416                     	;# 
  4375  0417                     	;# 
  4376  0418                     	;# 
  4377  0418                     	;# 
  4378  0419                     	;# 
  4379  041A                     	;# 
  4380  041A                     	;# 
  4381  041B                     	;# 
  4382  041C                     	;# 
  4383  041C                     	;# 
  4384  041D                     	;# 
  4385  041E                     	;# 
  4386  041F                     	;# 
  4387  048C                     	;# 
  4388  048C                     	;# 
  4389  048D                     	;# 
  4390  048E                     	;# 
  4391  048F                     	;# 
  4392  048F                     	;# 
  4393  0490                     	;# 
  4394  0491                     	;# 
  4395  0492                     	;# 
  4396  0492                     	;# 
  4397  0493                     	;# 
  4398  0494                     	;# 
  4399  0495                     	;# 
  4400  0495                     	;# 
  4401  0496                     	;# 
  4402  0497                     	;# 
  4403  0498                     	;# 
  4404  0499                     	;# 
  4405  049A                     	;# 
  4406  049B                     	;# 
  4407  049C                     	;# 
  4408  049D                     	;# 
  4409  050C                     	;# 
  4410  050C                     	;# 
  4411  050D                     	;# 
  4412  050E                     	;# 
  4413  050F                     	;# 
  4414  050F                     	;# 
  4415  0510                     	;# 
  4416  0511                     	;# 
  4417  0512                     	;# 
  4418  0512                     	;# 
  4419  0513                     	;# 
  4420  0514                     	;# 
  4421  0515                     	;# 
  4422  0515                     	;# 
  4423  0516                     	;# 
  4424  0517                     	;# 
  4425  0518                     	;# 
  4426  0519                     	;# 
  4427  051A                     	;# 
  4428  051B                     	;# 
  4429  051C                     	;# 
  4430  051D                     	;# 
  4431  058C                     	;# 
  4432  058C                     	;# 
  4433  058D                     	;# 
  4434  058E                     	;# 
  4435  058F                     	;# 
  4436  058F                     	;# 
  4437  0590                     	;# 
  4438  0591                     	;# 
  4439  0592                     	;# 
  4440  0593                     	;# 
  4441  060C                     	;# 
  4442  060D                     	;# 
  4443  060E                     	;# 
  4444  060F                     	;# 
  4445  0610                     	;# 
  4446  0611                     	;# 
  4447  0612                     	;# 
  4448  0613                     	;# 
  4449  0614                     	;# 
  4450  0616                     	;# 
  4451  0617                     	;# 
  4452  0618                     	;# 
  4453  0619                     	;# 
  4454  061A                     	;# 
  4455  061B                     	;# 
  4456  061C                     	;# 
  4457  061D                     	;# 
  4458  061E                     	;# 
  4459  068C                     	;# 
  4460  068D                     	;# 
  4461  068E                     	;# 
  4462  068F                     	;# 
  4463  0690                     	;# 
  4464  0691                     	;# 
  4465  0692                     	;# 
  4466  0693                     	;# 
  4467  0694                     	;# 
  4468  070C                     	;# 
  4469  070D                     	;# 
  4470  070E                     	;# 
  4471  070F                     	;# 
  4472  0710                     	;# 
  4473  0711                     	;# 
  4474  0712                     	;# 
  4475  0713                     	;# 
  4476  0714                     	;# 
  4477  0716                     	;# 
  4478  0717                     	;# 
  4479  0718                     	;# 
  4480  0719                     	;# 
  4481  071A                     	;# 
  4482  071B                     	;# 
  4483  071C                     	;# 
  4484  071D                     	;# 
  4485  071E                     	;# 
  4486  0796                     	;# 
  4487  0797                     	;# 
  4488  0798                     	;# 
  4489  0799                     	;# 
  4490  079A                     	;# 
  4491  079B                     	;# 
  4492  080C                     	;# 
  4493  080D                     	;# 
  4494  080E                     	;# 
  4495  080F                     	;# 
  4496  0810                     	;# 
  4497  0811                     	;# 
  4498  0812                     	;# 
  4499  0813                     	;# 
  4500  0814                     	;# 
  4501  081A                     	;# 
  4502  081B                     	;# 
  4503  081C                     	;# 
  4504  081D                     	;# 
  4505  081E                     	;# 
  4506  081F                     	;# 
  4507  088C                     	;# 
  4508  088D                     	;# 
  4509  088E                     	;# 
  4510  088F                     	;# 
  4511  0890                     	;# 
  4512  0891                     	;# 
  4513  0892                     	;# 
  4514  0893                     	;# 
  4515  0895                     	;# 
  4516  0896                     	;# 
  4517  0897                     	;# 
  4518  0898                     	;# 
  4519  0899                     	;# 
  4520  089A                     	;# 
  4521  089B                     	;# 
  4522  090C                     	;# 
  4523  090E                     	;# 
  4524  090F                     	;# 
  4525  091F                     	;# 
  4526  091F                     	;# 
  4527  098F                     	;# 
  4528  098F                     	;# 
  4529  0990                     	;# 
  4530  0991                     	;# 
  4531  0992                     	;# 
  4532  0993                     	;# 
  4533  0994                     	;# 
  4534  0995                     	;# 
  4535  0996                     	;# 
  4536  0997                     	;# 
  4537  0E0F                     	;# 
  4538  0E10                     	;# 
  4539  0E11                     	;# 
  4540  0E12                     	;# 
  4541  0E13                     	;# 
  4542  0E14                     	;# 
  4543  0E15                     	;# 
  4544  0E16                     	;# 
  4545  0E17                     	;# 
  4546  0E18                     	;# 
  4547  0E19                     	;# 
  4548  0E1A                     	;# 
  4549  0E1B                     	;# 
  4550  0E1C                     	;# 
  4551  0E1D                     	;# 
  4552  0E1E                     	;# 
  4553  0E1F                     	;# 
  4554  0E20                     	;# 
  4555  0E21                     	;# 
  4556  0E22                     	;# 
  4557  0E23                     	;# 
  4558  0E24                     	;# 
  4559  0E25                     	;# 
  4560  0E26                     	;# 
  4561  0E27                     	;# 
  4562  0E28                     	;# 
  4563  0E29                     	;# 
  4564  0E2A                     	;# 
  4565  0E2B                     	;# 
  4566  0E2C                     	;# 
  4567  0E2D                     	;# 
  4568  0E2E                     	;# 
  4569  0E2F                     	;# 
  4570  0E30                     	;# 
  4571  0E31                     	;# 
  4572  0E32                     	;# 
  4573  0E33                     	;# 
  4574  0E34                     	;# 
  4575  0E35                     	;# 
  4576  0E36                     	;# 
  4577  0E37                     	;# 
  4578  0E8F                     	;# 
  4579  0E90                     	;# 
  4580  0E91                     	;# 
  4581  0E92                     	;# 
  4582  0E93                     	;# 
  4583  0E94                     	;# 
  4584  0E95                     	;# 
  4585  0E96                     	;# 
  4586  0E97                     	;# 
  4587  0E9C                     	;# 
  4588  0E9D                     	;# 
  4589  0E9E                     	;# 
  4590  0EA1                     	;# 
  4591  0EA2                     	;# 
  4592  0EA3                     	;# 
  4593  0EA4                     	;# 
  4594  0EA5                     	;# 
  4595  0EA9                     	;# 
  4596  0EAA                     	;# 
  4597  0EAB                     	;# 
  4598  0EAC                     	;# 
  4599  0EB1                     	;# 
  4600  0EB2                     	;# 
  4601  0EB3                     	;# 
  4602  0EB8                     	;# 
  4603  0EB9                     	;# 
  4604  0EBA                     	;# 
  4605  0EBB                     	;# 
  4606  0EBC                     	;# 
  4607  0EBD                     	;# 
  4608  0EBE                     	;# 
  4609  0EC3                     	;# 
  4610  0EC5                     	;# 
  4611  0EC6                     	;# 
  4612  0EC7                     	;# 
  4613  0EC8                     	;# 
  4614  0EC9                     	;# 
  4615  0ECA                     	;# 
  4616  0ECB                     	;# 
  4617  0ECC                     	;# 
  4618  0F10                     	;# 
  4619  0F11                     	;# 
  4620  0F12                     	;# 
  4621  0F13                     	;# 
  4622  0F14                     	;# 
  4623  0F15                     	;# 
  4624  0F16                     	;# 
  4625  0F17                     	;# 
  4626  0F18                     	;# 
  4627  0F19                     	;# 
  4628  0F1A                     	;# 
  4629  0F1B                     	;# 
  4630  0F1C                     	;# 
  4631  0F1D                     	;# 
  4632  0F1E                     	;# 
  4633  0F1F                     	;# 
  4634  0F20                     	;# 
  4635  0F21                     	;# 
  4636  0F22                     	;# 
  4637  0F23                     	;# 
  4638  0F24                     	;# 
  4639  0F25                     	;# 
  4640  0F26                     	;# 
  4641  0F27                     	;# 
  4642  0F38                     	;# 
  4643  0F39                     	;# 
  4644  0F3A                     	;# 
  4645  0F3B                     	;# 
  4646  0F3C                     	;# 
  4647  0F3D                     	;# 
  4648  0F3E                     	;# 
  4649  0F3F                     	;# 
  4650  0F40                     	;# 
  4651  0F41                     	;# 
  4652  0F43                     	;# 
  4653  0F44                     	;# 
  4654  0F45                     	;# 
  4655  0F46                     	;# 
  4656  0F47                     	;# 
  4657  0F48                     	;# 
  4658  0F49                     	;# 
  4659  0F4A                     	;# 
  4660  0F4B                     	;# 
  4661  0F4C                     	;# 
  4662  0F4E                     	;# 
  4663  0F4F                     	;# 
  4664  0F50                     	;# 
  4665  0F51                     	;# 
  4666  0F52                     	;# 
  4667  0F53                     	;# 
  4668  0F54                     	;# 
  4669  0F55                     	;# 
  4670  0F56                     	;# 
  4671  0F57                     	;# 
  4672  0F65                     	;# 
  4673  0F68                     	;# 
  4674  0F69                     	;# 
  4675  0F6A                     	;# 
  4676  0F6B                     	;# 
  4677  0FE4                     	;# 
  4678  0FE5                     	;# 
  4679  0FE6                     	;# 
  4680  0FE7                     	;# 
  4681  0FE8                     	;# 
  4682  0FE9                     	;# 
  4683  0FEA                     	;# 
  4684  0FEB                     	;# 
  4685  0FED                     	;# 
  4686  0FEE                     	;# 
  4687  0FEF                     	;# 
  4688  0000                     	;# 
  4689  0001                     	;# 
  4690  0002                     	;# 
  4691  0003                     	;# 
  4692  0004                     	;# 
  4693  0005                     	;# 
  4694  0006                     	;# 
  4695  0007                     	;# 
  4696  0008                     	;# 
  4697  0009                     	;# 
  4698  000A                     	;# 
  4699  000B                     	;# 
  4700  000C                     	;# 
  4701  000D                     	;# 
  4702  000E                     	;# 
  4703  0010                     	;# 
  4704  0011                     	;# 
  4705  0012                     	;# 
  4706  0013                     	;# 
  4707  0016                     	;# 
  4708  0017                     	;# 
  4709  0018                     	;# 
  4710  001C                     	;# 
  4711  001C                     	;# 
  4712  001D                     	;# 
  4713  001D                     	;# 
  4714  001E                     	;# 
  4715  001F                     	;# 
  4716  008C                     	;# 
  4717  008C                     	;# 
  4718  008D                     	;# 
  4719  008E                     	;# 
  4720  008E                     	;# 
  4721  008F                     	;# 
  4722  0090                     	;# 
  4723  0090                     	;# 
  4724  0091                     	;# 
  4725  0093                     	;# 
  4726  0094                     	;# 
  4727  0095                     	;# 
  4728  0096                     	;# 
  4729  0097                     	;# 
  4730  0098                     	;# 
  4731  0099                     	;# 
  4732  009A                     	;# 
  4733  009B                     	;# 
  4734  009C                     	;# 
  4735  009D                     	;# 
  4736  009E                     	;# 
  4737  010C                     	;# 
  4738  010D                     	;# 
  4739  010E                     	;# 
  4740  010E                     	;# 
  4741  010F                     	;# 
  4742  0110                     	;# 
  4743  0110                     	;# 
  4744  0111                     	;# 
  4745  0112                     	;# 
  4746  0112                     	;# 
  4747  0113                     	;# 
  4748  0114                     	;# 
  4749  0114                     	;# 
  4750  0115                     	;# 
  4751  0116                     	;# 
  4752  0116                     	;# 
  4753  0117                     	;# 
  4754  0119                     	;# 
  4755  0119                     	;# 
  4756  0119                     	;# 
  4757  011A                     	;# 
  4758  011A                     	;# 
  4759  011A                     	;# 
  4760  011B                     	;# 
  4761  011B                     	;# 
  4762  011B                     	;# 
  4763  011B                     	;# 
  4764  011B                     	;# 
  4765  011C                     	;# 
  4766  011C                     	;# 
  4767  011C                     	;# 
  4768  011D                     	;# 
  4769  011D                     	;# 
  4770  011D                     	;# 
  4771  011E                     	;# 
  4772  011E                     	;# 
  4773  011E                     	;# 
  4774  011F                     	;# 
  4775  011F                     	;# 
  4776  011F                     	;# 
  4777  011F                     	;# 
  4778  011F                     	;# 
  4779  018C                     	;# 
  4780  018D                     	;# 
  4781  018E                     	;# 
  4782  018F                     	;# 
  4783  0190                     	;# 
  4784  0191                     	;# 
  4785  0192                     	;# 
  4786  0196                     	;# 
  4787  0197                     	;# 
  4788  0198                     	;# 
  4789  0199                     	;# 
  4790  019A                     	;# 
  4791  019B                     	;# 
  4792  019C                     	;# 
  4793  020C                     	;# 
  4794  020D                     	;# 
  4795  020E                     	;# 
  4796  020F                     	;# 
  4797  020F                     	;# 
  4798  0210                     	;# 
  4799  0210                     	;# 
  4800  0211                     	;# 
  4801  0211                     	;# 
  4802  0212                     	;# 
  4803  0213                     	;# 
  4804  0214                     	;# 
  4805  0215                     	;# 
  4806  0215                     	;# 
  4807  0216                     	;# 
  4808  0216                     	;# 
  4809  0217                     	;# 
  4810  0217                     	;# 
  4811  0218                     	;# 
  4812  0219                     	;# 
  4813  021A                     	;# 
  4814  021B                     	;# 
  4815  021B                     	;# 
  4816  021C                     	;# 
  4817  021C                     	;# 
  4818  021D                     	;# 
  4819  021D                     	;# 
  4820  021E                     	;# 
  4821  021F                     	;# 
  4822  028C                     	;# 
  4823  028C                     	;# 
  4824  028D                     	;# 
  4825  028D                     	;# 
  4826  028E                     	;# 
  4827  028F                     	;# 
  4828  0290                     	;# 
  4829  0290                     	;# 
  4830  0291                     	;# 
  4831  0292                     	;# 
  4832  0292                     	;# 
  4833  0293                     	;# 
  4834  0293                     	;# 
  4835  0294                     	;# 
  4836  0295                     	;# 
  4837  0296                     	;# 
  4838  0296                     	;# 
  4839  0297                     	;# 
  4840  0298                     	;# 
  4841  0298                     	;# 
  4842  0299                     	;# 
  4843  0299                     	;# 
  4844  029A                     	;# 
  4845  029B                     	;# 
  4846  029C                     	;# 
  4847  029C                     	;# 
  4848  029D                     	;# 
  4849  030C                     	;# 
  4850  030C                     	;# 
  4851  030D                     	;# 
  4852  030E                     	;# 
  4853  030F                     	;# 
  4854  0310                     	;# 
  4855  0310                     	;# 
  4856  0311                     	;# 
  4857  0312                     	;# 
  4858  0313                     	;# 
  4859  0314                     	;# 
  4860  0314                     	;# 
  4861  0315                     	;# 
  4862  0316                     	;# 
  4863  0317                     	;# 
  4864  0318                     	;# 
  4865  0318                     	;# 
  4866  0319                     	;# 
  4867  031A                     	;# 
  4868  031B                     	;# 
  4869  031C                     	;# 
  4870  031C                     	;# 
  4871  031D                     	;# 
  4872  031E                     	;# 
  4873  031F                     	;# 
  4874  038C                     	;# 
  4875  038D                     	;# 
  4876  038E                     	;# 
  4877  0390                     	;# 
  4878  0391                     	;# 
  4879  0392                     	;# 
  4880  040C                     	;# 
  4881  040D                     	;# 
  4882  040E                     	;# 
  4883  040F                     	;# 
  4884  0410                     	;# 
  4885  0411                     	;# 
  4886  0416                     	;# 
  4887  0416                     	;# 
  4888  0417                     	;# 
  4889  0418                     	;# 
  4890  0418                     	;# 
  4891  0419                     	;# 
  4892  041A                     	;# 
  4893  041A                     	;# 
  4894  041B                     	;# 
  4895  041C                     	;# 
  4896  041C                     	;# 
  4897  041D                     	;# 
  4898  041E                     	;# 
  4899  041F                     	;# 
  4900  048C                     	;# 
  4901  048C                     	;# 
  4902  048D                     	;# 
  4903  048E                     	;# 
  4904  048F                     	;# 
  4905  048F                     	;# 
  4906  0490                     	;# 
  4907  0491                     	;# 
  4908  0492                     	;# 
  4909  0492                     	;# 
  4910  0493                     	;# 
  4911  0494                     	;# 
  4912  0495                     	;# 
  4913  0495                     	;# 
  4914  0496                     	;# 
  4915  0497                     	;# 
  4916  0498                     	;# 
  4917  0499                     	;# 
  4918  049A                     	;# 
  4919  049B                     	;# 
  4920  049C                     	;# 
  4921  049D                     	;# 
  4922  050C                     	;# 
  4923  050C                     	;# 
  4924  050D                     	;# 
  4925  050E                     	;# 
  4926  050F                     	;# 
  4927  050F                     	;# 
  4928  0510                     	;# 
  4929  0511                     	;# 
  4930  0512                     	;# 
  4931  0512                     	;# 
  4932  0513                     	;# 
  4933  0514                     	;# 
  4934  0515                     	;# 
  4935  0515                     	;# 
  4936  0516                     	;# 
  4937  0517                     	;# 
  4938  0518                     	;# 
  4939  0519                     	;# 
  4940  051A                     	;# 
  4941  051B                     	;# 
  4942  051C                     	;# 
  4943  051D                     	;# 
  4944  058C                     	;# 
  4945  058C                     	;# 
  4946  058D                     	;# 
  4947  058E                     	;# 
  4948  058F                     	;# 
  4949  058F                     	;# 
  4950  0590                     	;# 
  4951  0591                     	;# 
  4952  0592                     	;# 
  4953  0593                     	;# 
  4954  060C                     	;# 
  4955  060D                     	;# 
  4956  060E                     	;# 
  4957  060F                     	;# 
  4958  0610                     	;# 
  4959  0611                     	;# 
  4960  0612                     	;# 
  4961  0613                     	;# 
  4962  0614                     	;# 
  4963  0616                     	;# 
  4964  0617                     	;# 
  4965  0618                     	;# 
  4966  0619                     	;# 
  4967  061A                     	;# 
  4968  061B                     	;# 
  4969  061C                     	;# 
  4970  061D                     	;# 
  4971  061E                     	;# 
  4972  068C                     	;# 
  4973  068D                     	;# 
  4974  068E                     	;# 
  4975  068F                     	;# 
  4976  0690                     	;# 
  4977  0691                     	;# 
  4978  0692                     	;# 
  4979  0693                     	;# 
  4980  0694                     	;# 
  4981  070C                     	;# 
  4982  070D                     	;# 
  4983  070E                     	;# 
  4984  070F                     	;# 
  4985  0710                     	;# 
  4986  0711                     	;# 
  4987  0712                     	;# 
  4988  0713                     	;# 
  4989  0714                     	;# 
  4990  0716                     	;# 
  4991  0717                     	;# 
  4992  0718                     	;# 
  4993  0719                     	;# 
  4994  071A                     	;# 
  4995  071B                     	;# 
  4996  071C                     	;# 
  4997  071D                     	;# 
  4998  071E                     	;# 
  4999  0796                     	;# 
  5000  0797                     	;# 
  5001  0798                     	;# 
  5002  0799                     	;# 
  5003  079A                     	;# 
  5004  079B                     	;# 
  5005  080C                     	;# 
  5006  080D                     	;# 
  5007  080E                     	;# 
  5008  080F                     	;# 
  5009  0810                     	;# 
  5010  0811                     	;# 
  5011  0812                     	;# 
  5012  0813                     	;# 
  5013  0814                     	;# 
  5014  081A                     	;# 
  5015  081B                     	;# 
  5016  081C                     	;# 
  5017  081D                     	;# 
  5018  081E                     	;# 
  5019  081F                     	;# 
  5020  088C                     	;# 
  5021  088D                     	;# 
  5022  088E                     	;# 
  5023  088F                     	;# 
  5024  0890                     	;# 
  5025  0891                     	;# 
  5026  0892                     	;# 
  5027  0893                     	;# 
  5028  0895                     	;# 
  5029  0896                     	;# 
  5030  0897                     	;# 
  5031  0898                     	;# 
  5032  0899                     	;# 
  5033  089A                     	;# 
  5034  089B                     	;# 
  5035  090C                     	;# 
  5036  090E                     	;# 
  5037  090F                     	;# 
  5038  091F                     	;# 
  5039  091F                     	;# 
  5040  098F                     	;# 
  5041  098F                     	;# 
  5042  0990                     	;# 
  5043  0991                     	;# 
  5044  0992                     	;# 
  5045  0993                     	;# 
  5046  0994                     	;# 
  5047  0995                     	;# 
  5048  0996                     	;# 
  5049  0997                     	;# 
  5050  0E0F                     	;# 
  5051  0E10                     	;# 
  5052  0E11                     	;# 
  5053  0E12                     	;# 
  5054  0E13                     	;# 
  5055  0E14                     	;# 
  5056  0E15                     	;# 
  5057  0E16                     	;# 
  5058  0E17                     	;# 
  5059  0E18                     	;# 
  5060  0E19                     	;# 
  5061  0E1A                     	;# 
  5062  0E1B                     	;# 
  5063  0E1C                     	;# 
  5064  0E1D                     	;# 
  5065  0E1E                     	;# 
  5066  0E1F                     	;# 
  5067  0E20                     	;# 
  5068  0E21                     	;# 
  5069  0E22                     	;# 
  5070  0E23                     	;# 
  5071  0E24                     	;# 
  5072  0E25                     	;# 
  5073  0E26                     	;# 
  5074  0E27                     	;# 
  5075  0E28                     	;# 
  5076  0E29                     	;# 
  5077  0E2A                     	;# 
  5078  0E2B                     	;# 
  5079  0E2C                     	;# 
  5080  0E2D                     	;# 
  5081  0E2E                     	;# 
  5082  0E2F                     	;# 
  5083  0E30                     	;# 
  5084  0E31                     	;# 
  5085  0E32                     	;# 
  5086  0E33                     	;# 
  5087  0E34                     	;# 
  5088  0E35                     	;# 
  5089  0E36                     	;# 
  5090  0E37                     	;# 
  5091  0E8F                     	;# 
  5092  0E90                     	;# 
  5093  0E91                     	;# 
  5094  0E92                     	;# 
  5095  0E93                     	;# 
  5096  0E94                     	;# 
  5097  0E95                     	;# 
  5098  0E96                     	;# 
  5099  0E97                     	;# 
  5100  0E9C                     	;# 
  5101  0E9D                     	;# 
  5102  0E9E                     	;# 
  5103  0EA1                     	;# 
  5104  0EA2                     	;# 
  5105  0EA3                     	;# 
  5106  0EA4                     	;# 
  5107  0EA5                     	;# 
  5108  0EA9                     	;# 
  5109  0EAA                     	;# 
  5110  0EAB                     	;# 
  5111  0EAC                     	;# 
  5112  0EB1                     	;# 
  5113  0EB2                     	;# 
  5114  0EB3                     	;# 
  5115  0EB8                     	;# 
  5116  0EB9                     	;# 
  5117  0EBA                     	;# 
  5118  0EBB                     	;# 
  5119  0EBC                     	;# 
  5120  0EBD                     	;# 
  5121  0EBE                     	;# 
  5122  0EC3                     	;# 
  5123  0EC5                     	;# 
  5124  0EC6                     	;# 
  5125  0EC7                     	;# 
  5126  0EC8                     	;# 
  5127  0EC9                     	;# 
  5128  0ECA                     	;# 
  5129  0ECB                     	;# 
  5130  0ECC                     	;# 
  5131  0F10                     	;# 
  5132  0F11                     	;# 
  5133  0F12                     	;# 
  5134  0F13                     	;# 
  5135  0F14                     	;# 
  5136  0F15                     	;# 
  5137  0F16                     	;# 
  5138  0F17                     	;# 
  5139  0F18                     	;# 
  5140  0F19                     	;# 
  5141  0F1A                     	;# 
  5142  0F1B                     	;# 
  5143  0F1C                     	;# 
  5144  0F1D                     	;# 
  5145  0F1E                     	;# 
  5146  0F1F                     	;# 
  5147  0F20                     	;# 
  5148  0F21                     	;# 
  5149  0F22                     	;# 
  5150  0F23                     	;# 
  5151  0F24                     	;# 
  5152  0F25                     	;# 
  5153  0F26                     	;# 
  5154  0F27                     	;# 
  5155  0F38                     	;# 
  5156  0F39                     	;# 
  5157  0F3A                     	;# 
  5158  0F3B                     	;# 
  5159  0F3C                     	;# 
  5160  0F3D                     	;# 
  5161  0F3E                     	;# 
  5162  0F3F                     	;# 
  5163  0F40                     	;# 
  5164  0F41                     	;# 
  5165  0F43                     	;# 
  5166  0F44                     	;# 
  5167  0F45                     	;# 
  5168  0F46                     	;# 
  5169  0F47                     	;# 
  5170  0F48                     	;# 
  5171  0F49                     	;# 
  5172  0F4A                     	;# 
  5173  0F4B                     	;# 
  5174  0F4C                     	;# 
  5175  0F4E                     	;# 
  5176  0F4F                     	;# 
  5177  0F50                     	;# 
  5178  0F51                     	;# 
  5179  0F52                     	;# 
  5180  0F53                     	;# 
  5181  0F54                     	;# 
  5182  0F55                     	;# 
  5183  0F56                     	;# 
  5184  0F57                     	;# 
  5185  0F65                     	;# 
  5186  0F68                     	;# 
  5187  0F69                     	;# 
  5188  0F6A                     	;# 
  5189  0F6B                     	;# 
  5190  0FE4                     	;# 
  5191  0FE5                     	;# 
  5192  0FE6                     	;# 
  5193  0FE7                     	;# 
  5194  0FE8                     	;# 
  5195  0FE9                     	;# 
  5196  0FEA                     	;# 
  5197  0FEB                     	;# 
  5198  0FED                     	;# 
  5199  0FEE                     	;# 
  5200  0FEF                     	;_Isamples
  5201                           
  5202                           	psect	idataBANK0
  5203  0004                     __pidataBANK0:	
  5204                           
  5205                           ;initializer for _batteryTemp
  5206  0004  34FA               	retlw	250
  5207  0005  3400               	retlw	0
  5208                           
  5209                           	psect	idataBANK2
  5210  1E24                     __pidataBANK2:	
  5211                           
  5212                           ;initializer for _Ichannels
  5213  1E24  3414               	retlw	20
  5214  1E25  3400               	retlw	0
  5215  1E26  3410               	retlw	16
  5216  1E27  3400               	retlw	0
  5217  1E28  3416               	retlw	22
  5218  1E29  3400               	retlw	0
  5219  1E2A  3412               	retlw	18
  5220  1E2B  3400               	retlw	0
  5221                           
  5222                           ;initializer for _Vchannels
  5223  1E2C  3415               	retlw	21
  5224  1E2D  3400               	retlw	0
  5225  1E2E  3411               	retlw	17
  5226  1E2F  3400               	retlw	0
  5227  1E30  3417               	retlw	23
  5228  1E31  3400               	retlw	0
  5229  1E32  3413               	retlw	19
  5230  1E33  3400               	retlw	0
  5231                           
  5232                           	psect	stringtext
  5233  1000                     __pstringtext:	
  5234  1000                     _fonts:	
  5235  1000  3400               	retlw	0
  5236  1001  3400               	retlw	0
  5237  1002  3400               	retlw	0
  5238  1003  3400               	retlw	0
  5239  1004  344E               	retlw	78
  5240  1005  3400               	retlw	0
  5241  1006  3406               	retlw	6
  5242  1007  3400               	retlw	0
  5243  1008  3406               	retlw	6
  5244  1009  34FF               	retlw	255
  5245  100A  34FF               	retlw	255
  5246  100B  34FF               	retlw	255
  5247  100C  3448               	retlw	72
  5248  100D  34D6               	retlw	214
  5249  100E  3424               	retlw	36
  5250  100F  3412               	retlw	18
  5251  1010  3408               	retlw	8
  5252  1011  3424               	retlw	36
  5253  1012  34FF               	retlw	255
  5254  1013  34FF               	retlw	255
  5255  1014  34FF               	retlw	255
  5256  1015  3400               	retlw	0
  5257  1016  3406               	retlw	6
  5258  1017  3400               	retlw	0
  5259  1018  3438               	retlw	56
  5260  1019  3444               	retlw	68
  5261  101A  3482               	retlw	130
  5262  101B  3482               	retlw	130
  5263  101C  3444               	retlw	68
  5264  101D  3438               	retlw	56
  5265  101E  3414               	retlw	20
  5266  101F  3408               	retlw	8
  5267  1020  343E               	retlw	62
  5268  1021  3410               	retlw	16
  5269  1022  3438               	retlw	56
  5270  1023  3410               	retlw	16
  5271  1024  34A0               	retlw	160
  5272  1025  3460               	retlw	96
  5273  1026  3400               	retlw	0
  5274  1027  3410               	retlw	16
  5275  1028  3410               	retlw	16
  5276  1029  3410               	retlw	16
  5277  102A  3460               	retlw	96
  5278  102B  3460               	retlw	96
  5279  102C  3400               	retlw	0
  5280  102D  3460               	retlw	96
  5281  102E  3418               	retlw	24
  5282  102F  3406               	retlw	6
  5283  1030  347C               	retlw	124
  5284  1031  3442               	retlw	66
  5285  1032  347C               	retlw	124
  5286  1033  3444               	retlw	68
  5287  1034  347E               	retlw	126
  5288  1035  3440               	retlw	64
  5289  1036  3464               	retlw	100
  5290  1037  3452               	retlw	82
  5291  1038  344C               	retlw	76
  5292  1039  344A               	retlw	74
  5293  103A  344A               	retlw	74
  5294  103B  3434               	retlw	52
  5295  103C  3438               	retlw	56
  5296  103D  3424               	retlw	36
  5297  103E  347E               	retlw	126
  5298  103F  344E               	retlw	78
  5299  1040  344A               	retlw	74
  5300  1041  3432               	retlw	50
  5301  1042  343C               	retlw	60
  5302  1043  344A               	retlw	74
  5303  1044  3432               	retlw	50
  5304  1045  3462               	retlw	98
  5305  1046  341A               	retlw	26
  5306  1047  3406               	retlw	6
  5307  1048  3476               	retlw	118
  5308  1049  344A               	retlw	74
  5309  104A  3476               	retlw	118
  5310  104B  344C               	retlw	76
  5311  104C  3452               	retlw	82
  5312  104D  343C               	retlw	60
  5313  104E  346C               	retlw	108
  5314  104F  346C               	retlw	108
  5315  1050  3400               	retlw	0
  5316  1051  34AC               	retlw	172
  5317  1052  346C               	retlw	108
  5318  1053  3400               	retlw	0
  5319  1054  3410               	retlw	16
  5320  1055  3428               	retlw	40
  5321  1056  3444               	retlw	68
  5322  1057  3428               	retlw	40
  5323  1058  3428               	retlw	40
  5324  1059  3428               	retlw	40
  5325  105A  3444               	retlw	68
  5326  105B  3428               	retlw	40
  5327  105C  3410               	retlw	16
  5328  105D  3402               	retlw	2
  5329  105E  3459               	retlw	89
  5330  105F  3406               	retlw	6
  5331  1060  34FF               	retlw	255
  5332  1061  34FF               	retlw	255
  5333  1062  34FF               	retlw	255
  5334  1063  347C               	retlw	124
  5335  1064  3412               	retlw	18
  5336  1065  347C               	retlw	124
  5337  1066  347E               	retlw	126
  5338  1067  345A               	retlw	90
  5339  1068  3434               	retlw	52
  5340  1069  343C               	retlw	60
  5341  106A  3442               	retlw	66
  5342  106B  3442               	retlw	66
  5343  106C  347E               	retlw	126
  5344  106D  3442               	retlw	66
  5345  106E  343C               	retlw	60
  5346  106F  347E               	retlw	126
  5347  1070  344A               	retlw	74
  5348  1071  3442               	retlw	66
  5349  1072  347E               	retlw	126
  5350  1073  340A               	retlw	10
  5351  1074  340A               	retlw	10
  5352  1075  343C               	retlw	60
  5353  1076  3452               	retlw	82
  5354  1077  3434               	retlw	52
  5355  1078  347E               	retlw	126
  5356  1079  3408               	retlw	8
  5357  107A  347E               	retlw	126
  5358  107B  3442               	retlw	66
  5359  107C  347E               	retlw	126
  5360  107D  3442               	retlw	66
  5361  107E  3430               	retlw	48
  5362  107F  3440               	retlw	64
  5363  1080  343E               	retlw	62
  5364  1081  347E               	retlw	126
  5365  1082  3418               	retlw	24
  5366  1083  3466               	retlw	102
  5367  1084  347E               	retlw	126
  5368  1085  3440               	retlw	64
  5369  1086  3440               	retlw	64
  5370  1087  347E               	retlw	126
  5371  1088  341C               	retlw	28
  5372  1089  347E               	retlw	126
  5373  108A  347E               	retlw	126
  5374  108B  3402               	retlw	2
  5375  108C  347E               	retlw	126
  5376  108D  343C               	retlw	60
  5377  108E  3442               	retlw	66
  5378  108F  343C               	retlw	60
  5379  1090  347E               	retlw	126
  5380  1091  3412               	retlw	18
  5381  1092  340C               	retlw	12
  5382  1093  347E               	retlw	126
  5383  1094  3462               	retlw	98
  5384  1095  34FE               	retlw	254
  5385  1096  347E               	retlw	126
  5386  1097  3432               	retlw	50
  5387  1098  344E               	retlw	78
  5388  1099  3444               	retlw	68
  5389  109A  344A               	retlw	74
  5390  109B  3432               	retlw	50
  5391  109C  3402               	retlw	2
  5392  109D  347E               	retlw	126
  5393  109E  3402               	retlw	2
  5394  109F  347E               	retlw	126
  5395  10A0  3440               	retlw	64
  5396  10A1  347E               	retlw	126
  5397  10A2  343E               	retlw	62
  5398  10A3  3440               	retlw	64
  5399  10A4  343E               	retlw	62
  5400  10A5  347E               	retlw	126
  5401  10A6  3438               	retlw	56
  5402  10A7  347E               	retlw	126
  5403  10A8  3466               	retlw	102
  5404  10A9  3418               	retlw	24
  5405  10AA  3466               	retlw	102
  5406  10AB  340E               	retlw	14
  5407  10AC  3470               	retlw	112
  5408  10AD  340E               	retlw	14
  5409  10AE  3462               	retlw	98
  5410  10AF  345A               	retlw	90
  5411  10B0  3446               	retlw	70
  5412  10B1  3400               	retlw	0
  5413  10B2  347E               	retlw	126
  5414  10B3  3442               	retlw	66
  5415  10B4  3406               	retlw	6
  5416  10B5  3418               	retlw	24
  5417  10B6  3460               	retlw	96
  5418  10B7  3442               	retlw	66
  5419  10B8  347E               	retlw	126
  5420  10B9  3400               	retlw	0
  5421  10BA  3404               	retlw	4
  5422  10BB  3402               	retlw	2
  5423  10BC  3404               	retlw	4
  5424  10BD  3440               	retlw	64
  5425  10BE  3440               	retlw	64
  5426  10BF  3440               	retlw	64
  5427  10C0  3400               	retlw	0
  5428  10C1  3402               	retlw	2
  5429  10C2  3404               	retlw	4
  5430  10C3  3474               	retlw	116
  5431  10C4  3454               	retlw	84
  5432  10C5  3478               	retlw	120
  5433  10C6  347E               	retlw	126
  5434  10C7  3448               	retlw	72
  5435  10C8  3430               	retlw	48
  5436  10C9  3430               	retlw	48
  5437  10CA  3448               	retlw	72
  5438  10CB  3448               	retlw	72
  5439  10CC  3430               	retlw	48
  5440  10CD  3448               	retlw	72
  5441  10CE  347E               	retlw	126
  5442  10CF  3438               	retlw	56
  5443  10D0  3454               	retlw	84
  5444  10D1  3458               	retlw	88
  5445  10D2  347C               	retlw	124
  5446  10D3  340A               	retlw	10
  5447  10D4  3402               	retlw	2
  5448  10D5  3498               	retlw	152
  5449  10D6  34A4               	retlw	164
  5450  10D7  347C               	retlw	124
  5451  10D8  347E               	retlw	126
  5452  10D9  3408               	retlw	8
  5453  10DA  3470               	retlw	112
  5454  10DB  3448               	retlw	72
  5455  10DC  347A               	retlw	122
  5456  10DD  3440               	retlw	64
  5457  10DE  3488               	retlw	136
  5458  10DF  34FA               	retlw	250
  5459  10E0  3400               	retlw	0
  5460  10E1  347E               	retlw	126
  5461  10E2  3418               	retlw	24
  5462  10E3  3464               	retlw	100
  5463  10E4  3442               	retlw	66
  5464  10E5  347E               	retlw	126
  5465  10E6  3440               	retlw	64
  5466  10E7  347C               	retlw	124
  5467  10E8  3438               	retlw	56
  5468  10E9  347C               	retlw	124
  5469  10EA  347C               	retlw	124
  5470  10EB  3404               	retlw	4
  5471  10EC  3478               	retlw	120
  5472  10ED  3438               	retlw	56
  5473  10EE  3444               	retlw	68
  5474  10EF  3438               	retlw	56
  5475  10F0  34FC               	retlw	252
  5476  10F1  3424               	retlw	36
  5477  10F2  3418               	retlw	24
  5478  10F3  3418               	retlw	24
  5479  10F4  3424               	retlw	36
  5480  10F5  34FC               	retlw	252
  5481  10F6  3478               	retlw	120
  5482  10F7  3404               	retlw	4
  5483  10F8  3404               	retlw	4
  5484  10F9  3448               	retlw	72
  5485  10FA  3454               	retlw	84
  5486  10FB  3424               	retlw	36
  5487  10FC  3404               	retlw	4
  5488  10FD  343E               	retlw	62
  5489  10FE  3444               	retlw	68
  5490  10FF  347C               	retlw	124
  5491  1100  3440               	retlw	64
  5492  1101  347C               	retlw	124
  5493  1102  343C               	retlw	60
  5494  1103  3440               	retlw	64
  5495  1104  343C               	retlw	60
  5496  1105  347C               	retlw	124
  5497  1106  3430               	retlw	48
  5498  1107  347C               	retlw	124
  5499  1108  346C               	retlw	108
  5500  1109  3410               	retlw	16
  5501  110A  346C               	retlw	108
  5502  110B  349C               	retlw	156
  5503  110C  34A0               	retlw	160
  5504  110D  347C               	retlw	124
  5505  110E  3464               	retlw	100
  5506  110F  3454               	retlw	84
  5507  1110  344C               	retlw	76
  5508  1111  340C               	retlw	12
  5509  1112  3412               	retlw	18
  5510  1113  340C               	retlw	12
  5511  1114  34FF               	retlw	255
  5512  1115  34FF               	retlw	255
  5513  1116  34FF               	retlw	255
  5514  1117  34FF               	retlw	255
  5515  1118  34FF               	retlw	255
  5516  1119  34FF               	retlw	255
  5517  111A  34FF               	retlw	255
  5518  111B  34FF               	retlw	255
  5519  111C  34FF               	retlw	255
  5520  111D  34FF               	retlw	255
  5521  111E  34FF               	retlw	255
  5522  111F  34FF               	retlw	255
  5523  1120  34FF               	retlw	255
  5524  1121  34FF               	retlw	255
  5525  1122  34FF               	retlw	255
  5526  1123  34FF               	retlw	255
  5527  1124  34FF               	retlw	255
  5528  1125  34FF               	retlw	255
  5529  1126  34FC               	retlw	252
  5530  1127  3440               	retlw	64
  5531  1128  347C               	retlw	124
  5532  1129  34FF               	retlw	255
  5533  112A  34FF               	retlw	255
  5534  112B  34FF               	retlw	255
  5535  112C  34FF               	retlw	255
  5536  112D  34FF               	retlw	255
  5537  112E  34FF               	retlw	255
  5538  112F                     __end_of_fonts:	
  5539  112F                     log@coeff:	
  5540  112F  3400               	retlw	0
  5541  1130  3400               	retlw	0
  5542  1131  3400               	retlw	0
  5543  1132  3400               	retlw	0
  5544  1133  3480               	retlw	128
  5545  1134  343F               	retlw	63
  5546  1135  34F0               	retlw	240
  5547  1136  34FF               	retlw	255
  5548  1137  34BE               	retlw	190
  5549  1138  34E2               	retlw	226
  5550  1139  34A9               	retlw	169
  5551  113A  343E               	retlw	62
  5552  113B  3483               	retlw	131
  5553  113C  3476               	retlw	118
  5554  113D  34BE               	retlw	190
  5555  113E  34AE               	retlw	174
  5556  113F  342B               	retlw	43
  5557  1140  343E               	retlw	62
  5558  1141  343C               	retlw	60
  5559  1142  34C3               	retlw	195
  5560  1143  34BD               	retlw	189
  5561  1144  34D2               	retlw	210
  5562  1145  3413               	retlw	19
  5563  1146  343D               	retlw	61
  5564  1147  3478               	retlw	120
  5565  1148  34D3               	retlw	211
  5566  1149  34BB               	retlw	187
  5567  114A                     __end_oflog@coeff:	
  5568  0016                     _LATA	set	22
  5569  0016                     _LATAbits	set	22
  5570  0017                     _LATB	set	23
  5571  0018                     _LATC	set	24
  5572  0011                     _TRISA	set	17
  5573  0011                     _TRISAbits	set	17
  5574  0012                     _TRISB	set	18
  5575  0013                     _TRISC	set	19
  5576  005F                     _GIE	set	95
  5577  00B5                     _LATA5	set	181
  5578  006A                     _RB2	set	106
  5579  009D                     _ADACQ	set	157
  5580  0099                     _ADACT	set	153
  5581  009B                     _ADCAP	set	155
  5582  0098                     _ADCLK	set	152
  5583  0093                     _ADCON0	set	147
  5584  0093                     _ADCON0bits	set	147
  5585  0094                     _ADCON1	set	148
  5586  0095                     _ADCON2	set	149
  5587  0096                     _ADCON3	set	150
  5588  009E                     _ADPCH	set	158
  5589  009C                     _ADPRE	set	156
  5590  009A                     _ADREF	set	154
  5591  008D                     _ADRESH	set	141
  5592  008C                     _ADRESL	set	140
  5593  0097                     _ADSTAT	set	151
  5594  010F                     _ADLTHH	set	271
  5595  010E                     _ADLTHL	set	270
  5596  010D                     _ADRPT	set	269
  5597  0113                     _ADSTPTH	set	275
  5598  0112                     _ADSTPTL	set	274
  5599  0111                     _ADUTHH	set	273
  5600  0110                     _ADUTHL	set	272
  5601  021E                     _CCPTMRS0bits	set	542
  5602  021F                     _CCPTMRS1bits	set	543
  5603  0290                     _T2CLKCON	set	656
  5604  028E                     _T2CON	set	654
  5605  028E                     _T2CONbits	set	654
  5606  028F                     _T2HLT	set	655
  5607  028D                     _T2PR	set	653
  5608  0291                     _T2RST	set	657
  5609  028C                     _T2TMR	set	652
  5610  0296                     _T4CLKCON	set	662
  5611  0294                     _T4CON	set	660
  5612  0294                     _T4CONbits	set	660
  5613  0295                     _T4HLT	set	661
  5614  0293                     _T4PR	set	659
  5615  0297                     _T4RST	set	663
  5616  0292                     _T4TMR	set	658
  5617  030E                     _CCP1CONbits	set	782
  5618  030D                     _CCPR1H	set	781
  5619  030C                     _CCPR1L	set	780
  5620  038E                     _PWM6CON	set	910
  5621  038D                     _PWM6DCH	set	909
  5622  038C                     _PWM6DCL	set	908
  5623  0392                     _PWM7CON	set	914
  5624  0391                     _PWM7DCH	set	913
  5625  0390                     _PWM7DCL	set	912
  5626  0716                     _PIE0bits	set	1814
  5627  0710                     _PIR4bits	set	1808
  5628  088D                     _OSCCON1	set	2189
  5629  088F                     _OSCCON3	set	2191
  5630  0891                     _OSCEN	set	2193
  5631  0893                     _OSCFRQ	set	2195
  5632  0892                     _OSCTUNE	set	2194
  5633  090C                     _FVRCON	set	2316
  5634  0E8F                     _PPSLOCK	set	3727
  5635  0E8F                     _PPSLOCKbits	set	3727
  5636  0F38                     _ANSELA	set	3896
  5637  0F43                     _ANSELB	set	3907
  5638  0F4E                     _ANSELC	set	3918
  5639  0F16                     _RA6PPS	set	3862
  5640  0F17                     _RA7PPS	set	3863
  5641  0F18                     _RB0PPS	set	3864
  5642  0F39                     _WPUA	set	3897
  5643  0F44                     _WPUB	set	3908
  5644  0F4F                     _WPUC	set	3919
  5645  0F65                     _WPUE	set	3941
  5646                           
  5647                           ; #config settings
  5648  0000                     
  5649                           	psect	cinit
  5650  07B1                     start_initialization:	
  5651  07B1                     __initialization:		;BIGRAM
  5652                           
  5653                           ; Initialize objects allocated to BANK0
  5654  07B1  3180  2004  3187   	fcall	__pidataBANK0	;fetch initializer
  5655  07B4  00EE               	movwf	__pdataBANK0& (0+127)
  5656  07B5  3180  2005  3187   	fcall	__pidataBANK0+1	;fetch initializer
  5657  07B8  00EF               	movwf	(__pdataBANK0+1)& (0+127)
  5658                           
  5659                           ; Initialize objects allocated to BANK2
  5660  07B9  3024               	movlw	low __pidataBANK2
  5661  07BA  0084               	movwf	4
  5662  07BB  309E               	movlw	(high __pidataBANK2)| (0+128)
  5663  07BC  0085               	movwf	5
  5664  07BD  3059               	movlw	low __pdataBANK2
  5665  07BE  0086               	movwf	6
  5666  07BF  3001               	movlw	high __pdataBANK2
  5667  07C0  0087               	movwf	7
  5668  07C1  3000               	movlw	0
  5669  07C2  00FF               	movwf	btemp+1
  5670  07C3  3010               	movlw	16
  5671  07C4  319D  25FC  3187   	fcall	init_ram
  5672                           
  5673                           ; Clear objects allocated to BIGRAM
  5674  07C7  3060               	movlw	low (0+8800)
  5675  07C8  0084               	movwf	4
  5676  07C9  3022               	movlw	high (0+8800)
  5677  07CA  0085               	movwf	5
  5678  07CB  3090               	movlw	144
  5679  07CC  00FE               	movwf	btemp
  5680  07CD  3001               	movlw	1
  5681  07CE  00FF               	movwf	btemp+1
  5682  07CF  319D  25F0  3187   	fcall	clear_ram0
  5683                           
  5684                           ; Clear objects allocated to BANK0
  5685  07D2  305E               	movlw	low __pbssBANK0
  5686  07D3  0084               	movwf	4
  5687  07D4  3000               	movlw	high __pbssBANK0
  5688  07D5  0085               	movwf	5
  5689  07D6  3010               	movlw	16
  5690  07D7  00FE               	movwf	btemp
  5691  07D8  3000               	movlw	0
  5692  07D9  00FF               	movwf	btemp+1
  5693  07DA  319D  25F0  3187   	fcall	clear_ram0
  5694                           
  5695                           ; Clear objects allocated to BANK1
  5696  07DD  30A0               	movlw	low __pbssBANK1
  5697  07DE  0084               	movwf	4
  5698  07DF  3000               	movlw	high __pbssBANK1
  5699  07E0  0085               	movwf	5
  5700  07E1  3029               	movlw	41
  5701  07E2  00FE               	movwf	btemp
  5702  07E3  3000               	movlw	0
  5703  07E4  00FF               	movwf	btemp+1
  5704  07E5  319D  25F0  3187   	fcall	clear_ram0
  5705                           
  5706                           ; Clear objects allocated to BANK2
  5707  07E8  3020               	movlw	low __pbssBANK2
  5708  07E9  0084               	movwf	4
  5709  07EA  3001               	movlw	high __pbssBANK2
  5710  07EB  0085               	movwf	5
  5711  07EC  3039               	movlw	57
  5712  07ED  00FE               	movwf	btemp
  5713  07EE  3000               	movlw	0
  5714  07EF  00FF               	movwf	btemp+1
  5715  07F0  319D  25F0  3187   	fcall	clear_ram0
  5716                           
  5717                           ; Clear objects allocated to BANK3
  5718  07F3  30A0               	movlw	low __pbssBANK3
  5719  07F4  0084               	movwf	4
  5720  07F5  3001               	movlw	high __pbssBANK3
  5721  07F6  0085               	movwf	5
  5722  07F7  3028               	movlw	40
  5723  07F8  00FE               	movwf	btemp
  5724  07F9  3000               	movlw	0
  5725  07FA  00FF               	movwf	btemp+1
  5726  07FB  319D  25F0         	fcall	clear_ram0
  5727  07FD                     end_of_initialization:	
  5728                           ;End of C runtime variable initialization code
  5729                           
  5730  07FD                     __end_of__initialization:	
  5731  07FD  0020               	movlb	0
  5732  07FE  3180  2854         	ljmp	_main	;jump to C main() function
  5733                           
  5734                           	psect	bssBANK0
  5735  005E                     __pbssBANK0:	
  5736  005E                     _voltage:	
  5737  005E                     	ds	8
  5738  0066                     _Imode:	
  5739  0066                     	ds	2
  5740  0068                     _batteryState:	
  5741  0068                     	ds	2
  5742  006A                     _readButtons:	
  5743  006A                     	ds	2
  5744  006C                     _button:	
  5745  006C                     	ds	1
  5746  006D                     _lastButton:	
  5747  006D                     	ds	1
  5748                           
  5749                           	psect	dataBANK0
  5750  006E                     __pdataBANK0:	
  5751  006E                     _batteryTemp:	
  5752  006E                     	ds	2
  5753                           
  5754                           	psect	bssBANK1
  5755  00A0                     __pbssBANK1:	
  5756  00A0                     _current:	
  5757  00A0                     	ds	8
  5758  00A8                     _IminCount:	
  5759  00A8                     	ds	4
  5760  00AC                     _Iref:	
  5761  00AC                     	ds	4
  5762  00B0                     _Vref:	
  5763  00B0                     	ds	4
  5764  00B4                     _stateCounter:	
  5765  00B4                     	ds	4
  5766  00B8                     _Iout:	
  5767  00B8                     	ds	2
  5768  00BA                     _IsampleIndex:	
  5769  00BA                     	ds	2
  5770  00BC                     _VHoldMode:	
  5771  00BC                     	ds	2
  5772  00BE                     _VsampleIndex:	
  5773  00BE                     	ds	2
  5774  00C0                     _cc_cv:	
  5775  00C0                     	ds	2
  5776  00C2                     _errno:	
  5777  00C2                     	ds	2
  5778  00C4                     _floatCount:	
  5779  00C4                     	ds	2
  5780  00C6                     _j:	
  5781  00C6                     	ds	1
  5782  00C7                     _otherState:	
  5783  00C7                     	ds	1
  5784  00C8                     _x:	
  5785  00C8                     	ds	1
  5786                           
  5787                           	psect	bssBANK2
  5788  0120                     __pbssBANK2:	
  5789  0120                     _Itotals:	
  5790  0120                     	ds	16
  5791  0130                     _Vtotals:	
  5792  0130                     	ds	16
  5793  0140                     _Ianalogs:	
  5794  0140                     	ds	8
  5795  0148                     _Vanalogs:	
  5796  0148                     	ds	8
  5797  0150                     LCDWriteInt@F13692:	
  5798  0150                     	ds	5
  5799  0155                     _Imin:	
  5800  0155                     	ds	4
  5801                           
  5802                           	psect	dataBANK2
  5803  0159                     __pdataBANK2:	
  5804  0159                     _Ichannels:	
  5805  0159                     	ds	8
  5806  0161                     _Vchannels:	
  5807  0161                     	ds	8
  5808                           
  5809                           	psect	bssBANK3
  5810  01A0                     __pbssBANK3:	
  5811  01A0                     _Vsamples:	
  5812  01A0                     	ds	40
  5813                           
  5814                           	psect	inittext
  5815  1DFC                     init_ram:	
  5816  1DFC  00FE               	movwf	126
  5817  1DFD                     initloop:	
  5818  1DFD  0012               	moviw fsr0++
  5819  1DFE  001E               	movwi fsr1++
  5820  1DFF  3001               	movlw	1
  5821  1E00  02FE               	subwf	126,f
  5822  1E01  3000               	movlw	0
  5823  1E02  3BFF               	subwfb	127,f
  5824  1E03  087F               	movf	127,w
  5825  1E04  047E               	iorwf	126,w
  5826  1E05  1903               	btfsc	3,2
  5827  1E06  3400               	retlw	0
  5828  1E07  2DFD               	goto	initloop
  5829                           
  5830                           	psect	clrtext
  5831  1DF0                     clear_ram0:	
  5832                           ;	Called with FSR0 containing the base address, and
  5833                           ;	btemp/btemp+1 has the size to clear
  5834                           
  5835  1DF0  0064               	clrwdt	;clear the watchdog before getting into this loop
  5836  1DF1                     clrloop0:	
  5837  1DF1  0180               	clrf	0	;clear RAM location pointed to by FSR
  5838  1DF2  3101               	addfsr 0,1
  5839  1DF3  3001               	movlw	1
  5840  1DF4  02FE               	subwf	126,f
  5841  1DF5  3000               	movlw	0
  5842  1DF6  3BFF               	subwfb	127,f
  5843  1DF7  087F               	movf	127,w
  5844  1DF8  047E               	iorwf	126,w
  5845  1DF9  1903               	btfsc	3,2
  5846  1DFA  3400               	retlw	0	;all done for this memory range, return
  5847  1DFB  2DF1               	goto	clrloop0	;have we reached the end yet?
  5848                           
  5849                           	psect	cstackBANK1
  5850  00C9                     __pcstackBANK1:	
  5851  00C9                     main@efficiency:	
  5852                           
  5853                           ; 3 bytes @ 0x0
  5854  00C9                     	ds	3
  5855  00CC                     main@fastLoop:	
  5856                           
  5857                           ; 1 bytes @ 0x3
  5858  00CC                     	ds	1
  5859  00CD                     main@faultCount:	
  5860                           
  5861                           ; 2 bytes @ 0x4
  5862  00CD                     	ds	2
  5863  00CF                     main@faultNotReset:	
  5864                           
  5865                           ; 2 bytes @ 0x6
  5866  00CF                     	ds	2
  5867  00D1                     main@tempVoltage:	
  5868                           
  5869                           ; 8 bytes @ 0x8
  5870  00D1                     	ds	8
  5871  00D9                     main@displayRefresh:	
  5872                           
  5873                           ; 1 bytes @ 0x10
  5874  00D9                     	ds	1
  5875  00DA                     main@slowLoop:	
  5876                           
  5877                           ; 1 bytes @ 0x11
  5878  00DA                     	ds	1
  5879  00DB                     main@MPPT0:	
  5880                           
  5881                           ; 2 bytes @ 0x12
  5882  00DB                     	ds	2
  5883  00DD                     main@MPPT1:	
  5884                           
  5885                           ; 2 bytes @ 0x14
  5886  00DD                     	ds	2
  5887  00DF                     main@largerIOut:	
  5888                           
  5889                           ; 2 bytes @ 0x16
  5890  00DF                     	ds	2
  5891  00E1                     main@menuButton:	
  5892                           
  5893                           ; 1 bytes @ 0x18
  5894  00E1                     	ds	1
  5895  00E2                     main@dutyCycle1:	
  5896                           
  5897                           ; 2 bytes @ 0x19
  5898  00E2                     	ds	2
  5899  00E4                     main@tempFanOutput:	
  5900                           
  5901                           ; 2 bytes @ 0x1B
  5902  00E4                     	ds	2
  5903  00E6                     _main$1284:	
  5904                           
  5905                           ; 3 bytes @ 0x1D
  5906  00E6                     	ds	3
  5907  00E9                     main@dutyCycle6:	
  5908                           
  5909                           ; 2 bytes @ 0x20
  5910  00E9                     	ds	2
  5911  00EB                     main@dutyCycle7:	
  5912                           
  5913                           ; 2 bytes @ 0x22
  5914  00EB                     	ds	2
  5915  00ED                     main@j:	
  5916                           
  5917                           ; 1 bytes @ 0x24
  5918  00ED                     	ds	1
  5919                           
  5920                           	psect	cstackCOMMON
  5921  0070                     __pcstackCOMMON:	
  5922  0070                     ?_LCDWrite:	
  5923  0070                     ?_OSCILLATOR_Initialize:	
  5924                           ; 1 bytes @ 0x0
  5925                           
  5926  0070                     ??_OSCILLATOR_Initialize:	
  5927                           ; 1 bytes @ 0x0
  5928                           
  5929  0070                     ?_TMR2_Initialize:	
  5930                           ; 1 bytes @ 0x0
  5931                           
  5932  0070                     ??_TMR2_Initialize:	
  5933                           ; 1 bytes @ 0x0
  5934                           
  5935  0070                     ?_TMR4_Initialize:	
  5936                           ; 1 bytes @ 0x0
  5937                           
  5938  0070                     ??_TMR4_Initialize:	
  5939                           ; 1 bytes @ 0x0
  5940                           
  5941  0070                     ?_calculateCurrent0:	
  5942                           ; 1 bytes @ 0x0
  5943                           
  5944  0070                     ?_calculateCurrent2:	
  5945                           ; 1 bytes @ 0x0
  5946                           
  5947  0070                     ??_calculateCurrent2:	
  5948                           ; 1 bytes @ 0x0
  5949                           
  5950  0070                     ?_calculateCurrent3:	
  5951                           ; 1 bytes @ 0x0
  5952                           
  5953  0070                     ?_ADC_Initialize:	
  5954                           ; 1 bytes @ 0x0
  5955                           
  5956  0070                     ??_ADC_Initialize:	
  5957                           ; 1 bytes @ 0x0
  5958                           
  5959  0070                     ?_Init_Battery_State_Machine:	
  5960                           ; 1 bytes @ 0x0
  5961                           
  5962  0070                     ?_Battery_State_Machine:	
  5963                           ; 1 bytes @ 0x0
  5964                           
  5965  0070                     ?_cc_cv_mode:	
  5966                           ; 1 bytes @ 0x0
  5967                           
  5968  0070                     ?_readButton:	
  5969                           ; 1 bytes @ 0x0
  5970                           
  5971  0070                     ?_LCDWriteCharacter:	
  5972                           ; 1 bytes @ 0x0
  5973                           
  5974  0070                     ?_LCDClear:	
  5975                           ; 1 bytes @ 0x0
  5976                           
  5977  0070                     ?_LCDInit:	
  5978                           ; 1 bytes @ 0x0
  5979                           
  5980  0070                     ?_PIN_MANAGER_Initialize:	
  5981                           ; 1 bytes @ 0x0
  5982                           
  5983  0070                     ??_PIN_MANAGER_Initialize:	
  5984                           ; 1 bytes @ 0x0
  5985                           
  5986  0070                     ?_PWM_Initialize:	
  5987                           ; 1 bytes @ 0x0
  5988                           
  5989  0070                     ??_PWM_Initialize:	
  5990                           ; 1 bytes @ 0x0
  5991                           
  5992  0070                     ?_PWM6_LoadDutyValue:	
  5993                           ; 1 bytes @ 0x0
  5994                           
  5995  0070                     ?_PWM7_LoadDutyValue:	
  5996                           ; 1 bytes @ 0x0
  5997                           
  5998  0070                     ?_PWM1_LoadDutyValue:	
  5999                           ; 1 bytes @ 0x0
  6000                           
  6001  0070                     ?_SYSTEM_Initialize:	
  6002                           ; 1 bytes @ 0x0
  6003                           
  6004  0070                     ?_main:	
  6005                           ; 1 bytes @ 0x0
  6006                           
  6007  0070                     ?___bmul:	
  6008                           ; 1 bytes @ 0x0
  6009                           
  6010  0070                     ?_ADCRead:	
  6011                           ; 1 bytes @ 0x0
  6012                           
  6013  0070                     ?___wmul:	
  6014                           ; 2 bytes @ 0x0
  6015                           
  6016  0070                     ?___awdiv:	
  6017                           ; 2 bytes @ 0x0
  6018                           
  6019  0070                     ?___lwmod:	
  6020                           ; 2 bytes @ 0x0
  6021                           
  6022  0070                     ?___ftpack:	
  6023                           ; 2 bytes @ 0x0
  6024                           
  6025  0070                     ?_frexp:	
  6026                           ; 3 bytes @ 0x0
  6027                           
  6028  0070                     ?___aldiv:	
  6029                           ; 3 bytes @ 0x0
  6030                           
  6031  0070                     LCDWrite@data:	
  6032                           ; 4 bytes @ 0x0
  6033                           
  6034  0070                     PIN_MANAGER_Initialize@state:	
  6035                           ; 1 bytes @ 0x0
  6036                           
  6037  0070                     ___bmul@multiplicand:	
  6038                           ; 1 bytes @ 0x0
  6039                           
  6040  0070                     PWM6_LoadDutyValue@dutyCycle6:	
  6041                           ; 1 bytes @ 0x0
  6042                           
  6043  0070                     PWM7_LoadDutyValue@dutyCycle7:	
  6044                           ; 2 bytes @ 0x0
  6045                           
  6046  0070                     PWM1_LoadDutyValue@dutyCycle1:	
  6047                           ; 2 bytes @ 0x0
  6048                           
  6049  0070                     ___wmul@multiplier:	
  6050                           ; 2 bytes @ 0x0
  6051                           
  6052  0070                     ___awdiv@divisor:	
  6053                           ; 2 bytes @ 0x0
  6054                           
  6055  0070                     ___lwmod@divisor:	
  6056                           ; 2 bytes @ 0x0
  6057                           
  6058  0070                     ___ftpack@arg:	
  6059                           ; 2 bytes @ 0x0
  6060                           
  6061  0070                     frexp@value:	
  6062                           ; 3 bytes @ 0x0
  6063                           
  6064  0070                     ___aldiv@divisor:	
  6065                           ; 3 bytes @ 0x0
  6066                           
  6067                           
  6068                           ; 4 bytes @ 0x0
  6069  0070                     	ds	1
  6070  0071                     ??_LCDWrite:	
  6071  0071                     ??___bmul:	
  6072                           ; 1 bytes @ 0x1
  6073                           
  6074                           
  6075                           ; 1 bytes @ 0x1
  6076  0071                     	ds	1
  6077  0072                     ??_PWM6_LoadDutyValue:	
  6078  0072                     ??_PWM7_LoadDutyValue:	
  6079                           ; 1 bytes @ 0x2
  6080                           
  6081  0072                     ??_PWM1_LoadDutyValue:	
  6082                           ; 1 bytes @ 0x2
  6083                           
  6084  0072                     LCDWrite@data_or_command:	
  6085                           ; 1 bytes @ 0x2
  6086                           
  6087  0072                     ___bmul@product:	
  6088                           ; 1 bytes @ 0x2
  6089                           
  6090  0072                     ___wmul@multiplicand:	
  6091                           ; 1 bytes @ 0x2
  6092                           
  6093  0072                     ___awdiv@dividend:	
  6094                           ; 2 bytes @ 0x2
  6095                           
  6096  0072                     ___lwmod@dividend:	
  6097                           ; 2 bytes @ 0x2
  6098                           
  6099                           
  6100                           ; 2 bytes @ 0x2
  6101  0072                     	ds	1
  6102  0073                     ??_ADCRead:	
  6103  0073                     ADCRead@channel:	
  6104                           ; 1 bytes @ 0x3
  6105                           
  6106  0073                     LCDWrite@d:	
  6107                           ; 1 bytes @ 0x3
  6108                           
  6109  0073                     ___bmul@multiplier:	
  6110                           ; 1 bytes @ 0x3
  6111                           
  6112  0073                     ___ftpack@exp:	
  6113                           ; 1 bytes @ 0x3
  6114                           
  6115  0073                     frexp@eptr:	
  6116                           ; 1 bytes @ 0x3
  6117                           
  6118                           
  6119                           ; 1 bytes @ 0x3
  6120  0073                     	ds	1
  6121  0074                     ??_frexp:	
  6122  0074                     ??_readButton:	
  6123                           ; 1 bytes @ 0x4
  6124                           
  6125  0074                     ??___wmul:	
  6126                           ; 1 bytes @ 0x4
  6127                           
  6128  0074                     ??___awdiv:	
  6129                           ; 1 bytes @ 0x4
  6130                           
  6131  0074                     ??___lwmod:	
  6132                           ; 1 bytes @ 0x4
  6133                           
  6134  0074                     LCDWrite@i:	
  6135                           ; 1 bytes @ 0x4
  6136                           
  6137  0074                     ___ftpack@sign:	
  6138                           ; 1 bytes @ 0x4
  6139                           
  6140  0074                     ___wmul@product:	
  6141                           ; 1 bytes @ 0x4
  6142                           
  6143  0074                     ___aldiv@dividend:	
  6144                           ; 2 bytes @ 0x4
  6145                           
  6146                           
  6147                           ; 4 bytes @ 0x4
  6148  0074                     	ds	1
  6149  0075                     ??___ftpack:	
  6150  0075                     ?_gotoXY:	
  6151                           ; 1 bytes @ 0x5
  6152                           
  6153  0075                     ??_LCDInit:	
  6154                           ; 1 bytes @ 0x5
  6155                           
  6156  0075                     gotoXY@y:	
  6157                           ; 1 bytes @ 0x5
  6158                           
  6159  0075                     ___awdiv@counter:	
  6160                           ; 1 bytes @ 0x5
  6161                           
  6162  0075                     ___lwmod@counter:	
  6163                           ; 1 bytes @ 0x5
  6164                           
  6165                           
  6166                           ; 1 bytes @ 0x5
  6167  0075                     	ds	1
  6168  0076                     ??_gotoXY:	
  6169  0076                     ??_LCDWriteCharacter:	
  6170                           ; 1 bytes @ 0x6
  6171                           
  6172  0076                     ___awdiv@sign:	
  6173                           ; 1 bytes @ 0x6
  6174                           
  6175                           
  6176                           ; 1 bytes @ 0x6
  6177  0076                     	ds	1
  6178  0077                     gotoXY@x:	
  6179  0077                     ___awdiv@quotient:	
  6180                           ; 1 bytes @ 0x7
  6181                           
  6182                           
  6183                           ; 2 bytes @ 0x7
  6184  0077                     	ds	1
  6185  0078                     ??_LCDClear:	
  6186  0078                     ??___aldiv:	
  6187                           ; 1 bytes @ 0x8
  6188                           
  6189                           
  6190                           ; 1 bytes @ 0x8
  6191  0078                     	ds	1
  6192  0079                     ?___awtoft:	
  6193  0079                     LCDWriteCharacter@character:	
  6194                           ; 3 bytes @ 0x9
  6195                           
  6196  0079                     readIAnalog@analog_channel:	
  6197                           ; 1 bytes @ 0x9
  6198                           
  6199  0079                     readVAnalog@analog_channel:	
  6200                           ; 2 bytes @ 0x9
  6201                           
  6202  0079                     LCDClear@index:	
  6203                           ; 2 bytes @ 0x9
  6204                           
  6205  0079                     ___awtoft@c:	
  6206                           ; 2 bytes @ 0x9
  6207                           
  6208                           
  6209                           ; 2 bytes @ 0x9
  6210  0079                     	ds	1
  6211  007A                     LCDWriteCharacter@base:	
  6212                           
  6213                           ; 2 bytes @ 0xA
  6214  007A                     	ds	1
  6215  007B                     readIAnalog@value:	
  6216  007B                     readVAnalog@value:	
  6217                           ; 2 bytes @ 0xB
  6218                           
  6219                           
  6220                           ; 2 bytes @ 0xB
  6221  007B                     	ds	1
  6222  007C                     ??___awtoft:	
  6223                           
  6224                           ; 1 bytes @ 0xC
  6225  007C                     	ds	2
  6226  007E                     ??_eval_poly:	
  6227  007E                     ??_tempCalc:	
  6228                           ; 1 bytes @ 0xE
  6229                           
  6230  007E                     ??___ftsub:	
  6231                           ; 1 bytes @ 0xE
  6232                           
  6233                           
  6234                           	psect	cstackBANK0
  6235  0020                     __pcstackBANK0:	
  6236                           ; 1 bytes @ 0xE
  6237                           
  6238  0020                     ___aldiv@counter:	
  6239  0020                     ___awtoft@sign:	
  6240                           ; 1 bytes @ 0x0
  6241                           
  6242                           
  6243                           ; 1 bytes @ 0x0
  6244  0020                     	ds	1
  6245  0021                     ?___ftdiv:	
  6246  0021                     ?___ftmul:	
  6247                           ; 3 bytes @ 0x1
  6248                           
  6249  0021                     ___aldiv@sign:	
  6250                           ; 3 bytes @ 0x1
  6251                           
  6252  0021                     ___ftdiv@f2:	
  6253                           ; 1 bytes @ 0x1
  6254                           
  6255  0021                     ___ftmul@f1:	
  6256                           ; 3 bytes @ 0x1
  6257                           
  6258                           
  6259                           ; 3 bytes @ 0x1
  6260  0021                     	ds	1
  6261  0022                     ___aldiv@quotient:	
  6262                           
  6263                           ; 4 bytes @ 0x2
  6264  0022                     	ds	2
  6265  0024                     ___ftdiv@f1:	
  6266  0024                     ___ftmul@f2:	
  6267                           ; 3 bytes @ 0x4
  6268                           
  6269                           
  6270                           ; 3 bytes @ 0x4
  6271  0024                     	ds	2
  6272  0026                     ?_readIAnalog:	
  6273  0026                     ?_readVAnalog:	
  6274                           ; 2 bytes @ 0x6
  6275                           
  6276  0026                     readIAnalog@channel:	
  6277                           ; 2 bytes @ 0x6
  6278                           
  6279  0026                     readVAnalog@channel:	
  6280                           ; 2 bytes @ 0x6
  6281                           
  6282                           
  6283                           ; 2 bytes @ 0x6
  6284  0026                     	ds	1
  6285  0027                     ??___ftdiv:	
  6286  0027                     ??___ftmul:	
  6287                           ; 1 bytes @ 0x7
  6288                           
  6289                           
  6290                           ; 1 bytes @ 0x7
  6291  0027                     	ds	1
  6292  0028                     ??_readIAnalog:	
  6293  0028                     ??_readVAnalog:	
  6294                           ; 1 bytes @ 0x8
  6295                           
  6296                           
  6297                           ; 1 bytes @ 0x8
  6298  0028                     	ds	3
  6299  002B                     ___ftdiv@cntr:	
  6300  002B                     ___ftmul@exp:	
  6301                           ; 1 bytes @ 0xB
  6302                           
  6303                           
  6304                           ; 1 bytes @ 0xB
  6305  002B                     	ds	1
  6306  002C                     ___ftdiv@f3:	
  6307  002C                     ___ftmul@f3_as_product:	
  6308                           ; 3 bytes @ 0xC
  6309                           
  6310                           
  6311                           ; 3 bytes @ 0xC
  6312  002C                     	ds	3
  6313  002F                     ___ftdiv@exp:	
  6314  002F                     ___ftmul@cntr:	
  6315                           ; 1 bytes @ 0xF
  6316                           
  6317                           
  6318                           ; 1 bytes @ 0xF
  6319  002F                     	ds	1
  6320  0030                     ___ftdiv@sign:	
  6321  0030                     ___ftmul@sign:	
  6322                           ; 1 bytes @ 0x10
  6323                           
  6324                           
  6325                           ; 1 bytes @ 0x10
  6326  0030                     	ds	1
  6327  0031                     ?___ftge:	
  6328  0031                     ?___ftadd:	
  6329                           ; 1 bit 
  6330                           
  6331  0031                     ?___fttol:	
  6332                           ; 3 bytes @ 0x11
  6333                           
  6334  0031                     ___ftadd@f1:	
  6335                           ; 4 bytes @ 0x11
  6336                           
  6337  0031                     ___ftge@ff1:	
  6338                           ; 3 bytes @ 0x11
  6339                           
  6340  0031                     ___fttol@f1:	
  6341                           ; 3 bytes @ 0x11
  6342                           
  6343                           
  6344                           ; 3 bytes @ 0x11
  6345  0031                     	ds	3
  6346  0034                     ___ftadd@f2:	
  6347  0034                     ___ftge@ff2:	
  6348                           ; 3 bytes @ 0x14
  6349                           
  6350                           
  6351                           ; 3 bytes @ 0x14
  6352  0034                     	ds	1
  6353  0035                     ??___fttol:	
  6354                           
  6355                           ; 1 bytes @ 0x15
  6356  0035                     	ds	2
  6357  0037                     ??___ftadd:	
  6358  0037                     ??___ftge:	
  6359                           ; 1 bytes @ 0x17
  6360                           
  6361                           
  6362                           ; 1 bytes @ 0x17
  6363  0037                     	ds	2
  6364  0039                     ___fttol@sign1:	
  6365                           
  6366                           ; 1 bytes @ 0x19
  6367  0039                     	ds	1
  6368  003A                     ___fttol@lval:	
  6369                           
  6370                           ; 4 bytes @ 0x1A
  6371  003A                     	ds	1
  6372  003B                     ___ftadd@sign:	
  6373                           
  6374                           ; 1 bytes @ 0x1B
  6375  003B                     	ds	1
  6376  003C                     ___ftadd@exp2:	
  6377                           
  6378                           ; 1 bytes @ 0x1C
  6379  003C                     	ds	1
  6380  003D                     ___ftadd@exp1:	
  6381                           
  6382                           ; 1 bytes @ 0x1D
  6383  003D                     	ds	1
  6384  003E                     ?_eval_poly:	
  6385  003E                     ?___ftsub:	
  6386                           ; 3 bytes @ 0x1E
  6387                           
  6388  003E                     ___fttol@exp1:	
  6389                           ; 3 bytes @ 0x1E
  6390                           
  6391  003E                     ___ftsub@f2:	
  6392                           ; 1 bytes @ 0x1E
  6393                           
  6394  003E                     eval_poly@x:	
  6395                           ; 3 bytes @ 0x1E
  6396                           
  6397                           
  6398                           ; 3 bytes @ 0x1E
  6399  003E                     	ds	1
  6400  003F                     ??_calculateCurrent0:	
  6401  003F                     ??_calculateCurrent3:	
  6402                           ; 1 bytes @ 0x1F
  6403                           
  6404  003F                     ??_Init_Battery_State_Machine:	
  6405                           ; 1 bytes @ 0x1F
  6406                           
  6407  003F                     ??_Battery_State_Machine:	
  6408                           ; 1 bytes @ 0x1F
  6409                           
  6410  003F                     ??_cc_cv_mode:	
  6411                           ; 1 bytes @ 0x1F
  6412                           
  6413  003F                     ?_LCDWriteInt:	
  6414                           ; 1 bytes @ 0x1F
  6415                           
  6416  003F                     LCDWriteInt@value:	
  6417                           ; 1 bytes @ 0x1F
  6418                           
  6419                           
  6420                           ; 2 bytes @ 0x1F
  6421  003F                     	ds	2
  6422  0041                     LCDWriteInt@fieldLength:	
  6423  0041                     eval_poly@d:	
  6424                           ; 1 bytes @ 0x21
  6425                           
  6426  0041                     ___ftsub@f1:	
  6427                           ; 2 bytes @ 0x21
  6428                           
  6429                           
  6430                           ; 3 bytes @ 0x21
  6431  0041                     	ds	1
  6432  0042                     LCDWriteInt@numPlaces:	
  6433                           
  6434                           ; 1 bytes @ 0x22
  6435  0042                     	ds	1
  6436  0043                     Init_Battery_State_Machine@z:	
  6437  0043                     LCDWriteInt@sign:	
  6438                           ; 1 bytes @ 0x23
  6439                           
  6440  0043                     eval_poly@n:	
  6441                           ; 1 bytes @ 0x23
  6442                           
  6443                           
  6444                           ; 2 bytes @ 0x23
  6445  0043                     	ds	1
  6446  0044                     ??_LCDWriteInt:	
  6447  0044                     ??_SYSTEM_Initialize:	
  6448                           ; 1 bytes @ 0x24
  6449                           
  6450  0044                     Battery_State_Machine@z:	
  6451                           ; 1 bytes @ 0x24
  6452                           
  6453                           
  6454                           ; 1 bytes @ 0x24
  6455  0044                     	ds	1
  6456  0045                     eval_poly@res:	
  6457                           
  6458                           ; 3 bytes @ 0x25
  6459  0045                     	ds	1
  6460  0046                     cc_cv_mode@z:	
  6461                           
  6462                           ; 1 bytes @ 0x26
  6463  0046                     	ds	2
  6464  0048                     ?_log:	
  6465  0048                     log@x:	
  6466                           ; 3 bytes @ 0x28
  6467                           
  6468  0048                     LCDWriteInt@str:	
  6469                           ; 3 bytes @ 0x28
  6470                           
  6471                           
  6472                           ; 5 bytes @ 0x28
  6473  0048                     	ds	3
  6474  004B                     ??_log:	
  6475                           
  6476                           ; 1 bytes @ 0x2B
  6477  004B                     	ds	1
  6478  004C                     log@exponent:	
  6479                           
  6480                           ; 2 bytes @ 0x2C
  6481  004C                     	ds	1
  6482  004D                     LCDWriteInt@j:	
  6483                           
  6484                           ; 1 bytes @ 0x2D
  6485  004D                     	ds	1
  6486  004E                     ?_tempCalc:	
  6487  004E                     LCDWriteInt@i:	
  6488                           ; 2 bytes @ 0x2E
  6489                           
  6490  004E                     tempCalc@analogValue:	
  6491                           ; 1 bytes @ 0x2E
  6492                           
  6493                           
  6494                           ; 2 bytes @ 0x2E
  6495  004E                     	ds	2
  6496  0050                     tempCalc@R:	
  6497                           
  6498                           ; 3 bytes @ 0x30
  6499  0050                     	ds	3
  6500  0053                     _tempCalc$1283:	
  6501                           
  6502                           ; 3 bytes @ 0x33
  6503  0053                     	ds	3
  6504  0056                     tempCalc@steinhart:	
  6505                           
  6506                           ; 3 bytes @ 0x36
  6507  0056                     	ds	3
  6508  0059                     ??_main:	
  6509                           
  6510                           ; 1 bytes @ 0x39
  6511  0059                     	ds	5
  6512                           
  6513                           	psect	maintext
  6514  0054                     __pmaintext:	
  6515 ;;
  6516 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  6517 ;;
  6518 ;; *************** function _main *****************
  6519 ;; Defined at:
  6520 ;;		line 33 in file "main.c"
  6521 ;; Parameters:    Size  Location     Type
  6522 ;;		None
  6523 ;; Auto vars:     Size  Location     Type
  6524 ;;  tempVoltage     8    8[BANK1 ] int [4]
  6525 ;;  efficiency      3    0[BANK1 ] float 
  6526 ;;  dutyCycle7      2   34[BANK1 ] unsigned int 
  6527 ;;  dutyCycle6      2   32[BANK1 ] unsigned int 
  6528 ;;  tempFanOutpu    2   27[BANK1 ] unsigned int 
  6529 ;;  dutyCycle1      2   25[BANK1 ] unsigned int 
  6530 ;;  largerIOut      2   22[BANK1 ] int 
  6531 ;;  MPPT1           2   20[BANK1 ] int 
  6532 ;;  MPPT0           2   18[BANK1 ] int 
  6533 ;;  faultNotRese    2    6[BANK1 ] unsigned int 
  6534 ;;  faultCount      2    4[BANK1 ] unsigned int 
  6535 ;;  j               1   36[BANK1 ] unsigned char 
  6536 ;;  menuButton      1   24[BANK1 ] unsigned char 
  6537 ;;  slowLoop        1   17[BANK1 ] unsigned char 
  6538 ;;  displayRefre    1   16[BANK1 ] unsigned char 
  6539 ;;  fastLoop        1    3[BANK1 ] unsigned char 
  6540 ;; Return value:  Size  Location     Type
  6541 ;;                  1    wreg      void 
  6542 ;; Registers used:
  6543 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6544 ;; Tracked objects:
  6545 ;;		On entry : B1F/0
  6546 ;;		On exit  : 0/0
  6547 ;;		Unchanged: 0/0
  6548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;      Locals:         0       0      37       0       0       0       0       0       0       0       0       0       
      +0       0
  6551 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6552 ;;      Totals:         0       5      37       0       0       0       0       0       0       0       0       0       
      +0       0
  6553 ;;Total ram usage:       42 bytes
  6554 ;; Hardware stack levels required when called:    5
  6555 ;; This function calls:
  6556 ;;		_ADCRead
  6557 ;;		_Battery_State_Machine
  6558 ;;		_LCDClear
  6559 ;;		_LCDInit
  6560 ;;		_LCDWriteCharacter
  6561 ;;		_LCDWriteInt
  6562 ;;		_PWM1_LoadDutyValue
  6563 ;;		_PWM6_LoadDutyValue
  6564 ;;		_PWM7_LoadDutyValue
  6565 ;;		_SYSTEM_Initialize
  6566 ;;		___awdiv
  6567 ;;		___awtoft
  6568 ;;		___ftdiv
  6569 ;;		___ftge
  6570 ;;		___ftmul
  6571 ;;		___fttol
  6572 ;;		_calculateCurrent0
  6573 ;;		_calculateCurrent2
  6574 ;;		_calculateCurrent3
  6575 ;;		_cc_cv_mode
  6576 ;;		_gotoXY
  6577 ;;		_readButton
  6578 ;;		_readIAnalog
  6579 ;;		_readVAnalog
  6580 ;;		_tempCalc
  6581 ;; This function is called by:
  6582 ;;		Startup code after reset
  6583 ;; This function uses a non-reentrant model
  6584 ;;
  6585                           
  6586                           
  6587                           ;psect for function _main
  6588  0054                     _main:	
  6589                           
  6590                           ;main.c: 35: int16_t MPPT0 = 3144;
  6591                           
  6592                           ;incstack = 0
  6593                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6594  0054  3048               	movlw	72
  6595  0055  0021               	movlb	1	; select bank1
  6596  0056  00DB               	movwf	main@MPPT0^(0+128)
  6597  0057  300C               	movlw	12
  6598  0058  00DC               	movwf	(main@MPPT0^(0+128)+1)
  6599                           
  6600                           ;main.c: 36: int16_t MPPT1 = 3144;
  6601  0059  3048               	movlw	72
  6602  005A  00DD               	movwf	main@MPPT1^(0+128)
  6603  005B  300C               	movlw	12
  6604  005C  00DE               	movwf	(main@MPPT1^(0+128)+1)
  6605                           
  6606                           ;main.c: 38: extern uint8_t batteryState[2];
  6607                           ;main.c: 39: uint8_t displayRefresh = 0;
  6608  005D  01D9               	clrf	main@displayRefresh^(0+128)
  6609                           
  6610                           ;main.c: 40: uint16_t dutyCycle6 = 1023;
  6611  005E  30FF               	movlw	255
  6612  005F  00E9               	movwf	main@dutyCycle6^(0+128)
  6613  0060  3003               	movlw	3
  6614  0061  00EA               	movwf	(main@dutyCycle6^(0+128)+1)
  6615                           
  6616                           ;main.c: 41: uint16_t dutyCycle7 = 1023;
  6617  0062  30FF               	movlw	255
  6618  0063  00EB               	movwf	main@dutyCycle7^(0+128)
  6619  0064  3003               	movlw	3
  6620  0065  00EC               	movwf	(main@dutyCycle7^(0+128)+1)
  6621                           
  6622                           ;main.c: 42: uint16_t dutyCycle1 = 260;
  6623  0066  3004               	movlw	4
  6624  0067  00E2               	movwf	main@dutyCycle1^(0+128)
  6625  0068  3001               	movlw	1
  6626  0069  00E3               	movwf	(main@dutyCycle1^(0+128)+1)
  6627                           
  6628                           ;main.c: 43: float efficiency = 0;
  6629  006A  3000               	movlw	0
  6630  006B  00C9               	movwf	main@efficiency^(0+128)
  6631  006C  3000               	movlw	0
  6632  006D  00CA               	movwf	(main@efficiency+1)^(0+128)
  6633  006E  3000               	movlw	0
  6634  006F  00CB               	movwf	(main@efficiency+2)^(0+128)
  6635                           
  6636                           ;main.c: 44: uint16_t faultCount = 0;
  6637  0070  01CD               	clrf	main@faultCount^(0+128)
  6638  0071  01CE               	clrf	(main@faultCount+1)^(0+128)
  6639                           
  6640                           ;main.c: 45: uint16_t faultNotReset = 0;
  6641  0072  01CF               	clrf	main@faultNotReset^(0+128)
  6642  0073  01D0               	clrf	(main@faultNotReset+1)^(0+128)
  6643                           
  6644                           ;main.c: 47: extern int8_t Imode[2];
  6645                           ;main.c: 48: int16_t largerIOut = 0;
  6646  0074  01DF               	clrf	main@largerIOut^(0+128)
  6647  0075  01E0               	clrf	(main@largerIOut+1)^(0+128)
  6648                           
  6649                           ;main.c: 49: extern int16_t Iref[2];
  6650                           ;main.c: 50: uint8_t j = 0;
  6651  0076  01ED               	clrf	main@j^(0+128)
  6652                           
  6653                           ;main.c: 51: uint8_t menuButton = 0;
  6654  0077  01E1               	clrf	main@menuButton^(0+128)
  6655                           
  6656                           ;main.c: 52: uint8_t fastLoop = 0;
  6657  0078  01CC               	clrf	main@fastLoop^(0+128)
  6658                           
  6659                           ;main.c: 53: uint8_t slowLoop = 200;
  6660  0079  30C8               	movlw	200
  6661  007A  0020               	movlb	0	; select bank0
  6662  007B  00D9               	movwf	??_main
  6663  007C  0859               	movf	??_main,w
  6664  007D  0021               	movlb	1	; select bank1
  6665  007E  00DA               	movwf	main@slowLoop^(0+128)
  6666                           
  6667                           ;main.c: 54: uint16_t tempFanOutput = 60;
  6668  007F  303C               	movlw	60
  6669  0080  00E4               	movwf	main@tempFanOutput^(0+128)
  6670  0081  3000               	movlw	0
  6671  0082  00E5               	movwf	(main@tempFanOutput^(0+128)+1)
  6672                           
  6673                           ;main.c: 55: extern int8_t VHoldMode[2];
  6674                           ;main.c: 56: extern int16_t Vref[2];
  6675                           ;main.c: 57: int16_t tempVoltage[4];
  6676                           ;main.c: 60: SYSTEM_Initialize();
  6677  0083  3192  2213  3180   	fcall	_SYSTEM_Initialize
  6678                           
  6679                           ;main.c: 62: LCDClear();
  6680  0086  319F  2777  3180   	fcall	_LCDClear
  6681  0089                     l3346:	
  6682                           ;main.c: 64: void calculateCurrent0(void);
  6683                           ;main.c: 66: void calculateCurrent2(void);
  6684                           ;main.c: 67: void calculateCurrent3(void);
  6685                           ;main.c: 70: while (1)
  6686                           
  6687                           
  6688                           ;main.c: 71: {
  6689                           ;main.c: 72: if(!(RB2))
  6690  0089  0020               	movlb	0	; select bank0
  6691  008A  190D               	btfsc	13,2	;volatile
  6692  008B  289D               	goto	l3354
  6693                           
  6694                           ;main.c: 73: {
  6695                           ;main.c: 74: LATA5=0;
  6696  008C  1296               	bcf	22,5	;volatile
  6697                           
  6698                           ;main.c: 75: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  6699  008D  300B               	movlw	11
  6700  008E  00DA               	movwf	??_main+1
  6701  008F  3062               	movlw	98
  6702  0090  00D9               	movwf	??_main
  6703  0091                     u4517:	
  6704  0091  0BD9               	decfsz	??_main,f
  6705  0092  2891               	goto	u4517
  6706  0093  0BDA               	decfsz	??_main+1,f
  6707  0094  2891               	goto	u4517
  6708  0095  0000               	nop
  6709                           
  6710                           ;main.c: 76: faultCount+=1;
  6711  0096  3001               	movlw	1
  6712  0097  0021               	movlb	1	; select bank1
  6713  0098  07CD               	addwf	main@faultCount^(0+128),f
  6714  0099  3000               	movlw	0
  6715  009A  3DCE               	addwfc	(main@faultCount+1)^(0+128),f
  6716                           
  6717                           ;main.c: 77: LATA5=1;
  6718  009B  0020               	movlb	0	; select bank0
  6719  009C  1696               	bsf	22,5	;volatile
  6720  009D                     l3354:	
  6721                           
  6722                           ;main.c: 78: }
  6723                           ;main.c: 79: for(j=0;j<4;j++) Ianalogs[j]=readIAnalog(j);
  6724  009D  0021               	movlb	1	; select bank1
  6725  009E  01ED               	clrf	main@j^(0+128)
  6726  009F  3004               	movlw	4
  6727  00A0  026D               	subwf	main@j^(0+128),w
  6728  00A1  1803               	btfsc	3,0
  6729  00A2  28C2               	goto	l3366
  6730  00A3                     l3360:	
  6731  00A3  086D               	movf	main@j^(0+128),w
  6732  00A4  0020               	movlb	0	; select bank0
  6733  00A5  00D9               	movwf	??_main
  6734  00A6  01DA               	clrf	??_main+1
  6735  00A7  0859               	movf	??_main,w
  6736  00A8  00A6               	movwf	readIAnalog@channel
  6737  00A9  085A               	movf	??_main+1,w
  6738  00AA  00A7               	movwf	readIAnalog@channel+1
  6739  00AB  318C  24FA  3180   	fcall	_readIAnalog
  6740  00AE  0021               	movlb	1	; select bank1
  6741  00AF  356D               	lslf	main@j^(0+128),w
  6742  00B0  3E40               	addlw	(low (_Ianalogs| (0+256)))& (0+255)
  6743  00B1  0086               	movwf	6
  6744  00B2  3001               	movlw	1	; select bank2/3
  6745  00B3  0087               	movwf	7
  6746  00B4  0020               	movlb	0	; select bank0
  6747  00B5  0826               	movf	?_readIAnalog,w
  6748  00B6  3FC0               	movwi [0]fsr1
  6749  00B7  0827               	movf	?_readIAnalog+1,w
  6750  00B8  3FC1               	movwi [1]fsr1
  6751  00B9  3001               	movlw	1
  6752  00BA  00D9               	movwf	??_main
  6753  00BB  0859               	movf	??_main,w
  6754  00BC  0021               	movlb	1	; select bank1
  6755  00BD  07ED               	addwf	main@j^(0+128),f
  6756  00BE  3004               	movlw	4
  6757  00BF  026D               	subwf	main@j^(0+128),w
  6758  00C0  1C03               	skipc
  6759  00C1  28A3               	goto	l3360
  6760  00C2                     l3366:	
  6761                           
  6762                           ;main.c: 81: for(j=0;j<4;j++) Vanalogs[j]=readVAnalog(j);
  6763  00C2  01ED               	clrf	main@j^(0+128)
  6764  00C3  3004               	movlw	4
  6765  00C4  026D               	subwf	main@j^(0+128),w
  6766  00C5  1803               	btfsc	3,0
  6767  00C6  28E6               	goto	l470
  6768  00C7                     l3372:	
  6769  00C7  086D               	movf	main@j^(0+128),w
  6770  00C8  0020               	movlb	0	; select bank0
  6771  00C9  00D9               	movwf	??_main
  6772  00CA  01DA               	clrf	??_main+1
  6773  00CB  0859               	movf	??_main,w
  6774  00CC  00A6               	movwf	readVAnalog@channel
  6775  00CD  085A               	movf	??_main+1,w
  6776  00CE  00A7               	movwf	readVAnalog@channel+1
  6777  00CF  318A  2299  3180   	fcall	_readVAnalog
  6778  00D2  0021               	movlb	1	; select bank1
  6779  00D3  356D               	lslf	main@j^(0+128),w
  6780  00D4  3E48               	addlw	(low (_Vanalogs| (0+256)))& (0+255)
  6781  00D5  0086               	movwf	6
  6782  00D6  3001               	movlw	1	; select bank2/3
  6783  00D7  0087               	movwf	7
  6784  00D8  0020               	movlb	0	; select bank0
  6785  00D9  0826               	movf	?_readVAnalog,w
  6786  00DA  3FC0               	movwi [0]fsr1
  6787  00DB  0827               	movf	?_readVAnalog+1,w
  6788  00DC  3FC1               	movwi [1]fsr1
  6789  00DD  3001               	movlw	1
  6790  00DE  00D9               	movwf	??_main
  6791  00DF  0859               	movf	??_main,w
  6792  00E0  0021               	movlb	1	; select bank1
  6793  00E1  07ED               	addwf	main@j^(0+128),f
  6794  00E2  3004               	movlw	4
  6795  00E3  026D               	subwf	main@j^(0+128),w
  6796  00E4  1C03               	skipc
  6797  00E5  28C7               	goto	l3372
  6798  00E6                     l470:	
  6799                           
  6800                           ;main.c: 83: if(!(RB2))faultNotReset+=1;
  6801  00E6  0020               	movlb	0	; select bank0
  6802  00E7  190D               	btfsc	13,2	;volatile
  6803  00E8  28EE               	goto	l3380
  6804  00E9  3001               	movlw	1
  6805  00EA  0021               	movlb	1	; select bank1
  6806  00EB  07CF               	addwf	main@faultNotReset^(0+128),f
  6807  00EC  3000               	movlw	0
  6808  00ED  3DD0               	addwfc	(main@faultNotReset+1)^(0+128),f
  6809  00EE                     l3380:	
  6810                           
  6811                           ;main.c: 87: tempVoltage[0]=(int16_t)(Vanalogs[0]/.54245);
  6812  00EE  0022               	movlb	2	; select bank2
  6813  00EF  0849               	movf	(_Vanalogs+1)^(0+256),w
  6814  00F0  00FA               	movwf	___awtoft@c+1
  6815  00F1  0848               	movf	_Vanalogs^(0+256),w
  6816  00F2  00F9               	movwf	___awtoft@c
  6817  00F3  319F  2710  3180   	fcall	___awtoft
  6818  00F6  0879               	movf	?___awtoft,w
  6819  00F7  0020               	movlb	0	; select bank0
  6820  00F8  00A4               	movwf	___ftdiv@f1
  6821  00F9  087A               	movf	?___awtoft+1,w
  6822  00FA  00A5               	movwf	___ftdiv@f1+1
  6823  00FB  087B               	movf	?___awtoft+2,w
  6824  00FC  00A6               	movwf	___ftdiv@f1+2
  6825  00FD  30DE               	movlw	222
  6826  00FE  00A1               	movwf	___ftdiv@f2
  6827  00FF  300A               	movlw	10
  6828  0100  00A2               	movwf	___ftdiv@f2+1
  6829  0101  303F               	movlw	63
  6830  0102  00A3               	movwf	___ftdiv@f2+2
  6831  0103  3195  25F3  3180   	fcall	___ftdiv
  6832  0106  0020               	movlb	0	; select bank0
  6833  0107  0821               	movf	?___ftdiv,w
  6834  0108  00B1               	movwf	___fttol@f1
  6835  0109  0822               	movf	?___ftdiv+1,w
  6836  010A  00B2               	movwf	___fttol@f1+1
  6837  010B  0823               	movf	?___ftdiv+2,w
  6838  010C  00B3               	movwf	___fttol@f1+2
  6839  010D  3194  24E4  3180   	fcall	___fttol
  6840  0110  0020               	movlb	0	; select bank0
  6841  0111  0832               	movf	?___fttol+1,w
  6842  0112  0021               	movlb	1	; select bank1
  6843  0113  00D2               	movwf	(main@tempVoltage+1)^(0+128)
  6844  0114  0020               	movlb	0	; select bank0
  6845  0115  0831               	movf	?___fttol,w
  6846  0116  0021               	movlb	1	; select bank1
  6847  0117  00D1               	movwf	main@tempVoltage^(0+128)
  6848                           
  6849                           ;main.c: 89: tempVoltage[1]=(int16_t)(Vanalogs[1]/.54395);
  6850  0118  0022               	movlb	2	; select bank2
  6851  0119  084B               	movf	((_Vanalogs+1)^(0+256)+2),w
  6852  011A  00FA               	movwf	___awtoft@c+1
  6853  011B  084A               	movf	(_Vanalogs^(0+256)+2),w
  6854  011C  00F9               	movwf	___awtoft@c
  6855  011D  319F  2710  3180   	fcall	___awtoft
  6856  0120  0879               	movf	?___awtoft,w
  6857  0121  0020               	movlb	0	; select bank0
  6858  0122  00A4               	movwf	___ftdiv@f1
  6859  0123  087A               	movf	?___awtoft+1,w
  6860  0124  00A5               	movwf	___ftdiv@f1+1
  6861  0125  087B               	movf	?___awtoft+2,w
  6862  0126  00A6               	movwf	___ftdiv@f1+2
  6863  0127  3040               	movlw	64
  6864  0128  00A1               	movwf	___ftdiv@f2
  6865  0129  300B               	movlw	11
  6866  012A  00A2               	movwf	___ftdiv@f2+1
  6867  012B  303F               	movlw	63
  6868  012C  00A3               	movwf	___ftdiv@f2+2
  6869  012D  3195  25F3  3180   	fcall	___ftdiv
  6870  0130  0020               	movlb	0	; select bank0
  6871  0131  0821               	movf	?___ftdiv,w
  6872  0132  00B1               	movwf	___fttol@f1
  6873  0133  0822               	movf	?___ftdiv+1,w
  6874  0134  00B2               	movwf	___fttol@f1+1
  6875  0135  0823               	movf	?___ftdiv+2,w
  6876  0136  00B3               	movwf	___fttol@f1+2
  6877  0137  3194  24E4  3180   	fcall	___fttol
  6878  013A  0020               	movlb	0	; select bank0
  6879  013B  0832               	movf	?___fttol+1,w
  6880  013C  0021               	movlb	1	; select bank1
  6881  013D  00D4               	movwf	((main@tempVoltage+1)^(0+128)+2)
  6882  013E  0020               	movlb	0	; select bank0
  6883  013F  0831               	movf	?___fttol,w
  6884  0140  0021               	movlb	1	; select bank1
  6885  0141  00D3               	movwf	(main@tempVoltage^(0+128)+2)
  6886                           
  6887                           ;main.c: 91: tempVoltage[2]=(int16_t)(Vanalogs[2]/.208100558);
  6888  0142  0022               	movlb	2	; select bank2
  6889  0143  084D               	movf	((_Vanalogs+1)^(0+256)+4),w
  6890  0144  00FA               	movwf	___awtoft@c+1
  6891  0145  084C               	movf	(_Vanalogs^(0+256)+4),w
  6892  0146  00F9               	movwf	___awtoft@c
  6893  0147  319F  2710  3180   	fcall	___awtoft
  6894  014A  0879               	movf	?___awtoft,w
  6895  014B  0020               	movlb	0	; select bank0
  6896  014C  00A4               	movwf	___ftdiv@f1
  6897  014D  087A               	movf	?___awtoft+1,w
  6898  014E  00A5               	movwf	___ftdiv@f1+1
  6899  014F  087B               	movf	?___awtoft+2,w
  6900  0150  00A6               	movwf	___ftdiv@f1+2
  6901  0151  3018               	movlw	24
  6902  0152  00A1               	movwf	___ftdiv@f2
  6903  0153  3055               	movlw	85
  6904  0154  00A2               	movwf	___ftdiv@f2+1
  6905  0155  303E               	movlw	62
  6906  0156  00A3               	movwf	___ftdiv@f2+2
  6907  0157  3195  25F3  3180   	fcall	___ftdiv
  6908  015A  0020               	movlb	0	; select bank0
  6909  015B  0821               	movf	?___ftdiv,w
  6910  015C  00B1               	movwf	___fttol@f1
  6911  015D  0822               	movf	?___ftdiv+1,w
  6912  015E  00B2               	movwf	___fttol@f1+1
  6913  015F  0823               	movf	?___ftdiv+2,w
  6914  0160  00B3               	movwf	___fttol@f1+2
  6915  0161  3194  24E4  3180   	fcall	___fttol
  6916  0164  0020               	movlb	0	; select bank0
  6917  0165  0832               	movf	?___fttol+1,w
  6918  0166  0021               	movlb	1	; select bank1
  6919  0167  00D6               	movwf	((main@tempVoltage+1)^(0+128)+4)
  6920  0168  0020               	movlb	0	; select bank0
  6921  0169  0831               	movf	?___fttol,w
  6922  016A  0021               	movlb	1	; select bank1
  6923  016B  00D5               	movwf	(main@tempVoltage^(0+128)+4)
  6924                           
  6925                           ;main.c: 93: tempVoltage[3]=(int16_t)(Vanalogs[3]/.207755);
  6926  016C  0022               	movlb	2	; select bank2
  6927  016D  084F               	movf	((_Vanalogs+1)^(0+256)+6),w
  6928  016E  00FA               	movwf	___awtoft@c+1
  6929  016F  084E               	movf	(_Vanalogs^(0+256)+6),w
  6930  0170  00F9               	movwf	___awtoft@c
  6931  0171  319F  2710  3180   	fcall	___awtoft
  6932  0174  0879               	movf	?___awtoft,w
  6933  0175  0020               	movlb	0	; select bank0
  6934  0176  00A4               	movwf	___ftdiv@f1
  6935  0177  087A               	movf	?___awtoft+1,w
  6936  0178  00A5               	movwf	___ftdiv@f1+1
  6937  0179  087B               	movf	?___awtoft+2,w
  6938  017A  00A6               	movwf	___ftdiv@f1+2
  6939  017B  30BE               	movlw	190
  6940  017C  00A1               	movwf	___ftdiv@f2
  6941  017D  3054               	movlw	84
  6942  017E  00A2               	movwf	___ftdiv@f2+1
  6943  017F  303E               	movlw	62
  6944  0180  00A3               	movwf	___ftdiv@f2+2
  6945  0181  3195  25F3  3180   	fcall	___ftdiv
  6946  0184  0020               	movlb	0	; select bank0
  6947  0185  0821               	movf	?___ftdiv,w
  6948  0186  00B1               	movwf	___fttol@f1
  6949  0187  0822               	movf	?___ftdiv+1,w
  6950  0188  00B2               	movwf	___fttol@f1+1
  6951  0189  0823               	movf	?___ftdiv+2,w
  6952  018A  00B3               	movwf	___fttol@f1+2
  6953  018B  3194  24E4  3180   	fcall	___fttol
  6954  018E  0020               	movlb	0	; select bank0
  6955  018F  0832               	movf	?___fttol+1,w
  6956  0190  0021               	movlb	1	; select bank1
  6957  0191  00D8               	movwf	((main@tempVoltage+1)^(0+128)+6)
  6958  0192  0020               	movlb	0	; select bank0
  6959  0193  0831               	movf	?___fttol,w
  6960  0194  0021               	movlb	1	; select bank1
  6961  0195  00D7               	movwf	(main@tempVoltage^(0+128)+6)
  6962                           
  6963                           ;main.c: 95: for(j=0;j<4;j++)
  6964  0196  01ED               	clrf	main@j^(0+128)
  6965  0197  3004               	movlw	4
  6966  0198  026D               	subwf	main@j^(0+128),w
  6967  0199  1803               	btfsc	3,0
  6968  019A  29FA               	goto	l3406
  6969  019B                     l3394:	
  6970                           
  6971                           ;main.c: 96: {
  6972                           ;main.c: 97: if(tempVoltage[j]>voltage[j])voltage[j]+=1;
  6973  019B  356D               	lslf	main@j^(0+128),w
  6974  019C  3ED1               	addlw	(low (main@tempVoltage| 0))& (0+255)
  6975  019D  0086               	movwf	6
  6976  019E  0187               	clrf	7
  6977  019F  3F40               	moviw [0]fsr1
  6978  01A0  0020               	movlb	0	; select bank0
  6979  01A1  00D9               	movwf	??_main
  6980  01A2  3F41               	moviw [1]fsr1
  6981  01A3  00DA               	movwf	??_main+1
  6982  01A4  0021               	movlb	1	; select bank1
  6983  01A5  356D               	lslf	main@j^(0+128),w
  6984  01A6  3E5E               	addlw	(low (_voltage| 0))& (0+255)
  6985  01A7  0086               	movwf	6
  6986  01A8  0187               	clrf	7
  6987  01A9  3F40               	moviw [0]fsr1
  6988  01AA  0020               	movlb	0	; select bank0
  6989  01AB  00DB               	movwf	??_main+2
  6990  01AC  3F41               	moviw [1]fsr1
  6991  01AD  00DC               	movwf	??_main+3
  6992  01AE  085C               	movf	??_main+3,w
  6993  01AF  3A80               	xorlw	128
  6994  01B0  00DD               	movwf	??_main+4
  6995  01B1  085A               	movf	??_main+1,w
  6996  01B2  3A80               	xorlw	128
  6997  01B3  025D               	subwf	??_main+4,w
  6998  01B4  1D03               	skipz
  6999  01B5  29B8               	goto	u4145
  7000  01B6  0859               	movf	??_main,w
  7001  01B7  025B               	subwf	??_main+2,w
  7002  01B8                     u4145:	
  7003  01B8  1803               	skipnc
  7004  01B9  29C5               	goto	l3398
  7005  01BA  0021               	movlb	1	; select bank1
  7006  01BB  356D               	lslf	main@j^(0+128),w
  7007  01BC  3E5E               	addlw	(low (_voltage| 0))& (0+255)
  7008  01BD  0086               	movwf	6
  7009  01BE  0187               	clrf	7
  7010  01BF  3001               	movlw	1
  7011  01C0  0781               	addwf	1,f
  7012  01C1  3141               	addfsr 1,1
  7013  01C2  1803               	skipnc
  7014  01C3  0A81               	incf	1,f
  7015  01C4  29F0               	goto	l3402
  7016  01C5                     l3398:	
  7017                           
  7018                           ;main.c: 98: else if(tempVoltage[j]<voltage[j])voltage[j]-=1;
  7019  01C5  0021               	movlb	1	; select bank1
  7020  01C6  356D               	lslf	main@j^(0+128),w
  7021  01C7  3E5E               	addlw	(low (_voltage| 0))& (0+255)
  7022  01C8  0086               	movwf	6
  7023  01C9  0187               	clrf	7
  7024  01CA  3F40               	moviw [0]fsr1
  7025  01CB  0020               	movlb	0	; select bank0
  7026  01CC  00D9               	movwf	??_main
  7027  01CD  3F41               	moviw [1]fsr1
  7028  01CE  00DA               	movwf	??_main+1
  7029  01CF  0021               	movlb	1	; select bank1
  7030  01D0  356D               	lslf	main@j^(0+128),w
  7031  01D1  3ED1               	addlw	(low (main@tempVoltage| 0))& (0+255)
  7032  01D2  0086               	movwf	6
  7033  01D3  0187               	clrf	7
  7034  01D4  3F40               	moviw [0]fsr1
  7035  01D5  0020               	movlb	0	; select bank0
  7036  01D6  00DB               	movwf	??_main+2
  7037  01D7  3F41               	moviw [1]fsr1
  7038  01D8  00DC               	movwf	??_main+3
  7039  01D9  085C               	movf	??_main+3,w
  7040  01DA  3A80               	xorlw	128
  7041  01DB  00DD               	movwf	??_main+4
  7042  01DC  085A               	movf	??_main+1,w
  7043  01DD  3A80               	xorlw	128
  7044  01DE  025D               	subwf	??_main+4,w
  7045  01DF  1D03               	skipz
  7046  01E0  29E3               	goto	u4155
  7047  01E1  0859               	movf	??_main,w
  7048  01E2  025B               	subwf	??_main+2,w
  7049  01E3                     u4155:	
  7050  01E3  1803               	skipnc
  7051  01E4  29F0               	goto	l3402
  7052  01E5  0021               	movlb	1	; select bank1
  7053  01E6  356D               	lslf	main@j^(0+128),w
  7054  01E7  3E5E               	addlw	(low (_voltage| 0))& (0+255)
  7055  01E8  0086               	movwf	6
  7056  01E9  0187               	clrf	7
  7057  01EA  30FF               	movlw	255
  7058  01EB  0781               	addwf	1,f
  7059  01EC  3141               	addfsr 1,1
  7060  01ED  30FF               	movlw	255
  7061  01EE  3D81               	addwfc	1,f
  7062  01EF  317F               	addfsr 1,-1
  7063  01F0                     l3402:	
  7064  01F0  3001               	movlw	1
  7065  01F1  0020               	movlb	0	; select bank0
  7066  01F2  00D9               	movwf	??_main
  7067  01F3  0859               	movf	??_main,w
  7068  01F4  0021               	movlb	1	; select bank1
  7069  01F5  07ED               	addwf	main@j^(0+128),f
  7070  01F6  3004               	movlw	4
  7071  01F7  026D               	subwf	main@j^(0+128),w
  7072  01F8  1C03               	skipc
  7073  01F9  299B               	goto	l3394
  7074  01FA                     l3406:	
  7075                           
  7076                           ;main.c: 100: }
  7077                           ;main.c: 102: calculateCurrent0();
  7078  01FA  3192  2250  3180   	fcall	_calculateCurrent0
  7079                           
  7080                           ;main.c: 106: calculateCurrent2();
  7081  01FD  319F  2731  3180   	fcall	_calculateCurrent2
  7082                           
  7083                           ;main.c: 108: calculateCurrent3();
  7084  0200  3180  200F  3180   	fcall	_calculateCurrent3
  7085                           
  7086                           ;main.c: 110: current[1]=(int16_t)(current[3]*(voltage[3]/voltage[1]*.9));
  7087  0203  0020               	movlb	0	; select bank0
  7088  0204  0865               	movf	_voltage+7,w
  7089  0205  00F3               	movwf	___awdiv@dividend+1
  7090  0206  0864               	movf	_voltage+6,w
  7091  0207  00F2               	movwf	___awdiv@dividend
  7092  0208  0861               	movf	_voltage+3,w
  7093  0209  00F1               	movwf	___awdiv@divisor+1
  7094  020A  0860               	movf	_voltage+2,w
  7095  020B  00F0               	movwf	___awdiv@divisor
  7096  020C  3192  2295  3180   	fcall	___awdiv
  7097  020F  0871               	movf	?___awdiv+1,w
  7098  0210  00FA               	movwf	___awtoft@c+1
  7099  0211  0870               	movf	?___awdiv,w
  7100  0212  00F9               	movwf	___awtoft@c
  7101  0213  319F  2710  3180   	fcall	___awtoft
  7102  0216  0879               	movf	?___awtoft,w
  7103  0217  0020               	movlb	0	; select bank0
  7104  0218  00A4               	movwf	___ftmul@f2
  7105  0219  087A               	movf	?___awtoft+1,w
  7106  021A  00A5               	movwf	___ftmul@f2+1
  7107  021B  087B               	movf	?___awtoft+2,w
  7108  021C  00A6               	movwf	___ftmul@f2+2
  7109  021D  3066               	movlw	102
  7110  021E  00A1               	movwf	___ftmul@f1
  7111  021F  3066               	movlw	102
  7112  0220  00A2               	movwf	___ftmul@f1+1
  7113  0221  303F               	movlw	63
  7114  0222  00A3               	movwf	___ftmul@f1+2
  7115  0223  3197  274C  3180   	fcall	___ftmul
  7116  0226  0020               	movlb	0	; select bank0
  7117  0227  0821               	movf	?___ftmul,w
  7118  0228  0021               	movlb	1	; select bank1
  7119  0229  00E6               	movwf	_main$1284^(0+128)
  7120  022A  0020               	movlb	0	; select bank0
  7121  022B  0822               	movf	?___ftmul+1,w
  7122  022C  0021               	movlb	1	; select bank1
  7123  022D  00E7               	movwf	(_main$1284+1)^(0+128)
  7124  022E  0020               	movlb	0	; select bank0
  7125  022F  0823               	movf	?___ftmul+2,w
  7126  0230  0021               	movlb	1	; select bank1
  7127  0231  00E8               	movwf	(_main$1284+2)^(0+128)
  7128                           
  7129                           ;main.c: 110: current[1]=(int16_t)(current[3]*(voltage[3]/voltage[1]*.9));
  7130  0232  0827               	movf	((_current+1)^(0+128)+6),w
  7131  0233  00FA               	movwf	___awtoft@c+1
  7132  0234  0826               	movf	(_current^(0+128)+6),w
  7133  0235  00F9               	movwf	___awtoft@c
  7134  0236  319F  2710  3180   	fcall	___awtoft
  7135  0239  0879               	movf	?___awtoft,w
  7136  023A  0020               	movlb	0	; select bank0
  7137  023B  00A4               	movwf	___ftmul@f2
  7138  023C  087A               	movf	?___awtoft+1,w
  7139  023D  00A5               	movwf	___ftmul@f2+1
  7140  023E  087B               	movf	?___awtoft+2,w
  7141  023F  00A6               	movwf	___ftmul@f2+2
  7142  0240  0021               	movlb	1	; select bank1
  7143  0241  0866               	movf	_main$1284^(0+128),w
  7144  0242  0020               	movlb	0	; select bank0
  7145  0243  00A1               	movwf	___ftmul@f1
  7146  0244  0021               	movlb	1	; select bank1
  7147  0245  0867               	movf	(_main$1284+1)^(0+128),w
  7148  0246  0020               	movlb	0	; select bank0
  7149  0247  00A2               	movwf	___ftmul@f1+1
  7150  0248  0021               	movlb	1	; select bank1
  7151  0249  0868               	movf	(_main$1284+2)^(0+128),w
  7152  024A  0020               	movlb	0	; select bank0
  7153  024B  00A3               	movwf	___ftmul@f1+2
  7154  024C  3197  274C  3180   	fcall	___ftmul
  7155  024F  0020               	movlb	0	; select bank0
  7156  0250  0821               	movf	?___ftmul,w
  7157  0251  00B1               	movwf	___fttol@f1
  7158  0252  0822               	movf	?___ftmul+1,w
  7159  0253  00B2               	movwf	___fttol@f1+1
  7160  0254  0823               	movf	?___ftmul+2,w
  7161  0255  00B3               	movwf	___fttol@f1+2
  7162  0256  3194  24E4  3180   	fcall	___fttol
  7163  0259  0020               	movlb	0	; select bank0
  7164  025A  0832               	movf	?___fttol+1,w
  7165  025B  0021               	movlb	1	; select bank1
  7166  025C  00A3               	movwf	((_current+1)^(0+128)+2)
  7167  025D  0020               	movlb	0	; select bank0
  7168  025E  0831               	movf	?___fttol,w
  7169  025F  0021               	movlb	1	; select bank1
  7170  0260  00A2               	movwf	(_current^(0+128)+2)
  7171                           
  7172                           ;main.c: 112: if(Imode[0])
  7173  0261  0020               	movlb	0	; select bank0
  7174  0262  0866               	movf	_Imode,w
  7175  0263  1903               	btfsc	3,2
  7176  0264  2A83               	goto	l3422
  7177                           
  7178                           ;main.c: 113: {
  7179                           ;main.c: 114: if(voltage[2]<MPPT0)
  7180  0265  0863               	movf	_voltage+5,w
  7181  0266  3A80               	xorlw	128
  7182  0267  00D9               	movwf	??_main
  7183  0268  0021               	movlb	1	; select bank1
  7184  0269  085C               	movf	(main@MPPT0+1)^(0+128),w
  7185  026A  3A80               	xorlw	128
  7186  026B  0020               	movlb	0	; select bank0
  7187  026C  0259               	subwf	??_main,w
  7188  026D  1D03               	skipz
  7189  026E  2A73               	goto	u4185
  7190  026F  0021               	movlb	1	; select bank1
  7191  0270  085B               	movf	main@MPPT0^(0+128),w
  7192  0271  0020               	movlb	0	; select bank0
  7193  0272  0262               	subwf	_voltage+4,w
  7194  0273                     u4185:	
  7195  0273  1C03               	btfss	3,0
  7196  0274  2A92               	goto	L3
  7197                           
  7198                           ;main.c: 121: else if(voltage[2]>MPPT0)
  7199                           
  7200                           ;main.c: 119: }
  7201                           ;main.c: 120: }
  7202                           
  7203                           ;main.c: 117: {
  7204                           ;main.c: 118: dutyCycle6+=1;
  7205                           
  7206                           ;main.c: 115: {
  7207                           ;main.c: 116: if(dutyCycle6<1023)
  7208  0275  0021               	movlb	1	; select bank1
  7209  0276  085C               	movf	(main@MPPT0+1)^(0+128),w
  7210  0277  3A80               	xorlw	128
  7211  0278  0020               	movlb	0	; select bank0
  7212  0279  00D9               	movwf	??_main
  7213  027A  0863               	movf	_voltage+5,w
  7214  027B  3A80               	xorlw	128
  7215  027C  0259               	subwf	??_main,w
  7216  027D  1D03               	skipz
  7217  027E  2AAE               	goto	u4245
  7218  027F  0862               	movf	_voltage+4,w
  7219  0280  0021               	movlb	1	; select bank1
  7220  0281  025B               	subwf	main@MPPT0^(0+128),w
  7221  0282  2AAE               	goto	u4245
  7222  0283                     l3422:	
  7223                           ;main.c: 129: }
  7224                           
  7225                           ;main.c: 126: }
  7226                           ;main.c: 127: }
  7227                           
  7228                           ;main.c: 124: {
  7229                           ;main.c: 125: dutyCycle6-=1;
  7230                           
  7231                           ;main.c: 122: {
  7232                           ;main.c: 123: if(dutyCycle6>0)
  7233                           
  7234                           
  7235                           ;main.c: 130: else
  7236                           ;main.c: 131: {
  7237                           ;main.c: 132: if(voltage[0]>(int16_t)Vref[0])
  7238  0283  0021               	movlb	1	; select bank1
  7239  0284  0831               	movf	(_Vref+1)^(0+128),w
  7240  0285  3A80               	xorlw	128
  7241  0286  0020               	movlb	0	; select bank0
  7242  0287  00D9               	movwf	??_main
  7243  0288  085F               	movf	_voltage+1,w
  7244  0289  3A80               	xorlw	128
  7245  028A  0259               	subwf	??_main,w
  7246  028B  1D03               	skipz
  7247  028C  2A90               	goto	u4225
  7248  028D  085E               	movf	_voltage,w
  7249  028E  0021               	movlb	1	; select bank1
  7250  028F  0230               	subwf	_Vref^(0+128),w
  7251  0290                     u4225:	
  7252  0290  1803               	skipnc
  7253  0291  2A9F               	goto	l3428
  7254  0292                     L3:	
  7255                           
  7256                           ;main.c: 133: {
  7257                           ;main.c: 134: if(dutyCycle6<1023) dutyCycle6+=1;
  7258  0292  3003               	movlw	3
  7259  0293  0021               	movlb	1	; select bank1
  7260  0294  026A               	subwf	(main@dutyCycle6+1)^(0+128),w
  7261  0295  30FF               	movlw	255
  7262  0296  1903               	skipnz
  7263  0297  0269               	subwf	main@dutyCycle6^(0+128),w
  7264  0298  1803               	skipnc
  7265  0299  2AB9               	goto	l3434
  7266  029A  3001               	movlw	1
  7267  029B  07E9               	addwf	main@dutyCycle6^(0+128),f
  7268  029C  3000               	movlw	0
  7269  029D  3DEA               	addwfc	(main@dutyCycle6+1)^(0+128),f
  7270                           
  7271                           ;main.c: 135: }
  7272  029E  2AB9               	goto	l3434
  7273  029F                     l3428:	
  7274                           
  7275                           ;main.c: 136: else if(voltage[0]<(int16_t)Vref[0])
  7276  029F  0020               	movlb	0	; select bank0
  7277  02A0  085F               	movf	_voltage+1,w
  7278  02A1  3A80               	xorlw	128
  7279  02A2  00D9               	movwf	??_main
  7280  02A3  0021               	movlb	1	; select bank1
  7281  02A4  0831               	movf	(_Vref+1)^(0+128),w
  7282  02A5  3A80               	xorlw	128
  7283  02A6  0020               	movlb	0	; select bank0
  7284  02A7  0259               	subwf	??_main,w
  7285  02A8  1D03               	skipz
  7286  02A9  2AAE               	goto	u4245
  7287  02AA  0021               	movlb	1	; select bank1
  7288  02AB  0830               	movf	_Vref^(0+128),w
  7289  02AC  0020               	movlb	0	; select bank0
  7290  02AD  025E               	subwf	_voltage,w
  7291  02AE                     u4245:	
  7292  02AE  1803               	skipnc
  7293  02AF  2AB9               	goto	l3434
  7294                           
  7295                           ;main.c: 137: {
  7296                           ;main.c: 138: if(dutyCycle6>0) dutyCycle6-=1;;
  7297  02B0  0021               	movlb	1	; select bank1
  7298  02B1  0869               	movf	main@dutyCycle6^(0+128),w
  7299  02B2  046A               	iorwf	(main@dutyCycle6+1)^(0+128),w
  7300  02B3  1903               	btfsc	3,2
  7301  02B4  2AB9               	goto	l3434
  7302  02B5  3001               	movlw	1
  7303  02B6  02E9               	subwf	main@dutyCycle6^(0+128),f
  7304  02B7  3000               	movlw	0
  7305  02B8  3BEA               	subwfb	(main@dutyCycle6+1)^(0+128),f
  7306  02B9                     l3434:	
  7307                           ;main.c: 139: }
  7308                           
  7309                           
  7310                           ;main.c: 141: }
  7311                           ;main.c: 143: if(Imode[1])
  7312  02B9  0020               	movlb	0	; select bank0
  7313  02BA  0867               	movf	_Imode+1,w
  7314  02BB  1903               	btfsc	3,2
  7315  02BC  2ACE               	goto	l3446
  7316                           
  7317                           ;main.c: 144: {
  7318                           ;main.c: 145: if(voltage[3]<MPPT1)
  7319  02BD  0865               	movf	_voltage+7,w
  7320  02BE  3A80               	xorlw	128
  7321  02BF  00D9               	movwf	??_main
  7322  02C0  0021               	movlb	1	; select bank1
  7323  02C1  085E               	movf	(main@MPPT1+1)^(0+128),w
  7324  02C2  3A80               	xorlw	128
  7325  02C3  0020               	movlb	0	; select bank0
  7326  02C4  0259               	subwf	??_main,w
  7327  02C5  1D03               	skipz
  7328  02C6  2ACB               	goto	u4275
  7329  02C7  0021               	movlb	1	; select bank1
  7330  02C8  085D               	movf	main@MPPT1^(0+128),w
  7331  02C9  0020               	movlb	0	; select bank0
  7332  02CA  0264               	subwf	_voltage+6,w
  7333  02CB                     u4275:	
  7334  02CB  1C03               	btfss	3,0
  7335  02CC  2ADD               	goto	L4
  7336                           
  7337                           ;main.c: 150: }
  7338                           ;main.c: 151: }
  7339                           
  7340                           ;main.c: 148: {
  7341                           ;main.c: 149: dutyCycle7+=1;
  7342                           
  7343                           ;main.c: 146: {
  7344                           ;main.c: 147: if(dutyCycle7<1023)
  7345  02CD  2AFB               	goto	L5
  7346  02CE                     l3446:	
  7347                           ;main.c: 155: }
  7348                           ;main.c: 156: }
  7349                           
  7350                           ;main.c: 153: {
  7351                           ;main.c: 154: dutyCycle7-=1;
  7352                           
  7353                           ;main.c: 152: else if(dutyCycle7>0)
  7354                           
  7355                           
  7356                           ;main.c: 157: else
  7357                           ;main.c: 158: {
  7358                           ;main.c: 159: if(voltage[1]>(int16_t)Vref[1])
  7359  02CE  0021               	movlb	1	; select bank1
  7360  02CF  0833               	movf	((_Vref+1)^(0+128)+2),w
  7361  02D0  3A80               	xorlw	128
  7362  02D1  0020               	movlb	0	; select bank0
  7363  02D2  00D9               	movwf	??_main
  7364  02D3  0861               	movf	_voltage+3,w
  7365  02D4  3A80               	xorlw	128
  7366  02D5  0259               	subwf	??_main,w
  7367  02D6  1D03               	skipz
  7368  02D7  2ADB               	goto	u4305
  7369  02D8  0860               	movf	_voltage+2,w
  7370  02D9  0021               	movlb	1	; select bank1
  7371  02DA  0232               	subwf	(_Vref^(0+128)+2),w
  7372  02DB                     u4305:	
  7373  02DB  1803               	skipnc
  7374  02DC  2AEA               	goto	l3452
  7375  02DD                     L4:	
  7376                           
  7377                           ;main.c: 160: {
  7378                           ;main.c: 161: if(dutyCycle7<1023) dutyCycle7+=1;
  7379  02DD  3003               	movlw	3
  7380  02DE  0021               	movlb	1	; select bank1
  7381  02DF  026C               	subwf	(main@dutyCycle7+1)^(0+128),w
  7382  02E0  30FF               	movlw	255
  7383  02E1  1903               	skipnz
  7384  02E2  026B               	subwf	main@dutyCycle7^(0+128),w
  7385  02E3  1803               	skipnc
  7386  02E4  2B04               	goto	l3458
  7387  02E5  3001               	movlw	1
  7388  02E6  07EB               	addwf	main@dutyCycle7^(0+128),f
  7389  02E7  3000               	movlw	0
  7390  02E8  3DEC               	addwfc	(main@dutyCycle7+1)^(0+128),f
  7391                           
  7392                           ;main.c: 162: }
  7393  02E9  2B04               	goto	l3458
  7394  02EA                     l3452:	
  7395                           
  7396                           ;main.c: 163: else if(voltage[1]<(int16_t)Vref[1])
  7397  02EA  0020               	movlb	0	; select bank0
  7398  02EB  0861               	movf	_voltage+3,w
  7399  02EC  3A80               	xorlw	128
  7400  02ED  00D9               	movwf	??_main
  7401  02EE  0021               	movlb	1	; select bank1
  7402  02EF  0833               	movf	((_Vref+1)^(0+128)+2),w
  7403  02F0  3A80               	xorlw	128
  7404  02F1  0020               	movlb	0	; select bank0
  7405  02F2  0259               	subwf	??_main,w
  7406  02F3  1D03               	skipz
  7407  02F4  2AF9               	goto	u4325
  7408  02F5  0021               	movlb	1	; select bank1
  7409  02F6  0832               	movf	(_Vref^(0+128)+2),w
  7410  02F7  0020               	movlb	0	; select bank0
  7411  02F8  0260               	subwf	_voltage+2,w
  7412  02F9                     u4325:	
  7413  02F9  1803               	skipnc
  7414  02FA  2B04               	goto	l3458
  7415  02FB                     L5:	
  7416                           
  7417                           ;main.c: 164: {
  7418                           ;main.c: 165: if(dutyCycle7>0) dutyCycle7-=1;;
  7419  02FB  0021               	movlb	1	; select bank1
  7420  02FC  086B               	movf	main@dutyCycle7^(0+128),w
  7421  02FD  046C               	iorwf	(main@dutyCycle7+1)^(0+128),w
  7422  02FE  1903               	btfsc	3,2
  7423  02FF  2B04               	goto	l3458
  7424  0300  3001               	movlw	1
  7425  0301  02EB               	subwf	main@dutyCycle7^(0+128),f
  7426  0302  3000               	movlw	0
  7427  0303  3BEC               	subwfb	(main@dutyCycle7+1)^(0+128),f
  7428  0304                     l3458:	
  7429                           ;main.c: 166: }
  7430                           
  7431                           
  7432                           ;main.c: 168: }
  7433                           ;main.c: 169: PWM6_LoadDutyValue(dutyCycle6);
  7434  0304  0021               	movlb	1	; select bank1
  7435  0305  086A               	movf	(main@dutyCycle6+1)^(0+128),w
  7436  0306  00F1               	movwf	PWM6_LoadDutyValue@dutyCycle6+1
  7437  0307  0869               	movf	main@dutyCycle6^(0+128),w
  7438  0308  00F0               	movwf	PWM6_LoadDutyValue@dutyCycle6
  7439  0309  319E  2683  3180   	fcall	_PWM6_LoadDutyValue
  7440                           
  7441                           ;main.c: 170: PWM7_LoadDutyValue(dutyCycle7);
  7442  030C  0021               	movlb	1	; select bank1
  7443  030D  086C               	movf	(main@dutyCycle7+1)^(0+128),w
  7444  030E  00F1               	movwf	PWM7_LoadDutyValue@dutyCycle7+1
  7445  030F  086B               	movf	main@dutyCycle7^(0+128),w
  7446  0310  00F0               	movwf	PWM7_LoadDutyValue@dutyCycle7
  7447  0311  3191  214B  3180   	fcall	_PWM7_LoadDutyValue
  7448                           
  7449                           ;main.c: 171: fastLoop=0;
  7450  0314  0021               	movlb	1	; select bank1
  7451  0315  01CC               	clrf	main@fastLoop^(0+128)
  7452                           
  7453                           ;main.c: 175: slowLoop+=1;
  7454  0316  3001               	movlw	1
  7455  0317  0020               	movlb	0	; select bank0
  7456  0318  00D9               	movwf	??_main
  7457  0319  0859               	movf	??_main,w
  7458  031A  0021               	movlb	1	; select bank1
  7459  031B  07DA               	addwf	main@slowLoop^(0+128),f
  7460                           
  7461                           ;main.c: 178: menuButton = readButton();
  7462  031C  3195  256B  3180   	fcall	_readButton
  7463  031F  0020               	movlb	0	; select bank0
  7464  0320  00D9               	movwf	??_main
  7465  0321  0859               	movf	??_main,w
  7466  0322  0021               	movlb	1	; select bank1
  7467  0323  00E1               	movwf	main@menuButton^(0+128)
  7468                           
  7469                           ;main.c: 179: if(menuButton == 2) if(MPPT1>2700)MPPT1-=1;
  7470  0324  3002               	movlw	2
  7471  0325  0661               	xorwf	main@menuButton^(0+128),w
  7472  0326  1D03               	btfss	3,2
  7473  0327  2B3A               	goto	l3472
  7474  0328  085E               	movf	(main@MPPT1+1)^(0+128),w
  7475  0329  3A80               	xorlw	128
  7476  032A  0020               	movlb	0	; select bank0
  7477  032B  00D9               	movwf	??_main
  7478  032C  308A               	movlw	138
  7479  032D  0259               	subwf	??_main,w
  7480  032E  1D03               	skipz
  7481  032F  2B33               	goto	u4355
  7482  0330  308D               	movlw	141
  7483  0331  0021               	movlb	1	; select bank1
  7484  0332  025D               	subwf	main@MPPT1^(0+128),w
  7485  0333                     u4355:	
  7486  0333  1C03               	skipc
  7487  0334  2B3A               	goto	l3472
  7488  0335  30FF               	movlw	255
  7489  0336  0021               	movlb	1	; select bank1
  7490  0337  07DD               	addwf	main@MPPT1^(0+128),f
  7491  0338  30FF               	movlw	255
  7492  0339  3DDE               	addwfc	(main@MPPT1+1)^(0+128),f
  7493  033A                     l3472:	
  7494                           
  7495                           ;main.c: 180: if(menuButton == 3)if(MPPT1<3200)MPPT1+=1;
  7496  033A  3003               	movlw	3
  7497  033B  0021               	movlb	1	; select bank1
  7498  033C  0661               	xorwf	main@menuButton^(0+128),w
  7499  033D  1D03               	btfss	3,2
  7500  033E  2B51               	goto	l3478
  7501  033F  085E               	movf	(main@MPPT1+1)^(0+128),w
  7502  0340  3A80               	xorlw	128
  7503  0341  0020               	movlb	0	; select bank0
  7504  0342  00D9               	movwf	??_main
  7505  0343  308C               	movlw	140
  7506  0344  0259               	subwf	??_main,w
  7507  0345  1D03               	skipz
  7508  0346  2B4A               	goto	u4375
  7509  0347  3080               	movlw	128
  7510  0348  0021               	movlb	1	; select bank1
  7511  0349  025D               	subwf	main@MPPT1^(0+128),w
  7512  034A                     u4375:	
  7513  034A  1803               	skipnc
  7514  034B  2B51               	goto	l3478
  7515  034C  3001               	movlw	1
  7516  034D  0021               	movlb	1	; select bank1
  7517  034E  07DD               	addwf	main@MPPT1^(0+128),f
  7518  034F  3000               	movlw	0
  7519  0350  3DDE               	addwfc	(main@MPPT1+1)^(0+128),f
  7520  0351                     l3478:	
  7521                           
  7522                           ;main.c: 181: if(menuButton == 1)LCDInit();
  7523  0351  0021               	movlb	1	; select bank1
  7524  0352  0361               	decf	main@menuButton^(0+128),w
  7525  0353  1D03               	btfss	3,2
  7526  0354  2B58               	goto	l3482
  7527  0355  3191  2161  3180   	fcall	_LCDInit
  7528  0358                     l3482:	
  7529                           
  7530                           ;main.c: 183: if(slowLoop>250)
  7531  0358  30FB               	movlw	251
  7532  0359  0021               	movlb	1	; select bank1
  7533  035A  025A               	subwf	main@slowLoop^(0+128),w
  7534  035B  1C03               	skipc
  7535  035C  2889               	goto	l3346
  7536                           
  7537                           ;main.c: 184: {
  7538                           ;main.c: 185: if(current[0]>current[3]*(voltage[3]/voltage[1]*.9))
  7539  035D  0020               	movlb	0	; select bank0
  7540  035E  0865               	movf	_voltage+7,w
  7541  035F  00F3               	movwf	___awdiv@dividend+1
  7542  0360  0864               	movf	_voltage+6,w
  7543  0361  00F2               	movwf	___awdiv@dividend
  7544  0362  0861               	movf	_voltage+3,w
  7545  0363  00F1               	movwf	___awdiv@divisor+1
  7546  0364  0860               	movf	_voltage+2,w
  7547  0365  00F0               	movwf	___awdiv@divisor
  7548  0366  3192  2295  3180   	fcall	___awdiv
  7549  0369  0871               	movf	?___awdiv+1,w
  7550  036A  00FA               	movwf	___awtoft@c+1
  7551  036B  0870               	movf	?___awdiv,w
  7552  036C  00F9               	movwf	___awtoft@c
  7553  036D  319F  2710  3180   	fcall	___awtoft
  7554  0370  0879               	movf	?___awtoft,w
  7555  0371  0020               	movlb	0	; select bank0
  7556  0372  00A4               	movwf	___ftmul@f2
  7557  0373  087A               	movf	?___awtoft+1,w
  7558  0374  00A5               	movwf	___ftmul@f2+1
  7559  0375  087B               	movf	?___awtoft+2,w
  7560  0376  00A6               	movwf	___ftmul@f2+2
  7561  0377  3066               	movlw	102
  7562  0378  00A1               	movwf	___ftmul@f1
  7563  0379  3066               	movlw	102
  7564  037A  00A2               	movwf	___ftmul@f1+1
  7565  037B  303F               	movlw	63
  7566  037C  00A3               	movwf	___ftmul@f1+2
  7567  037D  3197  274C  3180   	fcall	___ftmul
  7568  0380  0020               	movlb	0	; select bank0
  7569  0381  0821               	movf	?___ftmul,w
  7570  0382  0021               	movlb	1	; select bank1
  7571  0383  00E6               	movwf	_main$1284^(0+128)
  7572  0384  0020               	movlb	0	; select bank0
  7573  0385  0822               	movf	?___ftmul+1,w
  7574  0386  0021               	movlb	1	; select bank1
  7575  0387  00E7               	movwf	(_main$1284+1)^(0+128)
  7576  0388  0020               	movlb	0	; select bank0
  7577  0389  0823               	movf	?___ftmul+2,w
  7578  038A  0021               	movlb	1	; select bank1
  7579  038B  00E8               	movwf	(_main$1284+2)^(0+128)
  7580                           
  7581                           ;main.c: 184: {
  7582                           ;main.c: 185: if(current[0]>current[3]*(voltage[3]/voltage[1]*.9))
  7583  038C  0866               	movf	_main$1284^(0+128),w
  7584  038D  0020               	movlb	0	; select bank0
  7585  038E  00A1               	movwf	___ftmul@f1
  7586  038F  0021               	movlb	1	; select bank1
  7587  0390  0867               	movf	(_main$1284+1)^(0+128),w
  7588  0391  0020               	movlb	0	; select bank0
  7589  0392  00A2               	movwf	___ftmul@f1+1
  7590  0393  0021               	movlb	1	; select bank1
  7591  0394  0868               	movf	(_main$1284+2)^(0+128),w
  7592  0395  0020               	movlb	0	; select bank0
  7593  0396  00A3               	movwf	___ftmul@f1+2
  7594  0397  0021               	movlb	1	; select bank1
  7595  0398  0827               	movf	((_current+1)^(0+128)+6),w
  7596  0399  00FA               	movwf	___awtoft@c+1
  7597  039A  0826               	movf	(_current^(0+128)+6),w
  7598  039B  00F9               	movwf	___awtoft@c
  7599  039C  319F  2710  3180   	fcall	___awtoft
  7600  039F  0879               	movf	?___awtoft,w
  7601  03A0  0020               	movlb	0	; select bank0
  7602  03A1  00A4               	movwf	___ftmul@f2
  7603  03A2  087A               	movf	?___awtoft+1,w
  7604  03A3  00A5               	movwf	___ftmul@f2+1
  7605  03A4  087B               	movf	?___awtoft+2,w
  7606  03A5  00A6               	movwf	___ftmul@f2+2
  7607  03A6  3197  274C  3180   	fcall	___ftmul
  7608  03A9  0020               	movlb	0	; select bank0
  7609  03AA  0821               	movf	?___ftmul,w
  7610  03AB  00B1               	movwf	___ftge@ff1
  7611  03AC  0822               	movf	?___ftmul+1,w
  7612  03AD  00B2               	movwf	___ftge@ff1+1
  7613  03AE  0823               	movf	?___ftmul+2,w
  7614  03AF  00B3               	movwf	___ftge@ff1+2
  7615  03B0  0021               	movlb	1	; select bank1
  7616  03B1  0821               	movf	(_current+1)^(0+128),w
  7617  03B2  00FA               	movwf	___awtoft@c+1
  7618  03B3  0820               	movf	_current^(0+128),w
  7619  03B4  00F9               	movwf	___awtoft@c
  7620  03B5  319F  2710  3180   	fcall	___awtoft
  7621  03B8  0879               	movf	?___awtoft,w
  7622  03B9  0020               	movlb	0	; select bank0
  7623  03BA  00B4               	movwf	___ftge@ff2
  7624  03BB  087A               	movf	?___awtoft+1,w
  7625  03BC  00B5               	movwf	___ftge@ff2+1
  7626  03BD  087B               	movf	?___awtoft+2,w
  7627  03BE  00B6               	movwf	___ftge@ff2+2
  7628  03BF  3191  21D7  3180   	fcall	___ftge
  7629  03C2  1803               	btfsc	3,0
  7630  03C3  2BC9               	goto	l3488
  7631                           
  7632                           ;main.c: 186: {
  7633                           ;main.c: 187: largerIOut=current[0];
  7634  03C4  0021               	movlb	1	; select bank1
  7635  03C5  0821               	movf	(_current+1)^(0+128),w
  7636  03C6  00E0               	movwf	(main@largerIOut+1)^(0+128)
  7637  03C7  0820               	movf	_current^(0+128),w
  7638  03C8  2C26               	goto	L1
  7639  03C9                     l3488:	
  7640                           ;main.c: 188: }
  7641                           
  7642                           
  7643                           ;main.c: 189: else
  7644                           ;main.c: 190: {
  7645                           ;main.c: 191: largerIOut=(int16_t)(current[3]*(voltage[3]/voltage[1]*.9));
  7646  03C9  0020               	movlb	0	; select bank0
  7647  03CA  0865               	movf	_voltage+7,w
  7648  03CB  00F3               	movwf	___awdiv@dividend+1
  7649  03CC  0864               	movf	_voltage+6,w
  7650  03CD  00F2               	movwf	___awdiv@dividend
  7651  03CE  0861               	movf	_voltage+3,w
  7652  03CF  00F1               	movwf	___awdiv@divisor+1
  7653  03D0  0860               	movf	_voltage+2,w
  7654  03D1  00F0               	movwf	___awdiv@divisor
  7655  03D2  3192  2295  3180   	fcall	___awdiv
  7656  03D5  0871               	movf	?___awdiv+1,w
  7657  03D6  00FA               	movwf	___awtoft@c+1
  7658  03D7  0870               	movf	?___awdiv,w
  7659  03D8  00F9               	movwf	___awtoft@c
  7660  03D9  319F  2710  3180   	fcall	___awtoft
  7661  03DC  0879               	movf	?___awtoft,w
  7662  03DD  0020               	movlb	0	; select bank0
  7663  03DE  00A4               	movwf	___ftmul@f2
  7664  03DF  087A               	movf	?___awtoft+1,w
  7665  03E0  00A5               	movwf	___ftmul@f2+1
  7666  03E1  087B               	movf	?___awtoft+2,w
  7667  03E2  00A6               	movwf	___ftmul@f2+2
  7668  03E3  3066               	movlw	102
  7669  03E4  00A1               	movwf	___ftmul@f1
  7670  03E5  3066               	movlw	102
  7671  03E6  00A2               	movwf	___ftmul@f1+1
  7672  03E7  303F               	movlw	63
  7673  03E8  00A3               	movwf	___ftmul@f1+2
  7674  03E9  3197  274C  3180   	fcall	___ftmul
  7675  03EC  0020               	movlb	0	; select bank0
  7676  03ED  0821               	movf	?___ftmul,w
  7677  03EE  0021               	movlb	1	; select bank1
  7678  03EF  00E6               	movwf	_main$1284^(0+128)
  7679  03F0  0020               	movlb	0	; select bank0
  7680  03F1  0822               	movf	?___ftmul+1,w
  7681  03F2  0021               	movlb	1	; select bank1
  7682  03F3  00E7               	movwf	(_main$1284+1)^(0+128)
  7683  03F4  0020               	movlb	0	; select bank0
  7684  03F5  0823               	movf	?___ftmul+2,w
  7685  03F6  0021               	movlb	1	; select bank1
  7686  03F7  00E8               	movwf	(_main$1284+2)^(0+128)
  7687                           
  7688                           ;main.c: 189: else
  7689                           ;main.c: 190: {
  7690                           ;main.c: 191: largerIOut=(int16_t)(current[3]*(voltage[3]/voltage[1]*.9));
  7691  03F8  0827               	movf	((_current+1)^(0+128)+6),w
  7692  03F9  00FA               	movwf	___awtoft@c+1
  7693  03FA  0826               	movf	(_current^(0+128)+6),w
  7694  03FB  00F9               	movwf	___awtoft@c
  7695  03FC  319F  2710  3180   	fcall	___awtoft
  7696  03FF  0879               	movf	?___awtoft,w
  7697  0400  0020               	movlb	0	; select bank0
  7698  0401  00A4               	movwf	___ftmul@f2
  7699  0402  087A               	movf	?___awtoft+1,w
  7700  0403  00A5               	movwf	___ftmul@f2+1
  7701  0404  087B               	movf	?___awtoft+2,w
  7702  0405  00A6               	movwf	___ftmul@f2+2
  7703  0406  0021               	movlb	1	; select bank1
  7704  0407  0866               	movf	_main$1284^(0+128),w
  7705  0408  0020               	movlb	0	; select bank0
  7706  0409  00A1               	movwf	___ftmul@f1
  7707  040A  0021               	movlb	1	; select bank1
  7708  040B  0867               	movf	(_main$1284+1)^(0+128),w
  7709  040C  0020               	movlb	0	; select bank0
  7710  040D  00A2               	movwf	___ftmul@f1+1
  7711  040E  0021               	movlb	1	; select bank1
  7712  040F  0868               	movf	(_main$1284+2)^(0+128),w
  7713  0410  0020               	movlb	0	; select bank0
  7714  0411  00A3               	movwf	___ftmul@f1+2
  7715  0412  3197  274C  3180   	fcall	___ftmul
  7716  0415  0020               	movlb	0	; select bank0
  7717  0416  0821               	movf	?___ftmul,w
  7718  0417  00B1               	movwf	___fttol@f1
  7719  0418  0822               	movf	?___ftmul+1,w
  7720  0419  00B2               	movwf	___fttol@f1+1
  7721  041A  0823               	movf	?___ftmul+2,w
  7722  041B  00B3               	movwf	___fttol@f1+2
  7723  041C  3194  24E4  3180   	fcall	___fttol
  7724  041F  0020               	movlb	0	; select bank0
  7725  0420  0832               	movf	?___fttol+1,w
  7726  0421  0021               	movlb	1	; select bank1
  7727  0422  00E0               	movwf	(main@largerIOut+1)^(0+128)
  7728  0423  0020               	movlb	0	; select bank0
  7729  0424  0831               	movf	?___fttol,w
  7730  0425  0021               	movlb	1	; select bank1
  7731  0426                     L1:	
  7732  0426  00DF               	movwf	main@largerIOut^(0+128)
  7733                           
  7734                           ;main.c: 193: }
  7735                           ;main.c: 195: if(largerIOut>25)
  7736  0427  0860               	movf	(main@largerIOut+1)^(0+128),w
  7737  0428  3A80               	xorlw	128
  7738  0429  0020               	movlb	0	; select bank0
  7739  042A  00D9               	movwf	??_main
  7740  042B  3080               	movlw	128
  7741  042C  0259               	subwf	??_main,w
  7742  042D  1D03               	skipz
  7743  042E  2C32               	goto	u4415
  7744  042F  301A               	movlw	26
  7745  0430  0021               	movlb	1	; select bank1
  7746  0431  025F               	subwf	main@largerIOut^(0+128),w
  7747  0432                     u4415:	
  7748  0432  1C03               	skipc
  7749  0433  2C86               	goto	l3510
  7750                           
  7751                           ;main.c: 196: {
  7752                           ;main.c: 197: if((uint16_t)largerIOut+5>dutyCycle1)
  7753  0434  0021               	movlb	1	; select bank1
  7754  0435  085F               	movf	main@largerIOut^(0+128),w
  7755  0436  3E05               	addlw	5
  7756  0437  0020               	movlb	0	; select bank0
  7757  0438  00D9               	movwf	??_main
  7758  0439  3000               	movlw	0
  7759  043A  0021               	movlb	1	; select bank1
  7760  043B  3D60               	addwfc	(main@largerIOut+1)^(0+128),w
  7761  043C  0020               	movlb	0	; select bank0
  7762  043D  00DA               	movwf	??_main+1
  7763  043E  085A               	movf	??_main+1,w
  7764  043F  0021               	movlb	1	; select bank1
  7765  0440  0263               	subwf	(main@dutyCycle1+1)^(0+128),w
  7766  0441  1D03               	skipz
  7767  0442  2C47               	goto	u4425
  7768  0443  0020               	movlb	0	; select bank0
  7769  0444  0859               	movf	??_main,w
  7770  0445  0021               	movlb	1	; select bank1
  7771  0446  0262               	subwf	main@dutyCycle1^(0+128),w
  7772  0447                     u4425:	
  7773  0447  1803               	skipnc
  7774  0448  2C4E               	goto	l3496
  7775                           
  7776                           ;main.c: 198: {
  7777                           ;main.c: 199: dutyCycle1+=1;
  7778  0449  3001               	movlw	1
  7779  044A  07E2               	addwf	main@dutyCycle1^(0+128),f
  7780  044B  3000               	movlw	0
  7781  044C  3DE3               	addwfc	(main@dutyCycle1+1)^(0+128),f
  7782                           
  7783                           ;main.c: 200: }
  7784  044D  2C52               	goto	l3498
  7785  044E                     l3496:	
  7786                           
  7787                           ;main.c: 201: else dutyCycle1-=1;
  7788  044E  3001               	movlw	1
  7789  044F  02E2               	subwf	main@dutyCycle1^(0+128),f
  7790  0450  3000               	movlw	0
  7791  0451  3BE3               	subwfb	(main@dutyCycle1+1)^(0+128),f
  7792  0452                     l3498:	
  7793                           
  7794                           ;main.c: 203: if((uint16_t)largerIOut+5>tempFanOutput)
  7795  0452  085F               	movf	main@largerIOut^(0+128),w
  7796  0453  3E05               	addlw	5
  7797  0454  0020               	movlb	0	; select bank0
  7798  0455  00D9               	movwf	??_main
  7799  0456  3000               	movlw	0
  7800  0457  0021               	movlb	1	; select bank1
  7801  0458  3D60               	addwfc	(main@largerIOut+1)^(0+128),w
  7802  0459  0020               	movlb	0	; select bank0
  7803  045A  00DA               	movwf	??_main+1
  7804  045B  085A               	movf	??_main+1,w
  7805  045C  0021               	movlb	1	; select bank1
  7806  045D  0265               	subwf	(main@tempFanOutput+1)^(0+128),w
  7807  045E  1D03               	skipz
  7808  045F  2C64               	goto	u4435
  7809  0460  0020               	movlb	0	; select bank0
  7810  0461  0859               	movf	??_main,w
  7811  0462  0021               	movlb	1	; select bank1
  7812  0463  0264               	subwf	main@tempFanOutput^(0+128),w
  7813  0464                     u4435:	
  7814  0464  1803               	skipnc
  7815  0465  2C72               	goto	l3504
  7816                           
  7817                           ;main.c: 204: {
  7818                           ;main.c: 205: if(tempFanOutput<75)
  7819  0466  3000               	movlw	0
  7820  0467  0265               	subwf	(main@tempFanOutput+1)^(0+128),w
  7821  0468  304B               	movlw	75
  7822  0469  1903               	skipnz
  7823  046A  0264               	subwf	main@tempFanOutput^(0+128),w
  7824  046B  1803               	skipnc
  7825  046C  2C7A               	goto	l517
  7826                           
  7827                           ;main.c: 206: {
  7828                           ;main.c: 207: tempFanOutput+=1;
  7829  046D  3001               	movlw	1
  7830  046E  07E4               	addwf	main@tempFanOutput^(0+128),f
  7831  046F  3000               	movlw	0
  7832  0470  3DE5               	addwfc	(main@tempFanOutput+1)^(0+128),f
  7833                           
  7834                           ;main.c: 208: }
  7835                           ;main.c: 209: }
  7836  0471  2C7A               	goto	l517
  7837  0472                     l3504:	
  7838                           
  7839                           ;main.c: 210: else
  7840                           ;main.c: 211: {
  7841                           ;main.c: 212: if(tempFanOutput>0)tempFanOutput-=1;
  7842  0472  0864               	movf	main@tempFanOutput^(0+128),w
  7843  0473  0465               	iorwf	(main@tempFanOutput+1)^(0+128),w
  7844  0474  1903               	btfsc	3,2
  7845  0475  2C7A               	goto	l517
  7846  0476  3001               	movlw	1
  7847  0477  02E4               	subwf	main@tempFanOutput^(0+128),f
  7848  0478  3000               	movlw	0
  7849  0479  3BE5               	subwfb	(main@tempFanOutput+1)^(0+128),f
  7850  047A                     l517:	
  7851                           
  7852                           ;main.c: 213: }
  7853                           ;main.c: 215: dutyCycle1=tempFanOutput;
  7854  047A  0865               	movf	(main@tempFanOutput+1)^(0+128),w
  7855  047B  00E3               	movwf	(main@dutyCycle1+1)^(0+128)
  7856  047C  0864               	movf	main@tempFanOutput^(0+128),w
  7857  047D  00E2               	movwf	main@dutyCycle1^(0+128)
  7858                           
  7859                           ;main.c: 216: if(dutyCycle1<19)dutyCycle1=0;
  7860  047E  3000               	movlw	0
  7861  047F  0263               	subwf	(main@dutyCycle1+1)^(0+128),w
  7862  0480  3013               	movlw	19
  7863  0481  1903               	skipnz
  7864  0482  0262               	subwf	main@dutyCycle1^(0+128),w
  7865  0483  1803               	skipnc
  7866  0484  2C89               	goto	l3512
  7867  0485  2C87               	goto	L2
  7868  0486                     l3510:	
  7869                           ;main.c: 217: }
  7870                           
  7871                           
  7872                           ;main.c: 218: else
  7873                           ;main.c: 219: {
  7874                           ;main.c: 220: dutyCycle1=0;
  7875  0486  0021               	movlb	1	; select bank1
  7876  0487                     L2:	
  7877  0487  01E2               	clrf	main@dutyCycle1^(0+128)
  7878  0488  01E3               	clrf	(main@dutyCycle1+1)^(0+128)
  7879  0489                     l3512:	
  7880                           
  7881                           ;main.c: 221: }
  7882                           ;main.c: 222: if(!(RB2))
  7883  0489  0020               	movlb	0	; select bank0
  7884  048A  190D               	btfsc	13,2	;volatile
  7885  048B  2C9A               	goto	l3516
  7886                           
  7887                           ;main.c: 223: {
  7888                           ;main.c: 224: dutyCycle1=55;
  7889  048C  3037               	movlw	55
  7890  048D  0021               	movlb	1	; select bank1
  7891  048E  00E2               	movwf	main@dutyCycle1^(0+128)
  7892  048F  3000               	movlw	0
  7893  0490  00E3               	movwf	(main@dutyCycle1^(0+128)+1)
  7894                           
  7895                           ;main.c: 225: batteryState[0]=CHARGE;
  7896  0491  3004               	movlw	4
  7897  0492  0020               	movlb	0	; select bank0
  7898  0493  00D9               	movwf	??_main
  7899  0494  0859               	movf	??_main,w
  7900  0495  00E8               	movwf	_batteryState
  7901                           
  7902                           ;main.c: 226: batteryState[1]=CHARGE;
  7903  0496  3004               	movlw	4
  7904  0497  00D9               	movwf	??_main
  7905  0498  0859               	movf	??_main,w
  7906  0499  00E9               	movwf	_batteryState+1
  7907  049A                     l3516:	
  7908                           
  7909                           ;main.c: 227: }
  7910                           ;main.c: 229: PWM1_LoadDutyValue(dutyCycle1);
  7911  049A  0021               	movlb	1	; select bank1
  7912  049B  0863               	movf	(main@dutyCycle1+1)^(0+128),w
  7913  049C  00F1               	movwf	PWM1_LoadDutyValue@dutyCycle1+1
  7914  049D  0862               	movf	main@dutyCycle1^(0+128),w
  7915  049E  00F0               	movwf	PWM1_LoadDutyValue@dutyCycle1
  7916  049F  319E  266D  3180   	fcall	_PWM1_LoadDutyValue
  7917                           
  7918                           ;main.c: 231: ADREF = 0x00;
  7919  04A2  0021               	movlb	1	; select bank1
  7920  04A3  019A               	clrf	26	;volatile
  7921                           
  7922                           ;main.c: 232: batteryTemp=tempCalc(ADCRead(9));
  7923  04A4  3009               	movlw	9
  7924  04A5  319E  2658  3180   	fcall	_ADCRead
  7925  04A8  0871               	movf	?_ADCRead+1,w
  7926  04A9  0020               	movlb	0	; select bank0
  7927  04AA  00CF               	movwf	tempCalc@analogValue+1
  7928  04AB  0870               	movf	?_ADCRead,w
  7929  04AC  00CE               	movwf	tempCalc@analogValue
  7930  04AD  3188  20BC  3180   	fcall	_tempCalc
  7931  04B0  0020               	movlb	0	; select bank0
  7932  04B1  084F               	movf	?_tempCalc+1,w
  7933  04B2  00EF               	movwf	_batteryTemp+1
  7934  04B3  084E               	movf	?_tempCalc,w
  7935  04B4  00EE               	movwf	_batteryTemp
  7936                           
  7937                           ;main.c: 233: ADREF = 0x03;
  7938  04B5  3003               	movlw	3
  7939  04B6  0021               	movlb	1	; select bank1
  7940  04B7  009A               	movwf	26	;volatile
  7941                           
  7942                           ;main.c: 235: displayRefresh+=1;
  7943  04B8  3001               	movlw	1
  7944  04B9  0020               	movlb	0	; select bank0
  7945  04BA  00D9               	movwf	??_main
  7946  04BB  0859               	movf	??_main,w
  7947  04BC  0021               	movlb	1	; select bank1
  7948  04BD  07D9               	addwf	main@displayRefresh^(0+128),f
  7949                           
  7950                           ;main.c: 236: if(displayRefresh>80)
  7951  04BE  3051               	movlw	81
  7952  04BF  0259               	subwf	main@displayRefresh^(0+128),w
  7953  04C0  1C03               	skipc
  7954  04C1  2CC7               	goto	l3532
  7955                           
  7956                           ;main.c: 237: {
  7957                           ;main.c: 238: LCDClear();
  7958  04C2  319F  2777  3180   	fcall	_LCDClear
  7959                           
  7960                           ;main.c: 239: displayRefresh=0;
  7961  04C5  0021               	movlb	1	; select bank1
  7962  04C6  01D9               	clrf	main@displayRefresh^(0+128)
  7963  04C7                     l3532:	
  7964                           
  7965                           ;main.c: 241: }
  7966                           ;main.c: 242: Battery_State_Machine(0);
  7967  04C7  3000               	movlw	0
  7968  04C8  318E  2646  3180   	fcall	_Battery_State_Machine
  7969                           
  7970                           ;main.c: 243: Battery_State_Machine(1);
  7971  04CB  3001               	movlw	1
  7972  04CC  318E  2646  3180   	fcall	_Battery_State_Machine
  7973                           
  7974                           ;main.c: 248: { gotoXY(0,0); LCDWriteInt(faultCount,5, 0, 0);};
  7975  04CF  01F5               	clrf	gotoXY@y
  7976  04D0  3000               	movlw	0
  7977  04D1  319E  2645  3180   	fcall	_gotoXY
  7978  04D4  0021               	movlb	1	; select bank1
  7979  04D5  084E               	movf	(main@faultCount+1)^(0+128),w
  7980  04D6  0020               	movlb	0	; select bank0
  7981  04D7  00C0               	movwf	LCDWriteInt@value+1
  7982  04D8  0021               	movlb	1	; select bank1
  7983  04D9  084D               	movf	main@faultCount^(0+128),w
  7984  04DA  0020               	movlb	0	; select bank0
  7985  04DB  00BF               	movwf	LCDWriteInt@value
  7986  04DC  3005               	movlw	5
  7987  04DD  00D9               	movwf	??_main
  7988  04DE  0859               	movf	??_main,w
  7989  04DF  00C1               	movwf	LCDWriteInt@fieldLength
  7990  04E0  01C2               	clrf	LCDWriteInt@numPlaces
  7991  04E1  01C3               	clrf	LCDWriteInt@sign
  7992  04E2  3188  2003  3180   	fcall	_LCDWriteInt
  7993                           
  7994                           ;main.c: 249: { gotoXY(32,0); LCDWriteInt(faultNotReset,5, 0, 0);};
  7995  04E5  01F5               	clrf	gotoXY@y
  7996  04E6  3020               	movlw	32
  7997  04E7  319E  2645  3180   	fcall	_gotoXY
  7998  04EA  0021               	movlb	1	; select bank1
  7999  04EB  0850               	movf	(main@faultNotReset+1)^(0+128),w
  8000  04EC  0020               	movlb	0	; select bank0
  8001  04ED  00C0               	movwf	LCDWriteInt@value+1
  8002  04EE  0021               	movlb	1	; select bank1
  8003  04EF  084F               	movf	main@faultNotReset^(0+128),w
  8004  04F0  0020               	movlb	0	; select bank0
  8005  04F1  00BF               	movwf	LCDWriteInt@value
  8006  04F2  3005               	movlw	5
  8007  04F3  00D9               	movwf	??_main
  8008  04F4  0859               	movf	??_main,w
  8009  04F5  00C1               	movwf	LCDWriteInt@fieldLength
  8010  04F6  01C2               	clrf	LCDWriteInt@numPlaces
  8011  04F7  01C3               	clrf	LCDWriteInt@sign
  8012  04F8  3188  2003  3180   	fcall	_LCDWriteInt
  8013                           
  8014                           ;main.c: 258: { gotoXY(0,1); LCDWriteInt(voltage[2],4, 2, 0);};
  8015  04FB  01F5               	clrf	gotoXY@y
  8016  04FC  0AF5               	incf	gotoXY@y,f
  8017  04FD  3000               	movlw	0
  8018  04FE  319E  2645  3180   	fcall	_gotoXY
  8019  0501  0020               	movlb	0	; select bank0
  8020  0502  0863               	movf	_voltage+5,w
  8021  0503  00C0               	movwf	LCDWriteInt@value+1
  8022  0504  0862               	movf	_voltage+4,w
  8023  0505  00BF               	movwf	LCDWriteInt@value
  8024  0506  3004               	movlw	4
  8025  0507  00D9               	movwf	??_main
  8026  0508  0859               	movf	??_main,w
  8027  0509  00C1               	movwf	LCDWriteInt@fieldLength
  8028  050A  3002               	movlw	2
  8029  050B  00DA               	movwf	??_main+1
  8030  050C  085A               	movf	??_main+1,w
  8031  050D  00C2               	movwf	LCDWriteInt@numPlaces
  8032  050E  01C3               	clrf	LCDWriteInt@sign
  8033  050F  3188  2003  3180   	fcall	_LCDWriteInt
  8034                           
  8035                           ;main.c: 260: LCDWriteCharacter('V');
  8036  0512  3056               	movlw	86
  8037  0513  3192  22E6  3180   	fcall	_LCDWriteCharacter
  8038                           
  8039                           ;main.c: 262: { gotoXY(26,1); LCDWriteInt(voltage[0],4, 2, 0);};
  8040  0516  01F5               	clrf	gotoXY@y
  8041  0517  0AF5               	incf	gotoXY@y,f
  8042  0518  301A               	movlw	26
  8043  0519  319E  2645  3180   	fcall	_gotoXY
  8044  051C  0020               	movlb	0	; select bank0
  8045  051D  085F               	movf	_voltage+1,w
  8046  051E  00C0               	movwf	LCDWriteInt@value+1
  8047  051F  085E               	movf	_voltage,w
  8048  0520  00BF               	movwf	LCDWriteInt@value
  8049  0521  3004               	movlw	4
  8050  0522  00D9               	movwf	??_main
  8051  0523  0859               	movf	??_main,w
  8052  0524  00C1               	movwf	LCDWriteInt@fieldLength
  8053  0525  3002               	movlw	2
  8054  0526  00DA               	movwf	??_main+1
  8055  0527  085A               	movf	??_main+1,w
  8056  0528  00C2               	movwf	LCDWriteInt@numPlaces
  8057  0529  01C3               	clrf	LCDWriteInt@sign
  8058  052A  3188  2003  3180   	fcall	_LCDWriteInt
  8059                           
  8060                           ;main.c: 264: LCDWriteCharacter('V');
  8061  052D  3056               	movlw	86
  8062  052E  3192  22E6  3180   	fcall	_LCDWriteCharacter
  8063                           
  8064                           ;main.c: 266: { gotoXY(52,1); LCDWriteInt(Vref[0],4, 2, 0);};
  8065  0531  01F5               	clrf	gotoXY@y
  8066  0532  0AF5               	incf	gotoXY@y,f
  8067  0533  3034               	movlw	52
  8068  0534  319E  2645  3180   	fcall	_gotoXY
  8069  0537  0021               	movlb	1	; select bank1
  8070  0538  0831               	movf	(_Vref+1)^(0+128),w
  8071  0539  0020               	movlb	0	; select bank0
  8072  053A  00C0               	movwf	LCDWriteInt@value+1
  8073  053B  0021               	movlb	1	; select bank1
  8074  053C  0830               	movf	_Vref^(0+128),w
  8075  053D  0020               	movlb	0	; select bank0
  8076  053E  00BF               	movwf	LCDWriteInt@value
  8077  053F  3004               	movlw	4
  8078  0540  00D9               	movwf	??_main
  8079  0541  0859               	movf	??_main,w
  8080  0542  00C1               	movwf	LCDWriteInt@fieldLength
  8081  0543  3002               	movlw	2
  8082  0544  00DA               	movwf	??_main+1
  8083  0545  085A               	movf	??_main+1,w
  8084  0546  00C2               	movwf	LCDWriteInt@numPlaces
  8085  0547  01C3               	clrf	LCDWriteInt@sign
  8086  0548  3188  2003  3180   	fcall	_LCDWriteInt
  8087                           
  8088                           ;main.c: 267: LCDWriteCharacter('V');
  8089  054B  3056               	movlw	86
  8090  054C  3192  22E6  3180   	fcall	_LCDWriteCharacter
  8091                           
  8092                           ;main.c: 269: { gotoXY(80,1); LCDWriteInt(Imode[0],1, 0, 0);};
  8093  054F  01F5               	clrf	gotoXY@y
  8094  0550  0AF5               	incf	gotoXY@y,f
  8095  0551  3050               	movlw	80
  8096  0552  319E  2645  3180   	fcall	_gotoXY
  8097  0555  0020               	movlb	0	; select bank0
  8098  0556  0866               	movf	_Imode,w
  8099  0557  00BF               	movwf	LCDWriteInt@value
  8100  0558  01C0               	clrf	LCDWriteInt@value+1
  8101  0559  1BBF               	btfsc	LCDWriteInt@value,7
  8102  055A  03C0               	decf	LCDWriteInt@value+1,f
  8103  055B  01C1               	clrf	LCDWriteInt@fieldLength
  8104  055C  0AC1               	incf	LCDWriteInt@fieldLength,f
  8105  055D  01C2               	clrf	LCDWriteInt@numPlaces
  8106  055E  01C3               	clrf	LCDWriteInt@sign
  8107  055F  3188  2003  3180   	fcall	_LCDWriteInt
  8108                           
  8109                           ;main.c: 272: { gotoXY(0,2); LCDWriteInt(current[2],3, 1, 0);};
  8110  0562  3002               	movlw	2
  8111  0563  0020               	movlb	0	; select bank0
  8112  0564  00D9               	movwf	??_main
  8113  0565  0859               	movf	??_main,w
  8114  0566  00F5               	movwf	gotoXY@y
  8115  0567  3000               	movlw	0
  8116  0568  319E  2645  3180   	fcall	_gotoXY
  8117  056B  0021               	movlb	1	; select bank1
  8118  056C  0825               	movf	((_current+1)^(0+128)+4),w
  8119  056D  0020               	movlb	0	; select bank0
  8120  056E  00C0               	movwf	LCDWriteInt@value+1
  8121  056F  0021               	movlb	1	; select bank1
  8122  0570  0824               	movf	(_current^(0+128)+4),w
  8123  0571  0020               	movlb	0	; select bank0
  8124  0572  00BF               	movwf	LCDWriteInt@value
  8125  0573  3003               	movlw	3
  8126  0574  00D9               	movwf	??_main
  8127  0575  0859               	movf	??_main,w
  8128  0576  00C1               	movwf	LCDWriteInt@fieldLength
  8129  0577  01C2               	clrf	LCDWriteInt@numPlaces
  8130  0578  0AC2               	incf	LCDWriteInt@numPlaces,f
  8131  0579  01C3               	clrf	LCDWriteInt@sign
  8132  057A  3188  2003  3180   	fcall	_LCDWriteInt
  8133                           
  8134                           ;main.c: 273: LCDWriteCharacter('A');
  8135  057D  3041               	movlw	65
  8136  057E  3192  22E6  3180   	fcall	_LCDWriteCharacter
  8137                           
  8138                           ;main.c: 276: { gotoXY(26,2); LCDWriteInt(current[0],3, 1, 0);};
  8139  0581  3002               	movlw	2
  8140  0582  0020               	movlb	0	; select bank0
  8141  0583  00D9               	movwf	??_main
  8142  0584  0859               	movf	??_main,w
  8143  0585  00F5               	movwf	gotoXY@y
  8144  0586  301A               	movlw	26
  8145  0587  319E  2645  3180   	fcall	_gotoXY
  8146  058A  0021               	movlb	1	; select bank1
  8147  058B  0821               	movf	(_current+1)^(0+128),w
  8148  058C  0020               	movlb	0	; select bank0
  8149  058D  00C0               	movwf	LCDWriteInt@value+1
  8150  058E  0021               	movlb	1	; select bank1
  8151  058F  0820               	movf	_current^(0+128),w
  8152  0590  0020               	movlb	0	; select bank0
  8153  0591  00BF               	movwf	LCDWriteInt@value
  8154  0592  3003               	movlw	3
  8155  0593  00D9               	movwf	??_main
  8156  0594  0859               	movf	??_main,w
  8157  0595  00C1               	movwf	LCDWriteInt@fieldLength
  8158  0596  01C2               	clrf	LCDWriteInt@numPlaces
  8159  0597  0AC2               	incf	LCDWriteInt@numPlaces,f
  8160  0598  01C3               	clrf	LCDWriteInt@sign
  8161  0599  3188  2003  3180   	fcall	_LCDWriteInt
  8162                           
  8163                           ;main.c: 277: LCDWriteCharacter('A');
  8164  059C  3041               	movlw	65
  8165  059D  3192  22E6  3180   	fcall	_LCDWriteCharacter
  8166                           
  8167                           ;main.c: 279: { gotoXY(52,2); LCDWriteInt(Iref[0],3, 1, 0);};
  8168  05A0  3002               	movlw	2
  8169  05A1  0020               	movlb	0	; select bank0
  8170  05A2  00D9               	movwf	??_main
  8171  05A3  0859               	movf	??_main,w
  8172  05A4  00F5               	movwf	gotoXY@y
  8173  05A5  3034               	movlw	52
  8174  05A6  319E  2645  3180   	fcall	_gotoXY
  8175  05A9  0021               	movlb	1	; select bank1
  8176  05AA  082D               	movf	(_Iref+1)^(0+128),w
  8177  05AB  0020               	movlb	0	; select bank0
  8178  05AC  00C0               	movwf	LCDWriteInt@value+1
  8179  05AD  0021               	movlb	1	; select bank1
  8180  05AE  082C               	movf	_Iref^(0+128),w
  8181  05AF  0020               	movlb	0	; select bank0
  8182  05B0  00BF               	movwf	LCDWriteInt@value
  8183  05B1  3003               	movlw	3
  8184  05B2  00D9               	movwf	??_main
  8185  05B3  0859               	movf	??_main,w
  8186  05B4  00C1               	movwf	LCDWriteInt@fieldLength
  8187  05B5  01C2               	clrf	LCDWriteInt@numPlaces
  8188  05B6  0AC2               	incf	LCDWriteInt@numPlaces,f
  8189  05B7  01C3               	clrf	LCDWriteInt@sign
  8190  05B8  3188  2003  3180   	fcall	_LCDWriteInt
  8191                           
  8192                           ;main.c: 280: LCDWriteCharacter('A');
  8193  05BB  3041               	movlw	65
  8194  05BC  3192  22E6  3180   	fcall	_LCDWriteCharacter
  8195                           
  8196                           ;main.c: 282: { gotoXY(80,2); LCDWriteInt(batteryState[0],1, 0, 0);};
  8197  05BF  3002               	movlw	2
  8198  05C0  0020               	movlb	0	; select bank0
  8199  05C1  00D9               	movwf	??_main
  8200  05C2  0859               	movf	??_main,w
  8201  05C3  00F5               	movwf	gotoXY@y
  8202  05C4  3050               	movlw	80
  8203  05C5  319E  2645  3180   	fcall	_gotoXY
  8204  05C8  0020               	movlb	0	; select bank0
  8205  05C9  0868               	movf	_batteryState,w
  8206  05CA  00D9               	movwf	??_main
  8207  05CB  01DA               	clrf	??_main+1
  8208  05CC  0859               	movf	??_main,w
  8209  05CD  00BF               	movwf	LCDWriteInt@value
  8210  05CE  085A               	movf	??_main+1,w
  8211  05CF  00C0               	movwf	LCDWriteInt@value+1
  8212  05D0  01C1               	clrf	LCDWriteInt@fieldLength
  8213  05D1  0AC1               	incf	LCDWriteInt@fieldLength,f
  8214  05D2  01C2               	clrf	LCDWriteInt@numPlaces
  8215  05D3  01C3               	clrf	LCDWriteInt@sign
  8216  05D4  3188  2003  3180   	fcall	_LCDWriteInt
  8217                           
  8218                           ;main.c: 284: { gotoXY(0,3); LCDWriteInt(voltage[3],4, 2, 0);};
  8219  05D7  3003               	movlw	3
  8220  05D8  0020               	movlb	0	; select bank0
  8221  05D9  00D9               	movwf	??_main
  8222  05DA  0859               	movf	??_main,w
  8223  05DB  00F5               	movwf	gotoXY@y
  8224  05DC  3000               	movlw	0
  8225  05DD  319E  2645  3180   	fcall	_gotoXY
  8226  05E0  0020               	movlb	0	; select bank0
  8227  05E1  0865               	movf	_voltage+7,w
  8228  05E2  00C0               	movwf	LCDWriteInt@value+1
  8229  05E3  0864               	movf	_voltage+6,w
  8230  05E4  00BF               	movwf	LCDWriteInt@value
  8231  05E5  3004               	movlw	4
  8232  05E6  00D9               	movwf	??_main
  8233  05E7  0859               	movf	??_main,w
  8234  05E8  00C1               	movwf	LCDWriteInt@fieldLength
  8235  05E9  3002               	movlw	2
  8236  05EA  00DA               	movwf	??_main+1
  8237  05EB  085A               	movf	??_main+1,w
  8238  05EC  00C2               	movwf	LCDWriteInt@numPlaces
  8239  05ED  01C3               	clrf	LCDWriteInt@sign
  8240  05EE  3188  2003  3180   	fcall	_LCDWriteInt
  8241                           
  8242                           ;main.c: 286: LCDWriteCharacter('V');
  8243  05F1  3056               	movlw	86
  8244  05F2  3192  22E6  3180   	fcall	_LCDWriteCharacter
  8245                           
  8246                           ;main.c: 288: { gotoXY(26,3); LCDWriteInt(voltage[1],4, 2, 0);};
  8247  05F5  3003               	movlw	3
  8248  05F6  0020               	movlb	0	; select bank0
  8249  05F7  00D9               	movwf	??_main
  8250  05F8  0859               	movf	??_main,w
  8251  05F9  00F5               	movwf	gotoXY@y
  8252  05FA  301A               	movlw	26
  8253  05FB  319E  2645  3180   	fcall	_gotoXY
  8254  05FE  0020               	movlb	0	; select bank0
  8255  05FF  0861               	movf	_voltage+3,w
  8256  0600  00C0               	movwf	LCDWriteInt@value+1
  8257  0601  0860               	movf	_voltage+2,w
  8258  0602  00BF               	movwf	LCDWriteInt@value
  8259  0603  3004               	movlw	4
  8260  0604  00D9               	movwf	??_main
  8261  0605  0859               	movf	??_main,w
  8262  0606  00C1               	movwf	LCDWriteInt@fieldLength
  8263  0607  3002               	movlw	2
  8264  0608  00DA               	movwf	??_main+1
  8265  0609  085A               	movf	??_main+1,w
  8266  060A  00C2               	movwf	LCDWriteInt@numPlaces
  8267  060B  01C3               	clrf	LCDWriteInt@sign
  8268  060C  3188  2003  3180   	fcall	_LCDWriteInt
  8269                           
  8270                           ;main.c: 290: LCDWriteCharacter('V');
  8271  060F  3056               	movlw	86
  8272  0610  3192  22E6  3180   	fcall	_LCDWriteCharacter
  8273                           
  8274                           ;main.c: 292: { gotoXY(52,3); LCDWriteInt(Vref[1],4, 2, 0);};
  8275  0613  3003               	movlw	3
  8276  0614  0020               	movlb	0	; select bank0
  8277  0615  00D9               	movwf	??_main
  8278  0616  0859               	movf	??_main,w
  8279  0617  00F5               	movwf	gotoXY@y
  8280  0618  3034               	movlw	52
  8281  0619  319E  2645  3180   	fcall	_gotoXY
  8282  061C  0021               	movlb	1	; select bank1
  8283  061D  0833               	movf	((_Vref+1)^(0+128)+2),w
  8284  061E  0020               	movlb	0	; select bank0
  8285  061F  00C0               	movwf	LCDWriteInt@value+1
  8286  0620  0021               	movlb	1	; select bank1
  8287  0621  0832               	movf	(_Vref^(0+128)+2),w
  8288  0622  0020               	movlb	0	; select bank0
  8289  0623  00BF               	movwf	LCDWriteInt@value
  8290  0624  3004               	movlw	4
  8291  0625  00D9               	movwf	??_main
  8292  0626  0859               	movf	??_main,w
  8293  0627  00C1               	movwf	LCDWriteInt@fieldLength
  8294  0628  3002               	movlw	2
  8295  0629  00DA               	movwf	??_main+1
  8296  062A  085A               	movf	??_main+1,w
  8297  062B  00C2               	movwf	LCDWriteInt@numPlaces
  8298  062C  01C3               	clrf	LCDWriteInt@sign
  8299  062D  3188  2003  3180   	fcall	_LCDWriteInt
  8300                           
  8301                           ;main.c: 293: LCDWriteCharacter('V');
  8302  0630  3056               	movlw	86
  8303  0631  3192  22E6  3180   	fcall	_LCDWriteCharacter
  8304                           
  8305                           ;main.c: 295: { gotoXY(80,3); LCDWriteInt(Imode[1],1, 0, 0);};
  8306  0634  3003               	movlw	3
  8307  0635  0020               	movlb	0	; select bank0
  8308  0636  00D9               	movwf	??_main
  8309  0637  0859               	movf	??_main,w
  8310  0638  00F5               	movwf	gotoXY@y
  8311  0639  3050               	movlw	80
  8312  063A  319E  2645  3180   	fcall	_gotoXY
  8313  063D  0020               	movlb	0	; select bank0
  8314  063E  0867               	movf	_Imode+1,w
  8315  063F  00BF               	movwf	LCDWriteInt@value
  8316  0640  01C0               	clrf	LCDWriteInt@value+1
  8317  0641  1BBF               	btfsc	LCDWriteInt@value,7
  8318  0642  03C0               	decf	LCDWriteInt@value+1,f
  8319  0643  01C1               	clrf	LCDWriteInt@fieldLength
  8320  0644  0AC1               	incf	LCDWriteInt@fieldLength,f
  8321  0645  01C2               	clrf	LCDWriteInt@numPlaces
  8322  0646  01C3               	clrf	LCDWriteInt@sign
  8323  0647  3188  2003  3180   	fcall	_LCDWriteInt
  8324                           
  8325                           ;main.c: 305: { gotoXY(0,4); LCDWriteInt(current[3],3, 1, 0);};
  8326  064A  3004               	movlw	4
  8327  064B  0020               	movlb	0	; select bank0
  8328  064C  00D9               	movwf	??_main
  8329  064D  0859               	movf	??_main,w
  8330  064E  00F5               	movwf	gotoXY@y
  8331  064F  3000               	movlw	0
  8332  0650  319E  2645  3180   	fcall	_gotoXY
  8333  0653  0021               	movlb	1	; select bank1
  8334  0654  0827               	movf	((_current+1)^(0+128)+6),w
  8335  0655  0020               	movlb	0	; select bank0
  8336  0656  00C0               	movwf	LCDWriteInt@value+1
  8337  0657  0021               	movlb	1	; select bank1
  8338  0658  0826               	movf	(_current^(0+128)+6),w
  8339  0659  0020               	movlb	0	; select bank0
  8340  065A  00BF               	movwf	LCDWriteInt@value
  8341  065B  3003               	movlw	3
  8342  065C  00D9               	movwf	??_main
  8343  065D  0859               	movf	??_main,w
  8344  065E  00C1               	movwf	LCDWriteInt@fieldLength
  8345  065F  01C2               	clrf	LCDWriteInt@numPlaces
  8346  0660  0AC2               	incf	LCDWriteInt@numPlaces,f
  8347  0661  01C3               	clrf	LCDWriteInt@sign
  8348  0662  3188  2003  3180   	fcall	_LCDWriteInt
  8349                           
  8350                           ;main.c: 306: LCDWriteCharacter('A');
  8351  0665  3041               	movlw	65
  8352  0666  3192  22E6  3180   	fcall	_LCDWriteCharacter
  8353                           
  8354                           ;main.c: 308: { gotoXY(26,4); LCDWriteInt((int16_t)(current[3]*(voltage[3]/voltage[1]*.9
      +                          )),3, 1, 0);};
  8355  0669  3004               	movlw	4
  8356  066A  0020               	movlb	0	; select bank0
  8357  066B  00D9               	movwf	??_main
  8358  066C  0859               	movf	??_main,w
  8359  066D  00F5               	movwf	gotoXY@y
  8360  066E  301A               	movlw	26
  8361  066F  319E  2645  3180   	fcall	_gotoXY
  8362  0672  0020               	movlb	0	; select bank0
  8363  0673  0865               	movf	_voltage+7,w
  8364  0674  00F3               	movwf	___awdiv@dividend+1
  8365  0675  0864               	movf	_voltage+6,w
  8366  0676  00F2               	movwf	___awdiv@dividend
  8367  0677  0861               	movf	_voltage+3,w
  8368  0678  00F1               	movwf	___awdiv@divisor+1
  8369  0679  0860               	movf	_voltage+2,w
  8370  067A  00F0               	movwf	___awdiv@divisor
  8371  067B  3192  2295  3180   	fcall	___awdiv
  8372  067E  0871               	movf	?___awdiv+1,w
  8373  067F  00FA               	movwf	___awtoft@c+1
  8374  0680  0870               	movf	?___awdiv,w
  8375  0681  00F9               	movwf	___awtoft@c
  8376  0682  319F  2710  3180   	fcall	___awtoft
  8377  0685  0879               	movf	?___awtoft,w
  8378  0686  0020               	movlb	0	; select bank0
  8379  0687  00A4               	movwf	___ftmul@f2
  8380  0688  087A               	movf	?___awtoft+1,w
  8381  0689  00A5               	movwf	___ftmul@f2+1
  8382  068A  087B               	movf	?___awtoft+2,w
  8383  068B  00A6               	movwf	___ftmul@f2+2
  8384  068C  3066               	movlw	102
  8385  068D  00A1               	movwf	___ftmul@f1
  8386  068E  3066               	movlw	102
  8387  068F  00A2               	movwf	___ftmul@f1+1
  8388  0690  303F               	movlw	63
  8389  0691  00A3               	movwf	___ftmul@f1+2
  8390  0692  3197  274C  3180   	fcall	___ftmul
  8391  0695  0020               	movlb	0	; select bank0
  8392  0696  0821               	movf	?___ftmul,w
  8393  0697  0021               	movlb	1	; select bank1
  8394  0698  00E6               	movwf	_main$1284^(0+128)
  8395  0699  0020               	movlb	0	; select bank0
  8396  069A  0822               	movf	?___ftmul+1,w
  8397  069B  0021               	movlb	1	; select bank1
  8398  069C  00E7               	movwf	(_main$1284+1)^(0+128)
  8399  069D  0020               	movlb	0	; select bank0
  8400  069E  0823               	movf	?___ftmul+2,w
  8401  069F  0021               	movlb	1	; select bank1
  8402  06A0  00E8               	movwf	(_main$1284+2)^(0+128)
  8403  06A1  0827               	movf	((_current+1)^(0+128)+6),w
  8404  06A2  00FA               	movwf	___awtoft@c+1
  8405  06A3  0826               	movf	(_current^(0+128)+6),w
  8406  06A4  00F9               	movwf	___awtoft@c
  8407  06A5  319F  2710  3180   	fcall	___awtoft
  8408  06A8  0879               	movf	?___awtoft,w
  8409  06A9  0020               	movlb	0	; select bank0
  8410  06AA  00A4               	movwf	___ftmul@f2
  8411  06AB  087A               	movf	?___awtoft+1,w
  8412  06AC  00A5               	movwf	___ftmul@f2+1
  8413  06AD  087B               	movf	?___awtoft+2,w
  8414  06AE  00A6               	movwf	___ftmul@f2+2
  8415  06AF  0021               	movlb	1	; select bank1
  8416  06B0  0866               	movf	_main$1284^(0+128),w
  8417  06B1  0020               	movlb	0	; select bank0
  8418  06B2  00A1               	movwf	___ftmul@f1
  8419  06B3  0021               	movlb	1	; select bank1
  8420  06B4  0867               	movf	(_main$1284+1)^(0+128),w
  8421  06B5  0020               	movlb	0	; select bank0
  8422  06B6  00A2               	movwf	___ftmul@f1+1
  8423  06B7  0021               	movlb	1	; select bank1
  8424  06B8  0868               	movf	(_main$1284+2)^(0+128),w
  8425  06B9  0020               	movlb	0	; select bank0
  8426  06BA  00A3               	movwf	___ftmul@f1+2
  8427  06BB  3197  274C  3180   	fcall	___ftmul
  8428  06BE  0020               	movlb	0	; select bank0
  8429  06BF  0821               	movf	?___ftmul,w
  8430  06C0  00B1               	movwf	___fttol@f1
  8431  06C1  0822               	movf	?___ftmul+1,w
  8432  06C2  00B2               	movwf	___fttol@f1+1
  8433  06C3  0823               	movf	?___ftmul+2,w
  8434  06C4  00B3               	movwf	___fttol@f1+2
  8435  06C5  3194  24E4  3180   	fcall	___fttol
  8436  06C8  0020               	movlb	0	; select bank0
  8437  06C9  0832               	movf	?___fttol+1,w
  8438  06CA  00C0               	movwf	LCDWriteInt@value+1
  8439  06CB  0831               	movf	?___fttol,w
  8440  06CC  00BF               	movwf	LCDWriteInt@value
  8441  06CD  3003               	movlw	3
  8442  06CE  00D9               	movwf	??_main
  8443  06CF  0859               	movf	??_main,w
  8444  06D0  00C1               	movwf	LCDWriteInt@fieldLength
  8445  06D1  01C2               	clrf	LCDWriteInt@numPlaces
  8446  06D2  0AC2               	incf	LCDWriteInt@numPlaces,f
  8447  06D3  01C3               	clrf	LCDWriteInt@sign
  8448  06D4  3188  2003  3180   	fcall	_LCDWriteInt
  8449                           
  8450                           ;main.c: 310: LCDWriteCharacter('A');
  8451  06D7  3041               	movlw	65
  8452  06D8  3192  22E6  3180   	fcall	_LCDWriteCharacter
  8453                           
  8454                           ;main.c: 312: { gotoXY(52,4); LCDWriteInt(Iref[1],3, 1, 0);};
  8455  06DB  3004               	movlw	4
  8456  06DC  0020               	movlb	0	; select bank0
  8457  06DD  00D9               	movwf	??_main
  8458  06DE  0859               	movf	??_main,w
  8459  06DF  00F5               	movwf	gotoXY@y
  8460  06E0  3034               	movlw	52
  8461  06E1  319E  2645  3180   	fcall	_gotoXY
  8462  06E4  0021               	movlb	1	; select bank1
  8463  06E5  082F               	movf	((_Iref+1)^(0+128)+2),w
  8464  06E6  0020               	movlb	0	; select bank0
  8465  06E7  00C0               	movwf	LCDWriteInt@value+1
  8466  06E8  0021               	movlb	1	; select bank1
  8467  06E9  082E               	movf	(_Iref^(0+128)+2),w
  8468  06EA  0020               	movlb	0	; select bank0
  8469  06EB  00BF               	movwf	LCDWriteInt@value
  8470  06EC  3003               	movlw	3
  8471  06ED  00D9               	movwf	??_main
  8472  06EE  0859               	movf	??_main,w
  8473  06EF  00C1               	movwf	LCDWriteInt@fieldLength
  8474  06F0  01C2               	clrf	LCDWriteInt@numPlaces
  8475  06F1  0AC2               	incf	LCDWriteInt@numPlaces,f
  8476  06F2  01C3               	clrf	LCDWriteInt@sign
  8477  06F3  3188  2003  3180   	fcall	_LCDWriteInt
  8478                           
  8479                           ;main.c: 313: LCDWriteCharacter('A');
  8480  06F6  3041               	movlw	65
  8481  06F7  3192  22E6  3180   	fcall	_LCDWriteCharacter
  8482                           
  8483                           ;main.c: 315: { gotoXY(80,4); LCDWriteInt(batteryState[1],1, 0, 0);};
  8484  06FA  3004               	movlw	4
  8485  06FB  0020               	movlb	0	; select bank0
  8486  06FC  00D9               	movwf	??_main
  8487  06FD  0859               	movf	??_main,w
  8488  06FE  00F5               	movwf	gotoXY@y
  8489  06FF  3050               	movlw	80
  8490  0700  319E  2645  3180   	fcall	_gotoXY
  8491  0703  0020               	movlb	0	; select bank0
  8492  0704  0869               	movf	_batteryState+1,w
  8493  0705  00D9               	movwf	??_main
  8494  0706  01DA               	clrf	??_main+1
  8495  0707  0859               	movf	??_main,w
  8496  0708  00BF               	movwf	LCDWriteInt@value
  8497  0709  085A               	movf	??_main+1,w
  8498  070A  00C0               	movwf	LCDWriteInt@value+1
  8499  070B  01C1               	clrf	LCDWriteInt@fieldLength
  8500  070C  0AC1               	incf	LCDWriteInt@fieldLength,f
  8501  070D  01C2               	clrf	LCDWriteInt@numPlaces
  8502  070E  01C3               	clrf	LCDWriteInt@sign
  8503  070F  3188  2003  3180   	fcall	_LCDWriteInt
  8504                           
  8505                           ;main.c: 319: { gotoXY(0,5); LCDWriteInt(dutyCycle6,4, 0, 0);};
  8506  0712  3005               	movlw	5
  8507  0713  0020               	movlb	0	; select bank0
  8508  0714  00D9               	movwf	??_main
  8509  0715  0859               	movf	??_main,w
  8510  0716  00F5               	movwf	gotoXY@y
  8511  0717  3000               	movlw	0
  8512  0718  319E  2645  3180   	fcall	_gotoXY
  8513  071B  0021               	movlb	1	; select bank1
  8514  071C  086A               	movf	(main@dutyCycle6+1)^(0+128),w
  8515  071D  0020               	movlb	0	; select bank0
  8516  071E  00C0               	movwf	LCDWriteInt@value+1
  8517  071F  0021               	movlb	1	; select bank1
  8518  0720  0869               	movf	main@dutyCycle6^(0+128),w
  8519  0721  0020               	movlb	0	; select bank0
  8520  0722  00BF               	movwf	LCDWriteInt@value
  8521  0723  3004               	movlw	4
  8522  0724  00D9               	movwf	??_main
  8523  0725  0859               	movf	??_main,w
  8524  0726  00C1               	movwf	LCDWriteInt@fieldLength
  8525  0727  01C2               	clrf	LCDWriteInt@numPlaces
  8526  0728  01C3               	clrf	LCDWriteInt@sign
  8527  0729  3188  2003  3180   	fcall	_LCDWriteInt
  8528                           
  8529                           ;main.c: 320: { gotoXY(18,5); LCDWriteInt(VHoldMode[0],1, 0, 0);};
  8530  072C  3005               	movlw	5
  8531  072D  0020               	movlb	0	; select bank0
  8532  072E  00D9               	movwf	??_main
  8533  072F  0859               	movf	??_main,w
  8534  0730  00F5               	movwf	gotoXY@y
  8535  0731  3012               	movlw	18
  8536  0732  319E  2645  3180   	fcall	_gotoXY
  8537  0735  0021               	movlb	1	; select bank1
  8538  0736  083C               	movf	_VHoldMode^(0+128),w
  8539  0737  0020               	movlb	0	; select bank0
  8540  0738  00BF               	movwf	LCDWriteInt@value
  8541  0739  01C0               	clrf	LCDWriteInt@value+1
  8542  073A  1BBF               	btfsc	LCDWriteInt@value,7
  8543  073B  03C0               	decf	LCDWriteInt@value+1,f
  8544  073C  01C1               	clrf	LCDWriteInt@fieldLength
  8545  073D  0AC1               	incf	LCDWriteInt@fieldLength,f
  8546  073E  01C2               	clrf	LCDWriteInt@numPlaces
  8547  073F  01C3               	clrf	LCDWriteInt@sign
  8548  0740  3188  2003  3180   	fcall	_LCDWriteInt
  8549                           
  8550                           ;main.c: 321: LCDWriteCharacter(' ');
  8551  0743  3020               	movlw	32
  8552  0744  3192  22E6  3180   	fcall	_LCDWriteCharacter
  8553                           
  8554                           ;main.c: 322: { gotoXY(28,5); LCDWriteInt(dutyCycle7,4, 0, 0);};
  8555  0747  3005               	movlw	5
  8556  0748  0020               	movlb	0	; select bank0
  8557  0749  00D9               	movwf	??_main
  8558  074A  0859               	movf	??_main,w
  8559  074B  00F5               	movwf	gotoXY@y
  8560  074C  301C               	movlw	28
  8561  074D  319E  2645  3180   	fcall	_gotoXY
  8562  0750  0021               	movlb	1	; select bank1
  8563  0751  086C               	movf	(main@dutyCycle7+1)^(0+128),w
  8564  0752  0020               	movlb	0	; select bank0
  8565  0753  00C0               	movwf	LCDWriteInt@value+1
  8566  0754  0021               	movlb	1	; select bank1
  8567  0755  086B               	movf	main@dutyCycle7^(0+128),w
  8568  0756  0020               	movlb	0	; select bank0
  8569  0757  00BF               	movwf	LCDWriteInt@value
  8570  0758  3004               	movlw	4
  8571  0759  00D9               	movwf	??_main
  8572  075A  0859               	movf	??_main,w
  8573  075B  00C1               	movwf	LCDWriteInt@fieldLength
  8574  075C  01C2               	clrf	LCDWriteInt@numPlaces
  8575  075D  01C3               	clrf	LCDWriteInt@sign
  8576  075E  3188  2003  3180   	fcall	_LCDWriteInt
  8577                           
  8578                           ;main.c: 323: { gotoXY(46,5); LCDWriteInt(VHoldMode[1],1, 0, 0);};
  8579  0761  3005               	movlw	5
  8580  0762  0020               	movlb	0	; select bank0
  8581  0763  00D9               	movwf	??_main
  8582  0764  0859               	movf	??_main,w
  8583  0765  00F5               	movwf	gotoXY@y
  8584  0766  302E               	movlw	46
  8585  0767  319E  2645  3180   	fcall	_gotoXY
  8586  076A  0021               	movlb	1	; select bank1
  8587  076B  083D               	movf	(_VHoldMode^(0+128)+1),w
  8588  076C  0020               	movlb	0	; select bank0
  8589  076D  00BF               	movwf	LCDWriteInt@value
  8590  076E  01C0               	clrf	LCDWriteInt@value+1
  8591  076F  1BBF               	btfsc	LCDWriteInt@value,7
  8592  0770  03C0               	decf	LCDWriteInt@value+1,f
  8593  0771  01C1               	clrf	LCDWriteInt@fieldLength
  8594  0772  0AC1               	incf	LCDWriteInt@fieldLength,f
  8595  0773  01C2               	clrf	LCDWriteInt@numPlaces
  8596  0774  01C3               	clrf	LCDWriteInt@sign
  8597  0775  3188  2003  3180   	fcall	_LCDWriteInt
  8598                           
  8599                           ;main.c: 324: LCDWriteCharacter(' ');
  8600  0778  3020               	movlw	32
  8601  0779  3192  22E6  3180   	fcall	_LCDWriteCharacter
  8602                           
  8603                           ;main.c: 325: { gotoXY(56,5); LCDWriteInt(batteryTemp,3, 1, 0);};
  8604  077C  3005               	movlw	5
  8605  077D  0020               	movlb	0	; select bank0
  8606  077E  00D9               	movwf	??_main
  8607  077F  0859               	movf	??_main,w
  8608  0780  00F5               	movwf	gotoXY@y
  8609  0781  3038               	movlw	56
  8610  0782  319E  2645  3180   	fcall	_gotoXY
  8611  0785  0020               	movlb	0	; select bank0
  8612  0786  086F               	movf	_batteryTemp+1,w
  8613  0787  00C0               	movwf	LCDWriteInt@value+1
  8614  0788  086E               	movf	_batteryTemp,w
  8615  0789  00BF               	movwf	LCDWriteInt@value
  8616  078A  3003               	movlw	3
  8617  078B  00D9               	movwf	??_main
  8618  078C  0859               	movf	??_main,w
  8619  078D  00C1               	movwf	LCDWriteInt@fieldLength
  8620  078E  01C2               	clrf	LCDWriteInt@numPlaces
  8621  078F  0AC2               	incf	LCDWriteInt@numPlaces,f
  8622  0790  01C3               	clrf	LCDWriteInt@sign
  8623  0791  3188  2003  3180   	fcall	_LCDWriteInt
  8624                           
  8625                           ;main.c: 326: LCDWriteCharacter(123);
  8626  0794  307B               	movlw	123
  8627  0795  3192  22E6  3180   	fcall	_LCDWriteCharacter
  8628                           
  8629                           ;main.c: 327: LCDWriteCharacter('C');
  8630  0798  3043               	movlw	67
  8631  0799  3192  22E6  3180   	fcall	_LCDWriteCharacter
  8632                           
  8633                           ;main.c: 397: if(batteryState[0] > FINISHED)
  8634  079C  3003               	movlw	3
  8635  079D  0020               	movlb	0	; select bank0
  8636  079E  0268               	subwf	_batteryState,w
  8637  079F  1C03               	skipc
  8638  07A0  2FA5               	goto	l3666
  8639                           
  8640                           ;main.c: 398: {
  8641                           ;main.c: 399: cc_cv_mode(0);
  8642  07A1  3000               	movlw	0
  8643  07A2  318B  23BB  3180   	fcall	_cc_cv_mode
  8644  07A5                     l3666:	
  8645                           
  8646                           ;main.c: 400: }
  8647                           ;main.c: 401: if(batteryState[1] > FINISHED)
  8648  07A5  3003               	movlw	3
  8649  07A6  0020               	movlb	0	; select bank0
  8650  07A7  0269               	subwf	_batteryState+1,w
  8651  07A8  1C03               	skipc
  8652  07A9  2FAE               	goto	l3670
  8653                           
  8654                           ;main.c: 402: {
  8655                           ;main.c: 403: cc_cv_mode(1);
  8656  07AA  3001               	movlw	1
  8657  07AB  318B  23BB  3180   	fcall	_cc_cv_mode
  8658  07AE                     l3670:	
  8659                           
  8660                           ;main.c: 404: }
  8661                           ;main.c: 405: slowLoop=0;
  8662  07AE  0021               	movlb	1	; select bank1
  8663  07AF  01DA               	clrf	main@slowLoop^(0+128)
  8664  07B0  2889               	goto	l3346
  8665  07B1                     __end_of_main:	
  8666                           
  8667                           	psect	text1
  8668  08BC                     __ptext1:	
  8669 ;; *************** function _tempCalc *****************
  8670 ;; Defined at:
  8671 ;;		line 4 in file "tempCalc.c"
  8672 ;; Parameters:    Size  Location     Type
  8673 ;;  analogValue     2   46[BANK0 ] int 
  8674 ;; Auto vars:     Size  Location     Type
  8675 ;;  steinhart       3   54[BANK0 ] float 
  8676 ;;  R               3   48[BANK0 ] float 
  8677 ;; Return value:  Size  Location     Type
  8678 ;;                  2   46[BANK0 ] int 
  8679 ;; Registers used:
  8680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8681 ;; Tracked objects:
  8682 ;;		On entry : 0/0
  8683 ;;		On exit  : 0/0
  8684 ;;		Unchanged: 0/0
  8685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8686 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8687 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8689 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8690 ;;Total ram usage:       11 bytes
  8691 ;; Hardware stack levels used:    1
  8692 ;; Hardware stack levels required when called:    4
  8693 ;; This function calls:
  8694 ;;		___awtoft
  8695 ;;		___ftadd
  8696 ;;		___ftdiv
  8697 ;;		___ftmul
  8698 ;;		___ftsub
  8699 ;;		___fttol
  8700 ;;		_log
  8701 ;; This function is called by:
  8702 ;;		_main
  8703 ;; This function uses a non-reentrant model
  8704 ;;
  8705                           
  8706                           
  8707                           ;psect for function _tempCalc
  8708  08BC                     _tempCalc:	
  8709                           
  8710                           ;tempCalc.c: 6: float R, steinhart;
  8711                           ;tempCalc.c: 7: R=10030/(1023/(float)analogValue-1);
  8712                           
  8713                           ;incstack = 0
  8714                           ; Regs used in _tempCalc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8715  08BC  3000               	movlw	0
  8716  08BD  0020               	movlb	0	; select bank0
  8717  08BE  00B1               	movwf	___ftadd@f1
  8718  08BF  3080               	movlw	128
  8719  08C0  00B2               	movwf	___ftadd@f1+1
  8720  08C1  30BF               	movlw	191
  8721  08C2  00B3               	movwf	___ftadd@f1+2
  8722  08C3  084F               	movf	tempCalc@analogValue+1,w
  8723  08C4  00FA               	movwf	___awtoft@c+1
  8724  08C5  084E               	movf	tempCalc@analogValue,w
  8725  08C6  00F9               	movwf	___awtoft@c
  8726  08C7  319F  2710  3188   	fcall	___awtoft
  8727  08CA  0879               	movf	?___awtoft,w
  8728  08CB  0020               	movlb	0	; select bank0
  8729  08CC  00A1               	movwf	___ftdiv@f2
  8730  08CD  087A               	movf	?___awtoft+1,w
  8731  08CE  00A2               	movwf	___ftdiv@f2+1
  8732  08CF  087B               	movf	?___awtoft+2,w
  8733  08D0  00A3               	movwf	___ftdiv@f2+2
  8734  08D1  30C0               	movlw	192
  8735  08D2  00A4               	movwf	___ftdiv@f1
  8736  08D3  307F               	movlw	127
  8737  08D4  00A5               	movwf	___ftdiv@f1+1
  8738  08D5  3044               	movlw	68
  8739  08D6  00A6               	movwf	___ftdiv@f1+2
  8740  08D7  3195  25F3  3188   	fcall	___ftdiv
  8741  08DA  0020               	movlb	0	; select bank0
  8742  08DB  0821               	movf	?___ftdiv,w
  8743  08DC  00B4               	movwf	___ftadd@f2
  8744  08DD  0822               	movf	?___ftdiv+1,w
  8745  08DE  00B5               	movwf	___ftadd@f2+1
  8746  08DF  0823               	movf	?___ftdiv+2,w
  8747  08E0  00B6               	movwf	___ftadd@f2+2
  8748  08E1  3189  21A3  3188   	fcall	___ftadd
  8749  08E4  0020               	movlb	0	; select bank0
  8750  08E5  0831               	movf	?___ftadd,w
  8751  08E6  00D3               	movwf	_tempCalc$1283
  8752  08E7  0832               	movf	?___ftadd+1,w
  8753  08E8  00D4               	movwf	_tempCalc$1283+1
  8754  08E9  0833               	movf	?___ftadd+2,w
  8755  08EA  00D5               	movwf	_tempCalc$1283+2
  8756                           
  8757                           ;tempCalc.c: 6: float R, steinhart;
  8758                           ;tempCalc.c: 7: R=10030/(1023/(float)analogValue-1);
  8759  08EB  0853               	movf	_tempCalc$1283,w
  8760  08EC  00A1               	movwf	___ftdiv@f2
  8761  08ED  0854               	movf	_tempCalc$1283+1,w
  8762  08EE  00A2               	movwf	___ftdiv@f2+1
  8763  08EF  0855               	movf	_tempCalc$1283+2,w
  8764  08F0  00A3               	movwf	___ftdiv@f2+2
  8765  08F1  30B8               	movlw	184
  8766  08F2  00A4               	movwf	___ftdiv@f1
  8767  08F3  301C               	movlw	28
  8768  08F4  00A5               	movwf	___ftdiv@f1+1
  8769  08F5  3046               	movlw	70
  8770  08F6  00A6               	movwf	___ftdiv@f1+2
  8771  08F7  3195  25F3  3188   	fcall	___ftdiv
  8772  08FA  0020               	movlb	0	; select bank0
  8773  08FB  0821               	movf	?___ftdiv,w
  8774  08FC  00D0               	movwf	tempCalc@R
  8775  08FD  0822               	movf	?___ftdiv+1,w
  8776  08FE  00D1               	movwf	tempCalc@R+1
  8777  08FF  0823               	movf	?___ftdiv+2,w
  8778  0900  00D2               	movwf	tempCalc@R+2
  8779                           
  8780                           ;tempCalc.c: 8: steinhart=R/10010;
  8781  0901  3068               	movlw	104
  8782  0902  00A1               	movwf	___ftdiv@f2
  8783  0903  301C               	movlw	28
  8784  0904  00A2               	movwf	___ftdiv@f2+1
  8785  0905  3046               	movlw	70
  8786  0906  00A3               	movwf	___ftdiv@f2+2
  8787  0907  0850               	movf	tempCalc@R,w
  8788  0908  00A4               	movwf	___ftdiv@f1
  8789  0909  0851               	movf	tempCalc@R+1,w
  8790  090A  00A5               	movwf	___ftdiv@f1+1
  8791  090B  0852               	movf	tempCalc@R+2,w
  8792  090C  00A6               	movwf	___ftdiv@f1+2
  8793  090D  3195  25F3  3188   	fcall	___ftdiv
  8794  0910  0020               	movlb	0	; select bank0
  8795  0911  0821               	movf	?___ftdiv,w
  8796  0912  00D6               	movwf	tempCalc@steinhart
  8797  0913  0822               	movf	?___ftdiv+1,w
  8798  0914  00D7               	movwf	tempCalc@steinhart+1
  8799  0915  0823               	movf	?___ftdiv+2,w
  8800  0916  00D8               	movwf	tempCalc@steinhart+2
  8801                           
  8802                           ;tempCalc.c: 9: steinhart=log(steinhart);
  8803  0917  0856               	movf	tempCalc@steinhart,w
  8804  0918  00C8               	movwf	log@x
  8805  0919  0857               	movf	tempCalc@steinhart+1,w
  8806  091A  00C9               	movwf	log@x+1
  8807  091B  0858               	movf	tempCalc@steinhart+2,w
  8808  091C  00CA               	movwf	log@x+2
  8809  091D  3196  269C  3188   	fcall	_log
  8810  0920  0020               	movlb	0	; select bank0
  8811  0921  0848               	movf	?_log,w
  8812  0922  00D6               	movwf	tempCalc@steinhart
  8813  0923  0849               	movf	?_log+1,w
  8814  0924  00D7               	movwf	tempCalc@steinhart+1
  8815  0925  084A               	movf	?_log+2,w
  8816  0926  00D8               	movwf	tempCalc@steinhart+2
  8817                           
  8818                           ;tempCalc.c: 10: steinhart/=3795.3;
  8819  0927  3035               	movlw	53
  8820  0928  00A1               	movwf	___ftdiv@f2
  8821  0929  306D               	movlw	109
  8822  092A  00A2               	movwf	___ftdiv@f2+1
  8823  092B  3045               	movlw	69
  8824  092C  00A3               	movwf	___ftdiv@f2+2
  8825  092D  0856               	movf	tempCalc@steinhart,w
  8826  092E  00A4               	movwf	___ftdiv@f1
  8827  092F  0857               	movf	tempCalc@steinhart+1,w
  8828  0930  00A5               	movwf	___ftdiv@f1+1
  8829  0931  0858               	movf	tempCalc@steinhart+2,w
  8830  0932  00A6               	movwf	___ftdiv@f1+2
  8831  0933  3195  25F3  3188   	fcall	___ftdiv
  8832  0936  0020               	movlb	0	; select bank0
  8833  0937  0821               	movf	?___ftdiv,w
  8834  0938  00D6               	movwf	tempCalc@steinhart
  8835  0939  0822               	movf	?___ftdiv+1,w
  8836  093A  00D7               	movwf	tempCalc@steinhart+1
  8837  093B  0823               	movf	?___ftdiv+2,w
  8838  093C  00D8               	movwf	tempCalc@steinhart+2
  8839                           
  8840                           ;tempCalc.c: 11: steinhart+=1.0/(25+273.15);
  8841  093D  30CF               	movlw	207
  8842  093E  00B1               	movwf	___ftadd@f1
  8843  093F  305B               	movlw	91
  8844  0940  00B2               	movwf	___ftadd@f1+1
  8845  0941  303B               	movlw	59
  8846  0942  00B3               	movwf	___ftadd@f1+2
  8847  0943  0856               	movf	tempCalc@steinhart,w
  8848  0944  00B4               	movwf	___ftadd@f2
  8849  0945  0857               	movf	tempCalc@steinhart+1,w
  8850  0946  00B5               	movwf	___ftadd@f2+1
  8851  0947  0858               	movf	tempCalc@steinhart+2,w
  8852  0948  00B6               	movwf	___ftadd@f2+2
  8853  0949  3189  21A3  3188   	fcall	___ftadd
  8854  094C  0020               	movlb	0	; select bank0
  8855  094D  0831               	movf	?___ftadd,w
  8856  094E  00D6               	movwf	tempCalc@steinhart
  8857  094F  0832               	movf	?___ftadd+1,w
  8858  0950  00D7               	movwf	tempCalc@steinhart+1
  8859  0951  0833               	movf	?___ftadd+2,w
  8860  0952  00D8               	movwf	tempCalc@steinhart+2
  8861                           
  8862                           ;tempCalc.c: 12: steinhart=1.0/steinhart;
  8863  0953  0856               	movf	tempCalc@steinhart,w
  8864  0954  00A1               	movwf	___ftdiv@f2
  8865  0955  0857               	movf	tempCalc@steinhart+1,w
  8866  0956  00A2               	movwf	___ftdiv@f2+1
  8867  0957  0858               	movf	tempCalc@steinhart+2,w
  8868  0958  00A3               	movwf	___ftdiv@f2+2
  8869  0959  3000               	movlw	0
  8870  095A  00A4               	movwf	___ftdiv@f1
  8871  095B  3080               	movlw	128
  8872  095C  00A5               	movwf	___ftdiv@f1+1
  8873  095D  303F               	movlw	63
  8874  095E  00A6               	movwf	___ftdiv@f1+2
  8875  095F  3195  25F3  3188   	fcall	___ftdiv
  8876  0962  0020               	movlb	0	; select bank0
  8877  0963  0821               	movf	?___ftdiv,w
  8878  0964  00D6               	movwf	tempCalc@steinhart
  8879  0965  0822               	movf	?___ftdiv+1,w
  8880  0966  00D7               	movwf	tempCalc@steinhart+1
  8881  0967  0823               	movf	?___ftdiv+2,w
  8882  0968  00D8               	movwf	tempCalc@steinhart+2
  8883                           
  8884                           ;tempCalc.c: 13: steinhart-=273;
  8885  0969  3080               	movlw	128
  8886  096A  00BE               	movwf	___ftsub@f2
  8887  096B  3088               	movlw	136
  8888  096C  00BF               	movwf	___ftsub@f2+1
  8889  096D  3043               	movlw	67
  8890  096E  00C0               	movwf	___ftsub@f2+2
  8891  096F  0856               	movf	tempCalc@steinhart,w
  8892  0970  00C1               	movwf	___ftsub@f1
  8893  0971  0857               	movf	tempCalc@steinhart+1,w
  8894  0972  00C2               	movwf	___ftsub@f1+1
  8895  0973  0858               	movf	tempCalc@steinhart+2,w
  8896  0974  00C3               	movwf	___ftsub@f1+2
  8897  0975  319E  26B4  3188   	fcall	___ftsub
  8898  0978  0020               	movlb	0	; select bank0
  8899  0979  083E               	movf	?___ftsub,w
  8900  097A  00D6               	movwf	tempCalc@steinhart
  8901  097B  083F               	movf	?___ftsub+1,w
  8902  097C  00D7               	movwf	tempCalc@steinhart+1
  8903  097D  0840               	movf	?___ftsub+2,w
  8904  097E  00D8               	movwf	tempCalc@steinhart+2
  8905                           
  8906                           ;tempCalc.c: 15: steinhart*=10;
  8907  097F  3000               	movlw	0
  8908  0980  00A1               	movwf	___ftmul@f1
  8909  0981  3020               	movlw	32
  8910  0982  00A2               	movwf	___ftmul@f1+1
  8911  0983  3041               	movlw	65
  8912  0984  00A3               	movwf	___ftmul@f1+2
  8913  0985  0856               	movf	tempCalc@steinhart,w
  8914  0986  00A4               	movwf	___ftmul@f2
  8915  0987  0857               	movf	tempCalc@steinhart+1,w
  8916  0988  00A5               	movwf	___ftmul@f2+1
  8917  0989  0858               	movf	tempCalc@steinhart+2,w
  8918  098A  00A6               	movwf	___ftmul@f2+2
  8919  098B  3197  274C  3188   	fcall	___ftmul
  8920  098E  0020               	movlb	0	; select bank0
  8921  098F  0821               	movf	?___ftmul,w
  8922  0990  00D6               	movwf	tempCalc@steinhart
  8923  0991  0822               	movf	?___ftmul+1,w
  8924  0992  00D7               	movwf	tempCalc@steinhart+1
  8925  0993  0823               	movf	?___ftmul+2,w
  8926  0994  00D8               	movwf	tempCalc@steinhart+2
  8927                           
  8928                           ;tempCalc.c: 18: return (int16_t)steinhart;
  8929  0995  0856               	movf	tempCalc@steinhart,w
  8930  0996  00B1               	movwf	___fttol@f1
  8931  0997  0857               	movf	tempCalc@steinhart+1,w
  8932  0998  00B2               	movwf	___fttol@f1+1
  8933  0999  0858               	movf	tempCalc@steinhart+2,w
  8934  099A  00B3               	movwf	___fttol@f1+2
  8935  099B  3194  24E4         	fcall	___fttol
  8936  099D  0020               	movlb	0	; select bank0
  8937  099E  0832               	movf	?___fttol+1,w
  8938  099F  00CF               	movwf	?_tempCalc+1
  8939  09A0  0831               	movf	?___fttol,w
  8940  09A1  00CE               	movwf	?_tempCalc
  8941  09A2  0008               	return
  8942  09A3                     __end_of_tempCalc:	
  8943                           
  8944                           	psect	text2
  8945  169C                     __ptext2:	
  8946 ;; *************** function _log *****************
  8947 ;; Defined at:
  8948 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\log.c"
  8949 ;; Parameters:    Size  Location     Type
  8950 ;;  x               3   40[BANK0 ] int 
  8951 ;; Auto vars:     Size  Location     Type
  8952 ;;  exponent        2   44[BANK0 ] int 
  8953 ;; Return value:  Size  Location     Type
  8954 ;;                  3   40[BANK0 ] int 
  8955 ;; Registers used:
  8956 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8957 ;; Tracked objects:
  8958 ;;		On entry : 0/0
  8959 ;;		On exit  : 0/0
  8960 ;;		Unchanged: 0/0
  8961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8962 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8964 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8965 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8966 ;;Total ram usage:        6 bytes
  8967 ;; Hardware stack levels used:    1
  8968 ;; Hardware stack levels required when called:    3
  8969 ;; This function calls:
  8970 ;;		___awtoft
  8971 ;;		___ftadd
  8972 ;;		___ftge
  8973 ;;		___ftmul
  8974 ;;		_eval_poly
  8975 ;;		_frexp
  8976 ;; This function is called by:
  8977 ;;		_tempCalc
  8978 ;; This function uses a non-reentrant model
  8979 ;;
  8980                           
  8981                           
  8982                           ;psect for function _log
  8983  169C                     _log:	
  8984                           
  8985                           ;incstack = 0
  8986                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8987  169C  0020               	movlb	0	; select bank0
  8988  169D  0848               	movf	log@x,w
  8989  169E  00B1               	movwf	___ftge@ff1
  8990  169F  0849               	movf	log@x+1,w
  8991  16A0  00B2               	movwf	___ftge@ff1+1
  8992  16A1  084A               	movf	log@x+2,w
  8993  16A2  00B3               	movwf	___ftge@ff1+2
  8994  16A3  3000               	movlw	0
  8995  16A4  00B4               	movwf	___ftge@ff2
  8996  16A5  3000               	movlw	0
  8997  16A6  00B5               	movwf	___ftge@ff2+1
  8998  16A7  3000               	movlw	0
  8999  16A8  00B6               	movwf	___ftge@ff2+2
  9000  16A9  3191  21D7  3196   	fcall	___ftge
  9001  16AC  1803               	btfsc	3,0
  9002  16AD  2EBB               	goto	l2844
  9003  16AE  3021               	movlw	33
  9004  16AF  0021               	movlb	1	; select bank1
  9005  16B0  00C2               	movwf	_errno^(0+128)
  9006  16B1  3000               	movlw	0
  9007  16B2  00C3               	movwf	(_errno^(0+128)+1)
  9008  16B3  3000               	movlw	0
  9009  16B4  0020               	movlb	0	; select bank0
  9010  16B5  00C8               	movwf	?_log
  9011  16B6  3000               	movlw	0
  9012  16B7  00C9               	movwf	?_log+1
  9013  16B8  3000               	movlw	0
  9014  16B9  00CA               	movwf	?_log+2
  9015  16BA  0008               	return
  9016  16BB                     l2844:	
  9017  16BB  0020               	movlb	0	; select bank0
  9018  16BC  084A               	movf	log@x+2,w
  9019  16BD  0449               	iorwf	log@x+1,w
  9020  16BE  0448               	iorwf	log@x,w
  9021  16BF  1D03               	skipz
  9022  16C0  2ECE               	goto	l2850
  9023  16C1  3022               	movlw	34
  9024  16C2  0021               	movlb	1	; select bank1
  9025  16C3  00C2               	movwf	_errno^(0+128)
  9026  16C4  3000               	movlw	0
  9027  16C5  00C3               	movwf	(_errno^(0+128)+1)
  9028  16C6  3000               	movlw	0
  9029  16C7  0020               	movlb	0	; select bank0
  9030  16C8  00C8               	movwf	?_log
  9031  16C9  3000               	movlw	0
  9032  16CA  00C9               	movwf	?_log+1
  9033  16CB  3000               	movlw	0
  9034  16CC  00CA               	movwf	?_log+2
  9035  16CD  0008               	return
  9036  16CE                     l2850:	
  9037  16CE  3000               	movlw	0
  9038  16CF  00B1               	movwf	___ftadd@f1
  9039  16D0  3080               	movlw	128
  9040  16D1  00B2               	movwf	___ftadd@f1+1
  9041  16D2  30BF               	movlw	191
  9042  16D3  00B3               	movwf	___ftadd@f1+2
  9043  16D4  3000               	movlw	0
  9044  16D5  00A1               	movwf	___ftmul@f1
  9045  16D6  3000               	movlw	0
  9046  16D7  00A2               	movwf	___ftmul@f1+1
  9047  16D8  3040               	movlw	64
  9048  16D9  00A3               	movwf	___ftmul@f1+2
  9049  16DA  304C               	movlw	(low (log@exponent| 0))& (0+255)
  9050  16DB  00CB               	movwf	??_log
  9051  16DC  084B               	movf	??_log,w
  9052  16DD  00F3               	movwf	frexp@eptr
  9053  16DE  0848               	movf	log@x,w
  9054  16DF  00F0               	movwf	frexp@value
  9055  16E0  0849               	movf	log@x+1,w
  9056  16E1  00F1               	movwf	frexp@value+1
  9057  16E2  084A               	movf	log@x+2,w
  9058  16E3  00F2               	movwf	frexp@value+2
  9059  16E4  3191  219C  3196   	fcall	_frexp
  9060  16E7  0870               	movf	?_frexp,w
  9061  16E8  0020               	movlb	0	; select bank0
  9062  16E9  00A4               	movwf	___ftmul@f2
  9063  16EA  0871               	movf	?_frexp+1,w
  9064  16EB  00A5               	movwf	___ftmul@f2+1
  9065  16EC  0872               	movf	?_frexp+2,w
  9066  16ED  00A6               	movwf	___ftmul@f2+2
  9067  16EE  3197  274C  3196   	fcall	___ftmul
  9068  16F1  0020               	movlb	0	; select bank0
  9069  16F2  0821               	movf	?___ftmul,w
  9070  16F3  00B4               	movwf	___ftadd@f2
  9071  16F4  0822               	movf	?___ftmul+1,w
  9072  16F5  00B5               	movwf	___ftadd@f2+1
  9073  16F6  0823               	movf	?___ftmul+2,w
  9074  16F7  00B6               	movwf	___ftadd@f2+2
  9075  16F8  3189  21A3  3196   	fcall	___ftadd
  9076  16FB  0020               	movlb	0	; select bank0
  9077  16FC  0831               	movf	?___ftadd,w
  9078  16FD  00C8               	movwf	log@x
  9079  16FE  0832               	movf	?___ftadd+1,w
  9080  16FF  00C9               	movwf	log@x+1
  9081  1700  0833               	movf	?___ftadd+2,w
  9082  1701  00CA               	movwf	log@x+2
  9083  1702  30FF               	movlw	255
  9084  1703  07CC               	addwf	log@exponent,f
  9085  1704  30FF               	movlw	255
  9086  1705  3DCD               	addwfc	log@exponent+1,f
  9087  1706  0848               	movf	log@x,w
  9088  1707  00BE               	movwf	eval_poly@x
  9089  1708  0849               	movf	log@x+1,w
  9090  1709  00BF               	movwf	eval_poly@x+1
  9091  170A  084A               	movf	log@x+2,w
  9092  170B  00C0               	movwf	eval_poly@x+2
  9093  170C  302F               	movlw	low (log@coeff| (0+32768))
  9094  170D  00C1               	movwf	eval_poly@d
  9095  170E  3091               	movlw	high (log@coeff| (0+32768))
  9096  170F  00C2               	movwf	eval_poly@d+1
  9097  1710  3008               	movlw	8
  9098  1711  00C3               	movwf	eval_poly@n
  9099  1712  3000               	movlw	0
  9100  1713  00C4               	movwf	eval_poly@n+1
  9101  1714  3193  233A  3196   	fcall	_eval_poly
  9102  1717  0020               	movlb	0	; select bank0
  9103  1718  083E               	movf	?_eval_poly,w
  9104  1719  00C8               	movwf	log@x
  9105  171A  083F               	movf	?_eval_poly+1,w
  9106  171B  00C9               	movwf	log@x+1
  9107  171C  0840               	movf	?_eval_poly+2,w
  9108  171D  00CA               	movwf	log@x+2
  9109  171E  0848               	movf	log@x,w
  9110  171F  00B1               	movwf	___ftadd@f1
  9111  1720  0849               	movf	log@x+1,w
  9112  1721  00B2               	movwf	___ftadd@f1+1
  9113  1722  084A               	movf	log@x+2,w
  9114  1723  00B3               	movwf	___ftadd@f1+2
  9115  1724  3072               	movlw	114
  9116  1725  00A1               	movwf	___ftmul@f1
  9117  1726  3031               	movlw	49
  9118  1727  00A2               	movwf	___ftmul@f1+1
  9119  1728  303F               	movlw	63
  9120  1729  00A3               	movwf	___ftmul@f1+2
  9121  172A  084D               	movf	log@exponent+1,w
  9122  172B  00FA               	movwf	___awtoft@c+1
  9123  172C  084C               	movf	log@exponent,w
  9124  172D  00F9               	movwf	___awtoft@c
  9125  172E  319F  2710  3196   	fcall	___awtoft
  9126  1731  0879               	movf	?___awtoft,w
  9127  1732  0020               	movlb	0	; select bank0
  9128  1733  00A4               	movwf	___ftmul@f2
  9129  1734  087A               	movf	?___awtoft+1,w
  9130  1735  00A5               	movwf	___ftmul@f2+1
  9131  1736  087B               	movf	?___awtoft+2,w
  9132  1737  00A6               	movwf	___ftmul@f2+2
  9133  1738  3197  274C  3196   	fcall	___ftmul
  9134  173B  0020               	movlb	0	; select bank0
  9135  173C  0821               	movf	?___ftmul,w
  9136  173D  00B4               	movwf	___ftadd@f2
  9137  173E  0822               	movf	?___ftmul+1,w
  9138  173F  00B5               	movwf	___ftadd@f2+1
  9139  1740  0823               	movf	?___ftmul+2,w
  9140  1741  00B6               	movwf	___ftadd@f2+2
  9141  1742  3189  21A3         	fcall	___ftadd
  9142  1744  0020               	movlb	0	; select bank0
  9143  1745  0831               	movf	?___ftadd,w
  9144  1746  00C8               	movwf	?_log
  9145  1747  0832               	movf	?___ftadd+1,w
  9146  1748  00C9               	movwf	?_log+1
  9147  1749  0833               	movf	?___ftadd+2,w
  9148  174A  00CA               	movwf	?_log+2
  9149  174B  0008               	return
  9150  174C                     __end_of_log:	
  9151                           
  9152                           	psect	text3
  9153  119C                     __ptext3:	
  9154 ;; *************** function _frexp *****************
  9155 ;; Defined at:
  9156 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\frexp.c"
  9157 ;; Parameters:    Size  Location     Type
  9158 ;;  value           3    0[COMMON] int 
  9159 ;;  eptr            1    3[COMMON] PTR int 
  9160 ;;		 -> log@exponent(2), 
  9161 ;; Auto vars:     Size  Location     Type
  9162 ;;		None
  9163 ;; Return value:  Size  Location     Type
  9164 ;;                  3    0[COMMON] PTR int 
  9165 ;; Registers used:
  9166 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9167 ;; Tracked objects:
  9168 ;;		On entry : 0/0
  9169 ;;		On exit  : 0/0
  9170 ;;		Unchanged: 0/0
  9171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9172 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9174 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9175 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9176 ;;Total ram usage:        6 bytes
  9177 ;; Hardware stack levels used:    1
  9178 ;; This function calls:
  9179 ;;		Nothing
  9180 ;; This function is called by:
  9181 ;;		_log
  9182 ;; This function uses a non-reentrant model
  9183 ;;
  9184                           
  9185                           
  9186                           ;psect for function _frexp
  9187  119C                     _frexp:	
  9188                           
  9189                           ;incstack = 0
  9190                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  9191  119C  0872               	movf	frexp@value+2,w
  9192  119D  0471               	iorwf	frexp@value+1,w
  9193  119E  0470               	iorwf	frexp@value,w
  9194  119F  1D03               	skipz
  9195  11A0  29AE               	goto	l2640
  9196  11A1  0873               	movf	frexp@eptr,w
  9197  11A2  0086               	movwf	6
  9198  11A3  0187               	clrf	7
  9199  11A4  3000               	movlw	0
  9200  11A5  3FC0               	movwi [0]fsr1
  9201  11A6  3FC1               	movwi [1]fsr1
  9202  11A7  3000               	movlw	0
  9203  11A8  00F0               	movwf	?_frexp
  9204  11A9  3000               	movlw	0
  9205  11AA  00F1               	movwf	?_frexp+1
  9206  11AB  3000               	movlw	0
  9207  11AC  00F2               	movwf	?_frexp+2
  9208  11AD  0008               	return
  9209  11AE                     l2640:	
  9210  11AE  0872               	movf	frexp@value+2,w
  9211  11AF  397F               	andlw	127
  9212  11B0  00F4               	movwf	??_frexp
  9213  11B1  01F5               	clrf	??_frexp+1
  9214  11B2  35F4               	lslf	??_frexp,f
  9215  11B3  0DF5               	rlf	??_frexp+1,f
  9216  11B4  0873               	movf	frexp@eptr,w
  9217  11B5  0086               	movwf	6
  9218  11B6  0187               	clrf	7
  9219  11B7  0874               	movf	??_frexp,w
  9220  11B8  3FC0               	movwi [0]fsr1
  9221  11B9  0875               	movf	??_frexp+1,w
  9222  11BA  3FC1               	movwi [1]fsr1
  9223  11BB  0D71               	rlf	frexp@value+1,w
  9224  11BC  0D71               	rlf	frexp@value+1,w
  9225  11BD  3901               	andlw	1
  9226  11BE  00F4               	movwf	??_frexp
  9227  11BF  01F5               	clrf	??_frexp+1
  9228  11C0  0873               	movf	frexp@eptr,w
  9229  11C1  0086               	movwf	6
  9230  11C2  0187               	clrf	7
  9231  11C3  0874               	movf	??_frexp,w
  9232  11C4  0481               	iorwf	1,f
  9233  11C5  3141               	addfsr 1,1
  9234  11C6  0875               	movf	??_frexp+1,w
  9235  11C7  0481               	iorwf	1,f
  9236  11C8  0873               	movf	frexp@eptr,w
  9237  11C9  0086               	movwf	6
  9238  11CA  0187               	clrf	7
  9239  11CB  3082               	movlw	130
  9240  11CC  0781               	addwf	1,f
  9241  11CD  3141               	addfsr 1,1
  9242  11CE  30FF               	movlw	255
  9243  11CF  3D81               	addwfc	1,f
  9244  11D0  317F               	addfsr 1,-1
  9245  11D1  0872               	movf	frexp@value+2,w
  9246  11D2  3980               	andlw	-128
  9247  11D3  383F               	iorlw	63
  9248  11D4  00F2               	movwf	frexp@value+2
  9249  11D5  13F1               	bcf	frexp@value+1,7
  9250  11D6  0008               	return
  9251  11D7                     __end_of_frexp:	
  9252                           
  9253                           	psect	text4
  9254  133A                     __ptext4:	
  9255 ;; *************** function _eval_poly *****************
  9256 ;; Defined at:
  9257 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\evalpoly.c"
  9258 ;; Parameters:    Size  Location     Type
  9259 ;;  x               3   30[BANK0 ] PTR int 
  9260 ;;  d               2   33[BANK0 ] PTR const 
  9261 ;;		 -> log@coeff(27), 
  9262 ;;  n               2   35[BANK0 ] int 
  9263 ;; Auto vars:     Size  Location     Type
  9264 ;;  res             3   37[BANK0 ] int 
  9265 ;; Return value:  Size  Location     Type
  9266 ;;                  3   30[BANK0 ] int 
  9267 ;; Registers used:
  9268 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9269 ;; Tracked objects:
  9270 ;;		On entry : 0/0
  9271 ;;		On exit  : 0/0
  9272 ;;		Unchanged: 0/0
  9273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9274 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9275 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9277 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9278 ;;Total ram usage:       10 bytes
  9279 ;; Hardware stack levels used:    1
  9280 ;; Hardware stack levels required when called:    2
  9281 ;; This function calls:
  9282 ;;		___ftadd
  9283 ;;		___ftmul
  9284 ;;		___wmul
  9285 ;; This function is called by:
  9286 ;;		_log
  9287 ;; This function uses a non-reentrant model
  9288 ;;
  9289                           
  9290                           
  9291                           ;psect for function _eval_poly
  9292  133A                     _eval_poly:	
  9293                           
  9294                           ;incstack = 0
  9295                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9296  133A  0020               	movlb	0	; select bank0
  9297  133B  0844               	movf	eval_poly@n+1,w
  9298  133C  00F1               	movwf	___wmul@multiplier+1
  9299  133D  0843               	movf	eval_poly@n,w
  9300  133E  00F0               	movwf	___wmul@multiplier
  9301  133F  3003               	movlw	3
  9302  1340  00F2               	movwf	___wmul@multiplicand
  9303  1341  3000               	movlw	0
  9304  1342  00F3               	movwf	___wmul@multiplicand+1
  9305  1343  319E  2699  3193   	fcall	___wmul
  9306  1346  0020               	movlb	0	; select bank0
  9307  1347  0841               	movf	eval_poly@d,w
  9308  1348  0770               	addwf	?___wmul,w
  9309  1349  0084               	movwf	4
  9310  134A  0842               	movf	eval_poly@d+1,w
  9311  134B  3D71               	addwfc	?___wmul+1,w
  9312  134C  0085               	movwf	5
  9313  134D  3F00               	moviw [0]fsr0
  9314  134E  00C5               	movwf	eval_poly@res
  9315  134F  3F01               	moviw [1]fsr0
  9316  1350  00C6               	movwf	eval_poly@res+1
  9317  1351  3F02               	moviw [2]fsr0
  9318  1352                     L6:	
  9319  1352  00C7               	movwf	eval_poly@res+2
  9320  1353  0843               	movf	eval_poly@n,w
  9321  1354  0444               	iorwf	eval_poly@n+1,w
  9322  1355  1903               	btfsc	3,2
  9323  1356  2B93               	goto	l2658
  9324  1357  30FF               	movlw	255
  9325  1358  07C3               	addwf	eval_poly@n,f
  9326  1359  30FF               	movlw	255
  9327  135A  3DC4               	addwfc	eval_poly@n+1,f
  9328  135B  0844               	movf	eval_poly@n+1,w
  9329  135C  00F1               	movwf	___wmul@multiplier+1
  9330  135D  0843               	movf	eval_poly@n,w
  9331  135E  00F0               	movwf	___wmul@multiplier
  9332  135F  3003               	movlw	3
  9333  1360  00F2               	movwf	___wmul@multiplicand
  9334  1361  3000               	movlw	0
  9335  1362  00F3               	movwf	___wmul@multiplicand+1
  9336  1363  319E  2699  3193   	fcall	___wmul
  9337  1366  0020               	movlb	0	; select bank0
  9338  1367  0841               	movf	eval_poly@d,w
  9339  1368  0770               	addwf	?___wmul,w
  9340  1369  0084               	movwf	4
  9341  136A  0842               	movf	eval_poly@d+1,w
  9342  136B  3D71               	addwfc	?___wmul+1,w
  9343  136C  0085               	movwf	5
  9344  136D  3F00               	moviw [0]fsr0
  9345  136E  00B1               	movwf	___ftadd@f1
  9346  136F  3F01               	moviw [1]fsr0
  9347  1370  00B2               	movwf	___ftadd@f1+1
  9348  1371  3F02               	moviw [2]fsr0
  9349  1372  00B3               	movwf	___ftadd@f1+2
  9350  1373  0845               	movf	eval_poly@res,w
  9351  1374  00A1               	movwf	___ftmul@f1
  9352  1375  0846               	movf	eval_poly@res+1,w
  9353  1376  00A2               	movwf	___ftmul@f1+1
  9354  1377  0847               	movf	eval_poly@res+2,w
  9355  1378  00A3               	movwf	___ftmul@f1+2
  9356  1379  083E               	movf	eval_poly@x,w
  9357  137A  00A4               	movwf	___ftmul@f2
  9358  137B  083F               	movf	eval_poly@x+1,w
  9359  137C  00A5               	movwf	___ftmul@f2+1
  9360  137D  0840               	movf	eval_poly@x+2,w
  9361  137E  00A6               	movwf	___ftmul@f2+2
  9362  137F  3197  274C  3193   	fcall	___ftmul
  9363  1382  0020               	movlb	0	; select bank0
  9364  1383  0821               	movf	?___ftmul,w
  9365  1384  00B4               	movwf	___ftadd@f2
  9366  1385  0822               	movf	?___ftmul+1,w
  9367  1386  00B5               	movwf	___ftadd@f2+1
  9368  1387  0823               	movf	?___ftmul+2,w
  9369  1388  00B6               	movwf	___ftadd@f2+2
  9370  1389  3189  21A3  3193   	fcall	___ftadd
  9371  138C  0020               	movlb	0	; select bank0
  9372  138D  0831               	movf	?___ftadd,w
  9373  138E  00C5               	movwf	eval_poly@res
  9374  138F  0832               	movf	?___ftadd+1,w
  9375  1390  00C6               	movwf	eval_poly@res+1
  9376  1391  0833               	movf	?___ftadd+2,w
  9377  1392  2B52               	goto	L6
  9378  1393                     l2658:	
  9379  1393  0845               	movf	eval_poly@res,w
  9380  1394  00BE               	movwf	?_eval_poly
  9381  1395  0846               	movf	eval_poly@res+1,w
  9382  1396  00BF               	movwf	?_eval_poly+1
  9383  1397  0847               	movf	eval_poly@res+2,w
  9384  1398  00C0               	movwf	?_eval_poly+2
  9385  1399  0008               	return
  9386  139A                     __end_of_eval_poly:	
  9387                           
  9388                           	psect	text5
  9389  11D7                     __ptext5:	
  9390 ;; *************** function ___ftge *****************
  9391 ;; Defined at:
  9392 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
  9393 ;; Parameters:    Size  Location     Type
  9394 ;;  ff1             3   17[BANK0 ] float 
  9395 ;;  ff2             3   20[BANK0 ] float 
  9396 ;; Auto vars:     Size  Location     Type
  9397 ;;		None
  9398 ;; Return value:  Size  Location     Type
  9399 ;;		None               void
  9400 ;; Registers used:
  9401 ;;		wreg, status,2, status,0
  9402 ;; Tracked objects:
  9403 ;;		On entry : 0/0
  9404 ;;		On exit  : 0/0
  9405 ;;		Unchanged: 0/0
  9406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9407 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9409 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9410 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9411 ;;Total ram usage:        9 bytes
  9412 ;; Hardware stack levels used:    1
  9413 ;; This function calls:
  9414 ;;		Nothing
  9415 ;; This function is called by:
  9416 ;;		_main
  9417 ;;		_log
  9418 ;; This function uses a non-reentrant model
  9419 ;;
  9420                           
  9421                           
  9422                           ;psect for function ___ftge
  9423  11D7                     ___ftge:	
  9424                           
  9425                           ;incstack = 0
  9426                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  9427  11D7  0020               	movlb	0	; select bank0
  9428  11D8  1FB3               	btfss	___ftge@ff1+2,7
  9429  11D9  29EE               	goto	l2574
  9430  11DA  0931               	comf	___ftge@ff1,w
  9431  11DB  00B7               	movwf	??___ftge
  9432  11DC  0932               	comf	___ftge@ff1+1,w
  9433  11DD  00B8               	movwf	??___ftge+1
  9434  11DE  0933               	comf	___ftge@ff1+2,w
  9435  11DF  00B9               	movwf	??___ftge+2
  9436  11E0  0AB7               	incf	??___ftge,f
  9437  11E1  1903               	skipnz
  9438  11E2  0AB8               	incf	??___ftge+1,f
  9439  11E3  1903               	skipnz
  9440  11E4  0AB9               	incf	??___ftge+2,f
  9441  11E5  3000               	movlw	0
  9442  11E6  0737               	addwf	??___ftge,w
  9443  11E7  00B1               	movwf	___ftge@ff1
  9444  11E8  3000               	movlw	0
  9445  11E9  3D38               	addwfc	??___ftge+1,w
  9446  11EA  00B2               	movwf	___ftge@ff1+1
  9447  11EB  3080               	movlw	128
  9448  11EC  3D39               	addwfc	??___ftge+2,w
  9449  11ED  00B3               	movwf	___ftge@ff1+2
  9450  11EE                     l2574:	
  9451  11EE  1FB6               	btfss	___ftge@ff2+2,7
  9452  11EF  2A04               	goto	l2578
  9453  11F0  0934               	comf	___ftge@ff2,w
  9454  11F1  00B7               	movwf	??___ftge
  9455  11F2  0935               	comf	___ftge@ff2+1,w
  9456  11F3  00B8               	movwf	??___ftge+1
  9457  11F4  0936               	comf	___ftge@ff2+2,w
  9458  11F5  00B9               	movwf	??___ftge+2
  9459  11F6  0AB7               	incf	??___ftge,f
  9460  11F7  1903               	skipnz
  9461  11F8  0AB8               	incf	??___ftge+1,f
  9462  11F9  1903               	skipnz
  9463  11FA  0AB9               	incf	??___ftge+2,f
  9464  11FB  3000               	movlw	0
  9465  11FC  0737               	addwf	??___ftge,w
  9466  11FD  00B4               	movwf	___ftge@ff2
  9467  11FE  3000               	movlw	0
  9468  11FF  3D38               	addwfc	??___ftge+1,w
  9469  1200  00B5               	movwf	___ftge@ff2+1
  9470  1201  3080               	movlw	128
  9471  1202  3D39               	addwfc	??___ftge+2,w
  9472  1203  00B6               	movwf	___ftge@ff2+2
  9473  1204                     l2578:	
  9474  1204  3080               	movlw	128
  9475  1205  06B3               	xorwf	___ftge@ff1+2,f
  9476  1206  3080               	movlw	128
  9477  1207  06B6               	xorwf	___ftge@ff2+2,f
  9478  1208  0836               	movf	___ftge@ff2+2,w
  9479  1209  0233               	subwf	___ftge@ff1+2,w
  9480  120A  1D03               	skipz
  9481  120B  0008               	return
  9482  120C  0835               	movf	___ftge@ff2+1,w
  9483  120D  0232               	subwf	___ftge@ff1+1,w
  9484  120E  1D03               	skipz
  9485  120F  0008               	return
  9486  1210  0834               	movf	___ftge@ff2,w
  9487  1211  0231               	subwf	___ftge@ff1,w
  9488  1212  0008               	return
  9489  1213                     __end_of___ftge:	
  9490                           
  9491                           	psect	text6
  9492  1EB4                     __ptext6:	
  9493 ;; *************** function ___ftsub *****************
  9494 ;; Defined at:
  9495 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
  9496 ;; Parameters:    Size  Location     Type
  9497 ;;  f2              3   30[BANK0 ] float 
  9498 ;;  f1              3   33[BANK0 ] float 
  9499 ;; Auto vars:     Size  Location     Type
  9500 ;;		None
  9501 ;; Return value:  Size  Location     Type
  9502 ;;                  3   30[BANK0 ] float 
  9503 ;; Registers used:
  9504 ;;		wreg, status,2, status,0, pclath, cstack
  9505 ;; Tracked objects:
  9506 ;;		On entry : 0/0
  9507 ;;		On exit  : 0/0
  9508 ;;		Unchanged: 0/0
  9509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9510 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9513 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9514 ;;Total ram usage:        6 bytes
  9515 ;; Hardware stack levels used:    1
  9516 ;; Hardware stack levels required when called:    2
  9517 ;; This function calls:
  9518 ;;		___ftadd
  9519 ;; This function is called by:
  9520 ;;		_tempCalc
  9521 ;; This function uses a non-reentrant model
  9522 ;;
  9523                           
  9524                           
  9525                           ;psect for function ___ftsub
  9526  1EB4                     ___ftsub:	
  9527                           
  9528                           ;incstack = 0
  9529                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9530  1EB4  0020               	movlb	0	; select bank0
  9531  1EB5  0840               	movf	___ftsub@f2+2,w
  9532  1EB6  043F               	iorwf	___ftsub@f2+1,w
  9533  1EB7  043E               	iorwf	___ftsub@f2,w
  9534  1EB8  1903               	skipnz
  9535  1EB9  2EBC               	goto	l3004
  9536  1EBA  3080               	movlw	128
  9537  1EBB  06C0               	xorwf	___ftsub@f2+2,f
  9538  1EBC                     l3004:	
  9539  1EBC  0841               	movf	___ftsub@f1,w
  9540  1EBD  00B1               	movwf	___ftadd@f1
  9541  1EBE  0842               	movf	___ftsub@f1+1,w
  9542  1EBF  00B2               	movwf	___ftadd@f1+1
  9543  1EC0  0843               	movf	___ftsub@f1+2,w
  9544  1EC1  00B3               	movwf	___ftadd@f1+2
  9545  1EC2  083E               	movf	___ftsub@f2,w
  9546  1EC3  00B4               	movwf	___ftadd@f2
  9547  1EC4  083F               	movf	___ftsub@f2+1,w
  9548  1EC5  00B5               	movwf	___ftadd@f2+1
  9549  1EC6  0840               	movf	___ftsub@f2+2,w
  9550  1EC7  00B6               	movwf	___ftadd@f2+2
  9551  1EC8  3189  21A3         	fcall	___ftadd
  9552  1ECA  0020               	movlb	0	; select bank0
  9553  1ECB  0831               	movf	?___ftadd,w
  9554  1ECC  00BE               	movwf	?___ftsub
  9555  1ECD  0832               	movf	?___ftadd+1,w
  9556  1ECE  00BF               	movwf	?___ftsub+1
  9557  1ECF  0833               	movf	?___ftadd+2,w
  9558  1ED0  00C0               	movwf	?___ftsub+2
  9559  1ED1  0008               	return
  9560  1ED2                     __end_of___ftsub:	
  9561                           
  9562                           	psect	text7
  9563  09A3                     __ptext7:	
  9564 ;; *************** function ___ftadd *****************
  9565 ;; Defined at:
  9566 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
  9567 ;; Parameters:    Size  Location     Type
  9568 ;;  f1              3   17[BANK0 ] float 
  9569 ;;  f2              3   20[BANK0 ] float 
  9570 ;; Auto vars:     Size  Location     Type
  9571 ;;  exp1            1   29[BANK0 ] unsigned char 
  9572 ;;  exp2            1   28[BANK0 ] unsigned char 
  9573 ;;  sign            1   27[BANK0 ] unsigned char 
  9574 ;; Return value:  Size  Location     Type
  9575 ;;                  3   17[BANK0 ] float 
  9576 ;; Registers used:
  9577 ;;		wreg, status,2, status,0, pclath, cstack
  9578 ;; Tracked objects:
  9579 ;;		On entry : 0/0
  9580 ;;		On exit  : 0/0
  9581 ;;		Unchanged: 0/0
  9582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9583 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9584 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9585 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9586 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9587 ;;Total ram usage:       13 bytes
  9588 ;; Hardware stack levels used:    1
  9589 ;; Hardware stack levels required when called:    1
  9590 ;; This function calls:
  9591 ;;		___ftpack
  9592 ;; This function is called by:
  9593 ;;		_tempCalc
  9594 ;;		___ftsub
  9595 ;;		_log
  9596 ;;		_eval_poly
  9597 ;; This function uses a non-reentrant model
  9598 ;;
  9599                           
  9600                           
  9601                           ;psect for function ___ftadd
  9602  09A3                     ___ftadd:	
  9603                           
  9604                           ;incstack = 0
  9605                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9606  09A3  0020               	movlb	0	; select bank0
  9607  09A4  0831               	movf	___ftadd@f1,w
  9608  09A5  00B7               	movwf	??___ftadd
  9609  09A6  0832               	movf	___ftadd@f1+1,w
  9610  09A7  00B8               	movwf	??___ftadd+1
  9611  09A8  0833               	movf	___ftadd@f1+2,w
  9612  09A9  00B9               	movwf	??___ftadd+2
  9613  09AA  1003               	clrc
  9614  09AB  0D38               	rlf	??___ftadd+1,w
  9615  09AC  0D39               	rlf	??___ftadd+2,w
  9616  09AD  00BA               	movwf	??___ftadd+3
  9617  09AE  083A               	movf	??___ftadd+3,w
  9618  09AF  00BD               	movwf	___ftadd@exp1
  9619  09B0  0834               	movf	___ftadd@f2,w
  9620  09B1  00B7               	movwf	??___ftadd
  9621  09B2  0835               	movf	___ftadd@f2+1,w
  9622  09B3  00B8               	movwf	??___ftadd+1
  9623  09B4  0836               	movf	___ftadd@f2+2,w
  9624  09B5  00B9               	movwf	??___ftadd+2
  9625  09B6  1003               	clrc
  9626  09B7  0D38               	rlf	??___ftadd+1,w
  9627  09B8  0D39               	rlf	??___ftadd+2,w
  9628  09B9  00BA               	movwf	??___ftadd+3
  9629  09BA  083A               	movf	??___ftadd+3,w
  9630  09BB  00BC               	movwf	___ftadd@exp2
  9631  09BC  083D               	movf	___ftadd@exp1,w
  9632  09BD  1903               	btfsc	3,2
  9633  09BE  29CB               	goto	l2442
  9634  09BF  083C               	movf	___ftadd@exp2,w
  9635  09C0  023D               	subwf	___ftadd@exp1,w
  9636  09C1  1803               	skipnc
  9637  09C2  29D2               	goto	l2446
  9638  09C3  033D               	decf	___ftadd@exp1,w
  9639  09C4  3AFF               	xorlw	255
  9640  09C5  073C               	addwf	___ftadd@exp2,w
  9641  09C6  00B7               	movwf	??___ftadd
  9642  09C7  3019               	movlw	25
  9643  09C8  0237               	subwf	??___ftadd,w
  9644  09C9  1C03               	skipc
  9645  09CA  29D2               	goto	l2446
  9646  09CB                     l2442:	
  9647  09CB  0834               	movf	___ftadd@f2,w
  9648  09CC  00B1               	movwf	?___ftadd
  9649  09CD  0835               	movf	___ftadd@f2+1,w
  9650  09CE  00B2               	movwf	?___ftadd+1
  9651  09CF  0836               	movf	___ftadd@f2+2,w
  9652  09D0  00B3               	movwf	?___ftadd+2
  9653  09D1  0008               	return
  9654  09D2                     l2446:	
  9655  09D2  083C               	movf	___ftadd@exp2,w
  9656  09D3  1903               	btfsc	3,2
  9657  09D4  0008               	return
  9658  09D5  083D               	movf	___ftadd@exp1,w
  9659  09D6  023C               	subwf	___ftadd@exp2,w
  9660  09D7  1803               	skipnc
  9661  09D8  29E1               	goto	l2452
  9662  09D9  033C               	decf	___ftadd@exp2,w
  9663  09DA  3AFF               	xorlw	255
  9664  09DB  073D               	addwf	___ftadd@exp1,w
  9665  09DC  00B7               	movwf	??___ftadd
  9666  09DD  3019               	movlw	25
  9667  09DE  0237               	subwf	??___ftadd,w
  9668  09DF  1803               	btfsc	3,0
  9669  09E0  0008               	return
  9670  09E1                     l2452:	
  9671  09E1  3006               	movlw	6
  9672  09E2  00B7               	movwf	??___ftadd
  9673  09E3  0837               	movf	??___ftadd,w
  9674  09E4  00BB               	movwf	___ftadd@sign
  9675  09E5  1BB3               	btfsc	___ftadd@f1+2,7
  9676  09E6  17BB               	bsf	___ftadd@sign,7
  9677  09E7  1BB6               	btfsc	___ftadd@f2+2,7
  9678  09E8  173B               	bsf	___ftadd@sign,6
  9679  09E9  17B2               	bsf	___ftadd@f1+1,7
  9680  09EA  30FF               	movlw	255
  9681  09EB  05B1               	andwf	___ftadd@f1,f
  9682  09EC  30FF               	movlw	255
  9683  09ED  05B2               	andwf	___ftadd@f1+1,f
  9684  09EE  3000               	movlw	0
  9685  09EF  05B3               	andwf	___ftadd@f1+2,f
  9686  09F0  17B5               	bsf	___ftadd@f2+1,7
  9687  09F1  30FF               	movlw	255
  9688  09F2  05B4               	andwf	___ftadd@f2,f
  9689  09F3  30FF               	movlw	255
  9690  09F4  05B5               	andwf	___ftadd@f2+1,f
  9691  09F5  3000               	movlw	0
  9692  09F6  05B6               	andwf	___ftadd@f2+2,f
  9693  09F7  083C               	movf	___ftadd@exp2,w
  9694  09F8  023D               	subwf	___ftadd@exp1,w
  9695  09F9  1803               	skipnc
  9696  09FA  2A1D               	goto	l2474
  9697  09FB                     l2464:	
  9698  09FB  3001               	movlw	1
  9699  09FC                     u2555:	
  9700  09FC  35B4               	lslf	___ftadd@f2,f
  9701  09FD  0DB5               	rlf	___ftadd@f2+1,f
  9702  09FE  0DB6               	rlf	___ftadd@f2+2,f
  9703  09FF  0B89               	decfsz	9,f
  9704  0A00  29FC               	goto	u2555
  9705  0A01  3001               	movlw	1
  9706  0A02  02BC               	subwf	___ftadd@exp2,f
  9707  0A03  083C               	movf	___ftadd@exp2,w
  9708  0A04  063D               	xorwf	___ftadd@exp1,w
  9709  0A05  1903               	skipnz
  9710  0A06  2A18               	goto	l2472
  9711  0A07  3001               	movlw	1
  9712  0A08  02BB               	subwf	___ftadd@sign,f
  9713  0A09  083B               	movf	___ftadd@sign,w
  9714  0A0A  3907               	andlw	7
  9715  0A0B  1903               	btfsc	3,2
  9716  0A0C  2A18               	goto	l2472
  9717  0A0D  29FB               	goto	l2464
  9718  0A0E                     l2470:	
  9719  0A0E  3001               	movlw	1
  9720  0A0F                     u2585:	
  9721  0A0F  36B3               	lsrf	___ftadd@f1+2,f
  9722  0A10  0CB2               	rrf	___ftadd@f1+1,f
  9723  0A11  0CB1               	rrf	___ftadd@f1,f
  9724  0A12  0B89               	decfsz	9,f
  9725  0A13  2A0F               	goto	u2585
  9726  0A14  3001               	movlw	1
  9727  0A15  00B7               	movwf	??___ftadd
  9728  0A16  0837               	movf	??___ftadd,w
  9729  0A17  07BD               	addwf	___ftadd@exp1,f
  9730  0A18                     l2472:	
  9731  0A18  083D               	movf	___ftadd@exp1,w
  9732  0A19  063C               	xorwf	___ftadd@exp2,w
  9733  0A1A  1903               	btfsc	3,2
  9734  0A1B  2A42               	goto	l816
  9735  0A1C  2A0E               	goto	l2470
  9736  0A1D                     l2474:	
  9737  0A1D  083D               	movf	___ftadd@exp1,w
  9738  0A1E  023C               	subwf	___ftadd@exp2,w
  9739  0A1F  1803               	skipnc
  9740  0A20  2A42               	goto	l816
  9741  0A21                     l2476:	
  9742  0A21  3001               	movlw	1
  9743  0A22                     u2615:	
  9744  0A22  35B1               	lslf	___ftadd@f1,f
  9745  0A23  0DB2               	rlf	___ftadd@f1+1,f
  9746  0A24  0DB3               	rlf	___ftadd@f1+2,f
  9747  0A25  0B89               	decfsz	9,f
  9748  0A26  2A22               	goto	u2615
  9749  0A27  3001               	movlw	1
  9750  0A28  02BD               	subwf	___ftadd@exp1,f
  9751  0A29  083C               	movf	___ftadd@exp2,w
  9752  0A2A  063D               	xorwf	___ftadd@exp1,w
  9753  0A2B  1903               	skipnz
  9754  0A2C  2A3E               	goto	l2484
  9755  0A2D  3001               	movlw	1
  9756  0A2E  02BB               	subwf	___ftadd@sign,f
  9757  0A2F  083B               	movf	___ftadd@sign,w
  9758  0A30  3907               	andlw	7
  9759  0A31  1903               	btfsc	3,2
  9760  0A32  2A3E               	goto	l2484
  9761  0A33  2A21               	goto	l2476
  9762  0A34                     l2482:	
  9763  0A34  3001               	movlw	1
  9764  0A35                     u2645:	
  9765  0A35  36B6               	lsrf	___ftadd@f2+2,f
  9766  0A36  0CB5               	rrf	___ftadd@f2+1,f
  9767  0A37  0CB4               	rrf	___ftadd@f2,f
  9768  0A38  0B89               	decfsz	9,f
  9769  0A39  2A35               	goto	u2645
  9770  0A3A  3001               	movlw	1
  9771  0A3B  00B7               	movwf	??___ftadd
  9772  0A3C  0837               	movf	??___ftadd,w
  9773  0A3D  07BC               	addwf	___ftadd@exp2,f
  9774  0A3E                     l2484:	
  9775  0A3E  083D               	movf	___ftadd@exp1,w
  9776  0A3F  063C               	xorwf	___ftadd@exp2,w
  9777  0A40  1D03               	skipz
  9778  0A41  2A34               	goto	l2482
  9779  0A42                     l816:	
  9780  0A42  1FBB               	btfss	___ftadd@sign,7
  9781  0A43  2A54               	goto	l2488
  9782  0A44  30FF               	movlw	255
  9783  0A45  06B1               	xorwf	___ftadd@f1,f
  9784  0A46  30FF               	movlw	255
  9785  0A47  06B2               	xorwf	___ftadd@f1+1,f
  9786  0A48  30FF               	movlw	255
  9787  0A49  06B3               	xorwf	___ftadd@f1+2,f
  9788  0A4A  3001               	movlw	1
  9789  0A4B  07B1               	addwf	___ftadd@f1,f
  9790  0A4C  3000               	movlw	0
  9791  0A4D  1803               	skipnc
  9792  0A4E  3001               	movlw	1
  9793  0A4F  07B2               	addwf	___ftadd@f1+1,f
  9794  0A50  3000               	movlw	0
  9795  0A51  1803               	skipnc
  9796  0A52  3001               	movlw	1
  9797  0A53  07B3               	addwf	___ftadd@f1+2,f
  9798  0A54                     l2488:	
  9799  0A54  1F3B               	btfss	___ftadd@sign,6
  9800  0A55  2A66               	goto	l2492
  9801  0A56  30FF               	movlw	255
  9802  0A57  06B4               	xorwf	___ftadd@f2,f
  9803  0A58  30FF               	movlw	255
  9804  0A59  06B5               	xorwf	___ftadd@f2+1,f
  9805  0A5A  30FF               	movlw	255
  9806  0A5B  06B6               	xorwf	___ftadd@f2+2,f
  9807  0A5C  3001               	movlw	1
  9808  0A5D  07B4               	addwf	___ftadd@f2,f
  9809  0A5E  3000               	movlw	0
  9810  0A5F  1803               	skipnc
  9811  0A60  3001               	movlw	1
  9812  0A61  07B5               	addwf	___ftadd@f2+1,f
  9813  0A62  3000               	movlw	0
  9814  0A63  1803               	skipnc
  9815  0A64  3001               	movlw	1
  9816  0A65  07B6               	addwf	___ftadd@f2+2,f
  9817  0A66                     l2492:	
  9818  0A66  01BB               	clrf	___ftadd@sign
  9819  0A67  0831               	movf	___ftadd@f1,w
  9820  0A68  07B4               	addwf	___ftadd@f2,f
  9821  0A69  0832               	movf	___ftadd@f1+1,w
  9822  0A6A  3DB5               	addwfc	___ftadd@f2+1,f
  9823  0A6B  0833               	movf	___ftadd@f1+2,w
  9824  0A6C  3DB6               	addwfc	___ftadd@f2+2,f
  9825  0A6D  1FB6               	btfss	___ftadd@f2+2,7
  9826  0A6E  2A81               	goto	l2502
  9827  0A6F  30FF               	movlw	255
  9828  0A70  06B4               	xorwf	___ftadd@f2,f
  9829  0A71  30FF               	movlw	255
  9830  0A72  06B5               	xorwf	___ftadd@f2+1,f
  9831  0A73  30FF               	movlw	255
  9832  0A74  06B6               	xorwf	___ftadd@f2+2,f
  9833  0A75  3001               	movlw	1
  9834  0A76  07B4               	addwf	___ftadd@f2,f
  9835  0A77  3000               	movlw	0
  9836  0A78  1803               	skipnc
  9837  0A79  3001               	movlw	1
  9838  0A7A  07B5               	addwf	___ftadd@f2+1,f
  9839  0A7B  3000               	movlw	0
  9840  0A7C  1803               	skipnc
  9841  0A7D  3001               	movlw	1
  9842  0A7E  07B6               	addwf	___ftadd@f2+2,f
  9843  0A7F  01BB               	clrf	___ftadd@sign
  9844  0A80  0ABB               	incf	___ftadd@sign,f
  9845  0A81                     l2502:	
  9846  0A81  0834               	movf	___ftadd@f2,w
  9847  0A82  00F0               	movwf	___ftpack@arg
  9848  0A83  0835               	movf	___ftadd@f2+1,w
  9849  0A84  00F1               	movwf	___ftpack@arg+1
  9850  0A85  0836               	movf	___ftadd@f2+2,w
  9851  0A86  00F2               	movwf	___ftpack@arg+2
  9852  0A87  083D               	movf	___ftadd@exp1,w
  9853  0A88  00B7               	movwf	??___ftadd
  9854  0A89  0837               	movf	??___ftadd,w
  9855  0A8A  00F3               	movwf	___ftpack@exp
  9856  0A8B  083B               	movf	___ftadd@sign,w
  9857  0A8C  00B8               	movwf	??___ftadd+1
  9858  0A8D  0838               	movf	??___ftadd+1,w
  9859  0A8E  00F4               	movwf	___ftpack@sign
  9860  0A8F  3193  239A         	fcall	___ftpack
  9861  0A91  0870               	movf	?___ftpack,w
  9862  0A92  0020               	movlb	0	; select bank0
  9863  0A93  00B1               	movwf	?___ftadd
  9864  0A94  0871               	movf	?___ftpack+1,w
  9865  0A95  00B2               	movwf	?___ftadd+1
  9866  0A96  0872               	movf	?___ftpack+2,w
  9867  0A97  00B3               	movwf	?___ftadd+2
  9868  0A98  0008               	return
  9869  0A99                     __end_of___ftadd:	
  9870                           
  9871                           	psect	text8
  9872  0A99                     __ptext8:	
  9873 ;; *************** function _readVAnalog *****************
  9874 ;; Defined at:
  9875 ;;		line 103 in file "adc.c"
  9876 ;; Parameters:    Size  Location     Type
  9877 ;;  channel         2    6[BANK0 ] unsigned int 
  9878 ;; Auto vars:     Size  Location     Type
  9879 ;;  value           2   11[COMMON] int 
  9880 ;;  analog_chann    2    9[COMMON] unsigned int 
  9881 ;; Return value:  Size  Location     Type
  9882 ;;                  2    6[BANK0 ] int 
  9883 ;; Registers used:
  9884 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9885 ;; Tracked objects:
  9886 ;;		On entry : 0/0
  9887 ;;		On exit  : 0/0
  9888 ;;		Unchanged: 0/0
  9889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9890 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9891 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9892 ;;      Temps:          0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9893 ;;      Totals:         4      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9894 ;;Total ram usage:       21 bytes
  9895 ;; Hardware stack levels used:    1
  9896 ;; Hardware stack levels required when called:    1
  9897 ;; This function calls:
  9898 ;;		_ADCRead
  9899 ;;		___aldiv
  9900 ;;		___bmul
  9901 ;; This function is called by:
  9902 ;;		_main
  9903 ;; This function uses a non-reentrant model
  9904 ;;
  9905                           
  9906                           
  9907                           ;psect for function _readVAnalog
  9908  0A99                     _readVAnalog:	
  9909                           
  9910                           ;adc.c: 105: int16_t value;
  9911                           ;adc.c: 107: uint16_t analog_channel = Vchannels[channel];
  9912                           
  9913                           ;incstack = 0
  9914                           ; Regs used in _readVAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9915  0A99  0020               	movlb	0	; select bank0
  9916  0A9A  3526               	lslf	readVAnalog@channel,w
  9917  0A9B  3E61               	addlw	(low (_Vchannels| (0+256)))& (0+255)
  9918  0A9C  0086               	movwf	6
  9919  0A9D  3001               	movlw	1	; select bank2/3
  9920  0A9E  0087               	movwf	7
  9921  0A9F  3F40               	moviw [0]fsr1
  9922  0AA0  00F9               	movwf	readVAnalog@analog_channel
  9923  0AA1  3F41               	moviw [1]fsr1
  9924  0AA2  00FA               	movwf	readVAnalog@analog_channel+1
  9925                           
  9926                           ;adc.c: 109: value = ADCRead(analog_channel);
  9927  0AA3  0879               	movf	readVAnalog@analog_channel,w
  9928  0AA4  319E  2658  318A   	fcall	_ADCRead
  9929  0AA7  0871               	movf	?_ADCRead+1,w
  9930  0AA8  00FC               	movwf	readVAnalog@value+1
  9931  0AA9  0870               	movf	?_ADCRead,w
  9932  0AAA  00FB               	movwf	readVAnalog@value
  9933                           
  9934                           ;adc.c: 111: Vtotals[channel] = Vtotals[channel]-Vsamples[channel][VsampleIndex];
  9935  0AAB  0020               	movlb	0	; select bank0
  9936  0AAC  0826               	movf	readVAnalog@channel,w
  9937  0AAD  00A8               	movwf	??_readVAnalog
  9938  0AAE  3001               	movlw	1
  9939  0AAF                     u3495:	
  9940  0AAF  35A8               	lslf	??_readVAnalog,f
  9941  0AB0  3EFF               	addlw	-1
  9942  0AB1  1D03               	skipz
  9943  0AB2  2AAF               	goto	u3495
  9944  0AB3  3528               	lslf	??_readVAnalog,w
  9945  0AB4  3E30               	addlw	(low (_Vtotals| (0+256)))& (0+255)
  9946  0AB5  0086               	movwf	6
  9947  0AB6  3001               	movlw	1	; select bank2/3
  9948  0AB7  0087               	movwf	7
  9949  0AB8  3F40               	moviw [0]fsr1
  9950  0AB9  00A9               	movwf	??_readVAnalog+1
  9951  0ABA  3F41               	moviw [1]fsr1
  9952  0ABB  00AA               	movwf	??_readVAnalog+2
  9953  0ABC  3F42               	moviw [2]fsr1
  9954  0ABD  00AB               	movwf	??_readVAnalog+3
  9955  0ABE  3F43               	moviw [3]fsr1
  9956  0ABF  00AC               	movwf	??_readVAnalog+4
  9957  0AC0  0021               	movlb	1	; select bank1
  9958  0AC1  083E               	movf	_VsampleIndex^(0+128),w
  9959  0AC2  0020               	movlb	0	; select bank0
  9960  0AC3  00AD               	movwf	??_readVAnalog+5
  9961  0AC4  3001               	movlw	1
  9962  0AC5                     u3505:	
  9963  0AC5  35AD               	lslf	??_readVAnalog+5,f
  9964  0AC6  0B89               	decfsz	9,f
  9965  0AC7  2AC5               	goto	u3505
  9966  0AC8  300A               	movlw	10
  9967  0AC9  00AE               	movwf	??_readVAnalog+6
  9968  0ACA  082E               	movf	??_readVAnalog+6,w
  9969  0ACB  00F0               	movwf	___bmul@multiplicand
  9970  0ACC  0826               	movf	readVAnalog@channel,w
  9971  0ACD  319E  2634  318A   	fcall	___bmul
  9972  0AD0  3EA0               	addlw	(low (_Vsamples| (0+256)))& (0+255)
  9973  0AD1  0020               	movlb	0	; select bank0
  9974  0AD2  072D               	addwf	??_readVAnalog+5,w
  9975  0AD3  00AF               	movwf	??_readVAnalog+7
  9976  0AD4  082F               	movf	??_readVAnalog+7,w
  9977  0AD5  0086               	movwf	6
  9978  0AD6  3001               	movlw	1	; select bank3/4
  9979  0AD7  0087               	movwf	7
  9980  0AD8  3F40               	moviw [0]fsr1
  9981  0AD9  00B0               	movwf	??_readVAnalog+8
  9982  0ADA  3F41               	moviw [1]fsr1
  9983  0ADB  00B1               	movwf	??_readVAnalog+9
  9984  0ADC  0830               	movf	??_readVAnalog+8,w
  9985  0ADD  00B2               	movwf	??_readVAnalog+10
  9986  0ADE  0831               	movf	??_readVAnalog+9,w
  9987  0ADF  00B3               	movwf	??_readVAnalog+11
  9988  0AE0  3000               	movlw	0
  9989  0AE1  1BB3               	btfsc	??_readVAnalog+11,7
  9990  0AE2  30FF               	movlw	255
  9991  0AE3  00B4               	movwf	??_readVAnalog+12
  9992  0AE4  00B5               	movwf	??_readVAnalog+13
  9993  0AE5  09B2               	comf	??_readVAnalog+10,f
  9994  0AE6  09B3               	comf	??_readVAnalog+11,f
  9995  0AE7  09B4               	comf	??_readVAnalog+12,f
  9996  0AE8  09B5               	comf	??_readVAnalog+13,f
  9997  0AE9  0AB2               	incf	??_readVAnalog+10,f
  9998  0AEA  1903               	skipnz
  9999  0AEB  0AB3               	incf	??_readVAnalog+11,f
 10000  0AEC  1903               	skipnz
 10001  0AED  0AB4               	incf	??_readVAnalog+12,f
 10002  0AEE  1903               	skipnz
 10003  0AEF  0AB5               	incf	??_readVAnalog+13,f
 10004  0AF0  0832               	movf	??_readVAnalog+10,w
 10005  0AF1  07A9               	addwf	??_readVAnalog+1,f
 10006  0AF2  0833               	movf	??_readVAnalog+11,w
 10007  0AF3  3DAA               	addwfc	??_readVAnalog+2,f
 10008  0AF4  0834               	movf	??_readVAnalog+12,w
 10009  0AF5  3DAB               	addwfc	??_readVAnalog+3,f
 10010  0AF6  0835               	movf	??_readVAnalog+13,w
 10011  0AF7  3DAC               	addwfc	??_readVAnalog+4,f
 10012  0AF8  0826               	movf	readVAnalog@channel,w
 10013  0AF9  00B6               	movwf	??_readVAnalog+14
 10014  0AFA  3001               	movlw	1
 10015  0AFB                     u3515:	
 10016  0AFB  35B6               	lslf	??_readVAnalog+14,f
 10017  0AFC  3EFF               	addlw	-1
 10018  0AFD  1D03               	skipz
 10019  0AFE  2AFB               	goto	u3515
 10020  0AFF  3536               	lslf	??_readVAnalog+14,w
 10021  0B00  3E30               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10022  0B01  0086               	movwf	6
 10023  0B02  3001               	movlw	1	; select bank2/3
 10024  0B03  0087               	movwf	7
 10025  0B04  0829               	movf	??_readVAnalog+1,w
 10026  0B05  3FC0               	movwi [0]fsr1
 10027  0B06  082A               	movf	??_readVAnalog+2,w
 10028  0B07  3FC1               	movwi [1]fsr1
 10029  0B08  082B               	movf	??_readVAnalog+3,w
 10030  0B09  3FC2               	movwi [2]fsr1
 10031  0B0A  082C               	movf	??_readVAnalog+4,w
 10032  0B0B  3FC3               	movwi [3]fsr1
 10033                           
 10034                           ;adc.c: 113: Vsamples[channel][VsampleIndex] = value;
 10035  0B0C  0021               	movlb	1	; select bank1
 10036  0B0D  083E               	movf	_VsampleIndex^(0+128),w
 10037  0B0E  0020               	movlb	0	; select bank0
 10038  0B0F  00A8               	movwf	??_readVAnalog
 10039  0B10  3001               	movlw	1
 10040  0B11                     u3525:	
 10041  0B11  35A8               	lslf	??_readVAnalog,f
 10042  0B12  0B89               	decfsz	9,f
 10043  0B13  2B11               	goto	u3525
 10044  0B14  300A               	movlw	10
 10045  0B15  00A9               	movwf	??_readVAnalog+1
 10046  0B16  0829               	movf	??_readVAnalog+1,w
 10047  0B17  00F0               	movwf	___bmul@multiplicand
 10048  0B18  0826               	movf	readVAnalog@channel,w
 10049  0B19  319E  2634  318A   	fcall	___bmul
 10050  0B1C  3EA0               	addlw	(low (_Vsamples| (0+256)))& (0+255)
 10051  0B1D  0020               	movlb	0	; select bank0
 10052  0B1E  0728               	addwf	??_readVAnalog,w
 10053  0B1F  00AA               	movwf	??_readVAnalog+2
 10054  0B20  082A               	movf	??_readVAnalog+2,w
 10055  0B21  0086               	movwf	6
 10056  0B22  3001               	movlw	1	; select bank3/4
 10057  0B23  0087               	movwf	7
 10058  0B24  087B               	movf	readVAnalog@value,w
 10059  0B25  3FC0               	movwi [0]fsr1
 10060  0B26  087C               	movf	readVAnalog@value+1,w
 10061  0B27  3FC1               	movwi [1]fsr1
 10062                           
 10063                           ;adc.c: 115: Vtotals[channel] = Vtotals[channel]+Vsamples[channel][VsampleIndex];
 10064  0B28  0826               	movf	readVAnalog@channel,w
 10065  0B29  00A8               	movwf	??_readVAnalog
 10066  0B2A  3001               	movlw	1
 10067  0B2B                     u3535:	
 10068  0B2B  35A8               	lslf	??_readVAnalog,f
 10069  0B2C  3EFF               	addlw	-1
 10070  0B2D  1D03               	skipz
 10071  0B2E  2B2B               	goto	u3535
 10072  0B2F  3528               	lslf	??_readVAnalog,w
 10073  0B30  3E30               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10074  0B31  0086               	movwf	6
 10075  0B32  3001               	movlw	1	; select bank2/3
 10076  0B33  0087               	movwf	7
 10077  0B34  3F40               	moviw [0]fsr1
 10078  0B35  00A9               	movwf	??_readVAnalog+1
 10079  0B36  3F41               	moviw [1]fsr1
 10080  0B37  00AA               	movwf	??_readVAnalog+2
 10081  0B38  3F42               	moviw [2]fsr1
 10082  0B39  00AB               	movwf	??_readVAnalog+3
 10083  0B3A  3F43               	moviw [3]fsr1
 10084  0B3B  00AC               	movwf	??_readVAnalog+4
 10085  0B3C  0021               	movlb	1	; select bank1
 10086  0B3D  083E               	movf	_VsampleIndex^(0+128),w
 10087  0B3E  0020               	movlb	0	; select bank0
 10088  0B3F  00AD               	movwf	??_readVAnalog+5
 10089  0B40  3001               	movlw	1
 10090  0B41                     u3545:	
 10091  0B41  35AD               	lslf	??_readVAnalog+5,f
 10092  0B42  0B89               	decfsz	9,f
 10093  0B43  2B41               	goto	u3545
 10094  0B44  300A               	movlw	10
 10095  0B45  00AE               	movwf	??_readVAnalog+6
 10096  0B46  082E               	movf	??_readVAnalog+6,w
 10097  0B47  00F0               	movwf	___bmul@multiplicand
 10098  0B48  0826               	movf	readVAnalog@channel,w
 10099  0B49  319E  2634  318A   	fcall	___bmul
 10100  0B4C  3EA0               	addlw	(low (_Vsamples| (0+256)))& (0+255)
 10101  0B4D  0020               	movlb	0	; select bank0
 10102  0B4E  072D               	addwf	??_readVAnalog+5,w
 10103  0B4F  00AF               	movwf	??_readVAnalog+7
 10104  0B50  082F               	movf	??_readVAnalog+7,w
 10105  0B51  0086               	movwf	6
 10106  0B52  3001               	movlw	1	; select bank3/4
 10107  0B53  0087               	movwf	7
 10108  0B54  3F40               	moviw [0]fsr1
 10109  0B55  00B0               	movwf	??_readVAnalog+8
 10110  0B56  3F41               	moviw [1]fsr1
 10111  0B57  00B1               	movwf	??_readVAnalog+9
 10112  0B58  0830               	movf	??_readVAnalog+8,w
 10113  0B59  00B2               	movwf	??_readVAnalog+10
 10114  0B5A  0831               	movf	??_readVAnalog+9,w
 10115  0B5B  00B3               	movwf	??_readVAnalog+11
 10116  0B5C  3000               	movlw	0
 10117  0B5D  1BB3               	btfsc	??_readVAnalog+11,7
 10118  0B5E  30FF               	movlw	255
 10119  0B5F  00B4               	movwf	??_readVAnalog+12
 10120  0B60  00B5               	movwf	??_readVAnalog+13
 10121  0B61  0832               	movf	??_readVAnalog+10,w
 10122  0B62  07A9               	addwf	??_readVAnalog+1,f
 10123  0B63  0833               	movf	??_readVAnalog+11,w
 10124  0B64  3DAA               	addwfc	??_readVAnalog+2,f
 10125  0B65  0834               	movf	??_readVAnalog+12,w
 10126  0B66  3DAB               	addwfc	??_readVAnalog+3,f
 10127  0B67  0835               	movf	??_readVAnalog+13,w
 10128  0B68  3DAC               	addwfc	??_readVAnalog+4,f
 10129  0B69  0826               	movf	readVAnalog@channel,w
 10130  0B6A  00B6               	movwf	??_readVAnalog+14
 10131  0B6B  3001               	movlw	1
 10132  0B6C                     u3555:	
 10133  0B6C  35B6               	lslf	??_readVAnalog+14,f
 10134  0B6D  3EFF               	addlw	-1
 10135  0B6E  1D03               	skipz
 10136  0B6F  2B6C               	goto	u3555
 10137  0B70  3536               	lslf	??_readVAnalog+14,w
 10138  0B71  3E30               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10139  0B72  0086               	movwf	6
 10140  0B73  3001               	movlw	1	; select bank2/3
 10141  0B74  0087               	movwf	7
 10142  0B75  0829               	movf	??_readVAnalog+1,w
 10143  0B76  3FC0               	movwi [0]fsr1
 10144  0B77  082A               	movf	??_readVAnalog+2,w
 10145  0B78  3FC1               	movwi [1]fsr1
 10146  0B79  082B               	movf	??_readVAnalog+3,w
 10147  0B7A  3FC2               	movwi [2]fsr1
 10148  0B7B  082C               	movf	??_readVAnalog+4,w
 10149  0B7C  3FC3               	movwi [3]fsr1
 10150                           
 10151                           ;adc.c: 117: if(channel>=(4-1))
 10152  0B7D  3000               	movlw	0
 10153  0B7E  0227               	subwf	readVAnalog@channel+1,w
 10154  0B7F  3003               	movlw	3
 10155  0B80  1903               	skipnz
 10156  0B81  0226               	subwf	readVAnalog@channel,w
 10157  0B82  1C03               	skipc
 10158  0B83  2B92               	goto	l3064
 10159                           
 10160                           ;adc.c: 118: {
 10161                           ;adc.c: 119: VsampleIndex+=1;
 10162  0B84  3001               	movlw	1
 10163  0B85  0021               	movlb	1	; select bank1
 10164  0B86  07BE               	addwf	_VsampleIndex^(0+128),f
 10165  0B87  3000               	movlw	0
 10166  0B88  3DBF               	addwfc	(_VsampleIndex+1)^(0+128),f
 10167                           
 10168                           ;adc.c: 120: if(VsampleIndex >= 5)VsampleIndex = 0;
 10169  0B89  3000               	movlw	0
 10170  0B8A  023F               	subwf	(_VsampleIndex+1)^(0+128),w
 10171  0B8B  3005               	movlw	5
 10172  0B8C  1903               	skipnz
 10173  0B8D  023E               	subwf	_VsampleIndex^(0+128),w
 10174  0B8E  1C03               	skipc
 10175  0B8F  2B92               	goto	l3064
 10176  0B90  01BE               	clrf	_VsampleIndex^(0+128)
 10177  0B91  01BF               	clrf	(_VsampleIndex+1)^(0+128)
 10178  0B92                     l3064:	
 10179                           
 10180                           ;adc.c: 121: }
 10181                           ;adc.c: 123: value = Vtotals[channel]/5;
 10182  0B92  3000               	movlw	0
 10183  0B93  00F3               	movwf	___aldiv@divisor+3
 10184  0B94  3000               	movlw	0
 10185  0B95  00F2               	movwf	___aldiv@divisor+2
 10186  0B96  3000               	movlw	0
 10187  0B97  00F1               	movwf	___aldiv@divisor+1
 10188  0B98  3005               	movlw	5
 10189  0B99  00F0               	movwf	___aldiv@divisor
 10190  0B9A  0020               	movlb	0	; select bank0
 10191  0B9B  0826               	movf	readVAnalog@channel,w
 10192  0B9C  00A8               	movwf	??_readVAnalog
 10193  0B9D  3001               	movlw	1
 10194  0B9E                     u3585:	
 10195  0B9E  35A8               	lslf	??_readVAnalog,f
 10196  0B9F  3EFF               	addlw	-1
 10197  0BA0  1D03               	skipz
 10198  0BA1  2B9E               	goto	u3585
 10199  0BA2  3528               	lslf	??_readVAnalog,w
 10200  0BA3  3E30               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10201  0BA4  0086               	movwf	6
 10202  0BA5  3001               	movlw	1	; select bank2/3
 10203  0BA6  0087               	movwf	7
 10204  0BA7  3F40               	moviw [0]fsr1
 10205  0BA8  00F4               	movwf	___aldiv@dividend
 10206  0BA9  3F41               	moviw [1]fsr1
 10207  0BAA  00F5               	movwf	___aldiv@dividend+1
 10208  0BAB  3F42               	moviw [2]fsr1
 10209  0BAC  00F6               	movwf	___aldiv@dividend+2
 10210  0BAD  3F43               	moviw [3]fsr1
 10211  0BAE  00F7               	movwf	___aldiv@dividend+3
 10212  0BAF  3194  2462         	fcall	___aldiv
 10213  0BB1  0871               	movf	?___aldiv+1,w
 10214  0BB2  00FC               	movwf	readVAnalog@value+1
 10215  0BB3  0870               	movf	?___aldiv,w
 10216  0BB4  00FB               	movwf	readVAnalog@value
 10217                           
 10218                           ;adc.c: 125: return value;
 10219  0BB5  087C               	movf	readVAnalog@value+1,w
 10220  0BB6  0020               	movlb	0	; select bank0
 10221  0BB7  00A7               	movwf	?_readVAnalog+1
 10222  0BB8  087B               	movf	readVAnalog@value,w
 10223  0BB9  00A6               	movwf	?_readVAnalog
 10224  0BBA  0008               	return
 10225  0BBB                     __end_of_readVAnalog:	
 10226                           
 10227                           	psect	text9
 10228  1E34                     __ptext9:	
 10229 ;; *************** function ___bmul *****************
 10230 ;; Defined at:
 10231 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
 10232 ;; Parameters:    Size  Location     Type
 10233 ;;  multiplier      1    wreg     unsigned char 
 10234 ;;  multiplicand    1    0[COMMON] unsigned char 
 10235 ;; Auto vars:     Size  Location     Type
 10236 ;;  multiplier      1    3[COMMON] unsigned char 
 10237 ;;  product         1    2[COMMON] unsigned char 
 10238 ;; Return value:  Size  Location     Type
 10239 ;;                  1    wreg      unsigned char 
 10240 ;; Registers used:
 10241 ;;		wreg, status,2, status,0
 10242 ;; Tracked objects:
 10243 ;;		On entry : 0/0
 10244 ;;		On exit  : 0/0
 10245 ;;		Unchanged: 0/0
 10246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10247 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10248 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10249 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10250 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10251 ;;Total ram usage:        4 bytes
 10252 ;; Hardware stack levels used:    1
 10253 ;; This function calls:
 10254 ;;		Nothing
 10255 ;; This function is called by:
 10256 ;;		_readVAnalog
 10257 ;; This function uses a non-reentrant model
 10258 ;;
 10259                           
 10260                           
 10261                           ;psect for function ___bmul
 10262  1E34                     ___bmul:	
 10263                           
 10264                           ;incstack = 0
 10265                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 10266                           ;___bmul@multiplier stored from wreg
 10267  1E34  00F3               	movwf	___bmul@multiplier
 10268  1E35  01F2               	clrf	___bmul@product
 10269  1E36                     l2862:	
 10270  1E36  1C73               	btfss	___bmul@multiplier,0
 10271  1E37  2E3C               	goto	l2866
 10272  1E38  0870               	movf	___bmul@multiplicand,w
 10273  1E39  00F1               	movwf	??___bmul
 10274  1E3A  0871               	movf	??___bmul,w
 10275  1E3B  07F2               	addwf	___bmul@product,f
 10276  1E3C                     l2866:	
 10277  1E3C  1003               	clrc
 10278  1E3D  0DF0               	rlf	___bmul@multiplicand,f
 10279  1E3E  1003               	clrc
 10280  1E3F  0CF3               	rrf	___bmul@multiplier,f
 10281  1E40  0873               	movf	___bmul@multiplier,w
 10282  1E41  1D03               	btfss	3,2
 10283  1E42  2E36               	goto	l2862
 10284  1E43  0872               	movf	___bmul@product,w
 10285  1E44  0008               	return
 10286  1E45                     __end_of___bmul:	
 10287                           
 10288                           	psect	text10
 10289  0CFA                     __ptext10:	
 10290 ;; *************** function _readIAnalog *****************
 10291 ;; Defined at:
 10292 ;;		line 77 in file "adc.c"
 10293 ;; Parameters:    Size  Location     Type
 10294 ;;  channel         2    6[BANK0 ] unsigned int 
 10295 ;; Auto vars:     Size  Location     Type
 10296 ;;  value           2   11[COMMON] int 
 10297 ;;  analog_chann    2    9[COMMON] unsigned int 
 10298 ;; Return value:  Size  Location     Type
 10299 ;;                  2    6[BANK0 ] int 
 10300 ;; Registers used:
 10301 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10302 ;; Tracked objects:
 10303 ;;		On entry : 0/0
 10304 ;;		On exit  : 0/0
 10305 ;;		Unchanged: 0/0
 10306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10307 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10308 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10309 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10310 ;;      Totals:         4      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10311 ;;Total ram usage:       24 bytes
 10312 ;; Hardware stack levels used:    1
 10313 ;; Hardware stack levels required when called:    1
 10314 ;; This function calls:
 10315 ;;		_ADCRead
 10316 ;;		___aldiv
 10317 ;;		___wmul
 10318 ;; This function is called by:
 10319 ;;		_main
 10320 ;; This function uses a non-reentrant model
 10321 ;;
 10322                           
 10323                           
 10324                           ;psect for function _readIAnalog
 10325  0CFA                     _readIAnalog:	
 10326                           
 10327                           ;adc.c: 79: int16_t value;
 10328                           ;adc.c: 81: uint16_t analog_channel = Ichannels[channel];
 10329                           
 10330                           ;incstack = 0
 10331                           ; Regs used in _readIAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10332  0CFA  0020               	movlb	0	; select bank0
 10333  0CFB  3526               	lslf	readIAnalog@channel,w
 10334  0CFC  3E59               	addlw	(low (_Ichannels| (0+256)))& (0+255)
 10335  0CFD  0086               	movwf	6
 10336  0CFE  3001               	movlw	1	; select bank2/3
 10337  0CFF  0087               	movwf	7
 10338  0D00  3F40               	moviw [0]fsr1
 10339  0D01  00F9               	movwf	readIAnalog@analog_channel
 10340  0D02  3F41               	moviw [1]fsr1
 10341  0D03  00FA               	movwf	readIAnalog@analog_channel+1
 10342                           
 10343                           ;adc.c: 83: value = ADCRead(analog_channel);
 10344  0D04  0879               	movf	readIAnalog@analog_channel,w
 10345  0D05  319E  2658  318C   	fcall	_ADCRead
 10346  0D08  0871               	movf	?_ADCRead+1,w
 10347  0D09  00FC               	movwf	readIAnalog@value+1
 10348  0D0A  0870               	movf	?_ADCRead,w
 10349  0D0B  00FB               	movwf	readIAnalog@value
 10350                           
 10351                           ;adc.c: 85: Itotals[channel] = Itotals[channel]-Isamples[channel][IsampleIndex];
 10352  0D0C  0020               	movlb	0	; select bank0
 10353  0D0D  0826               	movf	readIAnalog@channel,w
 10354  0D0E  00A8               	movwf	??_readIAnalog
 10355  0D0F  3001               	movlw	1
 10356  0D10                     u3425:	
 10357  0D10  35A8               	lslf	??_readIAnalog,f
 10358  0D11  3EFF               	addlw	-1
 10359  0D12  1D03               	skipz
 10360  0D13  2D10               	goto	u3425
 10361  0D14  3528               	lslf	??_readIAnalog,w
 10362  0D15  3E20               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10363  0D16  0086               	movwf	6
 10364  0D17  3001               	movlw	1	; select bank2/3
 10365  0D18  0087               	movwf	7
 10366  0D19  3F40               	moviw [0]fsr1
 10367  0D1A  00A9               	movwf	??_readIAnalog+1
 10368  0D1B  3F41               	moviw [1]fsr1
 10369  0D1C  00AA               	movwf	??_readIAnalog+2
 10370  0D1D  3F42               	moviw [2]fsr1
 10371  0D1E  00AB               	movwf	??_readIAnalog+3
 10372  0D1F  3F43               	moviw [3]fsr1
 10373  0D20  00AC               	movwf	??_readIAnalog+4
 10374  0D21  0021               	movlb	1	; select bank1
 10375  0D22  083B               	movf	(_IsampleIndex+1)^(0+128),w
 10376  0D23  0020               	movlb	0	; select bank0
 10377  0D24  00AE               	movwf	??_readIAnalog+6
 10378  0D25  0021               	movlb	1	; select bank1
 10379  0D26  083A               	movf	_IsampleIndex^(0+128),w
 10380  0D27  0020               	movlb	0	; select bank0
 10381  0D28  00AD               	movwf	??_readIAnalog+5
 10382  0D29  35AD               	lslf	??_readIAnalog+5,f
 10383  0D2A  0DAE               	rlf	??_readIAnalog+6,f
 10384  0D2B  0827               	movf	readIAnalog@channel+1,w
 10385  0D2C  00F1               	movwf	___wmul@multiplier+1
 10386  0D2D  0826               	movf	readIAnalog@channel,w
 10387  0D2E  00F0               	movwf	___wmul@multiplier
 10388  0D2F  3064               	movlw	100
 10389  0D30  00F2               	movwf	___wmul@multiplicand
 10390  0D31  3000               	movlw	0
 10391  0D32  00F3               	movwf	___wmul@multiplicand+1
 10392  0D33  319E  2699  318C   	fcall	___wmul
 10393  0D36  3060               	movlw	96
 10394  0D37  0020               	movlb	0	; select bank0
 10395  0D38  00AF               	movwf	??_readIAnalog+7
 10396  0D39  3022               	movlw	34
 10397  0D3A  00B0               	movwf	??_readIAnalog+8
 10398  0D3B  0870               	movf	?___wmul,w
 10399  0D3C  072F               	addwf	??_readIAnalog+7,w
 10400  0D3D  00B1               	movwf	??_readIAnalog+9
 10401  0D3E  0871               	movf	?___wmul+1,w
 10402  0D3F  3D30               	addwfc	??_readIAnalog+8,w
 10403  0D40  00B2               	movwf	??_readIAnalog+10
 10404  0D41  082D               	movf	??_readIAnalog+5,w
 10405  0D42  0731               	addwf	??_readIAnalog+9,w
 10406  0D43  0086               	movwf	6
 10407  0D44  082E               	movf	??_readIAnalog+6,w
 10408  0D45  3D32               	addwfc	??_readIAnalog+10,w
 10409  0D46  0087               	movwf	7
 10410  0D47  3F40               	moviw [0]fsr1
 10411  0D48  00B3               	movwf	??_readIAnalog+11
 10412  0D49  3F41               	moviw [1]fsr1
 10413  0D4A  00B4               	movwf	??_readIAnalog+12
 10414  0D4B  0833               	movf	??_readIAnalog+11,w
 10415  0D4C  00B5               	movwf	??_readIAnalog+13
 10416  0D4D  0834               	movf	??_readIAnalog+12,w
 10417  0D4E  00B6               	movwf	??_readIAnalog+14
 10418  0D4F  3000               	movlw	0
 10419  0D50  1BB6               	btfsc	??_readIAnalog+14,7
 10420  0D51  30FF               	movlw	255
 10421  0D52  00B7               	movwf	??_readIAnalog+15
 10422  0D53  00B8               	movwf	??_readIAnalog+16
 10423  0D54  09B5               	comf	??_readIAnalog+13,f
 10424  0D55  09B6               	comf	??_readIAnalog+14,f
 10425  0D56  09B7               	comf	??_readIAnalog+15,f
 10426  0D57  09B8               	comf	??_readIAnalog+16,f
 10427  0D58  0AB5               	incf	??_readIAnalog+13,f
 10428  0D59  1903               	skipnz
 10429  0D5A  0AB6               	incf	??_readIAnalog+14,f
 10430  0D5B  1903               	skipnz
 10431  0D5C  0AB7               	incf	??_readIAnalog+15,f
 10432  0D5D  1903               	skipnz
 10433  0D5E  0AB8               	incf	??_readIAnalog+16,f
 10434  0D5F  0835               	movf	??_readIAnalog+13,w
 10435  0D60  07A9               	addwf	??_readIAnalog+1,f
 10436  0D61  0836               	movf	??_readIAnalog+14,w
 10437  0D62  3DAA               	addwfc	??_readIAnalog+2,f
 10438  0D63  0837               	movf	??_readIAnalog+15,w
 10439  0D64  3DAB               	addwfc	??_readIAnalog+3,f
 10440  0D65  0838               	movf	??_readIAnalog+16,w
 10441  0D66  3DAC               	addwfc	??_readIAnalog+4,f
 10442  0D67  0826               	movf	readIAnalog@channel,w
 10443  0D68  00B9               	movwf	??_readIAnalog+17
 10444  0D69  3001               	movlw	1
 10445  0D6A                     u3435:	
 10446  0D6A  35B9               	lslf	??_readIAnalog+17,f
 10447  0D6B  3EFF               	addlw	-1
 10448  0D6C  1D03               	skipz
 10449  0D6D  2D6A               	goto	u3435
 10450  0D6E  3539               	lslf	??_readIAnalog+17,w
 10451  0D6F  3E20               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10452  0D70  0086               	movwf	6
 10453  0D71  3001               	movlw	1	; select bank2/3
 10454  0D72  0087               	movwf	7
 10455  0D73  0829               	movf	??_readIAnalog+1,w
 10456  0D74  3FC0               	movwi [0]fsr1
 10457  0D75  082A               	movf	??_readIAnalog+2,w
 10458  0D76  3FC1               	movwi [1]fsr1
 10459  0D77  082B               	movf	??_readIAnalog+3,w
 10460  0D78  3FC2               	movwi [2]fsr1
 10461  0D79  082C               	movf	??_readIAnalog+4,w
 10462  0D7A  3FC3               	movwi [3]fsr1
 10463                           
 10464                           ;adc.c: 87: Isamples[channel][IsampleIndex] = value;
 10465  0D7B  0021               	movlb	1	; select bank1
 10466  0D7C  083B               	movf	(_IsampleIndex+1)^(0+128),w
 10467  0D7D  0020               	movlb	0	; select bank0
 10468  0D7E  00A9               	movwf	??_readIAnalog+1
 10469  0D7F  0021               	movlb	1	; select bank1
 10470  0D80  083A               	movf	_IsampleIndex^(0+128),w
 10471  0D81  0020               	movlb	0	; select bank0
 10472  0D82  00A8               	movwf	??_readIAnalog
 10473  0D83  35A8               	lslf	??_readIAnalog,f
 10474  0D84  0DA9               	rlf	??_readIAnalog+1,f
 10475  0D85  0827               	movf	readIAnalog@channel+1,w
 10476  0D86  00F1               	movwf	___wmul@multiplier+1
 10477  0D87  0826               	movf	readIAnalog@channel,w
 10478  0D88  00F0               	movwf	___wmul@multiplier
 10479  0D89  3064               	movlw	100
 10480  0D8A  00F2               	movwf	___wmul@multiplicand
 10481  0D8B  3000               	movlw	0
 10482  0D8C  00F3               	movwf	___wmul@multiplicand+1
 10483  0D8D  319E  2699  318C   	fcall	___wmul
 10484  0D90  3060               	movlw	96
 10485  0D91  0020               	movlb	0	; select bank0
 10486  0D92  00AA               	movwf	??_readIAnalog+2
 10487  0D93  3022               	movlw	34
 10488  0D94  00AB               	movwf	??_readIAnalog+3
 10489  0D95  0870               	movf	?___wmul,w
 10490  0D96  072A               	addwf	??_readIAnalog+2,w
 10491  0D97  00AC               	movwf	??_readIAnalog+4
 10492  0D98  0871               	movf	?___wmul+1,w
 10493  0D99  3D2B               	addwfc	??_readIAnalog+3,w
 10494  0D9A  00AD               	movwf	??_readIAnalog+5
 10495  0D9B  0828               	movf	??_readIAnalog,w
 10496  0D9C  072C               	addwf	??_readIAnalog+4,w
 10497  0D9D  0086               	movwf	6
 10498  0D9E  0829               	movf	??_readIAnalog+1,w
 10499  0D9F  3D2D               	addwfc	??_readIAnalog+5,w
 10500  0DA0  0087               	movwf	7
 10501  0DA1  087B               	movf	readIAnalog@value,w
 10502  0DA2  3FC0               	movwi [0]fsr1
 10503  0DA3  087C               	movf	readIAnalog@value+1,w
 10504  0DA4  3FC1               	movwi [1]fsr1
 10505                           
 10506                           ;adc.c: 89: Itotals[channel] = Itotals[channel]+Isamples[channel][IsampleIndex];
 10507  0DA5  0826               	movf	readIAnalog@channel,w
 10508  0DA6  00A8               	movwf	??_readIAnalog
 10509  0DA7  3001               	movlw	1
 10510  0DA8                     u3445:	
 10511  0DA8  35A8               	lslf	??_readIAnalog,f
 10512  0DA9  3EFF               	addlw	-1
 10513  0DAA  1D03               	skipz
 10514  0DAB  2DA8               	goto	u3445
 10515  0DAC  3528               	lslf	??_readIAnalog,w
 10516  0DAD  3E20               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10517  0DAE  0086               	movwf	6
 10518  0DAF  3001               	movlw	1	; select bank2/3
 10519  0DB0  0087               	movwf	7
 10520  0DB1  3F40               	moviw [0]fsr1
 10521  0DB2  00A9               	movwf	??_readIAnalog+1
 10522  0DB3  3F41               	moviw [1]fsr1
 10523  0DB4  00AA               	movwf	??_readIAnalog+2
 10524  0DB5  3F42               	moviw [2]fsr1
 10525  0DB6  00AB               	movwf	??_readIAnalog+3
 10526  0DB7  3F43               	moviw [3]fsr1
 10527  0DB8  00AC               	movwf	??_readIAnalog+4
 10528  0DB9  0021               	movlb	1	; select bank1
 10529  0DBA  083B               	movf	(_IsampleIndex+1)^(0+128),w
 10530  0DBB  0020               	movlb	0	; select bank0
 10531  0DBC  00AE               	movwf	??_readIAnalog+6
 10532  0DBD  0021               	movlb	1	; select bank1
 10533  0DBE  083A               	movf	_IsampleIndex^(0+128),w
 10534  0DBF  0020               	movlb	0	; select bank0
 10535  0DC0  00AD               	movwf	??_readIAnalog+5
 10536  0DC1  35AD               	lslf	??_readIAnalog+5,f
 10537  0DC2  0DAE               	rlf	??_readIAnalog+6,f
 10538  0DC3  0827               	movf	readIAnalog@channel+1,w
 10539  0DC4  00F1               	movwf	___wmul@multiplier+1
 10540  0DC5  0826               	movf	readIAnalog@channel,w
 10541  0DC6  00F0               	movwf	___wmul@multiplier
 10542  0DC7  3064               	movlw	100
 10543  0DC8  00F2               	movwf	___wmul@multiplicand
 10544  0DC9  3000               	movlw	0
 10545  0DCA  00F3               	movwf	___wmul@multiplicand+1
 10546  0DCB  319E  2699  318C   	fcall	___wmul
 10547  0DCE  3060               	movlw	96
 10548  0DCF  0020               	movlb	0	; select bank0
 10549  0DD0  00AF               	movwf	??_readIAnalog+7
 10550  0DD1  3022               	movlw	34
 10551  0DD2  00B0               	movwf	??_readIAnalog+8
 10552  0DD3  0870               	movf	?___wmul,w
 10553  0DD4  072F               	addwf	??_readIAnalog+7,w
 10554  0DD5  00B1               	movwf	??_readIAnalog+9
 10555  0DD6  0871               	movf	?___wmul+1,w
 10556  0DD7  3D30               	addwfc	??_readIAnalog+8,w
 10557  0DD8  00B2               	movwf	??_readIAnalog+10
 10558  0DD9  082D               	movf	??_readIAnalog+5,w
 10559  0DDA  0731               	addwf	??_readIAnalog+9,w
 10560  0DDB  0086               	movwf	6
 10561  0DDC  082E               	movf	??_readIAnalog+6,w
 10562  0DDD  3D32               	addwfc	??_readIAnalog+10,w
 10563  0DDE  0087               	movwf	7
 10564  0DDF  3F40               	moviw [0]fsr1
 10565  0DE0  00B3               	movwf	??_readIAnalog+11
 10566  0DE1  3F41               	moviw [1]fsr1
 10567  0DE2  00B4               	movwf	??_readIAnalog+12
 10568  0DE3  0833               	movf	??_readIAnalog+11,w
 10569  0DE4  00B5               	movwf	??_readIAnalog+13
 10570  0DE5  0834               	movf	??_readIAnalog+12,w
 10571  0DE6  00B6               	movwf	??_readIAnalog+14
 10572  0DE7  3000               	movlw	0
 10573  0DE8  1BB6               	btfsc	??_readIAnalog+14,7
 10574  0DE9  30FF               	movlw	255
 10575  0DEA  00B7               	movwf	??_readIAnalog+15
 10576  0DEB  00B8               	movwf	??_readIAnalog+16
 10577  0DEC  0835               	movf	??_readIAnalog+13,w
 10578  0DED  07A9               	addwf	??_readIAnalog+1,f
 10579  0DEE  0836               	movf	??_readIAnalog+14,w
 10580  0DEF  3DAA               	addwfc	??_readIAnalog+2,f
 10581  0DF0  0837               	movf	??_readIAnalog+15,w
 10582  0DF1  3DAB               	addwfc	??_readIAnalog+3,f
 10583  0DF2  0838               	movf	??_readIAnalog+16,w
 10584  0DF3  3DAC               	addwfc	??_readIAnalog+4,f
 10585  0DF4  0826               	movf	readIAnalog@channel,w
 10586  0DF5  00B9               	movwf	??_readIAnalog+17
 10587  0DF6  3001               	movlw	1
 10588  0DF7                     u3455:	
 10589  0DF7  35B9               	lslf	??_readIAnalog+17,f
 10590  0DF8  3EFF               	addlw	-1
 10591  0DF9  1D03               	skipz
 10592  0DFA  2DF7               	goto	u3455
 10593  0DFB  3539               	lslf	??_readIAnalog+17,w
 10594  0DFC  3E20               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10595  0DFD  0086               	movwf	6
 10596  0DFE  3001               	movlw	1	; select bank2/3
 10597  0DFF  0087               	movwf	7
 10598  0E00  0829               	movf	??_readIAnalog+1,w
 10599  0E01  3FC0               	movwi [0]fsr1
 10600  0E02  082A               	movf	??_readIAnalog+2,w
 10601  0E03  3FC1               	movwi [1]fsr1
 10602  0E04  082B               	movf	??_readIAnalog+3,w
 10603  0E05  3FC2               	movwi [2]fsr1
 10604  0E06  082C               	movf	??_readIAnalog+4,w
 10605  0E07  3FC3               	movwi [3]fsr1
 10606                           
 10607                           ;adc.c: 91: if(channel>=(4-1))
 10608  0E08  3000               	movlw	0
 10609  0E09  0227               	subwf	readIAnalog@channel+1,w
 10610  0E0A  3003               	movlw	3
 10611  0E0B  1903               	skipnz
 10612  0E0C  0226               	subwf	readIAnalog@channel,w
 10613  0E0D  1C03               	skipc
 10614  0E0E  2E1D               	goto	l3044
 10615                           
 10616                           ;adc.c: 92: {
 10617                           ;adc.c: 93: IsampleIndex+=1;
 10618  0E0F  3001               	movlw	1
 10619  0E10  0021               	movlb	1	; select bank1
 10620  0E11  07BA               	addwf	_IsampleIndex^(0+128),f
 10621  0E12  3000               	movlw	0
 10622  0E13  3DBB               	addwfc	(_IsampleIndex+1)^(0+128),f
 10623                           
 10624                           ;adc.c: 94: if(IsampleIndex >= 50)IsampleIndex = 0;
 10625  0E14  3000               	movlw	0
 10626  0E15  023B               	subwf	(_IsampleIndex+1)^(0+128),w
 10627  0E16  3032               	movlw	50
 10628  0E17  1903               	skipnz
 10629  0E18  023A               	subwf	_IsampleIndex^(0+128),w
 10630  0E19  1C03               	skipc
 10631  0E1A  2E1D               	goto	l3044
 10632  0E1B  01BA               	clrf	_IsampleIndex^(0+128)
 10633  0E1C  01BB               	clrf	(_IsampleIndex+1)^(0+128)
 10634  0E1D                     l3044:	
 10635                           
 10636                           ;adc.c: 95: }
 10637                           ;adc.c: 97: value = Itotals[channel]/50;
 10638  0E1D  3000               	movlw	0
 10639  0E1E  00F3               	movwf	___aldiv@divisor+3
 10640  0E1F  3000               	movlw	0
 10641  0E20  00F2               	movwf	___aldiv@divisor+2
 10642  0E21  3000               	movlw	0
 10643  0E22  00F1               	movwf	___aldiv@divisor+1
 10644  0E23  3032               	movlw	50
 10645  0E24  00F0               	movwf	___aldiv@divisor
 10646  0E25  0020               	movlb	0	; select bank0
 10647  0E26  0826               	movf	readIAnalog@channel,w
 10648  0E27  00A8               	movwf	??_readIAnalog
 10649  0E28  3001               	movlw	1
 10650  0E29                     u3485:	
 10651  0E29  35A8               	lslf	??_readIAnalog,f
 10652  0E2A  3EFF               	addlw	-1
 10653  0E2B  1D03               	skipz
 10654  0E2C  2E29               	goto	u3485
 10655  0E2D  3528               	lslf	??_readIAnalog,w
 10656  0E2E  3E20               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10657  0E2F  0086               	movwf	6
 10658  0E30  3001               	movlw	1	; select bank2/3
 10659  0E31  0087               	movwf	7
 10660  0E32  3F40               	moviw [0]fsr1
 10661  0E33  00F4               	movwf	___aldiv@dividend
 10662  0E34  3F41               	moviw [1]fsr1
 10663  0E35  00F5               	movwf	___aldiv@dividend+1
 10664  0E36  3F42               	moviw [2]fsr1
 10665  0E37  00F6               	movwf	___aldiv@dividend+2
 10666  0E38  3F43               	moviw [3]fsr1
 10667  0E39  00F7               	movwf	___aldiv@dividend+3
 10668  0E3A  3194  2462         	fcall	___aldiv
 10669  0E3C  0871               	movf	?___aldiv+1,w
 10670  0E3D  00FC               	movwf	readIAnalog@value+1
 10671  0E3E  0870               	movf	?___aldiv,w
 10672  0E3F  00FB               	movwf	readIAnalog@value
 10673                           
 10674                           ;adc.c: 99: return value;
 10675  0E40  087C               	movf	readIAnalog@value+1,w
 10676  0E41  0020               	movlb	0	; select bank0
 10677  0E42  00A7               	movwf	?_readIAnalog+1
 10678  0E43  087B               	movf	readIAnalog@value,w
 10679  0E44  00A6               	movwf	?_readIAnalog
 10680  0E45  0008               	return
 10681  0E46                     __end_of_readIAnalog:	
 10682                           
 10683                           	psect	text11
 10684  1462                     __ptext11:	
 10685 ;; *************** function ___aldiv *****************
 10686 ;; Defined at:
 10687 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
 10688 ;; Parameters:    Size  Location     Type
 10689 ;;  divisor         4    0[COMMON] long 
 10690 ;;  dividend        4    4[COMMON] long 
 10691 ;; Auto vars:     Size  Location     Type
 10692 ;;  quotient        4    2[BANK0 ] long 
 10693 ;;  sign            1    1[BANK0 ] unsigned char 
 10694 ;;  counter         1    0[BANK0 ] unsigned char 
 10695 ;; Return value:  Size  Location     Type
 10696 ;;                  4    0[COMMON] long 
 10697 ;; Registers used:
 10698 ;;		wreg, status,2, status,0
 10699 ;; Tracked objects:
 10700 ;;		On entry : 0/0
 10701 ;;		On exit  : 0/0
 10702 ;;		Unchanged: 0/0
 10703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10704 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10705 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10706 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10707 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10708 ;;Total ram usage:       15 bytes
 10709 ;; Hardware stack levels used:    1
 10710 ;; This function calls:
 10711 ;;		Nothing
 10712 ;; This function is called by:
 10713 ;;		_readIAnalog
 10714 ;;		_readVAnalog
 10715 ;; This function uses a non-reentrant model
 10716 ;;
 10717                           
 10718                           
 10719                           ;psect for function ___aldiv
 10720  1462                     ___aldiv:	
 10721                           
 10722                           ;incstack = 0
 10723                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 10724  1462  0020               	movlb	0	; select bank0
 10725  1463  01A1               	clrf	___aldiv@sign
 10726  1464  1FF3               	btfss	___aldiv@divisor+3,7
 10727  1465  2C73               	goto	l679
 10728  1466  09F0               	comf	___aldiv@divisor,f
 10729  1467  09F1               	comf	___aldiv@divisor+1,f
 10730  1468  09F2               	comf	___aldiv@divisor+2,f
 10731  1469  09F3               	comf	___aldiv@divisor+3,f
 10732  146A  0AF0               	incf	___aldiv@divisor,f
 10733  146B  1903               	skipnz
 10734  146C  0AF1               	incf	___aldiv@divisor+1,f
 10735  146D  1903               	skipnz
 10736  146E  0AF2               	incf	___aldiv@divisor+2,f
 10737  146F  1903               	skipnz
 10738  1470  0AF3               	incf	___aldiv@divisor+3,f
 10739  1471  01A1               	clrf	___aldiv@sign
 10740  1472  0AA1               	incf	___aldiv@sign,f
 10741  1473                     l679:	
 10742  1473  1FF7               	btfss	___aldiv@dividend+3,7
 10743  1474  2C84               	goto	l2884
 10744  1475  09F4               	comf	___aldiv@dividend,f
 10745  1476  09F5               	comf	___aldiv@dividend+1,f
 10746  1477  09F6               	comf	___aldiv@dividend+2,f
 10747  1478  09F7               	comf	___aldiv@dividend+3,f
 10748  1479  0AF4               	incf	___aldiv@dividend,f
 10749  147A  1903               	skipnz
 10750  147B  0AF5               	incf	___aldiv@dividend+1,f
 10751  147C  1903               	skipnz
 10752  147D  0AF6               	incf	___aldiv@dividend+2,f
 10753  147E  1903               	skipnz
 10754  147F  0AF7               	incf	___aldiv@dividend+3,f
 10755  1480  3001               	movlw	1
 10756  1481  00F8               	movwf	??___aldiv
 10757  1482  0878               	movf	??___aldiv,w
 10758  1483  06A1               	xorwf	___aldiv@sign,f
 10759  1484                     l2884:	
 10760  1484  3000               	movlw	0
 10761  1485  00A5               	movwf	___aldiv@quotient+3
 10762  1486  3000               	movlw	0
 10763  1487  00A4               	movwf	___aldiv@quotient+2
 10764  1488  3000               	movlw	0
 10765  1489  00A3               	movwf	___aldiv@quotient+1
 10766  148A  3000               	movlw	0
 10767  148B  00A2               	movwf	___aldiv@quotient
 10768  148C  0873               	movf	___aldiv@divisor+3,w
 10769  148D  0472               	iorwf	___aldiv@divisor+2,w
 10770  148E  0471               	iorwf	___aldiv@divisor+1,w
 10771  148F  0470               	iorwf	___aldiv@divisor,w
 10772  1490  1903               	skipnz
 10773  1491  2CCD               	goto	l2906
 10774  1492  01A0               	clrf	___aldiv@counter
 10775  1493  0AA0               	incf	___aldiv@counter,f
 10776  1494                     l2892:	
 10777  1494  1BF3               	btfsc	___aldiv@divisor+3,7
 10778  1495  2CA2               	goto	l2894
 10779  1496  3001               	movlw	1
 10780  1497                     u3105:	
 10781  1497  35F0               	lslf	___aldiv@divisor,f
 10782  1498  0DF1               	rlf	___aldiv@divisor+1,f
 10783  1499  0DF2               	rlf	___aldiv@divisor+2,f
 10784  149A  0DF3               	rlf	___aldiv@divisor+3,f
 10785  149B  0B89               	decfsz	9,f
 10786  149C  2C97               	goto	u3105
 10787  149D  3001               	movlw	1
 10788  149E  00F8               	movwf	??___aldiv
 10789  149F  0878               	movf	??___aldiv,w
 10790  14A0  07A0               	addwf	___aldiv@counter,f
 10791  14A1  2C94               	goto	l2892
 10792  14A2                     l2894:	
 10793  14A2  3001               	movlw	1
 10794  14A3                     u3125:	
 10795  14A3  35A2               	lslf	___aldiv@quotient,f
 10796  14A4  0DA3               	rlf	___aldiv@quotient+1,f
 10797  14A5  0DA4               	rlf	___aldiv@quotient+2,f
 10798  14A6  0DA5               	rlf	___aldiv@quotient+3,f
 10799  14A7  0B89               	decfsz	9,f
 10800  14A8  2CA3               	goto	u3125
 10801  14A9  0873               	movf	___aldiv@divisor+3,w
 10802  14AA  0277               	subwf	___aldiv@dividend+3,w
 10803  14AB  1D03               	skipz
 10804  14AC  2CB7               	goto	u3135
 10805  14AD  0872               	movf	___aldiv@divisor+2,w
 10806  14AE  0276               	subwf	___aldiv@dividend+2,w
 10807  14AF  1D03               	skipz
 10808  14B0  2CB7               	goto	u3135
 10809  14B1  0871               	movf	___aldiv@divisor+1,w
 10810  14B2  0275               	subwf	___aldiv@dividend+1,w
 10811  14B3  1D03               	skipz
 10812  14B4  2CB7               	goto	u3135
 10813  14B5  0870               	movf	___aldiv@divisor,w
 10814  14B6  0274               	subwf	___aldiv@dividend,w
 10815  14B7                     u3135:	
 10816  14B7  1C03               	skipc
 10817  14B8  2CC2               	goto	l2902
 10818  14B9  0870               	movf	___aldiv@divisor,w
 10819  14BA  02F4               	subwf	___aldiv@dividend,f
 10820  14BB  0871               	movf	___aldiv@divisor+1,w
 10821  14BC  3BF5               	subwfb	___aldiv@dividend+1,f
 10822  14BD  0872               	movf	___aldiv@divisor+2,w
 10823  14BE  3BF6               	subwfb	___aldiv@dividend+2,f
 10824  14BF  0873               	movf	___aldiv@divisor+3,w
 10825  14C0  3BF7               	subwfb	___aldiv@dividend+3,f
 10826  14C1  1422               	bsf	___aldiv@quotient,0
 10827  14C2                     l2902:	
 10828  14C2  3001               	movlw	1
 10829  14C3                     u3145:	
 10830  14C3  36F3               	lsrf	___aldiv@divisor+3,f
 10831  14C4  0CF2               	rrf	___aldiv@divisor+2,f
 10832  14C5  0CF1               	rrf	___aldiv@divisor+1,f
 10833  14C6  0CF0               	rrf	___aldiv@divisor,f
 10834  14C7  0B89               	decfsz	9,f
 10835  14C8  2CC3               	goto	u3145
 10836  14C9  3001               	movlw	1
 10837  14CA  02A0               	subwf	___aldiv@counter,f
 10838  14CB  1D03               	btfss	3,2
 10839  14CC  2CA2               	goto	l2894
 10840  14CD                     l2906:	
 10841  14CD  0821               	movf	___aldiv@sign,w
 10842  14CE  1903               	btfsc	3,2
 10843  14CF  2CDB               	goto	l2910
 10844  14D0  09A2               	comf	___aldiv@quotient,f
 10845  14D1  09A3               	comf	___aldiv@quotient+1,f
 10846  14D2  09A4               	comf	___aldiv@quotient+2,f
 10847  14D3  09A5               	comf	___aldiv@quotient+3,f
 10848  14D4  0AA2               	incf	___aldiv@quotient,f
 10849  14D5  1903               	skipnz
 10850  14D6  0AA3               	incf	___aldiv@quotient+1,f
 10851  14D7  1903               	skipnz
 10852  14D8  0AA4               	incf	___aldiv@quotient+2,f
 10853  14D9  1903               	skipnz
 10854  14DA  0AA5               	incf	___aldiv@quotient+3,f
 10855  14DB                     l2910:	
 10856  14DB  0825               	movf	___aldiv@quotient+3,w
 10857  14DC  00F3               	movwf	?___aldiv+3
 10858  14DD  0824               	movf	___aldiv@quotient+2,w
 10859  14DE  00F2               	movwf	?___aldiv+2
 10860  14DF  0823               	movf	___aldiv@quotient+1,w
 10861  14E0  00F1               	movwf	?___aldiv+1
 10862  14E1  0822               	movf	___aldiv@quotient,w
 10863  14E2  00F0               	movwf	?___aldiv
 10864  14E3  0008               	return
 10865  14E4                     __end_of___aldiv:	
 10866                           
 10867                           	psect	text12
 10868  156B                     __ptext12:	
 10869 ;; *************** function _readButton *****************
 10870 ;; Defined at:
 10871 ;;		line 8 in file "buttons.c"
 10872 ;; Parameters:    Size  Location     Type
 10873 ;;		None
 10874 ;; Auto vars:     Size  Location     Type
 10875 ;;		None
 10876 ;; Return value:  Size  Location     Type
 10877 ;;                  1    wreg      unsigned char 
 10878 ;; Registers used:
 10879 ;;		wreg, status,2, status,0, pclath, cstack
 10880 ;; Tracked objects:
 10881 ;;		On entry : 0/0
 10882 ;;		On exit  : 0/0
 10883 ;;		Unchanged: 0/0
 10884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10887 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10888 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10889 ;;Total ram usage:        3 bytes
 10890 ;; Hardware stack levels used:    1
 10891 ;; Hardware stack levels required when called:    1
 10892 ;; This function calls:
 10893 ;;		_ADCRead
 10894 ;; This function is called by:
 10895 ;;		_main
 10896 ;; This function uses a non-reentrant model
 10897 ;;
 10898                           
 10899                           
 10900                           ;psect for function _readButton
 10901  156B                     _readButton:	
 10902                           
 10903                           ;buttons.c: 10: readButtons=ADCRead(11);
 10904                           
 10905                           ;incstack = 0
 10906                           ; Regs used in _readButton: [wreg+status,2+status,0+pclath+cstack]
 10907  156B  300B               	movlw	11
 10908  156C  319E  2658  3195   	fcall	_ADCRead
 10909  156F  0871               	movf	?_ADCRead+1,w
 10910  1570  0020               	movlb	0	; select bank0
 10911  1571  00EB               	movwf	_readButtons+1
 10912  1572  0870               	movf	?_ADCRead,w
 10913  1573  00EA               	movwf	_readButtons
 10914                           
 10915                           ;buttons.c: 12: if(readButtons>=365&&readButtons<405)
 10916  1574  086B               	movf	_readButtons+1,w
 10917  1575  3A80               	xorlw	128
 10918  1576  00F4               	movwf	??_readButton
 10919  1577  3081               	movlw	129
 10920  1578  0274               	subwf	??_readButton,w
 10921  1579  1D03               	skipz
 10922  157A  2D7D               	goto	u3825
 10923  157B  306D               	movlw	109
 10924  157C  026A               	subwf	_readButtons,w
 10925  157D                     u3825:	
 10926  157D  1C03               	skipc
 10927  157E  2D8F               	goto	l3166
 10928  157F  0020               	movlb	0	; select bank0
 10929  1580  086B               	movf	_readButtons+1,w
 10930  1581  3A80               	xorlw	128
 10931  1582  00F4               	movwf	??_readButton
 10932  1583  3081               	movlw	129
 10933  1584  0274               	subwf	??_readButton,w
 10934  1585  1D03               	skipz
 10935  1586  2D89               	goto	u3835
 10936  1587  3095               	movlw	149
 10937  1588  026A               	subwf	_readButtons,w
 10938  1589                     u3835:	
 10939  1589  1803               	skipnc
 10940  158A  2D8F               	goto	l3166
 10941                           
 10942                           ;buttons.c: 13: {
 10943                           ;buttons.c: 14: button=1;
 10944  158B  0020               	movlb	0	; select bank0
 10945  158C  01EC               	clrf	_button
 10946  158D  0AEC               	incf	_button,f
 10947                           
 10948                           ;buttons.c: 15: }
 10949  158E  2DBD               	goto	l3178
 10950  158F                     l3166:	
 10951                           
 10952                           ;buttons.c: 17: else if(readButtons>=535&&readButtons<590)
 10953  158F  0020               	movlb	0	; select bank0
 10954  1590  086B               	movf	_readButtons+1,w
 10955  1591  3A80               	xorlw	128
 10956  1592  00F4               	movwf	??_readButton
 10957  1593  3082               	movlw	130
 10958  1594  0274               	subwf	??_readButton,w
 10959  1595  1D03               	skipz
 10960  1596  2D99               	goto	u3845
 10961  1597  3017               	movlw	23
 10962  1598  026A               	subwf	_readButtons,w
 10963  1599                     u3845:	
 10964  1599  1C03               	skipc
 10965  159A  2DA9               	goto	l3172
 10966  159B  0020               	movlb	0	; select bank0
 10967  159C  086B               	movf	_readButtons+1,w
 10968  159D  3A80               	xorlw	128
 10969  159E  00F4               	movwf	??_readButton
 10970  159F  3082               	movlw	130
 10971  15A0  0274               	subwf	??_readButton,w
 10972  15A1  1D03               	skipz
 10973  15A2  2DA5               	goto	u3855
 10974  15A3  304E               	movlw	78
 10975  15A4  026A               	subwf	_readButtons,w
 10976  15A5                     u3855:	
 10977  15A5  1803               	skipnc
 10978  15A6  2DA9               	goto	l3172
 10979                           
 10980                           ;buttons.c: 18: {
 10981                           ;buttons.c: 19: button=2;
 10982  15A7  3002               	movlw	2
 10983  15A8  2DB6               	goto	L8
 10984  15A9                     l3172:	
 10985                           ;buttons.c: 20: }
 10986                           
 10987                           
 10988                           ;buttons.c: 22: else if(readButtons>745)
 10989  15A9  0020               	movlb	0	; select bank0
 10990  15AA  086B               	movf	_readButtons+1,w
 10991  15AB  3A80               	xorlw	128
 10992  15AC  00F4               	movwf	??_readButton
 10993  15AD  3082               	movlw	130
 10994  15AE  0274               	subwf	??_readButton,w
 10995  15AF  1D03               	skipz
 10996  15B0  2DB3               	goto	u3865
 10997  15B1  30EA               	movlw	234
 10998  15B2  026A               	subwf	_readButtons,w
 10999  15B3                     u3865:	
 11000  15B3  1C03               	skipc
 11001  15B4  2DBB               	goto	l3176
 11002                           
 11003                           ;buttons.c: 23: {
 11004                           ;buttons.c: 24: button=3;
 11005  15B5  3003               	movlw	3
 11006  15B6                     L8:	
 11007  15B6  00F4               	movwf	??_readButton
 11008  15B7  0874               	movf	??_readButton,w
 11009  15B8  0020               	movlb	0	; select bank0
 11010  15B9  00EC               	movwf	_button
 11011                           
 11012                           ;buttons.c: 25: }
 11013  15BA  2DBD               	goto	l3178
 11014  15BB                     l3176:	
 11015                           
 11016                           ;buttons.c: 27: else
 11017                           ;buttons.c: 28: {
 11018                           ;buttons.c: 29: button=0;
 11019  15BB  0020               	movlb	0	; select bank0
 11020  15BC  01EC               	clrf	_button
 11021  15BD                     l3178:	
 11022                           
 11023                           ;buttons.c: 30: }
 11024                           ;buttons.c: 32: if (button!=0)
 11025  15BD  086C               	movf	_button,w
 11026  15BE  1903               	btfsc	3,2
 11027  15BF  2DEF               	goto	l3198
 11028                           
 11029                           ;buttons.c: 33: {
 11030                           ;buttons.c: 34: if (button!=lastButton)
 11031  15C0  086C               	movf	_button,w
 11032  15C1  066D               	xorwf	_lastButton,w
 11033  15C2  1903               	skipnz
 11034  15C3  2DC9               	goto	l3186
 11035                           
 11036                           ;buttons.c: 35: {
 11037                           ;buttons.c: 36: lastButton=button;
 11038  15C4  086C               	movf	_button,w
 11039  15C5  00F4               	movwf	??_readButton
 11040  15C6  0874               	movf	??_readButton,w
 11041  15C7  00ED               	movwf	_lastButton
 11042  15C8  2DEF               	goto	l3198
 11043  15C9                     l3186:	
 11044                           ;buttons.c: 38: }
 11045                           
 11046                           ;buttons.c: 37: j=0;
 11047                           
 11048                           
 11049                           ;buttons.c: 39: else
 11050                           ;buttons.c: 40: {
 11051                           ;buttons.c: 41: j+=1;
 11052  15C9  3001               	movlw	1
 11053  15CA  00F4               	movwf	??_readButton
 11054  15CB  0874               	movf	??_readButton,w
 11055  15CC  0021               	movlb	1	; select bank1
 11056  15CD  07C6               	addwf	_j^(0+128),f
 11057                           
 11058                           ;buttons.c: 43: if(j==1)
 11059  15CE  0346               	decf	_j^(0+128),w
 11060  15CF  1D03               	btfss	3,2
 11061  15D0  2DD4               	goto	l3192
 11062                           
 11063                           ;buttons.c: 44: {
 11064                           ;buttons.c: 45: return (lastButton);
 11065  15D1  0020               	movlb	0	; select bank0
 11066  15D2  086D               	movf	_lastButton,w
 11067  15D3  0008               	return
 11068  15D4                     l3192:	
 11069                           
 11070                           ;buttons.c: 46: }
 11071                           ;buttons.c: 48: if (j>10)
 11072  15D4  0021               	movlb	1	; select bank1
 11073  15D5  0846               	movf	_j^(0+128),w
 11074  15D6  3A80               	xorlw	128
 11075  15D7  3E75               	addlw	-139
 11076  15D8  1C03               	skipc
 11077  15D9  2DF1               	goto	l3200
 11078                           
 11079                           ;buttons.c: 49: {
 11080                           ;buttons.c: 50: _delay((unsigned long)((25)*(32000000/4000.0)));
 11081  15DA  3002               	movlw	2
 11082  15DB  00F6               	movwf	??_readButton+2
 11083  15DC  3004               	movlw	4
 11084  15DD  00F5               	movwf	??_readButton+1
 11085  15DE  30BA               	movlw	186
 11086  15DF  00F4               	movwf	??_readButton
 11087  15E0                     u4527:	
 11088  15E0  0BF4               	decfsz	??_readButton,f
 11089  15E1  2DE0               	goto	u4527
 11090  15E2  0BF5               	decfsz	??_readButton+1,f
 11091  15E3  2DE0               	goto	u4527
 11092  15E4  0BF6               	decfsz	??_readButton+2,f
 11093  15E5  2DE0               	goto	u4527
 11094  15E6  0000               	nop
 11095                           
 11096                           ;buttons.c: 51: j=10;
 11097  15E7  300A               	movlw	10
 11098  15E8  00F4               	movwf	??_readButton
 11099  15E9  0874               	movf	??_readButton,w
 11100  15EA  0021               	movlb	1	; select bank1
 11101  15EB  00C6               	movwf	_j^(0+128)
 11102                           
 11103                           ;buttons.c: 52: return (lastButton);
 11104  15EC  0020               	movlb	0	; select bank0
 11105  15ED  086D               	movf	_lastButton,w
 11106  15EE  0008               	return
 11107  15EF                     l3198:	
 11108                           ;buttons.c: 53: }
 11109                           ;buttons.c: 54: }
 11110                           ;buttons.c: 55: goto end;
 11111                           
 11112                           
 11113                           ;buttons.c: 56: }
 11114                           ;buttons.c: 58: j=0;
 11115  15EF  0021               	movlb	1	; select bank1
 11116  15F0  01C6               	clrf	_j^(0+128)
 11117  15F1                     l3200:	
 11118                           ;buttons.c: 60: end:
 11119                           
 11120                           
 11121                           ;buttons.c: 62: return (0);
 11122  15F1  3000               	movlw	0
 11123  15F2  0008               	return
 11124  15F3                     __end_of_readButton:	
 11125                           
 11126                           	psect	text13
 11127  1E58                     __ptext13:	
 11128 ;; *************** function _ADCRead *****************
 11129 ;; Defined at:
 11130 ;;		line 21 in file "adc.c"
 11131 ;; Parameters:    Size  Location     Type
 11132 ;;  channel         1    wreg     enum E13615
 11133 ;; Auto vars:     Size  Location     Type
 11134 ;;  channel         1    3[COMMON] enum E13615
 11135 ;; Return value:  Size  Location     Type
 11136 ;;                  2    0[COMMON] int 
 11137 ;; Registers used:
 11138 ;;		wreg
 11139 ;; Tracked objects:
 11140 ;;		On entry : 0/0
 11141 ;;		On exit  : 0/0
 11142 ;;		Unchanged: 0/0
 11143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11144 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11145 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11147 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11148 ;;Total ram usage:        4 bytes
 11149 ;; Hardware stack levels used:    1
 11150 ;; This function calls:
 11151 ;;		Nothing
 11152 ;; This function is called by:
 11153 ;;		_readIAnalog
 11154 ;;		_readVAnalog
 11155 ;;		_readButton
 11156 ;;		_main
 11157 ;; This function uses a non-reentrant model
 11158 ;;
 11159                           
 11160                           
 11161                           ;psect for function _ADCRead
 11162  1E58                     _ADCRead:	
 11163                           
 11164                           ;incstack = 0
 11165                           ; Regs used in _ADCRead: [wreg]
 11166                           ;ADCRead@channel stored from wreg
 11167  1E58  00F3               	movwf	ADCRead@channel
 11168                           
 11169                           ;adc.c: 23: ADPCH = channel_VSS;
 11170  1E59  303C               	movlw	60
 11171  1E5A  0021               	movlb	1	; select bank1
 11172  1E5B  009E               	movwf	30	;volatile
 11173                           
 11174                           ;adc.c: 25: ADCON0bits.ADON = 1;
 11175  1E5C  1793               	bsf	19,7	;volatile
 11176                           
 11177                           ;adc.c: 27: ADCON0bits.ADCONT = 0;
 11178  1E5D  1313               	bcf	19,6	;volatile
 11179                           
 11180                           ;adc.c: 29: ADCON0bits.ADGO = 1;
 11181  1E5E  1413               	bsf	19,0	;volatile
 11182  1E5F                     l65:	
 11183                           ;adc.c: 32: {
 11184                           
 11185                           ;adc.c: 31: while(ADCON0bits.ADGO)
 11186                           
 11187  1E5F  1813               	btfsc	19,0	;volatile
 11188  1E60  2E5F               	goto	l65
 11189                           
 11190                           ;adc.c: 33: }
 11191                           ;adc.c: 35: ADPCH = channel;
 11192  1E61  0873               	movf	ADCRead@channel,w
 11193  1E62  009E               	movwf	30	;volatile
 11194                           
 11195                           ;adc.c: 37: ADCON0bits.ADON = 1;
 11196  1E63  1793               	bsf	19,7	;volatile
 11197                           
 11198                           ;adc.c: 39: ADCON0bits.ADCONT = 0;
 11199  1E64  1313               	bcf	19,6	;volatile
 11200                           
 11201                           ;adc.c: 41: ADCON0bits.ADGO = 1;
 11202  1E65  1413               	bsf	19,0	;volatile
 11203  1E66                     l68:	
 11204                           ;adc.c: 44: {
 11205                           
 11206                           ;adc.c: 43: while(ADCON0bits.ADGO)
 11207                           
 11208  1E66  1813               	btfsc	19,0	;volatile
 11209  1E67  2E66               	goto	l68
 11210                           
 11211                           ;adc.c: 45: }
 11212                           ;adc.c: 47: return ((ADRESH<<8)+ADRESL);
 11213  1E68  080D               	movf	13,w	;volatile
 11214  1E69  00F1               	movwf	?_ADCRead+1
 11215  1E6A  080C               	movf	12,w	;volatile
 11216  1E6B  00F0               	movwf	?_ADCRead
 11217  1E6C  0008               	return
 11218  1E6D                     __end_of_ADCRead:	
 11219                           
 11220                           	psect	text14
 11221  0BBB                     __ptext14:	
 11222 ;; *************** function _cc_cv_mode *****************
 11223 ;; Defined at:
 11224 ;;		line 103 in file "battery_charger.c"
 11225 ;; Parameters:    Size  Location     Type
 11226 ;;  z               1    wreg     unsigned char 
 11227 ;; Auto vars:     Size  Location     Type
 11228 ;;  z               1   38[BANK0 ] unsigned char 
 11229 ;; Return value:  Size  Location     Type
 11230 ;;                  1    wreg      void 
 11231 ;; Registers used:
 11232 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11233 ;; Tracked objects:
 11234 ;;		On entry : 0/0
 11235 ;;		On exit  : 0/0
 11236 ;;		Unchanged: 0/0
 11237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11239 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11240 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11241 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11242 ;;Total ram usage:        8 bytes
 11243 ;; Hardware stack levels used:    1
 11244 ;; Hardware stack levels required when called:    2
 11245 ;; This function calls:
 11246 ;;		___awtoft
 11247 ;;		___ftmul
 11248 ;;		___fttol
 11249 ;; This function is called by:
 11250 ;;		_main
 11251 ;; This function uses a non-reentrant model
 11252 ;;
 11253                           
 11254                           
 11255                           ;psect for function _cc_cv_mode
 11256  0BBB                     _cc_cv_mode:	
 11257                           
 11258                           ;incstack = 0
 11259                           ; Regs used in _cc_cv_mode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11260                           ;cc_cv_mode@z stored from wreg
 11261  0BBB  0020               	movlb	0	; select bank0
 11262  0BBC  00C6               	movwf	cc_cv_mode@z
 11263                           
 11264                           ;battery_charger.c: 105: if(voltage[z]>=Vref[z])
 11265  0BBD  3546               	lslf	cc_cv_mode@z,w
 11266  0BBE  3EB0               	addlw	(low (_Vref| 0))& (0+255)
 11267  0BBF  0086               	movwf	6
 11268  0BC0  0187               	clrf	7
 11269  0BC1  3F40               	moviw [0]fsr1
 11270  0BC2  00BF               	movwf	??_cc_cv_mode
 11271  0BC3  3F41               	moviw [1]fsr1
 11272  0BC4  00C0               	movwf	??_cc_cv_mode+1
 11273  0BC5  3546               	lslf	cc_cv_mode@z,w
 11274  0BC6  3E5E               	addlw	(low (_voltage| 0))& (0+255)
 11275  0BC7  0086               	movwf	6
 11276  0BC8  0187               	clrf	7
 11277  0BC9  3F40               	moviw [0]fsr1
 11278  0BCA  00C1               	movwf	??_cc_cv_mode+2
 11279  0BCB  3F41               	moviw [1]fsr1
 11280  0BCC  00C2               	movwf	??_cc_cv_mode+3
 11281  0BCD  0842               	movf	??_cc_cv_mode+3,w
 11282  0BCE  3A80               	xorlw	128
 11283  0BCF  00C3               	movwf	??_cc_cv_mode+4
 11284  0BD0  0840               	movf	??_cc_cv_mode+1,w
 11285  0BD1  3A80               	xorlw	128
 11286  0BD2  0243               	subwf	??_cc_cv_mode+4,w
 11287  0BD3  1D03               	skipz
 11288  0BD4  2BD7               	goto	u3725
 11289  0BD5  083F               	movf	??_cc_cv_mode,w
 11290  0BD6  0241               	subwf	??_cc_cv_mode+2,w
 11291  0BD7                     u3725:	
 11292  0BD7  1C03               	skipc
 11293  0BD8  2C17               	goto	l3142
 11294                           
 11295                           ;battery_charger.c: 106: {
 11296                           ;battery_charger.c: 107: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 11297  0BD9  0020               	movlb	0	; select bank0
 11298  0BDA  0846               	movf	cc_cv_mode@z,w
 11299  0BDB  3EBC               	addlw	(low (_VHoldMode| 0))& (0+255)
 11300  0BDC  0086               	movwf	6
 11301  0BDD  0187               	clrf	7
 11302  0BDE  0801               	movf	1,w
 11303  0BDF  3A80               	xorlw	128
 11304  0BE0  3E77               	addlw	-137
 11305  0BE1  1803               	skipnc
 11306  0BE2  2BEB               	goto	l147
 11307  0BE3  3001               	movlw	1
 11308  0BE4  00BF               	movwf	??_cc_cv_mode
 11309  0BE5  0846               	movf	cc_cv_mode@z,w
 11310  0BE6  3EBC               	addlw	(low (_VHoldMode| 0))& (0+255)
 11311  0BE7  0086               	movwf	6
 11312  0BE8  0187               	clrf	7
 11313  0BE9  083F               	movf	??_cc_cv_mode,w
 11314  0BEA  0781               	addwf	1,f
 11315  0BEB                     l147:	
 11316                           
 11317                           ;battery_charger.c: 108: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 11318  0BEB  0846               	movf	cc_cv_mode@z,w
 11319  0BEC  3EBC               	addlw	(low (_VHoldMode| 0))& (0+255)
 11320  0BED  0086               	movwf	6
 11321  0BEE  0187               	clrf	7
 11322  0BEF  0801               	movf	1,w
 11323  0BF0  3A80               	xorlw	128
 11324  0BF1  3E77               	addlw	-137
 11325  0BF2  1803               	skipnc
 11326  0BF3  2BFC               	goto	l148
 11327  0BF4  3001               	movlw	1
 11328  0BF5  00BF               	movwf	??_cc_cv_mode
 11329  0BF6  0846               	movf	cc_cv_mode@z,w
 11330  0BF7  3EBC               	addlw	(low (_VHoldMode| 0))& (0+255)
 11331  0BF8  0086               	movwf	6
 11332  0BF9  0187               	clrf	7
 11333  0BFA  083F               	movf	??_cc_cv_mode,w
 11334  0BFB  0781               	addwf	1,f
 11335  0BFC                     l148:	
 11336                           
 11337                           ;battery_charger.c: 110: if(cc_cv[z])
 11338  0BFC  0846               	movf	cc_cv_mode@z,w
 11339  0BFD  3EC0               	addlw	(low (_cc_cv| 0))& (0+255)
 11340  0BFE  0086               	movwf	6
 11341  0BFF  0187               	clrf	7
 11342  0C00  0801               	movf	1,w
 11343  0C01  1903               	btfsc	3,2
 11344  0C02  2C0A               	goto	l3138
 11345                           
 11346                           ;battery_charger.c: 111: {
 11347                           ;battery_charger.c: 112: cc_cv[z]-=1;
 11348  0C03  0846               	movf	cc_cv_mode@z,w
 11349  0C04  3EC0               	addlw	(low (_cc_cv| 0))& (0+255)
 11350  0C05  0086               	movwf	6
 11351  0C06  0187               	clrf	7
 11352  0C07  3001               	movlw	1
 11353  0C08  0281               	subwf	1,f
 11354                           
 11355                           ;battery_charger.c: 113: }
 11356  0C09  2C3F               	goto	l152
 11357  0C0A                     l3138:	
 11358                           
 11359                           ;battery_charger.c: 114: else
 11360                           ;battery_charger.c: 115: {
 11361                           ;battery_charger.c: 116: if(Imode[z])
 11362  0C0A  0846               	movf	cc_cv_mode@z,w
 11363  0C0B  3E66               	addlw	(low (_Imode| 0))& (0+255)
 11364  0C0C  0086               	movwf	6
 11365  0C0D  0187               	clrf	7
 11366  0C0E  0801               	movf	1,w
 11367  0C0F  1903               	btfsc	3,2
 11368  0C10  2C3F               	goto	l152
 11369                           
 11370                           ;battery_charger.c: 117: {
 11371                           ;battery_charger.c: 118: Imode[z]=0;
 11372  0C11  0846               	movf	cc_cv_mode@z,w
 11373  0C12  3E66               	addlw	(low (_Imode| 0))& (0+255)
 11374  0C13  0086               	movwf	6
 11375  0C14  0187               	clrf	7
 11376  0C15  0181               	clrf	1
 11377                           
 11378                           ;battery_charger.c: 119: }
 11379                           ;battery_charger.c: 120: }
 11380                           ;battery_charger.c: 121: }
 11381  0C16  2C3F               	goto	l152
 11382  0C17                     l3142:	
 11383                           
 11384                           ;battery_charger.c: 122: else
 11385                           ;battery_charger.c: 123: {
 11386                           ;battery_charger.c: 124: VHoldMode[z]-=1;
 11387  0C17  30FF               	movlw	255
 11388  0C18  0020               	movlb	0	; select bank0
 11389  0C19  00BF               	movwf	??_cc_cv_mode
 11390  0C1A  0846               	movf	cc_cv_mode@z,w
 11391  0C1B  3EBC               	addlw	(low (_VHoldMode| 0))& (0+255)
 11392  0C1C  0086               	movwf	6
 11393  0C1D  0187               	clrf	7
 11394  0C1E  083F               	movf	??_cc_cv_mode,w
 11395  0C1F  0781               	addwf	1,f
 11396                           
 11397                           ;battery_charger.c: 125: if(VHoldMode[z]<(9*-1))
 11398  0C20  0846               	movf	cc_cv_mode@z,w
 11399  0C21  3EBC               	addlw	(low (_VHoldMode| 0))& (0+255)
 11400  0C22  0086               	movwf	6
 11401  0C23  0187               	clrf	7
 11402  0C24  0801               	movf	1,w
 11403  0C25  3A80               	xorlw	128
 11404  0C26  3E89               	addlw	137
 11405  0C27  1803               	skipnc
 11406  0C28  2C3F               	goto	l152
 11407                           
 11408                           ;battery_charger.c: 126: {
 11409                           ;battery_charger.c: 127: Imode[z]=1;
 11410  0C29  0846               	movf	cc_cv_mode@z,w
 11411  0C2A  3E66               	addlw	(low (_Imode| 0))& (0+255)
 11412  0C2B  0086               	movwf	6
 11413  0C2C  0187               	clrf	7
 11414  0C2D  0181               	clrf	1
 11415  0C2E  0A81               	incf	1,f
 11416                           
 11417                           ;battery_charger.c: 128: cc_cv[z]=(9*2);
 11418  0C2F  3012               	movlw	18
 11419  0C30  00BF               	movwf	??_cc_cv_mode
 11420  0C31  0846               	movf	cc_cv_mode@z,w
 11421  0C32  3EC0               	addlw	(low (_cc_cv| 0))& (0+255)
 11422  0C33  0086               	movwf	6
 11423  0C34  0187               	clrf	7
 11424  0C35  083F               	movf	??_cc_cv_mode,w
 11425  0C36  0081               	movwf	1
 11426                           
 11427                           ;battery_charger.c: 129: VHoldMode[z]=(9*-1);
 11428  0C37  30F7               	movlw	247
 11429  0C38  00BF               	movwf	??_cc_cv_mode
 11430  0C39  0846               	movf	cc_cv_mode@z,w
 11431  0C3A  3EBC               	addlw	(low (_VHoldMode| 0))& (0+255)
 11432  0C3B  0086               	movwf	6
 11433  0C3C  0187               	clrf	7
 11434  0C3D  083F               	movf	??_cc_cv_mode,w
 11435  0C3E  0081               	movwf	1
 11436  0C3F                     l152:	
 11437                           
 11438                           ;battery_charger.c: 130: }
 11439                           ;battery_charger.c: 131: }
 11440                           ;battery_charger.c: 133: if(current[z]>Iref[z])
 11441  0C3F  3546               	lslf	cc_cv_mode@z,w
 11442  0C40  3EA0               	addlw	(low (_current| 0))& (0+255)
 11443  0C41  0086               	movwf	6
 11444  0C42  0187               	clrf	7
 11445  0C43  3F40               	moviw [0]fsr1
 11446  0C44  00BF               	movwf	??_cc_cv_mode
 11447  0C45  3F41               	moviw [1]fsr1
 11448  0C46  00C0               	movwf	??_cc_cv_mode+1
 11449  0C47  3546               	lslf	cc_cv_mode@z,w
 11450  0C48  3EAC               	addlw	(low (_Iref| 0))& (0+255)
 11451  0C49  0086               	movwf	6
 11452  0C4A  0187               	clrf	7
 11453  0C4B  3F40               	moviw [0]fsr1
 11454  0C4C  00C1               	movwf	??_cc_cv_mode+2
 11455  0C4D  3F41               	moviw [1]fsr1
 11456  0C4E  00C2               	movwf	??_cc_cv_mode+3
 11457  0C4F  0842               	movf	??_cc_cv_mode+3,w
 11458  0C50  3A80               	xorlw	128
 11459  0C51  00C3               	movwf	??_cc_cv_mode+4
 11460  0C52  0840               	movf	??_cc_cv_mode+1,w
 11461  0C53  3A80               	xorlw	128
 11462  0C54  0243               	subwf	??_cc_cv_mode+4,w
 11463  0C55  1D03               	skipz
 11464  0C56  2C59               	goto	u3785
 11465  0C57  083F               	movf	??_cc_cv_mode,w
 11466  0C58  0241               	subwf	??_cc_cv_mode+2,w
 11467  0C59                     u3785:	
 11468  0C59  1803               	skipnc
 11469  0C5A  0008               	return
 11470                           
 11471                           ;battery_charger.c: 134: {
 11472                           ;battery_charger.c: 135: if(!(Imode[z]))
 11473  0C5B  0020               	movlb	0	; select bank0
 11474  0C5C  0846               	movf	cc_cv_mode@z,w
 11475  0C5D  3E66               	addlw	(low (_Imode| 0))& (0+255)
 11476  0C5E  0086               	movwf	6
 11477  0C5F  0187               	clrf	7
 11478  0C60  0801               	movf	1,w
 11479  0C61  1D03               	btfss	3,2
 11480  0C62  0008               	return
 11481                           
 11482                           ;battery_charger.c: 136: {
 11483                           ;battery_charger.c: 137: if(batteryState[z]==FLOAT)
 11484  0C63  0846               	movf	cc_cv_mode@z,w
 11485  0C64  3E68               	addlw	(low (_batteryState| 0))& (0+255)
 11486  0C65  0086               	movwf	6
 11487  0C66  0187               	clrf	7
 11488  0C67  3005               	movlw	5
 11489  0C68  0601               	xorwf	1,w
 11490  0C69  1D03               	btfss	3,2
 11491  0C6A  0008               	return
 11492                           
 11493                           ;battery_charger.c: 138: {
 11494                           ;battery_charger.c: 139: if(voltage[z]<1350+(int16_t)((250-batteryTemp)*.24)-70)
 11495  0C6B  096E               	comf	_batteryTemp,w
 11496  0C6C  00BF               	movwf	??_cc_cv_mode
 11497  0C6D  096F               	comf	_batteryTemp+1,w
 11498  0C6E  00C0               	movwf	??_cc_cv_mode+1
 11499  0C6F  0ABF               	incf	??_cc_cv_mode,f
 11500  0C70  1903               	skipnz
 11501  0C71  0AC0               	incf	??_cc_cv_mode+1,f
 11502  0C72  083F               	movf	??_cc_cv_mode,w
 11503  0C73  3EFA               	addlw	250
 11504  0C74  00F9               	movwf	___awtoft@c
 11505  0C75  3000               	movlw	0
 11506  0C76  3D40               	addwfc	??_cc_cv_mode+1,w
 11507  0C77  00FA               	movwf	___awtoft@c+1
 11508  0C78  319F  2710  318B   	fcall	___awtoft
 11509  0C7B  0879               	movf	?___awtoft,w
 11510  0C7C  0020               	movlb	0	; select bank0
 11511  0C7D  00A4               	movwf	___ftmul@f2
 11512  0C7E  087A               	movf	?___awtoft+1,w
 11513  0C7F  00A5               	movwf	___ftmul@f2+1
 11514  0C80  087B               	movf	?___awtoft+2,w
 11515  0C81  00A6               	movwf	___ftmul@f2+2
 11516  0C82  30C3               	movlw	195
 11517  0C83  00A1               	movwf	___ftmul@f1
 11518  0C84  3075               	movlw	117
 11519  0C85  00A2               	movwf	___ftmul@f1+1
 11520  0C86  303E               	movlw	62
 11521  0C87  00A3               	movwf	___ftmul@f1+2
 11522  0C88  3197  274C  318B   	fcall	___ftmul
 11523  0C8B  0020               	movlb	0	; select bank0
 11524  0C8C  0821               	movf	?___ftmul,w
 11525  0C8D  00B1               	movwf	___fttol@f1
 11526  0C8E  0822               	movf	?___ftmul+1,w
 11527  0C8F  00B2               	movwf	___fttol@f1+1
 11528  0C90  0823               	movf	?___ftmul+2,w
 11529  0C91  00B3               	movwf	___fttol@f1+2
 11530  0C92  3194  24E4  318B   	fcall	___fttol
 11531  0C95  0020               	movlb	0	; select bank0
 11532  0C96  0831               	movf	?___fttol,w
 11533  0C97  3E00               	addlw	0
 11534  0C98  00C1               	movwf	??_cc_cv_mode+2
 11535  0C99  3005               	movlw	5
 11536  0C9A  3D32               	addwfc	?___fttol+1,w
 11537  0C9B  00C2               	movwf	??_cc_cv_mode+3
 11538  0C9C  3546               	lslf	cc_cv_mode@z,w
 11539  0C9D  3E5E               	addlw	(low (_voltage| 0))& (0+255)
 11540  0C9E  0086               	movwf	6
 11541  0C9F  0187               	clrf	7
 11542  0CA0  3F40               	moviw [0]fsr1
 11543  0CA1  00C3               	movwf	??_cc_cv_mode+4
 11544  0CA2  3F41               	moviw [1]fsr1
 11545  0CA3  00C4               	movwf	??_cc_cv_mode+5
 11546  0CA4  0844               	movf	??_cc_cv_mode+5,w
 11547  0CA5  3A80               	xorlw	128
 11548  0CA6  00C5               	movwf	??_cc_cv_mode+6
 11549  0CA7  0842               	movf	??_cc_cv_mode+3,w
 11550  0CA8  3A80               	xorlw	128
 11551  0CA9  0245               	subwf	??_cc_cv_mode+6,w
 11552  0CAA  1D03               	skipz
 11553  0CAB  2CAE               	goto	u3815
 11554  0CAC  0841               	movf	??_cc_cv_mode+2,w
 11555  0CAD  0243               	subwf	??_cc_cv_mode+4,w
 11556  0CAE                     u3815:	
 11557  0CAE  1803               	skipnc
 11558  0CAF  0008               	return
 11559                           
 11560                           ;battery_charger.c: 140: {
 11561                           ;battery_charger.c: 141: batteryState[z]=CHARGE;
 11562  0CB0  3004               	movlw	4
 11563  0CB1  0020               	movlb	0	; select bank0
 11564  0CB2  00BF               	movwf	??_cc_cv_mode
 11565  0CB3  0846               	movf	cc_cv_mode@z,w
 11566  0CB4  3E68               	addlw	(low (_batteryState| 0))& (0+255)
 11567  0CB5  0086               	movwf	6
 11568  0CB6  0187               	clrf	7
 11569  0CB7  083F               	movf	??_cc_cv_mode,w
 11570  0CB8  0081               	movwf	1
 11571                           
 11572                           ;battery_charger.c: 142: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 11573  0CB9  096E               	comf	_batteryTemp,w
 11574  0CBA  00BF               	movwf	??_cc_cv_mode
 11575  0CBB  096F               	comf	_batteryTemp+1,w
 11576  0CBC  00C0               	movwf	??_cc_cv_mode+1
 11577  0CBD  0ABF               	incf	??_cc_cv_mode,f
 11578  0CBE  1903               	skipnz
 11579  0CBF  0AC0               	incf	??_cc_cv_mode+1,f
 11580  0CC0  083F               	movf	??_cc_cv_mode,w
 11581  0CC1  3EFA               	addlw	250
 11582  0CC2  00F9               	movwf	___awtoft@c
 11583  0CC3  3000               	movlw	0
 11584  0CC4  3D40               	addwfc	??_cc_cv_mode+1,w
 11585  0CC5  00FA               	movwf	___awtoft@c+1
 11586  0CC6  319F  2710  318B   	fcall	___awtoft
 11587  0CC9  0879               	movf	?___awtoft,w
 11588  0CCA  0020               	movlb	0	; select bank0
 11589  0CCB  00A4               	movwf	___ftmul@f2
 11590  0CCC  087A               	movf	?___awtoft+1,w
 11591  0CCD  00A5               	movwf	___ftmul@f2+1
 11592  0CCE  087B               	movf	?___awtoft+2,w
 11593  0CCF  00A6               	movwf	___ftmul@f2+2
 11594  0CD0  30C3               	movlw	195
 11595  0CD1  00A1               	movwf	___ftmul@f1
 11596  0CD2  3075               	movlw	117
 11597  0CD3  00A2               	movwf	___ftmul@f1+1
 11598  0CD4  303E               	movlw	62
 11599  0CD5  00A3               	movwf	___ftmul@f1+2
 11600  0CD6  3197  274C  318B   	fcall	___ftmul
 11601  0CD9  0020               	movlb	0	; select bank0
 11602  0CDA  0821               	movf	?___ftmul,w
 11603  0CDB  00B1               	movwf	___fttol@f1
 11604  0CDC  0822               	movf	?___ftmul+1,w
 11605  0CDD  00B2               	movwf	___fttol@f1+1
 11606  0CDE  0823               	movf	?___ftmul+2,w
 11607  0CDF  00B3               	movwf	___fttol@f1+2
 11608  0CE0  3194  24E4         	fcall	___fttol
 11609  0CE2  0020               	movlb	0	; select bank0
 11610  0CE3  0831               	movf	?___fttol,w
 11611  0CE4  3E91               	addlw	145
 11612  0CE5  00C1               	movwf	??_cc_cv_mode+2
 11613  0CE6  3005               	movlw	5
 11614  0CE7  3D32               	addwfc	?___fttol+1,w
 11615  0CE8  00C2               	movwf	??_cc_cv_mode+3
 11616  0CE9  3546               	lslf	cc_cv_mode@z,w
 11617  0CEA  3EB0               	addlw	(low (_Vref| 0))& (0+255)
 11618  0CEB  0086               	movwf	6
 11619  0CEC  0187               	clrf	7
 11620  0CED  0841               	movf	??_cc_cv_mode+2,w
 11621  0CEE  3FC0               	movwi [0]fsr1
 11622  0CEF  0842               	movf	??_cc_cv_mode+3,w
 11623  0CF0  3FC1               	movwi [1]fsr1
 11624                           
 11625                           ;battery_charger.c: 143: Iref[z]=30;
 11626  0CF1  3546               	lslf	cc_cv_mode@z,w
 11627  0CF2  3EAC               	addlw	(low (_Iref| 0))& (0+255)
 11628  0CF3  0086               	movwf	6
 11629  0CF4  0187               	clrf	7
 11630  0CF5  301E               	movlw	30
 11631  0CF6  3FC0               	movwi [0]fsr1
 11632  0CF7  3000               	movlw	0
 11633  0CF8  3FC1               	movwi [1]fsr1
 11634  0CF9  0008               	return
 11635  0CFA                     __end_of_cc_cv_mode:	
 11636                           
 11637                           	psect	text15
 11638  000F                     __ptext15:	
 11639 ;; *************** function _calculateCurrent3 *****************
 11640 ;; Defined at:
 11641 ;;		line 447 in file "main.c"
 11642 ;; Parameters:    Size  Location     Type
 11643 ;;		None
 11644 ;; Auto vars:     Size  Location     Type
 11645 ;;		None
 11646 ;; Return value:  Size  Location     Type
 11647 ;;                  1    wreg      void 
 11648 ;; Registers used:
 11649 ;;		wreg, status,2, status,0, pclath, cstack
 11650 ;; Tracked objects:
 11651 ;;		On entry : 0/0
 11652 ;;		On exit  : 0/0
 11653 ;;		Unchanged: 0/0
 11654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11657 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11658 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11659 ;;Total ram usage:        3 bytes
 11660 ;; Hardware stack levels used:    1
 11661 ;; Hardware stack levels required when called:    2
 11662 ;; This function calls:
 11663 ;;		___awtoft
 11664 ;;		___ftdiv
 11665 ;;		___fttol
 11666 ;; This function is called by:
 11667 ;;		_main
 11668 ;; This function uses a non-reentrant model
 11669 ;;
 11670                           
 11671                           
 11672                           ;psect for function _calculateCurrent3
 11673  000F                     _calculateCurrent3:	
 11674                           
 11675                           ;main.c: 449: if(Ianalogs[3]-570<=0)
 11676                           
 11677                           ;incstack = 0
 11678                           ; Regs used in _calculateCurrent3: [wreg+status,2+status,0+pclath+cstack]
 11679  000F  0022               	movlb	2	; select bank2
 11680  0010  0846               	movf	(_Ianalogs^(0+256)+6),w
 11681  0011  3EC6               	addlw	198
 11682  0012  0020               	movlb	0	; select bank0
 11683  0013  00BF               	movwf	??_calculateCurrent3
 11684  0014  30FD               	movlw	253
 11685  0015  0022               	movlb	2	; select bank2
 11686  0016  3D47               	addwfc	((_Ianalogs+1)^(0+256)+6),w
 11687  0017  0020               	movlb	0	; select bank0
 11688  0018  00C0               	movwf	??_calculateCurrent3+1
 11689  0019  0840               	movf	??_calculateCurrent3+1,w
 11690  001A  3A80               	xorlw	128
 11691  001B  00C1               	movwf	??_calculateCurrent3+2
 11692  001C  3080               	movlw	128
 11693  001D  0241               	subwf	??_calculateCurrent3+2,w
 11694  001E  1D03               	skipz
 11695  001F  2822               	goto	u4055
 11696  0020  3001               	movlw	1
 11697  0021  023F               	subwf	??_calculateCurrent3,w
 11698  0022                     u4055:	
 11699  0022  1803               	skipnc
 11700  0023  2828               	goto	l3304
 11701                           
 11702                           ;main.c: 450: {
 11703                           ;main.c: 451: current[3]=0;
 11704  0024  0021               	movlb	1	; select bank1
 11705  0025  01A6               	clrf	(_current^(0+128)+6)
 11706  0026  01A7               	clrf	((_current+1)^(0+128)+6)
 11707                           
 11708                           ;main.c: 452: }
 11709  0027  0008               	return
 11710  0028                     l3304:	
 11711                           
 11712                           ;main.c: 453: else
 11713                           ;main.c: 454: {
 11714                           ;main.c: 455: current[3]=(int16_t)((Ianalogs[3]-570)/2.8);
 11715  0028  0022               	movlb	2	; select bank2
 11716  0029  0846               	movf	(_Ianalogs^(0+256)+6),w
 11717  002A  3EC6               	addlw	198
 11718  002B  00F9               	movwf	___awtoft@c
 11719  002C  30FD               	movlw	253
 11720  002D  3D47               	addwfc	((_Ianalogs+1)^(0+256)+6),w
 11721  002E  00FA               	movwf	___awtoft@c+1
 11722  002F  319F  2710  3180   	fcall	___awtoft
 11723  0032  0879               	movf	?___awtoft,w
 11724  0033  0020               	movlb	0	; select bank0
 11725  0034  00A4               	movwf	___ftdiv@f1
 11726  0035  087A               	movf	?___awtoft+1,w
 11727  0036  00A5               	movwf	___ftdiv@f1+1
 11728  0037  087B               	movf	?___awtoft+2,w
 11729  0038  00A6               	movwf	___ftdiv@f1+2
 11730  0039  3033               	movlw	51
 11731  003A  00A1               	movwf	___ftdiv@f2
 11732  003B  3033               	movlw	51
 11733  003C  00A2               	movwf	___ftdiv@f2+1
 11734  003D  3040               	movlw	64
 11735  003E  00A3               	movwf	___ftdiv@f2+2
 11736  003F  3195  25F3  3180   	fcall	___ftdiv
 11737  0042  0020               	movlb	0	; select bank0
 11738  0043  0821               	movf	?___ftdiv,w
 11739  0044  00B1               	movwf	___fttol@f1
 11740  0045  0822               	movf	?___ftdiv+1,w
 11741  0046  00B2               	movwf	___fttol@f1+1
 11742  0047  0823               	movf	?___ftdiv+2,w
 11743  0048  00B3               	movwf	___fttol@f1+2
 11744  0049  3194  24E4         	fcall	___fttol
 11745  004B  0020               	movlb	0	; select bank0
 11746  004C  0832               	movf	?___fttol+1,w
 11747  004D  0021               	movlb	1	; select bank1
 11748  004E  00A7               	movwf	((_current+1)^(0+128)+6)
 11749  004F  0020               	movlb	0	; select bank0
 11750  0050  0831               	movf	?___fttol,w
 11751  0051  0021               	movlb	1	; select bank1
 11752  0052  00A6               	movwf	(_current^(0+128)+6)
 11753  0053  0008               	return
 11754  0054                     __end_of_calculateCurrent3:	
 11755                           
 11756                           	psect	text16
 11757  1F31                     __ptext16:	
 11758 ;; *************** function _calculateCurrent2 *****************
 11759 ;; Defined at:
 11760 ;;		line 435 in file "main.c"
 11761 ;; Parameters:    Size  Location     Type
 11762 ;;		None
 11763 ;; Auto vars:     Size  Location     Type
 11764 ;;		None
 11765 ;; Return value:  Size  Location     Type
 11766 ;;                  1    wreg      void 
 11767 ;; Registers used:
 11768 ;;		wreg, status,2, status,0
 11769 ;; Tracked objects:
 11770 ;;		On entry : 0/0
 11771 ;;		On exit  : 0/0
 11772 ;;		Unchanged: 0/0
 11773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11776 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11777 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11778 ;;Total ram usage:        3 bytes
 11779 ;; Hardware stack levels used:    1
 11780 ;; This function calls:
 11781 ;;		Nothing
 11782 ;; This function is called by:
 11783 ;;		_main
 11784 ;; This function uses a non-reentrant model
 11785 ;;
 11786                           
 11787                           
 11788                           ;psect for function _calculateCurrent2
 11789  1F31                     _calculateCurrent2:	
 11790                           
 11791                           ;main.c: 437: if(Ianalogs[2]-570<=0)
 11792                           
 11793                           ;incstack = 0
 11794                           ; Regs used in _calculateCurrent2: [wreg+status,2+status,0]
 11795  1F31  0022               	movlb	2	; select bank2
 11796  1F32  0844               	movf	(_Ianalogs^(0+256)+4),w
 11797  1F33  3EC6               	addlw	198
 11798  1F34  00F0               	movwf	??_calculateCurrent2
 11799  1F35  30FD               	movlw	253
 11800  1F36  3D45               	addwfc	((_Ianalogs+1)^(0+256)+4),w
 11801  1F37  00F1               	movwf	??_calculateCurrent2+1
 11802  1F38  0871               	movf	??_calculateCurrent2+1,w
 11803  1F39  3A80               	xorlw	128
 11804  1F3A  00F2               	movwf	??_calculateCurrent2+2
 11805  1F3B  3080               	movlw	128
 11806  1F3C  0272               	subwf	??_calculateCurrent2+2,w
 11807  1F3D  1D03               	skipz
 11808  1F3E  2F41               	goto	u4045
 11809  1F3F  3001               	movlw	1
 11810  1F40  0270               	subwf	??_calculateCurrent2,w
 11811  1F41                     u4045:	
 11812  1F41  1803               	skipnc
 11813  1F42  2F47               	goto	l3298
 11814                           
 11815                           ;main.c: 438: {
 11816                           ;main.c: 439: current[2]=0;
 11817  1F43  0021               	movlb	1	; select bank1
 11818  1F44  01A4               	clrf	(_current^(0+128)+4)
 11819  1F45  01A5               	clrf	((_current+1)^(0+128)+4)
 11820                           
 11821                           ;main.c: 440: }
 11822  1F46  0008               	return
 11823  1F47                     l3298:	
 11824                           
 11825                           ;main.c: 441: else
 11826                           ;main.c: 442: {
 11827                           ;main.c: 443: current[2]=(int16_t)(Ianalogs[2]-570);
 11828  1F47  0022               	movlb	2	; select bank2
 11829  1F48  0844               	movf	(_Ianalogs^(0+256)+4),w
 11830  1F49  3EC6               	addlw	198
 11831  1F4A  0021               	movlb	1	; select bank1
 11832  1F4B  00A4               	movwf	(_current^(0+128)+4)
 11833  1F4C  30FD               	movlw	253
 11834  1F4D  0022               	movlb	2	; select bank2
 11835  1F4E  3D45               	addwfc	((_Ianalogs+1)^(0+256)+4),w
 11836  1F4F  0021               	movlb	1	; select bank1
 11837  1F50  00A5               	movwf	((_current+1)^(0+128)+4)
 11838  1F51  0008               	return
 11839  1F52                     __end_of_calculateCurrent2:	
 11840                           
 11841                           	psect	text17
 11842  1250                     __ptext17:	
 11843 ;; *************** function _calculateCurrent0 *****************
 11844 ;; Defined at:
 11845 ;;		line 411 in file "main.c"
 11846 ;; Parameters:    Size  Location     Type
 11847 ;;		None
 11848 ;; Auto vars:     Size  Location     Type
 11849 ;;		None
 11850 ;; Return value:  Size  Location     Type
 11851 ;;                  1    wreg      void 
 11852 ;; Registers used:
 11853 ;;		wreg, status,2, status,0, pclath, cstack
 11854 ;; Tracked objects:
 11855 ;;		On entry : 0/0
 11856 ;;		On exit  : 0/0
 11857 ;;		Unchanged: 0/0
 11858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11861 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11862 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11863 ;;Total ram usage:        3 bytes
 11864 ;; Hardware stack levels used:    1
 11865 ;; Hardware stack levels required when called:    2
 11866 ;; This function calls:
 11867 ;;		___awtoft
 11868 ;;		___ftdiv
 11869 ;;		___fttol
 11870 ;; This function is called by:
 11871 ;;		_main
 11872 ;; This function uses a non-reentrant model
 11873 ;;
 11874                           
 11875                           
 11876                           ;psect for function _calculateCurrent0
 11877  1250                     _calculateCurrent0:	
 11878                           
 11879                           ;main.c: 413: if(Ianalogs[0]-562<=0)
 11880                           
 11881                           ;incstack = 0
 11882                           ; Regs used in _calculateCurrent0: [wreg+status,2+status,0+pclath+cstack]
 11883  1250  0022               	movlb	2	; select bank2
 11884  1251  0840               	movf	_Ianalogs^(0+256),w
 11885  1252  3ECE               	addlw	206
 11886  1253  0020               	movlb	0	; select bank0
 11887  1254  00BF               	movwf	??_calculateCurrent0
 11888  1255  30FD               	movlw	253
 11889  1256  0022               	movlb	2	; select bank2
 11890  1257  3D41               	addwfc	(_Ianalogs+1)^(0+256),w
 11891  1258  0020               	movlb	0	; select bank0
 11892  1259  00C0               	movwf	??_calculateCurrent0+1
 11893  125A  0840               	movf	??_calculateCurrent0+1,w
 11894  125B  3A80               	xorlw	128
 11895  125C  00C1               	movwf	??_calculateCurrent0+2
 11896  125D  3080               	movlw	128
 11897  125E  0241               	subwf	??_calculateCurrent0+2,w
 11898  125F  1D03               	skipz
 11899  1260  2A63               	goto	u4035
 11900  1261  3001               	movlw	1
 11901  1262  023F               	subwf	??_calculateCurrent0,w
 11902  1263                     u4035:	
 11903  1263  1803               	skipnc
 11904  1264  2A69               	goto	l3292
 11905                           
 11906                           ;main.c: 414: {
 11907                           ;main.c: 415: current[0]=0;
 11908  1265  0021               	movlb	1	; select bank1
 11909  1266  01A0               	clrf	_current^(0+128)
 11910  1267  01A1               	clrf	(_current+1)^(0+128)
 11911                           
 11912                           ;main.c: 416: }
 11913  1268  0008               	return
 11914  1269                     l3292:	
 11915                           
 11916                           ;main.c: 417: else
 11917                           ;main.c: 418: {
 11918                           ;main.c: 419: current[0]=(int16_t)((Ianalogs[0]-562)/2.9943);
 11919  1269  0022               	movlb	2	; select bank2
 11920  126A  0840               	movf	_Ianalogs^(0+256),w
 11921  126B  3ECE               	addlw	206
 11922  126C  00F9               	movwf	___awtoft@c
 11923  126D  30FD               	movlw	253
 11924  126E  3D41               	addwfc	(_Ianalogs+1)^(0+256),w
 11925  126F  00FA               	movwf	___awtoft@c+1
 11926  1270  319F  2710  3192   	fcall	___awtoft
 11927  1273  0879               	movf	?___awtoft,w
 11928  1274  0020               	movlb	0	; select bank0
 11929  1275  00A4               	movwf	___ftdiv@f1
 11930  1276  087A               	movf	?___awtoft+1,w
 11931  1277  00A5               	movwf	___ftdiv@f1+1
 11932  1278  087B               	movf	?___awtoft+2,w
 11933  1279  00A6               	movwf	___ftdiv@f1+2
 11934  127A  30A3               	movlw	163
 11935  127B  00A1               	movwf	___ftdiv@f2
 11936  127C  303F               	movlw	63
 11937  127D  00A2               	movwf	___ftdiv@f2+1
 11938  127E  3040               	movlw	64
 11939  127F  00A3               	movwf	___ftdiv@f2+2
 11940  1280  3195  25F3  3192   	fcall	___ftdiv
 11941  1283  0020               	movlb	0	; select bank0
 11942  1284  0821               	movf	?___ftdiv,w
 11943  1285  00B1               	movwf	___fttol@f1
 11944  1286  0822               	movf	?___ftdiv+1,w
 11945  1287  00B2               	movwf	___fttol@f1+1
 11946  1288  0823               	movf	?___ftdiv+2,w
 11947  1289  00B3               	movwf	___fttol@f1+2
 11948  128A  3194  24E4         	fcall	___fttol
 11949  128C  0020               	movlb	0	; select bank0
 11950  128D  0832               	movf	?___fttol+1,w
 11951  128E  0021               	movlb	1	; select bank1
 11952  128F  00A1               	movwf	(_current+1)^(0+128)
 11953  1290  0020               	movlb	0	; select bank0
 11954  1291  0831               	movf	?___fttol,w
 11955  1292  0021               	movlb	1	; select bank1
 11956  1293  00A0               	movwf	_current^(0+128)
 11957  1294  0008               	return
 11958  1295                     __end_of_calculateCurrent0:	
 11959                           
 11960                           	psect	text18
 11961  15F3                     __ptext18:	
 11962 ;; *************** function ___ftdiv *****************
 11963 ;; Defined at:
 11964 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
 11965 ;; Parameters:    Size  Location     Type
 11966 ;;  f2              3    1[BANK0 ] float 
 11967 ;;  f1              3    4[BANK0 ] float 
 11968 ;; Auto vars:     Size  Location     Type
 11969 ;;  f3              3   12[BANK0 ] float 
 11970 ;;  sign            1   16[BANK0 ] unsigned char 
 11971 ;;  exp             1   15[BANK0 ] unsigned char 
 11972 ;;  cntr            1   11[BANK0 ] unsigned char 
 11973 ;; Return value:  Size  Location     Type
 11974 ;;                  3    1[BANK0 ] float 
 11975 ;; Registers used:
 11976 ;;		wreg, status,2, status,0, pclath, cstack
 11977 ;; Tracked objects:
 11978 ;;		On entry : 0/0
 11979 ;;		On exit  : 0/0
 11980 ;;		Unchanged: 0/0
 11981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11982 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11983 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11984 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11985 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11986 ;;Total ram usage:       16 bytes
 11987 ;; Hardware stack levels used:    1
 11988 ;; Hardware stack levels required when called:    1
 11989 ;; This function calls:
 11990 ;;		___ftpack
 11991 ;; This function is called by:
 11992 ;;		_tempCalc
 11993 ;;		_main
 11994 ;;		_calculateCurrent0
 11995 ;;		_calculateCurrent3
 11996 ;; This function uses a non-reentrant model
 11997 ;;
 11998                           
 11999                           
 12000                           ;psect for function ___ftdiv
 12001  15F3                     ___ftdiv:	
 12002                           
 12003                           ;incstack = 0
 12004                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 12005  15F3  0020               	movlb	0	; select bank0
 12006  15F4  0824               	movf	___ftdiv@f1,w
 12007  15F5  00A7               	movwf	??___ftdiv
 12008  15F6  0825               	movf	___ftdiv@f1+1,w
 12009  15F7  00A8               	movwf	??___ftdiv+1
 12010  15F8  0826               	movf	___ftdiv@f1+2,w
 12011  15F9  00A9               	movwf	??___ftdiv+2
 12012  15FA  1003               	clrc
 12013  15FB  0D28               	rlf	??___ftdiv+1,w
 12014  15FC  0D29               	rlf	??___ftdiv+2,w
 12015  15FD  00AA               	movwf	??___ftdiv+3
 12016  15FE  082A               	movf	??___ftdiv+3,w
 12017  15FF  00AF               	movwf	___ftdiv@exp
 12018  1600  082F               	movf	___ftdiv@exp,w
 12019  1601  1D03               	btfss	3,2
 12020  1602  2E0A               	goto	l2964
 12021  1603  3000               	movlw	0
 12022  1604  00A1               	movwf	?___ftdiv
 12023  1605  3000               	movlw	0
 12024  1606  00A2               	movwf	?___ftdiv+1
 12025  1607  3000               	movlw	0
 12026  1608  00A3               	movwf	?___ftdiv+2
 12027  1609  0008               	return
 12028  160A                     l2964:	
 12029  160A  0821               	movf	___ftdiv@f2,w
 12030  160B  00A7               	movwf	??___ftdiv
 12031  160C  0822               	movf	___ftdiv@f2+1,w
 12032  160D  00A8               	movwf	??___ftdiv+1
 12033  160E  0823               	movf	___ftdiv@f2+2,w
 12034  160F  00A9               	movwf	??___ftdiv+2
 12035  1610  1003               	clrc
 12036  1611  0D28               	rlf	??___ftdiv+1,w
 12037  1612  0D29               	rlf	??___ftdiv+2,w
 12038  1613  00AA               	movwf	??___ftdiv+3
 12039  1614  082A               	movf	??___ftdiv+3,w
 12040  1615  00B0               	movwf	___ftdiv@sign
 12041  1616  0830               	movf	___ftdiv@sign,w
 12042  1617  1D03               	btfss	3,2
 12043  1618  2E20               	goto	l2970
 12044  1619  3000               	movlw	0
 12045  161A  00A1               	movwf	?___ftdiv
 12046  161B  3000               	movlw	0
 12047  161C  00A2               	movwf	?___ftdiv+1
 12048  161D  3000               	movlw	0
 12049  161E  00A3               	movwf	?___ftdiv+2
 12050  161F  0008               	return
 12051  1620                     l2970:	
 12052  1620  3000               	movlw	0
 12053  1621  00AC               	movwf	___ftdiv@f3
 12054  1622  3000               	movlw	0
 12055  1623  00AD               	movwf	___ftdiv@f3+1
 12056  1624  3000               	movlw	0
 12057  1625  00AE               	movwf	___ftdiv@f3+2
 12058  1626  3089               	movlw	137
 12059  1627  0730               	addwf	___ftdiv@sign,w
 12060  1628  00A7               	movwf	??___ftdiv
 12061  1629  0827               	movf	??___ftdiv,w
 12062  162A  02AF               	subwf	___ftdiv@exp,f
 12063  162B  0824               	movf	___ftdiv@f1,w
 12064  162C  00A7               	movwf	??___ftdiv
 12065  162D  0825               	movf	___ftdiv@f1+1,w
 12066  162E  00A8               	movwf	??___ftdiv+1
 12067  162F  0826               	movf	___ftdiv@f1+2,w
 12068  1630  00A9               	movwf	??___ftdiv+2
 12069  1631  3010               	movlw	16
 12070  1632                     u3295:	
 12071  1632  36A9               	lsrf	??___ftdiv+2,f
 12072  1633  0CA8               	rrf	??___ftdiv+1,f
 12073  1634  0CA7               	rrf	??___ftdiv,f
 12074  1635  0B89               	decfsz	9,f
 12075  1636  2E32               	goto	u3295
 12076  1637  0827               	movf	??___ftdiv,w
 12077  1638  00AA               	movwf	??___ftdiv+3
 12078  1639  082A               	movf	??___ftdiv+3,w
 12079  163A  00B0               	movwf	___ftdiv@sign
 12080  163B  0821               	movf	___ftdiv@f2,w
 12081  163C  00A7               	movwf	??___ftdiv
 12082  163D  0822               	movf	___ftdiv@f2+1,w
 12083  163E  00A8               	movwf	??___ftdiv+1
 12084  163F  0823               	movf	___ftdiv@f2+2,w
 12085  1640  00A9               	movwf	??___ftdiv+2
 12086  1641  3010               	movlw	16
 12087  1642                     u3305:	
 12088  1642  36A9               	lsrf	??___ftdiv+2,f
 12089  1643  0CA8               	rrf	??___ftdiv+1,f
 12090  1644  0CA7               	rrf	??___ftdiv,f
 12091  1645  0B89               	decfsz	9,f
 12092  1646  2E42               	goto	u3305
 12093  1647  0827               	movf	??___ftdiv,w
 12094  1648  00AA               	movwf	??___ftdiv+3
 12095  1649  082A               	movf	??___ftdiv+3,w
 12096  164A  06B0               	xorwf	___ftdiv@sign,f
 12097  164B  3080               	movlw	128
 12098  164C  00A7               	movwf	??___ftdiv
 12099  164D  0827               	movf	??___ftdiv,w
 12100  164E  05B0               	andwf	___ftdiv@sign,f
 12101  164F  17A5               	bsf	___ftdiv@f1+1,7
 12102  1650  30FF               	movlw	255
 12103  1651  05A4               	andwf	___ftdiv@f1,f
 12104  1652  30FF               	movlw	255
 12105  1653  05A5               	andwf	___ftdiv@f1+1,f
 12106  1654  3000               	movlw	0
 12107  1655  05A6               	andwf	___ftdiv@f1+2,f
 12108  1656  17A2               	bsf	___ftdiv@f2+1,7
 12109  1657  30FF               	movlw	255
 12110  1658  05A1               	andwf	___ftdiv@f2,f
 12111  1659  30FF               	movlw	255
 12112  165A  05A2               	andwf	___ftdiv@f2+1,f
 12113  165B  3000               	movlw	0
 12114  165C  05A3               	andwf	___ftdiv@f2+2,f
 12115  165D  3018               	movlw	24
 12116  165E  00A7               	movwf	??___ftdiv
 12117  165F  0827               	movf	??___ftdiv,w
 12118  1660  00AB               	movwf	___ftdiv@cntr
 12119  1661                     l2984:	
 12120  1661  3001               	movlw	1
 12121  1662                     u3315:	
 12122  1662  35AC               	lslf	___ftdiv@f3,f
 12123  1663  0DAD               	rlf	___ftdiv@f3+1,f
 12124  1664  0DAE               	rlf	___ftdiv@f3+2,f
 12125  1665  0B89               	decfsz	9,f
 12126  1666  2E62               	goto	u3315
 12127  1667  0823               	movf	___ftdiv@f2+2,w
 12128  1668  0226               	subwf	___ftdiv@f1+2,w
 12129  1669  1D03               	skipz
 12130  166A  2E71               	goto	u3325
 12131  166B  0822               	movf	___ftdiv@f2+1,w
 12132  166C  0225               	subwf	___ftdiv@f1+1,w
 12133  166D  1D03               	skipz
 12134  166E  2E71               	goto	u3325
 12135  166F  0821               	movf	___ftdiv@f2,w
 12136  1670  0224               	subwf	___ftdiv@f1,w
 12137  1671                     u3325:	
 12138  1671  1C03               	skipc
 12139  1672  2E7A               	goto	l2992
 12140  1673  0821               	movf	___ftdiv@f2,w
 12141  1674  02A4               	subwf	___ftdiv@f1,f
 12142  1675  0822               	movf	___ftdiv@f2+1,w
 12143  1676  3BA5               	subwfb	___ftdiv@f1+1,f
 12144  1677  0823               	movf	___ftdiv@f2+2,w
 12145  1678  3BA6               	subwfb	___ftdiv@f1+2,f
 12146  1679  142C               	bsf	___ftdiv@f3,0
 12147  167A                     l2992:	
 12148  167A  3001               	movlw	1
 12149  167B                     u3335:	
 12150  167B  35A4               	lslf	___ftdiv@f1,f
 12151  167C  0DA5               	rlf	___ftdiv@f1+1,f
 12152  167D  0DA6               	rlf	___ftdiv@f1+2,f
 12153  167E  0B89               	decfsz	9,f
 12154  167F  2E7B               	goto	u3335
 12155  1680  3001               	movlw	1
 12156  1681  02AB               	subwf	___ftdiv@cntr,f
 12157  1682  1D03               	btfss	3,2
 12158  1683  2E61               	goto	l2984
 12159  1684  082C               	movf	___ftdiv@f3,w
 12160  1685  00F0               	movwf	___ftpack@arg
 12161  1686  082D               	movf	___ftdiv@f3+1,w
 12162  1687  00F1               	movwf	___ftpack@arg+1
 12163  1688  082E               	movf	___ftdiv@f3+2,w
 12164  1689  00F2               	movwf	___ftpack@arg+2
 12165  168A  082F               	movf	___ftdiv@exp,w
 12166  168B  00A7               	movwf	??___ftdiv
 12167  168C  0827               	movf	??___ftdiv,w
 12168  168D  00F3               	movwf	___ftpack@exp
 12169  168E  0830               	movf	___ftdiv@sign,w
 12170  168F  00A8               	movwf	??___ftdiv+1
 12171  1690  0828               	movf	??___ftdiv+1,w
 12172  1691  00F4               	movwf	___ftpack@sign
 12173  1692  3193  239A         	fcall	___ftpack
 12174  1694  0870               	movf	?___ftpack,w
 12175  1695  0020               	movlb	0	; select bank0
 12176  1696  00A1               	movwf	?___ftdiv
 12177  1697  0871               	movf	?___ftpack+1,w
 12178  1698  00A2               	movwf	?___ftdiv+1
 12179  1699  0872               	movf	?___ftpack+2,w
 12180  169A  00A3               	movwf	?___ftdiv+2
 12181  169B  0008               	return
 12182  169C                     __end_of___ftdiv:	
 12183                           
 12184                           	psect	text19
 12185  1213                     __ptext19:	
 12186 ;; *************** function _SYSTEM_Initialize *****************
 12187 ;; Defined at:
 12188 ;;		line 35 in file "system.c"
 12189 ;; Parameters:    Size  Location     Type
 12190 ;;		None
 12191 ;; Auto vars:     Size  Location     Type
 12192 ;;		None
 12193 ;; Return value:  Size  Location     Type
 12194 ;;                  1    wreg      void 
 12195 ;; Registers used:
 12196 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12197 ;; Tracked objects:
 12198 ;;		On entry : 0/0
 12199 ;;		On exit  : 0/0
 12200 ;;		Unchanged: 0/0
 12201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12204 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12205 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12206 ;;Total ram usage:        3 bytes
 12207 ;; Hardware stack levels used:    1
 12208 ;; Hardware stack levels required when called:    3
 12209 ;; This function calls:
 12210 ;;		_ADC_Initialize
 12211 ;;		_Init_Battery_State_Machine
 12212 ;;		_LCDClear
 12213 ;;		_LCDInit
 12214 ;;		_OSCILLATOR_Initialize
 12215 ;;		_PIN_MANAGER_Initialize
 12216 ;;		_PWM_Initialize
 12217 ;;		_TMR2_Initialize
 12218 ;;		_TMR4_Initialize
 12219 ;; This function is called by:
 12220 ;;		_main
 12221 ;; This function uses a non-reentrant model
 12222 ;;
 12223                           
 12224                           
 12225                           ;psect for function _SYSTEM_Initialize
 12226  1213                     _SYSTEM_Initialize:	
 12227                           
 12228                           ;system.c: 37: PIN_MANAGER_Initialize();
 12229                           
 12230                           ;incstack = 0
 12231                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12232  1213  319F  27C9  3192   	fcall	_PIN_MANAGER_Initialize
 12233                           
 12234                           ;system.c: 38: OSCILLATOR_Initialize();
 12235  1216  3180  2006  3192   	fcall	_OSCILLATOR_Initialize
 12236                           
 12237                           ;system.c: 40: ADC_Initialize();
 12238  1219  319E  26D2  3192   	fcall	_ADC_Initialize
 12239                           
 12240                           ;system.c: 41: PWM_Initialize();
 12241  121C  319E  26F1  3192   	fcall	_PWM_Initialize
 12242                           
 12243                           ;system.c: 43: TMR2_Initialize();
 12244  121F  319E  2608  3192   	fcall	_TMR2_Initialize
 12245                           
 12246                           ;system.c: 44: TMR4_Initialize();
 12247  1222  319E  2616  3192   	fcall	_TMR4_Initialize
 12248                           
 12249                           ;system.c: 45: Init_Battery_State_Machine(0);
 12250  1225  3000               	movlw	0
 12251  1226  3193  23FE  3192   	fcall	_Init_Battery_State_Machine
 12252                           
 12253                           ;system.c: 46: Init_Battery_State_Machine(1);
 12254  1229  3001               	movlw	1
 12255  122A  3193  23FE  3192   	fcall	_Init_Battery_State_Machine
 12256                           
 12257                           ;system.c: 47: LCDInit();
 12258  122D  3191  2161  3192   	fcall	_LCDInit
 12259                           
 12260                           ;system.c: 48: _delay((unsigned long)((200)*(32000000/4000.0)));
 12261  1230  3009               	movlw	9
 12262  1231  0020               	movlb	0	; select bank0
 12263  1232  00C6               	movwf	??_SYSTEM_Initialize+2
 12264  1233  301E               	movlw	30
 12265  1234  00C5               	movwf	??_SYSTEM_Initialize+1
 12266  1235  30EB               	movlw	235
 12267  1236  00C4               	movwf	??_SYSTEM_Initialize
 12268  1237                     u4537:	
 12269  1237  0BC4               	decfsz	??_SYSTEM_Initialize,f
 12270  1238  2A37               	goto	u4537
 12271  1239  0BC5               	decfsz	??_SYSTEM_Initialize+1,f
 12272  123A  2A37               	goto	u4537
 12273  123B  0BC6               	decfsz	??_SYSTEM_Initialize+2,f
 12274  123C  2A37               	goto	u4537
 12275  123D  0000               	nop
 12276                           
 12277                           ;system.c: 49: LCDClear();
 12278  123E  319F  2777  3192   	fcall	_LCDClear
 12279                           
 12280                           ;system.c: 50: _delay((unsigned long)((200)*(32000000/4000.0)));
 12281  1241  3009               	movlw	9
 12282  1242  0020               	movlb	0	; select bank0
 12283  1243  00C6               	movwf	??_SYSTEM_Initialize+2
 12284  1244  301E               	movlw	30
 12285  1245  00C5               	movwf	??_SYSTEM_Initialize+1
 12286  1246  30EB               	movlw	235
 12287  1247  00C4               	movwf	??_SYSTEM_Initialize
 12288  1248                     u4547:	
 12289  1248  0BC4               	decfsz	??_SYSTEM_Initialize,f
 12290  1249  2A48               	goto	u4547
 12291  124A  0BC5               	decfsz	??_SYSTEM_Initialize+1,f
 12292  124B  2A48               	goto	u4547
 12293  124C  0BC6               	decfsz	??_SYSTEM_Initialize+2,f
 12294  124D  2A48               	goto	u4547
 12295  124E  0000               	nop
 12296  124F  0008               	return
 12297  1250                     __end_of_SYSTEM_Initialize:	
 12298                           
 12299                           	psect	text20
 12300  1E16                     __ptext20:	
 12301 ;; *************** function _TMR4_Initialize *****************
 12302 ;; Defined at:
 12303 ;;		line 25 in file "tmr.c"
 12304 ;; Parameters:    Size  Location     Type
 12305 ;;		None
 12306 ;; Auto vars:     Size  Location     Type
 12307 ;;		None
 12308 ;; Return value:  Size  Location     Type
 12309 ;;                  1    wreg      void 
 12310 ;; Registers used:
 12311 ;;		wreg, status,2
 12312 ;; Tracked objects:
 12313 ;;		On entry : 0/0
 12314 ;;		On exit  : 0/0
 12315 ;;		Unchanged: 0/0
 12316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12321 ;;Total ram usage:        0 bytes
 12322 ;; Hardware stack levels used:    1
 12323 ;; This function calls:
 12324 ;;		Nothing
 12325 ;; This function is called by:
 12326 ;;		_SYSTEM_Initialize
 12327 ;; This function uses a non-reentrant model
 12328 ;;
 12329                           
 12330                           
 12331                           ;psect for function _TMR4_Initialize
 12332  1E16                     _TMR4_Initialize:	
 12333                           
 12334                           ;tmr.c: 27: T4CON = 0x00;
 12335                           
 12336                           ;incstack = 0
 12337                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
 12338  1E16  0025               	movlb	5	; select bank5
 12339  1E17  0194               	clrf	20	;volatile
 12340                           
 12341                           ;tmr.c: 29: T4CLKCON = 0x01;
 12342  1E18  3001               	movlw	1
 12343  1E19  0096               	movwf	22	;volatile
 12344                           
 12345                           ;tmr.c: 31: T4HLT = 0x00;
 12346  1E1A  0195               	clrf	21	;volatile
 12347                           
 12348                           ;tmr.c: 33: T4RST = 0x00;
 12349  1E1B  0197               	clrf	23	;volatile
 12350                           
 12351                           ;tmr.c: 35: T4PR = 0xFE;
 12352  1E1C  30FE               	movlw	254
 12353  1E1D  0093               	movwf	19	;volatile
 12354                           
 12355                           ;tmr.c: 39: T4TMR = 0x00;
 12356  1E1E  0192               	clrf	18	;volatile
 12357                           
 12358                           ;tmr.c: 41: PIR4bits.TMR4IF = 0;
 12359  1E1F  002E               	movlb	14	; select bank14
 12360  1E20  1190               	bcf	16,3	;volatile
 12361                           
 12362                           ;tmr.c: 43: T4CONbits.TMR4ON = 1;
 12363  1E21  0025               	movlb	5	; select bank5
 12364  1E22  1794               	bsf	20,7	;volatile
 12365  1E23  0008               	return
 12366  1E24                     __end_of_TMR4_Initialize:	
 12367                           
 12368                           	psect	text21
 12369  1E08                     __ptext21:	
 12370 ;; *************** function _TMR2_Initialize *****************
 12371 ;; Defined at:
 12372 ;;		line 3 in file "tmr.c"
 12373 ;; Parameters:    Size  Location     Type
 12374 ;;		None
 12375 ;; Auto vars:     Size  Location     Type
 12376 ;;		None
 12377 ;; Return value:  Size  Location     Type
 12378 ;;                  1    wreg      void 
 12379 ;; Registers used:
 12380 ;;		wreg, status,2
 12381 ;; Tracked objects:
 12382 ;;		On entry : 0/0
 12383 ;;		On exit  : 0/0
 12384 ;;		Unchanged: 0/0
 12385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12390 ;;Total ram usage:        0 bytes
 12391 ;; Hardware stack levels used:    1
 12392 ;; This function calls:
 12393 ;;		Nothing
 12394 ;; This function is called by:
 12395 ;;		_SYSTEM_Initialize
 12396 ;; This function uses a non-reentrant model
 12397 ;;
 12398                           
 12399                           
 12400                           ;psect for function _TMR2_Initialize
 12401  1E08                     _TMR2_Initialize:	
 12402                           
 12403                           ;tmr.c: 5: T2CON = 0x00;
 12404                           
 12405                           ;incstack = 0
 12406                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 12407  1E08  0025               	movlb	5	; select bank5
 12408  1E09  018E               	clrf	14	;volatile
 12409                           
 12410                           ;tmr.c: 7: T2CLKCON = 0x01;
 12411  1E0A  3001               	movlw	1
 12412  1E0B  0090               	movwf	16	;volatile
 12413                           
 12414                           ;tmr.c: 9: T2HLT = 0x00;
 12415  1E0C  018F               	clrf	15	;volatile
 12416                           
 12417                           ;tmr.c: 11: T2RST = 0x00;
 12418  1E0D  0191               	clrf	17	;volatile
 12419                           
 12420                           ;tmr.c: 13: T2PR = 0xFE;
 12421  1E0E  30FE               	movlw	254
 12422  1E0F  008D               	movwf	13	;volatile
 12423                           
 12424                           ;tmr.c: 18: T2TMR = 0x00;
 12425  1E10  018C               	clrf	12	;volatile
 12426                           
 12427                           ;tmr.c: 20: PIR4bits.TMR2IF = 0;
 12428  1E11  002E               	movlb	14	; select bank14
 12429  1E12  1090               	bcf	16,1	;volatile
 12430                           
 12431                           ;tmr.c: 22: T2CONbits.TMR2ON = 1;
 12432  1E13  0025               	movlb	5	; select bank5
 12433  1E14  178E               	bsf	14,7	;volatile
 12434  1E15  0008               	return
 12435  1E16                     __end_of_TMR2_Initialize:	
 12436                           
 12437                           	psect	text22
 12438  1EF1                     __ptext22:	
 12439 ;; *************** function _PWM_Initialize *****************
 12440 ;; Defined at:
 12441 ;;		line 3 in file "pwm.c"
 12442 ;; Parameters:    Size  Location     Type
 12443 ;;		None
 12444 ;; Auto vars:     Size  Location     Type
 12445 ;;		None
 12446 ;; Return value:  Size  Location     Type
 12447 ;;                  1    wreg      void 
 12448 ;; Registers used:
 12449 ;;		wreg, status,2, status,0
 12450 ;; Tracked objects:
 12451 ;;		On entry : 0/0
 12452 ;;		On exit  : 0/0
 12453 ;;		Unchanged: 0/0
 12454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12459 ;;Total ram usage:        0 bytes
 12460 ;; Hardware stack levels used:    1
 12461 ;; This function calls:
 12462 ;;		Nothing
 12463 ;; This function is called by:
 12464 ;;		_SYSTEM_Initialize
 12465 ;; This function uses a non-reentrant model
 12466 ;;
 12467                           
 12468                           
 12469                           ;psect for function _PWM_Initialize
 12470  1EF1                     _PWM_Initialize:	
 12471                           
 12472                           ;pwm.c: 5: PWM6CON = 0x80;
 12473                           
 12474                           ;incstack = 0
 12475                           ; Regs used in _PWM_Initialize: [wreg+status,2+status,0]
 12476  1EF1  3080               	movlw	128
 12477  1EF2  0027               	movlb	7	; select bank7
 12478  1EF3  008E               	movwf	14	;volatile
 12479                           
 12480                           ;pwm.c: 7: PWM6DCH = 0x00;
 12481  1EF4  018D               	clrf	13	;volatile
 12482                           
 12483                           ;pwm.c: 9: PWM6DCL = 0x00;
 12484  1EF5  018C               	clrf	12	;volatile
 12485                           
 12486                           ;pwm.c: 11: CCPTMRS1bits.P6TSEL = 0x01;
 12487  1EF6  0024               	movlb	4	; select bank4
 12488  1EF7  081F               	movf	31,w	;volatile
 12489  1EF8  39F3               	andlw	-13
 12490  1EF9  3804               	iorlw	4
 12491  1EFA  009F               	movwf	31	;volatile
 12492                           
 12493                           ;pwm.c: 14: PWM7CON = 0x80;
 12494  1EFB  3080               	movlw	128
 12495  1EFC  0027               	movlb	7	; select bank7
 12496  1EFD  0092               	movwf	18	;volatile
 12497                           
 12498                           ;pwm.c: 16: PWM7DCH = 0x00;
 12499  1EFE  0191               	clrf	17	;volatile
 12500                           
 12501                           ;pwm.c: 18: PWM7DCL = 0x00;
 12502  1EFF  0190               	clrf	16	;volatile
 12503                           
 12504                           ;pwm.c: 20: CCPTMRS1bits.P7TSEL = 0x02;
 12505  1F00  0024               	movlb	4	; select bank4
 12506  1F01  081F               	movf	31,w	;volatile
 12507  1F02  39CF               	andlw	-49
 12508  1F03  3820               	iorlw	32
 12509  1F04  009F               	movwf	31	;volatile
 12510                           
 12511                           ;pwm.c: 23: CCP1CONbits.CCP1EN = 1;
 12512  1F05  0026               	movlb	6	; select bank6
 12513  1F06  178E               	bsf	14,7	;volatile
 12514                           
 12515                           ;pwm.c: 24: CCP1CONbits.CCP1FMT = 1;
 12516  1F07  160E               	bsf	14,4	;volatile
 12517                           
 12518                           ;pwm.c: 25: CCP1CONbits.CCP1MODE = 0xF;
 12519  1F08  300F               	movlw	15
 12520  1F09  048E               	iorwf	14,f	;volatile
 12521                           
 12522                           ;pwm.c: 26: CCPTMRS0bits.C1TSEL = 0x1;
 12523  1F0A  0024               	movlb	4	; select bank4
 12524  1F0B  081E               	movf	30,w	;volatile
 12525  1F0C  39FC               	andlw	-4
 12526  1F0D  3801               	iorlw	1
 12527  1F0E  009E               	movwf	30	;volatile
 12528  1F0F  0008               	return
 12529  1F10                     __end_of_PWM_Initialize:	
 12530                           
 12531                           	psect	text23
 12532  1FC9                     __ptext23:	
 12533 ;; *************** function _PIN_MANAGER_Initialize *****************
 12534 ;; Defined at:
 12535 ;;		line 3 in file "pin_manager.c"
 12536 ;; Parameters:    Size  Location     Type
 12537 ;;		None
 12538 ;; Auto vars:     Size  Location     Type
 12539 ;;  state           1    0[COMMON] char 
 12540 ;; Return value:  Size  Location     Type
 12541 ;;                  1    wreg      void 
 12542 ;; Registers used:
 12543 ;;		wreg, status,2
 12544 ;; Tracked objects:
 12545 ;;		On entry : 0/0
 12546 ;;		On exit  : 0/0
 12547 ;;		Unchanged: 0/0
 12548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12550 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12552 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12553 ;;Total ram usage:        1 bytes
 12554 ;; Hardware stack levels used:    1
 12555 ;; This function calls:
 12556 ;;		Nothing
 12557 ;; This function is called by:
 12558 ;;		_SYSTEM_Initialize
 12559 ;; This function uses a non-reentrant model
 12560 ;;
 12561                           
 12562                           
 12563                           ;psect for function _PIN_MANAGER_Initialize
 12564  1FC9                     _PIN_MANAGER_Initialize:	
 12565                           
 12566                           ;pin_manager.c: 5: LATA = 0x20;
 12567                           
 12568                           ;incstack = 0
 12569                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 12570  1FC9  3020               	movlw	32
 12571  1FCA  0020               	movlb	0	; select bank0
 12572  1FCB  0096               	movwf	22	;volatile
 12573                           
 12574                           ;pin_manager.c: 6: LATB = 0x00;
 12575  1FCC  0197               	clrf	23	;volatile
 12576                           
 12577                           ;pin_manager.c: 7: LATC = 0x00;
 12578  1FCD  0198               	clrf	24	;volatile
 12579                           
 12580                           ;pin_manager.c: 9: WPUA = 0x00;
 12581  1FCE  003E               	movlb	30	; select bank30
 12582  1FCF  01B9               	clrf	57	;volatile
 12583                           
 12584                           ;pin_manager.c: 10: WPUB = 0x00;
 12585  1FD0  01C4               	clrf	68	;volatile
 12586                           
 12587                           ;pin_manager.c: 11: WPUC = 0x00;
 12588  1FD1  01CF               	clrf	79	;volatile
 12589                           
 12590                           ;pin_manager.c: 12: WPUE = 0x8;
 12591  1FD2  3008               	movlw	8
 12592  1FD3  00E5               	movwf	101	;volatile
 12593                           
 12594                           ;pin_manager.c: 14: TRISA = 0x00;
 12595  1FD4  0020               	movlb	0	; select bank0
 12596  1FD5  0191               	clrf	17	;volatile
 12597                           
 12598                           ;pin_manager.c: 15: TRISB = 0x0E;
 12599  1FD6  300E               	movlw	14
 12600  1FD7  0092               	movwf	18	;volatile
 12601                           
 12602                           ;pin_manager.c: 16: TRISC = 0xFF;
 12603  1FD8  30FF               	movlw	255
 12604  1FD9  0093               	movwf	19	;volatile
 12605                           
 12606                           ;pin_manager.c: 18: ANSELA = 0x00;
 12607  1FDA  003E               	movlb	30	; select bank30
 12608  1FDB  01B8               	clrf	56	;volatile
 12609                           
 12610                           ;pin_manager.c: 19: ANSELB = 0x0A;
 12611  1FDC  300A               	movlw	10
 12612  1FDD  00C3               	movwf	67	;volatile
 12613                           
 12614                           ;pin_manager.c: 20: ANSELC = 0xFF;
 12615  1FDE  30FF               	movlw	255
 12616  1FDF  00CE               	movwf	78	;volatile
 12617                           
 12618                           ;pin_manager.c: 23: PIE0bits.IOCIE = 0;
 12619  1FE0  002E               	movlb	14	; select bank14
 12620  1FE1  1216               	bcf	22,4	;volatile
 12621                           
 12622                           ;pin_manager.c: 24: int8_t state = GIE;
 12623  1FE2  3000               	movlw	0
 12624  1FE3  1B8B               	btfsc	11,7	;volatile
 12625  1FE4  3001               	movlw	1
 12626  1FE5  00F0               	movwf	PIN_MANAGER_Initialize@state
 12627                           
 12628                           ;pin_manager.c: 25: GIE = 0;
 12629  1FE6  138B               	bcf	11,7	;volatile
 12630                           
 12631                           ;pin_manager.c: 26: PPSLOCK = 0x55;
 12632  1FE7  3055               	movlw	85
 12633  1FE8  003D               	movlb	29	; select bank29
 12634  1FE9  008F               	movwf	15	;volatile
 12635                           
 12636                           ;pin_manager.c: 27: PPSLOCK = 0xAA;
 12637  1FEA  30AA               	movlw	170
 12638  1FEB  008F               	movwf	15	;volatile
 12639                           
 12640                           ;pin_manager.c: 28: PPSLOCKbits.PPSLOCKED = 0x00;
 12641  1FEC  100F               	bcf	15,0	;volatile
 12642                           
 12643                           ;pin_manager.c: 30: RA6PPS = 0x0E;
 12644  1FED  300E               	movlw	14
 12645  1FEE  003E               	movlb	30	; select bank30
 12646  1FEF  0096               	movwf	22	;volatile
 12647                           
 12648                           ;pin_manager.c: 31: RA7PPS = 0x0F;
 12649  1FF0  300F               	movlw	15
 12650  1FF1  0097               	movwf	23	;volatile
 12651                           
 12652                           ;pin_manager.c: 32: RB0PPS = 0x09;
 12653  1FF2  3009               	movlw	9
 12654  1FF3  0098               	movwf	24	;volatile
 12655                           
 12656                           ;pin_manager.c: 33: PPSLOCK = 0x55;
 12657  1FF4  3055               	movlw	85
 12658  1FF5  003D               	movlb	29	; select bank29
 12659  1FF6  008F               	movwf	15	;volatile
 12660                           
 12661                           ;pin_manager.c: 34: PPSLOCK = 0xAA;
 12662  1FF7  30AA               	movlw	170
 12663  1FF8  008F               	movwf	15	;volatile
 12664                           
 12665                           ;pin_manager.c: 35: PPSLOCKbits.PPSLOCKED = 0x01;
 12666  1FF9  140F               	bsf	15,0	;volatile
 12667                           
 12668                           ;pin_manager.c: 36: GIE = state;
 12669  1FFA  1C70               	btfss	PIN_MANAGER_Initialize@state,0
 12670  1FFB  2FFE               	goto	u3010
 12671  1FFC  178B               	bsf	11,7	;volatile
 12672  1FFD  0008               	return
 12673  1FFE                     u3010:	
 12674  1FFE  138B               	bcf	11,7	;volatile
 12675  1FFF  0008               	return
 12676  2000                     __end_of_PIN_MANAGER_Initialize:	
 12677                           
 12678                           	psect	text24
 12679  0006                     __ptext24:	
 12680 ;; *************** function _OSCILLATOR_Initialize *****************
 12681 ;; Defined at:
 12682 ;;		line 53 in file "system.c"
 12683 ;; Parameters:    Size  Location     Type
 12684 ;;		None
 12685 ;; Auto vars:     Size  Location     Type
 12686 ;;		None
 12687 ;; Return value:  Size  Location     Type
 12688 ;;                  1    wreg      void 
 12689 ;; Registers used:
 12690 ;;		wreg, status,2
 12691 ;; Tracked objects:
 12692 ;;		On entry : 0/0
 12693 ;;		On exit  : 0/0
 12694 ;;		Unchanged: 0/0
 12695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12700 ;;Total ram usage:        0 bytes
 12701 ;; Hardware stack levels used:    1
 12702 ;; This function calls:
 12703 ;;		Nothing
 12704 ;; This function is called by:
 12705 ;;		_SYSTEM_Initialize
 12706 ;; This function uses a non-reentrant model
 12707 ;;
 12708                           
 12709                           
 12710                           ;psect for function _OSCILLATOR_Initialize
 12711  0006                     _OSCILLATOR_Initialize:	
 12712                           
 12713                           ;system.c: 55: OSCCON1 = 0x60;
 12714                           
 12715                           ;incstack = 0
 12716                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 12717  0006  3060               	movlw	96
 12718  0007  0031               	movlb	17	; select bank17
 12719  0008  008D               	movwf	13	;volatile
 12720                           
 12721                           ;system.c: 56: OSCCON3 = 0x00;
 12722  0009  018F               	clrf	15	;volatile
 12723                           
 12724                           ;system.c: 57: OSCEN = 0x00;
 12725  000A  0191               	clrf	17	;volatile
 12726                           
 12727                           ;system.c: 58: OSCFRQ = 0x06;
 12728  000B  3006               	movlw	6
 12729  000C  0093               	movwf	19	;volatile
 12730                           
 12731                           ;system.c: 59: OSCTUNE = 0x00;
 12732  000D  0192               	clrf	18	;volatile
 12733  000E  0008               	return
 12734  000F                     __end_of_OSCILLATOR_Initialize:	
 12735                           
 12736                           	psect	text25
 12737  1161                     __ptext25:	
 12738 ;; *************** function _LCDInit *****************
 12739 ;; Defined at:
 12740 ;;		line 247 in file "lcd.c"
 12741 ;; Parameters:    Size  Location     Type
 12742 ;;		None
 12743 ;; Auto vars:     Size  Location     Type
 12744 ;;		None
 12745 ;; Return value:  Size  Location     Type
 12746 ;;                  1    wreg      void 
 12747 ;; Registers used:
 12748 ;;		wreg, status,2, status,0, pclath, cstack
 12749 ;; Tracked objects:
 12750 ;;		On entry : 0/0
 12751 ;;		On exit  : 0/0
 12752 ;;		Unchanged: 0/0
 12753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12756 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12757 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12758 ;;Total ram usage:        1 bytes
 12759 ;; Hardware stack levels used:    1
 12760 ;; Hardware stack levels required when called:    1
 12761 ;; This function calls:
 12762 ;;		_LCDWrite
 12763 ;; This function is called by:
 12764 ;;		_SYSTEM_Initialize
 12765 ;;		_main
 12766 ;; This function uses a non-reentrant model
 12767 ;;
 12768                           
 12769                           
 12770                           ;psect for function _LCDInit
 12771  1161                     _LCDInit:	
 12772                           
 12773                           ;lcd.c: 249: TRISAbits.TRISA0 = 0;
 12774                           
 12775                           ;incstack = 0
 12776                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
 12777  1161  0020               	movlb	0	; select bank0
 12778  1162  1011               	bcf	17,0	;volatile
 12779                           
 12780                           ;lcd.c: 250: TRISAbits.TRISA1 = 0;
 12781  1163  1091               	bcf	17,1	;volatile
 12782                           
 12783                           ;lcd.c: 251: TRISAbits.TRISA2 = 0;
 12784  1164  1111               	bcf	17,2	;volatile
 12785                           
 12786                           ;lcd.c: 252: TRISAbits.TRISA3 = 0;
 12787  1165  1191               	bcf	17,3	;volatile
 12788                           
 12789                           ;lcd.c: 253: TRISAbits.TRISA4 = 0;
 12790  1166  1211               	bcf	17,4	;volatile
 12791                           
 12792                           ;lcd.c: 254: LATAbits.LATA3 = 0;
 12793  1167  1196               	bcf	22,3	;volatile
 12794                           
 12795                           ;lcd.c: 255: LATAbits.LATA4 = 0;
 12796  1168  1216               	bcf	22,4	;volatile
 12797                           
 12798                           ;lcd.c: 256: LATAbits.LATA2 = 0;
 12799  1169  1116               	bcf	22,2	;volatile
 12800                           
 12801                           ;lcd.c: 257: LATAbits.LATA0 = 0;
 12802  116A  1016               	bcf	22,0	;volatile
 12803                           
 12804                           ;lcd.c: 259: LATAbits.LATA0 = 1;
 12805  116B  1416               	bsf	22,0	;volatile
 12806                           
 12807                           ;lcd.c: 261: LCDWrite(0, 0x21);
 12808  116C  3021               	movlw	33
 12809  116D  00F5               	movwf	??_LCDInit
 12810  116E  0875               	movf	??_LCDInit,w
 12811  116F  00F0               	movwf	LCDWrite@data
 12812  1170  3000               	movlw	0
 12813  1171  319F  2752  3191   	fcall	_LCDWrite
 12814                           
 12815                           ;lcd.c: 269: LCDWrite(0, 0XB9);
 12816  1174  30B9               	movlw	185
 12817  1175  00F5               	movwf	??_LCDInit
 12818  1176  0875               	movf	??_LCDInit,w
 12819  1177  00F0               	movwf	LCDWrite@data
 12820  1178  3000               	movlw	0
 12821  1179  319F  2752  3191   	fcall	_LCDWrite
 12822                           
 12823                           ;lcd.c: 271: LCDWrite(0, 0x04);
 12824  117C  3004               	movlw	4
 12825  117D  00F5               	movwf	??_LCDInit
 12826  117E  0875               	movf	??_LCDInit,w
 12827  117F  00F0               	movwf	LCDWrite@data
 12828  1180  3000               	movlw	0
 12829  1181  319F  2752  3191   	fcall	_LCDWrite
 12830                           
 12831                           ;lcd.c: 273: LCDWrite(0, 0x14);
 12832  1184  3014               	movlw	20
 12833  1185  00F5               	movwf	??_LCDInit
 12834  1186  0875               	movf	??_LCDInit,w
 12835  1187  00F0               	movwf	LCDWrite@data
 12836  1188  3000               	movlw	0
 12837  1189  319F  2752  3191   	fcall	_LCDWrite
 12838                           
 12839                           ;lcd.c: 275: LCDWrite(0, 0x20);
 12840  118C  3020               	movlw	32
 12841  118D  00F5               	movwf	??_LCDInit
 12842  118E  0875               	movf	??_LCDInit,w
 12843  118F  00F0               	movwf	LCDWrite@data
 12844  1190  3000               	movlw	0
 12845  1191  319F  2752  3191   	fcall	_LCDWrite
 12846                           
 12847                           ;lcd.c: 277: LCDWrite(0, 0x0C);
 12848  1194  300C               	movlw	12
 12849  1195  00F5               	movwf	??_LCDInit
 12850  1196  0875               	movf	??_LCDInit,w
 12851  1197  00F0               	movwf	LCDWrite@data
 12852  1198  3000               	movlw	0
 12853  1199  319F  2752         	fcall	_LCDWrite
 12854  119B  0008               	return
 12855  119C                     __end_of_LCDInit:	
 12856                           
 12857                           	psect	text26
 12858  1F77                     __ptext26:	
 12859 ;; *************** function _LCDClear *****************
 12860 ;; Defined at:
 12861 ;;		line 182 in file "lcd.c"
 12862 ;; Parameters:    Size  Location     Type
 12863 ;;		None
 12864 ;; Auto vars:     Size  Location     Type
 12865 ;;  index           2    9[COMMON] int 
 12866 ;; Return value:  Size  Location     Type
 12867 ;;                  1    wreg      void 
 12868 ;; Registers used:
 12869 ;;		wreg, status,2, status,0, pclath, cstack
 12870 ;; Tracked objects:
 12871 ;;		On entry : 0/0
 12872 ;;		On exit  : 0/0
 12873 ;;		Unchanged: 0/0
 12874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12876 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12877 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12878 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12879 ;;Total ram usage:        3 bytes
 12880 ;; Hardware stack levels used:    1
 12881 ;; Hardware stack levels required when called:    2
 12882 ;; This function calls:
 12883 ;;		_LCDWrite
 12884 ;;		_gotoXY
 12885 ;; This function is called by:
 12886 ;;		_SYSTEM_Initialize
 12887 ;;		_main
 12888 ;; This function uses a non-reentrant model
 12889 ;;
 12890                           
 12891                           
 12892                           ;psect for function _LCDClear
 12893  1F77                     _LCDClear:	
 12894                           
 12895                           ;lcd.c: 184: int index;
 12896                           ;lcd.c: 185: for (index = 0 ; index < (84 * 48 / 8) ; index++)
 12897                           
 12898                           ;incstack = 0
 12899                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
 12900  1F77  01F9               	clrf	LCDClear@index
 12901  1F78  01FA               	clrf	LCDClear@index+1
 12902  1F79  087A               	movf	LCDClear@index+1,w
 12903  1F7A  3A80               	xorlw	128
 12904  1F7B  00F8               	movwf	??_LCDClear
 12905  1F7C  3081               	movlw	129
 12906  1F7D  0278               	subwf	??_LCDClear,w
 12907  1F7E  1D03               	skipz
 12908  1F7F  2F82               	goto	u2995
 12909  1F80  30F8               	movlw	248
 12910  1F81  0279               	subwf	LCDClear@index,w
 12911  1F82                     u2995:	
 12912  1F82  1803               	btfsc	3,0
 12913  1F83  2F98               	goto	l2744
 12914  1F84                     l2738:	
 12915                           
 12916                           ;lcd.c: 186: LCDWrite(1, 0x00);
 12917  1F84  01F0               	clrf	LCDWrite@data
 12918  1F85  3001               	movlw	1
 12919  1F86  319F  2752  319F   	fcall	_LCDWrite
 12920  1F89  3001               	movlw	1
 12921  1F8A  07F9               	addwf	LCDClear@index,f
 12922  1F8B  3000               	movlw	0
 12923  1F8C  3DFA               	addwfc	LCDClear@index+1,f
 12924  1F8D  087A               	movf	LCDClear@index+1,w
 12925  1F8E  3A80               	xorlw	128
 12926  1F8F  00F8               	movwf	??_LCDClear
 12927  1F90  3081               	movlw	129
 12928  1F91  0278               	subwf	??_LCDClear,w
 12929  1F92  1D03               	skipz
 12930  1F93  2F96               	goto	u3005
 12931  1F94  30F8               	movlw	248
 12932  1F95  0279               	subwf	LCDClear@index,w
 12933  1F96                     u3005:	
 12934  1F96  1C03               	skipc
 12935  1F97  2F84               	goto	l2738
 12936  1F98                     l2744:	
 12937                           
 12938                           ;lcd.c: 187: gotoXY(0, 0);
 12939  1F98  01F5               	clrf	gotoXY@y
 12940  1F99  3000               	movlw	0
 12941  1F9A  319E  2645         	fcall	_gotoXY
 12942  1F9C  0008               	return
 12943  1F9D                     __end_of_LCDClear:	
 12944                           
 12945                           	psect	text27
 12946  1E45                     __ptext27:	
 12947 ;; *************** function _gotoXY *****************
 12948 ;; Defined at:
 12949 ;;		line 124 in file "lcd.c"
 12950 ;; Parameters:    Size  Location     Type
 12951 ;;  x               1    wreg     unsigned char 
 12952 ;;  y               1    5[COMMON] unsigned char 
 12953 ;; Auto vars:     Size  Location     Type
 12954 ;;  x               1    7[COMMON] unsigned char 
 12955 ;; Return value:  Size  Location     Type
 12956 ;;                  1    wreg      void 
 12957 ;; Registers used:
 12958 ;;		wreg, status,2, status,0, pclath, cstack
 12959 ;; Tracked objects:
 12960 ;;		On entry : 0/0
 12961 ;;		On exit  : 0/0
 12962 ;;		Unchanged: 0/0
 12963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12964 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12965 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12966 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12967 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12968 ;;Total ram usage:        3 bytes
 12969 ;; Hardware stack levels used:    1
 12970 ;; Hardware stack levels required when called:    1
 12971 ;; This function calls:
 12972 ;;		_LCDWrite
 12973 ;; This function is called by:
 12974 ;;		_LCDClear
 12975 ;;		_main
 12976 ;; This function uses a non-reentrant model
 12977 ;;
 12978                           
 12979                           
 12980                           ;psect for function _gotoXY
 12981  1E45                     _gotoXY:	
 12982                           
 12983                           ;incstack = 0
 12984                           ; Regs used in _gotoXY: [wreg+status,2+status,0+pclath+cstack]
 12985                           ;gotoXY@x stored from wreg
 12986  1E45  00F7               	movwf	gotoXY@x
 12987                           
 12988                           ;lcd.c: 126: LCDWrite(0,(uint8_t)(0x80 | x));
 12989  1E46  0877               	movf	gotoXY@x,w
 12990  1E47  3880               	iorlw	128
 12991  1E48  00F6               	movwf	??_gotoXY
 12992  1E49  0876               	movf	??_gotoXY,w
 12993  1E4A  00F0               	movwf	LCDWrite@data
 12994  1E4B  3000               	movlw	0
 12995  1E4C  319F  2752  319E   	fcall	_LCDWrite
 12996                           
 12997                           ;lcd.c: 127: LCDWrite(0,(uint8_t)(0x40 | y));
 12998  1E4F  0875               	movf	gotoXY@y,w
 12999  1E50  3840               	iorlw	64
 13000  1E51  00F6               	movwf	??_gotoXY
 13001  1E52  0876               	movf	??_gotoXY,w
 13002  1E53  00F0               	movwf	LCDWrite@data
 13003  1E54  3000               	movlw	0
 13004  1E55  319F  2752         	fcall	_LCDWrite
 13005  1E57  0008               	return
 13006  1E58                     __end_of_gotoXY:	
 13007                           
 13008                           	psect	text28
 13009  13FE                     __ptext28:	
 13010 ;; *************** function _Init_Battery_State_Machine *****************
 13011 ;; Defined at:
 13012 ;;		line 21 in file "battery_charger.c"
 13013 ;; Parameters:    Size  Location     Type
 13014 ;;  z               1    wreg     unsigned char 
 13015 ;; Auto vars:     Size  Location     Type
 13016 ;;  z               1   35[BANK0 ] unsigned char 
 13017 ;; Return value:  Size  Location     Type
 13018 ;;                  1    wreg      void 
 13019 ;; Registers used:
 13020 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13021 ;; Tracked objects:
 13022 ;;		On entry : 0/0
 13023 ;;		On exit  : 0/0
 13024 ;;		Unchanged: 0/0
 13025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13027 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13028 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13029 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13030 ;;Total ram usage:        5 bytes
 13031 ;; Hardware stack levels used:    1
 13032 ;; Hardware stack levels required when called:    2
 13033 ;; This function calls:
 13034 ;;		___awtoft
 13035 ;;		___ftmul
 13036 ;;		___fttol
 13037 ;; This function is called by:
 13038 ;;		_SYSTEM_Initialize
 13039 ;; This function uses a non-reentrant model
 13040 ;;
 13041                           
 13042                           
 13043                           ;psect for function _Init_Battery_State_Machine
 13044  13FE                     _Init_Battery_State_Machine:	
 13045                           
 13046                           ;incstack = 0
 13047                           ; Regs used in _Init_Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13048                           ;Init_Battery_State_Machine@z stored from wreg
 13049  13FE  0020               	movlb	0	; select bank0
 13050  13FF  00C3               	movwf	Init_Battery_State_Machine@z
 13051                           
 13052                           ;battery_charger.c: 23: batteryState[z] =PRECHARGE;
 13053  1400  3003               	movlw	3
 13054  1401  00BF               	movwf	??_Init_Battery_State_Machine
 13055  1402  0843               	movf	Init_Battery_State_Machine@z,w
 13056  1403  3E68               	addlw	(low (_batteryState| 0))& (0+255)
 13057  1404  0086               	movwf	6
 13058  1405  0187               	clrf	7
 13059  1406  083F               	movf	??_Init_Battery_State_Machine,w
 13060  1407  0081               	movwf	1
 13061                           
 13062                           ;battery_charger.c: 24: stateCounter[z] =5;
 13063  1408  3543               	lslf	Init_Battery_State_Machine@z,w
 13064  1409  3EB4               	addlw	(low (_stateCounter| 0))& (0+255)
 13065  140A  0086               	movwf	6
 13066  140B  0187               	clrf	7
 13067  140C  3005               	movlw	5
 13068  140D  3FC0               	movwi [0]fsr1
 13069  140E  3000               	movlw	0
 13070  140F  3FC1               	movwi [1]fsr1
 13071                           
 13072                           ;battery_charger.c: 25: Iref[z] =10;
 13073  1410  3543               	lslf	Init_Battery_State_Machine@z,w
 13074  1411  3EAC               	addlw	(low (_Iref| 0))& (0+255)
 13075  1412  0086               	movwf	6
 13076  1413  0187               	clrf	7
 13077  1414  300A               	movlw	10
 13078  1415  3FC0               	movwi [0]fsr1
 13079  1416  3000               	movlw	0
 13080  1417  3FC1               	movwi [1]fsr1
 13081                           
 13082                           ;battery_charger.c: 26: Vref[z] =1425+(int16_t)((250-batteryTemp)*.24);
 13083  1418  096E               	comf	_batteryTemp,w
 13084  1419  00BF               	movwf	??_Init_Battery_State_Machine
 13085  141A  096F               	comf	_batteryTemp+1,w
 13086  141B  00C0               	movwf	??_Init_Battery_State_Machine+1
 13087  141C  0ABF               	incf	??_Init_Battery_State_Machine,f
 13088  141D  1903               	skipnz
 13089  141E  0AC0               	incf	??_Init_Battery_State_Machine+1,f
 13090  141F  083F               	movf	??_Init_Battery_State_Machine,w
 13091  1420  3EFA               	addlw	250
 13092  1421  00F9               	movwf	___awtoft@c
 13093  1422  3000               	movlw	0
 13094  1423  3D40               	addwfc	??_Init_Battery_State_Machine+1,w
 13095  1424  00FA               	movwf	___awtoft@c+1
 13096  1425  319F  2710  3193   	fcall	___awtoft
 13097  1428  0879               	movf	?___awtoft,w
 13098  1429  0020               	movlb	0	; select bank0
 13099  142A  00A4               	movwf	___ftmul@f2
 13100  142B  087A               	movf	?___awtoft+1,w
 13101  142C  00A5               	movwf	___ftmul@f2+1
 13102  142D  087B               	movf	?___awtoft+2,w
 13103  142E  00A6               	movwf	___ftmul@f2+2
 13104  142F  30C3               	movlw	195
 13105  1430  00A1               	movwf	___ftmul@f1
 13106  1431  3075               	movlw	117
 13107  1432  00A2               	movwf	___ftmul@f1+1
 13108  1433  303E               	movlw	62
 13109  1434  00A3               	movwf	___ftmul@f1+2
 13110  1435  3197  274C  3193   	fcall	___ftmul
 13111  1438  0020               	movlb	0	; select bank0
 13112  1439  0821               	movf	?___ftmul,w
 13113  143A  00B1               	movwf	___fttol@f1
 13114  143B  0822               	movf	?___ftmul+1,w
 13115  143C  00B2               	movwf	___fttol@f1+1
 13116  143D  0823               	movf	?___ftmul+2,w
 13117  143E  00B3               	movwf	___fttol@f1+2
 13118  143F  3194  24E4         	fcall	___fttol
 13119  1441  0020               	movlb	0	; select bank0
 13120  1442  0831               	movf	?___fttol,w
 13121  1443  3E91               	addlw	145
 13122  1444  00C1               	movwf	??_Init_Battery_State_Machine+2
 13123  1445  3005               	movlw	5
 13124  1446  3D32               	addwfc	?___fttol+1,w
 13125  1447  00C2               	movwf	??_Init_Battery_State_Machine+3
 13126  1448  3543               	lslf	Init_Battery_State_Machine@z,w
 13127  1449  3EB0               	addlw	(low (_Vref| 0))& (0+255)
 13128  144A  0086               	movwf	6
 13129  144B  0187               	clrf	7
 13130  144C  0841               	movf	??_Init_Battery_State_Machine+2,w
 13131  144D  3FC0               	movwi [0]fsr1
 13132  144E  0842               	movf	??_Init_Battery_State_Machine+3,w
 13133  144F  3FC1               	movwi [1]fsr1
 13134                           
 13135                           ;battery_charger.c: 27: Imin[z] =15;
 13136  1450  3543               	lslf	Init_Battery_State_Machine@z,w
 13137  1451  3E55               	addlw	(low (_Imin| (0+256)))& (0+255)
 13138  1452  0086               	movwf	6
 13139  1453  3001               	movlw	1	; select bank2/3
 13140  1454  0087               	movwf	7
 13141  1455  300F               	movlw	15
 13142  1456  3FC0               	movwi [0]fsr1
 13143  1457  3000               	movlw	0
 13144  1458  3FC1               	movwi [1]fsr1
 13145                           
 13146                           ;battery_charger.c: 28: IminCount[z] = 600;
 13147  1459  3543               	lslf	Init_Battery_State_Machine@z,w
 13148  145A  3EA8               	addlw	(low (_IminCount| 0))& (0+255)
 13149  145B  0086               	movwf	6
 13150  145C  0187               	clrf	7
 13151  145D  3058               	movlw	88
 13152  145E  3FC0               	movwi [0]fsr1
 13153  145F  3002               	movlw	2
 13154  1460  3FC1               	movwi [1]fsr1
 13155  1461  0008               	return
 13156  1462                     __end_of_Init_Battery_State_Machine:	
 13157                           
 13158                           	psect	text29
 13159  1ED2                     __ptext29:	
 13160 ;; *************** function _ADC_Initialize *****************
 13161 ;; Defined at:
 13162 ;;		line 138 in file "adc.c"
 13163 ;; Parameters:    Size  Location     Type
 13164 ;;		None
 13165 ;; Auto vars:     Size  Location     Type
 13166 ;;		None
 13167 ;; Return value:  Size  Location     Type
 13168 ;;                  1    wreg      void 
 13169 ;; Registers used:
 13170 ;;		wreg, status,2
 13171 ;; Tracked objects:
 13172 ;;		On entry : 0/0
 13173 ;;		On exit  : 0/0
 13174 ;;		Unchanged: 0/0
 13175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13180 ;;Total ram usage:        0 bytes
 13181 ;; Hardware stack levels used:    1
 13182 ;; This function calls:
 13183 ;;		Nothing
 13184 ;; This function is called by:
 13185 ;;		_SYSTEM_Initialize
 13186 ;; This function uses a non-reentrant model
 13187 ;;
 13188                           
 13189                           
 13190                           ;psect for function _ADC_Initialize
 13191  1ED2                     _ADC_Initialize:	
 13192                           
 13193                           ;adc.c: 140: ADCON1 = 0x00;
 13194                           
 13195                           ;incstack = 0
 13196                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 13197  1ED2  0021               	movlb	1	; select bank1
 13198  1ED3  0194               	clrf	20	;volatile
 13199                           
 13200                           ;adc.c: 142: ADCON2 = 0x00;
 13201  1ED4  0195               	clrf	21	;volatile
 13202                           
 13203                           ;adc.c: 144: ADCON3 = 0x00;
 13204  1ED5  0196               	clrf	22	;volatile
 13205                           
 13206                           ;adc.c: 146: ADACT = 0x00;
 13207  1ED6  0199               	clrf	25	;volatile
 13208                           
 13209                           ;adc.c: 148: ADSTAT = 0x00;
 13210  1ED7  0197               	clrf	23	;volatile
 13211                           
 13212                           ;adc.c: 150: FVRCON = 0b11000011;
 13213  1ED8  30C3               	movlw	195
 13214  1ED9  0032               	movlb	18	; select bank18
 13215  1EDA  008C               	movwf	12	;volatile
 13216                           
 13217                           ;adc.c: 151: ADCLK = 0x3F;
 13218  1EDB  303F               	movlw	63
 13219  1EDC  0021               	movlb	1	; select bank1
 13220  1EDD  0098               	movwf	24	;volatile
 13221                           
 13222                           ;adc.c: 158: ADREF = 0x03;
 13223  1EDE  3003               	movlw	3
 13224  1EDF  009A               	movwf	26	;volatile
 13225                           
 13226                           ;adc.c: 161: ADCAP = 0x00;
 13227  1EE0  019B               	clrf	27	;volatile
 13228                           
 13229                           ;adc.c: 164: ADPRE = 0x07;
 13230  1EE1  3007               	movlw	7
 13231  1EE2  009C               	movwf	28	;volatile
 13232                           
 13233                           ;adc.c: 166: ADACQ = 0x00;
 13234  1EE3  019D               	clrf	29	;volatile
 13235                           
 13236                           ;adc.c: 168: ADPCH = 0x00;
 13237  1EE4  019E               	clrf	30	;volatile
 13238                           
 13239                           ;adc.c: 170: ADRPT = 0x00;
 13240  1EE5  0022               	movlb	2	; select bank2
 13241  1EE6  018D               	clrf	13	;volatile
 13242                           
 13243                           ;adc.c: 172: ADLTHL = 0x00;
 13244  1EE7  018E               	clrf	14	;volatile
 13245                           
 13246                           ;adc.c: 174: ADLTHH = 0x00;
 13247  1EE8  018F               	clrf	15	;volatile
 13248                           
 13249                           ;adc.c: 176: ADUTHL = 0x00;
 13250  1EE9  0190               	clrf	16	;volatile
 13251                           
 13252                           ;adc.c: 178: ADUTHH = 0x00;
 13253  1EEA  0191               	clrf	17	;volatile
 13254                           
 13255                           ;adc.c: 180: ADSTPTL = 0x00;
 13256  1EEB  0192               	clrf	18	;volatile
 13257                           
 13258                           ;adc.c: 182: ADSTPTH = 0x00;
 13259  1EEC  0193               	clrf	19	;volatile
 13260                           
 13261                           ;adc.c: 184: ADCON0 = 0x84;
 13262  1EED  3084               	movlw	132
 13263  1EEE  0021               	movlb	1	; select bank1
 13264  1EEF  0093               	movwf	19	;volatile
 13265  1EF0  0008               	return
 13266  1EF1                     __end_of_ADC_Initialize:	
 13267                           
 13268                           	psect	text30
 13269  114B                     __ptext30:	
 13270 ;; *************** function _PWM7_LoadDutyValue *****************
 13271 ;; Defined at:
 13272 ;;		line 37 in file "pwm.c"
 13273 ;; Parameters:    Size  Location     Type
 13274 ;;  dutyCycle7      2    0[COMMON] unsigned int 
 13275 ;; Auto vars:     Size  Location     Type
 13276 ;;		None
 13277 ;; Return value:  Size  Location     Type
 13278 ;;                  1    wreg      void 
 13279 ;; Registers used:
 13280 ;;		wreg, status,2, status,0
 13281 ;; Tracked objects:
 13282 ;;		On entry : 0/0
 13283 ;;		On exit  : 0/0
 13284 ;;		Unchanged: 0/0
 13285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13286 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13288 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13289 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13290 ;;Total ram usage:        4 bytes
 13291 ;; Hardware stack levels used:    1
 13292 ;; This function calls:
 13293 ;;		Nothing
 13294 ;; This function is called by:
 13295 ;;		_main
 13296 ;; This function uses a non-reentrant model
 13297 ;;
 13298                           
 13299                           
 13300                           ;psect for function _PWM7_LoadDutyValue
 13301  114B                     _PWM7_LoadDutyValue:	
 13302                           
 13303                           ;pwm.c: 39: PWM7DCH = (dutyCycle7 & 0x03FC)>>2;
 13304                           
 13305                           ;incstack = 0
 13306                           ; Regs used in _PWM7_LoadDutyValue: [wreg+status,2+status,0]
 13307  114B  0871               	movf	PWM7_LoadDutyValue@dutyCycle7+1,w
 13308  114C  00F3               	movwf	??_PWM7_LoadDutyValue+1
 13309  114D  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 13310  114E  00F2               	movwf	??_PWM7_LoadDutyValue
 13311  114F  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 13312  1150  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 13313  1151  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 13314  1152  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 13315  1153  0872               	movf	??_PWM7_LoadDutyValue,w
 13316  1154  0027               	movlb	7	; select bank7
 13317  1155  0091               	movwf	17	;volatile
 13318                           
 13319                           ;pwm.c: 41: PWM7DCL = (dutyCycle7 & 0x0003)<<6;
 13320  1156  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 13321  1157  3903               	andlw	3
 13322  1158  00F2               	movwf	??_PWM7_LoadDutyValue
 13323  1159  3005               	movlw	5
 13324  115A                     u4015:	
 13325  115A  35F2               	lslf	??_PWM7_LoadDutyValue,f
 13326  115B  3EFF               	addlw	-1
 13327  115C  1D03               	skipz
 13328  115D  295A               	goto	u4015
 13329  115E  3572               	lslf	??_PWM7_LoadDutyValue,w
 13330  115F  0090               	movwf	16	;volatile
 13331  1160  0008               	return
 13332  1161                     __end_of_PWM7_LoadDutyValue:	
 13333                           
 13334                           	psect	text31
 13335  1E83                     __ptext31:	
 13336 ;; *************** function _PWM6_LoadDutyValue *****************
 13337 ;; Defined at:
 13338 ;;		line 30 in file "pwm.c"
 13339 ;; Parameters:    Size  Location     Type
 13340 ;;  dutyCycle6      2    0[COMMON] unsigned int 
 13341 ;; Auto vars:     Size  Location     Type
 13342 ;;		None
 13343 ;; Return value:  Size  Location     Type
 13344 ;;                  1    wreg      void 
 13345 ;; Registers used:
 13346 ;;		wreg, status,2, status,0
 13347 ;; Tracked objects:
 13348 ;;		On entry : 0/0
 13349 ;;		On exit  : 0/0
 13350 ;;		Unchanged: 0/0
 13351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13352 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13354 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13355 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13356 ;;Total ram usage:        4 bytes
 13357 ;; Hardware stack levels used:    1
 13358 ;; This function calls:
 13359 ;;		Nothing
 13360 ;; This function is called by:
 13361 ;;		_main
 13362 ;; This function uses a non-reentrant model
 13363 ;;
 13364                           
 13365                           
 13366                           ;psect for function _PWM6_LoadDutyValue
 13367  1E83                     _PWM6_LoadDutyValue:	
 13368                           
 13369                           ;pwm.c: 32: PWM6DCH = (dutyCycle6 & 0x03FC)>>2;
 13370                           
 13371                           ;incstack = 0
 13372                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 13373  1E83  0871               	movf	PWM6_LoadDutyValue@dutyCycle6+1,w
 13374  1E84  00F3               	movwf	??_PWM6_LoadDutyValue+1
 13375  1E85  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 13376  1E86  00F2               	movwf	??_PWM6_LoadDutyValue
 13377  1E87  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13378  1E88  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13379  1E89  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13380  1E8A  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13381  1E8B  0872               	movf	??_PWM6_LoadDutyValue,w
 13382  1E8C  0027               	movlb	7	; select bank7
 13383  1E8D  008D               	movwf	13	;volatile
 13384                           
 13385                           ;pwm.c: 34: PWM6DCL = (dutyCycle6 & 0x0003)<<6;
 13386  1E8E  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 13387  1E8F  3903               	andlw	3
 13388  1E90  00F2               	movwf	??_PWM6_LoadDutyValue
 13389  1E91  3005               	movlw	5
 13390  1E92                     u4005:	
 13391  1E92  35F2               	lslf	??_PWM6_LoadDutyValue,f
 13392  1E93  3EFF               	addlw	-1
 13393  1E94  1D03               	skipz
 13394  1E95  2E92               	goto	u4005
 13395  1E96  3572               	lslf	??_PWM6_LoadDutyValue,w
 13396  1E97  008C               	movwf	12	;volatile
 13397  1E98  0008               	return
 13398  1E99                     __end_of_PWM6_LoadDutyValue:	
 13399                           
 13400                           	psect	text32
 13401  1E6D                     __ptext32:	
 13402 ;; *************** function _PWM1_LoadDutyValue *****************
 13403 ;; Defined at:
 13404 ;;		line 44 in file "pwm.c"
 13405 ;; Parameters:    Size  Location     Type
 13406 ;;  dutyCycle1      2    0[COMMON] unsigned int 
 13407 ;; Auto vars:     Size  Location     Type
 13408 ;;		None
 13409 ;; Return value:  Size  Location     Type
 13410 ;;                  1    wreg      void 
 13411 ;; Registers used:
 13412 ;;		wreg, status,2, status,0
 13413 ;; Tracked objects:
 13414 ;;		On entry : 0/0
 13415 ;;		On exit  : 0/0
 13416 ;;		Unchanged: 0/0
 13417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13418 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13420 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13421 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13422 ;;Total ram usage:        4 bytes
 13423 ;; Hardware stack levels used:    1
 13424 ;; This function calls:
 13425 ;;		Nothing
 13426 ;; This function is called by:
 13427 ;;		_main
 13428 ;; This function uses a non-reentrant model
 13429 ;;
 13430                           
 13431                           
 13432                           ;psect for function _PWM1_LoadDutyValue
 13433  1E6D                     _PWM1_LoadDutyValue:	
 13434                           
 13435                           ;pwm.c: 46: CCPR1H = (dutyCycle1& 0x03FC)>>2;
 13436                           
 13437                           ;incstack = 0
 13438                           ; Regs used in _PWM1_LoadDutyValue: [wreg+status,2+status,0]
 13439  1E6D  0871               	movf	PWM1_LoadDutyValue@dutyCycle1+1,w
 13440  1E6E  00F3               	movwf	??_PWM1_LoadDutyValue+1
 13441  1E6F  0870               	movf	PWM1_LoadDutyValue@dutyCycle1,w
 13442  1E70  00F2               	movwf	??_PWM1_LoadDutyValue
 13443  1E71  36F3               	lsrf	??_PWM1_LoadDutyValue+1,f
 13444  1E72  0CF2               	rrf	??_PWM1_LoadDutyValue,f
 13445  1E73  36F3               	lsrf	??_PWM1_LoadDutyValue+1,f
 13446  1E74  0CF2               	rrf	??_PWM1_LoadDutyValue,f
 13447  1E75  0872               	movf	??_PWM1_LoadDutyValue,w
 13448  1E76  0026               	movlb	6	; select bank6
 13449  1E77  008D               	movwf	13	;volatile
 13450                           
 13451                           ;pwm.c: 47: CCPR1L = (dutyCycle1 & 0x0003)<<6;
 13452  1E78  0870               	movf	PWM1_LoadDutyValue@dutyCycle1,w
 13453  1E79  3903               	andlw	3
 13454  1E7A  00F2               	movwf	??_PWM1_LoadDutyValue
 13455  1E7B  3005               	movlw	5
 13456  1E7C                     u4025:	
 13457  1E7C  35F2               	lslf	??_PWM1_LoadDutyValue,f
 13458  1E7D  3EFF               	addlw	-1
 13459  1E7E  1D03               	skipz
 13460  1E7F  2E7C               	goto	u4025
 13461  1E80  3572               	lslf	??_PWM1_LoadDutyValue,w
 13462  1E81  008C               	movwf	12	;volatile
 13463  1E82  0008               	return
 13464  1E83                     __end_of_PWM1_LoadDutyValue:	
 13465                           
 13466                           	psect	text33
 13467  0803                     __ptext33:	
 13468 ;; *************** function _LCDWriteInt *****************
 13469 ;; Defined at:
 13470 ;;		line 190 in file "lcd.c"
 13471 ;; Parameters:    Size  Location     Type
 13472 ;;  value           2   31[BANK0 ] int 
 13473 ;;  fieldLength     1   33[BANK0 ] char 
 13474 ;;  numPlaces       1   34[BANK0 ] unsigned char 
 13475 ;;  sign            1   35[BANK0 ] unsigned char 
 13476 ;; Auto vars:     Size  Location     Type
 13477 ;;  str             5   40[BANK0 ] unsigned char [5]
 13478 ;;  i               1   46[BANK0 ] unsigned char 
 13479 ;;  j               1   45[BANK0 ] unsigned char 
 13480 ;; Return value:  Size  Location     Type
 13481 ;;                  1    wreg      void 
 13482 ;; Registers used:
 13483 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13484 ;; Tracked objects:
 13485 ;;		On entry : 0/0
 13486 ;;		On exit  : 0/0
 13487 ;;		Unchanged: 0/0
 13488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13489 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13490 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13491 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13492 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13493 ;;Total ram usage:       16 bytes
 13494 ;; Hardware stack levels used:    1
 13495 ;; Hardware stack levels required when called:    2
 13496 ;; This function calls:
 13497 ;;		_LCDWriteCharacter
 13498 ;;		___awdiv
 13499 ;;		___lwmod
 13500 ;; This function is called by:
 13501 ;;		_main
 13502 ;; This function uses a non-reentrant model
 13503 ;;
 13504                           
 13505                           
 13506                           ;psect for function _LCDWriteInt
 13507  0803                     _LCDWriteInt:	
 13508                           
 13509                           ;lcd.c: 192: uint8_t str[5]={0,0,0,0,0};
 13510                           
 13511                           ;incstack = 0
 13512                           ; Regs used in _LCDWriteInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13513  0803  3050               	movlw	low LCDWriteInt@F13692
 13514  0804  0086               	movwf	6
 13515  0805  3001               	movlw	high LCDWriteInt@F13692
 13516  0806  0087               	movwf	7
 13517  0807  3048               	movlw	low LCDWriteInt@str
 13518  0808  0084               	movwf	4
 13519  0809  3000               	movlw	high LCDWriteInt@str
 13520  080A  0085               	movwf	5
 13521  080B  3005               	movlw	5
 13522  080C  0020               	movlb	0	; select bank0
 13523  080D  00C4               	movwf	??_LCDWriteInt
 13524  080E                     u3910:	
 13525  080E  0016               	moviw fsr1++
 13526  080F  001A               	movwi fsr0++
 13527  0810  0BC4               	decfsz	??_LCDWriteInt,f
 13528  0811  280E               	goto	u3910
 13529                           
 13530                           ;lcd.c: 193: uint8_t i=4,j=0;
 13531  0812  3004               	movlw	4
 13532  0813  00C4               	movwf	??_LCDWriteInt
 13533  0814  0844               	movf	??_LCDWriteInt,w
 13534  0815  00CE               	movwf	LCDWriteInt@i
 13535  0816  01CD               	clrf	LCDWriteInt@j
 13536                           
 13537                           ;lcd.c: 195: if(value<0)
 13538  0817  1FC0               	btfss	LCDWriteInt@value+1,7
 13539  0818  2824               	goto	l3216
 13540                           
 13541                           ;lcd.c: 196: {
 13542                           ;lcd.c: 197: LCDWriteCharacter('-');
 13543  0819  302D               	movlw	45
 13544  081A  3192  22E6  3188   	fcall	_LCDWriteCharacter
 13545                           
 13546                           ;lcd.c: 198: value=value*-1;
 13547  081D  0020               	movlb	0	; select bank0
 13548  081E  09BF               	comf	LCDWriteInt@value,f
 13549  081F  09C0               	comf	LCDWriteInt@value+1,f
 13550  0820  0ABF               	incf	LCDWriteInt@value,f
 13551  0821  1903               	skipnz
 13552  0822  0AC0               	incf	LCDWriteInt@value+1,f
 13553                           
 13554                           ;lcd.c: 199: }
 13555  0823  282B               	goto	l3226
 13556  0824                     l3216:	
 13557                           
 13558                           ;lcd.c: 201: else
 13559                           ;lcd.c: 202: {
 13560                           ;lcd.c: 203: if(sign == 1)
 13561  0824  0343               	decf	LCDWriteInt@sign,w
 13562  0825  1D03               	btfss	3,2
 13563  0826  282B               	goto	l3226
 13564                           
 13565                           ;lcd.c: 204: {
 13566                           ;lcd.c: 205: LCDWriteCharacter('+');
 13567  0827  302B               	movlw	43
 13568  0828  3192  22E6  3188   	fcall	_LCDWriteCharacter
 13569  082B                     l3226:	
 13570                           ;lcd.c: 206: }
 13571                           ;lcd.c: 207: }
 13572                           ;lcd.c: 209: while(value)
 13573                           
 13574  082B  0020               	movlb	0	; select bank0
 13575  082C  083F               	movf	LCDWriteInt@value,w
 13576  082D  0440               	iorwf	LCDWriteInt@value+1,w
 13577  082E  1903               	btfsc	3,2
 13578  082F  2858               	goto	l3228
 13579                           
 13580                           ;lcd.c: 210: {
 13581                           ;lcd.c: 211: str[i]=(uint16_t)value%10;
 13582  0830  300A               	movlw	10
 13583  0831  00F0               	movwf	___lwmod@divisor
 13584  0832  3000               	movlw	0
 13585  0833  00F1               	movwf	___lwmod@divisor+1
 13586  0834  0020               	movlb	0	; select bank0
 13587  0835  0840               	movf	LCDWriteInt@value+1,w
 13588  0836  00F3               	movwf	___lwmod@dividend+1
 13589  0837  083F               	movf	LCDWriteInt@value,w
 13590  0838  00F2               	movwf	___lwmod@dividend
 13591  0839  319F  279D  3188   	fcall	___lwmod
 13592  083C  0870               	movf	?___lwmod,w
 13593  083D  0020               	movlb	0	; select bank0
 13594  083E  00C4               	movwf	??_LCDWriteInt
 13595  083F  084E               	movf	LCDWriteInt@i,w
 13596  0840  3E48               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13597  0841  0086               	movwf	6
 13598  0842  0187               	clrf	7
 13599  0843  0844               	movf	??_LCDWriteInt,w
 13600  0844  0081               	movwf	1
 13601                           
 13602                           ;lcd.c: 212: value=value/10;
 13603  0845  300A               	movlw	10
 13604  0846  00F0               	movwf	___awdiv@divisor
 13605  0847  3000               	movlw	0
 13606  0848  00F1               	movwf	___awdiv@divisor+1
 13607  0849  0840               	movf	LCDWriteInt@value+1,w
 13608  084A  00F3               	movwf	___awdiv@dividend+1
 13609  084B  083F               	movf	LCDWriteInt@value,w
 13610  084C  00F2               	movwf	___awdiv@dividend
 13611  084D  3192  2295  3188   	fcall	___awdiv
 13612  0850  0871               	movf	?___awdiv+1,w
 13613  0851  0020               	movlb	0	; select bank0
 13614  0852  00C0               	movwf	LCDWriteInt@value+1
 13615  0853  0870               	movf	?___awdiv,w
 13616  0854  00BF               	movwf	LCDWriteInt@value
 13617                           
 13618                           ;lcd.c: 213: i--;
 13619  0855  3001               	movlw	1
 13620  0856  02CE               	subwf	LCDWriteInt@i,f
 13621  0857  282B               	goto	l3226
 13622  0858                     l3228:	
 13623                           
 13624                           ;lcd.c: 214: }
 13625                           ;lcd.c: 215: if(fieldLength==-1)
 13626  0858  0A41               	incf	LCDWriteInt@fieldLength,w
 13627  0859  1903               	btfsc	3,2
 13628  085A  2860               	goto	l3234
 13629  085B  2868               	goto	l3236
 13630  085C                     l3232:	
 13631                           ;lcd.c: 216: {
 13632                           ;lcd.c: 217: while(str[j]==0)
 13633                           
 13634                           
 13635                           ;lcd.c: 218: {
 13636                           ;lcd.c: 219: j++;
 13637  085C  3001               	movlw	1
 13638  085D  00C4               	movwf	??_LCDWriteInt
 13639  085E  0844               	movf	??_LCDWriteInt,w
 13640  085F  07CD               	addwf	LCDWriteInt@j,f
 13641  0860                     l3234:	
 13642  0860  084D               	movf	LCDWriteInt@j,w
 13643  0861  3E48               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13644  0862  0086               	movwf	6
 13645  0863  0187               	clrf	7
 13646  0864  0801               	movf	1,w
 13647  0865  1D03               	btfss	3,2
 13648  0866  286E               	goto	l3238
 13649  0867  285C               	goto	l3232
 13650  0868                     l3236:	
 13651                           ;lcd.c: 220: }
 13652                           ;lcd.c: 221: }
 13653                           
 13654                           
 13655                           ;lcd.c: 222: else
 13656                           ;lcd.c: 223: {
 13657                           ;lcd.c: 224: j=(uint8_t)(5-fieldLength);
 13658  0868  0341               	decf	LCDWriteInt@fieldLength,w
 13659  0869  3AFF               	xorlw	255
 13660  086A  3E05               	addlw	5
 13661  086B  00C4               	movwf	??_LCDWriteInt
 13662  086C  0844               	movf	??_LCDWriteInt,w
 13663  086D  00CD               	movwf	LCDWriteInt@j
 13664  086E                     l3238:	
 13665                           
 13666                           ;lcd.c: 225: }
 13667                           ;lcd.c: 227: for(i=j;i<(5-numPlaces);i++)
 13668  086E  084D               	movf	LCDWriteInt@j,w
 13669  086F  00C4               	movwf	??_LCDWriteInt
 13670  0870  0844               	movf	??_LCDWriteInt,w
 13671  0871  00CE               	movwf	LCDWriteInt@i
 13672  0872                     l3244:	
 13673  0872  0842               	movf	LCDWriteInt@numPlaces,w
 13674  0873  00C4               	movwf	??_LCDWriteInt
 13675  0874  01C5               	clrf	??_LCDWriteInt+1
 13676  0875  09C4               	comf	??_LCDWriteInt,f
 13677  0876  09C5               	comf	??_LCDWriteInt+1,f
 13678  0877  0AC4               	incf	??_LCDWriteInt,f
 13679  0878  1903               	skipnz
 13680  0879  0AC5               	incf	??_LCDWriteInt+1,f
 13681  087A  0844               	movf	??_LCDWriteInt,w
 13682  087B  3E05               	addlw	5
 13683  087C  00C6               	movwf	??_LCDWriteInt+2
 13684  087D  3000               	movlw	0
 13685  087E  3D45               	addwfc	??_LCDWriteInt+1,w
 13686  087F  00C7               	movwf	??_LCDWriteInt+3
 13687  0880  0847               	movf	??_LCDWriteInt+3,w
 13688  0881  3A80               	xorlw	128
 13689  0882  3C80               	sublw	128
 13690  0883  1D03               	skipz
 13691  0884  2887               	goto	u3975
 13692  0885  0846               	movf	??_LCDWriteInt+2,w
 13693  0886  024E               	subwf	LCDWriteInt@i,w
 13694  0887                     u3975:	
 13695  0887  1803               	btfsc	3,0
 13696  0888  2899               	goto	l3246
 13697                           
 13698                           ;lcd.c: 228: {
 13699                           ;lcd.c: 229: LCDWriteCharacter((uint8_t)(48+str[i]));
 13700  0889  0020               	movlb	0	; select bank0
 13701  088A  084E               	movf	LCDWriteInt@i,w
 13702  088B  3E48               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13703  088C  0086               	movwf	6
 13704  088D  0187               	clrf	7
 13705  088E  0801               	movf	1,w
 13706  088F  3E30               	addlw	48
 13707  0890  3192  22E6  3188   	fcall	_LCDWriteCharacter
 13708  0893  3001               	movlw	1
 13709  0894  0020               	movlb	0	; select bank0
 13710  0895  00C4               	movwf	??_LCDWriteInt
 13711  0896  0844               	movf	??_LCDWriteInt,w
 13712  0897  07CE               	addwf	LCDWriteInt@i,f
 13713  0898  2872               	goto	l3244
 13714  0899                     l3246:	
 13715                           
 13716                           ;lcd.c: 230: }
 13717                           ;lcd.c: 232: if(numPlaces == 1)
 13718  0899  0020               	movlb	0	; select bank0
 13719  089A  0342               	decf	LCDWriteInt@numPlaces,w
 13720  089B  1D03               	btfss	3,2
 13721  089C  28A7               	goto	l3250
 13722                           
 13723                           ;lcd.c: 233: {
 13724                           ;lcd.c: 234: LCDWriteCharacter(46);
 13725  089D  302E               	movlw	46
 13726  089E  3192  22E6  3188   	fcall	_LCDWriteCharacter
 13727                           
 13728                           ;lcd.c: 235: LCDWriteCharacter ((uint8_t)(48+str[4]));
 13729  08A1  0020               	movlb	0	; select bank0
 13730  08A2  084C               	movf	LCDWriteInt@str+4,w
 13731  08A3  3E30               	addlw	48
 13732  08A4  3192  22E6  3188   	fcall	_LCDWriteCharacter
 13733  08A7                     l3250:	
 13734                           
 13735                           ;lcd.c: 236: }
 13736                           ;lcd.c: 238: if(numPlaces == 2)
 13737  08A7  3002               	movlw	2
 13738  08A8  0020               	movlb	0	; select bank0
 13739  08A9  0642               	xorwf	LCDWriteInt@numPlaces,w
 13740  08AA  1D03               	btfss	3,2
 13741  08AB  0008               	return
 13742                           
 13743                           ;lcd.c: 239: {
 13744                           ;lcd.c: 240: LCDWriteCharacter(46);
 13745  08AC  302E               	movlw	46
 13746  08AD  3192  22E6  3188   	fcall	_LCDWriteCharacter
 13747                           
 13748                           ;lcd.c: 241: LCDWriteCharacter((uint8_t)(48+str[3]));
 13749  08B0  0020               	movlb	0	; select bank0
 13750  08B1  084B               	movf	LCDWriteInt@str+3,w
 13751  08B2  3E30               	addlw	48
 13752  08B3  3192  22E6  3188   	fcall	_LCDWriteCharacter
 13753                           
 13754                           ;lcd.c: 242: LCDWriteCharacter((uint8_t)(48+str[4]));
 13755  08B6  0020               	movlb	0	; select bank0
 13756  08B7  084C               	movf	LCDWriteInt@str+4,w
 13757  08B8  3E30               	addlw	48
 13758  08B9  3192  22E6         	fcall	_LCDWriteCharacter
 13759  08BB  0008               	return
 13760  08BC                     __end_of_LCDWriteInt:	
 13761                           
 13762                           	psect	text34
 13763  1F9D                     __ptext34:	
 13764 ;; *************** function ___lwmod *****************
 13765 ;; Defined at:
 13766 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
 13767 ;; Parameters:    Size  Location     Type
 13768 ;;  divisor         2    0[COMMON] unsigned int 
 13769 ;;  dividend        2    2[COMMON] unsigned int 
 13770 ;; Auto vars:     Size  Location     Type
 13771 ;;  counter         1    5[COMMON] unsigned char 
 13772 ;; Return value:  Size  Location     Type
 13773 ;;                  2    0[COMMON] unsigned int 
 13774 ;; Registers used:
 13775 ;;		wreg, status,2, status,0
 13776 ;; Tracked objects:
 13777 ;;		On entry : 0/0
 13778 ;;		On exit  : 0/0
 13779 ;;		Unchanged: 0/0
 13780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13781 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13782 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13783 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13784 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13785 ;;Total ram usage:        6 bytes
 13786 ;; Hardware stack levels used:    1
 13787 ;; This function calls:
 13788 ;;		Nothing
 13789 ;; This function is called by:
 13790 ;;		_LCDWriteInt
 13791 ;; This function uses a non-reentrant model
 13792 ;;
 13793                           
 13794                           
 13795                           ;psect for function ___lwmod
 13796  1F9D                     ___lwmod:	
 13797                           
 13798                           ;incstack = 0
 13799                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 13800  1F9D  0870               	movf	___lwmod@divisor,w
 13801  1F9E  0471               	iorwf	___lwmod@divisor+1,w
 13802  1F9F  1903               	btfsc	3,2
 13803  1FA0  2FC4               	goto	l3026
 13804  1FA1  01F5               	clrf	___lwmod@counter
 13805  1FA2  0AF5               	incf	___lwmod@counter,f
 13806  1FA3                     l3016:	
 13807  1FA3  1BF1               	btfsc	___lwmod@divisor+1,7
 13808  1FA4  2FAF               	goto	l3018
 13809  1FA5  3001               	movlw	1
 13810  1FA6                     u3375:	
 13811  1FA6  35F0               	lslf	___lwmod@divisor,f
 13812  1FA7  0DF1               	rlf	___lwmod@divisor+1,f
 13813  1FA8  0B89               	decfsz	9,f
 13814  1FA9  2FA6               	goto	u3375
 13815  1FAA  3001               	movlw	1
 13816  1FAB  00F4               	movwf	??___lwmod
 13817  1FAC  0874               	movf	??___lwmod,w
 13818  1FAD  07F5               	addwf	___lwmod@counter,f
 13819  1FAE  2FA3               	goto	l3016
 13820  1FAF                     l3018:	
 13821  1FAF  0871               	movf	___lwmod@divisor+1,w
 13822  1FB0  0273               	subwf	___lwmod@dividend+1,w
 13823  1FB1  1D03               	skipz
 13824  1FB2  2FB5               	goto	u3395
 13825  1FB3  0870               	movf	___lwmod@divisor,w
 13826  1FB4  0272               	subwf	___lwmod@dividend,w
 13827  1FB5                     u3395:	
 13828  1FB5  1C03               	skipc
 13829  1FB6  2FBB               	goto	l3022
 13830  1FB7  0870               	movf	___lwmod@divisor,w
 13831  1FB8  02F2               	subwf	___lwmod@dividend,f
 13832  1FB9  0871               	movf	___lwmod@divisor+1,w
 13833  1FBA  3BF3               	subwfb	___lwmod@dividend+1,f
 13834  1FBB                     l3022:	
 13835  1FBB  3001               	movlw	1
 13836  1FBC                     u3405:	
 13837  1FBC  36F1               	lsrf	___lwmod@divisor+1,f
 13838  1FBD  0CF0               	rrf	___lwmod@divisor,f
 13839  1FBE  0B89               	decfsz	9,f
 13840  1FBF  2FBC               	goto	u3405
 13841  1FC0  3001               	movlw	1
 13842  1FC1  02F5               	subwf	___lwmod@counter,f
 13843  1FC2  1D03               	btfss	3,2
 13844  1FC3  2FAF               	goto	l3018
 13845  1FC4                     l3026:	
 13846  1FC4  0873               	movf	___lwmod@dividend+1,w
 13847  1FC5  00F1               	movwf	?___lwmod+1
 13848  1FC6  0872               	movf	___lwmod@dividend,w
 13849  1FC7  00F0               	movwf	?___lwmod
 13850  1FC8  0008               	return
 13851  1FC9                     __end_of___lwmod:	
 13852                           
 13853                           	psect	text35
 13854  1295                     __ptext35:	
 13855 ;; *************** function ___awdiv *****************
 13856 ;; Defined at:
 13857 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
 13858 ;; Parameters:    Size  Location     Type
 13859 ;;  divisor         2    0[COMMON] int 
 13860 ;;  dividend        2    2[COMMON] int 
 13861 ;; Auto vars:     Size  Location     Type
 13862 ;;  quotient        2    7[COMMON] int 
 13863 ;;  sign            1    6[COMMON] unsigned char 
 13864 ;;  counter         1    5[COMMON] unsigned char 
 13865 ;; Return value:  Size  Location     Type
 13866 ;;                  2    0[COMMON] int 
 13867 ;; Registers used:
 13868 ;;		wreg, status,2, status,0
 13869 ;; Tracked objects:
 13870 ;;		On entry : 0/0
 13871 ;;		On exit  : 0/0
 13872 ;;		Unchanged: 0/0
 13873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13874 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13875 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13876 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13877 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13878 ;;Total ram usage:        9 bytes
 13879 ;; Hardware stack levels used:    1
 13880 ;; This function calls:
 13881 ;;		Nothing
 13882 ;; This function is called by:
 13883 ;;		_LCDWriteInt
 13884 ;;		_main
 13885 ;; This function uses a non-reentrant model
 13886 ;;
 13887                           
 13888                           
 13889                           ;psect for function ___awdiv
 13890  1295                     ___awdiv:	
 13891                           
 13892                           ;incstack = 0
 13893                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 13894  1295  01F6               	clrf	___awdiv@sign
 13895  1296  1FF1               	btfss	___awdiv@divisor+1,7
 13896  1297  2A9F               	goto	l2922
 13897  1298  09F0               	comf	___awdiv@divisor,f
 13898  1299  09F1               	comf	___awdiv@divisor+1,f
 13899  129A  0AF0               	incf	___awdiv@divisor,f
 13900  129B  1903               	skipnz
 13901  129C  0AF1               	incf	___awdiv@divisor+1,f
 13902  129D  01F6               	clrf	___awdiv@sign
 13903  129E  0AF6               	incf	___awdiv@sign,f
 13904  129F                     l2922:	
 13905  129F  1FF3               	btfss	___awdiv@dividend+1,7
 13906  12A0  2AAA               	goto	l2928
 13907  12A1  09F2               	comf	___awdiv@dividend,f
 13908  12A2  09F3               	comf	___awdiv@dividend+1,f
 13909  12A3  0AF2               	incf	___awdiv@dividend,f
 13910  12A4  1903               	skipnz
 13911  12A5  0AF3               	incf	___awdiv@dividend+1,f
 13912  12A6  3001               	movlw	1
 13913  12A7  00F4               	movwf	??___awdiv
 13914  12A8  0874               	movf	??___awdiv,w
 13915  12A9  06F6               	xorwf	___awdiv@sign,f
 13916  12AA                     l2928:	
 13917  12AA  01F7               	clrf	___awdiv@quotient
 13918  12AB  01F8               	clrf	___awdiv@quotient+1
 13919  12AC  0870               	movf	___awdiv@divisor,w
 13920  12AD  0471               	iorwf	___awdiv@divisor+1,w
 13921  12AE  1903               	btfsc	3,2
 13922  12AF  2AD9               	goto	l2950
 13923  12B0  01F5               	clrf	___awdiv@counter
 13924  12B1  0AF5               	incf	___awdiv@counter,f
 13925  12B2                     l2938:	
 13926  12B2  1BF1               	btfsc	___awdiv@divisor+1,7
 13927  12B3  2ABE               	goto	l2940
 13928  12B4  3001               	movlw	1
 13929  12B5                     u3205:	
 13930  12B5  35F0               	lslf	___awdiv@divisor,f
 13931  12B6  0DF1               	rlf	___awdiv@divisor+1,f
 13932  12B7  0B89               	decfsz	9,f
 13933  12B8  2AB5               	goto	u3205
 13934  12B9  3001               	movlw	1
 13935  12BA  00F4               	movwf	??___awdiv
 13936  12BB  0874               	movf	??___awdiv,w
 13937  12BC  07F5               	addwf	___awdiv@counter,f
 13938  12BD  2AB2               	goto	l2938
 13939  12BE                     l2940:	
 13940  12BE  3001               	movlw	1
 13941  12BF                     u3225:	
 13942  12BF  35F7               	lslf	___awdiv@quotient,f
 13943  12C0  0DF8               	rlf	___awdiv@quotient+1,f
 13944  12C1  0B89               	decfsz	9,f
 13945  12C2  2ABF               	goto	u3225
 13946  12C3  0871               	movf	___awdiv@divisor+1,w
 13947  12C4  0273               	subwf	___awdiv@dividend+1,w
 13948  12C5  1D03               	skipz
 13949  12C6  2AC9               	goto	u3235
 13950  12C7  0870               	movf	___awdiv@divisor,w
 13951  12C8  0272               	subwf	___awdiv@dividend,w
 13952  12C9                     u3235:	
 13953  12C9  1C03               	skipc
 13954  12CA  2AD0               	goto	l2946
 13955  12CB  0870               	movf	___awdiv@divisor,w
 13956  12CC  02F2               	subwf	___awdiv@dividend,f
 13957  12CD  0871               	movf	___awdiv@divisor+1,w
 13958  12CE  3BF3               	subwfb	___awdiv@dividend+1,f
 13959  12CF  1477               	bsf	___awdiv@quotient,0
 13960  12D0                     l2946:	
 13961  12D0  3001               	movlw	1
 13962  12D1                     u3245:	
 13963  12D1  36F1               	lsrf	___awdiv@divisor+1,f
 13964  12D2  0CF0               	rrf	___awdiv@divisor,f
 13965  12D3  0B89               	decfsz	9,f
 13966  12D4  2AD1               	goto	u3245
 13967  12D5  3001               	movlw	1
 13968  12D6  02F5               	subwf	___awdiv@counter,f
 13969  12D7  1D03               	btfss	3,2
 13970  12D8  2ABE               	goto	l2940
 13971  12D9                     l2950:	
 13972  12D9  0876               	movf	___awdiv@sign,w
 13973  12DA  1903               	btfsc	3,2
 13974  12DB  2AE1               	goto	l2954
 13975  12DC  09F7               	comf	___awdiv@quotient,f
 13976  12DD  09F8               	comf	___awdiv@quotient+1,f
 13977  12DE  0AF7               	incf	___awdiv@quotient,f
 13978  12DF  1903               	skipnz
 13979  12E0  0AF8               	incf	___awdiv@quotient+1,f
 13980  12E1                     l2954:	
 13981  12E1  0878               	movf	___awdiv@quotient+1,w
 13982  12E2  00F1               	movwf	?___awdiv+1
 13983  12E3  0877               	movf	___awdiv@quotient,w
 13984  12E4  00F0               	movwf	?___awdiv
 13985  12E5  0008               	return
 13986  12E6                     __end_of___awdiv:	
 13987                           
 13988                           	psect	text36
 13989  12E6                     __ptext36:	
 13990 ;; *************** function _LCDWriteCharacter *****************
 13991 ;; Defined at:
 13992 ;;		line 140 in file "lcd.c"
 13993 ;; Parameters:    Size  Location     Type
 13994 ;;  character       1    wreg     const unsigned char 
 13995 ;; Auto vars:     Size  Location     Type
 13996 ;;  character       1    9[COMMON] const unsigned char 
 13997 ;;  base            2   10[COMMON] unsigned int 
 13998 ;; Return value:  Size  Location     Type
 13999 ;;                  1    wreg      void 
 14000 ;; Registers used:
 14001 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14002 ;; Tracked objects:
 14003 ;;		On entry : 0/0
 14004 ;;		On exit  : 0/0
 14005 ;;		Unchanged: 0/0
 14006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14008 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14009 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14010 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14011 ;;Total ram usage:        6 bytes
 14012 ;; Hardware stack levels used:    1
 14013 ;; Hardware stack levels required when called:    1
 14014 ;; This function calls:
 14015 ;;		_LCDWrite
 14016 ;;		___wmul
 14017 ;; This function is called by:
 14018 ;;		_LCDWriteInt
 14019 ;;		_main
 14020 ;;		_LCDWriteString
 14021 ;; This function uses a non-reentrant model
 14022 ;;
 14023                           
 14024                           
 14025                           ;psect for function _LCDWriteCharacter
 14026  12E6                     _LCDWriteCharacter:	
 14027                           
 14028                           ;incstack = 0
 14029                           ; Regs used in _LCDWriteCharacter: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14030                           ;LCDWriteCharacter@character stored from wreg
 14031  12E6  00F9               	movwf	LCDWriteCharacter@character
 14032                           
 14033                           ;lcd.c: 142: uint16_t base;
 14034                           ;lcd.c: 143: base = character - 0x20;
 14035  12E7  0879               	movf	LCDWriteCharacter@character,w
 14036  12E8  3EE0               	addlw	224
 14037  12E9  00FA               	movwf	LCDWriteCharacter@base
 14038  12EA  30FF               	movlw	255
 14039  12EB  1803               	skipnc
 14040  12EC  3000               	movlw	0
 14041  12ED  00FB               	movwf	LCDWriteCharacter@base+1
 14042                           
 14043                           ;lcd.c: 144: base *= 3;
 14044  12EE  3003               	movlw	3
 14045  12EF  00F0               	movwf	___wmul@multiplier
 14046  12F0  3000               	movlw	0
 14047  12F1  00F1               	movwf	___wmul@multiplier+1
 14048  12F2  087B               	movf	LCDWriteCharacter@base+1,w
 14049  12F3  00F3               	movwf	___wmul@multiplicand+1
 14050  12F4  087A               	movf	LCDWriteCharacter@base,w
 14051  12F5  00F2               	movwf	___wmul@multiplicand
 14052  12F6  319E  2699  3192   	fcall	___wmul
 14053  12F9  0871               	movf	?___wmul+1,w
 14054  12FA  00FB               	movwf	LCDWriteCharacter@base+1
 14055  12FB  0870               	movf	?___wmul,w
 14056  12FC  00FA               	movwf	LCDWriteCharacter@base
 14057                           
 14058                           ;lcd.c: 145: LCDWrite(1,fonts[base]);
 14059  12FD  087B               	movf	LCDWriteCharacter@base+1,w
 14060  12FE  0085               	movwf	5
 14061  12FF  087A               	movf	LCDWriteCharacter@base,w
 14062  1300  0084               	movwf	4
 14063  1301  3000               	movlw	low (_fonts| (0+32768))
 14064  1302  0784               	addwf	4,f
 14065  1303  3090               	movlw	high (_fonts| (0+32768))
 14066  1304  3D85               	addwfc	5,f
 14067  1305  0800               	movf	0,w	;code access
 14068  1306  00F6               	movwf	??_LCDWriteCharacter
 14069  1307  0876               	movf	??_LCDWriteCharacter,w
 14070  1308  00F0               	movwf	LCDWrite@data
 14071  1309  3001               	movlw	1
 14072  130A  319F  2752  3192   	fcall	_LCDWrite
 14073                           
 14074                           ;lcd.c: 146: LCDWrite(1,fonts[base + 1]);
 14075  130D  087A               	movf	LCDWriteCharacter@base,w
 14076  130E  3E01               	addlw	1
 14077  130F  00F6               	movwf	??_LCDWriteCharacter
 14078  1310  3000               	movlw	0
 14079  1311  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 14080  1312  00F7               	movwf	??_LCDWriteCharacter+1
 14081  1313  3000               	movlw	low (_fonts| (0+32768))
 14082  1314  0776               	addwf	??_LCDWriteCharacter,w
 14083  1315  0084               	movwf	4
 14084  1316  3090               	movlw	high (_fonts| (0+32768))
 14085  1317  3D77               	addwfc	??_LCDWriteCharacter+1,w
 14086  1318  0085               	movwf	5
 14087  1319  0800               	movf	0,w	;code access
 14088  131A  00F8               	movwf	??_LCDWriteCharacter+2
 14089  131B  0878               	movf	??_LCDWriteCharacter+2,w
 14090  131C  00F0               	movwf	LCDWrite@data
 14091  131D  3001               	movlw	1
 14092  131E  319F  2752  3192   	fcall	_LCDWrite
 14093                           
 14094                           ;lcd.c: 147: LCDWrite(1,fonts[base + 2]);
 14095  1321  087A               	movf	LCDWriteCharacter@base,w
 14096  1322  3E02               	addlw	2
 14097  1323  00F6               	movwf	??_LCDWriteCharacter
 14098  1324  3000               	movlw	0
 14099  1325  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 14100  1326  00F7               	movwf	??_LCDWriteCharacter+1
 14101  1327  3000               	movlw	low (_fonts| (0+32768))
 14102  1328  0776               	addwf	??_LCDWriteCharacter,w
 14103  1329  0084               	movwf	4
 14104  132A  3090               	movlw	high (_fonts| (0+32768))
 14105  132B  3D77               	addwfc	??_LCDWriteCharacter+1,w
 14106  132C  0085               	movwf	5
 14107  132D  0800               	movf	0,w	;code access
 14108  132E  00F8               	movwf	??_LCDWriteCharacter+2
 14109  132F  0878               	movf	??_LCDWriteCharacter+2,w
 14110  1330  00F0               	movwf	LCDWrite@data
 14111  1331  3001               	movlw	1
 14112  1332  319F  2752  3192   	fcall	_LCDWrite
 14113                           
 14114                           ;lcd.c: 148: LCDWrite(1, 0x00);
 14115  1335  01F0               	clrf	LCDWrite@data
 14116  1336  3001               	movlw	1
 14117  1337  319F  2752         	fcall	_LCDWrite
 14118  1339  0008               	return
 14119  133A                     __end_of_LCDWriteCharacter:	
 14120                           
 14121                           	psect	text37
 14122  1E99                     __ptext37:	
 14123 ;; *************** function ___wmul *****************
 14124 ;; Defined at:
 14125 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
 14126 ;; Parameters:    Size  Location     Type
 14127 ;;  multiplier      2    0[COMMON] unsigned int 
 14128 ;;  multiplicand    2    2[COMMON] unsigned int 
 14129 ;; Auto vars:     Size  Location     Type
 14130 ;;  product         2    4[COMMON] unsigned int 
 14131 ;; Return value:  Size  Location     Type
 14132 ;;                  2    0[COMMON] unsigned int 
 14133 ;; Registers used:
 14134 ;;		wreg, status,2, status,0
 14135 ;; Tracked objects:
 14136 ;;		On entry : 0/0
 14137 ;;		On exit  : 0/0
 14138 ;;		Unchanged: 0/0
 14139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14140 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14141 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14143 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14144 ;;Total ram usage:        6 bytes
 14145 ;; Hardware stack levels used:    1
 14146 ;; This function calls:
 14147 ;;		Nothing
 14148 ;; This function is called by:
 14149 ;;		_readIAnalog
 14150 ;;		_LCDWriteCharacter
 14151 ;;		_eval_poly
 14152 ;; This function uses a non-reentrant model
 14153 ;;
 14154                           
 14155                           
 14156                           ;psect for function ___wmul
 14157  1E99                     ___wmul:	
 14158                           
 14159                           ;incstack = 0
 14160                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 14161  1E99  01F4               	clrf	___wmul@product
 14162  1E9A  01F5               	clrf	___wmul@product+1
 14163  1E9B                     l2424:	
 14164  1E9B  1C70               	btfss	___wmul@multiplier,0
 14165  1E9C  2EA1               	goto	l624
 14166  1E9D  0872               	movf	___wmul@multiplicand,w
 14167  1E9E  07F4               	addwf	___wmul@product,f
 14168  1E9F  0873               	movf	___wmul@multiplicand+1,w
 14169  1EA0  3DF5               	addwfc	___wmul@product+1,f
 14170  1EA1                     l624:	
 14171  1EA1  3001               	movlw	1
 14172  1EA2                     u2435:	
 14173  1EA2  35F2               	lslf	___wmul@multiplicand,f
 14174  1EA3  0DF3               	rlf	___wmul@multiplicand+1,f
 14175  1EA4  0B89               	decfsz	9,f
 14176  1EA5  2EA2               	goto	u2435
 14177  1EA6  3001               	movlw	1
 14178  1EA7                     u2445:	
 14179  1EA7  36F1               	lsrf	___wmul@multiplier+1,f
 14180  1EA8  0CF0               	rrf	___wmul@multiplier,f
 14181  1EA9  0B89               	decfsz	9,f
 14182  1EAA  2EA7               	goto	u2445
 14183  1EAB  0870               	movf	___wmul@multiplier,w
 14184  1EAC  0471               	iorwf	___wmul@multiplier+1,w
 14185  1EAD  1D03               	btfss	3,2
 14186  1EAE  2E9B               	goto	l2424
 14187  1EAF  0875               	movf	___wmul@product+1,w
 14188  1EB0  00F1               	movwf	?___wmul+1
 14189  1EB1  0874               	movf	___wmul@product,w
 14190  1EB2  00F0               	movwf	?___wmul
 14191  1EB3  0008               	return
 14192  1EB4                     __end_of___wmul:	
 14193                           
 14194                           	psect	text38
 14195  1F52                     __ptext38:	
 14196 ;; *************** function _LCDWrite *****************
 14197 ;; Defined at:
 14198 ;;		line 281 in file "lcd.c"
 14199 ;; Parameters:    Size  Location     Type
 14200 ;;  data_or_comm    1    wreg     unsigned char 
 14201 ;;  data            1    0[COMMON] unsigned char 
 14202 ;; Auto vars:     Size  Location     Type
 14203 ;;  data_or_comm    1    2[COMMON] unsigned char 
 14204 ;;  i               1    4[COMMON] unsigned char 
 14205 ;;  d               1    3[COMMON] unsigned char 
 14206 ;; Return value:  Size  Location     Type
 14207 ;;                  1    wreg      void 
 14208 ;; Registers used:
 14209 ;;		wreg, status,2, status,0
 14210 ;; Tracked objects:
 14211 ;;		On entry : 0/0
 14212 ;;		On exit  : 0/0
 14213 ;;		Unchanged: 0/0
 14214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14215 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14216 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14217 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14218 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14219 ;;Total ram usage:        5 bytes
 14220 ;; Hardware stack levels used:    1
 14221 ;; This function calls:
 14222 ;;		Nothing
 14223 ;; This function is called by:
 14224 ;;		_gotoXY
 14225 ;;		_LCDWriteCharacter
 14226 ;;		_LCDClear
 14227 ;;		_LCDInit
 14228 ;; This function uses a non-reentrant model
 14229 ;;
 14230                           
 14231                           
 14232                           ;psect for function _LCDWrite
 14233  1F52                     _LCDWrite:	
 14234                           
 14235                           ;incstack = 0
 14236                           ; Regs used in _LCDWrite: [wreg+status,2+status,0]
 14237                           ;LCDWrite@data_or_command stored from wreg
 14238  1F52  00F2               	movwf	LCDWrite@data_or_command
 14239                           
 14240                           ;lcd.c: 283: uint8_t i,d;
 14241                           ;lcd.c: 285: d=data;
 14242  1F53  0870               	movf	LCDWrite@data,w
 14243  1F54  00F1               	movwf	??_LCDWrite
 14244  1F55  0871               	movf	??_LCDWrite,w
 14245  1F56  00F3               	movwf	LCDWrite@d
 14246                           
 14247                           ;lcd.c: 287: if(data_or_command == 0)
 14248  1F57  0872               	movf	LCDWrite@data_or_command,w
 14249  1F58  1D03               	btfss	3,2
 14250  1F59  2F5D               	goto	l237
 14251                           
 14252                           ;lcd.c: 288: {
 14253                           ;lcd.c: 289: LATAbits.LATA2 = 0;
 14254  1F5A  0020               	movlb	0	; select bank0
 14255  1F5B  1116               	bcf	22,2	;volatile
 14256                           
 14257                           ;lcd.c: 290: }
 14258  1F5C  2F5F               	goto	l238
 14259  1F5D                     l237:	
 14260                           
 14261                           ;lcd.c: 291: else
 14262                           ;lcd.c: 292: {
 14263                           ;lcd.c: 293: LATAbits.LATA2 = 1;
 14264  1F5D  0020               	movlb	0	; select bank0
 14265  1F5E  1516               	bsf	22,2	;volatile
 14266  1F5F                     l238:	
 14267                           
 14268                           ;lcd.c: 294: }
 14269                           ;lcd.c: 296: LATAbits.LATA1 = 0;
 14270  1F5F  1096               	bcf	22,1	;volatile
 14271                           
 14272                           ;lcd.c: 298: for(i=0;i<8;i++)
 14273  1F60  01F4               	clrf	LCDWrite@i
 14274  1F61  3008               	movlw	8
 14275  1F62  0274               	subwf	LCDWrite@i,w
 14276  1F63  1803               	btfsc	3,0
 14277  1F64  2F75               	goto	l240
 14278  1F65                     l239:	
 14279                           
 14280                           ;lcd.c: 299: {
 14281                           ;lcd.c: 300: LATAbits.LATA3 = 0;
 14282  1F65  1196               	bcf	22,3	;volatile
 14283                           
 14284                           ;lcd.c: 302: if(d&0x80)
 14285  1F66  1FF3               	btfss	LCDWrite@d,7
 14286  1F67  2F69               	goto	l241
 14287                           
 14288                           ;lcd.c: 303: {
 14289                           ;lcd.c: 304: LATAbits.LATA3 = 1;
 14290  1F68  1596               	bsf	22,3	;volatile
 14291  1F69                     l241:	
 14292                           
 14293                           ;lcd.c: 305: }
 14294                           ;lcd.c: 307: LATAbits.LATA4 = 1;
 14295  1F69  1616               	bsf	22,4	;volatile
 14296                           
 14297                           ;lcd.c: 309: d<<=1;
 14298  1F6A  1003               	clrc
 14299  1F6B  0DF3               	rlf	LCDWrite@d,f
 14300                           
 14301                           ;lcd.c: 311: LATAbits.LATA4=0;
 14302  1F6C  1216               	bcf	22,4	;volatile
 14303  1F6D  3001               	movlw	1
 14304  1F6E  00F1               	movwf	??_LCDWrite
 14305  1F6F  0871               	movf	??_LCDWrite,w
 14306  1F70  07F4               	addwf	LCDWrite@i,f
 14307  1F71  3008               	movlw	8
 14308  1F72  0274               	subwf	LCDWrite@i,w
 14309  1F73  1C03               	skipc
 14310  1F74  2F65               	goto	l239
 14311  1F75                     l240:	
 14312                           
 14313                           ;lcd.c: 312: }
 14314                           ;lcd.c: 314: LATAbits.LATA1 = 1;
 14315  1F75  1496               	bsf	22,1	;volatile
 14316  1F76  0008               	return
 14317  1F77                     __end_of_LCDWrite:	
 14318                           
 14319                           	psect	text39
 14320  0E46                     __ptext39:	
 14321 ;; *************** function _Battery_State_Machine *****************
 14322 ;; Defined at:
 14323 ;;		line 31 in file "battery_charger.c"
 14324 ;; Parameters:    Size  Location     Type
 14325 ;;  z               1    wreg     unsigned char 
 14326 ;; Auto vars:     Size  Location     Type
 14327 ;;  z               1   36[BANK0 ] unsigned char 
 14328 ;; Return value:  Size  Location     Type
 14329 ;;                  1    wreg      void 
 14330 ;; Registers used:
 14331 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14332 ;; Tracked objects:
 14333 ;;		On entry : 0/0
 14334 ;;		On exit  : 0/0
 14335 ;;		Unchanged: 0/0
 14336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14338 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14339 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14340 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14341 ;;Total ram usage:        6 bytes
 14342 ;; Hardware stack levels used:    1
 14343 ;; Hardware stack levels required when called:    2
 14344 ;; This function calls:
 14345 ;;		___awtoft
 14346 ;;		___ftmul
 14347 ;;		___fttol
 14348 ;; This function is called by:
 14349 ;;		_main
 14350 ;; This function uses a non-reentrant model
 14351 ;;
 14352                           
 14353                           
 14354                           ;psect for function _Battery_State_Machine
 14355  0E46                     _Battery_State_Machine:	
 14356                           
 14357                           ;incstack = 0
 14358                           ; Regs used in _Battery_State_Machine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14359                           ;Battery_State_Machine@z stored from wreg
 14360  0E46  0020               	movlb	0	; select bank0
 14361  0E47  00C4               	movwf	Battery_State_Machine@z
 14362                           
 14363                           ;battery_charger.c: 33: if(batteryState[z]==PRECHARGE)
 14364  0E48  0844               	movf	Battery_State_Machine@z,w
 14365  0E49  3E68               	addlw	(low (_batteryState| 0))& (0+255)
 14366  0E4A  0086               	movwf	6
 14367  0E4B  0187               	clrf	7
 14368  0E4C  3003               	movlw	3
 14369  0E4D  0601               	xorwf	1,w
 14370  0E4E  1D03               	btfss	3,2
 14371  0E4F  2E9D               	goto	l3082
 14372                           
 14373                           ;battery_charger.c: 34: {
 14374                           ;battery_charger.c: 35: if(voltage[z]<1075)
 14375  0E50  3544               	lslf	Battery_State_Machine@z,w
 14376  0E51  3E5E               	addlw	(low (_voltage| 0))& (0+255)
 14377  0E52  0086               	movwf	6
 14378  0E53  0187               	clrf	7
 14379  0E54  3F40               	moviw [0]fsr1
 14380  0E55  00BF               	movwf	??_Battery_State_Machine
 14381  0E56  3F41               	moviw [1]fsr1
 14382  0E57  00C0               	movwf	??_Battery_State_Machine+1
 14383  0E58  0840               	movf	??_Battery_State_Machine+1,w
 14384  0E59  3A80               	xorlw	128
 14385  0E5A  00C1               	movwf	??_Battery_State_Machine+2
 14386  0E5B  3084               	movlw	132
 14387  0E5C  0241               	subwf	??_Battery_State_Machine+2,w
 14388  0E5D  1D03               	skipz
 14389  0E5E  2E61               	goto	u3605
 14390  0E5F  3033               	movlw	51
 14391  0E60  023F               	subwf	??_Battery_State_Machine,w
 14392  0E61                     u3605:	
 14393  0E61  1803               	skipnc
 14394  0E62  2E8B               	goto	l3080
 14395                           
 14396                           ;battery_charger.c: 36: {
 14397                           ;battery_charger.c: 37: if(stateCounter[z]>0)
 14398  0E63  0020               	movlb	0	; select bank0
 14399  0E64  3544               	lslf	Battery_State_Machine@z,w
 14400  0E65  3EB4               	addlw	(low (_stateCounter| 0))& (0+255)
 14401  0E66  0086               	movwf	6
 14402  0E67  0187               	clrf	7
 14403  0E68  3F40               	moviw [0]fsr1
 14404  0E69  00BF               	movwf	??_Battery_State_Machine
 14405  0E6A  3F41               	moviw [1]fsr1
 14406  0E6B  00C0               	movwf	??_Battery_State_Machine+1
 14407  0E6C  0840               	movf	??_Battery_State_Machine+1,w
 14408  0E6D  3A80               	xorlw	128
 14409  0E6E  00C1               	movwf	??_Battery_State_Machine+2
 14410  0E6F  3080               	movlw	128
 14411  0E70  0241               	subwf	??_Battery_State_Machine+2,w
 14412  0E71  1D03               	skipz
 14413  0E72  2E75               	goto	u3615
 14414  0E73  3001               	movlw	1
 14415  0E74  023F               	subwf	??_Battery_State_Machine,w
 14416  0E75                     u3615:	
 14417  0E75  1C03               	skipc
 14418  0E76  2E83               	goto	l3078
 14419                           
 14420                           ;battery_charger.c: 38: {
 14421                           ;battery_charger.c: 39: stateCounter[z]-=1;
 14422  0E77  0020               	movlb	0	; select bank0
 14423  0E78  3544               	lslf	Battery_State_Machine@z,w
 14424  0E79  3EB4               	addlw	(low (_stateCounter| 0))& (0+255)
 14425  0E7A  0086               	movwf	6
 14426  0E7B  0187               	clrf	7
 14427  0E7C  30FF               	movlw	255
 14428  0E7D  0781               	addwf	1,f
 14429  0E7E  3141               	addfsr 1,1
 14430  0E7F  30FF               	movlw	255
 14431  0E80  3D81               	addwfc	1,f
 14432  0E81  317F               	addfsr 1,-1
 14433                           
 14434                           ;battery_charger.c: 40: }
 14435  0E82  0008               	return
 14436  0E83                     l3078:	
 14437                           
 14438                           ;battery_charger.c: 41: else
 14439                           ;battery_charger.c: 42: {
 14440                           ;battery_charger.c: 43: batteryState[z]=FAULT;
 14441  0E83  0020               	movlb	0	; select bank0
 14442  0E84  0844               	movf	Battery_State_Machine@z,w
 14443  0E85  3E68               	addlw	(low (_batteryState| 0))& (0+255)
 14444  0E86  0086               	movwf	6
 14445  0E87  0187               	clrf	7
 14446  0E88  0181               	clrf	1
 14447  0E89  0A81               	incf	1,f
 14448                           
 14449                           ;battery_charger.c: 44: }
 14450                           ;battery_charger.c: 45: }
 14451  0E8A  0008               	return
 14452  0E8B                     l3080:	
 14453                           
 14454                           ;battery_charger.c: 46: else
 14455                           ;battery_charger.c: 47: {
 14456                           ;battery_charger.c: 48: batteryState[z]=CHARGE;
 14457  0E8B  3004               	movlw	4
 14458  0E8C  0020               	movlb	0	; select bank0
 14459  0E8D  00BF               	movwf	??_Battery_State_Machine
 14460  0E8E  0844               	movf	Battery_State_Machine@z,w
 14461  0E8F  3E68               	addlw	(low (_batteryState| 0))& (0+255)
 14462  0E90  0086               	movwf	6
 14463  0E91  0187               	clrf	7
 14464  0E92  083F               	movf	??_Battery_State_Machine,w
 14465  0E93  0081               	movwf	1
 14466                           
 14467                           ;battery_charger.c: 49: Iref[z]=30;
 14468  0E94  3544               	lslf	Battery_State_Machine@z,w
 14469  0E95  3EAC               	addlw	(low (_Iref| 0))& (0+255)
 14470  0E96  0086               	movwf	6
 14471  0E97  0187               	clrf	7
 14472  0E98  301E               	movlw	30
 14473  0E99  3FC0               	movwi [0]fsr1
 14474  0E9A  3000               	movlw	0
 14475  0E9B  3FC1               	movwi [1]fsr1
 14476                           
 14477                           ;battery_charger.c: 50: }
 14478                           ;battery_charger.c: 51: }
 14479  0E9C  0008               	return
 14480  0E9D                     l3082:	
 14481                           
 14482                           ;battery_charger.c: 52: else if(batteryState[z]==CHARGE)
 14483  0E9D  0844               	movf	Battery_State_Machine@z,w
 14484  0E9E  3E68               	addlw	(low (_batteryState| 0))& (0+255)
 14485  0E9F  0086               	movwf	6
 14486  0EA0  0187               	clrf	7
 14487  0EA1  3004               	movlw	4
 14488  0EA2  0601               	xorwf	1,w
 14489  0EA3  1D03               	btfss	3,2
 14490  0EA4  2F60               	goto	l3102
 14491                           
 14492                           ;battery_charger.c: 53: {
 14493                           ;battery_charger.c: 54: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 14494  0EA5  096E               	comf	_batteryTemp,w
 14495  0EA6  00BF               	movwf	??_Battery_State_Machine
 14496  0EA7  096F               	comf	_batteryTemp+1,w
 14497  0EA8  00C0               	movwf	??_Battery_State_Machine+1
 14498  0EA9  0ABF               	incf	??_Battery_State_Machine,f
 14499  0EAA  1903               	skipnz
 14500  0EAB  0AC0               	incf	??_Battery_State_Machine+1,f
 14501  0EAC  083F               	movf	??_Battery_State_Machine,w
 14502  0EAD  3EFA               	addlw	250
 14503  0EAE  00F9               	movwf	___awtoft@c
 14504  0EAF  3000               	movlw	0
 14505  0EB0  3D40               	addwfc	??_Battery_State_Machine+1,w
 14506  0EB1  00FA               	movwf	___awtoft@c+1
 14507  0EB2  319F  2710  318E   	fcall	___awtoft
 14508  0EB5  0879               	movf	?___awtoft,w
 14509  0EB6  0020               	movlb	0	; select bank0
 14510  0EB7  00A4               	movwf	___ftmul@f2
 14511  0EB8  087A               	movf	?___awtoft+1,w
 14512  0EB9  00A5               	movwf	___ftmul@f2+1
 14513  0EBA  087B               	movf	?___awtoft+2,w
 14514  0EBB  00A6               	movwf	___ftmul@f2+2
 14515  0EBC  30C3               	movlw	195
 14516  0EBD  00A1               	movwf	___ftmul@f1
 14517  0EBE  3075               	movlw	117
 14518  0EBF  00A2               	movwf	___ftmul@f1+1
 14519  0EC0  303E               	movlw	62
 14520  0EC1  00A3               	movwf	___ftmul@f1+2
 14521  0EC2  3197  274C  318E   	fcall	___ftmul
 14522  0EC5  0020               	movlb	0	; select bank0
 14523  0EC6  0821               	movf	?___ftmul,w
 14524  0EC7  00B1               	movwf	___fttol@f1
 14525  0EC8  0822               	movf	?___ftmul+1,w
 14526  0EC9  00B2               	movwf	___fttol@f1+1
 14527  0ECA  0823               	movf	?___ftmul+2,w
 14528  0ECB  00B3               	movwf	___fttol@f1+2
 14529  0ECC  3194  24E4  318E   	fcall	___fttol
 14530  0ECF  0020               	movlb	0	; select bank0
 14531  0ED0  0831               	movf	?___fttol,w
 14532  0ED1  3E91               	addlw	145
 14533  0ED2  00C1               	movwf	??_Battery_State_Machine+2
 14534  0ED3  3005               	movlw	5
 14535  0ED4  3D32               	addwfc	?___fttol+1,w
 14536  0ED5  00C2               	movwf	??_Battery_State_Machine+3
 14537  0ED6  3544               	lslf	Battery_State_Machine@z,w
 14538  0ED7  3EB0               	addlw	(low (_Vref| 0))& (0+255)
 14539  0ED8  0086               	movwf	6
 14540  0ED9  0187               	clrf	7
 14541  0EDA  0841               	movf	??_Battery_State_Machine+2,w
 14542  0EDB  3FC0               	movwi [0]fsr1
 14543  0EDC  0842               	movf	??_Battery_State_Machine+3,w
 14544  0EDD  3FC1               	movwi [1]fsr1
 14545                           
 14546                           ;battery_charger.c: 55: if(!(Imode[z]))
 14547  0EDE  0844               	movf	Battery_State_Machine@z,w
 14548  0EDF  3E66               	addlw	(low (_Imode| 0))& (0+255)
 14549  0EE0  0086               	movwf	6
 14550  0EE1  0187               	clrf	7
 14551  0EE2  0801               	movf	1,w
 14552  0EE3  1D03               	btfss	3,2
 14553  0EE4  2F47               	goto	l3098
 14554                           
 14555                           ;battery_charger.c: 56: {
 14556                           ;battery_charger.c: 57: if(current[z] < Imin[z])
 14557  0EE5  3544               	lslf	Battery_State_Machine@z,w
 14558  0EE6  3E55               	addlw	(low (_Imin| (0+256)))& (0+255)
 14559  0EE7  0086               	movwf	6
 14560  0EE8  3001               	movlw	1	; select bank2/3
 14561  0EE9  0087               	movwf	7
 14562  0EEA  3F40               	moviw [0]fsr1
 14563  0EEB  00BF               	movwf	??_Battery_State_Machine
 14564  0EEC  3F41               	moviw [1]fsr1
 14565  0EED  00C0               	movwf	??_Battery_State_Machine+1
 14566  0EEE  3544               	lslf	Battery_State_Machine@z,w
 14567  0EEF  3EA0               	addlw	(low (_current| 0))& (0+255)
 14568  0EF0  0086               	movwf	6
 14569  0EF1  0187               	clrf	7
 14570  0EF2  3F40               	moviw [0]fsr1
 14571  0EF3  00C1               	movwf	??_Battery_State_Machine+2
 14572  0EF4  3F41               	moviw [1]fsr1
 14573  0EF5  00C2               	movwf	??_Battery_State_Machine+3
 14574  0EF6  0842               	movf	??_Battery_State_Machine+3,w
 14575  0EF7  3A80               	xorlw	128
 14576  0EF8  00C3               	movwf	??_Battery_State_Machine+4
 14577  0EF9  0840               	movf	??_Battery_State_Machine+1,w
 14578  0EFA  3A80               	xorlw	128
 14579  0EFB  0243               	subwf	??_Battery_State_Machine+4,w
 14580  0EFC  1D03               	skipz
 14581  0EFD  2F00               	goto	u3645
 14582  0EFE  083F               	movf	??_Battery_State_Machine,w
 14583  0EFF  0241               	subwf	??_Battery_State_Machine+2,w
 14584  0F00                     u3645:	
 14585  0F00  1803               	skipnc
 14586  0F01  2F2D               	goto	l3094
 14587                           
 14588                           ;battery_charger.c: 58: {
 14589                           ;battery_charger.c: 59: IminCount[z]-=2;
 14590  0F02  0020               	movlb	0	; select bank0
 14591  0F03  3544               	lslf	Battery_State_Machine@z,w
 14592  0F04  3EA8               	addlw	(low (_IminCount| 0))& (0+255)
 14593  0F05  0086               	movwf	6
 14594  0F06  0187               	clrf	7
 14595  0F07  3002               	movlw	2
 14596  0F08  0281               	subwf	1,f
 14597  0F09  3141               	addfsr 1,1
 14598  0F0A  3000               	movlw	0
 14599  0F0B  3B81               	subwfb	1,f
 14600  0F0C  317F               	addfsr 1,-1
 14601                           
 14602                           ;battery_charger.c: 60: if(IminCount[z]<10)
 14603  0F0D  3544               	lslf	Battery_State_Machine@z,w
 14604  0F0E  3EA8               	addlw	(low (_IminCount| 0))& (0+255)
 14605  0F0F  0086               	movwf	6
 14606  0F10  0187               	clrf	7
 14607  0F11  3F40               	moviw [0]fsr1
 14608  0F12  00BF               	movwf	??_Battery_State_Machine
 14609  0F13  3F41               	moviw [1]fsr1
 14610  0F14  00C0               	movwf	??_Battery_State_Machine+1
 14611  0F15  3000               	movlw	0
 14612  0F16  0240               	subwf	??_Battery_State_Machine+1,w
 14613  0F17  300A               	movlw	10
 14614  0F18  1903               	skipnz
 14615  0F19  023F               	subwf	??_Battery_State_Machine,w
 14616  0F1A  1803               	skipnc
 14617  0F1B  0008               	return
 14618                           
 14619                           ;battery_charger.c: 61: {
 14620                           ;battery_charger.c: 62: batteryState[z] = FLOAT;
 14621  0F1C  3005               	movlw	5
 14622  0F1D  00BF               	movwf	??_Battery_State_Machine
 14623  0F1E  0844               	movf	Battery_State_Machine@z,w
 14624  0F1F  3E68               	addlw	(low (_batteryState| 0))& (0+255)
 14625  0F20  0086               	movwf	6
 14626  0F21  0187               	clrf	7
 14627  0F22  083F               	movf	??_Battery_State_Machine,w
 14628  0F23  0081               	movwf	1
 14629                           
 14630                           ;battery_charger.c: 63: IminCount[z]=10;
 14631  0F24  3544               	lslf	Battery_State_Machine@z,w
 14632  0F25  3EA8               	addlw	(low (_IminCount| 0))& (0+255)
 14633  0F26  0086               	movwf	6
 14634  0F27  0187               	clrf	7
 14635  0F28  300A               	movlw	10
 14636  0F29  3FC0               	movwi [0]fsr1
 14637  0F2A  3000               	movlw	0
 14638  0F2B  3FC1               	movwi [1]fsr1
 14639                           
 14640                           ;battery_charger.c: 64: }
 14641                           ;battery_charger.c: 65: }
 14642  0F2C  0008               	return
 14643  0F2D                     l3094:	
 14644                           
 14645                           ;battery_charger.c: 66: else
 14646                           ;battery_charger.c: 67: {
 14647                           ;battery_charger.c: 68: if(IminCount[z]<600)IminCount[z]+=1;
 14648  0F2D  0020               	movlb	0	; select bank0
 14649  0F2E  3544               	lslf	Battery_State_Machine@z,w
 14650  0F2F  3EA8               	addlw	(low (_IminCount| 0))& (0+255)
 14651  0F30  0086               	movwf	6
 14652  0F31  0187               	clrf	7
 14653  0F32  3F40               	moviw [0]fsr1
 14654  0F33  00BF               	movwf	??_Battery_State_Machine
 14655  0F34  3F41               	moviw [1]fsr1
 14656  0F35  00C0               	movwf	??_Battery_State_Machine+1
 14657  0F36  3002               	movlw	2
 14658  0F37  0240               	subwf	??_Battery_State_Machine+1,w
 14659  0F38  3058               	movlw	88
 14660  0F39  1903               	skipnz
 14661  0F3A  023F               	subwf	??_Battery_State_Machine,w
 14662  0F3B  1803               	skipnc
 14663  0F3C  0008               	return
 14664  0F3D  3544               	lslf	Battery_State_Machine@z,w
 14665  0F3E  3EA8               	addlw	(low (_IminCount| 0))& (0+255)
 14666  0F3F  0086               	movwf	6
 14667  0F40  0187               	clrf	7
 14668  0F41  3001               	movlw	1
 14669  0F42  0781               	addwf	1,f
 14670  0F43  3141               	addfsr 1,1
 14671  0F44  1803               	skipnc
 14672  0F45  0A81               	incf	1,f
 14673                           
 14674                           ;battery_charger.c: 69: }
 14675                           ;battery_charger.c: 70: }
 14676  0F46  0008               	return
 14677  0F47                     l3098:	
 14678                           
 14679                           ;battery_charger.c: 71: else if(IminCount[z]<600)IminCount[z]+=1;
 14680  0F47  3544               	lslf	Battery_State_Machine@z,w
 14681  0F48  3EA8               	addlw	(low (_IminCount| 0))& (0+255)
 14682  0F49  0086               	movwf	6
 14683  0F4A  0187               	clrf	7
 14684  0F4B  3F40               	moviw [0]fsr1
 14685  0F4C  00BF               	movwf	??_Battery_State_Machine
 14686  0F4D  3F41               	moviw [1]fsr1
 14687  0F4E  00C0               	movwf	??_Battery_State_Machine+1
 14688  0F4F  3002               	movlw	2
 14689  0F50  0240               	subwf	??_Battery_State_Machine+1,w
 14690  0F51  3058               	movlw	88
 14691  0F52  1903               	skipnz
 14692  0F53  023F               	subwf	??_Battery_State_Machine,w
 14693  0F54  1803               	skipnc
 14694  0F55  0008               	return
 14695  0F56  3544               	lslf	Battery_State_Machine@z,w
 14696  0F57  3EA8               	addlw	(low (_IminCount| 0))& (0+255)
 14697  0F58  0086               	movwf	6
 14698  0F59  0187               	clrf	7
 14699  0F5A  3001               	movlw	1
 14700  0F5B  0781               	addwf	1,f
 14701  0F5C  3141               	addfsr 1,1
 14702  0F5D  1803               	skipnc
 14703  0F5E  0A81               	incf	1,f
 14704                           
 14705                           ;battery_charger.c: 72: }
 14706  0F5F  0008               	return
 14707  0F60                     l3102:	
 14708                           
 14709                           ;battery_charger.c: 73: else if(batteryState[z] == FLOAT)
 14710  0F60  0844               	movf	Battery_State_Machine@z,w
 14711  0F61  3E68               	addlw	(low (_batteryState| 0))& (0+255)
 14712  0F62  0086               	movwf	6
 14713  0F63  0187               	clrf	7
 14714  0F64  3005               	movlw	5
 14715  0F65  0601               	xorwf	1,w
 14716  0F66  1D03               	btfss	3,2
 14717  0F67  2FF0               	goto	l3124
 14718                           
 14719                           ;battery_charger.c: 74: {
 14720                           ;battery_charger.c: 75: otherState=(uint8_t)(1-z);
 14721  0F68  0344               	decf	Battery_State_Machine@z,w
 14722  0F69  3AFF               	xorlw	255
 14723  0F6A  3E01               	addlw	1
 14724  0F6B  00BF               	movwf	??_Battery_State_Machine
 14725  0F6C  083F               	movf	??_Battery_State_Machine,w
 14726  0F6D  0021               	movlb	1	; select bank1
 14727  0F6E  00C7               	movwf	_otherState^(0+128)
 14728                           
 14729                           ;battery_charger.c: 77: if(batteryState[otherState]==CHARGE)
 14730  0F6F  0847               	movf	_otherState^(0+128),w
 14731  0F70  3E68               	addlw	(low (_batteryState| 0))& (0+255)
 14732  0F71  0086               	movwf	6
 14733  0F72  0187               	clrf	7
 14734  0F73  3004               	movlw	4
 14735  0F74  0601               	xorwf	1,w
 14736  0F75  1D03               	btfss	3,2
 14737  0F76  2FA4               	goto	l3116
 14738                           
 14739                           ;battery_charger.c: 78: {
 14740                           ;battery_charger.c: 79: floatCount[z]+=1;
 14741  0F77  3001               	movlw	1
 14742  0F78  0020               	movlb	0	; select bank0
 14743  0F79  00BF               	movwf	??_Battery_State_Machine
 14744  0F7A  0844               	movf	Battery_State_Machine@z,w
 14745  0F7B  3EC4               	addlw	(low (_floatCount| 0))& (0+255)
 14746  0F7C  0086               	movwf	6
 14747  0F7D  0187               	clrf	7
 14748  0F7E  083F               	movf	??_Battery_State_Machine,w
 14749  0F7F  0781               	addwf	1,f
 14750                           
 14751                           ;battery_charger.c: 81: if(floatCount[z]>5)
 14752  0F80  0844               	movf	Battery_State_Machine@z,w
 14753  0F81  3EC4               	addlw	(low (_floatCount| 0))& (0+255)
 14754  0F82  0086               	movwf	6
 14755  0F83  0187               	clrf	7
 14756  0F84  3006               	movlw	6
 14757  0F85  0201               	subwf	1,w
 14758  0F86  1C03               	skipc
 14759  0F87  0008               	return
 14760                           
 14761                           ;battery_charger.c: 82: {
 14762                           ;battery_charger.c: 83: IminCount[z]=IminCount[otherState];
 14763  0F88  0021               	movlb	1	; select bank1
 14764  0F89  3547               	lslf	_otherState^(0+128),w
 14765  0F8A  3EA8               	addlw	(low (_IminCount| 0))& (0+255)
 14766  0F8B  0086               	movwf	6
 14767  0F8C  0187               	clrf	7
 14768  0F8D  0020               	movlb	0	; select bank0
 14769  0F8E  3544               	lslf	Battery_State_Machine@z,w
 14770  0F8F  3EA8               	addlw	(low (_IminCount| 0))& (0+255)
 14771  0F90  0084               	movwf	4
 14772  0F91  0185               	clrf	5
 14773  0F92  3F40               	moviw [0]fsr1
 14774  0F93  3F80               	movwi [0]fsr0
 14775  0F94  3F41               	moviw [1]fsr1
 14776  0F95  3F81               	movwi [1]fsr0
 14777                           
 14778                           ;battery_charger.c: 84: floatCount[z]=0;
 14779  0F96  0844               	movf	Battery_State_Machine@z,w
 14780  0F97  3EC4               	addlw	(low (_floatCount| 0))& (0+255)
 14781  0F98  0086               	movwf	6
 14782  0F99  0187               	clrf	7
 14783  0F9A  0181               	clrf	1
 14784                           
 14785                           ;battery_charger.c: 85: batteryState[z] = CHARGE;
 14786  0F9B  3004               	movlw	4
 14787  0F9C  00BF               	movwf	??_Battery_State_Machine
 14788  0F9D  0844               	movf	Battery_State_Machine@z,w
 14789  0F9E  3E68               	addlw	(low (_batteryState| 0))& (0+255)
 14790  0F9F  0086               	movwf	6
 14791  0FA0  0187               	clrf	7
 14792  0FA1  083F               	movf	??_Battery_State_Machine,w
 14793  0FA2  0081               	movwf	1
 14794                           
 14795                           ;battery_charger.c: 86: }
 14796                           ;battery_charger.c: 87: }
 14797  0FA3  0008               	return
 14798  0FA4                     l3116:	
 14799                           
 14800                           ;battery_charger.c: 88: else
 14801                           ;battery_charger.c: 89: {
 14802                           ;battery_charger.c: 90: Vref[z]=1350+(int16_t)((250-batteryTemp)*.24);
 14803  0FA4  0020               	movlb	0	; select bank0
 14804  0FA5  096E               	comf	_batteryTemp,w
 14805  0FA6  00BF               	movwf	??_Battery_State_Machine
 14806  0FA7  096F               	comf	_batteryTemp+1,w
 14807  0FA8  00C0               	movwf	??_Battery_State_Machine+1
 14808  0FA9  0ABF               	incf	??_Battery_State_Machine,f
 14809  0FAA  1903               	skipnz
 14810  0FAB  0AC0               	incf	??_Battery_State_Machine+1,f
 14811  0FAC  083F               	movf	??_Battery_State_Machine,w
 14812  0FAD  3EFA               	addlw	250
 14813  0FAE  00F9               	movwf	___awtoft@c
 14814  0FAF  3000               	movlw	0
 14815  0FB0  3D40               	addwfc	??_Battery_State_Machine+1,w
 14816  0FB1  00FA               	movwf	___awtoft@c+1
 14817  0FB2  319F  2710  318E   	fcall	___awtoft
 14818  0FB5  0879               	movf	?___awtoft,w
 14819  0FB6  0020               	movlb	0	; select bank0
 14820  0FB7  00A4               	movwf	___ftmul@f2
 14821  0FB8  087A               	movf	?___awtoft+1,w
 14822  0FB9  00A5               	movwf	___ftmul@f2+1
 14823  0FBA  087B               	movf	?___awtoft+2,w
 14824  0FBB  00A6               	movwf	___ftmul@f2+2
 14825  0FBC  30C3               	movlw	195
 14826  0FBD  00A1               	movwf	___ftmul@f1
 14827  0FBE  3075               	movlw	117
 14828  0FBF  00A2               	movwf	___ftmul@f1+1
 14829  0FC0  303E               	movlw	62
 14830  0FC1  00A3               	movwf	___ftmul@f1+2
 14831  0FC2  3197  274C  318E   	fcall	___ftmul
 14832  0FC5  0020               	movlb	0	; select bank0
 14833  0FC6  0821               	movf	?___ftmul,w
 14834  0FC7  00B1               	movwf	___fttol@f1
 14835  0FC8  0822               	movf	?___ftmul+1,w
 14836  0FC9  00B2               	movwf	___fttol@f1+1
 14837  0FCA  0823               	movf	?___ftmul+2,w
 14838  0FCB  00B3               	movwf	___fttol@f1+2
 14839  0FCC  3194  24E4         	fcall	___fttol
 14840  0FCE  0020               	movlb	0	; select bank0
 14841  0FCF  0831               	movf	?___fttol,w
 14842  0FD0  3E46               	addlw	70
 14843  0FD1  00C1               	movwf	??_Battery_State_Machine+2
 14844  0FD2  3005               	movlw	5
 14845  0FD3  3D32               	addwfc	?___fttol+1,w
 14846  0FD4  00C2               	movwf	??_Battery_State_Machine+3
 14847  0FD5  3544               	lslf	Battery_State_Machine@z,w
 14848  0FD6  3EB0               	addlw	(low (_Vref| 0))& (0+255)
 14849  0FD7  0086               	movwf	6
 14850  0FD8  0187               	clrf	7
 14851  0FD9  0841               	movf	??_Battery_State_Machine+2,w
 14852  0FDA  3FC0               	movwi [0]fsr1
 14853  0FDB  0842               	movf	??_Battery_State_Machine+3,w
 14854  0FDC  3FC1               	movwi [1]fsr1
 14855                           
 14856                           ;battery_charger.c: 91: Iref[z]=15;
 14857  0FDD  3544               	lslf	Battery_State_Machine@z,w
 14858  0FDE  3EAC               	addlw	(low (_Iref| 0))& (0+255)
 14859  0FDF  0086               	movwf	6
 14860  0FE0  0187               	clrf	7
 14861  0FE1  300F               	movlw	15
 14862  0FE2  3FC0               	movwi [0]fsr1
 14863  0FE3  3000               	movlw	0
 14864  0FE4  3FC1               	movwi [1]fsr1
 14865                           
 14866                           ;battery_charger.c: 92: Imode[z]=0;
 14867  0FE5  0844               	movf	Battery_State_Machine@z,w
 14868  0FE6  3E66               	addlw	(low (_Imode| 0))& (0+255)
 14869  0FE7  0086               	movwf	6
 14870  0FE8  0187               	clrf	7
 14871  0FE9  0181               	clrf	1
 14872                           
 14873                           ;battery_charger.c: 93: floatCount[z]=0;
 14874  0FEA  0844               	movf	Battery_State_Machine@z,w
 14875  0FEB  3EC4               	addlw	(low (_floatCount| 0))& (0+255)
 14876  0FEC  0086               	movwf	6
 14877  0FED  0187               	clrf	7
 14878  0FEE  0181               	clrf	1
 14879                           
 14880                           ;battery_charger.c: 94: }
 14881                           ;battery_charger.c: 95: }
 14882  0FEF  0008               	return
 14883  0FF0                     l3124:	
 14884                           
 14885                           ;battery_charger.c: 96: else
 14886                           ;battery_charger.c: 97: if(batteryState[z] == FAULT)
 14887  0FF0  0844               	movf	Battery_State_Machine@z,w
 14888  0FF1  3E68               	addlw	(low (_batteryState| 0))& (0+255)
 14889  0FF2  0086               	movwf	6
 14890  0FF3  0187               	clrf	7
 14891  0FF4  0301               	decf	1,w
 14892  0FF5  1D03               	btfss	3,2
 14893  0FF6  0008               	return
 14894                           
 14895                           ;battery_charger.c: 98: {
 14896                           ;battery_charger.c: 99: batteryState[z]=PRECHARGE;
 14897  0FF7  3003               	movlw	3
 14898  0FF8  00BF               	movwf	??_Battery_State_Machine
 14899  0FF9  0844               	movf	Battery_State_Machine@z,w
 14900  0FFA  3E68               	addlw	(low (_batteryState| 0))& (0+255)
 14901  0FFB  0086               	movwf	6
 14902  0FFC  0187               	clrf	7
 14903  0FFD  083F               	movf	??_Battery_State_Machine,w
 14904  0FFE  0081               	movwf	1
 14905  0FFF  0008               	return
 14906  1000                     __end_of_Battery_State_Machine:	
 14907                           
 14908                           	psect	text40
 14909  14E4                     __ptext40:	
 14910 ;; *************** function ___fttol *****************
 14911 ;; Defined at:
 14912 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
 14913 ;; Parameters:    Size  Location     Type
 14914 ;;  f1              3   17[BANK0 ] float 
 14915 ;; Auto vars:     Size  Location     Type
 14916 ;;  lval            4   26[BANK0 ] unsigned long 
 14917 ;;  exp1            1   30[BANK0 ] unsigned char 
 14918 ;;  sign1           1   25[BANK0 ] unsigned char 
 14919 ;; Return value:  Size  Location     Type
 14920 ;;                  4   17[BANK0 ] long 
 14921 ;; Registers used:
 14922 ;;		wreg, status,2, status,0
 14923 ;; Tracked objects:
 14924 ;;		On entry : 0/0
 14925 ;;		On exit  : 0/0
 14926 ;;		Unchanged: 0/0
 14927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14928 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14929 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14930 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14931 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14932 ;;Total ram usage:       14 bytes
 14933 ;; Hardware stack levels used:    1
 14934 ;; This function calls:
 14935 ;;		Nothing
 14936 ;; This function is called by:
 14937 ;;		_Init_Battery_State_Machine
 14938 ;;		_Battery_State_Machine
 14939 ;;		_cc_cv_mode
 14940 ;;		_tempCalc
 14941 ;;		_main
 14942 ;;		_calculateCurrent0
 14943 ;;		_calculateCurrent3
 14944 ;; This function uses a non-reentrant model
 14945 ;;
 14946                           
 14947                           
 14948                           ;psect for function ___fttol
 14949  14E4                     ___fttol:	
 14950                           
 14951                           ;incstack = 0
 14952                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14953  14E4  0020               	movlb	0	; select bank0
 14954  14E5  0831               	movf	___fttol@f1,w
 14955  14E6  00B5               	movwf	??___fttol
 14956  14E7  0832               	movf	___fttol@f1+1,w
 14957  14E8  00B6               	movwf	??___fttol+1
 14958  14E9  0833               	movf	___fttol@f1+2,w
 14959  14EA  00B7               	movwf	??___fttol+2
 14960  14EB  1003               	clrc
 14961  14EC  0D36               	rlf	??___fttol+1,w
 14962  14ED  0D37               	rlf	??___fttol+2,w
 14963  14EE  00B8               	movwf	??___fttol+3
 14964  14EF  0838               	movf	??___fttol+3,w
 14965  14F0  00BE               	movwf	___fttol@exp1
 14966  14F1  083E               	movf	___fttol@exp1,w
 14967  14F2  1D03               	btfss	3,2
 14968  14F3  2CFD               	goto	l2596
 14969  14F4  3000               	movlw	0
 14970  14F5  00B4               	movwf	?___fttol+3
 14971  14F6  3000               	movlw	0
 14972  14F7  00B3               	movwf	?___fttol+2
 14973  14F8  3000               	movlw	0
 14974  14F9  00B2               	movwf	?___fttol+1
 14975  14FA  3000               	movlw	0
 14976  14FB  00B1               	movwf	?___fttol
 14977  14FC  0008               	return
 14978  14FD                     l2596:	
 14979  14FD  0831               	movf	___fttol@f1,w
 14980  14FE  00B5               	movwf	??___fttol
 14981  14FF  0832               	movf	___fttol@f1+1,w
 14982  1500  00B6               	movwf	??___fttol+1
 14983  1501  0833               	movf	___fttol@f1+2,w
 14984  1502  00B7               	movwf	??___fttol+2
 14985  1503  3017               	movlw	23
 14986  1504                     u2865:	
 14987  1504  36B7               	lsrf	??___fttol+2,f
 14988  1505  0CB6               	rrf	??___fttol+1,f
 14989  1506  0CB5               	rrf	??___fttol,f
 14990  1507  0B89               	decfsz	9,f
 14991  1508  2D04               	goto	u2865
 14992  1509  0835               	movf	??___fttol,w
 14993  150A  00B8               	movwf	??___fttol+3
 14994  150B  0838               	movf	??___fttol+3,w
 14995  150C  00B9               	movwf	___fttol@sign1
 14996  150D  17B2               	bsf	___fttol@f1+1,7
 14997  150E  30FF               	movlw	255
 14998  150F  05B1               	andwf	___fttol@f1,f
 14999  1510  30FF               	movlw	255
 15000  1511  05B2               	andwf	___fttol@f1+1,f
 15001  1512  3000               	movlw	0
 15002  1513  05B3               	andwf	___fttol@f1+2,f
 15003  1514  0831               	movf	___fttol@f1,w
 15004  1515  00BA               	movwf	___fttol@lval
 15005  1516  0832               	movf	___fttol@f1+1,w
 15006  1517  00BB               	movwf	___fttol@lval+1
 15007  1518  0833               	movf	___fttol@f1+2,w
 15008  1519  00BC               	movwf	___fttol@lval+2
 15009  151A  01BD               	clrf	___fttol@lval+3
 15010  151B  308E               	movlw	142
 15011  151C  02BE               	subwf	___fttol@exp1,f
 15012  151D  1FBE               	btfss	___fttol@exp1,7
 15013  151E  2D3B               	goto	l2616
 15014  151F  083E               	movf	___fttol@exp1,w
 15015  1520  3A80               	xorlw	128
 15016  1521  3E8F               	addlw	143
 15017  1522  1803               	skipnc
 15018  1523  2D2D               	goto	l2614
 15019  1524  3000               	movlw	0
 15020  1525  00B4               	movwf	?___fttol+3
 15021  1526  3000               	movlw	0
 15022  1527  00B3               	movwf	?___fttol+2
 15023  1528  3000               	movlw	0
 15024  1529  00B2               	movwf	?___fttol+1
 15025  152A  3000               	movlw	0
 15026  152B  00B1               	movwf	?___fttol
 15027  152C  0008               	return
 15028  152D                     l2614:	
 15029  152D  3001               	movlw	1
 15030  152E                     u2895:	
 15031  152E  36BD               	lsrf	___fttol@lval+3,f
 15032  152F  0CBC               	rrf	___fttol@lval+2,f
 15033  1530  0CBB               	rrf	___fttol@lval+1,f
 15034  1531  0CBA               	rrf	___fttol@lval,f
 15035  1532  0B89               	decfsz	9,f
 15036  1533  2D2E               	goto	u2895
 15037  1534  3001               	movlw	1
 15038  1535  00B5               	movwf	??___fttol
 15039  1536  0835               	movf	??___fttol,w
 15040  1537  07BE               	addwf	___fttol@exp1,f
 15041  1538  1903               	btfsc	3,2
 15042  1539  2D54               	goto	l2624
 15043  153A  2D2D               	goto	l2614
 15044  153B                     l2616:	
 15045  153B  3018               	movlw	24
 15046  153C  023E               	subwf	___fttol@exp1,w
 15047  153D  1C03               	skipc
 15048  153E  2D51               	goto	l876
 15049  153F  3000               	movlw	0
 15050  1540  00B4               	movwf	?___fttol+3
 15051  1541  3000               	movlw	0
 15052  1542  00B3               	movwf	?___fttol+2
 15053  1543  3000               	movlw	0
 15054  1544  00B2               	movwf	?___fttol+1
 15055  1545  3000               	movlw	0
 15056  1546  00B1               	movwf	?___fttol
 15057  1547  0008               	return
 15058  1548                     l2622:	
 15059  1548  3001               	movlw	1
 15060  1549                     u2925:	
 15061  1549  35BA               	lslf	___fttol@lval,f
 15062  154A  0DBB               	rlf	___fttol@lval+1,f
 15063  154B  0DBC               	rlf	___fttol@lval+2,f
 15064  154C  0DBD               	rlf	___fttol@lval+3,f
 15065  154D  0B89               	decfsz	9,f
 15066  154E  2D49               	goto	u2925
 15067  154F  3001               	movlw	1
 15068  1550  02BE               	subwf	___fttol@exp1,f
 15069  1551                     l876:	
 15070  1551  083E               	movf	___fttol@exp1,w
 15071  1552  1D03               	btfss	3,2
 15072  1553  2D48               	goto	l2622
 15073  1554                     l2624:	
 15074  1554  0839               	movf	___fttol@sign1,w
 15075  1555  1903               	btfsc	3,2
 15076  1556  2D62               	goto	l2628
 15077  1557  09BA               	comf	___fttol@lval,f
 15078  1558  09BB               	comf	___fttol@lval+1,f
 15079  1559  09BC               	comf	___fttol@lval+2,f
 15080  155A  09BD               	comf	___fttol@lval+3,f
 15081  155B  0ABA               	incf	___fttol@lval,f
 15082  155C  1903               	skipnz
 15083  155D  0ABB               	incf	___fttol@lval+1,f
 15084  155E  1903               	skipnz
 15085  155F  0ABC               	incf	___fttol@lval+2,f
 15086  1560  1903               	skipnz
 15087  1561  0ABD               	incf	___fttol@lval+3,f
 15088  1562                     l2628:	
 15089  1562  083D               	movf	___fttol@lval+3,w
 15090  1563  00B4               	movwf	?___fttol+3
 15091  1564  083C               	movf	___fttol@lval+2,w
 15092  1565  00B3               	movwf	?___fttol+2
 15093  1566  083B               	movf	___fttol@lval+1,w
 15094  1567  00B2               	movwf	?___fttol+1
 15095  1568  083A               	movf	___fttol@lval,w
 15096  1569  00B1               	movwf	?___fttol
 15097  156A  0008               	return
 15098  156B                     __end_of___fttol:	
 15099                           
 15100                           	psect	text41
 15101  174C                     __ptext41:	
 15102 ;; *************** function ___ftmul *****************
 15103 ;; Defined at:
 15104 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
 15105 ;; Parameters:    Size  Location     Type
 15106 ;;  f1              3    1[BANK0 ] float 
 15107 ;;  f2              3    4[BANK0 ] float 
 15108 ;; Auto vars:     Size  Location     Type
 15109 ;;  f3_as_produc    3   12[BANK0 ] unsigned um
 15110 ;;  sign            1   16[BANK0 ] unsigned char 
 15111 ;;  cntr            1   15[BANK0 ] unsigned char 
 15112 ;;  exp             1   11[BANK0 ] unsigned char 
 15113 ;; Return value:  Size  Location     Type
 15114 ;;                  3    1[BANK0 ] float 
 15115 ;; Registers used:
 15116 ;;		wreg, status,2, status,0, pclath, cstack
 15117 ;; Tracked objects:
 15118 ;;		On entry : 0/0
 15119 ;;		On exit  : 0/0
 15120 ;;		Unchanged: 0/0
 15121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15122 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15123 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15124 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15125 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15126 ;;Total ram usage:       16 bytes
 15127 ;; Hardware stack levels used:    1
 15128 ;; Hardware stack levels required when called:    1
 15129 ;; This function calls:
 15130 ;;		___ftpack
 15131 ;; This function is called by:
 15132 ;;		_Init_Battery_State_Machine
 15133 ;;		_Battery_State_Machine
 15134 ;;		_cc_cv_mode
 15135 ;;		_tempCalc
 15136 ;;		_main
 15137 ;;		_log
 15138 ;;		_eval_poly
 15139 ;; This function uses a non-reentrant model
 15140 ;;
 15141                           
 15142                           
 15143                           ;psect for function ___ftmul
 15144  174C                     ___ftmul:	
 15145                           
 15146                           ;incstack = 0
 15147                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 15148  174C  0020               	movlb	0	; select bank0
 15149  174D  0821               	movf	___ftmul@f1,w
 15150  174E  00A7               	movwf	??___ftmul
 15151  174F  0822               	movf	___ftmul@f1+1,w
 15152  1750  00A8               	movwf	??___ftmul+1
 15153  1751  0823               	movf	___ftmul@f1+2,w
 15154  1752  00A9               	movwf	??___ftmul+2
 15155  1753  1003               	clrc
 15156  1754  0D28               	rlf	??___ftmul+1,w
 15157  1755  0D29               	rlf	??___ftmul+2,w
 15158  1756  00AA               	movwf	??___ftmul+3
 15159  1757  082A               	movf	??___ftmul+3,w
 15160  1758  00AB               	movwf	___ftmul@exp
 15161  1759  082B               	movf	___ftmul@exp,w
 15162  175A  1D03               	btfss	3,2
 15163  175B  2F63               	goto	l2512
 15164  175C  3000               	movlw	0
 15165  175D  00A1               	movwf	?___ftmul
 15166  175E  3000               	movlw	0
 15167  175F  00A2               	movwf	?___ftmul+1
 15168  1760  3000               	movlw	0
 15169  1761  00A3               	movwf	?___ftmul+2
 15170  1762  0008               	return
 15171  1763                     l2512:	
 15172  1763  0824               	movf	___ftmul@f2,w
 15173  1764  00A7               	movwf	??___ftmul
 15174  1765  0825               	movf	___ftmul@f2+1,w
 15175  1766  00A8               	movwf	??___ftmul+1
 15176  1767  0826               	movf	___ftmul@f2+2,w
 15177  1768  00A9               	movwf	??___ftmul+2
 15178  1769  1003               	clrc
 15179  176A  0D28               	rlf	??___ftmul+1,w
 15180  176B  0D29               	rlf	??___ftmul+2,w
 15181  176C  00AA               	movwf	??___ftmul+3
 15182  176D  082A               	movf	??___ftmul+3,w
 15183  176E  00B0               	movwf	___ftmul@sign
 15184  176F  0830               	movf	___ftmul@sign,w
 15185  1770  1D03               	btfss	3,2
 15186  1771  2F79               	goto	l2518
 15187  1772  3000               	movlw	0
 15188  1773  00A1               	movwf	?___ftmul
 15189  1774  3000               	movlw	0
 15190  1775  00A2               	movwf	?___ftmul+1
 15191  1776  3000               	movlw	0
 15192  1777  00A3               	movwf	?___ftmul+2
 15193  1778  0008               	return
 15194  1779                     l2518:	
 15195  1779  0830               	movf	___ftmul@sign,w
 15196  177A  3E7B               	addlw	123
 15197  177B  00A7               	movwf	??___ftmul
 15198  177C  0827               	movf	??___ftmul,w
 15199  177D  07AB               	addwf	___ftmul@exp,f
 15200  177E  0821               	movf	___ftmul@f1,w
 15201  177F  00A7               	movwf	??___ftmul
 15202  1780  0822               	movf	___ftmul@f1+1,w
 15203  1781  00A8               	movwf	??___ftmul+1
 15204  1782  0823               	movf	___ftmul@f1+2,w
 15205  1783  00A9               	movwf	??___ftmul+2
 15206  1784  3010               	movlw	16
 15207  1785                     u2715:	
 15208  1785  36A9               	lsrf	??___ftmul+2,f
 15209  1786  0CA8               	rrf	??___ftmul+1,f
 15210  1787  0CA7               	rrf	??___ftmul,f
 15211  1788  0B89               	decfsz	9,f
 15212  1789  2F85               	goto	u2715
 15213  178A  0827               	movf	??___ftmul,w
 15214  178B  00AA               	movwf	??___ftmul+3
 15215  178C  082A               	movf	??___ftmul+3,w
 15216  178D  00B0               	movwf	___ftmul@sign
 15217  178E  0824               	movf	___ftmul@f2,w
 15218  178F  00A7               	movwf	??___ftmul
 15219  1790  0825               	movf	___ftmul@f2+1,w
 15220  1791  00A8               	movwf	??___ftmul+1
 15221  1792  0826               	movf	___ftmul@f2+2,w
 15222  1793  00A9               	movwf	??___ftmul+2
 15223  1794  3010               	movlw	16
 15224  1795                     u2725:	
 15225  1795  36A9               	lsrf	??___ftmul+2,f
 15226  1796  0CA8               	rrf	??___ftmul+1,f
 15227  1797  0CA7               	rrf	??___ftmul,f
 15228  1798  0B89               	decfsz	9,f
 15229  1799  2F95               	goto	u2725
 15230  179A  0827               	movf	??___ftmul,w
 15231  179B  00AA               	movwf	??___ftmul+3
 15232  179C  082A               	movf	??___ftmul+3,w
 15233  179D  06B0               	xorwf	___ftmul@sign,f
 15234  179E  3080               	movlw	128
 15235  179F  00A7               	movwf	??___ftmul
 15236  17A0  0827               	movf	??___ftmul,w
 15237  17A1  05B0               	andwf	___ftmul@sign,f
 15238  17A2  17A2               	bsf	___ftmul@f1+1,7
 15239  17A3  17A5               	bsf	___ftmul@f2+1,7
 15240  17A4  30FF               	movlw	255
 15241  17A5  05A4               	andwf	___ftmul@f2,f
 15242  17A6  30FF               	movlw	255
 15243  17A7  05A5               	andwf	___ftmul@f2+1,f
 15244  17A8  3000               	movlw	0
 15245  17A9  05A6               	andwf	___ftmul@f2+2,f
 15246  17AA  3000               	movlw	0
 15247  17AB  00AC               	movwf	___ftmul@f3_as_product
 15248  17AC  3000               	movlw	0
 15249  17AD  00AD               	movwf	___ftmul@f3_as_product+1
 15250  17AE  3000               	movlw	0
 15251  17AF  00AE               	movwf	___ftmul@f3_as_product+2
 15252  17B0  3007               	movlw	7
 15253  17B1  00A7               	movwf	??___ftmul
 15254  17B2  0827               	movf	??___ftmul,w
 15255  17B3  00AF               	movwf	___ftmul@cntr
 15256  17B4                     l2530:	
 15257  17B4  1C21               	btfss	___ftmul@f1,0
 15258  17B5  2FBC               	goto	l2534
 15259  17B6  0824               	movf	___ftmul@f2,w
 15260  17B7  07AC               	addwf	___ftmul@f3_as_product,f
 15261  17B8  0825               	movf	___ftmul@f2+1,w
 15262  17B9  3DAD               	addwfc	___ftmul@f3_as_product+1,f
 15263  17BA  0826               	movf	___ftmul@f2+2,w
 15264  17BB  3DAE               	addwfc	___ftmul@f3_as_product+2,f
 15265  17BC                     l2534:	
 15266  17BC  3001               	movlw	1
 15267  17BD                     u2745:	
 15268  17BD  36A3               	lsrf	___ftmul@f1+2,f
 15269  17BE  0CA2               	rrf	___ftmul@f1+1,f
 15270  17BF  0CA1               	rrf	___ftmul@f1,f
 15271  17C0  0B89               	decfsz	9,f
 15272  17C1  2FBD               	goto	u2745
 15273  17C2  3001               	movlw	1
 15274  17C3                     u2755:	
 15275  17C3  35A4               	lslf	___ftmul@f2,f
 15276  17C4  0DA5               	rlf	___ftmul@f2+1,f
 15277  17C5  0DA6               	rlf	___ftmul@f2+2,f
 15278  17C6  0B89               	decfsz	9,f
 15279  17C7  2FC3               	goto	u2755
 15280  17C8  3001               	movlw	1
 15281  17C9  02AF               	subwf	___ftmul@cntr,f
 15282  17CA  1D03               	btfss	3,2
 15283  17CB  2FB4               	goto	l2530
 15284  17CC  3009               	movlw	9
 15285  17CD  00A7               	movwf	??___ftmul
 15286  17CE  0827               	movf	??___ftmul,w
 15287  17CF  00AF               	movwf	___ftmul@cntr
 15288  17D0                     l2542:	
 15289  17D0  1C21               	btfss	___ftmul@f1,0
 15290  17D1  2FD8               	goto	l2546
 15291  17D2  0824               	movf	___ftmul@f2,w
 15292  17D3  07AC               	addwf	___ftmul@f3_as_product,f
 15293  17D4  0825               	movf	___ftmul@f2+1,w
 15294  17D5  3DAD               	addwfc	___ftmul@f3_as_product+1,f
 15295  17D6  0826               	movf	___ftmul@f2+2,w
 15296  17D7  3DAE               	addwfc	___ftmul@f3_as_product+2,f
 15297  17D8                     l2546:	
 15298  17D8  3001               	movlw	1
 15299  17D9                     u2785:	
 15300  17D9  36A3               	lsrf	___ftmul@f1+2,f
 15301  17DA  0CA2               	rrf	___ftmul@f1+1,f
 15302  17DB  0CA1               	rrf	___ftmul@f1,f
 15303  17DC  0B89               	decfsz	9,f
 15304  17DD  2FD9               	goto	u2785
 15305  17DE  3001               	movlw	1
 15306  17DF                     u2795:	
 15307  17DF  36AE               	lsrf	___ftmul@f3_as_product+2,f
 15308  17E0  0CAD               	rrf	___ftmul@f3_as_product+1,f
 15309  17E1  0CAC               	rrf	___ftmul@f3_as_product,f
 15310  17E2  0B89               	decfsz	9,f
 15311  17E3  2FDF               	goto	u2795
 15312  17E4  3001               	movlw	1
 15313  17E5  02AF               	subwf	___ftmul@cntr,f
 15314  17E6  1D03               	btfss	3,2
 15315  17E7  2FD0               	goto	l2542
 15316  17E8  082C               	movf	___ftmul@f3_as_product,w
 15317  17E9  00F0               	movwf	___ftpack@arg
 15318  17EA  082D               	movf	___ftmul@f3_as_product+1,w
 15319  17EB  00F1               	movwf	___ftpack@arg+1
 15320  17EC  082E               	movf	___ftmul@f3_as_product+2,w
 15321  17ED  00F2               	movwf	___ftpack@arg+2
 15322  17EE  082B               	movf	___ftmul@exp,w
 15323  17EF  00A7               	movwf	??___ftmul
 15324  17F0  0827               	movf	??___ftmul,w
 15325  17F1  00F3               	movwf	___ftpack@exp
 15326  17F2  0830               	movf	___ftmul@sign,w
 15327  17F3  00A8               	movwf	??___ftmul+1
 15328  17F4  0828               	movf	??___ftmul+1,w
 15329  17F5  00F4               	movwf	___ftpack@sign
 15330  17F6  3193  239A         	fcall	___ftpack
 15331  17F8  0870               	movf	?___ftpack,w
 15332  17F9  0020               	movlb	0	; select bank0
 15333  17FA  00A1               	movwf	?___ftmul
 15334  17FB  0871               	movf	?___ftpack+1,w
 15335  17FC  00A2               	movwf	?___ftmul+1
 15336  17FD  0872               	movf	?___ftpack+2,w
 15337  17FE  00A3               	movwf	?___ftmul+2
 15338  17FF  0008               	return
 15339  1800                     __end_of___ftmul:	
 15340                           
 15341                           	psect	text42
 15342  1F10                     __ptext42:	
 15343 ;; *************** function ___awtoft *****************
 15344 ;; Defined at:
 15345 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awtoft.c"
 15346 ;; Parameters:    Size  Location     Type
 15347 ;;  c               2    9[COMMON] int 
 15348 ;; Auto vars:     Size  Location     Type
 15349 ;;  sign            1    0[BANK0 ] unsigned char 
 15350 ;; Return value:  Size  Location     Type
 15351 ;;                  3    9[COMMON] float 
 15352 ;; Registers used:
 15353 ;;		wreg, status,2, status,0, pclath, cstack
 15354 ;; Tracked objects:
 15355 ;;		On entry : 0/0
 15356 ;;		On exit  : 0/0
 15357 ;;		Unchanged: 0/0
 15358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15359 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15360 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15361 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15362 ;;      Totals:         5       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15363 ;;Total ram usage:        6 bytes
 15364 ;; Hardware stack levels used:    1
 15365 ;; Hardware stack levels required when called:    1
 15366 ;; This function calls:
 15367 ;;		___ftpack
 15368 ;; This function is called by:
 15369 ;;		_Init_Battery_State_Machine
 15370 ;;		_Battery_State_Machine
 15371 ;;		_cc_cv_mode
 15372 ;;		_tempCalc
 15373 ;;		_main
 15374 ;;		_calculateCurrent0
 15375 ;;		_calculateCurrent3
 15376 ;;		_log
 15377 ;; This function uses a non-reentrant model
 15378 ;;
 15379                           
 15380                           
 15381                           ;psect for function ___awtoft
 15382  1F10                     ___awtoft:	
 15383                           
 15384                           ;incstack = 0
 15385                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15386  1F10  0020               	movlb	0	; select bank0
 15387  1F11  01A0               	clrf	___awtoft@sign
 15388  1F12  1FFA               	btfss	___awtoft@c+1,7
 15389  1F13  2F1B               	goto	l2566
 15390  1F14  09F9               	comf	___awtoft@c,f
 15391  1F15  09FA               	comf	___awtoft@c+1,f
 15392  1F16  0AF9               	incf	___awtoft@c,f
 15393  1F17  1903               	skipnz
 15394  1F18  0AFA               	incf	___awtoft@c+1,f
 15395  1F19  01A0               	clrf	___awtoft@sign
 15396  1F1A  0AA0               	incf	___awtoft@sign,f
 15397  1F1B                     l2566:	
 15398  1F1B  0879               	movf	___awtoft@c,w
 15399  1F1C  00F0               	movwf	___ftpack@arg
 15400  1F1D  087A               	movf	___awtoft@c+1,w
 15401  1F1E  00F1               	movwf	___ftpack@arg+1
 15402  1F1F  01F2               	clrf	___ftpack@arg+2
 15403  1F20  308E               	movlw	142
 15404  1F21  00FC               	movwf	??___awtoft
 15405  1F22  087C               	movf	??___awtoft,w
 15406  1F23  00F3               	movwf	___ftpack@exp
 15407  1F24  0820               	movf	___awtoft@sign,w
 15408  1F25  00FD               	movwf	??___awtoft+1
 15409  1F26  087D               	movf	??___awtoft+1,w
 15410  1F27  00F4               	movwf	___ftpack@sign
 15411  1F28  3193  239A         	fcall	___ftpack
 15412  1F2A  0870               	movf	?___ftpack,w
 15413  1F2B  00F9               	movwf	?___awtoft
 15414  1F2C  0871               	movf	?___ftpack+1,w
 15415  1F2D  00FA               	movwf	?___awtoft+1
 15416  1F2E  0872               	movf	?___ftpack+2,w
 15417  1F2F  00FB               	movwf	?___awtoft+2
 15418  1F30  0008               	return
 15419  1F31                     __end_of___awtoft:	
 15420                           
 15421                           	psect	text43
 15422  139A                     __ptext43:	
 15423 ;; *************** function ___ftpack *****************
 15424 ;; Defined at:
 15425 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 15426 ;; Parameters:    Size  Location     Type
 15427 ;;  arg             3    0[COMMON] unsigned um
 15428 ;;  exp             1    3[COMMON] unsigned char 
 15429 ;;  sign            1    4[COMMON] unsigned char 
 15430 ;; Auto vars:     Size  Location     Type
 15431 ;;		None
 15432 ;; Return value:  Size  Location     Type
 15433 ;;                  3    0[COMMON] float 
 15434 ;; Registers used:
 15435 ;;		wreg, status,2, status,0
 15436 ;; Tracked objects:
 15437 ;;		On entry : 0/0
 15438 ;;		On exit  : 0/0
 15439 ;;		Unchanged: 0/0
 15440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15441 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15443 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15444 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15445 ;;Total ram usage:        8 bytes
 15446 ;; Hardware stack levels used:    1
 15447 ;; This function calls:
 15448 ;;		Nothing
 15449 ;; This function is called by:
 15450 ;;		___awtoft
 15451 ;;		___ftadd
 15452 ;;		___ftdiv
 15453 ;;		___ftmul
 15454 ;; This function uses a non-reentrant model
 15455 ;;
 15456                           
 15457                           
 15458                           ;psect for function ___ftpack
 15459  139A                     ___ftpack:	
 15460                           
 15461                           ;incstack = 0
 15462                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15463  139A  0873               	movf	___ftpack@exp,w
 15464  139B  1903               	btfsc	3,2
 15465  139C  2BA2               	goto	l2372
 15466  139D  0872               	movf	___ftpack@arg+2,w
 15467  139E  0471               	iorwf	___ftpack@arg+1,w
 15468  139F  0470               	iorwf	___ftpack@arg,w
 15469  13A0  1D03               	skipz
 15470  13A1  2BB3               	goto	l2378
 15471  13A2                     l2372:	
 15472  13A2  3000               	movlw	0
 15473  13A3  00F0               	movwf	?___ftpack
 15474  13A4  3000               	movlw	0
 15475  13A5  00F1               	movwf	?___ftpack+1
 15476  13A6  3000               	movlw	0
 15477  13A7  00F2               	movwf	?___ftpack+2
 15478  13A8  0008               	return
 15479  13A9                     l2376:	
 15480  13A9  3001               	movlw	1
 15481  13AA  00F5               	movwf	??___ftpack
 15482  13AB  0875               	movf	??___ftpack,w
 15483  13AC  07F3               	addwf	___ftpack@exp,f
 15484  13AD  3001               	movlw	1
 15485  13AE                     u2285:	
 15486  13AE  36F2               	lsrf	___ftpack@arg+2,f
 15487  13AF  0CF1               	rrf	___ftpack@arg+1,f
 15488  13B0  0CF0               	rrf	___ftpack@arg,f
 15489  13B1  0B89               	decfsz	9,f
 15490  13B2  2BAE               	goto	u2285
 15491  13B3                     l2378:	
 15492  13B3  30FE               	movlw	254
 15493  13B4  0572               	andwf	___ftpack@arg+2,w
 15494  13B5  1903               	btfsc	3,2
 15495  13B6  2BCC               	goto	l785
 15496  13B7  2BA9               	goto	l2376
 15497  13B8                     l2380:	
 15498  13B8  3001               	movlw	1
 15499  13B9  00F5               	movwf	??___ftpack
 15500  13BA  0875               	movf	??___ftpack,w
 15501  13BB  07F3               	addwf	___ftpack@exp,f
 15502  13BC  3001               	movlw	1
 15503  13BD  07F0               	addwf	___ftpack@arg,f
 15504  13BE  3000               	movlw	0
 15505  13BF  1803               	skipnc
 15506  13C0  3001               	movlw	1
 15507  13C1  07F1               	addwf	___ftpack@arg+1,f
 15508  13C2  3000               	movlw	0
 15509  13C3  1803               	skipnc
 15510  13C4  3001               	movlw	1
 15511  13C5  07F2               	addwf	___ftpack@arg+2,f
 15512  13C6  3001               	movlw	1
 15513  13C7                     u2305:	
 15514  13C7  36F2               	lsrf	___ftpack@arg+2,f
 15515  13C8  0CF1               	rrf	___ftpack@arg+1,f
 15516  13C9  0CF0               	rrf	___ftpack@arg,f
 15517  13CA  0B89               	decfsz	9,f
 15518  13CB  2BC7               	goto	u2305
 15519  13CC                     l785:	
 15520  13CC  30FF               	movlw	255
 15521  13CD  0572               	andwf	___ftpack@arg+2,w
 15522  13CE  1903               	btfsc	3,2
 15523  13CF  2BD9               	goto	l2388
 15524  13D0  2BB8               	goto	l2380
 15525  13D1                     l2386:	
 15526  13D1  3001               	movlw	1
 15527  13D2  02F3               	subwf	___ftpack@exp,f
 15528  13D3  3001               	movlw	1
 15529  13D4                     u2325:	
 15530  13D4  35F0               	lslf	___ftpack@arg,f
 15531  13D5  0DF1               	rlf	___ftpack@arg+1,f
 15532  13D6  0DF2               	rlf	___ftpack@arg+2,f
 15533  13D7  0B89               	decfsz	9,f
 15534  13D8  2BD4               	goto	u2325
 15535  13D9                     l2388:	
 15536  13D9  1BF1               	btfsc	___ftpack@arg+1,7
 15537  13DA  2BDF               	goto	l792
 15538  13DB  3002               	movlw	2
 15539  13DC  0273               	subwf	___ftpack@exp,w
 15540  13DD  1803               	skipnc
 15541  13DE  2BD1               	goto	l2386
 15542  13DF                     l792:	
 15543  13DF  1873               	btfsc	___ftpack@exp,0
 15544  13E0  2BE7               	goto	l793
 15545  13E1  30FF               	movlw	255
 15546  13E2  05F0               	andwf	___ftpack@arg,f
 15547  13E3  307F               	movlw	127
 15548  13E4  05F1               	andwf	___ftpack@arg+1,f
 15549  13E5  30FF               	movlw	255
 15550  13E6  05F2               	andwf	___ftpack@arg+2,f
 15551  13E7                     l793:	
 15552  13E7  1003               	clrc
 15553  13E8  0CF3               	rrf	___ftpack@exp,f
 15554  13E9  0873               	movf	___ftpack@exp,w
 15555  13EA  00F5               	movwf	??___ftpack
 15556  13EB  01F6               	clrf	??___ftpack+1
 15557  13EC  01F7               	clrf	??___ftpack+2
 15558  13ED  3010               	movlw	16
 15559  13EE                     u2365:	
 15560  13EE  35F5               	lslf	??___ftpack,f
 15561  13EF  0DF6               	rlf	??___ftpack+1,f
 15562  13F0  0DF7               	rlf	??___ftpack+2,f
 15563  13F1  0B89               	decfsz	9,f
 15564  13F2  2BEE               	goto	u2365
 15565  13F3  0875               	movf	??___ftpack,w
 15566  13F4  04F0               	iorwf	___ftpack@arg,f
 15567  13F5  0876               	movf	??___ftpack+1,w
 15568  13F6  04F1               	iorwf	___ftpack@arg+1,f
 15569  13F7  0877               	movf	??___ftpack+2,w
 15570  13F8  04F2               	iorwf	___ftpack@arg+2,f
 15571  13F9  0874               	movf	___ftpack@sign,w
 15572  13FA  1903               	btfsc	3,2
 15573  13FB  0008               	return
 15574  13FC  17F2               	bsf	___ftpack@arg+2,7
 15575  13FD  0008               	return
 15576  13FE                     __end_of___ftpack:	
 15577  007E                     btemp	set	126	;btemp
 15578  007E                     wtemp	set	126
 15579  007E                     wtemp0	set	126
 15580  0080                     wtemp1	set	128
 15581  0082                     wtemp2	set	130
 15582  0084                     wtemp3	set	132
 15583  0086                     wtemp4	set	134
 15584  0088                     wtemp5	set	136
 15585  007F                     wtemp6	set	127
 15586  007E                     ttemp	set	126
 15587  007E                     ttemp0	set	126
 15588  0081                     ttemp1	set	129
 15589  0084                     ttemp2	set	132
 15590  0087                     ttemp3	set	135
 15591  007F                     ttemp4	set	127
 15592  007E                     ltemp	set	126
 15593  007E                     ltemp0	set	126
 15594  0082                     ltemp1	set	130
 15595  0086                     ltemp2	set	134
 15596  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    330
    Data        18
    BSS         154
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     62      80
    BANK1            80     37      78
    BANK2            80      0      73
    BANK3            80      0      40
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            48      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 


Critical Paths under _main in COMMON

    _main->___awtoft
    _tempCalc->___awtoft
    _log->___awtoft
    ___ftge->___awtoft
    ___ftadd->___awtoft
    _readVAnalog->___aldiv
    _readIAnalog->___aldiv
    _readButton->_ADCRead
    _cc_cv_mode->___awtoft
    _calculateCurrent3->___awtoft
    _calculateCurrent0->___awtoft
    ___ftdiv->___awtoft
    _LCDInit->_LCDWrite
    _LCDClear->_gotoXY
    _gotoXY->_LCDWrite
    _Init_Battery_State_Machine->___awtoft
    _LCDWriteInt->___awtoft
    _LCDWriteCharacter->___wmul
    _Battery_State_Machine->___awtoft
    ___fttol->___awtoft
    ___ftmul->___awtoft
    ___awtoft->___awdiv

Critical Paths under _main in BANK0

    _main->_tempCalc
    _tempCalc->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftge->___ftmul
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftadd->___ftmul
    _readVAnalog->___aldiv
    _readIAnalog->___aldiv
    _cc_cv_mode->___fttol
    _calculateCurrent3->___fttol
    _calculateCurrent0->___fttol
    ___ftdiv->___awtoft
    _SYSTEM_Initialize->_Init_Battery_State_Machine
    _Init_Battery_State_Machine->___fttol
    _LCDWriteInt->___fttol
    _Battery_State_Machine->___fttol
    ___fttol->___ftdiv
    ___fttol->___ftmul
    ___ftmul->___awtoft

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                51    51      0  113659
                                             57 BANK0      5     5      0
                                              0 BANK1     37    37      0
                            _ADCRead
              _Battery_State_Machine
                           _LCDClear
                            _LCDInit
                  _LCDWriteCharacter
                        _LCDWriteInt
                 _PWM1_LoadDutyValue
                 _PWM6_LoadDutyValue
                 _PWM7_LoadDutyValue
                  _SYSTEM_Initialize
                            ___awdiv
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                  _calculateCurrent0
                  _calculateCurrent2
                  _calculateCurrent3
                         _cc_cv_mode
                             _gotoXY
                         _readButton
                        _readIAnalog
                        _readVAnalog
                           _tempCalc
 ---------------------------------------------------------------------------------
 (1) _tempCalc                                            11     9      2   37303
                                             46 BANK0     11     9      2
                            _ADCRead (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                            ___fttol
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   19403
                                             40 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     330
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           10     3      7    8325
                                             30 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     428
                                             17 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3356
                                             30 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3183
                                             17 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (1) _readVAnalog                                         21    19      2    1046
                                              9 COMMON     4     4      0
                                              6 BANK0     17    15      2
                            _ADCRead
                            ___aldiv
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     170
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _readIAnalog                                         24    22      2    1766
                                              9 COMMON     4     4      0
                                              6 BANK0     20    18      2
                            _ADCRead
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     512
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _readButton                                           3     3      0      22
                                              4 COMMON     3     3      0
                            _ADCRead
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     1      3      22
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _cc_cv_mode                                           8     8      0    8432
                                             31 BANK0      8     8      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent3                                    3     3      0    7164
                                             31 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent2                                    3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent0                                    3     3      0    7164
                                             31 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3153
                                              1 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    3     3      0   11852
                                             36 BANK0      3     3      0
                     _ADC_Initialize
         _Init_Battery_State_Machine
                           _LCDClear
                            _LCDInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PWM_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              1     1      0     803
                                              5 COMMON     1     1      0
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             3     3      0    2968
                                              8 COMMON     3     3      0
                           _LCDWrite
                             _gotoXY
 ---------------------------------------------------------------------------------
 (1) _gotoXY                                               3     2      1    2119
                                              5 COMMON     3     2      1
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _Init_Battery_State_Machine                           5     5      0    8058
                                             31 BANK0      5     5      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM7_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM6_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM1_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         16    11      5    8277
                                             31 BANK0     16    11      5
                  _LCDWriteCharacter
                            ___awdiv
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _LCDWriteCharacter                                    6     6      0    1805
                                              6 COMMON     6     6      0
                           _LCDWrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     890
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _LCDWrite                                             5     4      1     803
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _Battery_State_Machine                                6     6      0    8652
                                             31 BANK0      6     6      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4    1047
                                             17 BANK0     14    10      4
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    3915
                                              1 BANK0     16    10      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2964
                                              9 COMMON     5     2      3
                                              0 BANK0      1     1      0
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1707
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _Battery_State_Machine
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _LCDClear
     _LCDWrite
     _gotoXY
       _LCDWrite
   _LCDInit
     _LCDWrite
   _LCDWriteCharacter
     _LCDWrite
     ___wmul
   _LCDWriteInt
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
     ___awdiv
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     ___lwmod (ARG)
   _PWM1_LoadDutyValue
   _PWM6_LoadDutyValue
   _PWM7_LoadDutyValue
   _SYSTEM_Initialize
     _ADC_Initialize
     _Init_Battery_State_Machine
       ___awtoft
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
     _LCDClear
       _LCDWrite
       _gotoXY
         _LCDWrite
     _LCDInit
       _LCDWrite
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM_Initialize
     _TMR2_Initialize
     _TMR4_Initialize
   ___awdiv
   ___awtoft
     ___awdiv (ARG)
     ___ftpack (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftge
     ___awdiv (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
   ___ftmul
     ___awdiv (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     _frexp (ARG)
   ___fttol
     ___awdiv (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
   _calculateCurrent0
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent2
   _calculateCurrent3
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _cc_cv_mode
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _gotoXY
     _LCDWrite
   _readButton
     _ADCRead
   _readIAnalog
     _ADCRead
     ___aldiv
     ___wmul
   _readVAnalog
     _ADCRead
     ___aldiv
     ___bmul
   _tempCalc
     _ADCRead (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___fttol (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     _log (ARG)
       ___awtoft
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftge
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
       ___ftmul
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul
       _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     25      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      49       9       91.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      28      11       50.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               30      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     11D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     11D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri Sep 14 12:20:34 2018

                       _stateCounter 00B4                                    _j 00C6  
                                  _x 00C8               LCDWriteInt@fieldLength 0041  
                     ___bmul@product 0072              __size_of_PWM_Initialize 001F  
                        __CFG_CP$OFF 0000                                   l65 1E5F  
                                 l68 1E66                         ___awdiv@sign 0076  
                ___wmul@multiplicand 0072          __size_of_PWM6_LoadDutyValue 0016  
                       ___ftadd@exp1 003D                         ___ftadd@exp2 003C  
                        __CFG_LVP$ON 0000                         ___ftadd@sign 003B  
                                l240 1F75                                  l152 0C3F  
                                l241 1F69                                  l147 0BEB  
                                l148 0BFC                                  l237 1F5D  
                                l238 1F5F                                  l239 1F65  
                                l517 047A                                  l470 00E6  
                      LCDClear@index 0079                                  l624 1EA1  
                                l816 0A42                                  l679 1473  
                                l792 13DF                                  l793 13E7  
                                l785 13CC                                  l876 1551  
                                _GIE 005F                                  _RB2 006A  
                       __CFG_CPD$OFF 0000                         _VsampleIndex 00BE  
                                _log 169C                      __end_of_ADCRead 1E6D  
                    _TMR2_Initialize 1E08                         __CFG_BORV$LO 0000  
                                wreg 0009                      __end_of_LCDInit 119C  
                       ?_LCDWriteInt 003F                         __CFG_ZCD$OFF 0000  
                       ___ftdiv@cntr 002B                         ___ftdiv@sign 0030  
                               l3004 1EBC                                 l3102 0F60  
                               l3022 1FBB                                 l3016 1FA3  
                               l3200 15F1                                 l3018 1FAF  
                               l3026 1FC4                                 l3116 0FA4  
                               l3124 0FF0                                 l3044 0E1D  
                               l3142 0C17                                 l2502 0A81  
                               l2512 1763                                 l3080 0E8B  
                               l2424 1E9B                                 l3232 085C  
                               l3216 0824                                 l3304 0028  
                               l3064 0B92                                 l2530 17B4  
                               l3082 0E9D                                 l3250 08A7  
                               l3234 0860                                 l3226 082B  
                               l3138 0C0A                                 l2442 09CB  
                               l3402 01F0                                 l2380 13B8  
                               l2372 13A2                                 l3244 0872  
                               l3236 0868                                 l3228 0858  
                               l3172 15A9                                 l2452 09E1  
                               l2542 17D0                                 l2534 17BC  
                               l2518 1779                                 l2622 1548  
                               l2614 152D                                 l3094 0F2D  
                               l3078 0E83                                 l3246 0899  
                               l3238 086E                                 l3166 158F  
                               l2470 0A0E                                 l2446 09D2  
                               l3510 0486                                 l3422 0283  
                               l3406 01FA                                 l2376 13A9  
                               l2624 1554                                 l2616 153B  
                               l3192 15D4                                 l3176 15BB  
                               l2472 0A18                                 l2464 09FB  
                               l2640 11AE                                 l3512 0489  
                               l3504 0472                                 l3360 00A3  
                               l2386 13D1                                 l2378 13B3  
                               l2546 17D8                                 l3098 0F47  
                               l3186 15C9                                 l3178 15BD  
                               l2482 0A34                                 l2474 0A1D  
                               l3434 02B9                                 l3354 009D  
                               l3346 0089                                 l2388 13D9  
                               l2628 1562                                 l3292 1269  
                               l2492 0A66                                 l2484 0A3E  
                               l2476 0A21                                 l3532 04C7  
                               l3516 049A                                 l3452 02EA  
                               l3428 029F                                 l3380 00EE  
                               l3372 00C7                                 l2566 1F1B  
                               l3198 15EF                                 l2910 14DB  
                               l2902 14C2                                 l2574 11EE  
                               l3446 02CE                                 l3366 00C2  
                               l2744 1F98                                 l2488 0A54  
                               l3472 033A                                 l2922 129F  
                               l2738 1F84                                 l3298 1F47  
                               l2906 14CD                                 l2578 1204  
                               l2658 1393                                 l2850 16CE  
                               l3482 0358                                 l3458 0304  
                               l3394 019B                                 l2596 14FD  
                               l2940 12BE                                 l2844 16BB  
                               l2950 12D9                                 l2862 1E36  
                               l3670 07AE                                 l3478 0351  
                               l3398 01C5                                 l2928 12AA  
                               l3496 044E                                 l3488 03C9  
                               l2954 12E1                                 l2946 12D0  
                               l2938 12B2                                 l2970 1620  
                               l2866 1E3C                                 l3666 07A5  
                               l3498 0452                                 l2964 160A  
                               l2892 1494                                 l2884 1484  
                               l2894 14A2                                 l2992 167A  
                               l2984 1661                                 ?_log 0048  
                               u3010 1FFE                                 u3005 1F96  
                               _LATA 0016                                 _LATB 0017  
                               _LATC 0018                                 u2305 13C7  
                               u3105 1497                                 u2325 13D4  
                               u3205 12B5                                 u4005 1E92  
                               u3125 14A3                                 u4015 115A  
                               u3135 14B7                                 u3225 12BF  
                               u4025 1E7C                                 u3305 1642  
                               u3145 14C3                                 _T2PR 028D  
                               u2435 1EA2                                 u3235 12C9  
                               u3315 1662                                 u4035 1263  
                               u2365 13EE                                 u2285 13AE  
                               u2445 1EA7                                 u3245 12D1  
                               u3405 1FBC                                 u3325 1671  
                               u4045 1F41                                 u3335 167B  
                               u4055 0022                                 u2615 0A22  
                               u3425 0D10                                 u3505 0AC5  
                               u4305 02DB                                 u4225 0290  
                               u4145 01B8                                 _T4PR 0293  
                               u2715 1785                                 u3435 0D6A  
                               u3515 0AFB                                 u2555 09FC  
                               u4155 01E3                                 u2725 1795  
                               u3605 0E61                                 u3445 0DA8  
                               u3525 0B11                                 u2645 0A35  
                               u4325 02F9                                 u4245 02AE  
                               u3615 0E75                                 u3375 1FA6  
                               u3295 1632                                 u3455 0DF7  
                               u3535 0B2B                                 u4415 0432  
                               u2745 17BD                                 u3545 0B41  
                               u2585 0A0F                                 u4425 0447  
                               u4185 0273                                 u2755 17C3  
                               u3395 1FB5                                 u3555 0B6C  
                               u4435 0464                                 u4355 0333  
                               u4275 02CB                                 u2925 1549  
                               u3645 0F00                                 u3725 0BD7  
                               u3485 0E29                                 u4517 0091  
                               u3910 080E                                 u3815 0CAE  
                               u4527 15E0                                 u3495 0AAF  
                               u4375 034A                                 u2785 17D9  
                               u2865 1504                                 u4537 1237  
                               u3825 157D                                 u3585 0B9E  
                               u2795 17DF                                 u4547 1248  
                               u3835 1589                                 u3845 1599  
                               u2895 152E                                 u3855 15A5  
                               u3785 0C59                                 u3865 15B3  
                               u2995 1F82                                 u3975 0887  
                tempCalc@analogValue 004E                                 _WPUA 0F39  
                               _WPUB 0F44                                 _WPUC 0F4F  
                               _WPUE 0F65                                 _Imin 0155  
                               _Iref 00AC                                 _Iout 00B8  
                       __CFG_WRT$OFF 0000                        __CFG_FCMEN$ON 0000  
                               _Vref 00B0                                 _main 0054  
                       ___ftpack@arg 0070                         ___ftpack@exp 0073  
                               fsr0h 0005                                 fsr1h 0007  
                               fsr0l 0004                                 indf0 0000  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E                                 log@x 0048  
                       ?_readIAnalog 0026                        __CFG_BOREN$ON 0000  
                               ltemp 007E                                 start 0002  
                               ttemp 007E                                 wtemp 007E  
                      __CFG_CSWEN$ON 0000                    ___bmul@multiplier 0073  
                      __CFG_MCLRE$ON 0000                         ___ftmul@cntr 002F  
                       ___ftmul@sign 0030                         ?_readVAnalog 0026  
                   __end_of_LCDClear 1F9D                         ___fttol@exp1 003E  
                              ??_log 004B                         ___fttol@lval 003A  
                       main@fastLoop 00CC  __size_of_Init_Battery_State_Machine 0064  
     __size_of_OSCILLATOR_Initialize 0009                     __end_of_LCDWrite 1F77  
      __end_of_OSCILLATOR_Initialize 000F                      __end_of___aldiv 14E4  
                              _ADACQ 009D                                _ADCAP 009B  
                              _ADACT 0099                                ?_main 0070  
                              _ADCLK 0098                                _ADPCH 009E  
                              _ADREF 009A                      __end_of___awdiv 12E6  
                              _ADPRE 009C                      __end_of___ftadd 0A99  
                      __CFG_WDTE$OFF 0000                                _ADRPT 010D  
                    __end_of___ftdiv 169C                      __end_of___ftmul 1800  
                    ___awdiv@divisor 0070                      __end_of___ftsub 1ED2  
                    __end_of___fttol 156B                                _T2CON 028E  
                              _LATA5 00B5                                _T4CON 0294  
                              _T2HLT 028F                                _T4HLT 0295  
                              _T2TMR 028C                                _T2RST 0291  
                    __end_of___lwmod 1FC9                                _T4TMR 0292  
                              _T4RST 0297                      ___awdiv@counter 0075  
                              _OSCEN 0891                                _TRISA 0011  
                              _TRISB 0012                                _TRISC 0013  
                    _TMR4_Initialize 1E16                                _Imode 0066  
             ?_Battery_State_Machine 0070                                _cc_cv 00C0  
                      ___awtoft@sign 0020                                _frexp 119C  
                              _fonts 1000                                _errno 00C2  
                      ___ftpack@sign 0074                                main@j 00ED  
                              ltemp0 007E                                ltemp1 0082  
                              ltemp2 0086                                ltemp3 0080  
                       main@slowLoop 00DA                                ttemp0 007E  
                              ttemp1 0081                                ttemp2 0084  
                              ttemp3 0087                                ttemp4 007F  
                              status 0003                                wtemp0 007E  
                              wtemp1 0080                                wtemp2 0082  
                              wtemp3 0084                                wtemp4 0086  
                              wtemp5 0088                                wtemp6 007F  
                    __initialization 07B1                          log@exponent 004C  
                       __end_of_main 07B1              __end_of_TMR2_Initialize 1E16  
                          ??_ADCRead 0073                               ??_main 0059  
                      ___fttol@sign1 0039                            ??_LCDInit 0075  
             Battery_State_Machine@z 0044              LCDWrite@data_or_command 0072  
                             _ADCON0 0093                               _ADCON1 0094  
                             _ADCON2 0095                               _ADCON3 0096  
                             ?_frexp 0070                               _ADLTHH 010F  
                             _ADLTHL 010E                               _ADRESH 008D  
                             _ADRESL 008C                               _CCPR1H 030D  
                             _CCPR1L 030C                               _ADSTAT 0097  
                             _ADUTHH 0111                     ___awdiv@dividend 0072  
                             _ADUTHL 0110                     __end_of___awtoft 1F31  
                             _ANSELA 0F38                               _ANSELB 0F43  
                             _ANSELC 0F4E                     __end_of___ftpack 13FE  
                             _RB0PPS 0F18                               _RA6PPS 0F16  
                             _RA7PPS 0F17                       __CFG_WDTCCS$SC 0000  
                             _FVRCON 090C                               _OSCFRQ 0893  
                     __CFG_PWRTE$OFF 0000                         _CCPTMRS0bits 021E  
                       _CCPTMRS1bits 021F                               ___bmul 1E34  
                             ___ftge 11D7                            ??___aldiv 0078  
                             ___wmul 1E99                            ??___awdiv 0074  
                          ??___ftadd 0037                       __CFG_STVREN$ON 0000  
                     _PWM_Initialize 1EF1                            ??___ftdiv 0027  
                          ??___ftmul 0027                            ??___ftsub 007E  
                          ??___fttol 0035                            ??___lwmod 0074  
                             _gotoXY 1E45                               _button 006C  
            __end_of_TMR4_Initialize 1E24                     ___awdiv@quotient 0077  
          readVAnalog@analog_channel 0079                ___ftmul@f3_as_product 002C  
                   __end_of_tempCalc 09A3                         LCDWrite@data 0070  
                       LCDWriteInt@i 004E                         LCDWriteInt@j 004D  
                          ?_LCDClear 0070                    _SYSTEM_Initialize 1213  
               __size_of_LCDWriteInt 00B9                     __end_oflog@coeff 114A  
            __end_of__initialization 07FD                           ___ftadd@f1 0031  
                         ___ftadd@f2 0034                           ___ftge@ff1 0031  
                         ___ftge@ff2 0034                            ?_LCDWrite 0070  
                 ?_SYSTEM_Initialize 0070                         eval_poly@res 0045  
                         ___ftdiv@f1 0024                           ___ftdiv@f2 0021  
                         ___ftdiv@f3 002C                           ___awtoft@c 0079  
                ___bmul@multiplicand 0070                           ___ftmul@f1 0021  
                         ___ftmul@f2 0024               __end_of_PWM_Initialize 1F10  
               __size_of_readIAnalog 014C                           ___ftsub@f1 0041  
                         ___ftsub@f2 003E                           ___fttol@f1 0031  
                     __pcstackCOMMON 0070                         __pidataBANK0 0004  
                       __pidataBANK2 1E24                  ??_SYSTEM_Initialize 0044  
                      __end_of_frexp 11D7                        __end_of_fonts 112F  
                          LCDWrite@d 0073                            LCDWrite@i 0074  
               __size_of_readVAnalog 0122                   _PWM1_LoadDutyValue 1E6D  
                   ?_TMR2_Initialize 0070                           _cc_cv_mode 0BBB  
        __size_of_PWM7_LoadDutyValue 0016                       main@efficiency 00C9  
                ?_PWM1_LoadDutyValue 0070                    LCDWriteInt@F13692 0150  
                  _calculateCurrent0 1250                    _calculateCurrent2 1F31  
                  _calculateCurrent3 000F                              ??_frexp 0074  
          __end_of_SYSTEM_Initialize 1250                           __pbssBANK0 005E  
                         __pbssBANK1 00A0                           __pbssBANK2 0120  
                         __pbssBANK3 01A0                   ?_calculateCurrent0 0070  
                 ?_calculateCurrent2 0070                   ?_calculateCurrent3 0070  
                       _batteryState 0068                   __size_of_eval_poly 0060  
                         ??_LCDClear 0078                       main@faultCount 00CD  
                         ??_LCDWrite 0071                 ??_PWM1_LoadDutyValue 0072  
                ??_calculateCurrent0 003F                  ??_calculateCurrent2 0070  
                ??_calculateCurrent3 003F                      ?_PWM_Initialize 0070  
                         __pmaintext 0054                              ?___bmul 0070  
                            ?___ftge 0031                              ?___wmul 0070  
                    __CFG_PPS1WAY$ON 0000           __end_of_PWM6_LoadDutyValue 1E99  
                            ?_gotoXY 0075                              _ADCRead 1E58  
                   ?_TMR4_Initialize 0070                            ?___awtoft 0079  
                          ?___ftpack 0070                              _ADSTPTH 0113  
                            _ADSTPTL 0112             __CFG_SCANE$not_available 0000  
                __CFG_RSTOSC$HFINT32 0000              __size_of_ADC_Initialize 001F  
            ??_Battery_State_Machine 003F                       main@largerIOut 00DF  
                            _LCDInit 1161            __end_of_calculateCurrent0 1295  
          __end_of_calculateCurrent2 1F52            __end_of_calculateCurrent3 0054  
                            _OSCCON1 088D                              _OSCCON3 088F  
                            _OSCTUNE 0892                              _PWM6DCH 038D  
                            _PWM6DCL 038C                              _PWM7DCH 0391  
                            _PWM7DCL 0390                              _PWM6CON 038E  
                            _PWM7CON 0392                              _PPSLOCK 0E8F  
                         _floatCount 00C4                       main@menuButton 00E1  
                     main@dutyCycle1 00E2                       main@dutyCycle6 00E9  
                     main@dutyCycle7 00EB                    main@tempFanOutput 00E4  
                         _lastButton 006D                            ?_tempCalc 004E  
                            _Itotals 0120                              ___aldiv 1462  
                    __size_of___bmul 0011                      __size_of___ftge 003C  
                            ___awdiv 1295                              ___ftadd 09A3  
                         _readButton 156B                              ___ftdiv 15F3  
                    __size_of___wmul 001B                              ___ftmul 174C  
                            ___ftsub 1EB4                              ___fttol 14E4  
                 main@displayRefresh 00D9                              ___lwmod 1F9D  
                            _Vtotals 0130                      __size_of_gotoXY 0013  
                         ??___awtoft 007C                           ??___ftpack 0075  
                  __end_of_eval_poly 139A                              __ptext1 08BC  
                            __ptext2 169C                              __ptext3 119C  
                            __ptext4 133A                              __ptext5 11D7  
                            __ptext6 1EB4                              __ptext7 09A3  
                            __ptext8 0A99                              __ptext9 1E34  
                        ?_cc_cv_mode 0070                _OSCILLATOR_Initialize 0006  
                          _T2CONbits 028E                              _current 00A0  
                       __size_of_log 00B0                       ADCRead@channel 0073  
                   ___aldiv@dividend 0074                            _T4CONbits 0294  
           ??_PIN_MANAGER_Initialize 0070           __size_of_SYSTEM_Initialize 003D  
                            clrloop0 1DF1                              _voltage 005E  
       ??_Init_Battery_State_Machine 003F                 end_of_initialization 07FD  
              LCDWriteCharacter@base 007A                              gotoXY@x 0077  
                            gotoXY@y 0075                              init_ram 1DFC  
                            initloop 1DFD                           ??_tempCalc 007E  
                   ___aldiv@quotient 0022                         __pstringtext 1000  
                         _otherState 00C7                    _LCDWriteCharacter 12E6  
              __CFG_WDTCPS$WDTCPS_31 0000                   ?_LCDWriteCharacter 0070  
                 readVAnalog@channel 0026           __size_of_calculateCurrent0 0045  
         __size_of_calculateCurrent2 0021           __size_of_calculateCurrent3 0045  
                          _TRISAbits 0011                  ??_LCDWriteCharacter 0076  
                   __CFG_FEXTOSC$OFF 0000         PWM1_LoadDutyValue@dutyCycle1 0070  
                        _CCP1CONbits 030E                          ___ftdiv@exp 002F  
                __size_of_cc_cv_mode 013F                    __size_of_LCDClear 0026  
         LCDWriteCharacter@character 0079                    __size_of_LCDWrite 0025  
                        ___ftmul@exp 002B            __end_of_LCDWriteCharacter 133A  
                        ?_readButton 0070                            _Ichannels 0159  
          readIAnalog@analog_channel 0079                       __end_of___bmul 1E45  
                     __end_of___ftge 1213                            _VHoldMode 00BC  
                     __end_of___wmul 1EB4                       _ADC_Initialize 1ED2  
                     __end_of_gotoXY 1E58               ?_OSCILLATOR_Initialize 0070  
                          _IminCount 00A8                  start_initialization 07B1  
                         eval_poly@d 0041                           eval_poly@n 0043  
                         eval_poly@x 003E                    main@faultNotReset 00CF  
    __size_of_PIN_MANAGER_Initialize 0037                          __end_of_log 174C  
                      ??_LCDWriteInt 0044                           frexp@value 0070  
                       _IsampleIndex 00BA                     ??_PWM_Initialize 0070  
                      ??_readIAnalog 0028                            _Vchannels 0161  
                   __CFG_LPBOREN$OFF 0000                        ??_readVAnalog 0028  
                           ??___bmul 0071                             ??___ftge 0037  
                  tempCalc@steinhart 0056                             ??___wmul 0074  
             __end_of_ADC_Initialize 1EF1                        _tempCalc$1283 0053  
                        __pdataBANK0 006E                          __pdataBANK2 0159  
         __end_of_PWM7_LoadDutyValue 1161                             ??_gotoXY 0076  
                           ?_ADCRead 0070         PWM7_LoadDutyValue@dutyCycle7 0070  
                  __size_of___awtoft 0021                             ?_LCDInit 0070  
                  __size_of___ftpack 0064                          __pbssBIGRAM 2260  
                   readVAnalog@value 007B       __size_of_Battery_State_Machine 01BA  
      __end_of_Battery_State_Machine 1000                            ___latbits 0002  
                      __pcstackBANK0 0020                        __pcstackBANK1 00C9  
                 _PWM6_LoadDutyValue 1E83             __size_of_TMR2_Initialize 000E  
 __end_of_Init_Battery_State_Machine 1462           _Init_Battery_State_Machine 13FE  
                __size_of_readButton 0088                  ?_PWM6_LoadDutyValue 0070  
                __end_of_LCDWriteInt 08BC                          _batteryTemp 006E  
        __size_of_PWM1_LoadDutyValue 0016                            _main$1284 00E6  
             _PIN_MANAGER_Initialize 1FC9           __size_of_LCDWriteCharacter 0054  
                           ?___aldiv 0070                  __end_of_readIAnalog 0E46  
                  __size_of_tempCalc 00E7                             ?___awdiv 0070  
                           ?___ftadd 0031                             ?___ftdiv 0021  
                           ?___ftmul 0021                             ?___ftsub 003E  
                           ?___fttol 0031                     LCDWriteInt@value 003F  
                           ?___lwmod 0070                      ?_ADC_Initialize 0070  
               ??_PWM6_LoadDutyValue 0072                         ??_cc_cv_mode 003F  
                __end_of_readVAnalog 0BBB                            _eval_poly 133A  
           __size_of_TMR4_Initialize 000E                       __size_of_frexp 003B  
                           _T2CLKCON 0290                             _T4CLKCON 0296  
                        cc_cv_mode@z 0046                             _LCDClear 1F77  
                    ___aldiv@divisor 0070                      ___aldiv@counter 0020  
                     ___wmul@product 0074                             _LATAbits 0016  
                           _LCDWrite 1F52                            clear_ram0 1DF0  
                           _PIE0bits 0716                   __end_of_cc_cv_mode 0CFA  
                           _PIR4bits 0710                     readIAnalog@value 007B  
                          main@MPPT0 00DB                            main@MPPT1 00DD  
                   __size_of_ADCRead 0015                           _ADCON0bits 0093  
                  ___wmul@multiplier 0070                           ?_eval_poly 003E  
                   __size_of_LCDInit 003B                             _Ianalogs 0140  
                        _LCDWriteInt 0803          Init_Battery_State_Machine@z 0043  
                  ??_TMR2_Initialize 0070                             _Isamples 2260  
                        _readIAnalog 0CFA                            frexp@eptr 0073  
                           _Vanalogs 0148                          _readVAnalog 0A99  
                       ??_readButton 0074              ??_OSCILLATOR_Initialize 0070  
               LCDWriteInt@numPlaces 0042                     __size_of___aldiv 0082  
                   __size_of___awdiv 0051                     __size_of___ftadd 00F6  
                   __size_of___ftdiv 00A9                     __size_of___ftmul 00B4  
                   __size_of___ftsub 001E                     __size_of___fttol 0087  
                           _Vsamples 01A0                     __size_of___lwmod 002C  
                        _readButtons 006A                             ___awtoft 1F10  
                           ___ftpack 139A                             __ptext10 0CFA  
                           __ptext11 1462                             __ptext20 1E16  
                           __ptext12 156B                             __ptext21 1E08  
                           __ptext13 1E58                             __ptext30 114B  
                           __ptext22 1EF1                             __ptext14 0BBB  
                           __ptext31 1E83                             __ptext23 1FC9  
                           __ptext15 000F                             __ptext40 14E4  
                           __ptext32 1E6D                             __ptext24 0006  
                           __ptext16 1F31                             __ptext41 174C  
                           __ptext33 0803                             __ptext25 1161  
                           __ptext17 1250                             __ptext42 1F10  
                           __ptext34 1F9D                             __ptext26 1F77  
                           __ptext18 15F3                             __ptext43 139A  
                           __ptext35 1295                             __ptext27 1E45  
                           __ptext19 1213                             __ptext36 12E6  
                           __ptext28 13FE                             __ptext37 1E99  
                           __ptext29 1ED2                             __ptext38 1F52  
                           __ptext39 0E46                      LCDWriteInt@sign 0043  
                          tempCalc@R 0050                   __end_of_readButton 15F3  
                  ??_TMR4_Initialize 0070                        __size_of_main 075D  
               __CFG_WDTCWS$WDTCWS_7 0000                             _tempCalc 08BC  
                    main@tempVoltage 00D1          PIN_MANAGER_Initialize@state 0070  
                           log@coeff 112F                          ??_eval_poly 007E  
                 _PWM7_LoadDutyValue 114B          ?_Init_Battery_State_Machine 0070  
                   ___lwmod@dividend 0072                       LCDWriteInt@str 0048  
            ?_PIN_MANAGER_Initialize 0070                  ?_PWM7_LoadDutyValue 0070  
                  __CFG_CLKOUTEN$OFF 0000                          _PPSLOCKbits 0E8F  
                   ??_ADC_Initialize 0070         PWM6_LoadDutyValue@dutyCycle6 0070  
               ??_PWM7_LoadDutyValue 0072                      ___lwmod@divisor 0070  
                    ___lwmod@counter 0075                         ___aldiv@sign 0021  
                 readIAnalog@channel 0026                _Battery_State_Machine 0E46  
     __end_of_PIN_MANAGER_Initialize 2000           __end_of_PWM1_LoadDutyValue 1E83  
