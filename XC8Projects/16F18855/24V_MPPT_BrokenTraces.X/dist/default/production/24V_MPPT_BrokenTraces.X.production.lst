

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Thu Sep 13 13:46:41 2018

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	dabs	1,0x620,48
    64                           	dabs	1,0x5A0,80
    65                           	dabs	1,0x520,80
    66                           	dabs	1,0x4A0,80
    67                           	dabs	1,0x420,80
    68                           	dabs	1,0x3D0,32
    69                           	dabs	1,0x2260,0,_Isamples
    70                           	dabs	1,0x7E,2
    71  0000                     	;# 
    72  0001                     	;# 
    73  0002                     	;# 
    74  0003                     	;# 
    75  0004                     	;# 
    76  0005                     	;# 
    77  0006                     	;# 
    78  0007                     	;# 
    79  0008                     	;# 
    80  0009                     	;# 
    81  000A                     	;# 
    82  000B                     	;# 
    83  000C                     	;# 
    84  000D                     	;# 
    85  000E                     	;# 
    86  0010                     	;# 
    87  0011                     	;# 
    88  0012                     	;# 
    89  0013                     	;# 
    90  0016                     	;# 
    91  0017                     	;# 
    92  0018                     	;# 
    93  001C                     	;# 
    94  001C                     	;# 
    95  001D                     	;# 
    96  001D                     	;# 
    97  001E                     	;# 
    98  001F                     	;# 
    99  008C                     	;# 
   100  008C                     	;# 
   101  008D                     	;# 
   102  008E                     	;# 
   103  008E                     	;# 
   104  008F                     	;# 
   105  0090                     	;# 
   106  0090                     	;# 
   107  0091                     	;# 
   108  0093                     	;# 
   109  0094                     	;# 
   110  0095                     	;# 
   111  0096                     	;# 
   112  0097                     	;# 
   113  0098                     	;# 
   114  0099                     	;# 
   115  009A                     	;# 
   116  009B                     	;# 
   117  009C                     	;# 
   118  009D                     	;# 
   119  009E                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010E                     	;# 
   124  010F                     	;# 
   125  0110                     	;# 
   126  0110                     	;# 
   127  0111                     	;# 
   128  0112                     	;# 
   129  0112                     	;# 
   130  0113                     	;# 
   131  0114                     	;# 
   132  0114                     	;# 
   133  0115                     	;# 
   134  0116                     	;# 
   135  0116                     	;# 
   136  0117                     	;# 
   137  0119                     	;# 
   138  0119                     	;# 
   139  0119                     	;# 
   140  011A                     	;# 
   141  011A                     	;# 
   142  011A                     	;# 
   143  011B                     	;# 
   144  011B                     	;# 
   145  011B                     	;# 
   146  011B                     	;# 
   147  011B                     	;# 
   148  011C                     	;# 
   149  011C                     	;# 
   150  011C                     	;# 
   151  011D                     	;# 
   152  011D                     	;# 
   153  011D                     	;# 
   154  011E                     	;# 
   155  011E                     	;# 
   156  011E                     	;# 
   157  011F                     	;# 
   158  011F                     	;# 
   159  011F                     	;# 
   160  011F                     	;# 
   161  011F                     	;# 
   162  018C                     	;# 
   163  018D                     	;# 
   164  018E                     	;# 
   165  018F                     	;# 
   166  0190                     	;# 
   167  0191                     	;# 
   168  0192                     	;# 
   169  0196                     	;# 
   170  0197                     	;# 
   171  0198                     	;# 
   172  0199                     	;# 
   173  019A                     	;# 
   174  019B                     	;# 
   175  019C                     	;# 
   176  020C                     	;# 
   177  020D                     	;# 
   178  020E                     	;# 
   179  020F                     	;# 
   180  020F                     	;# 
   181  0210                     	;# 
   182  0210                     	;# 
   183  0211                     	;# 
   184  0211                     	;# 
   185  0212                     	;# 
   186  0213                     	;# 
   187  0214                     	;# 
   188  0215                     	;# 
   189  0215                     	;# 
   190  0216                     	;# 
   191  0216                     	;# 
   192  0217                     	;# 
   193  0217                     	;# 
   194  0218                     	;# 
   195  0219                     	;# 
   196  021A                     	;# 
   197  021B                     	;# 
   198  021B                     	;# 
   199  021C                     	;# 
   200  021C                     	;# 
   201  021D                     	;# 
   202  021D                     	;# 
   203  021E                     	;# 
   204  021F                     	;# 
   205  028C                     	;# 
   206  028C                     	;# 
   207  028D                     	;# 
   208  028D                     	;# 
   209  028E                     	;# 
   210  028F                     	;# 
   211  0290                     	;# 
   212  0290                     	;# 
   213  0291                     	;# 
   214  0292                     	;# 
   215  0292                     	;# 
   216  0293                     	;# 
   217  0293                     	;# 
   218  0294                     	;# 
   219  0295                     	;# 
   220  0296                     	;# 
   221  0296                     	;# 
   222  0297                     	;# 
   223  0298                     	;# 
   224  0298                     	;# 
   225  0299                     	;# 
   226  0299                     	;# 
   227  029A                     	;# 
   228  029B                     	;# 
   229  029C                     	;# 
   230  029C                     	;# 
   231  029D                     	;# 
   232  030C                     	;# 
   233  030C                     	;# 
   234  030D                     	;# 
   235  030E                     	;# 
   236  030F                     	;# 
   237  0310                     	;# 
   238  0310                     	;# 
   239  0311                     	;# 
   240  0312                     	;# 
   241  0313                     	;# 
   242  0314                     	;# 
   243  0314                     	;# 
   244  0315                     	;# 
   245  0316                     	;# 
   246  0317                     	;# 
   247  0318                     	;# 
   248  0318                     	;# 
   249  0319                     	;# 
   250  031A                     	;# 
   251  031B                     	;# 
   252  031C                     	;# 
   253  031C                     	;# 
   254  031D                     	;# 
   255  031E                     	;# 
   256  031F                     	;# 
   257  038C                     	;# 
   258  038D                     	;# 
   259  038E                     	;# 
   260  0390                     	;# 
   261  0391                     	;# 
   262  0392                     	;# 
   263  040C                     	;# 
   264  040D                     	;# 
   265  040E                     	;# 
   266  040F                     	;# 
   267  0410                     	;# 
   268  0411                     	;# 
   269  0416                     	;# 
   270  0416                     	;# 
   271  0417                     	;# 
   272  0418                     	;# 
   273  0418                     	;# 
   274  0419                     	;# 
   275  041A                     	;# 
   276  041A                     	;# 
   277  041B                     	;# 
   278  041C                     	;# 
   279  041C                     	;# 
   280  041D                     	;# 
   281  041E                     	;# 
   282  041F                     	;# 
   283  048C                     	;# 
   284  048C                     	;# 
   285  048D                     	;# 
   286  048E                     	;# 
   287  048F                     	;# 
   288  048F                     	;# 
   289  0490                     	;# 
   290  0491                     	;# 
   291  0492                     	;# 
   292  0492                     	;# 
   293  0493                     	;# 
   294  0494                     	;# 
   295  0495                     	;# 
   296  0495                     	;# 
   297  0496                     	;# 
   298  0497                     	;# 
   299  0498                     	;# 
   300  0499                     	;# 
   301  049A                     	;# 
   302  049B                     	;# 
   303  049C                     	;# 
   304  049D                     	;# 
   305  050C                     	;# 
   306  050C                     	;# 
   307  050D                     	;# 
   308  050E                     	;# 
   309  050F                     	;# 
   310  050F                     	;# 
   311  0510                     	;# 
   312  0511                     	;# 
   313  0512                     	;# 
   314  0512                     	;# 
   315  0513                     	;# 
   316  0514                     	;# 
   317  0515                     	;# 
   318  0515                     	;# 
   319  0516                     	;# 
   320  0517                     	;# 
   321  0518                     	;# 
   322  0519                     	;# 
   323  051A                     	;# 
   324  051B                     	;# 
   325  051C                     	;# 
   326  051D                     	;# 
   327  058C                     	;# 
   328  058C                     	;# 
   329  058D                     	;# 
   330  058E                     	;# 
   331  058F                     	;# 
   332  058F                     	;# 
   333  0590                     	;# 
   334  0591                     	;# 
   335  0592                     	;# 
   336  0593                     	;# 
   337  060C                     	;# 
   338  060D                     	;# 
   339  060E                     	;# 
   340  060F                     	;# 
   341  0610                     	;# 
   342  0611                     	;# 
   343  0612                     	;# 
   344  0613                     	;# 
   345  0614                     	;# 
   346  0616                     	;# 
   347  0617                     	;# 
   348  0618                     	;# 
   349  0619                     	;# 
   350  061A                     	;# 
   351  061B                     	;# 
   352  061C                     	;# 
   353  061D                     	;# 
   354  061E                     	;# 
   355  068C                     	;# 
   356  068D                     	;# 
   357  068E                     	;# 
   358  068F                     	;# 
   359  0690                     	;# 
   360  0691                     	;# 
   361  0692                     	;# 
   362  0693                     	;# 
   363  0694                     	;# 
   364  070C                     	;# 
   365  070D                     	;# 
   366  070E                     	;# 
   367  070F                     	;# 
   368  0710                     	;# 
   369  0711                     	;# 
   370  0712                     	;# 
   371  0713                     	;# 
   372  0714                     	;# 
   373  0716                     	;# 
   374  0717                     	;# 
   375  0718                     	;# 
   376  0719                     	;# 
   377  071A                     	;# 
   378  071B                     	;# 
   379  071C                     	;# 
   380  071D                     	;# 
   381  071E                     	;# 
   382  0796                     	;# 
   383  0797                     	;# 
   384  0798                     	;# 
   385  0799                     	;# 
   386  079A                     	;# 
   387  079B                     	;# 
   388  080C                     	;# 
   389  080D                     	;# 
   390  080E                     	;# 
   391  080F                     	;# 
   392  0810                     	;# 
   393  0811                     	;# 
   394  0812                     	;# 
   395  0813                     	;# 
   396  0814                     	;# 
   397  081A                     	;# 
   398  081B                     	;# 
   399  081C                     	;# 
   400  081D                     	;# 
   401  081E                     	;# 
   402  081F                     	;# 
   403  088C                     	;# 
   404  088D                     	;# 
   405  088E                     	;# 
   406  088F                     	;# 
   407  0890                     	;# 
   408  0891                     	;# 
   409  0892                     	;# 
   410  0893                     	;# 
   411  0895                     	;# 
   412  0896                     	;# 
   413  0897                     	;# 
   414  0898                     	;# 
   415  0899                     	;# 
   416  089A                     	;# 
   417  089B                     	;# 
   418  090C                     	;# 
   419  090E                     	;# 
   420  090F                     	;# 
   421  091F                     	;# 
   422  091F                     	;# 
   423  098F                     	;# 
   424  098F                     	;# 
   425  0990                     	;# 
   426  0991                     	;# 
   427  0992                     	;# 
   428  0993                     	;# 
   429  0994                     	;# 
   430  0995                     	;# 
   431  0996                     	;# 
   432  0997                     	;# 
   433  0E0F                     	;# 
   434  0E10                     	;# 
   435  0E11                     	;# 
   436  0E12                     	;# 
   437  0E13                     	;# 
   438  0E14                     	;# 
   439  0E15                     	;# 
   440  0E16                     	;# 
   441  0E17                     	;# 
   442  0E18                     	;# 
   443  0E19                     	;# 
   444  0E1A                     	;# 
   445  0E1B                     	;# 
   446  0E1C                     	;# 
   447  0E1D                     	;# 
   448  0E1E                     	;# 
   449  0E1F                     	;# 
   450  0E20                     	;# 
   451  0E21                     	;# 
   452  0E22                     	;# 
   453  0E23                     	;# 
   454  0E24                     	;# 
   455  0E25                     	;# 
   456  0E26                     	;# 
   457  0E27                     	;# 
   458  0E28                     	;# 
   459  0E29                     	;# 
   460  0E2A                     	;# 
   461  0E2B                     	;# 
   462  0E2C                     	;# 
   463  0E2D                     	;# 
   464  0E2E                     	;# 
   465  0E2F                     	;# 
   466  0E30                     	;# 
   467  0E31                     	;# 
   468  0E32                     	;# 
   469  0E33                     	;# 
   470  0E34                     	;# 
   471  0E35                     	;# 
   472  0E36                     	;# 
   473  0E37                     	;# 
   474  0E8F                     	;# 
   475  0E90                     	;# 
   476  0E91                     	;# 
   477  0E92                     	;# 
   478  0E93                     	;# 
   479  0E94                     	;# 
   480  0E95                     	;# 
   481  0E96                     	;# 
   482  0E97                     	;# 
   483  0E9C                     	;# 
   484  0E9D                     	;# 
   485  0E9E                     	;# 
   486  0EA1                     	;# 
   487  0EA2                     	;# 
   488  0EA3                     	;# 
   489  0EA4                     	;# 
   490  0EA5                     	;# 
   491  0EA9                     	;# 
   492  0EAA                     	;# 
   493  0EAB                     	;# 
   494  0EAC                     	;# 
   495  0EB1                     	;# 
   496  0EB2                     	;# 
   497  0EB3                     	;# 
   498  0EB8                     	;# 
   499  0EB9                     	;# 
   500  0EBA                     	;# 
   501  0EBB                     	;# 
   502  0EBC                     	;# 
   503  0EBD                     	;# 
   504  0EBE                     	;# 
   505  0EC3                     	;# 
   506  0EC5                     	;# 
   507  0EC6                     	;# 
   508  0EC7                     	;# 
   509  0EC8                     	;# 
   510  0EC9                     	;# 
   511  0ECA                     	;# 
   512  0ECB                     	;# 
   513  0ECC                     	;# 
   514  0F10                     	;# 
   515  0F11                     	;# 
   516  0F12                     	;# 
   517  0F13                     	;# 
   518  0F14                     	;# 
   519  0F15                     	;# 
   520  0F16                     	;# 
   521  0F17                     	;# 
   522  0F18                     	;# 
   523  0F19                     	;# 
   524  0F1A                     	;# 
   525  0F1B                     	;# 
   526  0F1C                     	;# 
   527  0F1D                     	;# 
   528  0F1E                     	;# 
   529  0F1F                     	;# 
   530  0F20                     	;# 
   531  0F21                     	;# 
   532  0F22                     	;# 
   533  0F23                     	;# 
   534  0F24                     	;# 
   535  0F25                     	;# 
   536  0F26                     	;# 
   537  0F27                     	;# 
   538  0F38                     	;# 
   539  0F39                     	;# 
   540  0F3A                     	;# 
   541  0F3B                     	;# 
   542  0F3C                     	;# 
   543  0F3D                     	;# 
   544  0F3E                     	;# 
   545  0F3F                     	;# 
   546  0F40                     	;# 
   547  0F41                     	;# 
   548  0F43                     	;# 
   549  0F44                     	;# 
   550  0F45                     	;# 
   551  0F46                     	;# 
   552  0F47                     	;# 
   553  0F48                     	;# 
   554  0F49                     	;# 
   555  0F4A                     	;# 
   556  0F4B                     	;# 
   557  0F4C                     	;# 
   558  0F4E                     	;# 
   559  0F4F                     	;# 
   560  0F50                     	;# 
   561  0F51                     	;# 
   562  0F52                     	;# 
   563  0F53                     	;# 
   564  0F54                     	;# 
   565  0F55                     	;# 
   566  0F56                     	;# 
   567  0F57                     	;# 
   568  0F65                     	;# 
   569  0F68                     	;# 
   570  0F69                     	;# 
   571  0F6A                     	;# 
   572  0F6B                     	;# 
   573  0FE4                     	;# 
   574  0FE5                     	;# 
   575  0FE6                     	;# 
   576  0FE7                     	;# 
   577  0FE8                     	;# 
   578  0FE9                     	;# 
   579  0FEA                     	;# 
   580  0FEB                     	;# 
   581  0FED                     	;# 
   582  0FEE                     	;# 
   583  0FEF                     	;# 
   584  0000                     	;# 
   585  0001                     	;# 
   586  0002                     	;# 
   587  0003                     	;# 
   588  0004                     	;# 
   589  0005                     	;# 
   590  0006                     	;# 
   591  0007                     	;# 
   592  0008                     	;# 
   593  0009                     	;# 
   594  000A                     	;# 
   595  000B                     	;# 
   596  000C                     	;# 
   597  000D                     	;# 
   598  000E                     	;# 
   599  0010                     	;# 
   600  0011                     	;# 
   601  0012                     	;# 
   602  0013                     	;# 
   603  0016                     	;# 
   604  0017                     	;# 
   605  0018                     	;# 
   606  001C                     	;# 
   607  001C                     	;# 
   608  001D                     	;# 
   609  001D                     	;# 
   610  001E                     	;# 
   611  001F                     	;# 
   612  008C                     	;# 
   613  008C                     	;# 
   614  008D                     	;# 
   615  008E                     	;# 
   616  008E                     	;# 
   617  008F                     	;# 
   618  0090                     	;# 
   619  0090                     	;# 
   620  0091                     	;# 
   621  0093                     	;# 
   622  0094                     	;# 
   623  0095                     	;# 
   624  0096                     	;# 
   625  0097                     	;# 
   626  0098                     	;# 
   627  0099                     	;# 
   628  009A                     	;# 
   629  009B                     	;# 
   630  009C                     	;# 
   631  009D                     	;# 
   632  009E                     	;# 
   633  010C                     	;# 
   634  010D                     	;# 
   635  010E                     	;# 
   636  010E                     	;# 
   637  010F                     	;# 
   638  0110                     	;# 
   639  0110                     	;# 
   640  0111                     	;# 
   641  0112                     	;# 
   642  0112                     	;# 
   643  0113                     	;# 
   644  0114                     	;# 
   645  0114                     	;# 
   646  0115                     	;# 
   647  0116                     	;# 
   648  0116                     	;# 
   649  0117                     	;# 
   650  0119                     	;# 
   651  0119                     	;# 
   652  0119                     	;# 
   653  011A                     	;# 
   654  011A                     	;# 
   655  011A                     	;# 
   656  011B                     	;# 
   657  011B                     	;# 
   658  011B                     	;# 
   659  011B                     	;# 
   660  011B                     	;# 
   661  011C                     	;# 
   662  011C                     	;# 
   663  011C                     	;# 
   664  011D                     	;# 
   665  011D                     	;# 
   666  011D                     	;# 
   667  011E                     	;# 
   668  011E                     	;# 
   669  011E                     	;# 
   670  011F                     	;# 
   671  011F                     	;# 
   672  011F                     	;# 
   673  011F                     	;# 
   674  011F                     	;# 
   675  018C                     	;# 
   676  018D                     	;# 
   677  018E                     	;# 
   678  018F                     	;# 
   679  0190                     	;# 
   680  0191                     	;# 
   681  0192                     	;# 
   682  0196                     	;# 
   683  0197                     	;# 
   684  0198                     	;# 
   685  0199                     	;# 
   686  019A                     	;# 
   687  019B                     	;# 
   688  019C                     	;# 
   689  020C                     	;# 
   690  020D                     	;# 
   691  020E                     	;# 
   692  020F                     	;# 
   693  020F                     	;# 
   694  0210                     	;# 
   695  0210                     	;# 
   696  0211                     	;# 
   697  0211                     	;# 
   698  0212                     	;# 
   699  0213                     	;# 
   700  0214                     	;# 
   701  0215                     	;# 
   702  0215                     	;# 
   703  0216                     	;# 
   704  0216                     	;# 
   705  0217                     	;# 
   706  0217                     	;# 
   707  0218                     	;# 
   708  0219                     	;# 
   709  021A                     	;# 
   710  021B                     	;# 
   711  021B                     	;# 
   712  021C                     	;# 
   713  021C                     	;# 
   714  021D                     	;# 
   715  021D                     	;# 
   716  021E                     	;# 
   717  021F                     	;# 
   718  028C                     	;# 
   719  028C                     	;# 
   720  028D                     	;# 
   721  028D                     	;# 
   722  028E                     	;# 
   723  028F                     	;# 
   724  0290                     	;# 
   725  0290                     	;# 
   726  0291                     	;# 
   727  0292                     	;# 
   728  0292                     	;# 
   729  0293                     	;# 
   730  0293                     	;# 
   731  0294                     	;# 
   732  0295                     	;# 
   733  0296                     	;# 
   734  0296                     	;# 
   735  0297                     	;# 
   736  0298                     	;# 
   737  0298                     	;# 
   738  0299                     	;# 
   739  0299                     	;# 
   740  029A                     	;# 
   741  029B                     	;# 
   742  029C                     	;# 
   743  029C                     	;# 
   744  029D                     	;# 
   745  030C                     	;# 
   746  030C                     	;# 
   747  030D                     	;# 
   748  030E                     	;# 
   749  030F                     	;# 
   750  0310                     	;# 
   751  0310                     	;# 
   752  0311                     	;# 
   753  0312                     	;# 
   754  0313                     	;# 
   755  0314                     	;# 
   756  0314                     	;# 
   757  0315                     	;# 
   758  0316                     	;# 
   759  0317                     	;# 
   760  0318                     	;# 
   761  0318                     	;# 
   762  0319                     	;# 
   763  031A                     	;# 
   764  031B                     	;# 
   765  031C                     	;# 
   766  031C                     	;# 
   767  031D                     	;# 
   768  031E                     	;# 
   769  031F                     	;# 
   770  038C                     	;# 
   771  038D                     	;# 
   772  038E                     	;# 
   773  0390                     	;# 
   774  0391                     	;# 
   775  0392                     	;# 
   776  040C                     	;# 
   777  040D                     	;# 
   778  040E                     	;# 
   779  040F                     	;# 
   780  0410                     	;# 
   781  0411                     	;# 
   782  0416                     	;# 
   783  0416                     	;# 
   784  0417                     	;# 
   785  0418                     	;# 
   786  0418                     	;# 
   787  0419                     	;# 
   788  041A                     	;# 
   789  041A                     	;# 
   790  041B                     	;# 
   791  041C                     	;# 
   792  041C                     	;# 
   793  041D                     	;# 
   794  041E                     	;# 
   795  041F                     	;# 
   796  048C                     	;# 
   797  048C                     	;# 
   798  048D                     	;# 
   799  048E                     	;# 
   800  048F                     	;# 
   801  048F                     	;# 
   802  0490                     	;# 
   803  0491                     	;# 
   804  0492                     	;# 
   805  0492                     	;# 
   806  0493                     	;# 
   807  0494                     	;# 
   808  0495                     	;# 
   809  0495                     	;# 
   810  0496                     	;# 
   811  0497                     	;# 
   812  0498                     	;# 
   813  0499                     	;# 
   814  049A                     	;# 
   815  049B                     	;# 
   816  049C                     	;# 
   817  049D                     	;# 
   818  050C                     	;# 
   819  050C                     	;# 
   820  050D                     	;# 
   821  050E                     	;# 
   822  050F                     	;# 
   823  050F                     	;# 
   824  0510                     	;# 
   825  0511                     	;# 
   826  0512                     	;# 
   827  0512                     	;# 
   828  0513                     	;# 
   829  0514                     	;# 
   830  0515                     	;# 
   831  0515                     	;# 
   832  0516                     	;# 
   833  0517                     	;# 
   834  0518                     	;# 
   835  0519                     	;# 
   836  051A                     	;# 
   837  051B                     	;# 
   838  051C                     	;# 
   839  051D                     	;# 
   840  058C                     	;# 
   841  058C                     	;# 
   842  058D                     	;# 
   843  058E                     	;# 
   844  058F                     	;# 
   845  058F                     	;# 
   846  0590                     	;# 
   847  0591                     	;# 
   848  0592                     	;# 
   849  0593                     	;# 
   850  060C                     	;# 
   851  060D                     	;# 
   852  060E                     	;# 
   853  060F                     	;# 
   854  0610                     	;# 
   855  0611                     	;# 
   856  0612                     	;# 
   857  0613                     	;# 
   858  0614                     	;# 
   859  0616                     	;# 
   860  0617                     	;# 
   861  0618                     	;# 
   862  0619                     	;# 
   863  061A                     	;# 
   864  061B                     	;# 
   865  061C                     	;# 
   866  061D                     	;# 
   867  061E                     	;# 
   868  068C                     	;# 
   869  068D                     	;# 
   870  068E                     	;# 
   871  068F                     	;# 
   872  0690                     	;# 
   873  0691                     	;# 
   874  0692                     	;# 
   875  0693                     	;# 
   876  0694                     	;# 
   877  070C                     	;# 
   878  070D                     	;# 
   879  070E                     	;# 
   880  070F                     	;# 
   881  0710                     	;# 
   882  0711                     	;# 
   883  0712                     	;# 
   884  0713                     	;# 
   885  0714                     	;# 
   886  0716                     	;# 
   887  0717                     	;# 
   888  0718                     	;# 
   889  0719                     	;# 
   890  071A                     	;# 
   891  071B                     	;# 
   892  071C                     	;# 
   893  071D                     	;# 
   894  071E                     	;# 
   895  0796                     	;# 
   896  0797                     	;# 
   897  0798                     	;# 
   898  0799                     	;# 
   899  079A                     	;# 
   900  079B                     	;# 
   901  080C                     	;# 
   902  080D                     	;# 
   903  080E                     	;# 
   904  080F                     	;# 
   905  0810                     	;# 
   906  0811                     	;# 
   907  0812                     	;# 
   908  0813                     	;# 
   909  0814                     	;# 
   910  081A                     	;# 
   911  081B                     	;# 
   912  081C                     	;# 
   913  081D                     	;# 
   914  081E                     	;# 
   915  081F                     	;# 
   916  088C                     	;# 
   917  088D                     	;# 
   918  088E                     	;# 
   919  088F                     	;# 
   920  0890                     	;# 
   921  0891                     	;# 
   922  0892                     	;# 
   923  0893                     	;# 
   924  0895                     	;# 
   925  0896                     	;# 
   926  0897                     	;# 
   927  0898                     	;# 
   928  0899                     	;# 
   929  089A                     	;# 
   930  089B                     	;# 
   931  090C                     	;# 
   932  090E                     	;# 
   933  090F                     	;# 
   934  091F                     	;# 
   935  091F                     	;# 
   936  098F                     	;# 
   937  098F                     	;# 
   938  0990                     	;# 
   939  0991                     	;# 
   940  0992                     	;# 
   941  0993                     	;# 
   942  0994                     	;# 
   943  0995                     	;# 
   944  0996                     	;# 
   945  0997                     	;# 
   946  0E0F                     	;# 
   947  0E10                     	;# 
   948  0E11                     	;# 
   949  0E12                     	;# 
   950  0E13                     	;# 
   951  0E14                     	;# 
   952  0E15                     	;# 
   953  0E16                     	;# 
   954  0E17                     	;# 
   955  0E18                     	;# 
   956  0E19                     	;# 
   957  0E1A                     	;# 
   958  0E1B                     	;# 
   959  0E1C                     	;# 
   960  0E1D                     	;# 
   961  0E1E                     	;# 
   962  0E1F                     	;# 
   963  0E20                     	;# 
   964  0E21                     	;# 
   965  0E22                     	;# 
   966  0E23                     	;# 
   967  0E24                     	;# 
   968  0E25                     	;# 
   969  0E26                     	;# 
   970  0E27                     	;# 
   971  0E28                     	;# 
   972  0E29                     	;# 
   973  0E2A                     	;# 
   974  0E2B                     	;# 
   975  0E2C                     	;# 
   976  0E2D                     	;# 
   977  0E2E                     	;# 
   978  0E2F                     	;# 
   979  0E30                     	;# 
   980  0E31                     	;# 
   981  0E32                     	;# 
   982  0E33                     	;# 
   983  0E34                     	;# 
   984  0E35                     	;# 
   985  0E36                     	;# 
   986  0E37                     	;# 
   987  0E8F                     	;# 
   988  0E90                     	;# 
   989  0E91                     	;# 
   990  0E92                     	;# 
   991  0E93                     	;# 
   992  0E94                     	;# 
   993  0E95                     	;# 
   994  0E96                     	;# 
   995  0E97                     	;# 
   996  0E9C                     	;# 
   997  0E9D                     	;# 
   998  0E9E                     	;# 
   999  0EA1                     	;# 
  1000  0EA2                     	;# 
  1001  0EA3                     	;# 
  1002  0EA4                     	;# 
  1003  0EA5                     	;# 
  1004  0EA9                     	;# 
  1005  0EAA                     	;# 
  1006  0EAB                     	;# 
  1007  0EAC                     	;# 
  1008  0EB1                     	;# 
  1009  0EB2                     	;# 
  1010  0EB3                     	;# 
  1011  0EB8                     	;# 
  1012  0EB9                     	;# 
  1013  0EBA                     	;# 
  1014  0EBB                     	;# 
  1015  0EBC                     	;# 
  1016  0EBD                     	;# 
  1017  0EBE                     	;# 
  1018  0EC3                     	;# 
  1019  0EC5                     	;# 
  1020  0EC6                     	;# 
  1021  0EC7                     	;# 
  1022  0EC8                     	;# 
  1023  0EC9                     	;# 
  1024  0ECA                     	;# 
  1025  0ECB                     	;# 
  1026  0ECC                     	;# 
  1027  0F10                     	;# 
  1028  0F11                     	;# 
  1029  0F12                     	;# 
  1030  0F13                     	;# 
  1031  0F14                     	;# 
  1032  0F15                     	;# 
  1033  0F16                     	;# 
  1034  0F17                     	;# 
  1035  0F18                     	;# 
  1036  0F19                     	;# 
  1037  0F1A                     	;# 
  1038  0F1B                     	;# 
  1039  0F1C                     	;# 
  1040  0F1D                     	;# 
  1041  0F1E                     	;# 
  1042  0F1F                     	;# 
  1043  0F20                     	;# 
  1044  0F21                     	;# 
  1045  0F22                     	;# 
  1046  0F23                     	;# 
  1047  0F24                     	;# 
  1048  0F25                     	;# 
  1049  0F26                     	;# 
  1050  0F27                     	;# 
  1051  0F38                     	;# 
  1052  0F39                     	;# 
  1053  0F3A                     	;# 
  1054  0F3B                     	;# 
  1055  0F3C                     	;# 
  1056  0F3D                     	;# 
  1057  0F3E                     	;# 
  1058  0F3F                     	;# 
  1059  0F40                     	;# 
  1060  0F41                     	;# 
  1061  0F43                     	;# 
  1062  0F44                     	;# 
  1063  0F45                     	;# 
  1064  0F46                     	;# 
  1065  0F47                     	;# 
  1066  0F48                     	;# 
  1067  0F49                     	;# 
  1068  0F4A                     	;# 
  1069  0F4B                     	;# 
  1070  0F4C                     	;# 
  1071  0F4E                     	;# 
  1072  0F4F                     	;# 
  1073  0F50                     	;# 
  1074  0F51                     	;# 
  1075  0F52                     	;# 
  1076  0F53                     	;# 
  1077  0F54                     	;# 
  1078  0F55                     	;# 
  1079  0F56                     	;# 
  1080  0F57                     	;# 
  1081  0F65                     	;# 
  1082  0F68                     	;# 
  1083  0F69                     	;# 
  1084  0F6A                     	;# 
  1085  0F6B                     	;# 
  1086  0FE4                     	;# 
  1087  0FE5                     	;# 
  1088  0FE6                     	;# 
  1089  0FE7                     	;# 
  1090  0FE8                     	;# 
  1091  0FE9                     	;# 
  1092  0FEA                     	;# 
  1093  0FEB                     	;# 
  1094  0FED                     	;# 
  1095  0FEE                     	;# 
  1096  0FEF                     	;# 
  1097  0000                     	;# 
  1098  0001                     	;# 
  1099  0002                     	;# 
  1100  0003                     	;# 
  1101  0004                     	;# 
  1102  0005                     	;# 
  1103  0006                     	;# 
  1104  0007                     	;# 
  1105  0008                     	;# 
  1106  0009                     	;# 
  1107  000A                     	;# 
  1108  000B                     	;# 
  1109  000C                     	;# 
  1110  000D                     	;# 
  1111  000E                     	;# 
  1112  0010                     	;# 
  1113  0011                     	;# 
  1114  0012                     	;# 
  1115  0013                     	;# 
  1116  0016                     	;# 
  1117  0017                     	;# 
  1118  0018                     	;# 
  1119  001C                     	;# 
  1120  001C                     	;# 
  1121  001D                     	;# 
  1122  001D                     	;# 
  1123  001E                     	;# 
  1124  001F                     	;# 
  1125  008C                     	;# 
  1126  008C                     	;# 
  1127  008D                     	;# 
  1128  008E                     	;# 
  1129  008E                     	;# 
  1130  008F                     	;# 
  1131  0090                     	;# 
  1132  0090                     	;# 
  1133  0091                     	;# 
  1134  0093                     	;# 
  1135  0094                     	;# 
  1136  0095                     	;# 
  1137  0096                     	;# 
  1138  0097                     	;# 
  1139  0098                     	;# 
  1140  0099                     	;# 
  1141  009A                     	;# 
  1142  009B                     	;# 
  1143  009C                     	;# 
  1144  009D                     	;# 
  1145  009E                     	;# 
  1146  010C                     	;# 
  1147  010D                     	;# 
  1148  010E                     	;# 
  1149  010E                     	;# 
  1150  010F                     	;# 
  1151  0110                     	;# 
  1152  0110                     	;# 
  1153  0111                     	;# 
  1154  0112                     	;# 
  1155  0112                     	;# 
  1156  0113                     	;# 
  1157  0114                     	;# 
  1158  0114                     	;# 
  1159  0115                     	;# 
  1160  0116                     	;# 
  1161  0116                     	;# 
  1162  0117                     	;# 
  1163  0119                     	;# 
  1164  0119                     	;# 
  1165  0119                     	;# 
  1166  011A                     	;# 
  1167  011A                     	;# 
  1168  011A                     	;# 
  1169  011B                     	;# 
  1170  011B                     	;# 
  1171  011B                     	;# 
  1172  011B                     	;# 
  1173  011B                     	;# 
  1174  011C                     	;# 
  1175  011C                     	;# 
  1176  011C                     	;# 
  1177  011D                     	;# 
  1178  011D                     	;# 
  1179  011D                     	;# 
  1180  011E                     	;# 
  1181  011E                     	;# 
  1182  011E                     	;# 
  1183  011F                     	;# 
  1184  011F                     	;# 
  1185  011F                     	;# 
  1186  011F                     	;# 
  1187  011F                     	;# 
  1188  018C                     	;# 
  1189  018D                     	;# 
  1190  018E                     	;# 
  1191  018F                     	;# 
  1192  0190                     	;# 
  1193  0191                     	;# 
  1194  0192                     	;# 
  1195  0196                     	;# 
  1196  0197                     	;# 
  1197  0198                     	;# 
  1198  0199                     	;# 
  1199  019A                     	;# 
  1200  019B                     	;# 
  1201  019C                     	;# 
  1202  020C                     	;# 
  1203  020D                     	;# 
  1204  020E                     	;# 
  1205  020F                     	;# 
  1206  020F                     	;# 
  1207  0210                     	;# 
  1208  0210                     	;# 
  1209  0211                     	;# 
  1210  0211                     	;# 
  1211  0212                     	;# 
  1212  0213                     	;# 
  1213  0214                     	;# 
  1214  0215                     	;# 
  1215  0215                     	;# 
  1216  0216                     	;# 
  1217  0216                     	;# 
  1218  0217                     	;# 
  1219  0217                     	;# 
  1220  0218                     	;# 
  1221  0219                     	;# 
  1222  021A                     	;# 
  1223  021B                     	;# 
  1224  021B                     	;# 
  1225  021C                     	;# 
  1226  021C                     	;# 
  1227  021D                     	;# 
  1228  021D                     	;# 
  1229  021E                     	;# 
  1230  021F                     	;# 
  1231  028C                     	;# 
  1232  028C                     	;# 
  1233  028D                     	;# 
  1234  028D                     	;# 
  1235  028E                     	;# 
  1236  028F                     	;# 
  1237  0290                     	;# 
  1238  0290                     	;# 
  1239  0291                     	;# 
  1240  0292                     	;# 
  1241  0292                     	;# 
  1242  0293                     	;# 
  1243  0293                     	;# 
  1244  0294                     	;# 
  1245  0295                     	;# 
  1246  0296                     	;# 
  1247  0296                     	;# 
  1248  0297                     	;# 
  1249  0298                     	;# 
  1250  0298                     	;# 
  1251  0299                     	;# 
  1252  0299                     	;# 
  1253  029A                     	;# 
  1254  029B                     	;# 
  1255  029C                     	;# 
  1256  029C                     	;# 
  1257  029D                     	;# 
  1258  030C                     	;# 
  1259  030C                     	;# 
  1260  030D                     	;# 
  1261  030E                     	;# 
  1262  030F                     	;# 
  1263  0310                     	;# 
  1264  0310                     	;# 
  1265  0311                     	;# 
  1266  0312                     	;# 
  1267  0313                     	;# 
  1268  0314                     	;# 
  1269  0314                     	;# 
  1270  0315                     	;# 
  1271  0316                     	;# 
  1272  0317                     	;# 
  1273  0318                     	;# 
  1274  0318                     	;# 
  1275  0319                     	;# 
  1276  031A                     	;# 
  1277  031B                     	;# 
  1278  031C                     	;# 
  1279  031C                     	;# 
  1280  031D                     	;# 
  1281  031E                     	;# 
  1282  031F                     	;# 
  1283  038C                     	;# 
  1284  038D                     	;# 
  1285  038E                     	;# 
  1286  0390                     	;# 
  1287  0391                     	;# 
  1288  0392                     	;# 
  1289  040C                     	;# 
  1290  040D                     	;# 
  1291  040E                     	;# 
  1292  040F                     	;# 
  1293  0410                     	;# 
  1294  0411                     	;# 
  1295  0416                     	;# 
  1296  0416                     	;# 
  1297  0417                     	;# 
  1298  0418                     	;# 
  1299  0418                     	;# 
  1300  0419                     	;# 
  1301  041A                     	;# 
  1302  041A                     	;# 
  1303  041B                     	;# 
  1304  041C                     	;# 
  1305  041C                     	;# 
  1306  041D                     	;# 
  1307  041E                     	;# 
  1308  041F                     	;# 
  1309  048C                     	;# 
  1310  048C                     	;# 
  1311  048D                     	;# 
  1312  048E                     	;# 
  1313  048F                     	;# 
  1314  048F                     	;# 
  1315  0490                     	;# 
  1316  0491                     	;# 
  1317  0492                     	;# 
  1318  0492                     	;# 
  1319  0493                     	;# 
  1320  0494                     	;# 
  1321  0495                     	;# 
  1322  0495                     	;# 
  1323  0496                     	;# 
  1324  0497                     	;# 
  1325  0498                     	;# 
  1326  0499                     	;# 
  1327  049A                     	;# 
  1328  049B                     	;# 
  1329  049C                     	;# 
  1330  049D                     	;# 
  1331  050C                     	;# 
  1332  050C                     	;# 
  1333  050D                     	;# 
  1334  050E                     	;# 
  1335  050F                     	;# 
  1336  050F                     	;# 
  1337  0510                     	;# 
  1338  0511                     	;# 
  1339  0512                     	;# 
  1340  0512                     	;# 
  1341  0513                     	;# 
  1342  0514                     	;# 
  1343  0515                     	;# 
  1344  0515                     	;# 
  1345  0516                     	;# 
  1346  0517                     	;# 
  1347  0518                     	;# 
  1348  0519                     	;# 
  1349  051A                     	;# 
  1350  051B                     	;# 
  1351  051C                     	;# 
  1352  051D                     	;# 
  1353  058C                     	;# 
  1354  058C                     	;# 
  1355  058D                     	;# 
  1356  058E                     	;# 
  1357  058F                     	;# 
  1358  058F                     	;# 
  1359  0590                     	;# 
  1360  0591                     	;# 
  1361  0592                     	;# 
  1362  0593                     	;# 
  1363  060C                     	;# 
  1364  060D                     	;# 
  1365  060E                     	;# 
  1366  060F                     	;# 
  1367  0610                     	;# 
  1368  0611                     	;# 
  1369  0612                     	;# 
  1370  0613                     	;# 
  1371  0614                     	;# 
  1372  0616                     	;# 
  1373  0617                     	;# 
  1374  0618                     	;# 
  1375  0619                     	;# 
  1376  061A                     	;# 
  1377  061B                     	;# 
  1378  061C                     	;# 
  1379  061D                     	;# 
  1380  061E                     	;# 
  1381  068C                     	;# 
  1382  068D                     	;# 
  1383  068E                     	;# 
  1384  068F                     	;# 
  1385  0690                     	;# 
  1386  0691                     	;# 
  1387  0692                     	;# 
  1388  0693                     	;# 
  1389  0694                     	;# 
  1390  070C                     	;# 
  1391  070D                     	;# 
  1392  070E                     	;# 
  1393  070F                     	;# 
  1394  0710                     	;# 
  1395  0711                     	;# 
  1396  0712                     	;# 
  1397  0713                     	;# 
  1398  0714                     	;# 
  1399  0716                     	;# 
  1400  0717                     	;# 
  1401  0718                     	;# 
  1402  0719                     	;# 
  1403  071A                     	;# 
  1404  071B                     	;# 
  1405  071C                     	;# 
  1406  071D                     	;# 
  1407  071E                     	;# 
  1408  0796                     	;# 
  1409  0797                     	;# 
  1410  0798                     	;# 
  1411  0799                     	;# 
  1412  079A                     	;# 
  1413  079B                     	;# 
  1414  080C                     	;# 
  1415  080D                     	;# 
  1416  080E                     	;# 
  1417  080F                     	;# 
  1418  0810                     	;# 
  1419  0811                     	;# 
  1420  0812                     	;# 
  1421  0813                     	;# 
  1422  0814                     	;# 
  1423  081A                     	;# 
  1424  081B                     	;# 
  1425  081C                     	;# 
  1426  081D                     	;# 
  1427  081E                     	;# 
  1428  081F                     	;# 
  1429  088C                     	;# 
  1430  088D                     	;# 
  1431  088E                     	;# 
  1432  088F                     	;# 
  1433  0890                     	;# 
  1434  0891                     	;# 
  1435  0892                     	;# 
  1436  0893                     	;# 
  1437  0895                     	;# 
  1438  0896                     	;# 
  1439  0897                     	;# 
  1440  0898                     	;# 
  1441  0899                     	;# 
  1442  089A                     	;# 
  1443  089B                     	;# 
  1444  090C                     	;# 
  1445  090E                     	;# 
  1446  090F                     	;# 
  1447  091F                     	;# 
  1448  091F                     	;# 
  1449  098F                     	;# 
  1450  098F                     	;# 
  1451  0990                     	;# 
  1452  0991                     	;# 
  1453  0992                     	;# 
  1454  0993                     	;# 
  1455  0994                     	;# 
  1456  0995                     	;# 
  1457  0996                     	;# 
  1458  0997                     	;# 
  1459  0E0F                     	;# 
  1460  0E10                     	;# 
  1461  0E11                     	;# 
  1462  0E12                     	;# 
  1463  0E13                     	;# 
  1464  0E14                     	;# 
  1465  0E15                     	;# 
  1466  0E16                     	;# 
  1467  0E17                     	;# 
  1468  0E18                     	;# 
  1469  0E19                     	;# 
  1470  0E1A                     	;# 
  1471  0E1B                     	;# 
  1472  0E1C                     	;# 
  1473  0E1D                     	;# 
  1474  0E1E                     	;# 
  1475  0E1F                     	;# 
  1476  0E20                     	;# 
  1477  0E21                     	;# 
  1478  0E22                     	;# 
  1479  0E23                     	;# 
  1480  0E24                     	;# 
  1481  0E25                     	;# 
  1482  0E26                     	;# 
  1483  0E27                     	;# 
  1484  0E28                     	;# 
  1485  0E29                     	;# 
  1486  0E2A                     	;# 
  1487  0E2B                     	;# 
  1488  0E2C                     	;# 
  1489  0E2D                     	;# 
  1490  0E2E                     	;# 
  1491  0E2F                     	;# 
  1492  0E30                     	;# 
  1493  0E31                     	;# 
  1494  0E32                     	;# 
  1495  0E33                     	;# 
  1496  0E34                     	;# 
  1497  0E35                     	;# 
  1498  0E36                     	;# 
  1499  0E37                     	;# 
  1500  0E8F                     	;# 
  1501  0E90                     	;# 
  1502  0E91                     	;# 
  1503  0E92                     	;# 
  1504  0E93                     	;# 
  1505  0E94                     	;# 
  1506  0E95                     	;# 
  1507  0E96                     	;# 
  1508  0E97                     	;# 
  1509  0E9C                     	;# 
  1510  0E9D                     	;# 
  1511  0E9E                     	;# 
  1512  0EA1                     	;# 
  1513  0EA2                     	;# 
  1514  0EA3                     	;# 
  1515  0EA4                     	;# 
  1516  0EA5                     	;# 
  1517  0EA9                     	;# 
  1518  0EAA                     	;# 
  1519  0EAB                     	;# 
  1520  0EAC                     	;# 
  1521  0EB1                     	;# 
  1522  0EB2                     	;# 
  1523  0EB3                     	;# 
  1524  0EB8                     	;# 
  1525  0EB9                     	;# 
  1526  0EBA                     	;# 
  1527  0EBB                     	;# 
  1528  0EBC                     	;# 
  1529  0EBD                     	;# 
  1530  0EBE                     	;# 
  1531  0EC3                     	;# 
  1532  0EC5                     	;# 
  1533  0EC6                     	;# 
  1534  0EC7                     	;# 
  1535  0EC8                     	;# 
  1536  0EC9                     	;# 
  1537  0ECA                     	;# 
  1538  0ECB                     	;# 
  1539  0ECC                     	;# 
  1540  0F10                     	;# 
  1541  0F11                     	;# 
  1542  0F12                     	;# 
  1543  0F13                     	;# 
  1544  0F14                     	;# 
  1545  0F15                     	;# 
  1546  0F16                     	;# 
  1547  0F17                     	;# 
  1548  0F18                     	;# 
  1549  0F19                     	;# 
  1550  0F1A                     	;# 
  1551  0F1B                     	;# 
  1552  0F1C                     	;# 
  1553  0F1D                     	;# 
  1554  0F1E                     	;# 
  1555  0F1F                     	;# 
  1556  0F20                     	;# 
  1557  0F21                     	;# 
  1558  0F22                     	;# 
  1559  0F23                     	;# 
  1560  0F24                     	;# 
  1561  0F25                     	;# 
  1562  0F26                     	;# 
  1563  0F27                     	;# 
  1564  0F38                     	;# 
  1565  0F39                     	;# 
  1566  0F3A                     	;# 
  1567  0F3B                     	;# 
  1568  0F3C                     	;# 
  1569  0F3D                     	;# 
  1570  0F3E                     	;# 
  1571  0F3F                     	;# 
  1572  0F40                     	;# 
  1573  0F41                     	;# 
  1574  0F43                     	;# 
  1575  0F44                     	;# 
  1576  0F45                     	;# 
  1577  0F46                     	;# 
  1578  0F47                     	;# 
  1579  0F48                     	;# 
  1580  0F49                     	;# 
  1581  0F4A                     	;# 
  1582  0F4B                     	;# 
  1583  0F4C                     	;# 
  1584  0F4E                     	;# 
  1585  0F4F                     	;# 
  1586  0F50                     	;# 
  1587  0F51                     	;# 
  1588  0F52                     	;# 
  1589  0F53                     	;# 
  1590  0F54                     	;# 
  1591  0F55                     	;# 
  1592  0F56                     	;# 
  1593  0F57                     	;# 
  1594  0F65                     	;# 
  1595  0F68                     	;# 
  1596  0F69                     	;# 
  1597  0F6A                     	;# 
  1598  0F6B                     	;# 
  1599  0FE4                     	;# 
  1600  0FE5                     	;# 
  1601  0FE6                     	;# 
  1602  0FE7                     	;# 
  1603  0FE8                     	;# 
  1604  0FE9                     	;# 
  1605  0FEA                     	;# 
  1606  0FEB                     	;# 
  1607  0FED                     	;# 
  1608  0FEE                     	;# 
  1609  0FEF                     	;# 
  1610  0000                     	;# 
  1611  0001                     	;# 
  1612  0002                     	;# 
  1613  0003                     	;# 
  1614  0004                     	;# 
  1615  0005                     	;# 
  1616  0006                     	;# 
  1617  0007                     	;# 
  1618  0008                     	;# 
  1619  0009                     	;# 
  1620  000A                     	;# 
  1621  000B                     	;# 
  1622  000C                     	;# 
  1623  000D                     	;# 
  1624  000E                     	;# 
  1625  0010                     	;# 
  1626  0011                     	;# 
  1627  0012                     	;# 
  1628  0013                     	;# 
  1629  0016                     	;# 
  1630  0017                     	;# 
  1631  0018                     	;# 
  1632  001C                     	;# 
  1633  001C                     	;# 
  1634  001D                     	;# 
  1635  001D                     	;# 
  1636  001E                     	;# 
  1637  001F                     	;# 
  1638  008C                     	;# 
  1639  008C                     	;# 
  1640  008D                     	;# 
  1641  008E                     	;# 
  1642  008E                     	;# 
  1643  008F                     	;# 
  1644  0090                     	;# 
  1645  0090                     	;# 
  1646  0091                     	;# 
  1647  0093                     	;# 
  1648  0094                     	;# 
  1649  0095                     	;# 
  1650  0096                     	;# 
  1651  0097                     	;# 
  1652  0098                     	;# 
  1653  0099                     	;# 
  1654  009A                     	;# 
  1655  009B                     	;# 
  1656  009C                     	;# 
  1657  009D                     	;# 
  1658  009E                     	;# 
  1659  010C                     	;# 
  1660  010D                     	;# 
  1661  010E                     	;# 
  1662  010E                     	;# 
  1663  010F                     	;# 
  1664  0110                     	;# 
  1665  0110                     	;# 
  1666  0111                     	;# 
  1667  0112                     	;# 
  1668  0112                     	;# 
  1669  0113                     	;# 
  1670  0114                     	;# 
  1671  0114                     	;# 
  1672  0115                     	;# 
  1673  0116                     	;# 
  1674  0116                     	;# 
  1675  0117                     	;# 
  1676  0119                     	;# 
  1677  0119                     	;# 
  1678  0119                     	;# 
  1679  011A                     	;# 
  1680  011A                     	;# 
  1681  011A                     	;# 
  1682  011B                     	;# 
  1683  011B                     	;# 
  1684  011B                     	;# 
  1685  011B                     	;# 
  1686  011B                     	;# 
  1687  011C                     	;# 
  1688  011C                     	;# 
  1689  011C                     	;# 
  1690  011D                     	;# 
  1691  011D                     	;# 
  1692  011D                     	;# 
  1693  011E                     	;# 
  1694  011E                     	;# 
  1695  011E                     	;# 
  1696  011F                     	;# 
  1697  011F                     	;# 
  1698  011F                     	;# 
  1699  011F                     	;# 
  1700  011F                     	;# 
  1701  018C                     	;# 
  1702  018D                     	;# 
  1703  018E                     	;# 
  1704  018F                     	;# 
  1705  0190                     	;# 
  1706  0191                     	;# 
  1707  0192                     	;# 
  1708  0196                     	;# 
  1709  0197                     	;# 
  1710  0198                     	;# 
  1711  0199                     	;# 
  1712  019A                     	;# 
  1713  019B                     	;# 
  1714  019C                     	;# 
  1715  020C                     	;# 
  1716  020D                     	;# 
  1717  020E                     	;# 
  1718  020F                     	;# 
  1719  020F                     	;# 
  1720  0210                     	;# 
  1721  0210                     	;# 
  1722  0211                     	;# 
  1723  0211                     	;# 
  1724  0212                     	;# 
  1725  0213                     	;# 
  1726  0214                     	;# 
  1727  0215                     	;# 
  1728  0215                     	;# 
  1729  0216                     	;# 
  1730  0216                     	;# 
  1731  0217                     	;# 
  1732  0217                     	;# 
  1733  0218                     	;# 
  1734  0219                     	;# 
  1735  021A                     	;# 
  1736  021B                     	;# 
  1737  021B                     	;# 
  1738  021C                     	;# 
  1739  021C                     	;# 
  1740  021D                     	;# 
  1741  021D                     	;# 
  1742  021E                     	;# 
  1743  021F                     	;# 
  1744  028C                     	;# 
  1745  028C                     	;# 
  1746  028D                     	;# 
  1747  028D                     	;# 
  1748  028E                     	;# 
  1749  028F                     	;# 
  1750  0290                     	;# 
  1751  0290                     	;# 
  1752  0291                     	;# 
  1753  0292                     	;# 
  1754  0292                     	;# 
  1755  0293                     	;# 
  1756  0293                     	;# 
  1757  0294                     	;# 
  1758  0295                     	;# 
  1759  0296                     	;# 
  1760  0296                     	;# 
  1761  0297                     	;# 
  1762  0298                     	;# 
  1763  0298                     	;# 
  1764  0299                     	;# 
  1765  0299                     	;# 
  1766  029A                     	;# 
  1767  029B                     	;# 
  1768  029C                     	;# 
  1769  029C                     	;# 
  1770  029D                     	;# 
  1771  030C                     	;# 
  1772  030C                     	;# 
  1773  030D                     	;# 
  1774  030E                     	;# 
  1775  030F                     	;# 
  1776  0310                     	;# 
  1777  0310                     	;# 
  1778  0311                     	;# 
  1779  0312                     	;# 
  1780  0313                     	;# 
  1781  0314                     	;# 
  1782  0314                     	;# 
  1783  0315                     	;# 
  1784  0316                     	;# 
  1785  0317                     	;# 
  1786  0318                     	;# 
  1787  0318                     	;# 
  1788  0319                     	;# 
  1789  031A                     	;# 
  1790  031B                     	;# 
  1791  031C                     	;# 
  1792  031C                     	;# 
  1793  031D                     	;# 
  1794  031E                     	;# 
  1795  031F                     	;# 
  1796  038C                     	;# 
  1797  038D                     	;# 
  1798  038E                     	;# 
  1799  0390                     	;# 
  1800  0391                     	;# 
  1801  0392                     	;# 
  1802  040C                     	;# 
  1803  040D                     	;# 
  1804  040E                     	;# 
  1805  040F                     	;# 
  1806  0410                     	;# 
  1807  0411                     	;# 
  1808  0416                     	;# 
  1809  0416                     	;# 
  1810  0417                     	;# 
  1811  0418                     	;# 
  1812  0418                     	;# 
  1813  0419                     	;# 
  1814  041A                     	;# 
  1815  041A                     	;# 
  1816  041B                     	;# 
  1817  041C                     	;# 
  1818  041C                     	;# 
  1819  041D                     	;# 
  1820  041E                     	;# 
  1821  041F                     	;# 
  1822  048C                     	;# 
  1823  048C                     	;# 
  1824  048D                     	;# 
  1825  048E                     	;# 
  1826  048F                     	;# 
  1827  048F                     	;# 
  1828  0490                     	;# 
  1829  0491                     	;# 
  1830  0492                     	;# 
  1831  0492                     	;# 
  1832  0493                     	;# 
  1833  0494                     	;# 
  1834  0495                     	;# 
  1835  0495                     	;# 
  1836  0496                     	;# 
  1837  0497                     	;# 
  1838  0498                     	;# 
  1839  0499                     	;# 
  1840  049A                     	;# 
  1841  049B                     	;# 
  1842  049C                     	;# 
  1843  049D                     	;# 
  1844  050C                     	;# 
  1845  050C                     	;# 
  1846  050D                     	;# 
  1847  050E                     	;# 
  1848  050F                     	;# 
  1849  050F                     	;# 
  1850  0510                     	;# 
  1851  0511                     	;# 
  1852  0512                     	;# 
  1853  0512                     	;# 
  1854  0513                     	;# 
  1855  0514                     	;# 
  1856  0515                     	;# 
  1857  0515                     	;# 
  1858  0516                     	;# 
  1859  0517                     	;# 
  1860  0518                     	;# 
  1861  0519                     	;# 
  1862  051A                     	;# 
  1863  051B                     	;# 
  1864  051C                     	;# 
  1865  051D                     	;# 
  1866  058C                     	;# 
  1867  058C                     	;# 
  1868  058D                     	;# 
  1869  058E                     	;# 
  1870  058F                     	;# 
  1871  058F                     	;# 
  1872  0590                     	;# 
  1873  0591                     	;# 
  1874  0592                     	;# 
  1875  0593                     	;# 
  1876  060C                     	;# 
  1877  060D                     	;# 
  1878  060E                     	;# 
  1879  060F                     	;# 
  1880  0610                     	;# 
  1881  0611                     	;# 
  1882  0612                     	;# 
  1883  0613                     	;# 
  1884  0614                     	;# 
  1885  0616                     	;# 
  1886  0617                     	;# 
  1887  0618                     	;# 
  1888  0619                     	;# 
  1889  061A                     	;# 
  1890  061B                     	;# 
  1891  061C                     	;# 
  1892  061D                     	;# 
  1893  061E                     	;# 
  1894  068C                     	;# 
  1895  068D                     	;# 
  1896  068E                     	;# 
  1897  068F                     	;# 
  1898  0690                     	;# 
  1899  0691                     	;# 
  1900  0692                     	;# 
  1901  0693                     	;# 
  1902  0694                     	;# 
  1903  070C                     	;# 
  1904  070D                     	;# 
  1905  070E                     	;# 
  1906  070F                     	;# 
  1907  0710                     	;# 
  1908  0711                     	;# 
  1909  0712                     	;# 
  1910  0713                     	;# 
  1911  0714                     	;# 
  1912  0716                     	;# 
  1913  0717                     	;# 
  1914  0718                     	;# 
  1915  0719                     	;# 
  1916  071A                     	;# 
  1917  071B                     	;# 
  1918  071C                     	;# 
  1919  071D                     	;# 
  1920  071E                     	;# 
  1921  0796                     	;# 
  1922  0797                     	;# 
  1923  0798                     	;# 
  1924  0799                     	;# 
  1925  079A                     	;# 
  1926  079B                     	;# 
  1927  080C                     	;# 
  1928  080D                     	;# 
  1929  080E                     	;# 
  1930  080F                     	;# 
  1931  0810                     	;# 
  1932  0811                     	;# 
  1933  0812                     	;# 
  1934  0813                     	;# 
  1935  0814                     	;# 
  1936  081A                     	;# 
  1937  081B                     	;# 
  1938  081C                     	;# 
  1939  081D                     	;# 
  1940  081E                     	;# 
  1941  081F                     	;# 
  1942  088C                     	;# 
  1943  088D                     	;# 
  1944  088E                     	;# 
  1945  088F                     	;# 
  1946  0890                     	;# 
  1947  0891                     	;# 
  1948  0892                     	;# 
  1949  0893                     	;# 
  1950  0895                     	;# 
  1951  0896                     	;# 
  1952  0897                     	;# 
  1953  0898                     	;# 
  1954  0899                     	;# 
  1955  089A                     	;# 
  1956  089B                     	;# 
  1957  090C                     	;# 
  1958  090E                     	;# 
  1959  090F                     	;# 
  1960  091F                     	;# 
  1961  091F                     	;# 
  1962  098F                     	;# 
  1963  098F                     	;# 
  1964  0990                     	;# 
  1965  0991                     	;# 
  1966  0992                     	;# 
  1967  0993                     	;# 
  1968  0994                     	;# 
  1969  0995                     	;# 
  1970  0996                     	;# 
  1971  0997                     	;# 
  1972  0E0F                     	;# 
  1973  0E10                     	;# 
  1974  0E11                     	;# 
  1975  0E12                     	;# 
  1976  0E13                     	;# 
  1977  0E14                     	;# 
  1978  0E15                     	;# 
  1979  0E16                     	;# 
  1980  0E17                     	;# 
  1981  0E18                     	;# 
  1982  0E19                     	;# 
  1983  0E1A                     	;# 
  1984  0E1B                     	;# 
  1985  0E1C                     	;# 
  1986  0E1D                     	;# 
  1987  0E1E                     	;# 
  1988  0E1F                     	;# 
  1989  0E20                     	;# 
  1990  0E21                     	;# 
  1991  0E22                     	;# 
  1992  0E23                     	;# 
  1993  0E24                     	;# 
  1994  0E25                     	;# 
  1995  0E26                     	;# 
  1996  0E27                     	;# 
  1997  0E28                     	;# 
  1998  0E29                     	;# 
  1999  0E2A                     	;# 
  2000  0E2B                     	;# 
  2001  0E2C                     	;# 
  2002  0E2D                     	;# 
  2003  0E2E                     	;# 
  2004  0E2F                     	;# 
  2005  0E30                     	;# 
  2006  0E31                     	;# 
  2007  0E32                     	;# 
  2008  0E33                     	;# 
  2009  0E34                     	;# 
  2010  0E35                     	;# 
  2011  0E36                     	;# 
  2012  0E37                     	;# 
  2013  0E8F                     	;# 
  2014  0E90                     	;# 
  2015  0E91                     	;# 
  2016  0E92                     	;# 
  2017  0E93                     	;# 
  2018  0E94                     	;# 
  2019  0E95                     	;# 
  2020  0E96                     	;# 
  2021  0E97                     	;# 
  2022  0E9C                     	;# 
  2023  0E9D                     	;# 
  2024  0E9E                     	;# 
  2025  0EA1                     	;# 
  2026  0EA2                     	;# 
  2027  0EA3                     	;# 
  2028  0EA4                     	;# 
  2029  0EA5                     	;# 
  2030  0EA9                     	;# 
  2031  0EAA                     	;# 
  2032  0EAB                     	;# 
  2033  0EAC                     	;# 
  2034  0EB1                     	;# 
  2035  0EB2                     	;# 
  2036  0EB3                     	;# 
  2037  0EB8                     	;# 
  2038  0EB9                     	;# 
  2039  0EBA                     	;# 
  2040  0EBB                     	;# 
  2041  0EBC                     	;# 
  2042  0EBD                     	;# 
  2043  0EBE                     	;# 
  2044  0EC3                     	;# 
  2045  0EC5                     	;# 
  2046  0EC6                     	;# 
  2047  0EC7                     	;# 
  2048  0EC8                     	;# 
  2049  0EC9                     	;# 
  2050  0ECA                     	;# 
  2051  0ECB                     	;# 
  2052  0ECC                     	;# 
  2053  0F10                     	;# 
  2054  0F11                     	;# 
  2055  0F12                     	;# 
  2056  0F13                     	;# 
  2057  0F14                     	;# 
  2058  0F15                     	;# 
  2059  0F16                     	;# 
  2060  0F17                     	;# 
  2061  0F18                     	;# 
  2062  0F19                     	;# 
  2063  0F1A                     	;# 
  2064  0F1B                     	;# 
  2065  0F1C                     	;# 
  2066  0F1D                     	;# 
  2067  0F1E                     	;# 
  2068  0F1F                     	;# 
  2069  0F20                     	;# 
  2070  0F21                     	;# 
  2071  0F22                     	;# 
  2072  0F23                     	;# 
  2073  0F24                     	;# 
  2074  0F25                     	;# 
  2075  0F26                     	;# 
  2076  0F27                     	;# 
  2077  0F38                     	;# 
  2078  0F39                     	;# 
  2079  0F3A                     	;# 
  2080  0F3B                     	;# 
  2081  0F3C                     	;# 
  2082  0F3D                     	;# 
  2083  0F3E                     	;# 
  2084  0F3F                     	;# 
  2085  0F40                     	;# 
  2086  0F41                     	;# 
  2087  0F43                     	;# 
  2088  0F44                     	;# 
  2089  0F45                     	;# 
  2090  0F46                     	;# 
  2091  0F47                     	;# 
  2092  0F48                     	;# 
  2093  0F49                     	;# 
  2094  0F4A                     	;# 
  2095  0F4B                     	;# 
  2096  0F4C                     	;# 
  2097  0F4E                     	;# 
  2098  0F4F                     	;# 
  2099  0F50                     	;# 
  2100  0F51                     	;# 
  2101  0F52                     	;# 
  2102  0F53                     	;# 
  2103  0F54                     	;# 
  2104  0F55                     	;# 
  2105  0F56                     	;# 
  2106  0F57                     	;# 
  2107  0F65                     	;# 
  2108  0F68                     	;# 
  2109  0F69                     	;# 
  2110  0F6A                     	;# 
  2111  0F6B                     	;# 
  2112  0FE4                     	;# 
  2113  0FE5                     	;# 
  2114  0FE6                     	;# 
  2115  0FE7                     	;# 
  2116  0FE8                     	;# 
  2117  0FE9                     	;# 
  2118  0FEA                     	;# 
  2119  0FEB                     	;# 
  2120  0FED                     	;# 
  2121  0FEE                     	;# 
  2122  0FEF                     	;# 
  2123  0000                     	;# 
  2124  0001                     	;# 
  2125  0002                     	;# 
  2126  0003                     	;# 
  2127  0004                     	;# 
  2128  0005                     	;# 
  2129  0006                     	;# 
  2130  0007                     	;# 
  2131  0008                     	;# 
  2132  0009                     	;# 
  2133  000A                     	;# 
  2134  000B                     	;# 
  2135  000C                     	;# 
  2136  000D                     	;# 
  2137  000E                     	;# 
  2138  0010                     	;# 
  2139  0011                     	;# 
  2140  0012                     	;# 
  2141  0013                     	;# 
  2142  0016                     	;# 
  2143  0017                     	;# 
  2144  0018                     	;# 
  2145  001C                     	;# 
  2146  001C                     	;# 
  2147  001D                     	;# 
  2148  001D                     	;# 
  2149  001E                     	;# 
  2150  001F                     	;# 
  2151  008C                     	;# 
  2152  008C                     	;# 
  2153  008D                     	;# 
  2154  008E                     	;# 
  2155  008E                     	;# 
  2156  008F                     	;# 
  2157  0090                     	;# 
  2158  0090                     	;# 
  2159  0091                     	;# 
  2160  0093                     	;# 
  2161  0094                     	;# 
  2162  0095                     	;# 
  2163  0096                     	;# 
  2164  0097                     	;# 
  2165  0098                     	;# 
  2166  0099                     	;# 
  2167  009A                     	;# 
  2168  009B                     	;# 
  2169  009C                     	;# 
  2170  009D                     	;# 
  2171  009E                     	;# 
  2172  010C                     	;# 
  2173  010D                     	;# 
  2174  010E                     	;# 
  2175  010E                     	;# 
  2176  010F                     	;# 
  2177  0110                     	;# 
  2178  0110                     	;# 
  2179  0111                     	;# 
  2180  0112                     	;# 
  2181  0112                     	;# 
  2182  0113                     	;# 
  2183  0114                     	;# 
  2184  0114                     	;# 
  2185  0115                     	;# 
  2186  0116                     	;# 
  2187  0116                     	;# 
  2188  0117                     	;# 
  2189  0119                     	;# 
  2190  0119                     	;# 
  2191  0119                     	;# 
  2192  011A                     	;# 
  2193  011A                     	;# 
  2194  011A                     	;# 
  2195  011B                     	;# 
  2196  011B                     	;# 
  2197  011B                     	;# 
  2198  011B                     	;# 
  2199  011B                     	;# 
  2200  011C                     	;# 
  2201  011C                     	;# 
  2202  011C                     	;# 
  2203  011D                     	;# 
  2204  011D                     	;# 
  2205  011D                     	;# 
  2206  011E                     	;# 
  2207  011E                     	;# 
  2208  011E                     	;# 
  2209  011F                     	;# 
  2210  011F                     	;# 
  2211  011F                     	;# 
  2212  011F                     	;# 
  2213  011F                     	;# 
  2214  018C                     	;# 
  2215  018D                     	;# 
  2216  018E                     	;# 
  2217  018F                     	;# 
  2218  0190                     	;# 
  2219  0191                     	;# 
  2220  0192                     	;# 
  2221  0196                     	;# 
  2222  0197                     	;# 
  2223  0198                     	;# 
  2224  0199                     	;# 
  2225  019A                     	;# 
  2226  019B                     	;# 
  2227  019C                     	;# 
  2228  020C                     	;# 
  2229  020D                     	;# 
  2230  020E                     	;# 
  2231  020F                     	;# 
  2232  020F                     	;# 
  2233  0210                     	;# 
  2234  0210                     	;# 
  2235  0211                     	;# 
  2236  0211                     	;# 
  2237  0212                     	;# 
  2238  0213                     	;# 
  2239  0214                     	;# 
  2240  0215                     	;# 
  2241  0215                     	;# 
  2242  0216                     	;# 
  2243  0216                     	;# 
  2244  0217                     	;# 
  2245  0217                     	;# 
  2246  0218                     	;# 
  2247  0219                     	;# 
  2248  021A                     	;# 
  2249  021B                     	;# 
  2250  021B                     	;# 
  2251  021C                     	;# 
  2252  021C                     	;# 
  2253  021D                     	;# 
  2254  021D                     	;# 
  2255  021E                     	;# 
  2256  021F                     	;# 
  2257  028C                     	;# 
  2258  028C                     	;# 
  2259  028D                     	;# 
  2260  028D                     	;# 
  2261  028E                     	;# 
  2262  028F                     	;# 
  2263  0290                     	;# 
  2264  0290                     	;# 
  2265  0291                     	;# 
  2266  0292                     	;# 
  2267  0292                     	;# 
  2268  0293                     	;# 
  2269  0293                     	;# 
  2270  0294                     	;# 
  2271  0295                     	;# 
  2272  0296                     	;# 
  2273  0296                     	;# 
  2274  0297                     	;# 
  2275  0298                     	;# 
  2276  0298                     	;# 
  2277  0299                     	;# 
  2278  0299                     	;# 
  2279  029A                     	;# 
  2280  029B                     	;# 
  2281  029C                     	;# 
  2282  029C                     	;# 
  2283  029D                     	;# 
  2284  030C                     	;# 
  2285  030C                     	;# 
  2286  030D                     	;# 
  2287  030E                     	;# 
  2288  030F                     	;# 
  2289  0310                     	;# 
  2290  0310                     	;# 
  2291  0311                     	;# 
  2292  0312                     	;# 
  2293  0313                     	;# 
  2294  0314                     	;# 
  2295  0314                     	;# 
  2296  0315                     	;# 
  2297  0316                     	;# 
  2298  0317                     	;# 
  2299  0318                     	;# 
  2300  0318                     	;# 
  2301  0319                     	;# 
  2302  031A                     	;# 
  2303  031B                     	;# 
  2304  031C                     	;# 
  2305  031C                     	;# 
  2306  031D                     	;# 
  2307  031E                     	;# 
  2308  031F                     	;# 
  2309  038C                     	;# 
  2310  038D                     	;# 
  2311  038E                     	;# 
  2312  0390                     	;# 
  2313  0391                     	;# 
  2314  0392                     	;# 
  2315  040C                     	;# 
  2316  040D                     	;# 
  2317  040E                     	;# 
  2318  040F                     	;# 
  2319  0410                     	;# 
  2320  0411                     	;# 
  2321  0416                     	;# 
  2322  0416                     	;# 
  2323  0417                     	;# 
  2324  0418                     	;# 
  2325  0418                     	;# 
  2326  0419                     	;# 
  2327  041A                     	;# 
  2328  041A                     	;# 
  2329  041B                     	;# 
  2330  041C                     	;# 
  2331  041C                     	;# 
  2332  041D                     	;# 
  2333  041E                     	;# 
  2334  041F                     	;# 
  2335  048C                     	;# 
  2336  048C                     	;# 
  2337  048D                     	;# 
  2338  048E                     	;# 
  2339  048F                     	;# 
  2340  048F                     	;# 
  2341  0490                     	;# 
  2342  0491                     	;# 
  2343  0492                     	;# 
  2344  0492                     	;# 
  2345  0493                     	;# 
  2346  0494                     	;# 
  2347  0495                     	;# 
  2348  0495                     	;# 
  2349  0496                     	;# 
  2350  0497                     	;# 
  2351  0498                     	;# 
  2352  0499                     	;# 
  2353  049A                     	;# 
  2354  049B                     	;# 
  2355  049C                     	;# 
  2356  049D                     	;# 
  2357  050C                     	;# 
  2358  050C                     	;# 
  2359  050D                     	;# 
  2360  050E                     	;# 
  2361  050F                     	;# 
  2362  050F                     	;# 
  2363  0510                     	;# 
  2364  0511                     	;# 
  2365  0512                     	;# 
  2366  0512                     	;# 
  2367  0513                     	;# 
  2368  0514                     	;# 
  2369  0515                     	;# 
  2370  0515                     	;# 
  2371  0516                     	;# 
  2372  0517                     	;# 
  2373  0518                     	;# 
  2374  0519                     	;# 
  2375  051A                     	;# 
  2376  051B                     	;# 
  2377  051C                     	;# 
  2378  051D                     	;# 
  2379  058C                     	;# 
  2380  058C                     	;# 
  2381  058D                     	;# 
  2382  058E                     	;# 
  2383  058F                     	;# 
  2384  058F                     	;# 
  2385  0590                     	;# 
  2386  0591                     	;# 
  2387  0592                     	;# 
  2388  0593                     	;# 
  2389  060C                     	;# 
  2390  060D                     	;# 
  2391  060E                     	;# 
  2392  060F                     	;# 
  2393  0610                     	;# 
  2394  0611                     	;# 
  2395  0612                     	;# 
  2396  0613                     	;# 
  2397  0614                     	;# 
  2398  0616                     	;# 
  2399  0617                     	;# 
  2400  0618                     	;# 
  2401  0619                     	;# 
  2402  061A                     	;# 
  2403  061B                     	;# 
  2404  061C                     	;# 
  2405  061D                     	;# 
  2406  061E                     	;# 
  2407  068C                     	;# 
  2408  068D                     	;# 
  2409  068E                     	;# 
  2410  068F                     	;# 
  2411  0690                     	;# 
  2412  0691                     	;# 
  2413  0692                     	;# 
  2414  0693                     	;# 
  2415  0694                     	;# 
  2416  070C                     	;# 
  2417  070D                     	;# 
  2418  070E                     	;# 
  2419  070F                     	;# 
  2420  0710                     	;# 
  2421  0711                     	;# 
  2422  0712                     	;# 
  2423  0713                     	;# 
  2424  0714                     	;# 
  2425  0716                     	;# 
  2426  0717                     	;# 
  2427  0718                     	;# 
  2428  0719                     	;# 
  2429  071A                     	;# 
  2430  071B                     	;# 
  2431  071C                     	;# 
  2432  071D                     	;# 
  2433  071E                     	;# 
  2434  0796                     	;# 
  2435  0797                     	;# 
  2436  0798                     	;# 
  2437  0799                     	;# 
  2438  079A                     	;# 
  2439  079B                     	;# 
  2440  080C                     	;# 
  2441  080D                     	;# 
  2442  080E                     	;# 
  2443  080F                     	;# 
  2444  0810                     	;# 
  2445  0811                     	;# 
  2446  0812                     	;# 
  2447  0813                     	;# 
  2448  0814                     	;# 
  2449  081A                     	;# 
  2450  081B                     	;# 
  2451  081C                     	;# 
  2452  081D                     	;# 
  2453  081E                     	;# 
  2454  081F                     	;# 
  2455  088C                     	;# 
  2456  088D                     	;# 
  2457  088E                     	;# 
  2458  088F                     	;# 
  2459  0890                     	;# 
  2460  0891                     	;# 
  2461  0892                     	;# 
  2462  0893                     	;# 
  2463  0895                     	;# 
  2464  0896                     	;# 
  2465  0897                     	;# 
  2466  0898                     	;# 
  2467  0899                     	;# 
  2468  089A                     	;# 
  2469  089B                     	;# 
  2470  090C                     	;# 
  2471  090E                     	;# 
  2472  090F                     	;# 
  2473  091F                     	;# 
  2474  091F                     	;# 
  2475  098F                     	;# 
  2476  098F                     	;# 
  2477  0990                     	;# 
  2478  0991                     	;# 
  2479  0992                     	;# 
  2480  0993                     	;# 
  2481  0994                     	;# 
  2482  0995                     	;# 
  2483  0996                     	;# 
  2484  0997                     	;# 
  2485  0E0F                     	;# 
  2486  0E10                     	;# 
  2487  0E11                     	;# 
  2488  0E12                     	;# 
  2489  0E13                     	;# 
  2490  0E14                     	;# 
  2491  0E15                     	;# 
  2492  0E16                     	;# 
  2493  0E17                     	;# 
  2494  0E18                     	;# 
  2495  0E19                     	;# 
  2496  0E1A                     	;# 
  2497  0E1B                     	;# 
  2498  0E1C                     	;# 
  2499  0E1D                     	;# 
  2500  0E1E                     	;# 
  2501  0E1F                     	;# 
  2502  0E20                     	;# 
  2503  0E21                     	;# 
  2504  0E22                     	;# 
  2505  0E23                     	;# 
  2506  0E24                     	;# 
  2507  0E25                     	;# 
  2508  0E26                     	;# 
  2509  0E27                     	;# 
  2510  0E28                     	;# 
  2511  0E29                     	;# 
  2512  0E2A                     	;# 
  2513  0E2B                     	;# 
  2514  0E2C                     	;# 
  2515  0E2D                     	;# 
  2516  0E2E                     	;# 
  2517  0E2F                     	;# 
  2518  0E30                     	;# 
  2519  0E31                     	;# 
  2520  0E32                     	;# 
  2521  0E33                     	;# 
  2522  0E34                     	;# 
  2523  0E35                     	;# 
  2524  0E36                     	;# 
  2525  0E37                     	;# 
  2526  0E8F                     	;# 
  2527  0E90                     	;# 
  2528  0E91                     	;# 
  2529  0E92                     	;# 
  2530  0E93                     	;# 
  2531  0E94                     	;# 
  2532  0E95                     	;# 
  2533  0E96                     	;# 
  2534  0E97                     	;# 
  2535  0E9C                     	;# 
  2536  0E9D                     	;# 
  2537  0E9E                     	;# 
  2538  0EA1                     	;# 
  2539  0EA2                     	;# 
  2540  0EA3                     	;# 
  2541  0EA4                     	;# 
  2542  0EA5                     	;# 
  2543  0EA9                     	;# 
  2544  0EAA                     	;# 
  2545  0EAB                     	;# 
  2546  0EAC                     	;# 
  2547  0EB1                     	;# 
  2548  0EB2                     	;# 
  2549  0EB3                     	;# 
  2550  0EB8                     	;# 
  2551  0EB9                     	;# 
  2552  0EBA                     	;# 
  2553  0EBB                     	;# 
  2554  0EBC                     	;# 
  2555  0EBD                     	;# 
  2556  0EBE                     	;# 
  2557  0EC3                     	;# 
  2558  0EC5                     	;# 
  2559  0EC6                     	;# 
  2560  0EC7                     	;# 
  2561  0EC8                     	;# 
  2562  0EC9                     	;# 
  2563  0ECA                     	;# 
  2564  0ECB                     	;# 
  2565  0ECC                     	;# 
  2566  0F10                     	;# 
  2567  0F11                     	;# 
  2568  0F12                     	;# 
  2569  0F13                     	;# 
  2570  0F14                     	;# 
  2571  0F15                     	;# 
  2572  0F16                     	;# 
  2573  0F17                     	;# 
  2574  0F18                     	;# 
  2575  0F19                     	;# 
  2576  0F1A                     	;# 
  2577  0F1B                     	;# 
  2578  0F1C                     	;# 
  2579  0F1D                     	;# 
  2580  0F1E                     	;# 
  2581  0F1F                     	;# 
  2582  0F20                     	;# 
  2583  0F21                     	;# 
  2584  0F22                     	;# 
  2585  0F23                     	;# 
  2586  0F24                     	;# 
  2587  0F25                     	;# 
  2588  0F26                     	;# 
  2589  0F27                     	;# 
  2590  0F38                     	;# 
  2591  0F39                     	;# 
  2592  0F3A                     	;# 
  2593  0F3B                     	;# 
  2594  0F3C                     	;# 
  2595  0F3D                     	;# 
  2596  0F3E                     	;# 
  2597  0F3F                     	;# 
  2598  0F40                     	;# 
  2599  0F41                     	;# 
  2600  0F43                     	;# 
  2601  0F44                     	;# 
  2602  0F45                     	;# 
  2603  0F46                     	;# 
  2604  0F47                     	;# 
  2605  0F48                     	;# 
  2606  0F49                     	;# 
  2607  0F4A                     	;# 
  2608  0F4B                     	;# 
  2609  0F4C                     	;# 
  2610  0F4E                     	;# 
  2611  0F4F                     	;# 
  2612  0F50                     	;# 
  2613  0F51                     	;# 
  2614  0F52                     	;# 
  2615  0F53                     	;# 
  2616  0F54                     	;# 
  2617  0F55                     	;# 
  2618  0F56                     	;# 
  2619  0F57                     	;# 
  2620  0F65                     	;# 
  2621  0F68                     	;# 
  2622  0F69                     	;# 
  2623  0F6A                     	;# 
  2624  0F6B                     	;# 
  2625  0FE4                     	;# 
  2626  0FE5                     	;# 
  2627  0FE6                     	;# 
  2628  0FE7                     	;# 
  2629  0FE8                     	;# 
  2630  0FE9                     	;# 
  2631  0FEA                     	;# 
  2632  0FEB                     	;# 
  2633  0FED                     	;# 
  2634  0FEE                     	;# 
  2635  0FEF                     	;# 
  2636  0000                     	;# 
  2637  0001                     	;# 
  2638  0002                     	;# 
  2639  0003                     	;# 
  2640  0004                     	;# 
  2641  0005                     	;# 
  2642  0006                     	;# 
  2643  0007                     	;# 
  2644  0008                     	;# 
  2645  0009                     	;# 
  2646  000A                     	;# 
  2647  000B                     	;# 
  2648  000C                     	;# 
  2649  000D                     	;# 
  2650  000E                     	;# 
  2651  0010                     	;# 
  2652  0011                     	;# 
  2653  0012                     	;# 
  2654  0013                     	;# 
  2655  0016                     	;# 
  2656  0017                     	;# 
  2657  0018                     	;# 
  2658  001C                     	;# 
  2659  001C                     	;# 
  2660  001D                     	;# 
  2661  001D                     	;# 
  2662  001E                     	;# 
  2663  001F                     	;# 
  2664  008C                     	;# 
  2665  008C                     	;# 
  2666  008D                     	;# 
  2667  008E                     	;# 
  2668  008E                     	;# 
  2669  008F                     	;# 
  2670  0090                     	;# 
  2671  0090                     	;# 
  2672  0091                     	;# 
  2673  0093                     	;# 
  2674  0094                     	;# 
  2675  0095                     	;# 
  2676  0096                     	;# 
  2677  0097                     	;# 
  2678  0098                     	;# 
  2679  0099                     	;# 
  2680  009A                     	;# 
  2681  009B                     	;# 
  2682  009C                     	;# 
  2683  009D                     	;# 
  2684  009E                     	;# 
  2685  010C                     	;# 
  2686  010D                     	;# 
  2687  010E                     	;# 
  2688  010E                     	;# 
  2689  010F                     	;# 
  2690  0110                     	;# 
  2691  0110                     	;# 
  2692  0111                     	;# 
  2693  0112                     	;# 
  2694  0112                     	;# 
  2695  0113                     	;# 
  2696  0114                     	;# 
  2697  0114                     	;# 
  2698  0115                     	;# 
  2699  0116                     	;# 
  2700  0116                     	;# 
  2701  0117                     	;# 
  2702  0119                     	;# 
  2703  0119                     	;# 
  2704  0119                     	;# 
  2705  011A                     	;# 
  2706  011A                     	;# 
  2707  011A                     	;# 
  2708  011B                     	;# 
  2709  011B                     	;# 
  2710  011B                     	;# 
  2711  011B                     	;# 
  2712  011B                     	;# 
  2713  011C                     	;# 
  2714  011C                     	;# 
  2715  011C                     	;# 
  2716  011D                     	;# 
  2717  011D                     	;# 
  2718  011D                     	;# 
  2719  011E                     	;# 
  2720  011E                     	;# 
  2721  011E                     	;# 
  2722  011F                     	;# 
  2723  011F                     	;# 
  2724  011F                     	;# 
  2725  011F                     	;# 
  2726  011F                     	;# 
  2727  018C                     	;# 
  2728  018D                     	;# 
  2729  018E                     	;# 
  2730  018F                     	;# 
  2731  0190                     	;# 
  2732  0191                     	;# 
  2733  0192                     	;# 
  2734  0196                     	;# 
  2735  0197                     	;# 
  2736  0198                     	;# 
  2737  0199                     	;# 
  2738  019A                     	;# 
  2739  019B                     	;# 
  2740  019C                     	;# 
  2741  020C                     	;# 
  2742  020D                     	;# 
  2743  020E                     	;# 
  2744  020F                     	;# 
  2745  020F                     	;# 
  2746  0210                     	;# 
  2747  0210                     	;# 
  2748  0211                     	;# 
  2749  0211                     	;# 
  2750  0212                     	;# 
  2751  0213                     	;# 
  2752  0214                     	;# 
  2753  0215                     	;# 
  2754  0215                     	;# 
  2755  0216                     	;# 
  2756  0216                     	;# 
  2757  0217                     	;# 
  2758  0217                     	;# 
  2759  0218                     	;# 
  2760  0219                     	;# 
  2761  021A                     	;# 
  2762  021B                     	;# 
  2763  021B                     	;# 
  2764  021C                     	;# 
  2765  021C                     	;# 
  2766  021D                     	;# 
  2767  021D                     	;# 
  2768  021E                     	;# 
  2769  021F                     	;# 
  2770  028C                     	;# 
  2771  028C                     	;# 
  2772  028D                     	;# 
  2773  028D                     	;# 
  2774  028E                     	;# 
  2775  028F                     	;# 
  2776  0290                     	;# 
  2777  0290                     	;# 
  2778  0291                     	;# 
  2779  0292                     	;# 
  2780  0292                     	;# 
  2781  0293                     	;# 
  2782  0293                     	;# 
  2783  0294                     	;# 
  2784  0295                     	;# 
  2785  0296                     	;# 
  2786  0296                     	;# 
  2787  0297                     	;# 
  2788  0298                     	;# 
  2789  0298                     	;# 
  2790  0299                     	;# 
  2791  0299                     	;# 
  2792  029A                     	;# 
  2793  029B                     	;# 
  2794  029C                     	;# 
  2795  029C                     	;# 
  2796  029D                     	;# 
  2797  030C                     	;# 
  2798  030C                     	;# 
  2799  030D                     	;# 
  2800  030E                     	;# 
  2801  030F                     	;# 
  2802  0310                     	;# 
  2803  0310                     	;# 
  2804  0311                     	;# 
  2805  0312                     	;# 
  2806  0313                     	;# 
  2807  0314                     	;# 
  2808  0314                     	;# 
  2809  0315                     	;# 
  2810  0316                     	;# 
  2811  0317                     	;# 
  2812  0318                     	;# 
  2813  0318                     	;# 
  2814  0319                     	;# 
  2815  031A                     	;# 
  2816  031B                     	;# 
  2817  031C                     	;# 
  2818  031C                     	;# 
  2819  031D                     	;# 
  2820  031E                     	;# 
  2821  031F                     	;# 
  2822  038C                     	;# 
  2823  038D                     	;# 
  2824  038E                     	;# 
  2825  0390                     	;# 
  2826  0391                     	;# 
  2827  0392                     	;# 
  2828  040C                     	;# 
  2829  040D                     	;# 
  2830  040E                     	;# 
  2831  040F                     	;# 
  2832  0410                     	;# 
  2833  0411                     	;# 
  2834  0416                     	;# 
  2835  0416                     	;# 
  2836  0417                     	;# 
  2837  0418                     	;# 
  2838  0418                     	;# 
  2839  0419                     	;# 
  2840  041A                     	;# 
  2841  041A                     	;# 
  2842  041B                     	;# 
  2843  041C                     	;# 
  2844  041C                     	;# 
  2845  041D                     	;# 
  2846  041E                     	;# 
  2847  041F                     	;# 
  2848  048C                     	;# 
  2849  048C                     	;# 
  2850  048D                     	;# 
  2851  048E                     	;# 
  2852  048F                     	;# 
  2853  048F                     	;# 
  2854  0490                     	;# 
  2855  0491                     	;# 
  2856  0492                     	;# 
  2857  0492                     	;# 
  2858  0493                     	;# 
  2859  0494                     	;# 
  2860  0495                     	;# 
  2861  0495                     	;# 
  2862  0496                     	;# 
  2863  0497                     	;# 
  2864  0498                     	;# 
  2865  0499                     	;# 
  2866  049A                     	;# 
  2867  049B                     	;# 
  2868  049C                     	;# 
  2869  049D                     	;# 
  2870  050C                     	;# 
  2871  050C                     	;# 
  2872  050D                     	;# 
  2873  050E                     	;# 
  2874  050F                     	;# 
  2875  050F                     	;# 
  2876  0510                     	;# 
  2877  0511                     	;# 
  2878  0512                     	;# 
  2879  0512                     	;# 
  2880  0513                     	;# 
  2881  0514                     	;# 
  2882  0515                     	;# 
  2883  0515                     	;# 
  2884  0516                     	;# 
  2885  0517                     	;# 
  2886  0518                     	;# 
  2887  0519                     	;# 
  2888  051A                     	;# 
  2889  051B                     	;# 
  2890  051C                     	;# 
  2891  051D                     	;# 
  2892  058C                     	;# 
  2893  058C                     	;# 
  2894  058D                     	;# 
  2895  058E                     	;# 
  2896  058F                     	;# 
  2897  058F                     	;# 
  2898  0590                     	;# 
  2899  0591                     	;# 
  2900  0592                     	;# 
  2901  0593                     	;# 
  2902  060C                     	;# 
  2903  060D                     	;# 
  2904  060E                     	;# 
  2905  060F                     	;# 
  2906  0610                     	;# 
  2907  0611                     	;# 
  2908  0612                     	;# 
  2909  0613                     	;# 
  2910  0614                     	;# 
  2911  0616                     	;# 
  2912  0617                     	;# 
  2913  0618                     	;# 
  2914  0619                     	;# 
  2915  061A                     	;# 
  2916  061B                     	;# 
  2917  061C                     	;# 
  2918  061D                     	;# 
  2919  061E                     	;# 
  2920  068C                     	;# 
  2921  068D                     	;# 
  2922  068E                     	;# 
  2923  068F                     	;# 
  2924  0690                     	;# 
  2925  0691                     	;# 
  2926  0692                     	;# 
  2927  0693                     	;# 
  2928  0694                     	;# 
  2929  070C                     	;# 
  2930  070D                     	;# 
  2931  070E                     	;# 
  2932  070F                     	;# 
  2933  0710                     	;# 
  2934  0711                     	;# 
  2935  0712                     	;# 
  2936  0713                     	;# 
  2937  0714                     	;# 
  2938  0716                     	;# 
  2939  0717                     	;# 
  2940  0718                     	;# 
  2941  0719                     	;# 
  2942  071A                     	;# 
  2943  071B                     	;# 
  2944  071C                     	;# 
  2945  071D                     	;# 
  2946  071E                     	;# 
  2947  0796                     	;# 
  2948  0797                     	;# 
  2949  0798                     	;# 
  2950  0799                     	;# 
  2951  079A                     	;# 
  2952  079B                     	;# 
  2953  080C                     	;# 
  2954  080D                     	;# 
  2955  080E                     	;# 
  2956  080F                     	;# 
  2957  0810                     	;# 
  2958  0811                     	;# 
  2959  0812                     	;# 
  2960  0813                     	;# 
  2961  0814                     	;# 
  2962  081A                     	;# 
  2963  081B                     	;# 
  2964  081C                     	;# 
  2965  081D                     	;# 
  2966  081E                     	;# 
  2967  081F                     	;# 
  2968  088C                     	;# 
  2969  088D                     	;# 
  2970  088E                     	;# 
  2971  088F                     	;# 
  2972  0890                     	;# 
  2973  0891                     	;# 
  2974  0892                     	;# 
  2975  0893                     	;# 
  2976  0895                     	;# 
  2977  0896                     	;# 
  2978  0897                     	;# 
  2979  0898                     	;# 
  2980  0899                     	;# 
  2981  089A                     	;# 
  2982  089B                     	;# 
  2983  090C                     	;# 
  2984  090E                     	;# 
  2985  090F                     	;# 
  2986  091F                     	;# 
  2987  091F                     	;# 
  2988  098F                     	;# 
  2989  098F                     	;# 
  2990  0990                     	;# 
  2991  0991                     	;# 
  2992  0992                     	;# 
  2993  0993                     	;# 
  2994  0994                     	;# 
  2995  0995                     	;# 
  2996  0996                     	;# 
  2997  0997                     	;# 
  2998  0E0F                     	;# 
  2999  0E10                     	;# 
  3000  0E11                     	;# 
  3001  0E12                     	;# 
  3002  0E13                     	;# 
  3003  0E14                     	;# 
  3004  0E15                     	;# 
  3005  0E16                     	;# 
  3006  0E17                     	;# 
  3007  0E18                     	;# 
  3008  0E19                     	;# 
  3009  0E1A                     	;# 
  3010  0E1B                     	;# 
  3011  0E1C                     	;# 
  3012  0E1D                     	;# 
  3013  0E1E                     	;# 
  3014  0E1F                     	;# 
  3015  0E20                     	;# 
  3016  0E21                     	;# 
  3017  0E22                     	;# 
  3018  0E23                     	;# 
  3019  0E24                     	;# 
  3020  0E25                     	;# 
  3021  0E26                     	;# 
  3022  0E27                     	;# 
  3023  0E28                     	;# 
  3024  0E29                     	;# 
  3025  0E2A                     	;# 
  3026  0E2B                     	;# 
  3027  0E2C                     	;# 
  3028  0E2D                     	;# 
  3029  0E2E                     	;# 
  3030  0E2F                     	;# 
  3031  0E30                     	;# 
  3032  0E31                     	;# 
  3033  0E32                     	;# 
  3034  0E33                     	;# 
  3035  0E34                     	;# 
  3036  0E35                     	;# 
  3037  0E36                     	;# 
  3038  0E37                     	;# 
  3039  0E8F                     	;# 
  3040  0E90                     	;# 
  3041  0E91                     	;# 
  3042  0E92                     	;# 
  3043  0E93                     	;# 
  3044  0E94                     	;# 
  3045  0E95                     	;# 
  3046  0E96                     	;# 
  3047  0E97                     	;# 
  3048  0E9C                     	;# 
  3049  0E9D                     	;# 
  3050  0E9E                     	;# 
  3051  0EA1                     	;# 
  3052  0EA2                     	;# 
  3053  0EA3                     	;# 
  3054  0EA4                     	;# 
  3055  0EA5                     	;# 
  3056  0EA9                     	;# 
  3057  0EAA                     	;# 
  3058  0EAB                     	;# 
  3059  0EAC                     	;# 
  3060  0EB1                     	;# 
  3061  0EB2                     	;# 
  3062  0EB3                     	;# 
  3063  0EB8                     	;# 
  3064  0EB9                     	;# 
  3065  0EBA                     	;# 
  3066  0EBB                     	;# 
  3067  0EBC                     	;# 
  3068  0EBD                     	;# 
  3069  0EBE                     	;# 
  3070  0EC3                     	;# 
  3071  0EC5                     	;# 
  3072  0EC6                     	;# 
  3073  0EC7                     	;# 
  3074  0EC8                     	;# 
  3075  0EC9                     	;# 
  3076  0ECA                     	;# 
  3077  0ECB                     	;# 
  3078  0ECC                     	;# 
  3079  0F10                     	;# 
  3080  0F11                     	;# 
  3081  0F12                     	;# 
  3082  0F13                     	;# 
  3083  0F14                     	;# 
  3084  0F15                     	;# 
  3085  0F16                     	;# 
  3086  0F17                     	;# 
  3087  0F18                     	;# 
  3088  0F19                     	;# 
  3089  0F1A                     	;# 
  3090  0F1B                     	;# 
  3091  0F1C                     	;# 
  3092  0F1D                     	;# 
  3093  0F1E                     	;# 
  3094  0F1F                     	;# 
  3095  0F20                     	;# 
  3096  0F21                     	;# 
  3097  0F22                     	;# 
  3098  0F23                     	;# 
  3099  0F24                     	;# 
  3100  0F25                     	;# 
  3101  0F26                     	;# 
  3102  0F27                     	;# 
  3103  0F38                     	;# 
  3104  0F39                     	;# 
  3105  0F3A                     	;# 
  3106  0F3B                     	;# 
  3107  0F3C                     	;# 
  3108  0F3D                     	;# 
  3109  0F3E                     	;# 
  3110  0F3F                     	;# 
  3111  0F40                     	;# 
  3112  0F41                     	;# 
  3113  0F43                     	;# 
  3114  0F44                     	;# 
  3115  0F45                     	;# 
  3116  0F46                     	;# 
  3117  0F47                     	;# 
  3118  0F48                     	;# 
  3119  0F49                     	;# 
  3120  0F4A                     	;# 
  3121  0F4B                     	;# 
  3122  0F4C                     	;# 
  3123  0F4E                     	;# 
  3124  0F4F                     	;# 
  3125  0F50                     	;# 
  3126  0F51                     	;# 
  3127  0F52                     	;# 
  3128  0F53                     	;# 
  3129  0F54                     	;# 
  3130  0F55                     	;# 
  3131  0F56                     	;# 
  3132  0F57                     	;# 
  3133  0F65                     	;# 
  3134  0F68                     	;# 
  3135  0F69                     	;# 
  3136  0F6A                     	;# 
  3137  0F6B                     	;# 
  3138  0FE4                     	;# 
  3139  0FE5                     	;# 
  3140  0FE6                     	;# 
  3141  0FE7                     	;# 
  3142  0FE8                     	;# 
  3143  0FE9                     	;# 
  3144  0FEA                     	;# 
  3145  0FEB                     	;# 
  3146  0FED                     	;# 
  3147  0FEE                     	;# 
  3148  0FEF                     	;# 
  3149  0000                     	;# 
  3150  0001                     	;# 
  3151  0002                     	;# 
  3152  0003                     	;# 
  3153  0004                     	;# 
  3154  0005                     	;# 
  3155  0006                     	;# 
  3156  0007                     	;# 
  3157  0008                     	;# 
  3158  0009                     	;# 
  3159  000A                     	;# 
  3160  000B                     	;# 
  3161  000C                     	;# 
  3162  000D                     	;# 
  3163  000E                     	;# 
  3164  0010                     	;# 
  3165  0011                     	;# 
  3166  0012                     	;# 
  3167  0013                     	;# 
  3168  0016                     	;# 
  3169  0017                     	;# 
  3170  0018                     	;# 
  3171  001C                     	;# 
  3172  001C                     	;# 
  3173  001D                     	;# 
  3174  001D                     	;# 
  3175  001E                     	;# 
  3176  001F                     	;# 
  3177  008C                     	;# 
  3178  008C                     	;# 
  3179  008D                     	;# 
  3180  008E                     	;# 
  3181  008E                     	;# 
  3182  008F                     	;# 
  3183  0090                     	;# 
  3184  0090                     	;# 
  3185  0091                     	;# 
  3186  0093                     	;# 
  3187  0094                     	;# 
  3188  0095                     	;# 
  3189  0096                     	;# 
  3190  0097                     	;# 
  3191  0098                     	;# 
  3192  0099                     	;# 
  3193  009A                     	;# 
  3194  009B                     	;# 
  3195  009C                     	;# 
  3196  009D                     	;# 
  3197  009E                     	;# 
  3198  010C                     	;# 
  3199  010D                     	;# 
  3200  010E                     	;# 
  3201  010E                     	;# 
  3202  010F                     	;# 
  3203  0110                     	;# 
  3204  0110                     	;# 
  3205  0111                     	;# 
  3206  0112                     	;# 
  3207  0112                     	;# 
  3208  0113                     	;# 
  3209  0114                     	;# 
  3210  0114                     	;# 
  3211  0115                     	;# 
  3212  0116                     	;# 
  3213  0116                     	;# 
  3214  0117                     	;# 
  3215  0119                     	;# 
  3216  0119                     	;# 
  3217  0119                     	;# 
  3218  011A                     	;# 
  3219  011A                     	;# 
  3220  011A                     	;# 
  3221  011B                     	;# 
  3222  011B                     	;# 
  3223  011B                     	;# 
  3224  011B                     	;# 
  3225  011B                     	;# 
  3226  011C                     	;# 
  3227  011C                     	;# 
  3228  011C                     	;# 
  3229  011D                     	;# 
  3230  011D                     	;# 
  3231  011D                     	;# 
  3232  011E                     	;# 
  3233  011E                     	;# 
  3234  011E                     	;# 
  3235  011F                     	;# 
  3236  011F                     	;# 
  3237  011F                     	;# 
  3238  011F                     	;# 
  3239  011F                     	;# 
  3240  018C                     	;# 
  3241  018D                     	;# 
  3242  018E                     	;# 
  3243  018F                     	;# 
  3244  0190                     	;# 
  3245  0191                     	;# 
  3246  0192                     	;# 
  3247  0196                     	;# 
  3248  0197                     	;# 
  3249  0198                     	;# 
  3250  0199                     	;# 
  3251  019A                     	;# 
  3252  019B                     	;# 
  3253  019C                     	;# 
  3254  020C                     	;# 
  3255  020D                     	;# 
  3256  020E                     	;# 
  3257  020F                     	;# 
  3258  020F                     	;# 
  3259  0210                     	;# 
  3260  0210                     	;# 
  3261  0211                     	;# 
  3262  0211                     	;# 
  3263  0212                     	;# 
  3264  0213                     	;# 
  3265  0214                     	;# 
  3266  0215                     	;# 
  3267  0215                     	;# 
  3268  0216                     	;# 
  3269  0216                     	;# 
  3270  0217                     	;# 
  3271  0217                     	;# 
  3272  0218                     	;# 
  3273  0219                     	;# 
  3274  021A                     	;# 
  3275  021B                     	;# 
  3276  021B                     	;# 
  3277  021C                     	;# 
  3278  021C                     	;# 
  3279  021D                     	;# 
  3280  021D                     	;# 
  3281  021E                     	;# 
  3282  021F                     	;# 
  3283  028C                     	;# 
  3284  028C                     	;# 
  3285  028D                     	;# 
  3286  028D                     	;# 
  3287  028E                     	;# 
  3288  028F                     	;# 
  3289  0290                     	;# 
  3290  0290                     	;# 
  3291  0291                     	;# 
  3292  0292                     	;# 
  3293  0292                     	;# 
  3294  0293                     	;# 
  3295  0293                     	;# 
  3296  0294                     	;# 
  3297  0295                     	;# 
  3298  0296                     	;# 
  3299  0296                     	;# 
  3300  0297                     	;# 
  3301  0298                     	;# 
  3302  0298                     	;# 
  3303  0299                     	;# 
  3304  0299                     	;# 
  3305  029A                     	;# 
  3306  029B                     	;# 
  3307  029C                     	;# 
  3308  029C                     	;# 
  3309  029D                     	;# 
  3310  030C                     	;# 
  3311  030C                     	;# 
  3312  030D                     	;# 
  3313  030E                     	;# 
  3314  030F                     	;# 
  3315  0310                     	;# 
  3316  0310                     	;# 
  3317  0311                     	;# 
  3318  0312                     	;# 
  3319  0313                     	;# 
  3320  0314                     	;# 
  3321  0314                     	;# 
  3322  0315                     	;# 
  3323  0316                     	;# 
  3324  0317                     	;# 
  3325  0318                     	;# 
  3326  0318                     	;# 
  3327  0319                     	;# 
  3328  031A                     	;# 
  3329  031B                     	;# 
  3330  031C                     	;# 
  3331  031C                     	;# 
  3332  031D                     	;# 
  3333  031E                     	;# 
  3334  031F                     	;# 
  3335  038C                     	;# 
  3336  038D                     	;# 
  3337  038E                     	;# 
  3338  0390                     	;# 
  3339  0391                     	;# 
  3340  0392                     	;# 
  3341  040C                     	;# 
  3342  040D                     	;# 
  3343  040E                     	;# 
  3344  040F                     	;# 
  3345  0410                     	;# 
  3346  0411                     	;# 
  3347  0416                     	;# 
  3348  0416                     	;# 
  3349  0417                     	;# 
  3350  0418                     	;# 
  3351  0418                     	;# 
  3352  0419                     	;# 
  3353  041A                     	;# 
  3354  041A                     	;# 
  3355  041B                     	;# 
  3356  041C                     	;# 
  3357  041C                     	;# 
  3358  041D                     	;# 
  3359  041E                     	;# 
  3360  041F                     	;# 
  3361  048C                     	;# 
  3362  048C                     	;# 
  3363  048D                     	;# 
  3364  048E                     	;# 
  3365  048F                     	;# 
  3366  048F                     	;# 
  3367  0490                     	;# 
  3368  0491                     	;# 
  3369  0492                     	;# 
  3370  0492                     	;# 
  3371  0493                     	;# 
  3372  0494                     	;# 
  3373  0495                     	;# 
  3374  0495                     	;# 
  3375  0496                     	;# 
  3376  0497                     	;# 
  3377  0498                     	;# 
  3378  0499                     	;# 
  3379  049A                     	;# 
  3380  049B                     	;# 
  3381  049C                     	;# 
  3382  049D                     	;# 
  3383  050C                     	;# 
  3384  050C                     	;# 
  3385  050D                     	;# 
  3386  050E                     	;# 
  3387  050F                     	;# 
  3388  050F                     	;# 
  3389  0510                     	;# 
  3390  0511                     	;# 
  3391  0512                     	;# 
  3392  0512                     	;# 
  3393  0513                     	;# 
  3394  0514                     	;# 
  3395  0515                     	;# 
  3396  0515                     	;# 
  3397  0516                     	;# 
  3398  0517                     	;# 
  3399  0518                     	;# 
  3400  0519                     	;# 
  3401  051A                     	;# 
  3402  051B                     	;# 
  3403  051C                     	;# 
  3404  051D                     	;# 
  3405  058C                     	;# 
  3406  058C                     	;# 
  3407  058D                     	;# 
  3408  058E                     	;# 
  3409  058F                     	;# 
  3410  058F                     	;# 
  3411  0590                     	;# 
  3412  0591                     	;# 
  3413  0592                     	;# 
  3414  0593                     	;# 
  3415  060C                     	;# 
  3416  060D                     	;# 
  3417  060E                     	;# 
  3418  060F                     	;# 
  3419  0610                     	;# 
  3420  0611                     	;# 
  3421  0612                     	;# 
  3422  0613                     	;# 
  3423  0614                     	;# 
  3424  0616                     	;# 
  3425  0617                     	;# 
  3426  0618                     	;# 
  3427  0619                     	;# 
  3428  061A                     	;# 
  3429  061B                     	;# 
  3430  061C                     	;# 
  3431  061D                     	;# 
  3432  061E                     	;# 
  3433  068C                     	;# 
  3434  068D                     	;# 
  3435  068E                     	;# 
  3436  068F                     	;# 
  3437  0690                     	;# 
  3438  0691                     	;# 
  3439  0692                     	;# 
  3440  0693                     	;# 
  3441  0694                     	;# 
  3442  070C                     	;# 
  3443  070D                     	;# 
  3444  070E                     	;# 
  3445  070F                     	;# 
  3446  0710                     	;# 
  3447  0711                     	;# 
  3448  0712                     	;# 
  3449  0713                     	;# 
  3450  0714                     	;# 
  3451  0716                     	;# 
  3452  0717                     	;# 
  3453  0718                     	;# 
  3454  0719                     	;# 
  3455  071A                     	;# 
  3456  071B                     	;# 
  3457  071C                     	;# 
  3458  071D                     	;# 
  3459  071E                     	;# 
  3460  0796                     	;# 
  3461  0797                     	;# 
  3462  0798                     	;# 
  3463  0799                     	;# 
  3464  079A                     	;# 
  3465  079B                     	;# 
  3466  080C                     	;# 
  3467  080D                     	;# 
  3468  080E                     	;# 
  3469  080F                     	;# 
  3470  0810                     	;# 
  3471  0811                     	;# 
  3472  0812                     	;# 
  3473  0813                     	;# 
  3474  0814                     	;# 
  3475  081A                     	;# 
  3476  081B                     	;# 
  3477  081C                     	;# 
  3478  081D                     	;# 
  3479  081E                     	;# 
  3480  081F                     	;# 
  3481  088C                     	;# 
  3482  088D                     	;# 
  3483  088E                     	;# 
  3484  088F                     	;# 
  3485  0890                     	;# 
  3486  0891                     	;# 
  3487  0892                     	;# 
  3488  0893                     	;# 
  3489  0895                     	;# 
  3490  0896                     	;# 
  3491  0897                     	;# 
  3492  0898                     	;# 
  3493  0899                     	;# 
  3494  089A                     	;# 
  3495  089B                     	;# 
  3496  090C                     	;# 
  3497  090E                     	;# 
  3498  090F                     	;# 
  3499  091F                     	;# 
  3500  091F                     	;# 
  3501  098F                     	;# 
  3502  098F                     	;# 
  3503  0990                     	;# 
  3504  0991                     	;# 
  3505  0992                     	;# 
  3506  0993                     	;# 
  3507  0994                     	;# 
  3508  0995                     	;# 
  3509  0996                     	;# 
  3510  0997                     	;# 
  3511  0E0F                     	;# 
  3512  0E10                     	;# 
  3513  0E11                     	;# 
  3514  0E12                     	;# 
  3515  0E13                     	;# 
  3516  0E14                     	;# 
  3517  0E15                     	;# 
  3518  0E16                     	;# 
  3519  0E17                     	;# 
  3520  0E18                     	;# 
  3521  0E19                     	;# 
  3522  0E1A                     	;# 
  3523  0E1B                     	;# 
  3524  0E1C                     	;# 
  3525  0E1D                     	;# 
  3526  0E1E                     	;# 
  3527  0E1F                     	;# 
  3528  0E20                     	;# 
  3529  0E21                     	;# 
  3530  0E22                     	;# 
  3531  0E23                     	;# 
  3532  0E24                     	;# 
  3533  0E25                     	;# 
  3534  0E26                     	;# 
  3535  0E27                     	;# 
  3536  0E28                     	;# 
  3537  0E29                     	;# 
  3538  0E2A                     	;# 
  3539  0E2B                     	;# 
  3540  0E2C                     	;# 
  3541  0E2D                     	;# 
  3542  0E2E                     	;# 
  3543  0E2F                     	;# 
  3544  0E30                     	;# 
  3545  0E31                     	;# 
  3546  0E32                     	;# 
  3547  0E33                     	;# 
  3548  0E34                     	;# 
  3549  0E35                     	;# 
  3550  0E36                     	;# 
  3551  0E37                     	;# 
  3552  0E8F                     	;# 
  3553  0E90                     	;# 
  3554  0E91                     	;# 
  3555  0E92                     	;# 
  3556  0E93                     	;# 
  3557  0E94                     	;# 
  3558  0E95                     	;# 
  3559  0E96                     	;# 
  3560  0E97                     	;# 
  3561  0E9C                     	;# 
  3562  0E9D                     	;# 
  3563  0E9E                     	;# 
  3564  0EA1                     	;# 
  3565  0EA2                     	;# 
  3566  0EA3                     	;# 
  3567  0EA4                     	;# 
  3568  0EA5                     	;# 
  3569  0EA9                     	;# 
  3570  0EAA                     	;# 
  3571  0EAB                     	;# 
  3572  0EAC                     	;# 
  3573  0EB1                     	;# 
  3574  0EB2                     	;# 
  3575  0EB3                     	;# 
  3576  0EB8                     	;# 
  3577  0EB9                     	;# 
  3578  0EBA                     	;# 
  3579  0EBB                     	;# 
  3580  0EBC                     	;# 
  3581  0EBD                     	;# 
  3582  0EBE                     	;# 
  3583  0EC3                     	;# 
  3584  0EC5                     	;# 
  3585  0EC6                     	;# 
  3586  0EC7                     	;# 
  3587  0EC8                     	;# 
  3588  0EC9                     	;# 
  3589  0ECA                     	;# 
  3590  0ECB                     	;# 
  3591  0ECC                     	;# 
  3592  0F10                     	;# 
  3593  0F11                     	;# 
  3594  0F12                     	;# 
  3595  0F13                     	;# 
  3596  0F14                     	;# 
  3597  0F15                     	;# 
  3598  0F16                     	;# 
  3599  0F17                     	;# 
  3600  0F18                     	;# 
  3601  0F19                     	;# 
  3602  0F1A                     	;# 
  3603  0F1B                     	;# 
  3604  0F1C                     	;# 
  3605  0F1D                     	;# 
  3606  0F1E                     	;# 
  3607  0F1F                     	;# 
  3608  0F20                     	;# 
  3609  0F21                     	;# 
  3610  0F22                     	;# 
  3611  0F23                     	;# 
  3612  0F24                     	;# 
  3613  0F25                     	;# 
  3614  0F26                     	;# 
  3615  0F27                     	;# 
  3616  0F38                     	;# 
  3617  0F39                     	;# 
  3618  0F3A                     	;# 
  3619  0F3B                     	;# 
  3620  0F3C                     	;# 
  3621  0F3D                     	;# 
  3622  0F3E                     	;# 
  3623  0F3F                     	;# 
  3624  0F40                     	;# 
  3625  0F41                     	;# 
  3626  0F43                     	;# 
  3627  0F44                     	;# 
  3628  0F45                     	;# 
  3629  0F46                     	;# 
  3630  0F47                     	;# 
  3631  0F48                     	;# 
  3632  0F49                     	;# 
  3633  0F4A                     	;# 
  3634  0F4B                     	;# 
  3635  0F4C                     	;# 
  3636  0F4E                     	;# 
  3637  0F4F                     	;# 
  3638  0F50                     	;# 
  3639  0F51                     	;# 
  3640  0F52                     	;# 
  3641  0F53                     	;# 
  3642  0F54                     	;# 
  3643  0F55                     	;# 
  3644  0F56                     	;# 
  3645  0F57                     	;# 
  3646  0F65                     	;# 
  3647  0F68                     	;# 
  3648  0F69                     	;# 
  3649  0F6A                     	;# 
  3650  0F6B                     	;# 
  3651  0FE4                     	;# 
  3652  0FE5                     	;# 
  3653  0FE6                     	;# 
  3654  0FE7                     	;# 
  3655  0FE8                     	;# 
  3656  0FE9                     	;# 
  3657  0FEA                     	;# 
  3658  0FEB                     	;# 
  3659  0FED                     	;# 
  3660  0FEE                     	;# 
  3661  0FEF                     	;# 
  3662  0000                     	;# 
  3663  0001                     	;# 
  3664  0002                     	;# 
  3665  0003                     	;# 
  3666  0004                     	;# 
  3667  0005                     	;# 
  3668  0006                     	;# 
  3669  0007                     	;# 
  3670  0008                     	;# 
  3671  0009                     	;# 
  3672  000A                     	;# 
  3673  000B                     	;# 
  3674  000C                     	;# 
  3675  000D                     	;# 
  3676  000E                     	;# 
  3677  0010                     	;# 
  3678  0011                     	;# 
  3679  0012                     	;# 
  3680  0013                     	;# 
  3681  0016                     	;# 
  3682  0017                     	;# 
  3683  0018                     	;# 
  3684  001C                     	;# 
  3685  001C                     	;# 
  3686  001D                     	;# 
  3687  001D                     	;# 
  3688  001E                     	;# 
  3689  001F                     	;# 
  3690  008C                     	;# 
  3691  008C                     	;# 
  3692  008D                     	;# 
  3693  008E                     	;# 
  3694  008E                     	;# 
  3695  008F                     	;# 
  3696  0090                     	;# 
  3697  0090                     	;# 
  3698  0091                     	;# 
  3699  0093                     	;# 
  3700  0094                     	;# 
  3701  0095                     	;# 
  3702  0096                     	;# 
  3703  0097                     	;# 
  3704  0098                     	;# 
  3705  0099                     	;# 
  3706  009A                     	;# 
  3707  009B                     	;# 
  3708  009C                     	;# 
  3709  009D                     	;# 
  3710  009E                     	;# 
  3711  010C                     	;# 
  3712  010D                     	;# 
  3713  010E                     	;# 
  3714  010E                     	;# 
  3715  010F                     	;# 
  3716  0110                     	;# 
  3717  0110                     	;# 
  3718  0111                     	;# 
  3719  0112                     	;# 
  3720  0112                     	;# 
  3721  0113                     	;# 
  3722  0114                     	;# 
  3723  0114                     	;# 
  3724  0115                     	;# 
  3725  0116                     	;# 
  3726  0116                     	;# 
  3727  0117                     	;# 
  3728  0119                     	;# 
  3729  0119                     	;# 
  3730  0119                     	;# 
  3731  011A                     	;# 
  3732  011A                     	;# 
  3733  011A                     	;# 
  3734  011B                     	;# 
  3735  011B                     	;# 
  3736  011B                     	;# 
  3737  011B                     	;# 
  3738  011B                     	;# 
  3739  011C                     	;# 
  3740  011C                     	;# 
  3741  011C                     	;# 
  3742  011D                     	;# 
  3743  011D                     	;# 
  3744  011D                     	;# 
  3745  011E                     	;# 
  3746  011E                     	;# 
  3747  011E                     	;# 
  3748  011F                     	;# 
  3749  011F                     	;# 
  3750  011F                     	;# 
  3751  011F                     	;# 
  3752  011F                     	;# 
  3753  018C                     	;# 
  3754  018D                     	;# 
  3755  018E                     	;# 
  3756  018F                     	;# 
  3757  0190                     	;# 
  3758  0191                     	;# 
  3759  0192                     	;# 
  3760  0196                     	;# 
  3761  0197                     	;# 
  3762  0198                     	;# 
  3763  0199                     	;# 
  3764  019A                     	;# 
  3765  019B                     	;# 
  3766  019C                     	;# 
  3767  020C                     	;# 
  3768  020D                     	;# 
  3769  020E                     	;# 
  3770  020F                     	;# 
  3771  020F                     	;# 
  3772  0210                     	;# 
  3773  0210                     	;# 
  3774  0211                     	;# 
  3775  0211                     	;# 
  3776  0212                     	;# 
  3777  0213                     	;# 
  3778  0214                     	;# 
  3779  0215                     	;# 
  3780  0215                     	;# 
  3781  0216                     	;# 
  3782  0216                     	;# 
  3783  0217                     	;# 
  3784  0217                     	;# 
  3785  0218                     	;# 
  3786  0219                     	;# 
  3787  021A                     	;# 
  3788  021B                     	;# 
  3789  021B                     	;# 
  3790  021C                     	;# 
  3791  021C                     	;# 
  3792  021D                     	;# 
  3793  021D                     	;# 
  3794  021E                     	;# 
  3795  021F                     	;# 
  3796  028C                     	;# 
  3797  028C                     	;# 
  3798  028D                     	;# 
  3799  028D                     	;# 
  3800  028E                     	;# 
  3801  028F                     	;# 
  3802  0290                     	;# 
  3803  0290                     	;# 
  3804  0291                     	;# 
  3805  0292                     	;# 
  3806  0292                     	;# 
  3807  0293                     	;# 
  3808  0293                     	;# 
  3809  0294                     	;# 
  3810  0295                     	;# 
  3811  0296                     	;# 
  3812  0296                     	;# 
  3813  0297                     	;# 
  3814  0298                     	;# 
  3815  0298                     	;# 
  3816  0299                     	;# 
  3817  0299                     	;# 
  3818  029A                     	;# 
  3819  029B                     	;# 
  3820  029C                     	;# 
  3821  029C                     	;# 
  3822  029D                     	;# 
  3823  030C                     	;# 
  3824  030C                     	;# 
  3825  030D                     	;# 
  3826  030E                     	;# 
  3827  030F                     	;# 
  3828  0310                     	;# 
  3829  0310                     	;# 
  3830  0311                     	;# 
  3831  0312                     	;# 
  3832  0313                     	;# 
  3833  0314                     	;# 
  3834  0314                     	;# 
  3835  0315                     	;# 
  3836  0316                     	;# 
  3837  0317                     	;# 
  3838  0318                     	;# 
  3839  0318                     	;# 
  3840  0319                     	;# 
  3841  031A                     	;# 
  3842  031B                     	;# 
  3843  031C                     	;# 
  3844  031C                     	;# 
  3845  031D                     	;# 
  3846  031E                     	;# 
  3847  031F                     	;# 
  3848  038C                     	;# 
  3849  038D                     	;# 
  3850  038E                     	;# 
  3851  0390                     	;# 
  3852  0391                     	;# 
  3853  0392                     	;# 
  3854  040C                     	;# 
  3855  040D                     	;# 
  3856  040E                     	;# 
  3857  040F                     	;# 
  3858  0410                     	;# 
  3859  0411                     	;# 
  3860  0416                     	;# 
  3861  0416                     	;# 
  3862  0417                     	;# 
  3863  0418                     	;# 
  3864  0418                     	;# 
  3865  0419                     	;# 
  3866  041A                     	;# 
  3867  041A                     	;# 
  3868  041B                     	;# 
  3869  041C                     	;# 
  3870  041C                     	;# 
  3871  041D                     	;# 
  3872  041E                     	;# 
  3873  041F                     	;# 
  3874  048C                     	;# 
  3875  048C                     	;# 
  3876  048D                     	;# 
  3877  048E                     	;# 
  3878  048F                     	;# 
  3879  048F                     	;# 
  3880  0490                     	;# 
  3881  0491                     	;# 
  3882  0492                     	;# 
  3883  0492                     	;# 
  3884  0493                     	;# 
  3885  0494                     	;# 
  3886  0495                     	;# 
  3887  0495                     	;# 
  3888  0496                     	;# 
  3889  0497                     	;# 
  3890  0498                     	;# 
  3891  0499                     	;# 
  3892  049A                     	;# 
  3893  049B                     	;# 
  3894  049C                     	;# 
  3895  049D                     	;# 
  3896  050C                     	;# 
  3897  050C                     	;# 
  3898  050D                     	;# 
  3899  050E                     	;# 
  3900  050F                     	;# 
  3901  050F                     	;# 
  3902  0510                     	;# 
  3903  0511                     	;# 
  3904  0512                     	;# 
  3905  0512                     	;# 
  3906  0513                     	;# 
  3907  0514                     	;# 
  3908  0515                     	;# 
  3909  0515                     	;# 
  3910  0516                     	;# 
  3911  0517                     	;# 
  3912  0518                     	;# 
  3913  0519                     	;# 
  3914  051A                     	;# 
  3915  051B                     	;# 
  3916  051C                     	;# 
  3917  051D                     	;# 
  3918  058C                     	;# 
  3919  058C                     	;# 
  3920  058D                     	;# 
  3921  058E                     	;# 
  3922  058F                     	;# 
  3923  058F                     	;# 
  3924  0590                     	;# 
  3925  0591                     	;# 
  3926  0592                     	;# 
  3927  0593                     	;# 
  3928  060C                     	;# 
  3929  060D                     	;# 
  3930  060E                     	;# 
  3931  060F                     	;# 
  3932  0610                     	;# 
  3933  0611                     	;# 
  3934  0612                     	;# 
  3935  0613                     	;# 
  3936  0614                     	;# 
  3937  0616                     	;# 
  3938  0617                     	;# 
  3939  0618                     	;# 
  3940  0619                     	;# 
  3941  061A                     	;# 
  3942  061B                     	;# 
  3943  061C                     	;# 
  3944  061D                     	;# 
  3945  061E                     	;# 
  3946  068C                     	;# 
  3947  068D                     	;# 
  3948  068E                     	;# 
  3949  068F                     	;# 
  3950  0690                     	;# 
  3951  0691                     	;# 
  3952  0692                     	;# 
  3953  0693                     	;# 
  3954  0694                     	;# 
  3955  070C                     	;# 
  3956  070D                     	;# 
  3957  070E                     	;# 
  3958  070F                     	;# 
  3959  0710                     	;# 
  3960  0711                     	;# 
  3961  0712                     	;# 
  3962  0713                     	;# 
  3963  0714                     	;# 
  3964  0716                     	;# 
  3965  0717                     	;# 
  3966  0718                     	;# 
  3967  0719                     	;# 
  3968  071A                     	;# 
  3969  071B                     	;# 
  3970  071C                     	;# 
  3971  071D                     	;# 
  3972  071E                     	;# 
  3973  0796                     	;# 
  3974  0797                     	;# 
  3975  0798                     	;# 
  3976  0799                     	;# 
  3977  079A                     	;# 
  3978  079B                     	;# 
  3979  080C                     	;# 
  3980  080D                     	;# 
  3981  080E                     	;# 
  3982  080F                     	;# 
  3983  0810                     	;# 
  3984  0811                     	;# 
  3985  0812                     	;# 
  3986  0813                     	;# 
  3987  0814                     	;# 
  3988  081A                     	;# 
  3989  081B                     	;# 
  3990  081C                     	;# 
  3991  081D                     	;# 
  3992  081E                     	;# 
  3993  081F                     	;# 
  3994  088C                     	;# 
  3995  088D                     	;# 
  3996  088E                     	;# 
  3997  088F                     	;# 
  3998  0890                     	;# 
  3999  0891                     	;# 
  4000  0892                     	;# 
  4001  0893                     	;# 
  4002  0895                     	;# 
  4003  0896                     	;# 
  4004  0897                     	;# 
  4005  0898                     	;# 
  4006  0899                     	;# 
  4007  089A                     	;# 
  4008  089B                     	;# 
  4009  090C                     	;# 
  4010  090E                     	;# 
  4011  090F                     	;# 
  4012  091F                     	;# 
  4013  091F                     	;# 
  4014  098F                     	;# 
  4015  098F                     	;# 
  4016  0990                     	;# 
  4017  0991                     	;# 
  4018  0992                     	;# 
  4019  0993                     	;# 
  4020  0994                     	;# 
  4021  0995                     	;# 
  4022  0996                     	;# 
  4023  0997                     	;# 
  4024  0E0F                     	;# 
  4025  0E10                     	;# 
  4026  0E11                     	;# 
  4027  0E12                     	;# 
  4028  0E13                     	;# 
  4029  0E14                     	;# 
  4030  0E15                     	;# 
  4031  0E16                     	;# 
  4032  0E17                     	;# 
  4033  0E18                     	;# 
  4034  0E19                     	;# 
  4035  0E1A                     	;# 
  4036  0E1B                     	;# 
  4037  0E1C                     	;# 
  4038  0E1D                     	;# 
  4039  0E1E                     	;# 
  4040  0E1F                     	;# 
  4041  0E20                     	;# 
  4042  0E21                     	;# 
  4043  0E22                     	;# 
  4044  0E23                     	;# 
  4045  0E24                     	;# 
  4046  0E25                     	;# 
  4047  0E26                     	;# 
  4048  0E27                     	;# 
  4049  0E28                     	;# 
  4050  0E29                     	;# 
  4051  0E2A                     	;# 
  4052  0E2B                     	;# 
  4053  0E2C                     	;# 
  4054  0E2D                     	;# 
  4055  0E2E                     	;# 
  4056  0E2F                     	;# 
  4057  0E30                     	;# 
  4058  0E31                     	;# 
  4059  0E32                     	;# 
  4060  0E33                     	;# 
  4061  0E34                     	;# 
  4062  0E35                     	;# 
  4063  0E36                     	;# 
  4064  0E37                     	;# 
  4065  0E8F                     	;# 
  4066  0E90                     	;# 
  4067  0E91                     	;# 
  4068  0E92                     	;# 
  4069  0E93                     	;# 
  4070  0E94                     	;# 
  4071  0E95                     	;# 
  4072  0E96                     	;# 
  4073  0E97                     	;# 
  4074  0E9C                     	;# 
  4075  0E9D                     	;# 
  4076  0E9E                     	;# 
  4077  0EA1                     	;# 
  4078  0EA2                     	;# 
  4079  0EA3                     	;# 
  4080  0EA4                     	;# 
  4081  0EA5                     	;# 
  4082  0EA9                     	;# 
  4083  0EAA                     	;# 
  4084  0EAB                     	;# 
  4085  0EAC                     	;# 
  4086  0EB1                     	;# 
  4087  0EB2                     	;# 
  4088  0EB3                     	;# 
  4089  0EB8                     	;# 
  4090  0EB9                     	;# 
  4091  0EBA                     	;# 
  4092  0EBB                     	;# 
  4093  0EBC                     	;# 
  4094  0EBD                     	;# 
  4095  0EBE                     	;# 
  4096  0EC3                     	;# 
  4097  0EC5                     	;# 
  4098  0EC6                     	;# 
  4099  0EC7                     	;# 
  4100  0EC8                     	;# 
  4101  0EC9                     	;# 
  4102  0ECA                     	;# 
  4103  0ECB                     	;# 
  4104  0ECC                     	;# 
  4105  0F10                     	;# 
  4106  0F11                     	;# 
  4107  0F12                     	;# 
  4108  0F13                     	;# 
  4109  0F14                     	;# 
  4110  0F15                     	;# 
  4111  0F16                     	;# 
  4112  0F17                     	;# 
  4113  0F18                     	;# 
  4114  0F19                     	;# 
  4115  0F1A                     	;# 
  4116  0F1B                     	;# 
  4117  0F1C                     	;# 
  4118  0F1D                     	;# 
  4119  0F1E                     	;# 
  4120  0F1F                     	;# 
  4121  0F20                     	;# 
  4122  0F21                     	;# 
  4123  0F22                     	;# 
  4124  0F23                     	;# 
  4125  0F24                     	;# 
  4126  0F25                     	;# 
  4127  0F26                     	;# 
  4128  0F27                     	;# 
  4129  0F38                     	;# 
  4130  0F39                     	;# 
  4131  0F3A                     	;# 
  4132  0F3B                     	;# 
  4133  0F3C                     	;# 
  4134  0F3D                     	;# 
  4135  0F3E                     	;# 
  4136  0F3F                     	;# 
  4137  0F40                     	;# 
  4138  0F41                     	;# 
  4139  0F43                     	;# 
  4140  0F44                     	;# 
  4141  0F45                     	;# 
  4142  0F46                     	;# 
  4143  0F47                     	;# 
  4144  0F48                     	;# 
  4145  0F49                     	;# 
  4146  0F4A                     	;# 
  4147  0F4B                     	;# 
  4148  0F4C                     	;# 
  4149  0F4E                     	;# 
  4150  0F4F                     	;# 
  4151  0F50                     	;# 
  4152  0F51                     	;# 
  4153  0F52                     	;# 
  4154  0F53                     	;# 
  4155  0F54                     	;# 
  4156  0F55                     	;# 
  4157  0F56                     	;# 
  4158  0F57                     	;# 
  4159  0F65                     	;# 
  4160  0F68                     	;# 
  4161  0F69                     	;# 
  4162  0F6A                     	;# 
  4163  0F6B                     	;# 
  4164  0FE4                     	;# 
  4165  0FE5                     	;# 
  4166  0FE6                     	;# 
  4167  0FE7                     	;# 
  4168  0FE8                     	;# 
  4169  0FE9                     	;# 
  4170  0FEA                     	;# 
  4171  0FEB                     	;# 
  4172  0FED                     	;# 
  4173  0FEE                     	;# 
  4174  0FEF                     	;# 
  4175  0000                     	;# 
  4176  0001                     	;# 
  4177  0002                     	;# 
  4178  0003                     	;# 
  4179  0004                     	;# 
  4180  0005                     	;# 
  4181  0006                     	;# 
  4182  0007                     	;# 
  4183  0008                     	;# 
  4184  0009                     	;# 
  4185  000A                     	;# 
  4186  000B                     	;# 
  4187  000C                     	;# 
  4188  000D                     	;# 
  4189  000E                     	;# 
  4190  0010                     	;# 
  4191  0011                     	;# 
  4192  0012                     	;# 
  4193  0013                     	;# 
  4194  0016                     	;# 
  4195  0017                     	;# 
  4196  0018                     	;# 
  4197  001C                     	;# 
  4198  001C                     	;# 
  4199  001D                     	;# 
  4200  001D                     	;# 
  4201  001E                     	;# 
  4202  001F                     	;# 
  4203  008C                     	;# 
  4204  008C                     	;# 
  4205  008D                     	;# 
  4206  008E                     	;# 
  4207  008E                     	;# 
  4208  008F                     	;# 
  4209  0090                     	;# 
  4210  0090                     	;# 
  4211  0091                     	;# 
  4212  0093                     	;# 
  4213  0094                     	;# 
  4214  0095                     	;# 
  4215  0096                     	;# 
  4216  0097                     	;# 
  4217  0098                     	;# 
  4218  0099                     	;# 
  4219  009A                     	;# 
  4220  009B                     	;# 
  4221  009C                     	;# 
  4222  009D                     	;# 
  4223  009E                     	;# 
  4224  010C                     	;# 
  4225  010D                     	;# 
  4226  010E                     	;# 
  4227  010E                     	;# 
  4228  010F                     	;# 
  4229  0110                     	;# 
  4230  0110                     	;# 
  4231  0111                     	;# 
  4232  0112                     	;# 
  4233  0112                     	;# 
  4234  0113                     	;# 
  4235  0114                     	;# 
  4236  0114                     	;# 
  4237  0115                     	;# 
  4238  0116                     	;# 
  4239  0116                     	;# 
  4240  0117                     	;# 
  4241  0119                     	;# 
  4242  0119                     	;# 
  4243  0119                     	;# 
  4244  011A                     	;# 
  4245  011A                     	;# 
  4246  011A                     	;# 
  4247  011B                     	;# 
  4248  011B                     	;# 
  4249  011B                     	;# 
  4250  011B                     	;# 
  4251  011B                     	;# 
  4252  011C                     	;# 
  4253  011C                     	;# 
  4254  011C                     	;# 
  4255  011D                     	;# 
  4256  011D                     	;# 
  4257  011D                     	;# 
  4258  011E                     	;# 
  4259  011E                     	;# 
  4260  011E                     	;# 
  4261  011F                     	;# 
  4262  011F                     	;# 
  4263  011F                     	;# 
  4264  011F                     	;# 
  4265  011F                     	;# 
  4266  018C                     	;# 
  4267  018D                     	;# 
  4268  018E                     	;# 
  4269  018F                     	;# 
  4270  0190                     	;# 
  4271  0191                     	;# 
  4272  0192                     	;# 
  4273  0196                     	;# 
  4274  0197                     	;# 
  4275  0198                     	;# 
  4276  0199                     	;# 
  4277  019A                     	;# 
  4278  019B                     	;# 
  4279  019C                     	;# 
  4280  020C                     	;# 
  4281  020D                     	;# 
  4282  020E                     	;# 
  4283  020F                     	;# 
  4284  020F                     	;# 
  4285  0210                     	;# 
  4286  0210                     	;# 
  4287  0211                     	;# 
  4288  0211                     	;# 
  4289  0212                     	;# 
  4290  0213                     	;# 
  4291  0214                     	;# 
  4292  0215                     	;# 
  4293  0215                     	;# 
  4294  0216                     	;# 
  4295  0216                     	;# 
  4296  0217                     	;# 
  4297  0217                     	;# 
  4298  0218                     	;# 
  4299  0219                     	;# 
  4300  021A                     	;# 
  4301  021B                     	;# 
  4302  021B                     	;# 
  4303  021C                     	;# 
  4304  021C                     	;# 
  4305  021D                     	;# 
  4306  021D                     	;# 
  4307  021E                     	;# 
  4308  021F                     	;# 
  4309  028C                     	;# 
  4310  028C                     	;# 
  4311  028D                     	;# 
  4312  028D                     	;# 
  4313  028E                     	;# 
  4314  028F                     	;# 
  4315  0290                     	;# 
  4316  0290                     	;# 
  4317  0291                     	;# 
  4318  0292                     	;# 
  4319  0292                     	;# 
  4320  0293                     	;# 
  4321  0293                     	;# 
  4322  0294                     	;# 
  4323  0295                     	;# 
  4324  0296                     	;# 
  4325  0296                     	;# 
  4326  0297                     	;# 
  4327  0298                     	;# 
  4328  0298                     	;# 
  4329  0299                     	;# 
  4330  0299                     	;# 
  4331  029A                     	;# 
  4332  029B                     	;# 
  4333  029C                     	;# 
  4334  029C                     	;# 
  4335  029D                     	;# 
  4336  030C                     	;# 
  4337  030C                     	;# 
  4338  030D                     	;# 
  4339  030E                     	;# 
  4340  030F                     	;# 
  4341  0310                     	;# 
  4342  0310                     	;# 
  4343  0311                     	;# 
  4344  0312                     	;# 
  4345  0313                     	;# 
  4346  0314                     	;# 
  4347  0314                     	;# 
  4348  0315                     	;# 
  4349  0316                     	;# 
  4350  0317                     	;# 
  4351  0318                     	;# 
  4352  0318                     	;# 
  4353  0319                     	;# 
  4354  031A                     	;# 
  4355  031B                     	;# 
  4356  031C                     	;# 
  4357  031C                     	;# 
  4358  031D                     	;# 
  4359  031E                     	;# 
  4360  031F                     	;# 
  4361  038C                     	;# 
  4362  038D                     	;# 
  4363  038E                     	;# 
  4364  0390                     	;# 
  4365  0391                     	;# 
  4366  0392                     	;# 
  4367  040C                     	;# 
  4368  040D                     	;# 
  4369  040E                     	;# 
  4370  040F                     	;# 
  4371  0410                     	;# 
  4372  0411                     	;# 
  4373  0416                     	;# 
  4374  0416                     	;# 
  4375  0417                     	;# 
  4376  0418                     	;# 
  4377  0418                     	;# 
  4378  0419                     	;# 
  4379  041A                     	;# 
  4380  041A                     	;# 
  4381  041B                     	;# 
  4382  041C                     	;# 
  4383  041C                     	;# 
  4384  041D                     	;# 
  4385  041E                     	;# 
  4386  041F                     	;# 
  4387  048C                     	;# 
  4388  048C                     	;# 
  4389  048D                     	;# 
  4390  048E                     	;# 
  4391  048F                     	;# 
  4392  048F                     	;# 
  4393  0490                     	;# 
  4394  0491                     	;# 
  4395  0492                     	;# 
  4396  0492                     	;# 
  4397  0493                     	;# 
  4398  0494                     	;# 
  4399  0495                     	;# 
  4400  0495                     	;# 
  4401  0496                     	;# 
  4402  0497                     	;# 
  4403  0498                     	;# 
  4404  0499                     	;# 
  4405  049A                     	;# 
  4406  049B                     	;# 
  4407  049C                     	;# 
  4408  049D                     	;# 
  4409  050C                     	;# 
  4410  050C                     	;# 
  4411  050D                     	;# 
  4412  050E                     	;# 
  4413  050F                     	;# 
  4414  050F                     	;# 
  4415  0510                     	;# 
  4416  0511                     	;# 
  4417  0512                     	;# 
  4418  0512                     	;# 
  4419  0513                     	;# 
  4420  0514                     	;# 
  4421  0515                     	;# 
  4422  0515                     	;# 
  4423  0516                     	;# 
  4424  0517                     	;# 
  4425  0518                     	;# 
  4426  0519                     	;# 
  4427  051A                     	;# 
  4428  051B                     	;# 
  4429  051C                     	;# 
  4430  051D                     	;# 
  4431  058C                     	;# 
  4432  058C                     	;# 
  4433  058D                     	;# 
  4434  058E                     	;# 
  4435  058F                     	;# 
  4436  058F                     	;# 
  4437  0590                     	;# 
  4438  0591                     	;# 
  4439  0592                     	;# 
  4440  0593                     	;# 
  4441  060C                     	;# 
  4442  060D                     	;# 
  4443  060E                     	;# 
  4444  060F                     	;# 
  4445  0610                     	;# 
  4446  0611                     	;# 
  4447  0612                     	;# 
  4448  0613                     	;# 
  4449  0614                     	;# 
  4450  0616                     	;# 
  4451  0617                     	;# 
  4452  0618                     	;# 
  4453  0619                     	;# 
  4454  061A                     	;# 
  4455  061B                     	;# 
  4456  061C                     	;# 
  4457  061D                     	;# 
  4458  061E                     	;# 
  4459  068C                     	;# 
  4460  068D                     	;# 
  4461  068E                     	;# 
  4462  068F                     	;# 
  4463  0690                     	;# 
  4464  0691                     	;# 
  4465  0692                     	;# 
  4466  0693                     	;# 
  4467  0694                     	;# 
  4468  070C                     	;# 
  4469  070D                     	;# 
  4470  070E                     	;# 
  4471  070F                     	;# 
  4472  0710                     	;# 
  4473  0711                     	;# 
  4474  0712                     	;# 
  4475  0713                     	;# 
  4476  0714                     	;# 
  4477  0716                     	;# 
  4478  0717                     	;# 
  4479  0718                     	;# 
  4480  0719                     	;# 
  4481  071A                     	;# 
  4482  071B                     	;# 
  4483  071C                     	;# 
  4484  071D                     	;# 
  4485  071E                     	;# 
  4486  0796                     	;# 
  4487  0797                     	;# 
  4488  0798                     	;# 
  4489  0799                     	;# 
  4490  079A                     	;# 
  4491  079B                     	;# 
  4492  080C                     	;# 
  4493  080D                     	;# 
  4494  080E                     	;# 
  4495  080F                     	;# 
  4496  0810                     	;# 
  4497  0811                     	;# 
  4498  0812                     	;# 
  4499  0813                     	;# 
  4500  0814                     	;# 
  4501  081A                     	;# 
  4502  081B                     	;# 
  4503  081C                     	;# 
  4504  081D                     	;# 
  4505  081E                     	;# 
  4506  081F                     	;# 
  4507  088C                     	;# 
  4508  088D                     	;# 
  4509  088E                     	;# 
  4510  088F                     	;# 
  4511  0890                     	;# 
  4512  0891                     	;# 
  4513  0892                     	;# 
  4514  0893                     	;# 
  4515  0895                     	;# 
  4516  0896                     	;# 
  4517  0897                     	;# 
  4518  0898                     	;# 
  4519  0899                     	;# 
  4520  089A                     	;# 
  4521  089B                     	;# 
  4522  090C                     	;# 
  4523  090E                     	;# 
  4524  090F                     	;# 
  4525  091F                     	;# 
  4526  091F                     	;# 
  4527  098F                     	;# 
  4528  098F                     	;# 
  4529  0990                     	;# 
  4530  0991                     	;# 
  4531  0992                     	;# 
  4532  0993                     	;# 
  4533  0994                     	;# 
  4534  0995                     	;# 
  4535  0996                     	;# 
  4536  0997                     	;# 
  4537  0E0F                     	;# 
  4538  0E10                     	;# 
  4539  0E11                     	;# 
  4540  0E12                     	;# 
  4541  0E13                     	;# 
  4542  0E14                     	;# 
  4543  0E15                     	;# 
  4544  0E16                     	;# 
  4545  0E17                     	;# 
  4546  0E18                     	;# 
  4547  0E19                     	;# 
  4548  0E1A                     	;# 
  4549  0E1B                     	;# 
  4550  0E1C                     	;# 
  4551  0E1D                     	;# 
  4552  0E1E                     	;# 
  4553  0E1F                     	;# 
  4554  0E20                     	;# 
  4555  0E21                     	;# 
  4556  0E22                     	;# 
  4557  0E23                     	;# 
  4558  0E24                     	;# 
  4559  0E25                     	;# 
  4560  0E26                     	;# 
  4561  0E27                     	;# 
  4562  0E28                     	;# 
  4563  0E29                     	;# 
  4564  0E2A                     	;# 
  4565  0E2B                     	;# 
  4566  0E2C                     	;# 
  4567  0E2D                     	;# 
  4568  0E2E                     	;# 
  4569  0E2F                     	;# 
  4570  0E30                     	;# 
  4571  0E31                     	;# 
  4572  0E32                     	;# 
  4573  0E33                     	;# 
  4574  0E34                     	;# 
  4575  0E35                     	;# 
  4576  0E36                     	;# 
  4577  0E37                     	;# 
  4578  0E8F                     	;# 
  4579  0E90                     	;# 
  4580  0E91                     	;# 
  4581  0E92                     	;# 
  4582  0E93                     	;# 
  4583  0E94                     	;# 
  4584  0E95                     	;# 
  4585  0E96                     	;# 
  4586  0E97                     	;# 
  4587  0E9C                     	;# 
  4588  0E9D                     	;# 
  4589  0E9E                     	;# 
  4590  0EA1                     	;# 
  4591  0EA2                     	;# 
  4592  0EA3                     	;# 
  4593  0EA4                     	;# 
  4594  0EA5                     	;# 
  4595  0EA9                     	;# 
  4596  0EAA                     	;# 
  4597  0EAB                     	;# 
  4598  0EAC                     	;# 
  4599  0EB1                     	;# 
  4600  0EB2                     	;# 
  4601  0EB3                     	;# 
  4602  0EB8                     	;# 
  4603  0EB9                     	;# 
  4604  0EBA                     	;# 
  4605  0EBB                     	;# 
  4606  0EBC                     	;# 
  4607  0EBD                     	;# 
  4608  0EBE                     	;# 
  4609  0EC3                     	;# 
  4610  0EC5                     	;# 
  4611  0EC6                     	;# 
  4612  0EC7                     	;# 
  4613  0EC8                     	;# 
  4614  0EC9                     	;# 
  4615  0ECA                     	;# 
  4616  0ECB                     	;# 
  4617  0ECC                     	;# 
  4618  0F10                     	;# 
  4619  0F11                     	;# 
  4620  0F12                     	;# 
  4621  0F13                     	;# 
  4622  0F14                     	;# 
  4623  0F15                     	;# 
  4624  0F16                     	;# 
  4625  0F17                     	;# 
  4626  0F18                     	;# 
  4627  0F19                     	;# 
  4628  0F1A                     	;# 
  4629  0F1B                     	;# 
  4630  0F1C                     	;# 
  4631  0F1D                     	;# 
  4632  0F1E                     	;# 
  4633  0F1F                     	;# 
  4634  0F20                     	;# 
  4635  0F21                     	;# 
  4636  0F22                     	;# 
  4637  0F23                     	;# 
  4638  0F24                     	;# 
  4639  0F25                     	;# 
  4640  0F26                     	;# 
  4641  0F27                     	;# 
  4642  0F38                     	;# 
  4643  0F39                     	;# 
  4644  0F3A                     	;# 
  4645  0F3B                     	;# 
  4646  0F3C                     	;# 
  4647  0F3D                     	;# 
  4648  0F3E                     	;# 
  4649  0F3F                     	;# 
  4650  0F40                     	;# 
  4651  0F41                     	;# 
  4652  0F43                     	;# 
  4653  0F44                     	;# 
  4654  0F45                     	;# 
  4655  0F46                     	;# 
  4656  0F47                     	;# 
  4657  0F48                     	;# 
  4658  0F49                     	;# 
  4659  0F4A                     	;# 
  4660  0F4B                     	;# 
  4661  0F4C                     	;# 
  4662  0F4E                     	;# 
  4663  0F4F                     	;# 
  4664  0F50                     	;# 
  4665  0F51                     	;# 
  4666  0F52                     	;# 
  4667  0F53                     	;# 
  4668  0F54                     	;# 
  4669  0F55                     	;# 
  4670  0F56                     	;# 
  4671  0F57                     	;# 
  4672  0F65                     	;# 
  4673  0F68                     	;# 
  4674  0F69                     	;# 
  4675  0F6A                     	;# 
  4676  0F6B                     	;# 
  4677  0FE4                     	;# 
  4678  0FE5                     	;# 
  4679  0FE6                     	;# 
  4680  0FE7                     	;# 
  4681  0FE8                     	;# 
  4682  0FE9                     	;# 
  4683  0FEA                     	;# 
  4684  0FEB                     	;# 
  4685  0FED                     	;# 
  4686  0FEE                     	;# 
  4687  0FEF                     	;# 
  4688  0000                     	;# 
  4689  0001                     	;# 
  4690  0002                     	;# 
  4691  0003                     	;# 
  4692  0004                     	;# 
  4693  0005                     	;# 
  4694  0006                     	;# 
  4695  0007                     	;# 
  4696  0008                     	;# 
  4697  0009                     	;# 
  4698  000A                     	;# 
  4699  000B                     	;# 
  4700  000C                     	;# 
  4701  000D                     	;# 
  4702  000E                     	;# 
  4703  0010                     	;# 
  4704  0011                     	;# 
  4705  0012                     	;# 
  4706  0013                     	;# 
  4707  0016                     	;# 
  4708  0017                     	;# 
  4709  0018                     	;# 
  4710  001C                     	;# 
  4711  001C                     	;# 
  4712  001D                     	;# 
  4713  001D                     	;# 
  4714  001E                     	;# 
  4715  001F                     	;# 
  4716  008C                     	;# 
  4717  008C                     	;# 
  4718  008D                     	;# 
  4719  008E                     	;# 
  4720  008E                     	;# 
  4721  008F                     	;# 
  4722  0090                     	;# 
  4723  0090                     	;# 
  4724  0091                     	;# 
  4725  0093                     	;# 
  4726  0094                     	;# 
  4727  0095                     	;# 
  4728  0096                     	;# 
  4729  0097                     	;# 
  4730  0098                     	;# 
  4731  0099                     	;# 
  4732  009A                     	;# 
  4733  009B                     	;# 
  4734  009C                     	;# 
  4735  009D                     	;# 
  4736  009E                     	;# 
  4737  010C                     	;# 
  4738  010D                     	;# 
  4739  010E                     	;# 
  4740  010E                     	;# 
  4741  010F                     	;# 
  4742  0110                     	;# 
  4743  0110                     	;# 
  4744  0111                     	;# 
  4745  0112                     	;# 
  4746  0112                     	;# 
  4747  0113                     	;# 
  4748  0114                     	;# 
  4749  0114                     	;# 
  4750  0115                     	;# 
  4751  0116                     	;# 
  4752  0116                     	;# 
  4753  0117                     	;# 
  4754  0119                     	;# 
  4755  0119                     	;# 
  4756  0119                     	;# 
  4757  011A                     	;# 
  4758  011A                     	;# 
  4759  011A                     	;# 
  4760  011B                     	;# 
  4761  011B                     	;# 
  4762  011B                     	;# 
  4763  011B                     	;# 
  4764  011B                     	;# 
  4765  011C                     	;# 
  4766  011C                     	;# 
  4767  011C                     	;# 
  4768  011D                     	;# 
  4769  011D                     	;# 
  4770  011D                     	;# 
  4771  011E                     	;# 
  4772  011E                     	;# 
  4773  011E                     	;# 
  4774  011F                     	;# 
  4775  011F                     	;# 
  4776  011F                     	;# 
  4777  011F                     	;# 
  4778  011F                     	;# 
  4779  018C                     	;# 
  4780  018D                     	;# 
  4781  018E                     	;# 
  4782  018F                     	;# 
  4783  0190                     	;# 
  4784  0191                     	;# 
  4785  0192                     	;# 
  4786  0196                     	;# 
  4787  0197                     	;# 
  4788  0198                     	;# 
  4789  0199                     	;# 
  4790  019A                     	;# 
  4791  019B                     	;# 
  4792  019C                     	;# 
  4793  020C                     	;# 
  4794  020D                     	;# 
  4795  020E                     	;# 
  4796  020F                     	;# 
  4797  020F                     	;# 
  4798  0210                     	;# 
  4799  0210                     	;# 
  4800  0211                     	;# 
  4801  0211                     	;# 
  4802  0212                     	;# 
  4803  0213                     	;# 
  4804  0214                     	;# 
  4805  0215                     	;# 
  4806  0215                     	;# 
  4807  0216                     	;# 
  4808  0216                     	;# 
  4809  0217                     	;# 
  4810  0217                     	;# 
  4811  0218                     	;# 
  4812  0219                     	;# 
  4813  021A                     	;# 
  4814  021B                     	;# 
  4815  021B                     	;# 
  4816  021C                     	;# 
  4817  021C                     	;# 
  4818  021D                     	;# 
  4819  021D                     	;# 
  4820  021E                     	;# 
  4821  021F                     	;# 
  4822  028C                     	;# 
  4823  028C                     	;# 
  4824  028D                     	;# 
  4825  028D                     	;# 
  4826  028E                     	;# 
  4827  028F                     	;# 
  4828  0290                     	;# 
  4829  0290                     	;# 
  4830  0291                     	;# 
  4831  0292                     	;# 
  4832  0292                     	;# 
  4833  0293                     	;# 
  4834  0293                     	;# 
  4835  0294                     	;# 
  4836  0295                     	;# 
  4837  0296                     	;# 
  4838  0296                     	;# 
  4839  0297                     	;# 
  4840  0298                     	;# 
  4841  0298                     	;# 
  4842  0299                     	;# 
  4843  0299                     	;# 
  4844  029A                     	;# 
  4845  029B                     	;# 
  4846  029C                     	;# 
  4847  029C                     	;# 
  4848  029D                     	;# 
  4849  030C                     	;# 
  4850  030C                     	;# 
  4851  030D                     	;# 
  4852  030E                     	;# 
  4853  030F                     	;# 
  4854  0310                     	;# 
  4855  0310                     	;# 
  4856  0311                     	;# 
  4857  0312                     	;# 
  4858  0313                     	;# 
  4859  0314                     	;# 
  4860  0314                     	;# 
  4861  0315                     	;# 
  4862  0316                     	;# 
  4863  0317                     	;# 
  4864  0318                     	;# 
  4865  0318                     	;# 
  4866  0319                     	;# 
  4867  031A                     	;# 
  4868  031B                     	;# 
  4869  031C                     	;# 
  4870  031C                     	;# 
  4871  031D                     	;# 
  4872  031E                     	;# 
  4873  031F                     	;# 
  4874  038C                     	;# 
  4875  038D                     	;# 
  4876  038E                     	;# 
  4877  0390                     	;# 
  4878  0391                     	;# 
  4879  0392                     	;# 
  4880  040C                     	;# 
  4881  040D                     	;# 
  4882  040E                     	;# 
  4883  040F                     	;# 
  4884  0410                     	;# 
  4885  0411                     	;# 
  4886  0416                     	;# 
  4887  0416                     	;# 
  4888  0417                     	;# 
  4889  0418                     	;# 
  4890  0418                     	;# 
  4891  0419                     	;# 
  4892  041A                     	;# 
  4893  041A                     	;# 
  4894  041B                     	;# 
  4895  041C                     	;# 
  4896  041C                     	;# 
  4897  041D                     	;# 
  4898  041E                     	;# 
  4899  041F                     	;# 
  4900  048C                     	;# 
  4901  048C                     	;# 
  4902  048D                     	;# 
  4903  048E                     	;# 
  4904  048F                     	;# 
  4905  048F                     	;# 
  4906  0490                     	;# 
  4907  0491                     	;# 
  4908  0492                     	;# 
  4909  0492                     	;# 
  4910  0493                     	;# 
  4911  0494                     	;# 
  4912  0495                     	;# 
  4913  0495                     	;# 
  4914  0496                     	;# 
  4915  0497                     	;# 
  4916  0498                     	;# 
  4917  0499                     	;# 
  4918  049A                     	;# 
  4919  049B                     	;# 
  4920  049C                     	;# 
  4921  049D                     	;# 
  4922  050C                     	;# 
  4923  050C                     	;# 
  4924  050D                     	;# 
  4925  050E                     	;# 
  4926  050F                     	;# 
  4927  050F                     	;# 
  4928  0510                     	;# 
  4929  0511                     	;# 
  4930  0512                     	;# 
  4931  0512                     	;# 
  4932  0513                     	;# 
  4933  0514                     	;# 
  4934  0515                     	;# 
  4935  0515                     	;# 
  4936  0516                     	;# 
  4937  0517                     	;# 
  4938  0518                     	;# 
  4939  0519                     	;# 
  4940  051A                     	;# 
  4941  051B                     	;# 
  4942  051C                     	;# 
  4943  051D                     	;# 
  4944  058C                     	;# 
  4945  058C                     	;# 
  4946  058D                     	;# 
  4947  058E                     	;# 
  4948  058F                     	;# 
  4949  058F                     	;# 
  4950  0590                     	;# 
  4951  0591                     	;# 
  4952  0592                     	;# 
  4953  0593                     	;# 
  4954  060C                     	;# 
  4955  060D                     	;# 
  4956  060E                     	;# 
  4957  060F                     	;# 
  4958  0610                     	;# 
  4959  0611                     	;# 
  4960  0612                     	;# 
  4961  0613                     	;# 
  4962  0614                     	;# 
  4963  0616                     	;# 
  4964  0617                     	;# 
  4965  0618                     	;# 
  4966  0619                     	;# 
  4967  061A                     	;# 
  4968  061B                     	;# 
  4969  061C                     	;# 
  4970  061D                     	;# 
  4971  061E                     	;# 
  4972  068C                     	;# 
  4973  068D                     	;# 
  4974  068E                     	;# 
  4975  068F                     	;# 
  4976  0690                     	;# 
  4977  0691                     	;# 
  4978  0692                     	;# 
  4979  0693                     	;# 
  4980  0694                     	;# 
  4981  070C                     	;# 
  4982  070D                     	;# 
  4983  070E                     	;# 
  4984  070F                     	;# 
  4985  0710                     	;# 
  4986  0711                     	;# 
  4987  0712                     	;# 
  4988  0713                     	;# 
  4989  0714                     	;# 
  4990  0716                     	;# 
  4991  0717                     	;# 
  4992  0718                     	;# 
  4993  0719                     	;# 
  4994  071A                     	;# 
  4995  071B                     	;# 
  4996  071C                     	;# 
  4997  071D                     	;# 
  4998  071E                     	;# 
  4999  0796                     	;# 
  5000  0797                     	;# 
  5001  0798                     	;# 
  5002  0799                     	;# 
  5003  079A                     	;# 
  5004  079B                     	;# 
  5005  080C                     	;# 
  5006  080D                     	;# 
  5007  080E                     	;# 
  5008  080F                     	;# 
  5009  0810                     	;# 
  5010  0811                     	;# 
  5011  0812                     	;# 
  5012  0813                     	;# 
  5013  0814                     	;# 
  5014  081A                     	;# 
  5015  081B                     	;# 
  5016  081C                     	;# 
  5017  081D                     	;# 
  5018  081E                     	;# 
  5019  081F                     	;# 
  5020  088C                     	;# 
  5021  088D                     	;# 
  5022  088E                     	;# 
  5023  088F                     	;# 
  5024  0890                     	;# 
  5025  0891                     	;# 
  5026  0892                     	;# 
  5027  0893                     	;# 
  5028  0895                     	;# 
  5029  0896                     	;# 
  5030  0897                     	;# 
  5031  0898                     	;# 
  5032  0899                     	;# 
  5033  089A                     	;# 
  5034  089B                     	;# 
  5035  090C                     	;# 
  5036  090E                     	;# 
  5037  090F                     	;# 
  5038  091F                     	;# 
  5039  091F                     	;# 
  5040  098F                     	;# 
  5041  098F                     	;# 
  5042  0990                     	;# 
  5043  0991                     	;# 
  5044  0992                     	;# 
  5045  0993                     	;# 
  5046  0994                     	;# 
  5047  0995                     	;# 
  5048  0996                     	;# 
  5049  0997                     	;# 
  5050  0E0F                     	;# 
  5051  0E10                     	;# 
  5052  0E11                     	;# 
  5053  0E12                     	;# 
  5054  0E13                     	;# 
  5055  0E14                     	;# 
  5056  0E15                     	;# 
  5057  0E16                     	;# 
  5058  0E17                     	;# 
  5059  0E18                     	;# 
  5060  0E19                     	;# 
  5061  0E1A                     	;# 
  5062  0E1B                     	;# 
  5063  0E1C                     	;# 
  5064  0E1D                     	;# 
  5065  0E1E                     	;# 
  5066  0E1F                     	;# 
  5067  0E20                     	;# 
  5068  0E21                     	;# 
  5069  0E22                     	;# 
  5070  0E23                     	;# 
  5071  0E24                     	;# 
  5072  0E25                     	;# 
  5073  0E26                     	;# 
  5074  0E27                     	;# 
  5075  0E28                     	;# 
  5076  0E29                     	;# 
  5077  0E2A                     	;# 
  5078  0E2B                     	;# 
  5079  0E2C                     	;# 
  5080  0E2D                     	;# 
  5081  0E2E                     	;# 
  5082  0E2F                     	;# 
  5083  0E30                     	;# 
  5084  0E31                     	;# 
  5085  0E32                     	;# 
  5086  0E33                     	;# 
  5087  0E34                     	;# 
  5088  0E35                     	;# 
  5089  0E36                     	;# 
  5090  0E37                     	;# 
  5091  0E8F                     	;# 
  5092  0E90                     	;# 
  5093  0E91                     	;# 
  5094  0E92                     	;# 
  5095  0E93                     	;# 
  5096  0E94                     	;# 
  5097  0E95                     	;# 
  5098  0E96                     	;# 
  5099  0E97                     	;# 
  5100  0E9C                     	;# 
  5101  0E9D                     	;# 
  5102  0E9E                     	;# 
  5103  0EA1                     	;# 
  5104  0EA2                     	;# 
  5105  0EA3                     	;# 
  5106  0EA4                     	;# 
  5107  0EA5                     	;# 
  5108  0EA9                     	;# 
  5109  0EAA                     	;# 
  5110  0EAB                     	;# 
  5111  0EAC                     	;# 
  5112  0EB1                     	;# 
  5113  0EB2                     	;# 
  5114  0EB3                     	;# 
  5115  0EB8                     	;# 
  5116  0EB9                     	;# 
  5117  0EBA                     	;# 
  5118  0EBB                     	;# 
  5119  0EBC                     	;# 
  5120  0EBD                     	;# 
  5121  0EBE                     	;# 
  5122  0EC3                     	;# 
  5123  0EC5                     	;# 
  5124  0EC6                     	;# 
  5125  0EC7                     	;# 
  5126  0EC8                     	;# 
  5127  0EC9                     	;# 
  5128  0ECA                     	;# 
  5129  0ECB                     	;# 
  5130  0ECC                     	;# 
  5131  0F10                     	;# 
  5132  0F11                     	;# 
  5133  0F12                     	;# 
  5134  0F13                     	;# 
  5135  0F14                     	;# 
  5136  0F15                     	;# 
  5137  0F16                     	;# 
  5138  0F17                     	;# 
  5139  0F18                     	;# 
  5140  0F19                     	;# 
  5141  0F1A                     	;# 
  5142  0F1B                     	;# 
  5143  0F1C                     	;# 
  5144  0F1D                     	;# 
  5145  0F1E                     	;# 
  5146  0F1F                     	;# 
  5147  0F20                     	;# 
  5148  0F21                     	;# 
  5149  0F22                     	;# 
  5150  0F23                     	;# 
  5151  0F24                     	;# 
  5152  0F25                     	;# 
  5153  0F26                     	;# 
  5154  0F27                     	;# 
  5155  0F38                     	;# 
  5156  0F39                     	;# 
  5157  0F3A                     	;# 
  5158  0F3B                     	;# 
  5159  0F3C                     	;# 
  5160  0F3D                     	;# 
  5161  0F3E                     	;# 
  5162  0F3F                     	;# 
  5163  0F40                     	;# 
  5164  0F41                     	;# 
  5165  0F43                     	;# 
  5166  0F44                     	;# 
  5167  0F45                     	;# 
  5168  0F46                     	;# 
  5169  0F47                     	;# 
  5170  0F48                     	;# 
  5171  0F49                     	;# 
  5172  0F4A                     	;# 
  5173  0F4B                     	;# 
  5174  0F4C                     	;# 
  5175  0F4E                     	;# 
  5176  0F4F                     	;# 
  5177  0F50                     	;# 
  5178  0F51                     	;# 
  5179  0F52                     	;# 
  5180  0F53                     	;# 
  5181  0F54                     	;# 
  5182  0F55                     	;# 
  5183  0F56                     	;# 
  5184  0F57                     	;# 
  5185  0F65                     	;# 
  5186  0F68                     	;# 
  5187  0F69                     	;# 
  5188  0F6A                     	;# 
  5189  0F6B                     	;# 
  5190  0FE4                     	;# 
  5191  0FE5                     	;# 
  5192  0FE6                     	;# 
  5193  0FE7                     	;# 
  5194  0FE8                     	;# 
  5195  0FE9                     	;# 
  5196  0FEA                     	;# 
  5197  0FEB                     	;# 
  5198  0FED                     	;# 
  5199  0FEE                     	;# 
  5200  0FEF                     	;_Isamples
  5201                           
  5202                           	psect	idataBANK1
  5203  0004                     __pidataBANK1:	
  5204                           
  5205                           ;initializer for _batteryTemp
  5206  0004  34FA               	retlw	250
  5207  0005  3400               	retlw	0
  5208                           
  5209                           	psect	idataBANK2
  5210  1E0A                     __pidataBANK2:	
  5211                           
  5212                           ;initializer for _Ichannels
  5213  1E0A  3414               	retlw	20
  5214  1E0B  3400               	retlw	0
  5215  1E0C  3410               	retlw	16
  5216  1E0D  3400               	retlw	0
  5217  1E0E  3416               	retlw	22
  5218  1E0F  3400               	retlw	0
  5219  1E10  3412               	retlw	18
  5220  1E11  3400               	retlw	0
  5221                           
  5222                           ;initializer for _Vchannels
  5223  1E12  3415               	retlw	21
  5224  1E13  3400               	retlw	0
  5225  1E14  3411               	retlw	17
  5226  1E15  3400               	retlw	0
  5227  1E16  3417               	retlw	23
  5228  1E17  3400               	retlw	0
  5229  1E18  3413               	retlw	19
  5230  1E19  3400               	retlw	0
  5231                           
  5232                           	psect	stringtext
  5233  1000                     __pstringtext:	
  5234  1000                     _fonts:	
  5235  1000  3400               	retlw	0
  5236  1001  3400               	retlw	0
  5237  1002  3400               	retlw	0
  5238  1003  3400               	retlw	0
  5239  1004  344E               	retlw	78
  5240  1005  3400               	retlw	0
  5241  1006  3406               	retlw	6
  5242  1007  3400               	retlw	0
  5243  1008  3406               	retlw	6
  5244  1009  34FF               	retlw	255
  5245  100A  34FF               	retlw	255
  5246  100B  34FF               	retlw	255
  5247  100C  3448               	retlw	72
  5248  100D  34D6               	retlw	214
  5249  100E  3424               	retlw	36
  5250  100F  3412               	retlw	18
  5251  1010  3408               	retlw	8
  5252  1011  3424               	retlw	36
  5253  1012  34FF               	retlw	255
  5254  1013  34FF               	retlw	255
  5255  1014  34FF               	retlw	255
  5256  1015  3400               	retlw	0
  5257  1016  3406               	retlw	6
  5258  1017  3400               	retlw	0
  5259  1018  3438               	retlw	56
  5260  1019  3444               	retlw	68
  5261  101A  3482               	retlw	130
  5262  101B  3482               	retlw	130
  5263  101C  3444               	retlw	68
  5264  101D  3438               	retlw	56
  5265  101E  3414               	retlw	20
  5266  101F  3408               	retlw	8
  5267  1020  343E               	retlw	62
  5268  1021  3410               	retlw	16
  5269  1022  3438               	retlw	56
  5270  1023  3410               	retlw	16
  5271  1024  34A0               	retlw	160
  5272  1025  3460               	retlw	96
  5273  1026  3400               	retlw	0
  5274  1027  3410               	retlw	16
  5275  1028  3410               	retlw	16
  5276  1029  3410               	retlw	16
  5277  102A  3460               	retlw	96
  5278  102B  3460               	retlw	96
  5279  102C  3400               	retlw	0
  5280  102D  3460               	retlw	96
  5281  102E  3418               	retlw	24
  5282  102F  3406               	retlw	6
  5283  1030  347C               	retlw	124
  5284  1031  3442               	retlw	66
  5285  1032  347C               	retlw	124
  5286  1033  3444               	retlw	68
  5287  1034  347E               	retlw	126
  5288  1035  3440               	retlw	64
  5289  1036  3464               	retlw	100
  5290  1037  3452               	retlw	82
  5291  1038  344C               	retlw	76
  5292  1039  344A               	retlw	74
  5293  103A  344A               	retlw	74
  5294  103B  3434               	retlw	52
  5295  103C  3438               	retlw	56
  5296  103D  3424               	retlw	36
  5297  103E  347E               	retlw	126
  5298  103F  344E               	retlw	78
  5299  1040  344A               	retlw	74
  5300  1041  3432               	retlw	50
  5301  1042  343C               	retlw	60
  5302  1043  344A               	retlw	74
  5303  1044  3432               	retlw	50
  5304  1045  3462               	retlw	98
  5305  1046  341A               	retlw	26
  5306  1047  3406               	retlw	6
  5307  1048  3476               	retlw	118
  5308  1049  344A               	retlw	74
  5309  104A  3476               	retlw	118
  5310  104B  344C               	retlw	76
  5311  104C  3452               	retlw	82
  5312  104D  343C               	retlw	60
  5313  104E  346C               	retlw	108
  5314  104F  346C               	retlw	108
  5315  1050  3400               	retlw	0
  5316  1051  34AC               	retlw	172
  5317  1052  346C               	retlw	108
  5318  1053  3400               	retlw	0
  5319  1054  3410               	retlw	16
  5320  1055  3428               	retlw	40
  5321  1056  3444               	retlw	68
  5322  1057  3428               	retlw	40
  5323  1058  3428               	retlw	40
  5324  1059  3428               	retlw	40
  5325  105A  3444               	retlw	68
  5326  105B  3428               	retlw	40
  5327  105C  3410               	retlw	16
  5328  105D  3402               	retlw	2
  5329  105E  3459               	retlw	89
  5330  105F  3406               	retlw	6
  5331  1060  34FF               	retlw	255
  5332  1061  34FF               	retlw	255
  5333  1062  34FF               	retlw	255
  5334  1063  347C               	retlw	124
  5335  1064  3412               	retlw	18
  5336  1065  347C               	retlw	124
  5337  1066  347E               	retlw	126
  5338  1067  345A               	retlw	90
  5339  1068  3434               	retlw	52
  5340  1069  343C               	retlw	60
  5341  106A  3442               	retlw	66
  5342  106B  3442               	retlw	66
  5343  106C  347E               	retlw	126
  5344  106D  3442               	retlw	66
  5345  106E  343C               	retlw	60
  5346  106F  347E               	retlw	126
  5347  1070  344A               	retlw	74
  5348  1071  3442               	retlw	66
  5349  1072  347E               	retlw	126
  5350  1073  340A               	retlw	10
  5351  1074  340A               	retlw	10
  5352  1075  343C               	retlw	60
  5353  1076  3452               	retlw	82
  5354  1077  3434               	retlw	52
  5355  1078  347E               	retlw	126
  5356  1079  3408               	retlw	8
  5357  107A  347E               	retlw	126
  5358  107B  3442               	retlw	66
  5359  107C  347E               	retlw	126
  5360  107D  3442               	retlw	66
  5361  107E  3430               	retlw	48
  5362  107F  3440               	retlw	64
  5363  1080  343E               	retlw	62
  5364  1081  347E               	retlw	126
  5365  1082  3418               	retlw	24
  5366  1083  3466               	retlw	102
  5367  1084  347E               	retlw	126
  5368  1085  3440               	retlw	64
  5369  1086  3440               	retlw	64
  5370  1087  347E               	retlw	126
  5371  1088  341C               	retlw	28
  5372  1089  347E               	retlw	126
  5373  108A  347E               	retlw	126
  5374  108B  3402               	retlw	2
  5375  108C  347E               	retlw	126
  5376  108D  343C               	retlw	60
  5377  108E  3442               	retlw	66
  5378  108F  343C               	retlw	60
  5379  1090  347E               	retlw	126
  5380  1091  3412               	retlw	18
  5381  1092  340C               	retlw	12
  5382  1093  347E               	retlw	126
  5383  1094  3462               	retlw	98
  5384  1095  34FE               	retlw	254
  5385  1096  347E               	retlw	126
  5386  1097  3432               	retlw	50
  5387  1098  344E               	retlw	78
  5388  1099  3444               	retlw	68
  5389  109A  344A               	retlw	74
  5390  109B  3432               	retlw	50
  5391  109C  3402               	retlw	2
  5392  109D  347E               	retlw	126
  5393  109E  3402               	retlw	2
  5394  109F  347E               	retlw	126
  5395  10A0  3440               	retlw	64
  5396  10A1  347E               	retlw	126
  5397  10A2  343E               	retlw	62
  5398  10A3  3440               	retlw	64
  5399  10A4  343E               	retlw	62
  5400  10A5  347E               	retlw	126
  5401  10A6  3438               	retlw	56
  5402  10A7  347E               	retlw	126
  5403  10A8  3466               	retlw	102
  5404  10A9  3418               	retlw	24
  5405  10AA  3466               	retlw	102
  5406  10AB  340E               	retlw	14
  5407  10AC  3470               	retlw	112
  5408  10AD  340E               	retlw	14
  5409  10AE  3462               	retlw	98
  5410  10AF  345A               	retlw	90
  5411  10B0  3446               	retlw	70
  5412  10B1  3400               	retlw	0
  5413  10B2  347E               	retlw	126
  5414  10B3  3442               	retlw	66
  5415  10B4  3406               	retlw	6
  5416  10B5  3418               	retlw	24
  5417  10B6  3460               	retlw	96
  5418  10B7  3442               	retlw	66
  5419  10B8  347E               	retlw	126
  5420  10B9  3400               	retlw	0
  5421  10BA  3404               	retlw	4
  5422  10BB  3402               	retlw	2
  5423  10BC  3404               	retlw	4
  5424  10BD  3440               	retlw	64
  5425  10BE  3440               	retlw	64
  5426  10BF  3440               	retlw	64
  5427  10C0  3400               	retlw	0
  5428  10C1  3402               	retlw	2
  5429  10C2  3404               	retlw	4
  5430  10C3  3474               	retlw	116
  5431  10C4  3454               	retlw	84
  5432  10C5  3478               	retlw	120
  5433  10C6  347E               	retlw	126
  5434  10C7  3448               	retlw	72
  5435  10C8  3430               	retlw	48
  5436  10C9  3430               	retlw	48
  5437  10CA  3448               	retlw	72
  5438  10CB  3448               	retlw	72
  5439  10CC  3430               	retlw	48
  5440  10CD  3448               	retlw	72
  5441  10CE  347E               	retlw	126
  5442  10CF  3438               	retlw	56
  5443  10D0  3454               	retlw	84
  5444  10D1  3458               	retlw	88
  5445  10D2  347C               	retlw	124
  5446  10D3  340A               	retlw	10
  5447  10D4  3402               	retlw	2
  5448  10D5  3498               	retlw	152
  5449  10D6  34A4               	retlw	164
  5450  10D7  347C               	retlw	124
  5451  10D8  347E               	retlw	126
  5452  10D9  3408               	retlw	8
  5453  10DA  3470               	retlw	112
  5454  10DB  3448               	retlw	72
  5455  10DC  347A               	retlw	122
  5456  10DD  3440               	retlw	64
  5457  10DE  3488               	retlw	136
  5458  10DF  34FA               	retlw	250
  5459  10E0  3400               	retlw	0
  5460  10E1  347E               	retlw	126
  5461  10E2  3418               	retlw	24
  5462  10E3  3464               	retlw	100
  5463  10E4  3442               	retlw	66
  5464  10E5  347E               	retlw	126
  5465  10E6  3440               	retlw	64
  5466  10E7  347C               	retlw	124
  5467  10E8  3438               	retlw	56
  5468  10E9  347C               	retlw	124
  5469  10EA  347C               	retlw	124
  5470  10EB  3404               	retlw	4
  5471  10EC  3478               	retlw	120
  5472  10ED  3438               	retlw	56
  5473  10EE  3444               	retlw	68
  5474  10EF  3438               	retlw	56
  5475  10F0  34FC               	retlw	252
  5476  10F1  3424               	retlw	36
  5477  10F2  3418               	retlw	24
  5478  10F3  3418               	retlw	24
  5479  10F4  3424               	retlw	36
  5480  10F5  34FC               	retlw	252
  5481  10F6  3478               	retlw	120
  5482  10F7  3404               	retlw	4
  5483  10F8  3404               	retlw	4
  5484  10F9  3448               	retlw	72
  5485  10FA  3454               	retlw	84
  5486  10FB  3424               	retlw	36
  5487  10FC  3404               	retlw	4
  5488  10FD  343E               	retlw	62
  5489  10FE  3444               	retlw	68
  5490  10FF  347C               	retlw	124
  5491  1100  3440               	retlw	64
  5492  1101  347C               	retlw	124
  5493  1102  343C               	retlw	60
  5494  1103  3440               	retlw	64
  5495  1104  343C               	retlw	60
  5496  1105  347C               	retlw	124
  5497  1106  3430               	retlw	48
  5498  1107  347C               	retlw	124
  5499  1108  346C               	retlw	108
  5500  1109  3410               	retlw	16
  5501  110A  346C               	retlw	108
  5502  110B  349C               	retlw	156
  5503  110C  34A0               	retlw	160
  5504  110D  347C               	retlw	124
  5505  110E  3464               	retlw	100
  5506  110F  3454               	retlw	84
  5507  1110  344C               	retlw	76
  5508  1111  340C               	retlw	12
  5509  1112  3412               	retlw	18
  5510  1113  340C               	retlw	12
  5511  1114  34FF               	retlw	255
  5512  1115  34FF               	retlw	255
  5513  1116  34FF               	retlw	255
  5514  1117  34FF               	retlw	255
  5515  1118  34FF               	retlw	255
  5516  1119  34FF               	retlw	255
  5517  111A  34FF               	retlw	255
  5518  111B  34FF               	retlw	255
  5519  111C  34FF               	retlw	255
  5520  111D  34FF               	retlw	255
  5521  111E  34FF               	retlw	255
  5522  111F  34FF               	retlw	255
  5523  1120  34FF               	retlw	255
  5524  1121  34FF               	retlw	255
  5525  1122  34FF               	retlw	255
  5526  1123  34FF               	retlw	255
  5527  1124  34FF               	retlw	255
  5528  1125  34FF               	retlw	255
  5529  1126  34FC               	retlw	252
  5530  1127  3440               	retlw	64
  5531  1128  347C               	retlw	124
  5532  1129  34FF               	retlw	255
  5533  112A  34FF               	retlw	255
  5534  112B  34FF               	retlw	255
  5535  112C  34FF               	retlw	255
  5536  112D  34FF               	retlw	255
  5537  112E  34FF               	retlw	255
  5538  112F                     __end_of_fonts:	
  5539  112F                     log@coeff:	
  5540  112F  3400               	retlw	0
  5541  1130  3400               	retlw	0
  5542  1131  3400               	retlw	0
  5543  1132  3400               	retlw	0
  5544  1133  3480               	retlw	128
  5545  1134  343F               	retlw	63
  5546  1135  34F0               	retlw	240
  5547  1136  34FF               	retlw	255
  5548  1137  34BE               	retlw	190
  5549  1138  34E2               	retlw	226
  5550  1139  34A9               	retlw	169
  5551  113A  343E               	retlw	62
  5552  113B  3483               	retlw	131
  5553  113C  3476               	retlw	118
  5554  113D  34BE               	retlw	190
  5555  113E  34AE               	retlw	174
  5556  113F  342B               	retlw	43
  5557  1140  343E               	retlw	62
  5558  1141  343C               	retlw	60
  5559  1142  34C3               	retlw	195
  5560  1143  34BD               	retlw	189
  5561  1144  34D2               	retlw	210
  5562  1145  3413               	retlw	19
  5563  1146  343D               	retlw	61
  5564  1147  3478               	retlw	120
  5565  1148  34D3               	retlw	211
  5566  1149  34BB               	retlw	187
  5567  114A                     __end_oflog@coeff:	
  5568  0016                     _LATA	set	22
  5569  0016                     _LATAbits	set	22
  5570  0017                     _LATB	set	23
  5571  0018                     _LATC	set	24
  5572  0011                     _TRISA	set	17
  5573  0011                     _TRISAbits	set	17
  5574  0012                     _TRISB	set	18
  5575  0013                     _TRISC	set	19
  5576  005F                     _GIE	set	95
  5577  00B5                     _LATA5	set	181
  5578  006A                     _RB2	set	106
  5579  009D                     _ADACQ	set	157
  5580  0099                     _ADACT	set	153
  5581  009B                     _ADCAP	set	155
  5582  0098                     _ADCLK	set	152
  5583  0093                     _ADCON0	set	147
  5584  0093                     _ADCON0bits	set	147
  5585  0094                     _ADCON1	set	148
  5586  0095                     _ADCON2	set	149
  5587  0096                     _ADCON3	set	150
  5588  009E                     _ADPCH	set	158
  5589  009C                     _ADPRE	set	156
  5590  009A                     _ADREF	set	154
  5591  008D                     _ADRESH	set	141
  5592  008C                     _ADRESL	set	140
  5593  0097                     _ADSTAT	set	151
  5594  010F                     _ADLTHH	set	271
  5595  010E                     _ADLTHL	set	270
  5596  010D                     _ADRPT	set	269
  5597  0113                     _ADSTPTH	set	275
  5598  0112                     _ADSTPTL	set	274
  5599  0111                     _ADUTHH	set	273
  5600  0110                     _ADUTHL	set	272
  5601  021E                     _CCPTMRS0bits	set	542
  5602  021F                     _CCPTMRS1bits	set	543
  5603  0290                     _T2CLKCON	set	656
  5604  028E                     _T2CON	set	654
  5605  028E                     _T2CONbits	set	654
  5606  028F                     _T2HLT	set	655
  5607  028D                     _T2PR	set	653
  5608  0291                     _T2RST	set	657
  5609  028C                     _T2TMR	set	652
  5610  0296                     _T4CLKCON	set	662
  5611  0294                     _T4CON	set	660
  5612  0294                     _T4CONbits	set	660
  5613  0295                     _T4HLT	set	661
  5614  0293                     _T4PR	set	659
  5615  0297                     _T4RST	set	663
  5616  0292                     _T4TMR	set	658
  5617  030E                     _CCP1CONbits	set	782
  5618  030D                     _CCPR1H	set	781
  5619  030C                     _CCPR1L	set	780
  5620  038E                     _PWM6CON	set	910
  5621  038D                     _PWM6DCH	set	909
  5622  038C                     _PWM6DCL	set	908
  5623  0392                     _PWM7CON	set	914
  5624  0391                     _PWM7DCH	set	913
  5625  0390                     _PWM7DCL	set	912
  5626  0716                     _PIE0bits	set	1814
  5627  0710                     _PIR4bits	set	1808
  5628  088D                     _OSCCON1	set	2189
  5629  088F                     _OSCCON3	set	2191
  5630  0891                     _OSCEN	set	2193
  5631  0893                     _OSCFRQ	set	2195
  5632  0892                     _OSCTUNE	set	2194
  5633  090C                     _FVRCON	set	2316
  5634  0E8F                     _PPSLOCK	set	3727
  5635  0E8F                     _PPSLOCKbits	set	3727
  5636  0F38                     _ANSELA	set	3896
  5637  0F43                     _ANSELB	set	3907
  5638  0F4E                     _ANSELC	set	3918
  5639  0F16                     _RA6PPS	set	3862
  5640  0F17                     _RA7PPS	set	3863
  5641  0F18                     _RB0PPS	set	3864
  5642  0F39                     _WPUA	set	3897
  5643  0F44                     _WPUB	set	3908
  5644  0F4F                     _WPUC	set	3919
  5645  0F65                     _WPUE	set	3941
  5646                           
  5647                           ; #config settings
  5648  0000                     
  5649                           	psect	cinit
  5650  07B0                     start_initialization:	
  5651  07B0                     __initialization:		;BIGRAM
  5652                           
  5653                           ; Initialize objects allocated to BANK1
  5654  07B0  0021               	movlb	1	; select bank1
  5655  07B1  3180  2004  3187   	fcall	__pidataBANK1	;fetch initializer
  5656  07B4  00ED               	movwf	__pdataBANK1& (0+127)
  5657  07B5  3180  2005  3187   	fcall	__pidataBANK1+1	;fetch initializer
  5658  07B8  00EE               	movwf	(__pdataBANK1+1)& (0+127)
  5659                           
  5660                           ; Initialize objects allocated to BANK2
  5661  07B9  300A               	movlw	low __pidataBANK2
  5662  07BA  0084               	movwf	4
  5663  07BB  309E               	movlw	(high __pidataBANK2)| (0+128)
  5664  07BC  0085               	movwf	5
  5665  07BD  3059               	movlw	low __pdataBANK2
  5666  07BE  0086               	movwf	6
  5667  07BF  3001               	movlw	high __pdataBANK2
  5668  07C0  0087               	movwf	7
  5669  07C1  3000               	movlw	0
  5670  07C2  00FF               	movwf	btemp+1
  5671  07C3  3010               	movlw	16
  5672  07C4  319D  25FE  3187   	fcall	init_ram
  5673                           
  5674                           ; Clear objects allocated to BIGRAM
  5675  07C7  3060               	movlw	low (0+8800)
  5676  07C8  0084               	movwf	4
  5677  07C9  3022               	movlw	high (0+8800)
  5678  07CA  0085               	movwf	5
  5679  07CB  3090               	movlw	144
  5680  07CC  00FE               	movwf	btemp
  5681  07CD  3001               	movlw	1
  5682  07CE  00FF               	movwf	btemp+1
  5683  07CF  319D  25F2  3187   	fcall	clear_ram0
  5684                           
  5685                           ; Clear objects allocated to BANK0
  5686  07D2  305E               	movlw	low __pbssBANK0
  5687  07D3  0084               	movwf	4
  5688  07D4  3000               	movlw	high __pbssBANK0
  5689  07D5  0085               	movwf	5
  5690  07D6  3011               	movlw	17
  5691  07D7  00FE               	movwf	btemp
  5692  07D8  3000               	movlw	0
  5693  07D9  00FF               	movwf	btemp+1
  5694  07DA  319D  25F2  3187   	fcall	clear_ram0
  5695                           
  5696                           ; Clear objects allocated to BANK1
  5697  07DD  30A0               	movlw	low __pbssBANK1
  5698  07DE  0084               	movwf	4
  5699  07DF  3000               	movlw	high __pbssBANK1
  5700  07E0  0085               	movwf	5
  5701  07E1  3028               	movlw	40
  5702  07E2  00FE               	movwf	btemp
  5703  07E3  3000               	movlw	0
  5704  07E4  00FF               	movwf	btemp+1
  5705  07E5  319D  25F2  3187   	fcall	clear_ram0
  5706                           
  5707                           ; Clear objects allocated to BANK2
  5708  07E8  3020               	movlw	low __pbssBANK2
  5709  07E9  0084               	movwf	4
  5710  07EA  3001               	movlw	high __pbssBANK2
  5711  07EB  0085               	movwf	5
  5712  07EC  3039               	movlw	57
  5713  07ED  00FE               	movwf	btemp
  5714  07EE  3000               	movlw	0
  5715  07EF  00FF               	movwf	btemp+1
  5716  07F0  319D  25F2  3187   	fcall	clear_ram0
  5717                           
  5718                           ; Clear objects allocated to BANK3
  5719  07F3  30A0               	movlw	low __pbssBANK3
  5720  07F4  0084               	movwf	4
  5721  07F5  3001               	movlw	high __pbssBANK3
  5722  07F6  0085               	movwf	5
  5723  07F7  3028               	movlw	40
  5724  07F8  00FE               	movwf	btemp
  5725  07F9  3000               	movlw	0
  5726  07FA  00FF               	movwf	btemp+1
  5727  07FB  319D  25F2         	fcall	clear_ram0
  5728  07FD                     end_of_initialization:	
  5729                           ;End of C runtime variable initialization code
  5730                           
  5731  07FD                     __end_of__initialization:	
  5732  07FD  0020               	movlb	0
  5733  07FE  3180  283D         	ljmp	_main	;jump to C main() function
  5734                           
  5735                           	psect	bssBANK0
  5736  005E                     __pbssBANK0:	
  5737  005E                     _IminCount:	
  5738  005E                     	ds	4
  5739  0062                     _IsampleIndex:	
  5740  0062                     	ds	2
  5741  0064                     _VsampleIndex:	
  5742  0064                     	ds	2
  5743  0066                     _floatCount:	
  5744  0066                     	ds	2
  5745  0068                     _readButtons:	
  5746  0068                     	ds	2
  5747  006A                     _button:	
  5748  006A                     	ds	1
  5749  006B                     _j:	
  5750  006B                     	ds	1
  5751  006C                     _lastButton:	
  5752  006C                     	ds	1
  5753  006D                     _otherState:	
  5754  006D                     	ds	1
  5755  006E                     _x:	
  5756  006E                     	ds	1
  5757                           
  5758                           	psect	bssBANK1
  5759  00A0                     __pbssBANK1:	
  5760  00A0                     _current:	
  5761  00A0                     	ds	8
  5762  00A8                     _voltage:	
  5763  00A8                     	ds	8
  5764  00B0                     _Iref:	
  5765  00B0                     	ds	4
  5766  00B4                     _Vref:	
  5767  00B4                     	ds	4
  5768  00B8                     _stateCounter:	
  5769  00B8                     	ds	4
  5770  00BC                     _Imode:	
  5771  00BC                     	ds	2
  5772  00BE                     _Iout:	
  5773  00BE                     	ds	2
  5774  00C0                     _VHoldMode:	
  5775  00C0                     	ds	2
  5776  00C2                     _batteryState:	
  5777  00C2                     	ds	2
  5778  00C4                     _cc_cv:	
  5779  00C4                     	ds	2
  5780  00C6                     _errno:	
  5781  00C6                     	ds	2
  5782                           
  5783                           	psect	dataBANK1
  5784  00ED                     __pdataBANK1:	
  5785  00ED                     _batteryTemp:	
  5786  00ED                     	ds	2
  5787                           
  5788                           	psect	bssBANK2
  5789  0120                     __pbssBANK2:	
  5790  0120                     _Itotals:	
  5791  0120                     	ds	16
  5792  0130                     _Vtotals:	
  5793  0130                     	ds	16
  5794  0140                     _Ianalogs:	
  5795  0140                     	ds	8
  5796  0148                     _Vanalogs:	
  5797  0148                     	ds	8
  5798  0150                     LCDWriteInt@F13692:	
  5799  0150                     	ds	5
  5800  0155                     _Imin:	
  5801  0155                     	ds	4
  5802                           
  5803                           	psect	dataBANK2
  5804  0159                     __pdataBANK2:	
  5805  0159                     _Ichannels:	
  5806  0159                     	ds	8
  5807  0161                     _Vchannels:	
  5808  0161                     	ds	8
  5809                           
  5810                           	psect	bssBANK3
  5811  01A0                     __pbssBANK3:	
  5812  01A0                     _Vsamples:	
  5813  01A0                     	ds	40
  5814                           
  5815                           	psect	inittext
  5816  1DFE                     init_ram:	
  5817  1DFE  00FE               	movwf	126
  5818  1DFF                     initloop:	
  5819  1DFF  0012               	moviw fsr0++
  5820  1E00  001E               	movwi fsr1++
  5821  1E01  3001               	movlw	1
  5822  1E02  02FE               	subwf	126,f
  5823  1E03  3000               	movlw	0
  5824  1E04  3BFF               	subwfb	127,f
  5825  1E05  087F               	movf	127,w
  5826  1E06  047E               	iorwf	126,w
  5827  1E07  1903               	btfsc	3,2
  5828  1E08  3400               	retlw	0
  5829  1E09  2DFF               	goto	initloop
  5830                           
  5831                           	psect	clrtext
  5832  1DF2                     clear_ram0:	
  5833                           ;	Called with FSR0 containing the base address, and
  5834                           ;	btemp/btemp+1 has the size to clear
  5835                           
  5836  1DF2  0064               	clrwdt	;clear the watchdog before getting into this loop
  5837  1DF3                     clrloop0:	
  5838  1DF3  0180               	clrf	0	;clear RAM location pointed to by FSR
  5839  1DF4  3101               	addfsr 0,1
  5840  1DF5  3001               	movlw	1
  5841  1DF6  02FE               	subwf	126,f
  5842  1DF7  3000               	movlw	0
  5843  1DF8  3BFF               	subwfb	127,f
  5844  1DF9  087F               	movf	127,w
  5845  1DFA  047E               	iorwf	126,w
  5846  1DFB  1903               	btfsc	3,2
  5847  1DFC  3400               	retlw	0	;all done for this memory range, return
  5848  1DFD  2DF3               	goto	clrloop0	;have we reached the end yet?
  5849                           
  5850                           	psect	cstackBANK1
  5851  00C8                     __pcstackBANK1:	
  5852  00C8                     main@efficiency:	
  5853                           
  5854                           ; 3 bytes @ 0x0
  5855  00C8                     	ds	3
  5856  00CB                     main@fastLoop:	
  5857                           
  5858                           ; 1 bytes @ 0x3
  5859  00CB                     	ds	1
  5860  00CC                     main@faultCount:	
  5861                           
  5862                           ; 2 bytes @ 0x4
  5863  00CC                     	ds	2
  5864  00CE                     main@faultNotReset:	
  5865                           
  5866                           ; 2 bytes @ 0x6
  5867  00CE                     	ds	2
  5868  00D0                     main@tempVoltage:	
  5869                           
  5870                           ; 8 bytes @ 0x8
  5871  00D0                     	ds	8
  5872  00D8                     main@displayRefresh:	
  5873                           
  5874                           ; 1 bytes @ 0x10
  5875  00D8                     	ds	1
  5876  00D9                     main@slowLoop:	
  5877                           
  5878                           ; 1 bytes @ 0x11
  5879  00D9                     	ds	1
  5880  00DA                     main@MPPT0:	
  5881                           
  5882                           ; 2 bytes @ 0x12
  5883  00DA                     	ds	2
  5884  00DC                     main@MPPT1:	
  5885                           
  5886                           ; 2 bytes @ 0x14
  5887  00DC                     	ds	2
  5888  00DE                     main@largerIOut:	
  5889                           
  5890                           ; 2 bytes @ 0x16
  5891  00DE                     	ds	2
  5892  00E0                     main@menuButton:	
  5893                           
  5894                           ; 1 bytes @ 0x18
  5895  00E0                     	ds	1
  5896  00E1                     main@dutyCycle1:	
  5897                           
  5898                           ; 2 bytes @ 0x19
  5899  00E1                     	ds	2
  5900  00E3                     main@tempFanOutput:	
  5901                           
  5902                           ; 2 bytes @ 0x1B
  5903  00E3                     	ds	2
  5904  00E5                     _main$1299:	
  5905                           
  5906                           ; 3 bytes @ 0x1D
  5907  00E5                     	ds	3
  5908  00E8                     main@dutyCycle6:	
  5909                           
  5910                           ; 2 bytes @ 0x20
  5911  00E8                     	ds	2
  5912  00EA                     main@dutyCycle7:	
  5913                           
  5914                           ; 2 bytes @ 0x22
  5915  00EA                     	ds	2
  5916  00EC                     main@j:	
  5917                           
  5918                           ; 1 bytes @ 0x24
  5919  00EC                     	ds	1
  5920                           
  5921                           	psect	cstackCOMMON
  5922  0070                     __pcstackCOMMON:	
  5923  0070                     ?_SYSTEM_Initialize:	
  5924  0070                     ?_LCDClear:	
  5925                           ; 1 bytes @ 0x0
  5926                           
  5927  0070                     ?_PWM6_LoadDutyValue:	
  5928                           ; 1 bytes @ 0x0
  5929                           
  5930  0070                     ?_PWM7_LoadDutyValue:	
  5931                           ; 1 bytes @ 0x0
  5932                           
  5933  0070                     ?_readButton:	
  5934                           ; 1 bytes @ 0x0
  5935                           
  5936  0070                     ?_LCDInit:	
  5937                           ; 1 bytes @ 0x0
  5938                           
  5939  0070                     ?_PWM1_LoadDutyValue:	
  5940                           ; 1 bytes @ 0x0
  5941                           
  5942  0070                     ?_Battery_State_Machine:	
  5943                           ; 1 bytes @ 0x0
  5944                           
  5945  0070                     ?_LCDWriteCharacter:	
  5946                           ; 1 bytes @ 0x0
  5947                           
  5948  0070                     ?_cc_cv_mode:	
  5949                           ; 1 bytes @ 0x0
  5950                           
  5951  0070                     ?_calculateCurrent0:	
  5952                           ; 1 bytes @ 0x0
  5953                           
  5954  0070                     ?_calculateCurrent2:	
  5955                           ; 1 bytes @ 0x0
  5956                           
  5957  0070                     ??_calculateCurrent2:	
  5958                           ; 1 bytes @ 0x0
  5959                           
  5960  0070                     ?_calculateCurrent3:	
  5961                           ; 1 bytes @ 0x0
  5962                           
  5963  0070                     ?_LCDWrite:	
  5964                           ; 1 bytes @ 0x0
  5965                           
  5966  0070                     ?_OSCILLATOR_Initialize:	
  5967                           ; 1 bytes @ 0x0
  5968                           
  5969  0070                     ??_OSCILLATOR_Initialize:	
  5970                           ; 1 bytes @ 0x0
  5971                           
  5972  0070                     ?_TMR2_Initialize:	
  5973                           ; 1 bytes @ 0x0
  5974                           
  5975  0070                     ??_TMR2_Initialize:	
  5976                           ; 1 bytes @ 0x0
  5977                           
  5978  0070                     ?_TMR4_Initialize:	
  5979                           ; 1 bytes @ 0x0
  5980                           
  5981  0070                     ??_TMR4_Initialize:	
  5982                           ; 1 bytes @ 0x0
  5983                           
  5984  0070                     ?_main:	
  5985                           ; 1 bytes @ 0x0
  5986                           
  5987  0070                     ?_ADC_Initialize:	
  5988                           ; 1 bytes @ 0x0
  5989                           
  5990  0070                     ??_ADC_Initialize:	
  5991                           ; 1 bytes @ 0x0
  5992                           
  5993  0070                     ?_Init_Battery_State_Machine:	
  5994                           ; 1 bytes @ 0x0
  5995                           
  5996  0070                     ?_PIN_MANAGER_Initialize:	
  5997                           ; 1 bytes @ 0x0
  5998                           
  5999  0070                     ??_PIN_MANAGER_Initialize:	
  6000                           ; 1 bytes @ 0x0
  6001                           
  6002  0070                     ?_PWM_Initialize:	
  6003                           ; 1 bytes @ 0x0
  6004                           
  6005  0070                     ??_PWM_Initialize:	
  6006                           ; 1 bytes @ 0x0
  6007                           
  6008  0070                     ?___bmul:	
  6009                           ; 1 bytes @ 0x0
  6010                           
  6011  0070                     ?_ADCRead:	
  6012                           ; 1 bytes @ 0x0
  6013                           
  6014  0070                     ?___wmul:	
  6015                           ; 2 bytes @ 0x0
  6016                           
  6017  0070                     ?___awdiv:	
  6018                           ; 2 bytes @ 0x0
  6019                           
  6020  0070                     ?___lwmod:	
  6021                           ; 2 bytes @ 0x0
  6022                           
  6023  0070                     ?___ftpack:	
  6024                           ; 2 bytes @ 0x0
  6025                           
  6026  0070                     ?_frexp:	
  6027                           ; 3 bytes @ 0x0
  6028                           
  6029  0070                     ?___aldiv:	
  6030                           ; 3 bytes @ 0x0
  6031                           
  6032  0070                     LCDWrite@data:	
  6033                           ; 4 bytes @ 0x0
  6034                           
  6035  0070                     PIN_MANAGER_Initialize@state:	
  6036                           ; 1 bytes @ 0x0
  6037                           
  6038  0070                     ___bmul@multiplicand:	
  6039                           ; 1 bytes @ 0x0
  6040                           
  6041  0070                     PWM6_LoadDutyValue@dutyCycle6:	
  6042                           ; 1 bytes @ 0x0
  6043                           
  6044  0070                     PWM7_LoadDutyValue@dutyCycle7:	
  6045                           ; 2 bytes @ 0x0
  6046                           
  6047  0070                     PWM1_LoadDutyValue@dutyCycle1:	
  6048                           ; 2 bytes @ 0x0
  6049                           
  6050  0070                     ___wmul@multiplier:	
  6051                           ; 2 bytes @ 0x0
  6052                           
  6053  0070                     ___awdiv@divisor:	
  6054                           ; 2 bytes @ 0x0
  6055                           
  6056  0070                     ___lwmod@divisor:	
  6057                           ; 2 bytes @ 0x0
  6058                           
  6059  0070                     ___ftpack@arg:	
  6060                           ; 2 bytes @ 0x0
  6061                           
  6062  0070                     frexp@value:	
  6063                           ; 3 bytes @ 0x0
  6064                           
  6065  0070                     ___aldiv@divisor:	
  6066                           ; 3 bytes @ 0x0
  6067                           
  6068                           
  6069                           ; 4 bytes @ 0x0
  6070  0070                     	ds	1
  6071  0071                     ??_LCDWrite:	
  6072  0071                     ??___bmul:	
  6073                           ; 1 bytes @ 0x1
  6074                           
  6075                           
  6076                           ; 1 bytes @ 0x1
  6077  0071                     	ds	1
  6078  0072                     ??_PWM6_LoadDutyValue:	
  6079  0072                     ??_PWM7_LoadDutyValue:	
  6080                           ; 1 bytes @ 0x2
  6081                           
  6082  0072                     ??_PWM1_LoadDutyValue:	
  6083                           ; 1 bytes @ 0x2
  6084                           
  6085  0072                     LCDWrite@data_or_command:	
  6086                           ; 1 bytes @ 0x2
  6087                           
  6088  0072                     ___bmul@product:	
  6089                           ; 1 bytes @ 0x2
  6090                           
  6091  0072                     ___wmul@multiplicand:	
  6092                           ; 1 bytes @ 0x2
  6093                           
  6094  0072                     ___awdiv@dividend:	
  6095                           ; 2 bytes @ 0x2
  6096                           
  6097  0072                     ___lwmod@dividend:	
  6098                           ; 2 bytes @ 0x2
  6099                           
  6100                           
  6101                           ; 2 bytes @ 0x2
  6102  0072                     	ds	1
  6103  0073                     ??_ADCRead:	
  6104  0073                     ADCRead@channel:	
  6105                           ; 1 bytes @ 0x3
  6106                           
  6107  0073                     LCDWrite@d:	
  6108                           ; 1 bytes @ 0x3
  6109                           
  6110  0073                     ___bmul@multiplier:	
  6111                           ; 1 bytes @ 0x3
  6112                           
  6113  0073                     ___ftpack@exp:	
  6114                           ; 1 bytes @ 0x3
  6115                           
  6116  0073                     frexp@eptr:	
  6117                           ; 1 bytes @ 0x3
  6118                           
  6119                           
  6120                           ; 1 bytes @ 0x3
  6121  0073                     	ds	1
  6122  0074                     ??_readButton:	
  6123  0074                     ??_frexp:	
  6124                           ; 1 bytes @ 0x4
  6125                           
  6126  0074                     ??___wmul:	
  6127                           ; 1 bytes @ 0x4
  6128                           
  6129  0074                     ??___awdiv:	
  6130                           ; 1 bytes @ 0x4
  6131                           
  6132  0074                     ??___lwmod:	
  6133                           ; 1 bytes @ 0x4
  6134                           
  6135  0074                     LCDWrite@i:	
  6136                           ; 1 bytes @ 0x4
  6137                           
  6138  0074                     ___ftpack@sign:	
  6139                           ; 1 bytes @ 0x4
  6140                           
  6141  0074                     ___wmul@product:	
  6142                           ; 1 bytes @ 0x4
  6143                           
  6144  0074                     ___aldiv@dividend:	
  6145                           ; 2 bytes @ 0x4
  6146                           
  6147                           
  6148                           ; 4 bytes @ 0x4
  6149  0074                     	ds	1
  6150  0075                     ??_LCDInit:	
  6151  0075                     ?_gotoXY:	
  6152                           ; 1 bytes @ 0x5
  6153                           
  6154  0075                     ??___ftpack:	
  6155                           ; 1 bytes @ 0x5
  6156                           
  6157  0075                     gotoXY@y:	
  6158                           ; 1 bytes @ 0x5
  6159                           
  6160  0075                     ___awdiv@counter:	
  6161                           ; 1 bytes @ 0x5
  6162                           
  6163  0075                     ___lwmod@counter:	
  6164                           ; 1 bytes @ 0x5
  6165                           
  6166                           
  6167                           ; 1 bytes @ 0x5
  6168  0075                     	ds	1
  6169  0076                     ??_gotoXY:	
  6170  0076                     ??_LCDWriteCharacter:	
  6171                           ; 1 bytes @ 0x6
  6172                           
  6173  0076                     ___awdiv@sign:	
  6174                           ; 1 bytes @ 0x6
  6175                           
  6176                           
  6177                           ; 1 bytes @ 0x6
  6178  0076                     	ds	1
  6179  0077                     gotoXY@x:	
  6180  0077                     ___awdiv@quotient:	
  6181                           ; 1 bytes @ 0x7
  6182                           
  6183                           
  6184                           ; 2 bytes @ 0x7
  6185  0077                     	ds	1
  6186  0078                     ??_LCDClear:	
  6187  0078                     ??___aldiv:	
  6188                           ; 1 bytes @ 0x8
  6189                           
  6190                           
  6191                           ; 1 bytes @ 0x8
  6192  0078                     	ds	1
  6193  0079                     ?___awtoft:	
  6194  0079                     LCDWriteCharacter@character:	
  6195                           ; 3 bytes @ 0x9
  6196                           
  6197  0079                     readIAnalog@analog_channel:	
  6198                           ; 1 bytes @ 0x9
  6199                           
  6200  0079                     readVAnalog@analog_channel:	
  6201                           ; 2 bytes @ 0x9
  6202                           
  6203  0079                     LCDClear@index:	
  6204                           ; 2 bytes @ 0x9
  6205                           
  6206  0079                     ___awtoft@c:	
  6207                           ; 2 bytes @ 0x9
  6208                           
  6209                           
  6210                           ; 2 bytes @ 0x9
  6211  0079                     	ds	1
  6212  007A                     LCDWriteCharacter@base:	
  6213                           
  6214                           ; 2 bytes @ 0xA
  6215  007A                     	ds	1
  6216  007B                     readIAnalog@value:	
  6217  007B                     readVAnalog@value:	
  6218                           ; 2 bytes @ 0xB
  6219                           
  6220                           
  6221                           ; 2 bytes @ 0xB
  6222  007B                     	ds	1
  6223  007C                     ??___awtoft:	
  6224                           
  6225                           ; 1 bytes @ 0xC
  6226  007C                     	ds	2
  6227  007E                     ??_tempCalc:	
  6228  007E                     ??_eval_poly:	
  6229                           ; 1 bytes @ 0xE
  6230                           
  6231  007E                     ??___ftsub:	
  6232                           ; 1 bytes @ 0xE
  6233                           
  6234                           
  6235                           	psect	cstackBANK0
  6236  0020                     __pcstackBANK0:	
  6237                           ; 1 bytes @ 0xE
  6238                           
  6239  0020                     ___aldiv@counter:	
  6240  0020                     ___awtoft@sign:	
  6241                           ; 1 bytes @ 0x0
  6242                           
  6243                           
  6244                           ; 1 bytes @ 0x0
  6245  0020                     	ds	1
  6246  0021                     ?___ftdiv:	
  6247  0021                     ?___ftmul:	
  6248                           ; 3 bytes @ 0x1
  6249                           
  6250  0021                     ___aldiv@sign:	
  6251                           ; 3 bytes @ 0x1
  6252                           
  6253  0021                     ___ftdiv@f2:	
  6254                           ; 1 bytes @ 0x1
  6255                           
  6256  0021                     ___ftmul@f1:	
  6257                           ; 3 bytes @ 0x1
  6258                           
  6259                           
  6260                           ; 3 bytes @ 0x1
  6261  0021                     	ds	1
  6262  0022                     ___aldiv@quotient:	
  6263                           
  6264                           ; 4 bytes @ 0x2
  6265  0022                     	ds	2
  6266  0024                     ___ftdiv@f1:	
  6267  0024                     ___ftmul@f2:	
  6268                           ; 3 bytes @ 0x4
  6269                           
  6270                           
  6271                           ; 3 bytes @ 0x4
  6272  0024                     	ds	2
  6273  0026                     ?_readIAnalog:	
  6274  0026                     ?_readVAnalog:	
  6275                           ; 2 bytes @ 0x6
  6276                           
  6277  0026                     readIAnalog@channel:	
  6278                           ; 2 bytes @ 0x6
  6279                           
  6280  0026                     readVAnalog@channel:	
  6281                           ; 2 bytes @ 0x6
  6282                           
  6283                           
  6284                           ; 2 bytes @ 0x6
  6285  0026                     	ds	1
  6286  0027                     ??___ftdiv:	
  6287  0027                     ??___ftmul:	
  6288                           ; 1 bytes @ 0x7
  6289                           
  6290                           
  6291                           ; 1 bytes @ 0x7
  6292  0027                     	ds	1
  6293  0028                     ??_readIAnalog:	
  6294  0028                     ??_readVAnalog:	
  6295                           ; 1 bytes @ 0x8
  6296                           
  6297                           
  6298                           ; 1 bytes @ 0x8
  6299  0028                     	ds	3
  6300  002B                     ___ftdiv@cntr:	
  6301  002B                     ___ftmul@exp:	
  6302                           ; 1 bytes @ 0xB
  6303                           
  6304                           
  6305                           ; 1 bytes @ 0xB
  6306  002B                     	ds	1
  6307  002C                     ___ftdiv@f3:	
  6308  002C                     ___ftmul@f3_as_product:	
  6309                           ; 3 bytes @ 0xC
  6310                           
  6311                           
  6312                           ; 3 bytes @ 0xC
  6313  002C                     	ds	3
  6314  002F                     ___ftdiv@exp:	
  6315  002F                     ___ftmul@cntr:	
  6316                           ; 1 bytes @ 0xF
  6317                           
  6318                           
  6319                           ; 1 bytes @ 0xF
  6320  002F                     	ds	1
  6321  0030                     ___ftdiv@sign:	
  6322  0030                     ___ftmul@sign:	
  6323                           ; 1 bytes @ 0x10
  6324                           
  6325                           
  6326                           ; 1 bytes @ 0x10
  6327  0030                     	ds	1
  6328  0031                     ?___ftge:	
  6329  0031                     ?___ftadd:	
  6330                           ; 1 bit 
  6331                           
  6332  0031                     ?___fttol:	
  6333                           ; 3 bytes @ 0x11
  6334                           
  6335  0031                     ___ftadd@f1:	
  6336                           ; 4 bytes @ 0x11
  6337                           
  6338  0031                     ___ftge@ff1:	
  6339                           ; 3 bytes @ 0x11
  6340                           
  6341  0031                     ___fttol@f1:	
  6342                           ; 3 bytes @ 0x11
  6343                           
  6344                           
  6345                           ; 3 bytes @ 0x11
  6346  0031                     	ds	3
  6347  0034                     ___ftadd@f2:	
  6348  0034                     ___ftge@ff2:	
  6349                           ; 3 bytes @ 0x14
  6350                           
  6351                           
  6352                           ; 3 bytes @ 0x14
  6353  0034                     	ds	1
  6354  0035                     ??___fttol:	
  6355                           
  6356                           ; 1 bytes @ 0x15
  6357  0035                     	ds	2
  6358  0037                     ??___ftadd:	
  6359  0037                     ??___ftge:	
  6360                           ; 1 bytes @ 0x17
  6361                           
  6362                           
  6363                           ; 1 bytes @ 0x17
  6364  0037                     	ds	2
  6365  0039                     ___fttol@sign1:	
  6366                           
  6367                           ; 1 bytes @ 0x19
  6368  0039                     	ds	1
  6369  003A                     ___fttol@lval:	
  6370                           
  6371                           ; 4 bytes @ 0x1A
  6372  003A                     	ds	1
  6373  003B                     ___ftadd@sign:	
  6374                           
  6375                           ; 1 bytes @ 0x1B
  6376  003B                     	ds	1
  6377  003C                     ___ftadd@exp2:	
  6378                           
  6379                           ; 1 bytes @ 0x1C
  6380  003C                     	ds	1
  6381  003D                     ___ftadd@exp1:	
  6382                           
  6383                           ; 1 bytes @ 0x1D
  6384  003D                     	ds	1
  6385  003E                     ?_eval_poly:	
  6386  003E                     ?___ftsub:	
  6387                           ; 3 bytes @ 0x1E
  6388                           
  6389  003E                     ___fttol@exp1:	
  6390                           ; 3 bytes @ 0x1E
  6391                           
  6392  003E                     ___ftsub@f2:	
  6393                           ; 1 bytes @ 0x1E
  6394                           
  6395  003E                     eval_poly@x:	
  6396                           ; 3 bytes @ 0x1E
  6397                           
  6398                           
  6399                           ; 3 bytes @ 0x1E
  6400  003E                     	ds	1
  6401  003F                     ??_Battery_State_Machine:	
  6402  003F                     ?_LCDWriteInt:	
  6403                           ; 1 bytes @ 0x1F
  6404                           
  6405  003F                     ??_cc_cv_mode:	
  6406                           ; 1 bytes @ 0x1F
  6407                           
  6408  003F                     ??_calculateCurrent0:	
  6409                           ; 1 bytes @ 0x1F
  6410                           
  6411  003F                     ??_calculateCurrent3:	
  6412                           ; 1 bytes @ 0x1F
  6413                           
  6414  003F                     ??_Init_Battery_State_Machine:	
  6415                           ; 1 bytes @ 0x1F
  6416                           
  6417  003F                     LCDWriteInt@value:	
  6418                           ; 1 bytes @ 0x1F
  6419                           
  6420                           
  6421                           ; 2 bytes @ 0x1F
  6422  003F                     	ds	2
  6423  0041                     LCDWriteInt@fieldLength:	
  6424  0041                     eval_poly@d:	
  6425                           ; 1 bytes @ 0x21
  6426                           
  6427  0041                     ___ftsub@f1:	
  6428                           ; 2 bytes @ 0x21
  6429                           
  6430                           
  6431                           ; 3 bytes @ 0x21
  6432  0041                     	ds	1
  6433  0042                     LCDWriteInt@numPlaces:	
  6434                           
  6435                           ; 1 bytes @ 0x22
  6436  0042                     	ds	1
  6437  0043                     Init_Battery_State_Machine@z:	
  6438  0043                     LCDWriteInt@sign:	
  6439                           ; 1 bytes @ 0x23
  6440                           
  6441  0043                     eval_poly@n:	
  6442                           ; 1 bytes @ 0x23
  6443                           
  6444                           
  6445                           ; 2 bytes @ 0x23
  6446  0043                     	ds	1
  6447  0044                     ??_SYSTEM_Initialize:	
  6448  0044                     ??_LCDWriteInt:	
  6449                           ; 1 bytes @ 0x24
  6450                           
  6451  0044                     Battery_State_Machine@z:	
  6452                           ; 1 bytes @ 0x24
  6453                           
  6454                           
  6455                           ; 1 bytes @ 0x24
  6456  0044                     	ds	1
  6457  0045                     eval_poly@res:	
  6458                           
  6459                           ; 3 bytes @ 0x25
  6460  0045                     	ds	1
  6461  0046                     cc_cv_mode@z:	
  6462                           
  6463                           ; 1 bytes @ 0x26
  6464  0046                     	ds	2
  6465  0048                     ?_log:	
  6466  0048                     log@x:	
  6467                           ; 3 bytes @ 0x28
  6468                           
  6469  0048                     LCDWriteInt@str:	
  6470                           ; 3 bytes @ 0x28
  6471                           
  6472                           
  6473                           ; 5 bytes @ 0x28
  6474  0048                     	ds	3
  6475  004B                     ??_log:	
  6476                           
  6477                           ; 1 bytes @ 0x2B
  6478  004B                     	ds	1
  6479  004C                     log@exponent:	
  6480                           
  6481                           ; 2 bytes @ 0x2C
  6482  004C                     	ds	1
  6483  004D                     LCDWriteInt@j:	
  6484                           
  6485                           ; 1 bytes @ 0x2D
  6486  004D                     	ds	1
  6487  004E                     ?_tempCalc:	
  6488  004E                     LCDWriteInt@i:	
  6489                           ; 2 bytes @ 0x2E
  6490                           
  6491  004E                     tempCalc@analogValue:	
  6492                           ; 1 bytes @ 0x2E
  6493                           
  6494                           
  6495                           ; 2 bytes @ 0x2E
  6496  004E                     	ds	2
  6497  0050                     tempCalc@R:	
  6498                           
  6499                           ; 3 bytes @ 0x30
  6500  0050                     	ds	3
  6501  0053                     _tempCalc$1300:	
  6502                           
  6503                           ; 3 bytes @ 0x33
  6504  0053                     	ds	3
  6505  0056                     tempCalc@steinhart:	
  6506                           
  6507                           ; 3 bytes @ 0x36
  6508  0056                     	ds	3
  6509  0059                     ??_main:	
  6510                           
  6511                           ; 1 bytes @ 0x39
  6512  0059                     	ds	5
  6513                           
  6514                           	psect	maintext
  6515  003D                     __pmaintext:	
  6516 ;;
  6517 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  6518 ;;
  6519 ;; *************** function _main *****************
  6520 ;; Defined at:
  6521 ;;		line 33 in file "main.c"
  6522 ;; Parameters:    Size  Location     Type
  6523 ;;		None
  6524 ;; Auto vars:     Size  Location     Type
  6525 ;;  tempVoltage     8    8[BANK1 ] int [4]
  6526 ;;  efficiency      3    0[BANK1 ] float 
  6527 ;;  dutyCycle7      2   34[BANK1 ] unsigned int 
  6528 ;;  dutyCycle6      2   32[BANK1 ] unsigned int 
  6529 ;;  tempFanOutpu    2   27[BANK1 ] unsigned int 
  6530 ;;  dutyCycle1      2   25[BANK1 ] unsigned int 
  6531 ;;  largerIOut      2   22[BANK1 ] int 
  6532 ;;  MPPT1           2   20[BANK1 ] int 
  6533 ;;  MPPT0           2   18[BANK1 ] int 
  6534 ;;  faultNotRese    2    6[BANK1 ] unsigned int 
  6535 ;;  faultCount      2    4[BANK1 ] unsigned int 
  6536 ;;  j               1   36[BANK1 ] unsigned char 
  6537 ;;  menuButton      1   24[BANK1 ] unsigned char 
  6538 ;;  slowLoop        1   17[BANK1 ] unsigned char 
  6539 ;;  displayRefre    1   16[BANK1 ] unsigned char 
  6540 ;;  fastLoop        1    3[BANK1 ] unsigned char 
  6541 ;; Return value:  Size  Location     Type
  6542 ;;                  1    wreg      void 
  6543 ;; Registers used:
  6544 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6545 ;; Tracked objects:
  6546 ;;		On entry : B1F/0
  6547 ;;		On exit  : 0/0
  6548 ;;		Unchanged: 0/0
  6549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6551 ;;      Locals:         0       0      37       0       0       0       0       0       0       0       0       0       
      +0       0
  6552 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6553 ;;      Totals:         0       5      37       0       0       0       0       0       0       0       0       0       
      +0       0
  6554 ;;Total ram usage:       42 bytes
  6555 ;; Hardware stack levels required when called:    5
  6556 ;; This function calls:
  6557 ;;		_ADCRead
  6558 ;;		_Battery_State_Machine
  6559 ;;		_LCDClear
  6560 ;;		_LCDInit
  6561 ;;		_LCDWriteCharacter
  6562 ;;		_LCDWriteInt
  6563 ;;		_PWM1_LoadDutyValue
  6564 ;;		_PWM6_LoadDutyValue
  6565 ;;		_PWM7_LoadDutyValue
  6566 ;;		_SYSTEM_Initialize
  6567 ;;		___awdiv
  6568 ;;		___awtoft
  6569 ;;		___ftdiv
  6570 ;;		___ftge
  6571 ;;		___ftmul
  6572 ;;		___fttol
  6573 ;;		_calculateCurrent0
  6574 ;;		_calculateCurrent2
  6575 ;;		_calculateCurrent3
  6576 ;;		_cc_cv_mode
  6577 ;;		_gotoXY
  6578 ;;		_readButton
  6579 ;;		_readIAnalog
  6580 ;;		_readVAnalog
  6581 ;;		_tempCalc
  6582 ;; This function is called by:
  6583 ;;		Startup code after reset
  6584 ;; This function uses a non-reentrant model
  6585 ;;
  6586                           
  6587                           
  6588                           ;psect for function _main
  6589  003D                     _main:	
  6590                           
  6591                           ;main.c: 35: int16_t MPPT0 = 3144;
  6592                           
  6593                           ;incstack = 0
  6594                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6595  003D  3048               	movlw	72
  6596  003E  0021               	movlb	1	; select bank1
  6597  003F  00DA               	movwf	main@MPPT0^(0+128)
  6598  0040  300C               	movlw	12
  6599  0041  00DB               	movwf	(main@MPPT0^(0+128)+1)
  6600                           
  6601                           ;main.c: 36: int16_t MPPT1 = 3144;
  6602  0042  3048               	movlw	72
  6603  0043  00DC               	movwf	main@MPPT1^(0+128)
  6604  0044  300C               	movlw	12
  6605  0045  00DD               	movwf	(main@MPPT1^(0+128)+1)
  6606                           
  6607                           ;main.c: 38: extern uint8_t batteryState[2];
  6608                           ;main.c: 39: uint8_t displayRefresh = 0;
  6609  0046  01D8               	clrf	main@displayRefresh^(0+128)
  6610                           
  6611                           ;main.c: 40: uint16_t dutyCycle6 = 1023;
  6612  0047  30FF               	movlw	255
  6613  0048  00E8               	movwf	main@dutyCycle6^(0+128)
  6614  0049  3003               	movlw	3
  6615  004A  00E9               	movwf	(main@dutyCycle6^(0+128)+1)
  6616                           
  6617                           ;main.c: 41: uint16_t dutyCycle7 = 1023;
  6618  004B  30FF               	movlw	255
  6619  004C  00EA               	movwf	main@dutyCycle7^(0+128)
  6620  004D  3003               	movlw	3
  6621  004E  00EB               	movwf	(main@dutyCycle7^(0+128)+1)
  6622                           
  6623                           ;main.c: 42: uint16_t dutyCycle1 = 260;
  6624  004F  3004               	movlw	4
  6625  0050  00E1               	movwf	main@dutyCycle1^(0+128)
  6626  0051  3001               	movlw	1
  6627  0052  00E2               	movwf	(main@dutyCycle1^(0+128)+1)
  6628                           
  6629                           ;main.c: 43: float efficiency = 0;
  6630  0053  3000               	movlw	0
  6631  0054  00C8               	movwf	main@efficiency^(0+128)
  6632  0055  3000               	movlw	0
  6633  0056  00C9               	movwf	(main@efficiency+1)^(0+128)
  6634  0057  3000               	movlw	0
  6635  0058  00CA               	movwf	(main@efficiency+2)^(0+128)
  6636                           
  6637                           ;main.c: 44: uint16_t faultCount = 0;
  6638  0059  01CC               	clrf	main@faultCount^(0+128)
  6639  005A  01CD               	clrf	(main@faultCount+1)^(0+128)
  6640                           
  6641                           ;main.c: 45: uint16_t faultNotReset = 0;
  6642  005B  01CE               	clrf	main@faultNotReset^(0+128)
  6643  005C  01CF               	clrf	(main@faultNotReset+1)^(0+128)
  6644                           
  6645                           ;main.c: 47: extern int8_t Imode[2];
  6646                           ;main.c: 48: int16_t largerIOut = 0;
  6647  005D  01DE               	clrf	main@largerIOut^(0+128)
  6648  005E  01DF               	clrf	(main@largerIOut+1)^(0+128)
  6649                           
  6650                           ;main.c: 49: extern int16_t Iref[2];
  6651                           ;main.c: 50: uint8_t j = 0;
  6652  005F  01EC               	clrf	main@j^(0+128)
  6653                           
  6654                           ;main.c: 51: uint8_t menuButton = 0;
  6655  0060  01E0               	clrf	main@menuButton^(0+128)
  6656                           
  6657                           ;main.c: 52: uint8_t fastLoop = 0;
  6658  0061  01CB               	clrf	main@fastLoop^(0+128)
  6659                           
  6660                           ;main.c: 53: uint8_t slowLoop = 200;
  6661  0062  30C8               	movlw	200
  6662  0063  0020               	movlb	0	; select bank0
  6663  0064  00D9               	movwf	??_main
  6664  0065  0859               	movf	??_main,w
  6665  0066  0021               	movlb	1	; select bank1
  6666  0067  00D9               	movwf	main@slowLoop^(0+128)
  6667                           
  6668                           ;main.c: 54: uint16_t tempFanOutput = 60;
  6669  0068  303C               	movlw	60
  6670  0069  00E3               	movwf	main@tempFanOutput^(0+128)
  6671  006A  3000               	movlw	0
  6672  006B  00E4               	movwf	(main@tempFanOutput^(0+128)+1)
  6673                           
  6674                           ;main.c: 55: extern int8_t VHoldMode[2];
  6675                           ;main.c: 56: extern int16_t Vref[2];
  6676                           ;main.c: 57: int16_t tempVoltage[4];
  6677                           ;main.c: 60: SYSTEM_Initialize();
  6678  006C  3191  21CF  3180   	fcall	_SYSTEM_Initialize
  6679                           
  6680                           ;main.c: 62: LCDClear();
  6681  006F  319F  2773  3180   	fcall	_LCDClear
  6682  0072                     l3338:	
  6683                           ;main.c: 64: void calculateCurrent0(void);
  6684                           ;main.c: 66: void calculateCurrent2(void);
  6685                           ;main.c: 67: void calculateCurrent3(void);
  6686                           ;main.c: 70: while (1)
  6687                           
  6688                           
  6689                           ;main.c: 71: {
  6690                           ;main.c: 72: if(!(RB2))
  6691  0072  0020               	movlb	0	; select bank0
  6692  0073  190D               	btfsc	13,2	;volatile
  6693  0074  2886               	goto	l3346
  6694                           
  6695                           ;main.c: 73: {
  6696                           ;main.c: 74: LATA5=0;
  6697  0075  1296               	bcf	22,5	;volatile
  6698                           
  6699                           ;main.c: 75: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  6700  0076  300B               	movlw	11
  6701  0077  00DA               	movwf	??_main+1
  6702  0078  3062               	movlw	98
  6703  0079  00D9               	movwf	??_main
  6704  007A                     u4517:	
  6705  007A  0BD9               	decfsz	??_main,f
  6706  007B  287A               	goto	u4517
  6707  007C  0BDA               	decfsz	??_main+1,f
  6708  007D  287A               	goto	u4517
  6709  007E  0000               	nop
  6710                           
  6711                           ;main.c: 76: faultCount+=1;
  6712  007F  3001               	movlw	1
  6713  0080  0021               	movlb	1	; select bank1
  6714  0081  07CC               	addwf	main@faultCount^(0+128),f
  6715  0082  3000               	movlw	0
  6716  0083  3DCD               	addwfc	(main@faultCount+1)^(0+128),f
  6717                           
  6718                           ;main.c: 77: LATA5=1;
  6719  0084  0020               	movlb	0	; select bank0
  6720  0085  1696               	bsf	22,5	;volatile
  6721  0086                     l3346:	
  6722                           
  6723                           ;main.c: 78: }
  6724                           ;main.c: 79: for(j=0;j<4;j++) Ianalogs[j]=readIAnalog(j);
  6725  0086  0021               	movlb	1	; select bank1
  6726  0087  01EC               	clrf	main@j^(0+128)
  6727  0088  3004               	movlw	4
  6728  0089  026C               	subwf	main@j^(0+128),w
  6729  008A  1803               	btfsc	3,0
  6730  008B  28AB               	goto	l3358
  6731  008C                     l3352:	
  6732  008C  086C               	movf	main@j^(0+128),w
  6733  008D  0020               	movlb	0	; select bank0
  6734  008E  00D9               	movwf	??_main
  6735  008F  01DA               	clrf	??_main+1
  6736  0090  0859               	movf	??_main,w
  6737  0091  00A6               	movwf	readIAnalog@channel
  6738  0092  085A               	movf	??_main+1,w
  6739  0093  00A7               	movwf	readIAnalog@channel+1
  6740  0094  318B  23BE  3180   	fcall	_readIAnalog
  6741  0097  0021               	movlb	1	; select bank1
  6742  0098  356C               	lslf	main@j^(0+128),w
  6743  0099  3E40               	addlw	(low (_Ianalogs| (0+256)))& (0+255)
  6744  009A  0086               	movwf	6
  6745  009B  3001               	movlw	1	; select bank2/3
  6746  009C  0087               	movwf	7
  6747  009D  0020               	movlb	0	; select bank0
  6748  009E  0826               	movf	?_readIAnalog,w
  6749  009F  3FC0               	movwi [0]fsr1
  6750  00A0  0827               	movf	?_readIAnalog+1,w
  6751  00A1  3FC1               	movwi [1]fsr1
  6752  00A2  3001               	movlw	1
  6753  00A3  00D9               	movwf	??_main
  6754  00A4  0859               	movf	??_main,w
  6755  00A5  0021               	movlb	1	; select bank1
  6756  00A6  07EC               	addwf	main@j^(0+128),f
  6757  00A7  3004               	movlw	4
  6758  00A8  026C               	subwf	main@j^(0+128),w
  6759  00A9  1C03               	skipc
  6760  00AA  288C               	goto	l3352
  6761  00AB                     l3358:	
  6762                           
  6763                           ;main.c: 81: for(j=0;j<4;j++) Vanalogs[j]=readVAnalog(j);
  6764  00AB  01EC               	clrf	main@j^(0+128)
  6765  00AC  3004               	movlw	4
  6766  00AD  026C               	subwf	main@j^(0+128),w
  6767  00AE  1803               	btfsc	3,0
  6768  00AF  28CF               	goto	l74
  6769  00B0                     l3364:	
  6770  00B0  086C               	movf	main@j^(0+128),w
  6771  00B1  0020               	movlb	0	; select bank0
  6772  00B2  00D9               	movwf	??_main
  6773  00B3  01DA               	clrf	??_main+1
  6774  00B4  0859               	movf	??_main,w
  6775  00B5  00A6               	movwf	readVAnalog@channel
  6776  00B6  085A               	movf	??_main+1,w
  6777  00B7  00A7               	movwf	readVAnalog@channel+1
  6778  00B8  318A  22A4  3180   	fcall	_readVAnalog
  6779  00BB  0021               	movlb	1	; select bank1
  6780  00BC  356C               	lslf	main@j^(0+128),w
  6781  00BD  3E48               	addlw	(low (_Vanalogs| (0+256)))& (0+255)
  6782  00BE  0086               	movwf	6
  6783  00BF  3001               	movlw	1	; select bank2/3
  6784  00C0  0087               	movwf	7
  6785  00C1  0020               	movlb	0	; select bank0
  6786  00C2  0826               	movf	?_readVAnalog,w
  6787  00C3  3FC0               	movwi [0]fsr1
  6788  00C4  0827               	movf	?_readVAnalog+1,w
  6789  00C5  3FC1               	movwi [1]fsr1
  6790  00C6  3001               	movlw	1
  6791  00C7  00D9               	movwf	??_main
  6792  00C8  0859               	movf	??_main,w
  6793  00C9  0021               	movlb	1	; select bank1
  6794  00CA  07EC               	addwf	main@j^(0+128),f
  6795  00CB  3004               	movlw	4
  6796  00CC  026C               	subwf	main@j^(0+128),w
  6797  00CD  1C03               	skipc
  6798  00CE  28B0               	goto	l3364
  6799  00CF                     l74:	
  6800                           
  6801                           ;main.c: 83: if(!(RB2))faultNotReset+=1;
  6802  00CF  0020               	movlb	0	; select bank0
  6803  00D0  190D               	btfsc	13,2	;volatile
  6804  00D1  28D7               	goto	l3372
  6805  00D2  3001               	movlw	1
  6806  00D3  0021               	movlb	1	; select bank1
  6807  00D4  07CE               	addwf	main@faultNotReset^(0+128),f
  6808  00D5  3000               	movlw	0
  6809  00D6  3DCF               	addwfc	(main@faultNotReset+1)^(0+128),f
  6810  00D7                     l3372:	
  6811                           
  6812                           ;main.c: 87: tempVoltage[0]=(int16_t)(Vanalogs[0]/.54245);
  6813  00D7  0022               	movlb	2	; select bank2
  6814  00D8  0849               	movf	(_Vanalogs+1)^(0+256),w
  6815  00D9  00FA               	movwf	___awtoft@c+1
  6816  00DA  0848               	movf	_Vanalogs^(0+256),w
  6817  00DB  00F9               	movwf	___awtoft@c
  6818  00DC  319F  270C  3180   	fcall	___awtoft
  6819  00DF  0879               	movf	?___awtoft,w
  6820  00E0  0020               	movlb	0	; select bank0
  6821  00E1  00A4               	movwf	___ftdiv@f1
  6822  00E2  087A               	movf	?___awtoft+1,w
  6823  00E3  00A5               	movwf	___ftdiv@f1+1
  6824  00E4  087B               	movf	?___awtoft+2,w
  6825  00E5  00A6               	movwf	___ftdiv@f1+2
  6826  00E6  30DE               	movlw	222
  6827  00E7  00A1               	movwf	___ftdiv@f2
  6828  00E8  300A               	movlw	10
  6829  00E9  00A2               	movwf	___ftdiv@f2+1
  6830  00EA  303F               	movlw	63
  6831  00EB  00A3               	movwf	___ftdiv@f2+2
  6832  00EC  3195  25F3  3180   	fcall	___ftdiv
  6833  00EF  0020               	movlb	0	; select bank0
  6834  00F0  0821               	movf	?___ftdiv,w
  6835  00F1  00B1               	movwf	___fttol@f1
  6836  00F2  0822               	movf	?___ftdiv+1,w
  6837  00F3  00B2               	movwf	___fttol@f1+1
  6838  00F4  0823               	movf	?___ftdiv+2,w
  6839  00F5  00B3               	movwf	___fttol@f1+2
  6840  00F6  3195  256C  3180   	fcall	___fttol
  6841  00F9  0020               	movlb	0	; select bank0
  6842  00FA  0832               	movf	?___fttol+1,w
  6843  00FB  0021               	movlb	1	; select bank1
  6844  00FC  00D1               	movwf	(main@tempVoltage+1)^(0+128)
  6845  00FD  0020               	movlb	0	; select bank0
  6846  00FE  0831               	movf	?___fttol,w
  6847  00FF  0021               	movlb	1	; select bank1
  6848  0100  00D0               	movwf	main@tempVoltage^(0+128)
  6849                           
  6850                           ;main.c: 89: tempVoltage[1]=(int16_t)(Vanalogs[1]/.54395);
  6851  0101  0022               	movlb	2	; select bank2
  6852  0102  084B               	movf	((_Vanalogs+1)^(0+256)+2),w
  6853  0103  00FA               	movwf	___awtoft@c+1
  6854  0104  084A               	movf	(_Vanalogs^(0+256)+2),w
  6855  0105  00F9               	movwf	___awtoft@c
  6856  0106  319F  270C  3180   	fcall	___awtoft
  6857  0109  0879               	movf	?___awtoft,w
  6858  010A  0020               	movlb	0	; select bank0
  6859  010B  00A4               	movwf	___ftdiv@f1
  6860  010C  087A               	movf	?___awtoft+1,w
  6861  010D  00A5               	movwf	___ftdiv@f1+1
  6862  010E  087B               	movf	?___awtoft+2,w
  6863  010F  00A6               	movwf	___ftdiv@f1+2
  6864  0110  3040               	movlw	64
  6865  0111  00A1               	movwf	___ftdiv@f2
  6866  0112  300B               	movlw	11
  6867  0113  00A2               	movwf	___ftdiv@f2+1
  6868  0114  303F               	movlw	63
  6869  0115  00A3               	movwf	___ftdiv@f2+2
  6870  0116  3195  25F3  3180   	fcall	___ftdiv
  6871  0119  0020               	movlb	0	; select bank0
  6872  011A  0821               	movf	?___ftdiv,w
  6873  011B  00B1               	movwf	___fttol@f1
  6874  011C  0822               	movf	?___ftdiv+1,w
  6875  011D  00B2               	movwf	___fttol@f1+1
  6876  011E  0823               	movf	?___ftdiv+2,w
  6877  011F  00B3               	movwf	___fttol@f1+2
  6878  0120  3195  256C  3180   	fcall	___fttol
  6879  0123  0020               	movlb	0	; select bank0
  6880  0124  0832               	movf	?___fttol+1,w
  6881  0125  0021               	movlb	1	; select bank1
  6882  0126  00D3               	movwf	((main@tempVoltage+1)^(0+128)+2)
  6883  0127  0020               	movlb	0	; select bank0
  6884  0128  0831               	movf	?___fttol,w
  6885  0129  0021               	movlb	1	; select bank1
  6886  012A  00D2               	movwf	(main@tempVoltage^(0+128)+2)
  6887                           
  6888                           ;main.c: 91: tempVoltage[2]=(int16_t)(Vanalogs[2]/.208100558);
  6889  012B  0022               	movlb	2	; select bank2
  6890  012C  084D               	movf	((_Vanalogs+1)^(0+256)+4),w
  6891  012D  00FA               	movwf	___awtoft@c+1
  6892  012E  084C               	movf	(_Vanalogs^(0+256)+4),w
  6893  012F  00F9               	movwf	___awtoft@c
  6894  0130  319F  270C  3180   	fcall	___awtoft
  6895  0133  0879               	movf	?___awtoft,w
  6896  0134  0020               	movlb	0	; select bank0
  6897  0135  00A4               	movwf	___ftdiv@f1
  6898  0136  087A               	movf	?___awtoft+1,w
  6899  0137  00A5               	movwf	___ftdiv@f1+1
  6900  0138  087B               	movf	?___awtoft+2,w
  6901  0139  00A6               	movwf	___ftdiv@f1+2
  6902  013A  3018               	movlw	24
  6903  013B  00A1               	movwf	___ftdiv@f2
  6904  013C  3055               	movlw	85
  6905  013D  00A2               	movwf	___ftdiv@f2+1
  6906  013E  303E               	movlw	62
  6907  013F  00A3               	movwf	___ftdiv@f2+2
  6908  0140  3195  25F3  3180   	fcall	___ftdiv
  6909  0143  0020               	movlb	0	; select bank0
  6910  0144  0821               	movf	?___ftdiv,w
  6911  0145  00B1               	movwf	___fttol@f1
  6912  0146  0822               	movf	?___ftdiv+1,w
  6913  0147  00B2               	movwf	___fttol@f1+1
  6914  0148  0823               	movf	?___ftdiv+2,w
  6915  0149  00B3               	movwf	___fttol@f1+2
  6916  014A  3195  256C  3180   	fcall	___fttol
  6917  014D  0020               	movlb	0	; select bank0
  6918  014E  0832               	movf	?___fttol+1,w
  6919  014F  0021               	movlb	1	; select bank1
  6920  0150  00D5               	movwf	((main@tempVoltage+1)^(0+128)+4)
  6921  0151  0020               	movlb	0	; select bank0
  6922  0152  0831               	movf	?___fttol,w
  6923  0153  0021               	movlb	1	; select bank1
  6924  0154  00D4               	movwf	(main@tempVoltage^(0+128)+4)
  6925                           
  6926                           ;main.c: 93: tempVoltage[3]=(int16_t)(Vanalogs[3]/.207755);
  6927  0155  0022               	movlb	2	; select bank2
  6928  0156  084F               	movf	((_Vanalogs+1)^(0+256)+6),w
  6929  0157  00FA               	movwf	___awtoft@c+1
  6930  0158  084E               	movf	(_Vanalogs^(0+256)+6),w
  6931  0159  00F9               	movwf	___awtoft@c
  6932  015A  319F  270C  3180   	fcall	___awtoft
  6933  015D  0879               	movf	?___awtoft,w
  6934  015E  0020               	movlb	0	; select bank0
  6935  015F  00A4               	movwf	___ftdiv@f1
  6936  0160  087A               	movf	?___awtoft+1,w
  6937  0161  00A5               	movwf	___ftdiv@f1+1
  6938  0162  087B               	movf	?___awtoft+2,w
  6939  0163  00A6               	movwf	___ftdiv@f1+2
  6940  0164  30BE               	movlw	190
  6941  0165  00A1               	movwf	___ftdiv@f2
  6942  0166  3054               	movlw	84
  6943  0167  00A2               	movwf	___ftdiv@f2+1
  6944  0168  303E               	movlw	62
  6945  0169  00A3               	movwf	___ftdiv@f2+2
  6946  016A  3195  25F3  3180   	fcall	___ftdiv
  6947  016D  0020               	movlb	0	; select bank0
  6948  016E  0821               	movf	?___ftdiv,w
  6949  016F  00B1               	movwf	___fttol@f1
  6950  0170  0822               	movf	?___ftdiv+1,w
  6951  0171  00B2               	movwf	___fttol@f1+1
  6952  0172  0823               	movf	?___ftdiv+2,w
  6953  0173  00B3               	movwf	___fttol@f1+2
  6954  0174  3195  256C  3180   	fcall	___fttol
  6955  0177  0020               	movlb	0	; select bank0
  6956  0178  0832               	movf	?___fttol+1,w
  6957  0179  0021               	movlb	1	; select bank1
  6958  017A  00D7               	movwf	((main@tempVoltage+1)^(0+128)+6)
  6959  017B  0020               	movlb	0	; select bank0
  6960  017C  0831               	movf	?___fttol,w
  6961  017D  0021               	movlb	1	; select bank1
  6962  017E  00D6               	movwf	(main@tempVoltage^(0+128)+6)
  6963                           
  6964                           ;main.c: 95: for(j=0;j<4;j++)
  6965  017F  01EC               	clrf	main@j^(0+128)
  6966  0180  3004               	movlw	4
  6967  0181  026C               	subwf	main@j^(0+128),w
  6968  0182  1803               	btfsc	3,0
  6969  0183  29E3               	goto	l3398
  6970  0184                     l3386:	
  6971                           
  6972                           ;main.c: 96: {
  6973                           ;main.c: 97: if(tempVoltage[j]>voltage[j])voltage[j]+=1;
  6974  0184  356C               	lslf	main@j^(0+128),w
  6975  0185  3ED0               	addlw	(low (main@tempVoltage| 0))& (0+255)
  6976  0186  0086               	movwf	6
  6977  0187  0187               	clrf	7
  6978  0188  3F40               	moviw [0]fsr1
  6979  0189  0020               	movlb	0	; select bank0
  6980  018A  00D9               	movwf	??_main
  6981  018B  3F41               	moviw [1]fsr1
  6982  018C  00DA               	movwf	??_main+1
  6983  018D  0021               	movlb	1	; select bank1
  6984  018E  356C               	lslf	main@j^(0+128),w
  6985  018F  3EA8               	addlw	(low (_voltage| 0))& (0+255)
  6986  0190  0086               	movwf	6
  6987  0191  0187               	clrf	7
  6988  0192  3F40               	moviw [0]fsr1
  6989  0193  0020               	movlb	0	; select bank0
  6990  0194  00DB               	movwf	??_main+2
  6991  0195  3F41               	moviw [1]fsr1
  6992  0196  00DC               	movwf	??_main+3
  6993  0197  085C               	movf	??_main+3,w
  6994  0198  3A80               	xorlw	128
  6995  0199  00DD               	movwf	??_main+4
  6996  019A  085A               	movf	??_main+1,w
  6997  019B  3A80               	xorlw	128
  6998  019C  025D               	subwf	??_main+4,w
  6999  019D  1D03               	skipz
  7000  019E  29A1               	goto	u4135
  7001  019F  0859               	movf	??_main,w
  7002  01A0  025B               	subwf	??_main+2,w
  7003  01A1                     u4135:	
  7004  01A1  1803               	skipnc
  7005  01A2  29AE               	goto	l3390
  7006  01A3  0021               	movlb	1	; select bank1
  7007  01A4  356C               	lslf	main@j^(0+128),w
  7008  01A5  3EA8               	addlw	(low (_voltage| 0))& (0+255)
  7009  01A6  0086               	movwf	6
  7010  01A7  0187               	clrf	7
  7011  01A8  3001               	movlw	1
  7012  01A9  0781               	addwf	1,f
  7013  01AA  3141               	addfsr 1,1
  7014  01AB  1803               	skipnc
  7015  01AC  0A81               	incf	1,f
  7016  01AD  29D9               	goto	l3394
  7017  01AE                     l3390:	
  7018                           
  7019                           ;main.c: 98: else if(tempVoltage[j]>voltage[j])voltage[j]-=1;
  7020  01AE  0021               	movlb	1	; select bank1
  7021  01AF  356C               	lslf	main@j^(0+128),w
  7022  01B0  3ED0               	addlw	(low (main@tempVoltage| 0))& (0+255)
  7023  01B1  0086               	movwf	6
  7024  01B2  0187               	clrf	7
  7025  01B3  3F40               	moviw [0]fsr1
  7026  01B4  0020               	movlb	0	; select bank0
  7027  01B5  00D9               	movwf	??_main
  7028  01B6  3F41               	moviw [1]fsr1
  7029  01B7  00DA               	movwf	??_main+1
  7030  01B8  0021               	movlb	1	; select bank1
  7031  01B9  356C               	lslf	main@j^(0+128),w
  7032  01BA  3EA8               	addlw	(low (_voltage| 0))& (0+255)
  7033  01BB  0086               	movwf	6
  7034  01BC  0187               	clrf	7
  7035  01BD  3F40               	moviw [0]fsr1
  7036  01BE  0020               	movlb	0	; select bank0
  7037  01BF  00DB               	movwf	??_main+2
  7038  01C0  3F41               	moviw [1]fsr1
  7039  01C1  00DC               	movwf	??_main+3
  7040  01C2  085C               	movf	??_main+3,w
  7041  01C3  3A80               	xorlw	128
  7042  01C4  00DD               	movwf	??_main+4
  7043  01C5  085A               	movf	??_main+1,w
  7044  01C6  3A80               	xorlw	128
  7045  01C7  025D               	subwf	??_main+4,w
  7046  01C8  1D03               	skipz
  7047  01C9  29CC               	goto	u4145
  7048  01CA  0859               	movf	??_main,w
  7049  01CB  025B               	subwf	??_main+2,w
  7050  01CC                     u4145:	
  7051  01CC  1803               	skipnc
  7052  01CD  29D9               	goto	l3394
  7053  01CE  0021               	movlb	1	; select bank1
  7054  01CF  356C               	lslf	main@j^(0+128),w
  7055  01D0  3EA8               	addlw	(low (_voltage| 0))& (0+255)
  7056  01D1  0086               	movwf	6
  7057  01D2  0187               	clrf	7
  7058  01D3  30FF               	movlw	255
  7059  01D4  0781               	addwf	1,f
  7060  01D5  3141               	addfsr 1,1
  7061  01D6  30FF               	movlw	255
  7062  01D7  3D81               	addwfc	1,f
  7063  01D8  317F               	addfsr 1,-1
  7064  01D9                     l3394:	
  7065  01D9  3001               	movlw	1
  7066  01DA  0020               	movlb	0	; select bank0
  7067  01DB  00D9               	movwf	??_main
  7068  01DC  0859               	movf	??_main,w
  7069  01DD  0021               	movlb	1	; select bank1
  7070  01DE  07EC               	addwf	main@j^(0+128),f
  7071  01DF  3004               	movlw	4
  7072  01E0  026C               	subwf	main@j^(0+128),w
  7073  01E1  1C03               	skipc
  7074  01E2  2984               	goto	l3386
  7075  01E3                     l3398:	
  7076                           
  7077                           ;main.c: 100: }
  7078                           ;main.c: 102: calculateCurrent0();
  7079  01E3  3192  220C  3180   	fcall	_calculateCurrent0
  7080                           
  7081                           ;main.c: 106: calculateCurrent2();
  7082  01E6  319F  272D  3180   	fcall	_calculateCurrent2
  7083                           
  7084                           ;main.c: 108: calculateCurrent3();
  7085  01E9  3192  2251  3180   	fcall	_calculateCurrent3
  7086                           
  7087                           ;main.c: 110: current[1]=(int16_t)(current[3]*(voltage[3]/voltage[1]*.9));
  7088  01EC  0021               	movlb	1	; select bank1
  7089  01ED  082F               	movf	((_voltage+1)^(0+128)+6),w
  7090  01EE  00F3               	movwf	___awdiv@dividend+1
  7091  01EF  082E               	movf	(_voltage^(0+128)+6),w
  7092  01F0  00F2               	movwf	___awdiv@dividend
  7093  01F1  082B               	movf	((_voltage+1)^(0+128)+2),w
  7094  01F2  00F1               	movwf	___awdiv@divisor+1
  7095  01F3  082A               	movf	(_voltage^(0+128)+2),w
  7096  01F4  00F0               	movwf	___awdiv@divisor
  7097  01F5  3192  2296  3180   	fcall	___awdiv
  7098  01F8  0871               	movf	?___awdiv+1,w
  7099  01F9  00FA               	movwf	___awtoft@c+1
  7100  01FA  0870               	movf	?___awdiv,w
  7101  01FB  00F9               	movwf	___awtoft@c
  7102  01FC  319F  270C  3180   	fcall	___awtoft
  7103  01FF  0879               	movf	?___awtoft,w
  7104  0200  0020               	movlb	0	; select bank0
  7105  0201  00A4               	movwf	___ftmul@f2
  7106  0202  087A               	movf	?___awtoft+1,w
  7107  0203  00A5               	movwf	___ftmul@f2+1
  7108  0204  087B               	movf	?___awtoft+2,w
  7109  0205  00A6               	movwf	___ftmul@f2+2
  7110  0206  3066               	movlw	102
  7111  0207  00A1               	movwf	___ftmul@f1
  7112  0208  3066               	movlw	102
  7113  0209  00A2               	movwf	___ftmul@f1+1
  7114  020A  303F               	movlw	63
  7115  020B  00A3               	movwf	___ftmul@f1+2
  7116  020C  3197  274C  3180   	fcall	___ftmul
  7117  020F  0020               	movlb	0	; select bank0
  7118  0210  0821               	movf	?___ftmul,w
  7119  0211  0021               	movlb	1	; select bank1
  7120  0212  00E5               	movwf	_main$1299^(0+128)
  7121  0213  0020               	movlb	0	; select bank0
  7122  0214  0822               	movf	?___ftmul+1,w
  7123  0215  0021               	movlb	1	; select bank1
  7124  0216  00E6               	movwf	(_main$1299+1)^(0+128)
  7125  0217  0020               	movlb	0	; select bank0
  7126  0218  0823               	movf	?___ftmul+2,w
  7127  0219  0021               	movlb	1	; select bank1
  7128  021A  00E7               	movwf	(_main$1299+2)^(0+128)
  7129                           
  7130                           ;main.c: 110: current[1]=(int16_t)(current[3]*(voltage[3]/voltage[1]*.9));
  7131  021B  0827               	movf	((_current+1)^(0+128)+6),w
  7132  021C  00FA               	movwf	___awtoft@c+1
  7133  021D  0826               	movf	(_current^(0+128)+6),w
  7134  021E  00F9               	movwf	___awtoft@c
  7135  021F  319F  270C  3180   	fcall	___awtoft
  7136  0222  0879               	movf	?___awtoft,w
  7137  0223  0020               	movlb	0	; select bank0
  7138  0224  00A4               	movwf	___ftmul@f2
  7139  0225  087A               	movf	?___awtoft+1,w
  7140  0226  00A5               	movwf	___ftmul@f2+1
  7141  0227  087B               	movf	?___awtoft+2,w
  7142  0228  00A6               	movwf	___ftmul@f2+2
  7143  0229  0021               	movlb	1	; select bank1
  7144  022A  0865               	movf	_main$1299^(0+128),w
  7145  022B  0020               	movlb	0	; select bank0
  7146  022C  00A1               	movwf	___ftmul@f1
  7147  022D  0021               	movlb	1	; select bank1
  7148  022E  0866               	movf	(_main$1299+1)^(0+128),w
  7149  022F  0020               	movlb	0	; select bank0
  7150  0230  00A2               	movwf	___ftmul@f1+1
  7151  0231  0021               	movlb	1	; select bank1
  7152  0232  0867               	movf	(_main$1299+2)^(0+128),w
  7153  0233  0020               	movlb	0	; select bank0
  7154  0234  00A3               	movwf	___ftmul@f1+2
  7155  0235  3197  274C  3180   	fcall	___ftmul
  7156  0238  0020               	movlb	0	; select bank0
  7157  0239  0821               	movf	?___ftmul,w
  7158  023A  00B1               	movwf	___fttol@f1
  7159  023B  0822               	movf	?___ftmul+1,w
  7160  023C  00B2               	movwf	___fttol@f1+1
  7161  023D  0823               	movf	?___ftmul+2,w
  7162  023E  00B3               	movwf	___fttol@f1+2
  7163  023F  3195  256C  3180   	fcall	___fttol
  7164  0242  0020               	movlb	0	; select bank0
  7165  0243  0832               	movf	?___fttol+1,w
  7166  0244  0021               	movlb	1	; select bank1
  7167  0245  00A3               	movwf	((_current+1)^(0+128)+2)
  7168  0246  0020               	movlb	0	; select bank0
  7169  0247  0831               	movf	?___fttol,w
  7170  0248  0021               	movlb	1	; select bank1
  7171  0249  00A2               	movwf	(_current^(0+128)+2)
  7172                           
  7173                           ;main.c: 112: if(Imode[0])
  7174  024A  083C               	movf	_Imode^(0+128),w
  7175  024B  1903               	btfsc	3,2
  7176  024C  2A6D               	goto	l3414
  7177                           
  7178                           ;main.c: 113: {
  7179                           ;main.c: 114: if(voltage[2]<MPPT0)
  7180  024D  082D               	movf	((_voltage+1)^(0+128)+4),w
  7181  024E  3A80               	xorlw	128
  7182  024F  0020               	movlb	0	; select bank0
  7183  0250  00D9               	movwf	??_main
  7184  0251  0021               	movlb	1	; select bank1
  7185  0252  085B               	movf	(main@MPPT0+1)^(0+128),w
  7186  0253  3A80               	xorlw	128
  7187  0254  0020               	movlb	0	; select bank0
  7188  0255  0259               	subwf	??_main,w
  7189  0256  1D03               	skipz
  7190  0257  2A5B               	goto	u4175
  7191  0258  0021               	movlb	1	; select bank1
  7192  0259  085A               	movf	main@MPPT0^(0+128),w
  7193  025A  022C               	subwf	(_voltage^(0+128)+4),w
  7194  025B                     u4175:	
  7195  025B  1C03               	btfss	3,0
  7196  025C  2A7D               	goto	L3
  7197                           
  7198                           ;main.c: 121: else if(voltage[2]>MPPT0)
  7199                           
  7200                           ;main.c: 119: }
  7201                           ;main.c: 120: }
  7202                           
  7203                           ;main.c: 117: {
  7204                           ;main.c: 118: dutyCycle6+=1;
  7205                           
  7206                           ;main.c: 115: {
  7207                           ;main.c: 116: if(dutyCycle6<1023)
  7208  025D  0021               	movlb	1	; select bank1
  7209  025E  085B               	movf	(main@MPPT0+1)^(0+128),w
  7210  025F  3A80               	xorlw	128
  7211  0260  0020               	movlb	0	; select bank0
  7212  0261  00D9               	movwf	??_main
  7213  0262  0021               	movlb	1	; select bank1
  7214  0263  082D               	movf	((_voltage+1)^(0+128)+4),w
  7215  0264  3A80               	xorlw	128
  7216  0265  0020               	movlb	0	; select bank0
  7217  0266  0259               	subwf	??_main,w
  7218  0267  1D03               	skipz
  7219  0268  2A99               	goto	u4235
  7220  0269  0021               	movlb	1	; select bank1
  7221  026A  082C               	movf	(_voltage^(0+128)+4),w
  7222  026B  025A               	subwf	main@MPPT0^(0+128),w
  7223  026C  2A99               	goto	u4235
  7224  026D                     l3414:	
  7225                           ;main.c: 129: }
  7226                           
  7227                           ;main.c: 126: }
  7228                           ;main.c: 127: }
  7229                           
  7230                           ;main.c: 124: {
  7231                           ;main.c: 125: dutyCycle6-=1;
  7232                           
  7233                           ;main.c: 122: {
  7234                           ;main.c: 123: if(dutyCycle6>0)
  7235                           
  7236                           
  7237                           ;main.c: 130: else
  7238                           ;main.c: 131: {
  7239                           ;main.c: 132: if(voltage[0]>(int16_t)Vref[0])
  7240  026D  0835               	movf	(_Vref+1)^(0+128),w
  7241  026E  3A80               	xorlw	128
  7242  026F  0020               	movlb	0	; select bank0
  7243  0270  00D9               	movwf	??_main
  7244  0271  0021               	movlb	1	; select bank1
  7245  0272  0829               	movf	(_voltage+1)^(0+128),w
  7246  0273  3A80               	xorlw	128
  7247  0274  0020               	movlb	0	; select bank0
  7248  0275  0259               	subwf	??_main,w
  7249  0276  1D03               	skipz
  7250  0277  2A7B               	goto	u4215
  7251  0278  0021               	movlb	1	; select bank1
  7252  0279  0828               	movf	_voltage^(0+128),w
  7253  027A  0234               	subwf	_Vref^(0+128),w
  7254  027B                     u4215:	
  7255  027B  1803               	skipnc
  7256  027C  2A8A               	goto	l3420
  7257  027D                     L3:	
  7258                           
  7259                           ;main.c: 133: {
  7260                           ;main.c: 134: if(dutyCycle6<1023) dutyCycle6+=1;
  7261  027D  3003               	movlw	3
  7262  027E  0021               	movlb	1	; select bank1
  7263  027F  0269               	subwf	(main@dutyCycle6+1)^(0+128),w
  7264  0280  30FF               	movlw	255
  7265  0281  1903               	skipnz
  7266  0282  0268               	subwf	main@dutyCycle6^(0+128),w
  7267  0283  1803               	skipnc
  7268  0284  2AA4               	goto	l3426
  7269  0285  3001               	movlw	1
  7270  0286  07E8               	addwf	main@dutyCycle6^(0+128),f
  7271  0287  3000               	movlw	0
  7272  0288  3DE9               	addwfc	(main@dutyCycle6+1)^(0+128),f
  7273                           
  7274                           ;main.c: 135: }
  7275  0289  2AA4               	goto	l3426
  7276  028A                     l3420:	
  7277                           
  7278                           ;main.c: 136: else if(voltage[0]<(int16_t)Vref[0])
  7279  028A  0021               	movlb	1	; select bank1
  7280  028B  0829               	movf	(_voltage+1)^(0+128),w
  7281  028C  3A80               	xorlw	128
  7282  028D  0020               	movlb	0	; select bank0
  7283  028E  00D9               	movwf	??_main
  7284  028F  0021               	movlb	1	; select bank1
  7285  0290  0835               	movf	(_Vref+1)^(0+128),w
  7286  0291  3A80               	xorlw	128
  7287  0292  0020               	movlb	0	; select bank0
  7288  0293  0259               	subwf	??_main,w
  7289  0294  1D03               	skipz
  7290  0295  2A99               	goto	u4235
  7291  0296  0021               	movlb	1	; select bank1
  7292  0297  0834               	movf	_Vref^(0+128),w
  7293  0298  0228               	subwf	_voltage^(0+128),w
  7294  0299                     u4235:	
  7295  0299  1803               	skipnc
  7296  029A  2AA4               	goto	l3426
  7297                           
  7298                           ;main.c: 137: {
  7299                           ;main.c: 138: if(dutyCycle6>0) dutyCycle6-=1;;
  7300  029B  0021               	movlb	1	; select bank1
  7301  029C  0868               	movf	main@dutyCycle6^(0+128),w
  7302  029D  0469               	iorwf	(main@dutyCycle6+1)^(0+128),w
  7303  029E  1903               	btfsc	3,2
  7304  029F  2AA4               	goto	l3426
  7305  02A0  3001               	movlw	1
  7306  02A1  02E8               	subwf	main@dutyCycle6^(0+128),f
  7307  02A2  3000               	movlw	0
  7308  02A3  3BE9               	subwfb	(main@dutyCycle6+1)^(0+128),f
  7309  02A4                     l3426:	
  7310                           ;main.c: 139: }
  7311                           
  7312                           
  7313                           ;main.c: 141: }
  7314                           ;main.c: 143: if(Imode[1])
  7315  02A4  0021               	movlb	1	; select bank1
  7316  02A5  083D               	movf	(_Imode^(0+128)+1),w
  7317  02A6  1903               	btfsc	3,2
  7318  02A7  2AB9               	goto	l3438
  7319                           
  7320                           ;main.c: 144: {
  7321                           ;main.c: 145: if(voltage[3]<MPPT1)
  7322  02A8  082F               	movf	((_voltage+1)^(0+128)+6),w
  7323  02A9  3A80               	xorlw	128
  7324  02AA  0020               	movlb	0	; select bank0
  7325  02AB  00D9               	movwf	??_main
  7326  02AC  0021               	movlb	1	; select bank1
  7327  02AD  085D               	movf	(main@MPPT1+1)^(0+128),w
  7328  02AE  3A80               	xorlw	128
  7329  02AF  0020               	movlb	0	; select bank0
  7330  02B0  0259               	subwf	??_main,w
  7331  02B1  1D03               	skipz
  7332  02B2  2AB6               	goto	u4265
  7333  02B3  0021               	movlb	1	; select bank1
  7334  02B4  085C               	movf	main@MPPT1^(0+128),w
  7335  02B5  022E               	subwf	(_voltage^(0+128)+6),w
  7336  02B6                     u4265:	
  7337  02B6  1C03               	btfss	3,0
  7338  02B7  2AC9               	goto	L4
  7339                           
  7340                           ;main.c: 150: }
  7341                           ;main.c: 151: }
  7342                           
  7343                           ;main.c: 148: {
  7344                           ;main.c: 149: dutyCycle7+=1;
  7345                           
  7346                           ;main.c: 146: {
  7347                           ;main.c: 147: if(dutyCycle7<1023)
  7348  02B8  2AE7               	goto	L5
  7349  02B9                     l3438:	
  7350                           ;main.c: 155: }
  7351                           ;main.c: 156: }
  7352                           
  7353                           ;main.c: 153: {
  7354                           ;main.c: 154: dutyCycle7-=1;
  7355                           
  7356                           ;main.c: 152: else if(dutyCycle7>0)
  7357                           
  7358                           
  7359                           ;main.c: 157: else
  7360                           ;main.c: 158: {
  7361                           ;main.c: 159: if(voltage[1]>(int16_t)Vref[1])
  7362  02B9  0837               	movf	((_Vref+1)^(0+128)+2),w
  7363  02BA  3A80               	xorlw	128
  7364  02BB  0020               	movlb	0	; select bank0
  7365  02BC  00D9               	movwf	??_main
  7366  02BD  0021               	movlb	1	; select bank1
  7367  02BE  082B               	movf	((_voltage+1)^(0+128)+2),w
  7368  02BF  3A80               	xorlw	128
  7369  02C0  0020               	movlb	0	; select bank0
  7370  02C1  0259               	subwf	??_main,w
  7371  02C2  1D03               	skipz
  7372  02C3  2AC7               	goto	u4295
  7373  02C4  0021               	movlb	1	; select bank1
  7374  02C5  082A               	movf	(_voltage^(0+128)+2),w
  7375  02C6  0236               	subwf	(_Vref^(0+128)+2),w
  7376  02C7                     u4295:	
  7377  02C7  1803               	skipnc
  7378  02C8  2AD6               	goto	l3444
  7379  02C9                     L4:	
  7380                           
  7381                           ;main.c: 160: {
  7382                           ;main.c: 161: if(dutyCycle7<1023) dutyCycle7+=1;
  7383  02C9  3003               	movlw	3
  7384  02CA  0021               	movlb	1	; select bank1
  7385  02CB  026B               	subwf	(main@dutyCycle7+1)^(0+128),w
  7386  02CC  30FF               	movlw	255
  7387  02CD  1903               	skipnz
  7388  02CE  026A               	subwf	main@dutyCycle7^(0+128),w
  7389  02CF  1803               	skipnc
  7390  02D0  2AF0               	goto	l3450
  7391  02D1  3001               	movlw	1
  7392  02D2  07EA               	addwf	main@dutyCycle7^(0+128),f
  7393  02D3  3000               	movlw	0
  7394  02D4  3DEB               	addwfc	(main@dutyCycle7+1)^(0+128),f
  7395                           
  7396                           ;main.c: 162: }
  7397  02D5  2AF0               	goto	l3450
  7398  02D6                     l3444:	
  7399                           
  7400                           ;main.c: 163: else if(voltage[1]<(int16_t)Vref[1])
  7401  02D6  0021               	movlb	1	; select bank1
  7402  02D7  082B               	movf	((_voltage+1)^(0+128)+2),w
  7403  02D8  3A80               	xorlw	128
  7404  02D9  0020               	movlb	0	; select bank0
  7405  02DA  00D9               	movwf	??_main
  7406  02DB  0021               	movlb	1	; select bank1
  7407  02DC  0837               	movf	((_Vref+1)^(0+128)+2),w
  7408  02DD  3A80               	xorlw	128
  7409  02DE  0020               	movlb	0	; select bank0
  7410  02DF  0259               	subwf	??_main,w
  7411  02E0  1D03               	skipz
  7412  02E1  2AE5               	goto	u4315
  7413  02E2  0021               	movlb	1	; select bank1
  7414  02E3  0836               	movf	(_Vref^(0+128)+2),w
  7415  02E4  022A               	subwf	(_voltage^(0+128)+2),w
  7416  02E5                     u4315:	
  7417  02E5  1803               	skipnc
  7418  02E6  2AF0               	goto	l3450
  7419  02E7                     L5:	
  7420                           
  7421                           ;main.c: 164: {
  7422                           ;main.c: 165: if(dutyCycle7>0) dutyCycle7-=1;;
  7423  02E7  0021               	movlb	1	; select bank1
  7424  02E8  086A               	movf	main@dutyCycle7^(0+128),w
  7425  02E9  046B               	iorwf	(main@dutyCycle7+1)^(0+128),w
  7426  02EA  1903               	btfsc	3,2
  7427  02EB  2AF0               	goto	l3450
  7428  02EC  3001               	movlw	1
  7429  02ED  02EA               	subwf	main@dutyCycle7^(0+128),f
  7430  02EE  3000               	movlw	0
  7431  02EF  3BEB               	subwfb	(main@dutyCycle7+1)^(0+128),f
  7432  02F0                     l3450:	
  7433                           ;main.c: 166: }
  7434                           
  7435                           
  7436                           ;main.c: 168: }
  7437                           ;main.c: 169: PWM6_LoadDutyValue(dutyCycle6);
  7438  02F0  0021               	movlb	1	; select bank1
  7439  02F1  0869               	movf	(main@dutyCycle6+1)^(0+128),w
  7440  02F2  00F1               	movwf	PWM6_LoadDutyValue@dutyCycle6+1
  7441  02F3  0868               	movf	main@dutyCycle6^(0+128),w
  7442  02F4  00F0               	movwf	PWM6_LoadDutyValue@dutyCycle6
  7443  02F5  319E  2669  3180   	fcall	_PWM6_LoadDutyValue
  7444                           
  7445                           ;main.c: 170: PWM7_LoadDutyValue(dutyCycle7);
  7446  02F8  0021               	movlb	1	; select bank1
  7447  02F9  086B               	movf	(main@dutyCycle7+1)^(0+128),w
  7448  02FA  00F1               	movwf	PWM7_LoadDutyValue@dutyCycle7+1
  7449  02FB  086A               	movf	main@dutyCycle7^(0+128),w
  7450  02FC  00F0               	movwf	PWM7_LoadDutyValue@dutyCycle7
  7451  02FD  319E  267F  3180   	fcall	_PWM7_LoadDutyValue
  7452                           
  7453                           ;main.c: 171: fastLoop=0;
  7454  0300  0021               	movlb	1	; select bank1
  7455  0301  01CB               	clrf	main@fastLoop^(0+128)
  7456                           
  7457                           ;main.c: 175: slowLoop+=1;
  7458  0302  3001               	movlw	1
  7459  0303  0020               	movlb	0	; select bank0
  7460  0304  00D9               	movwf	??_main
  7461  0305  0859               	movf	??_main,w
  7462  0306  0021               	movlb	1	; select bank1
  7463  0307  07D9               	addwf	main@slowLoop^(0+128),f
  7464                           
  7465                           ;main.c: 178: menuButton = readButton();
  7466  0308  3194  24E9  3180   	fcall	_readButton
  7467  030B  0020               	movlb	0	; select bank0
  7468  030C  00D9               	movwf	??_main
  7469  030D  0859               	movf	??_main,w
  7470  030E  0021               	movlb	1	; select bank1
  7471  030F  00E0               	movwf	main@menuButton^(0+128)
  7472                           
  7473                           ;main.c: 179: if(menuButton == 2) if(MPPT1>2700)MPPT1-=1;
  7474  0310  3002               	movlw	2
  7475  0311  0660               	xorwf	main@menuButton^(0+128),w
  7476  0312  1D03               	btfss	3,2
  7477  0313  2B26               	goto	l3464
  7478  0314  085D               	movf	(main@MPPT1+1)^(0+128),w
  7479  0315  3A80               	xorlw	128
  7480  0316  0020               	movlb	0	; select bank0
  7481  0317  00D9               	movwf	??_main
  7482  0318  308A               	movlw	138
  7483  0319  0259               	subwf	??_main,w
  7484  031A  1D03               	skipz
  7485  031B  2B1F               	goto	u4345
  7486  031C  308D               	movlw	141
  7487  031D  0021               	movlb	1	; select bank1
  7488  031E  025C               	subwf	main@MPPT1^(0+128),w
  7489  031F                     u4345:	
  7490  031F  1C03               	skipc
  7491  0320  2B26               	goto	l3464
  7492  0321  30FF               	movlw	255
  7493  0322  0021               	movlb	1	; select bank1
  7494  0323  07DC               	addwf	main@MPPT1^(0+128),f
  7495  0324  30FF               	movlw	255
  7496  0325  3DDD               	addwfc	(main@MPPT1+1)^(0+128),f
  7497  0326                     l3464:	
  7498                           
  7499                           ;main.c: 180: if(menuButton == 3)if(MPPT1<3200)MPPT1+=1;
  7500  0326  3003               	movlw	3
  7501  0327  0021               	movlb	1	; select bank1
  7502  0328  0660               	xorwf	main@menuButton^(0+128),w
  7503  0329  1D03               	btfss	3,2
  7504  032A  2B3D               	goto	l3470
  7505  032B  085D               	movf	(main@MPPT1+1)^(0+128),w
  7506  032C  3A80               	xorlw	128
  7507  032D  0020               	movlb	0	; select bank0
  7508  032E  00D9               	movwf	??_main
  7509  032F  308C               	movlw	140
  7510  0330  0259               	subwf	??_main,w
  7511  0331  1D03               	skipz
  7512  0332  2B36               	goto	u4365
  7513  0333  3080               	movlw	128
  7514  0334  0021               	movlb	1	; select bank1
  7515  0335  025C               	subwf	main@MPPT1^(0+128),w
  7516  0336                     u4365:	
  7517  0336  1803               	skipnc
  7518  0337  2B3D               	goto	l3470
  7519  0338  3001               	movlw	1
  7520  0339  0021               	movlb	1	; select bank1
  7521  033A  07DC               	addwf	main@MPPT1^(0+128),f
  7522  033B  3000               	movlw	0
  7523  033C  3DDD               	addwfc	(main@MPPT1+1)^(0+128),f
  7524  033D                     l3470:	
  7525                           
  7526                           ;main.c: 181: if(menuButton == 1)LCDInit();
  7527  033D  0021               	movlb	1	; select bank1
  7528  033E  0360               	decf	main@menuButton^(0+128),w
  7529  033F  1D03               	btfss	3,2
  7530  0340  2B44               	goto	l3474
  7531  0341  319F  27C5  3180   	fcall	_LCDInit
  7532  0344                     l3474:	
  7533                           
  7534                           ;main.c: 183: if(slowLoop>250)
  7535  0344  30FB               	movlw	251
  7536  0345  0021               	movlb	1	; select bank1
  7537  0346  0259               	subwf	main@slowLoop^(0+128),w
  7538  0347  1C03               	skipc
  7539  0348  2872               	goto	l3338
  7540                           
  7541                           ;main.c: 184: {
  7542                           ;main.c: 185: if(current[0]>current[3]*(voltage[3]/voltage[1]*.9))
  7543  0349  082F               	movf	((_voltage+1)^(0+128)+6),w
  7544  034A  00F3               	movwf	___awdiv@dividend+1
  7545  034B  082E               	movf	(_voltage^(0+128)+6),w
  7546  034C  00F2               	movwf	___awdiv@dividend
  7547  034D  082B               	movf	((_voltage+1)^(0+128)+2),w
  7548  034E  00F1               	movwf	___awdiv@divisor+1
  7549  034F  082A               	movf	(_voltage^(0+128)+2),w
  7550  0350  00F0               	movwf	___awdiv@divisor
  7551  0351  3192  2296  3180   	fcall	___awdiv
  7552  0354  0871               	movf	?___awdiv+1,w
  7553  0355  00FA               	movwf	___awtoft@c+1
  7554  0356  0870               	movf	?___awdiv,w
  7555  0357  00F9               	movwf	___awtoft@c
  7556  0358  319F  270C  3180   	fcall	___awtoft
  7557  035B  0879               	movf	?___awtoft,w
  7558  035C  0020               	movlb	0	; select bank0
  7559  035D  00A4               	movwf	___ftmul@f2
  7560  035E  087A               	movf	?___awtoft+1,w
  7561  035F  00A5               	movwf	___ftmul@f2+1
  7562  0360  087B               	movf	?___awtoft+2,w
  7563  0361  00A6               	movwf	___ftmul@f2+2
  7564  0362  3066               	movlw	102
  7565  0363  00A1               	movwf	___ftmul@f1
  7566  0364  3066               	movlw	102
  7567  0365  00A2               	movwf	___ftmul@f1+1
  7568  0366  303F               	movlw	63
  7569  0367  00A3               	movwf	___ftmul@f1+2
  7570  0368  3197  274C  3180   	fcall	___ftmul
  7571  036B  0020               	movlb	0	; select bank0
  7572  036C  0821               	movf	?___ftmul,w
  7573  036D  0021               	movlb	1	; select bank1
  7574  036E  00E5               	movwf	_main$1299^(0+128)
  7575  036F  0020               	movlb	0	; select bank0
  7576  0370  0822               	movf	?___ftmul+1,w
  7577  0371  0021               	movlb	1	; select bank1
  7578  0372  00E6               	movwf	(_main$1299+1)^(0+128)
  7579  0373  0020               	movlb	0	; select bank0
  7580  0374  0823               	movf	?___ftmul+2,w
  7581  0375  0021               	movlb	1	; select bank1
  7582  0376  00E7               	movwf	(_main$1299+2)^(0+128)
  7583                           
  7584                           ;main.c: 184: {
  7585                           ;main.c: 185: if(current[0]>current[3]*(voltage[3]/voltage[1]*.9))
  7586  0377  0865               	movf	_main$1299^(0+128),w
  7587  0378  0020               	movlb	0	; select bank0
  7588  0379  00A1               	movwf	___ftmul@f1
  7589  037A  0021               	movlb	1	; select bank1
  7590  037B  0866               	movf	(_main$1299+1)^(0+128),w
  7591  037C  0020               	movlb	0	; select bank0
  7592  037D  00A2               	movwf	___ftmul@f1+1
  7593  037E  0021               	movlb	1	; select bank1
  7594  037F  0867               	movf	(_main$1299+2)^(0+128),w
  7595  0380  0020               	movlb	0	; select bank0
  7596  0381  00A3               	movwf	___ftmul@f1+2
  7597  0382  0021               	movlb	1	; select bank1
  7598  0383  0827               	movf	((_current+1)^(0+128)+6),w
  7599  0384  00FA               	movwf	___awtoft@c+1
  7600  0385  0826               	movf	(_current^(0+128)+6),w
  7601  0386  00F9               	movwf	___awtoft@c
  7602  0387  319F  270C  3180   	fcall	___awtoft
  7603  038A  0879               	movf	?___awtoft,w
  7604  038B  0020               	movlb	0	; select bank0
  7605  038C  00A4               	movwf	___ftmul@f2
  7606  038D  087A               	movf	?___awtoft+1,w
  7607  038E  00A5               	movwf	___ftmul@f2+1
  7608  038F  087B               	movf	?___awtoft+2,w
  7609  0390  00A6               	movwf	___ftmul@f2+2
  7610  0391  3197  274C  3180   	fcall	___ftmul
  7611  0394  0020               	movlb	0	; select bank0
  7612  0395  0821               	movf	?___ftmul,w
  7613  0396  00B1               	movwf	___ftge@ff1
  7614  0397  0822               	movf	?___ftmul+1,w
  7615  0398  00B2               	movwf	___ftge@ff1+1
  7616  0399  0823               	movf	?___ftmul+2,w
  7617  039A  00B3               	movwf	___ftge@ff1+2
  7618  039B  0021               	movlb	1	; select bank1
  7619  039C  0821               	movf	(_current+1)^(0+128),w
  7620  039D  00FA               	movwf	___awtoft@c+1
  7621  039E  0820               	movf	_current^(0+128),w
  7622  039F  00F9               	movwf	___awtoft@c
  7623  03A0  319F  270C  3180   	fcall	___awtoft
  7624  03A3  0879               	movf	?___awtoft,w
  7625  03A4  0020               	movlb	0	; select bank0
  7626  03A5  00B4               	movwf	___ftge@ff2
  7627  03A6  087A               	movf	?___awtoft+1,w
  7628  03A7  00B5               	movwf	___ftge@ff2+1
  7629  03A8  087B               	movf	?___awtoft+2,w
  7630  03A9  00B6               	movwf	___ftge@ff2+2
  7631  03AA  3191  2193  3180   	fcall	___ftge
  7632  03AD  1803               	btfsc	3,0
  7633  03AE  2BB4               	goto	l3480
  7634                           
  7635                           ;main.c: 186: {
  7636                           ;main.c: 187: largerIOut=current[0];
  7637  03AF  0021               	movlb	1	; select bank1
  7638  03B0  0821               	movf	(_current+1)^(0+128),w
  7639  03B1  00DF               	movwf	(main@largerIOut+1)^(0+128)
  7640  03B2  0820               	movf	_current^(0+128),w
  7641  03B3  2C11               	goto	L1
  7642  03B4                     l3480:	
  7643                           ;main.c: 188: }
  7644                           
  7645                           
  7646                           ;main.c: 189: else
  7647                           ;main.c: 190: {
  7648                           ;main.c: 191: largerIOut=(int16_t)(current[3]*(voltage[3]/voltage[1]*.9));
  7649  03B4  0021               	movlb	1	; select bank1
  7650  03B5  082F               	movf	((_voltage+1)^(0+128)+6),w
  7651  03B6  00F3               	movwf	___awdiv@dividend+1
  7652  03B7  082E               	movf	(_voltage^(0+128)+6),w
  7653  03B8  00F2               	movwf	___awdiv@dividend
  7654  03B9  082B               	movf	((_voltage+1)^(0+128)+2),w
  7655  03BA  00F1               	movwf	___awdiv@divisor+1
  7656  03BB  082A               	movf	(_voltage^(0+128)+2),w
  7657  03BC  00F0               	movwf	___awdiv@divisor
  7658  03BD  3192  2296  3180   	fcall	___awdiv
  7659  03C0  0871               	movf	?___awdiv+1,w
  7660  03C1  00FA               	movwf	___awtoft@c+1
  7661  03C2  0870               	movf	?___awdiv,w
  7662  03C3  00F9               	movwf	___awtoft@c
  7663  03C4  319F  270C  3180   	fcall	___awtoft
  7664  03C7  0879               	movf	?___awtoft,w
  7665  03C8  0020               	movlb	0	; select bank0
  7666  03C9  00A4               	movwf	___ftmul@f2
  7667  03CA  087A               	movf	?___awtoft+1,w
  7668  03CB  00A5               	movwf	___ftmul@f2+1
  7669  03CC  087B               	movf	?___awtoft+2,w
  7670  03CD  00A6               	movwf	___ftmul@f2+2
  7671  03CE  3066               	movlw	102
  7672  03CF  00A1               	movwf	___ftmul@f1
  7673  03D0  3066               	movlw	102
  7674  03D1  00A2               	movwf	___ftmul@f1+1
  7675  03D2  303F               	movlw	63
  7676  03D3  00A3               	movwf	___ftmul@f1+2
  7677  03D4  3197  274C  3180   	fcall	___ftmul
  7678  03D7  0020               	movlb	0	; select bank0
  7679  03D8  0821               	movf	?___ftmul,w
  7680  03D9  0021               	movlb	1	; select bank1
  7681  03DA  00E5               	movwf	_main$1299^(0+128)
  7682  03DB  0020               	movlb	0	; select bank0
  7683  03DC  0822               	movf	?___ftmul+1,w
  7684  03DD  0021               	movlb	1	; select bank1
  7685  03DE  00E6               	movwf	(_main$1299+1)^(0+128)
  7686  03DF  0020               	movlb	0	; select bank0
  7687  03E0  0823               	movf	?___ftmul+2,w
  7688  03E1  0021               	movlb	1	; select bank1
  7689  03E2  00E7               	movwf	(_main$1299+2)^(0+128)
  7690                           
  7691                           ;main.c: 189: else
  7692                           ;main.c: 190: {
  7693                           ;main.c: 191: largerIOut=(int16_t)(current[3]*(voltage[3]/voltage[1]*.9));
  7694  03E3  0827               	movf	((_current+1)^(0+128)+6),w
  7695  03E4  00FA               	movwf	___awtoft@c+1
  7696  03E5  0826               	movf	(_current^(0+128)+6),w
  7697  03E6  00F9               	movwf	___awtoft@c
  7698  03E7  319F  270C  3180   	fcall	___awtoft
  7699  03EA  0879               	movf	?___awtoft,w
  7700  03EB  0020               	movlb	0	; select bank0
  7701  03EC  00A4               	movwf	___ftmul@f2
  7702  03ED  087A               	movf	?___awtoft+1,w
  7703  03EE  00A5               	movwf	___ftmul@f2+1
  7704  03EF  087B               	movf	?___awtoft+2,w
  7705  03F0  00A6               	movwf	___ftmul@f2+2
  7706  03F1  0021               	movlb	1	; select bank1
  7707  03F2  0865               	movf	_main$1299^(0+128),w
  7708  03F3  0020               	movlb	0	; select bank0
  7709  03F4  00A1               	movwf	___ftmul@f1
  7710  03F5  0021               	movlb	1	; select bank1
  7711  03F6  0866               	movf	(_main$1299+1)^(0+128),w
  7712  03F7  0020               	movlb	0	; select bank0
  7713  03F8  00A2               	movwf	___ftmul@f1+1
  7714  03F9  0021               	movlb	1	; select bank1
  7715  03FA  0867               	movf	(_main$1299+2)^(0+128),w
  7716  03FB  0020               	movlb	0	; select bank0
  7717  03FC  00A3               	movwf	___ftmul@f1+2
  7718  03FD  3197  274C  3180   	fcall	___ftmul
  7719  0400  0020               	movlb	0	; select bank0
  7720  0401  0821               	movf	?___ftmul,w
  7721  0402  00B1               	movwf	___fttol@f1
  7722  0403  0822               	movf	?___ftmul+1,w
  7723  0404  00B2               	movwf	___fttol@f1+1
  7724  0405  0823               	movf	?___ftmul+2,w
  7725  0406  00B3               	movwf	___fttol@f1+2
  7726  0407  3195  256C  3180   	fcall	___fttol
  7727  040A  0020               	movlb	0	; select bank0
  7728  040B  0832               	movf	?___fttol+1,w
  7729  040C  0021               	movlb	1	; select bank1
  7730  040D  00DF               	movwf	(main@largerIOut+1)^(0+128)
  7731  040E  0020               	movlb	0	; select bank0
  7732  040F  0831               	movf	?___fttol,w
  7733  0410  0021               	movlb	1	; select bank1
  7734  0411                     L1:	
  7735  0411  00DE               	movwf	main@largerIOut^(0+128)
  7736                           
  7737                           ;main.c: 193: }
  7738                           ;main.c: 195: if(largerIOut>25)
  7739  0412  085F               	movf	(main@largerIOut+1)^(0+128),w
  7740  0413  3A80               	xorlw	128
  7741  0414  0020               	movlb	0	; select bank0
  7742  0415  00D9               	movwf	??_main
  7743  0416  3080               	movlw	128
  7744  0417  0259               	subwf	??_main,w
  7745  0418  1D03               	skipz
  7746  0419  2C1D               	goto	u4405
  7747  041A  301A               	movlw	26
  7748  041B  0021               	movlb	1	; select bank1
  7749  041C  025E               	subwf	main@largerIOut^(0+128),w
  7750  041D                     u4405:	
  7751  041D  1C03               	skipc
  7752  041E  2C71               	goto	l3502
  7753                           
  7754                           ;main.c: 196: {
  7755                           ;main.c: 197: if((uint16_t)largerIOut+5>dutyCycle1)
  7756  041F  0021               	movlb	1	; select bank1
  7757  0420  085E               	movf	main@largerIOut^(0+128),w
  7758  0421  3E05               	addlw	5
  7759  0422  0020               	movlb	0	; select bank0
  7760  0423  00D9               	movwf	??_main
  7761  0424  3000               	movlw	0
  7762  0425  0021               	movlb	1	; select bank1
  7763  0426  3D5F               	addwfc	(main@largerIOut+1)^(0+128),w
  7764  0427  0020               	movlb	0	; select bank0
  7765  0428  00DA               	movwf	??_main+1
  7766  0429  085A               	movf	??_main+1,w
  7767  042A  0021               	movlb	1	; select bank1
  7768  042B  0262               	subwf	(main@dutyCycle1+1)^(0+128),w
  7769  042C  1D03               	skipz
  7770  042D  2C32               	goto	u4415
  7771  042E  0020               	movlb	0	; select bank0
  7772  042F  0859               	movf	??_main,w
  7773  0430  0021               	movlb	1	; select bank1
  7774  0431  0261               	subwf	main@dutyCycle1^(0+128),w
  7775  0432                     u4415:	
  7776  0432  1803               	skipnc
  7777  0433  2C39               	goto	l3488
  7778                           
  7779                           ;main.c: 198: {
  7780                           ;main.c: 199: dutyCycle1+=1;
  7781  0434  3001               	movlw	1
  7782  0435  07E1               	addwf	main@dutyCycle1^(0+128),f
  7783  0436  3000               	movlw	0
  7784  0437  3DE2               	addwfc	(main@dutyCycle1+1)^(0+128),f
  7785                           
  7786                           ;main.c: 200: }
  7787  0438  2C3D               	goto	l3490
  7788  0439                     l3488:	
  7789                           
  7790                           ;main.c: 201: else dutyCycle1-=1;
  7791  0439  3001               	movlw	1
  7792  043A  02E1               	subwf	main@dutyCycle1^(0+128),f
  7793  043B  3000               	movlw	0
  7794  043C  3BE2               	subwfb	(main@dutyCycle1+1)^(0+128),f
  7795  043D                     l3490:	
  7796                           
  7797                           ;main.c: 203: if((uint16_t)largerIOut+5>tempFanOutput)
  7798  043D  085E               	movf	main@largerIOut^(0+128),w
  7799  043E  3E05               	addlw	5
  7800  043F  0020               	movlb	0	; select bank0
  7801  0440  00D9               	movwf	??_main
  7802  0441  3000               	movlw	0
  7803  0442  0021               	movlb	1	; select bank1
  7804  0443  3D5F               	addwfc	(main@largerIOut+1)^(0+128),w
  7805  0444  0020               	movlb	0	; select bank0
  7806  0445  00DA               	movwf	??_main+1
  7807  0446  085A               	movf	??_main+1,w
  7808  0447  0021               	movlb	1	; select bank1
  7809  0448  0264               	subwf	(main@tempFanOutput+1)^(0+128),w
  7810  0449  1D03               	skipz
  7811  044A  2C4F               	goto	u4425
  7812  044B  0020               	movlb	0	; select bank0
  7813  044C  0859               	movf	??_main,w
  7814  044D  0021               	movlb	1	; select bank1
  7815  044E  0263               	subwf	main@tempFanOutput^(0+128),w
  7816  044F                     u4425:	
  7817  044F  1803               	skipnc
  7818  0450  2C5D               	goto	l3496
  7819                           
  7820                           ;main.c: 204: {
  7821                           ;main.c: 205: if(tempFanOutput<75)
  7822  0451  3000               	movlw	0
  7823  0452  0264               	subwf	(main@tempFanOutput+1)^(0+128),w
  7824  0453  304B               	movlw	75
  7825  0454  1903               	skipnz
  7826  0455  0263               	subwf	main@tempFanOutput^(0+128),w
  7827  0456  1803               	skipnc
  7828  0457  2C65               	goto	l121
  7829                           
  7830                           ;main.c: 206: {
  7831                           ;main.c: 207: tempFanOutput+=1;
  7832  0458  3001               	movlw	1
  7833  0459  07E3               	addwf	main@tempFanOutput^(0+128),f
  7834  045A  3000               	movlw	0
  7835  045B  3DE4               	addwfc	(main@tempFanOutput+1)^(0+128),f
  7836                           
  7837                           ;main.c: 208: }
  7838                           ;main.c: 209: }
  7839  045C  2C65               	goto	l121
  7840  045D                     l3496:	
  7841                           
  7842                           ;main.c: 210: else
  7843                           ;main.c: 211: {
  7844                           ;main.c: 212: if(tempFanOutput>0)tempFanOutput-=1;
  7845  045D  0863               	movf	main@tempFanOutput^(0+128),w
  7846  045E  0464               	iorwf	(main@tempFanOutput+1)^(0+128),w
  7847  045F  1903               	btfsc	3,2
  7848  0460  2C65               	goto	l121
  7849  0461  3001               	movlw	1
  7850  0462  02E3               	subwf	main@tempFanOutput^(0+128),f
  7851  0463  3000               	movlw	0
  7852  0464  3BE4               	subwfb	(main@tempFanOutput+1)^(0+128),f
  7853  0465                     l121:	
  7854                           
  7855                           ;main.c: 213: }
  7856                           ;main.c: 215: dutyCycle1=tempFanOutput;
  7857  0465  0864               	movf	(main@tempFanOutput+1)^(0+128),w
  7858  0466  00E2               	movwf	(main@dutyCycle1+1)^(0+128)
  7859  0467  0863               	movf	main@tempFanOutput^(0+128),w
  7860  0468  00E1               	movwf	main@dutyCycle1^(0+128)
  7861                           
  7862                           ;main.c: 216: if(dutyCycle1<19)dutyCycle1=0;
  7863  0469  3000               	movlw	0
  7864  046A  0262               	subwf	(main@dutyCycle1+1)^(0+128),w
  7865  046B  3013               	movlw	19
  7866  046C  1903               	skipnz
  7867  046D  0261               	subwf	main@dutyCycle1^(0+128),w
  7868  046E  1803               	skipnc
  7869  046F  2C74               	goto	l3504
  7870  0470  2C72               	goto	L2
  7871  0471                     l3502:	
  7872                           ;main.c: 217: }
  7873                           
  7874                           
  7875                           ;main.c: 218: else
  7876                           ;main.c: 219: {
  7877                           ;main.c: 220: dutyCycle1=0;
  7878  0471  0021               	movlb	1	; select bank1
  7879  0472                     L2:	
  7880  0472  01E1               	clrf	main@dutyCycle1^(0+128)
  7881  0473  01E2               	clrf	(main@dutyCycle1+1)^(0+128)
  7882  0474                     l3504:	
  7883                           
  7884                           ;main.c: 221: }
  7885                           ;main.c: 222: if(!(RB2))
  7886  0474  0020               	movlb	0	; select bank0
  7887  0475  190D               	btfsc	13,2	;volatile
  7888  0476  2C88               	goto	l3508
  7889                           
  7890                           ;main.c: 223: {
  7891                           ;main.c: 224: dutyCycle1=55;
  7892  0477  3037               	movlw	55
  7893  0478  0021               	movlb	1	; select bank1
  7894  0479  00E1               	movwf	main@dutyCycle1^(0+128)
  7895  047A  3000               	movlw	0
  7896  047B  00E2               	movwf	(main@dutyCycle1^(0+128)+1)
  7897                           
  7898                           ;main.c: 225: batteryState[0]=CHARGE;
  7899  047C  3004               	movlw	4
  7900  047D  0020               	movlb	0	; select bank0
  7901  047E  00D9               	movwf	??_main
  7902  047F  0859               	movf	??_main,w
  7903  0480  0021               	movlb	1	; select bank1
  7904  0481  00C2               	movwf	_batteryState^(0+128)
  7905                           
  7906                           ;main.c: 226: batteryState[1]=CHARGE;
  7907  0482  3004               	movlw	4
  7908  0483  0020               	movlb	0	; select bank0
  7909  0484  00D9               	movwf	??_main
  7910  0485  0859               	movf	??_main,w
  7911  0486  0021               	movlb	1	; select bank1
  7912  0487  00C3               	movwf	(_batteryState^(0+128)+1)
  7913  0488                     l3508:	
  7914                           
  7915                           ;main.c: 227: }
  7916                           ;main.c: 229: PWM1_LoadDutyValue(dutyCycle1);
  7917  0488  0021               	movlb	1	; select bank1
  7918  0489  0862               	movf	(main@dutyCycle1+1)^(0+128),w
  7919  048A  00F1               	movwf	PWM1_LoadDutyValue@dutyCycle1+1
  7920  048B  0861               	movf	main@dutyCycle1^(0+128),w
  7921  048C  00F0               	movwf	PWM1_LoadDutyValue@dutyCycle1
  7922  048D  319E  2653  3180   	fcall	_PWM1_LoadDutyValue
  7923                           
  7924                           ;main.c: 231: ADREF = 0x00;
  7925  0490  0021               	movlb	1	; select bank1
  7926  0491  019A               	clrf	26	;volatile
  7927                           
  7928                           ;main.c: 232: batteryTemp=tempCalc(ADCRead(9));
  7929  0492  3009               	movlw	9
  7930  0493  319E  263E  3180   	fcall	_ADCRead
  7931  0496  0871               	movf	?_ADCRead+1,w
  7932  0497  0020               	movlb	0	; select bank0
  7933  0498  00CF               	movwf	tempCalc@analogValue+1
  7934  0499  0870               	movf	?_ADCRead,w
  7935  049A  00CE               	movwf	tempCalc@analogValue
  7936  049B  3188  20C7  3180   	fcall	_tempCalc
  7937  049E  0020               	movlb	0	; select bank0
  7938  049F  084F               	movf	?_tempCalc+1,w
  7939  04A0  0021               	movlb	1	; select bank1
  7940  04A1  00EE               	movwf	(_batteryTemp+1)^(0+128)
  7941  04A2  0020               	movlb	0	; select bank0
  7942  04A3  084E               	movf	?_tempCalc,w
  7943  04A4  0021               	movlb	1	; select bank1
  7944  04A5  00ED               	movwf	_batteryTemp^(0+128)
  7945                           
  7946                           ;main.c: 233: ADREF = 0x03;
  7947  04A6  3003               	movlw	3
  7948  04A7  009A               	movwf	26	;volatile
  7949                           
  7950                           ;main.c: 235: displayRefresh+=1;
  7951  04A8  3001               	movlw	1
  7952  04A9  0020               	movlb	0	; select bank0
  7953  04AA  00D9               	movwf	??_main
  7954  04AB  0859               	movf	??_main,w
  7955  04AC  0021               	movlb	1	; select bank1
  7956  04AD  07D8               	addwf	main@displayRefresh^(0+128),f
  7957                           
  7958                           ;main.c: 236: if(displayRefresh>80)
  7959  04AE  3051               	movlw	81
  7960  04AF  0258               	subwf	main@displayRefresh^(0+128),w
  7961  04B0  1C03               	skipc
  7962  04B1  2CB7               	goto	l3524
  7963                           
  7964                           ;main.c: 237: {
  7965                           ;main.c: 238: LCDClear();
  7966  04B2  319F  2773  3180   	fcall	_LCDClear
  7967                           
  7968                           ;main.c: 239: displayRefresh=0;
  7969  04B5  0021               	movlb	1	; select bank1
  7970  04B6  01D8               	clrf	main@displayRefresh^(0+128)
  7971  04B7                     l3524:	
  7972                           
  7973                           ;main.c: 241: }
  7974                           ;main.c: 242: Battery_State_Machine(0);
  7975  04B7  3000               	movlw	0
  7976  04B8  318E  2643  3180   	fcall	_Battery_State_Machine
  7977                           
  7978                           ;main.c: 243: Battery_State_Machine(1);
  7979  04BB  3001               	movlw	1
  7980  04BC  318E  2643  3180   	fcall	_Battery_State_Machine
  7981                           
  7982                           ;main.c: 248: { gotoXY(0,0); LCDWriteInt(faultCount,-1, 0, 0);};
  7983  04BF  01F5               	clrf	gotoXY@y
  7984  04C0  3000               	movlw	0
  7985  04C1  319E  262B  3180   	fcall	_gotoXY
  7986  04C4  0021               	movlb	1	; select bank1
  7987  04C5  084D               	movf	(main@faultCount+1)^(0+128),w
  7988  04C6  0020               	movlb	0	; select bank0
  7989  04C7  00C0               	movwf	LCDWriteInt@value+1
  7990  04C8  0021               	movlb	1	; select bank1
  7991  04C9  084C               	movf	main@faultCount^(0+128),w
  7992  04CA  0020               	movlb	0	; select bank0
  7993  04CB  00BF               	movwf	LCDWriteInt@value
  7994  04CC  01C1               	clrf	LCDWriteInt@fieldLength
  7995  04CD  03C1               	decf	LCDWriteInt@fieldLength,f
  7996  04CE  01C2               	clrf	LCDWriteInt@numPlaces
  7997  04CF  01C3               	clrf	LCDWriteInt@sign
  7998  04D0  3188  200E  3180   	fcall	_LCDWriteInt
  7999                           
  8000                           ;main.c: 249: { gotoXY(32,0); LCDWriteInt(faultNotReset,-1, 0, 0);};
  8001  04D3  01F5               	clrf	gotoXY@y
  8002  04D4  3020               	movlw	32
  8003  04D5  319E  262B  3180   	fcall	_gotoXY
  8004  04D8  0021               	movlb	1	; select bank1
  8005  04D9  084F               	movf	(main@faultNotReset+1)^(0+128),w
  8006  04DA  0020               	movlb	0	; select bank0
  8007  04DB  00C0               	movwf	LCDWriteInt@value+1
  8008  04DC  0021               	movlb	1	; select bank1
  8009  04DD  084E               	movf	main@faultNotReset^(0+128),w
  8010  04DE  0020               	movlb	0	; select bank0
  8011  04DF  00BF               	movwf	LCDWriteInt@value
  8012  04E0  01C1               	clrf	LCDWriteInt@fieldLength
  8013  04E1  03C1               	decf	LCDWriteInt@fieldLength,f
  8014  04E2  01C2               	clrf	LCDWriteInt@numPlaces
  8015  04E3  01C3               	clrf	LCDWriteInt@sign
  8016  04E4  3188  200E  3180   	fcall	_LCDWriteInt
  8017                           
  8018                           ;main.c: 258: { gotoXY(0,1); LCDWriteInt(voltage[2],4, 2, 0);};
  8019  04E7  01F5               	clrf	gotoXY@y
  8020  04E8  0AF5               	incf	gotoXY@y,f
  8021  04E9  3000               	movlw	0
  8022  04EA  319E  262B  3180   	fcall	_gotoXY
  8023  04ED  0021               	movlb	1	; select bank1
  8024  04EE  082D               	movf	((_voltage+1)^(0+128)+4),w
  8025  04EF  0020               	movlb	0	; select bank0
  8026  04F0  00C0               	movwf	LCDWriteInt@value+1
  8027  04F1  0021               	movlb	1	; select bank1
  8028  04F2  082C               	movf	(_voltage^(0+128)+4),w
  8029  04F3  0020               	movlb	0	; select bank0
  8030  04F4  00BF               	movwf	LCDWriteInt@value
  8031  04F5  3004               	movlw	4
  8032  04F6  00D9               	movwf	??_main
  8033  04F7  0859               	movf	??_main,w
  8034  04F8  00C1               	movwf	LCDWriteInt@fieldLength
  8035  04F9  3002               	movlw	2
  8036  04FA  00DA               	movwf	??_main+1
  8037  04FB  085A               	movf	??_main+1,w
  8038  04FC  00C2               	movwf	LCDWriteInt@numPlaces
  8039  04FD  01C3               	clrf	LCDWriteInt@sign
  8040  04FE  3188  200E  3180   	fcall	_LCDWriteInt
  8041                           
  8042                           ;main.c: 260: LCDWriteCharacter('V');
  8043  0501  3056               	movlw	86
  8044  0502  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8045                           
  8046                           ;main.c: 262: { gotoXY(26,1); LCDWriteInt(voltage[0],4, 2, 0);};
  8047  0505  01F5               	clrf	gotoXY@y
  8048  0506  0AF5               	incf	gotoXY@y,f
  8049  0507  301A               	movlw	26
  8050  0508  319E  262B  3180   	fcall	_gotoXY
  8051  050B  0021               	movlb	1	; select bank1
  8052  050C  0829               	movf	(_voltage+1)^(0+128),w
  8053  050D  0020               	movlb	0	; select bank0
  8054  050E  00C0               	movwf	LCDWriteInt@value+1
  8055  050F  0021               	movlb	1	; select bank1
  8056  0510  0828               	movf	_voltage^(0+128),w
  8057  0511  0020               	movlb	0	; select bank0
  8058  0512  00BF               	movwf	LCDWriteInt@value
  8059  0513  3004               	movlw	4
  8060  0514  00D9               	movwf	??_main
  8061  0515  0859               	movf	??_main,w
  8062  0516  00C1               	movwf	LCDWriteInt@fieldLength
  8063  0517  3002               	movlw	2
  8064  0518  00DA               	movwf	??_main+1
  8065  0519  085A               	movf	??_main+1,w
  8066  051A  00C2               	movwf	LCDWriteInt@numPlaces
  8067  051B  01C3               	clrf	LCDWriteInt@sign
  8068  051C  3188  200E  3180   	fcall	_LCDWriteInt
  8069                           
  8070                           ;main.c: 264: LCDWriteCharacter('V');
  8071  051F  3056               	movlw	86
  8072  0520  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8073                           
  8074                           ;main.c: 266: { gotoXY(52,1); LCDWriteInt(Vref[0],4, 2, 0);};
  8075  0523  01F5               	clrf	gotoXY@y
  8076  0524  0AF5               	incf	gotoXY@y,f
  8077  0525  3034               	movlw	52
  8078  0526  319E  262B  3180   	fcall	_gotoXY
  8079  0529  0021               	movlb	1	; select bank1
  8080  052A  0835               	movf	(_Vref+1)^(0+128),w
  8081  052B  0020               	movlb	0	; select bank0
  8082  052C  00C0               	movwf	LCDWriteInt@value+1
  8083  052D  0021               	movlb	1	; select bank1
  8084  052E  0834               	movf	_Vref^(0+128),w
  8085  052F  0020               	movlb	0	; select bank0
  8086  0530  00BF               	movwf	LCDWriteInt@value
  8087  0531  3004               	movlw	4
  8088  0532  00D9               	movwf	??_main
  8089  0533  0859               	movf	??_main,w
  8090  0534  00C1               	movwf	LCDWriteInt@fieldLength
  8091  0535  3002               	movlw	2
  8092  0536  00DA               	movwf	??_main+1
  8093  0537  085A               	movf	??_main+1,w
  8094  0538  00C2               	movwf	LCDWriteInt@numPlaces
  8095  0539  01C3               	clrf	LCDWriteInt@sign
  8096  053A  3188  200E  3180   	fcall	_LCDWriteInt
  8097                           
  8098                           ;main.c: 267: LCDWriteCharacter('V');
  8099  053D  3056               	movlw	86
  8100  053E  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8101                           
  8102                           ;main.c: 269: { gotoXY(80,1); LCDWriteInt(Imode[0],1, 0, 0);};
  8103  0541  01F5               	clrf	gotoXY@y
  8104  0542  0AF5               	incf	gotoXY@y,f
  8105  0543  3050               	movlw	80
  8106  0544  319E  262B  3180   	fcall	_gotoXY
  8107  0547  0021               	movlb	1	; select bank1
  8108  0548  083C               	movf	_Imode^(0+128),w
  8109  0549  0020               	movlb	0	; select bank0
  8110  054A  00BF               	movwf	LCDWriteInt@value
  8111  054B  01C0               	clrf	LCDWriteInt@value+1
  8112  054C  1BBF               	btfsc	LCDWriteInt@value,7
  8113  054D  03C0               	decf	LCDWriteInt@value+1,f
  8114  054E  01C1               	clrf	LCDWriteInt@fieldLength
  8115  054F  0AC1               	incf	LCDWriteInt@fieldLength,f
  8116  0550  01C2               	clrf	LCDWriteInt@numPlaces
  8117  0551  01C3               	clrf	LCDWriteInt@sign
  8118  0552  3188  200E  3180   	fcall	_LCDWriteInt
  8119                           
  8120                           ;main.c: 272: { gotoXY(0,2); LCDWriteInt(current[2],3, 1, 0);};
  8121  0555  3002               	movlw	2
  8122  0556  0020               	movlb	0	; select bank0
  8123  0557  00D9               	movwf	??_main
  8124  0558  0859               	movf	??_main,w
  8125  0559  00F5               	movwf	gotoXY@y
  8126  055A  3000               	movlw	0
  8127  055B  319E  262B  3180   	fcall	_gotoXY
  8128  055E  0021               	movlb	1	; select bank1
  8129  055F  0825               	movf	((_current+1)^(0+128)+4),w
  8130  0560  0020               	movlb	0	; select bank0
  8131  0561  00C0               	movwf	LCDWriteInt@value+1
  8132  0562  0021               	movlb	1	; select bank1
  8133  0563  0824               	movf	(_current^(0+128)+4),w
  8134  0564  0020               	movlb	0	; select bank0
  8135  0565  00BF               	movwf	LCDWriteInt@value
  8136  0566  3003               	movlw	3
  8137  0567  00D9               	movwf	??_main
  8138  0568  0859               	movf	??_main,w
  8139  0569  00C1               	movwf	LCDWriteInt@fieldLength
  8140  056A  01C2               	clrf	LCDWriteInt@numPlaces
  8141  056B  0AC2               	incf	LCDWriteInt@numPlaces,f
  8142  056C  01C3               	clrf	LCDWriteInt@sign
  8143  056D  3188  200E  3180   	fcall	_LCDWriteInt
  8144                           
  8145                           ;main.c: 273: LCDWriteCharacter('A');
  8146  0570  3041               	movlw	65
  8147  0571  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8148                           
  8149                           ;main.c: 276: { gotoXY(26,2); LCDWriteInt(current[0],3, 1, 0);};
  8150  0574  3002               	movlw	2
  8151  0575  0020               	movlb	0	; select bank0
  8152  0576  00D9               	movwf	??_main
  8153  0577  0859               	movf	??_main,w
  8154  0578  00F5               	movwf	gotoXY@y
  8155  0579  301A               	movlw	26
  8156  057A  319E  262B  3180   	fcall	_gotoXY
  8157  057D  0021               	movlb	1	; select bank1
  8158  057E  0821               	movf	(_current+1)^(0+128),w
  8159  057F  0020               	movlb	0	; select bank0
  8160  0580  00C0               	movwf	LCDWriteInt@value+1
  8161  0581  0021               	movlb	1	; select bank1
  8162  0582  0820               	movf	_current^(0+128),w
  8163  0583  0020               	movlb	0	; select bank0
  8164  0584  00BF               	movwf	LCDWriteInt@value
  8165  0585  3003               	movlw	3
  8166  0586  00D9               	movwf	??_main
  8167  0587  0859               	movf	??_main,w
  8168  0588  00C1               	movwf	LCDWriteInt@fieldLength
  8169  0589  01C2               	clrf	LCDWriteInt@numPlaces
  8170  058A  0AC2               	incf	LCDWriteInt@numPlaces,f
  8171  058B  01C3               	clrf	LCDWriteInt@sign
  8172  058C  3188  200E  3180   	fcall	_LCDWriteInt
  8173                           
  8174                           ;main.c: 277: LCDWriteCharacter('A');
  8175  058F  3041               	movlw	65
  8176  0590  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8177                           
  8178                           ;main.c: 279: { gotoXY(52,2); LCDWriteInt(Iref[0],3, 1, 0);};
  8179  0593  3002               	movlw	2
  8180  0594  0020               	movlb	0	; select bank0
  8181  0595  00D9               	movwf	??_main
  8182  0596  0859               	movf	??_main,w
  8183  0597  00F5               	movwf	gotoXY@y
  8184  0598  3034               	movlw	52
  8185  0599  319E  262B  3180   	fcall	_gotoXY
  8186  059C  0021               	movlb	1	; select bank1
  8187  059D  0831               	movf	(_Iref+1)^(0+128),w
  8188  059E  0020               	movlb	0	; select bank0
  8189  059F  00C0               	movwf	LCDWriteInt@value+1
  8190  05A0  0021               	movlb	1	; select bank1
  8191  05A1  0830               	movf	_Iref^(0+128),w
  8192  05A2  0020               	movlb	0	; select bank0
  8193  05A3  00BF               	movwf	LCDWriteInt@value
  8194  05A4  3003               	movlw	3
  8195  05A5  00D9               	movwf	??_main
  8196  05A6  0859               	movf	??_main,w
  8197  05A7  00C1               	movwf	LCDWriteInt@fieldLength
  8198  05A8  01C2               	clrf	LCDWriteInt@numPlaces
  8199  05A9  0AC2               	incf	LCDWriteInt@numPlaces,f
  8200  05AA  01C3               	clrf	LCDWriteInt@sign
  8201  05AB  3188  200E  3180   	fcall	_LCDWriteInt
  8202                           
  8203                           ;main.c: 280: LCDWriteCharacter('A');
  8204  05AE  3041               	movlw	65
  8205  05AF  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8206                           
  8207                           ;main.c: 282: { gotoXY(80,2); LCDWriteInt(batteryState[0],1, 0, 0);};
  8208  05B2  3002               	movlw	2
  8209  05B3  0020               	movlb	0	; select bank0
  8210  05B4  00D9               	movwf	??_main
  8211  05B5  0859               	movf	??_main,w
  8212  05B6  00F5               	movwf	gotoXY@y
  8213  05B7  3050               	movlw	80
  8214  05B8  319E  262B  3180   	fcall	_gotoXY
  8215  05BB  0021               	movlb	1	; select bank1
  8216  05BC  0842               	movf	_batteryState^(0+128),w
  8217  05BD  0020               	movlb	0	; select bank0
  8218  05BE  00D9               	movwf	??_main
  8219  05BF  01DA               	clrf	??_main+1
  8220  05C0  0859               	movf	??_main,w
  8221  05C1  00BF               	movwf	LCDWriteInt@value
  8222  05C2  085A               	movf	??_main+1,w
  8223  05C3  00C0               	movwf	LCDWriteInt@value+1
  8224  05C4  01C1               	clrf	LCDWriteInt@fieldLength
  8225  05C5  0AC1               	incf	LCDWriteInt@fieldLength,f
  8226  05C6  01C2               	clrf	LCDWriteInt@numPlaces
  8227  05C7  01C3               	clrf	LCDWriteInt@sign
  8228  05C8  3188  200E  3180   	fcall	_LCDWriteInt
  8229                           
  8230                           ;main.c: 284: { gotoXY(0,3); LCDWriteInt(voltage[3],4, 2, 0);};
  8231  05CB  3003               	movlw	3
  8232  05CC  0020               	movlb	0	; select bank0
  8233  05CD  00D9               	movwf	??_main
  8234  05CE  0859               	movf	??_main,w
  8235  05CF  00F5               	movwf	gotoXY@y
  8236  05D0  3000               	movlw	0
  8237  05D1  319E  262B  3180   	fcall	_gotoXY
  8238  05D4  0021               	movlb	1	; select bank1
  8239  05D5  082F               	movf	((_voltage+1)^(0+128)+6),w
  8240  05D6  0020               	movlb	0	; select bank0
  8241  05D7  00C0               	movwf	LCDWriteInt@value+1
  8242  05D8  0021               	movlb	1	; select bank1
  8243  05D9  082E               	movf	(_voltage^(0+128)+6),w
  8244  05DA  0020               	movlb	0	; select bank0
  8245  05DB  00BF               	movwf	LCDWriteInt@value
  8246  05DC  3004               	movlw	4
  8247  05DD  00D9               	movwf	??_main
  8248  05DE  0859               	movf	??_main,w
  8249  05DF  00C1               	movwf	LCDWriteInt@fieldLength
  8250  05E0  3002               	movlw	2
  8251  05E1  00DA               	movwf	??_main+1
  8252  05E2  085A               	movf	??_main+1,w
  8253  05E3  00C2               	movwf	LCDWriteInt@numPlaces
  8254  05E4  01C3               	clrf	LCDWriteInt@sign
  8255  05E5  3188  200E  3180   	fcall	_LCDWriteInt
  8256                           
  8257                           ;main.c: 286: LCDWriteCharacter('V');
  8258  05E8  3056               	movlw	86
  8259  05E9  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8260                           
  8261                           ;main.c: 288: { gotoXY(26,3); LCDWriteInt(voltage[1],4, 2, 0);};
  8262  05EC  3003               	movlw	3
  8263  05ED  0020               	movlb	0	; select bank0
  8264  05EE  00D9               	movwf	??_main
  8265  05EF  0859               	movf	??_main,w
  8266  05F0  00F5               	movwf	gotoXY@y
  8267  05F1  301A               	movlw	26
  8268  05F2  319E  262B  3180   	fcall	_gotoXY
  8269  05F5  0021               	movlb	1	; select bank1
  8270  05F6  082B               	movf	((_voltage+1)^(0+128)+2),w
  8271  05F7  0020               	movlb	0	; select bank0
  8272  05F8  00C0               	movwf	LCDWriteInt@value+1
  8273  05F9  0021               	movlb	1	; select bank1
  8274  05FA  082A               	movf	(_voltage^(0+128)+2),w
  8275  05FB  0020               	movlb	0	; select bank0
  8276  05FC  00BF               	movwf	LCDWriteInt@value
  8277  05FD  3004               	movlw	4
  8278  05FE  00D9               	movwf	??_main
  8279  05FF  0859               	movf	??_main,w
  8280  0600  00C1               	movwf	LCDWriteInt@fieldLength
  8281  0601  3002               	movlw	2
  8282  0602  00DA               	movwf	??_main+1
  8283  0603  085A               	movf	??_main+1,w
  8284  0604  00C2               	movwf	LCDWriteInt@numPlaces
  8285  0605  01C3               	clrf	LCDWriteInt@sign
  8286  0606  3188  200E  3180   	fcall	_LCDWriteInt
  8287                           
  8288                           ;main.c: 290: LCDWriteCharacter('V');
  8289  0609  3056               	movlw	86
  8290  060A  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8291                           
  8292                           ;main.c: 292: { gotoXY(52,3); LCDWriteInt(Vref[1],4, 2, 0);};
  8293  060D  3003               	movlw	3
  8294  060E  0020               	movlb	0	; select bank0
  8295  060F  00D9               	movwf	??_main
  8296  0610  0859               	movf	??_main,w
  8297  0611  00F5               	movwf	gotoXY@y
  8298  0612  3034               	movlw	52
  8299  0613  319E  262B  3180   	fcall	_gotoXY
  8300  0616  0021               	movlb	1	; select bank1
  8301  0617  0837               	movf	((_Vref+1)^(0+128)+2),w
  8302  0618  0020               	movlb	0	; select bank0
  8303  0619  00C0               	movwf	LCDWriteInt@value+1
  8304  061A  0021               	movlb	1	; select bank1
  8305  061B  0836               	movf	(_Vref^(0+128)+2),w
  8306  061C  0020               	movlb	0	; select bank0
  8307  061D  00BF               	movwf	LCDWriteInt@value
  8308  061E  3004               	movlw	4
  8309  061F  00D9               	movwf	??_main
  8310  0620  0859               	movf	??_main,w
  8311  0621  00C1               	movwf	LCDWriteInt@fieldLength
  8312  0622  3002               	movlw	2
  8313  0623  00DA               	movwf	??_main+1
  8314  0624  085A               	movf	??_main+1,w
  8315  0625  00C2               	movwf	LCDWriteInt@numPlaces
  8316  0626  01C3               	clrf	LCDWriteInt@sign
  8317  0627  3188  200E  3180   	fcall	_LCDWriteInt
  8318                           
  8319                           ;main.c: 293: LCDWriteCharacter('V');
  8320  062A  3056               	movlw	86
  8321  062B  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8322                           
  8323                           ;main.c: 295: { gotoXY(80,3); LCDWriteInt(Imode[1],1, 0, 0);};
  8324  062E  3003               	movlw	3
  8325  062F  0020               	movlb	0	; select bank0
  8326  0630  00D9               	movwf	??_main
  8327  0631  0859               	movf	??_main,w
  8328  0632  00F5               	movwf	gotoXY@y
  8329  0633  3050               	movlw	80
  8330  0634  319E  262B  3180   	fcall	_gotoXY
  8331  0637  0021               	movlb	1	; select bank1
  8332  0638  083D               	movf	(_Imode^(0+128)+1),w
  8333  0639  0020               	movlb	0	; select bank0
  8334  063A  00BF               	movwf	LCDWriteInt@value
  8335  063B  01C0               	clrf	LCDWriteInt@value+1
  8336  063C  1BBF               	btfsc	LCDWriteInt@value,7
  8337  063D  03C0               	decf	LCDWriteInt@value+1,f
  8338  063E  01C1               	clrf	LCDWriteInt@fieldLength
  8339  063F  0AC1               	incf	LCDWriteInt@fieldLength,f
  8340  0640  01C2               	clrf	LCDWriteInt@numPlaces
  8341  0641  01C3               	clrf	LCDWriteInt@sign
  8342  0642  3188  200E  3180   	fcall	_LCDWriteInt
  8343                           
  8344                           ;main.c: 305: { gotoXY(0,4); LCDWriteInt(current[3],3, 1, 0);};
  8345  0645  3004               	movlw	4
  8346  0646  0020               	movlb	0	; select bank0
  8347  0647  00D9               	movwf	??_main
  8348  0648  0859               	movf	??_main,w
  8349  0649  00F5               	movwf	gotoXY@y
  8350  064A  3000               	movlw	0
  8351  064B  319E  262B  3180   	fcall	_gotoXY
  8352  064E  0021               	movlb	1	; select bank1
  8353  064F  0827               	movf	((_current+1)^(0+128)+6),w
  8354  0650  0020               	movlb	0	; select bank0
  8355  0651  00C0               	movwf	LCDWriteInt@value+1
  8356  0652  0021               	movlb	1	; select bank1
  8357  0653  0826               	movf	(_current^(0+128)+6),w
  8358  0654  0020               	movlb	0	; select bank0
  8359  0655  00BF               	movwf	LCDWriteInt@value
  8360  0656  3003               	movlw	3
  8361  0657  00D9               	movwf	??_main
  8362  0658  0859               	movf	??_main,w
  8363  0659  00C1               	movwf	LCDWriteInt@fieldLength
  8364  065A  01C2               	clrf	LCDWriteInt@numPlaces
  8365  065B  0AC2               	incf	LCDWriteInt@numPlaces,f
  8366  065C  01C3               	clrf	LCDWriteInt@sign
  8367  065D  3188  200E  3180   	fcall	_LCDWriteInt
  8368                           
  8369                           ;main.c: 306: LCDWriteCharacter('A');
  8370  0660  3041               	movlw	65
  8371  0661  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8372                           
  8373                           ;main.c: 308: { gotoXY(26,4); LCDWriteInt((int16_t)(current[3]*(voltage[3]/voltage[1]*.9
      +                          )),3, 1, 0);};
  8374  0664  3004               	movlw	4
  8375  0665  0020               	movlb	0	; select bank0
  8376  0666  00D9               	movwf	??_main
  8377  0667  0859               	movf	??_main,w
  8378  0668  00F5               	movwf	gotoXY@y
  8379  0669  301A               	movlw	26
  8380  066A  319E  262B  3180   	fcall	_gotoXY
  8381  066D  0021               	movlb	1	; select bank1
  8382  066E  082F               	movf	((_voltage+1)^(0+128)+6),w
  8383  066F  00F3               	movwf	___awdiv@dividend+1
  8384  0670  082E               	movf	(_voltage^(0+128)+6),w
  8385  0671  00F2               	movwf	___awdiv@dividend
  8386  0672  082B               	movf	((_voltage+1)^(0+128)+2),w
  8387  0673  00F1               	movwf	___awdiv@divisor+1
  8388  0674  082A               	movf	(_voltage^(0+128)+2),w
  8389  0675  00F0               	movwf	___awdiv@divisor
  8390  0676  3192  2296  3180   	fcall	___awdiv
  8391  0679  0871               	movf	?___awdiv+1,w
  8392  067A  00FA               	movwf	___awtoft@c+1
  8393  067B  0870               	movf	?___awdiv,w
  8394  067C  00F9               	movwf	___awtoft@c
  8395  067D  319F  270C  3180   	fcall	___awtoft
  8396  0680  0879               	movf	?___awtoft,w
  8397  0681  0020               	movlb	0	; select bank0
  8398  0682  00A4               	movwf	___ftmul@f2
  8399  0683  087A               	movf	?___awtoft+1,w
  8400  0684  00A5               	movwf	___ftmul@f2+1
  8401  0685  087B               	movf	?___awtoft+2,w
  8402  0686  00A6               	movwf	___ftmul@f2+2
  8403  0687  3066               	movlw	102
  8404  0688  00A1               	movwf	___ftmul@f1
  8405  0689  3066               	movlw	102
  8406  068A  00A2               	movwf	___ftmul@f1+1
  8407  068B  303F               	movlw	63
  8408  068C  00A3               	movwf	___ftmul@f1+2
  8409  068D  3197  274C  3180   	fcall	___ftmul
  8410  0690  0020               	movlb	0	; select bank0
  8411  0691  0821               	movf	?___ftmul,w
  8412  0692  0021               	movlb	1	; select bank1
  8413  0693  00E5               	movwf	_main$1299^(0+128)
  8414  0694  0020               	movlb	0	; select bank0
  8415  0695  0822               	movf	?___ftmul+1,w
  8416  0696  0021               	movlb	1	; select bank1
  8417  0697  00E6               	movwf	(_main$1299+1)^(0+128)
  8418  0698  0020               	movlb	0	; select bank0
  8419  0699  0823               	movf	?___ftmul+2,w
  8420  069A  0021               	movlb	1	; select bank1
  8421  069B  00E7               	movwf	(_main$1299+2)^(0+128)
  8422  069C  0827               	movf	((_current+1)^(0+128)+6),w
  8423  069D  00FA               	movwf	___awtoft@c+1
  8424  069E  0826               	movf	(_current^(0+128)+6),w
  8425  069F  00F9               	movwf	___awtoft@c
  8426  06A0  319F  270C  3180   	fcall	___awtoft
  8427  06A3  0879               	movf	?___awtoft,w
  8428  06A4  0020               	movlb	0	; select bank0
  8429  06A5  00A4               	movwf	___ftmul@f2
  8430  06A6  087A               	movf	?___awtoft+1,w
  8431  06A7  00A5               	movwf	___ftmul@f2+1
  8432  06A8  087B               	movf	?___awtoft+2,w
  8433  06A9  00A6               	movwf	___ftmul@f2+2
  8434  06AA  0021               	movlb	1	; select bank1
  8435  06AB  0865               	movf	_main$1299^(0+128),w
  8436  06AC  0020               	movlb	0	; select bank0
  8437  06AD  00A1               	movwf	___ftmul@f1
  8438  06AE  0021               	movlb	1	; select bank1
  8439  06AF  0866               	movf	(_main$1299+1)^(0+128),w
  8440  06B0  0020               	movlb	0	; select bank0
  8441  06B1  00A2               	movwf	___ftmul@f1+1
  8442  06B2  0021               	movlb	1	; select bank1
  8443  06B3  0867               	movf	(_main$1299+2)^(0+128),w
  8444  06B4  0020               	movlb	0	; select bank0
  8445  06B5  00A3               	movwf	___ftmul@f1+2
  8446  06B6  3197  274C  3180   	fcall	___ftmul
  8447  06B9  0020               	movlb	0	; select bank0
  8448  06BA  0821               	movf	?___ftmul,w
  8449  06BB  00B1               	movwf	___fttol@f1
  8450  06BC  0822               	movf	?___ftmul+1,w
  8451  06BD  00B2               	movwf	___fttol@f1+1
  8452  06BE  0823               	movf	?___ftmul+2,w
  8453  06BF  00B3               	movwf	___fttol@f1+2
  8454  06C0  3195  256C  3180   	fcall	___fttol
  8455  06C3  0020               	movlb	0	; select bank0
  8456  06C4  0832               	movf	?___fttol+1,w
  8457  06C5  00C0               	movwf	LCDWriteInt@value+1
  8458  06C6  0831               	movf	?___fttol,w
  8459  06C7  00BF               	movwf	LCDWriteInt@value
  8460  06C8  3003               	movlw	3
  8461  06C9  00D9               	movwf	??_main
  8462  06CA  0859               	movf	??_main,w
  8463  06CB  00C1               	movwf	LCDWriteInt@fieldLength
  8464  06CC  01C2               	clrf	LCDWriteInt@numPlaces
  8465  06CD  0AC2               	incf	LCDWriteInt@numPlaces,f
  8466  06CE  01C3               	clrf	LCDWriteInt@sign
  8467  06CF  3188  200E  3180   	fcall	_LCDWriteInt
  8468                           
  8469                           ;main.c: 310: LCDWriteCharacter('A');
  8470  06D2  3041               	movlw	65
  8471  06D3  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8472                           
  8473                           ;main.c: 312: { gotoXY(52,4); LCDWriteInt(Iref[1],3, 1, 0);};
  8474  06D6  3004               	movlw	4
  8475  06D7  0020               	movlb	0	; select bank0
  8476  06D8  00D9               	movwf	??_main
  8477  06D9  0859               	movf	??_main,w
  8478  06DA  00F5               	movwf	gotoXY@y
  8479  06DB  3034               	movlw	52
  8480  06DC  319E  262B  3180   	fcall	_gotoXY
  8481  06DF  0021               	movlb	1	; select bank1
  8482  06E0  0833               	movf	((_Iref+1)^(0+128)+2),w
  8483  06E1  0020               	movlb	0	; select bank0
  8484  06E2  00C0               	movwf	LCDWriteInt@value+1
  8485  06E3  0021               	movlb	1	; select bank1
  8486  06E4  0832               	movf	(_Iref^(0+128)+2),w
  8487  06E5  0020               	movlb	0	; select bank0
  8488  06E6  00BF               	movwf	LCDWriteInt@value
  8489  06E7  3003               	movlw	3
  8490  06E8  00D9               	movwf	??_main
  8491  06E9  0859               	movf	??_main,w
  8492  06EA  00C1               	movwf	LCDWriteInt@fieldLength
  8493  06EB  01C2               	clrf	LCDWriteInt@numPlaces
  8494  06EC  0AC2               	incf	LCDWriteInt@numPlaces,f
  8495  06ED  01C3               	clrf	LCDWriteInt@sign
  8496  06EE  3188  200E  3180   	fcall	_LCDWriteInt
  8497                           
  8498                           ;main.c: 313: LCDWriteCharacter('A');
  8499  06F1  3041               	movlw	65
  8500  06F2  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8501                           
  8502                           ;main.c: 315: { gotoXY(80,4); LCDWriteInt(batteryState[1],1, 0, 0);};
  8503  06F5  3004               	movlw	4
  8504  06F6  0020               	movlb	0	; select bank0
  8505  06F7  00D9               	movwf	??_main
  8506  06F8  0859               	movf	??_main,w
  8507  06F9  00F5               	movwf	gotoXY@y
  8508  06FA  3050               	movlw	80
  8509  06FB  319E  262B  3180   	fcall	_gotoXY
  8510  06FE  0021               	movlb	1	; select bank1
  8511  06FF  0843               	movf	(_batteryState^(0+128)+1),w
  8512  0700  0020               	movlb	0	; select bank0
  8513  0701  00D9               	movwf	??_main
  8514  0702  01DA               	clrf	??_main+1
  8515  0703  0859               	movf	??_main,w
  8516  0704  00BF               	movwf	LCDWriteInt@value
  8517  0705  085A               	movf	??_main+1,w
  8518  0706  00C0               	movwf	LCDWriteInt@value+1
  8519  0707  01C1               	clrf	LCDWriteInt@fieldLength
  8520  0708  0AC1               	incf	LCDWriteInt@fieldLength,f
  8521  0709  01C2               	clrf	LCDWriteInt@numPlaces
  8522  070A  01C3               	clrf	LCDWriteInt@sign
  8523  070B  3188  200E  3180   	fcall	_LCDWriteInt
  8524                           
  8525                           ;main.c: 319: { gotoXY(0,5); LCDWriteInt(dutyCycle6,4, 0, 0);};
  8526  070E  3005               	movlw	5
  8527  070F  0020               	movlb	0	; select bank0
  8528  0710  00D9               	movwf	??_main
  8529  0711  0859               	movf	??_main,w
  8530  0712  00F5               	movwf	gotoXY@y
  8531  0713  3000               	movlw	0
  8532  0714  319E  262B  3180   	fcall	_gotoXY
  8533  0717  0021               	movlb	1	; select bank1
  8534  0718  0869               	movf	(main@dutyCycle6+1)^(0+128),w
  8535  0719  0020               	movlb	0	; select bank0
  8536  071A  00C0               	movwf	LCDWriteInt@value+1
  8537  071B  0021               	movlb	1	; select bank1
  8538  071C  0868               	movf	main@dutyCycle6^(0+128),w
  8539  071D  0020               	movlb	0	; select bank0
  8540  071E  00BF               	movwf	LCDWriteInt@value
  8541  071F  3004               	movlw	4
  8542  0720  00D9               	movwf	??_main
  8543  0721  0859               	movf	??_main,w
  8544  0722  00C1               	movwf	LCDWriteInt@fieldLength
  8545  0723  01C2               	clrf	LCDWriteInt@numPlaces
  8546  0724  01C3               	clrf	LCDWriteInt@sign
  8547  0725  3188  200E  3180   	fcall	_LCDWriteInt
  8548                           
  8549                           ;main.c: 320: { gotoXY(18,5); LCDWriteInt(VHoldMode[0],1, 0, 0);};
  8550  0728  3005               	movlw	5
  8551  0729  0020               	movlb	0	; select bank0
  8552  072A  00D9               	movwf	??_main
  8553  072B  0859               	movf	??_main,w
  8554  072C  00F5               	movwf	gotoXY@y
  8555  072D  3012               	movlw	18
  8556  072E  319E  262B  3180   	fcall	_gotoXY
  8557  0731  0021               	movlb	1	; select bank1
  8558  0732  0840               	movf	_VHoldMode^(0+128),w
  8559  0733  0020               	movlb	0	; select bank0
  8560  0734  00BF               	movwf	LCDWriteInt@value
  8561  0735  01C0               	clrf	LCDWriteInt@value+1
  8562  0736  1BBF               	btfsc	LCDWriteInt@value,7
  8563  0737  03C0               	decf	LCDWriteInt@value+1,f
  8564  0738  01C1               	clrf	LCDWriteInt@fieldLength
  8565  0739  0AC1               	incf	LCDWriteInt@fieldLength,f
  8566  073A  01C2               	clrf	LCDWriteInt@numPlaces
  8567  073B  01C3               	clrf	LCDWriteInt@sign
  8568  073C  3188  200E  3180   	fcall	_LCDWriteInt
  8569                           
  8570                           ;main.c: 321: LCDWriteCharacter(' ');
  8571  073F  3020               	movlw	32
  8572  0740  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8573                           
  8574                           ;main.c: 322: { gotoXY(28,5); LCDWriteInt(dutyCycle7,4, 0, 0);};
  8575  0743  3005               	movlw	5
  8576  0744  0020               	movlb	0	; select bank0
  8577  0745  00D9               	movwf	??_main
  8578  0746  0859               	movf	??_main,w
  8579  0747  00F5               	movwf	gotoXY@y
  8580  0748  301C               	movlw	28
  8581  0749  319E  262B  3180   	fcall	_gotoXY
  8582  074C  0021               	movlb	1	; select bank1
  8583  074D  086B               	movf	(main@dutyCycle7+1)^(0+128),w
  8584  074E  0020               	movlb	0	; select bank0
  8585  074F  00C0               	movwf	LCDWriteInt@value+1
  8586  0750  0021               	movlb	1	; select bank1
  8587  0751  086A               	movf	main@dutyCycle7^(0+128),w
  8588  0752  0020               	movlb	0	; select bank0
  8589  0753  00BF               	movwf	LCDWriteInt@value
  8590  0754  3004               	movlw	4
  8591  0755  00D9               	movwf	??_main
  8592  0756  0859               	movf	??_main,w
  8593  0757  00C1               	movwf	LCDWriteInt@fieldLength
  8594  0758  01C2               	clrf	LCDWriteInt@numPlaces
  8595  0759  01C3               	clrf	LCDWriteInt@sign
  8596  075A  3188  200E  3180   	fcall	_LCDWriteInt
  8597                           
  8598                           ;main.c: 323: { gotoXY(46,5); LCDWriteInt(VHoldMode[1],1, 0, 0);};
  8599  075D  3005               	movlw	5
  8600  075E  0020               	movlb	0	; select bank0
  8601  075F  00D9               	movwf	??_main
  8602  0760  0859               	movf	??_main,w
  8603  0761  00F5               	movwf	gotoXY@y
  8604  0762  302E               	movlw	46
  8605  0763  319E  262B  3180   	fcall	_gotoXY
  8606  0766  0021               	movlb	1	; select bank1
  8607  0767  0841               	movf	(_VHoldMode^(0+128)+1),w
  8608  0768  0020               	movlb	0	; select bank0
  8609  0769  00BF               	movwf	LCDWriteInt@value
  8610  076A  01C0               	clrf	LCDWriteInt@value+1
  8611  076B  1BBF               	btfsc	LCDWriteInt@value,7
  8612  076C  03C0               	decf	LCDWriteInt@value+1,f
  8613  076D  01C1               	clrf	LCDWriteInt@fieldLength
  8614  076E  0AC1               	incf	LCDWriteInt@fieldLength,f
  8615  076F  01C2               	clrf	LCDWriteInt@numPlaces
  8616  0770  01C3               	clrf	LCDWriteInt@sign
  8617  0771  3188  200E  3180   	fcall	_LCDWriteInt
  8618                           
  8619                           ;main.c: 324: LCDWriteCharacter(' ');
  8620  0774  3020               	movlw	32
  8621  0775  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8622                           
  8623                           ;main.c: 325: { gotoXY(56,5); LCDWriteInt(batteryTemp,3, 1, 0);};
  8624  0778  3005               	movlw	5
  8625  0779  0020               	movlb	0	; select bank0
  8626  077A  00D9               	movwf	??_main
  8627  077B  0859               	movf	??_main,w
  8628  077C  00F5               	movwf	gotoXY@y
  8629  077D  3038               	movlw	56
  8630  077E  319E  262B  3180   	fcall	_gotoXY
  8631  0781  0021               	movlb	1	; select bank1
  8632  0782  086E               	movf	(_batteryTemp+1)^(0+128),w
  8633  0783  0020               	movlb	0	; select bank0
  8634  0784  00C0               	movwf	LCDWriteInt@value+1
  8635  0785  0021               	movlb	1	; select bank1
  8636  0786  086D               	movf	_batteryTemp^(0+128),w
  8637  0787  0020               	movlb	0	; select bank0
  8638  0788  00BF               	movwf	LCDWriteInt@value
  8639  0789  3003               	movlw	3
  8640  078A  00D9               	movwf	??_main
  8641  078B  0859               	movf	??_main,w
  8642  078C  00C1               	movwf	LCDWriteInt@fieldLength
  8643  078D  01C2               	clrf	LCDWriteInt@numPlaces
  8644  078E  0AC2               	incf	LCDWriteInt@numPlaces,f
  8645  078F  01C3               	clrf	LCDWriteInt@sign
  8646  0790  3188  200E  3180   	fcall	_LCDWriteInt
  8647                           
  8648                           ;main.c: 326: LCDWriteCharacter(123);
  8649  0793  307B               	movlw	123
  8650  0794  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8651                           
  8652                           ;main.c: 327: LCDWriteCharacter('C');
  8653  0797  3043               	movlw	67
  8654  0798  3192  22E7  3180   	fcall	_LCDWriteCharacter
  8655                           
  8656                           ;main.c: 397: if(batteryState[0] > FINISHED)
  8657  079B  3003               	movlw	3
  8658  079C  0021               	movlb	1	; select bank1
  8659  079D  0242               	subwf	_batteryState^(0+128),w
  8660  079E  1C03               	skipc
  8661  079F  2FA4               	goto	l3658
  8662                           
  8663                           ;main.c: 398: {
  8664                           ;main.c: 399: cc_cv_mode(0);
  8665  07A0  3000               	movlw	0
  8666  07A1  318C  24FC  3180   	fcall	_cc_cv_mode
  8667  07A4                     l3658:	
  8668                           
  8669                           ;main.c: 400: }
  8670                           ;main.c: 401: if(batteryState[1] > FINISHED)
  8671  07A4  3003               	movlw	3
  8672  07A5  0021               	movlb	1	; select bank1
  8673  07A6  0243               	subwf	(_batteryState^(0+128)+1),w
  8674  07A7  1C03               	skipc
  8675  07A8  2FAD               	goto	l3662
  8676                           
  8677                           ;main.c: 402: {
  8678                           ;main.c: 403: cc_cv_mode(1);
  8679  07A9  3001               	movlw	1
  8680  07AA  318C  24FC  3180   	fcall	_cc_cv_mode
  8681  07AD                     l3662:	
  8682                           
  8683                           ;main.c: 404: }
  8684                           ;main.c: 405: slowLoop=0;
  8685  07AD  0021               	movlb	1	; select bank1
  8686  07AE  01D9               	clrf	main@slowLoop^(0+128)
  8687  07AF  2872               	goto	l3338
  8688  07B0                     __end_of_main:	
  8689                           
  8690                           	psect	text1
  8691  08C7                     __ptext1:	
  8692 ;; *************** function _tempCalc *****************
  8693 ;; Defined at:
  8694 ;;		line 4 in file "tempCalc.c"
  8695 ;; Parameters:    Size  Location     Type
  8696 ;;  analogValue     2   46[BANK0 ] int 
  8697 ;; Auto vars:     Size  Location     Type
  8698 ;;  steinhart       3   54[BANK0 ] float 
  8699 ;;  R               3   48[BANK0 ] float 
  8700 ;; Return value:  Size  Location     Type
  8701 ;;                  2   46[BANK0 ] int 
  8702 ;; Registers used:
  8703 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8704 ;; Tracked objects:
  8705 ;;		On entry : 0/0
  8706 ;;		On exit  : 0/0
  8707 ;;		Unchanged: 0/0
  8708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8709 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8710 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8712 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8713 ;;Total ram usage:       11 bytes
  8714 ;; Hardware stack levels used:    1
  8715 ;; Hardware stack levels required when called:    4
  8716 ;; This function calls:
  8717 ;;		___awtoft
  8718 ;;		___ftadd
  8719 ;;		___ftdiv
  8720 ;;		___ftmul
  8721 ;;		___ftsub
  8722 ;;		___fttol
  8723 ;;		_log
  8724 ;; This function is called by:
  8725 ;;		_main
  8726 ;; This function uses a non-reentrant model
  8727 ;;
  8728                           
  8729                           
  8730                           ;psect for function _tempCalc
  8731  08C7                     _tempCalc:	
  8732                           
  8733                           ;tempCalc.c: 6: float R, steinhart;
  8734                           ;tempCalc.c: 7: R=10030/(1023/(float)analogValue-1);
  8735                           
  8736                           ;incstack = 0
  8737                           ; Regs used in _tempCalc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8738  08C7  3000               	movlw	0
  8739  08C8  0020               	movlb	0	; select bank0
  8740  08C9  00B1               	movwf	___ftadd@f1
  8741  08CA  3080               	movlw	128
  8742  08CB  00B2               	movwf	___ftadd@f1+1
  8743  08CC  30BF               	movlw	191
  8744  08CD  00B3               	movwf	___ftadd@f1+2
  8745  08CE  084F               	movf	tempCalc@analogValue+1,w
  8746  08CF  00FA               	movwf	___awtoft@c+1
  8747  08D0  084E               	movf	tempCalc@analogValue,w
  8748  08D1  00F9               	movwf	___awtoft@c
  8749  08D2  319F  270C  3188   	fcall	___awtoft
  8750  08D5  0879               	movf	?___awtoft,w
  8751  08D6  0020               	movlb	0	; select bank0
  8752  08D7  00A1               	movwf	___ftdiv@f2
  8753  08D8  087A               	movf	?___awtoft+1,w
  8754  08D9  00A2               	movwf	___ftdiv@f2+1
  8755  08DA  087B               	movf	?___awtoft+2,w
  8756  08DB  00A3               	movwf	___ftdiv@f2+2
  8757  08DC  30C0               	movlw	192
  8758  08DD  00A4               	movwf	___ftdiv@f1
  8759  08DE  307F               	movlw	127
  8760  08DF  00A5               	movwf	___ftdiv@f1+1
  8761  08E0  3044               	movlw	68
  8762  08E1  00A6               	movwf	___ftdiv@f1+2
  8763  08E2  3195  25F3  3188   	fcall	___ftdiv
  8764  08E5  0020               	movlb	0	; select bank0
  8765  08E6  0821               	movf	?___ftdiv,w
  8766  08E7  00B4               	movwf	___ftadd@f2
  8767  08E8  0822               	movf	?___ftdiv+1,w
  8768  08E9  00B5               	movwf	___ftadd@f2+1
  8769  08EA  0823               	movf	?___ftdiv+2,w
  8770  08EB  00B6               	movwf	___ftadd@f2+2
  8771  08EC  3189  21AE  3188   	fcall	___ftadd
  8772  08EF  0020               	movlb	0	; select bank0
  8773  08F0  0831               	movf	?___ftadd,w
  8774  08F1  00D3               	movwf	_tempCalc$1300
  8775  08F2  0832               	movf	?___ftadd+1,w
  8776  08F3  00D4               	movwf	_tempCalc$1300+1
  8777  08F4  0833               	movf	?___ftadd+2,w
  8778  08F5  00D5               	movwf	_tempCalc$1300+2
  8779                           
  8780                           ;tempCalc.c: 6: float R, steinhart;
  8781                           ;tempCalc.c: 7: R=10030/(1023/(float)analogValue-1);
  8782  08F6  0853               	movf	_tempCalc$1300,w
  8783  08F7  00A1               	movwf	___ftdiv@f2
  8784  08F8  0854               	movf	_tempCalc$1300+1,w
  8785  08F9  00A2               	movwf	___ftdiv@f2+1
  8786  08FA  0855               	movf	_tempCalc$1300+2,w
  8787  08FB  00A3               	movwf	___ftdiv@f2+2
  8788  08FC  30B8               	movlw	184
  8789  08FD  00A4               	movwf	___ftdiv@f1
  8790  08FE  301C               	movlw	28
  8791  08FF  00A5               	movwf	___ftdiv@f1+1
  8792  0900  3046               	movlw	70
  8793  0901  00A6               	movwf	___ftdiv@f1+2
  8794  0902  3195  25F3  3188   	fcall	___ftdiv
  8795  0905  0020               	movlb	0	; select bank0
  8796  0906  0821               	movf	?___ftdiv,w
  8797  0907  00D0               	movwf	tempCalc@R
  8798  0908  0822               	movf	?___ftdiv+1,w
  8799  0909  00D1               	movwf	tempCalc@R+1
  8800  090A  0823               	movf	?___ftdiv+2,w
  8801  090B  00D2               	movwf	tempCalc@R+2
  8802                           
  8803                           ;tempCalc.c: 8: steinhart=R/10010;
  8804  090C  3068               	movlw	104
  8805  090D  00A1               	movwf	___ftdiv@f2
  8806  090E  301C               	movlw	28
  8807  090F  00A2               	movwf	___ftdiv@f2+1
  8808  0910  3046               	movlw	70
  8809  0911  00A3               	movwf	___ftdiv@f2+2
  8810  0912  0850               	movf	tempCalc@R,w
  8811  0913  00A4               	movwf	___ftdiv@f1
  8812  0914  0851               	movf	tempCalc@R+1,w
  8813  0915  00A5               	movwf	___ftdiv@f1+1
  8814  0916  0852               	movf	tempCalc@R+2,w
  8815  0917  00A6               	movwf	___ftdiv@f1+2
  8816  0918  3195  25F3  3188   	fcall	___ftdiv
  8817  091B  0020               	movlb	0	; select bank0
  8818  091C  0821               	movf	?___ftdiv,w
  8819  091D  00D6               	movwf	tempCalc@steinhart
  8820  091E  0822               	movf	?___ftdiv+1,w
  8821  091F  00D7               	movwf	tempCalc@steinhart+1
  8822  0920  0823               	movf	?___ftdiv+2,w
  8823  0921  00D8               	movwf	tempCalc@steinhart+2
  8824                           
  8825                           ;tempCalc.c: 9: steinhart=log(steinhart);
  8826  0922  0856               	movf	tempCalc@steinhart,w
  8827  0923  00C8               	movwf	log@x
  8828  0924  0857               	movf	tempCalc@steinhart+1,w
  8829  0925  00C9               	movwf	log@x+1
  8830  0926  0858               	movf	tempCalc@steinhart+2,w
  8831  0927  00CA               	movwf	log@x+2
  8832  0928  3196  269C  3188   	fcall	_log
  8833  092B  0020               	movlb	0	; select bank0
  8834  092C  0848               	movf	?_log,w
  8835  092D  00D6               	movwf	tempCalc@steinhart
  8836  092E  0849               	movf	?_log+1,w
  8837  092F  00D7               	movwf	tempCalc@steinhart+1
  8838  0930  084A               	movf	?_log+2,w
  8839  0931  00D8               	movwf	tempCalc@steinhart+2
  8840                           
  8841                           ;tempCalc.c: 10: steinhart/=3795.3;
  8842  0932  3035               	movlw	53
  8843  0933  00A1               	movwf	___ftdiv@f2
  8844  0934  306D               	movlw	109
  8845  0935  00A2               	movwf	___ftdiv@f2+1
  8846  0936  3045               	movlw	69
  8847  0937  00A3               	movwf	___ftdiv@f2+2
  8848  0938  0856               	movf	tempCalc@steinhart,w
  8849  0939  00A4               	movwf	___ftdiv@f1
  8850  093A  0857               	movf	tempCalc@steinhart+1,w
  8851  093B  00A5               	movwf	___ftdiv@f1+1
  8852  093C  0858               	movf	tempCalc@steinhart+2,w
  8853  093D  00A6               	movwf	___ftdiv@f1+2
  8854  093E  3195  25F3  3188   	fcall	___ftdiv
  8855  0941  0020               	movlb	0	; select bank0
  8856  0942  0821               	movf	?___ftdiv,w
  8857  0943  00D6               	movwf	tempCalc@steinhart
  8858  0944  0822               	movf	?___ftdiv+1,w
  8859  0945  00D7               	movwf	tempCalc@steinhart+1
  8860  0946  0823               	movf	?___ftdiv+2,w
  8861  0947  00D8               	movwf	tempCalc@steinhart+2
  8862                           
  8863                           ;tempCalc.c: 11: steinhart+=1.0/(25+273.15);
  8864  0948  30CF               	movlw	207
  8865  0949  00B1               	movwf	___ftadd@f1
  8866  094A  305B               	movlw	91
  8867  094B  00B2               	movwf	___ftadd@f1+1
  8868  094C  303B               	movlw	59
  8869  094D  00B3               	movwf	___ftadd@f1+2
  8870  094E  0856               	movf	tempCalc@steinhart,w
  8871  094F  00B4               	movwf	___ftadd@f2
  8872  0950  0857               	movf	tempCalc@steinhart+1,w
  8873  0951  00B5               	movwf	___ftadd@f2+1
  8874  0952  0858               	movf	tempCalc@steinhart+2,w
  8875  0953  00B6               	movwf	___ftadd@f2+2
  8876  0954  3189  21AE  3188   	fcall	___ftadd
  8877  0957  0020               	movlb	0	; select bank0
  8878  0958  0831               	movf	?___ftadd,w
  8879  0959  00D6               	movwf	tempCalc@steinhart
  8880  095A  0832               	movf	?___ftadd+1,w
  8881  095B  00D7               	movwf	tempCalc@steinhart+1
  8882  095C  0833               	movf	?___ftadd+2,w
  8883  095D  00D8               	movwf	tempCalc@steinhart+2
  8884                           
  8885                           ;tempCalc.c: 12: steinhart=1.0/steinhart;
  8886  095E  0856               	movf	tempCalc@steinhart,w
  8887  095F  00A1               	movwf	___ftdiv@f2
  8888  0960  0857               	movf	tempCalc@steinhart+1,w
  8889  0961  00A2               	movwf	___ftdiv@f2+1
  8890  0962  0858               	movf	tempCalc@steinhart+2,w
  8891  0963  00A3               	movwf	___ftdiv@f2+2
  8892  0964  3000               	movlw	0
  8893  0965  00A4               	movwf	___ftdiv@f1
  8894  0966  3080               	movlw	128
  8895  0967  00A5               	movwf	___ftdiv@f1+1
  8896  0968  303F               	movlw	63
  8897  0969  00A6               	movwf	___ftdiv@f1+2
  8898  096A  3195  25F3  3188   	fcall	___ftdiv
  8899  096D  0020               	movlb	0	; select bank0
  8900  096E  0821               	movf	?___ftdiv,w
  8901  096F  00D6               	movwf	tempCalc@steinhart
  8902  0970  0822               	movf	?___ftdiv+1,w
  8903  0971  00D7               	movwf	tempCalc@steinhart+1
  8904  0972  0823               	movf	?___ftdiv+2,w
  8905  0973  00D8               	movwf	tempCalc@steinhart+2
  8906                           
  8907                           ;tempCalc.c: 13: steinhart-=273;
  8908  0974  3080               	movlw	128
  8909  0975  00BE               	movwf	___ftsub@f2
  8910  0976  3088               	movlw	136
  8911  0977  00BF               	movwf	___ftsub@f2+1
  8912  0978  3043               	movlw	67
  8913  0979  00C0               	movwf	___ftsub@f2+2
  8914  097A  0856               	movf	tempCalc@steinhart,w
  8915  097B  00C1               	movwf	___ftsub@f1
  8916  097C  0857               	movf	tempCalc@steinhart+1,w
  8917  097D  00C2               	movwf	___ftsub@f1+1
  8918  097E  0858               	movf	tempCalc@steinhart+2,w
  8919  097F  00C3               	movwf	___ftsub@f1+2
  8920  0980  319E  26B0  3188   	fcall	___ftsub
  8921  0983  0020               	movlb	0	; select bank0
  8922  0984  083E               	movf	?___ftsub,w
  8923  0985  00D6               	movwf	tempCalc@steinhart
  8924  0986  083F               	movf	?___ftsub+1,w
  8925  0987  00D7               	movwf	tempCalc@steinhart+1
  8926  0988  0840               	movf	?___ftsub+2,w
  8927  0989  00D8               	movwf	tempCalc@steinhart+2
  8928                           
  8929                           ;tempCalc.c: 15: steinhart*=10;
  8930  098A  3000               	movlw	0
  8931  098B  00A1               	movwf	___ftmul@f1
  8932  098C  3020               	movlw	32
  8933  098D  00A2               	movwf	___ftmul@f1+1
  8934  098E  3041               	movlw	65
  8935  098F  00A3               	movwf	___ftmul@f1+2
  8936  0990  0856               	movf	tempCalc@steinhart,w
  8937  0991  00A4               	movwf	___ftmul@f2
  8938  0992  0857               	movf	tempCalc@steinhart+1,w
  8939  0993  00A5               	movwf	___ftmul@f2+1
  8940  0994  0858               	movf	tempCalc@steinhart+2,w
  8941  0995  00A6               	movwf	___ftmul@f2+2
  8942  0996  3197  274C  3188   	fcall	___ftmul
  8943  0999  0020               	movlb	0	; select bank0
  8944  099A  0821               	movf	?___ftmul,w
  8945  099B  00D6               	movwf	tempCalc@steinhart
  8946  099C  0822               	movf	?___ftmul+1,w
  8947  099D  00D7               	movwf	tempCalc@steinhart+1
  8948  099E  0823               	movf	?___ftmul+2,w
  8949  099F  00D8               	movwf	tempCalc@steinhart+2
  8950                           
  8951                           ;tempCalc.c: 18: return (int16_t)steinhart;
  8952  09A0  0856               	movf	tempCalc@steinhart,w
  8953  09A1  00B1               	movwf	___fttol@f1
  8954  09A2  0857               	movf	tempCalc@steinhart+1,w
  8955  09A3  00B2               	movwf	___fttol@f1+1
  8956  09A4  0858               	movf	tempCalc@steinhart+2,w
  8957  09A5  00B3               	movwf	___fttol@f1+2
  8958  09A6  3195  256C         	fcall	___fttol
  8959  09A8  0020               	movlb	0	; select bank0
  8960  09A9  0832               	movf	?___fttol+1,w
  8961  09AA  00CF               	movwf	?_tempCalc+1
  8962  09AB  0831               	movf	?___fttol,w
  8963  09AC  00CE               	movwf	?_tempCalc
  8964  09AD  0008               	return
  8965  09AE                     __end_of_tempCalc:	
  8966                           
  8967                           	psect	text2
  8968  169C                     __ptext2:	
  8969 ;; *************** function _log *****************
  8970 ;; Defined at:
  8971 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\log.c"
  8972 ;; Parameters:    Size  Location     Type
  8973 ;;  x               3   40[BANK0 ] int 
  8974 ;; Auto vars:     Size  Location     Type
  8975 ;;  exponent        2   44[BANK0 ] int 
  8976 ;; Return value:  Size  Location     Type
  8977 ;;                  3   40[BANK0 ] int 
  8978 ;; Registers used:
  8979 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8980 ;; Tracked objects:
  8981 ;;		On entry : 0/0
  8982 ;;		On exit  : 0/0
  8983 ;;		Unchanged: 0/0
  8984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8985 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8986 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8987 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8988 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8989 ;;Total ram usage:        6 bytes
  8990 ;; Hardware stack levels used:    1
  8991 ;; Hardware stack levels required when called:    3
  8992 ;; This function calls:
  8993 ;;		___awtoft
  8994 ;;		___ftadd
  8995 ;;		___ftge
  8996 ;;		___ftmul
  8997 ;;		_eval_poly
  8998 ;;		_frexp
  8999 ;; This function is called by:
  9000 ;;		_tempCalc
  9001 ;; This function uses a non-reentrant model
  9002 ;;
  9003                           
  9004                           
  9005                           ;psect for function _log
  9006  169C                     _log:	
  9007                           
  9008                           ;incstack = 0
  9009                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9010  169C  0020               	movlb	0	; select bank0
  9011  169D  0848               	movf	log@x,w
  9012  169E  00B1               	movwf	___ftge@ff1
  9013  169F  0849               	movf	log@x+1,w
  9014  16A0  00B2               	movwf	___ftge@ff1+1
  9015  16A1  084A               	movf	log@x+2,w
  9016  16A2  00B3               	movwf	___ftge@ff1+2
  9017  16A3  3000               	movlw	0
  9018  16A4  00B4               	movwf	___ftge@ff2
  9019  16A5  3000               	movlw	0
  9020  16A6  00B5               	movwf	___ftge@ff2+1
  9021  16A7  3000               	movlw	0
  9022  16A8  00B6               	movwf	___ftge@ff2+2
  9023  16A9  3191  2193  3196   	fcall	___ftge
  9024  16AC  1803               	btfsc	3,0
  9025  16AD  2EBB               	goto	l2844
  9026  16AE  3021               	movlw	33
  9027  16AF  0021               	movlb	1	; select bank1
  9028  16B0  00C6               	movwf	_errno^(0+128)
  9029  16B1  3000               	movlw	0
  9030  16B2  00C7               	movwf	(_errno^(0+128)+1)
  9031  16B3  3000               	movlw	0
  9032  16B4  0020               	movlb	0	; select bank0
  9033  16B5  00C8               	movwf	?_log
  9034  16B6  3000               	movlw	0
  9035  16B7  00C9               	movwf	?_log+1
  9036  16B8  3000               	movlw	0
  9037  16B9  00CA               	movwf	?_log+2
  9038  16BA  0008               	return
  9039  16BB                     l2844:	
  9040  16BB  0020               	movlb	0	; select bank0
  9041  16BC  084A               	movf	log@x+2,w
  9042  16BD  0449               	iorwf	log@x+1,w
  9043  16BE  0448               	iorwf	log@x,w
  9044  16BF  1D03               	skipz
  9045  16C0  2ECE               	goto	l2850
  9046  16C1  3022               	movlw	34
  9047  16C2  0021               	movlb	1	; select bank1
  9048  16C3  00C6               	movwf	_errno^(0+128)
  9049  16C4  3000               	movlw	0
  9050  16C5  00C7               	movwf	(_errno^(0+128)+1)
  9051  16C6  3000               	movlw	0
  9052  16C7  0020               	movlb	0	; select bank0
  9053  16C8  00C8               	movwf	?_log
  9054  16C9  3000               	movlw	0
  9055  16CA  00C9               	movwf	?_log+1
  9056  16CB  3000               	movlw	0
  9057  16CC  00CA               	movwf	?_log+2
  9058  16CD  0008               	return
  9059  16CE                     l2850:	
  9060  16CE  3000               	movlw	0
  9061  16CF  00B1               	movwf	___ftadd@f1
  9062  16D0  3080               	movlw	128
  9063  16D1  00B2               	movwf	___ftadd@f1+1
  9064  16D2  30BF               	movlw	191
  9065  16D3  00B3               	movwf	___ftadd@f1+2
  9066  16D4  3000               	movlw	0
  9067  16D5  00A1               	movwf	___ftmul@f1
  9068  16D6  3000               	movlw	0
  9069  16D7  00A2               	movwf	___ftmul@f1+1
  9070  16D8  3040               	movlw	64
  9071  16D9  00A3               	movwf	___ftmul@f1+2
  9072  16DA  304C               	movlw	(low (log@exponent| 0))& (0+255)
  9073  16DB  00CB               	movwf	??_log
  9074  16DC  084B               	movf	??_log,w
  9075  16DD  00F3               	movwf	frexp@eptr
  9076  16DE  0848               	movf	log@x,w
  9077  16DF  00F0               	movwf	frexp@value
  9078  16E0  0849               	movf	log@x+1,w
  9079  16E1  00F1               	movwf	frexp@value+1
  9080  16E2  084A               	movf	log@x+2,w
  9081  16E3  00F2               	movwf	frexp@value+2
  9082  16E4  3191  2158  3196   	fcall	_frexp
  9083  16E7  0870               	movf	?_frexp,w
  9084  16E8  0020               	movlb	0	; select bank0
  9085  16E9  00A4               	movwf	___ftmul@f2
  9086  16EA  0871               	movf	?_frexp+1,w
  9087  16EB  00A5               	movwf	___ftmul@f2+1
  9088  16EC  0872               	movf	?_frexp+2,w
  9089  16ED  00A6               	movwf	___ftmul@f2+2
  9090  16EE  3197  274C  3196   	fcall	___ftmul
  9091  16F1  0020               	movlb	0	; select bank0
  9092  16F2  0821               	movf	?___ftmul,w
  9093  16F3  00B4               	movwf	___ftadd@f2
  9094  16F4  0822               	movf	?___ftmul+1,w
  9095  16F5  00B5               	movwf	___ftadd@f2+1
  9096  16F6  0823               	movf	?___ftmul+2,w
  9097  16F7  00B6               	movwf	___ftadd@f2+2
  9098  16F8  3189  21AE  3196   	fcall	___ftadd
  9099  16FB  0020               	movlb	0	; select bank0
  9100  16FC  0831               	movf	?___ftadd,w
  9101  16FD  00C8               	movwf	log@x
  9102  16FE  0832               	movf	?___ftadd+1,w
  9103  16FF  00C9               	movwf	log@x+1
  9104  1700  0833               	movf	?___ftadd+2,w
  9105  1701  00CA               	movwf	log@x+2
  9106  1702  30FF               	movlw	255
  9107  1703  07CC               	addwf	log@exponent,f
  9108  1704  30FF               	movlw	255
  9109  1705  3DCD               	addwfc	log@exponent+1,f
  9110  1706  0848               	movf	log@x,w
  9111  1707  00BE               	movwf	eval_poly@x
  9112  1708  0849               	movf	log@x+1,w
  9113  1709  00BF               	movwf	eval_poly@x+1
  9114  170A  084A               	movf	log@x+2,w
  9115  170B  00C0               	movwf	eval_poly@x+2
  9116  170C  302F               	movlw	low (log@coeff| (0+32768))
  9117  170D  00C1               	movwf	eval_poly@d
  9118  170E  3091               	movlw	high (log@coeff| (0+32768))
  9119  170F  00C2               	movwf	eval_poly@d+1
  9120  1710  3008               	movlw	8
  9121  1711  00C3               	movwf	eval_poly@n
  9122  1712  3000               	movlw	0
  9123  1713  00C4               	movwf	eval_poly@n+1
  9124  1714  3193  233B  3196   	fcall	_eval_poly
  9125  1717  0020               	movlb	0	; select bank0
  9126  1718  083E               	movf	?_eval_poly,w
  9127  1719  00C8               	movwf	log@x
  9128  171A  083F               	movf	?_eval_poly+1,w
  9129  171B  00C9               	movwf	log@x+1
  9130  171C  0840               	movf	?_eval_poly+2,w
  9131  171D  00CA               	movwf	log@x+2
  9132  171E  0848               	movf	log@x,w
  9133  171F  00B1               	movwf	___ftadd@f1
  9134  1720  0849               	movf	log@x+1,w
  9135  1721  00B2               	movwf	___ftadd@f1+1
  9136  1722  084A               	movf	log@x+2,w
  9137  1723  00B3               	movwf	___ftadd@f1+2
  9138  1724  3072               	movlw	114
  9139  1725  00A1               	movwf	___ftmul@f1
  9140  1726  3031               	movlw	49
  9141  1727  00A2               	movwf	___ftmul@f1+1
  9142  1728  303F               	movlw	63
  9143  1729  00A3               	movwf	___ftmul@f1+2
  9144  172A  084D               	movf	log@exponent+1,w
  9145  172B  00FA               	movwf	___awtoft@c+1
  9146  172C  084C               	movf	log@exponent,w
  9147  172D  00F9               	movwf	___awtoft@c
  9148  172E  319F  270C  3196   	fcall	___awtoft
  9149  1731  0879               	movf	?___awtoft,w
  9150  1732  0020               	movlb	0	; select bank0
  9151  1733  00A4               	movwf	___ftmul@f2
  9152  1734  087A               	movf	?___awtoft+1,w
  9153  1735  00A5               	movwf	___ftmul@f2+1
  9154  1736  087B               	movf	?___awtoft+2,w
  9155  1737  00A6               	movwf	___ftmul@f2+2
  9156  1738  3197  274C  3196   	fcall	___ftmul
  9157  173B  0020               	movlb	0	; select bank0
  9158  173C  0821               	movf	?___ftmul,w
  9159  173D  00B4               	movwf	___ftadd@f2
  9160  173E  0822               	movf	?___ftmul+1,w
  9161  173F  00B5               	movwf	___ftadd@f2+1
  9162  1740  0823               	movf	?___ftmul+2,w
  9163  1741  00B6               	movwf	___ftadd@f2+2
  9164  1742  3189  21AE         	fcall	___ftadd
  9165  1744  0020               	movlb	0	; select bank0
  9166  1745  0831               	movf	?___ftadd,w
  9167  1746  00C8               	movwf	?_log
  9168  1747  0832               	movf	?___ftadd+1,w
  9169  1748  00C9               	movwf	?_log+1
  9170  1749  0833               	movf	?___ftadd+2,w
  9171  174A  00CA               	movwf	?_log+2
  9172  174B  0008               	return
  9173  174C                     __end_of_log:	
  9174                           
  9175                           	psect	text3
  9176  1158                     __ptext3:	
  9177 ;; *************** function _frexp *****************
  9178 ;; Defined at:
  9179 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\frexp.c"
  9180 ;; Parameters:    Size  Location     Type
  9181 ;;  value           3    0[COMMON] int 
  9182 ;;  eptr            1    3[COMMON] PTR int 
  9183 ;;		 -> log@exponent(2), 
  9184 ;; Auto vars:     Size  Location     Type
  9185 ;;		None
  9186 ;; Return value:  Size  Location     Type
  9187 ;;                  3    0[COMMON] PTR int 
  9188 ;; Registers used:
  9189 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9190 ;; Tracked objects:
  9191 ;;		On entry : 0/0
  9192 ;;		On exit  : 0/0
  9193 ;;		Unchanged: 0/0
  9194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9195 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9197 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9198 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9199 ;;Total ram usage:        6 bytes
  9200 ;; Hardware stack levels used:    1
  9201 ;; This function calls:
  9202 ;;		Nothing
  9203 ;; This function is called by:
  9204 ;;		_log
  9205 ;; This function uses a non-reentrant model
  9206 ;;
  9207                           
  9208                           
  9209                           ;psect for function _frexp
  9210  1158                     _frexp:	
  9211                           
  9212                           ;incstack = 0
  9213                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  9214  1158  0872               	movf	frexp@value+2,w
  9215  1159  0471               	iorwf	frexp@value+1,w
  9216  115A  0470               	iorwf	frexp@value,w
  9217  115B  1D03               	skipz
  9218  115C  296A               	goto	l2640
  9219  115D  0873               	movf	frexp@eptr,w
  9220  115E  0086               	movwf	6
  9221  115F  0187               	clrf	7
  9222  1160  3000               	movlw	0
  9223  1161  3FC0               	movwi [0]fsr1
  9224  1162  3FC1               	movwi [1]fsr1
  9225  1163  3000               	movlw	0
  9226  1164  00F0               	movwf	?_frexp
  9227  1165  3000               	movlw	0
  9228  1166  00F1               	movwf	?_frexp+1
  9229  1167  3000               	movlw	0
  9230  1168  00F2               	movwf	?_frexp+2
  9231  1169  0008               	return
  9232  116A                     l2640:	
  9233  116A  0872               	movf	frexp@value+2,w
  9234  116B  397F               	andlw	127
  9235  116C  00F4               	movwf	??_frexp
  9236  116D  01F5               	clrf	??_frexp+1
  9237  116E  35F4               	lslf	??_frexp,f
  9238  116F  0DF5               	rlf	??_frexp+1,f
  9239  1170  0873               	movf	frexp@eptr,w
  9240  1171  0086               	movwf	6
  9241  1172  0187               	clrf	7
  9242  1173  0874               	movf	??_frexp,w
  9243  1174  3FC0               	movwi [0]fsr1
  9244  1175  0875               	movf	??_frexp+1,w
  9245  1176  3FC1               	movwi [1]fsr1
  9246  1177  0D71               	rlf	frexp@value+1,w
  9247  1178  0D71               	rlf	frexp@value+1,w
  9248  1179  3901               	andlw	1
  9249  117A  00F4               	movwf	??_frexp
  9250  117B  01F5               	clrf	??_frexp+1
  9251  117C  0873               	movf	frexp@eptr,w
  9252  117D  0086               	movwf	6
  9253  117E  0187               	clrf	7
  9254  117F  0874               	movf	??_frexp,w
  9255  1180  0481               	iorwf	1,f
  9256  1181  3141               	addfsr 1,1
  9257  1182  0875               	movf	??_frexp+1,w
  9258  1183  0481               	iorwf	1,f
  9259  1184  0873               	movf	frexp@eptr,w
  9260  1185  0086               	movwf	6
  9261  1186  0187               	clrf	7
  9262  1187  3082               	movlw	130
  9263  1188  0781               	addwf	1,f
  9264  1189  3141               	addfsr 1,1
  9265  118A  30FF               	movlw	255
  9266  118B  3D81               	addwfc	1,f
  9267  118C  317F               	addfsr 1,-1
  9268  118D  0872               	movf	frexp@value+2,w
  9269  118E  3980               	andlw	-128
  9270  118F  383F               	iorlw	63
  9271  1190  00F2               	movwf	frexp@value+2
  9272  1191  13F1               	bcf	frexp@value+1,7
  9273  1192  0008               	return
  9274  1193                     __end_of_frexp:	
  9275                           
  9276                           	psect	text4
  9277  133B                     __ptext4:	
  9278 ;; *************** function _eval_poly *****************
  9279 ;; Defined at:
  9280 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\evalpoly.c"
  9281 ;; Parameters:    Size  Location     Type
  9282 ;;  x               3   30[BANK0 ] PTR int 
  9283 ;;  d               2   33[BANK0 ] PTR const 
  9284 ;;		 -> log@coeff(27), 
  9285 ;;  n               2   35[BANK0 ] int 
  9286 ;; Auto vars:     Size  Location     Type
  9287 ;;  res             3   37[BANK0 ] int 
  9288 ;; Return value:  Size  Location     Type
  9289 ;;                  3   30[BANK0 ] int 
  9290 ;; Registers used:
  9291 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9292 ;; Tracked objects:
  9293 ;;		On entry : 0/0
  9294 ;;		On exit  : 0/0
  9295 ;;		Unchanged: 0/0
  9296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9297 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9298 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9300 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9301 ;;Total ram usage:       10 bytes
  9302 ;; Hardware stack levels used:    1
  9303 ;; Hardware stack levels required when called:    2
  9304 ;; This function calls:
  9305 ;;		___ftadd
  9306 ;;		___ftmul
  9307 ;;		___wmul
  9308 ;; This function is called by:
  9309 ;;		_log
  9310 ;; This function uses a non-reentrant model
  9311 ;;
  9312                           
  9313                           
  9314                           ;psect for function _eval_poly
  9315  133B                     _eval_poly:	
  9316                           
  9317                           ;incstack = 0
  9318                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9319  133B  0020               	movlb	0	; select bank0
  9320  133C  0844               	movf	eval_poly@n+1,w
  9321  133D  00F1               	movwf	___wmul@multiplier+1
  9322  133E  0843               	movf	eval_poly@n,w
  9323  133F  00F0               	movwf	___wmul@multiplier
  9324  1340  3003               	movlw	3
  9325  1341  00F2               	movwf	___wmul@multiplicand
  9326  1342  3000               	movlw	0
  9327  1343  00F3               	movwf	___wmul@multiplicand+1
  9328  1344  319E  2695  3193   	fcall	___wmul
  9329  1347  0020               	movlb	0	; select bank0
  9330  1348  0841               	movf	eval_poly@d,w
  9331  1349  0770               	addwf	?___wmul,w
  9332  134A  0084               	movwf	4
  9333  134B  0842               	movf	eval_poly@d+1,w
  9334  134C  3D71               	addwfc	?___wmul+1,w
  9335  134D  0085               	movwf	5
  9336  134E  3F00               	moviw [0]fsr0
  9337  134F  00C5               	movwf	eval_poly@res
  9338  1350  3F01               	moviw [1]fsr0
  9339  1351  00C6               	movwf	eval_poly@res+1
  9340  1352  3F02               	moviw [2]fsr0
  9341  1353                     L6:	
  9342  1353  00C7               	movwf	eval_poly@res+2
  9343  1354  0843               	movf	eval_poly@n,w
  9344  1355  0444               	iorwf	eval_poly@n+1,w
  9345  1356  1903               	btfsc	3,2
  9346  1357  2B94               	goto	l2658
  9347  1358  30FF               	movlw	255
  9348  1359  07C3               	addwf	eval_poly@n,f
  9349  135A  30FF               	movlw	255
  9350  135B  3DC4               	addwfc	eval_poly@n+1,f
  9351  135C  0844               	movf	eval_poly@n+1,w
  9352  135D  00F1               	movwf	___wmul@multiplier+1
  9353  135E  0843               	movf	eval_poly@n,w
  9354  135F  00F0               	movwf	___wmul@multiplier
  9355  1360  3003               	movlw	3
  9356  1361  00F2               	movwf	___wmul@multiplicand
  9357  1362  3000               	movlw	0
  9358  1363  00F3               	movwf	___wmul@multiplicand+1
  9359  1364  319E  2695  3193   	fcall	___wmul
  9360  1367  0020               	movlb	0	; select bank0
  9361  1368  0841               	movf	eval_poly@d,w
  9362  1369  0770               	addwf	?___wmul,w
  9363  136A  0084               	movwf	4
  9364  136B  0842               	movf	eval_poly@d+1,w
  9365  136C  3D71               	addwfc	?___wmul+1,w
  9366  136D  0085               	movwf	5
  9367  136E  3F00               	moviw [0]fsr0
  9368  136F  00B1               	movwf	___ftadd@f1
  9369  1370  3F01               	moviw [1]fsr0
  9370  1371  00B2               	movwf	___ftadd@f1+1
  9371  1372  3F02               	moviw [2]fsr0
  9372  1373  00B3               	movwf	___ftadd@f1+2
  9373  1374  0845               	movf	eval_poly@res,w
  9374  1375  00A1               	movwf	___ftmul@f1
  9375  1376  0846               	movf	eval_poly@res+1,w
  9376  1377  00A2               	movwf	___ftmul@f1+1
  9377  1378  0847               	movf	eval_poly@res+2,w
  9378  1379  00A3               	movwf	___ftmul@f1+2
  9379  137A  083E               	movf	eval_poly@x,w
  9380  137B  00A4               	movwf	___ftmul@f2
  9381  137C  083F               	movf	eval_poly@x+1,w
  9382  137D  00A5               	movwf	___ftmul@f2+1
  9383  137E  0840               	movf	eval_poly@x+2,w
  9384  137F  00A6               	movwf	___ftmul@f2+2
  9385  1380  3197  274C  3193   	fcall	___ftmul
  9386  1383  0020               	movlb	0	; select bank0
  9387  1384  0821               	movf	?___ftmul,w
  9388  1385  00B4               	movwf	___ftadd@f2
  9389  1386  0822               	movf	?___ftmul+1,w
  9390  1387  00B5               	movwf	___ftadd@f2+1
  9391  1388  0823               	movf	?___ftmul+2,w
  9392  1389  00B6               	movwf	___ftadd@f2+2
  9393  138A  3189  21AE  3193   	fcall	___ftadd
  9394  138D  0020               	movlb	0	; select bank0
  9395  138E  0831               	movf	?___ftadd,w
  9396  138F  00C5               	movwf	eval_poly@res
  9397  1390  0832               	movf	?___ftadd+1,w
  9398  1391  00C6               	movwf	eval_poly@res+1
  9399  1392  0833               	movf	?___ftadd+2,w
  9400  1393  2B53               	goto	L6
  9401  1394                     l2658:	
  9402  1394  0845               	movf	eval_poly@res,w
  9403  1395  00BE               	movwf	?_eval_poly
  9404  1396  0846               	movf	eval_poly@res+1,w
  9405  1397  00BF               	movwf	?_eval_poly+1
  9406  1398  0847               	movf	eval_poly@res+2,w
  9407  1399  00C0               	movwf	?_eval_poly+2
  9408  139A  0008               	return
  9409  139B                     __end_of_eval_poly:	
  9410                           
  9411                           	psect	text5
  9412  1193                     __ptext5:	
  9413 ;; *************** function ___ftge *****************
  9414 ;; Defined at:
  9415 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
  9416 ;; Parameters:    Size  Location     Type
  9417 ;;  ff1             3   17[BANK0 ] float 
  9418 ;;  ff2             3   20[BANK0 ] float 
  9419 ;; Auto vars:     Size  Location     Type
  9420 ;;		None
  9421 ;; Return value:  Size  Location     Type
  9422 ;;		None               void
  9423 ;; Registers used:
  9424 ;;		wreg, status,2, status,0
  9425 ;; Tracked objects:
  9426 ;;		On entry : 0/0
  9427 ;;		On exit  : 0/0
  9428 ;;		Unchanged: 0/0
  9429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9430 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9432 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9433 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9434 ;;Total ram usage:        9 bytes
  9435 ;; Hardware stack levels used:    1
  9436 ;; This function calls:
  9437 ;;		Nothing
  9438 ;; This function is called by:
  9439 ;;		_main
  9440 ;;		_log
  9441 ;; This function uses a non-reentrant model
  9442 ;;
  9443                           
  9444                           
  9445                           ;psect for function ___ftge
  9446  1193                     ___ftge:	
  9447                           
  9448                           ;incstack = 0
  9449                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  9450  1193  0020               	movlb	0	; select bank0
  9451  1194  1FB3               	btfss	___ftge@ff1+2,7
  9452  1195  29AA               	goto	l2574
  9453  1196  0931               	comf	___ftge@ff1,w
  9454  1197  00B7               	movwf	??___ftge
  9455  1198  0932               	comf	___ftge@ff1+1,w
  9456  1199  00B8               	movwf	??___ftge+1
  9457  119A  0933               	comf	___ftge@ff1+2,w
  9458  119B  00B9               	movwf	??___ftge+2
  9459  119C  0AB7               	incf	??___ftge,f
  9460  119D  1903               	skipnz
  9461  119E  0AB8               	incf	??___ftge+1,f
  9462  119F  1903               	skipnz
  9463  11A0  0AB9               	incf	??___ftge+2,f
  9464  11A1  3000               	movlw	0
  9465  11A2  0737               	addwf	??___ftge,w
  9466  11A3  00B1               	movwf	___ftge@ff1
  9467  11A4  3000               	movlw	0
  9468  11A5  3D38               	addwfc	??___ftge+1,w
  9469  11A6  00B2               	movwf	___ftge@ff1+1
  9470  11A7  3080               	movlw	128
  9471  11A8  3D39               	addwfc	??___ftge+2,w
  9472  11A9  00B3               	movwf	___ftge@ff1+2
  9473  11AA                     l2574:	
  9474  11AA  1FB6               	btfss	___ftge@ff2+2,7
  9475  11AB  29C0               	goto	l2578
  9476  11AC  0934               	comf	___ftge@ff2,w
  9477  11AD  00B7               	movwf	??___ftge
  9478  11AE  0935               	comf	___ftge@ff2+1,w
  9479  11AF  00B8               	movwf	??___ftge+1
  9480  11B0  0936               	comf	___ftge@ff2+2,w
  9481  11B1  00B9               	movwf	??___ftge+2
  9482  11B2  0AB7               	incf	??___ftge,f
  9483  11B3  1903               	skipnz
  9484  11B4  0AB8               	incf	??___ftge+1,f
  9485  11B5  1903               	skipnz
  9486  11B6  0AB9               	incf	??___ftge+2,f
  9487  11B7  3000               	movlw	0
  9488  11B8  0737               	addwf	??___ftge,w
  9489  11B9  00B4               	movwf	___ftge@ff2
  9490  11BA  3000               	movlw	0
  9491  11BB  3D38               	addwfc	??___ftge+1,w
  9492  11BC  00B5               	movwf	___ftge@ff2+1
  9493  11BD  3080               	movlw	128
  9494  11BE  3D39               	addwfc	??___ftge+2,w
  9495  11BF  00B6               	movwf	___ftge@ff2+2
  9496  11C0                     l2578:	
  9497  11C0  3080               	movlw	128
  9498  11C1  06B3               	xorwf	___ftge@ff1+2,f
  9499  11C2  3080               	movlw	128
  9500  11C3  06B6               	xorwf	___ftge@ff2+2,f
  9501  11C4  0836               	movf	___ftge@ff2+2,w
  9502  11C5  0233               	subwf	___ftge@ff1+2,w
  9503  11C6  1D03               	skipz
  9504  11C7  0008               	return
  9505  11C8  0835               	movf	___ftge@ff2+1,w
  9506  11C9  0232               	subwf	___ftge@ff1+1,w
  9507  11CA  1D03               	skipz
  9508  11CB  0008               	return
  9509  11CC  0834               	movf	___ftge@ff2,w
  9510  11CD  0231               	subwf	___ftge@ff1,w
  9511  11CE  0008               	return
  9512  11CF                     __end_of___ftge:	
  9513                           
  9514                           	psect	text6
  9515  1EB0                     __ptext6:	
  9516 ;; *************** function ___ftsub *****************
  9517 ;; Defined at:
  9518 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
  9519 ;; Parameters:    Size  Location     Type
  9520 ;;  f2              3   30[BANK0 ] float 
  9521 ;;  f1              3   33[BANK0 ] float 
  9522 ;; Auto vars:     Size  Location     Type
  9523 ;;		None
  9524 ;; Return value:  Size  Location     Type
  9525 ;;                  3   30[BANK0 ] float 
  9526 ;; Registers used:
  9527 ;;		wreg, status,2, status,0, pclath, cstack
  9528 ;; Tracked objects:
  9529 ;;		On entry : 0/0
  9530 ;;		On exit  : 0/0
  9531 ;;		Unchanged: 0/0
  9532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9533 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9536 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9537 ;;Total ram usage:        6 bytes
  9538 ;; Hardware stack levels used:    1
  9539 ;; Hardware stack levels required when called:    2
  9540 ;; This function calls:
  9541 ;;		___ftadd
  9542 ;; This function is called by:
  9543 ;;		_tempCalc
  9544 ;; This function uses a non-reentrant model
  9545 ;;
  9546                           
  9547                           
  9548                           ;psect for function ___ftsub
  9549  1EB0                     ___ftsub:	
  9550                           
  9551                           ;incstack = 0
  9552                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9553  1EB0  0020               	movlb	0	; select bank0
  9554  1EB1  0840               	movf	___ftsub@f2+2,w
  9555  1EB2  043F               	iorwf	___ftsub@f2+1,w
  9556  1EB3  043E               	iorwf	___ftsub@f2,w
  9557  1EB4  1903               	skipnz
  9558  1EB5  2EB8               	goto	l3004
  9559  1EB6  3080               	movlw	128
  9560  1EB7  06C0               	xorwf	___ftsub@f2+2,f
  9561  1EB8                     l3004:	
  9562  1EB8  0841               	movf	___ftsub@f1,w
  9563  1EB9  00B1               	movwf	___ftadd@f1
  9564  1EBA  0842               	movf	___ftsub@f1+1,w
  9565  1EBB  00B2               	movwf	___ftadd@f1+1
  9566  1EBC  0843               	movf	___ftsub@f1+2,w
  9567  1EBD  00B3               	movwf	___ftadd@f1+2
  9568  1EBE  083E               	movf	___ftsub@f2,w
  9569  1EBF  00B4               	movwf	___ftadd@f2
  9570  1EC0  083F               	movf	___ftsub@f2+1,w
  9571  1EC1  00B5               	movwf	___ftadd@f2+1
  9572  1EC2  0840               	movf	___ftsub@f2+2,w
  9573  1EC3  00B6               	movwf	___ftadd@f2+2
  9574  1EC4  3189  21AE         	fcall	___ftadd
  9575  1EC6  0020               	movlb	0	; select bank0
  9576  1EC7  0831               	movf	?___ftadd,w
  9577  1EC8  00BE               	movwf	?___ftsub
  9578  1EC9  0832               	movf	?___ftadd+1,w
  9579  1ECA  00BF               	movwf	?___ftsub+1
  9580  1ECB  0833               	movf	?___ftadd+2,w
  9581  1ECC  00C0               	movwf	?___ftsub+2
  9582  1ECD  0008               	return
  9583  1ECE                     __end_of___ftsub:	
  9584                           
  9585                           	psect	text7
  9586  09AE                     __ptext7:	
  9587 ;; *************** function ___ftadd *****************
  9588 ;; Defined at:
  9589 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
  9590 ;; Parameters:    Size  Location     Type
  9591 ;;  f1              3   17[BANK0 ] float 
  9592 ;;  f2              3   20[BANK0 ] float 
  9593 ;; Auto vars:     Size  Location     Type
  9594 ;;  exp1            1   29[BANK0 ] unsigned char 
  9595 ;;  exp2            1   28[BANK0 ] unsigned char 
  9596 ;;  sign            1   27[BANK0 ] unsigned char 
  9597 ;; Return value:  Size  Location     Type
  9598 ;;                  3   17[BANK0 ] float 
  9599 ;; Registers used:
  9600 ;;		wreg, status,2, status,0, pclath, cstack
  9601 ;; Tracked objects:
  9602 ;;		On entry : 0/0
  9603 ;;		On exit  : 0/0
  9604 ;;		Unchanged: 0/0
  9605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9606 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9607 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9608 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9609 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9610 ;;Total ram usage:       13 bytes
  9611 ;; Hardware stack levels used:    1
  9612 ;; Hardware stack levels required when called:    1
  9613 ;; This function calls:
  9614 ;;		___ftpack
  9615 ;; This function is called by:
  9616 ;;		_tempCalc
  9617 ;;		___ftsub
  9618 ;;		_log
  9619 ;;		_eval_poly
  9620 ;; This function uses a non-reentrant model
  9621 ;;
  9622                           
  9623                           
  9624                           ;psect for function ___ftadd
  9625  09AE                     ___ftadd:	
  9626                           
  9627                           ;incstack = 0
  9628                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9629  09AE  0020               	movlb	0	; select bank0
  9630  09AF  0831               	movf	___ftadd@f1,w
  9631  09B0  00B7               	movwf	??___ftadd
  9632  09B1  0832               	movf	___ftadd@f1+1,w
  9633  09B2  00B8               	movwf	??___ftadd+1
  9634  09B3  0833               	movf	___ftadd@f1+2,w
  9635  09B4  00B9               	movwf	??___ftadd+2
  9636  09B5  1003               	clrc
  9637  09B6  0D38               	rlf	??___ftadd+1,w
  9638  09B7  0D39               	rlf	??___ftadd+2,w
  9639  09B8  00BA               	movwf	??___ftadd+3
  9640  09B9  083A               	movf	??___ftadd+3,w
  9641  09BA  00BD               	movwf	___ftadd@exp1
  9642  09BB  0834               	movf	___ftadd@f2,w
  9643  09BC  00B7               	movwf	??___ftadd
  9644  09BD  0835               	movf	___ftadd@f2+1,w
  9645  09BE  00B8               	movwf	??___ftadd+1
  9646  09BF  0836               	movf	___ftadd@f2+2,w
  9647  09C0  00B9               	movwf	??___ftadd+2
  9648  09C1  1003               	clrc
  9649  09C2  0D38               	rlf	??___ftadd+1,w
  9650  09C3  0D39               	rlf	??___ftadd+2,w
  9651  09C4  00BA               	movwf	??___ftadd+3
  9652  09C5  083A               	movf	??___ftadd+3,w
  9653  09C6  00BC               	movwf	___ftadd@exp2
  9654  09C7  083D               	movf	___ftadd@exp1,w
  9655  09C8  1903               	btfsc	3,2
  9656  09C9  29D6               	goto	l2442
  9657  09CA  083C               	movf	___ftadd@exp2,w
  9658  09CB  023D               	subwf	___ftadd@exp1,w
  9659  09CC  1803               	skipnc
  9660  09CD  29DD               	goto	l2446
  9661  09CE  033D               	decf	___ftadd@exp1,w
  9662  09CF  3AFF               	xorlw	255
  9663  09D0  073C               	addwf	___ftadd@exp2,w
  9664  09D1  00B7               	movwf	??___ftadd
  9665  09D2  3019               	movlw	25
  9666  09D3  0237               	subwf	??___ftadd,w
  9667  09D4  1C03               	skipc
  9668  09D5  29DD               	goto	l2446
  9669  09D6                     l2442:	
  9670  09D6  0834               	movf	___ftadd@f2,w
  9671  09D7  00B1               	movwf	?___ftadd
  9672  09D8  0835               	movf	___ftadd@f2+1,w
  9673  09D9  00B2               	movwf	?___ftadd+1
  9674  09DA  0836               	movf	___ftadd@f2+2,w
  9675  09DB  00B3               	movwf	?___ftadd+2
  9676  09DC  0008               	return
  9677  09DD                     l2446:	
  9678  09DD  083C               	movf	___ftadd@exp2,w
  9679  09DE  1903               	btfsc	3,2
  9680  09DF  0008               	return
  9681  09E0  083D               	movf	___ftadd@exp1,w
  9682  09E1  023C               	subwf	___ftadd@exp2,w
  9683  09E2  1803               	skipnc
  9684  09E3  29EC               	goto	l2452
  9685  09E4  033C               	decf	___ftadd@exp2,w
  9686  09E5  3AFF               	xorlw	255
  9687  09E6  073D               	addwf	___ftadd@exp1,w
  9688  09E7  00B7               	movwf	??___ftadd
  9689  09E8  3019               	movlw	25
  9690  09E9  0237               	subwf	??___ftadd,w
  9691  09EA  1803               	btfsc	3,0
  9692  09EB  0008               	return
  9693  09EC                     l2452:	
  9694  09EC  3006               	movlw	6
  9695  09ED  00B7               	movwf	??___ftadd
  9696  09EE  0837               	movf	??___ftadd,w
  9697  09EF  00BB               	movwf	___ftadd@sign
  9698  09F0  1BB3               	btfsc	___ftadd@f1+2,7
  9699  09F1  17BB               	bsf	___ftadd@sign,7
  9700  09F2  1BB6               	btfsc	___ftadd@f2+2,7
  9701  09F3  173B               	bsf	___ftadd@sign,6
  9702  09F4  17B2               	bsf	___ftadd@f1+1,7
  9703  09F5  30FF               	movlw	255
  9704  09F6  05B1               	andwf	___ftadd@f1,f
  9705  09F7  30FF               	movlw	255
  9706  09F8  05B2               	andwf	___ftadd@f1+1,f
  9707  09F9  3000               	movlw	0
  9708  09FA  05B3               	andwf	___ftadd@f1+2,f
  9709  09FB  17B5               	bsf	___ftadd@f2+1,7
  9710  09FC  30FF               	movlw	255
  9711  09FD  05B4               	andwf	___ftadd@f2,f
  9712  09FE  30FF               	movlw	255
  9713  09FF  05B5               	andwf	___ftadd@f2+1,f
  9714  0A00  3000               	movlw	0
  9715  0A01  05B6               	andwf	___ftadd@f2+2,f
  9716  0A02  083C               	movf	___ftadd@exp2,w
  9717  0A03  023D               	subwf	___ftadd@exp1,w
  9718  0A04  1803               	skipnc
  9719  0A05  2A28               	goto	l2474
  9720  0A06                     l2464:	
  9721  0A06  3001               	movlw	1
  9722  0A07                     u2555:	
  9723  0A07  35B4               	lslf	___ftadd@f2,f
  9724  0A08  0DB5               	rlf	___ftadd@f2+1,f
  9725  0A09  0DB6               	rlf	___ftadd@f2+2,f
  9726  0A0A  0B89               	decfsz	9,f
  9727  0A0B  2A07               	goto	u2555
  9728  0A0C  3001               	movlw	1
  9729  0A0D  02BC               	subwf	___ftadd@exp2,f
  9730  0A0E  083C               	movf	___ftadd@exp2,w
  9731  0A0F  063D               	xorwf	___ftadd@exp1,w
  9732  0A10  1903               	skipnz
  9733  0A11  2A23               	goto	l2472
  9734  0A12  3001               	movlw	1
  9735  0A13  02BB               	subwf	___ftadd@sign,f
  9736  0A14  083B               	movf	___ftadd@sign,w
  9737  0A15  3907               	andlw	7
  9738  0A16  1903               	btfsc	3,2
  9739  0A17  2A23               	goto	l2472
  9740  0A18  2A06               	goto	l2464
  9741  0A19                     l2470:	
  9742  0A19  3001               	movlw	1
  9743  0A1A                     u2585:	
  9744  0A1A  36B3               	lsrf	___ftadd@f1+2,f
  9745  0A1B  0CB2               	rrf	___ftadd@f1+1,f
  9746  0A1C  0CB1               	rrf	___ftadd@f1,f
  9747  0A1D  0B89               	decfsz	9,f
  9748  0A1E  2A1A               	goto	u2585
  9749  0A1F  3001               	movlw	1
  9750  0A20  00B7               	movwf	??___ftadd
  9751  0A21  0837               	movf	??___ftadd,w
  9752  0A22  07BD               	addwf	___ftadd@exp1,f
  9753  0A23                     l2472:	
  9754  0A23  083D               	movf	___ftadd@exp1,w
  9755  0A24  063C               	xorwf	___ftadd@exp2,w
  9756  0A25  1903               	btfsc	3,2
  9757  0A26  2A4D               	goto	l816
  9758  0A27  2A19               	goto	l2470
  9759  0A28                     l2474:	
  9760  0A28  083D               	movf	___ftadd@exp1,w
  9761  0A29  023C               	subwf	___ftadd@exp2,w
  9762  0A2A  1803               	skipnc
  9763  0A2B  2A4D               	goto	l816
  9764  0A2C                     l2476:	
  9765  0A2C  3001               	movlw	1
  9766  0A2D                     u2615:	
  9767  0A2D  35B1               	lslf	___ftadd@f1,f
  9768  0A2E  0DB2               	rlf	___ftadd@f1+1,f
  9769  0A2F  0DB3               	rlf	___ftadd@f1+2,f
  9770  0A30  0B89               	decfsz	9,f
  9771  0A31  2A2D               	goto	u2615
  9772  0A32  3001               	movlw	1
  9773  0A33  02BD               	subwf	___ftadd@exp1,f
  9774  0A34  083C               	movf	___ftadd@exp2,w
  9775  0A35  063D               	xorwf	___ftadd@exp1,w
  9776  0A36  1903               	skipnz
  9777  0A37  2A49               	goto	l2484
  9778  0A38  3001               	movlw	1
  9779  0A39  02BB               	subwf	___ftadd@sign,f
  9780  0A3A  083B               	movf	___ftadd@sign,w
  9781  0A3B  3907               	andlw	7
  9782  0A3C  1903               	btfsc	3,2
  9783  0A3D  2A49               	goto	l2484
  9784  0A3E  2A2C               	goto	l2476
  9785  0A3F                     l2482:	
  9786  0A3F  3001               	movlw	1
  9787  0A40                     u2645:	
  9788  0A40  36B6               	lsrf	___ftadd@f2+2,f
  9789  0A41  0CB5               	rrf	___ftadd@f2+1,f
  9790  0A42  0CB4               	rrf	___ftadd@f2,f
  9791  0A43  0B89               	decfsz	9,f
  9792  0A44  2A40               	goto	u2645
  9793  0A45  3001               	movlw	1
  9794  0A46  00B7               	movwf	??___ftadd
  9795  0A47  0837               	movf	??___ftadd,w
  9796  0A48  07BC               	addwf	___ftadd@exp2,f
  9797  0A49                     l2484:	
  9798  0A49  083D               	movf	___ftadd@exp1,w
  9799  0A4A  063C               	xorwf	___ftadd@exp2,w
  9800  0A4B  1D03               	skipz
  9801  0A4C  2A3F               	goto	l2482
  9802  0A4D                     l816:	
  9803  0A4D  1FBB               	btfss	___ftadd@sign,7
  9804  0A4E  2A5F               	goto	l2488
  9805  0A4F  30FF               	movlw	255
  9806  0A50  06B1               	xorwf	___ftadd@f1,f
  9807  0A51  30FF               	movlw	255
  9808  0A52  06B2               	xorwf	___ftadd@f1+1,f
  9809  0A53  30FF               	movlw	255
  9810  0A54  06B3               	xorwf	___ftadd@f1+2,f
  9811  0A55  3001               	movlw	1
  9812  0A56  07B1               	addwf	___ftadd@f1,f
  9813  0A57  3000               	movlw	0
  9814  0A58  1803               	skipnc
  9815  0A59  3001               	movlw	1
  9816  0A5A  07B2               	addwf	___ftadd@f1+1,f
  9817  0A5B  3000               	movlw	0
  9818  0A5C  1803               	skipnc
  9819  0A5D  3001               	movlw	1
  9820  0A5E  07B3               	addwf	___ftadd@f1+2,f
  9821  0A5F                     l2488:	
  9822  0A5F  1F3B               	btfss	___ftadd@sign,6
  9823  0A60  2A71               	goto	l2492
  9824  0A61  30FF               	movlw	255
  9825  0A62  06B4               	xorwf	___ftadd@f2,f
  9826  0A63  30FF               	movlw	255
  9827  0A64  06B5               	xorwf	___ftadd@f2+1,f
  9828  0A65  30FF               	movlw	255
  9829  0A66  06B6               	xorwf	___ftadd@f2+2,f
  9830  0A67  3001               	movlw	1
  9831  0A68  07B4               	addwf	___ftadd@f2,f
  9832  0A69  3000               	movlw	0
  9833  0A6A  1803               	skipnc
  9834  0A6B  3001               	movlw	1
  9835  0A6C  07B5               	addwf	___ftadd@f2+1,f
  9836  0A6D  3000               	movlw	0
  9837  0A6E  1803               	skipnc
  9838  0A6F  3001               	movlw	1
  9839  0A70  07B6               	addwf	___ftadd@f2+2,f
  9840  0A71                     l2492:	
  9841  0A71  01BB               	clrf	___ftadd@sign
  9842  0A72  0831               	movf	___ftadd@f1,w
  9843  0A73  07B4               	addwf	___ftadd@f2,f
  9844  0A74  0832               	movf	___ftadd@f1+1,w
  9845  0A75  3DB5               	addwfc	___ftadd@f2+1,f
  9846  0A76  0833               	movf	___ftadd@f1+2,w
  9847  0A77  3DB6               	addwfc	___ftadd@f2+2,f
  9848  0A78  1FB6               	btfss	___ftadd@f2+2,7
  9849  0A79  2A8C               	goto	l2502
  9850  0A7A  30FF               	movlw	255
  9851  0A7B  06B4               	xorwf	___ftadd@f2,f
  9852  0A7C  30FF               	movlw	255
  9853  0A7D  06B5               	xorwf	___ftadd@f2+1,f
  9854  0A7E  30FF               	movlw	255
  9855  0A7F  06B6               	xorwf	___ftadd@f2+2,f
  9856  0A80  3001               	movlw	1
  9857  0A81  07B4               	addwf	___ftadd@f2,f
  9858  0A82  3000               	movlw	0
  9859  0A83  1803               	skipnc
  9860  0A84  3001               	movlw	1
  9861  0A85  07B5               	addwf	___ftadd@f2+1,f
  9862  0A86  3000               	movlw	0
  9863  0A87  1803               	skipnc
  9864  0A88  3001               	movlw	1
  9865  0A89  07B6               	addwf	___ftadd@f2+2,f
  9866  0A8A  01BB               	clrf	___ftadd@sign
  9867  0A8B  0ABB               	incf	___ftadd@sign,f
  9868  0A8C                     l2502:	
  9869  0A8C  0834               	movf	___ftadd@f2,w
  9870  0A8D  00F0               	movwf	___ftpack@arg
  9871  0A8E  0835               	movf	___ftadd@f2+1,w
  9872  0A8F  00F1               	movwf	___ftpack@arg+1
  9873  0A90  0836               	movf	___ftadd@f2+2,w
  9874  0A91  00F2               	movwf	___ftpack@arg+2
  9875  0A92  083D               	movf	___ftadd@exp1,w
  9876  0A93  00B7               	movwf	??___ftadd
  9877  0A94  0837               	movf	??___ftadd,w
  9878  0A95  00F3               	movwf	___ftpack@exp
  9879  0A96  083B               	movf	___ftadd@sign,w
  9880  0A97  00B8               	movwf	??___ftadd+1
  9881  0A98  0838               	movf	??___ftadd+1,w
  9882  0A99  00F4               	movwf	___ftpack@sign
  9883  0A9A  3193  239B         	fcall	___ftpack
  9884  0A9C  0870               	movf	?___ftpack,w
  9885  0A9D  0020               	movlb	0	; select bank0
  9886  0A9E  00B1               	movwf	?___ftadd
  9887  0A9F  0871               	movf	?___ftpack+1,w
  9888  0AA0  00B2               	movwf	?___ftadd+1
  9889  0AA1  0872               	movf	?___ftpack+2,w
  9890  0AA2  00B3               	movwf	?___ftadd+2
  9891  0AA3  0008               	return
  9892  0AA4                     __end_of___ftadd:	
  9893                           
  9894                           	psect	text8
  9895  0AA4                     __ptext8:	
  9896 ;; *************** function _readVAnalog *****************
  9897 ;; Defined at:
  9898 ;;		line 103 in file "adc.c"
  9899 ;; Parameters:    Size  Location     Type
  9900 ;;  channel         2    6[BANK0 ] unsigned int 
  9901 ;; Auto vars:     Size  Location     Type
  9902 ;;  value           2   11[COMMON] int 
  9903 ;;  analog_chann    2    9[COMMON] unsigned int 
  9904 ;; Return value:  Size  Location     Type
  9905 ;;                  2    6[BANK0 ] int 
  9906 ;; Registers used:
  9907 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9908 ;; Tracked objects:
  9909 ;;		On entry : 0/0
  9910 ;;		On exit  : 0/0
  9911 ;;		Unchanged: 0/0
  9912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9913 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9914 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9915 ;;      Temps:          0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9916 ;;      Totals:         4      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9917 ;;Total ram usage:       21 bytes
  9918 ;; Hardware stack levels used:    1
  9919 ;; Hardware stack levels required when called:    1
  9920 ;; This function calls:
  9921 ;;		_ADCRead
  9922 ;;		___aldiv
  9923 ;;		___bmul
  9924 ;; This function is called by:
  9925 ;;		_main
  9926 ;; This function uses a non-reentrant model
  9927 ;;
  9928                           
  9929                           
  9930                           ;psect for function _readVAnalog
  9931  0AA4                     _readVAnalog:	
  9932                           
  9933                           ;adc.c: 105: int16_t value;
  9934                           ;adc.c: 107: uint16_t analog_channel = Vchannels[channel];
  9935                           
  9936                           ;incstack = 0
  9937                           ; Regs used in _readVAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9938  0AA4  0020               	movlb	0	; select bank0
  9939  0AA5  3526               	lslf	readVAnalog@channel,w
  9940  0AA6  3E61               	addlw	(low (_Vchannels| (0+256)))& (0+255)
  9941  0AA7  0086               	movwf	6
  9942  0AA8  3001               	movlw	1	; select bank2/3
  9943  0AA9  0087               	movwf	7
  9944  0AAA  3F40               	moviw [0]fsr1
  9945  0AAB  00F9               	movwf	readVAnalog@analog_channel
  9946  0AAC  3F41               	moviw [1]fsr1
  9947  0AAD  00FA               	movwf	readVAnalog@analog_channel+1
  9948                           
  9949                           ;adc.c: 109: value = ADCRead(analog_channel);
  9950  0AAE  0879               	movf	readVAnalog@analog_channel,w
  9951  0AAF  319E  263E  318A   	fcall	_ADCRead
  9952  0AB2  0871               	movf	?_ADCRead+1,w
  9953  0AB3  00FC               	movwf	readVAnalog@value+1
  9954  0AB4  0870               	movf	?_ADCRead,w
  9955  0AB5  00FB               	movwf	readVAnalog@value
  9956                           
  9957                           ;adc.c: 111: Vtotals[channel] = Vtotals[channel]-Vsamples[channel][VsampleIndex];
  9958  0AB6  0020               	movlb	0	; select bank0
  9959  0AB7  0826               	movf	readVAnalog@channel,w
  9960  0AB8  00A8               	movwf	??_readVAnalog
  9961  0AB9  3001               	movlw	1
  9962  0ABA                     u3495:	
  9963  0ABA  35A8               	lslf	??_readVAnalog,f
  9964  0ABB  3EFF               	addlw	-1
  9965  0ABC  1D03               	skipz
  9966  0ABD  2ABA               	goto	u3495
  9967  0ABE  3528               	lslf	??_readVAnalog,w
  9968  0ABF  3E30               	addlw	(low (_Vtotals| (0+256)))& (0+255)
  9969  0AC0  0086               	movwf	6
  9970  0AC1  3001               	movlw	1	; select bank2/3
  9971  0AC2  0087               	movwf	7
  9972  0AC3  3F40               	moviw [0]fsr1
  9973  0AC4  00A9               	movwf	??_readVAnalog+1
  9974  0AC5  3F41               	moviw [1]fsr1
  9975  0AC6  00AA               	movwf	??_readVAnalog+2
  9976  0AC7  3F42               	moviw [2]fsr1
  9977  0AC8  00AB               	movwf	??_readVAnalog+3
  9978  0AC9  3F43               	moviw [3]fsr1
  9979  0ACA  00AC               	movwf	??_readVAnalog+4
  9980  0ACB  0864               	movf	_VsampleIndex,w
  9981  0ACC  00AD               	movwf	??_readVAnalog+5
  9982  0ACD  3001               	movlw	1
  9983  0ACE                     u3505:	
  9984  0ACE  35AD               	lslf	??_readVAnalog+5,f
  9985  0ACF  0B89               	decfsz	9,f
  9986  0AD0  2ACE               	goto	u3505
  9987  0AD1  300A               	movlw	10
  9988  0AD2  00AE               	movwf	??_readVAnalog+6
  9989  0AD3  082E               	movf	??_readVAnalog+6,w
  9990  0AD4  00F0               	movwf	___bmul@multiplicand
  9991  0AD5  0826               	movf	readVAnalog@channel,w
  9992  0AD6  319E  261A  318A   	fcall	___bmul
  9993  0AD9  3EA0               	addlw	(low (_Vsamples| (0+256)))& (0+255)
  9994  0ADA  0020               	movlb	0	; select bank0
  9995  0ADB  072D               	addwf	??_readVAnalog+5,w
  9996  0ADC  00AF               	movwf	??_readVAnalog+7
  9997  0ADD  082F               	movf	??_readVAnalog+7,w
  9998  0ADE  0086               	movwf	6
  9999  0ADF  3001               	movlw	1	; select bank3/4
 10000  0AE0  0087               	movwf	7
 10001  0AE1  3F40               	moviw [0]fsr1
 10002  0AE2  00B0               	movwf	??_readVAnalog+8
 10003  0AE3  3F41               	moviw [1]fsr1
 10004  0AE4  00B1               	movwf	??_readVAnalog+9
 10005  0AE5  0830               	movf	??_readVAnalog+8,w
 10006  0AE6  00B2               	movwf	??_readVAnalog+10
 10007  0AE7  0831               	movf	??_readVAnalog+9,w
 10008  0AE8  00B3               	movwf	??_readVAnalog+11
 10009  0AE9  3000               	movlw	0
 10010  0AEA  1BB3               	btfsc	??_readVAnalog+11,7
 10011  0AEB  30FF               	movlw	255
 10012  0AEC  00B4               	movwf	??_readVAnalog+12
 10013  0AED  00B5               	movwf	??_readVAnalog+13
 10014  0AEE  09B2               	comf	??_readVAnalog+10,f
 10015  0AEF  09B3               	comf	??_readVAnalog+11,f
 10016  0AF0  09B4               	comf	??_readVAnalog+12,f
 10017  0AF1  09B5               	comf	??_readVAnalog+13,f
 10018  0AF2  0AB2               	incf	??_readVAnalog+10,f
 10019  0AF3  1903               	skipnz
 10020  0AF4  0AB3               	incf	??_readVAnalog+11,f
 10021  0AF5  1903               	skipnz
 10022  0AF6  0AB4               	incf	??_readVAnalog+12,f
 10023  0AF7  1903               	skipnz
 10024  0AF8  0AB5               	incf	??_readVAnalog+13,f
 10025  0AF9  0832               	movf	??_readVAnalog+10,w
 10026  0AFA  07A9               	addwf	??_readVAnalog+1,f
 10027  0AFB  0833               	movf	??_readVAnalog+11,w
 10028  0AFC  3DAA               	addwfc	??_readVAnalog+2,f
 10029  0AFD  0834               	movf	??_readVAnalog+12,w
 10030  0AFE  3DAB               	addwfc	??_readVAnalog+3,f
 10031  0AFF  0835               	movf	??_readVAnalog+13,w
 10032  0B00  3DAC               	addwfc	??_readVAnalog+4,f
 10033  0B01  0826               	movf	readVAnalog@channel,w
 10034  0B02  00B6               	movwf	??_readVAnalog+14
 10035  0B03  3001               	movlw	1
 10036  0B04                     u3515:	
 10037  0B04  35B6               	lslf	??_readVAnalog+14,f
 10038  0B05  3EFF               	addlw	-1
 10039  0B06  1D03               	skipz
 10040  0B07  2B04               	goto	u3515
 10041  0B08  3536               	lslf	??_readVAnalog+14,w
 10042  0B09  3E30               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10043  0B0A  0086               	movwf	6
 10044  0B0B  3001               	movlw	1	; select bank2/3
 10045  0B0C  0087               	movwf	7
 10046  0B0D  0829               	movf	??_readVAnalog+1,w
 10047  0B0E  3FC0               	movwi [0]fsr1
 10048  0B0F  082A               	movf	??_readVAnalog+2,w
 10049  0B10  3FC1               	movwi [1]fsr1
 10050  0B11  082B               	movf	??_readVAnalog+3,w
 10051  0B12  3FC2               	movwi [2]fsr1
 10052  0B13  082C               	movf	??_readVAnalog+4,w
 10053  0B14  3FC3               	movwi [3]fsr1
 10054                           
 10055                           ;adc.c: 113: Vsamples[channel][VsampleIndex] = value;
 10056  0B15  0864               	movf	_VsampleIndex,w
 10057  0B16  00A8               	movwf	??_readVAnalog
 10058  0B17  3001               	movlw	1
 10059  0B18                     u3525:	
 10060  0B18  35A8               	lslf	??_readVAnalog,f
 10061  0B19  0B89               	decfsz	9,f
 10062  0B1A  2B18               	goto	u3525
 10063  0B1B  300A               	movlw	10
 10064  0B1C  00A9               	movwf	??_readVAnalog+1
 10065  0B1D  0829               	movf	??_readVAnalog+1,w
 10066  0B1E  00F0               	movwf	___bmul@multiplicand
 10067  0B1F  0826               	movf	readVAnalog@channel,w
 10068  0B20  319E  261A  318A   	fcall	___bmul
 10069  0B23  3EA0               	addlw	(low (_Vsamples| (0+256)))& (0+255)
 10070  0B24  0020               	movlb	0	; select bank0
 10071  0B25  0728               	addwf	??_readVAnalog,w
 10072  0B26  00AA               	movwf	??_readVAnalog+2
 10073  0B27  082A               	movf	??_readVAnalog+2,w
 10074  0B28  0086               	movwf	6
 10075  0B29  3001               	movlw	1	; select bank3/4
 10076  0B2A  0087               	movwf	7
 10077  0B2B  087B               	movf	readVAnalog@value,w
 10078  0B2C  3FC0               	movwi [0]fsr1
 10079  0B2D  087C               	movf	readVAnalog@value+1,w
 10080  0B2E  3FC1               	movwi [1]fsr1
 10081                           
 10082                           ;adc.c: 115: Vtotals[channel] = Vtotals[channel]+Vsamples[channel][VsampleIndex];
 10083  0B2F  0826               	movf	readVAnalog@channel,w
 10084  0B30  00A8               	movwf	??_readVAnalog
 10085  0B31  3001               	movlw	1
 10086  0B32                     u3535:	
 10087  0B32  35A8               	lslf	??_readVAnalog,f
 10088  0B33  3EFF               	addlw	-1
 10089  0B34  1D03               	skipz
 10090  0B35  2B32               	goto	u3535
 10091  0B36  3528               	lslf	??_readVAnalog,w
 10092  0B37  3E30               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10093  0B38  0086               	movwf	6
 10094  0B39  3001               	movlw	1	; select bank2/3
 10095  0B3A  0087               	movwf	7
 10096  0B3B  3F40               	moviw [0]fsr1
 10097  0B3C  00A9               	movwf	??_readVAnalog+1
 10098  0B3D  3F41               	moviw [1]fsr1
 10099  0B3E  00AA               	movwf	??_readVAnalog+2
 10100  0B3F  3F42               	moviw [2]fsr1
 10101  0B40  00AB               	movwf	??_readVAnalog+3
 10102  0B41  3F43               	moviw [3]fsr1
 10103  0B42  00AC               	movwf	??_readVAnalog+4
 10104  0B43  0864               	movf	_VsampleIndex,w
 10105  0B44  00AD               	movwf	??_readVAnalog+5
 10106  0B45  3001               	movlw	1
 10107  0B46                     u3545:	
 10108  0B46  35AD               	lslf	??_readVAnalog+5,f
 10109  0B47  0B89               	decfsz	9,f
 10110  0B48  2B46               	goto	u3545
 10111  0B49  300A               	movlw	10
 10112  0B4A  00AE               	movwf	??_readVAnalog+6
 10113  0B4B  082E               	movf	??_readVAnalog+6,w
 10114  0B4C  00F0               	movwf	___bmul@multiplicand
 10115  0B4D  0826               	movf	readVAnalog@channel,w
 10116  0B4E  319E  261A  318A   	fcall	___bmul
 10117  0B51  3EA0               	addlw	(low (_Vsamples| (0+256)))& (0+255)
 10118  0B52  0020               	movlb	0	; select bank0
 10119  0B53  072D               	addwf	??_readVAnalog+5,w
 10120  0B54  00AF               	movwf	??_readVAnalog+7
 10121  0B55  082F               	movf	??_readVAnalog+7,w
 10122  0B56  0086               	movwf	6
 10123  0B57  3001               	movlw	1	; select bank3/4
 10124  0B58  0087               	movwf	7
 10125  0B59  3F40               	moviw [0]fsr1
 10126  0B5A  00B0               	movwf	??_readVAnalog+8
 10127  0B5B  3F41               	moviw [1]fsr1
 10128  0B5C  00B1               	movwf	??_readVAnalog+9
 10129  0B5D  0830               	movf	??_readVAnalog+8,w
 10130  0B5E  00B2               	movwf	??_readVAnalog+10
 10131  0B5F  0831               	movf	??_readVAnalog+9,w
 10132  0B60  00B3               	movwf	??_readVAnalog+11
 10133  0B61  3000               	movlw	0
 10134  0B62  1BB3               	btfsc	??_readVAnalog+11,7
 10135  0B63  30FF               	movlw	255
 10136  0B64  00B4               	movwf	??_readVAnalog+12
 10137  0B65  00B5               	movwf	??_readVAnalog+13
 10138  0B66  0832               	movf	??_readVAnalog+10,w
 10139  0B67  07A9               	addwf	??_readVAnalog+1,f
 10140  0B68  0833               	movf	??_readVAnalog+11,w
 10141  0B69  3DAA               	addwfc	??_readVAnalog+2,f
 10142  0B6A  0834               	movf	??_readVAnalog+12,w
 10143  0B6B  3DAB               	addwfc	??_readVAnalog+3,f
 10144  0B6C  0835               	movf	??_readVAnalog+13,w
 10145  0B6D  3DAC               	addwfc	??_readVAnalog+4,f
 10146  0B6E  0826               	movf	readVAnalog@channel,w
 10147  0B6F  00B6               	movwf	??_readVAnalog+14
 10148  0B70  3001               	movlw	1
 10149  0B71                     u3555:	
 10150  0B71  35B6               	lslf	??_readVAnalog+14,f
 10151  0B72  3EFF               	addlw	-1
 10152  0B73  1D03               	skipz
 10153  0B74  2B71               	goto	u3555
 10154  0B75  3536               	lslf	??_readVAnalog+14,w
 10155  0B76  3E30               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10156  0B77  0086               	movwf	6
 10157  0B78  3001               	movlw	1	; select bank2/3
 10158  0B79  0087               	movwf	7
 10159  0B7A  0829               	movf	??_readVAnalog+1,w
 10160  0B7B  3FC0               	movwi [0]fsr1
 10161  0B7C  082A               	movf	??_readVAnalog+2,w
 10162  0B7D  3FC1               	movwi [1]fsr1
 10163  0B7E  082B               	movf	??_readVAnalog+3,w
 10164  0B7F  3FC2               	movwi [2]fsr1
 10165  0B80  082C               	movf	??_readVAnalog+4,w
 10166  0B81  3FC3               	movwi [3]fsr1
 10167                           
 10168                           ;adc.c: 117: if(channel>=(4-1))
 10169  0B82  3000               	movlw	0
 10170  0B83  0227               	subwf	readVAnalog@channel+1,w
 10171  0B84  3003               	movlw	3
 10172  0B85  1903               	skipnz
 10173  0B86  0226               	subwf	readVAnalog@channel,w
 10174  0B87  1C03               	skipc
 10175  0B88  2B96               	goto	l3074
 10176                           
 10177                           ;adc.c: 118: {
 10178                           ;adc.c: 119: VsampleIndex+=1;
 10179  0B89  3001               	movlw	1
 10180  0B8A  07E4               	addwf	_VsampleIndex,f
 10181  0B8B  3000               	movlw	0
 10182  0B8C  3DE5               	addwfc	_VsampleIndex+1,f
 10183                           
 10184                           ;adc.c: 120: if(VsampleIndex >= 5)VsampleIndex = 0;
 10185  0B8D  3000               	movlw	0
 10186  0B8E  0265               	subwf	_VsampleIndex+1,w
 10187  0B8F  3005               	movlw	5
 10188  0B90  1903               	skipnz
 10189  0B91  0264               	subwf	_VsampleIndex,w
 10190  0B92  1C03               	skipc
 10191  0B93  2B96               	goto	l3074
 10192  0B94  01E4               	clrf	_VsampleIndex
 10193  0B95  01E5               	clrf	_VsampleIndex+1
 10194  0B96                     l3074:	
 10195                           
 10196                           ;adc.c: 121: }
 10197                           ;adc.c: 123: value = Vtotals[channel]/5;
 10198  0B96  3000               	movlw	0
 10199  0B97  00F3               	movwf	___aldiv@divisor+3
 10200  0B98  3000               	movlw	0
 10201  0B99  00F2               	movwf	___aldiv@divisor+2
 10202  0B9A  3000               	movlw	0
 10203  0B9B  00F1               	movwf	___aldiv@divisor+1
 10204  0B9C  3005               	movlw	5
 10205  0B9D  00F0               	movwf	___aldiv@divisor
 10206  0B9E  0826               	movf	readVAnalog@channel,w
 10207  0B9F  00A8               	movwf	??_readVAnalog
 10208  0BA0  3001               	movlw	1
 10209  0BA1                     u3585:	
 10210  0BA1  35A8               	lslf	??_readVAnalog,f
 10211  0BA2  3EFF               	addlw	-1
 10212  0BA3  1D03               	skipz
 10213  0BA4  2BA1               	goto	u3585
 10214  0BA5  3528               	lslf	??_readVAnalog,w
 10215  0BA6  3E30               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10216  0BA7  0086               	movwf	6
 10217  0BA8  3001               	movlw	1	; select bank2/3
 10218  0BA9  0087               	movwf	7
 10219  0BAA  3F40               	moviw [0]fsr1
 10220  0BAB  00F4               	movwf	___aldiv@dividend
 10221  0BAC  3F41               	moviw [1]fsr1
 10222  0BAD  00F5               	movwf	___aldiv@dividend+1
 10223  0BAE  3F42               	moviw [2]fsr1
 10224  0BAF  00F6               	movwf	___aldiv@dividend+2
 10225  0BB0  3F43               	moviw [3]fsr1
 10226  0BB1  00F7               	movwf	___aldiv@dividend+3
 10227  0BB2  3194  2467         	fcall	___aldiv
 10228  0BB4  0871               	movf	?___aldiv+1,w
 10229  0BB5  00FC               	movwf	readVAnalog@value+1
 10230  0BB6  0870               	movf	?___aldiv,w
 10231  0BB7  00FB               	movwf	readVAnalog@value
 10232                           
 10233                           ;adc.c: 125: return value;
 10234  0BB8  087C               	movf	readVAnalog@value+1,w
 10235  0BB9  0020               	movlb	0	; select bank0
 10236  0BBA  00A7               	movwf	?_readVAnalog+1
 10237  0BBB  087B               	movf	readVAnalog@value,w
 10238  0BBC  00A6               	movwf	?_readVAnalog
 10239  0BBD  0008               	return
 10240  0BBE                     __end_of_readVAnalog:	
 10241                           
 10242                           	psect	text9
 10243  1E1A                     __ptext9:	
 10244 ;; *************** function ___bmul *****************
 10245 ;; Defined at:
 10246 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
 10247 ;; Parameters:    Size  Location     Type
 10248 ;;  multiplier      1    wreg     unsigned char 
 10249 ;;  multiplicand    1    0[COMMON] unsigned char 
 10250 ;; Auto vars:     Size  Location     Type
 10251 ;;  multiplier      1    3[COMMON] unsigned char 
 10252 ;;  product         1    2[COMMON] unsigned char 
 10253 ;; Return value:  Size  Location     Type
 10254 ;;                  1    wreg      unsigned char 
 10255 ;; Registers used:
 10256 ;;		wreg, status,2, status,0
 10257 ;; Tracked objects:
 10258 ;;		On entry : 0/0
 10259 ;;		On exit  : 0/0
 10260 ;;		Unchanged: 0/0
 10261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10262 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10263 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10264 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10265 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10266 ;;Total ram usage:        4 bytes
 10267 ;; Hardware stack levels used:    1
 10268 ;; This function calls:
 10269 ;;		Nothing
 10270 ;; This function is called by:
 10271 ;;		_readVAnalog
 10272 ;; This function uses a non-reentrant model
 10273 ;;
 10274                           
 10275                           
 10276                           ;psect for function ___bmul
 10277  1E1A                     ___bmul:	
 10278                           
 10279                           ;incstack = 0
 10280                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 10281                           ;___bmul@multiplier stored from wreg
 10282  1E1A  00F3               	movwf	___bmul@multiplier
 10283  1E1B  01F2               	clrf	___bmul@product
 10284  1E1C                     l2862:	
 10285  1E1C  1C73               	btfss	___bmul@multiplier,0
 10286  1E1D  2E22               	goto	l2866
 10287  1E1E  0870               	movf	___bmul@multiplicand,w
 10288  1E1F  00F1               	movwf	??___bmul
 10289  1E20  0871               	movf	??___bmul,w
 10290  1E21  07F2               	addwf	___bmul@product,f
 10291  1E22                     l2866:	
 10292  1E22  1003               	clrc
 10293  1E23  0DF0               	rlf	___bmul@multiplicand,f
 10294  1E24  1003               	clrc
 10295  1E25  0CF3               	rrf	___bmul@multiplier,f
 10296  1E26  0873               	movf	___bmul@multiplier,w
 10297  1E27  1D03               	btfss	3,2
 10298  1E28  2E1C               	goto	l2862
 10299  1E29  0872               	movf	___bmul@product,w
 10300  1E2A  0008               	return
 10301  1E2B                     __end_of___bmul:	
 10302                           
 10303                           	psect	text10
 10304  0BBE                     __ptext10:	
 10305 ;; *************** function _readIAnalog *****************
 10306 ;; Defined at:
 10307 ;;		line 77 in file "adc.c"
 10308 ;; Parameters:    Size  Location     Type
 10309 ;;  channel         2    6[BANK0 ] unsigned int 
 10310 ;; Auto vars:     Size  Location     Type
 10311 ;;  value           2   11[COMMON] int 
 10312 ;;  analog_chann    2    9[COMMON] unsigned int 
 10313 ;; Return value:  Size  Location     Type
 10314 ;;                  2    6[BANK0 ] int 
 10315 ;; Registers used:
 10316 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10317 ;; Tracked objects:
 10318 ;;		On entry : 0/0
 10319 ;;		On exit  : 0/0
 10320 ;;		Unchanged: 0/0
 10321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10322 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10323 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10324 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10325 ;;      Totals:         4      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10326 ;;Total ram usage:       24 bytes
 10327 ;; Hardware stack levels used:    1
 10328 ;; Hardware stack levels required when called:    1
 10329 ;; This function calls:
 10330 ;;		_ADCRead
 10331 ;;		___aldiv
 10332 ;;		___wmul
 10333 ;; This function is called by:
 10334 ;;		_main
 10335 ;; This function uses a non-reentrant model
 10336 ;;
 10337                           
 10338                           
 10339                           ;psect for function _readIAnalog
 10340  0BBE                     _readIAnalog:	
 10341                           
 10342                           ;adc.c: 79: int16_t value;
 10343                           ;adc.c: 81: uint16_t analog_channel = Ichannels[channel];
 10344                           
 10345                           ;incstack = 0
 10346                           ; Regs used in _readIAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10347  0BBE  0020               	movlb	0	; select bank0
 10348  0BBF  3526               	lslf	readIAnalog@channel,w
 10349  0BC0  3E59               	addlw	(low (_Ichannels| (0+256)))& (0+255)
 10350  0BC1  0086               	movwf	6
 10351  0BC2  3001               	movlw	1	; select bank2/3
 10352  0BC3  0087               	movwf	7
 10353  0BC4  3F40               	moviw [0]fsr1
 10354  0BC5  00F9               	movwf	readIAnalog@analog_channel
 10355  0BC6  3F41               	moviw [1]fsr1
 10356  0BC7  00FA               	movwf	readIAnalog@analog_channel+1
 10357                           
 10358                           ;adc.c: 83: value = ADCRead(analog_channel);
 10359  0BC8  0879               	movf	readIAnalog@analog_channel,w
 10360  0BC9  319E  263E  318B   	fcall	_ADCRead
 10361  0BCC  0871               	movf	?_ADCRead+1,w
 10362  0BCD  00FC               	movwf	readIAnalog@value+1
 10363  0BCE  0870               	movf	?_ADCRead,w
 10364  0BCF  00FB               	movwf	readIAnalog@value
 10365                           
 10366                           ;adc.c: 85: Itotals[channel] = Itotals[channel]-Isamples[channel][IsampleIndex];
 10367  0BD0  0020               	movlb	0	; select bank0
 10368  0BD1  0826               	movf	readIAnalog@channel,w
 10369  0BD2  00A8               	movwf	??_readIAnalog
 10370  0BD3  3001               	movlw	1
 10371  0BD4                     u3425:	
 10372  0BD4  35A8               	lslf	??_readIAnalog,f
 10373  0BD5  3EFF               	addlw	-1
 10374  0BD6  1D03               	skipz
 10375  0BD7  2BD4               	goto	u3425
 10376  0BD8  3528               	lslf	??_readIAnalog,w
 10377  0BD9  3E20               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10378  0BDA  0086               	movwf	6
 10379  0BDB  3001               	movlw	1	; select bank2/3
 10380  0BDC  0087               	movwf	7
 10381  0BDD  3F40               	moviw [0]fsr1
 10382  0BDE  00A9               	movwf	??_readIAnalog+1
 10383  0BDF  3F41               	moviw [1]fsr1
 10384  0BE0  00AA               	movwf	??_readIAnalog+2
 10385  0BE1  3F42               	moviw [2]fsr1
 10386  0BE2  00AB               	movwf	??_readIAnalog+3
 10387  0BE3  3F43               	moviw [3]fsr1
 10388  0BE4  00AC               	movwf	??_readIAnalog+4
 10389  0BE5  0863               	movf	_IsampleIndex+1,w
 10390  0BE6  00AE               	movwf	??_readIAnalog+6
 10391  0BE7  0862               	movf	_IsampleIndex,w
 10392  0BE8  00AD               	movwf	??_readIAnalog+5
 10393  0BE9  35AD               	lslf	??_readIAnalog+5,f
 10394  0BEA  0DAE               	rlf	??_readIAnalog+6,f
 10395  0BEB  0827               	movf	readIAnalog@channel+1,w
 10396  0BEC  00F1               	movwf	___wmul@multiplier+1
 10397  0BED  0826               	movf	readIAnalog@channel,w
 10398  0BEE  00F0               	movwf	___wmul@multiplier
 10399  0BEF  3064               	movlw	100
 10400  0BF0  00F2               	movwf	___wmul@multiplicand
 10401  0BF1  3000               	movlw	0
 10402  0BF2  00F3               	movwf	___wmul@multiplicand+1
 10403  0BF3  319E  2695  318B   	fcall	___wmul
 10404  0BF6  3060               	movlw	96
 10405  0BF7  0020               	movlb	0	; select bank0
 10406  0BF8  00AF               	movwf	??_readIAnalog+7
 10407  0BF9  3022               	movlw	34
 10408  0BFA  00B0               	movwf	??_readIAnalog+8
 10409  0BFB  0870               	movf	?___wmul,w
 10410  0BFC  072F               	addwf	??_readIAnalog+7,w
 10411  0BFD  00B1               	movwf	??_readIAnalog+9
 10412  0BFE  0871               	movf	?___wmul+1,w
 10413  0BFF  3D30               	addwfc	??_readIAnalog+8,w
 10414  0C00  00B2               	movwf	??_readIAnalog+10
 10415  0C01  082D               	movf	??_readIAnalog+5,w
 10416  0C02  0731               	addwf	??_readIAnalog+9,w
 10417  0C03  0086               	movwf	6
 10418  0C04  082E               	movf	??_readIAnalog+6,w
 10419  0C05  3D32               	addwfc	??_readIAnalog+10,w
 10420  0C06  0087               	movwf	7
 10421  0C07  3F40               	moviw [0]fsr1
 10422  0C08  00B3               	movwf	??_readIAnalog+11
 10423  0C09  3F41               	moviw [1]fsr1
 10424  0C0A  00B4               	movwf	??_readIAnalog+12
 10425  0C0B  0833               	movf	??_readIAnalog+11,w
 10426  0C0C  00B5               	movwf	??_readIAnalog+13
 10427  0C0D  0834               	movf	??_readIAnalog+12,w
 10428  0C0E  00B6               	movwf	??_readIAnalog+14
 10429  0C0F  3000               	movlw	0
 10430  0C10  1BB6               	btfsc	??_readIAnalog+14,7
 10431  0C11  30FF               	movlw	255
 10432  0C12  00B7               	movwf	??_readIAnalog+15
 10433  0C13  00B8               	movwf	??_readIAnalog+16
 10434  0C14  09B5               	comf	??_readIAnalog+13,f
 10435  0C15  09B6               	comf	??_readIAnalog+14,f
 10436  0C16  09B7               	comf	??_readIAnalog+15,f
 10437  0C17  09B8               	comf	??_readIAnalog+16,f
 10438  0C18  0AB5               	incf	??_readIAnalog+13,f
 10439  0C19  1903               	skipnz
 10440  0C1A  0AB6               	incf	??_readIAnalog+14,f
 10441  0C1B  1903               	skipnz
 10442  0C1C  0AB7               	incf	??_readIAnalog+15,f
 10443  0C1D  1903               	skipnz
 10444  0C1E  0AB8               	incf	??_readIAnalog+16,f
 10445  0C1F  0835               	movf	??_readIAnalog+13,w
 10446  0C20  07A9               	addwf	??_readIAnalog+1,f
 10447  0C21  0836               	movf	??_readIAnalog+14,w
 10448  0C22  3DAA               	addwfc	??_readIAnalog+2,f
 10449  0C23  0837               	movf	??_readIAnalog+15,w
 10450  0C24  3DAB               	addwfc	??_readIAnalog+3,f
 10451  0C25  0838               	movf	??_readIAnalog+16,w
 10452  0C26  3DAC               	addwfc	??_readIAnalog+4,f
 10453  0C27  0826               	movf	readIAnalog@channel,w
 10454  0C28  00B9               	movwf	??_readIAnalog+17
 10455  0C29  3001               	movlw	1
 10456  0C2A                     u3435:	
 10457  0C2A  35B9               	lslf	??_readIAnalog+17,f
 10458  0C2B  3EFF               	addlw	-1
 10459  0C2C  1D03               	skipz
 10460  0C2D  2C2A               	goto	u3435
 10461  0C2E  3539               	lslf	??_readIAnalog+17,w
 10462  0C2F  3E20               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10463  0C30  0086               	movwf	6
 10464  0C31  3001               	movlw	1	; select bank2/3
 10465  0C32  0087               	movwf	7
 10466  0C33  0829               	movf	??_readIAnalog+1,w
 10467  0C34  3FC0               	movwi [0]fsr1
 10468  0C35  082A               	movf	??_readIAnalog+2,w
 10469  0C36  3FC1               	movwi [1]fsr1
 10470  0C37  082B               	movf	??_readIAnalog+3,w
 10471  0C38  3FC2               	movwi [2]fsr1
 10472  0C39  082C               	movf	??_readIAnalog+4,w
 10473  0C3A  3FC3               	movwi [3]fsr1
 10474                           
 10475                           ;adc.c: 87: Isamples[channel][IsampleIndex] = value;
 10476  0C3B  0863               	movf	_IsampleIndex+1,w
 10477  0C3C  00A9               	movwf	??_readIAnalog+1
 10478  0C3D  0862               	movf	_IsampleIndex,w
 10479  0C3E  00A8               	movwf	??_readIAnalog
 10480  0C3F  35A8               	lslf	??_readIAnalog,f
 10481  0C40  0DA9               	rlf	??_readIAnalog+1,f
 10482  0C41  0827               	movf	readIAnalog@channel+1,w
 10483  0C42  00F1               	movwf	___wmul@multiplier+1
 10484  0C43  0826               	movf	readIAnalog@channel,w
 10485  0C44  00F0               	movwf	___wmul@multiplier
 10486  0C45  3064               	movlw	100
 10487  0C46  00F2               	movwf	___wmul@multiplicand
 10488  0C47  3000               	movlw	0
 10489  0C48  00F3               	movwf	___wmul@multiplicand+1
 10490  0C49  319E  2695  318B   	fcall	___wmul
 10491  0C4C  3060               	movlw	96
 10492  0C4D  0020               	movlb	0	; select bank0
 10493  0C4E  00AA               	movwf	??_readIAnalog+2
 10494  0C4F  3022               	movlw	34
 10495  0C50  00AB               	movwf	??_readIAnalog+3
 10496  0C51  0870               	movf	?___wmul,w
 10497  0C52  072A               	addwf	??_readIAnalog+2,w
 10498  0C53  00AC               	movwf	??_readIAnalog+4
 10499  0C54  0871               	movf	?___wmul+1,w
 10500  0C55  3D2B               	addwfc	??_readIAnalog+3,w
 10501  0C56  00AD               	movwf	??_readIAnalog+5
 10502  0C57  0828               	movf	??_readIAnalog,w
 10503  0C58  072C               	addwf	??_readIAnalog+4,w
 10504  0C59  0086               	movwf	6
 10505  0C5A  0829               	movf	??_readIAnalog+1,w
 10506  0C5B  3D2D               	addwfc	??_readIAnalog+5,w
 10507  0C5C  0087               	movwf	7
 10508  0C5D  087B               	movf	readIAnalog@value,w
 10509  0C5E  3FC0               	movwi [0]fsr1
 10510  0C5F  087C               	movf	readIAnalog@value+1,w
 10511  0C60  3FC1               	movwi [1]fsr1
 10512                           
 10513                           ;adc.c: 89: Itotals[channel] = Itotals[channel]+Isamples[channel][IsampleIndex];
 10514  0C61  0826               	movf	readIAnalog@channel,w
 10515  0C62  00A8               	movwf	??_readIAnalog
 10516  0C63  3001               	movlw	1
 10517  0C64                     u3445:	
 10518  0C64  35A8               	lslf	??_readIAnalog,f
 10519  0C65  3EFF               	addlw	-1
 10520  0C66  1D03               	skipz
 10521  0C67  2C64               	goto	u3445
 10522  0C68  3528               	lslf	??_readIAnalog,w
 10523  0C69  3E20               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10524  0C6A  0086               	movwf	6
 10525  0C6B  3001               	movlw	1	; select bank2/3
 10526  0C6C  0087               	movwf	7
 10527  0C6D  3F40               	moviw [0]fsr1
 10528  0C6E  00A9               	movwf	??_readIAnalog+1
 10529  0C6F  3F41               	moviw [1]fsr1
 10530  0C70  00AA               	movwf	??_readIAnalog+2
 10531  0C71  3F42               	moviw [2]fsr1
 10532  0C72  00AB               	movwf	??_readIAnalog+3
 10533  0C73  3F43               	moviw [3]fsr1
 10534  0C74  00AC               	movwf	??_readIAnalog+4
 10535  0C75  0863               	movf	_IsampleIndex+1,w
 10536  0C76  00AE               	movwf	??_readIAnalog+6
 10537  0C77  0862               	movf	_IsampleIndex,w
 10538  0C78  00AD               	movwf	??_readIAnalog+5
 10539  0C79  35AD               	lslf	??_readIAnalog+5,f
 10540  0C7A  0DAE               	rlf	??_readIAnalog+6,f
 10541  0C7B  0827               	movf	readIAnalog@channel+1,w
 10542  0C7C  00F1               	movwf	___wmul@multiplier+1
 10543  0C7D  0826               	movf	readIAnalog@channel,w
 10544  0C7E  00F0               	movwf	___wmul@multiplier
 10545  0C7F  3064               	movlw	100
 10546  0C80  00F2               	movwf	___wmul@multiplicand
 10547  0C81  3000               	movlw	0
 10548  0C82  00F3               	movwf	___wmul@multiplicand+1
 10549  0C83  319E  2695  318B   	fcall	___wmul
 10550  0C86  3060               	movlw	96
 10551  0C87  0020               	movlb	0	; select bank0
 10552  0C88  00AF               	movwf	??_readIAnalog+7
 10553  0C89  3022               	movlw	34
 10554  0C8A  00B0               	movwf	??_readIAnalog+8
 10555  0C8B  0870               	movf	?___wmul,w
 10556  0C8C  072F               	addwf	??_readIAnalog+7,w
 10557  0C8D  00B1               	movwf	??_readIAnalog+9
 10558  0C8E  0871               	movf	?___wmul+1,w
 10559  0C8F  3D30               	addwfc	??_readIAnalog+8,w
 10560  0C90  00B2               	movwf	??_readIAnalog+10
 10561  0C91  082D               	movf	??_readIAnalog+5,w
 10562  0C92  0731               	addwf	??_readIAnalog+9,w
 10563  0C93  0086               	movwf	6
 10564  0C94  082E               	movf	??_readIAnalog+6,w
 10565  0C95  3D32               	addwfc	??_readIAnalog+10,w
 10566  0C96  0087               	movwf	7
 10567  0C97  3F40               	moviw [0]fsr1
 10568  0C98  00B3               	movwf	??_readIAnalog+11
 10569  0C99  3F41               	moviw [1]fsr1
 10570  0C9A  00B4               	movwf	??_readIAnalog+12
 10571  0C9B  0833               	movf	??_readIAnalog+11,w
 10572  0C9C  00B5               	movwf	??_readIAnalog+13
 10573  0C9D  0834               	movf	??_readIAnalog+12,w
 10574  0C9E  00B6               	movwf	??_readIAnalog+14
 10575  0C9F  3000               	movlw	0
 10576  0CA0  1BB6               	btfsc	??_readIAnalog+14,7
 10577  0CA1  30FF               	movlw	255
 10578  0CA2  00B7               	movwf	??_readIAnalog+15
 10579  0CA3  00B8               	movwf	??_readIAnalog+16
 10580  0CA4  0835               	movf	??_readIAnalog+13,w
 10581  0CA5  07A9               	addwf	??_readIAnalog+1,f
 10582  0CA6  0836               	movf	??_readIAnalog+14,w
 10583  0CA7  3DAA               	addwfc	??_readIAnalog+2,f
 10584  0CA8  0837               	movf	??_readIAnalog+15,w
 10585  0CA9  3DAB               	addwfc	??_readIAnalog+3,f
 10586  0CAA  0838               	movf	??_readIAnalog+16,w
 10587  0CAB  3DAC               	addwfc	??_readIAnalog+4,f
 10588  0CAC  0826               	movf	readIAnalog@channel,w
 10589  0CAD  00B9               	movwf	??_readIAnalog+17
 10590  0CAE  3001               	movlw	1
 10591  0CAF                     u3455:	
 10592  0CAF  35B9               	lslf	??_readIAnalog+17,f
 10593  0CB0  3EFF               	addlw	-1
 10594  0CB1  1D03               	skipz
 10595  0CB2  2CAF               	goto	u3455
 10596  0CB3  3539               	lslf	??_readIAnalog+17,w
 10597  0CB4  3E20               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10598  0CB5  0086               	movwf	6
 10599  0CB6  3001               	movlw	1	; select bank2/3
 10600  0CB7  0087               	movwf	7
 10601  0CB8  0829               	movf	??_readIAnalog+1,w
 10602  0CB9  3FC0               	movwi [0]fsr1
 10603  0CBA  082A               	movf	??_readIAnalog+2,w
 10604  0CBB  3FC1               	movwi [1]fsr1
 10605  0CBC  082B               	movf	??_readIAnalog+3,w
 10606  0CBD  3FC2               	movwi [2]fsr1
 10607  0CBE  082C               	movf	??_readIAnalog+4,w
 10608  0CBF  3FC3               	movwi [3]fsr1
 10609                           
 10610                           ;adc.c: 91: if(channel>=(4-1))
 10611  0CC0  3000               	movlw	0
 10612  0CC1  0227               	subwf	readIAnalog@channel+1,w
 10613  0CC2  3003               	movlw	3
 10614  0CC3  1903               	skipnz
 10615  0CC4  0226               	subwf	readIAnalog@channel,w
 10616  0CC5  1C03               	skipc
 10617  0CC6  2CD4               	goto	l3054
 10618                           
 10619                           ;adc.c: 92: {
 10620                           ;adc.c: 93: IsampleIndex+=1;
 10621  0CC7  3001               	movlw	1
 10622  0CC8  07E2               	addwf	_IsampleIndex,f
 10623  0CC9  3000               	movlw	0
 10624  0CCA  3DE3               	addwfc	_IsampleIndex+1,f
 10625                           
 10626                           ;adc.c: 94: if(IsampleIndex >= 50)IsampleIndex = 0;
 10627  0CCB  3000               	movlw	0
 10628  0CCC  0263               	subwf	_IsampleIndex+1,w
 10629  0CCD  3032               	movlw	50
 10630  0CCE  1903               	skipnz
 10631  0CCF  0262               	subwf	_IsampleIndex,w
 10632  0CD0  1C03               	skipc
 10633  0CD1  2CD4               	goto	l3054
 10634  0CD2  01E2               	clrf	_IsampleIndex
 10635  0CD3  01E3               	clrf	_IsampleIndex+1
 10636  0CD4                     l3054:	
 10637                           
 10638                           ;adc.c: 95: }
 10639                           ;adc.c: 97: value = Itotals[channel]/50;
 10640  0CD4  3000               	movlw	0
 10641  0CD5  00F3               	movwf	___aldiv@divisor+3
 10642  0CD6  3000               	movlw	0
 10643  0CD7  00F2               	movwf	___aldiv@divisor+2
 10644  0CD8  3000               	movlw	0
 10645  0CD9  00F1               	movwf	___aldiv@divisor+1
 10646  0CDA  3032               	movlw	50
 10647  0CDB  00F0               	movwf	___aldiv@divisor
 10648  0CDC  0826               	movf	readIAnalog@channel,w
 10649  0CDD  00A8               	movwf	??_readIAnalog
 10650  0CDE  3001               	movlw	1
 10651  0CDF                     u3485:	
 10652  0CDF  35A8               	lslf	??_readIAnalog,f
 10653  0CE0  3EFF               	addlw	-1
 10654  0CE1  1D03               	skipz
 10655  0CE2  2CDF               	goto	u3485
 10656  0CE3  3528               	lslf	??_readIAnalog,w
 10657  0CE4  3E20               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10658  0CE5  0086               	movwf	6
 10659  0CE6  3001               	movlw	1	; select bank2/3
 10660  0CE7  0087               	movwf	7
 10661  0CE8  3F40               	moviw [0]fsr1
 10662  0CE9  00F4               	movwf	___aldiv@dividend
 10663  0CEA  3F41               	moviw [1]fsr1
 10664  0CEB  00F5               	movwf	___aldiv@dividend+1
 10665  0CEC  3F42               	moviw [2]fsr1
 10666  0CED  00F6               	movwf	___aldiv@dividend+2
 10667  0CEE  3F43               	moviw [3]fsr1
 10668  0CEF  00F7               	movwf	___aldiv@dividend+3
 10669  0CF0  3194  2467         	fcall	___aldiv
 10670  0CF2  0871               	movf	?___aldiv+1,w
 10671  0CF3  00FC               	movwf	readIAnalog@value+1
 10672  0CF4  0870               	movf	?___aldiv,w
 10673  0CF5  00FB               	movwf	readIAnalog@value
 10674                           
 10675                           ;adc.c: 99: return value;
 10676  0CF6  087C               	movf	readIAnalog@value+1,w
 10677  0CF7  0020               	movlb	0	; select bank0
 10678  0CF8  00A7               	movwf	?_readIAnalog+1
 10679  0CF9  087B               	movf	readIAnalog@value,w
 10680  0CFA  00A6               	movwf	?_readIAnalog
 10681  0CFB  0008               	return
 10682  0CFC                     __end_of_readIAnalog:	
 10683                           
 10684                           	psect	text11
 10685  1467                     __ptext11:	
 10686 ;; *************** function ___aldiv *****************
 10687 ;; Defined at:
 10688 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
 10689 ;; Parameters:    Size  Location     Type
 10690 ;;  divisor         4    0[COMMON] long 
 10691 ;;  dividend        4    4[COMMON] long 
 10692 ;; Auto vars:     Size  Location     Type
 10693 ;;  quotient        4    2[BANK0 ] long 
 10694 ;;  sign            1    1[BANK0 ] unsigned char 
 10695 ;;  counter         1    0[BANK0 ] unsigned char 
 10696 ;; Return value:  Size  Location     Type
 10697 ;;                  4    0[COMMON] long 
 10698 ;; Registers used:
 10699 ;;		wreg, status,2, status,0
 10700 ;; Tracked objects:
 10701 ;;		On entry : 0/0
 10702 ;;		On exit  : 0/0
 10703 ;;		Unchanged: 0/0
 10704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10705 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10706 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10707 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10708 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10709 ;;Total ram usage:       15 bytes
 10710 ;; Hardware stack levels used:    1
 10711 ;; This function calls:
 10712 ;;		Nothing
 10713 ;; This function is called by:
 10714 ;;		_readIAnalog
 10715 ;;		_readVAnalog
 10716 ;; This function uses a non-reentrant model
 10717 ;;
 10718                           
 10719                           
 10720                           ;psect for function ___aldiv
 10721  1467                     ___aldiv:	
 10722                           
 10723                           ;incstack = 0
 10724                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 10725  1467  0020               	movlb	0	; select bank0
 10726  1468  01A1               	clrf	___aldiv@sign
 10727  1469  1FF3               	btfss	___aldiv@divisor+3,7
 10728  146A  2C78               	goto	l679
 10729  146B  09F0               	comf	___aldiv@divisor,f
 10730  146C  09F1               	comf	___aldiv@divisor+1,f
 10731  146D  09F2               	comf	___aldiv@divisor+2,f
 10732  146E  09F3               	comf	___aldiv@divisor+3,f
 10733  146F  0AF0               	incf	___aldiv@divisor,f
 10734  1470  1903               	skipnz
 10735  1471  0AF1               	incf	___aldiv@divisor+1,f
 10736  1472  1903               	skipnz
 10737  1473  0AF2               	incf	___aldiv@divisor+2,f
 10738  1474  1903               	skipnz
 10739  1475  0AF3               	incf	___aldiv@divisor+3,f
 10740  1476  01A1               	clrf	___aldiv@sign
 10741  1477  0AA1               	incf	___aldiv@sign,f
 10742  1478                     l679:	
 10743  1478  1FF7               	btfss	___aldiv@dividend+3,7
 10744  1479  2C89               	goto	l2884
 10745  147A  09F4               	comf	___aldiv@dividend,f
 10746  147B  09F5               	comf	___aldiv@dividend+1,f
 10747  147C  09F6               	comf	___aldiv@dividend+2,f
 10748  147D  09F7               	comf	___aldiv@dividend+3,f
 10749  147E  0AF4               	incf	___aldiv@dividend,f
 10750  147F  1903               	skipnz
 10751  1480  0AF5               	incf	___aldiv@dividend+1,f
 10752  1481  1903               	skipnz
 10753  1482  0AF6               	incf	___aldiv@dividend+2,f
 10754  1483  1903               	skipnz
 10755  1484  0AF7               	incf	___aldiv@dividend+3,f
 10756  1485  3001               	movlw	1
 10757  1486  00F8               	movwf	??___aldiv
 10758  1487  0878               	movf	??___aldiv,w
 10759  1488  06A1               	xorwf	___aldiv@sign,f
 10760  1489                     l2884:	
 10761  1489  3000               	movlw	0
 10762  148A  00A5               	movwf	___aldiv@quotient+3
 10763  148B  3000               	movlw	0
 10764  148C  00A4               	movwf	___aldiv@quotient+2
 10765  148D  3000               	movlw	0
 10766  148E  00A3               	movwf	___aldiv@quotient+1
 10767  148F  3000               	movlw	0
 10768  1490  00A2               	movwf	___aldiv@quotient
 10769  1491  0873               	movf	___aldiv@divisor+3,w
 10770  1492  0472               	iorwf	___aldiv@divisor+2,w
 10771  1493  0471               	iorwf	___aldiv@divisor+1,w
 10772  1494  0470               	iorwf	___aldiv@divisor,w
 10773  1495  1903               	skipnz
 10774  1496  2CD2               	goto	l2906
 10775  1497  01A0               	clrf	___aldiv@counter
 10776  1498  0AA0               	incf	___aldiv@counter,f
 10777  1499                     l2892:	
 10778  1499  1BF3               	btfsc	___aldiv@divisor+3,7
 10779  149A  2CA7               	goto	l2894
 10780  149B  3001               	movlw	1
 10781  149C                     u3105:	
 10782  149C  35F0               	lslf	___aldiv@divisor,f
 10783  149D  0DF1               	rlf	___aldiv@divisor+1,f
 10784  149E  0DF2               	rlf	___aldiv@divisor+2,f
 10785  149F  0DF3               	rlf	___aldiv@divisor+3,f
 10786  14A0  0B89               	decfsz	9,f
 10787  14A1  2C9C               	goto	u3105
 10788  14A2  3001               	movlw	1
 10789  14A3  00F8               	movwf	??___aldiv
 10790  14A4  0878               	movf	??___aldiv,w
 10791  14A5  07A0               	addwf	___aldiv@counter,f
 10792  14A6  2C99               	goto	l2892
 10793  14A7                     l2894:	
 10794  14A7  3001               	movlw	1
 10795  14A8                     u3125:	
 10796  14A8  35A2               	lslf	___aldiv@quotient,f
 10797  14A9  0DA3               	rlf	___aldiv@quotient+1,f
 10798  14AA  0DA4               	rlf	___aldiv@quotient+2,f
 10799  14AB  0DA5               	rlf	___aldiv@quotient+3,f
 10800  14AC  0B89               	decfsz	9,f
 10801  14AD  2CA8               	goto	u3125
 10802  14AE  0873               	movf	___aldiv@divisor+3,w
 10803  14AF  0277               	subwf	___aldiv@dividend+3,w
 10804  14B0  1D03               	skipz
 10805  14B1  2CBC               	goto	u3135
 10806  14B2  0872               	movf	___aldiv@divisor+2,w
 10807  14B3  0276               	subwf	___aldiv@dividend+2,w
 10808  14B4  1D03               	skipz
 10809  14B5  2CBC               	goto	u3135
 10810  14B6  0871               	movf	___aldiv@divisor+1,w
 10811  14B7  0275               	subwf	___aldiv@dividend+1,w
 10812  14B8  1D03               	skipz
 10813  14B9  2CBC               	goto	u3135
 10814  14BA  0870               	movf	___aldiv@divisor,w
 10815  14BB  0274               	subwf	___aldiv@dividend,w
 10816  14BC                     u3135:	
 10817  14BC  1C03               	skipc
 10818  14BD  2CC7               	goto	l2902
 10819  14BE  0870               	movf	___aldiv@divisor,w
 10820  14BF  02F4               	subwf	___aldiv@dividend,f
 10821  14C0  0871               	movf	___aldiv@divisor+1,w
 10822  14C1  3BF5               	subwfb	___aldiv@dividend+1,f
 10823  14C2  0872               	movf	___aldiv@divisor+2,w
 10824  14C3  3BF6               	subwfb	___aldiv@dividend+2,f
 10825  14C4  0873               	movf	___aldiv@divisor+3,w
 10826  14C5  3BF7               	subwfb	___aldiv@dividend+3,f
 10827  14C6  1422               	bsf	___aldiv@quotient,0
 10828  14C7                     l2902:	
 10829  14C7  3001               	movlw	1
 10830  14C8                     u3145:	
 10831  14C8  36F3               	lsrf	___aldiv@divisor+3,f
 10832  14C9  0CF2               	rrf	___aldiv@divisor+2,f
 10833  14CA  0CF1               	rrf	___aldiv@divisor+1,f
 10834  14CB  0CF0               	rrf	___aldiv@divisor,f
 10835  14CC  0B89               	decfsz	9,f
 10836  14CD  2CC8               	goto	u3145
 10837  14CE  3001               	movlw	1
 10838  14CF  02A0               	subwf	___aldiv@counter,f
 10839  14D0  1D03               	btfss	3,2
 10840  14D1  2CA7               	goto	l2894
 10841  14D2                     l2906:	
 10842  14D2  0821               	movf	___aldiv@sign,w
 10843  14D3  1903               	btfsc	3,2
 10844  14D4  2CE0               	goto	l2910
 10845  14D5  09A2               	comf	___aldiv@quotient,f
 10846  14D6  09A3               	comf	___aldiv@quotient+1,f
 10847  14D7  09A4               	comf	___aldiv@quotient+2,f
 10848  14D8  09A5               	comf	___aldiv@quotient+3,f
 10849  14D9  0AA2               	incf	___aldiv@quotient,f
 10850  14DA  1903               	skipnz
 10851  14DB  0AA3               	incf	___aldiv@quotient+1,f
 10852  14DC  1903               	skipnz
 10853  14DD  0AA4               	incf	___aldiv@quotient+2,f
 10854  14DE  1903               	skipnz
 10855  14DF  0AA5               	incf	___aldiv@quotient+3,f
 10856  14E0                     l2910:	
 10857  14E0  0825               	movf	___aldiv@quotient+3,w
 10858  14E1  00F3               	movwf	?___aldiv+3
 10859  14E2  0824               	movf	___aldiv@quotient+2,w
 10860  14E3  00F2               	movwf	?___aldiv+2
 10861  14E4  0823               	movf	___aldiv@quotient+1,w
 10862  14E5  00F1               	movwf	?___aldiv+1
 10863  14E6  0822               	movf	___aldiv@quotient,w
 10864  14E7  00F0               	movwf	?___aldiv
 10865  14E8  0008               	return
 10866  14E9                     __end_of___aldiv:	
 10867                           
 10868                           	psect	text12
 10869  14E9                     __ptext12:	
 10870 ;; *************** function _readButton *****************
 10871 ;; Defined at:
 10872 ;;		line 8 in file "buttons.c"
 10873 ;; Parameters:    Size  Location     Type
 10874 ;;		None
 10875 ;; Auto vars:     Size  Location     Type
 10876 ;;		None
 10877 ;; Return value:  Size  Location     Type
 10878 ;;                  1    wreg      unsigned char 
 10879 ;; Registers used:
 10880 ;;		wreg, status,2, status,0, pclath, cstack
 10881 ;; Tracked objects:
 10882 ;;		On entry : 0/0
 10883 ;;		On exit  : 0/0
 10884 ;;		Unchanged: 0/0
 10885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10888 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10889 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10890 ;;Total ram usage:        3 bytes
 10891 ;; Hardware stack levels used:    1
 10892 ;; Hardware stack levels required when called:    1
 10893 ;; This function calls:
 10894 ;;		_ADCRead
 10895 ;; This function is called by:
 10896 ;;		_main
 10897 ;; This function uses a non-reentrant model
 10898 ;;
 10899                           
 10900                           
 10901                           ;psect for function _readButton
 10902  14E9                     _readButton:	
 10903                           
 10904                           ;buttons.c: 10: readButtons=ADCRead(11);
 10905                           
 10906                           ;incstack = 0
 10907                           ; Regs used in _readButton: [wreg+status,2+status,0+pclath+cstack]
 10908  14E9  300B               	movlw	11
 10909  14EA  319E  263E  3194   	fcall	_ADCRead
 10910  14ED  0871               	movf	?_ADCRead+1,w
 10911  14EE  0020               	movlb	0	; select bank0
 10912  14EF  00E9               	movwf	_readButtons+1
 10913  14F0  0870               	movf	?_ADCRead,w
 10914  14F1  00E8               	movwf	_readButtons
 10915                           
 10916                           ;buttons.c: 12: if(readButtons>=365&&readButtons<405)
 10917  14F2  0869               	movf	_readButtons+1,w
 10918  14F3  3A80               	xorlw	128
 10919  14F4  00F4               	movwf	??_readButton
 10920  14F5  3081               	movlw	129
 10921  14F6  0274               	subwf	??_readButton,w
 10922  14F7  1D03               	skipz
 10923  14F8  2CFB               	goto	u3645
 10924  14F9  306D               	movlw	109
 10925  14FA  0268               	subwf	_readButtons,w
 10926  14FB                     u3645:	
 10927  14FB  1C03               	skipc
 10928  14FC  2D0D               	goto	l3110
 10929  14FD  0020               	movlb	0	; select bank0
 10930  14FE  0869               	movf	_readButtons+1,w
 10931  14FF  3A80               	xorlw	128
 10932  1500  00F4               	movwf	??_readButton
 10933  1501  3081               	movlw	129
 10934  1502  0274               	subwf	??_readButton,w
 10935  1503  1D03               	skipz
 10936  1504  2D07               	goto	u3655
 10937  1505  3095               	movlw	149
 10938  1506  0268               	subwf	_readButtons,w
 10939  1507                     u3655:	
 10940  1507  1803               	skipnc
 10941  1508  2D0D               	goto	l3110
 10942                           
 10943                           ;buttons.c: 13: {
 10944                           ;buttons.c: 14: button=1;
 10945  1509  0020               	movlb	0	; select bank0
 10946  150A  01EA               	clrf	_button
 10947  150B  0AEA               	incf	_button,f
 10948                           
 10949                           ;buttons.c: 15: }
 10950  150C  2D3B               	goto	l3122
 10951  150D                     l3110:	
 10952                           
 10953                           ;buttons.c: 17: else if(readButtons>=535&&readButtons<590)
 10954  150D  0020               	movlb	0	; select bank0
 10955  150E  0869               	movf	_readButtons+1,w
 10956  150F  3A80               	xorlw	128
 10957  1510  00F4               	movwf	??_readButton
 10958  1511  3082               	movlw	130
 10959  1512  0274               	subwf	??_readButton,w
 10960  1513  1D03               	skipz
 10961  1514  2D17               	goto	u3665
 10962  1515  3017               	movlw	23
 10963  1516  0268               	subwf	_readButtons,w
 10964  1517                     u3665:	
 10965  1517  1C03               	skipc
 10966  1518  2D27               	goto	l3116
 10967  1519  0020               	movlb	0	; select bank0
 10968  151A  0869               	movf	_readButtons+1,w
 10969  151B  3A80               	xorlw	128
 10970  151C  00F4               	movwf	??_readButton
 10971  151D  3082               	movlw	130
 10972  151E  0274               	subwf	??_readButton,w
 10973  151F  1D03               	skipz
 10974  1520  2D23               	goto	u3675
 10975  1521  304E               	movlw	78
 10976  1522  0268               	subwf	_readButtons,w
 10977  1523                     u3675:	
 10978  1523  1803               	skipnc
 10979  1524  2D27               	goto	l3116
 10980                           
 10981                           ;buttons.c: 18: {
 10982                           ;buttons.c: 19: button=2;
 10983  1525  3002               	movlw	2
 10984  1526  2D34               	goto	L8
 10985  1527                     l3116:	
 10986                           ;buttons.c: 20: }
 10987                           
 10988                           
 10989                           ;buttons.c: 22: else if(readButtons>745)
 10990  1527  0020               	movlb	0	; select bank0
 10991  1528  0869               	movf	_readButtons+1,w
 10992  1529  3A80               	xorlw	128
 10993  152A  00F4               	movwf	??_readButton
 10994  152B  3082               	movlw	130
 10995  152C  0274               	subwf	??_readButton,w
 10996  152D  1D03               	skipz
 10997  152E  2D31               	goto	u3685
 10998  152F  30EA               	movlw	234
 10999  1530  0268               	subwf	_readButtons,w
 11000  1531                     u3685:	
 11001  1531  1C03               	skipc
 11002  1532  2D39               	goto	l3120
 11003                           
 11004                           ;buttons.c: 23: {
 11005                           ;buttons.c: 24: button=3;
 11006  1533  3003               	movlw	3
 11007  1534                     L8:	
 11008  1534  00F4               	movwf	??_readButton
 11009  1535  0874               	movf	??_readButton,w
 11010  1536  0020               	movlb	0	; select bank0
 11011  1537  00EA               	movwf	_button
 11012                           
 11013                           ;buttons.c: 25: }
 11014  1538  2D3B               	goto	l3122
 11015  1539                     l3120:	
 11016                           
 11017                           ;buttons.c: 27: else
 11018                           ;buttons.c: 28: {
 11019                           ;buttons.c: 29: button=0;
 11020  1539  0020               	movlb	0	; select bank0
 11021  153A  01EA               	clrf	_button
 11022  153B                     l3122:	
 11023                           
 11024                           ;buttons.c: 30: }
 11025                           ;buttons.c: 32: if (button!=0)
 11026  153B  086A               	movf	_button,w
 11027  153C  1903               	btfsc	3,2
 11028  153D  2D69               	goto	l3142
 11029                           
 11030                           ;buttons.c: 33: {
 11031                           ;buttons.c: 34: if (button!=lastButton)
 11032  153E  086A               	movf	_button,w
 11033  153F  066C               	xorwf	_lastButton,w
 11034  1540  1903               	skipnz
 11035  1541  2D47               	goto	l3130
 11036                           
 11037                           ;buttons.c: 35: {
 11038                           ;buttons.c: 36: lastButton=button;
 11039  1542  086A               	movf	_button,w
 11040  1543  00F4               	movwf	??_readButton
 11041  1544  0874               	movf	??_readButton,w
 11042  1545  00EC               	movwf	_lastButton
 11043  1546  2D69               	goto	l3142
 11044  1547                     l3130:	
 11045                           ;buttons.c: 38: }
 11046                           
 11047                           ;buttons.c: 37: j=0;
 11048                           
 11049                           
 11050                           ;buttons.c: 39: else
 11051                           ;buttons.c: 40: {
 11052                           ;buttons.c: 41: j+=1;
 11053  1547  3001               	movlw	1
 11054  1548  00F4               	movwf	??_readButton
 11055  1549  0874               	movf	??_readButton,w
 11056  154A  07EB               	addwf	_j,f
 11057                           
 11058                           ;buttons.c: 43: if(j==1)
 11059  154B  036B               	decf	_j,w
 11060  154C  1D03               	btfss	3,2
 11061  154D  2D50               	goto	l3136
 11062                           
 11063                           ;buttons.c: 44: {
 11064                           ;buttons.c: 45: return (lastButton);
 11065  154E  086C               	movf	_lastButton,w
 11066  154F  0008               	return
 11067  1550                     l3136:	
 11068                           
 11069                           ;buttons.c: 46: }
 11070                           ;buttons.c: 48: if (j>10)
 11071  1550  086B               	movf	_j,w
 11072  1551  3A80               	xorlw	128
 11073  1552  3E75               	addlw	-139
 11074  1553  1C03               	skipc
 11075  1554  2D6A               	goto	l3144
 11076                           
 11077                           ;buttons.c: 49: {
 11078                           ;buttons.c: 50: _delay((unsigned long)((25)*(32000000/4000.0)));
 11079  1555  3002               	movlw	2
 11080  1556  00F6               	movwf	??_readButton+2
 11081  1557  3004               	movlw	4
 11082  1558  00F5               	movwf	??_readButton+1
 11083  1559  30BA               	movlw	186
 11084  155A  00F4               	movwf	??_readButton
 11085  155B                     u4527:	
 11086  155B  0BF4               	decfsz	??_readButton,f
 11087  155C  2D5B               	goto	u4527
 11088  155D  0BF5               	decfsz	??_readButton+1,f
 11089  155E  2D5B               	goto	u4527
 11090  155F  0BF6               	decfsz	??_readButton+2,f
 11091  1560  2D5B               	goto	u4527
 11092  1561  0000               	nop
 11093                           
 11094                           ;buttons.c: 51: j=10;
 11095  1562  300A               	movlw	10
 11096  1563  00F4               	movwf	??_readButton
 11097  1564  0874               	movf	??_readButton,w
 11098  1565  0020               	movlb	0	; select bank0
 11099  1566  00EB               	movwf	_j
 11100                           
 11101                           ;buttons.c: 52: return (lastButton);
 11102  1567  086C               	movf	_lastButton,w
 11103  1568  0008               	return
 11104  1569                     l3142:	
 11105                           ;buttons.c: 53: }
 11106                           ;buttons.c: 54: }
 11107                           ;buttons.c: 55: goto end;
 11108                           
 11109                           
 11110                           ;buttons.c: 56: }
 11111                           ;buttons.c: 58: j=0;
 11112  1569  01EB               	clrf	_j
 11113  156A                     l3144:	
 11114                           ;buttons.c: 60: end:
 11115                           
 11116                           
 11117                           ;buttons.c: 62: return (0);
 11118  156A  3000               	movlw	0
 11119  156B  0008               	return
 11120  156C                     __end_of_readButton:	
 11121                           
 11122                           	psect	text13
 11123  1E3E                     __ptext13:	
 11124 ;; *************** function _ADCRead *****************
 11125 ;; Defined at:
 11126 ;;		line 21 in file "adc.c"
 11127 ;; Parameters:    Size  Location     Type
 11128 ;;  channel         1    wreg     enum E13615
 11129 ;; Auto vars:     Size  Location     Type
 11130 ;;  channel         1    3[COMMON] enum E13615
 11131 ;; Return value:  Size  Location     Type
 11132 ;;                  2    0[COMMON] int 
 11133 ;; Registers used:
 11134 ;;		wreg
 11135 ;; Tracked objects:
 11136 ;;		On entry : 0/0
 11137 ;;		On exit  : 0/0
 11138 ;;		Unchanged: 0/0
 11139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11140 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11141 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11143 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11144 ;;Total ram usage:        4 bytes
 11145 ;; Hardware stack levels used:    1
 11146 ;; This function calls:
 11147 ;;		Nothing
 11148 ;; This function is called by:
 11149 ;;		_main
 11150 ;;		_readIAnalog
 11151 ;;		_readVAnalog
 11152 ;;		_readButton
 11153 ;; This function uses a non-reentrant model
 11154 ;;
 11155                           
 11156                           
 11157                           ;psect for function _ADCRead
 11158  1E3E                     _ADCRead:	
 11159                           
 11160                           ;incstack = 0
 11161                           ; Regs used in _ADCRead: [wreg]
 11162                           ;ADCRead@channel stored from wreg
 11163  1E3E  00F3               	movwf	ADCRead@channel
 11164                           
 11165                           ;adc.c: 23: ADPCH = channel_VSS;
 11166  1E3F  303C               	movlw	60
 11167  1E40  0021               	movlb	1	; select bank1
 11168  1E41  009E               	movwf	30	;volatile
 11169                           
 11170                           ;adc.c: 25: ADCON0bits.ADON = 1;
 11171  1E42  1793               	bsf	19,7	;volatile
 11172                           
 11173                           ;adc.c: 27: ADCON0bits.ADCONT = 0;
 11174  1E43  1313               	bcf	19,6	;volatile
 11175                           
 11176                           ;adc.c: 29: ADCON0bits.ADGO = 1;
 11177  1E44  1413               	bsf	19,0	;volatile
 11178  1E45                     l211:	
 11179                           ;adc.c: 32: {
 11180                           
 11181                           ;adc.c: 31: while(ADCON0bits.ADGO)
 11182                           
 11183  1E45  1813               	btfsc	19,0	;volatile
 11184  1E46  2E45               	goto	l211
 11185                           
 11186                           ;adc.c: 33: }
 11187                           ;adc.c: 35: ADPCH = channel;
 11188  1E47  0873               	movf	ADCRead@channel,w
 11189  1E48  009E               	movwf	30	;volatile
 11190                           
 11191                           ;adc.c: 37: ADCON0bits.ADON = 1;
 11192  1E49  1793               	bsf	19,7	;volatile
 11193                           
 11194                           ;adc.c: 39: ADCON0bits.ADCONT = 0;
 11195  1E4A  1313               	bcf	19,6	;volatile
 11196                           
 11197                           ;adc.c: 41: ADCON0bits.ADGO = 1;
 11198  1E4B  1413               	bsf	19,0	;volatile
 11199  1E4C                     l214:	
 11200                           ;adc.c: 44: {
 11201                           
 11202                           ;adc.c: 43: while(ADCON0bits.ADGO)
 11203                           
 11204  1E4C  1813               	btfsc	19,0	;volatile
 11205  1E4D  2E4C               	goto	l214
 11206                           
 11207                           ;adc.c: 45: }
 11208                           ;adc.c: 47: return ((ADRESH<<8)+ADRESL);
 11209  1E4E  080D               	movf	13,w	;volatile
 11210  1E4F  00F1               	movwf	?_ADCRead+1
 11211  1E50  080C               	movf	12,w	;volatile
 11212  1E51  00F0               	movwf	?_ADCRead
 11213  1E52  0008               	return
 11214  1E53                     __end_of_ADCRead:	
 11215                           
 11216                           	psect	text14
 11217  0CFC                     __ptext14:	
 11218 ;; *************** function _cc_cv_mode *****************
 11219 ;; Defined at:
 11220 ;;		line 103 in file "battery_charger.c"
 11221 ;; Parameters:    Size  Location     Type
 11222 ;;  z               1    wreg     unsigned char 
 11223 ;; Auto vars:     Size  Location     Type
 11224 ;;  z               1   38[BANK0 ] unsigned char 
 11225 ;; Return value:  Size  Location     Type
 11226 ;;                  1    wreg      void 
 11227 ;; Registers used:
 11228 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11229 ;; Tracked objects:
 11230 ;;		On entry : 0/0
 11231 ;;		On exit  : 0/0
 11232 ;;		Unchanged: 0/0
 11233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11235 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11236 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11237 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11238 ;;Total ram usage:        8 bytes
 11239 ;; Hardware stack levels used:    1
 11240 ;; Hardware stack levels required when called:    2
 11241 ;; This function calls:
 11242 ;;		___awtoft
 11243 ;;		___ftmul
 11244 ;;		___fttol
 11245 ;; This function is called by:
 11246 ;;		_main
 11247 ;; This function uses a non-reentrant model
 11248 ;;
 11249                           
 11250                           
 11251                           ;psect for function _cc_cv_mode
 11252  0CFC                     _cc_cv_mode:	
 11253                           
 11254                           ;incstack = 0
 11255                           ; Regs used in _cc_cv_mode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11256                           ;cc_cv_mode@z stored from wreg
 11257  0CFC  0020               	movlb	0	; select bank0
 11258  0CFD  00C6               	movwf	cc_cv_mode@z
 11259                           
 11260                           ;battery_charger.c: 105: if(voltage[z]>=Vref[z])
 11261  0CFE  3546               	lslf	cc_cv_mode@z,w
 11262  0CFF  3EB4               	addlw	(low (_Vref| 0))& (0+255)
 11263  0D00  0086               	movwf	6
 11264  0D01  0187               	clrf	7
 11265  0D02  3F40               	moviw [0]fsr1
 11266  0D03  00BF               	movwf	??_cc_cv_mode
 11267  0D04  3F41               	moviw [1]fsr1
 11268  0D05  00C0               	movwf	??_cc_cv_mode+1
 11269  0D06  3546               	lslf	cc_cv_mode@z,w
 11270  0D07  3EA8               	addlw	(low (_voltage| 0))& (0+255)
 11271  0D08  0086               	movwf	6
 11272  0D09  0187               	clrf	7
 11273  0D0A  3F40               	moviw [0]fsr1
 11274  0D0B  00C1               	movwf	??_cc_cv_mode+2
 11275  0D0C  3F41               	moviw [1]fsr1
 11276  0D0D  00C2               	movwf	??_cc_cv_mode+3
 11277  0D0E  0842               	movf	??_cc_cv_mode+3,w
 11278  0D0F  3A80               	xorlw	128
 11279  0D10  00C3               	movwf	??_cc_cv_mode+4
 11280  0D11  0840               	movf	??_cc_cv_mode+1,w
 11281  0D12  3A80               	xorlw	128
 11282  0D13  0243               	subwf	??_cc_cv_mode+4,w
 11283  0D14  1D03               	skipz
 11284  0D15  2D18               	goto	u3965
 11285  0D16  083F               	movf	??_cc_cv_mode,w
 11286  0D17  0241               	subwf	??_cc_cv_mode+2,w
 11287  0D18                     u3965:	
 11288  0D18  1C03               	skipc
 11289  0D19  2D58               	goto	l3290
 11290                           
 11291                           ;battery_charger.c: 106: {
 11292                           ;battery_charger.c: 107: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 11293  0D1A  0020               	movlb	0	; select bank0
 11294  0D1B  0846               	movf	cc_cv_mode@z,w
 11295  0D1C  3EC0               	addlw	(low (_VHoldMode| 0))& (0+255)
 11296  0D1D  0086               	movwf	6
 11297  0D1E  0187               	clrf	7
 11298  0D1F  0801               	movf	1,w
 11299  0D20  3A80               	xorlw	128
 11300  0D21  3E77               	addlw	-137
 11301  0D22  1803               	skipnc
 11302  0D23  2D2C               	goto	l293
 11303  0D24  3001               	movlw	1
 11304  0D25  00BF               	movwf	??_cc_cv_mode
 11305  0D26  0846               	movf	cc_cv_mode@z,w
 11306  0D27  3EC0               	addlw	(low (_VHoldMode| 0))& (0+255)
 11307  0D28  0086               	movwf	6
 11308  0D29  0187               	clrf	7
 11309  0D2A  083F               	movf	??_cc_cv_mode,w
 11310  0D2B  0781               	addwf	1,f
 11311  0D2C                     l293:	
 11312                           
 11313                           ;battery_charger.c: 108: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 11314  0D2C  0846               	movf	cc_cv_mode@z,w
 11315  0D2D  3EC0               	addlw	(low (_VHoldMode| 0))& (0+255)
 11316  0D2E  0086               	movwf	6
 11317  0D2F  0187               	clrf	7
 11318  0D30  0801               	movf	1,w
 11319  0D31  3A80               	xorlw	128
 11320  0D32  3E77               	addlw	-137
 11321  0D33  1803               	skipnc
 11322  0D34  2D3D               	goto	l294
 11323  0D35  3001               	movlw	1
 11324  0D36  00BF               	movwf	??_cc_cv_mode
 11325  0D37  0846               	movf	cc_cv_mode@z,w
 11326  0D38  3EC0               	addlw	(low (_VHoldMode| 0))& (0+255)
 11327  0D39  0086               	movwf	6
 11328  0D3A  0187               	clrf	7
 11329  0D3B  083F               	movf	??_cc_cv_mode,w
 11330  0D3C  0781               	addwf	1,f
 11331  0D3D                     l294:	
 11332                           
 11333                           ;battery_charger.c: 110: if(cc_cv[z])
 11334  0D3D  0846               	movf	cc_cv_mode@z,w
 11335  0D3E  3EC4               	addlw	(low (_cc_cv| 0))& (0+255)
 11336  0D3F  0086               	movwf	6
 11337  0D40  0187               	clrf	7
 11338  0D41  0801               	movf	1,w
 11339  0D42  1903               	btfsc	3,2
 11340  0D43  2D4B               	goto	l3286
 11341                           
 11342                           ;battery_charger.c: 111: {
 11343                           ;battery_charger.c: 112: cc_cv[z]-=1;
 11344  0D44  0846               	movf	cc_cv_mode@z,w
 11345  0D45  3EC4               	addlw	(low (_cc_cv| 0))& (0+255)
 11346  0D46  0086               	movwf	6
 11347  0D47  0187               	clrf	7
 11348  0D48  3001               	movlw	1
 11349  0D49  0281               	subwf	1,f
 11350                           
 11351                           ;battery_charger.c: 113: }
 11352  0D4A  2D80               	goto	l298
 11353  0D4B                     l3286:	
 11354                           
 11355                           ;battery_charger.c: 114: else
 11356                           ;battery_charger.c: 115: {
 11357                           ;battery_charger.c: 116: if(Imode[z])
 11358  0D4B  0846               	movf	cc_cv_mode@z,w
 11359  0D4C  3EBC               	addlw	(low (_Imode| 0))& (0+255)
 11360  0D4D  0086               	movwf	6
 11361  0D4E  0187               	clrf	7
 11362  0D4F  0801               	movf	1,w
 11363  0D50  1903               	btfsc	3,2
 11364  0D51  2D80               	goto	l298
 11365                           
 11366                           ;battery_charger.c: 117: {
 11367                           ;battery_charger.c: 118: Imode[z]=0;
 11368  0D52  0846               	movf	cc_cv_mode@z,w
 11369  0D53  3EBC               	addlw	(low (_Imode| 0))& (0+255)
 11370  0D54  0086               	movwf	6
 11371  0D55  0187               	clrf	7
 11372  0D56  0181               	clrf	1
 11373                           
 11374                           ;battery_charger.c: 119: }
 11375                           ;battery_charger.c: 120: }
 11376                           ;battery_charger.c: 121: }
 11377  0D57  2D80               	goto	l298
 11378  0D58                     l3290:	
 11379                           
 11380                           ;battery_charger.c: 122: else
 11381                           ;battery_charger.c: 123: {
 11382                           ;battery_charger.c: 124: VHoldMode[z]-=1;
 11383  0D58  30FF               	movlw	255
 11384  0D59  0020               	movlb	0	; select bank0
 11385  0D5A  00BF               	movwf	??_cc_cv_mode
 11386  0D5B  0846               	movf	cc_cv_mode@z,w
 11387  0D5C  3EC0               	addlw	(low (_VHoldMode| 0))& (0+255)
 11388  0D5D  0086               	movwf	6
 11389  0D5E  0187               	clrf	7
 11390  0D5F  083F               	movf	??_cc_cv_mode,w
 11391  0D60  0781               	addwf	1,f
 11392                           
 11393                           ;battery_charger.c: 125: if(VHoldMode[z]<(9*-1))
 11394  0D61  0846               	movf	cc_cv_mode@z,w
 11395  0D62  3EC0               	addlw	(low (_VHoldMode| 0))& (0+255)
 11396  0D63  0086               	movwf	6
 11397  0D64  0187               	clrf	7
 11398  0D65  0801               	movf	1,w
 11399  0D66  3A80               	xorlw	128
 11400  0D67  3E89               	addlw	137
 11401  0D68  1803               	skipnc
 11402  0D69  2D80               	goto	l298
 11403                           
 11404                           ;battery_charger.c: 126: {
 11405                           ;battery_charger.c: 127: Imode[z]=1;
 11406  0D6A  0846               	movf	cc_cv_mode@z,w
 11407  0D6B  3EBC               	addlw	(low (_Imode| 0))& (0+255)
 11408  0D6C  0086               	movwf	6
 11409  0D6D  0187               	clrf	7
 11410  0D6E  0181               	clrf	1
 11411  0D6F  0A81               	incf	1,f
 11412                           
 11413                           ;battery_charger.c: 128: cc_cv[z]=(9*2);
 11414  0D70  3012               	movlw	18
 11415  0D71  00BF               	movwf	??_cc_cv_mode
 11416  0D72  0846               	movf	cc_cv_mode@z,w
 11417  0D73  3EC4               	addlw	(low (_cc_cv| 0))& (0+255)
 11418  0D74  0086               	movwf	6
 11419  0D75  0187               	clrf	7
 11420  0D76  083F               	movf	??_cc_cv_mode,w
 11421  0D77  0081               	movwf	1
 11422                           
 11423                           ;battery_charger.c: 129: VHoldMode[z]=(9*-1);
 11424  0D78  30F7               	movlw	247
 11425  0D79  00BF               	movwf	??_cc_cv_mode
 11426  0D7A  0846               	movf	cc_cv_mode@z,w
 11427  0D7B  3EC0               	addlw	(low (_VHoldMode| 0))& (0+255)
 11428  0D7C  0086               	movwf	6
 11429  0D7D  0187               	clrf	7
 11430  0D7E  083F               	movf	??_cc_cv_mode,w
 11431  0D7F  0081               	movwf	1
 11432  0D80                     l298:	
 11433                           
 11434                           ;battery_charger.c: 130: }
 11435                           ;battery_charger.c: 131: }
 11436                           ;battery_charger.c: 133: if(current[z]>Iref[z])
 11437  0D80  3546               	lslf	cc_cv_mode@z,w
 11438  0D81  3EA0               	addlw	(low (_current| 0))& (0+255)
 11439  0D82  0086               	movwf	6
 11440  0D83  0187               	clrf	7
 11441  0D84  3F40               	moviw [0]fsr1
 11442  0D85  00BF               	movwf	??_cc_cv_mode
 11443  0D86  3F41               	moviw [1]fsr1
 11444  0D87  00C0               	movwf	??_cc_cv_mode+1
 11445  0D88  3546               	lslf	cc_cv_mode@z,w
 11446  0D89  3EB0               	addlw	(low (_Iref| 0))& (0+255)
 11447  0D8A  0086               	movwf	6
 11448  0D8B  0187               	clrf	7
 11449  0D8C  3F40               	moviw [0]fsr1
 11450  0D8D  00C1               	movwf	??_cc_cv_mode+2
 11451  0D8E  3F41               	moviw [1]fsr1
 11452  0D8F  00C2               	movwf	??_cc_cv_mode+3
 11453  0D90  0842               	movf	??_cc_cv_mode+3,w
 11454  0D91  3A80               	xorlw	128
 11455  0D92  00C3               	movwf	??_cc_cv_mode+4
 11456  0D93  0840               	movf	??_cc_cv_mode+1,w
 11457  0D94  3A80               	xorlw	128
 11458  0D95  0243               	subwf	??_cc_cv_mode+4,w
 11459  0D96  1D03               	skipz
 11460  0D97  2D9A               	goto	u4025
 11461  0D98  083F               	movf	??_cc_cv_mode,w
 11462  0D99  0241               	subwf	??_cc_cv_mode+2,w
 11463  0D9A                     u4025:	
 11464  0D9A  1803               	skipnc
 11465  0D9B  0008               	return
 11466                           
 11467                           ;battery_charger.c: 134: {
 11468                           ;battery_charger.c: 135: if(!(Imode[z]))
 11469  0D9C  0020               	movlb	0	; select bank0
 11470  0D9D  0846               	movf	cc_cv_mode@z,w
 11471  0D9E  3EBC               	addlw	(low (_Imode| 0))& (0+255)
 11472  0D9F  0086               	movwf	6
 11473  0DA0  0187               	clrf	7
 11474  0DA1  0801               	movf	1,w
 11475  0DA2  1D03               	btfss	3,2
 11476  0DA3  0008               	return
 11477                           
 11478                           ;battery_charger.c: 136: {
 11479                           ;battery_charger.c: 137: if(batteryState[z]==FLOAT)
 11480  0DA4  0846               	movf	cc_cv_mode@z,w
 11481  0DA5  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 11482  0DA6  0086               	movwf	6
 11483  0DA7  0187               	clrf	7
 11484  0DA8  3005               	movlw	5
 11485  0DA9  0601               	xorwf	1,w
 11486  0DAA  1D03               	btfss	3,2
 11487  0DAB  0008               	return
 11488                           
 11489                           ;battery_charger.c: 138: {
 11490                           ;battery_charger.c: 139: if(voltage[z]<1350+(int16_t)((250-batteryTemp)*.24)-70)
 11491  0DAC  0021               	movlb	1	; select bank1
 11492  0DAD  096D               	comf	_batteryTemp^(0+128),w
 11493  0DAE  0020               	movlb	0	; select bank0
 11494  0DAF  00BF               	movwf	??_cc_cv_mode
 11495  0DB0  0021               	movlb	1	; select bank1
 11496  0DB1  096E               	comf	(_batteryTemp+1)^(0+128),w
 11497  0DB2  0020               	movlb	0	; select bank0
 11498  0DB3  00C0               	movwf	??_cc_cv_mode+1
 11499  0DB4  0ABF               	incf	??_cc_cv_mode,f
 11500  0DB5  1903               	skipnz
 11501  0DB6  0AC0               	incf	??_cc_cv_mode+1,f
 11502  0DB7  083F               	movf	??_cc_cv_mode,w
 11503  0DB8  3EFA               	addlw	250
 11504  0DB9  00F9               	movwf	___awtoft@c
 11505  0DBA  3000               	movlw	0
 11506  0DBB  3D40               	addwfc	??_cc_cv_mode+1,w
 11507  0DBC  00FA               	movwf	___awtoft@c+1
 11508  0DBD  319F  270C  318C   	fcall	___awtoft
 11509  0DC0  0879               	movf	?___awtoft,w
 11510  0DC1  0020               	movlb	0	; select bank0
 11511  0DC2  00A4               	movwf	___ftmul@f2
 11512  0DC3  087A               	movf	?___awtoft+1,w
 11513  0DC4  00A5               	movwf	___ftmul@f2+1
 11514  0DC5  087B               	movf	?___awtoft+2,w
 11515  0DC6  00A6               	movwf	___ftmul@f2+2
 11516  0DC7  30C3               	movlw	195
 11517  0DC8  00A1               	movwf	___ftmul@f1
 11518  0DC9  3075               	movlw	117
 11519  0DCA  00A2               	movwf	___ftmul@f1+1
 11520  0DCB  303E               	movlw	62
 11521  0DCC  00A3               	movwf	___ftmul@f1+2
 11522  0DCD  3197  274C  318C   	fcall	___ftmul
 11523  0DD0  0020               	movlb	0	; select bank0
 11524  0DD1  0821               	movf	?___ftmul,w
 11525  0DD2  00B1               	movwf	___fttol@f1
 11526  0DD3  0822               	movf	?___ftmul+1,w
 11527  0DD4  00B2               	movwf	___fttol@f1+1
 11528  0DD5  0823               	movf	?___ftmul+2,w
 11529  0DD6  00B3               	movwf	___fttol@f1+2
 11530  0DD7  3195  256C  318C   	fcall	___fttol
 11531  0DDA  0020               	movlb	0	; select bank0
 11532  0DDB  0831               	movf	?___fttol,w
 11533  0DDC  3E00               	addlw	0
 11534  0DDD  00C1               	movwf	??_cc_cv_mode+2
 11535  0DDE  3005               	movlw	5
 11536  0DDF  3D32               	addwfc	?___fttol+1,w
 11537  0DE0  00C2               	movwf	??_cc_cv_mode+3
 11538  0DE1  3546               	lslf	cc_cv_mode@z,w
 11539  0DE2  3EA8               	addlw	(low (_voltage| 0))& (0+255)
 11540  0DE3  0086               	movwf	6
 11541  0DE4  0187               	clrf	7
 11542  0DE5  3F40               	moviw [0]fsr1
 11543  0DE6  00C3               	movwf	??_cc_cv_mode+4
 11544  0DE7  3F41               	moviw [1]fsr1
 11545  0DE8  00C4               	movwf	??_cc_cv_mode+5
 11546  0DE9  0844               	movf	??_cc_cv_mode+5,w
 11547  0DEA  3A80               	xorlw	128
 11548  0DEB  00C5               	movwf	??_cc_cv_mode+6
 11549  0DEC  0842               	movf	??_cc_cv_mode+3,w
 11550  0DED  3A80               	xorlw	128
 11551  0DEE  0245               	subwf	??_cc_cv_mode+6,w
 11552  0DEF  1D03               	skipz
 11553  0DF0  2DF3               	goto	u4055
 11554  0DF1  0841               	movf	??_cc_cv_mode+2,w
 11555  0DF2  0243               	subwf	??_cc_cv_mode+4,w
 11556  0DF3                     u4055:	
 11557  0DF3  1803               	skipnc
 11558  0DF4  0008               	return
 11559                           
 11560                           ;battery_charger.c: 140: {
 11561                           ;battery_charger.c: 141: batteryState[z]=CHARGE;
 11562  0DF5  3004               	movlw	4
 11563  0DF6  0020               	movlb	0	; select bank0
 11564  0DF7  00BF               	movwf	??_cc_cv_mode
 11565  0DF8  0846               	movf	cc_cv_mode@z,w
 11566  0DF9  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 11567  0DFA  0086               	movwf	6
 11568  0DFB  0187               	clrf	7
 11569  0DFC  083F               	movf	??_cc_cv_mode,w
 11570  0DFD  0081               	movwf	1
 11571                           
 11572                           ;battery_charger.c: 142: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 11573  0DFE  0021               	movlb	1	; select bank1
 11574  0DFF  096D               	comf	_batteryTemp^(0+128),w
 11575  0E00  0020               	movlb	0	; select bank0
 11576  0E01  00BF               	movwf	??_cc_cv_mode
 11577  0E02  0021               	movlb	1	; select bank1
 11578  0E03  096E               	comf	(_batteryTemp+1)^(0+128),w
 11579  0E04  0020               	movlb	0	; select bank0
 11580  0E05  00C0               	movwf	??_cc_cv_mode+1
 11581  0E06  0ABF               	incf	??_cc_cv_mode,f
 11582  0E07  1903               	skipnz
 11583  0E08  0AC0               	incf	??_cc_cv_mode+1,f
 11584  0E09  083F               	movf	??_cc_cv_mode,w
 11585  0E0A  3EFA               	addlw	250
 11586  0E0B  00F9               	movwf	___awtoft@c
 11587  0E0C  3000               	movlw	0
 11588  0E0D  3D40               	addwfc	??_cc_cv_mode+1,w
 11589  0E0E  00FA               	movwf	___awtoft@c+1
 11590  0E0F  319F  270C  318C   	fcall	___awtoft
 11591  0E12  0879               	movf	?___awtoft,w
 11592  0E13  0020               	movlb	0	; select bank0
 11593  0E14  00A4               	movwf	___ftmul@f2
 11594  0E15  087A               	movf	?___awtoft+1,w
 11595  0E16  00A5               	movwf	___ftmul@f2+1
 11596  0E17  087B               	movf	?___awtoft+2,w
 11597  0E18  00A6               	movwf	___ftmul@f2+2
 11598  0E19  30C3               	movlw	195
 11599  0E1A  00A1               	movwf	___ftmul@f1
 11600  0E1B  3075               	movlw	117
 11601  0E1C  00A2               	movwf	___ftmul@f1+1
 11602  0E1D  303E               	movlw	62
 11603  0E1E  00A3               	movwf	___ftmul@f1+2
 11604  0E1F  3197  274C  318C   	fcall	___ftmul
 11605  0E22  0020               	movlb	0	; select bank0
 11606  0E23  0821               	movf	?___ftmul,w
 11607  0E24  00B1               	movwf	___fttol@f1
 11608  0E25  0822               	movf	?___ftmul+1,w
 11609  0E26  00B2               	movwf	___fttol@f1+1
 11610  0E27  0823               	movf	?___ftmul+2,w
 11611  0E28  00B3               	movwf	___fttol@f1+2
 11612  0E29  3195  256C         	fcall	___fttol
 11613  0E2B  0020               	movlb	0	; select bank0
 11614  0E2C  0831               	movf	?___fttol,w
 11615  0E2D  3E91               	addlw	145
 11616  0E2E  00C1               	movwf	??_cc_cv_mode+2
 11617  0E2F  3005               	movlw	5
 11618  0E30  3D32               	addwfc	?___fttol+1,w
 11619  0E31  00C2               	movwf	??_cc_cv_mode+3
 11620  0E32  3546               	lslf	cc_cv_mode@z,w
 11621  0E33  3EB4               	addlw	(low (_Vref| 0))& (0+255)
 11622  0E34  0086               	movwf	6
 11623  0E35  0187               	clrf	7
 11624  0E36  0841               	movf	??_cc_cv_mode+2,w
 11625  0E37  3FC0               	movwi [0]fsr1
 11626  0E38  0842               	movf	??_cc_cv_mode+3,w
 11627  0E39  3FC1               	movwi [1]fsr1
 11628                           
 11629                           ;battery_charger.c: 143: Iref[z]=30;
 11630  0E3A  3546               	lslf	cc_cv_mode@z,w
 11631  0E3B  3EB0               	addlw	(low (_Iref| 0))& (0+255)
 11632  0E3C  0086               	movwf	6
 11633  0E3D  0187               	clrf	7
 11634  0E3E  301E               	movlw	30
 11635  0E3F  3FC0               	movwi [0]fsr1
 11636  0E40  3000               	movlw	0
 11637  0E41  3FC1               	movwi [1]fsr1
 11638  0E42  0008               	return
 11639  0E43                     __end_of_cc_cv_mode:	
 11640                           
 11641                           	psect	text15
 11642  1251                     __ptext15:	
 11643 ;; *************** function _calculateCurrent3 *****************
 11644 ;; Defined at:
 11645 ;;		line 447 in file "main.c"
 11646 ;; Parameters:    Size  Location     Type
 11647 ;;		None
 11648 ;; Auto vars:     Size  Location     Type
 11649 ;;		None
 11650 ;; Return value:  Size  Location     Type
 11651 ;;                  1    wreg      void 
 11652 ;; Registers used:
 11653 ;;		wreg, status,2, status,0, pclath, cstack
 11654 ;; Tracked objects:
 11655 ;;		On entry : 0/0
 11656 ;;		On exit  : 0/0
 11657 ;;		Unchanged: 0/0
 11658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11661 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11662 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11663 ;;Total ram usage:        3 bytes
 11664 ;; Hardware stack levels used:    1
 11665 ;; Hardware stack levels required when called:    2
 11666 ;; This function calls:
 11667 ;;		___awtoft
 11668 ;;		___ftdiv
 11669 ;;		___fttol
 11670 ;; This function is called by:
 11671 ;;		_main
 11672 ;; This function uses a non-reentrant model
 11673 ;;
 11674                           
 11675                           
 11676                           ;psect for function _calculateCurrent3
 11677  1251                     _calculateCurrent3:	
 11678                           
 11679                           ;main.c: 449: if(Ianalogs[3]-570<=0)
 11680                           
 11681                           ;incstack = 0
 11682                           ; Regs used in _calculateCurrent3: [wreg+status,2+status,0+pclath+cstack]
 11683  1251  0022               	movlb	2	; select bank2
 11684  1252  0846               	movf	(_Ianalogs^(0+256)+6),w
 11685  1253  3EC6               	addlw	198
 11686  1254  0020               	movlb	0	; select bank0
 11687  1255  00BF               	movwf	??_calculateCurrent3
 11688  1256  30FD               	movlw	253
 11689  1257  0022               	movlb	2	; select bank2
 11690  1258  3D47               	addwfc	((_Ianalogs+1)^(0+256)+6),w
 11691  1259  0020               	movlb	0	; select bank0
 11692  125A  00C0               	movwf	??_calculateCurrent3+1
 11693  125B  0840               	movf	??_calculateCurrent3+1,w
 11694  125C  3A80               	xorlw	128
 11695  125D  00C1               	movwf	??_calculateCurrent3+2
 11696  125E  3080               	movlw	128
 11697  125F  0241               	subwf	??_calculateCurrent3+2,w
 11698  1260  1D03               	skipz
 11699  1261  2A64               	goto	u3615
 11700  1262  3001               	movlw	1
 11701  1263  023F               	subwf	??_calculateCurrent3,w
 11702  1264                     u3615:	
 11703  1264  1803               	skipnc
 11704  1265  2A6A               	goto	l3096
 11705                           
 11706                           ;main.c: 450: {
 11707                           ;main.c: 451: current[3]=0;
 11708  1266  0021               	movlb	1	; select bank1
 11709  1267  01A6               	clrf	(_current^(0+128)+6)
 11710  1268  01A7               	clrf	((_current+1)^(0+128)+6)
 11711                           
 11712                           ;main.c: 452: }
 11713  1269  0008               	return
 11714  126A                     l3096:	
 11715                           
 11716                           ;main.c: 453: else
 11717                           ;main.c: 454: {
 11718                           ;main.c: 455: current[3]=(int16_t)((Ianalogs[3]-570)/2.8);
 11719  126A  0022               	movlb	2	; select bank2
 11720  126B  0846               	movf	(_Ianalogs^(0+256)+6),w
 11721  126C  3EC6               	addlw	198
 11722  126D  00F9               	movwf	___awtoft@c
 11723  126E  30FD               	movlw	253
 11724  126F  3D47               	addwfc	((_Ianalogs+1)^(0+256)+6),w
 11725  1270  00FA               	movwf	___awtoft@c+1
 11726  1271  319F  270C  3192   	fcall	___awtoft
 11727  1274  0879               	movf	?___awtoft,w
 11728  1275  0020               	movlb	0	; select bank0
 11729  1276  00A4               	movwf	___ftdiv@f1
 11730  1277  087A               	movf	?___awtoft+1,w
 11731  1278  00A5               	movwf	___ftdiv@f1+1
 11732  1279  087B               	movf	?___awtoft+2,w
 11733  127A  00A6               	movwf	___ftdiv@f1+2
 11734  127B  3033               	movlw	51
 11735  127C  00A1               	movwf	___ftdiv@f2
 11736  127D  3033               	movlw	51
 11737  127E  00A2               	movwf	___ftdiv@f2+1
 11738  127F  3040               	movlw	64
 11739  1280  00A3               	movwf	___ftdiv@f2+2
 11740  1281  3195  25F3  3192   	fcall	___ftdiv
 11741  1284  0020               	movlb	0	; select bank0
 11742  1285  0821               	movf	?___ftdiv,w
 11743  1286  00B1               	movwf	___fttol@f1
 11744  1287  0822               	movf	?___ftdiv+1,w
 11745  1288  00B2               	movwf	___fttol@f1+1
 11746  1289  0823               	movf	?___ftdiv+2,w
 11747  128A  00B3               	movwf	___fttol@f1+2
 11748  128B  3195  256C         	fcall	___fttol
 11749  128D  0020               	movlb	0	; select bank0
 11750  128E  0832               	movf	?___fttol+1,w
 11751  128F  0021               	movlb	1	; select bank1
 11752  1290  00A7               	movwf	((_current+1)^(0+128)+6)
 11753  1291  0020               	movlb	0	; select bank0
 11754  1292  0831               	movf	?___fttol,w
 11755  1293  0021               	movlb	1	; select bank1
 11756  1294  00A6               	movwf	(_current^(0+128)+6)
 11757  1295  0008               	return
 11758  1296                     __end_of_calculateCurrent3:	
 11759                           
 11760                           	psect	text16
 11761  1F2D                     __ptext16:	
 11762 ;; *************** function _calculateCurrent2 *****************
 11763 ;; Defined at:
 11764 ;;		line 435 in file "main.c"
 11765 ;; Parameters:    Size  Location     Type
 11766 ;;		None
 11767 ;; Auto vars:     Size  Location     Type
 11768 ;;		None
 11769 ;; Return value:  Size  Location     Type
 11770 ;;                  1    wreg      void 
 11771 ;; Registers used:
 11772 ;;		wreg, status,2, status,0
 11773 ;; Tracked objects:
 11774 ;;		On entry : 0/0
 11775 ;;		On exit  : 0/0
 11776 ;;		Unchanged: 0/0
 11777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11780 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11781 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11782 ;;Total ram usage:        3 bytes
 11783 ;; Hardware stack levels used:    1
 11784 ;; This function calls:
 11785 ;;		Nothing
 11786 ;; This function is called by:
 11787 ;;		_main
 11788 ;; This function uses a non-reentrant model
 11789 ;;
 11790                           
 11791                           
 11792                           ;psect for function _calculateCurrent2
 11793  1F2D                     _calculateCurrent2:	
 11794                           
 11795                           ;main.c: 437: if(Ianalogs[2]-570<=0)
 11796                           
 11797                           ;incstack = 0
 11798                           ; Regs used in _calculateCurrent2: [wreg+status,2+status,0]
 11799  1F2D  0022               	movlb	2	; select bank2
 11800  1F2E  0844               	movf	(_Ianalogs^(0+256)+4),w
 11801  1F2F  3EC6               	addlw	198
 11802  1F30  00F0               	movwf	??_calculateCurrent2
 11803  1F31  30FD               	movlw	253
 11804  1F32  3D45               	addwfc	((_Ianalogs+1)^(0+256)+4),w
 11805  1F33  00F1               	movwf	??_calculateCurrent2+1
 11806  1F34  0871               	movf	??_calculateCurrent2+1,w
 11807  1F35  3A80               	xorlw	128
 11808  1F36  00F2               	movwf	??_calculateCurrent2+2
 11809  1F37  3080               	movlw	128
 11810  1F38  0272               	subwf	??_calculateCurrent2+2,w
 11811  1F39  1D03               	skipz
 11812  1F3A  2F3D               	goto	u3605
 11813  1F3B  3001               	movlw	1
 11814  1F3C  0270               	subwf	??_calculateCurrent2,w
 11815  1F3D                     u3605:	
 11816  1F3D  1803               	skipnc
 11817  1F3E  2F43               	goto	l3090
 11818                           
 11819                           ;main.c: 438: {
 11820                           ;main.c: 439: current[2]=0;
 11821  1F3F  0021               	movlb	1	; select bank1
 11822  1F40  01A4               	clrf	(_current^(0+128)+4)
 11823  1F41  01A5               	clrf	((_current+1)^(0+128)+4)
 11824                           
 11825                           ;main.c: 440: }
 11826  1F42  0008               	return
 11827  1F43                     l3090:	
 11828                           
 11829                           ;main.c: 441: else
 11830                           ;main.c: 442: {
 11831                           ;main.c: 443: current[2]=(int16_t)(Ianalogs[2]-570);
 11832  1F43  0022               	movlb	2	; select bank2
 11833  1F44  0844               	movf	(_Ianalogs^(0+256)+4),w
 11834  1F45  3EC6               	addlw	198
 11835  1F46  0021               	movlb	1	; select bank1
 11836  1F47  00A4               	movwf	(_current^(0+128)+4)
 11837  1F48  30FD               	movlw	253
 11838  1F49  0022               	movlb	2	; select bank2
 11839  1F4A  3D45               	addwfc	((_Ianalogs+1)^(0+256)+4),w
 11840  1F4B  0021               	movlb	1	; select bank1
 11841  1F4C  00A5               	movwf	((_current+1)^(0+128)+4)
 11842  1F4D  0008               	return
 11843  1F4E                     __end_of_calculateCurrent2:	
 11844                           
 11845                           	psect	text17
 11846  120C                     __ptext17:	
 11847 ;; *************** function _calculateCurrent0 *****************
 11848 ;; Defined at:
 11849 ;;		line 411 in file "main.c"
 11850 ;; Parameters:    Size  Location     Type
 11851 ;;		None
 11852 ;; Auto vars:     Size  Location     Type
 11853 ;;		None
 11854 ;; Return value:  Size  Location     Type
 11855 ;;                  1    wreg      void 
 11856 ;; Registers used:
 11857 ;;		wreg, status,2, status,0, pclath, cstack
 11858 ;; Tracked objects:
 11859 ;;		On entry : 0/0
 11860 ;;		On exit  : 0/0
 11861 ;;		Unchanged: 0/0
 11862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11865 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11866 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11867 ;;Total ram usage:        3 bytes
 11868 ;; Hardware stack levels used:    1
 11869 ;; Hardware stack levels required when called:    2
 11870 ;; This function calls:
 11871 ;;		___awtoft
 11872 ;;		___ftdiv
 11873 ;;		___fttol
 11874 ;; This function is called by:
 11875 ;;		_main
 11876 ;; This function uses a non-reentrant model
 11877 ;;
 11878                           
 11879                           
 11880                           ;psect for function _calculateCurrent0
 11881  120C                     _calculateCurrent0:	
 11882                           
 11883                           ;main.c: 413: if(Ianalogs[0]-562<=0)
 11884                           
 11885                           ;incstack = 0
 11886                           ; Regs used in _calculateCurrent0: [wreg+status,2+status,0+pclath+cstack]
 11887  120C  0022               	movlb	2	; select bank2
 11888  120D  0840               	movf	_Ianalogs^(0+256),w
 11889  120E  3ECE               	addlw	206
 11890  120F  0020               	movlb	0	; select bank0
 11891  1210  00BF               	movwf	??_calculateCurrent0
 11892  1211  30FD               	movlw	253
 11893  1212  0022               	movlb	2	; select bank2
 11894  1213  3D41               	addwfc	(_Ianalogs+1)^(0+256),w
 11895  1214  0020               	movlb	0	; select bank0
 11896  1215  00C0               	movwf	??_calculateCurrent0+1
 11897  1216  0840               	movf	??_calculateCurrent0+1,w
 11898  1217  3A80               	xorlw	128
 11899  1218  00C1               	movwf	??_calculateCurrent0+2
 11900  1219  3080               	movlw	128
 11901  121A  0241               	subwf	??_calculateCurrent0+2,w
 11902  121B  1D03               	skipz
 11903  121C  2A1F               	goto	u3595
 11904  121D  3001               	movlw	1
 11905  121E  023F               	subwf	??_calculateCurrent0,w
 11906  121F                     u3595:	
 11907  121F  1803               	skipnc
 11908  1220  2A25               	goto	l3084
 11909                           
 11910                           ;main.c: 414: {
 11911                           ;main.c: 415: current[0]=0;
 11912  1221  0021               	movlb	1	; select bank1
 11913  1222  01A0               	clrf	_current^(0+128)
 11914  1223  01A1               	clrf	(_current+1)^(0+128)
 11915                           
 11916                           ;main.c: 416: }
 11917  1224  0008               	return
 11918  1225                     l3084:	
 11919                           
 11920                           ;main.c: 417: else
 11921                           ;main.c: 418: {
 11922                           ;main.c: 419: current[0]=(int16_t)((Ianalogs[0]-562)/2.9943);
 11923  1225  0022               	movlb	2	; select bank2
 11924  1226  0840               	movf	_Ianalogs^(0+256),w
 11925  1227  3ECE               	addlw	206
 11926  1228  00F9               	movwf	___awtoft@c
 11927  1229  30FD               	movlw	253
 11928  122A  3D41               	addwfc	(_Ianalogs+1)^(0+256),w
 11929  122B  00FA               	movwf	___awtoft@c+1
 11930  122C  319F  270C  3192   	fcall	___awtoft
 11931  122F  0879               	movf	?___awtoft,w
 11932  1230  0020               	movlb	0	; select bank0
 11933  1231  00A4               	movwf	___ftdiv@f1
 11934  1232  087A               	movf	?___awtoft+1,w
 11935  1233  00A5               	movwf	___ftdiv@f1+1
 11936  1234  087B               	movf	?___awtoft+2,w
 11937  1235  00A6               	movwf	___ftdiv@f1+2
 11938  1236  30A3               	movlw	163
 11939  1237  00A1               	movwf	___ftdiv@f2
 11940  1238  303F               	movlw	63
 11941  1239  00A2               	movwf	___ftdiv@f2+1
 11942  123A  3040               	movlw	64
 11943  123B  00A3               	movwf	___ftdiv@f2+2
 11944  123C  3195  25F3  3192   	fcall	___ftdiv
 11945  123F  0020               	movlb	0	; select bank0
 11946  1240  0821               	movf	?___ftdiv,w
 11947  1241  00B1               	movwf	___fttol@f1
 11948  1242  0822               	movf	?___ftdiv+1,w
 11949  1243  00B2               	movwf	___fttol@f1+1
 11950  1244  0823               	movf	?___ftdiv+2,w
 11951  1245  00B3               	movwf	___fttol@f1+2
 11952  1246  3195  256C         	fcall	___fttol
 11953  1248  0020               	movlb	0	; select bank0
 11954  1249  0832               	movf	?___fttol+1,w
 11955  124A  0021               	movlb	1	; select bank1
 11956  124B  00A1               	movwf	(_current+1)^(0+128)
 11957  124C  0020               	movlb	0	; select bank0
 11958  124D  0831               	movf	?___fttol,w
 11959  124E  0021               	movlb	1	; select bank1
 11960  124F  00A0               	movwf	_current^(0+128)
 11961  1250  0008               	return
 11962  1251                     __end_of_calculateCurrent0:	
 11963                           
 11964                           	psect	text18
 11965  15F3                     __ptext18:	
 11966 ;; *************** function ___ftdiv *****************
 11967 ;; Defined at:
 11968 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
 11969 ;; Parameters:    Size  Location     Type
 11970 ;;  f2              3    1[BANK0 ] float 
 11971 ;;  f1              3    4[BANK0 ] float 
 11972 ;; Auto vars:     Size  Location     Type
 11973 ;;  f3              3   12[BANK0 ] float 
 11974 ;;  sign            1   16[BANK0 ] unsigned char 
 11975 ;;  exp             1   15[BANK0 ] unsigned char 
 11976 ;;  cntr            1   11[BANK0 ] unsigned char 
 11977 ;; Return value:  Size  Location     Type
 11978 ;;                  3    1[BANK0 ] float 
 11979 ;; Registers used:
 11980 ;;		wreg, status,2, status,0, pclath, cstack
 11981 ;; Tracked objects:
 11982 ;;		On entry : 0/0
 11983 ;;		On exit  : 0/0
 11984 ;;		Unchanged: 0/0
 11985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11986 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11987 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11988 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11989 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11990 ;;Total ram usage:       16 bytes
 11991 ;; Hardware stack levels used:    1
 11992 ;; Hardware stack levels required when called:    1
 11993 ;; This function calls:
 11994 ;;		___ftpack
 11995 ;; This function is called by:
 11996 ;;		_main
 11997 ;;		_calculateCurrent0
 11998 ;;		_calculateCurrent3
 11999 ;;		_tempCalc
 12000 ;; This function uses a non-reentrant model
 12001 ;;
 12002                           
 12003                           
 12004                           ;psect for function ___ftdiv
 12005  15F3                     ___ftdiv:	
 12006                           
 12007                           ;incstack = 0
 12008                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 12009  15F3  0020               	movlb	0	; select bank0
 12010  15F4  0824               	movf	___ftdiv@f1,w
 12011  15F5  00A7               	movwf	??___ftdiv
 12012  15F6  0825               	movf	___ftdiv@f1+1,w
 12013  15F7  00A8               	movwf	??___ftdiv+1
 12014  15F8  0826               	movf	___ftdiv@f1+2,w
 12015  15F9  00A9               	movwf	??___ftdiv+2
 12016  15FA  1003               	clrc
 12017  15FB  0D28               	rlf	??___ftdiv+1,w
 12018  15FC  0D29               	rlf	??___ftdiv+2,w
 12019  15FD  00AA               	movwf	??___ftdiv+3
 12020  15FE  082A               	movf	??___ftdiv+3,w
 12021  15FF  00AF               	movwf	___ftdiv@exp
 12022  1600  082F               	movf	___ftdiv@exp,w
 12023  1601  1D03               	btfss	3,2
 12024  1602  2E0A               	goto	l2964
 12025  1603  3000               	movlw	0
 12026  1604  00A1               	movwf	?___ftdiv
 12027  1605  3000               	movlw	0
 12028  1606  00A2               	movwf	?___ftdiv+1
 12029  1607  3000               	movlw	0
 12030  1608  00A3               	movwf	?___ftdiv+2
 12031  1609  0008               	return
 12032  160A                     l2964:	
 12033  160A  0821               	movf	___ftdiv@f2,w
 12034  160B  00A7               	movwf	??___ftdiv
 12035  160C  0822               	movf	___ftdiv@f2+1,w
 12036  160D  00A8               	movwf	??___ftdiv+1
 12037  160E  0823               	movf	___ftdiv@f2+2,w
 12038  160F  00A9               	movwf	??___ftdiv+2
 12039  1610  1003               	clrc
 12040  1611  0D28               	rlf	??___ftdiv+1,w
 12041  1612  0D29               	rlf	??___ftdiv+2,w
 12042  1613  00AA               	movwf	??___ftdiv+3
 12043  1614  082A               	movf	??___ftdiv+3,w
 12044  1615  00B0               	movwf	___ftdiv@sign
 12045  1616  0830               	movf	___ftdiv@sign,w
 12046  1617  1D03               	btfss	3,2
 12047  1618  2E20               	goto	l2970
 12048  1619  3000               	movlw	0
 12049  161A  00A1               	movwf	?___ftdiv
 12050  161B  3000               	movlw	0
 12051  161C  00A2               	movwf	?___ftdiv+1
 12052  161D  3000               	movlw	0
 12053  161E  00A3               	movwf	?___ftdiv+2
 12054  161F  0008               	return
 12055  1620                     l2970:	
 12056  1620  3000               	movlw	0
 12057  1621  00AC               	movwf	___ftdiv@f3
 12058  1622  3000               	movlw	0
 12059  1623  00AD               	movwf	___ftdiv@f3+1
 12060  1624  3000               	movlw	0
 12061  1625  00AE               	movwf	___ftdiv@f3+2
 12062  1626  3089               	movlw	137
 12063  1627  0730               	addwf	___ftdiv@sign,w
 12064  1628  00A7               	movwf	??___ftdiv
 12065  1629  0827               	movf	??___ftdiv,w
 12066  162A  02AF               	subwf	___ftdiv@exp,f
 12067  162B  0824               	movf	___ftdiv@f1,w
 12068  162C  00A7               	movwf	??___ftdiv
 12069  162D  0825               	movf	___ftdiv@f1+1,w
 12070  162E  00A8               	movwf	??___ftdiv+1
 12071  162F  0826               	movf	___ftdiv@f1+2,w
 12072  1630  00A9               	movwf	??___ftdiv+2
 12073  1631  3010               	movlw	16
 12074  1632                     u3295:	
 12075  1632  36A9               	lsrf	??___ftdiv+2,f
 12076  1633  0CA8               	rrf	??___ftdiv+1,f
 12077  1634  0CA7               	rrf	??___ftdiv,f
 12078  1635  0B89               	decfsz	9,f
 12079  1636  2E32               	goto	u3295
 12080  1637  0827               	movf	??___ftdiv,w
 12081  1638  00AA               	movwf	??___ftdiv+3
 12082  1639  082A               	movf	??___ftdiv+3,w
 12083  163A  00B0               	movwf	___ftdiv@sign
 12084  163B  0821               	movf	___ftdiv@f2,w
 12085  163C  00A7               	movwf	??___ftdiv
 12086  163D  0822               	movf	___ftdiv@f2+1,w
 12087  163E  00A8               	movwf	??___ftdiv+1
 12088  163F  0823               	movf	___ftdiv@f2+2,w
 12089  1640  00A9               	movwf	??___ftdiv+2
 12090  1641  3010               	movlw	16
 12091  1642                     u3305:	
 12092  1642  36A9               	lsrf	??___ftdiv+2,f
 12093  1643  0CA8               	rrf	??___ftdiv+1,f
 12094  1644  0CA7               	rrf	??___ftdiv,f
 12095  1645  0B89               	decfsz	9,f
 12096  1646  2E42               	goto	u3305
 12097  1647  0827               	movf	??___ftdiv,w
 12098  1648  00AA               	movwf	??___ftdiv+3
 12099  1649  082A               	movf	??___ftdiv+3,w
 12100  164A  06B0               	xorwf	___ftdiv@sign,f
 12101  164B  3080               	movlw	128
 12102  164C  00A7               	movwf	??___ftdiv
 12103  164D  0827               	movf	??___ftdiv,w
 12104  164E  05B0               	andwf	___ftdiv@sign,f
 12105  164F  17A5               	bsf	___ftdiv@f1+1,7
 12106  1650  30FF               	movlw	255
 12107  1651  05A4               	andwf	___ftdiv@f1,f
 12108  1652  30FF               	movlw	255
 12109  1653  05A5               	andwf	___ftdiv@f1+1,f
 12110  1654  3000               	movlw	0
 12111  1655  05A6               	andwf	___ftdiv@f1+2,f
 12112  1656  17A2               	bsf	___ftdiv@f2+1,7
 12113  1657  30FF               	movlw	255
 12114  1658  05A1               	andwf	___ftdiv@f2,f
 12115  1659  30FF               	movlw	255
 12116  165A  05A2               	andwf	___ftdiv@f2+1,f
 12117  165B  3000               	movlw	0
 12118  165C  05A3               	andwf	___ftdiv@f2+2,f
 12119  165D  3018               	movlw	24
 12120  165E  00A7               	movwf	??___ftdiv
 12121  165F  0827               	movf	??___ftdiv,w
 12122  1660  00AB               	movwf	___ftdiv@cntr
 12123  1661                     l2984:	
 12124  1661  3001               	movlw	1
 12125  1662                     u3315:	
 12126  1662  35AC               	lslf	___ftdiv@f3,f
 12127  1663  0DAD               	rlf	___ftdiv@f3+1,f
 12128  1664  0DAE               	rlf	___ftdiv@f3+2,f
 12129  1665  0B89               	decfsz	9,f
 12130  1666  2E62               	goto	u3315
 12131  1667  0823               	movf	___ftdiv@f2+2,w
 12132  1668  0226               	subwf	___ftdiv@f1+2,w
 12133  1669  1D03               	skipz
 12134  166A  2E71               	goto	u3325
 12135  166B  0822               	movf	___ftdiv@f2+1,w
 12136  166C  0225               	subwf	___ftdiv@f1+1,w
 12137  166D  1D03               	skipz
 12138  166E  2E71               	goto	u3325
 12139  166F  0821               	movf	___ftdiv@f2,w
 12140  1670  0224               	subwf	___ftdiv@f1,w
 12141  1671                     u3325:	
 12142  1671  1C03               	skipc
 12143  1672  2E7A               	goto	l2992
 12144  1673  0821               	movf	___ftdiv@f2,w
 12145  1674  02A4               	subwf	___ftdiv@f1,f
 12146  1675  0822               	movf	___ftdiv@f2+1,w
 12147  1676  3BA5               	subwfb	___ftdiv@f1+1,f
 12148  1677  0823               	movf	___ftdiv@f2+2,w
 12149  1678  3BA6               	subwfb	___ftdiv@f1+2,f
 12150  1679  142C               	bsf	___ftdiv@f3,0
 12151  167A                     l2992:	
 12152  167A  3001               	movlw	1
 12153  167B                     u3335:	
 12154  167B  35A4               	lslf	___ftdiv@f1,f
 12155  167C  0DA5               	rlf	___ftdiv@f1+1,f
 12156  167D  0DA6               	rlf	___ftdiv@f1+2,f
 12157  167E  0B89               	decfsz	9,f
 12158  167F  2E7B               	goto	u3335
 12159  1680  3001               	movlw	1
 12160  1681  02AB               	subwf	___ftdiv@cntr,f
 12161  1682  1D03               	btfss	3,2
 12162  1683  2E61               	goto	l2984
 12163  1684  082C               	movf	___ftdiv@f3,w
 12164  1685  00F0               	movwf	___ftpack@arg
 12165  1686  082D               	movf	___ftdiv@f3+1,w
 12166  1687  00F1               	movwf	___ftpack@arg+1
 12167  1688  082E               	movf	___ftdiv@f3+2,w
 12168  1689  00F2               	movwf	___ftpack@arg+2
 12169  168A  082F               	movf	___ftdiv@exp,w
 12170  168B  00A7               	movwf	??___ftdiv
 12171  168C  0827               	movf	??___ftdiv,w
 12172  168D  00F3               	movwf	___ftpack@exp
 12173  168E  0830               	movf	___ftdiv@sign,w
 12174  168F  00A8               	movwf	??___ftdiv+1
 12175  1690  0828               	movf	??___ftdiv+1,w
 12176  1691  00F4               	movwf	___ftpack@sign
 12177  1692  3193  239B         	fcall	___ftpack
 12178  1694  0870               	movf	?___ftpack,w
 12179  1695  0020               	movlb	0	; select bank0
 12180  1696  00A1               	movwf	?___ftdiv
 12181  1697  0871               	movf	?___ftpack+1,w
 12182  1698  00A2               	movwf	?___ftdiv+1
 12183  1699  0872               	movf	?___ftpack+2,w
 12184  169A  00A3               	movwf	?___ftdiv+2
 12185  169B  0008               	return
 12186  169C                     __end_of___ftdiv:	
 12187                           
 12188                           	psect	text19
 12189  11CF                     __ptext19:	
 12190 ;; *************** function _SYSTEM_Initialize *****************
 12191 ;; Defined at:
 12192 ;;		line 35 in file "system.c"
 12193 ;; Parameters:    Size  Location     Type
 12194 ;;		None
 12195 ;; Auto vars:     Size  Location     Type
 12196 ;;		None
 12197 ;; Return value:  Size  Location     Type
 12198 ;;                  1    wreg      void 
 12199 ;; Registers used:
 12200 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12201 ;; Tracked objects:
 12202 ;;		On entry : 0/0
 12203 ;;		On exit  : 0/0
 12204 ;;		Unchanged: 0/0
 12205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12208 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12209 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12210 ;;Total ram usage:        3 bytes
 12211 ;; Hardware stack levels used:    1
 12212 ;; Hardware stack levels required when called:    3
 12213 ;; This function calls:
 12214 ;;		_ADC_Initialize
 12215 ;;		_Init_Battery_State_Machine
 12216 ;;		_LCDClear
 12217 ;;		_LCDInit
 12218 ;;		_OSCILLATOR_Initialize
 12219 ;;		_PIN_MANAGER_Initialize
 12220 ;;		_PWM_Initialize
 12221 ;;		_TMR2_Initialize
 12222 ;;		_TMR4_Initialize
 12223 ;; This function is called by:
 12224 ;;		_main
 12225 ;; This function uses a non-reentrant model
 12226 ;;
 12227                           
 12228                           
 12229                           ;psect for function _SYSTEM_Initialize
 12230  11CF                     _SYSTEM_Initialize:	
 12231                           
 12232                           ;system.c: 37: PIN_MANAGER_Initialize();
 12233                           
 12234                           ;incstack = 0
 12235                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12236  11CF  3180  2006  3191   	fcall	_PIN_MANAGER_Initialize
 12237                           
 12238                           ;system.c: 38: OSCILLATOR_Initialize();
 12239  11D2  319D  25E9  3191   	fcall	_OSCILLATOR_Initialize
 12240                           
 12241                           ;system.c: 40: ADC_Initialize();
 12242  11D5  319E  26CE  3191   	fcall	_ADC_Initialize
 12243                           
 12244                           ;system.c: 41: PWM_Initialize();
 12245  11D8  319E  26ED  3191   	fcall	_PWM_Initialize
 12246                           
 12247                           ;system.c: 43: TMR2_Initialize();
 12248  11DB  3191  214A  3191   	fcall	_TMR2_Initialize
 12249                           
 12250                           ;system.c: 44: TMR4_Initialize();
 12251  11DE  3188  2000  3191   	fcall	_TMR4_Initialize
 12252                           
 12253                           ;system.c: 45: Init_Battery_State_Machine(0);
 12254  11E1  3000               	movlw	0
 12255  11E2  3193  23FF  3191   	fcall	_Init_Battery_State_Machine
 12256                           
 12257                           ;system.c: 46: Init_Battery_State_Machine(1);
 12258  11E5  3001               	movlw	1
 12259  11E6  3193  23FF  3191   	fcall	_Init_Battery_State_Machine
 12260                           
 12261                           ;system.c: 47: LCDInit();
 12262  11E9  319F  27C5  3191   	fcall	_LCDInit
 12263                           
 12264                           ;system.c: 48: _delay((unsigned long)((200)*(32000000/4000.0)));
 12265  11EC  3009               	movlw	9
 12266  11ED  0020               	movlb	0	; select bank0
 12267  11EE  00C6               	movwf	??_SYSTEM_Initialize+2
 12268  11EF  301E               	movlw	30
 12269  11F0  00C5               	movwf	??_SYSTEM_Initialize+1
 12270  11F1  30EB               	movlw	235
 12271  11F2  00C4               	movwf	??_SYSTEM_Initialize
 12272  11F3                     u4537:	
 12273  11F3  0BC4               	decfsz	??_SYSTEM_Initialize,f
 12274  11F4  29F3               	goto	u4537
 12275  11F5  0BC5               	decfsz	??_SYSTEM_Initialize+1,f
 12276  11F6  29F3               	goto	u4537
 12277  11F7  0BC6               	decfsz	??_SYSTEM_Initialize+2,f
 12278  11F8  29F3               	goto	u4537
 12279  11F9  0000               	nop
 12280                           
 12281                           ;system.c: 49: LCDClear();
 12282  11FA  319F  2773  3191   	fcall	_LCDClear
 12283                           
 12284                           ;system.c: 50: _delay((unsigned long)((200)*(32000000/4000.0)));
 12285  11FD  3009               	movlw	9
 12286  11FE  0020               	movlb	0	; select bank0
 12287  11FF  00C6               	movwf	??_SYSTEM_Initialize+2
 12288  1200  301E               	movlw	30
 12289  1201  00C5               	movwf	??_SYSTEM_Initialize+1
 12290  1202  30EB               	movlw	235
 12291  1203  00C4               	movwf	??_SYSTEM_Initialize
 12292  1204                     u4547:	
 12293  1204  0BC4               	decfsz	??_SYSTEM_Initialize,f
 12294  1205  2A04               	goto	u4547
 12295  1206  0BC5               	decfsz	??_SYSTEM_Initialize+1,f
 12296  1207  2A04               	goto	u4547
 12297  1208  0BC6               	decfsz	??_SYSTEM_Initialize+2,f
 12298  1209  2A04               	goto	u4547
 12299  120A  0000               	nop
 12300  120B  0008               	return
 12301  120C                     __end_of_SYSTEM_Initialize:	
 12302                           
 12303                           	psect	text20
 12304  0800                     __ptext20:	
 12305 ;; *************** function _TMR4_Initialize *****************
 12306 ;; Defined at:
 12307 ;;		line 25 in file "tmr.c"
 12308 ;; Parameters:    Size  Location     Type
 12309 ;;		None
 12310 ;; Auto vars:     Size  Location     Type
 12311 ;;		None
 12312 ;; Return value:  Size  Location     Type
 12313 ;;                  1    wreg      void 
 12314 ;; Registers used:
 12315 ;;		wreg, status,2
 12316 ;; Tracked objects:
 12317 ;;		On entry : 0/0
 12318 ;;		On exit  : 0/0
 12319 ;;		Unchanged: 0/0
 12320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12325 ;;Total ram usage:        0 bytes
 12326 ;; Hardware stack levels used:    1
 12327 ;; This function calls:
 12328 ;;		Nothing
 12329 ;; This function is called by:
 12330 ;;		_SYSTEM_Initialize
 12331 ;; This function uses a non-reentrant model
 12332 ;;
 12333                           
 12334                           
 12335                           ;psect for function _TMR4_Initialize
 12336  0800                     _TMR4_Initialize:	
 12337                           
 12338                           ;tmr.c: 27: T4CON = 0x00;
 12339                           
 12340                           ;incstack = 0
 12341                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
 12342  0800  0025               	movlb	5	; select bank5
 12343  0801  0194               	clrf	20	;volatile
 12344                           
 12345                           ;tmr.c: 29: T4CLKCON = 0x01;
 12346  0802  3001               	movlw	1
 12347  0803  0096               	movwf	22	;volatile
 12348                           
 12349                           ;tmr.c: 31: T4HLT = 0x00;
 12350  0804  0195               	clrf	21	;volatile
 12351                           
 12352                           ;tmr.c: 33: T4RST = 0x00;
 12353  0805  0197               	clrf	23	;volatile
 12354                           
 12355                           ;tmr.c: 35: T4PR = 0xFE;
 12356  0806  30FE               	movlw	254
 12357  0807  0093               	movwf	19	;volatile
 12358                           
 12359                           ;tmr.c: 39: T4TMR = 0x00;
 12360  0808  0192               	clrf	18	;volatile
 12361                           
 12362                           ;tmr.c: 41: PIR4bits.TMR4IF = 0;
 12363  0809  002E               	movlb	14	; select bank14
 12364  080A  1190               	bcf	16,3	;volatile
 12365                           
 12366                           ;tmr.c: 43: T4CONbits.TMR4ON = 1;
 12367  080B  0025               	movlb	5	; select bank5
 12368  080C  1794               	bsf	20,7	;volatile
 12369  080D  0008               	return
 12370  080E                     __end_of_TMR4_Initialize:	
 12371                           
 12372                           	psect	text21
 12373  114A                     __ptext21:	
 12374 ;; *************** function _TMR2_Initialize *****************
 12375 ;; Defined at:
 12376 ;;		line 3 in file "tmr.c"
 12377 ;; Parameters:    Size  Location     Type
 12378 ;;		None
 12379 ;; Auto vars:     Size  Location     Type
 12380 ;;		None
 12381 ;; Return value:  Size  Location     Type
 12382 ;;                  1    wreg      void 
 12383 ;; Registers used:
 12384 ;;		wreg, status,2
 12385 ;; Tracked objects:
 12386 ;;		On entry : 0/0
 12387 ;;		On exit  : 0/0
 12388 ;;		Unchanged: 0/0
 12389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12393 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12394 ;;Total ram usage:        0 bytes
 12395 ;; Hardware stack levels used:    1
 12396 ;; This function calls:
 12397 ;;		Nothing
 12398 ;; This function is called by:
 12399 ;;		_SYSTEM_Initialize
 12400 ;; This function uses a non-reentrant model
 12401 ;;
 12402                           
 12403                           
 12404                           ;psect for function _TMR2_Initialize
 12405  114A                     _TMR2_Initialize:	
 12406                           
 12407                           ;tmr.c: 5: T2CON = 0x00;
 12408                           
 12409                           ;incstack = 0
 12410                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 12411  114A  0025               	movlb	5	; select bank5
 12412  114B  018E               	clrf	14	;volatile
 12413                           
 12414                           ;tmr.c: 7: T2CLKCON = 0x01;
 12415  114C  3001               	movlw	1
 12416  114D  0090               	movwf	16	;volatile
 12417                           
 12418                           ;tmr.c: 9: T2HLT = 0x00;
 12419  114E  018F               	clrf	15	;volatile
 12420                           
 12421                           ;tmr.c: 11: T2RST = 0x00;
 12422  114F  0191               	clrf	17	;volatile
 12423                           
 12424                           ;tmr.c: 13: T2PR = 0xFE;
 12425  1150  30FE               	movlw	254
 12426  1151  008D               	movwf	13	;volatile
 12427                           
 12428                           ;tmr.c: 18: T2TMR = 0x00;
 12429  1152  018C               	clrf	12	;volatile
 12430                           
 12431                           ;tmr.c: 20: PIR4bits.TMR2IF = 0;
 12432  1153  002E               	movlb	14	; select bank14
 12433  1154  1090               	bcf	16,1	;volatile
 12434                           
 12435                           ;tmr.c: 22: T2CONbits.TMR2ON = 1;
 12436  1155  0025               	movlb	5	; select bank5
 12437  1156  178E               	bsf	14,7	;volatile
 12438  1157  0008               	return
 12439  1158                     __end_of_TMR2_Initialize:	
 12440                           
 12441                           	psect	text22
 12442  1EED                     __ptext22:	
 12443 ;; *************** function _PWM_Initialize *****************
 12444 ;; Defined at:
 12445 ;;		line 3 in file "pwm.c"
 12446 ;; Parameters:    Size  Location     Type
 12447 ;;		None
 12448 ;; Auto vars:     Size  Location     Type
 12449 ;;		None
 12450 ;; Return value:  Size  Location     Type
 12451 ;;                  1    wreg      void 
 12452 ;; Registers used:
 12453 ;;		wreg, status,2, status,0
 12454 ;; Tracked objects:
 12455 ;;		On entry : 0/0
 12456 ;;		On exit  : 0/0
 12457 ;;		Unchanged: 0/0
 12458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12463 ;;Total ram usage:        0 bytes
 12464 ;; Hardware stack levels used:    1
 12465 ;; This function calls:
 12466 ;;		Nothing
 12467 ;; This function is called by:
 12468 ;;		_SYSTEM_Initialize
 12469 ;; This function uses a non-reentrant model
 12470 ;;
 12471                           
 12472                           
 12473                           ;psect for function _PWM_Initialize
 12474  1EED                     _PWM_Initialize:	
 12475                           
 12476                           ;pwm.c: 5: PWM6CON = 0x80;
 12477                           
 12478                           ;incstack = 0
 12479                           ; Regs used in _PWM_Initialize: [wreg+status,2+status,0]
 12480  1EED  3080               	movlw	128
 12481  1EEE  0027               	movlb	7	; select bank7
 12482  1EEF  008E               	movwf	14	;volatile
 12483                           
 12484                           ;pwm.c: 7: PWM6DCH = 0x00;
 12485  1EF0  018D               	clrf	13	;volatile
 12486                           
 12487                           ;pwm.c: 9: PWM6DCL = 0x00;
 12488  1EF1  018C               	clrf	12	;volatile
 12489                           
 12490                           ;pwm.c: 11: CCPTMRS1bits.P6TSEL = 0x01;
 12491  1EF2  0024               	movlb	4	; select bank4
 12492  1EF3  081F               	movf	31,w	;volatile
 12493  1EF4  39F3               	andlw	-13
 12494  1EF5  3804               	iorlw	4
 12495  1EF6  009F               	movwf	31	;volatile
 12496                           
 12497                           ;pwm.c: 14: PWM7CON = 0x80;
 12498  1EF7  3080               	movlw	128
 12499  1EF8  0027               	movlb	7	; select bank7
 12500  1EF9  0092               	movwf	18	;volatile
 12501                           
 12502                           ;pwm.c: 16: PWM7DCH = 0x00;
 12503  1EFA  0191               	clrf	17	;volatile
 12504                           
 12505                           ;pwm.c: 18: PWM7DCL = 0x00;
 12506  1EFB  0190               	clrf	16	;volatile
 12507                           
 12508                           ;pwm.c: 20: CCPTMRS1bits.P7TSEL = 0x02;
 12509  1EFC  0024               	movlb	4	; select bank4
 12510  1EFD  081F               	movf	31,w	;volatile
 12511  1EFE  39CF               	andlw	-49
 12512  1EFF  3820               	iorlw	32
 12513  1F00  009F               	movwf	31	;volatile
 12514                           
 12515                           ;pwm.c: 23: CCP1CONbits.CCP1EN = 1;
 12516  1F01  0026               	movlb	6	; select bank6
 12517  1F02  178E               	bsf	14,7	;volatile
 12518                           
 12519                           ;pwm.c: 24: CCP1CONbits.CCP1FMT = 1;
 12520  1F03  160E               	bsf	14,4	;volatile
 12521                           
 12522                           ;pwm.c: 25: CCP1CONbits.CCP1MODE = 0xF;
 12523  1F04  300F               	movlw	15
 12524  1F05  048E               	iorwf	14,f	;volatile
 12525                           
 12526                           ;pwm.c: 26: CCPTMRS0bits.C1TSEL = 0x1;
 12527  1F06  0024               	movlb	4	; select bank4
 12528  1F07  081E               	movf	30,w	;volatile
 12529  1F08  39FC               	andlw	-4
 12530  1F09  3801               	iorlw	1
 12531  1F0A  009E               	movwf	30	;volatile
 12532  1F0B  0008               	return
 12533  1F0C                     __end_of_PWM_Initialize:	
 12534                           
 12535                           	psect	text23
 12536  0006                     __ptext23:	
 12537 ;; *************** function _PIN_MANAGER_Initialize *****************
 12538 ;; Defined at:
 12539 ;;		line 3 in file "pin_manager.c"
 12540 ;; Parameters:    Size  Location     Type
 12541 ;;		None
 12542 ;; Auto vars:     Size  Location     Type
 12543 ;;  state           1    0[COMMON] char 
 12544 ;; Return value:  Size  Location     Type
 12545 ;;                  1    wreg      void 
 12546 ;; Registers used:
 12547 ;;		wreg, status,2
 12548 ;; Tracked objects:
 12549 ;;		On entry : 0/0
 12550 ;;		On exit  : 0/0
 12551 ;;		Unchanged: 0/0
 12552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12554 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12556 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12557 ;;Total ram usage:        1 bytes
 12558 ;; Hardware stack levels used:    1
 12559 ;; This function calls:
 12560 ;;		Nothing
 12561 ;; This function is called by:
 12562 ;;		_SYSTEM_Initialize
 12563 ;; This function uses a non-reentrant model
 12564 ;;
 12565                           
 12566                           
 12567                           ;psect for function _PIN_MANAGER_Initialize
 12568  0006                     _PIN_MANAGER_Initialize:	
 12569                           
 12570                           ;pin_manager.c: 5: LATA = 0x20;
 12571                           
 12572                           ;incstack = 0
 12573                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 12574  0006  3020               	movlw	32
 12575  0007  0020               	movlb	0	; select bank0
 12576  0008  0096               	movwf	22	;volatile
 12577                           
 12578                           ;pin_manager.c: 6: LATB = 0x00;
 12579  0009  0197               	clrf	23	;volatile
 12580                           
 12581                           ;pin_manager.c: 7: LATC = 0x00;
 12582  000A  0198               	clrf	24	;volatile
 12583                           
 12584                           ;pin_manager.c: 9: WPUA = 0x00;
 12585  000B  003E               	movlb	30	; select bank30
 12586  000C  01B9               	clrf	57	;volatile
 12587                           
 12588                           ;pin_manager.c: 10: WPUB = 0x00;
 12589  000D  01C4               	clrf	68	;volatile
 12590                           
 12591                           ;pin_manager.c: 11: WPUC = 0x00;
 12592  000E  01CF               	clrf	79	;volatile
 12593                           
 12594                           ;pin_manager.c: 12: WPUE = 0x8;
 12595  000F  3008               	movlw	8
 12596  0010  00E5               	movwf	101	;volatile
 12597                           
 12598                           ;pin_manager.c: 14: TRISA = 0x00;
 12599  0011  0020               	movlb	0	; select bank0
 12600  0012  0191               	clrf	17	;volatile
 12601                           
 12602                           ;pin_manager.c: 15: TRISB = 0x0E;
 12603  0013  300E               	movlw	14
 12604  0014  0092               	movwf	18	;volatile
 12605                           
 12606                           ;pin_manager.c: 16: TRISC = 0xFF;
 12607  0015  30FF               	movlw	255
 12608  0016  0093               	movwf	19	;volatile
 12609                           
 12610                           ;pin_manager.c: 18: ANSELA = 0x00;
 12611  0017  003E               	movlb	30	; select bank30
 12612  0018  01B8               	clrf	56	;volatile
 12613                           
 12614                           ;pin_manager.c: 19: ANSELB = 0x0A;
 12615  0019  300A               	movlw	10
 12616  001A  00C3               	movwf	67	;volatile
 12617                           
 12618                           ;pin_manager.c: 20: ANSELC = 0xFF;
 12619  001B  30FF               	movlw	255
 12620  001C  00CE               	movwf	78	;volatile
 12621                           
 12622                           ;pin_manager.c: 23: PIE0bits.IOCIE = 0;
 12623  001D  002E               	movlb	14	; select bank14
 12624  001E  1216               	bcf	22,4	;volatile
 12625                           
 12626                           ;pin_manager.c: 24: int8_t state = GIE;
 12627  001F  3000               	movlw	0
 12628  0020  1B8B               	btfsc	11,7	;volatile
 12629  0021  3001               	movlw	1
 12630  0022  00F0               	movwf	PIN_MANAGER_Initialize@state
 12631                           
 12632                           ;pin_manager.c: 25: GIE = 0;
 12633  0023  138B               	bcf	11,7	;volatile
 12634                           
 12635                           ;pin_manager.c: 26: PPSLOCK = 0x55;
 12636  0024  3055               	movlw	85
 12637  0025  003D               	movlb	29	; select bank29
 12638  0026  008F               	movwf	15	;volatile
 12639                           
 12640                           ;pin_manager.c: 27: PPSLOCK = 0xAA;
 12641  0027  30AA               	movlw	170
 12642  0028  008F               	movwf	15	;volatile
 12643                           
 12644                           ;pin_manager.c: 28: PPSLOCKbits.PPSLOCKED = 0x00;
 12645  0029  100F               	bcf	15,0	;volatile
 12646                           
 12647                           ;pin_manager.c: 30: RA6PPS = 0x0E;
 12648  002A  300E               	movlw	14
 12649  002B  003E               	movlb	30	; select bank30
 12650  002C  0096               	movwf	22	;volatile
 12651                           
 12652                           ;pin_manager.c: 31: RA7PPS = 0x0F;
 12653  002D  300F               	movlw	15
 12654  002E  0097               	movwf	23	;volatile
 12655                           
 12656                           ;pin_manager.c: 32: RB0PPS = 0x09;
 12657  002F  3009               	movlw	9
 12658  0030  0098               	movwf	24	;volatile
 12659                           
 12660                           ;pin_manager.c: 33: PPSLOCK = 0x55;
 12661  0031  3055               	movlw	85
 12662  0032  003D               	movlb	29	; select bank29
 12663  0033  008F               	movwf	15	;volatile
 12664                           
 12665                           ;pin_manager.c: 34: PPSLOCK = 0xAA;
 12666  0034  30AA               	movlw	170
 12667  0035  008F               	movwf	15	;volatile
 12668                           
 12669                           ;pin_manager.c: 35: PPSLOCKbits.PPSLOCKED = 0x01;
 12670  0036  140F               	bsf	15,0	;volatile
 12671                           
 12672                           ;pin_manager.c: 36: GIE = state;
 12673  0037  1C70               	btfss	PIN_MANAGER_Initialize@state,0
 12674  0038  283B               	goto	u3010
 12675  0039  178B               	bsf	11,7	;volatile
 12676  003A  0008               	return
 12677  003B                     u3010:	
 12678  003B  138B               	bcf	11,7	;volatile
 12679  003C  0008               	return
 12680  003D                     __end_of_PIN_MANAGER_Initialize:	
 12681                           
 12682                           	psect	text24
 12683  1DE9                     __ptext24:	
 12684 ;; *************** function _OSCILLATOR_Initialize *****************
 12685 ;; Defined at:
 12686 ;;		line 53 in file "system.c"
 12687 ;; Parameters:    Size  Location     Type
 12688 ;;		None
 12689 ;; Auto vars:     Size  Location     Type
 12690 ;;		None
 12691 ;; Return value:  Size  Location     Type
 12692 ;;                  1    wreg      void 
 12693 ;; Registers used:
 12694 ;;		wreg, status,2
 12695 ;; Tracked objects:
 12696 ;;		On entry : 0/0
 12697 ;;		On exit  : 0/0
 12698 ;;		Unchanged: 0/0
 12699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12704 ;;Total ram usage:        0 bytes
 12705 ;; Hardware stack levels used:    1
 12706 ;; This function calls:
 12707 ;;		Nothing
 12708 ;; This function is called by:
 12709 ;;		_SYSTEM_Initialize
 12710 ;; This function uses a non-reentrant model
 12711 ;;
 12712                           
 12713                           
 12714                           ;psect for function _OSCILLATOR_Initialize
 12715  1DE9                     _OSCILLATOR_Initialize:	
 12716                           
 12717                           ;system.c: 55: OSCCON1 = 0x60;
 12718                           
 12719                           ;incstack = 0
 12720                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 12721  1DE9  3060               	movlw	96
 12722  1DEA  0031               	movlb	17	; select bank17
 12723  1DEB  008D               	movwf	13	;volatile
 12724                           
 12725                           ;system.c: 56: OSCCON3 = 0x00;
 12726  1DEC  018F               	clrf	15	;volatile
 12727                           
 12728                           ;system.c: 57: OSCEN = 0x00;
 12729  1DED  0191               	clrf	17	;volatile
 12730                           
 12731                           ;system.c: 58: OSCFRQ = 0x06;
 12732  1DEE  3006               	movlw	6
 12733  1DEF  0093               	movwf	19	;volatile
 12734                           
 12735                           ;system.c: 59: OSCTUNE = 0x00;
 12736  1DF0  0192               	clrf	18	;volatile
 12737  1DF1  0008               	return
 12738  1DF2                     __end_of_OSCILLATOR_Initialize:	
 12739                           
 12740                           	psect	text25
 12741  1FC5                     __ptext25:	
 12742 ;; *************** function _LCDInit *****************
 12743 ;; Defined at:
 12744 ;;		line 247 in file "lcd.c"
 12745 ;; Parameters:    Size  Location     Type
 12746 ;;		None
 12747 ;; Auto vars:     Size  Location     Type
 12748 ;;		None
 12749 ;; Return value:  Size  Location     Type
 12750 ;;                  1    wreg      void 
 12751 ;; Registers used:
 12752 ;;		wreg, status,2, status,0, pclath, cstack
 12753 ;; Tracked objects:
 12754 ;;		On entry : 0/0
 12755 ;;		On exit  : 0/0
 12756 ;;		Unchanged: 0/0
 12757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12760 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12761 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12762 ;;Total ram usage:        1 bytes
 12763 ;; Hardware stack levels used:    1
 12764 ;; Hardware stack levels required when called:    1
 12765 ;; This function calls:
 12766 ;;		_LCDWrite
 12767 ;; This function is called by:
 12768 ;;		_main
 12769 ;;		_SYSTEM_Initialize
 12770 ;; This function uses a non-reentrant model
 12771 ;;
 12772                           
 12773                           
 12774                           ;psect for function _LCDInit
 12775  1FC5                     _LCDInit:	
 12776                           
 12777                           ;lcd.c: 249: TRISAbits.TRISA0 = 0;
 12778                           
 12779                           ;incstack = 0
 12780                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
 12781  1FC5  0020               	movlb	0	; select bank0
 12782  1FC6  1011               	bcf	17,0	;volatile
 12783                           
 12784                           ;lcd.c: 250: TRISAbits.TRISA1 = 0;
 12785  1FC7  1091               	bcf	17,1	;volatile
 12786                           
 12787                           ;lcd.c: 251: TRISAbits.TRISA2 = 0;
 12788  1FC8  1111               	bcf	17,2	;volatile
 12789                           
 12790                           ;lcd.c: 252: TRISAbits.TRISA3 = 0;
 12791  1FC9  1191               	bcf	17,3	;volatile
 12792                           
 12793                           ;lcd.c: 253: TRISAbits.TRISA4 = 0;
 12794  1FCA  1211               	bcf	17,4	;volatile
 12795                           
 12796                           ;lcd.c: 254: LATAbits.LATA3 = 0;
 12797  1FCB  1196               	bcf	22,3	;volatile
 12798                           
 12799                           ;lcd.c: 255: LATAbits.LATA4 = 0;
 12800  1FCC  1216               	bcf	22,4	;volatile
 12801                           
 12802                           ;lcd.c: 256: LATAbits.LATA2 = 0;
 12803  1FCD  1116               	bcf	22,2	;volatile
 12804                           
 12805                           ;lcd.c: 257: LATAbits.LATA0 = 0;
 12806  1FCE  1016               	bcf	22,0	;volatile
 12807                           
 12808                           ;lcd.c: 259: LATAbits.LATA0 = 1;
 12809  1FCF  1416               	bsf	22,0	;volatile
 12810                           
 12811                           ;lcd.c: 261: LCDWrite(0, 0x21);
 12812  1FD0  3021               	movlw	33
 12813  1FD1  00F5               	movwf	??_LCDInit
 12814  1FD2  0875               	movf	??_LCDInit,w
 12815  1FD3  00F0               	movwf	LCDWrite@data
 12816  1FD4  3000               	movlw	0
 12817  1FD5  319F  274E  319F   	fcall	_LCDWrite
 12818                           
 12819                           ;lcd.c: 269: LCDWrite(0, 0XB9);
 12820  1FD8  30B9               	movlw	185
 12821  1FD9  00F5               	movwf	??_LCDInit
 12822  1FDA  0875               	movf	??_LCDInit,w
 12823  1FDB  00F0               	movwf	LCDWrite@data
 12824  1FDC  3000               	movlw	0
 12825  1FDD  319F  274E  319F   	fcall	_LCDWrite
 12826                           
 12827                           ;lcd.c: 271: LCDWrite(0, 0x04);
 12828  1FE0  3004               	movlw	4
 12829  1FE1  00F5               	movwf	??_LCDInit
 12830  1FE2  0875               	movf	??_LCDInit,w
 12831  1FE3  00F0               	movwf	LCDWrite@data
 12832  1FE4  3000               	movlw	0
 12833  1FE5  319F  274E  319F   	fcall	_LCDWrite
 12834                           
 12835                           ;lcd.c: 273: LCDWrite(0, 0x14);
 12836  1FE8  3014               	movlw	20
 12837  1FE9  00F5               	movwf	??_LCDInit
 12838  1FEA  0875               	movf	??_LCDInit,w
 12839  1FEB  00F0               	movwf	LCDWrite@data
 12840  1FEC  3000               	movlw	0
 12841  1FED  319F  274E  319F   	fcall	_LCDWrite
 12842                           
 12843                           ;lcd.c: 275: LCDWrite(0, 0x20);
 12844  1FF0  3020               	movlw	32
 12845  1FF1  00F5               	movwf	??_LCDInit
 12846  1FF2  0875               	movf	??_LCDInit,w
 12847  1FF3  00F0               	movwf	LCDWrite@data
 12848  1FF4  3000               	movlw	0
 12849  1FF5  319F  274E  319F   	fcall	_LCDWrite
 12850                           
 12851                           ;lcd.c: 277: LCDWrite(0, 0x0C);
 12852  1FF8  300C               	movlw	12
 12853  1FF9  00F5               	movwf	??_LCDInit
 12854  1FFA  0875               	movf	??_LCDInit,w
 12855  1FFB  00F0               	movwf	LCDWrite@data
 12856  1FFC  3000               	movlw	0
 12857  1FFD  319F  274E         	fcall	_LCDWrite
 12858  1FFF  0008               	return
 12859  2000                     __end_of_LCDInit:	
 12860                           
 12861                           	psect	text26
 12862  1F73                     __ptext26:	
 12863 ;; *************** function _LCDClear *****************
 12864 ;; Defined at:
 12865 ;;		line 182 in file "lcd.c"
 12866 ;; Parameters:    Size  Location     Type
 12867 ;;		None
 12868 ;; Auto vars:     Size  Location     Type
 12869 ;;  index           2    9[COMMON] int 
 12870 ;; Return value:  Size  Location     Type
 12871 ;;                  1    wreg      void 
 12872 ;; Registers used:
 12873 ;;		wreg, status,2, status,0, pclath, cstack
 12874 ;; Tracked objects:
 12875 ;;		On entry : 0/0
 12876 ;;		On exit  : 0/0
 12877 ;;		Unchanged: 0/0
 12878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12880 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12881 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12882 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12883 ;;Total ram usage:        3 bytes
 12884 ;; Hardware stack levels used:    1
 12885 ;; Hardware stack levels required when called:    2
 12886 ;; This function calls:
 12887 ;;		_LCDWrite
 12888 ;;		_gotoXY
 12889 ;; This function is called by:
 12890 ;;		_main
 12891 ;;		_SYSTEM_Initialize
 12892 ;; This function uses a non-reentrant model
 12893 ;;
 12894                           
 12895                           
 12896                           ;psect for function _LCDClear
 12897  1F73                     _LCDClear:	
 12898                           
 12899                           ;lcd.c: 184: int index;
 12900                           ;lcd.c: 185: for (index = 0 ; index < (84 * 48 / 8) ; index++)
 12901                           
 12902                           ;incstack = 0
 12903                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
 12904  1F73  01F9               	clrf	LCDClear@index
 12905  1F74  01FA               	clrf	LCDClear@index+1
 12906  1F75  087A               	movf	LCDClear@index+1,w
 12907  1F76  3A80               	xorlw	128
 12908  1F77  00F8               	movwf	??_LCDClear
 12909  1F78  3081               	movlw	129
 12910  1F79  0278               	subwf	??_LCDClear,w
 12911  1F7A  1D03               	skipz
 12912  1F7B  2F7E               	goto	u2975
 12913  1F7C  30F8               	movlw	248
 12914  1F7D  0279               	subwf	LCDClear@index,w
 12915  1F7E                     u2975:	
 12916  1F7E  1803               	btfsc	3,0
 12917  1F7F  2F94               	goto	l2674
 12918  1F80                     l2668:	
 12919                           
 12920                           ;lcd.c: 186: LCDWrite(1, 0x00);
 12921  1F80  01F0               	clrf	LCDWrite@data
 12922  1F81  3001               	movlw	1
 12923  1F82  319F  274E  319F   	fcall	_LCDWrite
 12924  1F85  3001               	movlw	1
 12925  1F86  07F9               	addwf	LCDClear@index,f
 12926  1F87  3000               	movlw	0
 12927  1F88  3DFA               	addwfc	LCDClear@index+1,f
 12928  1F89  087A               	movf	LCDClear@index+1,w
 12929  1F8A  3A80               	xorlw	128
 12930  1F8B  00F8               	movwf	??_LCDClear
 12931  1F8C  3081               	movlw	129
 12932  1F8D  0278               	subwf	??_LCDClear,w
 12933  1F8E  1D03               	skipz
 12934  1F8F  2F92               	goto	u2985
 12935  1F90  30F8               	movlw	248
 12936  1F91  0279               	subwf	LCDClear@index,w
 12937  1F92                     u2985:	
 12938  1F92  1C03               	skipc
 12939  1F93  2F80               	goto	l2668
 12940  1F94                     l2674:	
 12941                           
 12942                           ;lcd.c: 187: gotoXY(0, 0);
 12943  1F94  01F5               	clrf	gotoXY@y
 12944  1F95  3000               	movlw	0
 12945  1F96  319E  262B         	fcall	_gotoXY
 12946  1F98  0008               	return
 12947  1F99                     __end_of_LCDClear:	
 12948                           
 12949                           	psect	text27
 12950  1E2B                     __ptext27:	
 12951 ;; *************** function _gotoXY *****************
 12952 ;; Defined at:
 12953 ;;		line 124 in file "lcd.c"
 12954 ;; Parameters:    Size  Location     Type
 12955 ;;  x               1    wreg     unsigned char 
 12956 ;;  y               1    5[COMMON] unsigned char 
 12957 ;; Auto vars:     Size  Location     Type
 12958 ;;  x               1    7[COMMON] unsigned char 
 12959 ;; Return value:  Size  Location     Type
 12960 ;;                  1    wreg      void 
 12961 ;; Registers used:
 12962 ;;		wreg, status,2, status,0, pclath, cstack
 12963 ;; Tracked objects:
 12964 ;;		On entry : 0/0
 12965 ;;		On exit  : 0/0
 12966 ;;		Unchanged: 0/0
 12967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12968 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12969 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12970 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12971 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12972 ;;Total ram usage:        3 bytes
 12973 ;; Hardware stack levels used:    1
 12974 ;; Hardware stack levels required when called:    1
 12975 ;; This function calls:
 12976 ;;		_LCDWrite
 12977 ;; This function is called by:
 12978 ;;		_main
 12979 ;;		_LCDClear
 12980 ;; This function uses a non-reentrant model
 12981 ;;
 12982                           
 12983                           
 12984                           ;psect for function _gotoXY
 12985  1E2B                     _gotoXY:	
 12986                           
 12987                           ;incstack = 0
 12988                           ; Regs used in _gotoXY: [wreg+status,2+status,0+pclath+cstack]
 12989                           ;gotoXY@x stored from wreg
 12990  1E2B  00F7               	movwf	gotoXY@x
 12991                           
 12992                           ;lcd.c: 126: LCDWrite(0,(uint8_t)(0x80 | x));
 12993  1E2C  0877               	movf	gotoXY@x,w
 12994  1E2D  3880               	iorlw	128
 12995  1E2E  00F6               	movwf	??_gotoXY
 12996  1E2F  0876               	movf	??_gotoXY,w
 12997  1E30  00F0               	movwf	LCDWrite@data
 12998  1E31  3000               	movlw	0
 12999  1E32  319F  274E  319E   	fcall	_LCDWrite
 13000                           
 13001                           ;lcd.c: 127: LCDWrite(0,(uint8_t)(0x40 | y));
 13002  1E35  0875               	movf	gotoXY@y,w
 13003  1E36  3840               	iorlw	64
 13004  1E37  00F6               	movwf	??_gotoXY
 13005  1E38  0876               	movf	??_gotoXY,w
 13006  1E39  00F0               	movwf	LCDWrite@data
 13007  1E3A  3000               	movlw	0
 13008  1E3B  319F  274E         	fcall	_LCDWrite
 13009  1E3D  0008               	return
 13010  1E3E                     __end_of_gotoXY:	
 13011                           
 13012                           	psect	text28
 13013  13FF                     __ptext28:	
 13014 ;; *************** function _Init_Battery_State_Machine *****************
 13015 ;; Defined at:
 13016 ;;		line 21 in file "battery_charger.c"
 13017 ;; Parameters:    Size  Location     Type
 13018 ;;  z               1    wreg     unsigned char 
 13019 ;; Auto vars:     Size  Location     Type
 13020 ;;  z               1   35[BANK0 ] unsigned char 
 13021 ;; Return value:  Size  Location     Type
 13022 ;;                  1    wreg      void 
 13023 ;; Registers used:
 13024 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13025 ;; Tracked objects:
 13026 ;;		On entry : 0/0
 13027 ;;		On exit  : 0/0
 13028 ;;		Unchanged: 0/0
 13029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13031 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13032 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13033 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13034 ;;Total ram usage:        5 bytes
 13035 ;; Hardware stack levels used:    1
 13036 ;; Hardware stack levels required when called:    2
 13037 ;; This function calls:
 13038 ;;		___awtoft
 13039 ;;		___ftmul
 13040 ;;		___fttol
 13041 ;; This function is called by:
 13042 ;;		_SYSTEM_Initialize
 13043 ;; This function uses a non-reentrant model
 13044 ;;
 13045                           
 13046                           
 13047                           ;psect for function _Init_Battery_State_Machine
 13048  13FF                     _Init_Battery_State_Machine:	
 13049                           
 13050                           ;incstack = 0
 13051                           ; Regs used in _Init_Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13052                           ;Init_Battery_State_Machine@z stored from wreg
 13053  13FF  0020               	movlb	0	; select bank0
 13054  1400  00C3               	movwf	Init_Battery_State_Machine@z
 13055                           
 13056                           ;battery_charger.c: 23: batteryState[z] =PRECHARGE;
 13057  1401  3003               	movlw	3
 13058  1402  00BF               	movwf	??_Init_Battery_State_Machine
 13059  1403  0843               	movf	Init_Battery_State_Machine@z,w
 13060  1404  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 13061  1405  0086               	movwf	6
 13062  1406  0187               	clrf	7
 13063  1407  083F               	movf	??_Init_Battery_State_Machine,w
 13064  1408  0081               	movwf	1
 13065                           
 13066                           ;battery_charger.c: 24: stateCounter[z] =5;
 13067  1409  3543               	lslf	Init_Battery_State_Machine@z,w
 13068  140A  3EB8               	addlw	(low (_stateCounter| 0))& (0+255)
 13069  140B  0086               	movwf	6
 13070  140C  0187               	clrf	7
 13071  140D  3005               	movlw	5
 13072  140E  3FC0               	movwi [0]fsr1
 13073  140F  3000               	movlw	0
 13074  1410  3FC1               	movwi [1]fsr1
 13075                           
 13076                           ;battery_charger.c: 25: Iref[z] =10;
 13077  1411  3543               	lslf	Init_Battery_State_Machine@z,w
 13078  1412  3EB0               	addlw	(low (_Iref| 0))& (0+255)
 13079  1413  0086               	movwf	6
 13080  1414  0187               	clrf	7
 13081  1415  300A               	movlw	10
 13082  1416  3FC0               	movwi [0]fsr1
 13083  1417  3000               	movlw	0
 13084  1418  3FC1               	movwi [1]fsr1
 13085                           
 13086                           ;battery_charger.c: 26: Vref[z] =1425+(int16_t)((250-batteryTemp)*.24);
 13087  1419  0021               	movlb	1	; select bank1
 13088  141A  096D               	comf	_batteryTemp^(0+128),w
 13089  141B  0020               	movlb	0	; select bank0
 13090  141C  00BF               	movwf	??_Init_Battery_State_Machine
 13091  141D  0021               	movlb	1	; select bank1
 13092  141E  096E               	comf	(_batteryTemp+1)^(0+128),w
 13093  141F  0020               	movlb	0	; select bank0
 13094  1420  00C0               	movwf	??_Init_Battery_State_Machine+1
 13095  1421  0ABF               	incf	??_Init_Battery_State_Machine,f
 13096  1422  1903               	skipnz
 13097  1423  0AC0               	incf	??_Init_Battery_State_Machine+1,f
 13098  1424  083F               	movf	??_Init_Battery_State_Machine,w
 13099  1425  3EFA               	addlw	250
 13100  1426  00F9               	movwf	___awtoft@c
 13101  1427  3000               	movlw	0
 13102  1428  3D40               	addwfc	??_Init_Battery_State_Machine+1,w
 13103  1429  00FA               	movwf	___awtoft@c+1
 13104  142A  319F  270C  3193   	fcall	___awtoft
 13105  142D  0879               	movf	?___awtoft,w
 13106  142E  0020               	movlb	0	; select bank0
 13107  142F  00A4               	movwf	___ftmul@f2
 13108  1430  087A               	movf	?___awtoft+1,w
 13109  1431  00A5               	movwf	___ftmul@f2+1
 13110  1432  087B               	movf	?___awtoft+2,w
 13111  1433  00A6               	movwf	___ftmul@f2+2
 13112  1434  30C3               	movlw	195
 13113  1435  00A1               	movwf	___ftmul@f1
 13114  1436  3075               	movlw	117
 13115  1437  00A2               	movwf	___ftmul@f1+1
 13116  1438  303E               	movlw	62
 13117  1439  00A3               	movwf	___ftmul@f1+2
 13118  143A  3197  274C  3193   	fcall	___ftmul
 13119  143D  0020               	movlb	0	; select bank0
 13120  143E  0821               	movf	?___ftmul,w
 13121  143F  00B1               	movwf	___fttol@f1
 13122  1440  0822               	movf	?___ftmul+1,w
 13123  1441  00B2               	movwf	___fttol@f1+1
 13124  1442  0823               	movf	?___ftmul+2,w
 13125  1443  00B3               	movwf	___fttol@f1+2
 13126  1444  3195  256C         	fcall	___fttol
 13127  1446  0020               	movlb	0	; select bank0
 13128  1447  0831               	movf	?___fttol,w
 13129  1448  3E91               	addlw	145
 13130  1449  00C1               	movwf	??_Init_Battery_State_Machine+2
 13131  144A  3005               	movlw	5
 13132  144B  3D32               	addwfc	?___fttol+1,w
 13133  144C  00C2               	movwf	??_Init_Battery_State_Machine+3
 13134  144D  3543               	lslf	Init_Battery_State_Machine@z,w
 13135  144E  3EB4               	addlw	(low (_Vref| 0))& (0+255)
 13136  144F  0086               	movwf	6
 13137  1450  0187               	clrf	7
 13138  1451  0841               	movf	??_Init_Battery_State_Machine+2,w
 13139  1452  3FC0               	movwi [0]fsr1
 13140  1453  0842               	movf	??_Init_Battery_State_Machine+3,w
 13141  1454  3FC1               	movwi [1]fsr1
 13142                           
 13143                           ;battery_charger.c: 27: Imin[z] =15;
 13144  1455  3543               	lslf	Init_Battery_State_Machine@z,w
 13145  1456  3E55               	addlw	(low (_Imin| (0+256)))& (0+255)
 13146  1457  0086               	movwf	6
 13147  1458  3001               	movlw	1	; select bank2/3
 13148  1459  0087               	movwf	7
 13149  145A  300F               	movlw	15
 13150  145B  3FC0               	movwi [0]fsr1
 13151  145C  3000               	movlw	0
 13152  145D  3FC1               	movwi [1]fsr1
 13153                           
 13154                           ;battery_charger.c: 28: IminCount[z] = 600;
 13155  145E  3543               	lslf	Init_Battery_State_Machine@z,w
 13156  145F  3E5E               	addlw	(low (_IminCount| 0))& (0+255)
 13157  1460  0086               	movwf	6
 13158  1461  0187               	clrf	7
 13159  1462  3058               	movlw	88
 13160  1463  3FC0               	movwi [0]fsr1
 13161  1464  3002               	movlw	2
 13162  1465  3FC1               	movwi [1]fsr1
 13163  1466  0008               	return
 13164  1467                     __end_of_Init_Battery_State_Machine:	
 13165                           
 13166                           	psect	text29
 13167  1ECE                     __ptext29:	
 13168 ;; *************** function _ADC_Initialize *****************
 13169 ;; Defined at:
 13170 ;;		line 138 in file "adc.c"
 13171 ;; Parameters:    Size  Location     Type
 13172 ;;		None
 13173 ;; Auto vars:     Size  Location     Type
 13174 ;;		None
 13175 ;; Return value:  Size  Location     Type
 13176 ;;                  1    wreg      void 
 13177 ;; Registers used:
 13178 ;;		wreg, status,2
 13179 ;; Tracked objects:
 13180 ;;		On entry : 0/0
 13181 ;;		On exit  : 0/0
 13182 ;;		Unchanged: 0/0
 13183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13188 ;;Total ram usage:        0 bytes
 13189 ;; Hardware stack levels used:    1
 13190 ;; This function calls:
 13191 ;;		Nothing
 13192 ;; This function is called by:
 13193 ;;		_SYSTEM_Initialize
 13194 ;; This function uses a non-reentrant model
 13195 ;;
 13196                           
 13197                           
 13198                           ;psect for function _ADC_Initialize
 13199  1ECE                     _ADC_Initialize:	
 13200                           
 13201                           ;adc.c: 140: ADCON1 = 0x00;
 13202                           
 13203                           ;incstack = 0
 13204                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 13205  1ECE  0021               	movlb	1	; select bank1
 13206  1ECF  0194               	clrf	20	;volatile
 13207                           
 13208                           ;adc.c: 142: ADCON2 = 0x00;
 13209  1ED0  0195               	clrf	21	;volatile
 13210                           
 13211                           ;adc.c: 144: ADCON3 = 0x00;
 13212  1ED1  0196               	clrf	22	;volatile
 13213                           
 13214                           ;adc.c: 146: ADACT = 0x00;
 13215  1ED2  0199               	clrf	25	;volatile
 13216                           
 13217                           ;adc.c: 148: ADSTAT = 0x00;
 13218  1ED3  0197               	clrf	23	;volatile
 13219                           
 13220                           ;adc.c: 150: FVRCON = 0b11000011;
 13221  1ED4  30C3               	movlw	195
 13222  1ED5  0032               	movlb	18	; select bank18
 13223  1ED6  008C               	movwf	12	;volatile
 13224                           
 13225                           ;adc.c: 151: ADCLK = 0x3F;
 13226  1ED7  303F               	movlw	63
 13227  1ED8  0021               	movlb	1	; select bank1
 13228  1ED9  0098               	movwf	24	;volatile
 13229                           
 13230                           ;adc.c: 158: ADREF = 0x03;
 13231  1EDA  3003               	movlw	3
 13232  1EDB  009A               	movwf	26	;volatile
 13233                           
 13234                           ;adc.c: 161: ADCAP = 0x00;
 13235  1EDC  019B               	clrf	27	;volatile
 13236                           
 13237                           ;adc.c: 164: ADPRE = 0x07;
 13238  1EDD  3007               	movlw	7
 13239  1EDE  009C               	movwf	28	;volatile
 13240                           
 13241                           ;adc.c: 166: ADACQ = 0x00;
 13242  1EDF  019D               	clrf	29	;volatile
 13243                           
 13244                           ;adc.c: 168: ADPCH = 0x00;
 13245  1EE0  019E               	clrf	30	;volatile
 13246                           
 13247                           ;adc.c: 170: ADRPT = 0x00;
 13248  1EE1  0022               	movlb	2	; select bank2
 13249  1EE2  018D               	clrf	13	;volatile
 13250                           
 13251                           ;adc.c: 172: ADLTHL = 0x00;
 13252  1EE3  018E               	clrf	14	;volatile
 13253                           
 13254                           ;adc.c: 174: ADLTHH = 0x00;
 13255  1EE4  018F               	clrf	15	;volatile
 13256                           
 13257                           ;adc.c: 176: ADUTHL = 0x00;
 13258  1EE5  0190               	clrf	16	;volatile
 13259                           
 13260                           ;adc.c: 178: ADUTHH = 0x00;
 13261  1EE6  0191               	clrf	17	;volatile
 13262                           
 13263                           ;adc.c: 180: ADSTPTL = 0x00;
 13264  1EE7  0192               	clrf	18	;volatile
 13265                           
 13266                           ;adc.c: 182: ADSTPTH = 0x00;
 13267  1EE8  0193               	clrf	19	;volatile
 13268                           
 13269                           ;adc.c: 184: ADCON0 = 0x84;
 13270  1EE9  3084               	movlw	132
 13271  1EEA  0021               	movlb	1	; select bank1
 13272  1EEB  0093               	movwf	19	;volatile
 13273  1EEC  0008               	return
 13274  1EED                     __end_of_ADC_Initialize:	
 13275                           
 13276                           	psect	text30
 13277  1E7F                     __ptext30:	
 13278 ;; *************** function _PWM7_LoadDutyValue *****************
 13279 ;; Defined at:
 13280 ;;		line 37 in file "pwm.c"
 13281 ;; Parameters:    Size  Location     Type
 13282 ;;  dutyCycle7      2    0[COMMON] unsigned int 
 13283 ;; Auto vars:     Size  Location     Type
 13284 ;;		None
 13285 ;; Return value:  Size  Location     Type
 13286 ;;                  1    wreg      void 
 13287 ;; Registers used:
 13288 ;;		wreg, status,2, status,0
 13289 ;; Tracked objects:
 13290 ;;		On entry : 0/0
 13291 ;;		On exit  : 0/0
 13292 ;;		Unchanged: 0/0
 13293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13294 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13296 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13297 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13298 ;;Total ram usage:        4 bytes
 13299 ;; Hardware stack levels used:    1
 13300 ;; This function calls:
 13301 ;;		Nothing
 13302 ;; This function is called by:
 13303 ;;		_main
 13304 ;; This function uses a non-reentrant model
 13305 ;;
 13306                           
 13307                           
 13308                           ;psect for function _PWM7_LoadDutyValue
 13309  1E7F                     _PWM7_LoadDutyValue:	
 13310                           
 13311                           ;pwm.c: 39: PWM7DCH = (dutyCycle7 & 0x03FC)>>2;
 13312                           
 13313                           ;incstack = 0
 13314                           ; Regs used in _PWM7_LoadDutyValue: [wreg+status,2+status,0]
 13315  1E7F  0871               	movf	PWM7_LoadDutyValue@dutyCycle7+1,w
 13316  1E80  00F3               	movwf	??_PWM7_LoadDutyValue+1
 13317  1E81  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 13318  1E82  00F2               	movwf	??_PWM7_LoadDutyValue
 13319  1E83  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 13320  1E84  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 13321  1E85  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 13322  1E86  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 13323  1E87  0872               	movf	??_PWM7_LoadDutyValue,w
 13324  1E88  0027               	movlb	7	; select bank7
 13325  1E89  0091               	movwf	17	;volatile
 13326                           
 13327                           ;pwm.c: 41: PWM7DCL = (dutyCycle7 & 0x0003)<<6;
 13328  1E8A  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 13329  1E8B  3903               	andlw	3
 13330  1E8C  00F2               	movwf	??_PWM7_LoadDutyValue
 13331  1E8D  3005               	movlw	5
 13332  1E8E                     u3635:	
 13333  1E8E  35F2               	lslf	??_PWM7_LoadDutyValue,f
 13334  1E8F  3EFF               	addlw	-1
 13335  1E90  1D03               	skipz
 13336  1E91  2E8E               	goto	u3635
 13337  1E92  3572               	lslf	??_PWM7_LoadDutyValue,w
 13338  1E93  0090               	movwf	16	;volatile
 13339  1E94  0008               	return
 13340  1E95                     __end_of_PWM7_LoadDutyValue:	
 13341                           
 13342                           	psect	text31
 13343  1E69                     __ptext31:	
 13344 ;; *************** function _PWM6_LoadDutyValue *****************
 13345 ;; Defined at:
 13346 ;;		line 30 in file "pwm.c"
 13347 ;; Parameters:    Size  Location     Type
 13348 ;;  dutyCycle6      2    0[COMMON] unsigned int 
 13349 ;; Auto vars:     Size  Location     Type
 13350 ;;		None
 13351 ;; Return value:  Size  Location     Type
 13352 ;;                  1    wreg      void 
 13353 ;; Registers used:
 13354 ;;		wreg, status,2, status,0
 13355 ;; Tracked objects:
 13356 ;;		On entry : 0/0
 13357 ;;		On exit  : 0/0
 13358 ;;		Unchanged: 0/0
 13359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13360 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13362 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13363 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13364 ;;Total ram usage:        4 bytes
 13365 ;; Hardware stack levels used:    1
 13366 ;; This function calls:
 13367 ;;		Nothing
 13368 ;; This function is called by:
 13369 ;;		_main
 13370 ;; This function uses a non-reentrant model
 13371 ;;
 13372                           
 13373                           
 13374                           ;psect for function _PWM6_LoadDutyValue
 13375  1E69                     _PWM6_LoadDutyValue:	
 13376                           
 13377                           ;pwm.c: 32: PWM6DCH = (dutyCycle6 & 0x03FC)>>2;
 13378                           
 13379                           ;incstack = 0
 13380                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 13381  1E69  0871               	movf	PWM6_LoadDutyValue@dutyCycle6+1,w
 13382  1E6A  00F3               	movwf	??_PWM6_LoadDutyValue+1
 13383  1E6B  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 13384  1E6C  00F2               	movwf	??_PWM6_LoadDutyValue
 13385  1E6D  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13386  1E6E  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13387  1E6F  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13388  1E70  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13389  1E71  0872               	movf	??_PWM6_LoadDutyValue,w
 13390  1E72  0027               	movlb	7	; select bank7
 13391  1E73  008D               	movwf	13	;volatile
 13392                           
 13393                           ;pwm.c: 34: PWM6DCL = (dutyCycle6 & 0x0003)<<6;
 13394  1E74  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 13395  1E75  3903               	andlw	3
 13396  1E76  00F2               	movwf	??_PWM6_LoadDutyValue
 13397  1E77  3005               	movlw	5
 13398  1E78                     u3625:	
 13399  1E78  35F2               	lslf	??_PWM6_LoadDutyValue,f
 13400  1E79  3EFF               	addlw	-1
 13401  1E7A  1D03               	skipz
 13402  1E7B  2E78               	goto	u3625
 13403  1E7C  3572               	lslf	??_PWM6_LoadDutyValue,w
 13404  1E7D  008C               	movwf	12	;volatile
 13405  1E7E  0008               	return
 13406  1E7F                     __end_of_PWM6_LoadDutyValue:	
 13407                           
 13408                           	psect	text32
 13409  1E53                     __ptext32:	
 13410 ;; *************** function _PWM1_LoadDutyValue *****************
 13411 ;; Defined at:
 13412 ;;		line 44 in file "pwm.c"
 13413 ;; Parameters:    Size  Location     Type
 13414 ;;  dutyCycle1      2    0[COMMON] unsigned int 
 13415 ;; Auto vars:     Size  Location     Type
 13416 ;;		None
 13417 ;; Return value:  Size  Location     Type
 13418 ;;                  1    wreg      void 
 13419 ;; Registers used:
 13420 ;;		wreg, status,2, status,0
 13421 ;; Tracked objects:
 13422 ;;		On entry : 0/0
 13423 ;;		On exit  : 0/0
 13424 ;;		Unchanged: 0/0
 13425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13426 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13428 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13429 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13430 ;;Total ram usage:        4 bytes
 13431 ;; Hardware stack levels used:    1
 13432 ;; This function calls:
 13433 ;;		Nothing
 13434 ;; This function is called by:
 13435 ;;		_main
 13436 ;; This function uses a non-reentrant model
 13437 ;;
 13438                           
 13439                           
 13440                           ;psect for function _PWM1_LoadDutyValue
 13441  1E53                     _PWM1_LoadDutyValue:	
 13442                           
 13443                           ;pwm.c: 46: CCPR1H = (dutyCycle1& 0x03FC)>>2;
 13444                           
 13445                           ;incstack = 0
 13446                           ; Regs used in _PWM1_LoadDutyValue: [wreg+status,2+status,0]
 13447  1E53  0871               	movf	PWM1_LoadDutyValue@dutyCycle1+1,w
 13448  1E54  00F3               	movwf	??_PWM1_LoadDutyValue+1
 13449  1E55  0870               	movf	PWM1_LoadDutyValue@dutyCycle1,w
 13450  1E56  00F2               	movwf	??_PWM1_LoadDutyValue
 13451  1E57  36F3               	lsrf	??_PWM1_LoadDutyValue+1,f
 13452  1E58  0CF2               	rrf	??_PWM1_LoadDutyValue,f
 13453  1E59  36F3               	lsrf	??_PWM1_LoadDutyValue+1,f
 13454  1E5A  0CF2               	rrf	??_PWM1_LoadDutyValue,f
 13455  1E5B  0872               	movf	??_PWM1_LoadDutyValue,w
 13456  1E5C  0026               	movlb	6	; select bank6
 13457  1E5D  008D               	movwf	13	;volatile
 13458                           
 13459                           ;pwm.c: 47: CCPR1L = (dutyCycle1 & 0x0003)<<6;
 13460  1E5E  0870               	movf	PWM1_LoadDutyValue@dutyCycle1,w
 13461  1E5F  3903               	andlw	3
 13462  1E60  00F2               	movwf	??_PWM1_LoadDutyValue
 13463  1E61  3005               	movlw	5
 13464  1E62                     u3735:	
 13465  1E62  35F2               	lslf	??_PWM1_LoadDutyValue,f
 13466  1E63  3EFF               	addlw	-1
 13467  1E64  1D03               	skipz
 13468  1E65  2E62               	goto	u3735
 13469  1E66  3572               	lslf	??_PWM1_LoadDutyValue,w
 13470  1E67  008C               	movwf	12	;volatile
 13471  1E68  0008               	return
 13472  1E69                     __end_of_PWM1_LoadDutyValue:	
 13473                           
 13474                           	psect	text33
 13475  080E                     __ptext33:	
 13476 ;; *************** function _LCDWriteInt *****************
 13477 ;; Defined at:
 13478 ;;		line 190 in file "lcd.c"
 13479 ;; Parameters:    Size  Location     Type
 13480 ;;  value           2   31[BANK0 ] int 
 13481 ;;  fieldLength     1   33[BANK0 ] char 
 13482 ;;  numPlaces       1   34[BANK0 ] unsigned char 
 13483 ;;  sign            1   35[BANK0 ] unsigned char 
 13484 ;; Auto vars:     Size  Location     Type
 13485 ;;  str             5   40[BANK0 ] unsigned char [5]
 13486 ;;  i               1   46[BANK0 ] unsigned char 
 13487 ;;  j               1   45[BANK0 ] unsigned char 
 13488 ;; Return value:  Size  Location     Type
 13489 ;;                  1    wreg      void 
 13490 ;; Registers used:
 13491 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13492 ;; Tracked objects:
 13493 ;;		On entry : 0/0
 13494 ;;		On exit  : 0/0
 13495 ;;		Unchanged: 0/0
 13496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13497 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13498 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13499 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13500 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13501 ;;Total ram usage:       16 bytes
 13502 ;; Hardware stack levels used:    1
 13503 ;; Hardware stack levels required when called:    2
 13504 ;; This function calls:
 13505 ;;		_LCDWriteCharacter
 13506 ;;		___awdiv
 13507 ;;		___lwmod
 13508 ;; This function is called by:
 13509 ;;		_main
 13510 ;; This function uses a non-reentrant model
 13511 ;;
 13512                           
 13513                           
 13514                           ;psect for function _LCDWriteInt
 13515  080E                     _LCDWriteInt:	
 13516                           
 13517                           ;lcd.c: 192: uint8_t str[5]={0,0,0,0,0};
 13518                           
 13519                           ;incstack = 0
 13520                           ; Regs used in _LCDWriteInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13521  080E  3050               	movlw	low LCDWriteInt@F13692
 13522  080F  0086               	movwf	6
 13523  0810  3001               	movlw	high LCDWriteInt@F13692
 13524  0811  0087               	movwf	7
 13525  0812  3048               	movlw	low LCDWriteInt@str
 13526  0813  0084               	movwf	4
 13527  0814  3000               	movlw	high LCDWriteInt@str
 13528  0815  0085               	movwf	5
 13529  0816  3005               	movlw	5
 13530  0817  0020               	movlb	0	; select bank0
 13531  0818  00C4               	movwf	??_LCDWriteInt
 13532  0819                     u3870:	
 13533  0819  0016               	moviw fsr1++
 13534  081A  001A               	movwi fsr0++
 13535  081B  0BC4               	decfsz	??_LCDWriteInt,f
 13536  081C  2819               	goto	u3870
 13537                           
 13538                           ;lcd.c: 193: uint8_t i=4,j=0;
 13539  081D  3004               	movlw	4
 13540  081E  00C4               	movwf	??_LCDWriteInt
 13541  081F  0844               	movf	??_LCDWriteInt,w
 13542  0820  00CE               	movwf	LCDWriteInt@i
 13543  0821  01CD               	clrf	LCDWriteInt@j
 13544                           
 13545                           ;lcd.c: 195: if(value<0)
 13546  0822  1FC0               	btfss	LCDWriteInt@value+1,7
 13547  0823  282F               	goto	l3238
 13548                           
 13549                           ;lcd.c: 196: {
 13550                           ;lcd.c: 197: LCDWriteCharacter('-');
 13551  0824  302D               	movlw	45
 13552  0825  3192  22E7  3188   	fcall	_LCDWriteCharacter
 13553                           
 13554                           ;lcd.c: 198: value=value*-1;
 13555  0828  0020               	movlb	0	; select bank0
 13556  0829  09BF               	comf	LCDWriteInt@value,f
 13557  082A  09C0               	comf	LCDWriteInt@value+1,f
 13558  082B  0ABF               	incf	LCDWriteInt@value,f
 13559  082C  1903               	skipnz
 13560  082D  0AC0               	incf	LCDWriteInt@value+1,f
 13561                           
 13562                           ;lcd.c: 199: }
 13563  082E  2836               	goto	l3248
 13564  082F                     l3238:	
 13565                           
 13566                           ;lcd.c: 201: else
 13567                           ;lcd.c: 202: {
 13568                           ;lcd.c: 203: if(sign == 1)
 13569  082F  0343               	decf	LCDWriteInt@sign,w
 13570  0830  1D03               	btfss	3,2
 13571  0831  2836               	goto	l3248
 13572                           
 13573                           ;lcd.c: 204: {
 13574                           ;lcd.c: 205: LCDWriteCharacter('+');
 13575  0832  302B               	movlw	43
 13576  0833  3192  22E7  3188   	fcall	_LCDWriteCharacter
 13577  0836                     l3248:	
 13578                           ;lcd.c: 206: }
 13579                           ;lcd.c: 207: }
 13580                           ;lcd.c: 209: while(value)
 13581                           
 13582  0836  0020               	movlb	0	; select bank0
 13583  0837  083F               	movf	LCDWriteInt@value,w
 13584  0838  0440               	iorwf	LCDWriteInt@value+1,w
 13585  0839  1903               	btfsc	3,2
 13586  083A  2863               	goto	l3250
 13587                           
 13588                           ;lcd.c: 210: {
 13589                           ;lcd.c: 211: str[i]=(uint16_t)value%10;
 13590  083B  300A               	movlw	10
 13591  083C  00F0               	movwf	___lwmod@divisor
 13592  083D  3000               	movlw	0
 13593  083E  00F1               	movwf	___lwmod@divisor+1
 13594  083F  0020               	movlb	0	; select bank0
 13595  0840  0840               	movf	LCDWriteInt@value+1,w
 13596  0841  00F3               	movwf	___lwmod@dividend+1
 13597  0842  083F               	movf	LCDWriteInt@value,w
 13598  0843  00F2               	movwf	___lwmod@dividend
 13599  0844  319F  2799  3188   	fcall	___lwmod
 13600  0847  0870               	movf	?___lwmod,w
 13601  0848  0020               	movlb	0	; select bank0
 13602  0849  00C4               	movwf	??_LCDWriteInt
 13603  084A  084E               	movf	LCDWriteInt@i,w
 13604  084B  3E48               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13605  084C  0086               	movwf	6
 13606  084D  0187               	clrf	7
 13607  084E  0844               	movf	??_LCDWriteInt,w
 13608  084F  0081               	movwf	1
 13609                           
 13610                           ;lcd.c: 212: value=value/10;
 13611  0850  300A               	movlw	10
 13612  0851  00F0               	movwf	___awdiv@divisor
 13613  0852  3000               	movlw	0
 13614  0853  00F1               	movwf	___awdiv@divisor+1
 13615  0854  0840               	movf	LCDWriteInt@value+1,w
 13616  0855  00F3               	movwf	___awdiv@dividend+1
 13617  0856  083F               	movf	LCDWriteInt@value,w
 13618  0857  00F2               	movwf	___awdiv@dividend
 13619  0858  3192  2296  3188   	fcall	___awdiv
 13620  085B  0871               	movf	?___awdiv+1,w
 13621  085C  0020               	movlb	0	; select bank0
 13622  085D  00C0               	movwf	LCDWriteInt@value+1
 13623  085E  0870               	movf	?___awdiv,w
 13624  085F  00BF               	movwf	LCDWriteInt@value
 13625                           
 13626                           ;lcd.c: 213: i--;
 13627  0860  3001               	movlw	1
 13628  0861  02CE               	subwf	LCDWriteInt@i,f
 13629  0862  2836               	goto	l3248
 13630  0863                     l3250:	
 13631                           
 13632                           ;lcd.c: 214: }
 13633                           ;lcd.c: 215: if(fieldLength==-1)
 13634  0863  0A41               	incf	LCDWriteInt@fieldLength,w
 13635  0864  1903               	btfsc	3,2
 13636  0865  286B               	goto	l3256
 13637  0866  2873               	goto	l3258
 13638  0867                     l3254:	
 13639                           ;lcd.c: 216: {
 13640                           ;lcd.c: 217: while(str[j]==0)
 13641                           
 13642                           
 13643                           ;lcd.c: 218: {
 13644                           ;lcd.c: 219: j++;
 13645  0867  3001               	movlw	1
 13646  0868  00C4               	movwf	??_LCDWriteInt
 13647  0869  0844               	movf	??_LCDWriteInt,w
 13648  086A  07CD               	addwf	LCDWriteInt@j,f
 13649  086B                     l3256:	
 13650  086B  084D               	movf	LCDWriteInt@j,w
 13651  086C  3E48               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13652  086D  0086               	movwf	6
 13653  086E  0187               	clrf	7
 13654  086F  0801               	movf	1,w
 13655  0870  1D03               	btfss	3,2
 13656  0871  2879               	goto	l3260
 13657  0872  2867               	goto	l3254
 13658  0873                     l3258:	
 13659                           ;lcd.c: 220: }
 13660                           ;lcd.c: 221: }
 13661                           
 13662                           
 13663                           ;lcd.c: 222: else
 13664                           ;lcd.c: 223: {
 13665                           ;lcd.c: 224: j=(uint8_t)(5-fieldLength);
 13666  0873  0341               	decf	LCDWriteInt@fieldLength,w
 13667  0874  3AFF               	xorlw	255
 13668  0875  3E05               	addlw	5
 13669  0876  00C4               	movwf	??_LCDWriteInt
 13670  0877  0844               	movf	??_LCDWriteInt,w
 13671  0878  00CD               	movwf	LCDWriteInt@j
 13672  0879                     l3260:	
 13673                           
 13674                           ;lcd.c: 225: }
 13675                           ;lcd.c: 227: for(i=j;i<(5-numPlaces);i++)
 13676  0879  084D               	movf	LCDWriteInt@j,w
 13677  087A  00C4               	movwf	??_LCDWriteInt
 13678  087B  0844               	movf	??_LCDWriteInt,w
 13679  087C  00CE               	movwf	LCDWriteInt@i
 13680  087D                     l3266:	
 13681  087D  0842               	movf	LCDWriteInt@numPlaces,w
 13682  087E  00C4               	movwf	??_LCDWriteInt
 13683  087F  01C5               	clrf	??_LCDWriteInt+1
 13684  0880  09C4               	comf	??_LCDWriteInt,f
 13685  0881  09C5               	comf	??_LCDWriteInt+1,f
 13686  0882  0AC4               	incf	??_LCDWriteInt,f
 13687  0883  1903               	skipnz
 13688  0884  0AC5               	incf	??_LCDWriteInt+1,f
 13689  0885  0844               	movf	??_LCDWriteInt,w
 13690  0886  3E05               	addlw	5
 13691  0887  00C6               	movwf	??_LCDWriteInt+2
 13692  0888  3000               	movlw	0
 13693  0889  3D45               	addwfc	??_LCDWriteInt+1,w
 13694  088A  00C7               	movwf	??_LCDWriteInt+3
 13695  088B  0847               	movf	??_LCDWriteInt+3,w
 13696  088C  3A80               	xorlw	128
 13697  088D  3C80               	sublw	128
 13698  088E  1D03               	skipz
 13699  088F  2892               	goto	u3935
 13700  0890  0846               	movf	??_LCDWriteInt+2,w
 13701  0891  024E               	subwf	LCDWriteInt@i,w
 13702  0892                     u3935:	
 13703  0892  1803               	btfsc	3,0
 13704  0893  28A4               	goto	l3268
 13705                           
 13706                           ;lcd.c: 228: {
 13707                           ;lcd.c: 229: LCDWriteCharacter((uint8_t)(48+str[i]));
 13708  0894  0020               	movlb	0	; select bank0
 13709  0895  084E               	movf	LCDWriteInt@i,w
 13710  0896  3E48               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13711  0897  0086               	movwf	6
 13712  0898  0187               	clrf	7
 13713  0899  0801               	movf	1,w
 13714  089A  3E30               	addlw	48
 13715  089B  3192  22E7  3188   	fcall	_LCDWriteCharacter
 13716  089E  3001               	movlw	1
 13717  089F  0020               	movlb	0	; select bank0
 13718  08A0  00C4               	movwf	??_LCDWriteInt
 13719  08A1  0844               	movf	??_LCDWriteInt,w
 13720  08A2  07CE               	addwf	LCDWriteInt@i,f
 13721  08A3  287D               	goto	l3266
 13722  08A4                     l3268:	
 13723                           
 13724                           ;lcd.c: 230: }
 13725                           ;lcd.c: 232: if(numPlaces == 1)
 13726  08A4  0020               	movlb	0	; select bank0
 13727  08A5  0342               	decf	LCDWriteInt@numPlaces,w
 13728  08A6  1D03               	btfss	3,2
 13729  08A7  28B2               	goto	l3272
 13730                           
 13731                           ;lcd.c: 233: {
 13732                           ;lcd.c: 234: LCDWriteCharacter(46);
 13733  08A8  302E               	movlw	46
 13734  08A9  3192  22E7  3188   	fcall	_LCDWriteCharacter
 13735                           
 13736                           ;lcd.c: 235: LCDWriteCharacter ((uint8_t)(48+str[4]));
 13737  08AC  0020               	movlb	0	; select bank0
 13738  08AD  084C               	movf	LCDWriteInt@str+4,w
 13739  08AE  3E30               	addlw	48
 13740  08AF  3192  22E7  3188   	fcall	_LCDWriteCharacter
 13741  08B2                     l3272:	
 13742                           
 13743                           ;lcd.c: 236: }
 13744                           ;lcd.c: 238: if(numPlaces == 2)
 13745  08B2  3002               	movlw	2
 13746  08B3  0020               	movlb	0	; select bank0
 13747  08B4  0642               	xorwf	LCDWriteInt@numPlaces,w
 13748  08B5  1D03               	btfss	3,2
 13749  08B6  0008               	return
 13750                           
 13751                           ;lcd.c: 239: {
 13752                           ;lcd.c: 240: LCDWriteCharacter(46);
 13753  08B7  302E               	movlw	46
 13754  08B8  3192  22E7  3188   	fcall	_LCDWriteCharacter
 13755                           
 13756                           ;lcd.c: 241: LCDWriteCharacter((uint8_t)(48+str[3]));
 13757  08BB  0020               	movlb	0	; select bank0
 13758  08BC  084B               	movf	LCDWriteInt@str+3,w
 13759  08BD  3E30               	addlw	48
 13760  08BE  3192  22E7  3188   	fcall	_LCDWriteCharacter
 13761                           
 13762                           ;lcd.c: 242: LCDWriteCharacter((uint8_t)(48+str[4]));
 13763  08C1  0020               	movlb	0	; select bank0
 13764  08C2  084C               	movf	LCDWriteInt@str+4,w
 13765  08C3  3E30               	addlw	48
 13766  08C4  3192  22E7         	fcall	_LCDWriteCharacter
 13767  08C6  0008               	return
 13768  08C7                     __end_of_LCDWriteInt:	
 13769                           
 13770                           	psect	text34
 13771  1F99                     __ptext34:	
 13772 ;; *************** function ___lwmod *****************
 13773 ;; Defined at:
 13774 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
 13775 ;; Parameters:    Size  Location     Type
 13776 ;;  divisor         2    0[COMMON] unsigned int 
 13777 ;;  dividend        2    2[COMMON] unsigned int 
 13778 ;; Auto vars:     Size  Location     Type
 13779 ;;  counter         1    5[COMMON] unsigned char 
 13780 ;; Return value:  Size  Location     Type
 13781 ;;                  2    0[COMMON] unsigned int 
 13782 ;; Registers used:
 13783 ;;		wreg, status,2, status,0
 13784 ;; Tracked objects:
 13785 ;;		On entry : 0/0
 13786 ;;		On exit  : 0/0
 13787 ;;		Unchanged: 0/0
 13788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13789 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13790 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13791 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13792 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13793 ;;Total ram usage:        6 bytes
 13794 ;; Hardware stack levels used:    1
 13795 ;; This function calls:
 13796 ;;		Nothing
 13797 ;; This function is called by:
 13798 ;;		_LCDWriteInt
 13799 ;; This function uses a non-reentrant model
 13800 ;;
 13801                           
 13802                           
 13803                           ;psect for function ___lwmod
 13804  1F99                     ___lwmod:	
 13805                           
 13806                           ;incstack = 0
 13807                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 13808  1F99  0870               	movf	___lwmod@divisor,w
 13809  1F9A  0471               	iorwf	___lwmod@divisor+1,w
 13810  1F9B  1903               	btfsc	3,2
 13811  1F9C  2FC0               	goto	l3026
 13812  1F9D  01F5               	clrf	___lwmod@counter
 13813  1F9E  0AF5               	incf	___lwmod@counter,f
 13814  1F9F                     l3016:	
 13815  1F9F  1BF1               	btfsc	___lwmod@divisor+1,7
 13816  1FA0  2FAB               	goto	l3018
 13817  1FA1  3001               	movlw	1
 13818  1FA2                     u3375:	
 13819  1FA2  35F0               	lslf	___lwmod@divisor,f
 13820  1FA3  0DF1               	rlf	___lwmod@divisor+1,f
 13821  1FA4  0B89               	decfsz	9,f
 13822  1FA5  2FA2               	goto	u3375
 13823  1FA6  3001               	movlw	1
 13824  1FA7  00F4               	movwf	??___lwmod
 13825  1FA8  0874               	movf	??___lwmod,w
 13826  1FA9  07F5               	addwf	___lwmod@counter,f
 13827  1FAA  2F9F               	goto	l3016
 13828  1FAB                     l3018:	
 13829  1FAB  0871               	movf	___lwmod@divisor+1,w
 13830  1FAC  0273               	subwf	___lwmod@dividend+1,w
 13831  1FAD  1D03               	skipz
 13832  1FAE  2FB1               	goto	u3395
 13833  1FAF  0870               	movf	___lwmod@divisor,w
 13834  1FB0  0272               	subwf	___lwmod@dividend,w
 13835  1FB1                     u3395:	
 13836  1FB1  1C03               	skipc
 13837  1FB2  2FB7               	goto	l3022
 13838  1FB3  0870               	movf	___lwmod@divisor,w
 13839  1FB4  02F2               	subwf	___lwmod@dividend,f
 13840  1FB5  0871               	movf	___lwmod@divisor+1,w
 13841  1FB6  3BF3               	subwfb	___lwmod@dividend+1,f
 13842  1FB7                     l3022:	
 13843  1FB7  3001               	movlw	1
 13844  1FB8                     u3405:	
 13845  1FB8  36F1               	lsrf	___lwmod@divisor+1,f
 13846  1FB9  0CF0               	rrf	___lwmod@divisor,f
 13847  1FBA  0B89               	decfsz	9,f
 13848  1FBB  2FB8               	goto	u3405
 13849  1FBC  3001               	movlw	1
 13850  1FBD  02F5               	subwf	___lwmod@counter,f
 13851  1FBE  1D03               	btfss	3,2
 13852  1FBF  2FAB               	goto	l3018
 13853  1FC0                     l3026:	
 13854  1FC0  0873               	movf	___lwmod@dividend+1,w
 13855  1FC1  00F1               	movwf	?___lwmod+1
 13856  1FC2  0872               	movf	___lwmod@dividend,w
 13857  1FC3  00F0               	movwf	?___lwmod
 13858  1FC4  0008               	return
 13859  1FC5                     __end_of___lwmod:	
 13860                           
 13861                           	psect	text35
 13862  1296                     __ptext35:	
 13863 ;; *************** function ___awdiv *****************
 13864 ;; Defined at:
 13865 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
 13866 ;; Parameters:    Size  Location     Type
 13867 ;;  divisor         2    0[COMMON] int 
 13868 ;;  dividend        2    2[COMMON] int 
 13869 ;; Auto vars:     Size  Location     Type
 13870 ;;  quotient        2    7[COMMON] int 
 13871 ;;  sign            1    6[COMMON] unsigned char 
 13872 ;;  counter         1    5[COMMON] unsigned char 
 13873 ;; Return value:  Size  Location     Type
 13874 ;;                  2    0[COMMON] int 
 13875 ;; Registers used:
 13876 ;;		wreg, status,2, status,0
 13877 ;; Tracked objects:
 13878 ;;		On entry : 0/0
 13879 ;;		On exit  : 0/0
 13880 ;;		Unchanged: 0/0
 13881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13882 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13883 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13884 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13885 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13886 ;;Total ram usage:        9 bytes
 13887 ;; Hardware stack levels used:    1
 13888 ;; This function calls:
 13889 ;;		Nothing
 13890 ;; This function is called by:
 13891 ;;		_main
 13892 ;;		_LCDWriteInt
 13893 ;; This function uses a non-reentrant model
 13894 ;;
 13895                           
 13896                           
 13897                           ;psect for function ___awdiv
 13898  1296                     ___awdiv:	
 13899                           
 13900                           ;incstack = 0
 13901                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 13902  1296  01F6               	clrf	___awdiv@sign
 13903  1297  1FF1               	btfss	___awdiv@divisor+1,7
 13904  1298  2AA0               	goto	l2922
 13905  1299  09F0               	comf	___awdiv@divisor,f
 13906  129A  09F1               	comf	___awdiv@divisor+1,f
 13907  129B  0AF0               	incf	___awdiv@divisor,f
 13908  129C  1903               	skipnz
 13909  129D  0AF1               	incf	___awdiv@divisor+1,f
 13910  129E  01F6               	clrf	___awdiv@sign
 13911  129F  0AF6               	incf	___awdiv@sign,f
 13912  12A0                     l2922:	
 13913  12A0  1FF3               	btfss	___awdiv@dividend+1,7
 13914  12A1  2AAB               	goto	l2928
 13915  12A2  09F2               	comf	___awdiv@dividend,f
 13916  12A3  09F3               	comf	___awdiv@dividend+1,f
 13917  12A4  0AF2               	incf	___awdiv@dividend,f
 13918  12A5  1903               	skipnz
 13919  12A6  0AF3               	incf	___awdiv@dividend+1,f
 13920  12A7  3001               	movlw	1
 13921  12A8  00F4               	movwf	??___awdiv
 13922  12A9  0874               	movf	??___awdiv,w
 13923  12AA  06F6               	xorwf	___awdiv@sign,f
 13924  12AB                     l2928:	
 13925  12AB  01F7               	clrf	___awdiv@quotient
 13926  12AC  01F8               	clrf	___awdiv@quotient+1
 13927  12AD  0870               	movf	___awdiv@divisor,w
 13928  12AE  0471               	iorwf	___awdiv@divisor+1,w
 13929  12AF  1903               	btfsc	3,2
 13930  12B0  2ADA               	goto	l2950
 13931  12B1  01F5               	clrf	___awdiv@counter
 13932  12B2  0AF5               	incf	___awdiv@counter,f
 13933  12B3                     l2938:	
 13934  12B3  1BF1               	btfsc	___awdiv@divisor+1,7
 13935  12B4  2ABF               	goto	l2940
 13936  12B5  3001               	movlw	1
 13937  12B6                     u3205:	
 13938  12B6  35F0               	lslf	___awdiv@divisor,f
 13939  12B7  0DF1               	rlf	___awdiv@divisor+1,f
 13940  12B8  0B89               	decfsz	9,f
 13941  12B9  2AB6               	goto	u3205
 13942  12BA  3001               	movlw	1
 13943  12BB  00F4               	movwf	??___awdiv
 13944  12BC  0874               	movf	??___awdiv,w
 13945  12BD  07F5               	addwf	___awdiv@counter,f
 13946  12BE  2AB3               	goto	l2938
 13947  12BF                     l2940:	
 13948  12BF  3001               	movlw	1
 13949  12C0                     u3225:	
 13950  12C0  35F7               	lslf	___awdiv@quotient,f
 13951  12C1  0DF8               	rlf	___awdiv@quotient+1,f
 13952  12C2  0B89               	decfsz	9,f
 13953  12C3  2AC0               	goto	u3225
 13954  12C4  0871               	movf	___awdiv@divisor+1,w
 13955  12C5  0273               	subwf	___awdiv@dividend+1,w
 13956  12C6  1D03               	skipz
 13957  12C7  2ACA               	goto	u3235
 13958  12C8  0870               	movf	___awdiv@divisor,w
 13959  12C9  0272               	subwf	___awdiv@dividend,w
 13960  12CA                     u3235:	
 13961  12CA  1C03               	skipc
 13962  12CB  2AD1               	goto	l2946
 13963  12CC  0870               	movf	___awdiv@divisor,w
 13964  12CD  02F2               	subwf	___awdiv@dividend,f
 13965  12CE  0871               	movf	___awdiv@divisor+1,w
 13966  12CF  3BF3               	subwfb	___awdiv@dividend+1,f
 13967  12D0  1477               	bsf	___awdiv@quotient,0
 13968  12D1                     l2946:	
 13969  12D1  3001               	movlw	1
 13970  12D2                     u3245:	
 13971  12D2  36F1               	lsrf	___awdiv@divisor+1,f
 13972  12D3  0CF0               	rrf	___awdiv@divisor,f
 13973  12D4  0B89               	decfsz	9,f
 13974  12D5  2AD2               	goto	u3245
 13975  12D6  3001               	movlw	1
 13976  12D7  02F5               	subwf	___awdiv@counter,f
 13977  12D8  1D03               	btfss	3,2
 13978  12D9  2ABF               	goto	l2940
 13979  12DA                     l2950:	
 13980  12DA  0876               	movf	___awdiv@sign,w
 13981  12DB  1903               	btfsc	3,2
 13982  12DC  2AE2               	goto	l2954
 13983  12DD  09F7               	comf	___awdiv@quotient,f
 13984  12DE  09F8               	comf	___awdiv@quotient+1,f
 13985  12DF  0AF7               	incf	___awdiv@quotient,f
 13986  12E0  1903               	skipnz
 13987  12E1  0AF8               	incf	___awdiv@quotient+1,f
 13988  12E2                     l2954:	
 13989  12E2  0878               	movf	___awdiv@quotient+1,w
 13990  12E3  00F1               	movwf	?___awdiv+1
 13991  12E4  0877               	movf	___awdiv@quotient,w
 13992  12E5  00F0               	movwf	?___awdiv
 13993  12E6  0008               	return
 13994  12E7                     __end_of___awdiv:	
 13995                           
 13996                           	psect	text36
 13997  12E7                     __ptext36:	
 13998 ;; *************** function _LCDWriteCharacter *****************
 13999 ;; Defined at:
 14000 ;;		line 140 in file "lcd.c"
 14001 ;; Parameters:    Size  Location     Type
 14002 ;;  character       1    wreg     const unsigned char 
 14003 ;; Auto vars:     Size  Location     Type
 14004 ;;  character       1    9[COMMON] const unsigned char 
 14005 ;;  base            2   10[COMMON] unsigned int 
 14006 ;; Return value:  Size  Location     Type
 14007 ;;                  1    wreg      void 
 14008 ;; Registers used:
 14009 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14010 ;; Tracked objects:
 14011 ;;		On entry : 0/0
 14012 ;;		On exit  : 0/0
 14013 ;;		Unchanged: 0/0
 14014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14016 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14017 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14018 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14019 ;;Total ram usage:        6 bytes
 14020 ;; Hardware stack levels used:    1
 14021 ;; Hardware stack levels required when called:    1
 14022 ;; This function calls:
 14023 ;;		_LCDWrite
 14024 ;;		___wmul
 14025 ;; This function is called by:
 14026 ;;		_main
 14027 ;;		_LCDWriteInt
 14028 ;;		_LCDWriteString
 14029 ;; This function uses a non-reentrant model
 14030 ;;
 14031                           
 14032                           
 14033                           ;psect for function _LCDWriteCharacter
 14034  12E7                     _LCDWriteCharacter:	
 14035                           
 14036                           ;incstack = 0
 14037                           ; Regs used in _LCDWriteCharacter: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14038                           ;LCDWriteCharacter@character stored from wreg
 14039  12E7  00F9               	movwf	LCDWriteCharacter@character
 14040                           
 14041                           ;lcd.c: 142: uint16_t base;
 14042                           ;lcd.c: 143: base = character - 0x20;
 14043  12E8  0879               	movf	LCDWriteCharacter@character,w
 14044  12E9  3EE0               	addlw	224
 14045  12EA  00FA               	movwf	LCDWriteCharacter@base
 14046  12EB  30FF               	movlw	255
 14047  12EC  1803               	skipnc
 14048  12ED  3000               	movlw	0
 14049  12EE  00FB               	movwf	LCDWriteCharacter@base+1
 14050                           
 14051                           ;lcd.c: 144: base *= 3;
 14052  12EF  3003               	movlw	3
 14053  12F0  00F0               	movwf	___wmul@multiplier
 14054  12F1  3000               	movlw	0
 14055  12F2  00F1               	movwf	___wmul@multiplier+1
 14056  12F3  087B               	movf	LCDWriteCharacter@base+1,w
 14057  12F4  00F3               	movwf	___wmul@multiplicand+1
 14058  12F5  087A               	movf	LCDWriteCharacter@base,w
 14059  12F6  00F2               	movwf	___wmul@multiplicand
 14060  12F7  319E  2695  3192   	fcall	___wmul
 14061  12FA  0871               	movf	?___wmul+1,w
 14062  12FB  00FB               	movwf	LCDWriteCharacter@base+1
 14063  12FC  0870               	movf	?___wmul,w
 14064  12FD  00FA               	movwf	LCDWriteCharacter@base
 14065                           
 14066                           ;lcd.c: 145: LCDWrite(1,fonts[base]);
 14067  12FE  087B               	movf	LCDWriteCharacter@base+1,w
 14068  12FF  0085               	movwf	5
 14069  1300  087A               	movf	LCDWriteCharacter@base,w
 14070  1301  0084               	movwf	4
 14071  1302  3000               	movlw	low (_fonts| (0+32768))
 14072  1303  0784               	addwf	4,f
 14073  1304  3090               	movlw	high (_fonts| (0+32768))
 14074  1305  3D85               	addwfc	5,f
 14075  1306  0800               	movf	0,w	;code access
 14076  1307  00F6               	movwf	??_LCDWriteCharacter
 14077  1308  0876               	movf	??_LCDWriteCharacter,w
 14078  1309  00F0               	movwf	LCDWrite@data
 14079  130A  3001               	movlw	1
 14080  130B  319F  274E  3192   	fcall	_LCDWrite
 14081                           
 14082                           ;lcd.c: 146: LCDWrite(1,fonts[base + 1]);
 14083  130E  087A               	movf	LCDWriteCharacter@base,w
 14084  130F  3E01               	addlw	1
 14085  1310  00F6               	movwf	??_LCDWriteCharacter
 14086  1311  3000               	movlw	0
 14087  1312  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 14088  1313  00F7               	movwf	??_LCDWriteCharacter+1
 14089  1314  3000               	movlw	low (_fonts| (0+32768))
 14090  1315  0776               	addwf	??_LCDWriteCharacter,w
 14091  1316  0084               	movwf	4
 14092  1317  3090               	movlw	high (_fonts| (0+32768))
 14093  1318  3D77               	addwfc	??_LCDWriteCharacter+1,w
 14094  1319  0085               	movwf	5
 14095  131A  0800               	movf	0,w	;code access
 14096  131B  00F8               	movwf	??_LCDWriteCharacter+2
 14097  131C  0878               	movf	??_LCDWriteCharacter+2,w
 14098  131D  00F0               	movwf	LCDWrite@data
 14099  131E  3001               	movlw	1
 14100  131F  319F  274E  3192   	fcall	_LCDWrite
 14101                           
 14102                           ;lcd.c: 147: LCDWrite(1,fonts[base + 2]);
 14103  1322  087A               	movf	LCDWriteCharacter@base,w
 14104  1323  3E02               	addlw	2
 14105  1324  00F6               	movwf	??_LCDWriteCharacter
 14106  1325  3000               	movlw	0
 14107  1326  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 14108  1327  00F7               	movwf	??_LCDWriteCharacter+1
 14109  1328  3000               	movlw	low (_fonts| (0+32768))
 14110  1329  0776               	addwf	??_LCDWriteCharacter,w
 14111  132A  0084               	movwf	4
 14112  132B  3090               	movlw	high (_fonts| (0+32768))
 14113  132C  3D77               	addwfc	??_LCDWriteCharacter+1,w
 14114  132D  0085               	movwf	5
 14115  132E  0800               	movf	0,w	;code access
 14116  132F  00F8               	movwf	??_LCDWriteCharacter+2
 14117  1330  0878               	movf	??_LCDWriteCharacter+2,w
 14118  1331  00F0               	movwf	LCDWrite@data
 14119  1332  3001               	movlw	1
 14120  1333  319F  274E  3192   	fcall	_LCDWrite
 14121                           
 14122                           ;lcd.c: 148: LCDWrite(1, 0x00);
 14123  1336  01F0               	clrf	LCDWrite@data
 14124  1337  3001               	movlw	1
 14125  1338  319F  274E         	fcall	_LCDWrite
 14126  133A  0008               	return
 14127  133B                     __end_of_LCDWriteCharacter:	
 14128                           
 14129                           	psect	text37
 14130  1E95                     __ptext37:	
 14131 ;; *************** function ___wmul *****************
 14132 ;; Defined at:
 14133 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
 14134 ;; Parameters:    Size  Location     Type
 14135 ;;  multiplier      2    0[COMMON] unsigned int 
 14136 ;;  multiplicand    2    2[COMMON] unsigned int 
 14137 ;; Auto vars:     Size  Location     Type
 14138 ;;  product         2    4[COMMON] unsigned int 
 14139 ;; Return value:  Size  Location     Type
 14140 ;;                  2    0[COMMON] unsigned int 
 14141 ;; Registers used:
 14142 ;;		wreg, status,2, status,0
 14143 ;; Tracked objects:
 14144 ;;		On entry : 0/0
 14145 ;;		On exit  : 0/0
 14146 ;;		Unchanged: 0/0
 14147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14148 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14149 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14151 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14152 ;;Total ram usage:        6 bytes
 14153 ;; Hardware stack levels used:    1
 14154 ;; This function calls:
 14155 ;;		Nothing
 14156 ;; This function is called by:
 14157 ;;		_readIAnalog
 14158 ;;		_LCDWriteCharacter
 14159 ;;		_eval_poly
 14160 ;; This function uses a non-reentrant model
 14161 ;;
 14162                           
 14163                           
 14164                           ;psect for function ___wmul
 14165  1E95                     ___wmul:	
 14166                           
 14167                           ;incstack = 0
 14168                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 14169  1E95  01F4               	clrf	___wmul@product
 14170  1E96  01F5               	clrf	___wmul@product+1
 14171  1E97                     l2424:	
 14172  1E97  1C70               	btfss	___wmul@multiplier,0
 14173  1E98  2E9D               	goto	l624
 14174  1E99  0872               	movf	___wmul@multiplicand,w
 14175  1E9A  07F4               	addwf	___wmul@product,f
 14176  1E9B  0873               	movf	___wmul@multiplicand+1,w
 14177  1E9C  3DF5               	addwfc	___wmul@product+1,f
 14178  1E9D                     l624:	
 14179  1E9D  3001               	movlw	1
 14180  1E9E                     u2435:	
 14181  1E9E  35F2               	lslf	___wmul@multiplicand,f
 14182  1E9F  0DF3               	rlf	___wmul@multiplicand+1,f
 14183  1EA0  0B89               	decfsz	9,f
 14184  1EA1  2E9E               	goto	u2435
 14185  1EA2  3001               	movlw	1
 14186  1EA3                     u2445:	
 14187  1EA3  36F1               	lsrf	___wmul@multiplier+1,f
 14188  1EA4  0CF0               	rrf	___wmul@multiplier,f
 14189  1EA5  0B89               	decfsz	9,f
 14190  1EA6  2EA3               	goto	u2445
 14191  1EA7  0870               	movf	___wmul@multiplier,w
 14192  1EA8  0471               	iorwf	___wmul@multiplier+1,w
 14193  1EA9  1D03               	btfss	3,2
 14194  1EAA  2E97               	goto	l2424
 14195  1EAB  0875               	movf	___wmul@product+1,w
 14196  1EAC  00F1               	movwf	?___wmul+1
 14197  1EAD  0874               	movf	___wmul@product,w
 14198  1EAE  00F0               	movwf	?___wmul
 14199  1EAF  0008               	return
 14200  1EB0                     __end_of___wmul:	
 14201                           
 14202                           	psect	text38
 14203  1F4E                     __ptext38:	
 14204 ;; *************** function _LCDWrite *****************
 14205 ;; Defined at:
 14206 ;;		line 281 in file "lcd.c"
 14207 ;; Parameters:    Size  Location     Type
 14208 ;;  data_or_comm    1    wreg     unsigned char 
 14209 ;;  data            1    0[COMMON] unsigned char 
 14210 ;; Auto vars:     Size  Location     Type
 14211 ;;  data_or_comm    1    2[COMMON] unsigned char 
 14212 ;;  i               1    4[COMMON] unsigned char 
 14213 ;;  d               1    3[COMMON] unsigned char 
 14214 ;; Return value:  Size  Location     Type
 14215 ;;                  1    wreg      void 
 14216 ;; Registers used:
 14217 ;;		wreg, status,2, status,0
 14218 ;; Tracked objects:
 14219 ;;		On entry : 0/0
 14220 ;;		On exit  : 0/0
 14221 ;;		Unchanged: 0/0
 14222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14223 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14224 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14225 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14226 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14227 ;;Total ram usage:        5 bytes
 14228 ;; Hardware stack levels used:    1
 14229 ;; This function calls:
 14230 ;;		Nothing
 14231 ;; This function is called by:
 14232 ;;		_gotoXY
 14233 ;;		_LCDWriteCharacter
 14234 ;;		_LCDClear
 14235 ;;		_LCDInit
 14236 ;; This function uses a non-reentrant model
 14237 ;;
 14238                           
 14239                           
 14240                           ;psect for function _LCDWrite
 14241  1F4E                     _LCDWrite:	
 14242                           
 14243                           ;incstack = 0
 14244                           ; Regs used in _LCDWrite: [wreg+status,2+status,0]
 14245                           ;LCDWrite@data_or_command stored from wreg
 14246  1F4E  00F2               	movwf	LCDWrite@data_or_command
 14247                           
 14248                           ;lcd.c: 283: uint8_t i,d;
 14249                           ;lcd.c: 285: d=data;
 14250  1F4F  0870               	movf	LCDWrite@data,w
 14251  1F50  00F1               	movwf	??_LCDWrite
 14252  1F51  0871               	movf	??_LCDWrite,w
 14253  1F52  00F3               	movwf	LCDWrite@d
 14254                           
 14255                           ;lcd.c: 287: if(data_or_command == 0)
 14256  1F53  0872               	movf	LCDWrite@data_or_command,w
 14257  1F54  1D03               	btfss	3,2
 14258  1F55  2F59               	goto	l383
 14259                           
 14260                           ;lcd.c: 288: {
 14261                           ;lcd.c: 289: LATAbits.LATA2 = 0;
 14262  1F56  0020               	movlb	0	; select bank0
 14263  1F57  1116               	bcf	22,2	;volatile
 14264                           
 14265                           ;lcd.c: 290: }
 14266  1F58  2F5B               	goto	l384
 14267  1F59                     l383:	
 14268                           
 14269                           ;lcd.c: 291: else
 14270                           ;lcd.c: 292: {
 14271                           ;lcd.c: 293: LATAbits.LATA2 = 1;
 14272  1F59  0020               	movlb	0	; select bank0
 14273  1F5A  1516               	bsf	22,2	;volatile
 14274  1F5B                     l384:	
 14275                           
 14276                           ;lcd.c: 294: }
 14277                           ;lcd.c: 296: LATAbits.LATA1 = 0;
 14278  1F5B  1096               	bcf	22,1	;volatile
 14279                           
 14280                           ;lcd.c: 298: for(i=0;i<8;i++)
 14281  1F5C  01F4               	clrf	LCDWrite@i
 14282  1F5D  3008               	movlw	8
 14283  1F5E  0274               	subwf	LCDWrite@i,w
 14284  1F5F  1803               	btfsc	3,0
 14285  1F60  2F71               	goto	l386
 14286  1F61                     l385:	
 14287                           
 14288                           ;lcd.c: 299: {
 14289                           ;lcd.c: 300: LATAbits.LATA3 = 0;
 14290  1F61  1196               	bcf	22,3	;volatile
 14291                           
 14292                           ;lcd.c: 302: if(d&0x80)
 14293  1F62  1FF3               	btfss	LCDWrite@d,7
 14294  1F63  2F65               	goto	l387
 14295                           
 14296                           ;lcd.c: 303: {
 14297                           ;lcd.c: 304: LATAbits.LATA3 = 1;
 14298  1F64  1596               	bsf	22,3	;volatile
 14299  1F65                     l387:	
 14300                           
 14301                           ;lcd.c: 305: }
 14302                           ;lcd.c: 307: LATAbits.LATA4 = 1;
 14303  1F65  1616               	bsf	22,4	;volatile
 14304                           
 14305                           ;lcd.c: 309: d<<=1;
 14306  1F66  1003               	clrc
 14307  1F67  0DF3               	rlf	LCDWrite@d,f
 14308                           
 14309                           ;lcd.c: 311: LATAbits.LATA4=0;
 14310  1F68  1216               	bcf	22,4	;volatile
 14311  1F69  3001               	movlw	1
 14312  1F6A  00F1               	movwf	??_LCDWrite
 14313  1F6B  0871               	movf	??_LCDWrite,w
 14314  1F6C  07F4               	addwf	LCDWrite@i,f
 14315  1F6D  3008               	movlw	8
 14316  1F6E  0274               	subwf	LCDWrite@i,w
 14317  1F6F  1C03               	skipc
 14318  1F70  2F61               	goto	l385
 14319  1F71                     l386:	
 14320                           
 14321                           ;lcd.c: 312: }
 14322                           ;lcd.c: 314: LATAbits.LATA1 = 1;
 14323  1F71  1496               	bsf	22,1	;volatile
 14324  1F72  0008               	return
 14325  1F73                     __end_of_LCDWrite:	
 14326                           
 14327                           	psect	text39
 14328  0E43                     __ptext39:	
 14329 ;; *************** function _Battery_State_Machine *****************
 14330 ;; Defined at:
 14331 ;;		line 31 in file "battery_charger.c"
 14332 ;; Parameters:    Size  Location     Type
 14333 ;;  z               1    wreg     unsigned char 
 14334 ;; Auto vars:     Size  Location     Type
 14335 ;;  z               1   36[BANK0 ] unsigned char 
 14336 ;; Return value:  Size  Location     Type
 14337 ;;                  1    wreg      void 
 14338 ;; Registers used:
 14339 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14340 ;; Tracked objects:
 14341 ;;		On entry : 0/0
 14342 ;;		On exit  : 0/0
 14343 ;;		Unchanged: 0/0
 14344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14346 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14347 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14348 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14349 ;;Total ram usage:        6 bytes
 14350 ;; Hardware stack levels used:    1
 14351 ;; Hardware stack levels required when called:    2
 14352 ;; This function calls:
 14353 ;;		___awtoft
 14354 ;;		___ftmul
 14355 ;;		___fttol
 14356 ;; This function is called by:
 14357 ;;		_main
 14358 ;; This function uses a non-reentrant model
 14359 ;;
 14360                           
 14361                           
 14362                           ;psect for function _Battery_State_Machine
 14363  0E43                     _Battery_State_Machine:	
 14364                           
 14365                           ;incstack = 0
 14366                           ; Regs used in _Battery_State_Machine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14367                           ;Battery_State_Machine@z stored from wreg
 14368  0E43  0020               	movlb	0	; select bank0
 14369  0E44  00C4               	movwf	Battery_State_Machine@z
 14370                           
 14371                           ;battery_charger.c: 33: if(batteryState[z]==PRECHARGE)
 14372  0E45  0844               	movf	Battery_State_Machine@z,w
 14373  0E46  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 14374  0E47  0086               	movwf	6
 14375  0E48  0187               	clrf	7
 14376  0E49  3003               	movlw	3
 14377  0E4A  0601               	xorwf	1,w
 14378  0E4B  1D03               	btfss	3,2
 14379  0E4C  2E9A               	goto	l3180
 14380                           
 14381                           ;battery_charger.c: 34: {
 14382                           ;battery_charger.c: 35: if(voltage[z]<1075)
 14383  0E4D  3544               	lslf	Battery_State_Machine@z,w
 14384  0E4E  3EA8               	addlw	(low (_voltage| 0))& (0+255)
 14385  0E4F  0086               	movwf	6
 14386  0E50  0187               	clrf	7
 14387  0E51  3F40               	moviw [0]fsr1
 14388  0E52  00BF               	movwf	??_Battery_State_Machine
 14389  0E53  3F41               	moviw [1]fsr1
 14390  0E54  00C0               	movwf	??_Battery_State_Machine+1
 14391  0E55  0840               	movf	??_Battery_State_Machine+1,w
 14392  0E56  3A80               	xorlw	128
 14393  0E57  00C1               	movwf	??_Battery_State_Machine+2
 14394  0E58  3084               	movlw	132
 14395  0E59  0241               	subwf	??_Battery_State_Machine+2,w
 14396  0E5A  1D03               	skipz
 14397  0E5B  2E5E               	goto	u3755
 14398  0E5C  3033               	movlw	51
 14399  0E5D  023F               	subwf	??_Battery_State_Machine,w
 14400  0E5E                     u3755:	
 14401  0E5E  1803               	skipnc
 14402  0E5F  2E88               	goto	l3178
 14403                           
 14404                           ;battery_charger.c: 36: {
 14405                           ;battery_charger.c: 37: if(stateCounter[z]>0)
 14406  0E60  0020               	movlb	0	; select bank0
 14407  0E61  3544               	lslf	Battery_State_Machine@z,w
 14408  0E62  3EB8               	addlw	(low (_stateCounter| 0))& (0+255)
 14409  0E63  0086               	movwf	6
 14410  0E64  0187               	clrf	7
 14411  0E65  3F40               	moviw [0]fsr1
 14412  0E66  00BF               	movwf	??_Battery_State_Machine
 14413  0E67  3F41               	moviw [1]fsr1
 14414  0E68  00C0               	movwf	??_Battery_State_Machine+1
 14415  0E69  0840               	movf	??_Battery_State_Machine+1,w
 14416  0E6A  3A80               	xorlw	128
 14417  0E6B  00C1               	movwf	??_Battery_State_Machine+2
 14418  0E6C  3080               	movlw	128
 14419  0E6D  0241               	subwf	??_Battery_State_Machine+2,w
 14420  0E6E  1D03               	skipz
 14421  0E6F  2E72               	goto	u3765
 14422  0E70  3001               	movlw	1
 14423  0E71  023F               	subwf	??_Battery_State_Machine,w
 14424  0E72                     u3765:	
 14425  0E72  1C03               	skipc
 14426  0E73  2E80               	goto	l3176
 14427                           
 14428                           ;battery_charger.c: 38: {
 14429                           ;battery_charger.c: 39: stateCounter[z]-=1;
 14430  0E74  0020               	movlb	0	; select bank0
 14431  0E75  3544               	lslf	Battery_State_Machine@z,w
 14432  0E76  3EB8               	addlw	(low (_stateCounter| 0))& (0+255)
 14433  0E77  0086               	movwf	6
 14434  0E78  0187               	clrf	7
 14435  0E79  30FF               	movlw	255
 14436  0E7A  0781               	addwf	1,f
 14437  0E7B  3141               	addfsr 1,1
 14438  0E7C  30FF               	movlw	255
 14439  0E7D  3D81               	addwfc	1,f
 14440  0E7E  317F               	addfsr 1,-1
 14441                           
 14442                           ;battery_charger.c: 40: }
 14443  0E7F  0008               	return
 14444  0E80                     l3176:	
 14445                           
 14446                           ;battery_charger.c: 41: else
 14447                           ;battery_charger.c: 42: {
 14448                           ;battery_charger.c: 43: batteryState[z]=FAULT;
 14449  0E80  0020               	movlb	0	; select bank0
 14450  0E81  0844               	movf	Battery_State_Machine@z,w
 14451  0E82  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 14452  0E83  0086               	movwf	6
 14453  0E84  0187               	clrf	7
 14454  0E85  0181               	clrf	1
 14455  0E86  0A81               	incf	1,f
 14456                           
 14457                           ;battery_charger.c: 44: }
 14458                           ;battery_charger.c: 45: }
 14459  0E87  0008               	return
 14460  0E88                     l3178:	
 14461                           
 14462                           ;battery_charger.c: 46: else
 14463                           ;battery_charger.c: 47: {
 14464                           ;battery_charger.c: 48: batteryState[z]=CHARGE;
 14465  0E88  3004               	movlw	4
 14466  0E89  0020               	movlb	0	; select bank0
 14467  0E8A  00BF               	movwf	??_Battery_State_Machine
 14468  0E8B  0844               	movf	Battery_State_Machine@z,w
 14469  0E8C  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 14470  0E8D  0086               	movwf	6
 14471  0E8E  0187               	clrf	7
 14472  0E8F  083F               	movf	??_Battery_State_Machine,w
 14473  0E90  0081               	movwf	1
 14474                           
 14475                           ;battery_charger.c: 49: Iref[z]=30;
 14476  0E91  3544               	lslf	Battery_State_Machine@z,w
 14477  0E92  3EB0               	addlw	(low (_Iref| 0))& (0+255)
 14478  0E93  0086               	movwf	6
 14479  0E94  0187               	clrf	7
 14480  0E95  301E               	movlw	30
 14481  0E96  3FC0               	movwi [0]fsr1
 14482  0E97  3000               	movlw	0
 14483  0E98  3FC1               	movwi [1]fsr1
 14484                           
 14485                           ;battery_charger.c: 50: }
 14486                           ;battery_charger.c: 51: }
 14487  0E99  0008               	return
 14488  0E9A                     l3180:	
 14489                           
 14490                           ;battery_charger.c: 52: else if(batteryState[z]==CHARGE)
 14491  0E9A  0844               	movf	Battery_State_Machine@z,w
 14492  0E9B  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 14493  0E9C  0086               	movwf	6
 14494  0E9D  0187               	clrf	7
 14495  0E9E  3004               	movlw	4
 14496  0E9F  0601               	xorwf	1,w
 14497  0EA0  1D03               	btfss	3,2
 14498  0EA1  2F61               	goto	l3200
 14499                           
 14500                           ;battery_charger.c: 53: {
 14501                           ;battery_charger.c: 54: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 14502  0EA2  0021               	movlb	1	; select bank1
 14503  0EA3  096D               	comf	_batteryTemp^(0+128),w
 14504  0EA4  0020               	movlb	0	; select bank0
 14505  0EA5  00BF               	movwf	??_Battery_State_Machine
 14506  0EA6  0021               	movlb	1	; select bank1
 14507  0EA7  096E               	comf	(_batteryTemp+1)^(0+128),w
 14508  0EA8  0020               	movlb	0	; select bank0
 14509  0EA9  00C0               	movwf	??_Battery_State_Machine+1
 14510  0EAA  0ABF               	incf	??_Battery_State_Machine,f
 14511  0EAB  1903               	skipnz
 14512  0EAC  0AC0               	incf	??_Battery_State_Machine+1,f
 14513  0EAD  083F               	movf	??_Battery_State_Machine,w
 14514  0EAE  3EFA               	addlw	250
 14515  0EAF  00F9               	movwf	___awtoft@c
 14516  0EB0  3000               	movlw	0
 14517  0EB1  3D40               	addwfc	??_Battery_State_Machine+1,w
 14518  0EB2  00FA               	movwf	___awtoft@c+1
 14519  0EB3  319F  270C  318E   	fcall	___awtoft
 14520  0EB6  0879               	movf	?___awtoft,w
 14521  0EB7  0020               	movlb	0	; select bank0
 14522  0EB8  00A4               	movwf	___ftmul@f2
 14523  0EB9  087A               	movf	?___awtoft+1,w
 14524  0EBA  00A5               	movwf	___ftmul@f2+1
 14525  0EBB  087B               	movf	?___awtoft+2,w
 14526  0EBC  00A6               	movwf	___ftmul@f2+2
 14527  0EBD  30C3               	movlw	195
 14528  0EBE  00A1               	movwf	___ftmul@f1
 14529  0EBF  3075               	movlw	117
 14530  0EC0  00A2               	movwf	___ftmul@f1+1
 14531  0EC1  303E               	movlw	62
 14532  0EC2  00A3               	movwf	___ftmul@f1+2
 14533  0EC3  3197  274C  318E   	fcall	___ftmul
 14534  0EC6  0020               	movlb	0	; select bank0
 14535  0EC7  0821               	movf	?___ftmul,w
 14536  0EC8  00B1               	movwf	___fttol@f1
 14537  0EC9  0822               	movf	?___ftmul+1,w
 14538  0ECA  00B2               	movwf	___fttol@f1+1
 14539  0ECB  0823               	movf	?___ftmul+2,w
 14540  0ECC  00B3               	movwf	___fttol@f1+2
 14541  0ECD  3195  256C  318E   	fcall	___fttol
 14542  0ED0  0020               	movlb	0	; select bank0
 14543  0ED1  0831               	movf	?___fttol,w
 14544  0ED2  3E91               	addlw	145
 14545  0ED3  00C1               	movwf	??_Battery_State_Machine+2
 14546  0ED4  3005               	movlw	5
 14547  0ED5  3D32               	addwfc	?___fttol+1,w
 14548  0ED6  00C2               	movwf	??_Battery_State_Machine+3
 14549  0ED7  3544               	lslf	Battery_State_Machine@z,w
 14550  0ED8  3EB4               	addlw	(low (_Vref| 0))& (0+255)
 14551  0ED9  0086               	movwf	6
 14552  0EDA  0187               	clrf	7
 14553  0EDB  0841               	movf	??_Battery_State_Machine+2,w
 14554  0EDC  3FC0               	movwi [0]fsr1
 14555  0EDD  0842               	movf	??_Battery_State_Machine+3,w
 14556  0EDE  3FC1               	movwi [1]fsr1
 14557                           
 14558                           ;battery_charger.c: 55: if(!(Imode[z]))
 14559  0EDF  0844               	movf	Battery_State_Machine@z,w
 14560  0EE0  3EBC               	addlw	(low (_Imode| 0))& (0+255)
 14561  0EE1  0086               	movwf	6
 14562  0EE2  0187               	clrf	7
 14563  0EE3  0801               	movf	1,w
 14564  0EE4  1D03               	btfss	3,2
 14565  0EE5  2F48               	goto	l3196
 14566                           
 14567                           ;battery_charger.c: 56: {
 14568                           ;battery_charger.c: 57: if(current[z] < Imin[z])
 14569  0EE6  3544               	lslf	Battery_State_Machine@z,w
 14570  0EE7  3E55               	addlw	(low (_Imin| (0+256)))& (0+255)
 14571  0EE8  0086               	movwf	6
 14572  0EE9  3001               	movlw	1	; select bank2/3
 14573  0EEA  0087               	movwf	7
 14574  0EEB  3F40               	moviw [0]fsr1
 14575  0EEC  00BF               	movwf	??_Battery_State_Machine
 14576  0EED  3F41               	moviw [1]fsr1
 14577  0EEE  00C0               	movwf	??_Battery_State_Machine+1
 14578  0EEF  3544               	lslf	Battery_State_Machine@z,w
 14579  0EF0  3EA0               	addlw	(low (_current| 0))& (0+255)
 14580  0EF1  0086               	movwf	6
 14581  0EF2  0187               	clrf	7
 14582  0EF3  3F40               	moviw [0]fsr1
 14583  0EF4  00C1               	movwf	??_Battery_State_Machine+2
 14584  0EF5  3F41               	moviw [1]fsr1
 14585  0EF6  00C2               	movwf	??_Battery_State_Machine+3
 14586  0EF7  0842               	movf	??_Battery_State_Machine+3,w
 14587  0EF8  3A80               	xorlw	128
 14588  0EF9  00C3               	movwf	??_Battery_State_Machine+4
 14589  0EFA  0840               	movf	??_Battery_State_Machine+1,w
 14590  0EFB  3A80               	xorlw	128
 14591  0EFC  0243               	subwf	??_Battery_State_Machine+4,w
 14592  0EFD  1D03               	skipz
 14593  0EFE  2F01               	goto	u3795
 14594  0EFF  083F               	movf	??_Battery_State_Machine,w
 14595  0F00  0241               	subwf	??_Battery_State_Machine+2,w
 14596  0F01                     u3795:	
 14597  0F01  1803               	skipnc
 14598  0F02  2F2E               	goto	l3192
 14599                           
 14600                           ;battery_charger.c: 58: {
 14601                           ;battery_charger.c: 59: IminCount[z]-=2;
 14602  0F03  0020               	movlb	0	; select bank0
 14603  0F04  3544               	lslf	Battery_State_Machine@z,w
 14604  0F05  3E5E               	addlw	(low (_IminCount| 0))& (0+255)
 14605  0F06  0086               	movwf	6
 14606  0F07  0187               	clrf	7
 14607  0F08  3002               	movlw	2
 14608  0F09  0281               	subwf	1,f
 14609  0F0A  3141               	addfsr 1,1
 14610  0F0B  3000               	movlw	0
 14611  0F0C  3B81               	subwfb	1,f
 14612  0F0D  317F               	addfsr 1,-1
 14613                           
 14614                           ;battery_charger.c: 60: if(IminCount[z]<10)
 14615  0F0E  3544               	lslf	Battery_State_Machine@z,w
 14616  0F0F  3E5E               	addlw	(low (_IminCount| 0))& (0+255)
 14617  0F10  0086               	movwf	6
 14618  0F11  0187               	clrf	7
 14619  0F12  3F40               	moviw [0]fsr1
 14620  0F13  00BF               	movwf	??_Battery_State_Machine
 14621  0F14  3F41               	moviw [1]fsr1
 14622  0F15  00C0               	movwf	??_Battery_State_Machine+1
 14623  0F16  3000               	movlw	0
 14624  0F17  0240               	subwf	??_Battery_State_Machine+1,w
 14625  0F18  300A               	movlw	10
 14626  0F19  1903               	skipnz
 14627  0F1A  023F               	subwf	??_Battery_State_Machine,w
 14628  0F1B  1803               	skipnc
 14629  0F1C  0008               	return
 14630                           
 14631                           ;battery_charger.c: 61: {
 14632                           ;battery_charger.c: 62: batteryState[z] = FLOAT;
 14633  0F1D  3005               	movlw	5
 14634  0F1E  00BF               	movwf	??_Battery_State_Machine
 14635  0F1F  0844               	movf	Battery_State_Machine@z,w
 14636  0F20  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 14637  0F21  0086               	movwf	6
 14638  0F22  0187               	clrf	7
 14639  0F23  083F               	movf	??_Battery_State_Machine,w
 14640  0F24  0081               	movwf	1
 14641                           
 14642                           ;battery_charger.c: 63: IminCount[z]=10;
 14643  0F25  3544               	lslf	Battery_State_Machine@z,w
 14644  0F26  3E5E               	addlw	(low (_IminCount| 0))& (0+255)
 14645  0F27  0086               	movwf	6
 14646  0F28  0187               	clrf	7
 14647  0F29  300A               	movlw	10
 14648  0F2A  3FC0               	movwi [0]fsr1
 14649  0F2B  3000               	movlw	0
 14650  0F2C  3FC1               	movwi [1]fsr1
 14651                           
 14652                           ;battery_charger.c: 64: }
 14653                           ;battery_charger.c: 65: }
 14654  0F2D  0008               	return
 14655  0F2E                     l3192:	
 14656                           
 14657                           ;battery_charger.c: 66: else
 14658                           ;battery_charger.c: 67: {
 14659                           ;battery_charger.c: 68: if(IminCount[z]<600)IminCount[z]+=1;
 14660  0F2E  0020               	movlb	0	; select bank0
 14661  0F2F  3544               	lslf	Battery_State_Machine@z,w
 14662  0F30  3E5E               	addlw	(low (_IminCount| 0))& (0+255)
 14663  0F31  0086               	movwf	6
 14664  0F32  0187               	clrf	7
 14665  0F33  3F40               	moviw [0]fsr1
 14666  0F34  00BF               	movwf	??_Battery_State_Machine
 14667  0F35  3F41               	moviw [1]fsr1
 14668  0F36  00C0               	movwf	??_Battery_State_Machine+1
 14669  0F37  3002               	movlw	2
 14670  0F38  0240               	subwf	??_Battery_State_Machine+1,w
 14671  0F39  3058               	movlw	88
 14672  0F3A  1903               	skipnz
 14673  0F3B  023F               	subwf	??_Battery_State_Machine,w
 14674  0F3C  1803               	skipnc
 14675  0F3D  0008               	return
 14676  0F3E  3544               	lslf	Battery_State_Machine@z,w
 14677  0F3F  3E5E               	addlw	(low (_IminCount| 0))& (0+255)
 14678  0F40  0086               	movwf	6
 14679  0F41  0187               	clrf	7
 14680  0F42  3001               	movlw	1
 14681  0F43  0781               	addwf	1,f
 14682  0F44  3141               	addfsr 1,1
 14683  0F45  1803               	skipnc
 14684  0F46  0A81               	incf	1,f
 14685                           
 14686                           ;battery_charger.c: 69: }
 14687                           ;battery_charger.c: 70: }
 14688  0F47  0008               	return
 14689  0F48                     l3196:	
 14690                           
 14691                           ;battery_charger.c: 71: else if(IminCount[z]<600)IminCount[z]+=1;
 14692  0F48  3544               	lslf	Battery_State_Machine@z,w
 14693  0F49  3E5E               	addlw	(low (_IminCount| 0))& (0+255)
 14694  0F4A  0086               	movwf	6
 14695  0F4B  0187               	clrf	7
 14696  0F4C  3F40               	moviw [0]fsr1
 14697  0F4D  00BF               	movwf	??_Battery_State_Machine
 14698  0F4E  3F41               	moviw [1]fsr1
 14699  0F4F  00C0               	movwf	??_Battery_State_Machine+1
 14700  0F50  3002               	movlw	2
 14701  0F51  0240               	subwf	??_Battery_State_Machine+1,w
 14702  0F52  3058               	movlw	88
 14703  0F53  1903               	skipnz
 14704  0F54  023F               	subwf	??_Battery_State_Machine,w
 14705  0F55  1803               	skipnc
 14706  0F56  0008               	return
 14707  0F57  3544               	lslf	Battery_State_Machine@z,w
 14708  0F58  3E5E               	addlw	(low (_IminCount| 0))& (0+255)
 14709  0F59  0086               	movwf	6
 14710  0F5A  0187               	clrf	7
 14711  0F5B  3001               	movlw	1
 14712  0F5C  0781               	addwf	1,f
 14713  0F5D  3141               	addfsr 1,1
 14714  0F5E  1803               	skipnc
 14715  0F5F  0A81               	incf	1,f
 14716                           
 14717                           ;battery_charger.c: 72: }
 14718  0F60  0008               	return
 14719  0F61                     l3200:	
 14720                           
 14721                           ;battery_charger.c: 73: else if(batteryState[z] == FLOAT)
 14722  0F61  0844               	movf	Battery_State_Machine@z,w
 14723  0F62  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 14724  0F63  0086               	movwf	6
 14725  0F64  0187               	clrf	7
 14726  0F65  3005               	movlw	5
 14727  0F66  0601               	xorwf	1,w
 14728  0F67  1D03               	btfss	3,2
 14729  0F68  2FF0               	goto	l3222
 14730                           
 14731                           ;battery_charger.c: 74: {
 14732                           ;battery_charger.c: 75: otherState=(uint8_t)(1-z);
 14733  0F69  0344               	decf	Battery_State_Machine@z,w
 14734  0F6A  3AFF               	xorlw	255
 14735  0F6B  3E01               	addlw	1
 14736  0F6C  00BF               	movwf	??_Battery_State_Machine
 14737  0F6D  083F               	movf	??_Battery_State_Machine,w
 14738  0F6E  00ED               	movwf	_otherState
 14739                           
 14740                           ;battery_charger.c: 77: if(batteryState[otherState]==CHARGE)
 14741  0F6F  086D               	movf	_otherState,w
 14742  0F70  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 14743  0F71  0086               	movwf	6
 14744  0F72  0187               	clrf	7
 14745  0F73  3004               	movlw	4
 14746  0F74  0601               	xorwf	1,w
 14747  0F75  1D03               	btfss	3,2
 14748  0F76  2FA1               	goto	l3214
 14749                           
 14750                           ;battery_charger.c: 78: {
 14751                           ;battery_charger.c: 79: floatCount[z]+=1;
 14752  0F77  3001               	movlw	1
 14753  0F78  00BF               	movwf	??_Battery_State_Machine
 14754  0F79  0844               	movf	Battery_State_Machine@z,w
 14755  0F7A  3E66               	addlw	(low (_floatCount| 0))& (0+255)
 14756  0F7B  0086               	movwf	6
 14757  0F7C  0187               	clrf	7
 14758  0F7D  083F               	movf	??_Battery_State_Machine,w
 14759  0F7E  0781               	addwf	1,f
 14760                           
 14761                           ;battery_charger.c: 81: if(floatCount[z]>5)
 14762  0F7F  0844               	movf	Battery_State_Machine@z,w
 14763  0F80  3E66               	addlw	(low (_floatCount| 0))& (0+255)
 14764  0F81  0086               	movwf	6
 14765  0F82  0187               	clrf	7
 14766  0F83  3006               	movlw	6
 14767  0F84  0201               	subwf	1,w
 14768  0F85  1C03               	skipc
 14769  0F86  0008               	return
 14770                           
 14771                           ;battery_charger.c: 82: {
 14772                           ;battery_charger.c: 83: IminCount[z]=IminCount[otherState];
 14773  0F87  356D               	lslf	_otherState,w
 14774  0F88  3E5E               	addlw	(low (_IminCount| 0))& (0+255)
 14775  0F89  0086               	movwf	6
 14776  0F8A  0187               	clrf	7
 14777  0F8B  3544               	lslf	Battery_State_Machine@z,w
 14778  0F8C  3E5E               	addlw	(low (_IminCount| 0))& (0+255)
 14779  0F8D  0084               	movwf	4
 14780  0F8E  0185               	clrf	5
 14781  0F8F  3F40               	moviw [0]fsr1
 14782  0F90  3F80               	movwi [0]fsr0
 14783  0F91  3F41               	moviw [1]fsr1
 14784  0F92  3F81               	movwi [1]fsr0
 14785                           
 14786                           ;battery_charger.c: 84: floatCount[z]=0;
 14787  0F93  0844               	movf	Battery_State_Machine@z,w
 14788  0F94  3E66               	addlw	(low (_floatCount| 0))& (0+255)
 14789  0F95  0086               	movwf	6
 14790  0F96  0187               	clrf	7
 14791  0F97  0181               	clrf	1
 14792                           
 14793                           ;battery_charger.c: 85: batteryState[z] = CHARGE;
 14794  0F98  3004               	movlw	4
 14795  0F99  00BF               	movwf	??_Battery_State_Machine
 14796  0F9A  0844               	movf	Battery_State_Machine@z,w
 14797  0F9B  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 14798  0F9C  0086               	movwf	6
 14799  0F9D  0187               	clrf	7
 14800  0F9E  083F               	movf	??_Battery_State_Machine,w
 14801  0F9F  0081               	movwf	1
 14802                           
 14803                           ;battery_charger.c: 86: }
 14804                           ;battery_charger.c: 87: }
 14805  0FA0  0008               	return
 14806  0FA1                     l3214:	
 14807                           
 14808                           ;battery_charger.c: 88: else
 14809                           ;battery_charger.c: 89: {
 14810                           ;battery_charger.c: 90: Vref[z]=1350+(int16_t)((250-batteryTemp)*.24);
 14811  0FA1  0021               	movlb	1	; select bank1
 14812  0FA2  096D               	comf	_batteryTemp^(0+128),w
 14813  0FA3  0020               	movlb	0	; select bank0
 14814  0FA4  00BF               	movwf	??_Battery_State_Machine
 14815  0FA5  0021               	movlb	1	; select bank1
 14816  0FA6  096E               	comf	(_batteryTemp+1)^(0+128),w
 14817  0FA7  0020               	movlb	0	; select bank0
 14818  0FA8  00C0               	movwf	??_Battery_State_Machine+1
 14819  0FA9  0ABF               	incf	??_Battery_State_Machine,f
 14820  0FAA  1903               	skipnz
 14821  0FAB  0AC0               	incf	??_Battery_State_Machine+1,f
 14822  0FAC  083F               	movf	??_Battery_State_Machine,w
 14823  0FAD  3EFA               	addlw	250
 14824  0FAE  00F9               	movwf	___awtoft@c
 14825  0FAF  3000               	movlw	0
 14826  0FB0  3D40               	addwfc	??_Battery_State_Machine+1,w
 14827  0FB1  00FA               	movwf	___awtoft@c+1
 14828  0FB2  319F  270C  318E   	fcall	___awtoft
 14829  0FB5  0879               	movf	?___awtoft,w
 14830  0FB6  0020               	movlb	0	; select bank0
 14831  0FB7  00A4               	movwf	___ftmul@f2
 14832  0FB8  087A               	movf	?___awtoft+1,w
 14833  0FB9  00A5               	movwf	___ftmul@f2+1
 14834  0FBA  087B               	movf	?___awtoft+2,w
 14835  0FBB  00A6               	movwf	___ftmul@f2+2
 14836  0FBC  30C3               	movlw	195
 14837  0FBD  00A1               	movwf	___ftmul@f1
 14838  0FBE  3075               	movlw	117
 14839  0FBF  00A2               	movwf	___ftmul@f1+1
 14840  0FC0  303E               	movlw	62
 14841  0FC1  00A3               	movwf	___ftmul@f1+2
 14842  0FC2  3197  274C  318E   	fcall	___ftmul
 14843  0FC5  0020               	movlb	0	; select bank0
 14844  0FC6  0821               	movf	?___ftmul,w
 14845  0FC7  00B1               	movwf	___fttol@f1
 14846  0FC8  0822               	movf	?___ftmul+1,w
 14847  0FC9  00B2               	movwf	___fttol@f1+1
 14848  0FCA  0823               	movf	?___ftmul+2,w
 14849  0FCB  00B3               	movwf	___fttol@f1+2
 14850  0FCC  3195  256C         	fcall	___fttol
 14851  0FCE  0020               	movlb	0	; select bank0
 14852  0FCF  0831               	movf	?___fttol,w
 14853  0FD0  3E46               	addlw	70
 14854  0FD1  00C1               	movwf	??_Battery_State_Machine+2
 14855  0FD2  3005               	movlw	5
 14856  0FD3  3D32               	addwfc	?___fttol+1,w
 14857  0FD4  00C2               	movwf	??_Battery_State_Machine+3
 14858  0FD5  3544               	lslf	Battery_State_Machine@z,w
 14859  0FD6  3EB4               	addlw	(low (_Vref| 0))& (0+255)
 14860  0FD7  0086               	movwf	6
 14861  0FD8  0187               	clrf	7
 14862  0FD9  0841               	movf	??_Battery_State_Machine+2,w
 14863  0FDA  3FC0               	movwi [0]fsr1
 14864  0FDB  0842               	movf	??_Battery_State_Machine+3,w
 14865  0FDC  3FC1               	movwi [1]fsr1
 14866                           
 14867                           ;battery_charger.c: 91: Iref[z]=15;
 14868  0FDD  3544               	lslf	Battery_State_Machine@z,w
 14869  0FDE  3EB0               	addlw	(low (_Iref| 0))& (0+255)
 14870  0FDF  0086               	movwf	6
 14871  0FE0  0187               	clrf	7
 14872  0FE1  300F               	movlw	15
 14873  0FE2  3FC0               	movwi [0]fsr1
 14874  0FE3  3000               	movlw	0
 14875  0FE4  3FC1               	movwi [1]fsr1
 14876                           
 14877                           ;battery_charger.c: 92: Imode[z]=0;
 14878  0FE5  0844               	movf	Battery_State_Machine@z,w
 14879  0FE6  3EBC               	addlw	(low (_Imode| 0))& (0+255)
 14880  0FE7  0086               	movwf	6
 14881  0FE8  0187               	clrf	7
 14882  0FE9  0181               	clrf	1
 14883                           
 14884                           ;battery_charger.c: 93: floatCount[z]=0;
 14885  0FEA  0844               	movf	Battery_State_Machine@z,w
 14886  0FEB  3E66               	addlw	(low (_floatCount| 0))& (0+255)
 14887  0FEC  0086               	movwf	6
 14888  0FED  0187               	clrf	7
 14889  0FEE  0181               	clrf	1
 14890                           
 14891                           ;battery_charger.c: 94: }
 14892                           ;battery_charger.c: 95: }
 14893  0FEF  0008               	return
 14894  0FF0                     l3222:	
 14895                           
 14896                           ;battery_charger.c: 96: else
 14897                           ;battery_charger.c: 97: if(batteryState[z] == FAULT)
 14898  0FF0  0844               	movf	Battery_State_Machine@z,w
 14899  0FF1  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 14900  0FF2  0086               	movwf	6
 14901  0FF3  0187               	clrf	7
 14902  0FF4  0301               	decf	1,w
 14903  0FF5  1D03               	btfss	3,2
 14904  0FF6  0008               	return
 14905                           
 14906                           ;battery_charger.c: 98: {
 14907                           ;battery_charger.c: 99: batteryState[z]=PRECHARGE;
 14908  0FF7  3003               	movlw	3
 14909  0FF8  00BF               	movwf	??_Battery_State_Machine
 14910  0FF9  0844               	movf	Battery_State_Machine@z,w
 14911  0FFA  3EC2               	addlw	(low (_batteryState| 0))& (0+255)
 14912  0FFB  0086               	movwf	6
 14913  0FFC  0187               	clrf	7
 14914  0FFD  083F               	movf	??_Battery_State_Machine,w
 14915  0FFE  0081               	movwf	1
 14916  0FFF  0008               	return
 14917  1000                     __end_of_Battery_State_Machine:	
 14918                           
 14919                           	psect	text40
 14920  156C                     __ptext40:	
 14921 ;; *************** function ___fttol *****************
 14922 ;; Defined at:
 14923 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
 14924 ;; Parameters:    Size  Location     Type
 14925 ;;  f1              3   17[BANK0 ] float 
 14926 ;; Auto vars:     Size  Location     Type
 14927 ;;  lval            4   26[BANK0 ] unsigned long 
 14928 ;;  exp1            1   30[BANK0 ] unsigned char 
 14929 ;;  sign1           1   25[BANK0 ] unsigned char 
 14930 ;; Return value:  Size  Location     Type
 14931 ;;                  4   17[BANK0 ] long 
 14932 ;; Registers used:
 14933 ;;		wreg, status,2, status,0
 14934 ;; Tracked objects:
 14935 ;;		On entry : 0/0
 14936 ;;		On exit  : 0/0
 14937 ;;		Unchanged: 0/0
 14938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14939 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14940 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14941 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14942 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14943 ;;Total ram usage:       14 bytes
 14944 ;; Hardware stack levels used:    1
 14945 ;; This function calls:
 14946 ;;		Nothing
 14947 ;; This function is called by:
 14948 ;;		_main
 14949 ;;		_calculateCurrent0
 14950 ;;		_calculateCurrent3
 14951 ;;		_Init_Battery_State_Machine
 14952 ;;		_Battery_State_Machine
 14953 ;;		_cc_cv_mode
 14954 ;;		_tempCalc
 14955 ;; This function uses a non-reentrant model
 14956 ;;
 14957                           
 14958                           
 14959                           ;psect for function ___fttol
 14960  156C                     ___fttol:	
 14961                           
 14962                           ;incstack = 0
 14963                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14964  156C  0020               	movlb	0	; select bank0
 14965  156D  0831               	movf	___fttol@f1,w
 14966  156E  00B5               	movwf	??___fttol
 14967  156F  0832               	movf	___fttol@f1+1,w
 14968  1570  00B6               	movwf	??___fttol+1
 14969  1571  0833               	movf	___fttol@f1+2,w
 14970  1572  00B7               	movwf	??___fttol+2
 14971  1573  1003               	clrc
 14972  1574  0D36               	rlf	??___fttol+1,w
 14973  1575  0D37               	rlf	??___fttol+2,w
 14974  1576  00B8               	movwf	??___fttol+3
 14975  1577  0838               	movf	??___fttol+3,w
 14976  1578  00BE               	movwf	___fttol@exp1
 14977  1579  083E               	movf	___fttol@exp1,w
 14978  157A  1D03               	btfss	3,2
 14979  157B  2D85               	goto	l2596
 14980  157C  3000               	movlw	0
 14981  157D  00B4               	movwf	?___fttol+3
 14982  157E  3000               	movlw	0
 14983  157F  00B3               	movwf	?___fttol+2
 14984  1580  3000               	movlw	0
 14985  1581  00B2               	movwf	?___fttol+1
 14986  1582  3000               	movlw	0
 14987  1583  00B1               	movwf	?___fttol
 14988  1584  0008               	return
 14989  1585                     l2596:	
 14990  1585  0831               	movf	___fttol@f1,w
 14991  1586  00B5               	movwf	??___fttol
 14992  1587  0832               	movf	___fttol@f1+1,w
 14993  1588  00B6               	movwf	??___fttol+1
 14994  1589  0833               	movf	___fttol@f1+2,w
 14995  158A  00B7               	movwf	??___fttol+2
 14996  158B  3017               	movlw	23
 14997  158C                     u2865:	
 14998  158C  36B7               	lsrf	??___fttol+2,f
 14999  158D  0CB6               	rrf	??___fttol+1,f
 15000  158E  0CB5               	rrf	??___fttol,f
 15001  158F  0B89               	decfsz	9,f
 15002  1590  2D8C               	goto	u2865
 15003  1591  0835               	movf	??___fttol,w
 15004  1592  00B8               	movwf	??___fttol+3
 15005  1593  0838               	movf	??___fttol+3,w
 15006  1594  00B9               	movwf	___fttol@sign1
 15007  1595  17B2               	bsf	___fttol@f1+1,7
 15008  1596  30FF               	movlw	255
 15009  1597  05B1               	andwf	___fttol@f1,f
 15010  1598  30FF               	movlw	255
 15011  1599  05B2               	andwf	___fttol@f1+1,f
 15012  159A  3000               	movlw	0
 15013  159B  05B3               	andwf	___fttol@f1+2,f
 15014  159C  0831               	movf	___fttol@f1,w
 15015  159D  00BA               	movwf	___fttol@lval
 15016  159E  0832               	movf	___fttol@f1+1,w
 15017  159F  00BB               	movwf	___fttol@lval+1
 15018  15A0  0833               	movf	___fttol@f1+2,w
 15019  15A1  00BC               	movwf	___fttol@lval+2
 15020  15A2  01BD               	clrf	___fttol@lval+3
 15021  15A3  308E               	movlw	142
 15022  15A4  02BE               	subwf	___fttol@exp1,f
 15023  15A5  1FBE               	btfss	___fttol@exp1,7
 15024  15A6  2DC3               	goto	l2616
 15025  15A7  083E               	movf	___fttol@exp1,w
 15026  15A8  3A80               	xorlw	128
 15027  15A9  3E8F               	addlw	143
 15028  15AA  1803               	skipnc
 15029  15AB  2DB5               	goto	l2614
 15030  15AC  3000               	movlw	0
 15031  15AD  00B4               	movwf	?___fttol+3
 15032  15AE  3000               	movlw	0
 15033  15AF  00B3               	movwf	?___fttol+2
 15034  15B0  3000               	movlw	0
 15035  15B1  00B2               	movwf	?___fttol+1
 15036  15B2  3000               	movlw	0
 15037  15B3  00B1               	movwf	?___fttol
 15038  15B4  0008               	return
 15039  15B5                     l2614:	
 15040  15B5  3001               	movlw	1
 15041  15B6                     u2895:	
 15042  15B6  36BD               	lsrf	___fttol@lval+3,f
 15043  15B7  0CBC               	rrf	___fttol@lval+2,f
 15044  15B8  0CBB               	rrf	___fttol@lval+1,f
 15045  15B9  0CBA               	rrf	___fttol@lval,f
 15046  15BA  0B89               	decfsz	9,f
 15047  15BB  2DB6               	goto	u2895
 15048  15BC  3001               	movlw	1
 15049  15BD  00B5               	movwf	??___fttol
 15050  15BE  0835               	movf	??___fttol,w
 15051  15BF  07BE               	addwf	___fttol@exp1,f
 15052  15C0  1903               	btfsc	3,2
 15053  15C1  2DDC               	goto	l2624
 15054  15C2  2DB5               	goto	l2614
 15055  15C3                     l2616:	
 15056  15C3  3018               	movlw	24
 15057  15C4  023E               	subwf	___fttol@exp1,w
 15058  15C5  1C03               	skipc
 15059  15C6  2DD9               	goto	l876
 15060  15C7  3000               	movlw	0
 15061  15C8  00B4               	movwf	?___fttol+3
 15062  15C9  3000               	movlw	0
 15063  15CA  00B3               	movwf	?___fttol+2
 15064  15CB  3000               	movlw	0
 15065  15CC  00B2               	movwf	?___fttol+1
 15066  15CD  3000               	movlw	0
 15067  15CE  00B1               	movwf	?___fttol
 15068  15CF  0008               	return
 15069  15D0                     l2622:	
 15070  15D0  3001               	movlw	1
 15071  15D1                     u2925:	
 15072  15D1  35BA               	lslf	___fttol@lval,f
 15073  15D2  0DBB               	rlf	___fttol@lval+1,f
 15074  15D3  0DBC               	rlf	___fttol@lval+2,f
 15075  15D4  0DBD               	rlf	___fttol@lval+3,f
 15076  15D5  0B89               	decfsz	9,f
 15077  15D6  2DD1               	goto	u2925
 15078  15D7  3001               	movlw	1
 15079  15D8  02BE               	subwf	___fttol@exp1,f
 15080  15D9                     l876:	
 15081  15D9  083E               	movf	___fttol@exp1,w
 15082  15DA  1D03               	btfss	3,2
 15083  15DB  2DD0               	goto	l2622
 15084  15DC                     l2624:	
 15085  15DC  0839               	movf	___fttol@sign1,w
 15086  15DD  1903               	btfsc	3,2
 15087  15DE  2DEA               	goto	l2628
 15088  15DF  09BA               	comf	___fttol@lval,f
 15089  15E0  09BB               	comf	___fttol@lval+1,f
 15090  15E1  09BC               	comf	___fttol@lval+2,f
 15091  15E2  09BD               	comf	___fttol@lval+3,f
 15092  15E3  0ABA               	incf	___fttol@lval,f
 15093  15E4  1903               	skipnz
 15094  15E5  0ABB               	incf	___fttol@lval+1,f
 15095  15E6  1903               	skipnz
 15096  15E7  0ABC               	incf	___fttol@lval+2,f
 15097  15E8  1903               	skipnz
 15098  15E9  0ABD               	incf	___fttol@lval+3,f
 15099  15EA                     l2628:	
 15100  15EA  083D               	movf	___fttol@lval+3,w
 15101  15EB  00B4               	movwf	?___fttol+3
 15102  15EC  083C               	movf	___fttol@lval+2,w
 15103  15ED  00B3               	movwf	?___fttol+2
 15104  15EE  083B               	movf	___fttol@lval+1,w
 15105  15EF  00B2               	movwf	?___fttol+1
 15106  15F0  083A               	movf	___fttol@lval,w
 15107  15F1  00B1               	movwf	?___fttol
 15108  15F2  0008               	return
 15109  15F3                     __end_of___fttol:	
 15110                           
 15111                           	psect	text41
 15112  174C                     __ptext41:	
 15113 ;; *************** function ___ftmul *****************
 15114 ;; Defined at:
 15115 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
 15116 ;; Parameters:    Size  Location     Type
 15117 ;;  f1              3    1[BANK0 ] float 
 15118 ;;  f2              3    4[BANK0 ] float 
 15119 ;; Auto vars:     Size  Location     Type
 15120 ;;  f3_as_produc    3   12[BANK0 ] unsigned um
 15121 ;;  sign            1   16[BANK0 ] unsigned char 
 15122 ;;  cntr            1   15[BANK0 ] unsigned char 
 15123 ;;  exp             1   11[BANK0 ] unsigned char 
 15124 ;; Return value:  Size  Location     Type
 15125 ;;                  3    1[BANK0 ] float 
 15126 ;; Registers used:
 15127 ;;		wreg, status,2, status,0, pclath, cstack
 15128 ;; Tracked objects:
 15129 ;;		On entry : 0/0
 15130 ;;		On exit  : 0/0
 15131 ;;		Unchanged: 0/0
 15132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15133 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15134 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15135 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15136 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15137 ;;Total ram usage:       16 bytes
 15138 ;; Hardware stack levels used:    1
 15139 ;; Hardware stack levels required when called:    1
 15140 ;; This function calls:
 15141 ;;		___ftpack
 15142 ;; This function is called by:
 15143 ;;		_main
 15144 ;;		_Init_Battery_State_Machine
 15145 ;;		_Battery_State_Machine
 15146 ;;		_cc_cv_mode
 15147 ;;		_tempCalc
 15148 ;;		_log
 15149 ;;		_eval_poly
 15150 ;; This function uses a non-reentrant model
 15151 ;;
 15152                           
 15153                           
 15154                           ;psect for function ___ftmul
 15155  174C                     ___ftmul:	
 15156                           
 15157                           ;incstack = 0
 15158                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 15159  174C  0020               	movlb	0	; select bank0
 15160  174D  0821               	movf	___ftmul@f1,w
 15161  174E  00A7               	movwf	??___ftmul
 15162  174F  0822               	movf	___ftmul@f1+1,w
 15163  1750  00A8               	movwf	??___ftmul+1
 15164  1751  0823               	movf	___ftmul@f1+2,w
 15165  1752  00A9               	movwf	??___ftmul+2
 15166  1753  1003               	clrc
 15167  1754  0D28               	rlf	??___ftmul+1,w
 15168  1755  0D29               	rlf	??___ftmul+2,w
 15169  1756  00AA               	movwf	??___ftmul+3
 15170  1757  082A               	movf	??___ftmul+3,w
 15171  1758  00AB               	movwf	___ftmul@exp
 15172  1759  082B               	movf	___ftmul@exp,w
 15173  175A  1D03               	btfss	3,2
 15174  175B  2F63               	goto	l2512
 15175  175C  3000               	movlw	0
 15176  175D  00A1               	movwf	?___ftmul
 15177  175E  3000               	movlw	0
 15178  175F  00A2               	movwf	?___ftmul+1
 15179  1760  3000               	movlw	0
 15180  1761  00A3               	movwf	?___ftmul+2
 15181  1762  0008               	return
 15182  1763                     l2512:	
 15183  1763  0824               	movf	___ftmul@f2,w
 15184  1764  00A7               	movwf	??___ftmul
 15185  1765  0825               	movf	___ftmul@f2+1,w
 15186  1766  00A8               	movwf	??___ftmul+1
 15187  1767  0826               	movf	___ftmul@f2+2,w
 15188  1768  00A9               	movwf	??___ftmul+2
 15189  1769  1003               	clrc
 15190  176A  0D28               	rlf	??___ftmul+1,w
 15191  176B  0D29               	rlf	??___ftmul+2,w
 15192  176C  00AA               	movwf	??___ftmul+3
 15193  176D  082A               	movf	??___ftmul+3,w
 15194  176E  00B0               	movwf	___ftmul@sign
 15195  176F  0830               	movf	___ftmul@sign,w
 15196  1770  1D03               	btfss	3,2
 15197  1771  2F79               	goto	l2518
 15198  1772  3000               	movlw	0
 15199  1773  00A1               	movwf	?___ftmul
 15200  1774  3000               	movlw	0
 15201  1775  00A2               	movwf	?___ftmul+1
 15202  1776  3000               	movlw	0
 15203  1777  00A3               	movwf	?___ftmul+2
 15204  1778  0008               	return
 15205  1779                     l2518:	
 15206  1779  0830               	movf	___ftmul@sign,w
 15207  177A  3E7B               	addlw	123
 15208  177B  00A7               	movwf	??___ftmul
 15209  177C  0827               	movf	??___ftmul,w
 15210  177D  07AB               	addwf	___ftmul@exp,f
 15211  177E  0821               	movf	___ftmul@f1,w
 15212  177F  00A7               	movwf	??___ftmul
 15213  1780  0822               	movf	___ftmul@f1+1,w
 15214  1781  00A8               	movwf	??___ftmul+1
 15215  1782  0823               	movf	___ftmul@f1+2,w
 15216  1783  00A9               	movwf	??___ftmul+2
 15217  1784  3010               	movlw	16
 15218  1785                     u2715:	
 15219  1785  36A9               	lsrf	??___ftmul+2,f
 15220  1786  0CA8               	rrf	??___ftmul+1,f
 15221  1787  0CA7               	rrf	??___ftmul,f
 15222  1788  0B89               	decfsz	9,f
 15223  1789  2F85               	goto	u2715
 15224  178A  0827               	movf	??___ftmul,w
 15225  178B  00AA               	movwf	??___ftmul+3
 15226  178C  082A               	movf	??___ftmul+3,w
 15227  178D  00B0               	movwf	___ftmul@sign
 15228  178E  0824               	movf	___ftmul@f2,w
 15229  178F  00A7               	movwf	??___ftmul
 15230  1790  0825               	movf	___ftmul@f2+1,w
 15231  1791  00A8               	movwf	??___ftmul+1
 15232  1792  0826               	movf	___ftmul@f2+2,w
 15233  1793  00A9               	movwf	??___ftmul+2
 15234  1794  3010               	movlw	16
 15235  1795                     u2725:	
 15236  1795  36A9               	lsrf	??___ftmul+2,f
 15237  1796  0CA8               	rrf	??___ftmul+1,f
 15238  1797  0CA7               	rrf	??___ftmul,f
 15239  1798  0B89               	decfsz	9,f
 15240  1799  2F95               	goto	u2725
 15241  179A  0827               	movf	??___ftmul,w
 15242  179B  00AA               	movwf	??___ftmul+3
 15243  179C  082A               	movf	??___ftmul+3,w
 15244  179D  06B0               	xorwf	___ftmul@sign,f
 15245  179E  3080               	movlw	128
 15246  179F  00A7               	movwf	??___ftmul
 15247  17A0  0827               	movf	??___ftmul,w
 15248  17A1  05B0               	andwf	___ftmul@sign,f
 15249  17A2  17A2               	bsf	___ftmul@f1+1,7
 15250  17A3  17A5               	bsf	___ftmul@f2+1,7
 15251  17A4  30FF               	movlw	255
 15252  17A5  05A4               	andwf	___ftmul@f2,f
 15253  17A6  30FF               	movlw	255
 15254  17A7  05A5               	andwf	___ftmul@f2+1,f
 15255  17A8  3000               	movlw	0
 15256  17A9  05A6               	andwf	___ftmul@f2+2,f
 15257  17AA  3000               	movlw	0
 15258  17AB  00AC               	movwf	___ftmul@f3_as_product
 15259  17AC  3000               	movlw	0
 15260  17AD  00AD               	movwf	___ftmul@f3_as_product+1
 15261  17AE  3000               	movlw	0
 15262  17AF  00AE               	movwf	___ftmul@f3_as_product+2
 15263  17B0  3007               	movlw	7
 15264  17B1  00A7               	movwf	??___ftmul
 15265  17B2  0827               	movf	??___ftmul,w
 15266  17B3  00AF               	movwf	___ftmul@cntr
 15267  17B4                     l2530:	
 15268  17B4  1C21               	btfss	___ftmul@f1,0
 15269  17B5  2FBC               	goto	l2534
 15270  17B6  0824               	movf	___ftmul@f2,w
 15271  17B7  07AC               	addwf	___ftmul@f3_as_product,f
 15272  17B8  0825               	movf	___ftmul@f2+1,w
 15273  17B9  3DAD               	addwfc	___ftmul@f3_as_product+1,f
 15274  17BA  0826               	movf	___ftmul@f2+2,w
 15275  17BB  3DAE               	addwfc	___ftmul@f3_as_product+2,f
 15276  17BC                     l2534:	
 15277  17BC  3001               	movlw	1
 15278  17BD                     u2745:	
 15279  17BD  36A3               	lsrf	___ftmul@f1+2,f
 15280  17BE  0CA2               	rrf	___ftmul@f1+1,f
 15281  17BF  0CA1               	rrf	___ftmul@f1,f
 15282  17C0  0B89               	decfsz	9,f
 15283  17C1  2FBD               	goto	u2745
 15284  17C2  3001               	movlw	1
 15285  17C3                     u2755:	
 15286  17C3  35A4               	lslf	___ftmul@f2,f
 15287  17C4  0DA5               	rlf	___ftmul@f2+1,f
 15288  17C5  0DA6               	rlf	___ftmul@f2+2,f
 15289  17C6  0B89               	decfsz	9,f
 15290  17C7  2FC3               	goto	u2755
 15291  17C8  3001               	movlw	1
 15292  17C9  02AF               	subwf	___ftmul@cntr,f
 15293  17CA  1D03               	btfss	3,2
 15294  17CB  2FB4               	goto	l2530
 15295  17CC  3009               	movlw	9
 15296  17CD  00A7               	movwf	??___ftmul
 15297  17CE  0827               	movf	??___ftmul,w
 15298  17CF  00AF               	movwf	___ftmul@cntr
 15299  17D0                     l2542:	
 15300  17D0  1C21               	btfss	___ftmul@f1,0
 15301  17D1  2FD8               	goto	l2546
 15302  17D2  0824               	movf	___ftmul@f2,w
 15303  17D3  07AC               	addwf	___ftmul@f3_as_product,f
 15304  17D4  0825               	movf	___ftmul@f2+1,w
 15305  17D5  3DAD               	addwfc	___ftmul@f3_as_product+1,f
 15306  17D6  0826               	movf	___ftmul@f2+2,w
 15307  17D7  3DAE               	addwfc	___ftmul@f3_as_product+2,f
 15308  17D8                     l2546:	
 15309  17D8  3001               	movlw	1
 15310  17D9                     u2785:	
 15311  17D9  36A3               	lsrf	___ftmul@f1+2,f
 15312  17DA  0CA2               	rrf	___ftmul@f1+1,f
 15313  17DB  0CA1               	rrf	___ftmul@f1,f
 15314  17DC  0B89               	decfsz	9,f
 15315  17DD  2FD9               	goto	u2785
 15316  17DE  3001               	movlw	1
 15317  17DF                     u2795:	
 15318  17DF  36AE               	lsrf	___ftmul@f3_as_product+2,f
 15319  17E0  0CAD               	rrf	___ftmul@f3_as_product+1,f
 15320  17E1  0CAC               	rrf	___ftmul@f3_as_product,f
 15321  17E2  0B89               	decfsz	9,f
 15322  17E3  2FDF               	goto	u2795
 15323  17E4  3001               	movlw	1
 15324  17E5  02AF               	subwf	___ftmul@cntr,f
 15325  17E6  1D03               	btfss	3,2
 15326  17E7  2FD0               	goto	l2542
 15327  17E8  082C               	movf	___ftmul@f3_as_product,w
 15328  17E9  00F0               	movwf	___ftpack@arg
 15329  17EA  082D               	movf	___ftmul@f3_as_product+1,w
 15330  17EB  00F1               	movwf	___ftpack@arg+1
 15331  17EC  082E               	movf	___ftmul@f3_as_product+2,w
 15332  17ED  00F2               	movwf	___ftpack@arg+2
 15333  17EE  082B               	movf	___ftmul@exp,w
 15334  17EF  00A7               	movwf	??___ftmul
 15335  17F0  0827               	movf	??___ftmul,w
 15336  17F1  00F3               	movwf	___ftpack@exp
 15337  17F2  0830               	movf	___ftmul@sign,w
 15338  17F3  00A8               	movwf	??___ftmul+1
 15339  17F4  0828               	movf	??___ftmul+1,w
 15340  17F5  00F4               	movwf	___ftpack@sign
 15341  17F6  3193  239B         	fcall	___ftpack
 15342  17F8  0870               	movf	?___ftpack,w
 15343  17F9  0020               	movlb	0	; select bank0
 15344  17FA  00A1               	movwf	?___ftmul
 15345  17FB  0871               	movf	?___ftpack+1,w
 15346  17FC  00A2               	movwf	?___ftmul+1
 15347  17FD  0872               	movf	?___ftpack+2,w
 15348  17FE  00A3               	movwf	?___ftmul+2
 15349  17FF  0008               	return
 15350  1800                     __end_of___ftmul:	
 15351                           
 15352                           	psect	text42
 15353  1F0C                     __ptext42:	
 15354 ;; *************** function ___awtoft *****************
 15355 ;; Defined at:
 15356 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awtoft.c"
 15357 ;; Parameters:    Size  Location     Type
 15358 ;;  c               2    9[COMMON] int 
 15359 ;; Auto vars:     Size  Location     Type
 15360 ;;  sign            1    0[BANK0 ] unsigned char 
 15361 ;; Return value:  Size  Location     Type
 15362 ;;                  3    9[COMMON] float 
 15363 ;; Registers used:
 15364 ;;		wreg, status,2, status,0, pclath, cstack
 15365 ;; Tracked objects:
 15366 ;;		On entry : 0/0
 15367 ;;		On exit  : 0/0
 15368 ;;		Unchanged: 0/0
 15369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15370 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15371 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15372 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15373 ;;      Totals:         5       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15374 ;;Total ram usage:        6 bytes
 15375 ;; Hardware stack levels used:    1
 15376 ;; Hardware stack levels required when called:    1
 15377 ;; This function calls:
 15378 ;;		___ftpack
 15379 ;; This function is called by:
 15380 ;;		_main
 15381 ;;		_calculateCurrent0
 15382 ;;		_calculateCurrent3
 15383 ;;		_Init_Battery_State_Machine
 15384 ;;		_Battery_State_Machine
 15385 ;;		_cc_cv_mode
 15386 ;;		_tempCalc
 15387 ;;		_log
 15388 ;; This function uses a non-reentrant model
 15389 ;;
 15390                           
 15391                           
 15392                           ;psect for function ___awtoft
 15393  1F0C                     ___awtoft:	
 15394                           
 15395                           ;incstack = 0
 15396                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15397  1F0C  0020               	movlb	0	; select bank0
 15398  1F0D  01A0               	clrf	___awtoft@sign
 15399  1F0E  1FFA               	btfss	___awtoft@c+1,7
 15400  1F0F  2F17               	goto	l2566
 15401  1F10  09F9               	comf	___awtoft@c,f
 15402  1F11  09FA               	comf	___awtoft@c+1,f
 15403  1F12  0AF9               	incf	___awtoft@c,f
 15404  1F13  1903               	skipnz
 15405  1F14  0AFA               	incf	___awtoft@c+1,f
 15406  1F15  01A0               	clrf	___awtoft@sign
 15407  1F16  0AA0               	incf	___awtoft@sign,f
 15408  1F17                     l2566:	
 15409  1F17  0879               	movf	___awtoft@c,w
 15410  1F18  00F0               	movwf	___ftpack@arg
 15411  1F19  087A               	movf	___awtoft@c+1,w
 15412  1F1A  00F1               	movwf	___ftpack@arg+1
 15413  1F1B  01F2               	clrf	___ftpack@arg+2
 15414  1F1C  308E               	movlw	142
 15415  1F1D  00FC               	movwf	??___awtoft
 15416  1F1E  087C               	movf	??___awtoft,w
 15417  1F1F  00F3               	movwf	___ftpack@exp
 15418  1F20  0820               	movf	___awtoft@sign,w
 15419  1F21  00FD               	movwf	??___awtoft+1
 15420  1F22  087D               	movf	??___awtoft+1,w
 15421  1F23  00F4               	movwf	___ftpack@sign
 15422  1F24  3193  239B         	fcall	___ftpack
 15423  1F26  0870               	movf	?___ftpack,w
 15424  1F27  00F9               	movwf	?___awtoft
 15425  1F28  0871               	movf	?___ftpack+1,w
 15426  1F29  00FA               	movwf	?___awtoft+1
 15427  1F2A  0872               	movf	?___ftpack+2,w
 15428  1F2B  00FB               	movwf	?___awtoft+2
 15429  1F2C  0008               	return
 15430  1F2D                     __end_of___awtoft:	
 15431                           
 15432                           	psect	text43
 15433  139B                     __ptext43:	
 15434 ;; *************** function ___ftpack *****************
 15435 ;; Defined at:
 15436 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 15437 ;; Parameters:    Size  Location     Type
 15438 ;;  arg             3    0[COMMON] unsigned um
 15439 ;;  exp             1    3[COMMON] unsigned char 
 15440 ;;  sign            1    4[COMMON] unsigned char 
 15441 ;; Auto vars:     Size  Location     Type
 15442 ;;		None
 15443 ;; Return value:  Size  Location     Type
 15444 ;;                  3    0[COMMON] float 
 15445 ;; Registers used:
 15446 ;;		wreg, status,2, status,0
 15447 ;; Tracked objects:
 15448 ;;		On entry : 0/0
 15449 ;;		On exit  : 0/0
 15450 ;;		Unchanged: 0/0
 15451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15452 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15454 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15455 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15456 ;;Total ram usage:        8 bytes
 15457 ;; Hardware stack levels used:    1
 15458 ;; This function calls:
 15459 ;;		Nothing
 15460 ;; This function is called by:
 15461 ;;		___awtoft
 15462 ;;		___ftadd
 15463 ;;		___ftdiv
 15464 ;;		___ftmul
 15465 ;; This function uses a non-reentrant model
 15466 ;;
 15467                           
 15468                           
 15469                           ;psect for function ___ftpack
 15470  139B                     ___ftpack:	
 15471                           
 15472                           ;incstack = 0
 15473                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15474  139B  0873               	movf	___ftpack@exp,w
 15475  139C  1903               	btfsc	3,2
 15476  139D  2BA3               	goto	l2372
 15477  139E  0872               	movf	___ftpack@arg+2,w
 15478  139F  0471               	iorwf	___ftpack@arg+1,w
 15479  13A0  0470               	iorwf	___ftpack@arg,w
 15480  13A1  1D03               	skipz
 15481  13A2  2BB4               	goto	l2378
 15482  13A3                     l2372:	
 15483  13A3  3000               	movlw	0
 15484  13A4  00F0               	movwf	?___ftpack
 15485  13A5  3000               	movlw	0
 15486  13A6  00F1               	movwf	?___ftpack+1
 15487  13A7  3000               	movlw	0
 15488  13A8  00F2               	movwf	?___ftpack+2
 15489  13A9  0008               	return
 15490  13AA                     l2376:	
 15491  13AA  3001               	movlw	1
 15492  13AB  00F5               	movwf	??___ftpack
 15493  13AC  0875               	movf	??___ftpack,w
 15494  13AD  07F3               	addwf	___ftpack@exp,f
 15495  13AE  3001               	movlw	1
 15496  13AF                     u2285:	
 15497  13AF  36F2               	lsrf	___ftpack@arg+2,f
 15498  13B0  0CF1               	rrf	___ftpack@arg+1,f
 15499  13B1  0CF0               	rrf	___ftpack@arg,f
 15500  13B2  0B89               	decfsz	9,f
 15501  13B3  2BAF               	goto	u2285
 15502  13B4                     l2378:	
 15503  13B4  30FE               	movlw	254
 15504  13B5  0572               	andwf	___ftpack@arg+2,w
 15505  13B6  1903               	btfsc	3,2
 15506  13B7  2BCD               	goto	l785
 15507  13B8  2BAA               	goto	l2376
 15508  13B9                     l2380:	
 15509  13B9  3001               	movlw	1
 15510  13BA  00F5               	movwf	??___ftpack
 15511  13BB  0875               	movf	??___ftpack,w
 15512  13BC  07F3               	addwf	___ftpack@exp,f
 15513  13BD  3001               	movlw	1
 15514  13BE  07F0               	addwf	___ftpack@arg,f
 15515  13BF  3000               	movlw	0
 15516  13C0  1803               	skipnc
 15517  13C1  3001               	movlw	1
 15518  13C2  07F1               	addwf	___ftpack@arg+1,f
 15519  13C3  3000               	movlw	0
 15520  13C4  1803               	skipnc
 15521  13C5  3001               	movlw	1
 15522  13C6  07F2               	addwf	___ftpack@arg+2,f
 15523  13C7  3001               	movlw	1
 15524  13C8                     u2305:	
 15525  13C8  36F2               	lsrf	___ftpack@arg+2,f
 15526  13C9  0CF1               	rrf	___ftpack@arg+1,f
 15527  13CA  0CF0               	rrf	___ftpack@arg,f
 15528  13CB  0B89               	decfsz	9,f
 15529  13CC  2BC8               	goto	u2305
 15530  13CD                     l785:	
 15531  13CD  30FF               	movlw	255
 15532  13CE  0572               	andwf	___ftpack@arg+2,w
 15533  13CF  1903               	btfsc	3,2
 15534  13D0  2BDA               	goto	l2388
 15535  13D1  2BB9               	goto	l2380
 15536  13D2                     l2386:	
 15537  13D2  3001               	movlw	1
 15538  13D3  02F3               	subwf	___ftpack@exp,f
 15539  13D4  3001               	movlw	1
 15540  13D5                     u2325:	
 15541  13D5  35F0               	lslf	___ftpack@arg,f
 15542  13D6  0DF1               	rlf	___ftpack@arg+1,f
 15543  13D7  0DF2               	rlf	___ftpack@arg+2,f
 15544  13D8  0B89               	decfsz	9,f
 15545  13D9  2BD5               	goto	u2325
 15546  13DA                     l2388:	
 15547  13DA  1BF1               	btfsc	___ftpack@arg+1,7
 15548  13DB  2BE0               	goto	l792
 15549  13DC  3002               	movlw	2
 15550  13DD  0273               	subwf	___ftpack@exp,w
 15551  13DE  1803               	skipnc
 15552  13DF  2BD2               	goto	l2386
 15553  13E0                     l792:	
 15554  13E0  1873               	btfsc	___ftpack@exp,0
 15555  13E1  2BE8               	goto	l793
 15556  13E2  30FF               	movlw	255
 15557  13E3  05F0               	andwf	___ftpack@arg,f
 15558  13E4  307F               	movlw	127
 15559  13E5  05F1               	andwf	___ftpack@arg+1,f
 15560  13E6  30FF               	movlw	255
 15561  13E7  05F2               	andwf	___ftpack@arg+2,f
 15562  13E8                     l793:	
 15563  13E8  1003               	clrc
 15564  13E9  0CF3               	rrf	___ftpack@exp,f
 15565  13EA  0873               	movf	___ftpack@exp,w
 15566  13EB  00F5               	movwf	??___ftpack
 15567  13EC  01F6               	clrf	??___ftpack+1
 15568  13ED  01F7               	clrf	??___ftpack+2
 15569  13EE  3010               	movlw	16
 15570  13EF                     u2365:	
 15571  13EF  35F5               	lslf	??___ftpack,f
 15572  13F0  0DF6               	rlf	??___ftpack+1,f
 15573  13F1  0DF7               	rlf	??___ftpack+2,f
 15574  13F2  0B89               	decfsz	9,f
 15575  13F3  2BEF               	goto	u2365
 15576  13F4  0875               	movf	??___ftpack,w
 15577  13F5  04F0               	iorwf	___ftpack@arg,f
 15578  13F6  0876               	movf	??___ftpack+1,w
 15579  13F7  04F1               	iorwf	___ftpack@arg+1,f
 15580  13F8  0877               	movf	??___ftpack+2,w
 15581  13F9  04F2               	iorwf	___ftpack@arg+2,f
 15582  13FA  0874               	movf	___ftpack@sign,w
 15583  13FB  1903               	btfsc	3,2
 15584  13FC  0008               	return
 15585  13FD  17F2               	bsf	___ftpack@arg+2,7
 15586  13FE  0008               	return
 15587  13FF                     __end_of___ftpack:	
 15588  007E                     btemp	set	126	;btemp
 15589  007E                     wtemp	set	126
 15590  007E                     wtemp0	set	126
 15591  0080                     wtemp1	set	128
 15592  0082                     wtemp2	set	130
 15593  0084                     wtemp3	set	132
 15594  0086                     wtemp4	set	134
 15595  0088                     wtemp5	set	136
 15596  007F                     wtemp6	set	127
 15597  007E                     ttemp	set	126
 15598  007E                     ttemp0	set	126
 15599  0081                     ttemp1	set	129
 15600  0084                     ttemp2	set	132
 15601  0087                     ttemp3	set	135
 15602  007F                     ttemp4	set	127
 15603  007E                     ltemp	set	126
 15604  007E                     ltemp0	set	126
 15605  0082                     ltemp1	set	130
 15606  0086                     ltemp2	set	134
 15607  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    330
    Data        18
    BSS         154
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     62      79
    BANK1            80     37      79
    BANK2            80      0      73
    BANK3            80      0      40
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            48      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 


Critical Paths under _main in COMMON

    _main->___awtoft
    _tempCalc->___awtoft
    _log->___awtoft
    ___ftge->___awtoft
    ___ftadd->___awtoft
    _readVAnalog->___aldiv
    _readIAnalog->___aldiv
    _readButton->_ADCRead
    _cc_cv_mode->___awtoft
    _calculateCurrent3->___awtoft
    _calculateCurrent0->___awtoft
    ___ftdiv->___awtoft
    _LCDInit->_LCDWrite
    _LCDClear->_gotoXY
    _gotoXY->_LCDWrite
    _Init_Battery_State_Machine->___awtoft
    _LCDWriteInt->___awtoft
    _LCDWriteCharacter->___wmul
    _Battery_State_Machine->___awtoft
    ___fttol->___awtoft
    ___ftmul->___awtoft
    ___awtoft->___awdiv

Critical Paths under _main in BANK0

    _main->_tempCalc
    _tempCalc->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftge->___ftmul
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftadd->___ftmul
    _readVAnalog->___aldiv
    _readIAnalog->___aldiv
    _cc_cv_mode->___fttol
    _calculateCurrent3->___fttol
    _calculateCurrent0->___fttol
    ___ftdiv->___awtoft
    _SYSTEM_Initialize->_Init_Battery_State_Machine
    _Init_Battery_State_Machine->___fttol
    _LCDWriteInt->___fttol
    _Battery_State_Machine->___fttol
    ___fttol->___ftdiv
    ___fttol->___ftmul
    ___ftmul->___awtoft

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                51    51      0  113659
                                             57 BANK0      5     5      0
                                              0 BANK1     37    37      0
                            _ADCRead
              _Battery_State_Machine
                           _LCDClear
                            _LCDInit
                  _LCDWriteCharacter
                        _LCDWriteInt
                 _PWM1_LoadDutyValue
                 _PWM6_LoadDutyValue
                 _PWM7_LoadDutyValue
                  _SYSTEM_Initialize
                            ___awdiv
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                  _calculateCurrent0
                  _calculateCurrent2
                  _calculateCurrent3
                         _cc_cv_mode
                             _gotoXY
                         _readButton
                        _readIAnalog
                        _readVAnalog
                           _tempCalc
 ---------------------------------------------------------------------------------
 (1) _tempCalc                                            11     9      2   37303
                                             46 BANK0     11     9      2
                            _ADCRead (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                            ___fttol
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   19403
                                             40 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     330
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           10     3      7    8325
                                             30 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     428
                                             17 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3356
                                             30 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3183
                                             17 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (1) _readVAnalog                                         21    19      2    1046
                                              9 COMMON     4     4      0
                                              6 BANK0     17    15      2
                            _ADCRead
                            ___aldiv
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     170
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _readIAnalog                                         24    22      2    1766
                                              9 COMMON     4     4      0
                                              6 BANK0     20    18      2
                            _ADCRead
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     512
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _readButton                                           3     3      0      22
                                              4 COMMON     3     3      0
                            _ADCRead
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     1      3      22
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _cc_cv_mode                                           8     8      0    8432
                                             31 BANK0      8     8      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent3                                    3     3      0    7164
                                             31 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent2                                    3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent0                                    3     3      0    7164
                                             31 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3153
                                              1 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    3     3      0   11852
                                             36 BANK0      3     3      0
                     _ADC_Initialize
         _Init_Battery_State_Machine
                           _LCDClear
                            _LCDInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PWM_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              1     1      0     803
                                              5 COMMON     1     1      0
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             3     3      0    2968
                                              8 COMMON     3     3      0
                           _LCDWrite
                             _gotoXY
 ---------------------------------------------------------------------------------
 (1) _gotoXY                                               3     2      1    2119
                                              5 COMMON     3     2      1
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _Init_Battery_State_Machine                           5     5      0    8058
                                             31 BANK0      5     5      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM7_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM6_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM1_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         16    11      5    8277
                                             31 BANK0     16    11      5
                  _LCDWriteCharacter
                            ___awdiv
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _LCDWriteCharacter                                    6     6      0    1805
                                              6 COMMON     6     6      0
                           _LCDWrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     890
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _LCDWrite                                             5     4      1     803
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _Battery_State_Machine                                6     6      0    8652
                                             31 BANK0      6     6      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4    1047
                                             17 BANK0     14    10      4
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    3915
                                              1 BANK0     16    10      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2964
                                              9 COMMON     5     2      3
                                              0 BANK0      1     1      0
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1707
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _Battery_State_Machine
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _LCDClear
     _LCDWrite
     _gotoXY
       _LCDWrite
   _LCDInit
     _LCDWrite
   _LCDWriteCharacter
     _LCDWrite
     ___wmul
   _LCDWriteInt
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
     ___awdiv
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     ___lwmod (ARG)
   _PWM1_LoadDutyValue
   _PWM6_LoadDutyValue
   _PWM7_LoadDutyValue
   _SYSTEM_Initialize
     _ADC_Initialize
     _Init_Battery_State_Machine
       ___awtoft
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
     _LCDClear
       _LCDWrite
       _gotoXY
         _LCDWrite
     _LCDInit
       _LCDWrite
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM_Initialize
     _TMR2_Initialize
     _TMR4_Initialize
   ___awdiv
   ___awtoft
     ___awdiv (ARG)
     ___ftpack (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftge
     ___awdiv (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
   ___ftmul
     ___awdiv (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     _frexp (ARG)
   ___fttol
     ___awdiv (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
   _calculateCurrent0
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent2
   _calculateCurrent3
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _cc_cv_mode
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _gotoXY
     _LCDWrite
   _readButton
     _ADCRead
   _readIAnalog
     _ADCRead
     ___aldiv
     ___wmul
   _readVAnalog
     _ADCRead
     ___aldiv
     ___bmul
   _tempCalc
     _ADCRead (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___fttol (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     _log (ARG)
       ___awtoft
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftge
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
       ___ftmul
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul
       _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3E      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     25      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      49       9       91.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      28      11       50.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               30      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     11D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     11D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Sep 13 13:46:41 2018

                       _stateCounter 00B8                                    _j 006B  
                                  _x 006E               LCDWriteInt@fieldLength 0041  
                     ___bmul@product 0072              __size_of_PWM_Initialize 001F  
                        __CFG_CP$OFF 0000                                   l74 00CF  
                       ___awdiv@sign 0076                  ___wmul@multiplicand 0072  
        __size_of_PWM6_LoadDutyValue 0016                         ___ftadd@exp1 003D  
                       ___ftadd@exp2 003C                          __CFG_LVP$ON 0000  
                       ___ftadd@sign 003B                                  l121 0465  
                                l211 1E45                                  l214 1E4C  
                                l293 0D2C                                  l294 0D3D  
                      LCDClear@index 0079                                  l383 1F59  
                                l384 1F5B                                  l624 1E9D  
                                l385 1F61                                  l386 1F71  
                                l298 0D80                                  l387 1F65  
                                l816 0A4D                                  l679 1478  
                                l792 13E0                                  l793 13E8  
                                l785 13CD                                  l876 15D9  
                                _GIE 005F                                  _RB2 006A  
                       __CFG_CPD$OFF 0000                         _VsampleIndex 0064  
                                _log 169C                      __end_of_ADCRead 1E53  
                    _TMR2_Initialize 114A                         __CFG_BORV$LO 0000  
                                wreg 0009                      __end_of_LCDInit 2000  
                       ?_LCDWriteInt 003F                         __CFG_ZCD$OFF 0000  
                       ___ftdiv@cntr 002B                         ___ftdiv@sign 0030  
                               l3004 1EB8                                 l3022 1FB7  
                               l3110 150D                                 l3200 0F61  
                               l3016 1F9F                                 l3120 1539  
                               l3018 1FAB                                 l3026 1FC0  
                               l3130 1547                                 l3122 153B  
                               l3116 1527                                 l3214 0FA1  
                               l3222 0FF0                                 l3142 1569  
                               l3054 0CD4                                 l2502 0A8C  
                               l2512 1763                                 l2424 1E97  
                               l3136 1550                                 l3144 156A  
                               l2530 17B4                                 l3250 0863  
                               l3090 1F43                                 l3074 0B96  
                               l2442 09D6                                 l2380 13B9  
                               l2372 13A3                                 l3180 0E9A  
                               l3260 0879                                 l3084 1225  
                               l2452 09EC                                 l3420 028A  
                               l2542 17D0                                 l2534 17BC  
                               l2518 1779                                 l2622 15D0  
                               l2614 15B5                                 l3254 0867  
                               l3238 082F                                 l2470 0A19  
                               l2446 09DD                                 l3502 0471  
                               l3414 026D                                 l2376 13AA  
                               l2624 15DC                                 l2616 15C3  
                               l3192 0F2E                                 l3176 0E80  
                               l3272 08B2                                 l3256 086B  
                               l3248 0836                                 l3096 126A  
                               l2472 0A23                                 l2464 0A06  
                               l2640 116A                                 l3504 0474  
                               l3352 008C                                 l2386 13D2  
                               l2378 13B4                                 l2546 17D8  
                               l3178 0E88                                 l3266 087D  
                               l3258 0873                                 l3290 0D58  
                               l2482 0A3F                                 l2474 0A28  
                               l3450 02F0                                 l3426 02A4  
                               l3346 0086                                 l3338 0072  
                               l2388 13DA                                 l2628 15EA  
                               l3196 0F48                                 l3268 08A4  
                               l2492 0A71                                 l2484 0A49  
                               l2476 0A2C                                 l3524 04B7  
                               l3508 0488                                 l3444 02D6  
                               l3372 00D7                                 l3364 00B0  
                               l2566 1F17                                 l3286 0D4B  
                               l2910 14E0                                 l2902 14C7  
                               l2574 11AA                                 l3470 033D  
                               l3438 02B9                                 l3390 01AE  
                               l3358 00AB                                 l2488 0A5F  
                               l3480 03B4                                 l3464 0326  
                               l2922 12A0                                 l2674 1F94  
                               l2906 14D2                                 l2578 11C0  
                               l2658 1394                                 l2850 16CE  
                               l3490 043D                                 l3474 0344  
                               l3394 01D9                                 l3386 0184  
                               l2596 1585                                 l2940 12BF  
                               l2668 1F80                                 l2844 16BB  
                               l2950 12DA                                 l2862 1E1C  
                               l3662 07AD                                 l3398 01E3  
                               l2928 12AB                                 l3496 045D  
                               l3488 0439                                 l2954 12E2  
                               l2946 12D1                                 l2938 12B3  
                               l2970 1620                                 l2866 1E22  
                               l3658 07A4                                 l2964 160A  
                               l2892 1499                                 l2884 1489  
                               l2894 14A7                                 l2992 167A  
                               l2984 1661                                 ?_log 0048  
                               u3010 003B                                 _LATA 0016  
                               _LATB 0017                                 _LATC 0018  
                               u2305 13C8                                 u3105 149C  
                               u2325 13D5                                 u3205 12B6  
                               u3125 14A8                                 u3135 14BC  
                               u3225 12C0                                 u3305 1642  
                               u4025 0D9A                                 u3145 14C8  
                               _T2PR 028D                                 u2435 1E9E  
                               u3235 12CA                                 u3315 1662  
                               u2365 13EF                                 u2285 13AF  
                               u2445 1EA3                                 u3245 12D2  
                               u3405 1FB8                                 u3325 1671  
                               u3335 167B                                 u4055 0DF3  
                               u2615 0A2D                                 u4215 027B  
                               u4135 01A1                                 u3425 0BD4  
                               u3505 0ACE                                 u4145 01CC  
                               _T4PR 0293                                 u2715 1785  
                               u3435 0C2A                                 u3515 0B04  
                               u2555 0A07                                 u4315 02E5  
                               u4235 0299                                 u2725 1795  
                               u3605 1F3D                                 u3445 0C64  
                               u3525 0B18                                 u2645 0A40  
                               u4405 041D                                 u3375 1FA2  
                               u3295 1632                                 u3615 1264  
                               u3455 0CAF                                 u3535 0B32  
                               u4415 0432                                 u4175 025B  
                               u2745 17BD                                 u3625 1E78  
                               u3545 0B46                                 u2585 0A1A  
                               u4425 044F                                 u4345 031F  
                               u4265 02B6                                 u2755 17C3  
                               u3395 1FB1                                 u3635 1E8E  
                               u3555 0B71                                 u2925 15D1  
                               u3645 14FB                                 u3485 0CDF  
                               u4365 0336                                 u4517 007A  
                               u3735 1E62                                 u4527 155B  
                               u3655 1507                                 u3495 0ABA  
                               u4295 02C7                                 u2785 17D9  
                               u2865 158C                                 u4537 11F3  
                               u3665 1517                                 u3585 0BA1  
                               u2795 17DF                                 u3755 0E5E  
                               u4547 1204                                 u3595 121F  
                               u3675 1523                                 u3765 0E72  
                               u3685 1531                                 u3870 0819  
                               u2895 15B6                                 u3935 0892  
                               u2975 1F7E                                 u2985 1F92  
                               u3795 0F01                                 u3965 0D18  
                tempCalc@analogValue 004E                                 _WPUA 0F39  
                               _WPUB 0F44                                 _WPUC 0F4F  
                               _WPUE 0F65                                 _Imin 0155  
                               _Iref 00B0                                 _Iout 00BE  
                       __CFG_WRT$OFF 0000                        __CFG_FCMEN$ON 0000  
                               _Vref 00B4                                 _main 003D  
                       ___ftpack@arg 0070                         ___ftpack@exp 0073  
                               fsr0h 0005                                 fsr1h 0007  
                               fsr0l 0004                                 indf0 0000  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E                                 log@x 0048  
                       ?_readIAnalog 0026                        __CFG_BOREN$ON 0000  
                               ltemp 007E                                 start 0002  
                               ttemp 007E                                 wtemp 007E  
                      __CFG_CSWEN$ON 0000                    ___bmul@multiplier 0073  
                      __CFG_MCLRE$ON 0000                         ___ftmul@cntr 002F  
                       ___ftmul@sign 0030                         ?_readVAnalog 0026  
                   __end_of_LCDClear 1F99                         ___fttol@exp1 003E  
                              ??_log 004B                         ___fttol@lval 003A  
                       main@fastLoop 00CB  __size_of_Init_Battery_State_Machine 0068  
     __size_of_OSCILLATOR_Initialize 0009                     __end_of_LCDWrite 1F73  
      __end_of_OSCILLATOR_Initialize 1DF2                      __end_of___aldiv 14E9  
                              _ADACQ 009D                                _ADCAP 009B  
                              _ADACT 0099                                ?_main 0070  
                              _ADCLK 0098                                _ADPCH 009E  
                              _ADREF 009A                      __end_of___awdiv 12E7  
                              _ADPRE 009C                      __end_of___ftadd 0AA4  
                      __CFG_WDTE$OFF 0000                                _ADRPT 010D  
                    __end_of___ftdiv 169C                      __end_of___ftmul 1800  
                    ___awdiv@divisor 0070                      __end_of___ftsub 1ECE  
                    __end_of___fttol 15F3                                _T2CON 028E  
                              _LATA5 00B5                                _T4CON 0294  
                              _T2HLT 028F                                _T4HLT 0295  
                              _T2TMR 028C                                _T2RST 0291  
                    __end_of___lwmod 1FC5                                _T4TMR 0292  
                              _T4RST 0297                      ___awdiv@counter 0075  
                              _OSCEN 0891                                _TRISA 0011  
                              _TRISB 0012                                _TRISC 0013  
                    _TMR4_Initialize 0800                                _Imode 00BC  
             ?_Battery_State_Machine 0070                                _cc_cv 00C4  
                      ___awtoft@sign 0020                                _frexp 1158  
                              _fonts 1000                                _errno 00C6  
                      ___ftpack@sign 0074                                main@j 00EC  
                              ltemp0 007E                                ltemp1 0082  
                              ltemp2 0086                                ltemp3 0080  
                       main@slowLoop 00D9                                ttemp0 007E  
                              ttemp1 0081                                ttemp2 0084  
                              ttemp3 0087                                ttemp4 007F  
                              status 0003                                wtemp0 007E  
                              wtemp1 0080                                wtemp2 0082  
                              wtemp3 0084                                wtemp4 0086  
                              wtemp5 0088                                wtemp6 007F  
                    __initialization 07B0                          log@exponent 004C  
                       __end_of_main 07B0              __end_of_TMR2_Initialize 1158  
                          ??_ADCRead 0073                               ??_main 0059  
                      ___fttol@sign1 0039                            ??_LCDInit 0075  
             Battery_State_Machine@z 0044              LCDWrite@data_or_command 0072  
                             _ADCON0 0093                               _ADCON1 0094  
                             _ADCON2 0095                               _ADCON3 0096  
                             ?_frexp 0070                               _ADLTHH 010F  
                             _ADLTHL 010E                               _ADRESH 008D  
                             _ADRESL 008C                               _CCPR1H 030D  
                             _CCPR1L 030C                               _ADSTAT 0097  
                             _ADUTHH 0111                     ___awdiv@dividend 0072  
                             _ADUTHL 0110                     __end_of___awtoft 1F2D  
                             _ANSELA 0F38                               _ANSELB 0F43  
                             _ANSELC 0F4E                     __end_of___ftpack 13FF  
                             _RB0PPS 0F18                               _RA6PPS 0F16  
                             _RA7PPS 0F17                       __CFG_WDTCCS$SC 0000  
                             _FVRCON 090C                               _OSCFRQ 0893  
                     __CFG_PWRTE$OFF 0000                         _CCPTMRS0bits 021E  
                       _CCPTMRS1bits 021F                               ___bmul 1E1A  
                             ___ftge 1193                            ??___aldiv 0078  
                             ___wmul 1E95                            ??___awdiv 0074  
                          ??___ftadd 0037                       __CFG_STVREN$ON 0000  
                     _PWM_Initialize 1EED                            ??___ftdiv 0027  
                          ??___ftmul 0027                            ??___ftsub 007E  
                          ??___fttol 0035                            ??___lwmod 0074  
                             _gotoXY 1E2B                               _button 006A  
            __end_of_TMR4_Initialize 080E                     ___awdiv@quotient 0077  
          readVAnalog@analog_channel 0079                ___ftmul@f3_as_product 002C  
                   __end_of_tempCalc 09AE                         LCDWrite@data 0070  
                       LCDWriteInt@i 004E                         LCDWriteInt@j 004D  
                          ?_LCDClear 0070                    _SYSTEM_Initialize 11CF  
               __size_of_LCDWriteInt 00B9                     __end_oflog@coeff 114A  
            __end_of__initialization 07FD                           ___ftadd@f1 0031  
                         ___ftadd@f2 0034                           ___ftge@ff1 0031  
                         ___ftge@ff2 0034                            ?_LCDWrite 0070  
                 ?_SYSTEM_Initialize 0070                         eval_poly@res 0045  
                         ___ftdiv@f1 0024                           ___ftdiv@f2 0021  
                         ___ftdiv@f3 002C                           ___awtoft@c 0079  
                ___bmul@multiplicand 0070                           ___ftmul@f1 0021  
                         ___ftmul@f2 0024               __end_of_PWM_Initialize 1F0C  
               __size_of_readIAnalog 013E                           ___ftsub@f1 0041  
                         ___ftsub@f2 003E                           ___fttol@f1 0031  
                     __pcstackCOMMON 0070                         __pidataBANK1 0004  
                       __pidataBANK2 1E0A                  ??_SYSTEM_Initialize 0044  
                      __end_of_frexp 1193                        __end_of_fonts 112F  
                          LCDWrite@d 0073                            LCDWrite@i 0074  
               __size_of_readVAnalog 011A                   _PWM1_LoadDutyValue 1E53  
                   ?_TMR2_Initialize 0070                           _cc_cv_mode 0CFC  
        __size_of_PWM7_LoadDutyValue 0016                       main@efficiency 00C8  
                ?_PWM1_LoadDutyValue 0070                    LCDWriteInt@F13692 0150  
                  _calculateCurrent0 120C                    _calculateCurrent2 1F2D  
                  _calculateCurrent3 1251                              ??_frexp 0074  
          __end_of_SYSTEM_Initialize 120C                           __pbssBANK0 005E  
                         __pbssBANK1 00A0                           __pbssBANK2 0120  
                         __pbssBANK3 01A0                   ?_calculateCurrent0 0070  
                 ?_calculateCurrent2 0070                   ?_calculateCurrent3 0070  
                       _batteryState 00C2                   __size_of_eval_poly 0060  
                         ??_LCDClear 0078                       main@faultCount 00CC  
                         ??_LCDWrite 0071                 ??_PWM1_LoadDutyValue 0072  
                ??_calculateCurrent0 003F                  ??_calculateCurrent2 0070  
                ??_calculateCurrent3 003F                      ?_PWM_Initialize 0070  
                         __pmaintext 003D                              ?___bmul 0070  
                            ?___ftge 0031                              ?___wmul 0070  
                    __CFG_PPS1WAY$ON 0000           __end_of_PWM6_LoadDutyValue 1E7F  
                            ?_gotoXY 0075                              _ADCRead 1E3E  
                   ?_TMR4_Initialize 0070                            ?___awtoft 0079  
                          ?___ftpack 0070                              _ADSTPTH 0113  
                            _ADSTPTL 0112             __CFG_SCANE$not_available 0000  
                __CFG_RSTOSC$HFINT32 0000              __size_of_ADC_Initialize 001F  
            ??_Battery_State_Machine 003F                       main@largerIOut 00DE  
                            _LCDInit 1FC5            __end_of_calculateCurrent0 1251  
          __end_of_calculateCurrent2 1F4E            __end_of_calculateCurrent3 1296  
                            _OSCCON1 088D                              _OSCCON3 088F  
                            _OSCTUNE 0892                              _PWM6DCH 038D  
                            _PWM6DCL 038C                              _PWM7DCH 0391  
                            _PWM7DCL 0390                              _PWM6CON 038E  
                            _PWM7CON 0392                              _PPSLOCK 0E8F  
                         _floatCount 0066                       main@menuButton 00E0  
                     main@dutyCycle1 00E1                       main@dutyCycle6 00E8  
                     main@dutyCycle7 00EA                    main@tempFanOutput 00E3  
                         _lastButton 006C                            ?_tempCalc 004E  
                            _Itotals 0120                              ___aldiv 1467  
                    __size_of___bmul 0011                      __size_of___ftge 003C  
                            ___awdiv 1296                              ___ftadd 09AE  
                         _readButton 14E9                              ___ftdiv 15F3  
                    __size_of___wmul 001B                              ___ftmul 174C  
                            ___ftsub 1EB0                              ___fttol 156C  
                 main@displayRefresh 00D8                              ___lwmod 1F99  
                            _Vtotals 0130                      __size_of_gotoXY 0013  
                         ??___awtoft 007C                           ??___ftpack 0075  
                  __end_of_eval_poly 139B                              __ptext1 08C7  
                            __ptext2 169C                              __ptext3 1158  
                            __ptext4 133B                              __ptext5 1193  
                            __ptext6 1EB0                              __ptext7 09AE  
                            __ptext8 0AA4                              __ptext9 1E1A  
                        ?_cc_cv_mode 0070                _OSCILLATOR_Initialize 1DE9  
                          _T2CONbits 028E                              _current 00A0  
                       __size_of_log 00B0                       ADCRead@channel 0073  
                   ___aldiv@dividend 0074                            _T4CONbits 0294  
           ??_PIN_MANAGER_Initialize 0070           __size_of_SYSTEM_Initialize 003D  
                            clrloop0 1DF3                              _voltage 00A8  
       ??_Init_Battery_State_Machine 003F                 end_of_initialization 07FD  
              LCDWriteCharacter@base 007A                              gotoXY@x 0077  
                            gotoXY@y 0075                              init_ram 1DFE  
                            initloop 1DFF                           ??_tempCalc 007E  
                   ___aldiv@quotient 0022                         __pstringtext 1000  
                         _otherState 006D                    _LCDWriteCharacter 12E7  
              __CFG_WDTCPS$WDTCPS_31 0000                   ?_LCDWriteCharacter 0070  
                 readVAnalog@channel 0026           __size_of_calculateCurrent0 0045  
         __size_of_calculateCurrent2 0021           __size_of_calculateCurrent3 0045  
                          _TRISAbits 0011                  ??_LCDWriteCharacter 0076  
                   __CFG_FEXTOSC$OFF 0000         PWM1_LoadDutyValue@dutyCycle1 0070  
                        _CCP1CONbits 030E                          ___ftdiv@exp 002F  
                __size_of_cc_cv_mode 0147                    __size_of_LCDClear 0026  
         LCDWriteCharacter@character 0079                    __size_of_LCDWrite 0025  
                        ___ftmul@exp 002B            __end_of_LCDWriteCharacter 133B  
                        ?_readButton 0070                            _Ichannels 0159  
          readIAnalog@analog_channel 0079                       __end_of___bmul 1E2B  
                     __end_of___ftge 11CF                            _VHoldMode 00C0  
                     __end_of___wmul 1EB0                       _ADC_Initialize 1ECE  
                     __end_of_gotoXY 1E3E               ?_OSCILLATOR_Initialize 0070  
                          _IminCount 005E                  start_initialization 07B0  
                         eval_poly@d 0041                           eval_poly@n 0043  
                         eval_poly@x 003E                    main@faultNotReset 00CE  
    __size_of_PIN_MANAGER_Initialize 0037                          __end_of_log 174C  
                      ??_LCDWriteInt 0044                           frexp@value 0070  
                       _IsampleIndex 0062                     ??_PWM_Initialize 0070  
                      ??_readIAnalog 0028                            _Vchannels 0161  
                   __CFG_LPBOREN$OFF 0000                        ??_readVAnalog 0028  
                           ??___bmul 0071                             ??___ftge 0037  
                  tempCalc@steinhart 0056                             ??___wmul 0074  
             __end_of_ADC_Initialize 1EED                        _tempCalc$1300 0053  
                        __pdataBANK1 00ED                          __pdataBANK2 0159  
         __end_of_PWM7_LoadDutyValue 1E95                             ??_gotoXY 0076  
                           ?_ADCRead 0070         PWM7_LoadDutyValue@dutyCycle7 0070  
                  __size_of___awtoft 0021                             ?_LCDInit 0070  
                  __size_of___ftpack 0064                          __pbssBIGRAM 2260  
                   readVAnalog@value 007B       __size_of_Battery_State_Machine 01BD  
      __end_of_Battery_State_Machine 1000                            ___latbits 0002  
                      __pcstackBANK0 0020                        __pcstackBANK1 00C8  
                 _PWM6_LoadDutyValue 1E69             __size_of_TMR2_Initialize 000E  
 __end_of_Init_Battery_State_Machine 1467           _Init_Battery_State_Machine 13FF  
                __size_of_readButton 0083                  ?_PWM6_LoadDutyValue 0070  
                __end_of_LCDWriteInt 08C7                          _batteryTemp 00ED  
        __size_of_PWM1_LoadDutyValue 0016                            _main$1299 00E5  
             _PIN_MANAGER_Initialize 0006           __size_of_LCDWriteCharacter 0054  
                           ?___aldiv 0070                  __end_of_readIAnalog 0CFC  
                  __size_of_tempCalc 00E7                             ?___awdiv 0070  
                           ?___ftadd 0031                             ?___ftdiv 0021  
                           ?___ftmul 0021                             ?___ftsub 003E  
                           ?___fttol 0031                     LCDWriteInt@value 003F  
                           ?___lwmod 0070                      ?_ADC_Initialize 0070  
               ??_PWM6_LoadDutyValue 0072                         ??_cc_cv_mode 003F  
                __end_of_readVAnalog 0BBE                            _eval_poly 133B  
           __size_of_TMR4_Initialize 000E                       __size_of_frexp 003B  
                           _T2CLKCON 0290                             _T4CLKCON 0296  
                        cc_cv_mode@z 0046                             _LCDClear 1F73  
                    ___aldiv@divisor 0070                      ___aldiv@counter 0020  
                     ___wmul@product 0074                             _LATAbits 0016  
                           _LCDWrite 1F4E                            clear_ram0 1DF2  
                           _PIE0bits 0716                   __end_of_cc_cv_mode 0E43  
                           _PIR4bits 0710                     readIAnalog@value 007B  
                          main@MPPT0 00DA                            main@MPPT1 00DC  
                   __size_of_ADCRead 0015                           _ADCON0bits 0093  
                  ___wmul@multiplier 0070                           ?_eval_poly 003E  
                   __size_of_LCDInit 003B                             _Ianalogs 0140  
                        _LCDWriteInt 080E          Init_Battery_State_Machine@z 0043  
                  ??_TMR2_Initialize 0070                             _Isamples 2260  
                        _readIAnalog 0BBE                            frexp@eptr 0073  
                           _Vanalogs 0148                          _readVAnalog 0AA4  
                       ??_readButton 0074              ??_OSCILLATOR_Initialize 0070  
               LCDWriteInt@numPlaces 0042                     __size_of___aldiv 0082  
                   __size_of___awdiv 0051                     __size_of___ftadd 00F6  
                   __size_of___ftdiv 00A9                     __size_of___ftmul 00B4  
                   __size_of___ftsub 001E                     __size_of___fttol 0087  
                           _Vsamples 01A0                     __size_of___lwmod 002C  
                        _readButtons 0068                             ___awtoft 1F0C  
                           ___ftpack 139B                             __ptext10 0BBE  
                           __ptext11 1467                             __ptext20 0800  
                           __ptext12 14E9                             __ptext21 114A  
                           __ptext13 1E3E                             __ptext30 1E7F  
                           __ptext22 1EED                             __ptext14 0CFC  
                           __ptext31 1E69                             __ptext23 0006  
                           __ptext15 1251                             __ptext40 156C  
                           __ptext32 1E53                             __ptext24 1DE9  
                           __ptext16 1F2D                             __ptext41 174C  
                           __ptext33 080E                             __ptext25 1FC5  
                           __ptext17 120C                             __ptext42 1F0C  
                           __ptext34 1F99                             __ptext26 1F73  
                           __ptext18 15F3                             __ptext43 139B  
                           __ptext35 1296                             __ptext27 1E2B  
                           __ptext19 11CF                             __ptext36 12E7  
                           __ptext28 13FF                             __ptext37 1E95  
                           __ptext29 1ECE                             __ptext38 1F4E  
                           __ptext39 0E43                      LCDWriteInt@sign 0043  
                          tempCalc@R 0050                   __end_of_readButton 156C  
                  ??_TMR4_Initialize 0070                        __size_of_main 0773  
               __CFG_WDTCWS$WDTCWS_7 0000                             _tempCalc 08C7  
                    main@tempVoltage 00D0          PIN_MANAGER_Initialize@state 0070  
                           log@coeff 112F                          ??_eval_poly 007E  
                 _PWM7_LoadDutyValue 1E7F          ?_Init_Battery_State_Machine 0070  
                   ___lwmod@dividend 0072                       LCDWriteInt@str 0048  
            ?_PIN_MANAGER_Initialize 0070                  ?_PWM7_LoadDutyValue 0070  
                  __CFG_CLKOUTEN$OFF 0000                          _PPSLOCKbits 0E8F  
                   ??_ADC_Initialize 0070         PWM6_LoadDutyValue@dutyCycle6 0070  
               ??_PWM7_LoadDutyValue 0072                      ___lwmod@divisor 0070  
                    ___lwmod@counter 0075                         ___aldiv@sign 0021  
                 readIAnalog@channel 0026                _Battery_State_Machine 0E43  
     __end_of_PIN_MANAGER_Initialize 003D           __end_of_PWM1_LoadDutyValue 1E69  
