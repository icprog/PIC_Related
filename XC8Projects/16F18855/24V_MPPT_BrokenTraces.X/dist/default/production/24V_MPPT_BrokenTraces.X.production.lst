

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Sep 12 23:08:17 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	clrtext,global,class=CODE,delta=2
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2,group=2
    68                           	dabs	1,0x620,48
    69                           	dabs	1,0x5A0,80
    70                           	dabs	1,0x520,80
    71                           	dabs	1,0x4A0,80
    72                           	dabs	1,0x420,80
    73                           	dabs	1,0x3D0,32
    74                           	dabs	1,0x2260,0,_Isamples
    75                           	dabs	1,0x7E,2
    76  0000                     
    77                           ; Version 1.45
    78                           ; Generated 16/11/2017 GMT
    79                           ; 
    80                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    81                           ; All rights reserved.
    82                           ; 
    83                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    84                           ; 
    85                           ; Redistribution and use in source and binary forms, with or without modification, are
    86                           ; permitted provided that the following conditions are met:
    87                           ; 
    88                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    89                           ;        conditions and the following disclaimer.
    90                           ; 
    91                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    92                           ;        of conditions and the following disclaimer in the documentation and/or other
    93                           ;        materials provided with the distribution.
    94                           ; 
    95                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    96                           ;        software without specific prior written permission.
    97                           ; 
    98                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    99                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   100                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   101                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   102                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   103                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   104                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   105                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   106                           ; 
   107                           ; 
   108                           ; Code-generator required, PIC16F18855 Definitions
   109                           ; 
   110                           ; SFR Addresses
   111  0000                     	;# 
   112  0001                     	;# 
   113  0002                     	;# 
   114  0003                     	;# 
   115  0004                     	;# 
   116  0005                     	;# 
   117  0006                     	;# 
   118  0007                     	;# 
   119  0008                     	;# 
   120  0009                     	;# 
   121  000A                     	;# 
   122  000B                     	;# 
   123  000C                     	;# 
   124  000D                     	;# 
   125  000E                     	;# 
   126  0010                     	;# 
   127  0011                     	;# 
   128  0012                     	;# 
   129  0013                     	;# 
   130  0016                     	;# 
   131  0017                     	;# 
   132  0018                     	;# 
   133  001C                     	;# 
   134  001C                     	;# 
   135  001D                     	;# 
   136  001D                     	;# 
   137  001E                     	;# 
   138  001F                     	;# 
   139  008C                     	;# 
   140  008C                     	;# 
   141  008D                     	;# 
   142  008E                     	;# 
   143  008E                     	;# 
   144  008F                     	;# 
   145  0090                     	;# 
   146  0090                     	;# 
   147  0091                     	;# 
   148  0093                     	;# 
   149  0094                     	;# 
   150  0095                     	;# 
   151  0096                     	;# 
   152  0097                     	;# 
   153  0098                     	;# 
   154  0099                     	;# 
   155  009A                     	;# 
   156  009B                     	;# 
   157  009C                     	;# 
   158  009D                     	;# 
   159  009E                     	;# 
   160  010C                     	;# 
   161  010D                     	;# 
   162  010E                     	;# 
   163  010E                     	;# 
   164  010F                     	;# 
   165  0110                     	;# 
   166  0110                     	;# 
   167  0111                     	;# 
   168  0112                     	;# 
   169  0112                     	;# 
   170  0113                     	;# 
   171  0114                     	;# 
   172  0114                     	;# 
   173  0115                     	;# 
   174  0116                     	;# 
   175  0116                     	;# 
   176  0117                     	;# 
   177  0119                     	;# 
   178  0119                     	;# 
   179  0119                     	;# 
   180  011A                     	;# 
   181  011A                     	;# 
   182  011A                     	;# 
   183  011B                     	;# 
   184  011B                     	;# 
   185  011B                     	;# 
   186  011B                     	;# 
   187  011B                     	;# 
   188  011C                     	;# 
   189  011C                     	;# 
   190  011C                     	;# 
   191  011D                     	;# 
   192  011D                     	;# 
   193  011D                     	;# 
   194  011E                     	;# 
   195  011E                     	;# 
   196  011E                     	;# 
   197  011F                     	;# 
   198  011F                     	;# 
   199  011F                     	;# 
   200  011F                     	;# 
   201  011F                     	;# 
   202  018C                     	;# 
   203  018D                     	;# 
   204  018E                     	;# 
   205  018F                     	;# 
   206  0190                     	;# 
   207  0191                     	;# 
   208  0192                     	;# 
   209  0196                     	;# 
   210  0197                     	;# 
   211  0198                     	;# 
   212  0199                     	;# 
   213  019A                     	;# 
   214  019B                     	;# 
   215  019C                     	;# 
   216  020C                     	;# 
   217  020C                     	;# 
   218  020D                     	;# 
   219  020E                     	;# 
   220  020F                     	;# 
   221  020F                     	;# 
   222  0210                     	;# 
   223  0210                     	;# 
   224  0211                     	;# 
   225  0211                     	;# 
   226  0212                     	;# 
   227  0212                     	;# 
   228  0213                     	;# 
   229  0214                     	;# 
   230  0215                     	;# 
   231  0215                     	;# 
   232  0216                     	;# 
   233  0216                     	;# 
   234  0217                     	;# 
   235  0217                     	;# 
   236  0218                     	;# 
   237  0218                     	;# 
   238  0219                     	;# 
   239  021A                     	;# 
   240  021B                     	;# 
   241  021B                     	;# 
   242  021C                     	;# 
   243  021C                     	;# 
   244  021D                     	;# 
   245  021D                     	;# 
   246  021E                     	;# 
   247  021F                     	;# 
   248  028C                     	;# 
   249  028C                     	;# 
   250  028D                     	;# 
   251  028D                     	;# 
   252  028E                     	;# 
   253  028F                     	;# 
   254  0290                     	;# 
   255  0290                     	;# 
   256  0291                     	;# 
   257  0292                     	;# 
   258  0292                     	;# 
   259  0293                     	;# 
   260  0293                     	;# 
   261  0294                     	;# 
   262  0295                     	;# 
   263  0296                     	;# 
   264  0296                     	;# 
   265  0297                     	;# 
   266  0298                     	;# 
   267  0298                     	;# 
   268  0299                     	;# 
   269  0299                     	;# 
   270  029A                     	;# 
   271  029B                     	;# 
   272  029C                     	;# 
   273  029C                     	;# 
   274  029D                     	;# 
   275  030C                     	;# 
   276  030C                     	;# 
   277  030D                     	;# 
   278  030E                     	;# 
   279  030F                     	;# 
   280  0310                     	;# 
   281  0310                     	;# 
   282  0311                     	;# 
   283  0312                     	;# 
   284  0313                     	;# 
   285  0314                     	;# 
   286  0314                     	;# 
   287  0315                     	;# 
   288  0316                     	;# 
   289  0317                     	;# 
   290  0318                     	;# 
   291  0318                     	;# 
   292  0319                     	;# 
   293  031A                     	;# 
   294  031B                     	;# 
   295  031C                     	;# 
   296  031C                     	;# 
   297  031D                     	;# 
   298  031E                     	;# 
   299  031F                     	;# 
   300  038C                     	;# 
   301  038D                     	;# 
   302  038E                     	;# 
   303  0390                     	;# 
   304  0391                     	;# 
   305  0392                     	;# 
   306  040C                     	;# 
   307  040D                     	;# 
   308  040E                     	;# 
   309  040F                     	;# 
   310  0410                     	;# 
   311  0411                     	;# 
   312  0416                     	;# 
   313  0416                     	;# 
   314  0417                     	;# 
   315  0418                     	;# 
   316  0418                     	;# 
   317  0419                     	;# 
   318  041A                     	;# 
   319  041A                     	;# 
   320  041B                     	;# 
   321  041C                     	;# 
   322  041C                     	;# 
   323  041D                     	;# 
   324  041E                     	;# 
   325  041F                     	;# 
   326  048C                     	;# 
   327  048C                     	;# 
   328  048D                     	;# 
   329  048E                     	;# 
   330  048F                     	;# 
   331  048F                     	;# 
   332  0490                     	;# 
   333  0491                     	;# 
   334  0492                     	;# 
   335  0492                     	;# 
   336  0493                     	;# 
   337  0494                     	;# 
   338  0495                     	;# 
   339  0495                     	;# 
   340  0496                     	;# 
   341  0497                     	;# 
   342  0498                     	;# 
   343  0499                     	;# 
   344  049A                     	;# 
   345  049B                     	;# 
   346  049C                     	;# 
   347  049D                     	;# 
   348  050C                     	;# 
   349  050C                     	;# 
   350  050D                     	;# 
   351  050E                     	;# 
   352  050F                     	;# 
   353  050F                     	;# 
   354  0510                     	;# 
   355  0511                     	;# 
   356  0512                     	;# 
   357  0512                     	;# 
   358  0513                     	;# 
   359  0514                     	;# 
   360  0515                     	;# 
   361  0515                     	;# 
   362  0516                     	;# 
   363  0517                     	;# 
   364  0518                     	;# 
   365  0519                     	;# 
   366  051A                     	;# 
   367  051B                     	;# 
   368  051C                     	;# 
   369  051D                     	;# 
   370  058C                     	;# 
   371  058C                     	;# 
   372  058D                     	;# 
   373  058E                     	;# 
   374  058F                     	;# 
   375  058F                     	;# 
   376  0590                     	;# 
   377  0591                     	;# 
   378  0592                     	;# 
   379  0593                     	;# 
   380  060C                     	;# 
   381  060D                     	;# 
   382  060E                     	;# 
   383  060F                     	;# 
   384  0610                     	;# 
   385  0611                     	;# 
   386  0612                     	;# 
   387  0613                     	;# 
   388  0614                     	;# 
   389  0616                     	;# 
   390  0617                     	;# 
   391  0618                     	;# 
   392  0619                     	;# 
   393  061A                     	;# 
   394  061B                     	;# 
   395  061C                     	;# 
   396  061D                     	;# 
   397  061E                     	;# 
   398  068C                     	;# 
   399  068D                     	;# 
   400  068E                     	;# 
   401  068F                     	;# 
   402  0690                     	;# 
   403  0691                     	;# 
   404  0692                     	;# 
   405  0693                     	;# 
   406  0694                     	;# 
   407  070C                     	;# 
   408  070D                     	;# 
   409  070E                     	;# 
   410  070F                     	;# 
   411  0710                     	;# 
   412  0711                     	;# 
   413  0712                     	;# 
   414  0713                     	;# 
   415  0714                     	;# 
   416  0716                     	;# 
   417  0717                     	;# 
   418  0718                     	;# 
   419  0719                     	;# 
   420  071A                     	;# 
   421  071B                     	;# 
   422  071C                     	;# 
   423  071D                     	;# 
   424  071E                     	;# 
   425  0796                     	;# 
   426  0797                     	;# 
   427  0798                     	;# 
   428  0799                     	;# 
   429  079A                     	;# 
   430  079B                     	;# 
   431  080C                     	;# 
   432  080D                     	;# 
   433  080E                     	;# 
   434  080F                     	;# 
   435  0810                     	;# 
   436  0811                     	;# 
   437  0812                     	;# 
   438  0813                     	;# 
   439  0814                     	;# 
   440  081A                     	;# 
   441  081B                     	;# 
   442  081C                     	;# 
   443  081D                     	;# 
   444  081E                     	;# 
   445  081F                     	;# 
   446  088C                     	;# 
   447  088D                     	;# 
   448  088E                     	;# 
   449  088F                     	;# 
   450  0890                     	;# 
   451  0891                     	;# 
   452  0892                     	;# 
   453  0893                     	;# 
   454  0895                     	;# 
   455  0896                     	;# 
   456  0897                     	;# 
   457  0898                     	;# 
   458  0899                     	;# 
   459  089A                     	;# 
   460  089B                     	;# 
   461  090C                     	;# 
   462  090E                     	;# 
   463  090F                     	;# 
   464  091F                     	;# 
   465  091F                     	;# 
   466  098F                     	;# 
   467  098F                     	;# 
   468  0990                     	;# 
   469  0991                     	;# 
   470  0992                     	;# 
   471  0993                     	;# 
   472  0994                     	;# 
   473  0995                     	;# 
   474  0996                     	;# 
   475  0997                     	;# 
   476  0E0F                     	;# 
   477  0E10                     	;# 
   478  0E11                     	;# 
   479  0E12                     	;# 
   480  0E13                     	;# 
   481  0E14                     	;# 
   482  0E15                     	;# 
   483  0E16                     	;# 
   484  0E17                     	;# 
   485  0E18                     	;# 
   486  0E19                     	;# 
   487  0E1A                     	;# 
   488  0E1B                     	;# 
   489  0E1C                     	;# 
   490  0E1D                     	;# 
   491  0E1E                     	;# 
   492  0E1F                     	;# 
   493  0E20                     	;# 
   494  0E21                     	;# 
   495  0E22                     	;# 
   496  0E23                     	;# 
   497  0E24                     	;# 
   498  0E25                     	;# 
   499  0E26                     	;# 
   500  0E27                     	;# 
   501  0E28                     	;# 
   502  0E29                     	;# 
   503  0E2A                     	;# 
   504  0E2B                     	;# 
   505  0E2C                     	;# 
   506  0E2D                     	;# 
   507  0E2E                     	;# 
   508  0E2F                     	;# 
   509  0E30                     	;# 
   510  0E31                     	;# 
   511  0E32                     	;# 
   512  0E33                     	;# 
   513  0E34                     	;# 
   514  0E35                     	;# 
   515  0E36                     	;# 
   516  0E37                     	;# 
   517  0E8F                     	;# 
   518  0E90                     	;# 
   519  0E91                     	;# 
   520  0E92                     	;# 
   521  0E93                     	;# 
   522  0E94                     	;# 
   523  0E95                     	;# 
   524  0E96                     	;# 
   525  0E97                     	;# 
   526  0E9C                     	;# 
   527  0E9D                     	;# 
   528  0E9E                     	;# 
   529  0EA1                     	;# 
   530  0EA2                     	;# 
   531  0EA3                     	;# 
   532  0EA4                     	;# 
   533  0EA5                     	;# 
   534  0EA9                     	;# 
   535  0EAA                     	;# 
   536  0EAB                     	;# 
   537  0EAC                     	;# 
   538  0EB1                     	;# 
   539  0EB2                     	;# 
   540  0EB3                     	;# 
   541  0EB8                     	;# 
   542  0EB9                     	;# 
   543  0EBA                     	;# 
   544  0EBB                     	;# 
   545  0EBC                     	;# 
   546  0EBD                     	;# 
   547  0EBE                     	;# 
   548  0EC3                     	;# 
   549  0EC5                     	;# 
   550  0EC6                     	;# 
   551  0EC7                     	;# 
   552  0EC8                     	;# 
   553  0EC9                     	;# 
   554  0ECA                     	;# 
   555  0ECB                     	;# 
   556  0ECC                     	;# 
   557  0F10                     	;# 
   558  0F11                     	;# 
   559  0F12                     	;# 
   560  0F13                     	;# 
   561  0F14                     	;# 
   562  0F15                     	;# 
   563  0F16                     	;# 
   564  0F17                     	;# 
   565  0F18                     	;# 
   566  0F19                     	;# 
   567  0F1A                     	;# 
   568  0F1B                     	;# 
   569  0F1C                     	;# 
   570  0F1D                     	;# 
   571  0F1E                     	;# 
   572  0F1F                     	;# 
   573  0F20                     	;# 
   574  0F21                     	;# 
   575  0F22                     	;# 
   576  0F23                     	;# 
   577  0F24                     	;# 
   578  0F25                     	;# 
   579  0F26                     	;# 
   580  0F27                     	;# 
   581  0F38                     	;# 
   582  0F39                     	;# 
   583  0F3A                     	;# 
   584  0F3B                     	;# 
   585  0F3C                     	;# 
   586  0F3D                     	;# 
   587  0F3E                     	;# 
   588  0F3F                     	;# 
   589  0F40                     	;# 
   590  0F41                     	;# 
   591  0F43                     	;# 
   592  0F44                     	;# 
   593  0F45                     	;# 
   594  0F46                     	;# 
   595  0F47                     	;# 
   596  0F48                     	;# 
   597  0F49                     	;# 
   598  0F4A                     	;# 
   599  0F4B                     	;# 
   600  0F4C                     	;# 
   601  0F4E                     	;# 
   602  0F4F                     	;# 
   603  0F50                     	;# 
   604  0F51                     	;# 
   605  0F52                     	;# 
   606  0F53                     	;# 
   607  0F54                     	;# 
   608  0F55                     	;# 
   609  0F56                     	;# 
   610  0F57                     	;# 
   611  0F65                     	;# 
   612  0F68                     	;# 
   613  0F69                     	;# 
   614  0F6A                     	;# 
   615  0F6B                     	;# 
   616  0FE4                     	;# 
   617  0FE5                     	;# 
   618  0FE6                     	;# 
   619  0FE7                     	;# 
   620  0FE8                     	;# 
   621  0FE9                     	;# 
   622  0FEA                     	;# 
   623  0FEB                     	;# 
   624  0FED                     	;# 
   625  0FEE                     	;# 
   626  0FEF                     	;# 
   627  0000                     	;# 
   628  0001                     	;# 
   629  0002                     	;# 
   630  0003                     	;# 
   631  0004                     	;# 
   632  0005                     	;# 
   633  0006                     	;# 
   634  0007                     	;# 
   635  0008                     	;# 
   636  0009                     	;# 
   637  000A                     	;# 
   638  000B                     	;# 
   639  000C                     	;# 
   640  000D                     	;# 
   641  000E                     	;# 
   642  0010                     	;# 
   643  0011                     	;# 
   644  0012                     	;# 
   645  0013                     	;# 
   646  0016                     	;# 
   647  0017                     	;# 
   648  0018                     	;# 
   649  001C                     	;# 
   650  001C                     	;# 
   651  001D                     	;# 
   652  001D                     	;# 
   653  001E                     	;# 
   654  001F                     	;# 
   655  008C                     	;# 
   656  008C                     	;# 
   657  008D                     	;# 
   658  008E                     	;# 
   659  008E                     	;# 
   660  008F                     	;# 
   661  0090                     	;# 
   662  0090                     	;# 
   663  0091                     	;# 
   664  0093                     	;# 
   665  0094                     	;# 
   666  0095                     	;# 
   667  0096                     	;# 
   668  0097                     	;# 
   669  0098                     	;# 
   670  0099                     	;# 
   671  009A                     	;# 
   672  009B                     	;# 
   673  009C                     	;# 
   674  009D                     	;# 
   675  009E                     	;# 
   676  010C                     	;# 
   677  010D                     	;# 
   678  010E                     	;# 
   679  010E                     	;# 
   680  010F                     	;# 
   681  0110                     	;# 
   682  0110                     	;# 
   683  0111                     	;# 
   684  0112                     	;# 
   685  0112                     	;# 
   686  0113                     	;# 
   687  0114                     	;# 
   688  0114                     	;# 
   689  0115                     	;# 
   690  0116                     	;# 
   691  0116                     	;# 
   692  0117                     	;# 
   693  0119                     	;# 
   694  0119                     	;# 
   695  0119                     	;# 
   696  011A                     	;# 
   697  011A                     	;# 
   698  011A                     	;# 
   699  011B                     	;# 
   700  011B                     	;# 
   701  011B                     	;# 
   702  011B                     	;# 
   703  011B                     	;# 
   704  011C                     	;# 
   705  011C                     	;# 
   706  011C                     	;# 
   707  011D                     	;# 
   708  011D                     	;# 
   709  011D                     	;# 
   710  011E                     	;# 
   711  011E                     	;# 
   712  011E                     	;# 
   713  011F                     	;# 
   714  011F                     	;# 
   715  011F                     	;# 
   716  011F                     	;# 
   717  011F                     	;# 
   718  018C                     	;# 
   719  018D                     	;# 
   720  018E                     	;# 
   721  018F                     	;# 
   722  0190                     	;# 
   723  0191                     	;# 
   724  0192                     	;# 
   725  0196                     	;# 
   726  0197                     	;# 
   727  0198                     	;# 
   728  0199                     	;# 
   729  019A                     	;# 
   730  019B                     	;# 
   731  019C                     	;# 
   732  020C                     	;# 
   733  020C                     	;# 
   734  020D                     	;# 
   735  020E                     	;# 
   736  020F                     	;# 
   737  020F                     	;# 
   738  0210                     	;# 
   739  0210                     	;# 
   740  0211                     	;# 
   741  0211                     	;# 
   742  0212                     	;# 
   743  0212                     	;# 
   744  0213                     	;# 
   745  0214                     	;# 
   746  0215                     	;# 
   747  0215                     	;# 
   748  0216                     	;# 
   749  0216                     	;# 
   750  0217                     	;# 
   751  0217                     	;# 
   752  0218                     	;# 
   753  0218                     	;# 
   754  0219                     	;# 
   755  021A                     	;# 
   756  021B                     	;# 
   757  021B                     	;# 
   758  021C                     	;# 
   759  021C                     	;# 
   760  021D                     	;# 
   761  021D                     	;# 
   762  021E                     	;# 
   763  021F                     	;# 
   764  028C                     	;# 
   765  028C                     	;# 
   766  028D                     	;# 
   767  028D                     	;# 
   768  028E                     	;# 
   769  028F                     	;# 
   770  0290                     	;# 
   771  0290                     	;# 
   772  0291                     	;# 
   773  0292                     	;# 
   774  0292                     	;# 
   775  0293                     	;# 
   776  0293                     	;# 
   777  0294                     	;# 
   778  0295                     	;# 
   779  0296                     	;# 
   780  0296                     	;# 
   781  0297                     	;# 
   782  0298                     	;# 
   783  0298                     	;# 
   784  0299                     	;# 
   785  0299                     	;# 
   786  029A                     	;# 
   787  029B                     	;# 
   788  029C                     	;# 
   789  029C                     	;# 
   790  029D                     	;# 
   791  030C                     	;# 
   792  030C                     	;# 
   793  030D                     	;# 
   794  030E                     	;# 
   795  030F                     	;# 
   796  0310                     	;# 
   797  0310                     	;# 
   798  0311                     	;# 
   799  0312                     	;# 
   800  0313                     	;# 
   801  0314                     	;# 
   802  0314                     	;# 
   803  0315                     	;# 
   804  0316                     	;# 
   805  0317                     	;# 
   806  0318                     	;# 
   807  0318                     	;# 
   808  0319                     	;# 
   809  031A                     	;# 
   810  031B                     	;# 
   811  031C                     	;# 
   812  031C                     	;# 
   813  031D                     	;# 
   814  031E                     	;# 
   815  031F                     	;# 
   816  038C                     	;# 
   817  038D                     	;# 
   818  038E                     	;# 
   819  0390                     	;# 
   820  0391                     	;# 
   821  0392                     	;# 
   822  040C                     	;# 
   823  040D                     	;# 
   824  040E                     	;# 
   825  040F                     	;# 
   826  0410                     	;# 
   827  0411                     	;# 
   828  0416                     	;# 
   829  0416                     	;# 
   830  0417                     	;# 
   831  0418                     	;# 
   832  0418                     	;# 
   833  0419                     	;# 
   834  041A                     	;# 
   835  041A                     	;# 
   836  041B                     	;# 
   837  041C                     	;# 
   838  041C                     	;# 
   839  041D                     	;# 
   840  041E                     	;# 
   841  041F                     	;# 
   842  048C                     	;# 
   843  048C                     	;# 
   844  048D                     	;# 
   845  048E                     	;# 
   846  048F                     	;# 
   847  048F                     	;# 
   848  0490                     	;# 
   849  0491                     	;# 
   850  0492                     	;# 
   851  0492                     	;# 
   852  0493                     	;# 
   853  0494                     	;# 
   854  0495                     	;# 
   855  0495                     	;# 
   856  0496                     	;# 
   857  0497                     	;# 
   858  0498                     	;# 
   859  0499                     	;# 
   860  049A                     	;# 
   861  049B                     	;# 
   862  049C                     	;# 
   863  049D                     	;# 
   864  050C                     	;# 
   865  050C                     	;# 
   866  050D                     	;# 
   867  050E                     	;# 
   868  050F                     	;# 
   869  050F                     	;# 
   870  0510                     	;# 
   871  0511                     	;# 
   872  0512                     	;# 
   873  0512                     	;# 
   874  0513                     	;# 
   875  0514                     	;# 
   876  0515                     	;# 
   877  0515                     	;# 
   878  0516                     	;# 
   879  0517                     	;# 
   880  0518                     	;# 
   881  0519                     	;# 
   882  051A                     	;# 
   883  051B                     	;# 
   884  051C                     	;# 
   885  051D                     	;# 
   886  058C                     	;# 
   887  058C                     	;# 
   888  058D                     	;# 
   889  058E                     	;# 
   890  058F                     	;# 
   891  058F                     	;# 
   892  0590                     	;# 
   893  0591                     	;# 
   894  0592                     	;# 
   895  0593                     	;# 
   896  060C                     	;# 
   897  060D                     	;# 
   898  060E                     	;# 
   899  060F                     	;# 
   900  0610                     	;# 
   901  0611                     	;# 
   902  0612                     	;# 
   903  0613                     	;# 
   904  0614                     	;# 
   905  0616                     	;# 
   906  0617                     	;# 
   907  0618                     	;# 
   908  0619                     	;# 
   909  061A                     	;# 
   910  061B                     	;# 
   911  061C                     	;# 
   912  061D                     	;# 
   913  061E                     	;# 
   914  068C                     	;# 
   915  068D                     	;# 
   916  068E                     	;# 
   917  068F                     	;# 
   918  0690                     	;# 
   919  0691                     	;# 
   920  0692                     	;# 
   921  0693                     	;# 
   922  0694                     	;# 
   923  070C                     	;# 
   924  070D                     	;# 
   925  070E                     	;# 
   926  070F                     	;# 
   927  0710                     	;# 
   928  0711                     	;# 
   929  0712                     	;# 
   930  0713                     	;# 
   931  0714                     	;# 
   932  0716                     	;# 
   933  0717                     	;# 
   934  0718                     	;# 
   935  0719                     	;# 
   936  071A                     	;# 
   937  071B                     	;# 
   938  071C                     	;# 
   939  071D                     	;# 
   940  071E                     	;# 
   941  0796                     	;# 
   942  0797                     	;# 
   943  0798                     	;# 
   944  0799                     	;# 
   945  079A                     	;# 
   946  079B                     	;# 
   947  080C                     	;# 
   948  080D                     	;# 
   949  080E                     	;# 
   950  080F                     	;# 
   951  0810                     	;# 
   952  0811                     	;# 
   953  0812                     	;# 
   954  0813                     	;# 
   955  0814                     	;# 
   956  081A                     	;# 
   957  081B                     	;# 
   958  081C                     	;# 
   959  081D                     	;# 
   960  081E                     	;# 
   961  081F                     	;# 
   962  088C                     	;# 
   963  088D                     	;# 
   964  088E                     	;# 
   965  088F                     	;# 
   966  0890                     	;# 
   967  0891                     	;# 
   968  0892                     	;# 
   969  0893                     	;# 
   970  0895                     	;# 
   971  0896                     	;# 
   972  0897                     	;# 
   973  0898                     	;# 
   974  0899                     	;# 
   975  089A                     	;# 
   976  089B                     	;# 
   977  090C                     	;# 
   978  090E                     	;# 
   979  090F                     	;# 
   980  091F                     	;# 
   981  091F                     	;# 
   982  098F                     	;# 
   983  098F                     	;# 
   984  0990                     	;# 
   985  0991                     	;# 
   986  0992                     	;# 
   987  0993                     	;# 
   988  0994                     	;# 
   989  0995                     	;# 
   990  0996                     	;# 
   991  0997                     	;# 
   992  0E0F                     	;# 
   993  0E10                     	;# 
   994  0E11                     	;# 
   995  0E12                     	;# 
   996  0E13                     	;# 
   997  0E14                     	;# 
   998  0E15                     	;# 
   999  0E16                     	;# 
  1000  0E17                     	;# 
  1001  0E18                     	;# 
  1002  0E19                     	;# 
  1003  0E1A                     	;# 
  1004  0E1B                     	;# 
  1005  0E1C                     	;# 
  1006  0E1D                     	;# 
  1007  0E1E                     	;# 
  1008  0E1F                     	;# 
  1009  0E20                     	;# 
  1010  0E21                     	;# 
  1011  0E22                     	;# 
  1012  0E23                     	;# 
  1013  0E24                     	;# 
  1014  0E25                     	;# 
  1015  0E26                     	;# 
  1016  0E27                     	;# 
  1017  0E28                     	;# 
  1018  0E29                     	;# 
  1019  0E2A                     	;# 
  1020  0E2B                     	;# 
  1021  0E2C                     	;# 
  1022  0E2D                     	;# 
  1023  0E2E                     	;# 
  1024  0E2F                     	;# 
  1025  0E30                     	;# 
  1026  0E31                     	;# 
  1027  0E32                     	;# 
  1028  0E33                     	;# 
  1029  0E34                     	;# 
  1030  0E35                     	;# 
  1031  0E36                     	;# 
  1032  0E37                     	;# 
  1033  0E8F                     	;# 
  1034  0E90                     	;# 
  1035  0E91                     	;# 
  1036  0E92                     	;# 
  1037  0E93                     	;# 
  1038  0E94                     	;# 
  1039  0E95                     	;# 
  1040  0E96                     	;# 
  1041  0E97                     	;# 
  1042  0E9C                     	;# 
  1043  0E9D                     	;# 
  1044  0E9E                     	;# 
  1045  0EA1                     	;# 
  1046  0EA2                     	;# 
  1047  0EA3                     	;# 
  1048  0EA4                     	;# 
  1049  0EA5                     	;# 
  1050  0EA9                     	;# 
  1051  0EAA                     	;# 
  1052  0EAB                     	;# 
  1053  0EAC                     	;# 
  1054  0EB1                     	;# 
  1055  0EB2                     	;# 
  1056  0EB3                     	;# 
  1057  0EB8                     	;# 
  1058  0EB9                     	;# 
  1059  0EBA                     	;# 
  1060  0EBB                     	;# 
  1061  0EBC                     	;# 
  1062  0EBD                     	;# 
  1063  0EBE                     	;# 
  1064  0EC3                     	;# 
  1065  0EC5                     	;# 
  1066  0EC6                     	;# 
  1067  0EC7                     	;# 
  1068  0EC8                     	;# 
  1069  0EC9                     	;# 
  1070  0ECA                     	;# 
  1071  0ECB                     	;# 
  1072  0ECC                     	;# 
  1073  0F10                     	;# 
  1074  0F11                     	;# 
  1075  0F12                     	;# 
  1076  0F13                     	;# 
  1077  0F14                     	;# 
  1078  0F15                     	;# 
  1079  0F16                     	;# 
  1080  0F17                     	;# 
  1081  0F18                     	;# 
  1082  0F19                     	;# 
  1083  0F1A                     	;# 
  1084  0F1B                     	;# 
  1085  0F1C                     	;# 
  1086  0F1D                     	;# 
  1087  0F1E                     	;# 
  1088  0F1F                     	;# 
  1089  0F20                     	;# 
  1090  0F21                     	;# 
  1091  0F22                     	;# 
  1092  0F23                     	;# 
  1093  0F24                     	;# 
  1094  0F25                     	;# 
  1095  0F26                     	;# 
  1096  0F27                     	;# 
  1097  0F38                     	;# 
  1098  0F39                     	;# 
  1099  0F3A                     	;# 
  1100  0F3B                     	;# 
  1101  0F3C                     	;# 
  1102  0F3D                     	;# 
  1103  0F3E                     	;# 
  1104  0F3F                     	;# 
  1105  0F40                     	;# 
  1106  0F41                     	;# 
  1107  0F43                     	;# 
  1108  0F44                     	;# 
  1109  0F45                     	;# 
  1110  0F46                     	;# 
  1111  0F47                     	;# 
  1112  0F48                     	;# 
  1113  0F49                     	;# 
  1114  0F4A                     	;# 
  1115  0F4B                     	;# 
  1116  0F4C                     	;# 
  1117  0F4E                     	;# 
  1118  0F4F                     	;# 
  1119  0F50                     	;# 
  1120  0F51                     	;# 
  1121  0F52                     	;# 
  1122  0F53                     	;# 
  1123  0F54                     	;# 
  1124  0F55                     	;# 
  1125  0F56                     	;# 
  1126  0F57                     	;# 
  1127  0F65                     	;# 
  1128  0F68                     	;# 
  1129  0F69                     	;# 
  1130  0F6A                     	;# 
  1131  0F6B                     	;# 
  1132  0FE4                     	;# 
  1133  0FE5                     	;# 
  1134  0FE6                     	;# 
  1135  0FE7                     	;# 
  1136  0FE8                     	;# 
  1137  0FE9                     	;# 
  1138  0FEA                     	;# 
  1139  0FEB                     	;# 
  1140  0FED                     	;# 
  1141  0FEE                     	;# 
  1142  0FEF                     	;# 
  1143  0000                     	;# 
  1144  0001                     	;# 
  1145  0002                     	;# 
  1146  0003                     	;# 
  1147  0004                     	;# 
  1148  0005                     	;# 
  1149  0006                     	;# 
  1150  0007                     	;# 
  1151  0008                     	;# 
  1152  0009                     	;# 
  1153  000A                     	;# 
  1154  000B                     	;# 
  1155  000C                     	;# 
  1156  000D                     	;# 
  1157  000E                     	;# 
  1158  0010                     	;# 
  1159  0011                     	;# 
  1160  0012                     	;# 
  1161  0013                     	;# 
  1162  0016                     	;# 
  1163  0017                     	;# 
  1164  0018                     	;# 
  1165  001C                     	;# 
  1166  001C                     	;# 
  1167  001D                     	;# 
  1168  001D                     	;# 
  1169  001E                     	;# 
  1170  001F                     	;# 
  1171  008C                     	;# 
  1172  008C                     	;# 
  1173  008D                     	;# 
  1174  008E                     	;# 
  1175  008E                     	;# 
  1176  008F                     	;# 
  1177  0090                     	;# 
  1178  0090                     	;# 
  1179  0091                     	;# 
  1180  0093                     	;# 
  1181  0094                     	;# 
  1182  0095                     	;# 
  1183  0096                     	;# 
  1184  0097                     	;# 
  1185  0098                     	;# 
  1186  0099                     	;# 
  1187  009A                     	;# 
  1188  009B                     	;# 
  1189  009C                     	;# 
  1190  009D                     	;# 
  1191  009E                     	;# 
  1192  010C                     	;# 
  1193  010D                     	;# 
  1194  010E                     	;# 
  1195  010E                     	;# 
  1196  010F                     	;# 
  1197  0110                     	;# 
  1198  0110                     	;# 
  1199  0111                     	;# 
  1200  0112                     	;# 
  1201  0112                     	;# 
  1202  0113                     	;# 
  1203  0114                     	;# 
  1204  0114                     	;# 
  1205  0115                     	;# 
  1206  0116                     	;# 
  1207  0116                     	;# 
  1208  0117                     	;# 
  1209  0119                     	;# 
  1210  0119                     	;# 
  1211  0119                     	;# 
  1212  011A                     	;# 
  1213  011A                     	;# 
  1214  011A                     	;# 
  1215  011B                     	;# 
  1216  011B                     	;# 
  1217  011B                     	;# 
  1218  011B                     	;# 
  1219  011B                     	;# 
  1220  011C                     	;# 
  1221  011C                     	;# 
  1222  011C                     	;# 
  1223  011D                     	;# 
  1224  011D                     	;# 
  1225  011D                     	;# 
  1226  011E                     	;# 
  1227  011E                     	;# 
  1228  011E                     	;# 
  1229  011F                     	;# 
  1230  011F                     	;# 
  1231  011F                     	;# 
  1232  011F                     	;# 
  1233  011F                     	;# 
  1234  018C                     	;# 
  1235  018D                     	;# 
  1236  018E                     	;# 
  1237  018F                     	;# 
  1238  0190                     	;# 
  1239  0191                     	;# 
  1240  0192                     	;# 
  1241  0196                     	;# 
  1242  0197                     	;# 
  1243  0198                     	;# 
  1244  0199                     	;# 
  1245  019A                     	;# 
  1246  019B                     	;# 
  1247  019C                     	;# 
  1248  020C                     	;# 
  1249  020C                     	;# 
  1250  020D                     	;# 
  1251  020E                     	;# 
  1252  020F                     	;# 
  1253  020F                     	;# 
  1254  0210                     	;# 
  1255  0210                     	;# 
  1256  0211                     	;# 
  1257  0211                     	;# 
  1258  0212                     	;# 
  1259  0212                     	;# 
  1260  0213                     	;# 
  1261  0214                     	;# 
  1262  0215                     	;# 
  1263  0215                     	;# 
  1264  0216                     	;# 
  1265  0216                     	;# 
  1266  0217                     	;# 
  1267  0217                     	;# 
  1268  0218                     	;# 
  1269  0218                     	;# 
  1270  0219                     	;# 
  1271  021A                     	;# 
  1272  021B                     	;# 
  1273  021B                     	;# 
  1274  021C                     	;# 
  1275  021C                     	;# 
  1276  021D                     	;# 
  1277  021D                     	;# 
  1278  021E                     	;# 
  1279  021F                     	;# 
  1280  028C                     	;# 
  1281  028C                     	;# 
  1282  028D                     	;# 
  1283  028D                     	;# 
  1284  028E                     	;# 
  1285  028F                     	;# 
  1286  0290                     	;# 
  1287  0290                     	;# 
  1288  0291                     	;# 
  1289  0292                     	;# 
  1290  0292                     	;# 
  1291  0293                     	;# 
  1292  0293                     	;# 
  1293  0294                     	;# 
  1294  0295                     	;# 
  1295  0296                     	;# 
  1296  0296                     	;# 
  1297  0297                     	;# 
  1298  0298                     	;# 
  1299  0298                     	;# 
  1300  0299                     	;# 
  1301  0299                     	;# 
  1302  029A                     	;# 
  1303  029B                     	;# 
  1304  029C                     	;# 
  1305  029C                     	;# 
  1306  029D                     	;# 
  1307  030C                     	;# 
  1308  030C                     	;# 
  1309  030D                     	;# 
  1310  030E                     	;# 
  1311  030F                     	;# 
  1312  0310                     	;# 
  1313  0310                     	;# 
  1314  0311                     	;# 
  1315  0312                     	;# 
  1316  0313                     	;# 
  1317  0314                     	;# 
  1318  0314                     	;# 
  1319  0315                     	;# 
  1320  0316                     	;# 
  1321  0317                     	;# 
  1322  0318                     	;# 
  1323  0318                     	;# 
  1324  0319                     	;# 
  1325  031A                     	;# 
  1326  031B                     	;# 
  1327  031C                     	;# 
  1328  031C                     	;# 
  1329  031D                     	;# 
  1330  031E                     	;# 
  1331  031F                     	;# 
  1332  038C                     	;# 
  1333  038D                     	;# 
  1334  038E                     	;# 
  1335  0390                     	;# 
  1336  0391                     	;# 
  1337  0392                     	;# 
  1338  040C                     	;# 
  1339  040D                     	;# 
  1340  040E                     	;# 
  1341  040F                     	;# 
  1342  0410                     	;# 
  1343  0411                     	;# 
  1344  0416                     	;# 
  1345  0416                     	;# 
  1346  0417                     	;# 
  1347  0418                     	;# 
  1348  0418                     	;# 
  1349  0419                     	;# 
  1350  041A                     	;# 
  1351  041A                     	;# 
  1352  041B                     	;# 
  1353  041C                     	;# 
  1354  041C                     	;# 
  1355  041D                     	;# 
  1356  041E                     	;# 
  1357  041F                     	;# 
  1358  048C                     	;# 
  1359  048C                     	;# 
  1360  048D                     	;# 
  1361  048E                     	;# 
  1362  048F                     	;# 
  1363  048F                     	;# 
  1364  0490                     	;# 
  1365  0491                     	;# 
  1366  0492                     	;# 
  1367  0492                     	;# 
  1368  0493                     	;# 
  1369  0494                     	;# 
  1370  0495                     	;# 
  1371  0495                     	;# 
  1372  0496                     	;# 
  1373  0497                     	;# 
  1374  0498                     	;# 
  1375  0499                     	;# 
  1376  049A                     	;# 
  1377  049B                     	;# 
  1378  049C                     	;# 
  1379  049D                     	;# 
  1380  050C                     	;# 
  1381  050C                     	;# 
  1382  050D                     	;# 
  1383  050E                     	;# 
  1384  050F                     	;# 
  1385  050F                     	;# 
  1386  0510                     	;# 
  1387  0511                     	;# 
  1388  0512                     	;# 
  1389  0512                     	;# 
  1390  0513                     	;# 
  1391  0514                     	;# 
  1392  0515                     	;# 
  1393  0515                     	;# 
  1394  0516                     	;# 
  1395  0517                     	;# 
  1396  0518                     	;# 
  1397  0519                     	;# 
  1398  051A                     	;# 
  1399  051B                     	;# 
  1400  051C                     	;# 
  1401  051D                     	;# 
  1402  058C                     	;# 
  1403  058C                     	;# 
  1404  058D                     	;# 
  1405  058E                     	;# 
  1406  058F                     	;# 
  1407  058F                     	;# 
  1408  0590                     	;# 
  1409  0591                     	;# 
  1410  0592                     	;# 
  1411  0593                     	;# 
  1412  060C                     	;# 
  1413  060D                     	;# 
  1414  060E                     	;# 
  1415  060F                     	;# 
  1416  0610                     	;# 
  1417  0611                     	;# 
  1418  0612                     	;# 
  1419  0613                     	;# 
  1420  0614                     	;# 
  1421  0616                     	;# 
  1422  0617                     	;# 
  1423  0618                     	;# 
  1424  0619                     	;# 
  1425  061A                     	;# 
  1426  061B                     	;# 
  1427  061C                     	;# 
  1428  061D                     	;# 
  1429  061E                     	;# 
  1430  068C                     	;# 
  1431  068D                     	;# 
  1432  068E                     	;# 
  1433  068F                     	;# 
  1434  0690                     	;# 
  1435  0691                     	;# 
  1436  0692                     	;# 
  1437  0693                     	;# 
  1438  0694                     	;# 
  1439  070C                     	;# 
  1440  070D                     	;# 
  1441  070E                     	;# 
  1442  070F                     	;# 
  1443  0710                     	;# 
  1444  0711                     	;# 
  1445  0712                     	;# 
  1446  0713                     	;# 
  1447  0714                     	;# 
  1448  0716                     	;# 
  1449  0717                     	;# 
  1450  0718                     	;# 
  1451  0719                     	;# 
  1452  071A                     	;# 
  1453  071B                     	;# 
  1454  071C                     	;# 
  1455  071D                     	;# 
  1456  071E                     	;# 
  1457  0796                     	;# 
  1458  0797                     	;# 
  1459  0798                     	;# 
  1460  0799                     	;# 
  1461  079A                     	;# 
  1462  079B                     	;# 
  1463  080C                     	;# 
  1464  080D                     	;# 
  1465  080E                     	;# 
  1466  080F                     	;# 
  1467  0810                     	;# 
  1468  0811                     	;# 
  1469  0812                     	;# 
  1470  0813                     	;# 
  1471  0814                     	;# 
  1472  081A                     	;# 
  1473  081B                     	;# 
  1474  081C                     	;# 
  1475  081D                     	;# 
  1476  081E                     	;# 
  1477  081F                     	;# 
  1478  088C                     	;# 
  1479  088D                     	;# 
  1480  088E                     	;# 
  1481  088F                     	;# 
  1482  0890                     	;# 
  1483  0891                     	;# 
  1484  0892                     	;# 
  1485  0893                     	;# 
  1486  0895                     	;# 
  1487  0896                     	;# 
  1488  0897                     	;# 
  1489  0898                     	;# 
  1490  0899                     	;# 
  1491  089A                     	;# 
  1492  089B                     	;# 
  1493  090C                     	;# 
  1494  090E                     	;# 
  1495  090F                     	;# 
  1496  091F                     	;# 
  1497  091F                     	;# 
  1498  098F                     	;# 
  1499  098F                     	;# 
  1500  0990                     	;# 
  1501  0991                     	;# 
  1502  0992                     	;# 
  1503  0993                     	;# 
  1504  0994                     	;# 
  1505  0995                     	;# 
  1506  0996                     	;# 
  1507  0997                     	;# 
  1508  0E0F                     	;# 
  1509  0E10                     	;# 
  1510  0E11                     	;# 
  1511  0E12                     	;# 
  1512  0E13                     	;# 
  1513  0E14                     	;# 
  1514  0E15                     	;# 
  1515  0E16                     	;# 
  1516  0E17                     	;# 
  1517  0E18                     	;# 
  1518  0E19                     	;# 
  1519  0E1A                     	;# 
  1520  0E1B                     	;# 
  1521  0E1C                     	;# 
  1522  0E1D                     	;# 
  1523  0E1E                     	;# 
  1524  0E1F                     	;# 
  1525  0E20                     	;# 
  1526  0E21                     	;# 
  1527  0E22                     	;# 
  1528  0E23                     	;# 
  1529  0E24                     	;# 
  1530  0E25                     	;# 
  1531  0E26                     	;# 
  1532  0E27                     	;# 
  1533  0E28                     	;# 
  1534  0E29                     	;# 
  1535  0E2A                     	;# 
  1536  0E2B                     	;# 
  1537  0E2C                     	;# 
  1538  0E2D                     	;# 
  1539  0E2E                     	;# 
  1540  0E2F                     	;# 
  1541  0E30                     	;# 
  1542  0E31                     	;# 
  1543  0E32                     	;# 
  1544  0E33                     	;# 
  1545  0E34                     	;# 
  1546  0E35                     	;# 
  1547  0E36                     	;# 
  1548  0E37                     	;# 
  1549  0E8F                     	;# 
  1550  0E90                     	;# 
  1551  0E91                     	;# 
  1552  0E92                     	;# 
  1553  0E93                     	;# 
  1554  0E94                     	;# 
  1555  0E95                     	;# 
  1556  0E96                     	;# 
  1557  0E97                     	;# 
  1558  0E9C                     	;# 
  1559  0E9D                     	;# 
  1560  0E9E                     	;# 
  1561  0EA1                     	;# 
  1562  0EA2                     	;# 
  1563  0EA3                     	;# 
  1564  0EA4                     	;# 
  1565  0EA5                     	;# 
  1566  0EA9                     	;# 
  1567  0EAA                     	;# 
  1568  0EAB                     	;# 
  1569  0EAC                     	;# 
  1570  0EB1                     	;# 
  1571  0EB2                     	;# 
  1572  0EB3                     	;# 
  1573  0EB8                     	;# 
  1574  0EB9                     	;# 
  1575  0EBA                     	;# 
  1576  0EBB                     	;# 
  1577  0EBC                     	;# 
  1578  0EBD                     	;# 
  1579  0EBE                     	;# 
  1580  0EC3                     	;# 
  1581  0EC5                     	;# 
  1582  0EC6                     	;# 
  1583  0EC7                     	;# 
  1584  0EC8                     	;# 
  1585  0EC9                     	;# 
  1586  0ECA                     	;# 
  1587  0ECB                     	;# 
  1588  0ECC                     	;# 
  1589  0F10                     	;# 
  1590  0F11                     	;# 
  1591  0F12                     	;# 
  1592  0F13                     	;# 
  1593  0F14                     	;# 
  1594  0F15                     	;# 
  1595  0F16                     	;# 
  1596  0F17                     	;# 
  1597  0F18                     	;# 
  1598  0F19                     	;# 
  1599  0F1A                     	;# 
  1600  0F1B                     	;# 
  1601  0F1C                     	;# 
  1602  0F1D                     	;# 
  1603  0F1E                     	;# 
  1604  0F1F                     	;# 
  1605  0F20                     	;# 
  1606  0F21                     	;# 
  1607  0F22                     	;# 
  1608  0F23                     	;# 
  1609  0F24                     	;# 
  1610  0F25                     	;# 
  1611  0F26                     	;# 
  1612  0F27                     	;# 
  1613  0F38                     	;# 
  1614  0F39                     	;# 
  1615  0F3A                     	;# 
  1616  0F3B                     	;# 
  1617  0F3C                     	;# 
  1618  0F3D                     	;# 
  1619  0F3E                     	;# 
  1620  0F3F                     	;# 
  1621  0F40                     	;# 
  1622  0F41                     	;# 
  1623  0F43                     	;# 
  1624  0F44                     	;# 
  1625  0F45                     	;# 
  1626  0F46                     	;# 
  1627  0F47                     	;# 
  1628  0F48                     	;# 
  1629  0F49                     	;# 
  1630  0F4A                     	;# 
  1631  0F4B                     	;# 
  1632  0F4C                     	;# 
  1633  0F4E                     	;# 
  1634  0F4F                     	;# 
  1635  0F50                     	;# 
  1636  0F51                     	;# 
  1637  0F52                     	;# 
  1638  0F53                     	;# 
  1639  0F54                     	;# 
  1640  0F55                     	;# 
  1641  0F56                     	;# 
  1642  0F57                     	;# 
  1643  0F65                     	;# 
  1644  0F68                     	;# 
  1645  0F69                     	;# 
  1646  0F6A                     	;# 
  1647  0F6B                     	;# 
  1648  0FE4                     	;# 
  1649  0FE5                     	;# 
  1650  0FE6                     	;# 
  1651  0FE7                     	;# 
  1652  0FE8                     	;# 
  1653  0FE9                     	;# 
  1654  0FEA                     	;# 
  1655  0FEB                     	;# 
  1656  0FED                     	;# 
  1657  0FEE                     	;# 
  1658  0FEF                     	;# 
  1659  0000                     	;# 
  1660  0001                     	;# 
  1661  0002                     	;# 
  1662  0003                     	;# 
  1663  0004                     	;# 
  1664  0005                     	;# 
  1665  0006                     	;# 
  1666  0007                     	;# 
  1667  0008                     	;# 
  1668  0009                     	;# 
  1669  000A                     	;# 
  1670  000B                     	;# 
  1671  000C                     	;# 
  1672  000D                     	;# 
  1673  000E                     	;# 
  1674  0010                     	;# 
  1675  0011                     	;# 
  1676  0012                     	;# 
  1677  0013                     	;# 
  1678  0016                     	;# 
  1679  0017                     	;# 
  1680  0018                     	;# 
  1681  001C                     	;# 
  1682  001C                     	;# 
  1683  001D                     	;# 
  1684  001D                     	;# 
  1685  001E                     	;# 
  1686  001F                     	;# 
  1687  008C                     	;# 
  1688  008C                     	;# 
  1689  008D                     	;# 
  1690  008E                     	;# 
  1691  008E                     	;# 
  1692  008F                     	;# 
  1693  0090                     	;# 
  1694  0090                     	;# 
  1695  0091                     	;# 
  1696  0093                     	;# 
  1697  0094                     	;# 
  1698  0095                     	;# 
  1699  0096                     	;# 
  1700  0097                     	;# 
  1701  0098                     	;# 
  1702  0099                     	;# 
  1703  009A                     	;# 
  1704  009B                     	;# 
  1705  009C                     	;# 
  1706  009D                     	;# 
  1707  009E                     	;# 
  1708  010C                     	;# 
  1709  010D                     	;# 
  1710  010E                     	;# 
  1711  010E                     	;# 
  1712  010F                     	;# 
  1713  0110                     	;# 
  1714  0110                     	;# 
  1715  0111                     	;# 
  1716  0112                     	;# 
  1717  0112                     	;# 
  1718  0113                     	;# 
  1719  0114                     	;# 
  1720  0114                     	;# 
  1721  0115                     	;# 
  1722  0116                     	;# 
  1723  0116                     	;# 
  1724  0117                     	;# 
  1725  0119                     	;# 
  1726  0119                     	;# 
  1727  0119                     	;# 
  1728  011A                     	;# 
  1729  011A                     	;# 
  1730  011A                     	;# 
  1731  011B                     	;# 
  1732  011B                     	;# 
  1733  011B                     	;# 
  1734  011B                     	;# 
  1735  011B                     	;# 
  1736  011C                     	;# 
  1737  011C                     	;# 
  1738  011C                     	;# 
  1739  011D                     	;# 
  1740  011D                     	;# 
  1741  011D                     	;# 
  1742  011E                     	;# 
  1743  011E                     	;# 
  1744  011E                     	;# 
  1745  011F                     	;# 
  1746  011F                     	;# 
  1747  011F                     	;# 
  1748  011F                     	;# 
  1749  011F                     	;# 
  1750  018C                     	;# 
  1751  018D                     	;# 
  1752  018E                     	;# 
  1753  018F                     	;# 
  1754  0190                     	;# 
  1755  0191                     	;# 
  1756  0192                     	;# 
  1757  0196                     	;# 
  1758  0197                     	;# 
  1759  0198                     	;# 
  1760  0199                     	;# 
  1761  019A                     	;# 
  1762  019B                     	;# 
  1763  019C                     	;# 
  1764  020C                     	;# 
  1765  020C                     	;# 
  1766  020D                     	;# 
  1767  020E                     	;# 
  1768  020F                     	;# 
  1769  020F                     	;# 
  1770  0210                     	;# 
  1771  0210                     	;# 
  1772  0211                     	;# 
  1773  0211                     	;# 
  1774  0212                     	;# 
  1775  0212                     	;# 
  1776  0213                     	;# 
  1777  0214                     	;# 
  1778  0215                     	;# 
  1779  0215                     	;# 
  1780  0216                     	;# 
  1781  0216                     	;# 
  1782  0217                     	;# 
  1783  0217                     	;# 
  1784  0218                     	;# 
  1785  0218                     	;# 
  1786  0219                     	;# 
  1787  021A                     	;# 
  1788  021B                     	;# 
  1789  021B                     	;# 
  1790  021C                     	;# 
  1791  021C                     	;# 
  1792  021D                     	;# 
  1793  021D                     	;# 
  1794  021E                     	;# 
  1795  021F                     	;# 
  1796  028C                     	;# 
  1797  028C                     	;# 
  1798  028D                     	;# 
  1799  028D                     	;# 
  1800  028E                     	;# 
  1801  028F                     	;# 
  1802  0290                     	;# 
  1803  0290                     	;# 
  1804  0291                     	;# 
  1805  0292                     	;# 
  1806  0292                     	;# 
  1807  0293                     	;# 
  1808  0293                     	;# 
  1809  0294                     	;# 
  1810  0295                     	;# 
  1811  0296                     	;# 
  1812  0296                     	;# 
  1813  0297                     	;# 
  1814  0298                     	;# 
  1815  0298                     	;# 
  1816  0299                     	;# 
  1817  0299                     	;# 
  1818  029A                     	;# 
  1819  029B                     	;# 
  1820  029C                     	;# 
  1821  029C                     	;# 
  1822  029D                     	;# 
  1823  030C                     	;# 
  1824  030C                     	;# 
  1825  030D                     	;# 
  1826  030E                     	;# 
  1827  030F                     	;# 
  1828  0310                     	;# 
  1829  0310                     	;# 
  1830  0311                     	;# 
  1831  0312                     	;# 
  1832  0313                     	;# 
  1833  0314                     	;# 
  1834  0314                     	;# 
  1835  0315                     	;# 
  1836  0316                     	;# 
  1837  0317                     	;# 
  1838  0318                     	;# 
  1839  0318                     	;# 
  1840  0319                     	;# 
  1841  031A                     	;# 
  1842  031B                     	;# 
  1843  031C                     	;# 
  1844  031C                     	;# 
  1845  031D                     	;# 
  1846  031E                     	;# 
  1847  031F                     	;# 
  1848  038C                     	;# 
  1849  038D                     	;# 
  1850  038E                     	;# 
  1851  0390                     	;# 
  1852  0391                     	;# 
  1853  0392                     	;# 
  1854  040C                     	;# 
  1855  040D                     	;# 
  1856  040E                     	;# 
  1857  040F                     	;# 
  1858  0410                     	;# 
  1859  0411                     	;# 
  1860  0416                     	;# 
  1861  0416                     	;# 
  1862  0417                     	;# 
  1863  0418                     	;# 
  1864  0418                     	;# 
  1865  0419                     	;# 
  1866  041A                     	;# 
  1867  041A                     	;# 
  1868  041B                     	;# 
  1869  041C                     	;# 
  1870  041C                     	;# 
  1871  041D                     	;# 
  1872  041E                     	;# 
  1873  041F                     	;# 
  1874  048C                     	;# 
  1875  048C                     	;# 
  1876  048D                     	;# 
  1877  048E                     	;# 
  1878  048F                     	;# 
  1879  048F                     	;# 
  1880  0490                     	;# 
  1881  0491                     	;# 
  1882  0492                     	;# 
  1883  0492                     	;# 
  1884  0493                     	;# 
  1885  0494                     	;# 
  1886  0495                     	;# 
  1887  0495                     	;# 
  1888  0496                     	;# 
  1889  0497                     	;# 
  1890  0498                     	;# 
  1891  0499                     	;# 
  1892  049A                     	;# 
  1893  049B                     	;# 
  1894  049C                     	;# 
  1895  049D                     	;# 
  1896  050C                     	;# 
  1897  050C                     	;# 
  1898  050D                     	;# 
  1899  050E                     	;# 
  1900  050F                     	;# 
  1901  050F                     	;# 
  1902  0510                     	;# 
  1903  0511                     	;# 
  1904  0512                     	;# 
  1905  0512                     	;# 
  1906  0513                     	;# 
  1907  0514                     	;# 
  1908  0515                     	;# 
  1909  0515                     	;# 
  1910  0516                     	;# 
  1911  0517                     	;# 
  1912  0518                     	;# 
  1913  0519                     	;# 
  1914  051A                     	;# 
  1915  051B                     	;# 
  1916  051C                     	;# 
  1917  051D                     	;# 
  1918  058C                     	;# 
  1919  058C                     	;# 
  1920  058D                     	;# 
  1921  058E                     	;# 
  1922  058F                     	;# 
  1923  058F                     	;# 
  1924  0590                     	;# 
  1925  0591                     	;# 
  1926  0592                     	;# 
  1927  0593                     	;# 
  1928  060C                     	;# 
  1929  060D                     	;# 
  1930  060E                     	;# 
  1931  060F                     	;# 
  1932  0610                     	;# 
  1933  0611                     	;# 
  1934  0612                     	;# 
  1935  0613                     	;# 
  1936  0614                     	;# 
  1937  0616                     	;# 
  1938  0617                     	;# 
  1939  0618                     	;# 
  1940  0619                     	;# 
  1941  061A                     	;# 
  1942  061B                     	;# 
  1943  061C                     	;# 
  1944  061D                     	;# 
  1945  061E                     	;# 
  1946  068C                     	;# 
  1947  068D                     	;# 
  1948  068E                     	;# 
  1949  068F                     	;# 
  1950  0690                     	;# 
  1951  0691                     	;# 
  1952  0692                     	;# 
  1953  0693                     	;# 
  1954  0694                     	;# 
  1955  070C                     	;# 
  1956  070D                     	;# 
  1957  070E                     	;# 
  1958  070F                     	;# 
  1959  0710                     	;# 
  1960  0711                     	;# 
  1961  0712                     	;# 
  1962  0713                     	;# 
  1963  0714                     	;# 
  1964  0716                     	;# 
  1965  0717                     	;# 
  1966  0718                     	;# 
  1967  0719                     	;# 
  1968  071A                     	;# 
  1969  071B                     	;# 
  1970  071C                     	;# 
  1971  071D                     	;# 
  1972  071E                     	;# 
  1973  0796                     	;# 
  1974  0797                     	;# 
  1975  0798                     	;# 
  1976  0799                     	;# 
  1977  079A                     	;# 
  1978  079B                     	;# 
  1979  080C                     	;# 
  1980  080D                     	;# 
  1981  080E                     	;# 
  1982  080F                     	;# 
  1983  0810                     	;# 
  1984  0811                     	;# 
  1985  0812                     	;# 
  1986  0813                     	;# 
  1987  0814                     	;# 
  1988  081A                     	;# 
  1989  081B                     	;# 
  1990  081C                     	;# 
  1991  081D                     	;# 
  1992  081E                     	;# 
  1993  081F                     	;# 
  1994  088C                     	;# 
  1995  088D                     	;# 
  1996  088E                     	;# 
  1997  088F                     	;# 
  1998  0890                     	;# 
  1999  0891                     	;# 
  2000  0892                     	;# 
  2001  0893                     	;# 
  2002  0895                     	;# 
  2003  0896                     	;# 
  2004  0897                     	;# 
  2005  0898                     	;# 
  2006  0899                     	;# 
  2007  089A                     	;# 
  2008  089B                     	;# 
  2009  090C                     	;# 
  2010  090E                     	;# 
  2011  090F                     	;# 
  2012  091F                     	;# 
  2013  091F                     	;# 
  2014  098F                     	;# 
  2015  098F                     	;# 
  2016  0990                     	;# 
  2017  0991                     	;# 
  2018  0992                     	;# 
  2019  0993                     	;# 
  2020  0994                     	;# 
  2021  0995                     	;# 
  2022  0996                     	;# 
  2023  0997                     	;# 
  2024  0E0F                     	;# 
  2025  0E10                     	;# 
  2026  0E11                     	;# 
  2027  0E12                     	;# 
  2028  0E13                     	;# 
  2029  0E14                     	;# 
  2030  0E15                     	;# 
  2031  0E16                     	;# 
  2032  0E17                     	;# 
  2033  0E18                     	;# 
  2034  0E19                     	;# 
  2035  0E1A                     	;# 
  2036  0E1B                     	;# 
  2037  0E1C                     	;# 
  2038  0E1D                     	;# 
  2039  0E1E                     	;# 
  2040  0E1F                     	;# 
  2041  0E20                     	;# 
  2042  0E21                     	;# 
  2043  0E22                     	;# 
  2044  0E23                     	;# 
  2045  0E24                     	;# 
  2046  0E25                     	;# 
  2047  0E26                     	;# 
  2048  0E27                     	;# 
  2049  0E28                     	;# 
  2050  0E29                     	;# 
  2051  0E2A                     	;# 
  2052  0E2B                     	;# 
  2053  0E2C                     	;# 
  2054  0E2D                     	;# 
  2055  0E2E                     	;# 
  2056  0E2F                     	;# 
  2057  0E30                     	;# 
  2058  0E31                     	;# 
  2059  0E32                     	;# 
  2060  0E33                     	;# 
  2061  0E34                     	;# 
  2062  0E35                     	;# 
  2063  0E36                     	;# 
  2064  0E37                     	;# 
  2065  0E8F                     	;# 
  2066  0E90                     	;# 
  2067  0E91                     	;# 
  2068  0E92                     	;# 
  2069  0E93                     	;# 
  2070  0E94                     	;# 
  2071  0E95                     	;# 
  2072  0E96                     	;# 
  2073  0E97                     	;# 
  2074  0E9C                     	;# 
  2075  0E9D                     	;# 
  2076  0E9E                     	;# 
  2077  0EA1                     	;# 
  2078  0EA2                     	;# 
  2079  0EA3                     	;# 
  2080  0EA4                     	;# 
  2081  0EA5                     	;# 
  2082  0EA9                     	;# 
  2083  0EAA                     	;# 
  2084  0EAB                     	;# 
  2085  0EAC                     	;# 
  2086  0EB1                     	;# 
  2087  0EB2                     	;# 
  2088  0EB3                     	;# 
  2089  0EB8                     	;# 
  2090  0EB9                     	;# 
  2091  0EBA                     	;# 
  2092  0EBB                     	;# 
  2093  0EBC                     	;# 
  2094  0EBD                     	;# 
  2095  0EBE                     	;# 
  2096  0EC3                     	;# 
  2097  0EC5                     	;# 
  2098  0EC6                     	;# 
  2099  0EC7                     	;# 
  2100  0EC8                     	;# 
  2101  0EC9                     	;# 
  2102  0ECA                     	;# 
  2103  0ECB                     	;# 
  2104  0ECC                     	;# 
  2105  0F10                     	;# 
  2106  0F11                     	;# 
  2107  0F12                     	;# 
  2108  0F13                     	;# 
  2109  0F14                     	;# 
  2110  0F15                     	;# 
  2111  0F16                     	;# 
  2112  0F17                     	;# 
  2113  0F18                     	;# 
  2114  0F19                     	;# 
  2115  0F1A                     	;# 
  2116  0F1B                     	;# 
  2117  0F1C                     	;# 
  2118  0F1D                     	;# 
  2119  0F1E                     	;# 
  2120  0F1F                     	;# 
  2121  0F20                     	;# 
  2122  0F21                     	;# 
  2123  0F22                     	;# 
  2124  0F23                     	;# 
  2125  0F24                     	;# 
  2126  0F25                     	;# 
  2127  0F26                     	;# 
  2128  0F27                     	;# 
  2129  0F38                     	;# 
  2130  0F39                     	;# 
  2131  0F3A                     	;# 
  2132  0F3B                     	;# 
  2133  0F3C                     	;# 
  2134  0F3D                     	;# 
  2135  0F3E                     	;# 
  2136  0F3F                     	;# 
  2137  0F40                     	;# 
  2138  0F41                     	;# 
  2139  0F43                     	;# 
  2140  0F44                     	;# 
  2141  0F45                     	;# 
  2142  0F46                     	;# 
  2143  0F47                     	;# 
  2144  0F48                     	;# 
  2145  0F49                     	;# 
  2146  0F4A                     	;# 
  2147  0F4B                     	;# 
  2148  0F4C                     	;# 
  2149  0F4E                     	;# 
  2150  0F4F                     	;# 
  2151  0F50                     	;# 
  2152  0F51                     	;# 
  2153  0F52                     	;# 
  2154  0F53                     	;# 
  2155  0F54                     	;# 
  2156  0F55                     	;# 
  2157  0F56                     	;# 
  2158  0F57                     	;# 
  2159  0F65                     	;# 
  2160  0F68                     	;# 
  2161  0F69                     	;# 
  2162  0F6A                     	;# 
  2163  0F6B                     	;# 
  2164  0FE4                     	;# 
  2165  0FE5                     	;# 
  2166  0FE6                     	;# 
  2167  0FE7                     	;# 
  2168  0FE8                     	;# 
  2169  0FE9                     	;# 
  2170  0FEA                     	;# 
  2171  0FEB                     	;# 
  2172  0FED                     	;# 
  2173  0FEE                     	;# 
  2174  0FEF                     	;# 
  2175  0000                     	;# 
  2176  0001                     	;# 
  2177  0002                     	;# 
  2178  0003                     	;# 
  2179  0004                     	;# 
  2180  0005                     	;# 
  2181  0006                     	;# 
  2182  0007                     	;# 
  2183  0008                     	;# 
  2184  0009                     	;# 
  2185  000A                     	;# 
  2186  000B                     	;# 
  2187  000C                     	;# 
  2188  000D                     	;# 
  2189  000E                     	;# 
  2190  0010                     	;# 
  2191  0011                     	;# 
  2192  0012                     	;# 
  2193  0013                     	;# 
  2194  0016                     	;# 
  2195  0017                     	;# 
  2196  0018                     	;# 
  2197  001C                     	;# 
  2198  001C                     	;# 
  2199  001D                     	;# 
  2200  001D                     	;# 
  2201  001E                     	;# 
  2202  001F                     	;# 
  2203  008C                     	;# 
  2204  008C                     	;# 
  2205  008D                     	;# 
  2206  008E                     	;# 
  2207  008E                     	;# 
  2208  008F                     	;# 
  2209  0090                     	;# 
  2210  0090                     	;# 
  2211  0091                     	;# 
  2212  0093                     	;# 
  2213  0094                     	;# 
  2214  0095                     	;# 
  2215  0096                     	;# 
  2216  0097                     	;# 
  2217  0098                     	;# 
  2218  0099                     	;# 
  2219  009A                     	;# 
  2220  009B                     	;# 
  2221  009C                     	;# 
  2222  009D                     	;# 
  2223  009E                     	;# 
  2224  010C                     	;# 
  2225  010D                     	;# 
  2226  010E                     	;# 
  2227  010E                     	;# 
  2228  010F                     	;# 
  2229  0110                     	;# 
  2230  0110                     	;# 
  2231  0111                     	;# 
  2232  0112                     	;# 
  2233  0112                     	;# 
  2234  0113                     	;# 
  2235  0114                     	;# 
  2236  0114                     	;# 
  2237  0115                     	;# 
  2238  0116                     	;# 
  2239  0116                     	;# 
  2240  0117                     	;# 
  2241  0119                     	;# 
  2242  0119                     	;# 
  2243  0119                     	;# 
  2244  011A                     	;# 
  2245  011A                     	;# 
  2246  011A                     	;# 
  2247  011B                     	;# 
  2248  011B                     	;# 
  2249  011B                     	;# 
  2250  011B                     	;# 
  2251  011B                     	;# 
  2252  011C                     	;# 
  2253  011C                     	;# 
  2254  011C                     	;# 
  2255  011D                     	;# 
  2256  011D                     	;# 
  2257  011D                     	;# 
  2258  011E                     	;# 
  2259  011E                     	;# 
  2260  011E                     	;# 
  2261  011F                     	;# 
  2262  011F                     	;# 
  2263  011F                     	;# 
  2264  011F                     	;# 
  2265  011F                     	;# 
  2266  018C                     	;# 
  2267  018D                     	;# 
  2268  018E                     	;# 
  2269  018F                     	;# 
  2270  0190                     	;# 
  2271  0191                     	;# 
  2272  0192                     	;# 
  2273  0196                     	;# 
  2274  0197                     	;# 
  2275  0198                     	;# 
  2276  0199                     	;# 
  2277  019A                     	;# 
  2278  019B                     	;# 
  2279  019C                     	;# 
  2280  020C                     	;# 
  2281  020C                     	;# 
  2282  020D                     	;# 
  2283  020E                     	;# 
  2284  020F                     	;# 
  2285  020F                     	;# 
  2286  0210                     	;# 
  2287  0210                     	;# 
  2288  0211                     	;# 
  2289  0211                     	;# 
  2290  0212                     	;# 
  2291  0212                     	;# 
  2292  0213                     	;# 
  2293  0214                     	;# 
  2294  0215                     	;# 
  2295  0215                     	;# 
  2296  0216                     	;# 
  2297  0216                     	;# 
  2298  0217                     	;# 
  2299  0217                     	;# 
  2300  0218                     	;# 
  2301  0218                     	;# 
  2302  0219                     	;# 
  2303  021A                     	;# 
  2304  021B                     	;# 
  2305  021B                     	;# 
  2306  021C                     	;# 
  2307  021C                     	;# 
  2308  021D                     	;# 
  2309  021D                     	;# 
  2310  021E                     	;# 
  2311  021F                     	;# 
  2312  028C                     	;# 
  2313  028C                     	;# 
  2314  028D                     	;# 
  2315  028D                     	;# 
  2316  028E                     	;# 
  2317  028F                     	;# 
  2318  0290                     	;# 
  2319  0290                     	;# 
  2320  0291                     	;# 
  2321  0292                     	;# 
  2322  0292                     	;# 
  2323  0293                     	;# 
  2324  0293                     	;# 
  2325  0294                     	;# 
  2326  0295                     	;# 
  2327  0296                     	;# 
  2328  0296                     	;# 
  2329  0297                     	;# 
  2330  0298                     	;# 
  2331  0298                     	;# 
  2332  0299                     	;# 
  2333  0299                     	;# 
  2334  029A                     	;# 
  2335  029B                     	;# 
  2336  029C                     	;# 
  2337  029C                     	;# 
  2338  029D                     	;# 
  2339  030C                     	;# 
  2340  030C                     	;# 
  2341  030D                     	;# 
  2342  030E                     	;# 
  2343  030F                     	;# 
  2344  0310                     	;# 
  2345  0310                     	;# 
  2346  0311                     	;# 
  2347  0312                     	;# 
  2348  0313                     	;# 
  2349  0314                     	;# 
  2350  0314                     	;# 
  2351  0315                     	;# 
  2352  0316                     	;# 
  2353  0317                     	;# 
  2354  0318                     	;# 
  2355  0318                     	;# 
  2356  0319                     	;# 
  2357  031A                     	;# 
  2358  031B                     	;# 
  2359  031C                     	;# 
  2360  031C                     	;# 
  2361  031D                     	;# 
  2362  031E                     	;# 
  2363  031F                     	;# 
  2364  038C                     	;# 
  2365  038D                     	;# 
  2366  038E                     	;# 
  2367  0390                     	;# 
  2368  0391                     	;# 
  2369  0392                     	;# 
  2370  040C                     	;# 
  2371  040D                     	;# 
  2372  040E                     	;# 
  2373  040F                     	;# 
  2374  0410                     	;# 
  2375  0411                     	;# 
  2376  0416                     	;# 
  2377  0416                     	;# 
  2378  0417                     	;# 
  2379  0418                     	;# 
  2380  0418                     	;# 
  2381  0419                     	;# 
  2382  041A                     	;# 
  2383  041A                     	;# 
  2384  041B                     	;# 
  2385  041C                     	;# 
  2386  041C                     	;# 
  2387  041D                     	;# 
  2388  041E                     	;# 
  2389  041F                     	;# 
  2390  048C                     	;# 
  2391  048C                     	;# 
  2392  048D                     	;# 
  2393  048E                     	;# 
  2394  048F                     	;# 
  2395  048F                     	;# 
  2396  0490                     	;# 
  2397  0491                     	;# 
  2398  0492                     	;# 
  2399  0492                     	;# 
  2400  0493                     	;# 
  2401  0494                     	;# 
  2402  0495                     	;# 
  2403  0495                     	;# 
  2404  0496                     	;# 
  2405  0497                     	;# 
  2406  0498                     	;# 
  2407  0499                     	;# 
  2408  049A                     	;# 
  2409  049B                     	;# 
  2410  049C                     	;# 
  2411  049D                     	;# 
  2412  050C                     	;# 
  2413  050C                     	;# 
  2414  050D                     	;# 
  2415  050E                     	;# 
  2416  050F                     	;# 
  2417  050F                     	;# 
  2418  0510                     	;# 
  2419  0511                     	;# 
  2420  0512                     	;# 
  2421  0512                     	;# 
  2422  0513                     	;# 
  2423  0514                     	;# 
  2424  0515                     	;# 
  2425  0515                     	;# 
  2426  0516                     	;# 
  2427  0517                     	;# 
  2428  0518                     	;# 
  2429  0519                     	;# 
  2430  051A                     	;# 
  2431  051B                     	;# 
  2432  051C                     	;# 
  2433  051D                     	;# 
  2434  058C                     	;# 
  2435  058C                     	;# 
  2436  058D                     	;# 
  2437  058E                     	;# 
  2438  058F                     	;# 
  2439  058F                     	;# 
  2440  0590                     	;# 
  2441  0591                     	;# 
  2442  0592                     	;# 
  2443  0593                     	;# 
  2444  060C                     	;# 
  2445  060D                     	;# 
  2446  060E                     	;# 
  2447  060F                     	;# 
  2448  0610                     	;# 
  2449  0611                     	;# 
  2450  0612                     	;# 
  2451  0613                     	;# 
  2452  0614                     	;# 
  2453  0616                     	;# 
  2454  0617                     	;# 
  2455  0618                     	;# 
  2456  0619                     	;# 
  2457  061A                     	;# 
  2458  061B                     	;# 
  2459  061C                     	;# 
  2460  061D                     	;# 
  2461  061E                     	;# 
  2462  068C                     	;# 
  2463  068D                     	;# 
  2464  068E                     	;# 
  2465  068F                     	;# 
  2466  0690                     	;# 
  2467  0691                     	;# 
  2468  0692                     	;# 
  2469  0693                     	;# 
  2470  0694                     	;# 
  2471  070C                     	;# 
  2472  070D                     	;# 
  2473  070E                     	;# 
  2474  070F                     	;# 
  2475  0710                     	;# 
  2476  0711                     	;# 
  2477  0712                     	;# 
  2478  0713                     	;# 
  2479  0714                     	;# 
  2480  0716                     	;# 
  2481  0717                     	;# 
  2482  0718                     	;# 
  2483  0719                     	;# 
  2484  071A                     	;# 
  2485  071B                     	;# 
  2486  071C                     	;# 
  2487  071D                     	;# 
  2488  071E                     	;# 
  2489  0796                     	;# 
  2490  0797                     	;# 
  2491  0798                     	;# 
  2492  0799                     	;# 
  2493  079A                     	;# 
  2494  079B                     	;# 
  2495  080C                     	;# 
  2496  080D                     	;# 
  2497  080E                     	;# 
  2498  080F                     	;# 
  2499  0810                     	;# 
  2500  0811                     	;# 
  2501  0812                     	;# 
  2502  0813                     	;# 
  2503  0814                     	;# 
  2504  081A                     	;# 
  2505  081B                     	;# 
  2506  081C                     	;# 
  2507  081D                     	;# 
  2508  081E                     	;# 
  2509  081F                     	;# 
  2510  088C                     	;# 
  2511  088D                     	;# 
  2512  088E                     	;# 
  2513  088F                     	;# 
  2514  0890                     	;# 
  2515  0891                     	;# 
  2516  0892                     	;# 
  2517  0893                     	;# 
  2518  0895                     	;# 
  2519  0896                     	;# 
  2520  0897                     	;# 
  2521  0898                     	;# 
  2522  0899                     	;# 
  2523  089A                     	;# 
  2524  089B                     	;# 
  2525  090C                     	;# 
  2526  090E                     	;# 
  2527  090F                     	;# 
  2528  091F                     	;# 
  2529  091F                     	;# 
  2530  098F                     	;# 
  2531  098F                     	;# 
  2532  0990                     	;# 
  2533  0991                     	;# 
  2534  0992                     	;# 
  2535  0993                     	;# 
  2536  0994                     	;# 
  2537  0995                     	;# 
  2538  0996                     	;# 
  2539  0997                     	;# 
  2540  0E0F                     	;# 
  2541  0E10                     	;# 
  2542  0E11                     	;# 
  2543  0E12                     	;# 
  2544  0E13                     	;# 
  2545  0E14                     	;# 
  2546  0E15                     	;# 
  2547  0E16                     	;# 
  2548  0E17                     	;# 
  2549  0E18                     	;# 
  2550  0E19                     	;# 
  2551  0E1A                     	;# 
  2552  0E1B                     	;# 
  2553  0E1C                     	;# 
  2554  0E1D                     	;# 
  2555  0E1E                     	;# 
  2556  0E1F                     	;# 
  2557  0E20                     	;# 
  2558  0E21                     	;# 
  2559  0E22                     	;# 
  2560  0E23                     	;# 
  2561  0E24                     	;# 
  2562  0E25                     	;# 
  2563  0E26                     	;# 
  2564  0E27                     	;# 
  2565  0E28                     	;# 
  2566  0E29                     	;# 
  2567  0E2A                     	;# 
  2568  0E2B                     	;# 
  2569  0E2C                     	;# 
  2570  0E2D                     	;# 
  2571  0E2E                     	;# 
  2572  0E2F                     	;# 
  2573  0E30                     	;# 
  2574  0E31                     	;# 
  2575  0E32                     	;# 
  2576  0E33                     	;# 
  2577  0E34                     	;# 
  2578  0E35                     	;# 
  2579  0E36                     	;# 
  2580  0E37                     	;# 
  2581  0E8F                     	;# 
  2582  0E90                     	;# 
  2583  0E91                     	;# 
  2584  0E92                     	;# 
  2585  0E93                     	;# 
  2586  0E94                     	;# 
  2587  0E95                     	;# 
  2588  0E96                     	;# 
  2589  0E97                     	;# 
  2590  0E9C                     	;# 
  2591  0E9D                     	;# 
  2592  0E9E                     	;# 
  2593  0EA1                     	;# 
  2594  0EA2                     	;# 
  2595  0EA3                     	;# 
  2596  0EA4                     	;# 
  2597  0EA5                     	;# 
  2598  0EA9                     	;# 
  2599  0EAA                     	;# 
  2600  0EAB                     	;# 
  2601  0EAC                     	;# 
  2602  0EB1                     	;# 
  2603  0EB2                     	;# 
  2604  0EB3                     	;# 
  2605  0EB8                     	;# 
  2606  0EB9                     	;# 
  2607  0EBA                     	;# 
  2608  0EBB                     	;# 
  2609  0EBC                     	;# 
  2610  0EBD                     	;# 
  2611  0EBE                     	;# 
  2612  0EC3                     	;# 
  2613  0EC5                     	;# 
  2614  0EC6                     	;# 
  2615  0EC7                     	;# 
  2616  0EC8                     	;# 
  2617  0EC9                     	;# 
  2618  0ECA                     	;# 
  2619  0ECB                     	;# 
  2620  0ECC                     	;# 
  2621  0F10                     	;# 
  2622  0F11                     	;# 
  2623  0F12                     	;# 
  2624  0F13                     	;# 
  2625  0F14                     	;# 
  2626  0F15                     	;# 
  2627  0F16                     	;# 
  2628  0F17                     	;# 
  2629  0F18                     	;# 
  2630  0F19                     	;# 
  2631  0F1A                     	;# 
  2632  0F1B                     	;# 
  2633  0F1C                     	;# 
  2634  0F1D                     	;# 
  2635  0F1E                     	;# 
  2636  0F1F                     	;# 
  2637  0F20                     	;# 
  2638  0F21                     	;# 
  2639  0F22                     	;# 
  2640  0F23                     	;# 
  2641  0F24                     	;# 
  2642  0F25                     	;# 
  2643  0F26                     	;# 
  2644  0F27                     	;# 
  2645  0F38                     	;# 
  2646  0F39                     	;# 
  2647  0F3A                     	;# 
  2648  0F3B                     	;# 
  2649  0F3C                     	;# 
  2650  0F3D                     	;# 
  2651  0F3E                     	;# 
  2652  0F3F                     	;# 
  2653  0F40                     	;# 
  2654  0F41                     	;# 
  2655  0F43                     	;# 
  2656  0F44                     	;# 
  2657  0F45                     	;# 
  2658  0F46                     	;# 
  2659  0F47                     	;# 
  2660  0F48                     	;# 
  2661  0F49                     	;# 
  2662  0F4A                     	;# 
  2663  0F4B                     	;# 
  2664  0F4C                     	;# 
  2665  0F4E                     	;# 
  2666  0F4F                     	;# 
  2667  0F50                     	;# 
  2668  0F51                     	;# 
  2669  0F52                     	;# 
  2670  0F53                     	;# 
  2671  0F54                     	;# 
  2672  0F55                     	;# 
  2673  0F56                     	;# 
  2674  0F57                     	;# 
  2675  0F65                     	;# 
  2676  0F68                     	;# 
  2677  0F69                     	;# 
  2678  0F6A                     	;# 
  2679  0F6B                     	;# 
  2680  0FE4                     	;# 
  2681  0FE5                     	;# 
  2682  0FE6                     	;# 
  2683  0FE7                     	;# 
  2684  0FE8                     	;# 
  2685  0FE9                     	;# 
  2686  0FEA                     	;# 
  2687  0FEB                     	;# 
  2688  0FED                     	;# 
  2689  0FEE                     	;# 
  2690  0FEF                     	;# 
  2691  0000                     	;# 
  2692  0001                     	;# 
  2693  0002                     	;# 
  2694  0003                     	;# 
  2695  0004                     	;# 
  2696  0005                     	;# 
  2697  0006                     	;# 
  2698  0007                     	;# 
  2699  0008                     	;# 
  2700  0009                     	;# 
  2701  000A                     	;# 
  2702  000B                     	;# 
  2703  000C                     	;# 
  2704  000D                     	;# 
  2705  000E                     	;# 
  2706  0010                     	;# 
  2707  0011                     	;# 
  2708  0012                     	;# 
  2709  0013                     	;# 
  2710  0016                     	;# 
  2711  0017                     	;# 
  2712  0018                     	;# 
  2713  001C                     	;# 
  2714  001C                     	;# 
  2715  001D                     	;# 
  2716  001D                     	;# 
  2717  001E                     	;# 
  2718  001F                     	;# 
  2719  008C                     	;# 
  2720  008C                     	;# 
  2721  008D                     	;# 
  2722  008E                     	;# 
  2723  008E                     	;# 
  2724  008F                     	;# 
  2725  0090                     	;# 
  2726  0090                     	;# 
  2727  0091                     	;# 
  2728  0093                     	;# 
  2729  0094                     	;# 
  2730  0095                     	;# 
  2731  0096                     	;# 
  2732  0097                     	;# 
  2733  0098                     	;# 
  2734  0099                     	;# 
  2735  009A                     	;# 
  2736  009B                     	;# 
  2737  009C                     	;# 
  2738  009D                     	;# 
  2739  009E                     	;# 
  2740  010C                     	;# 
  2741  010D                     	;# 
  2742  010E                     	;# 
  2743  010E                     	;# 
  2744  010F                     	;# 
  2745  0110                     	;# 
  2746  0110                     	;# 
  2747  0111                     	;# 
  2748  0112                     	;# 
  2749  0112                     	;# 
  2750  0113                     	;# 
  2751  0114                     	;# 
  2752  0114                     	;# 
  2753  0115                     	;# 
  2754  0116                     	;# 
  2755  0116                     	;# 
  2756  0117                     	;# 
  2757  0119                     	;# 
  2758  0119                     	;# 
  2759  0119                     	;# 
  2760  011A                     	;# 
  2761  011A                     	;# 
  2762  011A                     	;# 
  2763  011B                     	;# 
  2764  011B                     	;# 
  2765  011B                     	;# 
  2766  011B                     	;# 
  2767  011B                     	;# 
  2768  011C                     	;# 
  2769  011C                     	;# 
  2770  011C                     	;# 
  2771  011D                     	;# 
  2772  011D                     	;# 
  2773  011D                     	;# 
  2774  011E                     	;# 
  2775  011E                     	;# 
  2776  011E                     	;# 
  2777  011F                     	;# 
  2778  011F                     	;# 
  2779  011F                     	;# 
  2780  011F                     	;# 
  2781  011F                     	;# 
  2782  018C                     	;# 
  2783  018D                     	;# 
  2784  018E                     	;# 
  2785  018F                     	;# 
  2786  0190                     	;# 
  2787  0191                     	;# 
  2788  0192                     	;# 
  2789  0196                     	;# 
  2790  0197                     	;# 
  2791  0198                     	;# 
  2792  0199                     	;# 
  2793  019A                     	;# 
  2794  019B                     	;# 
  2795  019C                     	;# 
  2796  020C                     	;# 
  2797  020C                     	;# 
  2798  020D                     	;# 
  2799  020E                     	;# 
  2800  020F                     	;# 
  2801  020F                     	;# 
  2802  0210                     	;# 
  2803  0210                     	;# 
  2804  0211                     	;# 
  2805  0211                     	;# 
  2806  0212                     	;# 
  2807  0212                     	;# 
  2808  0213                     	;# 
  2809  0214                     	;# 
  2810  0215                     	;# 
  2811  0215                     	;# 
  2812  0216                     	;# 
  2813  0216                     	;# 
  2814  0217                     	;# 
  2815  0217                     	;# 
  2816  0218                     	;# 
  2817  0218                     	;# 
  2818  0219                     	;# 
  2819  021A                     	;# 
  2820  021B                     	;# 
  2821  021B                     	;# 
  2822  021C                     	;# 
  2823  021C                     	;# 
  2824  021D                     	;# 
  2825  021D                     	;# 
  2826  021E                     	;# 
  2827  021F                     	;# 
  2828  028C                     	;# 
  2829  028C                     	;# 
  2830  028D                     	;# 
  2831  028D                     	;# 
  2832  028E                     	;# 
  2833  028F                     	;# 
  2834  0290                     	;# 
  2835  0290                     	;# 
  2836  0291                     	;# 
  2837  0292                     	;# 
  2838  0292                     	;# 
  2839  0293                     	;# 
  2840  0293                     	;# 
  2841  0294                     	;# 
  2842  0295                     	;# 
  2843  0296                     	;# 
  2844  0296                     	;# 
  2845  0297                     	;# 
  2846  0298                     	;# 
  2847  0298                     	;# 
  2848  0299                     	;# 
  2849  0299                     	;# 
  2850  029A                     	;# 
  2851  029B                     	;# 
  2852  029C                     	;# 
  2853  029C                     	;# 
  2854  029D                     	;# 
  2855  030C                     	;# 
  2856  030C                     	;# 
  2857  030D                     	;# 
  2858  030E                     	;# 
  2859  030F                     	;# 
  2860  0310                     	;# 
  2861  0310                     	;# 
  2862  0311                     	;# 
  2863  0312                     	;# 
  2864  0313                     	;# 
  2865  0314                     	;# 
  2866  0314                     	;# 
  2867  0315                     	;# 
  2868  0316                     	;# 
  2869  0317                     	;# 
  2870  0318                     	;# 
  2871  0318                     	;# 
  2872  0319                     	;# 
  2873  031A                     	;# 
  2874  031B                     	;# 
  2875  031C                     	;# 
  2876  031C                     	;# 
  2877  031D                     	;# 
  2878  031E                     	;# 
  2879  031F                     	;# 
  2880  038C                     	;# 
  2881  038D                     	;# 
  2882  038E                     	;# 
  2883  0390                     	;# 
  2884  0391                     	;# 
  2885  0392                     	;# 
  2886  040C                     	;# 
  2887  040D                     	;# 
  2888  040E                     	;# 
  2889  040F                     	;# 
  2890  0410                     	;# 
  2891  0411                     	;# 
  2892  0416                     	;# 
  2893  0416                     	;# 
  2894  0417                     	;# 
  2895  0418                     	;# 
  2896  0418                     	;# 
  2897  0419                     	;# 
  2898  041A                     	;# 
  2899  041A                     	;# 
  2900  041B                     	;# 
  2901  041C                     	;# 
  2902  041C                     	;# 
  2903  041D                     	;# 
  2904  041E                     	;# 
  2905  041F                     	;# 
  2906  048C                     	;# 
  2907  048C                     	;# 
  2908  048D                     	;# 
  2909  048E                     	;# 
  2910  048F                     	;# 
  2911  048F                     	;# 
  2912  0490                     	;# 
  2913  0491                     	;# 
  2914  0492                     	;# 
  2915  0492                     	;# 
  2916  0493                     	;# 
  2917  0494                     	;# 
  2918  0495                     	;# 
  2919  0495                     	;# 
  2920  0496                     	;# 
  2921  0497                     	;# 
  2922  0498                     	;# 
  2923  0499                     	;# 
  2924  049A                     	;# 
  2925  049B                     	;# 
  2926  049C                     	;# 
  2927  049D                     	;# 
  2928  050C                     	;# 
  2929  050C                     	;# 
  2930  050D                     	;# 
  2931  050E                     	;# 
  2932  050F                     	;# 
  2933  050F                     	;# 
  2934  0510                     	;# 
  2935  0511                     	;# 
  2936  0512                     	;# 
  2937  0512                     	;# 
  2938  0513                     	;# 
  2939  0514                     	;# 
  2940  0515                     	;# 
  2941  0515                     	;# 
  2942  0516                     	;# 
  2943  0517                     	;# 
  2944  0518                     	;# 
  2945  0519                     	;# 
  2946  051A                     	;# 
  2947  051B                     	;# 
  2948  051C                     	;# 
  2949  051D                     	;# 
  2950  058C                     	;# 
  2951  058C                     	;# 
  2952  058D                     	;# 
  2953  058E                     	;# 
  2954  058F                     	;# 
  2955  058F                     	;# 
  2956  0590                     	;# 
  2957  0591                     	;# 
  2958  0592                     	;# 
  2959  0593                     	;# 
  2960  060C                     	;# 
  2961  060D                     	;# 
  2962  060E                     	;# 
  2963  060F                     	;# 
  2964  0610                     	;# 
  2965  0611                     	;# 
  2966  0612                     	;# 
  2967  0613                     	;# 
  2968  0614                     	;# 
  2969  0616                     	;# 
  2970  0617                     	;# 
  2971  0618                     	;# 
  2972  0619                     	;# 
  2973  061A                     	;# 
  2974  061B                     	;# 
  2975  061C                     	;# 
  2976  061D                     	;# 
  2977  061E                     	;# 
  2978  068C                     	;# 
  2979  068D                     	;# 
  2980  068E                     	;# 
  2981  068F                     	;# 
  2982  0690                     	;# 
  2983  0691                     	;# 
  2984  0692                     	;# 
  2985  0693                     	;# 
  2986  0694                     	;# 
  2987  070C                     	;# 
  2988  070D                     	;# 
  2989  070E                     	;# 
  2990  070F                     	;# 
  2991  0710                     	;# 
  2992  0711                     	;# 
  2993  0712                     	;# 
  2994  0713                     	;# 
  2995  0714                     	;# 
  2996  0716                     	;# 
  2997  0717                     	;# 
  2998  0718                     	;# 
  2999  0719                     	;# 
  3000  071A                     	;# 
  3001  071B                     	;# 
  3002  071C                     	;# 
  3003  071D                     	;# 
  3004  071E                     	;# 
  3005  0796                     	;# 
  3006  0797                     	;# 
  3007  0798                     	;# 
  3008  0799                     	;# 
  3009  079A                     	;# 
  3010  079B                     	;# 
  3011  080C                     	;# 
  3012  080D                     	;# 
  3013  080E                     	;# 
  3014  080F                     	;# 
  3015  0810                     	;# 
  3016  0811                     	;# 
  3017  0812                     	;# 
  3018  0813                     	;# 
  3019  0814                     	;# 
  3020  081A                     	;# 
  3021  081B                     	;# 
  3022  081C                     	;# 
  3023  081D                     	;# 
  3024  081E                     	;# 
  3025  081F                     	;# 
  3026  088C                     	;# 
  3027  088D                     	;# 
  3028  088E                     	;# 
  3029  088F                     	;# 
  3030  0890                     	;# 
  3031  0891                     	;# 
  3032  0892                     	;# 
  3033  0893                     	;# 
  3034  0895                     	;# 
  3035  0896                     	;# 
  3036  0897                     	;# 
  3037  0898                     	;# 
  3038  0899                     	;# 
  3039  089A                     	;# 
  3040  089B                     	;# 
  3041  090C                     	;# 
  3042  090E                     	;# 
  3043  090F                     	;# 
  3044  091F                     	;# 
  3045  091F                     	;# 
  3046  098F                     	;# 
  3047  098F                     	;# 
  3048  0990                     	;# 
  3049  0991                     	;# 
  3050  0992                     	;# 
  3051  0993                     	;# 
  3052  0994                     	;# 
  3053  0995                     	;# 
  3054  0996                     	;# 
  3055  0997                     	;# 
  3056  0E0F                     	;# 
  3057  0E10                     	;# 
  3058  0E11                     	;# 
  3059  0E12                     	;# 
  3060  0E13                     	;# 
  3061  0E14                     	;# 
  3062  0E15                     	;# 
  3063  0E16                     	;# 
  3064  0E17                     	;# 
  3065  0E18                     	;# 
  3066  0E19                     	;# 
  3067  0E1A                     	;# 
  3068  0E1B                     	;# 
  3069  0E1C                     	;# 
  3070  0E1D                     	;# 
  3071  0E1E                     	;# 
  3072  0E1F                     	;# 
  3073  0E20                     	;# 
  3074  0E21                     	;# 
  3075  0E22                     	;# 
  3076  0E23                     	;# 
  3077  0E24                     	;# 
  3078  0E25                     	;# 
  3079  0E26                     	;# 
  3080  0E27                     	;# 
  3081  0E28                     	;# 
  3082  0E29                     	;# 
  3083  0E2A                     	;# 
  3084  0E2B                     	;# 
  3085  0E2C                     	;# 
  3086  0E2D                     	;# 
  3087  0E2E                     	;# 
  3088  0E2F                     	;# 
  3089  0E30                     	;# 
  3090  0E31                     	;# 
  3091  0E32                     	;# 
  3092  0E33                     	;# 
  3093  0E34                     	;# 
  3094  0E35                     	;# 
  3095  0E36                     	;# 
  3096  0E37                     	;# 
  3097  0E8F                     	;# 
  3098  0E90                     	;# 
  3099  0E91                     	;# 
  3100  0E92                     	;# 
  3101  0E93                     	;# 
  3102  0E94                     	;# 
  3103  0E95                     	;# 
  3104  0E96                     	;# 
  3105  0E97                     	;# 
  3106  0E9C                     	;# 
  3107  0E9D                     	;# 
  3108  0E9E                     	;# 
  3109  0EA1                     	;# 
  3110  0EA2                     	;# 
  3111  0EA3                     	;# 
  3112  0EA4                     	;# 
  3113  0EA5                     	;# 
  3114  0EA9                     	;# 
  3115  0EAA                     	;# 
  3116  0EAB                     	;# 
  3117  0EAC                     	;# 
  3118  0EB1                     	;# 
  3119  0EB2                     	;# 
  3120  0EB3                     	;# 
  3121  0EB8                     	;# 
  3122  0EB9                     	;# 
  3123  0EBA                     	;# 
  3124  0EBB                     	;# 
  3125  0EBC                     	;# 
  3126  0EBD                     	;# 
  3127  0EBE                     	;# 
  3128  0EC3                     	;# 
  3129  0EC5                     	;# 
  3130  0EC6                     	;# 
  3131  0EC7                     	;# 
  3132  0EC8                     	;# 
  3133  0EC9                     	;# 
  3134  0ECA                     	;# 
  3135  0ECB                     	;# 
  3136  0ECC                     	;# 
  3137  0F10                     	;# 
  3138  0F11                     	;# 
  3139  0F12                     	;# 
  3140  0F13                     	;# 
  3141  0F14                     	;# 
  3142  0F15                     	;# 
  3143  0F16                     	;# 
  3144  0F17                     	;# 
  3145  0F18                     	;# 
  3146  0F19                     	;# 
  3147  0F1A                     	;# 
  3148  0F1B                     	;# 
  3149  0F1C                     	;# 
  3150  0F1D                     	;# 
  3151  0F1E                     	;# 
  3152  0F1F                     	;# 
  3153  0F20                     	;# 
  3154  0F21                     	;# 
  3155  0F22                     	;# 
  3156  0F23                     	;# 
  3157  0F24                     	;# 
  3158  0F25                     	;# 
  3159  0F26                     	;# 
  3160  0F27                     	;# 
  3161  0F38                     	;# 
  3162  0F39                     	;# 
  3163  0F3A                     	;# 
  3164  0F3B                     	;# 
  3165  0F3C                     	;# 
  3166  0F3D                     	;# 
  3167  0F3E                     	;# 
  3168  0F3F                     	;# 
  3169  0F40                     	;# 
  3170  0F41                     	;# 
  3171  0F43                     	;# 
  3172  0F44                     	;# 
  3173  0F45                     	;# 
  3174  0F46                     	;# 
  3175  0F47                     	;# 
  3176  0F48                     	;# 
  3177  0F49                     	;# 
  3178  0F4A                     	;# 
  3179  0F4B                     	;# 
  3180  0F4C                     	;# 
  3181  0F4E                     	;# 
  3182  0F4F                     	;# 
  3183  0F50                     	;# 
  3184  0F51                     	;# 
  3185  0F52                     	;# 
  3186  0F53                     	;# 
  3187  0F54                     	;# 
  3188  0F55                     	;# 
  3189  0F56                     	;# 
  3190  0F57                     	;# 
  3191  0F65                     	;# 
  3192  0F68                     	;# 
  3193  0F69                     	;# 
  3194  0F6A                     	;# 
  3195  0F6B                     	;# 
  3196  0FE4                     	;# 
  3197  0FE5                     	;# 
  3198  0FE6                     	;# 
  3199  0FE7                     	;# 
  3200  0FE8                     	;# 
  3201  0FE9                     	;# 
  3202  0FEA                     	;# 
  3203  0FEB                     	;# 
  3204  0FED                     	;# 
  3205  0FEE                     	;# 
  3206  0FEF                     	;# 
  3207  0000                     	;# 
  3208  0001                     	;# 
  3209  0002                     	;# 
  3210  0003                     	;# 
  3211  0004                     	;# 
  3212  0005                     	;# 
  3213  0006                     	;# 
  3214  0007                     	;# 
  3215  0008                     	;# 
  3216  0009                     	;# 
  3217  000A                     	;# 
  3218  000B                     	;# 
  3219  000C                     	;# 
  3220  000D                     	;# 
  3221  000E                     	;# 
  3222  0010                     	;# 
  3223  0011                     	;# 
  3224  0012                     	;# 
  3225  0013                     	;# 
  3226  0016                     	;# 
  3227  0017                     	;# 
  3228  0018                     	;# 
  3229  001C                     	;# 
  3230  001C                     	;# 
  3231  001D                     	;# 
  3232  001D                     	;# 
  3233  001E                     	;# 
  3234  001F                     	;# 
  3235  008C                     	;# 
  3236  008C                     	;# 
  3237  008D                     	;# 
  3238  008E                     	;# 
  3239  008E                     	;# 
  3240  008F                     	;# 
  3241  0090                     	;# 
  3242  0090                     	;# 
  3243  0091                     	;# 
  3244  0093                     	;# 
  3245  0094                     	;# 
  3246  0095                     	;# 
  3247  0096                     	;# 
  3248  0097                     	;# 
  3249  0098                     	;# 
  3250  0099                     	;# 
  3251  009A                     	;# 
  3252  009B                     	;# 
  3253  009C                     	;# 
  3254  009D                     	;# 
  3255  009E                     	;# 
  3256  010C                     	;# 
  3257  010D                     	;# 
  3258  010E                     	;# 
  3259  010E                     	;# 
  3260  010F                     	;# 
  3261  0110                     	;# 
  3262  0110                     	;# 
  3263  0111                     	;# 
  3264  0112                     	;# 
  3265  0112                     	;# 
  3266  0113                     	;# 
  3267  0114                     	;# 
  3268  0114                     	;# 
  3269  0115                     	;# 
  3270  0116                     	;# 
  3271  0116                     	;# 
  3272  0117                     	;# 
  3273  0119                     	;# 
  3274  0119                     	;# 
  3275  0119                     	;# 
  3276  011A                     	;# 
  3277  011A                     	;# 
  3278  011A                     	;# 
  3279  011B                     	;# 
  3280  011B                     	;# 
  3281  011B                     	;# 
  3282  011B                     	;# 
  3283  011B                     	;# 
  3284  011C                     	;# 
  3285  011C                     	;# 
  3286  011C                     	;# 
  3287  011D                     	;# 
  3288  011D                     	;# 
  3289  011D                     	;# 
  3290  011E                     	;# 
  3291  011E                     	;# 
  3292  011E                     	;# 
  3293  011F                     	;# 
  3294  011F                     	;# 
  3295  011F                     	;# 
  3296  011F                     	;# 
  3297  011F                     	;# 
  3298  018C                     	;# 
  3299  018D                     	;# 
  3300  018E                     	;# 
  3301  018F                     	;# 
  3302  0190                     	;# 
  3303  0191                     	;# 
  3304  0192                     	;# 
  3305  0196                     	;# 
  3306  0197                     	;# 
  3307  0198                     	;# 
  3308  0199                     	;# 
  3309  019A                     	;# 
  3310  019B                     	;# 
  3311  019C                     	;# 
  3312  020C                     	;# 
  3313  020C                     	;# 
  3314  020D                     	;# 
  3315  020E                     	;# 
  3316  020F                     	;# 
  3317  020F                     	;# 
  3318  0210                     	;# 
  3319  0210                     	;# 
  3320  0211                     	;# 
  3321  0211                     	;# 
  3322  0212                     	;# 
  3323  0212                     	;# 
  3324  0213                     	;# 
  3325  0214                     	;# 
  3326  0215                     	;# 
  3327  0215                     	;# 
  3328  0216                     	;# 
  3329  0216                     	;# 
  3330  0217                     	;# 
  3331  0217                     	;# 
  3332  0218                     	;# 
  3333  0218                     	;# 
  3334  0219                     	;# 
  3335  021A                     	;# 
  3336  021B                     	;# 
  3337  021B                     	;# 
  3338  021C                     	;# 
  3339  021C                     	;# 
  3340  021D                     	;# 
  3341  021D                     	;# 
  3342  021E                     	;# 
  3343  021F                     	;# 
  3344  028C                     	;# 
  3345  028C                     	;# 
  3346  028D                     	;# 
  3347  028D                     	;# 
  3348  028E                     	;# 
  3349  028F                     	;# 
  3350  0290                     	;# 
  3351  0290                     	;# 
  3352  0291                     	;# 
  3353  0292                     	;# 
  3354  0292                     	;# 
  3355  0293                     	;# 
  3356  0293                     	;# 
  3357  0294                     	;# 
  3358  0295                     	;# 
  3359  0296                     	;# 
  3360  0296                     	;# 
  3361  0297                     	;# 
  3362  0298                     	;# 
  3363  0298                     	;# 
  3364  0299                     	;# 
  3365  0299                     	;# 
  3366  029A                     	;# 
  3367  029B                     	;# 
  3368  029C                     	;# 
  3369  029C                     	;# 
  3370  029D                     	;# 
  3371  030C                     	;# 
  3372  030C                     	;# 
  3373  030D                     	;# 
  3374  030E                     	;# 
  3375  030F                     	;# 
  3376  0310                     	;# 
  3377  0310                     	;# 
  3378  0311                     	;# 
  3379  0312                     	;# 
  3380  0313                     	;# 
  3381  0314                     	;# 
  3382  0314                     	;# 
  3383  0315                     	;# 
  3384  0316                     	;# 
  3385  0317                     	;# 
  3386  0318                     	;# 
  3387  0318                     	;# 
  3388  0319                     	;# 
  3389  031A                     	;# 
  3390  031B                     	;# 
  3391  031C                     	;# 
  3392  031C                     	;# 
  3393  031D                     	;# 
  3394  031E                     	;# 
  3395  031F                     	;# 
  3396  038C                     	;# 
  3397  038D                     	;# 
  3398  038E                     	;# 
  3399  0390                     	;# 
  3400  0391                     	;# 
  3401  0392                     	;# 
  3402  040C                     	;# 
  3403  040D                     	;# 
  3404  040E                     	;# 
  3405  040F                     	;# 
  3406  0410                     	;# 
  3407  0411                     	;# 
  3408  0416                     	;# 
  3409  0416                     	;# 
  3410  0417                     	;# 
  3411  0418                     	;# 
  3412  0418                     	;# 
  3413  0419                     	;# 
  3414  041A                     	;# 
  3415  041A                     	;# 
  3416  041B                     	;# 
  3417  041C                     	;# 
  3418  041C                     	;# 
  3419  041D                     	;# 
  3420  041E                     	;# 
  3421  041F                     	;# 
  3422  048C                     	;# 
  3423  048C                     	;# 
  3424  048D                     	;# 
  3425  048E                     	;# 
  3426  048F                     	;# 
  3427  048F                     	;# 
  3428  0490                     	;# 
  3429  0491                     	;# 
  3430  0492                     	;# 
  3431  0492                     	;# 
  3432  0493                     	;# 
  3433  0494                     	;# 
  3434  0495                     	;# 
  3435  0495                     	;# 
  3436  0496                     	;# 
  3437  0497                     	;# 
  3438  0498                     	;# 
  3439  0499                     	;# 
  3440  049A                     	;# 
  3441  049B                     	;# 
  3442  049C                     	;# 
  3443  049D                     	;# 
  3444  050C                     	;# 
  3445  050C                     	;# 
  3446  050D                     	;# 
  3447  050E                     	;# 
  3448  050F                     	;# 
  3449  050F                     	;# 
  3450  0510                     	;# 
  3451  0511                     	;# 
  3452  0512                     	;# 
  3453  0512                     	;# 
  3454  0513                     	;# 
  3455  0514                     	;# 
  3456  0515                     	;# 
  3457  0515                     	;# 
  3458  0516                     	;# 
  3459  0517                     	;# 
  3460  0518                     	;# 
  3461  0519                     	;# 
  3462  051A                     	;# 
  3463  051B                     	;# 
  3464  051C                     	;# 
  3465  051D                     	;# 
  3466  058C                     	;# 
  3467  058C                     	;# 
  3468  058D                     	;# 
  3469  058E                     	;# 
  3470  058F                     	;# 
  3471  058F                     	;# 
  3472  0590                     	;# 
  3473  0591                     	;# 
  3474  0592                     	;# 
  3475  0593                     	;# 
  3476  060C                     	;# 
  3477  060D                     	;# 
  3478  060E                     	;# 
  3479  060F                     	;# 
  3480  0610                     	;# 
  3481  0611                     	;# 
  3482  0612                     	;# 
  3483  0613                     	;# 
  3484  0614                     	;# 
  3485  0616                     	;# 
  3486  0617                     	;# 
  3487  0618                     	;# 
  3488  0619                     	;# 
  3489  061A                     	;# 
  3490  061B                     	;# 
  3491  061C                     	;# 
  3492  061D                     	;# 
  3493  061E                     	;# 
  3494  068C                     	;# 
  3495  068D                     	;# 
  3496  068E                     	;# 
  3497  068F                     	;# 
  3498  0690                     	;# 
  3499  0691                     	;# 
  3500  0692                     	;# 
  3501  0693                     	;# 
  3502  0694                     	;# 
  3503  070C                     	;# 
  3504  070D                     	;# 
  3505  070E                     	;# 
  3506  070F                     	;# 
  3507  0710                     	;# 
  3508  0711                     	;# 
  3509  0712                     	;# 
  3510  0713                     	;# 
  3511  0714                     	;# 
  3512  0716                     	;# 
  3513  0717                     	;# 
  3514  0718                     	;# 
  3515  0719                     	;# 
  3516  071A                     	;# 
  3517  071B                     	;# 
  3518  071C                     	;# 
  3519  071D                     	;# 
  3520  071E                     	;# 
  3521  0796                     	;# 
  3522  0797                     	;# 
  3523  0798                     	;# 
  3524  0799                     	;# 
  3525  079A                     	;# 
  3526  079B                     	;# 
  3527  080C                     	;# 
  3528  080D                     	;# 
  3529  080E                     	;# 
  3530  080F                     	;# 
  3531  0810                     	;# 
  3532  0811                     	;# 
  3533  0812                     	;# 
  3534  0813                     	;# 
  3535  0814                     	;# 
  3536  081A                     	;# 
  3537  081B                     	;# 
  3538  081C                     	;# 
  3539  081D                     	;# 
  3540  081E                     	;# 
  3541  081F                     	;# 
  3542  088C                     	;# 
  3543  088D                     	;# 
  3544  088E                     	;# 
  3545  088F                     	;# 
  3546  0890                     	;# 
  3547  0891                     	;# 
  3548  0892                     	;# 
  3549  0893                     	;# 
  3550  0895                     	;# 
  3551  0896                     	;# 
  3552  0897                     	;# 
  3553  0898                     	;# 
  3554  0899                     	;# 
  3555  089A                     	;# 
  3556  089B                     	;# 
  3557  090C                     	;# 
  3558  090E                     	;# 
  3559  090F                     	;# 
  3560  091F                     	;# 
  3561  091F                     	;# 
  3562  098F                     	;# 
  3563  098F                     	;# 
  3564  0990                     	;# 
  3565  0991                     	;# 
  3566  0992                     	;# 
  3567  0993                     	;# 
  3568  0994                     	;# 
  3569  0995                     	;# 
  3570  0996                     	;# 
  3571  0997                     	;# 
  3572  0E0F                     	;# 
  3573  0E10                     	;# 
  3574  0E11                     	;# 
  3575  0E12                     	;# 
  3576  0E13                     	;# 
  3577  0E14                     	;# 
  3578  0E15                     	;# 
  3579  0E16                     	;# 
  3580  0E17                     	;# 
  3581  0E18                     	;# 
  3582  0E19                     	;# 
  3583  0E1A                     	;# 
  3584  0E1B                     	;# 
  3585  0E1C                     	;# 
  3586  0E1D                     	;# 
  3587  0E1E                     	;# 
  3588  0E1F                     	;# 
  3589  0E20                     	;# 
  3590  0E21                     	;# 
  3591  0E22                     	;# 
  3592  0E23                     	;# 
  3593  0E24                     	;# 
  3594  0E25                     	;# 
  3595  0E26                     	;# 
  3596  0E27                     	;# 
  3597  0E28                     	;# 
  3598  0E29                     	;# 
  3599  0E2A                     	;# 
  3600  0E2B                     	;# 
  3601  0E2C                     	;# 
  3602  0E2D                     	;# 
  3603  0E2E                     	;# 
  3604  0E2F                     	;# 
  3605  0E30                     	;# 
  3606  0E31                     	;# 
  3607  0E32                     	;# 
  3608  0E33                     	;# 
  3609  0E34                     	;# 
  3610  0E35                     	;# 
  3611  0E36                     	;# 
  3612  0E37                     	;# 
  3613  0E8F                     	;# 
  3614  0E90                     	;# 
  3615  0E91                     	;# 
  3616  0E92                     	;# 
  3617  0E93                     	;# 
  3618  0E94                     	;# 
  3619  0E95                     	;# 
  3620  0E96                     	;# 
  3621  0E97                     	;# 
  3622  0E9C                     	;# 
  3623  0E9D                     	;# 
  3624  0E9E                     	;# 
  3625  0EA1                     	;# 
  3626  0EA2                     	;# 
  3627  0EA3                     	;# 
  3628  0EA4                     	;# 
  3629  0EA5                     	;# 
  3630  0EA9                     	;# 
  3631  0EAA                     	;# 
  3632  0EAB                     	;# 
  3633  0EAC                     	;# 
  3634  0EB1                     	;# 
  3635  0EB2                     	;# 
  3636  0EB3                     	;# 
  3637  0EB8                     	;# 
  3638  0EB9                     	;# 
  3639  0EBA                     	;# 
  3640  0EBB                     	;# 
  3641  0EBC                     	;# 
  3642  0EBD                     	;# 
  3643  0EBE                     	;# 
  3644  0EC3                     	;# 
  3645  0EC5                     	;# 
  3646  0EC6                     	;# 
  3647  0EC7                     	;# 
  3648  0EC8                     	;# 
  3649  0EC9                     	;# 
  3650  0ECA                     	;# 
  3651  0ECB                     	;# 
  3652  0ECC                     	;# 
  3653  0F10                     	;# 
  3654  0F11                     	;# 
  3655  0F12                     	;# 
  3656  0F13                     	;# 
  3657  0F14                     	;# 
  3658  0F15                     	;# 
  3659  0F16                     	;# 
  3660  0F17                     	;# 
  3661  0F18                     	;# 
  3662  0F19                     	;# 
  3663  0F1A                     	;# 
  3664  0F1B                     	;# 
  3665  0F1C                     	;# 
  3666  0F1D                     	;# 
  3667  0F1E                     	;# 
  3668  0F1F                     	;# 
  3669  0F20                     	;# 
  3670  0F21                     	;# 
  3671  0F22                     	;# 
  3672  0F23                     	;# 
  3673  0F24                     	;# 
  3674  0F25                     	;# 
  3675  0F26                     	;# 
  3676  0F27                     	;# 
  3677  0F38                     	;# 
  3678  0F39                     	;# 
  3679  0F3A                     	;# 
  3680  0F3B                     	;# 
  3681  0F3C                     	;# 
  3682  0F3D                     	;# 
  3683  0F3E                     	;# 
  3684  0F3F                     	;# 
  3685  0F40                     	;# 
  3686  0F41                     	;# 
  3687  0F43                     	;# 
  3688  0F44                     	;# 
  3689  0F45                     	;# 
  3690  0F46                     	;# 
  3691  0F47                     	;# 
  3692  0F48                     	;# 
  3693  0F49                     	;# 
  3694  0F4A                     	;# 
  3695  0F4B                     	;# 
  3696  0F4C                     	;# 
  3697  0F4E                     	;# 
  3698  0F4F                     	;# 
  3699  0F50                     	;# 
  3700  0F51                     	;# 
  3701  0F52                     	;# 
  3702  0F53                     	;# 
  3703  0F54                     	;# 
  3704  0F55                     	;# 
  3705  0F56                     	;# 
  3706  0F57                     	;# 
  3707  0F65                     	;# 
  3708  0F68                     	;# 
  3709  0F69                     	;# 
  3710  0F6A                     	;# 
  3711  0F6B                     	;# 
  3712  0FE4                     	;# 
  3713  0FE5                     	;# 
  3714  0FE6                     	;# 
  3715  0FE7                     	;# 
  3716  0FE8                     	;# 
  3717  0FE9                     	;# 
  3718  0FEA                     	;# 
  3719  0FEB                     	;# 
  3720  0FED                     	;# 
  3721  0FEE                     	;# 
  3722  0FEF                     	;# 
  3723  0000                     	;# 
  3724  0001                     	;# 
  3725  0002                     	;# 
  3726  0003                     	;# 
  3727  0004                     	;# 
  3728  0005                     	;# 
  3729  0006                     	;# 
  3730  0007                     	;# 
  3731  0008                     	;# 
  3732  0009                     	;# 
  3733  000A                     	;# 
  3734  000B                     	;# 
  3735  000C                     	;# 
  3736  000D                     	;# 
  3737  000E                     	;# 
  3738  0010                     	;# 
  3739  0011                     	;# 
  3740  0012                     	;# 
  3741  0013                     	;# 
  3742  0016                     	;# 
  3743  0017                     	;# 
  3744  0018                     	;# 
  3745  001C                     	;# 
  3746  001C                     	;# 
  3747  001D                     	;# 
  3748  001D                     	;# 
  3749  001E                     	;# 
  3750  001F                     	;# 
  3751  008C                     	;# 
  3752  008C                     	;# 
  3753  008D                     	;# 
  3754  008E                     	;# 
  3755  008E                     	;# 
  3756  008F                     	;# 
  3757  0090                     	;# 
  3758  0090                     	;# 
  3759  0091                     	;# 
  3760  0093                     	;# 
  3761  0094                     	;# 
  3762  0095                     	;# 
  3763  0096                     	;# 
  3764  0097                     	;# 
  3765  0098                     	;# 
  3766  0099                     	;# 
  3767  009A                     	;# 
  3768  009B                     	;# 
  3769  009C                     	;# 
  3770  009D                     	;# 
  3771  009E                     	;# 
  3772  010C                     	;# 
  3773  010D                     	;# 
  3774  010E                     	;# 
  3775  010E                     	;# 
  3776  010F                     	;# 
  3777  0110                     	;# 
  3778  0110                     	;# 
  3779  0111                     	;# 
  3780  0112                     	;# 
  3781  0112                     	;# 
  3782  0113                     	;# 
  3783  0114                     	;# 
  3784  0114                     	;# 
  3785  0115                     	;# 
  3786  0116                     	;# 
  3787  0116                     	;# 
  3788  0117                     	;# 
  3789  0119                     	;# 
  3790  0119                     	;# 
  3791  0119                     	;# 
  3792  011A                     	;# 
  3793  011A                     	;# 
  3794  011A                     	;# 
  3795  011B                     	;# 
  3796  011B                     	;# 
  3797  011B                     	;# 
  3798  011B                     	;# 
  3799  011B                     	;# 
  3800  011C                     	;# 
  3801  011C                     	;# 
  3802  011C                     	;# 
  3803  011D                     	;# 
  3804  011D                     	;# 
  3805  011D                     	;# 
  3806  011E                     	;# 
  3807  011E                     	;# 
  3808  011E                     	;# 
  3809  011F                     	;# 
  3810  011F                     	;# 
  3811  011F                     	;# 
  3812  011F                     	;# 
  3813  011F                     	;# 
  3814  018C                     	;# 
  3815  018D                     	;# 
  3816  018E                     	;# 
  3817  018F                     	;# 
  3818  0190                     	;# 
  3819  0191                     	;# 
  3820  0192                     	;# 
  3821  0196                     	;# 
  3822  0197                     	;# 
  3823  0198                     	;# 
  3824  0199                     	;# 
  3825  019A                     	;# 
  3826  019B                     	;# 
  3827  019C                     	;# 
  3828  020C                     	;# 
  3829  020C                     	;# 
  3830  020D                     	;# 
  3831  020E                     	;# 
  3832  020F                     	;# 
  3833  020F                     	;# 
  3834  0210                     	;# 
  3835  0210                     	;# 
  3836  0211                     	;# 
  3837  0211                     	;# 
  3838  0212                     	;# 
  3839  0212                     	;# 
  3840  0213                     	;# 
  3841  0214                     	;# 
  3842  0215                     	;# 
  3843  0215                     	;# 
  3844  0216                     	;# 
  3845  0216                     	;# 
  3846  0217                     	;# 
  3847  0217                     	;# 
  3848  0218                     	;# 
  3849  0218                     	;# 
  3850  0219                     	;# 
  3851  021A                     	;# 
  3852  021B                     	;# 
  3853  021B                     	;# 
  3854  021C                     	;# 
  3855  021C                     	;# 
  3856  021D                     	;# 
  3857  021D                     	;# 
  3858  021E                     	;# 
  3859  021F                     	;# 
  3860  028C                     	;# 
  3861  028C                     	;# 
  3862  028D                     	;# 
  3863  028D                     	;# 
  3864  028E                     	;# 
  3865  028F                     	;# 
  3866  0290                     	;# 
  3867  0290                     	;# 
  3868  0291                     	;# 
  3869  0292                     	;# 
  3870  0292                     	;# 
  3871  0293                     	;# 
  3872  0293                     	;# 
  3873  0294                     	;# 
  3874  0295                     	;# 
  3875  0296                     	;# 
  3876  0296                     	;# 
  3877  0297                     	;# 
  3878  0298                     	;# 
  3879  0298                     	;# 
  3880  0299                     	;# 
  3881  0299                     	;# 
  3882  029A                     	;# 
  3883  029B                     	;# 
  3884  029C                     	;# 
  3885  029C                     	;# 
  3886  029D                     	;# 
  3887  030C                     	;# 
  3888  030C                     	;# 
  3889  030D                     	;# 
  3890  030E                     	;# 
  3891  030F                     	;# 
  3892  0310                     	;# 
  3893  0310                     	;# 
  3894  0311                     	;# 
  3895  0312                     	;# 
  3896  0313                     	;# 
  3897  0314                     	;# 
  3898  0314                     	;# 
  3899  0315                     	;# 
  3900  0316                     	;# 
  3901  0317                     	;# 
  3902  0318                     	;# 
  3903  0318                     	;# 
  3904  0319                     	;# 
  3905  031A                     	;# 
  3906  031B                     	;# 
  3907  031C                     	;# 
  3908  031C                     	;# 
  3909  031D                     	;# 
  3910  031E                     	;# 
  3911  031F                     	;# 
  3912  038C                     	;# 
  3913  038D                     	;# 
  3914  038E                     	;# 
  3915  0390                     	;# 
  3916  0391                     	;# 
  3917  0392                     	;# 
  3918  040C                     	;# 
  3919  040D                     	;# 
  3920  040E                     	;# 
  3921  040F                     	;# 
  3922  0410                     	;# 
  3923  0411                     	;# 
  3924  0416                     	;# 
  3925  0416                     	;# 
  3926  0417                     	;# 
  3927  0418                     	;# 
  3928  0418                     	;# 
  3929  0419                     	;# 
  3930  041A                     	;# 
  3931  041A                     	;# 
  3932  041B                     	;# 
  3933  041C                     	;# 
  3934  041C                     	;# 
  3935  041D                     	;# 
  3936  041E                     	;# 
  3937  041F                     	;# 
  3938  048C                     	;# 
  3939  048C                     	;# 
  3940  048D                     	;# 
  3941  048E                     	;# 
  3942  048F                     	;# 
  3943  048F                     	;# 
  3944  0490                     	;# 
  3945  0491                     	;# 
  3946  0492                     	;# 
  3947  0492                     	;# 
  3948  0493                     	;# 
  3949  0494                     	;# 
  3950  0495                     	;# 
  3951  0495                     	;# 
  3952  0496                     	;# 
  3953  0497                     	;# 
  3954  0498                     	;# 
  3955  0499                     	;# 
  3956  049A                     	;# 
  3957  049B                     	;# 
  3958  049C                     	;# 
  3959  049D                     	;# 
  3960  050C                     	;# 
  3961  050C                     	;# 
  3962  050D                     	;# 
  3963  050E                     	;# 
  3964  050F                     	;# 
  3965  050F                     	;# 
  3966  0510                     	;# 
  3967  0511                     	;# 
  3968  0512                     	;# 
  3969  0512                     	;# 
  3970  0513                     	;# 
  3971  0514                     	;# 
  3972  0515                     	;# 
  3973  0515                     	;# 
  3974  0516                     	;# 
  3975  0517                     	;# 
  3976  0518                     	;# 
  3977  0519                     	;# 
  3978  051A                     	;# 
  3979  051B                     	;# 
  3980  051C                     	;# 
  3981  051D                     	;# 
  3982  058C                     	;# 
  3983  058C                     	;# 
  3984  058D                     	;# 
  3985  058E                     	;# 
  3986  058F                     	;# 
  3987  058F                     	;# 
  3988  0590                     	;# 
  3989  0591                     	;# 
  3990  0592                     	;# 
  3991  0593                     	;# 
  3992  060C                     	;# 
  3993  060D                     	;# 
  3994  060E                     	;# 
  3995  060F                     	;# 
  3996  0610                     	;# 
  3997  0611                     	;# 
  3998  0612                     	;# 
  3999  0613                     	;# 
  4000  0614                     	;# 
  4001  0616                     	;# 
  4002  0617                     	;# 
  4003  0618                     	;# 
  4004  0619                     	;# 
  4005  061A                     	;# 
  4006  061B                     	;# 
  4007  061C                     	;# 
  4008  061D                     	;# 
  4009  061E                     	;# 
  4010  068C                     	;# 
  4011  068D                     	;# 
  4012  068E                     	;# 
  4013  068F                     	;# 
  4014  0690                     	;# 
  4015  0691                     	;# 
  4016  0692                     	;# 
  4017  0693                     	;# 
  4018  0694                     	;# 
  4019  070C                     	;# 
  4020  070D                     	;# 
  4021  070E                     	;# 
  4022  070F                     	;# 
  4023  0710                     	;# 
  4024  0711                     	;# 
  4025  0712                     	;# 
  4026  0713                     	;# 
  4027  0714                     	;# 
  4028  0716                     	;# 
  4029  0717                     	;# 
  4030  0718                     	;# 
  4031  0719                     	;# 
  4032  071A                     	;# 
  4033  071B                     	;# 
  4034  071C                     	;# 
  4035  071D                     	;# 
  4036  071E                     	;# 
  4037  0796                     	;# 
  4038  0797                     	;# 
  4039  0798                     	;# 
  4040  0799                     	;# 
  4041  079A                     	;# 
  4042  079B                     	;# 
  4043  080C                     	;# 
  4044  080D                     	;# 
  4045  080E                     	;# 
  4046  080F                     	;# 
  4047  0810                     	;# 
  4048  0811                     	;# 
  4049  0812                     	;# 
  4050  0813                     	;# 
  4051  0814                     	;# 
  4052  081A                     	;# 
  4053  081B                     	;# 
  4054  081C                     	;# 
  4055  081D                     	;# 
  4056  081E                     	;# 
  4057  081F                     	;# 
  4058  088C                     	;# 
  4059  088D                     	;# 
  4060  088E                     	;# 
  4061  088F                     	;# 
  4062  0890                     	;# 
  4063  0891                     	;# 
  4064  0892                     	;# 
  4065  0893                     	;# 
  4066  0895                     	;# 
  4067  0896                     	;# 
  4068  0897                     	;# 
  4069  0898                     	;# 
  4070  0899                     	;# 
  4071  089A                     	;# 
  4072  089B                     	;# 
  4073  090C                     	;# 
  4074  090E                     	;# 
  4075  090F                     	;# 
  4076  091F                     	;# 
  4077  091F                     	;# 
  4078  098F                     	;# 
  4079  098F                     	;# 
  4080  0990                     	;# 
  4081  0991                     	;# 
  4082  0992                     	;# 
  4083  0993                     	;# 
  4084  0994                     	;# 
  4085  0995                     	;# 
  4086  0996                     	;# 
  4087  0997                     	;# 
  4088  0E0F                     	;# 
  4089  0E10                     	;# 
  4090  0E11                     	;# 
  4091  0E12                     	;# 
  4092  0E13                     	;# 
  4093  0E14                     	;# 
  4094  0E15                     	;# 
  4095  0E16                     	;# 
  4096  0E17                     	;# 
  4097  0E18                     	;# 
  4098  0E19                     	;# 
  4099  0E1A                     	;# 
  4100  0E1B                     	;# 
  4101  0E1C                     	;# 
  4102  0E1D                     	;# 
  4103  0E1E                     	;# 
  4104  0E1F                     	;# 
  4105  0E20                     	;# 
  4106  0E21                     	;# 
  4107  0E22                     	;# 
  4108  0E23                     	;# 
  4109  0E24                     	;# 
  4110  0E25                     	;# 
  4111  0E26                     	;# 
  4112  0E27                     	;# 
  4113  0E28                     	;# 
  4114  0E29                     	;# 
  4115  0E2A                     	;# 
  4116  0E2B                     	;# 
  4117  0E2C                     	;# 
  4118  0E2D                     	;# 
  4119  0E2E                     	;# 
  4120  0E2F                     	;# 
  4121  0E30                     	;# 
  4122  0E31                     	;# 
  4123  0E32                     	;# 
  4124  0E33                     	;# 
  4125  0E34                     	;# 
  4126  0E35                     	;# 
  4127  0E36                     	;# 
  4128  0E37                     	;# 
  4129  0E8F                     	;# 
  4130  0E90                     	;# 
  4131  0E91                     	;# 
  4132  0E92                     	;# 
  4133  0E93                     	;# 
  4134  0E94                     	;# 
  4135  0E95                     	;# 
  4136  0E96                     	;# 
  4137  0E97                     	;# 
  4138  0E9C                     	;# 
  4139  0E9D                     	;# 
  4140  0E9E                     	;# 
  4141  0EA1                     	;# 
  4142  0EA2                     	;# 
  4143  0EA3                     	;# 
  4144  0EA4                     	;# 
  4145  0EA5                     	;# 
  4146  0EA9                     	;# 
  4147  0EAA                     	;# 
  4148  0EAB                     	;# 
  4149  0EAC                     	;# 
  4150  0EB1                     	;# 
  4151  0EB2                     	;# 
  4152  0EB3                     	;# 
  4153  0EB8                     	;# 
  4154  0EB9                     	;# 
  4155  0EBA                     	;# 
  4156  0EBB                     	;# 
  4157  0EBC                     	;# 
  4158  0EBD                     	;# 
  4159  0EBE                     	;# 
  4160  0EC3                     	;# 
  4161  0EC5                     	;# 
  4162  0EC6                     	;# 
  4163  0EC7                     	;# 
  4164  0EC8                     	;# 
  4165  0EC9                     	;# 
  4166  0ECA                     	;# 
  4167  0ECB                     	;# 
  4168  0ECC                     	;# 
  4169  0F10                     	;# 
  4170  0F11                     	;# 
  4171  0F12                     	;# 
  4172  0F13                     	;# 
  4173  0F14                     	;# 
  4174  0F15                     	;# 
  4175  0F16                     	;# 
  4176  0F17                     	;# 
  4177  0F18                     	;# 
  4178  0F19                     	;# 
  4179  0F1A                     	;# 
  4180  0F1B                     	;# 
  4181  0F1C                     	;# 
  4182  0F1D                     	;# 
  4183  0F1E                     	;# 
  4184  0F1F                     	;# 
  4185  0F20                     	;# 
  4186  0F21                     	;# 
  4187  0F22                     	;# 
  4188  0F23                     	;# 
  4189  0F24                     	;# 
  4190  0F25                     	;# 
  4191  0F26                     	;# 
  4192  0F27                     	;# 
  4193  0F38                     	;# 
  4194  0F39                     	;# 
  4195  0F3A                     	;# 
  4196  0F3B                     	;# 
  4197  0F3C                     	;# 
  4198  0F3D                     	;# 
  4199  0F3E                     	;# 
  4200  0F3F                     	;# 
  4201  0F40                     	;# 
  4202  0F41                     	;# 
  4203  0F43                     	;# 
  4204  0F44                     	;# 
  4205  0F45                     	;# 
  4206  0F46                     	;# 
  4207  0F47                     	;# 
  4208  0F48                     	;# 
  4209  0F49                     	;# 
  4210  0F4A                     	;# 
  4211  0F4B                     	;# 
  4212  0F4C                     	;# 
  4213  0F4E                     	;# 
  4214  0F4F                     	;# 
  4215  0F50                     	;# 
  4216  0F51                     	;# 
  4217  0F52                     	;# 
  4218  0F53                     	;# 
  4219  0F54                     	;# 
  4220  0F55                     	;# 
  4221  0F56                     	;# 
  4222  0F57                     	;# 
  4223  0F65                     	;# 
  4224  0F68                     	;# 
  4225  0F69                     	;# 
  4226  0F6A                     	;# 
  4227  0F6B                     	;# 
  4228  0FE4                     	;# 
  4229  0FE5                     	;# 
  4230  0FE6                     	;# 
  4231  0FE7                     	;# 
  4232  0FE8                     	;# 
  4233  0FE9                     	;# 
  4234  0FEA                     	;# 
  4235  0FEB                     	;# 
  4236  0FED                     	;# 
  4237  0FEE                     	;# 
  4238  0FEF                     	;# 
  4239  0000                     	;# 
  4240  0001                     	;# 
  4241  0002                     	;# 
  4242  0003                     	;# 
  4243  0004                     	;# 
  4244  0005                     	;# 
  4245  0006                     	;# 
  4246  0007                     	;# 
  4247  0008                     	;# 
  4248  0009                     	;# 
  4249  000A                     	;# 
  4250  000B                     	;# 
  4251  000C                     	;# 
  4252  000D                     	;# 
  4253  000E                     	;# 
  4254  0010                     	;# 
  4255  0011                     	;# 
  4256  0012                     	;# 
  4257  0013                     	;# 
  4258  0016                     	;# 
  4259  0017                     	;# 
  4260  0018                     	;# 
  4261  001C                     	;# 
  4262  001C                     	;# 
  4263  001D                     	;# 
  4264  001D                     	;# 
  4265  001E                     	;# 
  4266  001F                     	;# 
  4267  008C                     	;# 
  4268  008C                     	;# 
  4269  008D                     	;# 
  4270  008E                     	;# 
  4271  008E                     	;# 
  4272  008F                     	;# 
  4273  0090                     	;# 
  4274  0090                     	;# 
  4275  0091                     	;# 
  4276  0093                     	;# 
  4277  0094                     	;# 
  4278  0095                     	;# 
  4279  0096                     	;# 
  4280  0097                     	;# 
  4281  0098                     	;# 
  4282  0099                     	;# 
  4283  009A                     	;# 
  4284  009B                     	;# 
  4285  009C                     	;# 
  4286  009D                     	;# 
  4287  009E                     	;# 
  4288  010C                     	;# 
  4289  010D                     	;# 
  4290  010E                     	;# 
  4291  010E                     	;# 
  4292  010F                     	;# 
  4293  0110                     	;# 
  4294  0110                     	;# 
  4295  0111                     	;# 
  4296  0112                     	;# 
  4297  0112                     	;# 
  4298  0113                     	;# 
  4299  0114                     	;# 
  4300  0114                     	;# 
  4301  0115                     	;# 
  4302  0116                     	;# 
  4303  0116                     	;# 
  4304  0117                     	;# 
  4305  0119                     	;# 
  4306  0119                     	;# 
  4307  0119                     	;# 
  4308  011A                     	;# 
  4309  011A                     	;# 
  4310  011A                     	;# 
  4311  011B                     	;# 
  4312  011B                     	;# 
  4313  011B                     	;# 
  4314  011B                     	;# 
  4315  011B                     	;# 
  4316  011C                     	;# 
  4317  011C                     	;# 
  4318  011C                     	;# 
  4319  011D                     	;# 
  4320  011D                     	;# 
  4321  011D                     	;# 
  4322  011E                     	;# 
  4323  011E                     	;# 
  4324  011E                     	;# 
  4325  011F                     	;# 
  4326  011F                     	;# 
  4327  011F                     	;# 
  4328  011F                     	;# 
  4329  011F                     	;# 
  4330  018C                     	;# 
  4331  018D                     	;# 
  4332  018E                     	;# 
  4333  018F                     	;# 
  4334  0190                     	;# 
  4335  0191                     	;# 
  4336  0192                     	;# 
  4337  0196                     	;# 
  4338  0197                     	;# 
  4339  0198                     	;# 
  4340  0199                     	;# 
  4341  019A                     	;# 
  4342  019B                     	;# 
  4343  019C                     	;# 
  4344  020C                     	;# 
  4345  020C                     	;# 
  4346  020D                     	;# 
  4347  020E                     	;# 
  4348  020F                     	;# 
  4349  020F                     	;# 
  4350  0210                     	;# 
  4351  0210                     	;# 
  4352  0211                     	;# 
  4353  0211                     	;# 
  4354  0212                     	;# 
  4355  0212                     	;# 
  4356  0213                     	;# 
  4357  0214                     	;# 
  4358  0215                     	;# 
  4359  0215                     	;# 
  4360  0216                     	;# 
  4361  0216                     	;# 
  4362  0217                     	;# 
  4363  0217                     	;# 
  4364  0218                     	;# 
  4365  0218                     	;# 
  4366  0219                     	;# 
  4367  021A                     	;# 
  4368  021B                     	;# 
  4369  021B                     	;# 
  4370  021C                     	;# 
  4371  021C                     	;# 
  4372  021D                     	;# 
  4373  021D                     	;# 
  4374  021E                     	;# 
  4375  021F                     	;# 
  4376  028C                     	;# 
  4377  028C                     	;# 
  4378  028D                     	;# 
  4379  028D                     	;# 
  4380  028E                     	;# 
  4381  028F                     	;# 
  4382  0290                     	;# 
  4383  0290                     	;# 
  4384  0291                     	;# 
  4385  0292                     	;# 
  4386  0292                     	;# 
  4387  0293                     	;# 
  4388  0293                     	;# 
  4389  0294                     	;# 
  4390  0295                     	;# 
  4391  0296                     	;# 
  4392  0296                     	;# 
  4393  0297                     	;# 
  4394  0298                     	;# 
  4395  0298                     	;# 
  4396  0299                     	;# 
  4397  0299                     	;# 
  4398  029A                     	;# 
  4399  029B                     	;# 
  4400  029C                     	;# 
  4401  029C                     	;# 
  4402  029D                     	;# 
  4403  030C                     	;# 
  4404  030C                     	;# 
  4405  030D                     	;# 
  4406  030E                     	;# 
  4407  030F                     	;# 
  4408  0310                     	;# 
  4409  0310                     	;# 
  4410  0311                     	;# 
  4411  0312                     	;# 
  4412  0313                     	;# 
  4413  0314                     	;# 
  4414  0314                     	;# 
  4415  0315                     	;# 
  4416  0316                     	;# 
  4417  0317                     	;# 
  4418  0318                     	;# 
  4419  0318                     	;# 
  4420  0319                     	;# 
  4421  031A                     	;# 
  4422  031B                     	;# 
  4423  031C                     	;# 
  4424  031C                     	;# 
  4425  031D                     	;# 
  4426  031E                     	;# 
  4427  031F                     	;# 
  4428  038C                     	;# 
  4429  038D                     	;# 
  4430  038E                     	;# 
  4431  0390                     	;# 
  4432  0391                     	;# 
  4433  0392                     	;# 
  4434  040C                     	;# 
  4435  040D                     	;# 
  4436  040E                     	;# 
  4437  040F                     	;# 
  4438  0410                     	;# 
  4439  0411                     	;# 
  4440  0416                     	;# 
  4441  0416                     	;# 
  4442  0417                     	;# 
  4443  0418                     	;# 
  4444  0418                     	;# 
  4445  0419                     	;# 
  4446  041A                     	;# 
  4447  041A                     	;# 
  4448  041B                     	;# 
  4449  041C                     	;# 
  4450  041C                     	;# 
  4451  041D                     	;# 
  4452  041E                     	;# 
  4453  041F                     	;# 
  4454  048C                     	;# 
  4455  048C                     	;# 
  4456  048D                     	;# 
  4457  048E                     	;# 
  4458  048F                     	;# 
  4459  048F                     	;# 
  4460  0490                     	;# 
  4461  0491                     	;# 
  4462  0492                     	;# 
  4463  0492                     	;# 
  4464  0493                     	;# 
  4465  0494                     	;# 
  4466  0495                     	;# 
  4467  0495                     	;# 
  4468  0496                     	;# 
  4469  0497                     	;# 
  4470  0498                     	;# 
  4471  0499                     	;# 
  4472  049A                     	;# 
  4473  049B                     	;# 
  4474  049C                     	;# 
  4475  049D                     	;# 
  4476  050C                     	;# 
  4477  050C                     	;# 
  4478  050D                     	;# 
  4479  050E                     	;# 
  4480  050F                     	;# 
  4481  050F                     	;# 
  4482  0510                     	;# 
  4483  0511                     	;# 
  4484  0512                     	;# 
  4485  0512                     	;# 
  4486  0513                     	;# 
  4487  0514                     	;# 
  4488  0515                     	;# 
  4489  0515                     	;# 
  4490  0516                     	;# 
  4491  0517                     	;# 
  4492  0518                     	;# 
  4493  0519                     	;# 
  4494  051A                     	;# 
  4495  051B                     	;# 
  4496  051C                     	;# 
  4497  051D                     	;# 
  4498  058C                     	;# 
  4499  058C                     	;# 
  4500  058D                     	;# 
  4501  058E                     	;# 
  4502  058F                     	;# 
  4503  058F                     	;# 
  4504  0590                     	;# 
  4505  0591                     	;# 
  4506  0592                     	;# 
  4507  0593                     	;# 
  4508  060C                     	;# 
  4509  060D                     	;# 
  4510  060E                     	;# 
  4511  060F                     	;# 
  4512  0610                     	;# 
  4513  0611                     	;# 
  4514  0612                     	;# 
  4515  0613                     	;# 
  4516  0614                     	;# 
  4517  0616                     	;# 
  4518  0617                     	;# 
  4519  0618                     	;# 
  4520  0619                     	;# 
  4521  061A                     	;# 
  4522  061B                     	;# 
  4523  061C                     	;# 
  4524  061D                     	;# 
  4525  061E                     	;# 
  4526  068C                     	;# 
  4527  068D                     	;# 
  4528  068E                     	;# 
  4529  068F                     	;# 
  4530  0690                     	;# 
  4531  0691                     	;# 
  4532  0692                     	;# 
  4533  0693                     	;# 
  4534  0694                     	;# 
  4535  070C                     	;# 
  4536  070D                     	;# 
  4537  070E                     	;# 
  4538  070F                     	;# 
  4539  0710                     	;# 
  4540  0711                     	;# 
  4541  0712                     	;# 
  4542  0713                     	;# 
  4543  0714                     	;# 
  4544  0716                     	;# 
  4545  0717                     	;# 
  4546  0718                     	;# 
  4547  0719                     	;# 
  4548  071A                     	;# 
  4549  071B                     	;# 
  4550  071C                     	;# 
  4551  071D                     	;# 
  4552  071E                     	;# 
  4553  0796                     	;# 
  4554  0797                     	;# 
  4555  0798                     	;# 
  4556  0799                     	;# 
  4557  079A                     	;# 
  4558  079B                     	;# 
  4559  080C                     	;# 
  4560  080D                     	;# 
  4561  080E                     	;# 
  4562  080F                     	;# 
  4563  0810                     	;# 
  4564  0811                     	;# 
  4565  0812                     	;# 
  4566  0813                     	;# 
  4567  0814                     	;# 
  4568  081A                     	;# 
  4569  081B                     	;# 
  4570  081C                     	;# 
  4571  081D                     	;# 
  4572  081E                     	;# 
  4573  081F                     	;# 
  4574  088C                     	;# 
  4575  088D                     	;# 
  4576  088E                     	;# 
  4577  088F                     	;# 
  4578  0890                     	;# 
  4579  0891                     	;# 
  4580  0892                     	;# 
  4581  0893                     	;# 
  4582  0895                     	;# 
  4583  0896                     	;# 
  4584  0897                     	;# 
  4585  0898                     	;# 
  4586  0899                     	;# 
  4587  089A                     	;# 
  4588  089B                     	;# 
  4589  090C                     	;# 
  4590  090E                     	;# 
  4591  090F                     	;# 
  4592  091F                     	;# 
  4593  091F                     	;# 
  4594  098F                     	;# 
  4595  098F                     	;# 
  4596  0990                     	;# 
  4597  0991                     	;# 
  4598  0992                     	;# 
  4599  0993                     	;# 
  4600  0994                     	;# 
  4601  0995                     	;# 
  4602  0996                     	;# 
  4603  0997                     	;# 
  4604  0E0F                     	;# 
  4605  0E10                     	;# 
  4606  0E11                     	;# 
  4607  0E12                     	;# 
  4608  0E13                     	;# 
  4609  0E14                     	;# 
  4610  0E15                     	;# 
  4611  0E16                     	;# 
  4612  0E17                     	;# 
  4613  0E18                     	;# 
  4614  0E19                     	;# 
  4615  0E1A                     	;# 
  4616  0E1B                     	;# 
  4617  0E1C                     	;# 
  4618  0E1D                     	;# 
  4619  0E1E                     	;# 
  4620  0E1F                     	;# 
  4621  0E20                     	;# 
  4622  0E21                     	;# 
  4623  0E22                     	;# 
  4624  0E23                     	;# 
  4625  0E24                     	;# 
  4626  0E25                     	;# 
  4627  0E26                     	;# 
  4628  0E27                     	;# 
  4629  0E28                     	;# 
  4630  0E29                     	;# 
  4631  0E2A                     	;# 
  4632  0E2B                     	;# 
  4633  0E2C                     	;# 
  4634  0E2D                     	;# 
  4635  0E2E                     	;# 
  4636  0E2F                     	;# 
  4637  0E30                     	;# 
  4638  0E31                     	;# 
  4639  0E32                     	;# 
  4640  0E33                     	;# 
  4641  0E34                     	;# 
  4642  0E35                     	;# 
  4643  0E36                     	;# 
  4644  0E37                     	;# 
  4645  0E8F                     	;# 
  4646  0E90                     	;# 
  4647  0E91                     	;# 
  4648  0E92                     	;# 
  4649  0E93                     	;# 
  4650  0E94                     	;# 
  4651  0E95                     	;# 
  4652  0E96                     	;# 
  4653  0E97                     	;# 
  4654  0E9C                     	;# 
  4655  0E9D                     	;# 
  4656  0E9E                     	;# 
  4657  0EA1                     	;# 
  4658  0EA2                     	;# 
  4659  0EA3                     	;# 
  4660  0EA4                     	;# 
  4661  0EA5                     	;# 
  4662  0EA9                     	;# 
  4663  0EAA                     	;# 
  4664  0EAB                     	;# 
  4665  0EAC                     	;# 
  4666  0EB1                     	;# 
  4667  0EB2                     	;# 
  4668  0EB3                     	;# 
  4669  0EB8                     	;# 
  4670  0EB9                     	;# 
  4671  0EBA                     	;# 
  4672  0EBB                     	;# 
  4673  0EBC                     	;# 
  4674  0EBD                     	;# 
  4675  0EBE                     	;# 
  4676  0EC3                     	;# 
  4677  0EC5                     	;# 
  4678  0EC6                     	;# 
  4679  0EC7                     	;# 
  4680  0EC8                     	;# 
  4681  0EC9                     	;# 
  4682  0ECA                     	;# 
  4683  0ECB                     	;# 
  4684  0ECC                     	;# 
  4685  0F10                     	;# 
  4686  0F11                     	;# 
  4687  0F12                     	;# 
  4688  0F13                     	;# 
  4689  0F14                     	;# 
  4690  0F15                     	;# 
  4691  0F16                     	;# 
  4692  0F17                     	;# 
  4693  0F18                     	;# 
  4694  0F19                     	;# 
  4695  0F1A                     	;# 
  4696  0F1B                     	;# 
  4697  0F1C                     	;# 
  4698  0F1D                     	;# 
  4699  0F1E                     	;# 
  4700  0F1F                     	;# 
  4701  0F20                     	;# 
  4702  0F21                     	;# 
  4703  0F22                     	;# 
  4704  0F23                     	;# 
  4705  0F24                     	;# 
  4706  0F25                     	;# 
  4707  0F26                     	;# 
  4708  0F27                     	;# 
  4709  0F38                     	;# 
  4710  0F39                     	;# 
  4711  0F3A                     	;# 
  4712  0F3B                     	;# 
  4713  0F3C                     	;# 
  4714  0F3D                     	;# 
  4715  0F3E                     	;# 
  4716  0F3F                     	;# 
  4717  0F40                     	;# 
  4718  0F41                     	;# 
  4719  0F43                     	;# 
  4720  0F44                     	;# 
  4721  0F45                     	;# 
  4722  0F46                     	;# 
  4723  0F47                     	;# 
  4724  0F48                     	;# 
  4725  0F49                     	;# 
  4726  0F4A                     	;# 
  4727  0F4B                     	;# 
  4728  0F4C                     	;# 
  4729  0F4E                     	;# 
  4730  0F4F                     	;# 
  4731  0F50                     	;# 
  4732  0F51                     	;# 
  4733  0F52                     	;# 
  4734  0F53                     	;# 
  4735  0F54                     	;# 
  4736  0F55                     	;# 
  4737  0F56                     	;# 
  4738  0F57                     	;# 
  4739  0F65                     	;# 
  4740  0F68                     	;# 
  4741  0F69                     	;# 
  4742  0F6A                     	;# 
  4743  0F6B                     	;# 
  4744  0FE4                     	;# 
  4745  0FE5                     	;# 
  4746  0FE6                     	;# 
  4747  0FE7                     	;# 
  4748  0FE8                     	;# 
  4749  0FE9                     	;# 
  4750  0FEA                     	;# 
  4751  0FEB                     	;# 
  4752  0FED                     	;# 
  4753  0FEE                     	;# 
  4754  0FEF                     	;# 
  4755  0000                     	;# 
  4756  0001                     	;# 
  4757  0002                     	;# 
  4758  0003                     	;# 
  4759  0004                     	;# 
  4760  0005                     	;# 
  4761  0006                     	;# 
  4762  0007                     	;# 
  4763  0008                     	;# 
  4764  0009                     	;# 
  4765  000A                     	;# 
  4766  000B                     	;# 
  4767  000C                     	;# 
  4768  000D                     	;# 
  4769  000E                     	;# 
  4770  0010                     	;# 
  4771  0011                     	;# 
  4772  0012                     	;# 
  4773  0013                     	;# 
  4774  0016                     	;# 
  4775  0017                     	;# 
  4776  0018                     	;# 
  4777  001C                     	;# 
  4778  001C                     	;# 
  4779  001D                     	;# 
  4780  001D                     	;# 
  4781  001E                     	;# 
  4782  001F                     	;# 
  4783  008C                     	;# 
  4784  008C                     	;# 
  4785  008D                     	;# 
  4786  008E                     	;# 
  4787  008E                     	;# 
  4788  008F                     	;# 
  4789  0090                     	;# 
  4790  0090                     	;# 
  4791  0091                     	;# 
  4792  0093                     	;# 
  4793  0094                     	;# 
  4794  0095                     	;# 
  4795  0096                     	;# 
  4796  0097                     	;# 
  4797  0098                     	;# 
  4798  0099                     	;# 
  4799  009A                     	;# 
  4800  009B                     	;# 
  4801  009C                     	;# 
  4802  009D                     	;# 
  4803  009E                     	;# 
  4804  010C                     	;# 
  4805  010D                     	;# 
  4806  010E                     	;# 
  4807  010E                     	;# 
  4808  010F                     	;# 
  4809  0110                     	;# 
  4810  0110                     	;# 
  4811  0111                     	;# 
  4812  0112                     	;# 
  4813  0112                     	;# 
  4814  0113                     	;# 
  4815  0114                     	;# 
  4816  0114                     	;# 
  4817  0115                     	;# 
  4818  0116                     	;# 
  4819  0116                     	;# 
  4820  0117                     	;# 
  4821  0119                     	;# 
  4822  0119                     	;# 
  4823  0119                     	;# 
  4824  011A                     	;# 
  4825  011A                     	;# 
  4826  011A                     	;# 
  4827  011B                     	;# 
  4828  011B                     	;# 
  4829  011B                     	;# 
  4830  011B                     	;# 
  4831  011B                     	;# 
  4832  011C                     	;# 
  4833  011C                     	;# 
  4834  011C                     	;# 
  4835  011D                     	;# 
  4836  011D                     	;# 
  4837  011D                     	;# 
  4838  011E                     	;# 
  4839  011E                     	;# 
  4840  011E                     	;# 
  4841  011F                     	;# 
  4842  011F                     	;# 
  4843  011F                     	;# 
  4844  011F                     	;# 
  4845  011F                     	;# 
  4846  018C                     	;# 
  4847  018D                     	;# 
  4848  018E                     	;# 
  4849  018F                     	;# 
  4850  0190                     	;# 
  4851  0191                     	;# 
  4852  0192                     	;# 
  4853  0196                     	;# 
  4854  0197                     	;# 
  4855  0198                     	;# 
  4856  0199                     	;# 
  4857  019A                     	;# 
  4858  019B                     	;# 
  4859  019C                     	;# 
  4860  020C                     	;# 
  4861  020C                     	;# 
  4862  020D                     	;# 
  4863  020E                     	;# 
  4864  020F                     	;# 
  4865  020F                     	;# 
  4866  0210                     	;# 
  4867  0210                     	;# 
  4868  0211                     	;# 
  4869  0211                     	;# 
  4870  0212                     	;# 
  4871  0212                     	;# 
  4872  0213                     	;# 
  4873  0214                     	;# 
  4874  0215                     	;# 
  4875  0215                     	;# 
  4876  0216                     	;# 
  4877  0216                     	;# 
  4878  0217                     	;# 
  4879  0217                     	;# 
  4880  0218                     	;# 
  4881  0218                     	;# 
  4882  0219                     	;# 
  4883  021A                     	;# 
  4884  021B                     	;# 
  4885  021B                     	;# 
  4886  021C                     	;# 
  4887  021C                     	;# 
  4888  021D                     	;# 
  4889  021D                     	;# 
  4890  021E                     	;# 
  4891  021F                     	;# 
  4892  028C                     	;# 
  4893  028C                     	;# 
  4894  028D                     	;# 
  4895  028D                     	;# 
  4896  028E                     	;# 
  4897  028F                     	;# 
  4898  0290                     	;# 
  4899  0290                     	;# 
  4900  0291                     	;# 
  4901  0292                     	;# 
  4902  0292                     	;# 
  4903  0293                     	;# 
  4904  0293                     	;# 
  4905  0294                     	;# 
  4906  0295                     	;# 
  4907  0296                     	;# 
  4908  0296                     	;# 
  4909  0297                     	;# 
  4910  0298                     	;# 
  4911  0298                     	;# 
  4912  0299                     	;# 
  4913  0299                     	;# 
  4914  029A                     	;# 
  4915  029B                     	;# 
  4916  029C                     	;# 
  4917  029C                     	;# 
  4918  029D                     	;# 
  4919  030C                     	;# 
  4920  030C                     	;# 
  4921  030D                     	;# 
  4922  030E                     	;# 
  4923  030F                     	;# 
  4924  0310                     	;# 
  4925  0310                     	;# 
  4926  0311                     	;# 
  4927  0312                     	;# 
  4928  0313                     	;# 
  4929  0314                     	;# 
  4930  0314                     	;# 
  4931  0315                     	;# 
  4932  0316                     	;# 
  4933  0317                     	;# 
  4934  0318                     	;# 
  4935  0318                     	;# 
  4936  0319                     	;# 
  4937  031A                     	;# 
  4938  031B                     	;# 
  4939  031C                     	;# 
  4940  031C                     	;# 
  4941  031D                     	;# 
  4942  031E                     	;# 
  4943  031F                     	;# 
  4944  038C                     	;# 
  4945  038D                     	;# 
  4946  038E                     	;# 
  4947  0390                     	;# 
  4948  0391                     	;# 
  4949  0392                     	;# 
  4950  040C                     	;# 
  4951  040D                     	;# 
  4952  040E                     	;# 
  4953  040F                     	;# 
  4954  0410                     	;# 
  4955  0411                     	;# 
  4956  0416                     	;# 
  4957  0416                     	;# 
  4958  0417                     	;# 
  4959  0418                     	;# 
  4960  0418                     	;# 
  4961  0419                     	;# 
  4962  041A                     	;# 
  4963  041A                     	;# 
  4964  041B                     	;# 
  4965  041C                     	;# 
  4966  041C                     	;# 
  4967  041D                     	;# 
  4968  041E                     	;# 
  4969  041F                     	;# 
  4970  048C                     	;# 
  4971  048C                     	;# 
  4972  048D                     	;# 
  4973  048E                     	;# 
  4974  048F                     	;# 
  4975  048F                     	;# 
  4976  0490                     	;# 
  4977  0491                     	;# 
  4978  0492                     	;# 
  4979  0492                     	;# 
  4980  0493                     	;# 
  4981  0494                     	;# 
  4982  0495                     	;# 
  4983  0495                     	;# 
  4984  0496                     	;# 
  4985  0497                     	;# 
  4986  0498                     	;# 
  4987  0499                     	;# 
  4988  049A                     	;# 
  4989  049B                     	;# 
  4990  049C                     	;# 
  4991  049D                     	;# 
  4992  050C                     	;# 
  4993  050C                     	;# 
  4994  050D                     	;# 
  4995  050E                     	;# 
  4996  050F                     	;# 
  4997  050F                     	;# 
  4998  0510                     	;# 
  4999  0511                     	;# 
  5000  0512                     	;# 
  5001  0512                     	;# 
  5002  0513                     	;# 
  5003  0514                     	;# 
  5004  0515                     	;# 
  5005  0515                     	;# 
  5006  0516                     	;# 
  5007  0517                     	;# 
  5008  0518                     	;# 
  5009  0519                     	;# 
  5010  051A                     	;# 
  5011  051B                     	;# 
  5012  051C                     	;# 
  5013  051D                     	;# 
  5014  058C                     	;# 
  5015  058C                     	;# 
  5016  058D                     	;# 
  5017  058E                     	;# 
  5018  058F                     	;# 
  5019  058F                     	;# 
  5020  0590                     	;# 
  5021  0591                     	;# 
  5022  0592                     	;# 
  5023  0593                     	;# 
  5024  060C                     	;# 
  5025  060D                     	;# 
  5026  060E                     	;# 
  5027  060F                     	;# 
  5028  0610                     	;# 
  5029  0611                     	;# 
  5030  0612                     	;# 
  5031  0613                     	;# 
  5032  0614                     	;# 
  5033  0616                     	;# 
  5034  0617                     	;# 
  5035  0618                     	;# 
  5036  0619                     	;# 
  5037  061A                     	;# 
  5038  061B                     	;# 
  5039  061C                     	;# 
  5040  061D                     	;# 
  5041  061E                     	;# 
  5042  068C                     	;# 
  5043  068D                     	;# 
  5044  068E                     	;# 
  5045  068F                     	;# 
  5046  0690                     	;# 
  5047  0691                     	;# 
  5048  0692                     	;# 
  5049  0693                     	;# 
  5050  0694                     	;# 
  5051  070C                     	;# 
  5052  070D                     	;# 
  5053  070E                     	;# 
  5054  070F                     	;# 
  5055  0710                     	;# 
  5056  0711                     	;# 
  5057  0712                     	;# 
  5058  0713                     	;# 
  5059  0714                     	;# 
  5060  0716                     	;# 
  5061  0717                     	;# 
  5062  0718                     	;# 
  5063  0719                     	;# 
  5064  071A                     	;# 
  5065  071B                     	;# 
  5066  071C                     	;# 
  5067  071D                     	;# 
  5068  071E                     	;# 
  5069  0796                     	;# 
  5070  0797                     	;# 
  5071  0798                     	;# 
  5072  0799                     	;# 
  5073  079A                     	;# 
  5074  079B                     	;# 
  5075  080C                     	;# 
  5076  080D                     	;# 
  5077  080E                     	;# 
  5078  080F                     	;# 
  5079  0810                     	;# 
  5080  0811                     	;# 
  5081  0812                     	;# 
  5082  0813                     	;# 
  5083  0814                     	;# 
  5084  081A                     	;# 
  5085  081B                     	;# 
  5086  081C                     	;# 
  5087  081D                     	;# 
  5088  081E                     	;# 
  5089  081F                     	;# 
  5090  088C                     	;# 
  5091  088D                     	;# 
  5092  088E                     	;# 
  5093  088F                     	;# 
  5094  0890                     	;# 
  5095  0891                     	;# 
  5096  0892                     	;# 
  5097  0893                     	;# 
  5098  0895                     	;# 
  5099  0896                     	;# 
  5100  0897                     	;# 
  5101  0898                     	;# 
  5102  0899                     	;# 
  5103  089A                     	;# 
  5104  089B                     	;# 
  5105  090C                     	;# 
  5106  090E                     	;# 
  5107  090F                     	;# 
  5108  091F                     	;# 
  5109  091F                     	;# 
  5110  098F                     	;# 
  5111  098F                     	;# 
  5112  0990                     	;# 
  5113  0991                     	;# 
  5114  0992                     	;# 
  5115  0993                     	;# 
  5116  0994                     	;# 
  5117  0995                     	;# 
  5118  0996                     	;# 
  5119  0997                     	;# 
  5120  0E0F                     	;# 
  5121  0E10                     	;# 
  5122  0E11                     	;# 
  5123  0E12                     	;# 
  5124  0E13                     	;# 
  5125  0E14                     	;# 
  5126  0E15                     	;# 
  5127  0E16                     	;# 
  5128  0E17                     	;# 
  5129  0E18                     	;# 
  5130  0E19                     	;# 
  5131  0E1A                     	;# 
  5132  0E1B                     	;# 
  5133  0E1C                     	;# 
  5134  0E1D                     	;# 
  5135  0E1E                     	;# 
  5136  0E1F                     	;# 
  5137  0E20                     	;# 
  5138  0E21                     	;# 
  5139  0E22                     	;# 
  5140  0E23                     	;# 
  5141  0E24                     	;# 
  5142  0E25                     	;# 
  5143  0E26                     	;# 
  5144  0E27                     	;# 
  5145  0E28                     	;# 
  5146  0E29                     	;# 
  5147  0E2A                     	;# 
  5148  0E2B                     	;# 
  5149  0E2C                     	;# 
  5150  0E2D                     	;# 
  5151  0E2E                     	;# 
  5152  0E2F                     	;# 
  5153  0E30                     	;# 
  5154  0E31                     	;# 
  5155  0E32                     	;# 
  5156  0E33                     	;# 
  5157  0E34                     	;# 
  5158  0E35                     	;# 
  5159  0E36                     	;# 
  5160  0E37                     	;# 
  5161  0E8F                     	;# 
  5162  0E90                     	;# 
  5163  0E91                     	;# 
  5164  0E92                     	;# 
  5165  0E93                     	;# 
  5166  0E94                     	;# 
  5167  0E95                     	;# 
  5168  0E96                     	;# 
  5169  0E97                     	;# 
  5170  0E9C                     	;# 
  5171  0E9D                     	;# 
  5172  0E9E                     	;# 
  5173  0EA1                     	;# 
  5174  0EA2                     	;# 
  5175  0EA3                     	;# 
  5176  0EA4                     	;# 
  5177  0EA5                     	;# 
  5178  0EA9                     	;# 
  5179  0EAA                     	;# 
  5180  0EAB                     	;# 
  5181  0EAC                     	;# 
  5182  0EB1                     	;# 
  5183  0EB2                     	;# 
  5184  0EB3                     	;# 
  5185  0EB8                     	;# 
  5186  0EB9                     	;# 
  5187  0EBA                     	;# 
  5188  0EBB                     	;# 
  5189  0EBC                     	;# 
  5190  0EBD                     	;# 
  5191  0EBE                     	;# 
  5192  0EC3                     	;# 
  5193  0EC5                     	;# 
  5194  0EC6                     	;# 
  5195  0EC7                     	;# 
  5196  0EC8                     	;# 
  5197  0EC9                     	;# 
  5198  0ECA                     	;# 
  5199  0ECB                     	;# 
  5200  0ECC                     	;# 
  5201  0F10                     	;# 
  5202  0F11                     	;# 
  5203  0F12                     	;# 
  5204  0F13                     	;# 
  5205  0F14                     	;# 
  5206  0F15                     	;# 
  5207  0F16                     	;# 
  5208  0F17                     	;# 
  5209  0F18                     	;# 
  5210  0F19                     	;# 
  5211  0F1A                     	;# 
  5212  0F1B                     	;# 
  5213  0F1C                     	;# 
  5214  0F1D                     	;# 
  5215  0F1E                     	;# 
  5216  0F1F                     	;# 
  5217  0F20                     	;# 
  5218  0F21                     	;# 
  5219  0F22                     	;# 
  5220  0F23                     	;# 
  5221  0F24                     	;# 
  5222  0F25                     	;# 
  5223  0F26                     	;# 
  5224  0F27                     	;# 
  5225  0F38                     	;# 
  5226  0F39                     	;# 
  5227  0F3A                     	;# 
  5228  0F3B                     	;# 
  5229  0F3C                     	;# 
  5230  0F3D                     	;# 
  5231  0F3E                     	;# 
  5232  0F3F                     	;# 
  5233  0F40                     	;# 
  5234  0F41                     	;# 
  5235  0F43                     	;# 
  5236  0F44                     	;# 
  5237  0F45                     	;# 
  5238  0F46                     	;# 
  5239  0F47                     	;# 
  5240  0F48                     	;# 
  5241  0F49                     	;# 
  5242  0F4A                     	;# 
  5243  0F4B                     	;# 
  5244  0F4C                     	;# 
  5245  0F4E                     	;# 
  5246  0F4F                     	;# 
  5247  0F50                     	;# 
  5248  0F51                     	;# 
  5249  0F52                     	;# 
  5250  0F53                     	;# 
  5251  0F54                     	;# 
  5252  0F55                     	;# 
  5253  0F56                     	;# 
  5254  0F57                     	;# 
  5255  0F65                     	;# 
  5256  0F68                     	;# 
  5257  0F69                     	;# 
  5258  0F6A                     	;# 
  5259  0F6B                     	;# 
  5260  0FE4                     	;# 
  5261  0FE5                     	;# 
  5262  0FE6                     	;# 
  5263  0FE7                     	;# 
  5264  0FE8                     	;# 
  5265  0FE9                     	;# 
  5266  0FEA                     	;# 
  5267  0FEB                     	;# 
  5268  0FED                     	;# 
  5269  0FEE                     	;# 
  5270  0FEF                     	;_Isamples
  5271                           
  5272                           	psect	idataBANK0
  5273  0004                     __pidataBANK0:	
  5274                           
  5275                           ;initializer for _batteryTemp
  5276  0004  34FA               	retlw	250
  5277  0005  3400               	retlw	0
  5278                           
  5279                           	psect	idataBANK2
  5280  1E47                     __pidataBANK2:	
  5281                           
  5282                           ;initializer for _Vchannels
  5283  1E47  3415               	retlw	21
  5284  1E48  3400               	retlw	0
  5285  1E49  3411               	retlw	17
  5286  1E4A  3400               	retlw	0
  5287  1E4B  3417               	retlw	23
  5288  1E4C  3400               	retlw	0
  5289  1E4D  3413               	retlw	19
  5290  1E4E  3400               	retlw	0
  5291                           
  5292                           ;initializer for _Ichannels
  5293  1E4F  3414               	retlw	20
  5294  1E50  3400               	retlw	0
  5295  1E51  3410               	retlw	16
  5296  1E52  3400               	retlw	0
  5297  1E53  3416               	retlw	22
  5298  1E54  3400               	retlw	0
  5299  1E55  3412               	retlw	18
  5300  1E56  3400               	retlw	0
  5301                           
  5302                           	psect	stringtext1
  5303  1000                     __pstringtext1:	
  5304  1000                     _fonts:	
  5305  1000  3400               	retlw	0
  5306  1001  3400               	retlw	0
  5307  1002  3400               	retlw	0
  5308  1003  3400               	retlw	0
  5309  1004  344E               	retlw	78
  5310  1005  3400               	retlw	0
  5311  1006  3406               	retlw	6
  5312  1007  3400               	retlw	0
  5313  1008  3406               	retlw	6
  5314  1009  34FF               	retlw	255
  5315  100A  34FF               	retlw	255
  5316  100B  34FF               	retlw	255
  5317  100C  3448               	retlw	72
  5318  100D  34D6               	retlw	214
  5319  100E  3424               	retlw	36
  5320  100F  3412               	retlw	18
  5321  1010  3408               	retlw	8
  5322  1011  3424               	retlw	36
  5323  1012  34FF               	retlw	255
  5324  1013  34FF               	retlw	255
  5325  1014  34FF               	retlw	255
  5326  1015  3400               	retlw	0
  5327  1016  3406               	retlw	6
  5328  1017  3400               	retlw	0
  5329  1018  3438               	retlw	56
  5330  1019  3444               	retlw	68
  5331  101A  3482               	retlw	130
  5332  101B  3482               	retlw	130
  5333  101C  3444               	retlw	68
  5334  101D  3438               	retlw	56
  5335  101E  3414               	retlw	20
  5336  101F  3408               	retlw	8
  5337  1020  343E               	retlw	62
  5338  1021  3410               	retlw	16
  5339  1022  3438               	retlw	56
  5340  1023  3410               	retlw	16
  5341  1024  34A0               	retlw	160
  5342  1025  3460               	retlw	96
  5343  1026  3400               	retlw	0
  5344  1027  3410               	retlw	16
  5345  1028  3410               	retlw	16
  5346  1029  3410               	retlw	16
  5347  102A  3460               	retlw	96
  5348  102B  3460               	retlw	96
  5349  102C  3400               	retlw	0
  5350  102D  3460               	retlw	96
  5351  102E  3418               	retlw	24
  5352  102F  3406               	retlw	6
  5353  1030  347C               	retlw	124
  5354  1031  3442               	retlw	66
  5355  1032  347C               	retlw	124
  5356  1033  3444               	retlw	68
  5357  1034  347E               	retlw	126
  5358  1035  3440               	retlw	64
  5359  1036  3464               	retlw	100
  5360  1037  3452               	retlw	82
  5361  1038  344C               	retlw	76
  5362  1039  344A               	retlw	74
  5363  103A  344A               	retlw	74
  5364  103B  3434               	retlw	52
  5365  103C  3438               	retlw	56
  5366  103D  3424               	retlw	36
  5367  103E  347E               	retlw	126
  5368  103F  344E               	retlw	78
  5369  1040  344A               	retlw	74
  5370  1041  3432               	retlw	50
  5371  1042  343C               	retlw	60
  5372  1043  344A               	retlw	74
  5373  1044  3432               	retlw	50
  5374  1045  3462               	retlw	98
  5375  1046  341A               	retlw	26
  5376  1047  3406               	retlw	6
  5377  1048  3476               	retlw	118
  5378  1049  344A               	retlw	74
  5379  104A  3476               	retlw	118
  5380  104B  344C               	retlw	76
  5381  104C  3452               	retlw	82
  5382  104D  343C               	retlw	60
  5383  104E  346C               	retlw	108
  5384  104F  346C               	retlw	108
  5385  1050  3400               	retlw	0
  5386  1051  34AC               	retlw	172
  5387  1052  346C               	retlw	108
  5388  1053  3400               	retlw	0
  5389  1054  3410               	retlw	16
  5390  1055  3428               	retlw	40
  5391  1056  3444               	retlw	68
  5392  1057  3428               	retlw	40
  5393  1058  3428               	retlw	40
  5394  1059  3428               	retlw	40
  5395  105A  3444               	retlw	68
  5396  105B  3428               	retlw	40
  5397  105C  3410               	retlw	16
  5398  105D  3402               	retlw	2
  5399  105E  3459               	retlw	89
  5400  105F  3406               	retlw	6
  5401  1060  34FF               	retlw	255
  5402  1061  34FF               	retlw	255
  5403  1062  34FF               	retlw	255
  5404  1063  347C               	retlw	124
  5405  1064  3412               	retlw	18
  5406  1065  347C               	retlw	124
  5407  1066  347E               	retlw	126
  5408  1067  345A               	retlw	90
  5409  1068  3434               	retlw	52
  5410  1069  343C               	retlw	60
  5411  106A  3442               	retlw	66
  5412  106B  3442               	retlw	66
  5413  106C  347E               	retlw	126
  5414  106D  3442               	retlw	66
  5415  106E  343C               	retlw	60
  5416  106F  347E               	retlw	126
  5417  1070  344A               	retlw	74
  5418  1071  3442               	retlw	66
  5419  1072  347E               	retlw	126
  5420  1073  340A               	retlw	10
  5421  1074  340A               	retlw	10
  5422  1075  343C               	retlw	60
  5423  1076  3452               	retlw	82
  5424  1077  3434               	retlw	52
  5425  1078  347E               	retlw	126
  5426  1079  3408               	retlw	8
  5427  107A  347E               	retlw	126
  5428  107B  3442               	retlw	66
  5429  107C  347E               	retlw	126
  5430  107D  3442               	retlw	66
  5431  107E  3430               	retlw	48
  5432  107F  3440               	retlw	64
  5433  1080  343E               	retlw	62
  5434  1081  347E               	retlw	126
  5435  1082  3418               	retlw	24
  5436  1083  3466               	retlw	102
  5437  1084  347E               	retlw	126
  5438  1085  3440               	retlw	64
  5439  1086  3440               	retlw	64
  5440  1087  347E               	retlw	126
  5441  1088  341C               	retlw	28
  5442  1089  347E               	retlw	126
  5443  108A  347E               	retlw	126
  5444  108B  3402               	retlw	2
  5445  108C  347E               	retlw	126
  5446  108D  343C               	retlw	60
  5447  108E  3442               	retlw	66
  5448  108F  343C               	retlw	60
  5449  1090  347E               	retlw	126
  5450  1091  3412               	retlw	18
  5451  1092  340C               	retlw	12
  5452  1093  347E               	retlw	126
  5453  1094  3462               	retlw	98
  5454  1095  34FE               	retlw	254
  5455  1096  347E               	retlw	126
  5456  1097  3432               	retlw	50
  5457  1098  344E               	retlw	78
  5458  1099  3444               	retlw	68
  5459  109A  344A               	retlw	74
  5460  109B  3432               	retlw	50
  5461  109C  3402               	retlw	2
  5462  109D  347E               	retlw	126
  5463  109E  3402               	retlw	2
  5464  109F  347E               	retlw	126
  5465  10A0  3440               	retlw	64
  5466  10A1  347E               	retlw	126
  5467  10A2  343E               	retlw	62
  5468  10A3  3440               	retlw	64
  5469  10A4  343E               	retlw	62
  5470  10A5  347E               	retlw	126
  5471  10A6  3438               	retlw	56
  5472  10A7  347E               	retlw	126
  5473  10A8  3466               	retlw	102
  5474  10A9  3418               	retlw	24
  5475  10AA  3466               	retlw	102
  5476  10AB  340E               	retlw	14
  5477  10AC  3470               	retlw	112
  5478  10AD  340E               	retlw	14
  5479  10AE  3462               	retlw	98
  5480  10AF  345A               	retlw	90
  5481  10B0  3446               	retlw	70
  5482  10B1  3400               	retlw	0
  5483  10B2  347E               	retlw	126
  5484  10B3  3442               	retlw	66
  5485  10B4  3406               	retlw	6
  5486  10B5  3418               	retlw	24
  5487  10B6  3460               	retlw	96
  5488  10B7  3442               	retlw	66
  5489  10B8  347E               	retlw	126
  5490  10B9  3400               	retlw	0
  5491  10BA  3404               	retlw	4
  5492  10BB  3402               	retlw	2
  5493  10BC  3404               	retlw	4
  5494  10BD  3440               	retlw	64
  5495  10BE  3440               	retlw	64
  5496  10BF  3440               	retlw	64
  5497  10C0  3400               	retlw	0
  5498  10C1  3402               	retlw	2
  5499  10C2  3404               	retlw	4
  5500  10C3  3474               	retlw	116
  5501  10C4  3454               	retlw	84
  5502  10C5  3478               	retlw	120
  5503  10C6  347E               	retlw	126
  5504  10C7  3448               	retlw	72
  5505  10C8  3430               	retlw	48
  5506  10C9  3430               	retlw	48
  5507  10CA  3448               	retlw	72
  5508  10CB  3448               	retlw	72
  5509  10CC  3430               	retlw	48
  5510  10CD  3448               	retlw	72
  5511  10CE  347E               	retlw	126
  5512  10CF  3438               	retlw	56
  5513  10D0  3454               	retlw	84
  5514  10D1  3458               	retlw	88
  5515  10D2  347C               	retlw	124
  5516  10D3  340A               	retlw	10
  5517  10D4  3402               	retlw	2
  5518  10D5  3498               	retlw	152
  5519  10D6  34A4               	retlw	164
  5520  10D7  347C               	retlw	124
  5521  10D8  347E               	retlw	126
  5522  10D9  3408               	retlw	8
  5523  10DA  3470               	retlw	112
  5524  10DB  3448               	retlw	72
  5525  10DC  347A               	retlw	122
  5526  10DD  3440               	retlw	64
  5527  10DE  3488               	retlw	136
  5528  10DF  34FA               	retlw	250
  5529  10E0  3400               	retlw	0
  5530  10E1  347E               	retlw	126
  5531  10E2  3418               	retlw	24
  5532  10E3  3464               	retlw	100
  5533  10E4  3442               	retlw	66
  5534  10E5  347E               	retlw	126
  5535  10E6  3440               	retlw	64
  5536  10E7  347C               	retlw	124
  5537  10E8  3438               	retlw	56
  5538  10E9  347C               	retlw	124
  5539  10EA  347C               	retlw	124
  5540  10EB  3404               	retlw	4
  5541  10EC  3478               	retlw	120
  5542  10ED  3438               	retlw	56
  5543  10EE  3444               	retlw	68
  5544  10EF  3438               	retlw	56
  5545  10F0  34FC               	retlw	252
  5546  10F1  3424               	retlw	36
  5547  10F2  3418               	retlw	24
  5548  10F3  3418               	retlw	24
  5549  10F4  3424               	retlw	36
  5550  10F5  34FC               	retlw	252
  5551  10F6  3478               	retlw	120
  5552  10F7  3404               	retlw	4
  5553  10F8  3404               	retlw	4
  5554  10F9  3448               	retlw	72
  5555  10FA  3454               	retlw	84
  5556  10FB  3424               	retlw	36
  5557  10FC  3404               	retlw	4
  5558  10FD  343E               	retlw	62
  5559  10FE  3444               	retlw	68
  5560  10FF  347C               	retlw	124
  5561  1100  3440               	retlw	64
  5562  1101  347C               	retlw	124
  5563  1102  343C               	retlw	60
  5564  1103  3440               	retlw	64
  5565  1104  343C               	retlw	60
  5566  1105  347C               	retlw	124
  5567  1106  3430               	retlw	48
  5568  1107  347C               	retlw	124
  5569  1108  346C               	retlw	108
  5570  1109  3410               	retlw	16
  5571  110A  346C               	retlw	108
  5572  110B  349C               	retlw	156
  5573  110C  34A0               	retlw	160
  5574  110D  347C               	retlw	124
  5575  110E  3464               	retlw	100
  5576  110F  3454               	retlw	84
  5577  1110  344C               	retlw	76
  5578  1111  340C               	retlw	12
  5579  1112  3412               	retlw	18
  5580  1113  340C               	retlw	12
  5581  1114  34FF               	retlw	255
  5582  1115  34FF               	retlw	255
  5583  1116  34FF               	retlw	255
  5584  1117  34FF               	retlw	255
  5585  1118  34FF               	retlw	255
  5586  1119  34FF               	retlw	255
  5587  111A  34FF               	retlw	255
  5588  111B  34FF               	retlw	255
  5589  111C  34FF               	retlw	255
  5590  111D  34FF               	retlw	255
  5591  111E  34FF               	retlw	255
  5592  111F  34FF               	retlw	255
  5593  1120  34FF               	retlw	255
  5594  1121  34FF               	retlw	255
  5595  1122  34FF               	retlw	255
  5596  1123  34FF               	retlw	255
  5597  1124  34FF               	retlw	255
  5598  1125  34FF               	retlw	255
  5599  1126  34FC               	retlw	252
  5600  1127  3440               	retlw	64
  5601  1128  347C               	retlw	124
  5602  1129  34FF               	retlw	255
  5603  112A  34FF               	retlw	255
  5604  112B  34FF               	retlw	255
  5605  112C  34FF               	retlw	255
  5606  112D  34FF               	retlw	255
  5607  112E  34FF               	retlw	255
  5608  112F                     __end_of_fonts:	
  5609                           
  5610                           	psect	stringtext2
  5611  1800                     __pstringtext2:	
  5612  1800                     log@coeff:	
  5613  1800  3400               	retlw	0
  5614  1801  3400               	retlw	0
  5615  1802  3400               	retlw	0
  5616  1803  3400               	retlw	0
  5617  1804  3480               	retlw	128
  5618  1805  343F               	retlw	63
  5619  1806  34F0               	retlw	240
  5620  1807  34FF               	retlw	255
  5621  1808  34BE               	retlw	190
  5622  1809  34E2               	retlw	226
  5623  180A  34A9               	retlw	169
  5624  180B  343E               	retlw	62
  5625  180C  3483               	retlw	131
  5626  180D  3476               	retlw	118
  5627  180E  34BE               	retlw	190
  5628  180F  34AE               	retlw	174
  5629  1810  342B               	retlw	43
  5630  1811  343E               	retlw	62
  5631  1812  343C               	retlw	60
  5632  1813  34C3               	retlw	195
  5633  1814  34BD               	retlw	189
  5634  1815  34D2               	retlw	210
  5635  1816  3413               	retlw	19
  5636  1817  343D               	retlw	61
  5637  1818  3478               	retlw	120
  5638  1819  34D3               	retlw	211
  5639  181A  34BB               	retlw	187
  5640  181B                     __end_oflog@coeff:	
  5641  0013                     _TRISC	set	19
  5642  0012                     _TRISB	set	18
  5643  0011                     _TRISA	set	17
  5644  0018                     _LATC	set	24
  5645  0017                     _LATB	set	23
  5646  0016                     _LATA	set	22
  5647  0016                     _LATAbits	set	22
  5648  0011                     _TRISAbits	set	17
  5649  00B5                     _LATA5	set	181
  5650  006A                     _RB2	set	106
  5651  005F                     _GIE	set	95
  5652  0093                     _ADCON0	set	147
  5653  009D                     _ADACQ	set	157
  5654  009C                     _ADPRE	set	156
  5655  009B                     _ADCAP	set	155
  5656  009A                     _ADREF	set	154
  5657  0098                     _ADCLK	set	152
  5658  0097                     _ADSTAT	set	151
  5659  0099                     _ADACT	set	153
  5660  0096                     _ADCON3	set	150
  5661  0095                     _ADCON2	set	149
  5662  0094                     _ADCON1	set	148
  5663  008C                     _ADRESL	set	140
  5664  008D                     _ADRESH	set	141
  5665  0093                     _ADCON0bits	set	147
  5666  009E                     _ADPCH	set	158
  5667  0113                     _ADSTPTH	set	275
  5668  0112                     _ADSTPTL	set	274
  5669  0111                     _ADUTHH	set	273
  5670  0110                     _ADUTHL	set	272
  5671  010F                     _ADLTHH	set	271
  5672  010E                     _ADLTHL	set	270
  5673  010D                     _ADRPT	set	269
  5674  021E                     _CCPTMRS0bits	set	542
  5675  021F                     _CCPTMRS1bits	set	543
  5676  0294                     _T4CONbits	set	660
  5677  0292                     _T4TMR	set	658
  5678  0293                     _T4PR	set	659
  5679  0297                     _T4RST	set	663
  5680  0295                     _T4HLT	set	661
  5681  0296                     _T4CLKCON	set	662
  5682  0294                     _T4CON	set	660
  5683  028E                     _T2CONbits	set	654
  5684  028C                     _T2TMR	set	652
  5685  028D                     _T2PR	set	653
  5686  0291                     _T2RST	set	657
  5687  028F                     _T2HLT	set	655
  5688  0290                     _T2CLKCON	set	656
  5689  028E                     _T2CON	set	654
  5690  030C                     _CCPR1L	set	780
  5691  030D                     _CCPR1H	set	781
  5692  030E                     _CCP1CONbits	set	782
  5693  0390                     _PWM7DCL	set	912
  5694  0391                     _PWM7DCH	set	913
  5695  0392                     _PWM7CON	set	914
  5696  038C                     _PWM6DCL	set	908
  5697  038D                     _PWM6DCH	set	909
  5698  038E                     _PWM6CON	set	910
  5699  0710                     _PIR4bits	set	1808
  5700  0716                     _PIE0bits	set	1814
  5701  0892                     _OSCTUNE	set	2194
  5702  0893                     _OSCFRQ	set	2195
  5703  0891                     _OSCEN	set	2193
  5704  088F                     _OSCCON3	set	2191
  5705  088D                     _OSCCON1	set	2189
  5706  090C                     _FVRCON	set	2316
  5707  0E8F                     _PPSLOCKbits	set	3727
  5708  0E8F                     _PPSLOCK	set	3727
  5709  0F18                     _RB0PPS	set	3864
  5710  0F17                     _RA7PPS	set	3863
  5711  0F16                     _RA6PPS	set	3862
  5712  0F4E                     _ANSELC	set	3918
  5713  0F43                     _ANSELB	set	3907
  5714  0F38                     _ANSELA	set	3896
  5715  0F65                     _WPUE	set	3941
  5716  0F4F                     _WPUC	set	3919
  5717  0F44                     _WPUB	set	3908
  5718  0F39                     _WPUA	set	3897
  5719  181B                     STR_3:	
  5720  181B  3452               	retlw	82	;'R'
  5721  181C  3465               	retlw	101	;'e'
  5722  181D  3466               	retlw	102	;'f'
  5723  181E  343A               	retlw	58	;':'
  5724  181F  3400               	retlw	0
  5725                           
  5726                           	psect	stringtext3
  5727  1820                     __pstringtext3:	
  5728  1820                     STR_2:	
  5729  1820  344F               	retlw	79	;'O'
  5730  1821  3475               	retlw	117	;'u'
  5731  1822  3474               	retlw	116	;'t'
  5732  1823  343A               	retlw	58	;':'
  5733  1824  3400               	retlw	0
  5734                           
  5735                           	psect	stringtext4
  5736  1825                     __pstringtext4:	
  5737  1825                     STR_1:	
  5738  1825  3449               	retlw	73	;'I'
  5739  1826  346E               	retlw	110	;'n'
  5740  1827  343A               	retlw	58	;':'
  5741  1828  3400               	retlw	0
  5742                           
  5743                           	psect	stringtext5
  5744  0000                     __pstringtext5:	
  5745                           
  5746                           ; #config settings
  5747  0000                     
  5748                           	psect	cinit
  5749  07B1                     start_initialization:	
  5750  07B1                     __initialization:		;BIGRAM
  5751                           
  5752                           ; Initialize objects allocated to BANK0
  5753  07B1  3180  2004  3187   	fcall	__pidataBANK0	;fetch initializer
  5754  07B4  00ED               	movwf	__pdataBANK0& (0+127)
  5755  07B5  3180  2005  3187   	fcall	__pidataBANK0+1	;fetch initializer
  5756  07B8  00EE               	movwf	(__pdataBANK0+1)& (0+127)
  5757                           
  5758                           ; Initialize objects allocated to BANK2
  5759  07B9  3047               	movlw	low __pidataBANK2
  5760  07BA  0084               	movwf	4
  5761  07BB  309E               	movlw	(high __pidataBANK2)| (0+128)
  5762  07BC  0085               	movwf	5
  5763  07BD  3059               	movlw	low __pdataBANK2
  5764  07BE  0086               	movwf	6
  5765  07BF  3001               	movlw	high __pdataBANK2
  5766  07C0  0087               	movwf	7
  5767  07C1  3000               	movlw	0
  5768  07C2  00FF               	movwf	btemp+1
  5769  07C3  3010               	movlw	16
  5770  07C4  319E  261F  3187   	fcall	init_ram
  5771                           
  5772                           ; Clear objects allocated to BIGRAM
  5773  07C7  3060               	movlw	low (0+8800)
  5774  07C8  0084               	movwf	4
  5775  07C9  3022               	movlw	high (0+8800)
  5776  07CA  0085               	movwf	5
  5777  07CB  3090               	movlw	144
  5778  07CC  00FE               	movwf	btemp
  5779  07CD  3001               	movlw	1
  5780  07CE  00FF               	movwf	btemp+1
  5781  07CF  319E  2613  3187   	fcall	clear_ram0
  5782                           
  5783                           ; Clear objects allocated to BANK0
  5784  07D2  305E               	movlw	low __pbssBANK0
  5785  07D3  0084               	movwf	4
  5786  07D4  3000               	movlw	high __pbssBANK0
  5787  07D5  0085               	movwf	5
  5788  07D6  300F               	movlw	15
  5789  07D7  00FE               	movwf	btemp
  5790  07D8  3000               	movlw	0
  5791  07D9  00FF               	movwf	btemp+1
  5792  07DA  319E  2613  3187   	fcall	clear_ram0
  5793                           
  5794                           ; Clear objects allocated to BANK1
  5795  07DD  30A0               	movlw	low __pbssBANK1
  5796  07DE  0084               	movwf	4
  5797  07DF  3000               	movlw	high __pbssBANK1
  5798  07E0  0085               	movwf	5
  5799  07E1  302A               	movlw	42
  5800  07E2  00FE               	movwf	btemp
  5801  07E3  3000               	movlw	0
  5802  07E4  00FF               	movwf	btemp+1
  5803  07E5  319E  2613  3187   	fcall	clear_ram0
  5804                           
  5805                           ; Clear objects allocated to BANK2
  5806  07E8  3020               	movlw	low __pbssBANK2
  5807  07E9  0084               	movwf	4
  5808  07EA  3001               	movlw	high __pbssBANK2
  5809  07EB  0085               	movwf	5
  5810  07EC  3039               	movlw	57
  5811  07ED  00FE               	movwf	btemp
  5812  07EE  3000               	movlw	0
  5813  07EF  00FF               	movwf	btemp+1
  5814  07F0  319E  2613  3187   	fcall	clear_ram0
  5815                           
  5816                           ; Clear objects allocated to BANK3
  5817  07F3  30A0               	movlw	low __pbssBANK3
  5818  07F4  0084               	movwf	4
  5819  07F5  3001               	movlw	high __pbssBANK3
  5820  07F6  0085               	movwf	5
  5821  07F7  3028               	movlw	40
  5822  07F8  00FE               	movwf	btemp
  5823  07F9  3000               	movlw	0
  5824  07FA  00FF               	movwf	btemp+1
  5825  07FB  319E  2613         	fcall	clear_ram0
  5826  07FD                     end_of_initialization:	
  5827                           ;End of C runtime variable initialization code
  5828                           
  5829  07FD                     __end_of__initialization:	
  5830  07FD  0020               	movlb	0
  5831  07FE  3180  284B         	ljmp	_main	;jump to C main() function
  5832                           
  5833                           	psect	bssBANK0
  5834  005E                     __pbssBANK0:	
  5835  005E                     _readButtons:	
  5836  005E                     	ds	2
  5837  0060                     _VHoldMode:	
  5838  0060                     	ds	2
  5839  0062                     _Imode:	
  5840  0062                     	ds	2
  5841  0064                     _batteryState:	
  5842  0064                     	ds	2
  5843  0066                     _IsampleIndex:	
  5844  0066                     	ds	2
  5845  0068                     _j:	
  5846  0068                     	ds	1
  5847  0069                     _lastButton:	
  5848  0069                     	ds	1
  5849  006A                     _button:	
  5850  006A                     	ds	1
  5851  006B                     _otherState:	
  5852  006B                     	ds	1
  5853  006C                     _x:	
  5854  006C                     	ds	1
  5855                           
  5856                           	psect	dataBANK0
  5857  006D                     __pdataBANK0:	
  5858  006D                     _batteryTemp:	
  5859  006D                     	ds	2
  5860                           
  5861                           	psect	bssBANK1
  5862  00A0                     __pbssBANK1:	
  5863  00A0                     _voltage:	
  5864  00A0                     	ds	8
  5865  00A8                     _current:	
  5866  00A8                     	ds	8
  5867  00B0                     _Vref:	
  5868  00B0                     	ds	4
  5869  00B4                     _stateCounter:	
  5870  00B4                     	ds	4
  5871  00B8                     _Iref:	
  5872  00B8                     	ds	4
  5873  00BC                     _IminCount:	
  5874  00BC                     	ds	4
  5875  00C0                     _errno:	
  5876  00C0                     	ds	2
  5877  00C2                     _floatCount:	
  5878  00C2                     	ds	2
  5879  00C4                     _Iout:	
  5880  00C4                     	ds	2
  5881  00C6                     _cc_cv:	
  5882  00C6                     	ds	2
  5883  00C8                     _VsampleIndex:	
  5884  00C8                     	ds	2
  5885                           
  5886                           	psect	bssBANK2
  5887  0120                     __pbssBANK2:	
  5888  0120                     _Vtotals:	
  5889  0120                     	ds	16
  5890  0130                     _Itotals:	
  5891  0130                     	ds	16
  5892  0140                     _Ianalogs:	
  5893  0140                     	ds	8
  5894  0148                     _Vanalogs:	
  5895  0148                     	ds	8
  5896  0150                     LCDWriteInt@F14392:	
  5897  0150                     	ds	5
  5898  0155                     _Imin:	
  5899  0155                     	ds	4
  5900                           
  5901                           	psect	dataBANK2
  5902  0159                     __pdataBANK2:	
  5903  0159                     _Vchannels:	
  5904  0159                     	ds	8
  5905  0161                     _Ichannels:	
  5906  0161                     	ds	8
  5907                           
  5908                           	psect	bssBANK3
  5909  01A0                     __pbssBANK3:	
  5910  01A0                     _Vsamples:	
  5911  01A0                     	ds	40
  5912                           
  5913                           	psect	inittext
  5914  1E1F                     init_ram:	
  5915  1E1F  00FE               	movwf	126
  5916  1E20                     initloop:	
  5917  1E20  0012               	moviw fsr0++
  5918  1E21  001E               	movwi fsr1++
  5919  1E22  3001               	movlw	1
  5920  1E23  02FE               	subwf	126,f
  5921  1E24  3000               	movlw	0
  5922  1E25  3BFF               	subwfb	127,f
  5923  1E26  087F               	movf	127,w
  5924  1E27  047E               	iorwf	126,w
  5925  1E28  1903               	btfsc	3,2
  5926  1E29  3400               	retlw	0
  5927  1E2A  2E20               	goto	initloop
  5928                           
  5929                           	psect	clrtext
  5930  1E13                     clear_ram0:	
  5931                           ;	Called with FSR0 containing the base address, and
  5932                           ;	btemp/btemp+1 has the size to clear
  5933                           
  5934  1E13  0064               	clrwdt	;clear the watchdog before getting into this loop
  5935  1E14                     clrloop0:	
  5936  1E14  0180               	clrf	0	;clear RAM location pointed to by FSR
  5937  1E15  3101               	addfsr 0,1
  5938  1E16  3001               	movlw	1
  5939  1E17  02FE               	subwf	126,f
  5940  1E18  3000               	movlw	0
  5941  1E19  3BFF               	subwfb	127,f
  5942  1E1A  087F               	movf	127,w
  5943  1E1B  047E               	iorwf	126,w
  5944  1E1C  1903               	btfsc	3,2
  5945  1E1D  3400               	retlw	0	;all done for this memory range, return
  5946  1E1E  2E14               	goto	clrloop0	;have we reached the end yet?
  5947                           
  5948                           	psect	cstackBANK1
  5949  00CA                     __pcstackBANK1:	
  5950  00CA                     main@efficiency:	
  5951                           
  5952                           ; 3 bytes @ 0x0
  5953  00CA                     	ds	3
  5954  00CD                     main@faultCount:	
  5955                           
  5956                           ; 2 bytes @ 0x3
  5957  00CD                     	ds	2
  5958  00CF                     main@faultNotReset:	
  5959                           
  5960                           ; 2 bytes @ 0x5
  5961  00CF                     	ds	2
  5962  00D1                     main@fastLoop:	
  5963                           
  5964                           ; 1 bytes @ 0x7
  5965  00D1                     	ds	1
  5966  00D2                     main@tempVoltage:	
  5967                           
  5968                           ; 8 bytes @ 0x8
  5969  00D2                     	ds	8
  5970  00DA                     main@displayRefresh:	
  5971                           
  5972                           ; 1 bytes @ 0x10
  5973  00DA                     	ds	1
  5974  00DB                     main@slowLoop:	
  5975                           
  5976                           ; 1 bytes @ 0x11
  5977  00DB                     	ds	1
  5978  00DC                     main@MPPT0:	
  5979                           
  5980                           ; 2 bytes @ 0x12
  5981  00DC                     	ds	2
  5982  00DE                     main@MPPT1:	
  5983                           
  5984                           ; 2 bytes @ 0x14
  5985  00DE                     	ds	2
  5986  00E0                     main@largerIOut:	
  5987                           
  5988                           ; 2 bytes @ 0x16
  5989  00E0                     	ds	2
  5990  00E2                     main@menuButton:	
  5991                           
  5992                           ; 1 bytes @ 0x18
  5993  00E2                     	ds	1
  5994  00E3                     main@dutyCycle1:	
  5995                           
  5996                           ; 2 bytes @ 0x19
  5997  00E3                     	ds	2
  5998  00E5                     main@tempFanOutput:	
  5999                           
  6000                           ; 2 bytes @ 0x1B
  6001  00E5                     	ds	2
  6002  00E7                     _main$1309:	
  6003                           
  6004                           ; 3 bytes @ 0x1D
  6005  00E7                     	ds	3
  6006  00EA                     main@dutyCycle6:	
  6007                           
  6008                           ; 2 bytes @ 0x20
  6009  00EA                     	ds	2
  6010  00EC                     main@dutyCycle7:	
  6011                           
  6012                           ; 2 bytes @ 0x22
  6013  00EC                     	ds	2
  6014  00EE                     main@j:	
  6015                           
  6016                           ; 1 bytes @ 0x24
  6017  00EE                     	ds	1
  6018                           
  6019                           	psect	cstackCOMMON
  6020  0070                     __pcstackCOMMON:	
  6021  0070                     ?_LCDWrite:	
  6022  0070                     ?_OSCILLATOR_Initialize:	
  6023                           ; 1 bytes @ 0x0
  6024                           
  6025  0070                     ??_OSCILLATOR_Initialize:	
  6026                           ; 1 bytes @ 0x0
  6027                           
  6028  0070                     ?_TMR2_Initialize:	
  6029                           ; 1 bytes @ 0x0
  6030                           
  6031  0070                     ??_TMR2_Initialize:	
  6032                           ; 1 bytes @ 0x0
  6033                           
  6034  0070                     ?_TMR4_Initialize:	
  6035                           ; 1 bytes @ 0x0
  6036                           
  6037  0070                     ??_TMR4_Initialize:	
  6038                           ; 1 bytes @ 0x0
  6039                           
  6040  0070                     ?_calculateCurrent0:	
  6041                           ; 1 bytes @ 0x0
  6042                           
  6043  0070                     ?_calculateCurrent2:	
  6044                           ; 1 bytes @ 0x0
  6045                           
  6046  0070                     ??_calculateCurrent2:	
  6047                           ; 1 bytes @ 0x0
  6048                           
  6049  0070                     ?_calculateCurrent3:	
  6050                           ; 1 bytes @ 0x0
  6051                           
  6052  0070                     ?_ADC_Initialize:	
  6053                           ; 1 bytes @ 0x0
  6054                           
  6055  0070                     ??_ADC_Initialize:	
  6056                           ; 1 bytes @ 0x0
  6057                           
  6058  0070                     ?_Init_Battery_State_Machine:	
  6059                           ; 1 bytes @ 0x0
  6060                           
  6061  0070                     ?_Battery_State_Machine:	
  6062                           ; 1 bytes @ 0x0
  6063                           
  6064  0070                     ?_cc_cv_mode:	
  6065                           ; 1 bytes @ 0x0
  6066                           
  6067  0070                     ?_readButton:	
  6068                           ; 1 bytes @ 0x0
  6069                           
  6070  0070                     ?_LCDWriteCharacter:	
  6071                           ; 1 bytes @ 0x0
  6072                           
  6073  0070                     ?_LCDClear:	
  6074                           ; 1 bytes @ 0x0
  6075                           
  6076  0070                     ?_LCDInit:	
  6077                           ; 1 bytes @ 0x0
  6078                           
  6079  0070                     ?_PIN_MANAGER_Initialize:	
  6080                           ; 1 bytes @ 0x0
  6081                           
  6082  0070                     ??_PIN_MANAGER_Initialize:	
  6083                           ; 1 bytes @ 0x0
  6084                           
  6085  0070                     ?_PWM_Initialize:	
  6086                           ; 1 bytes @ 0x0
  6087                           
  6088  0070                     ??_PWM_Initialize:	
  6089                           ; 1 bytes @ 0x0
  6090                           
  6091  0070                     ?_PWM6_LoadDutyValue:	
  6092                           ; 1 bytes @ 0x0
  6093                           
  6094  0070                     ?_PWM7_LoadDutyValue:	
  6095                           ; 1 bytes @ 0x0
  6096                           
  6097  0070                     ?_PWM1_LoadDutyValue:	
  6098                           ; 1 bytes @ 0x0
  6099                           
  6100  0070                     ?_SYSTEM_Initialize:	
  6101                           ; 1 bytes @ 0x0
  6102                           
  6103  0070                     ?_main:	
  6104                           ; 1 bytes @ 0x0
  6105                           
  6106  0070                     ?___bmul:	
  6107                           ; 1 bytes @ 0x0
  6108                           
  6109  0070                     ?_ADCRead:	
  6110                           ; 1 bytes @ 0x0
  6111                           
  6112  0070                     ?___wmul:	
  6113                           ; 2 bytes @ 0x0
  6114                           
  6115  0070                     ?___awdiv:	
  6116                           ; 2 bytes @ 0x0
  6117                           
  6118  0070                     ?___lwmod:	
  6119                           ; 2 bytes @ 0x0
  6120                           
  6121  0070                     ?___ftpack:	
  6122                           ; 2 bytes @ 0x0
  6123                           
  6124  0070                     ?_frexp:	
  6125                           ; 3 bytes @ 0x0
  6126                           
  6127  0070                     ?___aldiv:	
  6128                           ; 3 bytes @ 0x0
  6129                           
  6130  0070                     LCDWrite@data:	
  6131                           ; 4 bytes @ 0x0
  6132                           
  6133  0070                     PIN_MANAGER_Initialize@state:	
  6134                           ; 1 bytes @ 0x0
  6135                           
  6136  0070                     ___bmul@multiplicand:	
  6137                           ; 1 bytes @ 0x0
  6138                           
  6139  0070                     PWM6_LoadDutyValue@dutyCycle6:	
  6140                           ; 1 bytes @ 0x0
  6141                           
  6142  0070                     PWM7_LoadDutyValue@dutyCycle7:	
  6143                           ; 2 bytes @ 0x0
  6144                           
  6145  0070                     PWM1_LoadDutyValue@dutyCycle1:	
  6146                           ; 2 bytes @ 0x0
  6147                           
  6148  0070                     ___wmul@multiplier:	
  6149                           ; 2 bytes @ 0x0
  6150                           
  6151  0070                     ___awdiv@divisor:	
  6152                           ; 2 bytes @ 0x0
  6153                           
  6154  0070                     ___lwmod@divisor:	
  6155                           ; 2 bytes @ 0x0
  6156                           
  6157  0070                     ___ftpack@arg:	
  6158                           ; 2 bytes @ 0x0
  6159                           
  6160  0070                     frexp@value:	
  6161                           ; 3 bytes @ 0x0
  6162                           
  6163  0070                     ___aldiv@divisor:	
  6164                           ; 3 bytes @ 0x0
  6165                           
  6166                           
  6167                           ; 4 bytes @ 0x0
  6168  0070                     	ds	1
  6169  0071                     ??_LCDWrite:	
  6170  0071                     ??___bmul:	
  6171                           ; 1 bytes @ 0x1
  6172                           
  6173                           
  6174                           ; 1 bytes @ 0x1
  6175  0071                     	ds	1
  6176  0072                     ??_PWM6_LoadDutyValue:	
  6177  0072                     ??_PWM7_LoadDutyValue:	
  6178                           ; 1 bytes @ 0x2
  6179                           
  6180  0072                     ??_PWM1_LoadDutyValue:	
  6181                           ; 1 bytes @ 0x2
  6182                           
  6183  0072                     LCDWrite@data_or_command:	
  6184                           ; 1 bytes @ 0x2
  6185                           
  6186  0072                     ___bmul@product:	
  6187                           ; 1 bytes @ 0x2
  6188                           
  6189  0072                     ___wmul@multiplicand:	
  6190                           ; 1 bytes @ 0x2
  6191                           
  6192  0072                     ___awdiv@dividend:	
  6193                           ; 2 bytes @ 0x2
  6194                           
  6195  0072                     ___lwmod@dividend:	
  6196                           ; 2 bytes @ 0x2
  6197                           
  6198                           
  6199                           ; 2 bytes @ 0x2
  6200  0072                     	ds	1
  6201  0073                     ??_ADCRead:	
  6202  0073                     ADCRead@channel:	
  6203                           ; 1 bytes @ 0x3
  6204                           
  6205  0073                     LCDWrite@d:	
  6206                           ; 1 bytes @ 0x3
  6207                           
  6208  0073                     ___bmul@multiplier:	
  6209                           ; 1 bytes @ 0x3
  6210                           
  6211  0073                     ___ftpack@exp:	
  6212                           ; 1 bytes @ 0x3
  6213                           
  6214  0073                     frexp@eptr:	
  6215                           ; 1 bytes @ 0x3
  6216                           
  6217                           
  6218                           ; 1 bytes @ 0x3
  6219  0073                     	ds	1
  6220  0074                     ??_frexp:	
  6221  0074                     ??_readButton:	
  6222                           ; 1 bytes @ 0x4
  6223                           
  6224  0074                     ??___wmul:	
  6225                           ; 1 bytes @ 0x4
  6226                           
  6227  0074                     ??___awdiv:	
  6228                           ; 1 bytes @ 0x4
  6229                           
  6230  0074                     ??___lwmod:	
  6231                           ; 1 bytes @ 0x4
  6232                           
  6233  0074                     LCDWrite@i:	
  6234                           ; 1 bytes @ 0x4
  6235                           
  6236  0074                     ___ftpack@sign:	
  6237                           ; 1 bytes @ 0x4
  6238                           
  6239  0074                     ___wmul@product:	
  6240                           ; 1 bytes @ 0x4
  6241                           
  6242  0074                     ___aldiv@dividend:	
  6243                           ; 2 bytes @ 0x4
  6244                           
  6245                           
  6246                           ; 4 bytes @ 0x4
  6247  0074                     	ds	1
  6248  0075                     ??___ftpack:	
  6249  0075                     ?_gotoXY:	
  6250                           ; 1 bytes @ 0x5
  6251                           
  6252  0075                     ??_LCDInit:	
  6253                           ; 1 bytes @ 0x5
  6254                           
  6255  0075                     gotoXY@y:	
  6256                           ; 1 bytes @ 0x5
  6257                           
  6258  0075                     ___awdiv@counter:	
  6259                           ; 1 bytes @ 0x5
  6260                           
  6261  0075                     ___lwmod@counter:	
  6262                           ; 1 bytes @ 0x5
  6263                           
  6264                           
  6265                           ; 1 bytes @ 0x5
  6266  0075                     	ds	1
  6267  0076                     ??_gotoXY:	
  6268  0076                     ??_LCDWriteCharacter:	
  6269                           ; 1 bytes @ 0x6
  6270                           
  6271  0076                     ___awdiv@sign:	
  6272                           ; 1 bytes @ 0x6
  6273                           
  6274                           
  6275                           ; 1 bytes @ 0x6
  6276  0076                     	ds	1
  6277  0077                     gotoXY@x:	
  6278  0077                     ___awdiv@quotient:	
  6279                           ; 1 bytes @ 0x7
  6280                           
  6281                           
  6282                           ; 2 bytes @ 0x7
  6283  0077                     	ds	1
  6284  0078                     ??_LCDClear:	
  6285  0078                     ??___aldiv:	
  6286                           ; 1 bytes @ 0x8
  6287                           
  6288                           
  6289                           ; 1 bytes @ 0x8
  6290  0078                     	ds	1
  6291  0079                     ?___awtoft:	
  6292  0079                     LCDWriteCharacter@character:	
  6293                           ; 3 bytes @ 0x9
  6294                           
  6295  0079                     readIAnalog@analog_channel:	
  6296                           ; 1 bytes @ 0x9
  6297                           
  6298  0079                     readVAnalog@analog_channel:	
  6299                           ; 2 bytes @ 0x9
  6300                           
  6301  0079                     LCDClear@index:	
  6302                           ; 2 bytes @ 0x9
  6303                           
  6304  0079                     ___awtoft@c:	
  6305                           ; 2 bytes @ 0x9
  6306                           
  6307                           
  6308                           ; 2 bytes @ 0x9
  6309  0079                     	ds	1
  6310  007A                     LCDWriteCharacter@base:	
  6311                           
  6312                           ; 2 bytes @ 0xA
  6313  007A                     	ds	1
  6314  007B                     readIAnalog@value:	
  6315  007B                     readVAnalog@value:	
  6316                           ; 2 bytes @ 0xB
  6317                           
  6318                           
  6319                           ; 2 bytes @ 0xB
  6320  007B                     	ds	1
  6321  007C                     ?_LCDWriteString:	
  6322  007C                     ??___awtoft:	
  6323                           ; 1 bytes @ 0xC
  6324                           
  6325  007C                     LCDWriteString@characters:	
  6326                           ; 1 bytes @ 0xC
  6327                           
  6328                           
  6329                           ; 2 bytes @ 0xC
  6330  007C                     	ds	2
  6331  007E                     ??_eval_poly:	
  6332  007E                     ??_tempCalc:	
  6333                           ; 1 bytes @ 0xE
  6334                           
  6335  007E                     ??___ftsub:	
  6336                           ; 1 bytes @ 0xE
  6337                           
  6338                           
  6339                           	psect	cstackBANK0
  6340  0020                     __pcstackBANK0:	
  6341                           ; 1 bytes @ 0xE
  6342                           
  6343  0020                     ??_LCDWriteString:	
  6344  0020                     ___aldiv@counter:	
  6345                           ; 1 bytes @ 0x0
  6346                           
  6347  0020                     ___awtoft@sign:	
  6348                           ; 1 bytes @ 0x0
  6349                           
  6350                           
  6351                           ; 1 bytes @ 0x0
  6352  0020                     	ds	1
  6353  0021                     ?___ftdiv:	
  6354  0021                     ?___ftmul:	
  6355                           ; 3 bytes @ 0x1
  6356                           
  6357  0021                     ___aldiv@sign:	
  6358                           ; 3 bytes @ 0x1
  6359                           
  6360  0021                     ___ftdiv@f2:	
  6361                           ; 1 bytes @ 0x1
  6362                           
  6363  0021                     ___ftmul@f1:	
  6364                           ; 3 bytes @ 0x1
  6365                           
  6366                           
  6367                           ; 3 bytes @ 0x1
  6368  0021                     	ds	1
  6369  0022                     ___aldiv@quotient:	
  6370                           
  6371                           ; 4 bytes @ 0x2
  6372  0022                     	ds	2
  6373  0024                     ___ftdiv@f1:	
  6374  0024                     ___ftmul@f2:	
  6375                           ; 3 bytes @ 0x4
  6376                           
  6377                           
  6378                           ; 3 bytes @ 0x4
  6379  0024                     	ds	2
  6380  0026                     ?_readIAnalog:	
  6381  0026                     ?_readVAnalog:	
  6382                           ; 2 bytes @ 0x6
  6383                           
  6384  0026                     readIAnalog@channel:	
  6385                           ; 2 bytes @ 0x6
  6386                           
  6387  0026                     readVAnalog@channel:	
  6388                           ; 2 bytes @ 0x6
  6389                           
  6390                           
  6391                           ; 2 bytes @ 0x6
  6392  0026                     	ds	1
  6393  0027                     ??___ftdiv:	
  6394  0027                     ??___ftmul:	
  6395                           ; 1 bytes @ 0x7
  6396                           
  6397                           
  6398                           ; 1 bytes @ 0x7
  6399  0027                     	ds	1
  6400  0028                     ??_readIAnalog:	
  6401  0028                     ??_readVAnalog:	
  6402                           ; 1 bytes @ 0x8
  6403                           
  6404                           
  6405                           ; 1 bytes @ 0x8
  6406  0028                     	ds	3
  6407  002B                     ___ftdiv@cntr:	
  6408  002B                     ___ftmul@exp:	
  6409                           ; 1 bytes @ 0xB
  6410                           
  6411                           
  6412                           ; 1 bytes @ 0xB
  6413  002B                     	ds	1
  6414  002C                     ___ftdiv@f3:	
  6415  002C                     ___ftmul@f3_as_product:	
  6416                           ; 3 bytes @ 0xC
  6417                           
  6418                           
  6419                           ; 3 bytes @ 0xC
  6420  002C                     	ds	3
  6421  002F                     ___ftdiv@exp:	
  6422  002F                     ___ftmul@cntr:	
  6423                           ; 1 bytes @ 0xF
  6424                           
  6425                           
  6426                           ; 1 bytes @ 0xF
  6427  002F                     	ds	1
  6428  0030                     ___ftdiv@sign:	
  6429  0030                     ___ftmul@sign:	
  6430                           ; 1 bytes @ 0x10
  6431                           
  6432                           
  6433                           ; 1 bytes @ 0x10
  6434  0030                     	ds	1
  6435  0031                     ?___ftge:	
  6436  0031                     ?___ftadd:	
  6437                           ; 1 bit 
  6438                           
  6439  0031                     ?___fttol:	
  6440                           ; 3 bytes @ 0x11
  6441                           
  6442  0031                     ___ftadd@f1:	
  6443                           ; 4 bytes @ 0x11
  6444                           
  6445  0031                     ___ftge@ff1:	
  6446                           ; 3 bytes @ 0x11
  6447                           
  6448  0031                     ___fttol@f1:	
  6449                           ; 3 bytes @ 0x11
  6450                           
  6451                           
  6452                           ; 3 bytes @ 0x11
  6453  0031                     	ds	3
  6454  0034                     ___ftadd@f2:	
  6455  0034                     ___ftge@ff2:	
  6456                           ; 3 bytes @ 0x14
  6457                           
  6458                           
  6459                           ; 3 bytes @ 0x14
  6460  0034                     	ds	1
  6461  0035                     ??___fttol:	
  6462                           
  6463                           ; 1 bytes @ 0x15
  6464  0035                     	ds	2
  6465  0037                     ??___ftadd:	
  6466  0037                     ??___ftge:	
  6467                           ; 1 bytes @ 0x17
  6468                           
  6469                           
  6470                           ; 1 bytes @ 0x17
  6471  0037                     	ds	2
  6472  0039                     ___fttol@sign1:	
  6473                           
  6474                           ; 1 bytes @ 0x19
  6475  0039                     	ds	1
  6476  003A                     ___fttol@lval:	
  6477                           
  6478                           ; 4 bytes @ 0x1A
  6479  003A                     	ds	1
  6480  003B                     ___ftadd@sign:	
  6481                           
  6482                           ; 1 bytes @ 0x1B
  6483  003B                     	ds	1
  6484  003C                     ___ftadd@exp2:	
  6485                           
  6486                           ; 1 bytes @ 0x1C
  6487  003C                     	ds	1
  6488  003D                     ___ftadd@exp1:	
  6489                           
  6490                           ; 1 bytes @ 0x1D
  6491  003D                     	ds	1
  6492  003E                     ?_eval_poly:	
  6493  003E                     ?___ftsub:	
  6494                           ; 3 bytes @ 0x1E
  6495                           
  6496  003E                     ___fttol@exp1:	
  6497                           ; 3 bytes @ 0x1E
  6498                           
  6499  003E                     ___ftsub@f2:	
  6500                           ; 1 bytes @ 0x1E
  6501                           
  6502  003E                     eval_poly@x:	
  6503                           ; 3 bytes @ 0x1E
  6504                           
  6505                           
  6506                           ; 3 bytes @ 0x1E
  6507  003E                     	ds	1
  6508  003F                     ??_calculateCurrent0:	
  6509  003F                     ??_calculateCurrent3:	
  6510                           ; 1 bytes @ 0x1F
  6511                           
  6512  003F                     ??_Init_Battery_State_Machine:	
  6513                           ; 1 bytes @ 0x1F
  6514                           
  6515  003F                     ??_Battery_State_Machine:	
  6516                           ; 1 bytes @ 0x1F
  6517                           
  6518  003F                     ??_cc_cv_mode:	
  6519                           ; 1 bytes @ 0x1F
  6520                           
  6521  003F                     ?_LCDWriteInt:	
  6522                           ; 1 bytes @ 0x1F
  6523                           
  6524  003F                     LCDWriteInt@value:	
  6525                           ; 1 bytes @ 0x1F
  6526                           
  6527                           
  6528                           ; 2 bytes @ 0x1F
  6529  003F                     	ds	2
  6530  0041                     LCDWriteInt@fieldLength:	
  6531  0041                     eval_poly@d:	
  6532                           ; 1 bytes @ 0x21
  6533                           
  6534  0041                     ___ftsub@f1:	
  6535                           ; 2 bytes @ 0x21
  6536                           
  6537                           
  6538                           ; 3 bytes @ 0x21
  6539  0041                     	ds	1
  6540  0042                     LCDWriteInt@numPlaces:	
  6541                           
  6542                           ; 1 bytes @ 0x22
  6543  0042                     	ds	1
  6544  0043                     Init_Battery_State_Machine@z:	
  6545  0043                     LCDWriteInt@sign:	
  6546                           ; 1 bytes @ 0x23
  6547                           
  6548  0043                     eval_poly@n:	
  6549                           ; 1 bytes @ 0x23
  6550                           
  6551                           
  6552                           ; 2 bytes @ 0x23
  6553  0043                     	ds	1
  6554  0044                     ??_LCDWriteInt:	
  6555  0044                     ??_SYSTEM_Initialize:	
  6556                           ; 1 bytes @ 0x24
  6557                           
  6558  0044                     Battery_State_Machine@z:	
  6559                           ; 1 bytes @ 0x24
  6560                           
  6561                           
  6562                           ; 1 bytes @ 0x24
  6563  0044                     	ds	1
  6564  0045                     eval_poly@res:	
  6565                           
  6566                           ; 3 bytes @ 0x25
  6567  0045                     	ds	1
  6568  0046                     cc_cv_mode@z:	
  6569                           
  6570                           ; 1 bytes @ 0x26
  6571  0046                     	ds	2
  6572  0048                     ?_log:	
  6573  0048                     log@x:	
  6574                           ; 3 bytes @ 0x28
  6575                           
  6576  0048                     LCDWriteInt@str:	
  6577                           ; 3 bytes @ 0x28
  6578                           
  6579                           
  6580                           ; 5 bytes @ 0x28
  6581  0048                     	ds	3
  6582  004B                     ??_log:	
  6583                           
  6584                           ; 1 bytes @ 0x2B
  6585  004B                     	ds	1
  6586  004C                     log@exponent:	
  6587                           
  6588                           ; 2 bytes @ 0x2C
  6589  004C                     	ds	1
  6590  004D                     LCDWriteInt@j:	
  6591                           
  6592                           ; 1 bytes @ 0x2D
  6593  004D                     	ds	1
  6594  004E                     ?_tempCalc:	
  6595  004E                     LCDWriteInt@i:	
  6596                           ; 2 bytes @ 0x2E
  6597                           
  6598  004E                     tempCalc@analogValue:	
  6599                           ; 1 bytes @ 0x2E
  6600                           
  6601                           
  6602                           ; 2 bytes @ 0x2E
  6603  004E                     	ds	2
  6604  0050                     tempCalc@R:	
  6605                           
  6606                           ; 3 bytes @ 0x30
  6607  0050                     	ds	3
  6608  0053                     _tempCalc$1308:	
  6609                           
  6610                           ; 3 bytes @ 0x33
  6611  0053                     	ds	3
  6612  0056                     tempCalc@steinhart:	
  6613                           
  6614                           ; 3 bytes @ 0x36
  6615  0056                     	ds	3
  6616  0059                     ??_main:	
  6617                           
  6618                           ; 1 bytes @ 0x39
  6619  0059                     	ds	5
  6620                           
  6621                           	psect	maintext
  6622  004B                     __pmaintext:	
  6623 ;;
  6624 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  6625 ;;
  6626 ;; *************** function _main *****************
  6627 ;; Defined at:
  6628 ;;		line 33 in file "main.c"
  6629 ;; Parameters:    Size  Location     Type
  6630 ;;		None
  6631 ;; Auto vars:     Size  Location     Type
  6632 ;;  tempVoltage     8    8[BANK1 ] int [4]
  6633 ;;  efficiency      3    0[BANK1 ] float 
  6634 ;;  dutyCycle7      2   34[BANK1 ] unsigned int 
  6635 ;;  dutyCycle6      2   32[BANK1 ] unsigned int 
  6636 ;;  tempFanOutpu    2   27[BANK1 ] unsigned int 
  6637 ;;  dutyCycle1      2   25[BANK1 ] unsigned int 
  6638 ;;  largerIOut      2   22[BANK1 ] int 
  6639 ;;  MPPT1           2   20[BANK1 ] int 
  6640 ;;  MPPT0           2   18[BANK1 ] int 
  6641 ;;  faultNotRese    2    5[BANK1 ] unsigned int 
  6642 ;;  faultCount      2    3[BANK1 ] unsigned int 
  6643 ;;  j               1   36[BANK1 ] unsigned char 
  6644 ;;  menuButton      1   24[BANK1 ] unsigned char 
  6645 ;;  slowLoop        1   17[BANK1 ] unsigned char 
  6646 ;;  displayRefre    1   16[BANK1 ] unsigned char 
  6647 ;;  fastLoop        1    7[BANK1 ] unsigned char 
  6648 ;; Return value:  Size  Location     Type
  6649 ;;                  1    wreg      void 
  6650 ;; Registers used:
  6651 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6652 ;; Tracked objects:
  6653 ;;		On entry : B1F/0
  6654 ;;		On exit  : 0/0
  6655 ;;		Unchanged: 0/0
  6656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6658 ;;      Locals:         0       0      37       0       0       0       0       0       0       0       0       0       
      +0       0
  6659 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6660 ;;      Totals:         0       5      37       0       0       0       0       0       0       0       0       0       
      +0       0
  6661 ;;Total ram usage:       42 bytes
  6662 ;; Hardware stack levels required when called:    5
  6663 ;; This function calls:
  6664 ;;		_ADCRead
  6665 ;;		_Battery_State_Machine
  6666 ;;		_LCDClear
  6667 ;;		_LCDInit
  6668 ;;		_LCDWriteCharacter
  6669 ;;		_LCDWriteInt
  6670 ;;		_LCDWriteString
  6671 ;;		_PWM1_LoadDutyValue
  6672 ;;		_PWM6_LoadDutyValue
  6673 ;;		_PWM7_LoadDutyValue
  6674 ;;		_SYSTEM_Initialize
  6675 ;;		___awdiv
  6676 ;;		___awtoft
  6677 ;;		___ftdiv
  6678 ;;		___ftge
  6679 ;;		___ftmul
  6680 ;;		___fttol
  6681 ;;		_calculateCurrent0
  6682 ;;		_calculateCurrent2
  6683 ;;		_calculateCurrent3
  6684 ;;		_cc_cv_mode
  6685 ;;		_gotoXY
  6686 ;;		_readButton
  6687 ;;		_readIAnalog
  6688 ;;		_readVAnalog
  6689 ;;		_tempCalc
  6690 ;; This function is called by:
  6691 ;;		Startup code after reset
  6692 ;; This function uses a non-reentrant model
  6693 ;;
  6694                           
  6695                           
  6696                           ;psect for function _main
  6697  004B                     _main:	
  6698                           
  6699                           ;main.c: 35: int16_t MPPT0 = 3144;
  6700                           
  6701                           ;incstack = 0
  6702                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6703  004B  3048               	movlw	72
  6704  004C  0021               	movlb	1	; select bank1
  6705  004D  00DC               	movwf	main@MPPT0^(0+128)
  6706  004E  300C               	movlw	12
  6707  004F  00DD               	movwf	(main@MPPT0^(0+128)+1)
  6708                           
  6709                           ;main.c: 36: int16_t MPPT1 = 3144;
  6710  0050  3048               	movlw	72
  6711  0051  00DE               	movwf	main@MPPT1^(0+128)
  6712  0052  300C               	movlw	12
  6713  0053  00DF               	movwf	(main@MPPT1^(0+128)+1)
  6714                           
  6715                           ;main.c: 38: extern uint8_t batteryState[2];
  6716                           ;main.c: 39: uint8_t displayRefresh = 0;
  6717  0054  01DA               	clrf	main@displayRefresh^(0+128)
  6718                           
  6719                           ;main.c: 40: uint16_t dutyCycle6 = 1023;
  6720  0055  30FF               	movlw	255
  6721  0056  00EA               	movwf	main@dutyCycle6^(0+128)
  6722  0057  3003               	movlw	3
  6723  0058  00EB               	movwf	(main@dutyCycle6^(0+128)+1)
  6724                           
  6725                           ;main.c: 41: uint16_t dutyCycle7 = 1023;
  6726  0059  30FF               	movlw	255
  6727  005A  00EC               	movwf	main@dutyCycle7^(0+128)
  6728  005B  3003               	movlw	3
  6729  005C  00ED               	movwf	(main@dutyCycle7^(0+128)+1)
  6730                           
  6731                           ;main.c: 42: uint16_t dutyCycle1 = 260;
  6732  005D  3004               	movlw	4
  6733  005E  00E3               	movwf	main@dutyCycle1^(0+128)
  6734  005F  3001               	movlw	1
  6735  0060  00E4               	movwf	(main@dutyCycle1^(0+128)+1)
  6736                           
  6737                           ;main.c: 43: float efficiency = 0;
  6738  0061  3000               	movlw	0
  6739  0062  00CA               	movwf	main@efficiency^(0+128)
  6740  0063  3000               	movlw	0
  6741  0064  00CB               	movwf	(main@efficiency+1)^(0+128)
  6742  0065  3000               	movlw	0
  6743  0066  00CC               	movwf	(main@efficiency+2)^(0+128)
  6744                           
  6745                           ;main.c: 44: uint16_t faultCount = 0;
  6746  0067  01CD               	clrf	main@faultCount^(0+128)
  6747  0068  01CE               	clrf	(main@faultCount+1)^(0+128)
  6748                           
  6749                           ;main.c: 45: uint16_t faultNotReset = 0;
  6750  0069  01CF               	clrf	main@faultNotReset^(0+128)
  6751  006A  01D0               	clrf	(main@faultNotReset+1)^(0+128)
  6752                           
  6753                           ;main.c: 47: extern int8_t Imode[2];
  6754                           ;main.c: 48: int16_t largerIOut = 0;
  6755  006B  01E0               	clrf	main@largerIOut^(0+128)
  6756  006C  01E1               	clrf	(main@largerIOut+1)^(0+128)
  6757                           
  6758                           ;main.c: 49: extern int16_t Iref[2];
  6759                           ;main.c: 50: uint8_t j = 0;
  6760  006D  01EE               	clrf	main@j^(0+128)
  6761                           
  6762                           ;main.c: 51: uint8_t menuButton = 0;
  6763  006E  01E2               	clrf	main@menuButton^(0+128)
  6764                           
  6765                           ;main.c: 52: uint8_t fastLoop = 0;
  6766  006F  01D1               	clrf	main@fastLoop^(0+128)
  6767                           
  6768                           ;main.c: 53: uint8_t slowLoop = 200;
  6769  0070  30C8               	movlw	200
  6770  0071  0020               	movlb	0	; select bank0
  6771  0072  00D9               	movwf	??_main
  6772  0073  0859               	movf	??_main,w
  6773  0074  0021               	movlb	1	; select bank1
  6774  0075  00DB               	movwf	main@slowLoop^(0+128)
  6775                           
  6776                           ;main.c: 54: uint16_t tempFanOutput = 60;
  6777  0076  303C               	movlw	60
  6778  0077  00E5               	movwf	main@tempFanOutput^(0+128)
  6779  0078  3000               	movlw	0
  6780  0079  00E6               	movwf	(main@tempFanOutput^(0+128)+1)
  6781                           
  6782                           ;main.c: 55: extern int8_t VHoldMode[2];
  6783                           ;main.c: 56: extern int16_t Vref[2];
  6784                           ;main.c: 57: int16_t tempVoltage[4];
  6785                           ;main.c: 60: SYSTEM_Initialize();
  6786  007A  3191  21A4  3180   	fcall	_SYSTEM_Initialize
  6787                           
  6788                           ;main.c: 62: LCDClear();
  6789  007D  319F  27AE  3180   	fcall	_LCDClear
  6790  0080                     l3338:	
  6791                           ;main.c: 64: void calculateCurrent0(void);
  6792                           ;main.c: 66: void calculateCurrent2(void);
  6793                           ;main.c: 67: void calculateCurrent3(void);
  6794                           ;main.c: 70: while (1)
  6795                           
  6796                           
  6797                           ;main.c: 71: {
  6798                           ;main.c: 72: if(!(RB2))
  6799  0080  0020               	movlb	0	; select bank0
  6800  0081  190D               	btfsc	13,2	;volatile
  6801  0082  2894               	goto	l3346
  6802                           
  6803                           ;main.c: 73: {
  6804                           ;main.c: 74: LATA5=0;
  6805  0083  1296               	bcf	22,5	;volatile
  6806                           
  6807                           ;main.c: 75: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  6808  0084  300B               	movlw	11
  6809  0085  0020               	movlb	0	; select bank0
  6810  0086  00D9               	movwf	??_main
  6811  0087  3062               	movlw	98
  6812  0088                     u4507:	
  6813  0088  0B89               	decfsz	9,f
  6814  0089  2888               	goto	u4507
  6815  008A  0BD9               	decfsz	??_main,f
  6816  008B  2888               	goto	u4507
  6817  008C  0000               	nop
  6818                           
  6819                           ;main.c: 76: faultCount+=1;
  6820  008D  3001               	movlw	1
  6821  008E  0021               	movlb	1	; select bank1
  6822  008F  07CD               	addwf	main@faultCount^(0+128),f
  6823  0090  3000               	movlw	0
  6824  0091  3DCE               	addwfc	(main@faultCount+1)^(0+128),f
  6825                           
  6826                           ;main.c: 77: LATA5=1;
  6827  0092  0020               	movlb	0	; select bank0
  6828  0093  1696               	bsf	22,5	;volatile
  6829  0094                     l3346:	
  6830                           
  6831                           ;main.c: 78: }
  6832                           ;main.c: 79: for(j=0;j<4;j++) Ianalogs[j]=readIAnalog(j);
  6833  0094  0021               	movlb	1	; select bank1
  6834  0095  01EE               	clrf	main@j^(0+128)
  6835  0096  3004               	movlw	4
  6836  0097  026E               	subwf	main@j^(0+128),w
  6837  0098  1803               	btfsc	3,0
  6838  0099  28B9               	goto	l3358
  6839  009A                     l3352:	
  6840  009A  086E               	movf	main@j^(0+128),w
  6841  009B  0020               	movlb	0	; select bank0
  6842  009C  00D9               	movwf	??_main
  6843  009D  01DA               	clrf	??_main+1
  6844  009E  0859               	movf	??_main,w
  6845  009F  00A6               	movwf	readIAnalog@channel
  6846  00A0  085A               	movf	??_main+1,w
  6847  00A1  00A7               	movwf	readIAnalog@channel+1
  6848  00A2  318B  23CE  3180   	fcall	_readIAnalog
  6849  00A5  0021               	movlb	1	; select bank1
  6850  00A6  356E               	lslf	main@j^(0+128),w
  6851  00A7  3E40               	addlw	(low (_Ianalogs| (0+256)))& (0+255)
  6852  00A8  0086               	movwf	6
  6853  00A9  3001               	movlw	1	; select bank2/3
  6854  00AA  0087               	movwf	7
  6855  00AB  0020               	movlb	0	; select bank0
  6856  00AC  0826               	movf	?_readIAnalog,w
  6857  00AD  3FC0               	movwi [0]fsr1
  6858  00AE  0827               	movf	?_readIAnalog+1,w
  6859  00AF  3FC1               	movwi [1]fsr1
  6860  00B0  3001               	movlw	1
  6861  00B1  00D9               	movwf	??_main
  6862  00B2  0859               	movf	??_main,w
  6863  00B3  0021               	movlb	1	; select bank1
  6864  00B4  07EE               	addwf	main@j^(0+128),f
  6865  00B5  3004               	movlw	4
  6866  00B6  026E               	subwf	main@j^(0+128),w
  6867  00B7  1C03               	skipc
  6868  00B8  289A               	goto	l3352
  6869  00B9                     l3358:	
  6870                           
  6871                           ;main.c: 81: for(j=0;j<4;j++) Vanalogs[j]=readVAnalog(j);
  6872  00B9  01EE               	clrf	main@j^(0+128)
  6873  00BA  3004               	movlw	4
  6874  00BB  026E               	subwf	main@j^(0+128),w
  6875  00BC  1803               	btfsc	3,0
  6876  00BD  28DD               	goto	l474
  6877  00BE                     l3364:	
  6878  00BE  086E               	movf	main@j^(0+128),w
  6879  00BF  0020               	movlb	0	; select bank0
  6880  00C0  00D9               	movwf	??_main
  6881  00C1  01DA               	clrf	??_main+1
  6882  00C2  0859               	movf	??_main,w
  6883  00C3  00A6               	movwf	readVAnalog@channel
  6884  00C4  085A               	movf	??_main+1,w
  6885  00C5  00A7               	movwf	readVAnalog@channel+1
  6886  00C6  318A  22AC  3180   	fcall	_readVAnalog
  6887  00C9  0021               	movlb	1	; select bank1
  6888  00CA  356E               	lslf	main@j^(0+128),w
  6889  00CB  3E48               	addlw	(low (_Vanalogs| (0+256)))& (0+255)
  6890  00CC  0086               	movwf	6
  6891  00CD  3001               	movlw	1	; select bank2/3
  6892  00CE  0087               	movwf	7
  6893  00CF  0020               	movlb	0	; select bank0
  6894  00D0  0826               	movf	?_readVAnalog,w
  6895  00D1  3FC0               	movwi [0]fsr1
  6896  00D2  0827               	movf	?_readVAnalog+1,w
  6897  00D3  3FC1               	movwi [1]fsr1
  6898  00D4  3001               	movlw	1
  6899  00D5  00D9               	movwf	??_main
  6900  00D6  0859               	movf	??_main,w
  6901  00D7  0021               	movlb	1	; select bank1
  6902  00D8  07EE               	addwf	main@j^(0+128),f
  6903  00D9  3004               	movlw	4
  6904  00DA  026E               	subwf	main@j^(0+128),w
  6905  00DB  1C03               	skipc
  6906  00DC  28BE               	goto	l3364
  6907  00DD                     l474:	
  6908                           
  6909                           ;main.c: 83: if(!(RB2))faultNotReset+=1;
  6910  00DD  0020               	movlb	0	; select bank0
  6911  00DE  190D               	btfsc	13,2	;volatile
  6912  00DF  28E5               	goto	l3372
  6913  00E0  3001               	movlw	1
  6914  00E1  0021               	movlb	1	; select bank1
  6915  00E2  07CF               	addwf	main@faultNotReset^(0+128),f
  6916  00E3  3000               	movlw	0
  6917  00E4  3DD0               	addwfc	(main@faultNotReset+1)^(0+128),f
  6918  00E5                     l3372:	
  6919                           
  6920                           ;main.c: 87: tempVoltage[0]=(int16_t)(Vanalogs[0]/.54245);
  6921  00E5  0022               	movlb	2	; select bank2
  6922  00E6  0849               	movf	(_Vanalogs+1)^(0+256),w
  6923  00E7  00FA               	movwf	___awtoft@c+1
  6924  00E8  0848               	movf	_Vanalogs^(0+256),w
  6925  00E9  00F9               	movwf	___awtoft@c
  6926  00EA  319F  2747  3180   	fcall	___awtoft
  6927  00ED  0879               	movf	?___awtoft,w
  6928  00EE  0020               	movlb	0	; select bank0
  6929  00EF  00A4               	movwf	___ftdiv@f1
  6930  00F0  087A               	movf	?___awtoft+1,w
  6931  00F1  00A5               	movwf	___ftdiv@f1+1
  6932  00F2  087B               	movf	?___awtoft+2,w
  6933  00F3  00A6               	movwf	___ftdiv@f1+2
  6934  00F4  30DE               	movlw	222
  6935  00F5  00A1               	movwf	___ftdiv@f2
  6936  00F6  300A               	movlw	10
  6937  00F7  00A2               	movwf	___ftdiv@f2+1
  6938  00F8  303F               	movlw	63
  6939  00F9  00A3               	movwf	___ftdiv@f2+2
  6940  00FA  3195  25F3  3180   	fcall	___ftdiv
  6941  00FD  0020               	movlb	0	; select bank0
  6942  00FE  0821               	movf	?___ftdiv,w
  6943  00FF  00B1               	movwf	___fttol@f1
  6944  0100  0822               	movf	?___ftdiv+1,w
  6945  0101  00B2               	movwf	___fttol@f1+1
  6946  0102  0823               	movf	?___ftdiv+2,w
  6947  0103  00B3               	movwf	___fttol@f1+2
  6948  0104  3195  256C  3180   	fcall	___fttol
  6949  0107  0020               	movlb	0	; select bank0
  6950  0108  0832               	movf	?___fttol+1,w
  6951  0109  0021               	movlb	1	; select bank1
  6952  010A  00D3               	movwf	(main@tempVoltage+1)^(0+128)
  6953  010B  0020               	movlb	0	; select bank0
  6954  010C  0831               	movf	?___fttol,w
  6955  010D  0021               	movlb	1	; select bank1
  6956  010E  00D2               	movwf	main@tempVoltage^(0+128)
  6957                           
  6958                           ;main.c: 89: tempVoltage[1]=(int16_t)(Vanalogs[1]/.54395);
  6959  010F  0022               	movlb	2	; select bank2
  6960  0110  084B               	movf	((_Vanalogs+1)^(0+256)+2),w
  6961  0111  00FA               	movwf	___awtoft@c+1
  6962  0112  084A               	movf	(_Vanalogs^(0+256)+2),w
  6963  0113  00F9               	movwf	___awtoft@c
  6964  0114  319F  2747  3180   	fcall	___awtoft
  6965  0117  0879               	movf	?___awtoft,w
  6966  0118  0020               	movlb	0	; select bank0
  6967  0119  00A4               	movwf	___ftdiv@f1
  6968  011A  087A               	movf	?___awtoft+1,w
  6969  011B  00A5               	movwf	___ftdiv@f1+1
  6970  011C  087B               	movf	?___awtoft+2,w
  6971  011D  00A6               	movwf	___ftdiv@f1+2
  6972  011E  3040               	movlw	64
  6973  011F  00A1               	movwf	___ftdiv@f2
  6974  0120  300B               	movlw	11
  6975  0121  00A2               	movwf	___ftdiv@f2+1
  6976  0122  303F               	movlw	63
  6977  0123  00A3               	movwf	___ftdiv@f2+2
  6978  0124  3195  25F3  3180   	fcall	___ftdiv
  6979  0127  0020               	movlb	0	; select bank0
  6980  0128  0821               	movf	?___ftdiv,w
  6981  0129  00B1               	movwf	___fttol@f1
  6982  012A  0822               	movf	?___ftdiv+1,w
  6983  012B  00B2               	movwf	___fttol@f1+1
  6984  012C  0823               	movf	?___ftdiv+2,w
  6985  012D  00B3               	movwf	___fttol@f1+2
  6986  012E  3195  256C  3180   	fcall	___fttol
  6987  0131  0020               	movlb	0	; select bank0
  6988  0132  0832               	movf	?___fttol+1,w
  6989  0133  0021               	movlb	1	; select bank1
  6990  0134  00D5               	movwf	((main@tempVoltage+1)^(0+128)+2)
  6991  0135  0020               	movlb	0	; select bank0
  6992  0136  0831               	movf	?___fttol,w
  6993  0137  0021               	movlb	1	; select bank1
  6994  0138  00D4               	movwf	(main@tempVoltage^(0+128)+2)
  6995                           
  6996                           ;main.c: 91: tempVoltage[2]=(int16_t)(Vanalogs[2]/.208100558);
  6997  0139  0022               	movlb	2	; select bank2
  6998  013A  084D               	movf	((_Vanalogs+1)^(0+256)+4),w
  6999  013B  00FA               	movwf	___awtoft@c+1
  7000  013C  084C               	movf	(_Vanalogs^(0+256)+4),w
  7001  013D  00F9               	movwf	___awtoft@c
  7002  013E  319F  2747  3180   	fcall	___awtoft
  7003  0141  0879               	movf	?___awtoft,w
  7004  0142  0020               	movlb	0	; select bank0
  7005  0143  00A4               	movwf	___ftdiv@f1
  7006  0144  087A               	movf	?___awtoft+1,w
  7007  0145  00A5               	movwf	___ftdiv@f1+1
  7008  0146  087B               	movf	?___awtoft+2,w
  7009  0147  00A6               	movwf	___ftdiv@f1+2
  7010  0148  3018               	movlw	24
  7011  0149  00A1               	movwf	___ftdiv@f2
  7012  014A  3055               	movlw	85
  7013  014B  00A2               	movwf	___ftdiv@f2+1
  7014  014C  303E               	movlw	62
  7015  014D  00A3               	movwf	___ftdiv@f2+2
  7016  014E  3195  25F3  3180   	fcall	___ftdiv
  7017  0151  0020               	movlb	0	; select bank0
  7018  0152  0821               	movf	?___ftdiv,w
  7019  0153  00B1               	movwf	___fttol@f1
  7020  0154  0822               	movf	?___ftdiv+1,w
  7021  0155  00B2               	movwf	___fttol@f1+1
  7022  0156  0823               	movf	?___ftdiv+2,w
  7023  0157  00B3               	movwf	___fttol@f1+2
  7024  0158  3195  256C  3180   	fcall	___fttol
  7025  015B  0020               	movlb	0	; select bank0
  7026  015C  0832               	movf	?___fttol+1,w
  7027  015D  0021               	movlb	1	; select bank1
  7028  015E  00D7               	movwf	((main@tempVoltage+1)^(0+128)+4)
  7029  015F  0020               	movlb	0	; select bank0
  7030  0160  0831               	movf	?___fttol,w
  7031  0161  0021               	movlb	1	; select bank1
  7032  0162  00D6               	movwf	(main@tempVoltage^(0+128)+4)
  7033                           
  7034                           ;main.c: 93: tempVoltage[3]=(int16_t)(Vanalogs[3]/.207755);
  7035  0163  0022               	movlb	2	; select bank2
  7036  0164  084F               	movf	((_Vanalogs+1)^(0+256)+6),w
  7037  0165  00FA               	movwf	___awtoft@c+1
  7038  0166  084E               	movf	(_Vanalogs^(0+256)+6),w
  7039  0167  00F9               	movwf	___awtoft@c
  7040  0168  319F  2747  3180   	fcall	___awtoft
  7041  016B  0879               	movf	?___awtoft,w
  7042  016C  0020               	movlb	0	; select bank0
  7043  016D  00A4               	movwf	___ftdiv@f1
  7044  016E  087A               	movf	?___awtoft+1,w
  7045  016F  00A5               	movwf	___ftdiv@f1+1
  7046  0170  087B               	movf	?___awtoft+2,w
  7047  0171  00A6               	movwf	___ftdiv@f1+2
  7048  0172  30BE               	movlw	190
  7049  0173  00A1               	movwf	___ftdiv@f2
  7050  0174  3054               	movlw	84
  7051  0175  00A2               	movwf	___ftdiv@f2+1
  7052  0176  303E               	movlw	62
  7053  0177  00A3               	movwf	___ftdiv@f2+2
  7054  0178  3195  25F3  3180   	fcall	___ftdiv
  7055  017B  0020               	movlb	0	; select bank0
  7056  017C  0821               	movf	?___ftdiv,w
  7057  017D  00B1               	movwf	___fttol@f1
  7058  017E  0822               	movf	?___ftdiv+1,w
  7059  017F  00B2               	movwf	___fttol@f1+1
  7060  0180  0823               	movf	?___ftdiv+2,w
  7061  0181  00B3               	movwf	___fttol@f1+2
  7062  0182  3195  256C  3180   	fcall	___fttol
  7063  0185  0020               	movlb	0	; select bank0
  7064  0186  0832               	movf	?___fttol+1,w
  7065  0187  0021               	movlb	1	; select bank1
  7066  0188  00D9               	movwf	((main@tempVoltage+1)^(0+128)+6)
  7067  0189  0020               	movlb	0	; select bank0
  7068  018A  0831               	movf	?___fttol,w
  7069  018B  0021               	movlb	1	; select bank1
  7070  018C  00D8               	movwf	(main@tempVoltage^(0+128)+6)
  7071                           
  7072                           ;main.c: 95: for(j=0;j<4;j++)
  7073  018D  01EE               	clrf	main@j^(0+128)
  7074  018E  3004               	movlw	4
  7075  018F  026E               	subwf	main@j^(0+128),w
  7076  0190  1803               	btfsc	3,0
  7077  0191  29F1               	goto	l3398
  7078  0192                     l3386:	
  7079                           
  7080                           ;main.c: 96: {
  7081                           ;main.c: 97: if(tempVoltage[j]>voltage[j])voltage[j]+=1;
  7082  0192  356E               	lslf	main@j^(0+128),w
  7083  0193  3ED2               	addlw	(low (main@tempVoltage| 0))& (0+255)
  7084  0194  0086               	movwf	6
  7085  0195  0187               	clrf	7
  7086  0196  3F40               	moviw [0]fsr1
  7087  0197  0020               	movlb	0	; select bank0
  7088  0198  00D9               	movwf	??_main
  7089  0199  3F41               	moviw [1]fsr1
  7090  019A  00DA               	movwf	??_main+1
  7091  019B  0021               	movlb	1	; select bank1
  7092  019C  356E               	lslf	main@j^(0+128),w
  7093  019D  3EA0               	addlw	(low (_voltage| 0))& (0+255)
  7094  019E  0086               	movwf	6
  7095  019F  0187               	clrf	7
  7096  01A0  3F40               	moviw [0]fsr1
  7097  01A1  0020               	movlb	0	; select bank0
  7098  01A2  00DB               	movwf	??_main+2
  7099  01A3  3F41               	moviw [1]fsr1
  7100  01A4  00DC               	movwf	??_main+3
  7101  01A5  085C               	movf	??_main+3,w
  7102  01A6  3A80               	xorlw	128
  7103  01A7  00DD               	movwf	??_main+4
  7104  01A8  085A               	movf	??_main+1,w
  7105  01A9  3A80               	xorlw	128
  7106  01AA  025D               	subwf	??_main+4,w
  7107  01AB  1D03               	skipz
  7108  01AC  29AF               	goto	u4135
  7109  01AD  0859               	movf	??_main,w
  7110  01AE  025B               	subwf	??_main+2,w
  7111  01AF                     u4135:	
  7112  01AF  1803               	skipnc
  7113  01B0  29BC               	goto	l3390
  7114  01B1  0021               	movlb	1	; select bank1
  7115  01B2  356E               	lslf	main@j^(0+128),w
  7116  01B3  3EA0               	addlw	(low (_voltage| 0))& (0+255)
  7117  01B4  0086               	movwf	6
  7118  01B5  0187               	clrf	7
  7119  01B6  3001               	movlw	1
  7120  01B7  0781               	addwf	1,f
  7121  01B8  3141               	addfsr 1,1
  7122  01B9  1803               	skipnc
  7123  01BA  0A81               	incf	1,f
  7124  01BB  29E7               	goto	l3394
  7125  01BC                     l3390:	
  7126                           
  7127                           ;main.c: 98: else if(tempVoltage[j]>voltage[j])voltage[j]-=1;
  7128  01BC  0021               	movlb	1	; select bank1
  7129  01BD  356E               	lslf	main@j^(0+128),w
  7130  01BE  3ED2               	addlw	(low (main@tempVoltage| 0))& (0+255)
  7131  01BF  0086               	movwf	6
  7132  01C0  0187               	clrf	7
  7133  01C1  3F40               	moviw [0]fsr1
  7134  01C2  0020               	movlb	0	; select bank0
  7135  01C3  00D9               	movwf	??_main
  7136  01C4  3F41               	moviw [1]fsr1
  7137  01C5  00DA               	movwf	??_main+1
  7138  01C6  0021               	movlb	1	; select bank1
  7139  01C7  356E               	lslf	main@j^(0+128),w
  7140  01C8  3EA0               	addlw	(low (_voltage| 0))& (0+255)
  7141  01C9  0086               	movwf	6
  7142  01CA  0187               	clrf	7
  7143  01CB  3F40               	moviw [0]fsr1
  7144  01CC  0020               	movlb	0	; select bank0
  7145  01CD  00DB               	movwf	??_main+2
  7146  01CE  3F41               	moviw [1]fsr1
  7147  01CF  00DC               	movwf	??_main+3
  7148  01D0  085C               	movf	??_main+3,w
  7149  01D1  3A80               	xorlw	128
  7150  01D2  00DD               	movwf	??_main+4
  7151  01D3  085A               	movf	??_main+1,w
  7152  01D4  3A80               	xorlw	128
  7153  01D5  025D               	subwf	??_main+4,w
  7154  01D6  1D03               	skipz
  7155  01D7  29DA               	goto	u4145
  7156  01D8  0859               	movf	??_main,w
  7157  01D9  025B               	subwf	??_main+2,w
  7158  01DA                     u4145:	
  7159  01DA  1803               	skipnc
  7160  01DB  29E7               	goto	l3394
  7161  01DC  0021               	movlb	1	; select bank1
  7162  01DD  356E               	lslf	main@j^(0+128),w
  7163  01DE  3EA0               	addlw	(low (_voltage| 0))& (0+255)
  7164  01DF  0086               	movwf	6
  7165  01E0  0187               	clrf	7
  7166  01E1  30FF               	movlw	255
  7167  01E2  0781               	addwf	1,f
  7168  01E3  3141               	addfsr 1,1
  7169  01E4  30FF               	movlw	255
  7170  01E5  3D81               	addwfc	1,f
  7171  01E6  317F               	addfsr 1,-1
  7172  01E7                     l3394:	
  7173  01E7  3001               	movlw	1
  7174  01E8  0020               	movlb	0	; select bank0
  7175  01E9  00D9               	movwf	??_main
  7176  01EA  0859               	movf	??_main,w
  7177  01EB  0021               	movlb	1	; select bank1
  7178  01EC  07EE               	addwf	main@j^(0+128),f
  7179  01ED  3004               	movlw	4
  7180  01EE  026E               	subwf	main@j^(0+128),w
  7181  01EF  1C03               	skipc
  7182  01F0  2992               	goto	l3386
  7183  01F1                     l3398:	
  7184                           
  7185                           ;main.c: 100: }
  7186                           ;main.c: 102: calculateCurrent0();
  7187  01F1  3192  2256  3180   	fcall	_calculateCurrent0
  7188                           
  7189                           ;main.c: 106: calculateCurrent2();
  7190  01F4  319F  2768  3180   	fcall	_calculateCurrent2
  7191                           
  7192                           ;main.c: 108: calculateCurrent3();
  7193  01F7  3180  2006  3180   	fcall	_calculateCurrent3
  7194                           
  7195                           ;main.c: 110: current[1]=(int16_t)(current[3]*(voltage[3]/voltage[1]*.9));
  7196  01FA  0021               	movlb	1	; select bank1
  7197  01FB  0827               	movf	((_voltage+1)^(0+128)+6),w
  7198  01FC  00F3               	movwf	___awdiv@dividend+1
  7199  01FD  0826               	movf	(_voltage^(0+128)+6),w
  7200  01FE  00F2               	movwf	___awdiv@dividend
  7201  01FF  0823               	movf	((_voltage+1)^(0+128)+2),w
  7202  0200  00F1               	movwf	___awdiv@divisor+1
  7203  0201  0822               	movf	(_voltage^(0+128)+2),w
  7204  0202  00F0               	movwf	___awdiv@divisor
  7205  0203  3192  229B  3180   	fcall	___awdiv
  7206  0206  0871               	movf	?___awdiv+1,w
  7207  0207  00FA               	movwf	___awtoft@c+1
  7208  0208  0870               	movf	?___awdiv,w
  7209  0209  00F9               	movwf	___awtoft@c
  7210  020A  319F  2747  3180   	fcall	___awtoft
  7211  020D  0879               	movf	?___awtoft,w
  7212  020E  0020               	movlb	0	; select bank0
  7213  020F  00A4               	movwf	___ftmul@f2
  7214  0210  087A               	movf	?___awtoft+1,w
  7215  0211  00A5               	movwf	___ftmul@f2+1
  7216  0212  087B               	movf	?___awtoft+2,w
  7217  0213  00A6               	movwf	___ftmul@f2+2
  7218  0214  3066               	movlw	102
  7219  0215  00A1               	movwf	___ftmul@f1
  7220  0216  3066               	movlw	102
  7221  0217  00A2               	movwf	___ftmul@f1+1
  7222  0218  303F               	movlw	63
  7223  0219  00A3               	movwf	___ftmul@f1+2
  7224  021A  3197  274C  3180   	fcall	___ftmul
  7225  021D  0020               	movlb	0	; select bank0
  7226  021E  0821               	movf	?___ftmul,w
  7227  021F  0021               	movlb	1	; select bank1
  7228  0220  00E7               	movwf	_main$1309^(0+128)
  7229  0221  0020               	movlb	0	; select bank0
  7230  0222  0822               	movf	?___ftmul+1,w
  7231  0223  0021               	movlb	1	; select bank1
  7232  0224  00E8               	movwf	(_main$1309+1)^(0+128)
  7233  0225  0020               	movlb	0	; select bank0
  7234  0226  0823               	movf	?___ftmul+2,w
  7235  0227  0021               	movlb	1	; select bank1
  7236  0228  00E9               	movwf	(_main$1309+2)^(0+128)
  7237                           
  7238                           ;main.c: 110: current[1]=(int16_t)(current[3]*(voltage[3]/voltage[1]*.9));
  7239  0229  082F               	movf	((_current+1)^(0+128)+6),w
  7240  022A  00FA               	movwf	___awtoft@c+1
  7241  022B  082E               	movf	(_current^(0+128)+6),w
  7242  022C  00F9               	movwf	___awtoft@c
  7243  022D  319F  2747  3180   	fcall	___awtoft
  7244  0230  0879               	movf	?___awtoft,w
  7245  0231  0020               	movlb	0	; select bank0
  7246  0232  00A4               	movwf	___ftmul@f2
  7247  0233  087A               	movf	?___awtoft+1,w
  7248  0234  00A5               	movwf	___ftmul@f2+1
  7249  0235  087B               	movf	?___awtoft+2,w
  7250  0236  00A6               	movwf	___ftmul@f2+2
  7251  0237  0021               	movlb	1	; select bank1
  7252  0238  0867               	movf	_main$1309^(0+128),w
  7253  0239  0020               	movlb	0	; select bank0
  7254  023A  00A1               	movwf	___ftmul@f1
  7255  023B  0021               	movlb	1	; select bank1
  7256  023C  0868               	movf	(_main$1309+1)^(0+128),w
  7257  023D  0020               	movlb	0	; select bank0
  7258  023E  00A2               	movwf	___ftmul@f1+1
  7259  023F  0021               	movlb	1	; select bank1
  7260  0240  0869               	movf	(_main$1309+2)^(0+128),w
  7261  0241  0020               	movlb	0	; select bank0
  7262  0242  00A3               	movwf	___ftmul@f1+2
  7263  0243  3197  274C  3180   	fcall	___ftmul
  7264  0246  0020               	movlb	0	; select bank0
  7265  0247  0821               	movf	?___ftmul,w
  7266  0248  00B1               	movwf	___fttol@f1
  7267  0249  0822               	movf	?___ftmul+1,w
  7268  024A  00B2               	movwf	___fttol@f1+1
  7269  024B  0823               	movf	?___ftmul+2,w
  7270  024C  00B3               	movwf	___fttol@f1+2
  7271  024D  3195  256C  3180   	fcall	___fttol
  7272  0250  0020               	movlb	0	; select bank0
  7273  0251  0832               	movf	?___fttol+1,w
  7274  0252  0021               	movlb	1	; select bank1
  7275  0253  00AB               	movwf	((_current+1)^(0+128)+2)
  7276  0254  0020               	movlb	0	; select bank0
  7277  0255  0831               	movf	?___fttol,w
  7278  0256  0021               	movlb	1	; select bank1
  7279  0257  00AA               	movwf	(_current^(0+128)+2)
  7280                           
  7281                           ;main.c: 112: if(Imode[0])
  7282  0258  0020               	movlb	0	; select bank0
  7283  0259  0862               	movf	_Imode,w
  7284  025A  1903               	btfsc	3,2
  7285  025B  2A7D               	goto	l3414
  7286                           
  7287                           ;main.c: 113: {
  7288                           ;main.c: 114: if(voltage[2]<MPPT0)
  7289  025C  0021               	movlb	1	; select bank1
  7290  025D  0825               	movf	((_voltage+1)^(0+128)+4),w
  7291  025E  3A80               	xorlw	128
  7292  025F  0020               	movlb	0	; select bank0
  7293  0260  00D9               	movwf	??_main
  7294  0261  0021               	movlb	1	; select bank1
  7295  0262  085D               	movf	(main@MPPT0+1)^(0+128),w
  7296  0263  3A80               	xorlw	128
  7297  0264  0020               	movlb	0	; select bank0
  7298  0265  0259               	subwf	??_main,w
  7299  0266  1D03               	skipz
  7300  0267  2A6B               	goto	u4175
  7301  0268  0021               	movlb	1	; select bank1
  7302  0269  085C               	movf	main@MPPT0^(0+128),w
  7303  026A  0224               	subwf	(_voltage^(0+128)+4),w
  7304  026B                     u4175:	
  7305  026B  1C03               	btfss	3,0
  7306  026C  2A8E               	goto	L3
  7307                           
  7308                           ;main.c: 121: else if(voltage[2]>MPPT0)
  7309                           
  7310                           ;main.c: 119: }
  7311                           ;main.c: 120: }
  7312                           
  7313                           ;main.c: 117: {
  7314                           ;main.c: 118: dutyCycle6+=1;
  7315                           
  7316                           ;main.c: 115: {
  7317                           ;main.c: 116: if(dutyCycle6<1023)
  7318  026D  0021               	movlb	1	; select bank1
  7319  026E  085D               	movf	(main@MPPT0+1)^(0+128),w
  7320  026F  3A80               	xorlw	128
  7321  0270  0020               	movlb	0	; select bank0
  7322  0271  00D9               	movwf	??_main
  7323  0272  0021               	movlb	1	; select bank1
  7324  0273  0825               	movf	((_voltage+1)^(0+128)+4),w
  7325  0274  3A80               	xorlw	128
  7326  0275  0020               	movlb	0	; select bank0
  7327  0276  0259               	subwf	??_main,w
  7328  0277  1D03               	skipz
  7329  0278  2AAA               	goto	u4235
  7330  0279  0021               	movlb	1	; select bank1
  7331  027A  0824               	movf	(_voltage^(0+128)+4),w
  7332  027B  025C               	subwf	main@MPPT0^(0+128),w
  7333  027C  2AAA               	goto	u4235
  7334  027D                     l3414:	
  7335                           ;main.c: 129: }
  7336                           
  7337                           ;main.c: 126: }
  7338                           ;main.c: 127: }
  7339                           
  7340                           ;main.c: 124: {
  7341                           ;main.c: 125: dutyCycle6-=1;
  7342                           
  7343                           ;main.c: 122: {
  7344                           ;main.c: 123: if(dutyCycle6>0)
  7345                           
  7346                           
  7347                           ;main.c: 130: else
  7348                           ;main.c: 131: {
  7349                           ;main.c: 132: if(voltage[0]>(int16_t)Vref[0])
  7350  027D  0021               	movlb	1	; select bank1
  7351  027E  0831               	movf	(_Vref+1)^(0+128),w
  7352  027F  3A80               	xorlw	128
  7353  0280  0020               	movlb	0	; select bank0
  7354  0281  00D9               	movwf	??_main
  7355  0282  0021               	movlb	1	; select bank1
  7356  0283  0821               	movf	(_voltage+1)^(0+128),w
  7357  0284  3A80               	xorlw	128
  7358  0285  0020               	movlb	0	; select bank0
  7359  0286  0259               	subwf	??_main,w
  7360  0287  1D03               	skipz
  7361  0288  2A8C               	goto	u4215
  7362  0289  0021               	movlb	1	; select bank1
  7363  028A  0820               	movf	_voltage^(0+128),w
  7364  028B  0230               	subwf	_Vref^(0+128),w
  7365  028C                     u4215:	
  7366  028C  1803               	skipnc
  7367  028D  2A9B               	goto	l3420
  7368  028E                     L3:	
  7369                           
  7370                           ;main.c: 133: {
  7371                           ;main.c: 134: if(dutyCycle6<1023) dutyCycle6+=1;
  7372  028E  3003               	movlw	3
  7373  028F  0021               	movlb	1	; select bank1
  7374  0290  026B               	subwf	(main@dutyCycle6+1)^(0+128),w
  7375  0291  30FF               	movlw	255
  7376  0292  1903               	skipnz
  7377  0293  026A               	subwf	main@dutyCycle6^(0+128),w
  7378  0294  1803               	skipnc
  7379  0295  2AB5               	goto	l3426
  7380  0296  3001               	movlw	1
  7381  0297  07EA               	addwf	main@dutyCycle6^(0+128),f
  7382  0298  3000               	movlw	0
  7383  0299  3DEB               	addwfc	(main@dutyCycle6+1)^(0+128),f
  7384                           
  7385                           ;main.c: 135: }
  7386  029A  2AB5               	goto	l3426
  7387  029B                     l3420:	
  7388                           
  7389                           ;main.c: 136: else if(voltage[0]<(int16_t)Vref[0])
  7390  029B  0021               	movlb	1	; select bank1
  7391  029C  0821               	movf	(_voltage+1)^(0+128),w
  7392  029D  3A80               	xorlw	128
  7393  029E  0020               	movlb	0	; select bank0
  7394  029F  00D9               	movwf	??_main
  7395  02A0  0021               	movlb	1	; select bank1
  7396  02A1  0831               	movf	(_Vref+1)^(0+128),w
  7397  02A2  3A80               	xorlw	128
  7398  02A3  0020               	movlb	0	; select bank0
  7399  02A4  0259               	subwf	??_main,w
  7400  02A5  1D03               	skipz
  7401  02A6  2AAA               	goto	u4235
  7402  02A7  0021               	movlb	1	; select bank1
  7403  02A8  0830               	movf	_Vref^(0+128),w
  7404  02A9  0220               	subwf	_voltage^(0+128),w
  7405  02AA                     u4235:	
  7406  02AA  1803               	skipnc
  7407  02AB  2AB5               	goto	l3426
  7408                           
  7409                           ;main.c: 137: {
  7410                           ;main.c: 138: if(dutyCycle6>0) dutyCycle6-=1;;
  7411  02AC  0021               	movlb	1	; select bank1
  7412  02AD  086A               	movf	main@dutyCycle6^(0+128),w
  7413  02AE  046B               	iorwf	(main@dutyCycle6+1)^(0+128),w
  7414  02AF  1903               	btfsc	3,2
  7415  02B0  2AB5               	goto	l3426
  7416  02B1  3001               	movlw	1
  7417  02B2  02EA               	subwf	main@dutyCycle6^(0+128),f
  7418  02B3  3000               	movlw	0
  7419  02B4  3BEB               	subwfb	(main@dutyCycle6+1)^(0+128),f
  7420  02B5                     l3426:	
  7421                           ;main.c: 139: }
  7422                           
  7423                           
  7424                           ;main.c: 141: }
  7425                           ;main.c: 143: if(Imode[1])
  7426  02B5  0020               	movlb	0	; select bank0
  7427  02B6  0863               	movf	_Imode+1,w
  7428  02B7  1903               	btfsc	3,2
  7429  02B8  2ACB               	goto	l3438
  7430                           
  7431                           ;main.c: 144: {
  7432                           ;main.c: 145: if(voltage[3]<MPPT1)
  7433  02B9  0021               	movlb	1	; select bank1
  7434  02BA  0827               	movf	((_voltage+1)^(0+128)+6),w
  7435  02BB  3A80               	xorlw	128
  7436  02BC  0020               	movlb	0	; select bank0
  7437  02BD  00D9               	movwf	??_main
  7438  02BE  0021               	movlb	1	; select bank1
  7439  02BF  085F               	movf	(main@MPPT1+1)^(0+128),w
  7440  02C0  3A80               	xorlw	128
  7441  02C1  0020               	movlb	0	; select bank0
  7442  02C2  0259               	subwf	??_main,w
  7443  02C3  1D03               	skipz
  7444  02C4  2AC8               	goto	u4265
  7445  02C5  0021               	movlb	1	; select bank1
  7446  02C6  085E               	movf	main@MPPT1^(0+128),w
  7447  02C7  0226               	subwf	(_voltage^(0+128)+6),w
  7448  02C8                     u4265:	
  7449  02C8  1C03               	btfss	3,0
  7450  02C9  2ADC               	goto	L4
  7451                           
  7452                           ;main.c: 150: }
  7453                           ;main.c: 151: }
  7454                           
  7455                           ;main.c: 148: {
  7456                           ;main.c: 149: dutyCycle7+=1;
  7457                           
  7458                           ;main.c: 146: {
  7459                           ;main.c: 147: if(dutyCycle7<1023)
  7460  02CA  2AFA               	goto	L5
  7461  02CB                     l3438:	
  7462                           ;main.c: 155: }
  7463                           ;main.c: 156: }
  7464                           
  7465                           ;main.c: 153: {
  7466                           ;main.c: 154: dutyCycle7-=1;
  7467                           
  7468                           ;main.c: 152: else if(dutyCycle7>0)
  7469                           
  7470                           
  7471                           ;main.c: 157: else
  7472                           ;main.c: 158: {
  7473                           ;main.c: 159: if(voltage[1]>(int16_t)Vref[1])
  7474  02CB  0021               	movlb	1	; select bank1
  7475  02CC  0833               	movf	((_Vref+1)^(0+128)+2),w
  7476  02CD  3A80               	xorlw	128
  7477  02CE  0020               	movlb	0	; select bank0
  7478  02CF  00D9               	movwf	??_main
  7479  02D0  0021               	movlb	1	; select bank1
  7480  02D1  0823               	movf	((_voltage+1)^(0+128)+2),w
  7481  02D2  3A80               	xorlw	128
  7482  02D3  0020               	movlb	0	; select bank0
  7483  02D4  0259               	subwf	??_main,w
  7484  02D5  1D03               	skipz
  7485  02D6  2ADA               	goto	u4295
  7486  02D7  0021               	movlb	1	; select bank1
  7487  02D8  0822               	movf	(_voltage^(0+128)+2),w
  7488  02D9  0232               	subwf	(_Vref^(0+128)+2),w
  7489  02DA                     u4295:	
  7490  02DA  1803               	skipnc
  7491  02DB  2AE9               	goto	l3444
  7492  02DC                     L4:	
  7493                           
  7494                           ;main.c: 160: {
  7495                           ;main.c: 161: if(dutyCycle7<1023) dutyCycle7+=1;
  7496  02DC  3003               	movlw	3
  7497  02DD  0021               	movlb	1	; select bank1
  7498  02DE  026D               	subwf	(main@dutyCycle7+1)^(0+128),w
  7499  02DF  30FF               	movlw	255
  7500  02E0  1903               	skipnz
  7501  02E1  026C               	subwf	main@dutyCycle7^(0+128),w
  7502  02E2  1803               	skipnc
  7503  02E3  2B03               	goto	l3450
  7504  02E4  3001               	movlw	1
  7505  02E5  07EC               	addwf	main@dutyCycle7^(0+128),f
  7506  02E6  3000               	movlw	0
  7507  02E7  3DED               	addwfc	(main@dutyCycle7+1)^(0+128),f
  7508                           
  7509                           ;main.c: 162: }
  7510  02E8  2B03               	goto	l3450
  7511  02E9                     l3444:	
  7512                           
  7513                           ;main.c: 163: else if(voltage[1]<(int16_t)Vref[1])
  7514  02E9  0021               	movlb	1	; select bank1
  7515  02EA  0823               	movf	((_voltage+1)^(0+128)+2),w
  7516  02EB  3A80               	xorlw	128
  7517  02EC  0020               	movlb	0	; select bank0
  7518  02ED  00D9               	movwf	??_main
  7519  02EE  0021               	movlb	1	; select bank1
  7520  02EF  0833               	movf	((_Vref+1)^(0+128)+2),w
  7521  02F0  3A80               	xorlw	128
  7522  02F1  0020               	movlb	0	; select bank0
  7523  02F2  0259               	subwf	??_main,w
  7524  02F3  1D03               	skipz
  7525  02F4  2AF8               	goto	u4315
  7526  02F5  0021               	movlb	1	; select bank1
  7527  02F6  0832               	movf	(_Vref^(0+128)+2),w
  7528  02F7  0222               	subwf	(_voltage^(0+128)+2),w
  7529  02F8                     u4315:	
  7530  02F8  1803               	skipnc
  7531  02F9  2B03               	goto	l3450
  7532  02FA                     L5:	
  7533                           
  7534                           ;main.c: 164: {
  7535                           ;main.c: 165: if(dutyCycle7>0) dutyCycle7-=1;;
  7536  02FA  0021               	movlb	1	; select bank1
  7537  02FB  086C               	movf	main@dutyCycle7^(0+128),w
  7538  02FC  046D               	iorwf	(main@dutyCycle7+1)^(0+128),w
  7539  02FD  1903               	btfsc	3,2
  7540  02FE  2B03               	goto	l3450
  7541  02FF  3001               	movlw	1
  7542  0300  02EC               	subwf	main@dutyCycle7^(0+128),f
  7543  0301  3000               	movlw	0
  7544  0302  3BED               	subwfb	(main@dutyCycle7+1)^(0+128),f
  7545  0303                     l3450:	
  7546                           ;main.c: 166: }
  7547                           
  7548                           
  7549                           ;main.c: 168: }
  7550                           ;main.c: 169: PWM6_LoadDutyValue(dutyCycle6);
  7551  0303  0021               	movlb	1	; select bank1
  7552  0304  086B               	movf	(main@dutyCycle6+1)^(0+128),w
  7553  0305  00F1               	movwf	PWM6_LoadDutyValue@dutyCycle6+1
  7554  0306  086A               	movf	main@dutyCycle6^(0+128),w
  7555  0307  00F0               	movwf	PWM6_LoadDutyValue@dutyCycle6
  7556  0308  319E  26BA  3180   	fcall	_PWM6_LoadDutyValue
  7557                           
  7558                           ;main.c: 170: PWM7_LoadDutyValue(dutyCycle7);
  7559  030B  0021               	movlb	1	; select bank1
  7560  030C  086D               	movf	(main@dutyCycle7+1)^(0+128),w
  7561  030D  00F1               	movwf	PWM7_LoadDutyValue@dutyCycle7+1
  7562  030E  086C               	movf	main@dutyCycle7^(0+128),w
  7563  030F  00F0               	movwf	PWM7_LoadDutyValue@dutyCycle7
  7564  0310  3188  2000  3180   	fcall	_PWM7_LoadDutyValue
  7565                           
  7566                           ;main.c: 171: fastLoop=0;
  7567  0313  0021               	movlb	1	; select bank1
  7568  0314  01D1               	clrf	main@fastLoop^(0+128)
  7569                           
  7570                           ;main.c: 175: slowLoop+=1;
  7571  0315  3001               	movlw	1
  7572  0316  0020               	movlb	0	; select bank0
  7573  0317  00D9               	movwf	??_main
  7574  0318  0859               	movf	??_main,w
  7575  0319  0021               	movlb	1	; select bank1
  7576  031A  07DB               	addwf	main@slowLoop^(0+128),f
  7577                           
  7578                           ;main.c: 178: menuButton = readButton();
  7579  031B  3194  2468  3180   	fcall	_readButton
  7580  031E  0020               	movlb	0	; select bank0
  7581  031F  00D9               	movwf	??_main
  7582  0320  0859               	movf	??_main,w
  7583  0321  0021               	movlb	1	; select bank1
  7584  0322  00E2               	movwf	main@menuButton^(0+128)
  7585                           
  7586                           ;main.c: 179: if(menuButton == 2) if(MPPT1>2700)MPPT1-=1;
  7587  0323  3002               	movlw	2
  7588  0324  0662               	xorwf	main@menuButton^(0+128),w
  7589  0325  1D03               	btfss	3,2
  7590  0326  2B39               	goto	l3464
  7591  0327  085F               	movf	(main@MPPT1+1)^(0+128),w
  7592  0328  3A80               	xorlw	128
  7593  0329  0020               	movlb	0	; select bank0
  7594  032A  00D9               	movwf	??_main
  7595  032B  308A               	movlw	138
  7596  032C  0259               	subwf	??_main,w
  7597  032D  1D03               	skipz
  7598  032E  2B32               	goto	u4345
  7599  032F  308D               	movlw	141
  7600  0330  0021               	movlb	1	; select bank1
  7601  0331  025E               	subwf	main@MPPT1^(0+128),w
  7602  0332                     u4345:	
  7603  0332  1C03               	skipc
  7604  0333  2B39               	goto	l3464
  7605  0334  30FF               	movlw	255
  7606  0335  0021               	movlb	1	; select bank1
  7607  0336  07DE               	addwf	main@MPPT1^(0+128),f
  7608  0337  30FF               	movlw	255
  7609  0338  3DDF               	addwfc	(main@MPPT1+1)^(0+128),f
  7610  0339                     l3464:	
  7611                           
  7612                           ;main.c: 180: if(menuButton == 3)if(MPPT1<3200)MPPT1+=1;
  7613  0339  3003               	movlw	3
  7614  033A  0021               	movlb	1	; select bank1
  7615  033B  0662               	xorwf	main@menuButton^(0+128),w
  7616  033C  1D03               	btfss	3,2
  7617  033D  2B50               	goto	l3470
  7618  033E  085F               	movf	(main@MPPT1+1)^(0+128),w
  7619  033F  3A80               	xorlw	128
  7620  0340  0020               	movlb	0	; select bank0
  7621  0341  00D9               	movwf	??_main
  7622  0342  308C               	movlw	140
  7623  0343  0259               	subwf	??_main,w
  7624  0344  1D03               	skipz
  7625  0345  2B49               	goto	u4365
  7626  0346  3080               	movlw	128
  7627  0347  0021               	movlb	1	; select bank1
  7628  0348  025E               	subwf	main@MPPT1^(0+128),w
  7629  0349                     u4365:	
  7630  0349  1803               	skipnc
  7631  034A  2B50               	goto	l3470
  7632  034B  3001               	movlw	1
  7633  034C  0021               	movlb	1	; select bank1
  7634  034D  07DE               	addwf	main@MPPT1^(0+128),f
  7635  034E  3000               	movlw	0
  7636  034F  3DDF               	addwfc	(main@MPPT1+1)^(0+128),f
  7637  0350                     l3470:	
  7638                           
  7639                           ;main.c: 181: if(menuButton == 1)LCDInit();
  7640  0350  0021               	movlb	1	; select bank1
  7641  0351  0362               	decf	main@menuButton^(0+128),w
  7642  0352  1D03               	btfss	3,2
  7643  0353  2B57               	goto	l3474
  7644  0354  3191  2169  3180   	fcall	_LCDInit
  7645  0357                     l3474:	
  7646                           
  7647                           ;main.c: 183: if(slowLoop>250)
  7648  0357  30FB               	movlw	251
  7649  0358  0021               	movlb	1	; select bank1
  7650  0359  025B               	subwf	main@slowLoop^(0+128),w
  7651  035A  1C03               	skipc
  7652  035B  2880               	goto	l3338
  7653                           
  7654                           ;main.c: 184: {
  7655                           ;main.c: 185: if(current[0]>current[3]*(voltage[3]/voltage[1]*.9))
  7656  035C  0827               	movf	((_voltage+1)^(0+128)+6),w
  7657  035D  00F3               	movwf	___awdiv@dividend+1
  7658  035E  0826               	movf	(_voltage^(0+128)+6),w
  7659  035F  00F2               	movwf	___awdiv@dividend
  7660  0360  0823               	movf	((_voltage+1)^(0+128)+2),w
  7661  0361  00F1               	movwf	___awdiv@divisor+1
  7662  0362  0822               	movf	(_voltage^(0+128)+2),w
  7663  0363  00F0               	movwf	___awdiv@divisor
  7664  0364  3192  229B  3180   	fcall	___awdiv
  7665  0367  0871               	movf	?___awdiv+1,w
  7666  0368  00FA               	movwf	___awtoft@c+1
  7667  0369  0870               	movf	?___awdiv,w
  7668  036A  00F9               	movwf	___awtoft@c
  7669  036B  319F  2747  3180   	fcall	___awtoft
  7670  036E  0879               	movf	?___awtoft,w
  7671  036F  0020               	movlb	0	; select bank0
  7672  0370  00A4               	movwf	___ftmul@f2
  7673  0371  087A               	movf	?___awtoft+1,w
  7674  0372  00A5               	movwf	___ftmul@f2+1
  7675  0373  087B               	movf	?___awtoft+2,w
  7676  0374  00A6               	movwf	___ftmul@f2+2
  7677  0375  3066               	movlw	102
  7678  0376  00A1               	movwf	___ftmul@f1
  7679  0377  3066               	movlw	102
  7680  0378  00A2               	movwf	___ftmul@f1+1
  7681  0379  303F               	movlw	63
  7682  037A  00A3               	movwf	___ftmul@f1+2
  7683  037B  3197  274C  3180   	fcall	___ftmul
  7684  037E  0020               	movlb	0	; select bank0
  7685  037F  0821               	movf	?___ftmul,w
  7686  0380  0021               	movlb	1	; select bank1
  7687  0381  00E7               	movwf	_main$1309^(0+128)
  7688  0382  0020               	movlb	0	; select bank0
  7689  0383  0822               	movf	?___ftmul+1,w
  7690  0384  0021               	movlb	1	; select bank1
  7691  0385  00E8               	movwf	(_main$1309+1)^(0+128)
  7692  0386  0020               	movlb	0	; select bank0
  7693  0387  0823               	movf	?___ftmul+2,w
  7694  0388  0021               	movlb	1	; select bank1
  7695  0389  00E9               	movwf	(_main$1309+2)^(0+128)
  7696                           
  7697                           ;main.c: 184: {
  7698                           ;main.c: 185: if(current[0]>current[3]*(voltage[3]/voltage[1]*.9))
  7699  038A  0867               	movf	_main$1309^(0+128),w
  7700  038B  0020               	movlb	0	; select bank0
  7701  038C  00A1               	movwf	___ftmul@f1
  7702  038D  0021               	movlb	1	; select bank1
  7703  038E  0868               	movf	(_main$1309+1)^(0+128),w
  7704  038F  0020               	movlb	0	; select bank0
  7705  0390  00A2               	movwf	___ftmul@f1+1
  7706  0391  0021               	movlb	1	; select bank1
  7707  0392  0869               	movf	(_main$1309+2)^(0+128),w
  7708  0393  0020               	movlb	0	; select bank0
  7709  0394  00A3               	movwf	___ftmul@f1+2
  7710  0395  0021               	movlb	1	; select bank1
  7711  0396  082F               	movf	((_current+1)^(0+128)+6),w
  7712  0397  00FA               	movwf	___awtoft@c+1
  7713  0398  082E               	movf	(_current^(0+128)+6),w
  7714  0399  00F9               	movwf	___awtoft@c
  7715  039A  319F  2747  3180   	fcall	___awtoft
  7716  039D  0879               	movf	?___awtoft,w
  7717  039E  0020               	movlb	0	; select bank0
  7718  039F  00A4               	movwf	___ftmul@f2
  7719  03A0  087A               	movf	?___awtoft+1,w
  7720  03A1  00A5               	movwf	___ftmul@f2+1
  7721  03A2  087B               	movf	?___awtoft+2,w
  7722  03A3  00A6               	movwf	___ftmul@f2+2
  7723  03A4  3197  274C  3180   	fcall	___ftmul
  7724  03A7  0020               	movlb	0	; select bank0
  7725  03A8  0821               	movf	?___ftmul,w
  7726  03A9  00B1               	movwf	___ftge@ff1
  7727  03AA  0822               	movf	?___ftmul+1,w
  7728  03AB  00B2               	movwf	___ftge@ff1+1
  7729  03AC  0823               	movf	?___ftmul+2,w
  7730  03AD  00B3               	movwf	___ftge@ff1+2
  7731  03AE  0021               	movlb	1	; select bank1
  7732  03AF  0829               	movf	(_current+1)^(0+128),w
  7733  03B0  00FA               	movwf	___awtoft@c+1
  7734  03B1  0828               	movf	_current^(0+128),w
  7735  03B2  00F9               	movwf	___awtoft@c
  7736  03B3  319F  2747  3180   	fcall	___awtoft
  7737  03B6  0879               	movf	?___awtoft,w
  7738  03B7  0020               	movlb	0	; select bank0
  7739  03B8  00B4               	movwf	___ftge@ff2
  7740  03B9  087A               	movf	?___awtoft+1,w
  7741  03BA  00B5               	movwf	___ftge@ff2+1
  7742  03BB  087B               	movf	?___awtoft+2,w
  7743  03BC  00B6               	movwf	___ftge@ff2+2
  7744  03BD  3192  221A  3180   	fcall	___ftge
  7745  03C0  1803               	btfsc	3,0
  7746  03C1  2BC7               	goto	l3480
  7747                           
  7748                           ;main.c: 186: {
  7749                           ;main.c: 187: largerIOut=current[0];
  7750  03C2  0021               	movlb	1	; select bank1
  7751  03C3  0829               	movf	(_current+1)^(0+128),w
  7752  03C4  00E1               	movwf	(main@largerIOut+1)^(0+128)
  7753  03C5  0828               	movf	_current^(0+128),w
  7754  03C6  2C24               	goto	L1
  7755  03C7                     l3480:	
  7756                           ;main.c: 188: }
  7757                           
  7758                           
  7759                           ;main.c: 189: else
  7760                           ;main.c: 190: {
  7761                           ;main.c: 191: largerIOut=(int16_t)(current[3]*(voltage[3]/voltage[1]*.9));
  7762  03C7  0021               	movlb	1	; select bank1
  7763  03C8  0827               	movf	((_voltage+1)^(0+128)+6),w
  7764  03C9  00F3               	movwf	___awdiv@dividend+1
  7765  03CA  0826               	movf	(_voltage^(0+128)+6),w
  7766  03CB  00F2               	movwf	___awdiv@dividend
  7767  03CC  0823               	movf	((_voltage+1)^(0+128)+2),w
  7768  03CD  00F1               	movwf	___awdiv@divisor+1
  7769  03CE  0822               	movf	(_voltage^(0+128)+2),w
  7770  03CF  00F0               	movwf	___awdiv@divisor
  7771  03D0  3192  229B  3180   	fcall	___awdiv
  7772  03D3  0871               	movf	?___awdiv+1,w
  7773  03D4  00FA               	movwf	___awtoft@c+1
  7774  03D5  0870               	movf	?___awdiv,w
  7775  03D6  00F9               	movwf	___awtoft@c
  7776  03D7  319F  2747  3180   	fcall	___awtoft
  7777  03DA  0879               	movf	?___awtoft,w
  7778  03DB  0020               	movlb	0	; select bank0
  7779  03DC  00A4               	movwf	___ftmul@f2
  7780  03DD  087A               	movf	?___awtoft+1,w
  7781  03DE  00A5               	movwf	___ftmul@f2+1
  7782  03DF  087B               	movf	?___awtoft+2,w
  7783  03E0  00A6               	movwf	___ftmul@f2+2
  7784  03E1  3066               	movlw	102
  7785  03E2  00A1               	movwf	___ftmul@f1
  7786  03E3  3066               	movlw	102
  7787  03E4  00A2               	movwf	___ftmul@f1+1
  7788  03E5  303F               	movlw	63
  7789  03E6  00A3               	movwf	___ftmul@f1+2
  7790  03E7  3197  274C  3180   	fcall	___ftmul
  7791  03EA  0020               	movlb	0	; select bank0
  7792  03EB  0821               	movf	?___ftmul,w
  7793  03EC  0021               	movlb	1	; select bank1
  7794  03ED  00E7               	movwf	_main$1309^(0+128)
  7795  03EE  0020               	movlb	0	; select bank0
  7796  03EF  0822               	movf	?___ftmul+1,w
  7797  03F0  0021               	movlb	1	; select bank1
  7798  03F1  00E8               	movwf	(_main$1309+1)^(0+128)
  7799  03F2  0020               	movlb	0	; select bank0
  7800  03F3  0823               	movf	?___ftmul+2,w
  7801  03F4  0021               	movlb	1	; select bank1
  7802  03F5  00E9               	movwf	(_main$1309+2)^(0+128)
  7803                           
  7804                           ;main.c: 189: else
  7805                           ;main.c: 190: {
  7806                           ;main.c: 191: largerIOut=(int16_t)(current[3]*(voltage[3]/voltage[1]*.9));
  7807  03F6  082F               	movf	((_current+1)^(0+128)+6),w
  7808  03F7  00FA               	movwf	___awtoft@c+1
  7809  03F8  082E               	movf	(_current^(0+128)+6),w
  7810  03F9  00F9               	movwf	___awtoft@c
  7811  03FA  319F  2747  3180   	fcall	___awtoft
  7812  03FD  0879               	movf	?___awtoft,w
  7813  03FE  0020               	movlb	0	; select bank0
  7814  03FF  00A4               	movwf	___ftmul@f2
  7815  0400  087A               	movf	?___awtoft+1,w
  7816  0401  00A5               	movwf	___ftmul@f2+1
  7817  0402  087B               	movf	?___awtoft+2,w
  7818  0403  00A6               	movwf	___ftmul@f2+2
  7819  0404  0021               	movlb	1	; select bank1
  7820  0405  0867               	movf	_main$1309^(0+128),w
  7821  0406  0020               	movlb	0	; select bank0
  7822  0407  00A1               	movwf	___ftmul@f1
  7823  0408  0021               	movlb	1	; select bank1
  7824  0409  0868               	movf	(_main$1309+1)^(0+128),w
  7825  040A  0020               	movlb	0	; select bank0
  7826  040B  00A2               	movwf	___ftmul@f1+1
  7827  040C  0021               	movlb	1	; select bank1
  7828  040D  0869               	movf	(_main$1309+2)^(0+128),w
  7829  040E  0020               	movlb	0	; select bank0
  7830  040F  00A3               	movwf	___ftmul@f1+2
  7831  0410  3197  274C  3180   	fcall	___ftmul
  7832  0413  0020               	movlb	0	; select bank0
  7833  0414  0821               	movf	?___ftmul,w
  7834  0415  00B1               	movwf	___fttol@f1
  7835  0416  0822               	movf	?___ftmul+1,w
  7836  0417  00B2               	movwf	___fttol@f1+1
  7837  0418  0823               	movf	?___ftmul+2,w
  7838  0419  00B3               	movwf	___fttol@f1+2
  7839  041A  3195  256C  3180   	fcall	___fttol
  7840  041D  0020               	movlb	0	; select bank0
  7841  041E  0832               	movf	?___fttol+1,w
  7842  041F  0021               	movlb	1	; select bank1
  7843  0420  00E1               	movwf	(main@largerIOut+1)^(0+128)
  7844  0421  0020               	movlb	0	; select bank0
  7845  0422  0831               	movf	?___fttol,w
  7846  0423  0021               	movlb	1	; select bank1
  7847  0424                     L1:	
  7848  0424  00E0               	movwf	main@largerIOut^(0+128)
  7849                           
  7850                           ;main.c: 193: }
  7851                           ;main.c: 195: if(largerIOut>25)
  7852  0425  0861               	movf	(main@largerIOut+1)^(0+128),w
  7853  0426  3A80               	xorlw	128
  7854  0427  0020               	movlb	0	; select bank0
  7855  0428  00D9               	movwf	??_main
  7856  0429  3080               	movlw	128
  7857  042A  0259               	subwf	??_main,w
  7858  042B  1D03               	skipz
  7859  042C  2C30               	goto	u4405
  7860  042D  301A               	movlw	26
  7861  042E  0021               	movlb	1	; select bank1
  7862  042F  0260               	subwf	main@largerIOut^(0+128),w
  7863  0430                     u4405:	
  7864  0430  1C03               	skipc
  7865  0431  2C84               	goto	l3502
  7866                           
  7867                           ;main.c: 196: {
  7868                           ;main.c: 197: if((uint16_t)largerIOut+5>dutyCycle1)
  7869  0432  0021               	movlb	1	; select bank1
  7870  0433  0860               	movf	main@largerIOut^(0+128),w
  7871  0434  3E05               	addlw	5
  7872  0435  0020               	movlb	0	; select bank0
  7873  0436  00D9               	movwf	??_main
  7874  0437  3000               	movlw	0
  7875  0438  0021               	movlb	1	; select bank1
  7876  0439  3D61               	addwfc	(main@largerIOut+1)^(0+128),w
  7877  043A  0020               	movlb	0	; select bank0
  7878  043B  00DA               	movwf	??_main+1
  7879  043C  085A               	movf	??_main+1,w
  7880  043D  0021               	movlb	1	; select bank1
  7881  043E  0264               	subwf	(main@dutyCycle1+1)^(0+128),w
  7882  043F  1D03               	skipz
  7883  0440  2C45               	goto	u4415
  7884  0441  0020               	movlb	0	; select bank0
  7885  0442  0859               	movf	??_main,w
  7886  0443  0021               	movlb	1	; select bank1
  7887  0444  0263               	subwf	main@dutyCycle1^(0+128),w
  7888  0445                     u4415:	
  7889  0445  1803               	skipnc
  7890  0446  2C4C               	goto	l3488
  7891                           
  7892                           ;main.c: 198: {
  7893                           ;main.c: 199: dutyCycle1+=1;
  7894  0447  3001               	movlw	1
  7895  0448  07E3               	addwf	main@dutyCycle1^(0+128),f
  7896  0449  3000               	movlw	0
  7897  044A  3DE4               	addwfc	(main@dutyCycle1+1)^(0+128),f
  7898                           
  7899                           ;main.c: 200: }
  7900  044B  2C50               	goto	l3490
  7901  044C                     l3488:	
  7902                           
  7903                           ;main.c: 201: else dutyCycle1-=1;
  7904  044C  3001               	movlw	1
  7905  044D  02E3               	subwf	main@dutyCycle1^(0+128),f
  7906  044E  3000               	movlw	0
  7907  044F  3BE4               	subwfb	(main@dutyCycle1+1)^(0+128),f
  7908  0450                     l3490:	
  7909                           
  7910                           ;main.c: 203: if((uint16_t)largerIOut+5>tempFanOutput)
  7911  0450  0860               	movf	main@largerIOut^(0+128),w
  7912  0451  3E05               	addlw	5
  7913  0452  0020               	movlb	0	; select bank0
  7914  0453  00D9               	movwf	??_main
  7915  0454  3000               	movlw	0
  7916  0455  0021               	movlb	1	; select bank1
  7917  0456  3D61               	addwfc	(main@largerIOut+1)^(0+128),w
  7918  0457  0020               	movlb	0	; select bank0
  7919  0458  00DA               	movwf	??_main+1
  7920  0459  085A               	movf	??_main+1,w
  7921  045A  0021               	movlb	1	; select bank1
  7922  045B  0266               	subwf	(main@tempFanOutput+1)^(0+128),w
  7923  045C  1D03               	skipz
  7924  045D  2C62               	goto	u4425
  7925  045E  0020               	movlb	0	; select bank0
  7926  045F  0859               	movf	??_main,w
  7927  0460  0021               	movlb	1	; select bank1
  7928  0461  0265               	subwf	main@tempFanOutput^(0+128),w
  7929  0462                     u4425:	
  7930  0462  1803               	skipnc
  7931  0463  2C70               	goto	l3496
  7932                           
  7933                           ;main.c: 204: {
  7934                           ;main.c: 205: if(tempFanOutput<75)
  7935  0464  3000               	movlw	0
  7936  0465  0266               	subwf	(main@tempFanOutput+1)^(0+128),w
  7937  0466  304B               	movlw	75
  7938  0467  1903               	skipnz
  7939  0468  0265               	subwf	main@tempFanOutput^(0+128),w
  7940  0469  1803               	skipnc
  7941  046A  2C78               	goto	l521
  7942                           
  7943                           ;main.c: 206: {
  7944                           ;main.c: 207: tempFanOutput+=1;
  7945  046B  3001               	movlw	1
  7946  046C  07E5               	addwf	main@tempFanOutput^(0+128),f
  7947  046D  3000               	movlw	0
  7948  046E  3DE6               	addwfc	(main@tempFanOutput+1)^(0+128),f
  7949                           
  7950                           ;main.c: 208: }
  7951                           ;main.c: 209: }
  7952  046F  2C78               	goto	l521
  7953  0470                     l3496:	
  7954                           
  7955                           ;main.c: 210: else
  7956                           ;main.c: 211: {
  7957                           ;main.c: 212: if(tempFanOutput>0)tempFanOutput-=1;
  7958  0470  0865               	movf	main@tempFanOutput^(0+128),w
  7959  0471  0466               	iorwf	(main@tempFanOutput+1)^(0+128),w
  7960  0472  1903               	btfsc	3,2
  7961  0473  2C78               	goto	l521
  7962  0474  3001               	movlw	1
  7963  0475  02E5               	subwf	main@tempFanOutput^(0+128),f
  7964  0476  3000               	movlw	0
  7965  0477  3BE6               	subwfb	(main@tempFanOutput+1)^(0+128),f
  7966  0478                     l521:	
  7967                           
  7968                           ;main.c: 213: }
  7969                           ;main.c: 215: dutyCycle1=tempFanOutput;
  7970  0478  0866               	movf	(main@tempFanOutput+1)^(0+128),w
  7971  0479  00E4               	movwf	(main@dutyCycle1+1)^(0+128)
  7972  047A  0865               	movf	main@tempFanOutput^(0+128),w
  7973  047B  00E3               	movwf	main@dutyCycle1^(0+128)
  7974                           
  7975                           ;main.c: 216: if(dutyCycle1<19)dutyCycle1=0;
  7976  047C  3000               	movlw	0
  7977  047D  0264               	subwf	(main@dutyCycle1+1)^(0+128),w
  7978  047E  3013               	movlw	19
  7979  047F  1903               	skipnz
  7980  0480  0263               	subwf	main@dutyCycle1^(0+128),w
  7981  0481  1803               	skipnc
  7982  0482  2C87               	goto	l3504
  7983  0483  2C85               	goto	L2
  7984  0484                     l3502:	
  7985                           ;main.c: 217: }
  7986                           
  7987                           
  7988                           ;main.c: 218: else
  7989                           ;main.c: 219: {
  7990                           ;main.c: 220: dutyCycle1=0;
  7991  0484  0021               	movlb	1	; select bank1
  7992  0485                     L2:	
  7993  0485  01E3               	clrf	main@dutyCycle1^(0+128)
  7994  0486  01E4               	clrf	(main@dutyCycle1+1)^(0+128)
  7995  0487                     l3504:	
  7996                           
  7997                           ;main.c: 221: }
  7998                           ;main.c: 222: if(!(RB2))
  7999  0487  0020               	movlb	0	; select bank0
  8000  0488  190D               	btfsc	13,2	;volatile
  8001  0489  2C98               	goto	l3508
  8002                           
  8003                           ;main.c: 223: {
  8004                           ;main.c: 224: dutyCycle1=55;
  8005  048A  3037               	movlw	55
  8006  048B  0021               	movlb	1	; select bank1
  8007  048C  00E3               	movwf	main@dutyCycle1^(0+128)
  8008  048D  3000               	movlw	0
  8009  048E  00E4               	movwf	(main@dutyCycle1^(0+128)+1)
  8010                           
  8011                           ;main.c: 225: batteryState[0]=CHARGE;
  8012  048F  3004               	movlw	4
  8013  0490  0020               	movlb	0	; select bank0
  8014  0491  00D9               	movwf	??_main
  8015  0492  0859               	movf	??_main,w
  8016  0493  00E4               	movwf	_batteryState
  8017                           
  8018                           ;main.c: 226: batteryState[1]=CHARGE;
  8019  0494  3004               	movlw	4
  8020  0495  00D9               	movwf	??_main
  8021  0496  0859               	movf	??_main,w
  8022  0497  00E5               	movwf	_batteryState+1
  8023  0498                     l3508:	
  8024                           
  8025                           ;main.c: 227: }
  8026                           ;main.c: 229: PWM1_LoadDutyValue(dutyCycle1);
  8027  0498  0021               	movlb	1	; select bank1
  8028  0499  0864               	movf	(main@dutyCycle1+1)^(0+128),w
  8029  049A  00F1               	movwf	PWM1_LoadDutyValue@dutyCycle1+1
  8030  049B  0863               	movf	main@dutyCycle1^(0+128),w
  8031  049C  00F0               	movwf	PWM1_LoadDutyValue@dutyCycle1
  8032  049D  319E  26A4  3180   	fcall	_PWM1_LoadDutyValue
  8033                           
  8034                           ;main.c: 231: ADREF = 0x00;
  8035  04A0  0021               	movlb	1	; select bank1
  8036  04A1  019A               	clrf	26	;volatile
  8037                           
  8038                           ;main.c: 232: batteryTemp=tempCalc(ADCRead(9));
  8039  04A2  3009               	movlw	9
  8040  04A3  319E  268F  3180   	fcall	_ADCRead
  8041  04A6  0871               	movf	?_ADCRead+1,w
  8042  04A7  0020               	movlb	0	; select bank0
  8043  04A8  00CF               	movwf	tempCalc@analogValue+1
  8044  04A9  0870               	movf	?_ADCRead,w
  8045  04AA  00CE               	movwf	tempCalc@analogValue
  8046  04AB  3188  20CF  3180   	fcall	_tempCalc
  8047  04AE  0020               	movlb	0	; select bank0
  8048  04AF  084F               	movf	?_tempCalc+1,w
  8049  04B0  00EE               	movwf	_batteryTemp+1
  8050  04B1  084E               	movf	?_tempCalc,w
  8051  04B2  00ED               	movwf	_batteryTemp
  8052                           
  8053                           ;main.c: 233: ADREF = 0x03;
  8054  04B3  3003               	movlw	3
  8055  04B4  0021               	movlb	1	; select bank1
  8056  04B5  009A               	movwf	26	;volatile
  8057                           
  8058                           ;main.c: 235: displayRefresh+=1;
  8059  04B6  3001               	movlw	1
  8060  04B7  0020               	movlb	0	; select bank0
  8061  04B8  00D9               	movwf	??_main
  8062  04B9  0859               	movf	??_main,w
  8063  04BA  0021               	movlb	1	; select bank1
  8064  04BB  07DA               	addwf	main@displayRefresh^(0+128),f
  8065                           
  8066                           ;main.c: 236: if(displayRefresh>80)
  8067  04BC  3051               	movlw	81
  8068  04BD  025A               	subwf	main@displayRefresh^(0+128),w
  8069  04BE  1C03               	skipc
  8070  04BF  2CC5               	goto	l3524
  8071                           
  8072                           ;main.c: 237: {
  8073                           ;main.c: 238: LCDClear();
  8074  04C0  319F  27AE  3180   	fcall	_LCDClear
  8075                           
  8076                           ;main.c: 239: displayRefresh=0;
  8077  04C3  0021               	movlb	1	; select bank1
  8078  04C4  01DA               	clrf	main@displayRefresh^(0+128)
  8079  04C5                     l3524:	
  8080                           
  8081                           ;main.c: 241: }
  8082                           ;main.c: 242: Battery_State_Machine(0);
  8083  04C5  3000               	movlw	0
  8084  04C6  318E  264B  3180   	fcall	_Battery_State_Machine
  8085                           
  8086                           ;main.c: 243: Battery_State_Machine(1);
  8087  04C9  3001               	movlw	1
  8088  04CA  318E  264B  3180   	fcall	_Battery_State_Machine
  8089                           
  8090                           ;main.c: 246: { gotoXY(0,0); LCDWriteString("In:");};
  8091  04CD  01F5               	clrf	gotoXY@y
  8092  04CE  3000               	movlw	0
  8093  04CF  319E  2668  3180   	fcall	_gotoXY
  8094  04D2  3025               	movlw	low (STR_1| (0+32768))
  8095  04D3  00FC               	movwf	LCDWriteString@characters
  8096  04D4  3098               	movlw	high (STR_1| (0+32768))
  8097  04D5  00FD               	movwf	LCDWriteString@characters+1
  8098  04D6  319E  267B  3180   	fcall	_LCDWriteString
  8099                           
  8100                           ;main.c: 249: { gotoXY(26,0); LCDWriteString("Out:");};
  8101  04D9  01F5               	clrf	gotoXY@y
  8102  04DA  301A               	movlw	26
  8103  04DB  319E  2668  3180   	fcall	_gotoXY
  8104  04DE  3020               	movlw	low (STR_2| (0+32768))
  8105  04DF  00FC               	movwf	LCDWriteString@characters
  8106  04E0  3098               	movlw	high (STR_2| (0+32768))
  8107  04E1  00FD               	movwf	LCDWriteString@characters+1
  8108  04E2  319E  267B  3180   	fcall	_LCDWriteString
  8109                           
  8110                           ;main.c: 250: { gotoXY(52,0); LCDWriteString("Ref:");};
  8111  04E5  01F5               	clrf	gotoXY@y
  8112  04E6  3034               	movlw	52
  8113  04E7  319E  2668  3180   	fcall	_gotoXY
  8114  04EA  301B               	movlw	low (STR_3| (0+32768))
  8115  04EB  00FC               	movwf	LCDWriteString@characters
  8116  04EC  3098               	movlw	high (STR_3| (0+32768))
  8117  04ED  00FD               	movwf	LCDWriteString@characters+1
  8118  04EE  319E  267B  3180   	fcall	_LCDWriteString
  8119                           
  8120                           ;main.c: 252: { gotoXY(0,1); LCDWriteInt(voltage[2],4, 2, 0);};
  8121  04F1  01F5               	clrf	gotoXY@y
  8122  04F2  0AF5               	incf	gotoXY@y,f
  8123  04F3  3000               	movlw	0
  8124  04F4  319E  2668  3180   	fcall	_gotoXY
  8125  04F7  0021               	movlb	1	; select bank1
  8126  04F8  0825               	movf	((_voltage+1)^(0+128)+4),w
  8127  04F9  0020               	movlb	0	; select bank0
  8128  04FA  00C0               	movwf	LCDWriteInt@value+1
  8129  04FB  0021               	movlb	1	; select bank1
  8130  04FC  0824               	movf	(_voltage^(0+128)+4),w
  8131  04FD  0020               	movlb	0	; select bank0
  8132  04FE  00BF               	movwf	LCDWriteInt@value
  8133  04FF  3004               	movlw	4
  8134  0500  00D9               	movwf	??_main
  8135  0501  0859               	movf	??_main,w
  8136  0502  00C1               	movwf	LCDWriteInt@fieldLength
  8137  0503  3002               	movlw	2
  8138  0504  00DA               	movwf	??_main+1
  8139  0505  085A               	movf	??_main+1,w
  8140  0506  00C2               	movwf	LCDWriteInt@numPlaces
  8141  0507  01C3               	clrf	LCDWriteInt@sign
  8142  0508  3188  2016  3180   	fcall	_LCDWriteInt
  8143                           
  8144                           ;main.c: 254: LCDWriteCharacter('V');
  8145  050B  3056               	movlw	86
  8146  050C  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8147                           
  8148                           ;main.c: 256: { gotoXY(26,1); LCDWriteInt(voltage[0],4, 2, 0);};
  8149  050F  01F5               	clrf	gotoXY@y
  8150  0510  0AF5               	incf	gotoXY@y,f
  8151  0511  301A               	movlw	26
  8152  0512  319E  2668  3180   	fcall	_gotoXY
  8153  0515  0021               	movlb	1	; select bank1
  8154  0516  0821               	movf	(_voltage+1)^(0+128),w
  8155  0517  0020               	movlb	0	; select bank0
  8156  0518  00C0               	movwf	LCDWriteInt@value+1
  8157  0519  0021               	movlb	1	; select bank1
  8158  051A  0820               	movf	_voltage^(0+128),w
  8159  051B  0020               	movlb	0	; select bank0
  8160  051C  00BF               	movwf	LCDWriteInt@value
  8161  051D  3004               	movlw	4
  8162  051E  00D9               	movwf	??_main
  8163  051F  0859               	movf	??_main,w
  8164  0520  00C1               	movwf	LCDWriteInt@fieldLength
  8165  0521  3002               	movlw	2
  8166  0522  00DA               	movwf	??_main+1
  8167  0523  085A               	movf	??_main+1,w
  8168  0524  00C2               	movwf	LCDWriteInt@numPlaces
  8169  0525  01C3               	clrf	LCDWriteInt@sign
  8170  0526  3188  2016  3180   	fcall	_LCDWriteInt
  8171                           
  8172                           ;main.c: 258: LCDWriteCharacter('V');
  8173  0529  3056               	movlw	86
  8174  052A  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8175                           
  8176                           ;main.c: 260: { gotoXY(52,1); LCDWriteInt(Vref[0],4, 2, 0);};
  8177  052D  01F5               	clrf	gotoXY@y
  8178  052E  0AF5               	incf	gotoXY@y,f
  8179  052F  3034               	movlw	52
  8180  0530  319E  2668  3180   	fcall	_gotoXY
  8181  0533  0021               	movlb	1	; select bank1
  8182  0534  0831               	movf	(_Vref+1)^(0+128),w
  8183  0535  0020               	movlb	0	; select bank0
  8184  0536  00C0               	movwf	LCDWriteInt@value+1
  8185  0537  0021               	movlb	1	; select bank1
  8186  0538  0830               	movf	_Vref^(0+128),w
  8187  0539  0020               	movlb	0	; select bank0
  8188  053A  00BF               	movwf	LCDWriteInt@value
  8189  053B  3004               	movlw	4
  8190  053C  00D9               	movwf	??_main
  8191  053D  0859               	movf	??_main,w
  8192  053E  00C1               	movwf	LCDWriteInt@fieldLength
  8193  053F  3002               	movlw	2
  8194  0540  00DA               	movwf	??_main+1
  8195  0541  085A               	movf	??_main+1,w
  8196  0542  00C2               	movwf	LCDWriteInt@numPlaces
  8197  0543  01C3               	clrf	LCDWriteInt@sign
  8198  0544  3188  2016  3180   	fcall	_LCDWriteInt
  8199                           
  8200                           ;main.c: 261: LCDWriteCharacter('V');
  8201  0547  3056               	movlw	86
  8202  0548  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8203                           
  8204                           ;main.c: 263: { gotoXY(80,1); LCDWriteInt(Imode[0],1, 0, 0);};
  8205  054B  01F5               	clrf	gotoXY@y
  8206  054C  0AF5               	incf	gotoXY@y,f
  8207  054D  3050               	movlw	80
  8208  054E  319E  2668  3180   	fcall	_gotoXY
  8209  0551  0020               	movlb	0	; select bank0
  8210  0552  0862               	movf	_Imode,w
  8211  0553  00BF               	movwf	LCDWriteInt@value
  8212  0554  01C0               	clrf	LCDWriteInt@value+1
  8213  0555  1BBF               	btfsc	LCDWriteInt@value,7
  8214  0556  03C0               	decf	LCDWriteInt@value+1,f
  8215  0557  01C1               	clrf	LCDWriteInt@fieldLength
  8216  0558  0AC1               	incf	LCDWriteInt@fieldLength,f
  8217  0559  01C2               	clrf	LCDWriteInt@numPlaces
  8218  055A  01C3               	clrf	LCDWriteInt@sign
  8219  055B  3188  2016  3180   	fcall	_LCDWriteInt
  8220                           
  8221                           ;main.c: 266: { gotoXY(0,2); LCDWriteInt(current[2],3, 1, 0);};
  8222  055E  3002               	movlw	2
  8223  055F  0020               	movlb	0	; select bank0
  8224  0560  00D9               	movwf	??_main
  8225  0561  0859               	movf	??_main,w
  8226  0562  00F5               	movwf	gotoXY@y
  8227  0563  3000               	movlw	0
  8228  0564  319E  2668  3180   	fcall	_gotoXY
  8229  0567  0021               	movlb	1	; select bank1
  8230  0568  082D               	movf	((_current+1)^(0+128)+4),w
  8231  0569  0020               	movlb	0	; select bank0
  8232  056A  00C0               	movwf	LCDWriteInt@value+1
  8233  056B  0021               	movlb	1	; select bank1
  8234  056C  082C               	movf	(_current^(0+128)+4),w
  8235  056D  0020               	movlb	0	; select bank0
  8236  056E  00BF               	movwf	LCDWriteInt@value
  8237  056F  3003               	movlw	3
  8238  0570  00D9               	movwf	??_main
  8239  0571  0859               	movf	??_main,w
  8240  0572  00C1               	movwf	LCDWriteInt@fieldLength
  8241  0573  01C2               	clrf	LCDWriteInt@numPlaces
  8242  0574  0AC2               	incf	LCDWriteInt@numPlaces,f
  8243  0575  01C3               	clrf	LCDWriteInt@sign
  8244  0576  3188  2016  3180   	fcall	_LCDWriteInt
  8245                           
  8246                           ;main.c: 267: LCDWriteCharacter('A');
  8247  0579  3041               	movlw	65
  8248  057A  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8249                           
  8250                           ;main.c: 270: { gotoXY(26,2); LCDWriteInt(current[0],3, 1, 0);};
  8251  057D  3002               	movlw	2
  8252  057E  0020               	movlb	0	; select bank0
  8253  057F  00D9               	movwf	??_main
  8254  0580  0859               	movf	??_main,w
  8255  0581  00F5               	movwf	gotoXY@y
  8256  0582  301A               	movlw	26
  8257  0583  319E  2668  3180   	fcall	_gotoXY
  8258  0586  0021               	movlb	1	; select bank1
  8259  0587  0829               	movf	(_current+1)^(0+128),w
  8260  0588  0020               	movlb	0	; select bank0
  8261  0589  00C0               	movwf	LCDWriteInt@value+1
  8262  058A  0021               	movlb	1	; select bank1
  8263  058B  0828               	movf	_current^(0+128),w
  8264  058C  0020               	movlb	0	; select bank0
  8265  058D  00BF               	movwf	LCDWriteInt@value
  8266  058E  3003               	movlw	3
  8267  058F  00D9               	movwf	??_main
  8268  0590  0859               	movf	??_main,w
  8269  0591  00C1               	movwf	LCDWriteInt@fieldLength
  8270  0592  01C2               	clrf	LCDWriteInt@numPlaces
  8271  0593  0AC2               	incf	LCDWriteInt@numPlaces,f
  8272  0594  01C3               	clrf	LCDWriteInt@sign
  8273  0595  3188  2016  3180   	fcall	_LCDWriteInt
  8274                           
  8275                           ;main.c: 271: LCDWriteCharacter('A');
  8276  0598  3041               	movlw	65
  8277  0599  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8278                           
  8279                           ;main.c: 273: { gotoXY(52,2); LCDWriteInt(Iref[0],3, 1, 0);};
  8280  059C  3002               	movlw	2
  8281  059D  0020               	movlb	0	; select bank0
  8282  059E  00D9               	movwf	??_main
  8283  059F  0859               	movf	??_main,w
  8284  05A0  00F5               	movwf	gotoXY@y
  8285  05A1  3034               	movlw	52
  8286  05A2  319E  2668  3180   	fcall	_gotoXY
  8287  05A5  0021               	movlb	1	; select bank1
  8288  05A6  0839               	movf	(_Iref+1)^(0+128),w
  8289  05A7  0020               	movlb	0	; select bank0
  8290  05A8  00C0               	movwf	LCDWriteInt@value+1
  8291  05A9  0021               	movlb	1	; select bank1
  8292  05AA  0838               	movf	_Iref^(0+128),w
  8293  05AB  0020               	movlb	0	; select bank0
  8294  05AC  00BF               	movwf	LCDWriteInt@value
  8295  05AD  3003               	movlw	3
  8296  05AE  00D9               	movwf	??_main
  8297  05AF  0859               	movf	??_main,w
  8298  05B0  00C1               	movwf	LCDWriteInt@fieldLength
  8299  05B1  01C2               	clrf	LCDWriteInt@numPlaces
  8300  05B2  0AC2               	incf	LCDWriteInt@numPlaces,f
  8301  05B3  01C3               	clrf	LCDWriteInt@sign
  8302  05B4  3188  2016  3180   	fcall	_LCDWriteInt
  8303                           
  8304                           ;main.c: 274: LCDWriteCharacter('A');
  8305  05B7  3041               	movlw	65
  8306  05B8  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8307                           
  8308                           ;main.c: 276: { gotoXY(80,2); LCDWriteInt(batteryState[0],1, 0, 0);};
  8309  05BB  3002               	movlw	2
  8310  05BC  0020               	movlb	0	; select bank0
  8311  05BD  00D9               	movwf	??_main
  8312  05BE  0859               	movf	??_main,w
  8313  05BF  00F5               	movwf	gotoXY@y
  8314  05C0  3050               	movlw	80
  8315  05C1  319E  2668  3180   	fcall	_gotoXY
  8316  05C4  0020               	movlb	0	; select bank0
  8317  05C5  0864               	movf	_batteryState,w
  8318  05C6  00D9               	movwf	??_main
  8319  05C7  01DA               	clrf	??_main+1
  8320  05C8  0859               	movf	??_main,w
  8321  05C9  00BF               	movwf	LCDWriteInt@value
  8322  05CA  085A               	movf	??_main+1,w
  8323  05CB  00C0               	movwf	LCDWriteInt@value+1
  8324  05CC  01C1               	clrf	LCDWriteInt@fieldLength
  8325  05CD  0AC1               	incf	LCDWriteInt@fieldLength,f
  8326  05CE  01C2               	clrf	LCDWriteInt@numPlaces
  8327  05CF  01C3               	clrf	LCDWriteInt@sign
  8328  05D0  3188  2016  3180   	fcall	_LCDWriteInt
  8329                           
  8330                           ;main.c: 278: { gotoXY(0,3); LCDWriteInt(voltage[3],4, 2, 0);};
  8331  05D3  3003               	movlw	3
  8332  05D4  0020               	movlb	0	; select bank0
  8333  05D5  00D9               	movwf	??_main
  8334  05D6  0859               	movf	??_main,w
  8335  05D7  00F5               	movwf	gotoXY@y
  8336  05D8  3000               	movlw	0
  8337  05D9  319E  2668  3180   	fcall	_gotoXY
  8338  05DC  0021               	movlb	1	; select bank1
  8339  05DD  0827               	movf	((_voltage+1)^(0+128)+6),w
  8340  05DE  0020               	movlb	0	; select bank0
  8341  05DF  00C0               	movwf	LCDWriteInt@value+1
  8342  05E0  0021               	movlb	1	; select bank1
  8343  05E1  0826               	movf	(_voltage^(0+128)+6),w
  8344  05E2  0020               	movlb	0	; select bank0
  8345  05E3  00BF               	movwf	LCDWriteInt@value
  8346  05E4  3004               	movlw	4
  8347  05E5  00D9               	movwf	??_main
  8348  05E6  0859               	movf	??_main,w
  8349  05E7  00C1               	movwf	LCDWriteInt@fieldLength
  8350  05E8  3002               	movlw	2
  8351  05E9  00DA               	movwf	??_main+1
  8352  05EA  085A               	movf	??_main+1,w
  8353  05EB  00C2               	movwf	LCDWriteInt@numPlaces
  8354  05EC  01C3               	clrf	LCDWriteInt@sign
  8355  05ED  3188  2016  3180   	fcall	_LCDWriteInt
  8356                           
  8357                           ;main.c: 280: LCDWriteCharacter('V');
  8358  05F0  3056               	movlw	86
  8359  05F1  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8360                           
  8361                           ;main.c: 282: { gotoXY(26,3); LCDWriteInt(voltage[1],4, 2, 0);};
  8362  05F4  3003               	movlw	3
  8363  05F5  0020               	movlb	0	; select bank0
  8364  05F6  00D9               	movwf	??_main
  8365  05F7  0859               	movf	??_main,w
  8366  05F8  00F5               	movwf	gotoXY@y
  8367  05F9  301A               	movlw	26
  8368  05FA  319E  2668  3180   	fcall	_gotoXY
  8369  05FD  0021               	movlb	1	; select bank1
  8370  05FE  0823               	movf	((_voltage+1)^(0+128)+2),w
  8371  05FF  0020               	movlb	0	; select bank0
  8372  0600  00C0               	movwf	LCDWriteInt@value+1
  8373  0601  0021               	movlb	1	; select bank1
  8374  0602  0822               	movf	(_voltage^(0+128)+2),w
  8375  0603  0020               	movlb	0	; select bank0
  8376  0604  00BF               	movwf	LCDWriteInt@value
  8377  0605  3004               	movlw	4
  8378  0606  00D9               	movwf	??_main
  8379  0607  0859               	movf	??_main,w
  8380  0608  00C1               	movwf	LCDWriteInt@fieldLength
  8381  0609  3002               	movlw	2
  8382  060A  00DA               	movwf	??_main+1
  8383  060B  085A               	movf	??_main+1,w
  8384  060C  00C2               	movwf	LCDWriteInt@numPlaces
  8385  060D  01C3               	clrf	LCDWriteInt@sign
  8386  060E  3188  2016  3180   	fcall	_LCDWriteInt
  8387                           
  8388                           ;main.c: 284: LCDWriteCharacter('V');
  8389  0611  3056               	movlw	86
  8390  0612  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8391                           
  8392                           ;main.c: 286: { gotoXY(52,3); LCDWriteInt(Vref[1],4, 2, 0);};
  8393  0615  3003               	movlw	3
  8394  0616  0020               	movlb	0	; select bank0
  8395  0617  00D9               	movwf	??_main
  8396  0618  0859               	movf	??_main,w
  8397  0619  00F5               	movwf	gotoXY@y
  8398  061A  3034               	movlw	52
  8399  061B  319E  2668  3180   	fcall	_gotoXY
  8400  061E  0021               	movlb	1	; select bank1
  8401  061F  0833               	movf	((_Vref+1)^(0+128)+2),w
  8402  0620  0020               	movlb	0	; select bank0
  8403  0621  00C0               	movwf	LCDWriteInt@value+1
  8404  0622  0021               	movlb	1	; select bank1
  8405  0623  0832               	movf	(_Vref^(0+128)+2),w
  8406  0624  0020               	movlb	0	; select bank0
  8407  0625  00BF               	movwf	LCDWriteInt@value
  8408  0626  3004               	movlw	4
  8409  0627  00D9               	movwf	??_main
  8410  0628  0859               	movf	??_main,w
  8411  0629  00C1               	movwf	LCDWriteInt@fieldLength
  8412  062A  3002               	movlw	2
  8413  062B  00DA               	movwf	??_main+1
  8414  062C  085A               	movf	??_main+1,w
  8415  062D  00C2               	movwf	LCDWriteInt@numPlaces
  8416  062E  01C3               	clrf	LCDWriteInt@sign
  8417  062F  3188  2016  3180   	fcall	_LCDWriteInt
  8418                           
  8419                           ;main.c: 287: LCDWriteCharacter('V');
  8420  0632  3056               	movlw	86
  8421  0633  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8422                           
  8423                           ;main.c: 289: { gotoXY(80,3); LCDWriteInt(Imode[1],1, 0, 0);};
  8424  0636  3003               	movlw	3
  8425  0637  0020               	movlb	0	; select bank0
  8426  0638  00D9               	movwf	??_main
  8427  0639  0859               	movf	??_main,w
  8428  063A  00F5               	movwf	gotoXY@y
  8429  063B  3050               	movlw	80
  8430  063C  319E  2668  3180   	fcall	_gotoXY
  8431  063F  0020               	movlb	0	; select bank0
  8432  0640  0863               	movf	_Imode+1,w
  8433  0641  00BF               	movwf	LCDWriteInt@value
  8434  0642  01C0               	clrf	LCDWriteInt@value+1
  8435  0643  1BBF               	btfsc	LCDWriteInt@value,7
  8436  0644  03C0               	decf	LCDWriteInt@value+1,f
  8437  0645  01C1               	clrf	LCDWriteInt@fieldLength
  8438  0646  0AC1               	incf	LCDWriteInt@fieldLength,f
  8439  0647  01C2               	clrf	LCDWriteInt@numPlaces
  8440  0648  01C3               	clrf	LCDWriteInt@sign
  8441  0649  3188  2016  3180   	fcall	_LCDWriteInt
  8442                           
  8443                           ;main.c: 299: { gotoXY(0,4); LCDWriteInt(current[3],3, 1, 0);};
  8444  064C  3004               	movlw	4
  8445  064D  0020               	movlb	0	; select bank0
  8446  064E  00D9               	movwf	??_main
  8447  064F  0859               	movf	??_main,w
  8448  0650  00F5               	movwf	gotoXY@y
  8449  0651  3000               	movlw	0
  8450  0652  319E  2668  3180   	fcall	_gotoXY
  8451  0655  0021               	movlb	1	; select bank1
  8452  0656  082F               	movf	((_current+1)^(0+128)+6),w
  8453  0657  0020               	movlb	0	; select bank0
  8454  0658  00C0               	movwf	LCDWriteInt@value+1
  8455  0659  0021               	movlb	1	; select bank1
  8456  065A  082E               	movf	(_current^(0+128)+6),w
  8457  065B  0020               	movlb	0	; select bank0
  8458  065C  00BF               	movwf	LCDWriteInt@value
  8459  065D  3003               	movlw	3
  8460  065E  00D9               	movwf	??_main
  8461  065F  0859               	movf	??_main,w
  8462  0660  00C1               	movwf	LCDWriteInt@fieldLength
  8463  0661  01C2               	clrf	LCDWriteInt@numPlaces
  8464  0662  0AC2               	incf	LCDWriteInt@numPlaces,f
  8465  0663  01C3               	clrf	LCDWriteInt@sign
  8466  0664  3188  2016  3180   	fcall	_LCDWriteInt
  8467                           
  8468                           ;main.c: 300: LCDWriteCharacter('A');
  8469  0667  3041               	movlw	65
  8470  0668  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8471                           
  8472                           ;main.c: 302: { gotoXY(26,4); LCDWriteInt((int16_t)(current[3]*(voltage[3]/voltage[1]*.9
      +                          )),3, 1, 0);};
  8473  066B  3004               	movlw	4
  8474  066C  0020               	movlb	0	; select bank0
  8475  066D  00D9               	movwf	??_main
  8476  066E  0859               	movf	??_main,w
  8477  066F  00F5               	movwf	gotoXY@y
  8478  0670  301A               	movlw	26
  8479  0671  319E  2668  3180   	fcall	_gotoXY
  8480  0674  0021               	movlb	1	; select bank1
  8481  0675  0827               	movf	((_voltage+1)^(0+128)+6),w
  8482  0676  00F3               	movwf	___awdiv@dividend+1
  8483  0677  0826               	movf	(_voltage^(0+128)+6),w
  8484  0678  00F2               	movwf	___awdiv@dividend
  8485  0679  0823               	movf	((_voltage+1)^(0+128)+2),w
  8486  067A  00F1               	movwf	___awdiv@divisor+1
  8487  067B  0822               	movf	(_voltage^(0+128)+2),w
  8488  067C  00F0               	movwf	___awdiv@divisor
  8489  067D  3192  229B  3180   	fcall	___awdiv
  8490  0680  0871               	movf	?___awdiv+1,w
  8491  0681  00FA               	movwf	___awtoft@c+1
  8492  0682  0870               	movf	?___awdiv,w
  8493  0683  00F9               	movwf	___awtoft@c
  8494  0684  319F  2747  3180   	fcall	___awtoft
  8495  0687  0879               	movf	?___awtoft,w
  8496  0688  0020               	movlb	0	; select bank0
  8497  0689  00A4               	movwf	___ftmul@f2
  8498  068A  087A               	movf	?___awtoft+1,w
  8499  068B  00A5               	movwf	___ftmul@f2+1
  8500  068C  087B               	movf	?___awtoft+2,w
  8501  068D  00A6               	movwf	___ftmul@f2+2
  8502  068E  3066               	movlw	102
  8503  068F  00A1               	movwf	___ftmul@f1
  8504  0690  3066               	movlw	102
  8505  0691  00A2               	movwf	___ftmul@f1+1
  8506  0692  303F               	movlw	63
  8507  0693  00A3               	movwf	___ftmul@f1+2
  8508  0694  3197  274C  3180   	fcall	___ftmul
  8509  0697  0020               	movlb	0	; select bank0
  8510  0698  0821               	movf	?___ftmul,w
  8511  0699  0021               	movlb	1	; select bank1
  8512  069A  00E7               	movwf	_main$1309^(0+128)
  8513  069B  0020               	movlb	0	; select bank0
  8514  069C  0822               	movf	?___ftmul+1,w
  8515  069D  0021               	movlb	1	; select bank1
  8516  069E  00E8               	movwf	(_main$1309+1)^(0+128)
  8517  069F  0020               	movlb	0	; select bank0
  8518  06A0  0823               	movf	?___ftmul+2,w
  8519  06A1  0021               	movlb	1	; select bank1
  8520  06A2  00E9               	movwf	(_main$1309+2)^(0+128)
  8521  06A3  082F               	movf	((_current+1)^(0+128)+6),w
  8522  06A4  00FA               	movwf	___awtoft@c+1
  8523  06A5  082E               	movf	(_current^(0+128)+6),w
  8524  06A6  00F9               	movwf	___awtoft@c
  8525  06A7  319F  2747  3180   	fcall	___awtoft
  8526  06AA  0879               	movf	?___awtoft,w
  8527  06AB  0020               	movlb	0	; select bank0
  8528  06AC  00A4               	movwf	___ftmul@f2
  8529  06AD  087A               	movf	?___awtoft+1,w
  8530  06AE  00A5               	movwf	___ftmul@f2+1
  8531  06AF  087B               	movf	?___awtoft+2,w
  8532  06B0  00A6               	movwf	___ftmul@f2+2
  8533  06B1  0021               	movlb	1	; select bank1
  8534  06B2  0867               	movf	_main$1309^(0+128),w
  8535  06B3  0020               	movlb	0	; select bank0
  8536  06B4  00A1               	movwf	___ftmul@f1
  8537  06B5  0021               	movlb	1	; select bank1
  8538  06B6  0868               	movf	(_main$1309+1)^(0+128),w
  8539  06B7  0020               	movlb	0	; select bank0
  8540  06B8  00A2               	movwf	___ftmul@f1+1
  8541  06B9  0021               	movlb	1	; select bank1
  8542  06BA  0869               	movf	(_main$1309+2)^(0+128),w
  8543  06BB  0020               	movlb	0	; select bank0
  8544  06BC  00A3               	movwf	___ftmul@f1+2
  8545  06BD  3197  274C  3180   	fcall	___ftmul
  8546  06C0  0020               	movlb	0	; select bank0
  8547  06C1  0821               	movf	?___ftmul,w
  8548  06C2  00B1               	movwf	___fttol@f1
  8549  06C3  0822               	movf	?___ftmul+1,w
  8550  06C4  00B2               	movwf	___fttol@f1+1
  8551  06C5  0823               	movf	?___ftmul+2,w
  8552  06C6  00B3               	movwf	___fttol@f1+2
  8553  06C7  3195  256C  3180   	fcall	___fttol
  8554  06CA  0020               	movlb	0	; select bank0
  8555  06CB  0832               	movf	?___fttol+1,w
  8556  06CC  00C0               	movwf	LCDWriteInt@value+1
  8557  06CD  0831               	movf	?___fttol,w
  8558  06CE  00BF               	movwf	LCDWriteInt@value
  8559  06CF  3003               	movlw	3
  8560  06D0  00D9               	movwf	??_main
  8561  06D1  0859               	movf	??_main,w
  8562  06D2  00C1               	movwf	LCDWriteInt@fieldLength
  8563  06D3  01C2               	clrf	LCDWriteInt@numPlaces
  8564  06D4  0AC2               	incf	LCDWriteInt@numPlaces,f
  8565  06D5  01C3               	clrf	LCDWriteInt@sign
  8566  06D6  3188  2016  3180   	fcall	_LCDWriteInt
  8567                           
  8568                           ;main.c: 304: LCDWriteCharacter('A');
  8569  06D9  3041               	movlw	65
  8570  06DA  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8571                           
  8572                           ;main.c: 306: { gotoXY(52,4); LCDWriteInt(Iref[1],3, 1, 0);};
  8573  06DD  3004               	movlw	4
  8574  06DE  0020               	movlb	0	; select bank0
  8575  06DF  00D9               	movwf	??_main
  8576  06E0  0859               	movf	??_main,w
  8577  06E1  00F5               	movwf	gotoXY@y
  8578  06E2  3034               	movlw	52
  8579  06E3  319E  2668  3180   	fcall	_gotoXY
  8580  06E6  0021               	movlb	1	; select bank1
  8581  06E7  083B               	movf	((_Iref+1)^(0+128)+2),w
  8582  06E8  0020               	movlb	0	; select bank0
  8583  06E9  00C0               	movwf	LCDWriteInt@value+1
  8584  06EA  0021               	movlb	1	; select bank1
  8585  06EB  083A               	movf	(_Iref^(0+128)+2),w
  8586  06EC  0020               	movlb	0	; select bank0
  8587  06ED  00BF               	movwf	LCDWriteInt@value
  8588  06EE  3003               	movlw	3
  8589  06EF  00D9               	movwf	??_main
  8590  06F0  0859               	movf	??_main,w
  8591  06F1  00C1               	movwf	LCDWriteInt@fieldLength
  8592  06F2  01C2               	clrf	LCDWriteInt@numPlaces
  8593  06F3  0AC2               	incf	LCDWriteInt@numPlaces,f
  8594  06F4  01C3               	clrf	LCDWriteInt@sign
  8595  06F5  3188  2016  3180   	fcall	_LCDWriteInt
  8596                           
  8597                           ;main.c: 307: LCDWriteCharacter('A');
  8598  06F8  3041               	movlw	65
  8599  06F9  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8600                           
  8601                           ;main.c: 309: { gotoXY(80,4); LCDWriteInt(batteryState[1],1, 0, 0);};
  8602  06FC  3004               	movlw	4
  8603  06FD  0020               	movlb	0	; select bank0
  8604  06FE  00D9               	movwf	??_main
  8605  06FF  0859               	movf	??_main,w
  8606  0700  00F5               	movwf	gotoXY@y
  8607  0701  3050               	movlw	80
  8608  0702  319E  2668  3180   	fcall	_gotoXY
  8609  0705  0020               	movlb	0	; select bank0
  8610  0706  0865               	movf	_batteryState+1,w
  8611  0707  00D9               	movwf	??_main
  8612  0708  01DA               	clrf	??_main+1
  8613  0709  0859               	movf	??_main,w
  8614  070A  00BF               	movwf	LCDWriteInt@value
  8615  070B  085A               	movf	??_main+1,w
  8616  070C  00C0               	movwf	LCDWriteInt@value+1
  8617  070D  01C1               	clrf	LCDWriteInt@fieldLength
  8618  070E  0AC1               	incf	LCDWriteInt@fieldLength,f
  8619  070F  01C2               	clrf	LCDWriteInt@numPlaces
  8620  0710  01C3               	clrf	LCDWriteInt@sign
  8621  0711  3188  2016  3180   	fcall	_LCDWriteInt
  8622                           
  8623                           ;main.c: 313: { gotoXY(0,5); LCDWriteInt(dutyCycle6,4, 0, 0);};
  8624  0714  3005               	movlw	5
  8625  0715  0020               	movlb	0	; select bank0
  8626  0716  00D9               	movwf	??_main
  8627  0717  0859               	movf	??_main,w
  8628  0718  00F5               	movwf	gotoXY@y
  8629  0719  3000               	movlw	0
  8630  071A  319E  2668  3180   	fcall	_gotoXY
  8631  071D  0021               	movlb	1	; select bank1
  8632  071E  086B               	movf	(main@dutyCycle6+1)^(0+128),w
  8633  071F  0020               	movlb	0	; select bank0
  8634  0720  00C0               	movwf	LCDWriteInt@value+1
  8635  0721  0021               	movlb	1	; select bank1
  8636  0722  086A               	movf	main@dutyCycle6^(0+128),w
  8637  0723  0020               	movlb	0	; select bank0
  8638  0724  00BF               	movwf	LCDWriteInt@value
  8639  0725  3004               	movlw	4
  8640  0726  00D9               	movwf	??_main
  8641  0727  0859               	movf	??_main,w
  8642  0728  00C1               	movwf	LCDWriteInt@fieldLength
  8643  0729  01C2               	clrf	LCDWriteInt@numPlaces
  8644  072A  01C3               	clrf	LCDWriteInt@sign
  8645  072B  3188  2016  3180   	fcall	_LCDWriteInt
  8646                           
  8647                           ;main.c: 314: { gotoXY(18,5); LCDWriteInt(VHoldMode[0],1, 0, 0);};
  8648  072E  3005               	movlw	5
  8649  072F  0020               	movlb	0	; select bank0
  8650  0730  00D9               	movwf	??_main
  8651  0731  0859               	movf	??_main,w
  8652  0732  00F5               	movwf	gotoXY@y
  8653  0733  3012               	movlw	18
  8654  0734  319E  2668  3180   	fcall	_gotoXY
  8655  0737  0020               	movlb	0	; select bank0
  8656  0738  0860               	movf	_VHoldMode,w
  8657  0739  00BF               	movwf	LCDWriteInt@value
  8658  073A  01C0               	clrf	LCDWriteInt@value+1
  8659  073B  1BBF               	btfsc	LCDWriteInt@value,7
  8660  073C  03C0               	decf	LCDWriteInt@value+1,f
  8661  073D  01C1               	clrf	LCDWriteInt@fieldLength
  8662  073E  0AC1               	incf	LCDWriteInt@fieldLength,f
  8663  073F  01C2               	clrf	LCDWriteInt@numPlaces
  8664  0740  01C3               	clrf	LCDWriteInt@sign
  8665  0741  3188  2016  3180   	fcall	_LCDWriteInt
  8666                           
  8667                           ;main.c: 315: LCDWriteCharacter(' ');
  8668  0744  3020               	movlw	32
  8669  0745  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8670                           
  8671                           ;main.c: 316: { gotoXY(28,5); LCDWriteInt(dutyCycle7,4, 0, 0);};
  8672  0748  3005               	movlw	5
  8673  0749  0020               	movlb	0	; select bank0
  8674  074A  00D9               	movwf	??_main
  8675  074B  0859               	movf	??_main,w
  8676  074C  00F5               	movwf	gotoXY@y
  8677  074D  301C               	movlw	28
  8678  074E  319E  2668  3180   	fcall	_gotoXY
  8679  0751  0021               	movlb	1	; select bank1
  8680  0752  086D               	movf	(main@dutyCycle7+1)^(0+128),w
  8681  0753  0020               	movlb	0	; select bank0
  8682  0754  00C0               	movwf	LCDWriteInt@value+1
  8683  0755  0021               	movlb	1	; select bank1
  8684  0756  086C               	movf	main@dutyCycle7^(0+128),w
  8685  0757  0020               	movlb	0	; select bank0
  8686  0758  00BF               	movwf	LCDWriteInt@value
  8687  0759  3004               	movlw	4
  8688  075A  00D9               	movwf	??_main
  8689  075B  0859               	movf	??_main,w
  8690  075C  00C1               	movwf	LCDWriteInt@fieldLength
  8691  075D  01C2               	clrf	LCDWriteInt@numPlaces
  8692  075E  01C3               	clrf	LCDWriteInt@sign
  8693  075F  3188  2016  3180   	fcall	_LCDWriteInt
  8694                           
  8695                           ;main.c: 317: { gotoXY(46,5); LCDWriteInt(VHoldMode[1],1, 0, 0);};
  8696  0762  3005               	movlw	5
  8697  0763  0020               	movlb	0	; select bank0
  8698  0764  00D9               	movwf	??_main
  8699  0765  0859               	movf	??_main,w
  8700  0766  00F5               	movwf	gotoXY@y
  8701  0767  302E               	movlw	46
  8702  0768  319E  2668  3180   	fcall	_gotoXY
  8703  076B  0020               	movlb	0	; select bank0
  8704  076C  0861               	movf	_VHoldMode+1,w
  8705  076D  00BF               	movwf	LCDWriteInt@value
  8706  076E  01C0               	clrf	LCDWriteInt@value+1
  8707  076F  1BBF               	btfsc	LCDWriteInt@value,7
  8708  0770  03C0               	decf	LCDWriteInt@value+1,f
  8709  0771  01C1               	clrf	LCDWriteInt@fieldLength
  8710  0772  0AC1               	incf	LCDWriteInt@fieldLength,f
  8711  0773  01C2               	clrf	LCDWriteInt@numPlaces
  8712  0774  01C3               	clrf	LCDWriteInt@sign
  8713  0775  3188  2016  3180   	fcall	_LCDWriteInt
  8714                           
  8715                           ;main.c: 318: LCDWriteCharacter(' ');
  8716  0778  3020               	movlw	32
  8717  0779  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8718                           
  8719                           ;main.c: 319: { gotoXY(56,5); LCDWriteInt(batteryTemp,3, 1, 0);};
  8720  077C  3005               	movlw	5
  8721  077D  0020               	movlb	0	; select bank0
  8722  077E  00D9               	movwf	??_main
  8723  077F  0859               	movf	??_main,w
  8724  0780  00F5               	movwf	gotoXY@y
  8725  0781  3038               	movlw	56
  8726  0782  319E  2668  3180   	fcall	_gotoXY
  8727  0785  0020               	movlb	0	; select bank0
  8728  0786  086E               	movf	_batteryTemp+1,w
  8729  0787  00C0               	movwf	LCDWriteInt@value+1
  8730  0788  086D               	movf	_batteryTemp,w
  8731  0789  00BF               	movwf	LCDWriteInt@value
  8732  078A  3003               	movlw	3
  8733  078B  00D9               	movwf	??_main
  8734  078C  0859               	movf	??_main,w
  8735  078D  00C1               	movwf	LCDWriteInt@fieldLength
  8736  078E  01C2               	clrf	LCDWriteInt@numPlaces
  8737  078F  0AC2               	incf	LCDWriteInt@numPlaces,f
  8738  0790  01C3               	clrf	LCDWriteInt@sign
  8739  0791  3188  2016  3180   	fcall	_LCDWriteInt
  8740                           
  8741                           ;main.c: 320: LCDWriteCharacter(123);
  8742  0794  307B               	movlw	123
  8743  0795  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8744                           
  8745                           ;main.c: 321: LCDWriteCharacter('C');
  8746  0798  3043               	movlw	67
  8747  0799  3192  22EC  3180   	fcall	_LCDWriteCharacter
  8748                           
  8749                           ;main.c: 391: if(batteryState[0] > FINISHED)
  8750  079C  3003               	movlw	3
  8751  079D  0020               	movlb	0	; select bank0
  8752  079E  0264               	subwf	_batteryState,w
  8753  079F  1C03               	skipc
  8754  07A0  2FA5               	goto	l3662
  8755                           
  8756                           ;main.c: 392: {
  8757                           ;main.c: 393: cc_cv_mode(0);
  8758  07A1  3000               	movlw	0
  8759  07A2  318D  250C  3180   	fcall	_cc_cv_mode
  8760  07A5                     l3662:	
  8761                           
  8762                           ;main.c: 394: }
  8763                           ;main.c: 395: if(batteryState[1] > FINISHED)
  8764  07A5  3003               	movlw	3
  8765  07A6  0020               	movlb	0	; select bank0
  8766  07A7  0265               	subwf	_batteryState+1,w
  8767  07A8  1C03               	skipc
  8768  07A9  2FAE               	goto	l3666
  8769                           
  8770                           ;main.c: 396: {
  8771                           ;main.c: 397: cc_cv_mode(1);
  8772  07AA  3001               	movlw	1
  8773  07AB  318D  250C  3180   	fcall	_cc_cv_mode
  8774  07AE                     l3666:	
  8775                           
  8776                           ;main.c: 398: }
  8777                           ;main.c: 399: slowLoop=0;
  8778  07AE  0021               	movlb	1	; select bank1
  8779  07AF  01DB               	clrf	main@slowLoop^(0+128)
  8780  07B0  2880               	goto	l3338
  8781  07B1                     __end_of_main:	
  8782                           
  8783                           	psect	text1
  8784  08CF                     __ptext1:	
  8785 ;; *************** function _tempCalc *****************
  8786 ;; Defined at:
  8787 ;;		line 4 in file "tempCalc.c"
  8788 ;; Parameters:    Size  Location     Type
  8789 ;;  analogValue     2   46[BANK0 ] int 
  8790 ;; Auto vars:     Size  Location     Type
  8791 ;;  steinhart       3   54[BANK0 ] float 
  8792 ;;  R               3   48[BANK0 ] float 
  8793 ;; Return value:  Size  Location     Type
  8794 ;;                  2   46[BANK0 ] int 
  8795 ;; Registers used:
  8796 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8797 ;; Tracked objects:
  8798 ;;		On entry : 0/0
  8799 ;;		On exit  : 0/0
  8800 ;;		Unchanged: 0/0
  8801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8802 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8803 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8805 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8806 ;;Total ram usage:       11 bytes
  8807 ;; Hardware stack levels used:    1
  8808 ;; Hardware stack levels required when called:    4
  8809 ;; This function calls:
  8810 ;;		___awtoft
  8811 ;;		___ftadd
  8812 ;;		___ftdiv
  8813 ;;		___ftmul
  8814 ;;		___ftsub
  8815 ;;		___fttol
  8816 ;;		_log
  8817 ;; This function is called by:
  8818 ;;		_main
  8819 ;; This function uses a non-reentrant model
  8820 ;;
  8821                           
  8822                           
  8823                           ;psect for function _tempCalc
  8824  08CF                     _tempCalc:	
  8825                           
  8826                           ;tempCalc.c: 6: float R, steinhart;
  8827                           ;tempCalc.c: 7: R=10030/(1023/(float)analogValue-1);
  8828                           
  8829                           ;incstack = 0
  8830                           ; Regs used in _tempCalc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8831  08CF  3000               	movlw	0
  8832  08D0  0020               	movlb	0	; select bank0
  8833  08D1  00B1               	movwf	___ftadd@f1
  8834  08D2  3080               	movlw	128
  8835  08D3  00B2               	movwf	___ftadd@f1+1
  8836  08D4  30BF               	movlw	191
  8837  08D5  00B3               	movwf	___ftadd@f1+2
  8838  08D6  084F               	movf	tempCalc@analogValue+1,w
  8839  08D7  00FA               	movwf	___awtoft@c+1
  8840  08D8  084E               	movf	tempCalc@analogValue,w
  8841  08D9  00F9               	movwf	___awtoft@c
  8842  08DA  319F  2747  3188   	fcall	___awtoft
  8843  08DD  0879               	movf	?___awtoft,w
  8844  08DE  0020               	movlb	0	; select bank0
  8845  08DF  00A1               	movwf	___ftdiv@f2
  8846  08E0  087A               	movf	?___awtoft+1,w
  8847  08E1  00A2               	movwf	___ftdiv@f2+1
  8848  08E2  087B               	movf	?___awtoft+2,w
  8849  08E3  00A3               	movwf	___ftdiv@f2+2
  8850  08E4  30C0               	movlw	192
  8851  08E5  00A4               	movwf	___ftdiv@f1
  8852  08E6  307F               	movlw	127
  8853  08E7  00A5               	movwf	___ftdiv@f1+1
  8854  08E8  3044               	movlw	68
  8855  08E9  00A6               	movwf	___ftdiv@f1+2
  8856  08EA  3195  25F3  3188   	fcall	___ftdiv
  8857  08ED  0020               	movlb	0	; select bank0
  8858  08EE  0821               	movf	?___ftdiv,w
  8859  08EF  00B4               	movwf	___ftadd@f2
  8860  08F0  0822               	movf	?___ftdiv+1,w
  8861  08F1  00B5               	movwf	___ftadd@f2+1
  8862  08F2  0823               	movf	?___ftdiv+2,w
  8863  08F3  00B6               	movwf	___ftadd@f2+2
  8864  08F4  3189  21B6  3188   	fcall	___ftadd
  8865  08F7  0020               	movlb	0	; select bank0
  8866  08F8  0831               	movf	?___ftadd,w
  8867  08F9  00D3               	movwf	_tempCalc$1308
  8868  08FA  0832               	movf	?___ftadd+1,w
  8869  08FB  00D4               	movwf	_tempCalc$1308+1
  8870  08FC  0833               	movf	?___ftadd+2,w
  8871  08FD  00D5               	movwf	_tempCalc$1308+2
  8872                           
  8873                           ;tempCalc.c: 6: float R, steinhart;
  8874                           ;tempCalc.c: 7: R=10030/(1023/(float)analogValue-1);
  8875  08FE  0853               	movf	_tempCalc$1308,w
  8876  08FF  00A1               	movwf	___ftdiv@f2
  8877  0900  0854               	movf	_tempCalc$1308+1,w
  8878  0901  00A2               	movwf	___ftdiv@f2+1
  8879  0902  0855               	movf	_tempCalc$1308+2,w
  8880  0903  00A3               	movwf	___ftdiv@f2+2
  8881  0904  30B8               	movlw	184
  8882  0905  00A4               	movwf	___ftdiv@f1
  8883  0906  301C               	movlw	28
  8884  0907  00A5               	movwf	___ftdiv@f1+1
  8885  0908  3046               	movlw	70
  8886  0909  00A6               	movwf	___ftdiv@f1+2
  8887  090A  3195  25F3  3188   	fcall	___ftdiv
  8888  090D  0020               	movlb	0	; select bank0
  8889  090E  0821               	movf	?___ftdiv,w
  8890  090F  00D0               	movwf	tempCalc@R
  8891  0910  0822               	movf	?___ftdiv+1,w
  8892  0911  00D1               	movwf	tempCalc@R+1
  8893  0912  0823               	movf	?___ftdiv+2,w
  8894  0913  00D2               	movwf	tempCalc@R+2
  8895                           
  8896                           ;tempCalc.c: 8: steinhart=R/10010;
  8897  0914  3068               	movlw	104
  8898  0915  00A1               	movwf	___ftdiv@f2
  8899  0916  301C               	movlw	28
  8900  0917  00A2               	movwf	___ftdiv@f2+1
  8901  0918  3046               	movlw	70
  8902  0919  00A3               	movwf	___ftdiv@f2+2
  8903  091A  0850               	movf	tempCalc@R,w
  8904  091B  00A4               	movwf	___ftdiv@f1
  8905  091C  0851               	movf	tempCalc@R+1,w
  8906  091D  00A5               	movwf	___ftdiv@f1+1
  8907  091E  0852               	movf	tempCalc@R+2,w
  8908  091F  00A6               	movwf	___ftdiv@f1+2
  8909  0920  3195  25F3  3188   	fcall	___ftdiv
  8910  0923  0020               	movlb	0	; select bank0
  8911  0924  0821               	movf	?___ftdiv,w
  8912  0925  00D6               	movwf	tempCalc@steinhart
  8913  0926  0822               	movf	?___ftdiv+1,w
  8914  0927  00D7               	movwf	tempCalc@steinhart+1
  8915  0928  0823               	movf	?___ftdiv+2,w
  8916  0929  00D8               	movwf	tempCalc@steinhart+2
  8917                           
  8918                           ;tempCalc.c: 9: steinhart=log(steinhart);
  8919  092A  0856               	movf	tempCalc@steinhart,w
  8920  092B  00C8               	movwf	log@x
  8921  092C  0857               	movf	tempCalc@steinhart+1,w
  8922  092D  00C9               	movwf	log@x+1
  8923  092E  0858               	movf	tempCalc@steinhart+2,w
  8924  092F  00CA               	movwf	log@x+2
  8925  0930  3196  269C  3188   	fcall	_log
  8926  0933  0020               	movlb	0	; select bank0
  8927  0934  0848               	movf	?_log,w
  8928  0935  00D6               	movwf	tempCalc@steinhart
  8929  0936  0849               	movf	?_log+1,w
  8930  0937  00D7               	movwf	tempCalc@steinhart+1
  8931  0938  084A               	movf	?_log+2,w
  8932  0939  00D8               	movwf	tempCalc@steinhart+2
  8933                           
  8934                           ;tempCalc.c: 10: steinhart/=3795.3;
  8935  093A  3035               	movlw	53
  8936  093B  00A1               	movwf	___ftdiv@f2
  8937  093C  306D               	movlw	109
  8938  093D  00A2               	movwf	___ftdiv@f2+1
  8939  093E  3045               	movlw	69
  8940  093F  00A3               	movwf	___ftdiv@f2+2
  8941  0940  0856               	movf	tempCalc@steinhart,w
  8942  0941  00A4               	movwf	___ftdiv@f1
  8943  0942  0857               	movf	tempCalc@steinhart+1,w
  8944  0943  00A5               	movwf	___ftdiv@f1+1
  8945  0944  0858               	movf	tempCalc@steinhart+2,w
  8946  0945  00A6               	movwf	___ftdiv@f1+2
  8947  0946  3195  25F3  3188   	fcall	___ftdiv
  8948  0949  0020               	movlb	0	; select bank0
  8949  094A  0821               	movf	?___ftdiv,w
  8950  094B  00D6               	movwf	tempCalc@steinhart
  8951  094C  0822               	movf	?___ftdiv+1,w
  8952  094D  00D7               	movwf	tempCalc@steinhart+1
  8953  094E  0823               	movf	?___ftdiv+2,w
  8954  094F  00D8               	movwf	tempCalc@steinhart+2
  8955                           
  8956                           ;tempCalc.c: 11: steinhart+=1.0/(25+273.15);
  8957  0950  30CF               	movlw	207
  8958  0951  00B1               	movwf	___ftadd@f1
  8959  0952  305B               	movlw	91
  8960  0953  00B2               	movwf	___ftadd@f1+1
  8961  0954  303B               	movlw	59
  8962  0955  00B3               	movwf	___ftadd@f1+2
  8963  0956  0856               	movf	tempCalc@steinhart,w
  8964  0957  00B4               	movwf	___ftadd@f2
  8965  0958  0857               	movf	tempCalc@steinhart+1,w
  8966  0959  00B5               	movwf	___ftadd@f2+1
  8967  095A  0858               	movf	tempCalc@steinhart+2,w
  8968  095B  00B6               	movwf	___ftadd@f2+2
  8969  095C  3189  21B6  3188   	fcall	___ftadd
  8970  095F  0020               	movlb	0	; select bank0
  8971  0960  0831               	movf	?___ftadd,w
  8972  0961  00D6               	movwf	tempCalc@steinhart
  8973  0962  0832               	movf	?___ftadd+1,w
  8974  0963  00D7               	movwf	tempCalc@steinhart+1
  8975  0964  0833               	movf	?___ftadd+2,w
  8976  0965  00D8               	movwf	tempCalc@steinhart+2
  8977                           
  8978                           ;tempCalc.c: 12: steinhart=1.0/steinhart;
  8979  0966  0856               	movf	tempCalc@steinhart,w
  8980  0967  00A1               	movwf	___ftdiv@f2
  8981  0968  0857               	movf	tempCalc@steinhart+1,w
  8982  0969  00A2               	movwf	___ftdiv@f2+1
  8983  096A  0858               	movf	tempCalc@steinhart+2,w
  8984  096B  00A3               	movwf	___ftdiv@f2+2
  8985  096C  3000               	movlw	0
  8986  096D  00A4               	movwf	___ftdiv@f1
  8987  096E  3080               	movlw	128
  8988  096F  00A5               	movwf	___ftdiv@f1+1
  8989  0970  303F               	movlw	63
  8990  0971  00A6               	movwf	___ftdiv@f1+2
  8991  0972  3195  25F3  3188   	fcall	___ftdiv
  8992  0975  0020               	movlb	0	; select bank0
  8993  0976  0821               	movf	?___ftdiv,w
  8994  0977  00D6               	movwf	tempCalc@steinhart
  8995  0978  0822               	movf	?___ftdiv+1,w
  8996  0979  00D7               	movwf	tempCalc@steinhart+1
  8997  097A  0823               	movf	?___ftdiv+2,w
  8998  097B  00D8               	movwf	tempCalc@steinhart+2
  8999                           
  9000                           ;tempCalc.c: 13: steinhart-=273;
  9001  097C  3080               	movlw	128
  9002  097D  00BE               	movwf	___ftsub@f2
  9003  097E  3088               	movlw	136
  9004  097F  00BF               	movwf	___ftsub@f2+1
  9005  0980  3043               	movlw	67
  9006  0981  00C0               	movwf	___ftsub@f2+2
  9007  0982  0856               	movf	tempCalc@steinhart,w
  9008  0983  00C1               	movwf	___ftsub@f1
  9009  0984  0857               	movf	tempCalc@steinhart+1,w
  9010  0985  00C2               	movwf	___ftsub@f1+1
  9011  0986  0858               	movf	tempCalc@steinhart+2,w
  9012  0987  00C3               	movwf	___ftsub@f1+2
  9013  0988  319E  26EB  3188   	fcall	___ftsub
  9014  098B  0020               	movlb	0	; select bank0
  9015  098C  083E               	movf	?___ftsub,w
  9016  098D  00D6               	movwf	tempCalc@steinhart
  9017  098E  083F               	movf	?___ftsub+1,w
  9018  098F  00D7               	movwf	tempCalc@steinhart+1
  9019  0990  0840               	movf	?___ftsub+2,w
  9020  0991  00D8               	movwf	tempCalc@steinhart+2
  9021                           
  9022                           ;tempCalc.c: 15: steinhart*=10;
  9023  0992  3000               	movlw	0
  9024  0993  00A1               	movwf	___ftmul@f1
  9025  0994  3020               	movlw	32
  9026  0995  00A2               	movwf	___ftmul@f1+1
  9027  0996  3041               	movlw	65
  9028  0997  00A3               	movwf	___ftmul@f1+2
  9029  0998  0856               	movf	tempCalc@steinhart,w
  9030  0999  00A4               	movwf	___ftmul@f2
  9031  099A  0857               	movf	tempCalc@steinhart+1,w
  9032  099B  00A5               	movwf	___ftmul@f2+1
  9033  099C  0858               	movf	tempCalc@steinhart+2,w
  9034  099D  00A6               	movwf	___ftmul@f2+2
  9035  099E  3197  274C  3188   	fcall	___ftmul
  9036  09A1  0020               	movlb	0	; select bank0
  9037  09A2  0821               	movf	?___ftmul,w
  9038  09A3  00D6               	movwf	tempCalc@steinhart
  9039  09A4  0822               	movf	?___ftmul+1,w
  9040  09A5  00D7               	movwf	tempCalc@steinhart+1
  9041  09A6  0823               	movf	?___ftmul+2,w
  9042  09A7  00D8               	movwf	tempCalc@steinhart+2
  9043                           
  9044                           ;tempCalc.c: 18: return (int16_t)steinhart;
  9045  09A8  0856               	movf	tempCalc@steinhart,w
  9046  09A9  00B1               	movwf	___fttol@f1
  9047  09AA  0857               	movf	tempCalc@steinhart+1,w
  9048  09AB  00B2               	movwf	___fttol@f1+1
  9049  09AC  0858               	movf	tempCalc@steinhart+2,w
  9050  09AD  00B3               	movwf	___fttol@f1+2
  9051  09AE  3195  256C         	fcall	___fttol
  9052  09B0  0020               	movlb	0	; select bank0
  9053  09B1  0832               	movf	?___fttol+1,w
  9054  09B2  00CF               	movwf	?_tempCalc+1
  9055  09B3  0831               	movf	?___fttol,w
  9056  09B4  00CE               	movwf	?_tempCalc
  9057  09B5  0008               	return
  9058  09B6                     __end_of_tempCalc:	
  9059                           
  9060                           	psect	text2
  9061  169C                     __ptext2:	
  9062 ;; *************** function _log *****************
  9063 ;; Defined at:
  9064 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
  9065 ;; Parameters:    Size  Location     Type
  9066 ;;  x               3   40[BANK0 ] int 
  9067 ;; Auto vars:     Size  Location     Type
  9068 ;;  exponent        2   44[BANK0 ] int 
  9069 ;; Return value:  Size  Location     Type
  9070 ;;                  3   40[BANK0 ] int 
  9071 ;; Registers used:
  9072 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9073 ;; Tracked objects:
  9074 ;;		On entry : 0/0
  9075 ;;		On exit  : 0/0
  9076 ;;		Unchanged: 0/0
  9077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9078 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9079 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9080 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9081 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9082 ;;Total ram usage:        6 bytes
  9083 ;; Hardware stack levels used:    1
  9084 ;; Hardware stack levels required when called:    3
  9085 ;; This function calls:
  9086 ;;		___awtoft
  9087 ;;		___ftadd
  9088 ;;		___ftge
  9089 ;;		___ftmul
  9090 ;;		_eval_poly
  9091 ;;		_frexp
  9092 ;; This function is called by:
  9093 ;;		_tempCalc
  9094 ;; This function uses a non-reentrant model
  9095 ;;
  9096                           
  9097                           
  9098                           ;psect for function _log
  9099  169C                     _log:	
  9100                           
  9101                           ;incstack = 0
  9102                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9103  169C  0020               	movlb	0	; select bank0
  9104  169D  0848               	movf	log@x,w
  9105  169E  00B1               	movwf	___ftge@ff1
  9106  169F  0849               	movf	log@x+1,w
  9107  16A0  00B2               	movwf	___ftge@ff1+1
  9108  16A1  084A               	movf	log@x+2,w
  9109  16A2  00B3               	movwf	___ftge@ff1+2
  9110  16A3  3000               	movlw	0
  9111  16A4  00B4               	movwf	___ftge@ff2
  9112  16A5  3000               	movlw	0
  9113  16A6  00B5               	movwf	___ftge@ff2+1
  9114  16A7  3000               	movlw	0
  9115  16A8  00B6               	movwf	___ftge@ff2+2
  9116  16A9  3192  221A  3196   	fcall	___ftge
  9117  16AC  1803               	btfsc	3,0
  9118  16AD  2EBB               	goto	l2836
  9119  16AE  3021               	movlw	33
  9120  16AF  0021               	movlb	1	; select bank1
  9121  16B0  00C0               	movwf	_errno^(0+128)
  9122  16B1  3000               	movlw	0
  9123  16B2  00C1               	movwf	(_errno^(0+128)+1)
  9124  16B3  3000               	movlw	0
  9125  16B4  0020               	movlb	0	; select bank0
  9126  16B5  00C8               	movwf	?_log
  9127  16B6  3000               	movlw	0
  9128  16B7  00C9               	movwf	?_log+1
  9129  16B8  3000               	movlw	0
  9130  16B9  00CA               	movwf	?_log+2
  9131  16BA  0008               	return
  9132  16BB                     l2836:	
  9133  16BB  0020               	movlb	0	; select bank0
  9134  16BC  084A               	movf	log@x+2,w
  9135  16BD  0449               	iorwf	log@x+1,w
  9136  16BE  0448               	iorwf	log@x,w
  9137  16BF  1D03               	skipz
  9138  16C0  2ECE               	goto	l2842
  9139  16C1  3022               	movlw	34
  9140  16C2  0021               	movlb	1	; select bank1
  9141  16C3  00C0               	movwf	_errno^(0+128)
  9142  16C4  3000               	movlw	0
  9143  16C5  00C1               	movwf	(_errno^(0+128)+1)
  9144  16C6  3000               	movlw	0
  9145  16C7  0020               	movlb	0	; select bank0
  9146  16C8  00C8               	movwf	?_log
  9147  16C9  3000               	movlw	0
  9148  16CA  00C9               	movwf	?_log+1
  9149  16CB  3000               	movlw	0
  9150  16CC  00CA               	movwf	?_log+2
  9151  16CD  0008               	return
  9152  16CE                     l2842:	
  9153  16CE  3000               	movlw	0
  9154  16CF  00B1               	movwf	___ftadd@f1
  9155  16D0  3080               	movlw	128
  9156  16D1  00B2               	movwf	___ftadd@f1+1
  9157  16D2  30BF               	movlw	191
  9158  16D3  00B3               	movwf	___ftadd@f1+2
  9159  16D4  3000               	movlw	0
  9160  16D5  00A1               	movwf	___ftmul@f1
  9161  16D6  3000               	movlw	0
  9162  16D7  00A2               	movwf	___ftmul@f1+1
  9163  16D8  3040               	movlw	64
  9164  16D9  00A3               	movwf	___ftmul@f1+2
  9165  16DA  304C               	movlw	(low (log@exponent| 0))& (0+255)
  9166  16DB  00CB               	movwf	??_log
  9167  16DC  084B               	movf	??_log,w
  9168  16DD  00F3               	movwf	frexp@eptr
  9169  16DE  0848               	movf	log@x,w
  9170  16DF  00F0               	movwf	frexp@value
  9171  16E0  0849               	movf	log@x+1,w
  9172  16E1  00F1               	movwf	frexp@value+1
  9173  16E2  084A               	movf	log@x+2,w
  9174  16E3  00F2               	movwf	frexp@value+2
  9175  16E4  3191  21DF  3196   	fcall	_frexp
  9176  16E7  0870               	movf	?_frexp,w
  9177  16E8  0020               	movlb	0	; select bank0
  9178  16E9  00A4               	movwf	___ftmul@f2
  9179  16EA  0871               	movf	?_frexp+1,w
  9180  16EB  00A5               	movwf	___ftmul@f2+1
  9181  16EC  0872               	movf	?_frexp+2,w
  9182  16ED  00A6               	movwf	___ftmul@f2+2
  9183  16EE  3197  274C  3196   	fcall	___ftmul
  9184  16F1  0020               	movlb	0	; select bank0
  9185  16F2  0821               	movf	?___ftmul,w
  9186  16F3  00B4               	movwf	___ftadd@f2
  9187  16F4  0822               	movf	?___ftmul+1,w
  9188  16F5  00B5               	movwf	___ftadd@f2+1
  9189  16F6  0823               	movf	?___ftmul+2,w
  9190  16F7  00B6               	movwf	___ftadd@f2+2
  9191  16F8  3189  21B6  3196   	fcall	___ftadd
  9192  16FB  0020               	movlb	0	; select bank0
  9193  16FC  0831               	movf	?___ftadd,w
  9194  16FD  00C8               	movwf	log@x
  9195  16FE  0832               	movf	?___ftadd+1,w
  9196  16FF  00C9               	movwf	log@x+1
  9197  1700  0833               	movf	?___ftadd+2,w
  9198  1701  00CA               	movwf	log@x+2
  9199  1702  30FF               	movlw	255
  9200  1703  07CC               	addwf	log@exponent,f
  9201  1704  30FF               	movlw	255
  9202  1705  3DCD               	addwfc	log@exponent+1,f
  9203  1706  0848               	movf	log@x,w
  9204  1707  00BE               	movwf	eval_poly@x
  9205  1708  0849               	movf	log@x+1,w
  9206  1709  00BF               	movwf	eval_poly@x+1
  9207  170A  084A               	movf	log@x+2,w
  9208  170B  00C0               	movwf	eval_poly@x+2
  9209  170C  3000               	movlw	low (log@coeff| (0+32768))
  9210  170D  00C1               	movwf	eval_poly@d
  9211  170E  3098               	movlw	high (log@coeff| (0+32768))
  9212  170F  00C2               	movwf	eval_poly@d+1
  9213  1710  3008               	movlw	8
  9214  1711  00C3               	movwf	eval_poly@n
  9215  1712  3000               	movlw	0
  9216  1713  00C4               	movwf	eval_poly@n+1
  9217  1714  3193  2340  3196   	fcall	_eval_poly
  9218  1717  0020               	movlb	0	; select bank0
  9219  1718  083E               	movf	?_eval_poly,w
  9220  1719  00C8               	movwf	log@x
  9221  171A  083F               	movf	?_eval_poly+1,w
  9222  171B  00C9               	movwf	log@x+1
  9223  171C  0840               	movf	?_eval_poly+2,w
  9224  171D  00CA               	movwf	log@x+2
  9225  171E  0848               	movf	log@x,w
  9226  171F  00B1               	movwf	___ftadd@f1
  9227  1720  0849               	movf	log@x+1,w
  9228  1721  00B2               	movwf	___ftadd@f1+1
  9229  1722  084A               	movf	log@x+2,w
  9230  1723  00B3               	movwf	___ftadd@f1+2
  9231  1724  3072               	movlw	114
  9232  1725  00A1               	movwf	___ftmul@f1
  9233  1726  3031               	movlw	49
  9234  1727  00A2               	movwf	___ftmul@f1+1
  9235  1728  303F               	movlw	63
  9236  1729  00A3               	movwf	___ftmul@f1+2
  9237  172A  084D               	movf	log@exponent+1,w
  9238  172B  00FA               	movwf	___awtoft@c+1
  9239  172C  084C               	movf	log@exponent,w
  9240  172D  00F9               	movwf	___awtoft@c
  9241  172E  319F  2747  3196   	fcall	___awtoft
  9242  1731  0879               	movf	?___awtoft,w
  9243  1732  0020               	movlb	0	; select bank0
  9244  1733  00A4               	movwf	___ftmul@f2
  9245  1734  087A               	movf	?___awtoft+1,w
  9246  1735  00A5               	movwf	___ftmul@f2+1
  9247  1736  087B               	movf	?___awtoft+2,w
  9248  1737  00A6               	movwf	___ftmul@f2+2
  9249  1738  3197  274C  3196   	fcall	___ftmul
  9250  173B  0020               	movlb	0	; select bank0
  9251  173C  0821               	movf	?___ftmul,w
  9252  173D  00B4               	movwf	___ftadd@f2
  9253  173E  0822               	movf	?___ftmul+1,w
  9254  173F  00B5               	movwf	___ftadd@f2+1
  9255  1740  0823               	movf	?___ftmul+2,w
  9256  1741  00B6               	movwf	___ftadd@f2+2
  9257  1742  3189  21B6         	fcall	___ftadd
  9258  1744  0020               	movlb	0	; select bank0
  9259  1745  0831               	movf	?___ftadd,w
  9260  1746  00C8               	movwf	?_log
  9261  1747  0832               	movf	?___ftadd+1,w
  9262  1748  00C9               	movwf	?_log+1
  9263  1749  0833               	movf	?___ftadd+2,w
  9264  174A  00CA               	movwf	?_log+2
  9265  174B  0008               	return
  9266  174C                     __end_of_log:	
  9267                           
  9268                           	psect	text3
  9269  11DF                     __ptext3:	
  9270 ;; *************** function _frexp *****************
  9271 ;; Defined at:
  9272 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  9273 ;; Parameters:    Size  Location     Type
  9274 ;;  value           3    0[COMMON] int 
  9275 ;;  eptr            1    3[COMMON] PTR int 
  9276 ;;		 -> log@exponent(2), 
  9277 ;; Auto vars:     Size  Location     Type
  9278 ;;		None
  9279 ;; Return value:  Size  Location     Type
  9280 ;;                  3    0[COMMON] PTR int 
  9281 ;; Registers used:
  9282 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9283 ;; Tracked objects:
  9284 ;;		On entry : 0/0
  9285 ;;		On exit  : 0/0
  9286 ;;		Unchanged: 0/0
  9287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9288 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9290 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9291 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9292 ;;Total ram usage:        6 bytes
  9293 ;; Hardware stack levels used:    1
  9294 ;; This function calls:
  9295 ;;		Nothing
  9296 ;; This function is called by:
  9297 ;;		_log
  9298 ;; This function uses a non-reentrant model
  9299 ;;
  9300                           
  9301                           
  9302                           ;psect for function _frexp
  9303  11DF                     _frexp:	
  9304                           
  9305                           ;incstack = 0
  9306                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  9307  11DF  0872               	movf	frexp@value+2,w
  9308  11E0  0471               	iorwf	frexp@value+1,w
  9309  11E1  0470               	iorwf	frexp@value,w
  9310  11E2  1D03               	skipz
  9311  11E3  29F1               	goto	l2632
  9312  11E4  0873               	movf	frexp@eptr,w
  9313  11E5  0086               	movwf	6
  9314  11E6  0187               	clrf	7
  9315  11E7  3000               	movlw	0
  9316  11E8  3FC0               	movwi [0]fsr1
  9317  11E9  3FC1               	movwi [1]fsr1
  9318  11EA  3000               	movlw	0
  9319  11EB  00F0               	movwf	?_frexp
  9320  11EC  3000               	movlw	0
  9321  11ED  00F1               	movwf	?_frexp+1
  9322  11EE  3000               	movlw	0
  9323  11EF  00F2               	movwf	?_frexp+2
  9324  11F0  0008               	return
  9325  11F1                     l2632:	
  9326  11F1  0872               	movf	frexp@value+2,w
  9327  11F2  397F               	andlw	127
  9328  11F3  00F4               	movwf	??_frexp
  9329  11F4  01F5               	clrf	??_frexp+1
  9330  11F5  35F4               	lslf	??_frexp,f
  9331  11F6  0DF5               	rlf	??_frexp+1,f
  9332  11F7  0873               	movf	frexp@eptr,w
  9333  11F8  0086               	movwf	6
  9334  11F9  0187               	clrf	7
  9335  11FA  0874               	movf	??_frexp,w
  9336  11FB  3FC0               	movwi [0]fsr1
  9337  11FC  0875               	movf	??_frexp+1,w
  9338  11FD  3FC1               	movwi [1]fsr1
  9339  11FE  0D71               	rlf	frexp@value+1,w
  9340  11FF  0D71               	rlf	frexp@value+1,w
  9341  1200  3901               	andlw	1
  9342  1201  00F4               	movwf	??_frexp
  9343  1202  01F5               	clrf	??_frexp+1
  9344  1203  0873               	movf	frexp@eptr,w
  9345  1204  0086               	movwf	6
  9346  1205  0187               	clrf	7
  9347  1206  0874               	movf	??_frexp,w
  9348  1207  0481               	iorwf	1,f
  9349  1208  3141               	addfsr 1,1
  9350  1209  0875               	movf	??_frexp+1,w
  9351  120A  0481               	iorwf	1,f
  9352  120B  0873               	movf	frexp@eptr,w
  9353  120C  0086               	movwf	6
  9354  120D  0187               	clrf	7
  9355  120E  3082               	movlw	130
  9356  120F  0781               	addwf	1,f
  9357  1210  3141               	addfsr 1,1
  9358  1211  30FF               	movlw	255
  9359  1212  3D81               	addwfc	1,f
  9360  1213  317F               	addfsr 1,-1
  9361  1214  0872               	movf	frexp@value+2,w
  9362  1215  3980               	andlw	-128
  9363  1216  383F               	iorlw	63
  9364  1217  00F2               	movwf	frexp@value+2
  9365  1218  13F1               	bcf	frexp@value+1,7
  9366  1219  0008               	return
  9367  121A                     __end_of_frexp:	
  9368                           
  9369                           	psect	text4
  9370  1340                     __ptext4:	
  9371 ;; *************** function _eval_poly *****************
  9372 ;; Defined at:
  9373 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  9374 ;; Parameters:    Size  Location     Type
  9375 ;;  x               3   30[BANK0 ] PTR int 
  9376 ;;  d               2   33[BANK0 ] PTR const 
  9377 ;;		 -> log@coeff(27), 
  9378 ;;  n               2   35[BANK0 ] int 
  9379 ;; Auto vars:     Size  Location     Type
  9380 ;;  res             3   37[BANK0 ] int 
  9381 ;; Return value:  Size  Location     Type
  9382 ;;                  3   30[BANK0 ] int 
  9383 ;; Registers used:
  9384 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9385 ;; Tracked objects:
  9386 ;;		On entry : 0/0
  9387 ;;		On exit  : 0/0
  9388 ;;		Unchanged: 0/0
  9389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9390 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9391 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9393 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9394 ;;Total ram usage:       10 bytes
  9395 ;; Hardware stack levels used:    1
  9396 ;; Hardware stack levels required when called:    2
  9397 ;; This function calls:
  9398 ;;		___ftadd
  9399 ;;		___ftmul
  9400 ;;		___wmul
  9401 ;; This function is called by:
  9402 ;;		_log
  9403 ;; This function uses a non-reentrant model
  9404 ;;
  9405                           
  9406                           
  9407                           ;psect for function _eval_poly
  9408  1340                     _eval_poly:	
  9409                           
  9410                           ;incstack = 0
  9411                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9412  1340  0020               	movlb	0	; select bank0
  9413  1341  0844               	movf	eval_poly@n+1,w
  9414  1342  00F1               	movwf	___wmul@multiplier+1
  9415  1343  0843               	movf	eval_poly@n,w
  9416  1344  00F0               	movwf	___wmul@multiplier
  9417  1345  3003               	movlw	3
  9418  1346  00F2               	movwf	___wmul@multiplicand
  9419  1347  3000               	movlw	0
  9420  1348  00F3               	movwf	___wmul@multiplicand+1
  9421  1349  319E  26D0  3193   	fcall	___wmul
  9422  134C  0020               	movlb	0	; select bank0
  9423  134D  0841               	movf	eval_poly@d,w
  9424  134E  0770               	addwf	?___wmul,w
  9425  134F  0084               	movwf	4
  9426  1350  0842               	movf	eval_poly@d+1,w
  9427  1351  3D71               	addwfc	?___wmul+1,w
  9428  1352  0085               	movwf	5
  9429  1353  3F00               	moviw [0]fsr0
  9430  1354  00C5               	movwf	eval_poly@res
  9431  1355  3F01               	moviw [1]fsr0
  9432  1356  00C6               	movwf	eval_poly@res+1
  9433  1357  3F02               	moviw [2]fsr0
  9434  1358                     L6:	
  9435  1358  00C7               	movwf	eval_poly@res+2
  9436  1359  0843               	movf	eval_poly@n,w
  9437  135A  0444               	iorwf	eval_poly@n+1,w
  9438  135B  1903               	btfsc	3,2
  9439  135C  2B99               	goto	l2650
  9440  135D  30FF               	movlw	255
  9441  135E  07C3               	addwf	eval_poly@n,f
  9442  135F  30FF               	movlw	255
  9443  1360  3DC4               	addwfc	eval_poly@n+1,f
  9444  1361  0844               	movf	eval_poly@n+1,w
  9445  1362  00F1               	movwf	___wmul@multiplier+1
  9446  1363  0843               	movf	eval_poly@n,w
  9447  1364  00F0               	movwf	___wmul@multiplier
  9448  1365  3003               	movlw	3
  9449  1366  00F2               	movwf	___wmul@multiplicand
  9450  1367  3000               	movlw	0
  9451  1368  00F3               	movwf	___wmul@multiplicand+1
  9452  1369  319E  26D0  3193   	fcall	___wmul
  9453  136C  0020               	movlb	0	; select bank0
  9454  136D  0841               	movf	eval_poly@d,w
  9455  136E  0770               	addwf	?___wmul,w
  9456  136F  0084               	movwf	4
  9457  1370  0842               	movf	eval_poly@d+1,w
  9458  1371  3D71               	addwfc	?___wmul+1,w
  9459  1372  0085               	movwf	5
  9460  1373  3F00               	moviw [0]fsr0
  9461  1374  00B1               	movwf	___ftadd@f1
  9462  1375  3F01               	moviw [1]fsr0
  9463  1376  00B2               	movwf	___ftadd@f1+1
  9464  1377  3F02               	moviw [2]fsr0
  9465  1378  00B3               	movwf	___ftadd@f1+2
  9466  1379  0845               	movf	eval_poly@res,w
  9467  137A  00A1               	movwf	___ftmul@f1
  9468  137B  0846               	movf	eval_poly@res+1,w
  9469  137C  00A2               	movwf	___ftmul@f1+1
  9470  137D  0847               	movf	eval_poly@res+2,w
  9471  137E  00A3               	movwf	___ftmul@f1+2
  9472  137F  083E               	movf	eval_poly@x,w
  9473  1380  00A4               	movwf	___ftmul@f2
  9474  1381  083F               	movf	eval_poly@x+1,w
  9475  1382  00A5               	movwf	___ftmul@f2+1
  9476  1383  0840               	movf	eval_poly@x+2,w
  9477  1384  00A6               	movwf	___ftmul@f2+2
  9478  1385  3197  274C  3193   	fcall	___ftmul
  9479  1388  0020               	movlb	0	; select bank0
  9480  1389  0821               	movf	?___ftmul,w
  9481  138A  00B4               	movwf	___ftadd@f2
  9482  138B  0822               	movf	?___ftmul+1,w
  9483  138C  00B5               	movwf	___ftadd@f2+1
  9484  138D  0823               	movf	?___ftmul+2,w
  9485  138E  00B6               	movwf	___ftadd@f2+2
  9486  138F  3189  21B6  3193   	fcall	___ftadd
  9487  1392  0020               	movlb	0	; select bank0
  9488  1393  0831               	movf	?___ftadd,w
  9489  1394  00C5               	movwf	eval_poly@res
  9490  1395  0832               	movf	?___ftadd+1,w
  9491  1396  00C6               	movwf	eval_poly@res+1
  9492  1397  0833               	movf	?___ftadd+2,w
  9493  1398  2B58               	goto	L6
  9494  1399                     l2650:	
  9495  1399  0845               	movf	eval_poly@res,w
  9496  139A  00BE               	movwf	?_eval_poly
  9497  139B  0846               	movf	eval_poly@res+1,w
  9498  139C  00BF               	movwf	?_eval_poly+1
  9499  139D  0847               	movf	eval_poly@res+2,w
  9500  139E  00C0               	movwf	?_eval_poly+2
  9501  139F  0008               	return
  9502  13A0                     __end_of_eval_poly:	
  9503                           
  9504                           	psect	text5
  9505  121A                     __ptext5:	
  9506 ;; *************** function ___ftge *****************
  9507 ;; Defined at:
  9508 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  9509 ;; Parameters:    Size  Location     Type
  9510 ;;  ff1             3   17[BANK0 ] float 
  9511 ;;  ff2             3   20[BANK0 ] float 
  9512 ;; Auto vars:     Size  Location     Type
  9513 ;;		None
  9514 ;; Return value:  Size  Location     Type
  9515 ;;		None               void
  9516 ;; Registers used:
  9517 ;;		wreg, status,2, status,0
  9518 ;; Tracked objects:
  9519 ;;		On entry : 0/0
  9520 ;;		On exit  : 0/0
  9521 ;;		Unchanged: 0/0
  9522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9523 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9525 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9526 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9527 ;;Total ram usage:        9 bytes
  9528 ;; Hardware stack levels used:    1
  9529 ;; This function calls:
  9530 ;;		Nothing
  9531 ;; This function is called by:
  9532 ;;		_main
  9533 ;;		_log
  9534 ;; This function uses a non-reentrant model
  9535 ;;
  9536                           
  9537                           
  9538                           ;psect for function ___ftge
  9539  121A                     ___ftge:	
  9540                           
  9541                           ;incstack = 0
  9542                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  9543  121A  0020               	movlb	0	; select bank0
  9544  121B  1FB3               	btfss	___ftge@ff1+2,7
  9545  121C  2A31               	goto	l2566
  9546  121D  0931               	comf	___ftge@ff1,w
  9547  121E  00B7               	movwf	??___ftge
  9548  121F  0932               	comf	___ftge@ff1+1,w
  9549  1220  00B8               	movwf	??___ftge+1
  9550  1221  0933               	comf	___ftge@ff1+2,w
  9551  1222  00B9               	movwf	??___ftge+2
  9552  1223  0AB7               	incf	??___ftge,f
  9553  1224  1903               	skipnz
  9554  1225  0AB8               	incf	??___ftge+1,f
  9555  1226  1903               	skipnz
  9556  1227  0AB9               	incf	??___ftge+2,f
  9557  1228  3000               	movlw	0
  9558  1229  0737               	addwf	??___ftge,w
  9559  122A  00B1               	movwf	___ftge@ff1
  9560  122B  3000               	movlw	0
  9561  122C  3D38               	addwfc	??___ftge+1,w
  9562  122D  00B2               	movwf	___ftge@ff1+1
  9563  122E  3080               	movlw	128
  9564  122F  3D39               	addwfc	??___ftge+2,w
  9565  1230  00B3               	movwf	___ftge@ff1+2
  9566  1231                     l2566:	
  9567  1231  1FB6               	btfss	___ftge@ff2+2,7
  9568  1232  2A47               	goto	l2570
  9569  1233  0934               	comf	___ftge@ff2,w
  9570  1234  00B7               	movwf	??___ftge
  9571  1235  0935               	comf	___ftge@ff2+1,w
  9572  1236  00B8               	movwf	??___ftge+1
  9573  1237  0936               	comf	___ftge@ff2+2,w
  9574  1238  00B9               	movwf	??___ftge+2
  9575  1239  0AB7               	incf	??___ftge,f
  9576  123A  1903               	skipnz
  9577  123B  0AB8               	incf	??___ftge+1,f
  9578  123C  1903               	skipnz
  9579  123D  0AB9               	incf	??___ftge+2,f
  9580  123E  3000               	movlw	0
  9581  123F  0737               	addwf	??___ftge,w
  9582  1240  00B4               	movwf	___ftge@ff2
  9583  1241  3000               	movlw	0
  9584  1242  3D38               	addwfc	??___ftge+1,w
  9585  1243  00B5               	movwf	___ftge@ff2+1
  9586  1244  3080               	movlw	128
  9587  1245  3D39               	addwfc	??___ftge+2,w
  9588  1246  00B6               	movwf	___ftge@ff2+2
  9589  1247                     l2570:	
  9590  1247  3080               	movlw	128
  9591  1248  06B3               	xorwf	___ftge@ff1+2,f
  9592  1249  3080               	movlw	128
  9593  124A  06B6               	xorwf	___ftge@ff2+2,f
  9594  124B  0836               	movf	___ftge@ff2+2,w
  9595  124C  0233               	subwf	___ftge@ff1+2,w
  9596  124D  1D03               	skipz
  9597  124E  0008               	return
  9598  124F  0835               	movf	___ftge@ff2+1,w
  9599  1250  0232               	subwf	___ftge@ff1+1,w
  9600  1251  1D03               	skipz
  9601  1252  0008               	return
  9602  1253  0834               	movf	___ftge@ff2,w
  9603  1254  0231               	subwf	___ftge@ff1,w
  9604  1255  0008               	return
  9605  1256                     __end_of___ftge:	
  9606                           
  9607                           	psect	text6
  9608  1EEB                     __ptext6:	
  9609 ;; *************** function ___ftsub *****************
  9610 ;; Defined at:
  9611 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  9612 ;; Parameters:    Size  Location     Type
  9613 ;;  f2              3   30[BANK0 ] float 
  9614 ;;  f1              3   33[BANK0 ] float 
  9615 ;; Auto vars:     Size  Location     Type
  9616 ;;		None
  9617 ;; Return value:  Size  Location     Type
  9618 ;;                  3   30[BANK0 ] float 
  9619 ;; Registers used:
  9620 ;;		wreg, status,2, status,0, pclath, cstack
  9621 ;; Tracked objects:
  9622 ;;		On entry : 0/0
  9623 ;;		On exit  : 0/0
  9624 ;;		Unchanged: 0/0
  9625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9626 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9629 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9630 ;;Total ram usage:        6 bytes
  9631 ;; Hardware stack levels used:    1
  9632 ;; Hardware stack levels required when called:    2
  9633 ;; This function calls:
  9634 ;;		___ftadd
  9635 ;; This function is called by:
  9636 ;;		_tempCalc
  9637 ;; This function uses a non-reentrant model
  9638 ;;
  9639                           
  9640                           
  9641                           ;psect for function ___ftsub
  9642  1EEB                     ___ftsub:	
  9643                           
  9644                           ;incstack = 0
  9645                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9646  1EEB  0020               	movlb	0	; select bank0
  9647  1EEC  0840               	movf	___ftsub@f2+2,w
  9648  1EED  043F               	iorwf	___ftsub@f2+1,w
  9649  1EEE  043E               	iorwf	___ftsub@f2,w
  9650  1EEF  1903               	skipnz
  9651  1EF0  2EF3               	goto	l2996
  9652  1EF1  3080               	movlw	128
  9653  1EF2  06C0               	xorwf	___ftsub@f2+2,f
  9654  1EF3                     l2996:	
  9655  1EF3  0841               	movf	___ftsub@f1,w
  9656  1EF4  00B1               	movwf	___ftadd@f1
  9657  1EF5  0842               	movf	___ftsub@f1+1,w
  9658  1EF6  00B2               	movwf	___ftadd@f1+1
  9659  1EF7  0843               	movf	___ftsub@f1+2,w
  9660  1EF8  00B3               	movwf	___ftadd@f1+2
  9661  1EF9  083E               	movf	___ftsub@f2,w
  9662  1EFA  00B4               	movwf	___ftadd@f2
  9663  1EFB  083F               	movf	___ftsub@f2+1,w
  9664  1EFC  00B5               	movwf	___ftadd@f2+1
  9665  1EFD  0840               	movf	___ftsub@f2+2,w
  9666  1EFE  00B6               	movwf	___ftadd@f2+2
  9667  1EFF  3189  21B6         	fcall	___ftadd
  9668  1F01  0020               	movlb	0	; select bank0
  9669  1F02  0831               	movf	?___ftadd,w
  9670  1F03  00BE               	movwf	?___ftsub
  9671  1F04  0832               	movf	?___ftadd+1,w
  9672  1F05  00BF               	movwf	?___ftsub+1
  9673  1F06  0833               	movf	?___ftadd+2,w
  9674  1F07  00C0               	movwf	?___ftsub+2
  9675  1F08  0008               	return
  9676  1F09                     __end_of___ftsub:	
  9677                           
  9678                           	psect	text7
  9679  09B6                     __ptext7:	
  9680 ;; *************** function ___ftadd *****************
  9681 ;; Defined at:
  9682 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  9683 ;; Parameters:    Size  Location     Type
  9684 ;;  f1              3   17[BANK0 ] float 
  9685 ;;  f2              3   20[BANK0 ] float 
  9686 ;; Auto vars:     Size  Location     Type
  9687 ;;  exp1            1   29[BANK0 ] unsigned char 
  9688 ;;  exp2            1   28[BANK0 ] unsigned char 
  9689 ;;  sign            1   27[BANK0 ] unsigned char 
  9690 ;; Return value:  Size  Location     Type
  9691 ;;                  3   17[BANK0 ] float 
  9692 ;; Registers used:
  9693 ;;		wreg, status,2, status,0, pclath, cstack
  9694 ;; Tracked objects:
  9695 ;;		On entry : 0/0
  9696 ;;		On exit  : 0/0
  9697 ;;		Unchanged: 0/0
  9698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9699 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9700 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9701 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9702 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9703 ;;Total ram usage:       13 bytes
  9704 ;; Hardware stack levels used:    1
  9705 ;; Hardware stack levels required when called:    1
  9706 ;; This function calls:
  9707 ;;		___ftpack
  9708 ;; This function is called by:
  9709 ;;		_tempCalc
  9710 ;;		___ftsub
  9711 ;;		_log
  9712 ;;		_eval_poly
  9713 ;; This function uses a non-reentrant model
  9714 ;;
  9715                           
  9716                           
  9717                           ;psect for function ___ftadd
  9718  09B6                     ___ftadd:	
  9719                           
  9720                           ;incstack = 0
  9721                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9722  09B6  0020               	movlb	0	; select bank0
  9723  09B7  0831               	movf	___ftadd@f1,w
  9724  09B8  00B7               	movwf	??___ftadd
  9725  09B9  0832               	movf	___ftadd@f1+1,w
  9726  09BA  00B8               	movwf	??___ftadd+1
  9727  09BB  0833               	movf	___ftadd@f1+2,w
  9728  09BC  00B9               	movwf	??___ftadd+2
  9729  09BD  1003               	clrc
  9730  09BE  0D38               	rlf	??___ftadd+1,w
  9731  09BF  0D39               	rlf	??___ftadd+2,w
  9732  09C0  00BA               	movwf	??___ftadd+3
  9733  09C1  083A               	movf	??___ftadd+3,w
  9734  09C2  00BD               	movwf	___ftadd@exp1
  9735  09C3  0834               	movf	___ftadd@f2,w
  9736  09C4  00B7               	movwf	??___ftadd
  9737  09C5  0835               	movf	___ftadd@f2+1,w
  9738  09C6  00B8               	movwf	??___ftadd+1
  9739  09C7  0836               	movf	___ftadd@f2+2,w
  9740  09C8  00B9               	movwf	??___ftadd+2
  9741  09C9  1003               	clrc
  9742  09CA  0D38               	rlf	??___ftadd+1,w
  9743  09CB  0D39               	rlf	??___ftadd+2,w
  9744  09CC  00BA               	movwf	??___ftadd+3
  9745  09CD  083A               	movf	??___ftadd+3,w
  9746  09CE  00BC               	movwf	___ftadd@exp2
  9747  09CF  083D               	movf	___ftadd@exp1,w
  9748  09D0  1903               	btfsc	3,2
  9749  09D1  29DE               	goto	l2434
  9750  09D2  083C               	movf	___ftadd@exp2,w
  9751  09D3  023D               	subwf	___ftadd@exp1,w
  9752  09D4  1803               	skipnc
  9753  09D5  29E5               	goto	l2438
  9754  09D6  033D               	decf	___ftadd@exp1,w
  9755  09D7  3AFF               	xorlw	255
  9756  09D8  073C               	addwf	___ftadd@exp2,w
  9757  09D9  00B7               	movwf	??___ftadd
  9758  09DA  3019               	movlw	25
  9759  09DB  0237               	subwf	??___ftadd,w
  9760  09DC  1C03               	skipc
  9761  09DD  29E5               	goto	l2438
  9762  09DE                     l2434:	
  9763  09DE  0834               	movf	___ftadd@f2,w
  9764  09DF  00B1               	movwf	?___ftadd
  9765  09E0  0835               	movf	___ftadd@f2+1,w
  9766  09E1  00B2               	movwf	?___ftadd+1
  9767  09E2  0836               	movf	___ftadd@f2+2,w
  9768  09E3  00B3               	movwf	?___ftadd+2
  9769  09E4  0008               	return
  9770  09E5                     l2438:	
  9771  09E5  083C               	movf	___ftadd@exp2,w
  9772  09E6  1903               	btfsc	3,2
  9773  09E7  0008               	return
  9774  09E8  083D               	movf	___ftadd@exp1,w
  9775  09E9  023C               	subwf	___ftadd@exp2,w
  9776  09EA  1803               	skipnc
  9777  09EB  29F4               	goto	l2444
  9778  09EC  033C               	decf	___ftadd@exp2,w
  9779  09ED  3AFF               	xorlw	255
  9780  09EE  073D               	addwf	___ftadd@exp1,w
  9781  09EF  00B7               	movwf	??___ftadd
  9782  09F0  3019               	movlw	25
  9783  09F1  0237               	subwf	??___ftadd,w
  9784  09F2  1803               	btfsc	3,0
  9785  09F3  0008               	return
  9786  09F4                     l2444:	
  9787  09F4  3006               	movlw	6
  9788  09F5  00B7               	movwf	??___ftadd
  9789  09F6  0837               	movf	??___ftadd,w
  9790  09F7  00BB               	movwf	___ftadd@sign
  9791  09F8  1BB3               	btfsc	___ftadd@f1+2,7
  9792  09F9  17BB               	bsf	___ftadd@sign,7
  9793  09FA  1BB6               	btfsc	___ftadd@f2+2,7
  9794  09FB  173B               	bsf	___ftadd@sign,6
  9795  09FC  17B2               	bsf	___ftadd@f1+1,7
  9796  09FD  30FF               	movlw	255
  9797  09FE  05B1               	andwf	___ftadd@f1,f
  9798  09FF  30FF               	movlw	255
  9799  0A00  05B2               	andwf	___ftadd@f1+1,f
  9800  0A01  3000               	movlw	0
  9801  0A02  05B3               	andwf	___ftadd@f1+2,f
  9802  0A03  17B5               	bsf	___ftadd@f2+1,7
  9803  0A04  30FF               	movlw	255
  9804  0A05  05B4               	andwf	___ftadd@f2,f
  9805  0A06  30FF               	movlw	255
  9806  0A07  05B5               	andwf	___ftadd@f2+1,f
  9807  0A08  3000               	movlw	0
  9808  0A09  05B6               	andwf	___ftadd@f2+2,f
  9809  0A0A  083C               	movf	___ftadd@exp2,w
  9810  0A0B  023D               	subwf	___ftadd@exp1,w
  9811  0A0C  1803               	skipnc
  9812  0A0D  2A30               	goto	l2466
  9813  0A0E                     l2456:	
  9814  0A0E  3001               	movlw	1
  9815  0A0F                     u2545:	
  9816  0A0F  35B4               	lslf	___ftadd@f2,f
  9817  0A10  0DB5               	rlf	___ftadd@f2+1,f
  9818  0A11  0DB6               	rlf	___ftadd@f2+2,f
  9819  0A12  0B89               	decfsz	9,f
  9820  0A13  2A0F               	goto	u2545
  9821  0A14  3001               	movlw	1
  9822  0A15  02BC               	subwf	___ftadd@exp2,f
  9823  0A16  083C               	movf	___ftadd@exp2,w
  9824  0A17  063D               	xorwf	___ftadd@exp1,w
  9825  0A18  1903               	skipnz
  9826  0A19  2A2B               	goto	l2464
  9827  0A1A  3001               	movlw	1
  9828  0A1B  02BB               	subwf	___ftadd@sign,f
  9829  0A1C  083B               	movf	___ftadd@sign,w
  9830  0A1D  3907               	andlw	7
  9831  0A1E  1903               	btfsc	3,2
  9832  0A1F  2A2B               	goto	l2464
  9833  0A20  2A0E               	goto	l2456
  9834  0A21                     l2462:	
  9835  0A21  3001               	movlw	1
  9836  0A22                     u2575:	
  9837  0A22  36B3               	lsrf	___ftadd@f1+2,f
  9838  0A23  0CB2               	rrf	___ftadd@f1+1,f
  9839  0A24  0CB1               	rrf	___ftadd@f1,f
  9840  0A25  0B89               	decfsz	9,f
  9841  0A26  2A22               	goto	u2575
  9842  0A27  3001               	movlw	1
  9843  0A28  00B7               	movwf	??___ftadd
  9844  0A29  0837               	movf	??___ftadd,w
  9845  0A2A  07BD               	addwf	___ftadd@exp1,f
  9846  0A2B                     l2464:	
  9847  0A2B  083D               	movf	___ftadd@exp1,w
  9848  0A2C  063C               	xorwf	___ftadd@exp2,w
  9849  0A2D  1903               	btfsc	3,2
  9850  0A2E  2A55               	goto	l820
  9851  0A2F  2A21               	goto	l2462
  9852  0A30                     l2466:	
  9853  0A30  083D               	movf	___ftadd@exp1,w
  9854  0A31  023C               	subwf	___ftadd@exp2,w
  9855  0A32  1803               	skipnc
  9856  0A33  2A55               	goto	l820
  9857  0A34                     l2468:	
  9858  0A34  3001               	movlw	1
  9859  0A35                     u2605:	
  9860  0A35  35B1               	lslf	___ftadd@f1,f
  9861  0A36  0DB2               	rlf	___ftadd@f1+1,f
  9862  0A37  0DB3               	rlf	___ftadd@f1+2,f
  9863  0A38  0B89               	decfsz	9,f
  9864  0A39  2A35               	goto	u2605
  9865  0A3A  3001               	movlw	1
  9866  0A3B  02BD               	subwf	___ftadd@exp1,f
  9867  0A3C  083C               	movf	___ftadd@exp2,w
  9868  0A3D  063D               	xorwf	___ftadd@exp1,w
  9869  0A3E  1903               	skipnz
  9870  0A3F  2A51               	goto	l2476
  9871  0A40  3001               	movlw	1
  9872  0A41  02BB               	subwf	___ftadd@sign,f
  9873  0A42  083B               	movf	___ftadd@sign,w
  9874  0A43  3907               	andlw	7
  9875  0A44  1903               	btfsc	3,2
  9876  0A45  2A51               	goto	l2476
  9877  0A46  2A34               	goto	l2468
  9878  0A47                     l2474:	
  9879  0A47  3001               	movlw	1
  9880  0A48                     u2635:	
  9881  0A48  36B6               	lsrf	___ftadd@f2+2,f
  9882  0A49  0CB5               	rrf	___ftadd@f2+1,f
  9883  0A4A  0CB4               	rrf	___ftadd@f2,f
  9884  0A4B  0B89               	decfsz	9,f
  9885  0A4C  2A48               	goto	u2635
  9886  0A4D  3001               	movlw	1
  9887  0A4E  00B7               	movwf	??___ftadd
  9888  0A4F  0837               	movf	??___ftadd,w
  9889  0A50  07BC               	addwf	___ftadd@exp2,f
  9890  0A51                     l2476:	
  9891  0A51  083D               	movf	___ftadd@exp1,w
  9892  0A52  063C               	xorwf	___ftadd@exp2,w
  9893  0A53  1D03               	skipz
  9894  0A54  2A47               	goto	l2474
  9895  0A55                     l820:	
  9896  0A55  1FBB               	btfss	___ftadd@sign,7
  9897  0A56  2A67               	goto	l2480
  9898  0A57  30FF               	movlw	255
  9899  0A58  06B1               	xorwf	___ftadd@f1,f
  9900  0A59  30FF               	movlw	255
  9901  0A5A  06B2               	xorwf	___ftadd@f1+1,f
  9902  0A5B  30FF               	movlw	255
  9903  0A5C  06B3               	xorwf	___ftadd@f1+2,f
  9904  0A5D  3001               	movlw	1
  9905  0A5E  07B1               	addwf	___ftadd@f1,f
  9906  0A5F  3000               	movlw	0
  9907  0A60  1803               	skipnc
  9908  0A61  3001               	movlw	1
  9909  0A62  07B2               	addwf	___ftadd@f1+1,f
  9910  0A63  3000               	movlw	0
  9911  0A64  1803               	skipnc
  9912  0A65  3001               	movlw	1
  9913  0A66  07B3               	addwf	___ftadd@f1+2,f
  9914  0A67                     l2480:	
  9915  0A67  1F3B               	btfss	___ftadd@sign,6
  9916  0A68  2A79               	goto	l2484
  9917  0A69  30FF               	movlw	255
  9918  0A6A  06B4               	xorwf	___ftadd@f2,f
  9919  0A6B  30FF               	movlw	255
  9920  0A6C  06B5               	xorwf	___ftadd@f2+1,f
  9921  0A6D  30FF               	movlw	255
  9922  0A6E  06B6               	xorwf	___ftadd@f2+2,f
  9923  0A6F  3001               	movlw	1
  9924  0A70  07B4               	addwf	___ftadd@f2,f
  9925  0A71  3000               	movlw	0
  9926  0A72  1803               	skipnc
  9927  0A73  3001               	movlw	1
  9928  0A74  07B5               	addwf	___ftadd@f2+1,f
  9929  0A75  3000               	movlw	0
  9930  0A76  1803               	skipnc
  9931  0A77  3001               	movlw	1
  9932  0A78  07B6               	addwf	___ftadd@f2+2,f
  9933  0A79                     l2484:	
  9934  0A79  01BB               	clrf	___ftadd@sign
  9935  0A7A  0831               	movf	___ftadd@f1,w
  9936  0A7B  07B4               	addwf	___ftadd@f2,f
  9937  0A7C  0832               	movf	___ftadd@f1+1,w
  9938  0A7D  3DB5               	addwfc	___ftadd@f2+1,f
  9939  0A7E  0833               	movf	___ftadd@f1+2,w
  9940  0A7F  3DB6               	addwfc	___ftadd@f2+2,f
  9941  0A80  1FB6               	btfss	___ftadd@f2+2,7
  9942  0A81  2A94               	goto	l2494
  9943  0A82  30FF               	movlw	255
  9944  0A83  06B4               	xorwf	___ftadd@f2,f
  9945  0A84  30FF               	movlw	255
  9946  0A85  06B5               	xorwf	___ftadd@f2+1,f
  9947  0A86  30FF               	movlw	255
  9948  0A87  06B6               	xorwf	___ftadd@f2+2,f
  9949  0A88  3001               	movlw	1
  9950  0A89  07B4               	addwf	___ftadd@f2,f
  9951  0A8A  3000               	movlw	0
  9952  0A8B  1803               	skipnc
  9953  0A8C  3001               	movlw	1
  9954  0A8D  07B5               	addwf	___ftadd@f2+1,f
  9955  0A8E  3000               	movlw	0
  9956  0A8F  1803               	skipnc
  9957  0A90  3001               	movlw	1
  9958  0A91  07B6               	addwf	___ftadd@f2+2,f
  9959  0A92  01BB               	clrf	___ftadd@sign
  9960  0A93  0ABB               	incf	___ftadd@sign,f
  9961  0A94                     l2494:	
  9962  0A94  0834               	movf	___ftadd@f2,w
  9963  0A95  00F0               	movwf	___ftpack@arg
  9964  0A96  0835               	movf	___ftadd@f2+1,w
  9965  0A97  00F1               	movwf	___ftpack@arg+1
  9966  0A98  0836               	movf	___ftadd@f2+2,w
  9967  0A99  00F2               	movwf	___ftpack@arg+2
  9968  0A9A  083D               	movf	___ftadd@exp1,w
  9969  0A9B  00B7               	movwf	??___ftadd
  9970  0A9C  0837               	movf	??___ftadd,w
  9971  0A9D  00F3               	movwf	___ftpack@exp
  9972  0A9E  083B               	movf	___ftadd@sign,w
  9973  0A9F  00B8               	movwf	??___ftadd+1
  9974  0AA0  0838               	movf	??___ftadd+1,w
  9975  0AA1  00F4               	movwf	___ftpack@sign
  9976  0AA2  3193  23A0         	fcall	___ftpack
  9977  0AA4  0870               	movf	?___ftpack,w
  9978  0AA5  0020               	movlb	0	; select bank0
  9979  0AA6  00B1               	movwf	?___ftadd
  9980  0AA7  0871               	movf	?___ftpack+1,w
  9981  0AA8  00B2               	movwf	?___ftadd+1
  9982  0AA9  0872               	movf	?___ftpack+2,w
  9983  0AAA  00B3               	movwf	?___ftadd+2
  9984  0AAB  0008               	return
  9985  0AAC                     __end_of___ftadd:	
  9986                           
  9987                           	psect	text8
  9988  0AAC                     __ptext8:	
  9989 ;; *************** function _readVAnalog *****************
  9990 ;; Defined at:
  9991 ;;		line 103 in file "adc.c"
  9992 ;; Parameters:    Size  Location     Type
  9993 ;;  channel         2    6[BANK0 ] unsigned int 
  9994 ;; Auto vars:     Size  Location     Type
  9995 ;;  value           2   11[COMMON] int 
  9996 ;;  analog_chann    2    9[COMMON] unsigned int 
  9997 ;; Return value:  Size  Location     Type
  9998 ;;                  2    6[BANK0 ] int 
  9999 ;; Registers used:
 10000 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10001 ;; Tracked objects:
 10002 ;;		On entry : 0/0
 10003 ;;		On exit  : 0/0
 10004 ;;		Unchanged: 0/0
 10005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10006 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10007 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10008 ;;      Temps:          0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10009 ;;      Totals:         4      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10010 ;;Total ram usage:       21 bytes
 10011 ;; Hardware stack levels used:    1
 10012 ;; Hardware stack levels required when called:    1
 10013 ;; This function calls:
 10014 ;;		_ADCRead
 10015 ;;		___aldiv
 10016 ;;		___bmul
 10017 ;; This function is called by:
 10018 ;;		_main
 10019 ;; This function uses a non-reentrant model
 10020 ;;
 10021                           
 10022                           
 10023                           ;psect for function _readVAnalog
 10024  0AAC                     _readVAnalog:	
 10025                           
 10026                           ;adc.c: 105: int16_t value;
 10027                           ;adc.c: 107: uint16_t analog_channel = Vchannels[channel];
 10028                           
 10029                           ;incstack = 0
 10030                           ; Regs used in _readVAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10031  0AAC  0020               	movlb	0	; select bank0
 10032  0AAD  3526               	lslf	readVAnalog@channel,w
 10033  0AAE  3E59               	addlw	(low (_Vchannels| (0+256)))& (0+255)
 10034  0AAF  0086               	movwf	6
 10035  0AB0  3001               	movlw	1	; select bank2/3
 10036  0AB1  0087               	movwf	7
 10037  0AB2  3F40               	moviw [0]fsr1
 10038  0AB3  00F9               	movwf	readVAnalog@analog_channel
 10039  0AB4  3F41               	moviw [1]fsr1
 10040  0AB5  00FA               	movwf	readVAnalog@analog_channel+1
 10041                           
 10042                           ;adc.c: 109: value = ADCRead(analog_channel);
 10043  0AB6  0879               	movf	readVAnalog@analog_channel,w
 10044  0AB7  319E  268F  318A   	fcall	_ADCRead
 10045  0ABA  0871               	movf	?_ADCRead+1,w
 10046  0ABB  00FC               	movwf	readVAnalog@value+1
 10047  0ABC  0870               	movf	?_ADCRead,w
 10048  0ABD  00FB               	movwf	readVAnalog@value
 10049                           
 10050                           ;adc.c: 111: Vtotals[channel] = Vtotals[channel]-Vsamples[channel][VsampleIndex];
 10051  0ABE  0020               	movlb	0	; select bank0
 10052  0ABF  0826               	movf	readVAnalog@channel,w
 10053  0AC0  00A8               	movwf	??_readVAnalog
 10054  0AC1  3001               	movlw	1
 10055  0AC2                     u3485:	
 10056  0AC2  35A8               	lslf	??_readVAnalog,f
 10057  0AC3  3EFF               	addlw	-1
 10058  0AC4  1D03               	skipz
 10059  0AC5  2AC2               	goto	u3485
 10060  0AC6  3528               	lslf	??_readVAnalog,w
 10061  0AC7  3E20               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10062  0AC8  0086               	movwf	6
 10063  0AC9  3001               	movlw	1	; select bank2/3
 10064  0ACA  0087               	movwf	7
 10065  0ACB  3F40               	moviw [0]fsr1
 10066  0ACC  00A9               	movwf	??_readVAnalog+1
 10067  0ACD  3F41               	moviw [1]fsr1
 10068  0ACE  00AA               	movwf	??_readVAnalog+2
 10069  0ACF  3F42               	moviw [2]fsr1
 10070  0AD0  00AB               	movwf	??_readVAnalog+3
 10071  0AD1  3F43               	moviw [3]fsr1
 10072  0AD2  00AC               	movwf	??_readVAnalog+4
 10073  0AD3  0021               	movlb	1	; select bank1
 10074  0AD4  0848               	movf	_VsampleIndex^(0+128),w
 10075  0AD5  0020               	movlb	0	; select bank0
 10076  0AD6  00AD               	movwf	??_readVAnalog+5
 10077  0AD7  3001               	movlw	1
 10078  0AD8                     u3495:	
 10079  0AD8  35AD               	lslf	??_readVAnalog+5,f
 10080  0AD9  0B89               	decfsz	9,f
 10081  0ADA  2AD8               	goto	u3495
 10082  0ADB  300A               	movlw	10
 10083  0ADC  00AE               	movwf	??_readVAnalog+6
 10084  0ADD  082E               	movf	??_readVAnalog+6,w
 10085  0ADE  00F0               	movwf	___bmul@multiplicand
 10086  0ADF  0826               	movf	readVAnalog@channel,w
 10087  0AE0  319E  2657  318A   	fcall	___bmul
 10088  0AE3  3EA0               	addlw	(low (_Vsamples| (0+256)))& (0+255)
 10089  0AE4  0020               	movlb	0	; select bank0
 10090  0AE5  072D               	addwf	??_readVAnalog+5,w
 10091  0AE6  00AF               	movwf	??_readVAnalog+7
 10092  0AE7  082F               	movf	??_readVAnalog+7,w
 10093  0AE8  0086               	movwf	6
 10094  0AE9  3001               	movlw	1	; select bank3/4
 10095  0AEA  0087               	movwf	7
 10096  0AEB  3F40               	moviw [0]fsr1
 10097  0AEC  00B0               	movwf	??_readVAnalog+8
 10098  0AED  3F41               	moviw [1]fsr1
 10099  0AEE  00B1               	movwf	??_readVAnalog+9
 10100  0AEF  0830               	movf	??_readVAnalog+8,w
 10101  0AF0  00B2               	movwf	??_readVAnalog+10
 10102  0AF1  0831               	movf	??_readVAnalog+9,w
 10103  0AF2  00B3               	movwf	??_readVAnalog+11
 10104  0AF3  3000               	movlw	0
 10105  0AF4  1BB3               	btfsc	??_readVAnalog+11,7
 10106  0AF5  30FF               	movlw	255
 10107  0AF6  00B4               	movwf	??_readVAnalog+12
 10108  0AF7  00B5               	movwf	??_readVAnalog+13
 10109  0AF8  09B2               	comf	??_readVAnalog+10,f
 10110  0AF9  09B3               	comf	??_readVAnalog+11,f
 10111  0AFA  09B4               	comf	??_readVAnalog+12,f
 10112  0AFB  09B5               	comf	??_readVAnalog+13,f
 10113  0AFC  0AB2               	incf	??_readVAnalog+10,f
 10114  0AFD  1903               	skipnz
 10115  0AFE  0AB3               	incf	??_readVAnalog+11,f
 10116  0AFF  1903               	skipnz
 10117  0B00  0AB4               	incf	??_readVAnalog+12,f
 10118  0B01  1903               	skipnz
 10119  0B02  0AB5               	incf	??_readVAnalog+13,f
 10120  0B03  0832               	movf	??_readVAnalog+10,w
 10121  0B04  07A9               	addwf	??_readVAnalog+1,f
 10122  0B05  0833               	movf	??_readVAnalog+11,w
 10123  0B06  3DAA               	addwfc	??_readVAnalog+2,f
 10124  0B07  0834               	movf	??_readVAnalog+12,w
 10125  0B08  3DAB               	addwfc	??_readVAnalog+3,f
 10126  0B09  0835               	movf	??_readVAnalog+13,w
 10127  0B0A  3DAC               	addwfc	??_readVAnalog+4,f
 10128  0B0B  0826               	movf	readVAnalog@channel,w
 10129  0B0C  00B6               	movwf	??_readVAnalog+14
 10130  0B0D  3001               	movlw	1
 10131  0B0E                     u3505:	
 10132  0B0E  35B6               	lslf	??_readVAnalog+14,f
 10133  0B0F  3EFF               	addlw	-1
 10134  0B10  1D03               	skipz
 10135  0B11  2B0E               	goto	u3505
 10136  0B12  3536               	lslf	??_readVAnalog+14,w
 10137  0B13  3E20               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10138  0B14  0086               	movwf	6
 10139  0B15  3001               	movlw	1	; select bank2/3
 10140  0B16  0087               	movwf	7
 10141  0B17  0829               	movf	??_readVAnalog+1,w
 10142  0B18  3FC0               	movwi [0]fsr1
 10143  0B19  082A               	movf	??_readVAnalog+2,w
 10144  0B1A  3FC1               	movwi [1]fsr1
 10145  0B1B  082B               	movf	??_readVAnalog+3,w
 10146  0B1C  3FC2               	movwi [2]fsr1
 10147  0B1D  082C               	movf	??_readVAnalog+4,w
 10148  0B1E  3FC3               	movwi [3]fsr1
 10149                           
 10150                           ;adc.c: 113: Vsamples[channel][VsampleIndex] = value;
 10151  0B1F  0021               	movlb	1	; select bank1
 10152  0B20  0848               	movf	_VsampleIndex^(0+128),w
 10153  0B21  0020               	movlb	0	; select bank0
 10154  0B22  00A8               	movwf	??_readVAnalog
 10155  0B23  3001               	movlw	1
 10156  0B24                     u3515:	
 10157  0B24  35A8               	lslf	??_readVAnalog,f
 10158  0B25  0B89               	decfsz	9,f
 10159  0B26  2B24               	goto	u3515
 10160  0B27  300A               	movlw	10
 10161  0B28  00A9               	movwf	??_readVAnalog+1
 10162  0B29  0829               	movf	??_readVAnalog+1,w
 10163  0B2A  00F0               	movwf	___bmul@multiplicand
 10164  0B2B  0826               	movf	readVAnalog@channel,w
 10165  0B2C  319E  2657  318A   	fcall	___bmul
 10166  0B2F  3EA0               	addlw	(low (_Vsamples| (0+256)))& (0+255)
 10167  0B30  0020               	movlb	0	; select bank0
 10168  0B31  0728               	addwf	??_readVAnalog,w
 10169  0B32  00AA               	movwf	??_readVAnalog+2
 10170  0B33  082A               	movf	??_readVAnalog+2,w
 10171  0B34  0086               	movwf	6
 10172  0B35  3001               	movlw	1	; select bank3/4
 10173  0B36  0087               	movwf	7
 10174  0B37  087B               	movf	readVAnalog@value,w
 10175  0B38  3FC0               	movwi [0]fsr1
 10176  0B39  087C               	movf	readVAnalog@value+1,w
 10177  0B3A  3FC1               	movwi [1]fsr1
 10178                           
 10179                           ;adc.c: 115: Vtotals[channel] = Vtotals[channel]+Vsamples[channel][VsampleIndex];
 10180  0B3B  0826               	movf	readVAnalog@channel,w
 10181  0B3C  00A8               	movwf	??_readVAnalog
 10182  0B3D  3001               	movlw	1
 10183  0B3E                     u3525:	
 10184  0B3E  35A8               	lslf	??_readVAnalog,f
 10185  0B3F  3EFF               	addlw	-1
 10186  0B40  1D03               	skipz
 10187  0B41  2B3E               	goto	u3525
 10188  0B42  3528               	lslf	??_readVAnalog,w
 10189  0B43  3E20               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10190  0B44  0086               	movwf	6
 10191  0B45  3001               	movlw	1	; select bank2/3
 10192  0B46  0087               	movwf	7
 10193  0B47  3F40               	moviw [0]fsr1
 10194  0B48  00A9               	movwf	??_readVAnalog+1
 10195  0B49  3F41               	moviw [1]fsr1
 10196  0B4A  00AA               	movwf	??_readVAnalog+2
 10197  0B4B  3F42               	moviw [2]fsr1
 10198  0B4C  00AB               	movwf	??_readVAnalog+3
 10199  0B4D  3F43               	moviw [3]fsr1
 10200  0B4E  00AC               	movwf	??_readVAnalog+4
 10201  0B4F  0021               	movlb	1	; select bank1
 10202  0B50  0848               	movf	_VsampleIndex^(0+128),w
 10203  0B51  0020               	movlb	0	; select bank0
 10204  0B52  00AD               	movwf	??_readVAnalog+5
 10205  0B53  3001               	movlw	1
 10206  0B54                     u3535:	
 10207  0B54  35AD               	lslf	??_readVAnalog+5,f
 10208  0B55  0B89               	decfsz	9,f
 10209  0B56  2B54               	goto	u3535
 10210  0B57  300A               	movlw	10
 10211  0B58  00AE               	movwf	??_readVAnalog+6
 10212  0B59  082E               	movf	??_readVAnalog+6,w
 10213  0B5A  00F0               	movwf	___bmul@multiplicand
 10214  0B5B  0826               	movf	readVAnalog@channel,w
 10215  0B5C  319E  2657  318A   	fcall	___bmul
 10216  0B5F  3EA0               	addlw	(low (_Vsamples| (0+256)))& (0+255)
 10217  0B60  0020               	movlb	0	; select bank0
 10218  0B61  072D               	addwf	??_readVAnalog+5,w
 10219  0B62  00AF               	movwf	??_readVAnalog+7
 10220  0B63  082F               	movf	??_readVAnalog+7,w
 10221  0B64  0086               	movwf	6
 10222  0B65  3001               	movlw	1	; select bank3/4
 10223  0B66  0087               	movwf	7
 10224  0B67  3F40               	moviw [0]fsr1
 10225  0B68  00B0               	movwf	??_readVAnalog+8
 10226  0B69  3F41               	moviw [1]fsr1
 10227  0B6A  00B1               	movwf	??_readVAnalog+9
 10228  0B6B  0830               	movf	??_readVAnalog+8,w
 10229  0B6C  00B2               	movwf	??_readVAnalog+10
 10230  0B6D  0831               	movf	??_readVAnalog+9,w
 10231  0B6E  00B3               	movwf	??_readVAnalog+11
 10232  0B6F  3000               	movlw	0
 10233  0B70  1BB3               	btfsc	??_readVAnalog+11,7
 10234  0B71  30FF               	movlw	255
 10235  0B72  00B4               	movwf	??_readVAnalog+12
 10236  0B73  00B5               	movwf	??_readVAnalog+13
 10237  0B74  0832               	movf	??_readVAnalog+10,w
 10238  0B75  07A9               	addwf	??_readVAnalog+1,f
 10239  0B76  0833               	movf	??_readVAnalog+11,w
 10240  0B77  3DAA               	addwfc	??_readVAnalog+2,f
 10241  0B78  0834               	movf	??_readVAnalog+12,w
 10242  0B79  3DAB               	addwfc	??_readVAnalog+3,f
 10243  0B7A  0835               	movf	??_readVAnalog+13,w
 10244  0B7B  3DAC               	addwfc	??_readVAnalog+4,f
 10245  0B7C  0826               	movf	readVAnalog@channel,w
 10246  0B7D  00B6               	movwf	??_readVAnalog+14
 10247  0B7E  3001               	movlw	1
 10248  0B7F                     u3545:	
 10249  0B7F  35B6               	lslf	??_readVAnalog+14,f
 10250  0B80  3EFF               	addlw	-1
 10251  0B81  1D03               	skipz
 10252  0B82  2B7F               	goto	u3545
 10253  0B83  3536               	lslf	??_readVAnalog+14,w
 10254  0B84  3E20               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10255  0B85  0086               	movwf	6
 10256  0B86  3001               	movlw	1	; select bank2/3
 10257  0B87  0087               	movwf	7
 10258  0B88  0829               	movf	??_readVAnalog+1,w
 10259  0B89  3FC0               	movwi [0]fsr1
 10260  0B8A  082A               	movf	??_readVAnalog+2,w
 10261  0B8B  3FC1               	movwi [1]fsr1
 10262  0B8C  082B               	movf	??_readVAnalog+3,w
 10263  0B8D  3FC2               	movwi [2]fsr1
 10264  0B8E  082C               	movf	??_readVAnalog+4,w
 10265  0B8F  3FC3               	movwi [3]fsr1
 10266                           
 10267                           ;adc.c: 117: if(channel>=(4-1))
 10268  0B90  3000               	movlw	0
 10269  0B91  0227               	subwf	readVAnalog@channel+1,w
 10270  0B92  3003               	movlw	3
 10271  0B93  1903               	skipnz
 10272  0B94  0226               	subwf	readVAnalog@channel,w
 10273  0B95  1C03               	skipc
 10274  0B96  2BA5               	goto	l3056
 10275                           
 10276                           ;adc.c: 118: {
 10277                           ;adc.c: 119: VsampleIndex+=1;
 10278  0B97  3001               	movlw	1
 10279  0B98  0021               	movlb	1	; select bank1
 10280  0B99  07C8               	addwf	_VsampleIndex^(0+128),f
 10281  0B9A  3000               	movlw	0
 10282  0B9B  3DC9               	addwfc	(_VsampleIndex+1)^(0+128),f
 10283                           
 10284                           ;adc.c: 120: if(VsampleIndex >= 5)VsampleIndex = 0;
 10285  0B9C  3000               	movlw	0
 10286  0B9D  0249               	subwf	(_VsampleIndex+1)^(0+128),w
 10287  0B9E  3005               	movlw	5
 10288  0B9F  1903               	skipnz
 10289  0BA0  0248               	subwf	_VsampleIndex^(0+128),w
 10290  0BA1  1C03               	skipc
 10291  0BA2  2BA5               	goto	l3056
 10292  0BA3  01C8               	clrf	_VsampleIndex^(0+128)
 10293  0BA4  01C9               	clrf	(_VsampleIndex+1)^(0+128)
 10294  0BA5                     l3056:	
 10295                           
 10296                           ;adc.c: 121: }
 10297                           ;adc.c: 123: value = Vtotals[channel]/5;
 10298  0BA5  3000               	movlw	0
 10299  0BA6  00F3               	movwf	___aldiv@divisor+3
 10300  0BA7  3000               	movlw	0
 10301  0BA8  00F2               	movwf	___aldiv@divisor+2
 10302  0BA9  3000               	movlw	0
 10303  0BAA  00F1               	movwf	___aldiv@divisor+1
 10304  0BAB  3005               	movlw	5
 10305  0BAC  00F0               	movwf	___aldiv@divisor
 10306  0BAD  0020               	movlb	0	; select bank0
 10307  0BAE  0826               	movf	readVAnalog@channel,w
 10308  0BAF  00A8               	movwf	??_readVAnalog
 10309  0BB0  3001               	movlw	1
 10310  0BB1                     u3575:	
 10311  0BB1  35A8               	lslf	??_readVAnalog,f
 10312  0BB2  3EFF               	addlw	-1
 10313  0BB3  1D03               	skipz
 10314  0BB4  2BB1               	goto	u3575
 10315  0BB5  3528               	lslf	??_readVAnalog,w
 10316  0BB6  3E20               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10317  0BB7  0086               	movwf	6
 10318  0BB8  3001               	movlw	1	; select bank2/3
 10319  0BB9  0087               	movwf	7
 10320  0BBA  3F40               	moviw [0]fsr1
 10321  0BBB  00F4               	movwf	___aldiv@dividend
 10322  0BBC  3F41               	moviw [1]fsr1
 10323  0BBD  00F5               	movwf	___aldiv@dividend+1
 10324  0BBE  3F42               	moviw [2]fsr1
 10325  0BBF  00F6               	movwf	___aldiv@dividend+2
 10326  0BC0  3F43               	moviw [3]fsr1
 10327  0BC1  00F7               	movwf	___aldiv@dividend+3
 10328  0BC2  3194  24EA         	fcall	___aldiv
 10329  0BC4  0871               	movf	?___aldiv+1,w
 10330  0BC5  00FC               	movwf	readVAnalog@value+1
 10331  0BC6  0870               	movf	?___aldiv,w
 10332  0BC7  00FB               	movwf	readVAnalog@value
 10333                           
 10334                           ;adc.c: 125: return value;
 10335  0BC8  087C               	movf	readVAnalog@value+1,w
 10336  0BC9  0020               	movlb	0	; select bank0
 10337  0BCA  00A7               	movwf	?_readVAnalog+1
 10338  0BCB  087B               	movf	readVAnalog@value,w
 10339  0BCC  00A6               	movwf	?_readVAnalog
 10340  0BCD  0008               	return
 10341  0BCE                     __end_of_readVAnalog:	
 10342                           
 10343                           	psect	text9
 10344  1E57                     __ptext9:	
 10345 ;; *************** function ___bmul *****************
 10346 ;; Defined at:
 10347 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul8.c"
 10348 ;; Parameters:    Size  Location     Type
 10349 ;;  multiplier      1    wreg     unsigned char 
 10350 ;;  multiplicand    1    0[COMMON] unsigned char 
 10351 ;; Auto vars:     Size  Location     Type
 10352 ;;  multiplier      1    3[COMMON] unsigned char 
 10353 ;;  product         1    2[COMMON] unsigned char 
 10354 ;; Return value:  Size  Location     Type
 10355 ;;                  1    wreg      unsigned char 
 10356 ;; Registers used:
 10357 ;;		wreg, status,2, status,0
 10358 ;; Tracked objects:
 10359 ;;		On entry : 0/0
 10360 ;;		On exit  : 0/0
 10361 ;;		Unchanged: 0/0
 10362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10363 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10364 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10365 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10366 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10367 ;;Total ram usage:        4 bytes
 10368 ;; Hardware stack levels used:    1
 10369 ;; This function calls:
 10370 ;;		Nothing
 10371 ;; This function is called by:
 10372 ;;		_readVAnalog
 10373 ;; This function uses a non-reentrant model
 10374 ;;
 10375                           
 10376                           
 10377                           ;psect for function ___bmul
 10378  1E57                     ___bmul:	
 10379                           
 10380                           ;incstack = 0
 10381                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 10382                           ;___bmul@multiplier stored from wreg
 10383  1E57  00F3               	movwf	___bmul@multiplier
 10384  1E58  01F2               	clrf	___bmul@product
 10385  1E59                     l2854:	
 10386  1E59  1C73               	btfss	___bmul@multiplier,0
 10387  1E5A  2E5F               	goto	l2858
 10388  1E5B  0870               	movf	___bmul@multiplicand,w
 10389  1E5C  00F1               	movwf	??___bmul
 10390  1E5D  0871               	movf	??___bmul,w
 10391  1E5E  07F2               	addwf	___bmul@product,f
 10392  1E5F                     l2858:	
 10393  1E5F  1003               	clrc
 10394  1E60  0DF0               	rlf	___bmul@multiplicand,f
 10395  1E61  1003               	clrc
 10396  1E62  0CF3               	rrf	___bmul@multiplier,f
 10397  1E63  0873               	movf	___bmul@multiplier,w
 10398  1E64  1D03               	btfss	3,2
 10399  1E65  2E59               	goto	l2854
 10400  1E66  0872               	movf	___bmul@product,w
 10401  1E67  0008               	return
 10402  1E68                     __end_of___bmul:	
 10403                           
 10404                           	psect	text10
 10405  0BCE                     __ptext10:	
 10406 ;; *************** function _readIAnalog *****************
 10407 ;; Defined at:
 10408 ;;		line 77 in file "adc.c"
 10409 ;; Parameters:    Size  Location     Type
 10410 ;;  channel         2    6[BANK0 ] unsigned int 
 10411 ;; Auto vars:     Size  Location     Type
 10412 ;;  value           2   11[COMMON] int 
 10413 ;;  analog_chann    2    9[COMMON] unsigned int 
 10414 ;; Return value:  Size  Location     Type
 10415 ;;                  2    6[BANK0 ] int 
 10416 ;; Registers used:
 10417 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10418 ;; Tracked objects:
 10419 ;;		On entry : 0/0
 10420 ;;		On exit  : 0/0
 10421 ;;		Unchanged: 0/0
 10422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10423 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10424 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10425 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10426 ;;      Totals:         4      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10427 ;;Total ram usage:       24 bytes
 10428 ;; Hardware stack levels used:    1
 10429 ;; Hardware stack levels required when called:    1
 10430 ;; This function calls:
 10431 ;;		_ADCRead
 10432 ;;		___aldiv
 10433 ;;		___wmul
 10434 ;; This function is called by:
 10435 ;;		_main
 10436 ;; This function uses a non-reentrant model
 10437 ;;
 10438                           
 10439                           
 10440                           ;psect for function _readIAnalog
 10441  0BCE                     _readIAnalog:	
 10442                           
 10443                           ;adc.c: 79: int16_t value;
 10444                           ;adc.c: 81: uint16_t analog_channel = Ichannels[channel];
 10445                           
 10446                           ;incstack = 0
 10447                           ; Regs used in _readIAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10448  0BCE  0020               	movlb	0	; select bank0
 10449  0BCF  3526               	lslf	readIAnalog@channel,w
 10450  0BD0  3E61               	addlw	(low (_Ichannels| (0+256)))& (0+255)
 10451  0BD1  0086               	movwf	6
 10452  0BD2  3001               	movlw	1	; select bank2/3
 10453  0BD3  0087               	movwf	7
 10454  0BD4  3F40               	moviw [0]fsr1
 10455  0BD5  00F9               	movwf	readIAnalog@analog_channel
 10456  0BD6  3F41               	moviw [1]fsr1
 10457  0BD7  00FA               	movwf	readIAnalog@analog_channel+1
 10458                           
 10459                           ;adc.c: 83: value = ADCRead(analog_channel);
 10460  0BD8  0879               	movf	readIAnalog@analog_channel,w
 10461  0BD9  319E  268F  318B   	fcall	_ADCRead
 10462  0BDC  0871               	movf	?_ADCRead+1,w
 10463  0BDD  00FC               	movwf	readIAnalog@value+1
 10464  0BDE  0870               	movf	?_ADCRead,w
 10465  0BDF  00FB               	movwf	readIAnalog@value
 10466                           
 10467                           ;adc.c: 85: Itotals[channel] = Itotals[channel]-Isamples[channel][IsampleIndex];
 10468  0BE0  0020               	movlb	0	; select bank0
 10469  0BE1  0826               	movf	readIAnalog@channel,w
 10470  0BE2  00A8               	movwf	??_readIAnalog
 10471  0BE3  3001               	movlw	1
 10472  0BE4                     u3415:	
 10473  0BE4  35A8               	lslf	??_readIAnalog,f
 10474  0BE5  3EFF               	addlw	-1
 10475  0BE6  1D03               	skipz
 10476  0BE7  2BE4               	goto	u3415
 10477  0BE8  3528               	lslf	??_readIAnalog,w
 10478  0BE9  3E30               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10479  0BEA  0086               	movwf	6
 10480  0BEB  3001               	movlw	1	; select bank2/3
 10481  0BEC  0087               	movwf	7
 10482  0BED  3F40               	moviw [0]fsr1
 10483  0BEE  00A9               	movwf	??_readIAnalog+1
 10484  0BEF  3F41               	moviw [1]fsr1
 10485  0BF0  00AA               	movwf	??_readIAnalog+2
 10486  0BF1  3F42               	moviw [2]fsr1
 10487  0BF2  00AB               	movwf	??_readIAnalog+3
 10488  0BF3  3F43               	moviw [3]fsr1
 10489  0BF4  00AC               	movwf	??_readIAnalog+4
 10490  0BF5  0867               	movf	_IsampleIndex+1,w
 10491  0BF6  00AE               	movwf	??_readIAnalog+6
 10492  0BF7  0866               	movf	_IsampleIndex,w
 10493  0BF8  00AD               	movwf	??_readIAnalog+5
 10494  0BF9  35AD               	lslf	??_readIAnalog+5,f
 10495  0BFA  0DAE               	rlf	??_readIAnalog+6,f
 10496  0BFB  0827               	movf	readIAnalog@channel+1,w
 10497  0BFC  00F1               	movwf	___wmul@multiplier+1
 10498  0BFD  0826               	movf	readIAnalog@channel,w
 10499  0BFE  00F0               	movwf	___wmul@multiplier
 10500  0BFF  3064               	movlw	100
 10501  0C00  00F2               	movwf	___wmul@multiplicand
 10502  0C01  3000               	movlw	0
 10503  0C02  00F3               	movwf	___wmul@multiplicand+1
 10504  0C03  319E  26D0  318B   	fcall	___wmul
 10505  0C06  3060               	movlw	96
 10506  0C07  0020               	movlb	0	; select bank0
 10507  0C08  00AF               	movwf	??_readIAnalog+7
 10508  0C09  3022               	movlw	34
 10509  0C0A  00B0               	movwf	??_readIAnalog+8
 10510  0C0B  0870               	movf	?___wmul,w
 10511  0C0C  072F               	addwf	??_readIAnalog+7,w
 10512  0C0D  00B1               	movwf	??_readIAnalog+9
 10513  0C0E  0871               	movf	?___wmul+1,w
 10514  0C0F  3D30               	addwfc	??_readIAnalog+8,w
 10515  0C10  00B2               	movwf	??_readIAnalog+10
 10516  0C11  082D               	movf	??_readIAnalog+5,w
 10517  0C12  0731               	addwf	??_readIAnalog+9,w
 10518  0C13  0086               	movwf	6
 10519  0C14  082E               	movf	??_readIAnalog+6,w
 10520  0C15  3D32               	addwfc	??_readIAnalog+10,w
 10521  0C16  0087               	movwf	7
 10522  0C17  3F40               	moviw [0]fsr1
 10523  0C18  00B3               	movwf	??_readIAnalog+11
 10524  0C19  3F41               	moviw [1]fsr1
 10525  0C1A  00B4               	movwf	??_readIAnalog+12
 10526  0C1B  0833               	movf	??_readIAnalog+11,w
 10527  0C1C  00B5               	movwf	??_readIAnalog+13
 10528  0C1D  0834               	movf	??_readIAnalog+12,w
 10529  0C1E  00B6               	movwf	??_readIAnalog+14
 10530  0C1F  3000               	movlw	0
 10531  0C20  1BB6               	btfsc	??_readIAnalog+14,7
 10532  0C21  30FF               	movlw	255
 10533  0C22  00B7               	movwf	??_readIAnalog+15
 10534  0C23  00B8               	movwf	??_readIAnalog+16
 10535  0C24  09B5               	comf	??_readIAnalog+13,f
 10536  0C25  09B6               	comf	??_readIAnalog+14,f
 10537  0C26  09B7               	comf	??_readIAnalog+15,f
 10538  0C27  09B8               	comf	??_readIAnalog+16,f
 10539  0C28  0AB5               	incf	??_readIAnalog+13,f
 10540  0C29  1903               	skipnz
 10541  0C2A  0AB6               	incf	??_readIAnalog+14,f
 10542  0C2B  1903               	skipnz
 10543  0C2C  0AB7               	incf	??_readIAnalog+15,f
 10544  0C2D  1903               	skipnz
 10545  0C2E  0AB8               	incf	??_readIAnalog+16,f
 10546  0C2F  0835               	movf	??_readIAnalog+13,w
 10547  0C30  07A9               	addwf	??_readIAnalog+1,f
 10548  0C31  0836               	movf	??_readIAnalog+14,w
 10549  0C32  3DAA               	addwfc	??_readIAnalog+2,f
 10550  0C33  0837               	movf	??_readIAnalog+15,w
 10551  0C34  3DAB               	addwfc	??_readIAnalog+3,f
 10552  0C35  0838               	movf	??_readIAnalog+16,w
 10553  0C36  3DAC               	addwfc	??_readIAnalog+4,f
 10554  0C37  0826               	movf	readIAnalog@channel,w
 10555  0C38  00B9               	movwf	??_readIAnalog+17
 10556  0C39  3001               	movlw	1
 10557  0C3A                     u3425:	
 10558  0C3A  35B9               	lslf	??_readIAnalog+17,f
 10559  0C3B  3EFF               	addlw	-1
 10560  0C3C  1D03               	skipz
 10561  0C3D  2C3A               	goto	u3425
 10562  0C3E  3539               	lslf	??_readIAnalog+17,w
 10563  0C3F  3E30               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10564  0C40  0086               	movwf	6
 10565  0C41  3001               	movlw	1	; select bank2/3
 10566  0C42  0087               	movwf	7
 10567  0C43  0829               	movf	??_readIAnalog+1,w
 10568  0C44  3FC0               	movwi [0]fsr1
 10569  0C45  082A               	movf	??_readIAnalog+2,w
 10570  0C46  3FC1               	movwi [1]fsr1
 10571  0C47  082B               	movf	??_readIAnalog+3,w
 10572  0C48  3FC2               	movwi [2]fsr1
 10573  0C49  082C               	movf	??_readIAnalog+4,w
 10574  0C4A  3FC3               	movwi [3]fsr1
 10575                           
 10576                           ;adc.c: 87: Isamples[channel][IsampleIndex] = value;
 10577  0C4B  0867               	movf	_IsampleIndex+1,w
 10578  0C4C  00A9               	movwf	??_readIAnalog+1
 10579  0C4D  0866               	movf	_IsampleIndex,w
 10580  0C4E  00A8               	movwf	??_readIAnalog
 10581  0C4F  35A8               	lslf	??_readIAnalog,f
 10582  0C50  0DA9               	rlf	??_readIAnalog+1,f
 10583  0C51  0827               	movf	readIAnalog@channel+1,w
 10584  0C52  00F1               	movwf	___wmul@multiplier+1
 10585  0C53  0826               	movf	readIAnalog@channel,w
 10586  0C54  00F0               	movwf	___wmul@multiplier
 10587  0C55  3064               	movlw	100
 10588  0C56  00F2               	movwf	___wmul@multiplicand
 10589  0C57  3000               	movlw	0
 10590  0C58  00F3               	movwf	___wmul@multiplicand+1
 10591  0C59  319E  26D0  318B   	fcall	___wmul
 10592  0C5C  3060               	movlw	96
 10593  0C5D  0020               	movlb	0	; select bank0
 10594  0C5E  00AA               	movwf	??_readIAnalog+2
 10595  0C5F  3022               	movlw	34
 10596  0C60  00AB               	movwf	??_readIAnalog+3
 10597  0C61  0870               	movf	?___wmul,w
 10598  0C62  072A               	addwf	??_readIAnalog+2,w
 10599  0C63  00AC               	movwf	??_readIAnalog+4
 10600  0C64  0871               	movf	?___wmul+1,w
 10601  0C65  3D2B               	addwfc	??_readIAnalog+3,w
 10602  0C66  00AD               	movwf	??_readIAnalog+5
 10603  0C67  0828               	movf	??_readIAnalog,w
 10604  0C68  072C               	addwf	??_readIAnalog+4,w
 10605  0C69  0086               	movwf	6
 10606  0C6A  0829               	movf	??_readIAnalog+1,w
 10607  0C6B  3D2D               	addwfc	??_readIAnalog+5,w
 10608  0C6C  0087               	movwf	7
 10609  0C6D  087B               	movf	readIAnalog@value,w
 10610  0C6E  3FC0               	movwi [0]fsr1
 10611  0C6F  087C               	movf	readIAnalog@value+1,w
 10612  0C70  3FC1               	movwi [1]fsr1
 10613                           
 10614                           ;adc.c: 89: Itotals[channel] = Itotals[channel]+Isamples[channel][IsampleIndex];
 10615  0C71  0826               	movf	readIAnalog@channel,w
 10616  0C72  00A8               	movwf	??_readIAnalog
 10617  0C73  3001               	movlw	1
 10618  0C74                     u3435:	
 10619  0C74  35A8               	lslf	??_readIAnalog,f
 10620  0C75  3EFF               	addlw	-1
 10621  0C76  1D03               	skipz
 10622  0C77  2C74               	goto	u3435
 10623  0C78  3528               	lslf	??_readIAnalog,w
 10624  0C79  3E30               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10625  0C7A  0086               	movwf	6
 10626  0C7B  3001               	movlw	1	; select bank2/3
 10627  0C7C  0087               	movwf	7
 10628  0C7D  3F40               	moviw [0]fsr1
 10629  0C7E  00A9               	movwf	??_readIAnalog+1
 10630  0C7F  3F41               	moviw [1]fsr1
 10631  0C80  00AA               	movwf	??_readIAnalog+2
 10632  0C81  3F42               	moviw [2]fsr1
 10633  0C82  00AB               	movwf	??_readIAnalog+3
 10634  0C83  3F43               	moviw [3]fsr1
 10635  0C84  00AC               	movwf	??_readIAnalog+4
 10636  0C85  0867               	movf	_IsampleIndex+1,w
 10637  0C86  00AE               	movwf	??_readIAnalog+6
 10638  0C87  0866               	movf	_IsampleIndex,w
 10639  0C88  00AD               	movwf	??_readIAnalog+5
 10640  0C89  35AD               	lslf	??_readIAnalog+5,f
 10641  0C8A  0DAE               	rlf	??_readIAnalog+6,f
 10642  0C8B  0827               	movf	readIAnalog@channel+1,w
 10643  0C8C  00F1               	movwf	___wmul@multiplier+1
 10644  0C8D  0826               	movf	readIAnalog@channel,w
 10645  0C8E  00F0               	movwf	___wmul@multiplier
 10646  0C8F  3064               	movlw	100
 10647  0C90  00F2               	movwf	___wmul@multiplicand
 10648  0C91  3000               	movlw	0
 10649  0C92  00F3               	movwf	___wmul@multiplicand+1
 10650  0C93  319E  26D0  318B   	fcall	___wmul
 10651  0C96  3060               	movlw	96
 10652  0C97  0020               	movlb	0	; select bank0
 10653  0C98  00AF               	movwf	??_readIAnalog+7
 10654  0C99  3022               	movlw	34
 10655  0C9A  00B0               	movwf	??_readIAnalog+8
 10656  0C9B  0870               	movf	?___wmul,w
 10657  0C9C  072F               	addwf	??_readIAnalog+7,w
 10658  0C9D  00B1               	movwf	??_readIAnalog+9
 10659  0C9E  0871               	movf	?___wmul+1,w
 10660  0C9F  3D30               	addwfc	??_readIAnalog+8,w
 10661  0CA0  00B2               	movwf	??_readIAnalog+10
 10662  0CA1  082D               	movf	??_readIAnalog+5,w
 10663  0CA2  0731               	addwf	??_readIAnalog+9,w
 10664  0CA3  0086               	movwf	6
 10665  0CA4  082E               	movf	??_readIAnalog+6,w
 10666  0CA5  3D32               	addwfc	??_readIAnalog+10,w
 10667  0CA6  0087               	movwf	7
 10668  0CA7  3F40               	moviw [0]fsr1
 10669  0CA8  00B3               	movwf	??_readIAnalog+11
 10670  0CA9  3F41               	moviw [1]fsr1
 10671  0CAA  00B4               	movwf	??_readIAnalog+12
 10672  0CAB  0833               	movf	??_readIAnalog+11,w
 10673  0CAC  00B5               	movwf	??_readIAnalog+13
 10674  0CAD  0834               	movf	??_readIAnalog+12,w
 10675  0CAE  00B6               	movwf	??_readIAnalog+14
 10676  0CAF  3000               	movlw	0
 10677  0CB0  1BB6               	btfsc	??_readIAnalog+14,7
 10678  0CB1  30FF               	movlw	255
 10679  0CB2  00B7               	movwf	??_readIAnalog+15
 10680  0CB3  00B8               	movwf	??_readIAnalog+16
 10681  0CB4  0835               	movf	??_readIAnalog+13,w
 10682  0CB5  07A9               	addwf	??_readIAnalog+1,f
 10683  0CB6  0836               	movf	??_readIAnalog+14,w
 10684  0CB7  3DAA               	addwfc	??_readIAnalog+2,f
 10685  0CB8  0837               	movf	??_readIAnalog+15,w
 10686  0CB9  3DAB               	addwfc	??_readIAnalog+3,f
 10687  0CBA  0838               	movf	??_readIAnalog+16,w
 10688  0CBB  3DAC               	addwfc	??_readIAnalog+4,f
 10689  0CBC  0826               	movf	readIAnalog@channel,w
 10690  0CBD  00B9               	movwf	??_readIAnalog+17
 10691  0CBE  3001               	movlw	1
 10692  0CBF                     u3445:	
 10693  0CBF  35B9               	lslf	??_readIAnalog+17,f
 10694  0CC0  3EFF               	addlw	-1
 10695  0CC1  1D03               	skipz
 10696  0CC2  2CBF               	goto	u3445
 10697  0CC3  3539               	lslf	??_readIAnalog+17,w
 10698  0CC4  3E30               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10699  0CC5  0086               	movwf	6
 10700  0CC6  3001               	movlw	1	; select bank2/3
 10701  0CC7  0087               	movwf	7
 10702  0CC8  0829               	movf	??_readIAnalog+1,w
 10703  0CC9  3FC0               	movwi [0]fsr1
 10704  0CCA  082A               	movf	??_readIAnalog+2,w
 10705  0CCB  3FC1               	movwi [1]fsr1
 10706  0CCC  082B               	movf	??_readIAnalog+3,w
 10707  0CCD  3FC2               	movwi [2]fsr1
 10708  0CCE  082C               	movf	??_readIAnalog+4,w
 10709  0CCF  3FC3               	movwi [3]fsr1
 10710                           
 10711                           ;adc.c: 91: if(channel>=(4-1))
 10712  0CD0  3000               	movlw	0
 10713  0CD1  0227               	subwf	readIAnalog@channel+1,w
 10714  0CD2  3003               	movlw	3
 10715  0CD3  1903               	skipnz
 10716  0CD4  0226               	subwf	readIAnalog@channel,w
 10717  0CD5  1C03               	skipc
 10718  0CD6  2CE4               	goto	l3036
 10719                           
 10720                           ;adc.c: 92: {
 10721                           ;adc.c: 93: IsampleIndex+=1;
 10722  0CD7  3001               	movlw	1
 10723  0CD8  07E6               	addwf	_IsampleIndex,f
 10724  0CD9  3000               	movlw	0
 10725  0CDA  3DE7               	addwfc	_IsampleIndex+1,f
 10726                           
 10727                           ;adc.c: 94: if(IsampleIndex >= 50)IsampleIndex = 0;
 10728  0CDB  3000               	movlw	0
 10729  0CDC  0267               	subwf	_IsampleIndex+1,w
 10730  0CDD  3032               	movlw	50
 10731  0CDE  1903               	skipnz
 10732  0CDF  0266               	subwf	_IsampleIndex,w
 10733  0CE0  1C03               	skipc
 10734  0CE1  2CE4               	goto	l3036
 10735  0CE2  01E6               	clrf	_IsampleIndex
 10736  0CE3  01E7               	clrf	_IsampleIndex+1
 10737  0CE4                     l3036:	
 10738                           
 10739                           ;adc.c: 95: }
 10740                           ;adc.c: 97: value = Itotals[channel]/50;
 10741  0CE4  3000               	movlw	0
 10742  0CE5  00F3               	movwf	___aldiv@divisor+3
 10743  0CE6  3000               	movlw	0
 10744  0CE7  00F2               	movwf	___aldiv@divisor+2
 10745  0CE8  3000               	movlw	0
 10746  0CE9  00F1               	movwf	___aldiv@divisor+1
 10747  0CEA  3032               	movlw	50
 10748  0CEB  00F0               	movwf	___aldiv@divisor
 10749  0CEC  0826               	movf	readIAnalog@channel,w
 10750  0CED  00A8               	movwf	??_readIAnalog
 10751  0CEE  3001               	movlw	1
 10752  0CEF                     u3475:	
 10753  0CEF  35A8               	lslf	??_readIAnalog,f
 10754  0CF0  3EFF               	addlw	-1
 10755  0CF1  1D03               	skipz
 10756  0CF2  2CEF               	goto	u3475
 10757  0CF3  3528               	lslf	??_readIAnalog,w
 10758  0CF4  3E30               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10759  0CF5  0086               	movwf	6
 10760  0CF6  3001               	movlw	1	; select bank2/3
 10761  0CF7  0087               	movwf	7
 10762  0CF8  3F40               	moviw [0]fsr1
 10763  0CF9  00F4               	movwf	___aldiv@dividend
 10764  0CFA  3F41               	moviw [1]fsr1
 10765  0CFB  00F5               	movwf	___aldiv@dividend+1
 10766  0CFC  3F42               	moviw [2]fsr1
 10767  0CFD  00F6               	movwf	___aldiv@dividend+2
 10768  0CFE  3F43               	moviw [3]fsr1
 10769  0CFF  00F7               	movwf	___aldiv@dividend+3
 10770  0D00  3194  24EA         	fcall	___aldiv
 10771  0D02  0871               	movf	?___aldiv+1,w
 10772  0D03  00FC               	movwf	readIAnalog@value+1
 10773  0D04  0870               	movf	?___aldiv,w
 10774  0D05  00FB               	movwf	readIAnalog@value
 10775                           
 10776                           ;adc.c: 99: return value;
 10777  0D06  087C               	movf	readIAnalog@value+1,w
 10778  0D07  0020               	movlb	0	; select bank0
 10779  0D08  00A7               	movwf	?_readIAnalog+1
 10780  0D09  087B               	movf	readIAnalog@value,w
 10781  0D0A  00A6               	movwf	?_readIAnalog
 10782  0D0B  0008               	return
 10783  0D0C                     __end_of_readIAnalog:	
 10784                           
 10785                           	psect	text11
 10786  14EA                     __ptext11:	
 10787 ;; *************** function ___aldiv *****************
 10788 ;; Defined at:
 10789 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
 10790 ;; Parameters:    Size  Location     Type
 10791 ;;  divisor         4    0[COMMON] long 
 10792 ;;  dividend        4    4[COMMON] long 
 10793 ;; Auto vars:     Size  Location     Type
 10794 ;;  quotient        4    2[BANK0 ] long 
 10795 ;;  sign            1    1[BANK0 ] unsigned char 
 10796 ;;  counter         1    0[BANK0 ] unsigned char 
 10797 ;; Return value:  Size  Location     Type
 10798 ;;                  4    0[COMMON] long 
 10799 ;; Registers used:
 10800 ;;		wreg, status,2, status,0
 10801 ;; Tracked objects:
 10802 ;;		On entry : 0/0
 10803 ;;		On exit  : 0/0
 10804 ;;		Unchanged: 0/0
 10805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10806 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10807 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10808 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10809 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10810 ;;Total ram usage:       15 bytes
 10811 ;; Hardware stack levels used:    1
 10812 ;; This function calls:
 10813 ;;		Nothing
 10814 ;; This function is called by:
 10815 ;;		_readIAnalog
 10816 ;;		_readVAnalog
 10817 ;; This function uses a non-reentrant model
 10818 ;;
 10819                           
 10820                           
 10821                           ;psect for function ___aldiv
 10822  14EA                     ___aldiv:	
 10823                           
 10824                           ;incstack = 0
 10825                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 10826  14EA  0020               	movlb	0	; select bank0
 10827  14EB  01A1               	clrf	___aldiv@sign
 10828  14EC  1FF3               	btfss	___aldiv@divisor+3,7
 10829  14ED  2CFB               	goto	l683
 10830  14EE  09F0               	comf	___aldiv@divisor,f
 10831  14EF  09F1               	comf	___aldiv@divisor+1,f
 10832  14F0  09F2               	comf	___aldiv@divisor+2,f
 10833  14F1  09F3               	comf	___aldiv@divisor+3,f
 10834  14F2  0AF0               	incf	___aldiv@divisor,f
 10835  14F3  1903               	skipnz
 10836  14F4  0AF1               	incf	___aldiv@divisor+1,f
 10837  14F5  1903               	skipnz
 10838  14F6  0AF2               	incf	___aldiv@divisor+2,f
 10839  14F7  1903               	skipnz
 10840  14F8  0AF3               	incf	___aldiv@divisor+3,f
 10841  14F9  01A1               	clrf	___aldiv@sign
 10842  14FA  0AA1               	incf	___aldiv@sign,f
 10843  14FB                     l683:	
 10844  14FB  1FF7               	btfss	___aldiv@dividend+3,7
 10845  14FC  2D0C               	goto	l2876
 10846  14FD  09F4               	comf	___aldiv@dividend,f
 10847  14FE  09F5               	comf	___aldiv@dividend+1,f
 10848  14FF  09F6               	comf	___aldiv@dividend+2,f
 10849  1500  09F7               	comf	___aldiv@dividend+3,f
 10850  1501  0AF4               	incf	___aldiv@dividend,f
 10851  1502  1903               	skipnz
 10852  1503  0AF5               	incf	___aldiv@dividend+1,f
 10853  1504  1903               	skipnz
 10854  1505  0AF6               	incf	___aldiv@dividend+2,f
 10855  1506  1903               	skipnz
 10856  1507  0AF7               	incf	___aldiv@dividend+3,f
 10857  1508  3001               	movlw	1
 10858  1509  00F8               	movwf	??___aldiv
 10859  150A  0878               	movf	??___aldiv,w
 10860  150B  06A1               	xorwf	___aldiv@sign,f
 10861  150C                     l2876:	
 10862  150C  3000               	movlw	0
 10863  150D  00A5               	movwf	___aldiv@quotient+3
 10864  150E  3000               	movlw	0
 10865  150F  00A4               	movwf	___aldiv@quotient+2
 10866  1510  3000               	movlw	0
 10867  1511  00A3               	movwf	___aldiv@quotient+1
 10868  1512  3000               	movlw	0
 10869  1513  00A2               	movwf	___aldiv@quotient
 10870  1514  0873               	movf	___aldiv@divisor+3,w
 10871  1515  0472               	iorwf	___aldiv@divisor+2,w
 10872  1516  0471               	iorwf	___aldiv@divisor+1,w
 10873  1517  0470               	iorwf	___aldiv@divisor,w
 10874  1518  1903               	skipnz
 10875  1519  2D55               	goto	l2898
 10876  151A  01A0               	clrf	___aldiv@counter
 10877  151B  0AA0               	incf	___aldiv@counter,f
 10878  151C                     l2884:	
 10879  151C  1BF3               	btfsc	___aldiv@divisor+3,7
 10880  151D  2D2A               	goto	l2886
 10881  151E  3001               	movlw	1
 10882  151F                     u3095:	
 10883  151F  35F0               	lslf	___aldiv@divisor,f
 10884  1520  0DF1               	rlf	___aldiv@divisor+1,f
 10885  1521  0DF2               	rlf	___aldiv@divisor+2,f
 10886  1522  0DF3               	rlf	___aldiv@divisor+3,f
 10887  1523  0B89               	decfsz	9,f
 10888  1524  2D1F               	goto	u3095
 10889  1525  3001               	movlw	1
 10890  1526  00F8               	movwf	??___aldiv
 10891  1527  0878               	movf	??___aldiv,w
 10892  1528  07A0               	addwf	___aldiv@counter,f
 10893  1529  2D1C               	goto	l2884
 10894  152A                     l2886:	
 10895  152A  3001               	movlw	1
 10896  152B                     u3115:	
 10897  152B  35A2               	lslf	___aldiv@quotient,f
 10898  152C  0DA3               	rlf	___aldiv@quotient+1,f
 10899  152D  0DA4               	rlf	___aldiv@quotient+2,f
 10900  152E  0DA5               	rlf	___aldiv@quotient+3,f
 10901  152F  0B89               	decfsz	9,f
 10902  1530  2D2B               	goto	u3115
 10903  1531  0873               	movf	___aldiv@divisor+3,w
 10904  1532  0277               	subwf	___aldiv@dividend+3,w
 10905  1533  1D03               	skipz
 10906  1534  2D3F               	goto	u3125
 10907  1535  0872               	movf	___aldiv@divisor+2,w
 10908  1536  0276               	subwf	___aldiv@dividend+2,w
 10909  1537  1D03               	skipz
 10910  1538  2D3F               	goto	u3125
 10911  1539  0871               	movf	___aldiv@divisor+1,w
 10912  153A  0275               	subwf	___aldiv@dividend+1,w
 10913  153B  1D03               	skipz
 10914  153C  2D3F               	goto	u3125
 10915  153D  0870               	movf	___aldiv@divisor,w
 10916  153E  0274               	subwf	___aldiv@dividend,w
 10917  153F                     u3125:	
 10918  153F  1C03               	skipc
 10919  1540  2D4A               	goto	l2894
 10920  1541  0870               	movf	___aldiv@divisor,w
 10921  1542  02F4               	subwf	___aldiv@dividend,f
 10922  1543  0871               	movf	___aldiv@divisor+1,w
 10923  1544  3BF5               	subwfb	___aldiv@dividend+1,f
 10924  1545  0872               	movf	___aldiv@divisor+2,w
 10925  1546  3BF6               	subwfb	___aldiv@dividend+2,f
 10926  1547  0873               	movf	___aldiv@divisor+3,w
 10927  1548  3BF7               	subwfb	___aldiv@dividend+3,f
 10928  1549  1422               	bsf	___aldiv@quotient,0
 10929  154A                     l2894:	
 10930  154A  3001               	movlw	1
 10931  154B                     u3135:	
 10932  154B  36F3               	lsrf	___aldiv@divisor+3,f
 10933  154C  0CF2               	rrf	___aldiv@divisor+2,f
 10934  154D  0CF1               	rrf	___aldiv@divisor+1,f
 10935  154E  0CF0               	rrf	___aldiv@divisor,f
 10936  154F  0B89               	decfsz	9,f
 10937  1550  2D4B               	goto	u3135
 10938  1551  3001               	movlw	1
 10939  1552  02A0               	subwf	___aldiv@counter,f
 10940  1553  1D03               	btfss	3,2
 10941  1554  2D2A               	goto	l2886
 10942  1555                     l2898:	
 10943  1555  0821               	movf	___aldiv@sign,w
 10944  1556  1903               	btfsc	3,2
 10945  1557  2D63               	goto	l2902
 10946  1558  09A2               	comf	___aldiv@quotient,f
 10947  1559  09A3               	comf	___aldiv@quotient+1,f
 10948  155A  09A4               	comf	___aldiv@quotient+2,f
 10949  155B  09A5               	comf	___aldiv@quotient+3,f
 10950  155C  0AA2               	incf	___aldiv@quotient,f
 10951  155D  1903               	skipnz
 10952  155E  0AA3               	incf	___aldiv@quotient+1,f
 10953  155F  1903               	skipnz
 10954  1560  0AA4               	incf	___aldiv@quotient+2,f
 10955  1561  1903               	skipnz
 10956  1562  0AA5               	incf	___aldiv@quotient+3,f
 10957  1563                     l2902:	
 10958  1563  0825               	movf	___aldiv@quotient+3,w
 10959  1564  00F3               	movwf	?___aldiv+3
 10960  1565  0824               	movf	___aldiv@quotient+2,w
 10961  1566  00F2               	movwf	?___aldiv+2
 10962  1567  0823               	movf	___aldiv@quotient+1,w
 10963  1568  00F1               	movwf	?___aldiv+1
 10964  1569  0822               	movf	___aldiv@quotient,w
 10965  156A  00F0               	movwf	?___aldiv
 10966  156B  0008               	return
 10967  156C                     __end_of___aldiv:	
 10968                           
 10969                           	psect	text12
 10970  1468                     __ptext12:	
 10971 ;; *************** function _readButton *****************
 10972 ;; Defined at:
 10973 ;;		line 8 in file "buttons.c"
 10974 ;; Parameters:    Size  Location     Type
 10975 ;;		None
 10976 ;; Auto vars:     Size  Location     Type
 10977 ;;		None
 10978 ;; Return value:  Size  Location     Type
 10979 ;;                  1    wreg      unsigned char 
 10980 ;; Registers used:
 10981 ;;		wreg, status,2, status,0, pclath, cstack
 10982 ;; Tracked objects:
 10983 ;;		On entry : 0/0
 10984 ;;		On exit  : 0/0
 10985 ;;		Unchanged: 0/0
 10986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10989 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10990 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10991 ;;Total ram usage:        2 bytes
 10992 ;; Hardware stack levels used:    1
 10993 ;; Hardware stack levels required when called:    1
 10994 ;; This function calls:
 10995 ;;		_ADCRead
 10996 ;; This function is called by:
 10997 ;;		_main
 10998 ;; This function uses a non-reentrant model
 10999 ;;
 11000                           
 11001                           
 11002                           ;psect for function _readButton
 11003  1468                     _readButton:	
 11004                           
 11005                           ;buttons.c: 10: readButtons=ADCRead(11);
 11006                           
 11007                           ;incstack = 0
 11008                           ; Regs used in _readButton: [wreg+status,2+status,0+pclath+cstack]
 11009  1468  300B               	movlw	11
 11010  1469  319E  268F  3194   	fcall	_ADCRead
 11011  146C  0871               	movf	?_ADCRead+1,w
 11012  146D  0020               	movlb	0	; select bank0
 11013  146E  00DF               	movwf	_readButtons+1
 11014  146F  0870               	movf	?_ADCRead,w
 11015  1470  00DE               	movwf	_readButtons
 11016                           
 11017                           ;buttons.c: 12: if(readButtons>=365&&readButtons<405)
 11018  1471  085F               	movf	_readButtons+1,w
 11019  1472  3A80               	xorlw	128
 11020  1473  00F4               	movwf	??_readButton
 11021  1474  3081               	movlw	129
 11022  1475  0274               	subwf	??_readButton,w
 11023  1476  1D03               	skipz
 11024  1477  2C7A               	goto	u3815
 11025  1478  306D               	movlw	109
 11026  1479  025E               	subwf	_readButtons,w
 11027  147A                     u3815:	
 11028  147A  1C03               	skipc
 11029  147B  2C8C               	goto	l3158
 11030  147C  0020               	movlb	0	; select bank0
 11031  147D  085F               	movf	_readButtons+1,w
 11032  147E  3A80               	xorlw	128
 11033  147F  00F4               	movwf	??_readButton
 11034  1480  3081               	movlw	129
 11035  1481  0274               	subwf	??_readButton,w
 11036  1482  1D03               	skipz
 11037  1483  2C86               	goto	u3825
 11038  1484  3095               	movlw	149
 11039  1485  025E               	subwf	_readButtons,w
 11040  1486                     u3825:	
 11041  1486  1803               	skipnc
 11042  1487  2C8C               	goto	l3158
 11043                           
 11044                           ;buttons.c: 13: {
 11045                           ;buttons.c: 14: button=1;
 11046  1488  0020               	movlb	0	; select bank0
 11047  1489  01EA               	clrf	_button
 11048  148A  0AEA               	incf	_button,f
 11049                           
 11050                           ;buttons.c: 15: }
 11051  148B  2CBA               	goto	l3170
 11052  148C                     l3158:	
 11053                           
 11054                           ;buttons.c: 17: else if(readButtons>=535&&readButtons<590)
 11055  148C  0020               	movlb	0	; select bank0
 11056  148D  085F               	movf	_readButtons+1,w
 11057  148E  3A80               	xorlw	128
 11058  148F  00F4               	movwf	??_readButton
 11059  1490  3082               	movlw	130
 11060  1491  0274               	subwf	??_readButton,w
 11061  1492  1D03               	skipz
 11062  1493  2C96               	goto	u3835
 11063  1494  3017               	movlw	23
 11064  1495  025E               	subwf	_readButtons,w
 11065  1496                     u3835:	
 11066  1496  1C03               	skipc
 11067  1497  2CA6               	goto	l3164
 11068  1498  0020               	movlb	0	; select bank0
 11069  1499  085F               	movf	_readButtons+1,w
 11070  149A  3A80               	xorlw	128
 11071  149B  00F4               	movwf	??_readButton
 11072  149C  3082               	movlw	130
 11073  149D  0274               	subwf	??_readButton,w
 11074  149E  1D03               	skipz
 11075  149F  2CA2               	goto	u3845
 11076  14A0  304E               	movlw	78
 11077  14A1  025E               	subwf	_readButtons,w
 11078  14A2                     u3845:	
 11079  14A2  1803               	skipnc
 11080  14A3  2CA6               	goto	l3164
 11081                           
 11082                           ;buttons.c: 18: {
 11083                           ;buttons.c: 19: button=2;
 11084  14A4  3002               	movlw	2
 11085  14A5  2CB3               	goto	L8
 11086  14A6                     l3164:	
 11087                           ;buttons.c: 20: }
 11088                           
 11089                           
 11090                           ;buttons.c: 22: else if(readButtons>745)
 11091  14A6  0020               	movlb	0	; select bank0
 11092  14A7  085F               	movf	_readButtons+1,w
 11093  14A8  3A80               	xorlw	128
 11094  14A9  00F4               	movwf	??_readButton
 11095  14AA  3082               	movlw	130
 11096  14AB  0274               	subwf	??_readButton,w
 11097  14AC  1D03               	skipz
 11098  14AD  2CB0               	goto	u3855
 11099  14AE  30EA               	movlw	234
 11100  14AF  025E               	subwf	_readButtons,w
 11101  14B0                     u3855:	
 11102  14B0  1C03               	skipc
 11103  14B1  2CB8               	goto	l3168
 11104                           
 11105                           ;buttons.c: 23: {
 11106                           ;buttons.c: 24: button=3;
 11107  14B2  3003               	movlw	3
 11108  14B3                     L8:	
 11109  14B3  00F4               	movwf	??_readButton
 11110  14B4  0874               	movf	??_readButton,w
 11111  14B5  0020               	movlb	0	; select bank0
 11112  14B6  00EA               	movwf	_button
 11113                           
 11114                           ;buttons.c: 25: }
 11115  14B7  2CBA               	goto	l3170
 11116  14B8                     l3168:	
 11117                           
 11118                           ;buttons.c: 27: else
 11119                           ;buttons.c: 28: {
 11120                           ;buttons.c: 29: button=0;
 11121  14B8  0020               	movlb	0	; select bank0
 11122  14B9  01EA               	clrf	_button
 11123  14BA                     l3170:	
 11124                           
 11125                           ;buttons.c: 30: }
 11126                           ;buttons.c: 32: if (button!=0)
 11127  14BA  086A               	movf	_button,w
 11128  14BB  1903               	btfsc	3,2
 11129  14BC  2CE7               	goto	l3190
 11130                           
 11131                           ;buttons.c: 33: {
 11132                           ;buttons.c: 34: if (button!=lastButton)
 11133  14BD  086A               	movf	_button,w
 11134  14BE  0669               	xorwf	_lastButton,w
 11135  14BF  1903               	skipnz
 11136  14C0  2CC6               	goto	l3178
 11137                           
 11138                           ;buttons.c: 35: {
 11139                           ;buttons.c: 36: lastButton=button;
 11140  14C1  086A               	movf	_button,w
 11141  14C2  00F4               	movwf	??_readButton
 11142  14C3  0874               	movf	??_readButton,w
 11143  14C4  00E9               	movwf	_lastButton
 11144  14C5  2CE7               	goto	l3190
 11145  14C6                     l3178:	
 11146                           ;buttons.c: 38: }
 11147                           
 11148                           ;buttons.c: 37: j=0;
 11149                           
 11150                           
 11151                           ;buttons.c: 39: else
 11152                           ;buttons.c: 40: {
 11153                           ;buttons.c: 41: j+=1;
 11154  14C6  3001               	movlw	1
 11155  14C7  00F4               	movwf	??_readButton
 11156  14C8  0874               	movf	??_readButton,w
 11157  14C9  07E8               	addwf	_j,f
 11158                           
 11159                           ;buttons.c: 43: if(j==1)
 11160  14CA  0368               	decf	_j,w
 11161  14CB  1D03               	btfss	3,2
 11162  14CC  2CCF               	goto	l3184
 11163                           
 11164                           ;buttons.c: 44: {
 11165                           ;buttons.c: 45: return (lastButton);
 11166  14CD  0869               	movf	_lastButton,w
 11167  14CE  0008               	return
 11168  14CF                     l3184:	
 11169                           
 11170                           ;buttons.c: 46: }
 11171                           ;buttons.c: 48: if (j>10)
 11172  14CF  0868               	movf	_j,w
 11173  14D0  3A80               	xorlw	128
 11174  14D1  3E75               	addlw	-139
 11175  14D2  1C03               	skipc
 11176  14D3  2CE8               	goto	l3192
 11177                           
 11178                           ;buttons.c: 49: {
 11179                           ;buttons.c: 50: _delay((unsigned long)((25)*(32000000/4000.0)));
 11180  14D4  3002               	movlw	2
 11181  14D5  00F5               	movwf	??_readButton+1
 11182  14D6  3004               	movlw	4
 11183  14D7  00F4               	movwf	??_readButton
 11184  14D8  30BA               	movlw	186
 11185  14D9                     u4517:	
 11186  14D9  0B89               	decfsz	9,f
 11187  14DA  2CD9               	goto	u4517
 11188  14DB  0BF4               	decfsz	??_readButton,f
 11189  14DC  2CD9               	goto	u4517
 11190  14DD  0BF5               	decfsz	??_readButton+1,f
 11191  14DE  2CD9               	goto	u4517
 11192  14DF  3200               	nop2
 11193                           
 11194                           ;buttons.c: 51: j=10;
 11195  14E0  300A               	movlw	10
 11196  14E1  00F4               	movwf	??_readButton
 11197  14E2  0874               	movf	??_readButton,w
 11198  14E3  0020               	movlb	0	; select bank0
 11199  14E4  00E8               	movwf	_j
 11200                           
 11201                           ;buttons.c: 52: return (lastButton);
 11202  14E5  0869               	movf	_lastButton,w
 11203  14E6  0008               	return
 11204  14E7                     l3190:	
 11205                           ;buttons.c: 53: }
 11206                           ;buttons.c: 54: }
 11207                           ;buttons.c: 55: goto end;
 11208                           
 11209                           
 11210                           ;buttons.c: 56: }
 11211                           ;buttons.c: 58: j=0;
 11212  14E7  01E8               	clrf	_j
 11213  14E8                     l3192:	
 11214                           ;buttons.c: 60: end:
 11215                           
 11216                           
 11217                           ;buttons.c: 62: return (0);
 11218  14E8  3000               	movlw	0
 11219  14E9  0008               	return
 11220  14EA                     __end_of_readButton:	
 11221                           
 11222                           	psect	text13
 11223  1E8F                     __ptext13:	
 11224 ;; *************** function _ADCRead *****************
 11225 ;; Defined at:
 11226 ;;		line 21 in file "adc.c"
 11227 ;; Parameters:    Size  Location     Type
 11228 ;;  channel         1    wreg     enum E14315
 11229 ;; Auto vars:     Size  Location     Type
 11230 ;;  channel         1    3[COMMON] enum E14315
 11231 ;; Return value:  Size  Location     Type
 11232 ;;                  2    0[COMMON] int 
 11233 ;; Registers used:
 11234 ;;		wreg
 11235 ;; Tracked objects:
 11236 ;;		On entry : 0/0
 11237 ;;		On exit  : 0/0
 11238 ;;		Unchanged: 0/0
 11239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11240 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11241 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11243 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11244 ;;Total ram usage:        4 bytes
 11245 ;; Hardware stack levels used:    1
 11246 ;; This function calls:
 11247 ;;		Nothing
 11248 ;; This function is called by:
 11249 ;;		_readIAnalog
 11250 ;;		_readVAnalog
 11251 ;;		_readButton
 11252 ;;		_main
 11253 ;; This function uses a non-reentrant model
 11254 ;;
 11255                           
 11256                           
 11257                           ;psect for function _ADCRead
 11258  1E8F                     _ADCRead:	
 11259                           
 11260                           ;incstack = 0
 11261                           ; Regs used in _ADCRead: [wreg]
 11262                           ;ADCRead@channel stored from wreg
 11263  1E8F  00F3               	movwf	ADCRead@channel
 11264                           
 11265                           ;adc.c: 23: ADPCH = channel_VSS;
 11266  1E90  303C               	movlw	60
 11267  1E91  0021               	movlb	1	; select bank1
 11268  1E92  009E               	movwf	30	;volatile
 11269                           
 11270                           ;adc.c: 25: ADCON0bits.ADON = 1;
 11271  1E93  1793               	bsf	19,7	;volatile
 11272                           
 11273                           ;adc.c: 27: ADCON0bits.ADCONT = 0;
 11274  1E94  1313               	bcf	19,6	;volatile
 11275                           
 11276                           ;adc.c: 29: ADCON0bits.ADGO = 1;
 11277  1E95  1413               	bsf	19,0	;volatile
 11278  1E96                     l65:	
 11279                           ;adc.c: 32: {
 11280                           
 11281                           ;adc.c: 31: while(ADCON0bits.ADGO)
 11282                           
 11283  1E96  1813               	btfsc	19,0	;volatile
 11284  1E97  2E96               	goto	l65
 11285                           
 11286                           ;adc.c: 33: }
 11287                           ;adc.c: 35: ADPCH = channel;
 11288  1E98  0873               	movf	ADCRead@channel,w
 11289  1E99  009E               	movwf	30	;volatile
 11290                           
 11291                           ;adc.c: 37: ADCON0bits.ADON = 1;
 11292  1E9A  1793               	bsf	19,7	;volatile
 11293                           
 11294                           ;adc.c: 39: ADCON0bits.ADCONT = 0;
 11295  1E9B  1313               	bcf	19,6	;volatile
 11296                           
 11297                           ;adc.c: 41: ADCON0bits.ADGO = 1;
 11298  1E9C  1413               	bsf	19,0	;volatile
 11299  1E9D                     l68:	
 11300                           ;adc.c: 44: {
 11301                           
 11302                           ;adc.c: 43: while(ADCON0bits.ADGO)
 11303                           
 11304  1E9D  1813               	btfsc	19,0	;volatile
 11305  1E9E  2E9D               	goto	l68
 11306                           
 11307                           ;adc.c: 45: }
 11308                           ;adc.c: 47: return ((ADRESH<<8)+ADRESL);
 11309  1E9F  080D               	movf	13,w	;volatile
 11310  1EA0  00F1               	movwf	?_ADCRead+1
 11311  1EA1  080C               	movf	12,w	;volatile
 11312  1EA2  00F0               	movwf	?_ADCRead
 11313  1EA3  0008               	return
 11314  1EA4                     __end_of_ADCRead:	
 11315                           
 11316                           	psect	text14
 11317  0D0C                     __ptext14:	
 11318 ;; *************** function _cc_cv_mode *****************
 11319 ;; Defined at:
 11320 ;;		line 103 in file "battery_charger.c"
 11321 ;; Parameters:    Size  Location     Type
 11322 ;;  z               1    wreg     unsigned char 
 11323 ;; Auto vars:     Size  Location     Type
 11324 ;;  z               1   38[BANK0 ] unsigned char 
 11325 ;; Return value:  Size  Location     Type
 11326 ;;                  1    wreg      void 
 11327 ;; Registers used:
 11328 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11329 ;; Tracked objects:
 11330 ;;		On entry : 0/0
 11331 ;;		On exit  : 0/0
 11332 ;;		Unchanged: 0/0
 11333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11335 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11336 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11337 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11338 ;;Total ram usage:        8 bytes
 11339 ;; Hardware stack levels used:    1
 11340 ;; Hardware stack levels required when called:    2
 11341 ;; This function calls:
 11342 ;;		___awtoft
 11343 ;;		___ftmul
 11344 ;;		___fttol
 11345 ;; This function is called by:
 11346 ;;		_main
 11347 ;; This function uses a non-reentrant model
 11348 ;;
 11349                           
 11350                           
 11351                           ;psect for function _cc_cv_mode
 11352  0D0C                     _cc_cv_mode:	
 11353                           
 11354                           ;incstack = 0
 11355                           ; Regs used in _cc_cv_mode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11356                           ;cc_cv_mode@z stored from wreg
 11357  0D0C  0020               	movlb	0	; select bank0
 11358  0D0D  00C6               	movwf	cc_cv_mode@z
 11359                           
 11360                           ;battery_charger.c: 105: if(voltage[z]>=Vref[z])
 11361  0D0E  3546               	lslf	cc_cv_mode@z,w
 11362  0D0F  3EB0               	addlw	(low (_Vref| 0))& (0+255)
 11363  0D10  0086               	movwf	6
 11364  0D11  0187               	clrf	7
 11365  0D12  3F40               	moviw [0]fsr1
 11366  0D13  00BF               	movwf	??_cc_cv_mode
 11367  0D14  3F41               	moviw [1]fsr1
 11368  0D15  00C0               	movwf	??_cc_cv_mode+1
 11369  0D16  3546               	lslf	cc_cv_mode@z,w
 11370  0D17  3EA0               	addlw	(low (_voltage| 0))& (0+255)
 11371  0D18  0086               	movwf	6
 11372  0D19  0187               	clrf	7
 11373  0D1A  3F40               	moviw [0]fsr1
 11374  0D1B  00C1               	movwf	??_cc_cv_mode+2
 11375  0D1C  3F41               	moviw [1]fsr1
 11376  0D1D  00C2               	movwf	??_cc_cv_mode+3
 11377  0D1E  0842               	movf	??_cc_cv_mode+3,w
 11378  0D1F  3A80               	xorlw	128
 11379  0D20  00C3               	movwf	??_cc_cv_mode+4
 11380  0D21  0840               	movf	??_cc_cv_mode+1,w
 11381  0D22  3A80               	xorlw	128
 11382  0D23  0243               	subwf	??_cc_cv_mode+4,w
 11383  0D24  1D03               	skipz
 11384  0D25  2D28               	goto	u3715
 11385  0D26  083F               	movf	??_cc_cv_mode,w
 11386  0D27  0241               	subwf	??_cc_cv_mode+2,w
 11387  0D28                     u3715:	
 11388  0D28  1C03               	skipc
 11389  0D29  2D68               	goto	l3134
 11390                           
 11391                           ;battery_charger.c: 106: {
 11392                           ;battery_charger.c: 107: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 11393  0D2A  0020               	movlb	0	; select bank0
 11394  0D2B  0846               	movf	cc_cv_mode@z,w
 11395  0D2C  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 11396  0D2D  0086               	movwf	6
 11397  0D2E  0187               	clrf	7
 11398  0D2F  0801               	movf	1,w
 11399  0D30  3A80               	xorlw	128
 11400  0D31  3E77               	addlw	-137
 11401  0D32  1803               	skipnc
 11402  0D33  2D3C               	goto	l147
 11403  0D34  3001               	movlw	1
 11404  0D35  00BF               	movwf	??_cc_cv_mode
 11405  0D36  0846               	movf	cc_cv_mode@z,w
 11406  0D37  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 11407  0D38  0086               	movwf	6
 11408  0D39  0187               	clrf	7
 11409  0D3A  083F               	movf	??_cc_cv_mode,w
 11410  0D3B  0781               	addwf	1,f
 11411  0D3C                     l147:	
 11412                           
 11413                           ;battery_charger.c: 108: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 11414  0D3C  0846               	movf	cc_cv_mode@z,w
 11415  0D3D  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 11416  0D3E  0086               	movwf	6
 11417  0D3F  0187               	clrf	7
 11418  0D40  0801               	movf	1,w
 11419  0D41  3A80               	xorlw	128
 11420  0D42  3E77               	addlw	-137
 11421  0D43  1803               	skipnc
 11422  0D44  2D4D               	goto	l148
 11423  0D45  3001               	movlw	1
 11424  0D46  00BF               	movwf	??_cc_cv_mode
 11425  0D47  0846               	movf	cc_cv_mode@z,w
 11426  0D48  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 11427  0D49  0086               	movwf	6
 11428  0D4A  0187               	clrf	7
 11429  0D4B  083F               	movf	??_cc_cv_mode,w
 11430  0D4C  0781               	addwf	1,f
 11431  0D4D                     l148:	
 11432                           
 11433                           ;battery_charger.c: 110: if(cc_cv[z])
 11434  0D4D  0846               	movf	cc_cv_mode@z,w
 11435  0D4E  3EC6               	addlw	(low (_cc_cv| 0))& (0+255)
 11436  0D4F  0086               	movwf	6
 11437  0D50  0187               	clrf	7
 11438  0D51  0801               	movf	1,w
 11439  0D52  1903               	btfsc	3,2
 11440  0D53  2D5B               	goto	l3130
 11441                           
 11442                           ;battery_charger.c: 111: {
 11443                           ;battery_charger.c: 112: cc_cv[z]-=1;
 11444  0D54  0846               	movf	cc_cv_mode@z,w
 11445  0D55  3EC6               	addlw	(low (_cc_cv| 0))& (0+255)
 11446  0D56  0086               	movwf	6
 11447  0D57  0187               	clrf	7
 11448  0D58  3001               	movlw	1
 11449  0D59  0281               	subwf	1,f
 11450                           
 11451                           ;battery_charger.c: 113: }
 11452  0D5A  2D90               	goto	l152
 11453  0D5B                     l3130:	
 11454                           
 11455                           ;battery_charger.c: 114: else
 11456                           ;battery_charger.c: 115: {
 11457                           ;battery_charger.c: 116: if(Imode[z])
 11458  0D5B  0846               	movf	cc_cv_mode@z,w
 11459  0D5C  3E62               	addlw	(low (_Imode| 0))& (0+255)
 11460  0D5D  0086               	movwf	6
 11461  0D5E  0187               	clrf	7
 11462  0D5F  0801               	movf	1,w
 11463  0D60  1903               	btfsc	3,2
 11464  0D61  2D90               	goto	l152
 11465                           
 11466                           ;battery_charger.c: 117: {
 11467                           ;battery_charger.c: 118: Imode[z]=0;
 11468  0D62  0846               	movf	cc_cv_mode@z,w
 11469  0D63  3E62               	addlw	(low (_Imode| 0))& (0+255)
 11470  0D64  0086               	movwf	6
 11471  0D65  0187               	clrf	7
 11472  0D66  0181               	clrf	1
 11473                           
 11474                           ;battery_charger.c: 119: }
 11475                           ;battery_charger.c: 120: }
 11476                           ;battery_charger.c: 121: }
 11477  0D67  2D90               	goto	l152
 11478  0D68                     l3134:	
 11479                           
 11480                           ;battery_charger.c: 122: else
 11481                           ;battery_charger.c: 123: {
 11482                           ;battery_charger.c: 124: VHoldMode[z]-=1;
 11483  0D68  30FF               	movlw	255
 11484  0D69  0020               	movlb	0	; select bank0
 11485  0D6A  00BF               	movwf	??_cc_cv_mode
 11486  0D6B  0846               	movf	cc_cv_mode@z,w
 11487  0D6C  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 11488  0D6D  0086               	movwf	6
 11489  0D6E  0187               	clrf	7
 11490  0D6F  083F               	movf	??_cc_cv_mode,w
 11491  0D70  0781               	addwf	1,f
 11492                           
 11493                           ;battery_charger.c: 125: if(VHoldMode[z]<(9*-1))
 11494  0D71  0846               	movf	cc_cv_mode@z,w
 11495  0D72  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 11496  0D73  0086               	movwf	6
 11497  0D74  0187               	clrf	7
 11498  0D75  0801               	movf	1,w
 11499  0D76  3A80               	xorlw	128
 11500  0D77  3E89               	addlw	137
 11501  0D78  1803               	skipnc
 11502  0D79  2D90               	goto	l152
 11503                           
 11504                           ;battery_charger.c: 126: {
 11505                           ;battery_charger.c: 127: Imode[z]=1;
 11506  0D7A  0846               	movf	cc_cv_mode@z,w
 11507  0D7B  3E62               	addlw	(low (_Imode| 0))& (0+255)
 11508  0D7C  0086               	movwf	6
 11509  0D7D  0187               	clrf	7
 11510  0D7E  0181               	clrf	1
 11511  0D7F  0A81               	incf	1,f
 11512                           
 11513                           ;battery_charger.c: 128: cc_cv[z]=(9*2);
 11514  0D80  3012               	movlw	18
 11515  0D81  00BF               	movwf	??_cc_cv_mode
 11516  0D82  0846               	movf	cc_cv_mode@z,w
 11517  0D83  3EC6               	addlw	(low (_cc_cv| 0))& (0+255)
 11518  0D84  0086               	movwf	6
 11519  0D85  0187               	clrf	7
 11520  0D86  083F               	movf	??_cc_cv_mode,w
 11521  0D87  0081               	movwf	1
 11522                           
 11523                           ;battery_charger.c: 129: VHoldMode[z]=(9*-1);
 11524  0D88  30F7               	movlw	247
 11525  0D89  00BF               	movwf	??_cc_cv_mode
 11526  0D8A  0846               	movf	cc_cv_mode@z,w
 11527  0D8B  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 11528  0D8C  0086               	movwf	6
 11529  0D8D  0187               	clrf	7
 11530  0D8E  083F               	movf	??_cc_cv_mode,w
 11531  0D8F  0081               	movwf	1
 11532  0D90                     l152:	
 11533                           
 11534                           ;battery_charger.c: 130: }
 11535                           ;battery_charger.c: 131: }
 11536                           ;battery_charger.c: 133: if(current[z]>Iref[z])
 11537  0D90  3546               	lslf	cc_cv_mode@z,w
 11538  0D91  3EA8               	addlw	(low (_current| 0))& (0+255)
 11539  0D92  0086               	movwf	6
 11540  0D93  0187               	clrf	7
 11541  0D94  3F40               	moviw [0]fsr1
 11542  0D95  00BF               	movwf	??_cc_cv_mode
 11543  0D96  3F41               	moviw [1]fsr1
 11544  0D97  00C0               	movwf	??_cc_cv_mode+1
 11545  0D98  3546               	lslf	cc_cv_mode@z,w
 11546  0D99  3EB8               	addlw	(low (_Iref| 0))& (0+255)
 11547  0D9A  0086               	movwf	6
 11548  0D9B  0187               	clrf	7
 11549  0D9C  3F40               	moviw [0]fsr1
 11550  0D9D  00C1               	movwf	??_cc_cv_mode+2
 11551  0D9E  3F41               	moviw [1]fsr1
 11552  0D9F  00C2               	movwf	??_cc_cv_mode+3
 11553  0DA0  0842               	movf	??_cc_cv_mode+3,w
 11554  0DA1  3A80               	xorlw	128
 11555  0DA2  00C3               	movwf	??_cc_cv_mode+4
 11556  0DA3  0840               	movf	??_cc_cv_mode+1,w
 11557  0DA4  3A80               	xorlw	128
 11558  0DA5  0243               	subwf	??_cc_cv_mode+4,w
 11559  0DA6  1D03               	skipz
 11560  0DA7  2DAA               	goto	u3775
 11561  0DA8  083F               	movf	??_cc_cv_mode,w
 11562  0DA9  0241               	subwf	??_cc_cv_mode+2,w
 11563  0DAA                     u3775:	
 11564  0DAA  1803               	skipnc
 11565  0DAB  0008               	return
 11566                           
 11567                           ;battery_charger.c: 134: {
 11568                           ;battery_charger.c: 135: if(!(Imode[z]))
 11569  0DAC  0020               	movlb	0	; select bank0
 11570  0DAD  0846               	movf	cc_cv_mode@z,w
 11571  0DAE  3E62               	addlw	(low (_Imode| 0))& (0+255)
 11572  0DAF  0086               	movwf	6
 11573  0DB0  0187               	clrf	7
 11574  0DB1  0801               	movf	1,w
 11575  0DB2  1D03               	btfss	3,2
 11576  0DB3  0008               	return
 11577                           
 11578                           ;battery_charger.c: 136: {
 11579                           ;battery_charger.c: 137: if(batteryState[z]==FLOAT)
 11580  0DB4  0846               	movf	cc_cv_mode@z,w
 11581  0DB5  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 11582  0DB6  0086               	movwf	6
 11583  0DB7  0187               	clrf	7
 11584  0DB8  3005               	movlw	5
 11585  0DB9  0601               	xorwf	1,w
 11586  0DBA  1D03               	btfss	3,2
 11587  0DBB  0008               	return
 11588                           
 11589                           ;battery_charger.c: 138: {
 11590                           ;battery_charger.c: 139: if(voltage[z]<1350+(int16_t)((250-batteryTemp)*.24)-70)
 11591  0DBC  096D               	comf	_batteryTemp,w
 11592  0DBD  00BF               	movwf	??_cc_cv_mode
 11593  0DBE  096E               	comf	_batteryTemp+1,w
 11594  0DBF  00C0               	movwf	??_cc_cv_mode+1
 11595  0DC0  0ABF               	incf	??_cc_cv_mode,f
 11596  0DC1  1903               	skipnz
 11597  0DC2  0AC0               	incf	??_cc_cv_mode+1,f
 11598  0DC3  083F               	movf	??_cc_cv_mode,w
 11599  0DC4  3EFA               	addlw	250
 11600  0DC5  00F9               	movwf	___awtoft@c
 11601  0DC6  3000               	movlw	0
 11602  0DC7  3D40               	addwfc	??_cc_cv_mode+1,w
 11603  0DC8  00FA               	movwf	___awtoft@c+1
 11604  0DC9  319F  2747  318D   	fcall	___awtoft
 11605  0DCC  0879               	movf	?___awtoft,w
 11606  0DCD  0020               	movlb	0	; select bank0
 11607  0DCE  00A4               	movwf	___ftmul@f2
 11608  0DCF  087A               	movf	?___awtoft+1,w
 11609  0DD0  00A5               	movwf	___ftmul@f2+1
 11610  0DD1  087B               	movf	?___awtoft+2,w
 11611  0DD2  00A6               	movwf	___ftmul@f2+2
 11612  0DD3  30C3               	movlw	195
 11613  0DD4  00A1               	movwf	___ftmul@f1
 11614  0DD5  3075               	movlw	117
 11615  0DD6  00A2               	movwf	___ftmul@f1+1
 11616  0DD7  303E               	movlw	62
 11617  0DD8  00A3               	movwf	___ftmul@f1+2
 11618  0DD9  3197  274C  318D   	fcall	___ftmul
 11619  0DDC  0020               	movlb	0	; select bank0
 11620  0DDD  0821               	movf	?___ftmul,w
 11621  0DDE  00B1               	movwf	___fttol@f1
 11622  0DDF  0822               	movf	?___ftmul+1,w
 11623  0DE0  00B2               	movwf	___fttol@f1+1
 11624  0DE1  0823               	movf	?___ftmul+2,w
 11625  0DE2  00B3               	movwf	___fttol@f1+2
 11626  0DE3  3195  256C  318D   	fcall	___fttol
 11627  0DE6  0020               	movlb	0	; select bank0
 11628  0DE7  0831               	movf	?___fttol,w
 11629  0DE8  3E00               	addlw	0
 11630  0DE9  00C1               	movwf	??_cc_cv_mode+2
 11631  0DEA  3005               	movlw	5
 11632  0DEB  3D32               	addwfc	?___fttol+1,w
 11633  0DEC  00C2               	movwf	??_cc_cv_mode+3
 11634  0DED  3546               	lslf	cc_cv_mode@z,w
 11635  0DEE  3EA0               	addlw	(low (_voltage| 0))& (0+255)
 11636  0DEF  0086               	movwf	6
 11637  0DF0  0187               	clrf	7
 11638  0DF1  3F40               	moviw [0]fsr1
 11639  0DF2  00C3               	movwf	??_cc_cv_mode+4
 11640  0DF3  3F41               	moviw [1]fsr1
 11641  0DF4  00C4               	movwf	??_cc_cv_mode+5
 11642  0DF5  0844               	movf	??_cc_cv_mode+5,w
 11643  0DF6  3A80               	xorlw	128
 11644  0DF7  00C5               	movwf	??_cc_cv_mode+6
 11645  0DF8  0842               	movf	??_cc_cv_mode+3,w
 11646  0DF9  3A80               	xorlw	128
 11647  0DFA  0245               	subwf	??_cc_cv_mode+6,w
 11648  0DFB  1D03               	skipz
 11649  0DFC  2DFF               	goto	u3805
 11650  0DFD  0841               	movf	??_cc_cv_mode+2,w
 11651  0DFE  0243               	subwf	??_cc_cv_mode+4,w
 11652  0DFF                     u3805:	
 11653  0DFF  1803               	skipnc
 11654  0E00  0008               	return
 11655                           
 11656                           ;battery_charger.c: 140: {
 11657                           ;battery_charger.c: 141: batteryState[z]=CHARGE;
 11658  0E01  3004               	movlw	4
 11659  0E02  0020               	movlb	0	; select bank0
 11660  0E03  00BF               	movwf	??_cc_cv_mode
 11661  0E04  0846               	movf	cc_cv_mode@z,w
 11662  0E05  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 11663  0E06  0086               	movwf	6
 11664  0E07  0187               	clrf	7
 11665  0E08  083F               	movf	??_cc_cv_mode,w
 11666  0E09  0081               	movwf	1
 11667                           
 11668                           ;battery_charger.c: 142: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 11669  0E0A  096D               	comf	_batteryTemp,w
 11670  0E0B  00BF               	movwf	??_cc_cv_mode
 11671  0E0C  096E               	comf	_batteryTemp+1,w
 11672  0E0D  00C0               	movwf	??_cc_cv_mode+1
 11673  0E0E  0ABF               	incf	??_cc_cv_mode,f
 11674  0E0F  1903               	skipnz
 11675  0E10  0AC0               	incf	??_cc_cv_mode+1,f
 11676  0E11  083F               	movf	??_cc_cv_mode,w
 11677  0E12  3EFA               	addlw	250
 11678  0E13  00F9               	movwf	___awtoft@c
 11679  0E14  3000               	movlw	0
 11680  0E15  3D40               	addwfc	??_cc_cv_mode+1,w
 11681  0E16  00FA               	movwf	___awtoft@c+1
 11682  0E17  319F  2747  318D   	fcall	___awtoft
 11683  0E1A  0879               	movf	?___awtoft,w
 11684  0E1B  0020               	movlb	0	; select bank0
 11685  0E1C  00A4               	movwf	___ftmul@f2
 11686  0E1D  087A               	movf	?___awtoft+1,w
 11687  0E1E  00A5               	movwf	___ftmul@f2+1
 11688  0E1F  087B               	movf	?___awtoft+2,w
 11689  0E20  00A6               	movwf	___ftmul@f2+2
 11690  0E21  30C3               	movlw	195
 11691  0E22  00A1               	movwf	___ftmul@f1
 11692  0E23  3075               	movlw	117
 11693  0E24  00A2               	movwf	___ftmul@f1+1
 11694  0E25  303E               	movlw	62
 11695  0E26  00A3               	movwf	___ftmul@f1+2
 11696  0E27  3197  274C  318D   	fcall	___ftmul
 11697  0E2A  0020               	movlb	0	; select bank0
 11698  0E2B  0821               	movf	?___ftmul,w
 11699  0E2C  00B1               	movwf	___fttol@f1
 11700  0E2D  0822               	movf	?___ftmul+1,w
 11701  0E2E  00B2               	movwf	___fttol@f1+1
 11702  0E2F  0823               	movf	?___ftmul+2,w
 11703  0E30  00B3               	movwf	___fttol@f1+2
 11704  0E31  3195  256C         	fcall	___fttol
 11705  0E33  0020               	movlb	0	; select bank0
 11706  0E34  0831               	movf	?___fttol,w
 11707  0E35  3E91               	addlw	145
 11708  0E36  00C1               	movwf	??_cc_cv_mode+2
 11709  0E37  3005               	movlw	5
 11710  0E38  3D32               	addwfc	?___fttol+1,w
 11711  0E39  00C2               	movwf	??_cc_cv_mode+3
 11712  0E3A  3546               	lslf	cc_cv_mode@z,w
 11713  0E3B  3EB0               	addlw	(low (_Vref| 0))& (0+255)
 11714  0E3C  0086               	movwf	6
 11715  0E3D  0187               	clrf	7
 11716  0E3E  0841               	movf	??_cc_cv_mode+2,w
 11717  0E3F  3FC0               	movwi [0]fsr1
 11718  0E40  0842               	movf	??_cc_cv_mode+3,w
 11719  0E41  3FC1               	movwi [1]fsr1
 11720                           
 11721                           ;battery_charger.c: 143: Iref[z]=30;
 11722  0E42  3546               	lslf	cc_cv_mode@z,w
 11723  0E43  3EB8               	addlw	(low (_Iref| 0))& (0+255)
 11724  0E44  0086               	movwf	6
 11725  0E45  0187               	clrf	7
 11726  0E46  301E               	movlw	30
 11727  0E47  3FC0               	movwi [0]fsr1
 11728  0E48  3000               	movlw	0
 11729  0E49  3FC1               	movwi [1]fsr1
 11730  0E4A  0008               	return
 11731  0E4B                     __end_of_cc_cv_mode:	
 11732                           
 11733                           	psect	text15
 11734  0006                     __ptext15:	
 11735 ;; *************** function _calculateCurrent3 *****************
 11736 ;; Defined at:
 11737 ;;		line 441 in file "main.c"
 11738 ;; Parameters:    Size  Location     Type
 11739 ;;		None
 11740 ;; Auto vars:     Size  Location     Type
 11741 ;;		None
 11742 ;; Return value:  Size  Location     Type
 11743 ;;                  1    wreg      void 
 11744 ;; Registers used:
 11745 ;;		wreg, status,2, status,0, pclath, cstack
 11746 ;; Tracked objects:
 11747 ;;		On entry : 0/0
 11748 ;;		On exit  : 0/0
 11749 ;;		Unchanged: 0/0
 11750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11753 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11754 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11755 ;;Total ram usage:        3 bytes
 11756 ;; Hardware stack levels used:    1
 11757 ;; Hardware stack levels required when called:    2
 11758 ;; This function calls:
 11759 ;;		___awtoft
 11760 ;;		___ftdiv
 11761 ;;		___fttol
 11762 ;; This function is called by:
 11763 ;;		_main
 11764 ;; This function uses a non-reentrant model
 11765 ;;
 11766                           
 11767                           
 11768                           ;psect for function _calculateCurrent3
 11769  0006                     _calculateCurrent3:	
 11770                           
 11771                           ;main.c: 443: if(Ianalogs[3]-570<=0)
 11772                           
 11773                           ;incstack = 0
 11774                           ; Regs used in _calculateCurrent3: [wreg+status,2+status,0+pclath+cstack]
 11775  0006  0022               	movlb	2	; select bank2
 11776  0007  0846               	movf	(_Ianalogs^(0+256)+6),w
 11777  0008  3EC6               	addlw	198
 11778  0009  0020               	movlb	0	; select bank0
 11779  000A  00BF               	movwf	??_calculateCurrent3
 11780  000B  30FD               	movlw	253
 11781  000C  0022               	movlb	2	; select bank2
 11782  000D  3D47               	addwfc	((_Ianalogs+1)^(0+256)+6),w
 11783  000E  0020               	movlb	0	; select bank0
 11784  000F  00C0               	movwf	??_calculateCurrent3+1
 11785  0010  0840               	movf	??_calculateCurrent3+1,w
 11786  0011  3A80               	xorlw	128
 11787  0012  00C1               	movwf	??_calculateCurrent3+2
 11788  0013  3080               	movlw	128
 11789  0014  0241               	subwf	??_calculateCurrent3+2,w
 11790  0015  1D03               	skipz
 11791  0016  2819               	goto	u4055
 11792  0017  3001               	movlw	1
 11793  0018  023F               	subwf	??_calculateCurrent3,w
 11794  0019                     u4055:	
 11795  0019  1803               	skipnc
 11796  001A  281F               	goto	l3304
 11797                           
 11798                           ;main.c: 444: {
 11799                           ;main.c: 445: current[3]=0;
 11800  001B  0021               	movlb	1	; select bank1
 11801  001C  01AE               	clrf	(_current^(0+128)+6)
 11802  001D  01AF               	clrf	((_current+1)^(0+128)+6)
 11803                           
 11804                           ;main.c: 446: }
 11805  001E  0008               	return
 11806  001F                     l3304:	
 11807                           
 11808                           ;main.c: 447: else
 11809                           ;main.c: 448: {
 11810                           ;main.c: 449: current[3]=(int16_t)((Ianalogs[3]-570)/2.8);
 11811  001F  0022               	movlb	2	; select bank2
 11812  0020  0846               	movf	(_Ianalogs^(0+256)+6),w
 11813  0021  3EC6               	addlw	198
 11814  0022  00F9               	movwf	___awtoft@c
 11815  0023  30FD               	movlw	253
 11816  0024  3D47               	addwfc	((_Ianalogs+1)^(0+256)+6),w
 11817  0025  00FA               	movwf	___awtoft@c+1
 11818  0026  319F  2747  3180   	fcall	___awtoft
 11819  0029  0879               	movf	?___awtoft,w
 11820  002A  0020               	movlb	0	; select bank0
 11821  002B  00A4               	movwf	___ftdiv@f1
 11822  002C  087A               	movf	?___awtoft+1,w
 11823  002D  00A5               	movwf	___ftdiv@f1+1
 11824  002E  087B               	movf	?___awtoft+2,w
 11825  002F  00A6               	movwf	___ftdiv@f1+2
 11826  0030  3033               	movlw	51
 11827  0031  00A1               	movwf	___ftdiv@f2
 11828  0032  3033               	movlw	51
 11829  0033  00A2               	movwf	___ftdiv@f2+1
 11830  0034  3040               	movlw	64
 11831  0035  00A3               	movwf	___ftdiv@f2+2
 11832  0036  3195  25F3  3180   	fcall	___ftdiv
 11833  0039  0020               	movlb	0	; select bank0
 11834  003A  0821               	movf	?___ftdiv,w
 11835  003B  00B1               	movwf	___fttol@f1
 11836  003C  0822               	movf	?___ftdiv+1,w
 11837  003D  00B2               	movwf	___fttol@f1+1
 11838  003E  0823               	movf	?___ftdiv+2,w
 11839  003F  00B3               	movwf	___fttol@f1+2
 11840  0040  3195  256C         	fcall	___fttol
 11841  0042  0020               	movlb	0	; select bank0
 11842  0043  0832               	movf	?___fttol+1,w
 11843  0044  0021               	movlb	1	; select bank1
 11844  0045  00AF               	movwf	((_current+1)^(0+128)+6)
 11845  0046  0020               	movlb	0	; select bank0
 11846  0047  0831               	movf	?___fttol,w
 11847  0048  0021               	movlb	1	; select bank1
 11848  0049  00AE               	movwf	(_current^(0+128)+6)
 11849  004A  0008               	return
 11850  004B                     __end_of_calculateCurrent3:	
 11851                           
 11852                           	psect	text16
 11853  1F68                     __ptext16:	
 11854 ;; *************** function _calculateCurrent2 *****************
 11855 ;; Defined at:
 11856 ;;		line 429 in file "main.c"
 11857 ;; Parameters:    Size  Location     Type
 11858 ;;		None
 11859 ;; Auto vars:     Size  Location     Type
 11860 ;;		None
 11861 ;; Return value:  Size  Location     Type
 11862 ;;                  1    wreg      void 
 11863 ;; Registers used:
 11864 ;;		wreg, status,2, status,0
 11865 ;; Tracked objects:
 11866 ;;		On entry : 0/0
 11867 ;;		On exit  : 0/0
 11868 ;;		Unchanged: 0/0
 11869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11872 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11873 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11874 ;;Total ram usage:        3 bytes
 11875 ;; Hardware stack levels used:    1
 11876 ;; This function calls:
 11877 ;;		Nothing
 11878 ;; This function is called by:
 11879 ;;		_main
 11880 ;; This function uses a non-reentrant model
 11881 ;;
 11882                           
 11883                           
 11884                           ;psect for function _calculateCurrent2
 11885  1F68                     _calculateCurrent2:	
 11886                           
 11887                           ;main.c: 431: if(Ianalogs[2]-570<=0)
 11888                           
 11889                           ;incstack = 0
 11890                           ; Regs used in _calculateCurrent2: [wreg+status,2+status,0]
 11891  1F68  0022               	movlb	2	; select bank2
 11892  1F69  0844               	movf	(_Ianalogs^(0+256)+4),w
 11893  1F6A  3EC6               	addlw	198
 11894  1F6B  00F0               	movwf	??_calculateCurrent2
 11895  1F6C  30FD               	movlw	253
 11896  1F6D  3D45               	addwfc	((_Ianalogs+1)^(0+256)+4),w
 11897  1F6E  00F1               	movwf	??_calculateCurrent2+1
 11898  1F6F  0871               	movf	??_calculateCurrent2+1,w
 11899  1F70  3A80               	xorlw	128
 11900  1F71  00F2               	movwf	??_calculateCurrent2+2
 11901  1F72  3080               	movlw	128
 11902  1F73  0272               	subwf	??_calculateCurrent2+2,w
 11903  1F74  1D03               	skipz
 11904  1F75  2F78               	goto	u4045
 11905  1F76  3001               	movlw	1
 11906  1F77  0270               	subwf	??_calculateCurrent2,w
 11907  1F78                     u4045:	
 11908  1F78  1803               	skipnc
 11909  1F79  2F7E               	goto	l3298
 11910                           
 11911                           ;main.c: 432: {
 11912                           ;main.c: 433: current[2]=0;
 11913  1F7A  0021               	movlb	1	; select bank1
 11914  1F7B  01AC               	clrf	(_current^(0+128)+4)
 11915  1F7C  01AD               	clrf	((_current+1)^(0+128)+4)
 11916                           
 11917                           ;main.c: 434: }
 11918  1F7D  0008               	return
 11919  1F7E                     l3298:	
 11920                           
 11921                           ;main.c: 435: else
 11922                           ;main.c: 436: {
 11923                           ;main.c: 437: current[2]=(int16_t)(Ianalogs[2]-570);
 11924  1F7E  0022               	movlb	2	; select bank2
 11925  1F7F  0844               	movf	(_Ianalogs^(0+256)+4),w
 11926  1F80  3EC6               	addlw	198
 11927  1F81  0021               	movlb	1	; select bank1
 11928  1F82  00AC               	movwf	(_current^(0+128)+4)
 11929  1F83  30FD               	movlw	253
 11930  1F84  0022               	movlb	2	; select bank2
 11931  1F85  3D45               	addwfc	((_Ianalogs+1)^(0+256)+4),w
 11932  1F86  0021               	movlb	1	; select bank1
 11933  1F87  00AD               	movwf	((_current+1)^(0+128)+4)
 11934  1F88  0008               	return
 11935  1F89                     __end_of_calculateCurrent2:	
 11936                           
 11937                           	psect	text17
 11938  1256                     __ptext17:	
 11939 ;; *************** function _calculateCurrent0 *****************
 11940 ;; Defined at:
 11941 ;;		line 405 in file "main.c"
 11942 ;; Parameters:    Size  Location     Type
 11943 ;;		None
 11944 ;; Auto vars:     Size  Location     Type
 11945 ;;		None
 11946 ;; Return value:  Size  Location     Type
 11947 ;;                  1    wreg      void 
 11948 ;; Registers used:
 11949 ;;		wreg, status,2, status,0, pclath, cstack
 11950 ;; Tracked objects:
 11951 ;;		On entry : 0/0
 11952 ;;		On exit  : 0/0
 11953 ;;		Unchanged: 0/0
 11954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11957 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11958 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11959 ;;Total ram usage:        3 bytes
 11960 ;; Hardware stack levels used:    1
 11961 ;; Hardware stack levels required when called:    2
 11962 ;; This function calls:
 11963 ;;		___awtoft
 11964 ;;		___ftdiv
 11965 ;;		___fttol
 11966 ;; This function is called by:
 11967 ;;		_main
 11968 ;; This function uses a non-reentrant model
 11969 ;;
 11970                           
 11971                           
 11972                           ;psect for function _calculateCurrent0
 11973  1256                     _calculateCurrent0:	
 11974                           
 11975                           ;main.c: 407: if(Ianalogs[0]-562<=0)
 11976                           
 11977                           ;incstack = 0
 11978                           ; Regs used in _calculateCurrent0: [wreg+status,2+status,0+pclath+cstack]
 11979  1256  0022               	movlb	2	; select bank2
 11980  1257  0840               	movf	_Ianalogs^(0+256),w
 11981  1258  3ECE               	addlw	206
 11982  1259  0020               	movlb	0	; select bank0
 11983  125A  00BF               	movwf	??_calculateCurrent0
 11984  125B  30FD               	movlw	253
 11985  125C  0022               	movlb	2	; select bank2
 11986  125D  3D41               	addwfc	(_Ianalogs+1)^(0+256),w
 11987  125E  0020               	movlb	0	; select bank0
 11988  125F  00C0               	movwf	??_calculateCurrent0+1
 11989  1260  0840               	movf	??_calculateCurrent0+1,w
 11990  1261  3A80               	xorlw	128
 11991  1262  00C1               	movwf	??_calculateCurrent0+2
 11992  1263  3080               	movlw	128
 11993  1264  0241               	subwf	??_calculateCurrent0+2,w
 11994  1265  1D03               	skipz
 11995  1266  2A69               	goto	u4035
 11996  1267  3001               	movlw	1
 11997  1268  023F               	subwf	??_calculateCurrent0,w
 11998  1269                     u4035:	
 11999  1269  1803               	skipnc
 12000  126A  2A6F               	goto	l3292
 12001                           
 12002                           ;main.c: 408: {
 12003                           ;main.c: 409: current[0]=0;
 12004  126B  0021               	movlb	1	; select bank1
 12005  126C  01A8               	clrf	_current^(0+128)
 12006  126D  01A9               	clrf	(_current+1)^(0+128)
 12007                           
 12008                           ;main.c: 410: }
 12009  126E  0008               	return
 12010  126F                     l3292:	
 12011                           
 12012                           ;main.c: 411: else
 12013                           ;main.c: 412: {
 12014                           ;main.c: 413: current[0]=(int16_t)((Ianalogs[0]-562)/2.9943);
 12015  126F  0022               	movlb	2	; select bank2
 12016  1270  0840               	movf	_Ianalogs^(0+256),w
 12017  1271  3ECE               	addlw	206
 12018  1272  00F9               	movwf	___awtoft@c
 12019  1273  30FD               	movlw	253
 12020  1274  3D41               	addwfc	(_Ianalogs+1)^(0+256),w
 12021  1275  00FA               	movwf	___awtoft@c+1
 12022  1276  319F  2747  3192   	fcall	___awtoft
 12023  1279  0879               	movf	?___awtoft,w
 12024  127A  0020               	movlb	0	; select bank0
 12025  127B  00A4               	movwf	___ftdiv@f1
 12026  127C  087A               	movf	?___awtoft+1,w
 12027  127D  00A5               	movwf	___ftdiv@f1+1
 12028  127E  087B               	movf	?___awtoft+2,w
 12029  127F  00A6               	movwf	___ftdiv@f1+2
 12030  1280  30A3               	movlw	163
 12031  1281  00A1               	movwf	___ftdiv@f2
 12032  1282  303F               	movlw	63
 12033  1283  00A2               	movwf	___ftdiv@f2+1
 12034  1284  3040               	movlw	64
 12035  1285  00A3               	movwf	___ftdiv@f2+2
 12036  1286  3195  25F3  3192   	fcall	___ftdiv
 12037  1289  0020               	movlb	0	; select bank0
 12038  128A  0821               	movf	?___ftdiv,w
 12039  128B  00B1               	movwf	___fttol@f1
 12040  128C  0822               	movf	?___ftdiv+1,w
 12041  128D  00B2               	movwf	___fttol@f1+1
 12042  128E  0823               	movf	?___ftdiv+2,w
 12043  128F  00B3               	movwf	___fttol@f1+2
 12044  1290  3195  256C         	fcall	___fttol
 12045  1292  0020               	movlb	0	; select bank0
 12046  1293  0832               	movf	?___fttol+1,w
 12047  1294  0021               	movlb	1	; select bank1
 12048  1295  00A9               	movwf	(_current+1)^(0+128)
 12049  1296  0020               	movlb	0	; select bank0
 12050  1297  0831               	movf	?___fttol,w
 12051  1298  0021               	movlb	1	; select bank1
 12052  1299  00A8               	movwf	_current^(0+128)
 12053  129A  0008               	return
 12054  129B                     __end_of_calculateCurrent0:	
 12055                           
 12056                           	psect	text18
 12057  15F3                     __ptext18:	
 12058 ;; *************** function ___ftdiv *****************
 12059 ;; Defined at:
 12060 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 12061 ;; Parameters:    Size  Location     Type
 12062 ;;  f2              3    1[BANK0 ] float 
 12063 ;;  f1              3    4[BANK0 ] float 
 12064 ;; Auto vars:     Size  Location     Type
 12065 ;;  f3              3   12[BANK0 ] float 
 12066 ;;  sign            1   16[BANK0 ] unsigned char 
 12067 ;;  exp             1   15[BANK0 ] unsigned char 
 12068 ;;  cntr            1   11[BANK0 ] unsigned char 
 12069 ;; Return value:  Size  Location     Type
 12070 ;;                  3    1[BANK0 ] float 
 12071 ;; Registers used:
 12072 ;;		wreg, status,2, status,0, pclath, cstack
 12073 ;; Tracked objects:
 12074 ;;		On entry : 0/0
 12075 ;;		On exit  : 0/0
 12076 ;;		Unchanged: 0/0
 12077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12078 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12079 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12080 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12081 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12082 ;;Total ram usage:       16 bytes
 12083 ;; Hardware stack levels used:    1
 12084 ;; Hardware stack levels required when called:    1
 12085 ;; This function calls:
 12086 ;;		___ftpack
 12087 ;; This function is called by:
 12088 ;;		_tempCalc
 12089 ;;		_main
 12090 ;;		_calculateCurrent0
 12091 ;;		_calculateCurrent3
 12092 ;; This function uses a non-reentrant model
 12093 ;;
 12094                           
 12095                           
 12096                           ;psect for function ___ftdiv
 12097  15F3                     ___ftdiv:	
 12098                           
 12099                           ;incstack = 0
 12100                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 12101  15F3  0020               	movlb	0	; select bank0
 12102  15F4  0824               	movf	___ftdiv@f1,w
 12103  15F5  00A7               	movwf	??___ftdiv
 12104  15F6  0825               	movf	___ftdiv@f1+1,w
 12105  15F7  00A8               	movwf	??___ftdiv+1
 12106  15F8  0826               	movf	___ftdiv@f1+2,w
 12107  15F9  00A9               	movwf	??___ftdiv+2
 12108  15FA  1003               	clrc
 12109  15FB  0D28               	rlf	??___ftdiv+1,w
 12110  15FC  0D29               	rlf	??___ftdiv+2,w
 12111  15FD  00AA               	movwf	??___ftdiv+3
 12112  15FE  082A               	movf	??___ftdiv+3,w
 12113  15FF  00AF               	movwf	___ftdiv@exp
 12114  1600  082F               	movf	___ftdiv@exp,w
 12115  1601  1D03               	btfss	3,2
 12116  1602  2E0A               	goto	l2956
 12117  1603  3000               	movlw	0
 12118  1604  00A1               	movwf	?___ftdiv
 12119  1605  3000               	movlw	0
 12120  1606  00A2               	movwf	?___ftdiv+1
 12121  1607  3000               	movlw	0
 12122  1608  00A3               	movwf	?___ftdiv+2
 12123  1609  0008               	return
 12124  160A                     l2956:	
 12125  160A  0821               	movf	___ftdiv@f2,w
 12126  160B  00A7               	movwf	??___ftdiv
 12127  160C  0822               	movf	___ftdiv@f2+1,w
 12128  160D  00A8               	movwf	??___ftdiv+1
 12129  160E  0823               	movf	___ftdiv@f2+2,w
 12130  160F  00A9               	movwf	??___ftdiv+2
 12131  1610  1003               	clrc
 12132  1611  0D28               	rlf	??___ftdiv+1,w
 12133  1612  0D29               	rlf	??___ftdiv+2,w
 12134  1613  00AA               	movwf	??___ftdiv+3
 12135  1614  082A               	movf	??___ftdiv+3,w
 12136  1615  00B0               	movwf	___ftdiv@sign
 12137  1616  0830               	movf	___ftdiv@sign,w
 12138  1617  1D03               	btfss	3,2
 12139  1618  2E20               	goto	l2962
 12140  1619  3000               	movlw	0
 12141  161A  00A1               	movwf	?___ftdiv
 12142  161B  3000               	movlw	0
 12143  161C  00A2               	movwf	?___ftdiv+1
 12144  161D  3000               	movlw	0
 12145  161E  00A3               	movwf	?___ftdiv+2
 12146  161F  0008               	return
 12147  1620                     l2962:	
 12148  1620  3000               	movlw	0
 12149  1621  00AC               	movwf	___ftdiv@f3
 12150  1622  3000               	movlw	0
 12151  1623  00AD               	movwf	___ftdiv@f3+1
 12152  1624  3000               	movlw	0
 12153  1625  00AE               	movwf	___ftdiv@f3+2
 12154  1626  3089               	movlw	137
 12155  1627  0730               	addwf	___ftdiv@sign,w
 12156  1628  00A7               	movwf	??___ftdiv
 12157  1629  0827               	movf	??___ftdiv,w
 12158  162A  02AF               	subwf	___ftdiv@exp,f
 12159  162B  0824               	movf	___ftdiv@f1,w
 12160  162C  00A7               	movwf	??___ftdiv
 12161  162D  0825               	movf	___ftdiv@f1+1,w
 12162  162E  00A8               	movwf	??___ftdiv+1
 12163  162F  0826               	movf	___ftdiv@f1+2,w
 12164  1630  00A9               	movwf	??___ftdiv+2
 12165  1631  3010               	movlw	16
 12166  1632                     u3285:	
 12167  1632  36A9               	lsrf	??___ftdiv+2,f
 12168  1633  0CA8               	rrf	??___ftdiv+1,f
 12169  1634  0CA7               	rrf	??___ftdiv,f
 12170  1635  0B89               	decfsz	9,f
 12171  1636  2E32               	goto	u3285
 12172  1637  0827               	movf	??___ftdiv,w
 12173  1638  00AA               	movwf	??___ftdiv+3
 12174  1639  082A               	movf	??___ftdiv+3,w
 12175  163A  00B0               	movwf	___ftdiv@sign
 12176  163B  0821               	movf	___ftdiv@f2,w
 12177  163C  00A7               	movwf	??___ftdiv
 12178  163D  0822               	movf	___ftdiv@f2+1,w
 12179  163E  00A8               	movwf	??___ftdiv+1
 12180  163F  0823               	movf	___ftdiv@f2+2,w
 12181  1640  00A9               	movwf	??___ftdiv+2
 12182  1641  3010               	movlw	16
 12183  1642                     u3295:	
 12184  1642  36A9               	lsrf	??___ftdiv+2,f
 12185  1643  0CA8               	rrf	??___ftdiv+1,f
 12186  1644  0CA7               	rrf	??___ftdiv,f
 12187  1645  0B89               	decfsz	9,f
 12188  1646  2E42               	goto	u3295
 12189  1647  0827               	movf	??___ftdiv,w
 12190  1648  00AA               	movwf	??___ftdiv+3
 12191  1649  082A               	movf	??___ftdiv+3,w
 12192  164A  06B0               	xorwf	___ftdiv@sign,f
 12193  164B  3080               	movlw	128
 12194  164C  00A7               	movwf	??___ftdiv
 12195  164D  0827               	movf	??___ftdiv,w
 12196  164E  05B0               	andwf	___ftdiv@sign,f
 12197  164F  17A5               	bsf	___ftdiv@f1+1,7
 12198  1650  30FF               	movlw	255
 12199  1651  05A4               	andwf	___ftdiv@f1,f
 12200  1652  30FF               	movlw	255
 12201  1653  05A5               	andwf	___ftdiv@f1+1,f
 12202  1654  3000               	movlw	0
 12203  1655  05A6               	andwf	___ftdiv@f1+2,f
 12204  1656  17A2               	bsf	___ftdiv@f2+1,7
 12205  1657  30FF               	movlw	255
 12206  1658  05A1               	andwf	___ftdiv@f2,f
 12207  1659  30FF               	movlw	255
 12208  165A  05A2               	andwf	___ftdiv@f2+1,f
 12209  165B  3000               	movlw	0
 12210  165C  05A3               	andwf	___ftdiv@f2+2,f
 12211  165D  3018               	movlw	24
 12212  165E  00A7               	movwf	??___ftdiv
 12213  165F  0827               	movf	??___ftdiv,w
 12214  1660  00AB               	movwf	___ftdiv@cntr
 12215  1661                     l2976:	
 12216  1661  3001               	movlw	1
 12217  1662                     u3305:	
 12218  1662  35AC               	lslf	___ftdiv@f3,f
 12219  1663  0DAD               	rlf	___ftdiv@f3+1,f
 12220  1664  0DAE               	rlf	___ftdiv@f3+2,f
 12221  1665  0B89               	decfsz	9,f
 12222  1666  2E62               	goto	u3305
 12223  1667  0823               	movf	___ftdiv@f2+2,w
 12224  1668  0226               	subwf	___ftdiv@f1+2,w
 12225  1669  1D03               	skipz
 12226  166A  2E71               	goto	u3315
 12227  166B  0822               	movf	___ftdiv@f2+1,w
 12228  166C  0225               	subwf	___ftdiv@f1+1,w
 12229  166D  1D03               	skipz
 12230  166E  2E71               	goto	u3315
 12231  166F  0821               	movf	___ftdiv@f2,w
 12232  1670  0224               	subwf	___ftdiv@f1,w
 12233  1671                     u3315:	
 12234  1671  1C03               	skipc
 12235  1672  2E7A               	goto	l2984
 12236  1673  0821               	movf	___ftdiv@f2,w
 12237  1674  02A4               	subwf	___ftdiv@f1,f
 12238  1675  0822               	movf	___ftdiv@f2+1,w
 12239  1676  3BA5               	subwfb	___ftdiv@f1+1,f
 12240  1677  0823               	movf	___ftdiv@f2+2,w
 12241  1678  3BA6               	subwfb	___ftdiv@f1+2,f
 12242  1679  142C               	bsf	___ftdiv@f3,0
 12243  167A                     l2984:	
 12244  167A  3001               	movlw	1
 12245  167B                     u3325:	
 12246  167B  35A4               	lslf	___ftdiv@f1,f
 12247  167C  0DA5               	rlf	___ftdiv@f1+1,f
 12248  167D  0DA6               	rlf	___ftdiv@f1+2,f
 12249  167E  0B89               	decfsz	9,f
 12250  167F  2E7B               	goto	u3325
 12251  1680  3001               	movlw	1
 12252  1681  02AB               	subwf	___ftdiv@cntr,f
 12253  1682  1D03               	btfss	3,2
 12254  1683  2E61               	goto	l2976
 12255  1684  082C               	movf	___ftdiv@f3,w
 12256  1685  00F0               	movwf	___ftpack@arg
 12257  1686  082D               	movf	___ftdiv@f3+1,w
 12258  1687  00F1               	movwf	___ftpack@arg+1
 12259  1688  082E               	movf	___ftdiv@f3+2,w
 12260  1689  00F2               	movwf	___ftpack@arg+2
 12261  168A  082F               	movf	___ftdiv@exp,w
 12262  168B  00A7               	movwf	??___ftdiv
 12263  168C  0827               	movf	??___ftdiv,w
 12264  168D  00F3               	movwf	___ftpack@exp
 12265  168E  0830               	movf	___ftdiv@sign,w
 12266  168F  00A8               	movwf	??___ftdiv+1
 12267  1690  0828               	movf	??___ftdiv+1,w
 12268  1691  00F4               	movwf	___ftpack@sign
 12269  1692  3193  23A0         	fcall	___ftpack
 12270  1694  0870               	movf	?___ftpack,w
 12271  1695  0020               	movlb	0	; select bank0
 12272  1696  00A1               	movwf	?___ftdiv
 12273  1697  0871               	movf	?___ftpack+1,w
 12274  1698  00A2               	movwf	?___ftdiv+1
 12275  1699  0872               	movf	?___ftpack+2,w
 12276  169A  00A3               	movwf	?___ftdiv+2
 12277  169B  0008               	return
 12278  169C                     __end_of___ftdiv:	
 12279                           
 12280                           	psect	text19
 12281  11A4                     __ptext19:	
 12282 ;; *************** function _SYSTEM_Initialize *****************
 12283 ;; Defined at:
 12284 ;;		line 35 in file "system.c"
 12285 ;; Parameters:    Size  Location     Type
 12286 ;;		None
 12287 ;; Auto vars:     Size  Location     Type
 12288 ;;		None
 12289 ;; Return value:  Size  Location     Type
 12290 ;;                  1    wreg      void 
 12291 ;; Registers used:
 12292 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12293 ;; Tracked objects:
 12294 ;;		On entry : 0/0
 12295 ;;		On exit  : 0/0
 12296 ;;		Unchanged: 0/0
 12297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12300 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12301 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12302 ;;Total ram usage:        2 bytes
 12303 ;; Hardware stack levels used:    1
 12304 ;; Hardware stack levels required when called:    3
 12305 ;; This function calls:
 12306 ;;		_ADC_Initialize
 12307 ;;		_Init_Battery_State_Machine
 12308 ;;		_LCDClear
 12309 ;;		_LCDInit
 12310 ;;		_OSCILLATOR_Initialize
 12311 ;;		_PIN_MANAGER_Initialize
 12312 ;;		_PWM_Initialize
 12313 ;;		_TMR2_Initialize
 12314 ;;		_TMR4_Initialize
 12315 ;; This function is called by:
 12316 ;;		_main
 12317 ;; This function uses a non-reentrant model
 12318 ;;
 12319                           
 12320                           
 12321                           ;psect for function _SYSTEM_Initialize
 12322  11A4                     _SYSTEM_Initialize:	
 12323                           
 12324                           ;system.c: 37: PIN_MANAGER_Initialize();
 12325                           
 12326                           ;incstack = 0
 12327                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12328  11A4  3191  2132  3191   	fcall	_PIN_MANAGER_Initialize
 12329                           
 12330                           ;system.c: 38: OSCILLATOR_Initialize();
 12331  11A7  319E  260A  3191   	fcall	_OSCILLATOR_Initialize
 12332                           
 12333                           ;system.c: 40: ADC_Initialize();
 12334  11AA  319F  2709  3191   	fcall	_ADC_Initialize
 12335                           
 12336                           ;system.c: 41: PWM_Initialize();
 12337  11AD  319F  2728  3191   	fcall	_PWM_Initialize
 12338                           
 12339                           ;system.c: 43: TMR2_Initialize();
 12340  11B0  319E  262B  3191   	fcall	_TMR2_Initialize
 12341                           
 12342                           ;system.c: 44: TMR4_Initialize();
 12343  11B3  319E  2639  3191   	fcall	_TMR4_Initialize
 12344                           
 12345                           ;system.c: 45: Init_Battery_State_Machine(0);
 12346  11B6  3000               	movlw	0
 12347  11B7  3194  2404  3191   	fcall	_Init_Battery_State_Machine
 12348                           
 12349                           ;system.c: 46: Init_Battery_State_Machine(1);
 12350  11BA  3001               	movlw	1
 12351  11BB  3194  2404  3191   	fcall	_Init_Battery_State_Machine
 12352                           
 12353                           ;system.c: 47: LCDInit();
 12354  11BE  3191  2169  3191   	fcall	_LCDInit
 12355                           
 12356                           ;system.c: 48: _delay((unsigned long)((200)*(32000000/4000.0)));
 12357  11C1  3009               	movlw	9
 12358  11C2  0020               	movlb	0	; select bank0
 12359  11C3  00C5               	movwf	??_SYSTEM_Initialize+1
 12360  11C4  301E               	movlw	30
 12361  11C5  00C4               	movwf	??_SYSTEM_Initialize
 12362  11C6  30E4               	movlw	228
 12363  11C7                     u4527:	
 12364  11C7  0B89               	decfsz	9,f
 12365  11C8  29C7               	goto	u4527
 12366  11C9  0BC4               	decfsz	??_SYSTEM_Initialize,f
 12367  11CA  29C7               	goto	u4527
 12368  11CB  0BC5               	decfsz	??_SYSTEM_Initialize+1,f
 12369  11CC  29C7               	goto	u4527
 12370  11CD  0000               	nop
 12371                           
 12372                           ;system.c: 49: LCDClear();
 12373  11CE  319F  27AE  3191   	fcall	_LCDClear
 12374                           
 12375                           ;system.c: 50: _delay((unsigned long)((200)*(32000000/4000.0)));
 12376  11D1  3009               	movlw	9
 12377  11D2  0020               	movlb	0	; select bank0
 12378  11D3  00C5               	movwf	??_SYSTEM_Initialize+1
 12379  11D4  301E               	movlw	30
 12380  11D5  00C4               	movwf	??_SYSTEM_Initialize
 12381  11D6  30E4               	movlw	228
 12382  11D7                     u4537:	
 12383  11D7  0B89               	decfsz	9,f
 12384  11D8  29D7               	goto	u4537
 12385  11D9  0BC4               	decfsz	??_SYSTEM_Initialize,f
 12386  11DA  29D7               	goto	u4537
 12387  11DB  0BC5               	decfsz	??_SYSTEM_Initialize+1,f
 12388  11DC  29D7               	goto	u4537
 12389  11DD  0000               	nop
 12390  11DE  0008               	return
 12391  11DF                     __end_of_SYSTEM_Initialize:	
 12392                           
 12393                           	psect	text20
 12394  1E39                     __ptext20:	
 12395 ;; *************** function _TMR4_Initialize *****************
 12396 ;; Defined at:
 12397 ;;		line 25 in file "tmr.c"
 12398 ;; Parameters:    Size  Location     Type
 12399 ;;		None
 12400 ;; Auto vars:     Size  Location     Type
 12401 ;;		None
 12402 ;; Return value:  Size  Location     Type
 12403 ;;                  1    wreg      void 
 12404 ;; Registers used:
 12405 ;;		wreg, status,2
 12406 ;; Tracked objects:
 12407 ;;		On entry : 0/0
 12408 ;;		On exit  : 0/0
 12409 ;;		Unchanged: 0/0
 12410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12415 ;;Total ram usage:        0 bytes
 12416 ;; Hardware stack levels used:    1
 12417 ;; This function calls:
 12418 ;;		Nothing
 12419 ;; This function is called by:
 12420 ;;		_SYSTEM_Initialize
 12421 ;; This function uses a non-reentrant model
 12422 ;;
 12423                           
 12424                           
 12425                           ;psect for function _TMR4_Initialize
 12426  1E39                     _TMR4_Initialize:	
 12427                           
 12428                           ;tmr.c: 27: T4CON = 0x00;
 12429                           
 12430                           ;incstack = 0
 12431                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
 12432  1E39  0025               	movlb	5	; select bank5
 12433  1E3A  0194               	clrf	20	;volatile
 12434                           
 12435                           ;tmr.c: 29: T4CLKCON = 0x01;
 12436  1E3B  3001               	movlw	1
 12437  1E3C  0096               	movwf	22	;volatile
 12438                           
 12439                           ;tmr.c: 31: T4HLT = 0x00;
 12440  1E3D  0195               	clrf	21	;volatile
 12441                           
 12442                           ;tmr.c: 33: T4RST = 0x00;
 12443  1E3E  0197               	clrf	23	;volatile
 12444                           
 12445                           ;tmr.c: 35: T4PR = 0xFE;
 12446  1E3F  30FE               	movlw	254
 12447  1E40  0093               	movwf	19	;volatile
 12448                           
 12449                           ;tmr.c: 39: T4TMR = 0x00;
 12450  1E41  0192               	clrf	18	;volatile
 12451                           
 12452                           ;tmr.c: 41: PIR4bits.TMR4IF = 0;
 12453  1E42  002E               	movlb	14	; select bank14
 12454  1E43  1190               	bcf	16,3	;volatile
 12455                           
 12456                           ;tmr.c: 43: T4CONbits.TMR4ON = 1;
 12457  1E44  0025               	movlb	5	; select bank5
 12458  1E45  1794               	bsf	20,7	;volatile
 12459  1E46  0008               	return
 12460  1E47                     __end_of_TMR4_Initialize:	
 12461                           
 12462                           	psect	text21
 12463  1E2B                     __ptext21:	
 12464 ;; *************** function _TMR2_Initialize *****************
 12465 ;; Defined at:
 12466 ;;		line 3 in file "tmr.c"
 12467 ;; Parameters:    Size  Location     Type
 12468 ;;		None
 12469 ;; Auto vars:     Size  Location     Type
 12470 ;;		None
 12471 ;; Return value:  Size  Location     Type
 12472 ;;                  1    wreg      void 
 12473 ;; Registers used:
 12474 ;;		wreg, status,2
 12475 ;; Tracked objects:
 12476 ;;		On entry : 0/0
 12477 ;;		On exit  : 0/0
 12478 ;;		Unchanged: 0/0
 12479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12484 ;;Total ram usage:        0 bytes
 12485 ;; Hardware stack levels used:    1
 12486 ;; This function calls:
 12487 ;;		Nothing
 12488 ;; This function is called by:
 12489 ;;		_SYSTEM_Initialize
 12490 ;; This function uses a non-reentrant model
 12491 ;;
 12492                           
 12493                           
 12494                           ;psect for function _TMR2_Initialize
 12495  1E2B                     _TMR2_Initialize:	
 12496                           
 12497                           ;tmr.c: 5: T2CON = 0x00;
 12498                           
 12499                           ;incstack = 0
 12500                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 12501  1E2B  0025               	movlb	5	; select bank5
 12502  1E2C  018E               	clrf	14	;volatile
 12503                           
 12504                           ;tmr.c: 7: T2CLKCON = 0x01;
 12505  1E2D  3001               	movlw	1
 12506  1E2E  0090               	movwf	16	;volatile
 12507                           
 12508                           ;tmr.c: 9: T2HLT = 0x00;
 12509  1E2F  018F               	clrf	15	;volatile
 12510                           
 12511                           ;tmr.c: 11: T2RST = 0x00;
 12512  1E30  0191               	clrf	17	;volatile
 12513                           
 12514                           ;tmr.c: 13: T2PR = 0xFE;
 12515  1E31  30FE               	movlw	254
 12516  1E32  008D               	movwf	13	;volatile
 12517                           
 12518                           ;tmr.c: 18: T2TMR = 0x00;
 12519  1E33  018C               	clrf	12	;volatile
 12520                           
 12521                           ;tmr.c: 20: PIR4bits.TMR2IF = 0;
 12522  1E34  002E               	movlb	14	; select bank14
 12523  1E35  1090               	bcf	16,1	;volatile
 12524                           
 12525                           ;tmr.c: 22: T2CONbits.TMR2ON = 1;
 12526  1E36  0025               	movlb	5	; select bank5
 12527  1E37  178E               	bsf	14,7	;volatile
 12528  1E38  0008               	return
 12529  1E39                     __end_of_TMR2_Initialize:	
 12530                           
 12531                           	psect	text22
 12532  1F28                     __ptext22:	
 12533 ;; *************** function _PWM_Initialize *****************
 12534 ;; Defined at:
 12535 ;;		line 3 in file "pwm.c"
 12536 ;; Parameters:    Size  Location     Type
 12537 ;;		None
 12538 ;; Auto vars:     Size  Location     Type
 12539 ;;		None
 12540 ;; Return value:  Size  Location     Type
 12541 ;;                  1    wreg      void 
 12542 ;; Registers used:
 12543 ;;		wreg, status,2, status,0
 12544 ;; Tracked objects:
 12545 ;;		On entry : 0/0
 12546 ;;		On exit  : 0/0
 12547 ;;		Unchanged: 0/0
 12548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12553 ;;Total ram usage:        0 bytes
 12554 ;; Hardware stack levels used:    1
 12555 ;; This function calls:
 12556 ;;		Nothing
 12557 ;; This function is called by:
 12558 ;;		_SYSTEM_Initialize
 12559 ;; This function uses a non-reentrant model
 12560 ;;
 12561                           
 12562                           
 12563                           ;psect for function _PWM_Initialize
 12564  1F28                     _PWM_Initialize:	
 12565                           
 12566                           ;pwm.c: 5: PWM6CON = 0x80;
 12567                           
 12568                           ;incstack = 0
 12569                           ; Regs used in _PWM_Initialize: [wreg+status,2+status,0]
 12570  1F28  3080               	movlw	128
 12571  1F29  0027               	movlb	7	; select bank7
 12572  1F2A  008E               	movwf	14	;volatile
 12573                           
 12574                           ;pwm.c: 7: PWM6DCH = 0x00;
 12575  1F2B  018D               	clrf	13	;volatile
 12576                           
 12577                           ;pwm.c: 9: PWM6DCL = 0x00;
 12578  1F2C  018C               	clrf	12	;volatile
 12579                           
 12580                           ;pwm.c: 11: CCPTMRS1bits.P6TSEL = 0x01;
 12581  1F2D  0024               	movlb	4	; select bank4
 12582  1F2E  081F               	movf	31,w	;volatile
 12583  1F2F  39F3               	andlw	-13
 12584  1F30  3804               	iorlw	4
 12585  1F31  009F               	movwf	31	;volatile
 12586                           
 12587                           ;pwm.c: 14: PWM7CON = 0x80;
 12588  1F32  3080               	movlw	128
 12589  1F33  0027               	movlb	7	; select bank7
 12590  1F34  0092               	movwf	18	;volatile
 12591                           
 12592                           ;pwm.c: 16: PWM7DCH = 0x00;
 12593  1F35  0191               	clrf	17	;volatile
 12594                           
 12595                           ;pwm.c: 18: PWM7DCL = 0x00;
 12596  1F36  0190               	clrf	16	;volatile
 12597                           
 12598                           ;pwm.c: 20: CCPTMRS1bits.P7TSEL = 0x02;
 12599  1F37  0024               	movlb	4	; select bank4
 12600  1F38  081F               	movf	31,w	;volatile
 12601  1F39  39CF               	andlw	-49
 12602  1F3A  3820               	iorlw	32
 12603  1F3B  009F               	movwf	31	;volatile
 12604                           
 12605                           ;pwm.c: 23: CCP1CONbits.CCP1EN = 1;
 12606  1F3C  0026               	movlb	6	; select bank6
 12607  1F3D  178E               	bsf	14,7	;volatile
 12608                           
 12609                           ;pwm.c: 24: CCP1CONbits.CCP1FMT = 1;
 12610  1F3E  160E               	bsf	14,4	;volatile
 12611                           
 12612                           ;pwm.c: 25: CCP1CONbits.CCP1MODE = 0xF;
 12613  1F3F  300F               	movlw	15
 12614  1F40  048E               	iorwf	14,f	;volatile
 12615                           
 12616                           ;pwm.c: 26: CCPTMRS0bits.C1TSEL = 0x1;
 12617  1F41  0024               	movlb	4	; select bank4
 12618  1F42  081E               	movf	30,w	;volatile
 12619  1F43  39FC               	andlw	-4
 12620  1F44  3801               	iorlw	1
 12621  1F45  009E               	movwf	30	;volatile
 12622  1F46  0008               	return
 12623  1F47                     __end_of_PWM_Initialize:	
 12624                           
 12625                           	psect	text23
 12626  1132                     __ptext23:	
 12627 ;; *************** function _PIN_MANAGER_Initialize *****************
 12628 ;; Defined at:
 12629 ;;		line 3 in file "pin_manager.c"
 12630 ;; Parameters:    Size  Location     Type
 12631 ;;		None
 12632 ;; Auto vars:     Size  Location     Type
 12633 ;;  state           1    0[COMMON] char 
 12634 ;; Return value:  Size  Location     Type
 12635 ;;                  1    wreg      void 
 12636 ;; Registers used:
 12637 ;;		wreg, status,2
 12638 ;; Tracked objects:
 12639 ;;		On entry : 0/0
 12640 ;;		On exit  : 0/0
 12641 ;;		Unchanged: 0/0
 12642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12644 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12646 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12647 ;;Total ram usage:        1 bytes
 12648 ;; Hardware stack levels used:    1
 12649 ;; This function calls:
 12650 ;;		Nothing
 12651 ;; This function is called by:
 12652 ;;		_SYSTEM_Initialize
 12653 ;; This function uses a non-reentrant model
 12654 ;;
 12655                           
 12656                           
 12657                           ;psect for function _PIN_MANAGER_Initialize
 12658  1132                     _PIN_MANAGER_Initialize:	
 12659                           
 12660                           ;pin_manager.c: 5: LATA = 0x20;
 12661                           
 12662                           ;incstack = 0
 12663                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 12664  1132  3020               	movlw	32
 12665  1133  0020               	movlb	0	; select bank0
 12666  1134  0096               	movwf	22	;volatile
 12667                           
 12668                           ;pin_manager.c: 6: LATB = 0x00;
 12669  1135  0197               	clrf	23	;volatile
 12670                           
 12671                           ;pin_manager.c: 7: LATC = 0x00;
 12672  1136  0198               	clrf	24	;volatile
 12673                           
 12674                           ;pin_manager.c: 9: WPUA = 0x00;
 12675  1137  003E               	movlb	30	; select bank30
 12676  1138  01B9               	clrf	57	;volatile
 12677                           
 12678                           ;pin_manager.c: 10: WPUB = 0x00;
 12679  1139  01C4               	clrf	68	;volatile
 12680                           
 12681                           ;pin_manager.c: 11: WPUC = 0x00;
 12682  113A  01CF               	clrf	79	;volatile
 12683                           
 12684                           ;pin_manager.c: 12: WPUE = 0x8;
 12685  113B  3008               	movlw	8
 12686  113C  00E5               	movwf	101	;volatile
 12687                           
 12688                           ;pin_manager.c: 14: TRISA = 0x00;
 12689  113D  0020               	movlb	0	; select bank0
 12690  113E  0191               	clrf	17	;volatile
 12691                           
 12692                           ;pin_manager.c: 15: TRISB = 0x0E;
 12693  113F  300E               	movlw	14
 12694  1140  0092               	movwf	18	;volatile
 12695                           
 12696                           ;pin_manager.c: 16: TRISC = 0xFF;
 12697  1141  30FF               	movlw	255
 12698  1142  0093               	movwf	19	;volatile
 12699                           
 12700                           ;pin_manager.c: 18: ANSELA = 0x00;
 12701  1143  003E               	movlb	30	; select bank30
 12702  1144  01B8               	clrf	56	;volatile
 12703                           
 12704                           ;pin_manager.c: 19: ANSELB = 0x0A;
 12705  1145  300A               	movlw	10
 12706  1146  00C3               	movwf	67	;volatile
 12707                           
 12708                           ;pin_manager.c: 20: ANSELC = 0xFF;
 12709  1147  30FF               	movlw	255
 12710  1148  00CE               	movwf	78	;volatile
 12711                           
 12712                           ;pin_manager.c: 23: PIE0bits.IOCIE = 0;
 12713  1149  002E               	movlb	14	; select bank14
 12714  114A  1216               	bcf	22,4	;volatile
 12715                           
 12716                           ;pin_manager.c: 24: int8_t state = GIE;
 12717  114B  3000               	movlw	0
 12718  114C  1B8B               	btfsc	11,7	;volatile
 12719  114D  3001               	movlw	1
 12720  114E  00F0               	movwf	PIN_MANAGER_Initialize@state
 12721                           
 12722                           ;pin_manager.c: 25: GIE = 0;
 12723  114F  138B               	bcf	11,7	;volatile
 12724                           
 12725                           ;pin_manager.c: 26: PPSLOCK = 0x55;
 12726  1150  3055               	movlw	85
 12727  1151  003D               	movlb	29	; select bank29
 12728  1152  008F               	movwf	15	;volsfr
 12729                           
 12730                           ;pin_manager.c: 27: PPSLOCK = 0xAA;
 12731  1153  30AA               	movlw	170
 12732  1154  008F               	movwf	15	;volsfr
 12733                           
 12734                           ;pin_manager.c: 28: PPSLOCKbits.PPSLOCKED = 0x00;
 12735  1155  100F               	bcf	15,0	;volsfr
 12736                           
 12737                           ;pin_manager.c: 30: RA6PPS = 0x0E;
 12738  1156  300E               	movlw	14
 12739  1157  003E               	movlb	30	; select bank30
 12740  1158  0096               	movwf	22	;volatile
 12741                           
 12742                           ;pin_manager.c: 31: RA7PPS = 0x0F;
 12743  1159  300F               	movlw	15
 12744  115A  0097               	movwf	23	;volatile
 12745                           
 12746                           ;pin_manager.c: 32: RB0PPS = 0x09;
 12747  115B  3009               	movlw	9
 12748  115C  0098               	movwf	24	;volatile
 12749                           
 12750                           ;pin_manager.c: 33: PPSLOCK = 0x55;
 12751  115D  3055               	movlw	85
 12752  115E  003D               	movlb	29	; select bank29
 12753  115F  008F               	movwf	15	;volsfr
 12754                           
 12755                           ;pin_manager.c: 34: PPSLOCK = 0xAA;
 12756  1160  30AA               	movlw	170
 12757  1161  008F               	movwf	15	;volsfr
 12758                           
 12759                           ;pin_manager.c: 35: PPSLOCKbits.PPSLOCKED = 0x01;
 12760  1162  140F               	bsf	15,0	;volsfr
 12761                           
 12762                           ;pin_manager.c: 36: GIE = state;
 12763  1163  1C70               	btfss	PIN_MANAGER_Initialize@state,0
 12764  1164  2967               	goto	u3000
 12765  1165  178B               	bsf	11,7	;volatile
 12766  1166  0008               	return
 12767  1167                     u3000:	
 12768  1167  138B               	bcf	11,7	;volatile
 12769  1168  0008               	return
 12770  1169                     __end_of_PIN_MANAGER_Initialize:	
 12771                           
 12772                           	psect	text24
 12773  1E0A                     __ptext24:	
 12774 ;; *************** function _OSCILLATOR_Initialize *****************
 12775 ;; Defined at:
 12776 ;;		line 53 in file "system.c"
 12777 ;; Parameters:    Size  Location     Type
 12778 ;;		None
 12779 ;; Auto vars:     Size  Location     Type
 12780 ;;		None
 12781 ;; Return value:  Size  Location     Type
 12782 ;;                  1    wreg      void 
 12783 ;; Registers used:
 12784 ;;		wreg, status,2
 12785 ;; Tracked objects:
 12786 ;;		On entry : 0/0
 12787 ;;		On exit  : 0/0
 12788 ;;		Unchanged: 0/0
 12789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12794 ;;Total ram usage:        0 bytes
 12795 ;; Hardware stack levels used:    1
 12796 ;; This function calls:
 12797 ;;		Nothing
 12798 ;; This function is called by:
 12799 ;;		_SYSTEM_Initialize
 12800 ;; This function uses a non-reentrant model
 12801 ;;
 12802                           
 12803                           
 12804                           ;psect for function _OSCILLATOR_Initialize
 12805  1E0A                     _OSCILLATOR_Initialize:	
 12806                           
 12807                           ;system.c: 55: OSCCON1 = 0x60;
 12808                           
 12809                           ;incstack = 0
 12810                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 12811  1E0A  3060               	movlw	96
 12812  1E0B  0031               	movlb	17	; select bank17
 12813  1E0C  008D               	movwf	13	;volatile
 12814                           
 12815                           ;system.c: 56: OSCCON3 = 0x00;
 12816  1E0D  018F               	clrf	15	;volatile
 12817                           
 12818                           ;system.c: 57: OSCEN = 0x00;
 12819  1E0E  0191               	clrf	17	;volatile
 12820                           
 12821                           ;system.c: 58: OSCFRQ = 0x06;
 12822  1E0F  3006               	movlw	6
 12823  1E10  0093               	movwf	19	;volatile
 12824                           
 12825                           ;system.c: 59: OSCTUNE = 0x00;
 12826  1E11  0192               	clrf	18	;volatile
 12827  1E12  0008               	return
 12828  1E13                     __end_of_OSCILLATOR_Initialize:	
 12829                           
 12830                           	psect	text25
 12831  1169                     __ptext25:	
 12832 ;; *************** function _LCDInit *****************
 12833 ;; Defined at:
 12834 ;;		line 247 in file "lcd.c"
 12835 ;; Parameters:    Size  Location     Type
 12836 ;;		None
 12837 ;; Auto vars:     Size  Location     Type
 12838 ;;		None
 12839 ;; Return value:  Size  Location     Type
 12840 ;;                  1    wreg      void 
 12841 ;; Registers used:
 12842 ;;		wreg, status,2, status,0, pclath, cstack
 12843 ;; Tracked objects:
 12844 ;;		On entry : 0/0
 12845 ;;		On exit  : 0/0
 12846 ;;		Unchanged: 0/0
 12847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12850 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12851 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12852 ;;Total ram usage:        1 bytes
 12853 ;; Hardware stack levels used:    1
 12854 ;; Hardware stack levels required when called:    1
 12855 ;; This function calls:
 12856 ;;		_LCDWrite
 12857 ;; This function is called by:
 12858 ;;		_SYSTEM_Initialize
 12859 ;;		_main
 12860 ;; This function uses a non-reentrant model
 12861 ;;
 12862                           
 12863                           
 12864                           ;psect for function _LCDInit
 12865  1169                     _LCDInit:	
 12866                           
 12867                           ;lcd.c: 249: TRISAbits.TRISA0 = 0;
 12868                           
 12869                           ;incstack = 0
 12870                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
 12871  1169  0020               	movlb	0	; select bank0
 12872  116A  1011               	bcf	17,0	;volatile
 12873                           
 12874                           ;lcd.c: 250: TRISAbits.TRISA1 = 0;
 12875  116B  1091               	bcf	17,1	;volatile
 12876                           
 12877                           ;lcd.c: 251: TRISAbits.TRISA2 = 0;
 12878  116C  1111               	bcf	17,2	;volatile
 12879                           
 12880                           ;lcd.c: 252: TRISAbits.TRISA3 = 0;
 12881  116D  1191               	bcf	17,3	;volatile
 12882                           
 12883                           ;lcd.c: 253: TRISAbits.TRISA4 = 0;
 12884  116E  1211               	bcf	17,4	;volatile
 12885                           
 12886                           ;lcd.c: 254: LATAbits.LATA3 = 0;
 12887  116F  1196               	bcf	22,3	;volatile
 12888                           
 12889                           ;lcd.c: 255: LATAbits.LATA4 = 0;
 12890  1170  1216               	bcf	22,4	;volatile
 12891                           
 12892                           ;lcd.c: 256: LATAbits.LATA2 = 0;
 12893  1171  1116               	bcf	22,2	;volatile
 12894                           
 12895                           ;lcd.c: 257: LATAbits.LATA0 = 0;
 12896  1172  1016               	bcf	22,0	;volatile
 12897                           
 12898                           ;lcd.c: 259: LATAbits.LATA0 = 1;
 12899  1173  1416               	bsf	22,0	;volatile
 12900                           
 12901                           ;lcd.c: 261: LCDWrite(0, 0x21);
 12902  1174  3021               	movlw	33
 12903  1175  00F5               	movwf	??_LCDInit
 12904  1176  0875               	movf	??_LCDInit,w
 12905  1177  00F0               	movwf	LCDWrite@data
 12906  1178  3000               	movlw	0
 12907  1179  319F  2789  3191   	fcall	_LCDWrite
 12908                           
 12909                           ;lcd.c: 269: LCDWrite(0, 0XB9);
 12910  117C  30B9               	movlw	185
 12911  117D  00F5               	movwf	??_LCDInit
 12912  117E  0875               	movf	??_LCDInit,w
 12913  117F  00F0               	movwf	LCDWrite@data
 12914  1180  3000               	movlw	0
 12915  1181  319F  2789  3191   	fcall	_LCDWrite
 12916                           
 12917                           ;lcd.c: 271: LCDWrite(0, 0x04);
 12918  1184  3004               	movlw	4
 12919  1185  00F5               	movwf	??_LCDInit
 12920  1186  0875               	movf	??_LCDInit,w
 12921  1187  00F0               	movwf	LCDWrite@data
 12922  1188  3000               	movlw	0
 12923  1189  319F  2789  3191   	fcall	_LCDWrite
 12924                           
 12925                           ;lcd.c: 273: LCDWrite(0, 0x14);
 12926  118C  3014               	movlw	20
 12927  118D  00F5               	movwf	??_LCDInit
 12928  118E  0875               	movf	??_LCDInit,w
 12929  118F  00F0               	movwf	LCDWrite@data
 12930  1190  3000               	movlw	0
 12931  1191  319F  2789  3191   	fcall	_LCDWrite
 12932                           
 12933                           ;lcd.c: 275: LCDWrite(0, 0x20);
 12934  1194  3020               	movlw	32
 12935  1195  00F5               	movwf	??_LCDInit
 12936  1196  0875               	movf	??_LCDInit,w
 12937  1197  00F0               	movwf	LCDWrite@data
 12938  1198  3000               	movlw	0
 12939  1199  319F  2789  3191   	fcall	_LCDWrite
 12940                           
 12941                           ;lcd.c: 277: LCDWrite(0, 0x0C);
 12942  119C  300C               	movlw	12
 12943  119D  00F5               	movwf	??_LCDInit
 12944  119E  0875               	movf	??_LCDInit,w
 12945  119F  00F0               	movwf	LCDWrite@data
 12946  11A0  3000               	movlw	0
 12947  11A1  319F  2789         	fcall	_LCDWrite
 12948  11A3  0008               	return
 12949  11A4                     __end_of_LCDInit:	
 12950                           
 12951                           	psect	text26
 12952  1FAE                     __ptext26:	
 12953 ;; *************** function _LCDClear *****************
 12954 ;; Defined at:
 12955 ;;		line 182 in file "lcd.c"
 12956 ;; Parameters:    Size  Location     Type
 12957 ;;		None
 12958 ;; Auto vars:     Size  Location     Type
 12959 ;;  index           2    9[COMMON] int 
 12960 ;; Return value:  Size  Location     Type
 12961 ;;                  1    wreg      void 
 12962 ;; Registers used:
 12963 ;;		wreg, status,2, status,0, pclath, cstack
 12964 ;; Tracked objects:
 12965 ;;		On entry : 0/0
 12966 ;;		On exit  : 0/0
 12967 ;;		Unchanged: 0/0
 12968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12970 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12971 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12972 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12973 ;;Total ram usage:        3 bytes
 12974 ;; Hardware stack levels used:    1
 12975 ;; Hardware stack levels required when called:    2
 12976 ;; This function calls:
 12977 ;;		_LCDWrite
 12978 ;;		_gotoXY
 12979 ;; This function is called by:
 12980 ;;		_SYSTEM_Initialize
 12981 ;;		_main
 12982 ;; This function uses a non-reentrant model
 12983 ;;
 12984                           
 12985                           
 12986                           ;psect for function _LCDClear
 12987  1FAE                     _LCDClear:	
 12988                           
 12989                           ;lcd.c: 184: int index;
 12990                           ;lcd.c: 185: for (index = 0 ; index < (84 * 48 / 8) ; index++)
 12991                           
 12992                           ;incstack = 0
 12993                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
 12994  1FAE  01F9               	clrf	LCDClear@index
 12995  1FAF  01FA               	clrf	LCDClear@index+1
 12996  1FB0  087A               	movf	LCDClear@index+1,w
 12997  1FB1  3A80               	xorlw	128
 12998  1FB2  00F8               	movwf	??_LCDClear
 12999  1FB3  3081               	movlw	129
 13000  1FB4  0278               	subwf	??_LCDClear,w
 13001  1FB5  1D03               	skipz
 13002  1FB6  2FB9               	goto	u2985
 13003  1FB7  30F8               	movlw	248
 13004  1FB8  0279               	subwf	LCDClear@index,w
 13005  1FB9                     u2985:	
 13006  1FB9  1803               	btfsc	3,0
 13007  1FBA  2FCF               	goto	l2736
 13008  1FBB                     l2730:	
 13009                           
 13010                           ;lcd.c: 186: LCDWrite(1, 0x00);
 13011  1FBB  01F0               	clrf	LCDWrite@data
 13012  1FBC  3001               	movlw	1
 13013  1FBD  319F  2789  319F   	fcall	_LCDWrite
 13014  1FC0  3001               	movlw	1
 13015  1FC1  07F9               	addwf	LCDClear@index,f
 13016  1FC2  3000               	movlw	0
 13017  1FC3  3DFA               	addwfc	LCDClear@index+1,f
 13018  1FC4  087A               	movf	LCDClear@index+1,w
 13019  1FC5  3A80               	xorlw	128
 13020  1FC6  00F8               	movwf	??_LCDClear
 13021  1FC7  3081               	movlw	129
 13022  1FC8  0278               	subwf	??_LCDClear,w
 13023  1FC9  1D03               	skipz
 13024  1FCA  2FCD               	goto	u2995
 13025  1FCB  30F8               	movlw	248
 13026  1FCC  0279               	subwf	LCDClear@index,w
 13027  1FCD                     u2995:	
 13028  1FCD  1C03               	skipc
 13029  1FCE  2FBB               	goto	l2730
 13030  1FCF                     l2736:	
 13031                           
 13032                           ;lcd.c: 187: gotoXY(0, 0);
 13033  1FCF  01F5               	clrf	gotoXY@y
 13034  1FD0  3000               	movlw	0
 13035  1FD1  319E  2668         	fcall	_gotoXY
 13036  1FD3  0008               	return
 13037  1FD4                     __end_of_LCDClear:	
 13038                           
 13039                           	psect	text27
 13040  1E68                     __ptext27:	
 13041 ;; *************** function _gotoXY *****************
 13042 ;; Defined at:
 13043 ;;		line 124 in file "lcd.c"
 13044 ;; Parameters:    Size  Location     Type
 13045 ;;  x               1    wreg     unsigned char 
 13046 ;;  y               1    5[COMMON] unsigned char 
 13047 ;; Auto vars:     Size  Location     Type
 13048 ;;  x               1    7[COMMON] unsigned char 
 13049 ;; Return value:  Size  Location     Type
 13050 ;;                  1    wreg      void 
 13051 ;; Registers used:
 13052 ;;		wreg, status,2, status,0, pclath, cstack
 13053 ;; Tracked objects:
 13054 ;;		On entry : 0/0
 13055 ;;		On exit  : 0/0
 13056 ;;		Unchanged: 0/0
 13057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13058 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13059 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13060 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13061 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13062 ;;Total ram usage:        3 bytes
 13063 ;; Hardware stack levels used:    1
 13064 ;; Hardware stack levels required when called:    1
 13065 ;; This function calls:
 13066 ;;		_LCDWrite
 13067 ;; This function is called by:
 13068 ;;		_LCDClear
 13069 ;;		_main
 13070 ;; This function uses a non-reentrant model
 13071 ;;
 13072                           
 13073                           
 13074                           ;psect for function _gotoXY
 13075  1E68                     _gotoXY:	
 13076                           
 13077                           ;incstack = 0
 13078                           ; Regs used in _gotoXY: [wreg+status,2+status,0+pclath+cstack]
 13079                           ;gotoXY@x stored from wreg
 13080  1E68  00F7               	movwf	gotoXY@x
 13081                           
 13082                           ;lcd.c: 126: LCDWrite(0,(uint8_t)(0x80 | x));
 13083  1E69  0877               	movf	gotoXY@x,w
 13084  1E6A  3880               	iorlw	128
 13085  1E6B  00F6               	movwf	??_gotoXY
 13086  1E6C  0876               	movf	??_gotoXY,w
 13087  1E6D  00F0               	movwf	LCDWrite@data
 13088  1E6E  3000               	movlw	0
 13089  1E6F  319F  2789  319E   	fcall	_LCDWrite
 13090                           
 13091                           ;lcd.c: 127: LCDWrite(0,(uint8_t)(0x40 | y));
 13092  1E72  0875               	movf	gotoXY@y,w
 13093  1E73  3840               	iorlw	64
 13094  1E74  00F6               	movwf	??_gotoXY
 13095  1E75  0876               	movf	??_gotoXY,w
 13096  1E76  00F0               	movwf	LCDWrite@data
 13097  1E77  3000               	movlw	0
 13098  1E78  319F  2789         	fcall	_LCDWrite
 13099  1E7A  0008               	return
 13100  1E7B                     __end_of_gotoXY:	
 13101                           
 13102                           	psect	text28
 13103  1404                     __ptext28:	
 13104 ;; *************** function _Init_Battery_State_Machine *****************
 13105 ;; Defined at:
 13106 ;;		line 21 in file "battery_charger.c"
 13107 ;; Parameters:    Size  Location     Type
 13108 ;;  z               1    wreg     unsigned char 
 13109 ;; Auto vars:     Size  Location     Type
 13110 ;;  z               1   35[BANK0 ] unsigned char 
 13111 ;; Return value:  Size  Location     Type
 13112 ;;                  1    wreg      void 
 13113 ;; Registers used:
 13114 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13115 ;; Tracked objects:
 13116 ;;		On entry : 0/0
 13117 ;;		On exit  : 0/0
 13118 ;;		Unchanged: 0/0
 13119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13121 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13122 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13123 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13124 ;;Total ram usage:        5 bytes
 13125 ;; Hardware stack levels used:    1
 13126 ;; Hardware stack levels required when called:    2
 13127 ;; This function calls:
 13128 ;;		___awtoft
 13129 ;;		___ftmul
 13130 ;;		___fttol
 13131 ;; This function is called by:
 13132 ;;		_SYSTEM_Initialize
 13133 ;; This function uses a non-reentrant model
 13134 ;;
 13135                           
 13136                           
 13137                           ;psect for function _Init_Battery_State_Machine
 13138  1404                     _Init_Battery_State_Machine:	
 13139                           
 13140                           ;incstack = 0
 13141                           ; Regs used in _Init_Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13142                           ;Init_Battery_State_Machine@z stored from wreg
 13143  1404  0020               	movlb	0	; select bank0
 13144  1405  00C3               	movwf	Init_Battery_State_Machine@z
 13145                           
 13146                           ;battery_charger.c: 23: batteryState[z] =PRECHARGE;
 13147  1406  3003               	movlw	3
 13148  1407  00BF               	movwf	??_Init_Battery_State_Machine
 13149  1408  0843               	movf	Init_Battery_State_Machine@z,w
 13150  1409  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 13151  140A  0086               	movwf	6
 13152  140B  0187               	clrf	7
 13153  140C  083F               	movf	??_Init_Battery_State_Machine,w
 13154  140D  0081               	movwf	1
 13155                           
 13156                           ;battery_charger.c: 24: stateCounter[z] =5;
 13157  140E  3543               	lslf	Init_Battery_State_Machine@z,w
 13158  140F  3EB4               	addlw	(low (_stateCounter| 0))& (0+255)
 13159  1410  0086               	movwf	6
 13160  1411  0187               	clrf	7
 13161  1412  3005               	movlw	5
 13162  1413  3FC0               	movwi [0]fsr1
 13163  1414  3000               	movlw	0
 13164  1415  3FC1               	movwi [1]fsr1
 13165                           
 13166                           ;battery_charger.c: 25: Iref[z] =10;
 13167  1416  3543               	lslf	Init_Battery_State_Machine@z,w
 13168  1417  3EB8               	addlw	(low (_Iref| 0))& (0+255)
 13169  1418  0086               	movwf	6
 13170  1419  0187               	clrf	7
 13171  141A  300A               	movlw	10
 13172  141B  3FC0               	movwi [0]fsr1
 13173  141C  3000               	movlw	0
 13174  141D  3FC1               	movwi [1]fsr1
 13175                           
 13176                           ;battery_charger.c: 26: Vref[z] =1425+(int16_t)((250-batteryTemp)*.24);
 13177  141E  096D               	comf	_batteryTemp,w
 13178  141F  00BF               	movwf	??_Init_Battery_State_Machine
 13179  1420  096E               	comf	_batteryTemp+1,w
 13180  1421  00C0               	movwf	??_Init_Battery_State_Machine+1
 13181  1422  0ABF               	incf	??_Init_Battery_State_Machine,f
 13182  1423  1903               	skipnz
 13183  1424  0AC0               	incf	??_Init_Battery_State_Machine+1,f
 13184  1425  083F               	movf	??_Init_Battery_State_Machine,w
 13185  1426  3EFA               	addlw	250
 13186  1427  00F9               	movwf	___awtoft@c
 13187  1428  3000               	movlw	0
 13188  1429  3D40               	addwfc	??_Init_Battery_State_Machine+1,w
 13189  142A  00FA               	movwf	___awtoft@c+1
 13190  142B  319F  2747  3194   	fcall	___awtoft
 13191  142E  0879               	movf	?___awtoft,w
 13192  142F  0020               	movlb	0	; select bank0
 13193  1430  00A4               	movwf	___ftmul@f2
 13194  1431  087A               	movf	?___awtoft+1,w
 13195  1432  00A5               	movwf	___ftmul@f2+1
 13196  1433  087B               	movf	?___awtoft+2,w
 13197  1434  00A6               	movwf	___ftmul@f2+2
 13198  1435  30C3               	movlw	195
 13199  1436  00A1               	movwf	___ftmul@f1
 13200  1437  3075               	movlw	117
 13201  1438  00A2               	movwf	___ftmul@f1+1
 13202  1439  303E               	movlw	62
 13203  143A  00A3               	movwf	___ftmul@f1+2
 13204  143B  3197  274C  3194   	fcall	___ftmul
 13205  143E  0020               	movlb	0	; select bank0
 13206  143F  0821               	movf	?___ftmul,w
 13207  1440  00B1               	movwf	___fttol@f1
 13208  1441  0822               	movf	?___ftmul+1,w
 13209  1442  00B2               	movwf	___fttol@f1+1
 13210  1443  0823               	movf	?___ftmul+2,w
 13211  1444  00B3               	movwf	___fttol@f1+2
 13212  1445  3195  256C         	fcall	___fttol
 13213  1447  0020               	movlb	0	; select bank0
 13214  1448  0831               	movf	?___fttol,w
 13215  1449  3E91               	addlw	145
 13216  144A  00C1               	movwf	??_Init_Battery_State_Machine+2
 13217  144B  3005               	movlw	5
 13218  144C  3D32               	addwfc	?___fttol+1,w
 13219  144D  00C2               	movwf	??_Init_Battery_State_Machine+3
 13220  144E  3543               	lslf	Init_Battery_State_Machine@z,w
 13221  144F  3EB0               	addlw	(low (_Vref| 0))& (0+255)
 13222  1450  0086               	movwf	6
 13223  1451  0187               	clrf	7
 13224  1452  0841               	movf	??_Init_Battery_State_Machine+2,w
 13225  1453  3FC0               	movwi [0]fsr1
 13226  1454  0842               	movf	??_Init_Battery_State_Machine+3,w
 13227  1455  3FC1               	movwi [1]fsr1
 13228                           
 13229                           ;battery_charger.c: 27: Imin[z] =15;
 13230  1456  3543               	lslf	Init_Battery_State_Machine@z,w
 13231  1457  3E55               	addlw	(low (_Imin| (0+256)))& (0+255)
 13232  1458  0086               	movwf	6
 13233  1459  3001               	movlw	1	; select bank2/3
 13234  145A  0087               	movwf	7
 13235  145B  300F               	movlw	15
 13236  145C  3FC0               	movwi [0]fsr1
 13237  145D  3000               	movlw	0
 13238  145E  3FC1               	movwi [1]fsr1
 13239                           
 13240                           ;battery_charger.c: 28: IminCount[z] = 600;
 13241  145F  3543               	lslf	Init_Battery_State_Machine@z,w
 13242  1460  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 13243  1461  0086               	movwf	6
 13244  1462  0187               	clrf	7
 13245  1463  3058               	movlw	88
 13246  1464  3FC0               	movwi [0]fsr1
 13247  1465  3002               	movlw	2
 13248  1466  3FC1               	movwi [1]fsr1
 13249  1467  0008               	return
 13250  1468                     __end_of_Init_Battery_State_Machine:	
 13251                           
 13252                           	psect	text29
 13253  1F09                     __ptext29:	
 13254 ;; *************** function _ADC_Initialize *****************
 13255 ;; Defined at:
 13256 ;;		line 138 in file "adc.c"
 13257 ;; Parameters:    Size  Location     Type
 13258 ;;		None
 13259 ;; Auto vars:     Size  Location     Type
 13260 ;;		None
 13261 ;; Return value:  Size  Location     Type
 13262 ;;                  1    wreg      void 
 13263 ;; Registers used:
 13264 ;;		wreg, status,2
 13265 ;; Tracked objects:
 13266 ;;		On entry : 0/0
 13267 ;;		On exit  : 0/0
 13268 ;;		Unchanged: 0/0
 13269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13274 ;;Total ram usage:        0 bytes
 13275 ;; Hardware stack levels used:    1
 13276 ;; This function calls:
 13277 ;;		Nothing
 13278 ;; This function is called by:
 13279 ;;		_SYSTEM_Initialize
 13280 ;; This function uses a non-reentrant model
 13281 ;;
 13282                           
 13283                           
 13284                           ;psect for function _ADC_Initialize
 13285  1F09                     _ADC_Initialize:	
 13286                           
 13287                           ;adc.c: 140: ADCON1 = 0x00;
 13288                           
 13289                           ;incstack = 0
 13290                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 13291  1F09  0021               	movlb	1	; select bank1
 13292  1F0A  0194               	clrf	20	;volatile
 13293                           
 13294                           ;adc.c: 142: ADCON2 = 0x00;
 13295  1F0B  0195               	clrf	21	;volatile
 13296                           
 13297                           ;adc.c: 144: ADCON3 = 0x00;
 13298  1F0C  0196               	clrf	22	;volatile
 13299                           
 13300                           ;adc.c: 146: ADACT = 0x00;
 13301  1F0D  0199               	clrf	25	;volatile
 13302                           
 13303                           ;adc.c: 148: ADSTAT = 0x00;
 13304  1F0E  0197               	clrf	23	;volatile
 13305                           
 13306                           ;adc.c: 150: FVRCON = 0b11000011;
 13307  1F0F  30C3               	movlw	195
 13308  1F10  0032               	movlb	18	; select bank18
 13309  1F11  008C               	movwf	12	;volatile
 13310                           
 13311                           ;adc.c: 151: ADCLK = 0x3F;
 13312  1F12  303F               	movlw	63
 13313  1F13  0021               	movlb	1	; select bank1
 13314  1F14  0098               	movwf	24	;volatile
 13315                           
 13316                           ;adc.c: 158: ADREF = 0x03;
 13317  1F15  3003               	movlw	3
 13318  1F16  009A               	movwf	26	;volatile
 13319                           
 13320                           ;adc.c: 161: ADCAP = 0x00;
 13321  1F17  019B               	clrf	27	;volatile
 13322                           
 13323                           ;adc.c: 164: ADPRE = 0x07;
 13324  1F18  3007               	movlw	7
 13325  1F19  009C               	movwf	28	;volatile
 13326                           
 13327                           ;adc.c: 166: ADACQ = 0x00;
 13328  1F1A  019D               	clrf	29	;volatile
 13329                           
 13330                           ;adc.c: 168: ADPCH = 0x00;
 13331  1F1B  019E               	clrf	30	;volatile
 13332                           
 13333                           ;adc.c: 170: ADRPT = 0x00;
 13334  1F1C  0022               	movlb	2	; select bank2
 13335  1F1D  018D               	clrf	13	;volatile
 13336                           
 13337                           ;adc.c: 172: ADLTHL = 0x00;
 13338  1F1E  018E               	clrf	14	;volatile
 13339                           
 13340                           ;adc.c: 174: ADLTHH = 0x00;
 13341  1F1F  018F               	clrf	15	;volatile
 13342                           
 13343                           ;adc.c: 176: ADUTHL = 0x00;
 13344  1F20  0190               	clrf	16	;volatile
 13345                           
 13346                           ;adc.c: 178: ADUTHH = 0x00;
 13347  1F21  0191               	clrf	17	;volatile
 13348                           
 13349                           ;adc.c: 180: ADSTPTL = 0x00;
 13350  1F22  0192               	clrf	18	;volatile
 13351                           
 13352                           ;adc.c: 182: ADSTPTH = 0x00;
 13353  1F23  0193               	clrf	19	;volatile
 13354                           
 13355                           ;adc.c: 184: ADCON0 = 0x84;
 13356  1F24  3084               	movlw	132
 13357  1F25  0021               	movlb	1	; select bank1
 13358  1F26  0093               	movwf	19	;volatile
 13359  1F27  0008               	return
 13360  1F28                     __end_of_ADC_Initialize:	
 13361                           
 13362                           	psect	text30
 13363  0800                     __ptext30:	
 13364 ;; *************** function _PWM7_LoadDutyValue *****************
 13365 ;; Defined at:
 13366 ;;		line 37 in file "pwm.c"
 13367 ;; Parameters:    Size  Location     Type
 13368 ;;  dutyCycle7      2    0[COMMON] unsigned int 
 13369 ;; Auto vars:     Size  Location     Type
 13370 ;;		None
 13371 ;; Return value:  Size  Location     Type
 13372 ;;                  1    wreg      void 
 13373 ;; Registers used:
 13374 ;;		wreg, status,2, status,0
 13375 ;; Tracked objects:
 13376 ;;		On entry : 0/0
 13377 ;;		On exit  : 0/0
 13378 ;;		Unchanged: 0/0
 13379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13380 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13382 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13383 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13384 ;;Total ram usage:        4 bytes
 13385 ;; Hardware stack levels used:    1
 13386 ;; This function calls:
 13387 ;;		Nothing
 13388 ;; This function is called by:
 13389 ;;		_main
 13390 ;; This function uses a non-reentrant model
 13391 ;;
 13392                           
 13393                           
 13394                           ;psect for function _PWM7_LoadDutyValue
 13395  0800                     _PWM7_LoadDutyValue:	
 13396                           
 13397                           ;pwm.c: 39: PWM7DCH = (dutyCycle7 & 0x03FC)>>2;
 13398                           
 13399                           ;incstack = 0
 13400                           ; Regs used in _PWM7_LoadDutyValue: [wreg+status,2+status,0]
 13401  0800  0871               	movf	PWM7_LoadDutyValue@dutyCycle7+1,w
 13402  0801  00F3               	movwf	??_PWM7_LoadDutyValue+1
 13403  0802  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 13404  0803  00F2               	movwf	??_PWM7_LoadDutyValue
 13405  0804  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 13406  0805  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 13407  0806  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 13408  0807  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 13409  0808  0872               	movf	??_PWM7_LoadDutyValue,w
 13410  0809  0027               	movlb	7	; select bank7
 13411  080A  0091               	movwf	17	;volatile
 13412                           
 13413                           ;pwm.c: 41: PWM7DCL = (dutyCycle7 & 0x0003)<<6;
 13414  080B  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 13415  080C  3903               	andlw	3
 13416  080D  00F2               	movwf	??_PWM7_LoadDutyValue
 13417  080E  3005               	movlw	5
 13418  080F                     u4015:	
 13419  080F  35F2               	lslf	??_PWM7_LoadDutyValue,f
 13420  0810  3EFF               	addlw	-1
 13421  0811  1D03               	skipz
 13422  0812  280F               	goto	u4015
 13423  0813  3572               	lslf	??_PWM7_LoadDutyValue,w
 13424  0814  0090               	movwf	16	;volatile
 13425  0815  0008               	return
 13426  0816                     __end_of_PWM7_LoadDutyValue:	
 13427                           
 13428                           	psect	text31
 13429  1EBA                     __ptext31:	
 13430 ;; *************** function _PWM6_LoadDutyValue *****************
 13431 ;; Defined at:
 13432 ;;		line 30 in file "pwm.c"
 13433 ;; Parameters:    Size  Location     Type
 13434 ;;  dutyCycle6      2    0[COMMON] unsigned int 
 13435 ;; Auto vars:     Size  Location     Type
 13436 ;;		None
 13437 ;; Return value:  Size  Location     Type
 13438 ;;                  1    wreg      void 
 13439 ;; Registers used:
 13440 ;;		wreg, status,2, status,0
 13441 ;; Tracked objects:
 13442 ;;		On entry : 0/0
 13443 ;;		On exit  : 0/0
 13444 ;;		Unchanged: 0/0
 13445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13446 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13448 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13449 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13450 ;;Total ram usage:        4 bytes
 13451 ;; Hardware stack levels used:    1
 13452 ;; This function calls:
 13453 ;;		Nothing
 13454 ;; This function is called by:
 13455 ;;		_main
 13456 ;; This function uses a non-reentrant model
 13457 ;;
 13458                           
 13459                           
 13460                           ;psect for function _PWM6_LoadDutyValue
 13461  1EBA                     _PWM6_LoadDutyValue:	
 13462                           
 13463                           ;pwm.c: 32: PWM6DCH = (dutyCycle6 & 0x03FC)>>2;
 13464                           
 13465                           ;incstack = 0
 13466                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 13467  1EBA  0871               	movf	PWM6_LoadDutyValue@dutyCycle6+1,w
 13468  1EBB  00F3               	movwf	??_PWM6_LoadDutyValue+1
 13469  1EBC  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 13470  1EBD  00F2               	movwf	??_PWM6_LoadDutyValue
 13471  1EBE  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13472  1EBF  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13473  1EC0  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13474  1EC1  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13475  1EC2  0872               	movf	??_PWM6_LoadDutyValue,w
 13476  1EC3  0027               	movlb	7	; select bank7
 13477  1EC4  008D               	movwf	13	;volatile
 13478                           
 13479                           ;pwm.c: 34: PWM6DCL = (dutyCycle6 & 0x0003)<<6;
 13480  1EC5  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 13481  1EC6  3903               	andlw	3
 13482  1EC7  00F2               	movwf	??_PWM6_LoadDutyValue
 13483  1EC8  3005               	movlw	5
 13484  1EC9                     u4005:	
 13485  1EC9  35F2               	lslf	??_PWM6_LoadDutyValue,f
 13486  1ECA  3EFF               	addlw	-1
 13487  1ECB  1D03               	skipz
 13488  1ECC  2EC9               	goto	u4005
 13489  1ECD  3572               	lslf	??_PWM6_LoadDutyValue,w
 13490  1ECE  008C               	movwf	12	;volatile
 13491  1ECF  0008               	return
 13492  1ED0                     __end_of_PWM6_LoadDutyValue:	
 13493                           
 13494                           	psect	text32
 13495  1EA4                     __ptext32:	
 13496 ;; *************** function _PWM1_LoadDutyValue *****************
 13497 ;; Defined at:
 13498 ;;		line 44 in file "pwm.c"
 13499 ;; Parameters:    Size  Location     Type
 13500 ;;  dutyCycle1      2    0[COMMON] unsigned int 
 13501 ;; Auto vars:     Size  Location     Type
 13502 ;;		None
 13503 ;; Return value:  Size  Location     Type
 13504 ;;                  1    wreg      void 
 13505 ;; Registers used:
 13506 ;;		wreg, status,2, status,0
 13507 ;; Tracked objects:
 13508 ;;		On entry : 0/0
 13509 ;;		On exit  : 0/0
 13510 ;;		Unchanged: 0/0
 13511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13512 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13514 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13515 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13516 ;;Total ram usage:        4 bytes
 13517 ;; Hardware stack levels used:    1
 13518 ;; This function calls:
 13519 ;;		Nothing
 13520 ;; This function is called by:
 13521 ;;		_main
 13522 ;; This function uses a non-reentrant model
 13523 ;;
 13524                           
 13525                           
 13526                           ;psect for function _PWM1_LoadDutyValue
 13527  1EA4                     _PWM1_LoadDutyValue:	
 13528                           
 13529                           ;pwm.c: 46: CCPR1H = (dutyCycle1& 0x03FC)>>2;
 13530                           
 13531                           ;incstack = 0
 13532                           ; Regs used in _PWM1_LoadDutyValue: [wreg+status,2+status,0]
 13533  1EA4  0871               	movf	PWM1_LoadDutyValue@dutyCycle1+1,w
 13534  1EA5  00F3               	movwf	??_PWM1_LoadDutyValue+1
 13535  1EA6  0870               	movf	PWM1_LoadDutyValue@dutyCycle1,w
 13536  1EA7  00F2               	movwf	??_PWM1_LoadDutyValue
 13537  1EA8  36F3               	lsrf	??_PWM1_LoadDutyValue+1,f
 13538  1EA9  0CF2               	rrf	??_PWM1_LoadDutyValue,f
 13539  1EAA  36F3               	lsrf	??_PWM1_LoadDutyValue+1,f
 13540  1EAB  0CF2               	rrf	??_PWM1_LoadDutyValue,f
 13541  1EAC  0872               	movf	??_PWM1_LoadDutyValue,w
 13542  1EAD  0026               	movlb	6	; select bank6
 13543  1EAE  008D               	movwf	13	;volatile
 13544                           
 13545                           ;pwm.c: 47: CCPR1L = (dutyCycle1 & 0x0003)<<6;
 13546  1EAF  0870               	movf	PWM1_LoadDutyValue@dutyCycle1,w
 13547  1EB0  3903               	andlw	3
 13548  1EB1  00F2               	movwf	??_PWM1_LoadDutyValue
 13549  1EB2  3005               	movlw	5
 13550  1EB3                     u4025:	
 13551  1EB3  35F2               	lslf	??_PWM1_LoadDutyValue,f
 13552  1EB4  3EFF               	addlw	-1
 13553  1EB5  1D03               	skipz
 13554  1EB6  2EB3               	goto	u4025
 13555  1EB7  3572               	lslf	??_PWM1_LoadDutyValue,w
 13556  1EB8  008C               	movwf	12	;volatile
 13557  1EB9  0008               	return
 13558  1EBA                     __end_of_PWM1_LoadDutyValue:	
 13559                           
 13560                           	psect	text33
 13561  1E7B                     __ptext33:	
 13562 ;; *************** function _LCDWriteString *****************
 13563 ;; Defined at:
 13564 ;;		line 176 in file "lcd.c"
 13565 ;; Parameters:    Size  Location     Type
 13566 ;;  characters      2   12[COMMON] PTR const unsigned char 
 13567 ;;		 -> STR_3(5), STR_2(5), STR_1(4), 
 13568 ;; Auto vars:     Size  Location     Type
 13569 ;;		None
 13570 ;; Return value:  Size  Location     Type
 13571 ;;                  1    wreg      void 
 13572 ;; Registers used:
 13573 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13574 ;; Tracked objects:
 13575 ;;		On entry : 0/0
 13576 ;;		On exit  : 0/0
 13577 ;;		Unchanged: 0/0
 13578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13579 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13581 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13582 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13583 ;;Total ram usage:        3 bytes
 13584 ;; Hardware stack levels used:    1
 13585 ;; Hardware stack levels required when called:    2
 13586 ;; This function calls:
 13587 ;;		_LCDWriteCharacter
 13588 ;; This function is called by:
 13589 ;;		_main
 13590 ;; This function uses a non-reentrant model
 13591 ;;
 13592                           
 13593                           
 13594                           ;psect for function _LCDWriteString
 13595  1E7B                     _LCDWriteString:	
 13596  1E7B                     l3202:	
 13597                           ;lcd.c: 178: while (*characters)
 13598                           
 13599                           ;incstack = 0
 13600                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13601                           
 13602  1E7B  087C               	movf	LCDWriteString@characters,w
 13603  1E7C  0084               	movwf	4
 13604  1E7D  087D               	movf	LCDWriteString@characters+1,w
 13605  1E7E  0085               	movwf	5
 13606  1E7F  0012               	moviw fsr0++
 13607  1E80  1903               	btfsc	3,2
 13608  1E81  0008               	return
 13609                           
 13610                           ;lcd.c: 179: LCDWriteCharacter(*characters++);
 13611  1E82  087C               	movf	LCDWriteString@characters,w
 13612  1E83  0084               	movwf	4
 13613  1E84  087D               	movf	LCDWriteString@characters+1,w
 13614  1E85  0085               	movwf	5
 13615  1E86  0800               	movf	0,w	;code access
 13616  1E87  3192  22EC  319E   	fcall	_LCDWriteCharacter
 13617  1E8A  3001               	movlw	1
 13618  1E8B  07FC               	addwf	LCDWriteString@characters,f
 13619  1E8C  3000               	movlw	0
 13620  1E8D  3DFD               	addwfc	LCDWriteString@characters+1,f
 13621  1E8E  2E7B               	goto	l3202
 13622  1E8F                     __end_of_LCDWriteString:	
 13623                           
 13624                           	psect	text34
 13625  0816                     __ptext34:	
 13626 ;; *************** function _LCDWriteInt *****************
 13627 ;; Defined at:
 13628 ;;		line 190 in file "lcd.c"
 13629 ;; Parameters:    Size  Location     Type
 13630 ;;  value           2   31[BANK0 ] int 
 13631 ;;  fieldLength     1   33[BANK0 ] char 
 13632 ;;  numPlaces       1   34[BANK0 ] unsigned char 
 13633 ;;  sign            1   35[BANK0 ] unsigned char 
 13634 ;; Auto vars:     Size  Location     Type
 13635 ;;  str             5   40[BANK0 ] unsigned char [5]
 13636 ;;  i               1   46[BANK0 ] unsigned char 
 13637 ;;  j               1   45[BANK0 ] unsigned char 
 13638 ;; Return value:  Size  Location     Type
 13639 ;;                  1    wreg      void 
 13640 ;; Registers used:
 13641 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13642 ;; Tracked objects:
 13643 ;;		On entry : 0/0
 13644 ;;		On exit  : 0/0
 13645 ;;		Unchanged: 0/0
 13646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13647 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13648 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13649 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13650 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13651 ;;Total ram usage:       16 bytes
 13652 ;; Hardware stack levels used:    1
 13653 ;; Hardware stack levels required when called:    2
 13654 ;; This function calls:
 13655 ;;		_LCDWriteCharacter
 13656 ;;		___awdiv
 13657 ;;		___lwmod
 13658 ;; This function is called by:
 13659 ;;		_main
 13660 ;; This function uses a non-reentrant model
 13661 ;;
 13662                           
 13663                           
 13664                           ;psect for function _LCDWriteInt
 13665  0816                     _LCDWriteInt:	
 13666                           
 13667                           ;lcd.c: 192: uint8_t str[5]={0,0,0,0,0};
 13668                           
 13669                           ;incstack = 0
 13670                           ; Regs used in _LCDWriteInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13671  0816  3050               	movlw	low LCDWriteInt@F14392
 13672  0817  0086               	movwf	6
 13673  0818  3001               	movlw	high LCDWriteInt@F14392
 13674  0819  0087               	movwf	7
 13675  081A  3048               	movlw	low LCDWriteInt@str
 13676  081B  0084               	movwf	4
 13677  081C  3000               	movlw	high LCDWriteInt@str
 13678  081D  0085               	movwf	5
 13679  081E  3005               	movlw	5
 13680  081F  0020               	movlb	0	; select bank0
 13681  0820  00C4               	movwf	??_LCDWriteInt
 13682  0821                     u3910:	
 13683  0821  0016               	moviw fsr1++
 13684  0822  001A               	movwi fsr0++
 13685  0823  0BC4               	decfsz	??_LCDWriteInt,f
 13686  0824  2821               	goto	u3910
 13687                           
 13688                           ;lcd.c: 193: uint8_t i=4,j=0;
 13689  0825  3004               	movlw	4
 13690  0826  00C4               	movwf	??_LCDWriteInt
 13691  0827  0844               	movf	??_LCDWriteInt,w
 13692  0828  00CE               	movwf	LCDWriteInt@i
 13693  0829  01CD               	clrf	LCDWriteInt@j
 13694                           
 13695                           ;lcd.c: 195: if(value<0)
 13696  082A  1FC0               	btfss	LCDWriteInt@value+1,7
 13697  082B  2837               	goto	l3216
 13698                           
 13699                           ;lcd.c: 196: {
 13700                           ;lcd.c: 197: LCDWriteCharacter('-');
 13701  082C  302D               	movlw	45
 13702  082D  3192  22EC  3188   	fcall	_LCDWriteCharacter
 13703                           
 13704                           ;lcd.c: 198: value=value*-1;
 13705  0830  0020               	movlb	0	; select bank0
 13706  0831  09BF               	comf	LCDWriteInt@value,f
 13707  0832  09C0               	comf	LCDWriteInt@value+1,f
 13708  0833  0ABF               	incf	LCDWriteInt@value,f
 13709  0834  1903               	skipnz
 13710  0835  0AC0               	incf	LCDWriteInt@value+1,f
 13711                           
 13712                           ;lcd.c: 199: }
 13713  0836  283E               	goto	l3226
 13714  0837                     l3216:	
 13715                           
 13716                           ;lcd.c: 201: else
 13717                           ;lcd.c: 202: {
 13718                           ;lcd.c: 203: if(sign == 1)
 13719  0837  0343               	decf	LCDWriteInt@sign,w
 13720  0838  1D03               	btfss	3,2
 13721  0839  283E               	goto	l3226
 13722                           
 13723                           ;lcd.c: 204: {
 13724                           ;lcd.c: 205: LCDWriteCharacter('+');
 13725  083A  302B               	movlw	43
 13726  083B  3192  22EC  3188   	fcall	_LCDWriteCharacter
 13727  083E                     l3226:	
 13728                           ;lcd.c: 206: }
 13729                           ;lcd.c: 207: }
 13730                           ;lcd.c: 209: while(value)
 13731                           
 13732  083E  0020               	movlb	0	; select bank0
 13733  083F  083F               	movf	LCDWriteInt@value,w
 13734  0840  0440               	iorwf	LCDWriteInt@value+1,w
 13735  0841  1903               	btfsc	3,2
 13736  0842  286B               	goto	l3228
 13737                           
 13738                           ;lcd.c: 210: {
 13739                           ;lcd.c: 211: str[i]=(uint16_t)value%10;
 13740  0843  300A               	movlw	10
 13741  0844  00F0               	movwf	___lwmod@divisor
 13742  0845  3000               	movlw	0
 13743  0846  00F1               	movwf	___lwmod@divisor+1
 13744  0847  0020               	movlb	0	; select bank0
 13745  0848  0840               	movf	LCDWriteInt@value+1,w
 13746  0849  00F3               	movwf	___lwmod@dividend+1
 13747  084A  083F               	movf	LCDWriteInt@value,w
 13748  084B  00F2               	movwf	___lwmod@dividend
 13749  084C  319F  27D4  3188   	fcall	___lwmod
 13750  084F  0870               	movf	?___lwmod,w
 13751  0850  0020               	movlb	0	; select bank0
 13752  0851  00C4               	movwf	??_LCDWriteInt
 13753  0852  084E               	movf	LCDWriteInt@i,w
 13754  0853  3E48               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13755  0854  0086               	movwf	6
 13756  0855  0187               	clrf	7
 13757  0856  0844               	movf	??_LCDWriteInt,w
 13758  0857  0081               	movwf	1
 13759                           
 13760                           ;lcd.c: 212: value=value/10;
 13761  0858  300A               	movlw	10
 13762  0859  00F0               	movwf	___awdiv@divisor
 13763  085A  3000               	movlw	0
 13764  085B  00F1               	movwf	___awdiv@divisor+1
 13765  085C  0840               	movf	LCDWriteInt@value+1,w
 13766  085D  00F3               	movwf	___awdiv@dividend+1
 13767  085E  083F               	movf	LCDWriteInt@value,w
 13768  085F  00F2               	movwf	___awdiv@dividend
 13769  0860  3192  229B  3188   	fcall	___awdiv
 13770  0863  0871               	movf	?___awdiv+1,w
 13771  0864  0020               	movlb	0	; select bank0
 13772  0865  00C0               	movwf	LCDWriteInt@value+1
 13773  0866  0870               	movf	?___awdiv,w
 13774  0867  00BF               	movwf	LCDWriteInt@value
 13775                           
 13776                           ;lcd.c: 213: i--;
 13777  0868  3001               	movlw	1
 13778  0869  02CE               	subwf	LCDWriteInt@i,f
 13779  086A  283E               	goto	l3226
 13780  086B                     l3228:	
 13781                           
 13782                           ;lcd.c: 214: }
 13783                           ;lcd.c: 215: if(fieldLength==-1)
 13784  086B  0A41               	incf	LCDWriteInt@fieldLength,w
 13785  086C  1903               	btfsc	3,2
 13786  086D  2873               	goto	l3234
 13787  086E  287B               	goto	l3236
 13788  086F                     l3232:	
 13789                           ;lcd.c: 216: {
 13790                           ;lcd.c: 217: while(str[j]==0)
 13791                           
 13792                           
 13793                           ;lcd.c: 218: {
 13794                           ;lcd.c: 219: j++;
 13795  086F  3001               	movlw	1
 13796  0870  00C4               	movwf	??_LCDWriteInt
 13797  0871  0844               	movf	??_LCDWriteInt,w
 13798  0872  07CD               	addwf	LCDWriteInt@j,f
 13799  0873                     l3234:	
 13800  0873  084D               	movf	LCDWriteInt@j,w
 13801  0874  3E48               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13802  0875  0086               	movwf	6
 13803  0876  0187               	clrf	7
 13804  0877  0801               	movf	1,w
 13805  0878  1D03               	btfss	3,2
 13806  0879  2881               	goto	l3238
 13807  087A  286F               	goto	l3232
 13808  087B                     l3236:	
 13809                           ;lcd.c: 220: }
 13810                           ;lcd.c: 221: }
 13811                           
 13812                           
 13813                           ;lcd.c: 222: else
 13814                           ;lcd.c: 223: {
 13815                           ;lcd.c: 224: j=(uint8_t)(5-fieldLength);
 13816  087B  0341               	decf	LCDWriteInt@fieldLength,w
 13817  087C  3AFF               	xorlw	255
 13818  087D  3E05               	addlw	5
 13819  087E  00C4               	movwf	??_LCDWriteInt
 13820  087F  0844               	movf	??_LCDWriteInt,w
 13821  0880  00CD               	movwf	LCDWriteInt@j
 13822  0881                     l3238:	
 13823                           
 13824                           ;lcd.c: 225: }
 13825                           ;lcd.c: 227: for(i=j;i<(5-numPlaces);i++)
 13826  0881  084D               	movf	LCDWriteInt@j,w
 13827  0882  00C4               	movwf	??_LCDWriteInt
 13828  0883  0844               	movf	??_LCDWriteInt,w
 13829  0884  00CE               	movwf	LCDWriteInt@i
 13830  0885                     l3244:	
 13831  0885  0842               	movf	LCDWriteInt@numPlaces,w
 13832  0886  00C4               	movwf	??_LCDWriteInt
 13833  0887  01C5               	clrf	??_LCDWriteInt+1
 13834  0888  09C4               	comf	??_LCDWriteInt,f
 13835  0889  09C5               	comf	??_LCDWriteInt+1,f
 13836  088A  0AC4               	incf	??_LCDWriteInt,f
 13837  088B  1903               	skipnz
 13838  088C  0AC5               	incf	??_LCDWriteInt+1,f
 13839  088D  0844               	movf	??_LCDWriteInt,w
 13840  088E  3E05               	addlw	5
 13841  088F  00C6               	movwf	??_LCDWriteInt+2
 13842  0890  3000               	movlw	0
 13843  0891  3D45               	addwfc	??_LCDWriteInt+1,w
 13844  0892  00C7               	movwf	??_LCDWriteInt+3
 13845  0893  0847               	movf	??_LCDWriteInt+3,w
 13846  0894  3A80               	xorlw	128
 13847  0895  3C80               	sublw	128
 13848  0896  1D03               	skipz
 13849  0897  289A               	goto	u3975
 13850  0898  0846               	movf	??_LCDWriteInt+2,w
 13851  0899  024E               	subwf	LCDWriteInt@i,w
 13852  089A                     u3975:	
 13853  089A  1803               	btfsc	3,0
 13854  089B  28AC               	goto	l3246
 13855                           
 13856                           ;lcd.c: 228: {
 13857                           ;lcd.c: 229: LCDWriteCharacter((uint8_t)(48+str[i]));
 13858  089C  0020               	movlb	0	; select bank0
 13859  089D  084E               	movf	LCDWriteInt@i,w
 13860  089E  3E48               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13861  089F  0086               	movwf	6
 13862  08A0  0187               	clrf	7
 13863  08A1  0801               	movf	1,w
 13864  08A2  3E30               	addlw	48
 13865  08A3  3192  22EC  3188   	fcall	_LCDWriteCharacter
 13866  08A6  3001               	movlw	1
 13867  08A7  0020               	movlb	0	; select bank0
 13868  08A8  00C4               	movwf	??_LCDWriteInt
 13869  08A9  0844               	movf	??_LCDWriteInt,w
 13870  08AA  07CE               	addwf	LCDWriteInt@i,f
 13871  08AB  2885               	goto	l3244
 13872  08AC                     l3246:	
 13873                           
 13874                           ;lcd.c: 230: }
 13875                           ;lcd.c: 232: if(numPlaces == 1)
 13876  08AC  0020               	movlb	0	; select bank0
 13877  08AD  0342               	decf	LCDWriteInt@numPlaces,w
 13878  08AE  1D03               	btfss	3,2
 13879  08AF  28BA               	goto	l3250
 13880                           
 13881                           ;lcd.c: 233: {
 13882                           ;lcd.c: 234: LCDWriteCharacter(46);
 13883  08B0  302E               	movlw	46
 13884  08B1  3192  22EC  3188   	fcall	_LCDWriteCharacter
 13885                           
 13886                           ;lcd.c: 235: LCDWriteCharacter ((uint8_t)(48+str[4]));
 13887  08B4  0020               	movlb	0	; select bank0
 13888  08B5  084C               	movf	LCDWriteInt@str+4,w
 13889  08B6  3E30               	addlw	48
 13890  08B7  3192  22EC  3188   	fcall	_LCDWriteCharacter
 13891  08BA                     l3250:	
 13892                           
 13893                           ;lcd.c: 236: }
 13894                           ;lcd.c: 238: if(numPlaces == 2)
 13895  08BA  3002               	movlw	2
 13896  08BB  0020               	movlb	0	; select bank0
 13897  08BC  0642               	xorwf	LCDWriteInt@numPlaces,w
 13898  08BD  1D03               	btfss	3,2
 13899  08BE  0008               	return
 13900                           
 13901                           ;lcd.c: 239: {
 13902                           ;lcd.c: 240: LCDWriteCharacter(46);
 13903  08BF  302E               	movlw	46
 13904  08C0  3192  22EC  3188   	fcall	_LCDWriteCharacter
 13905                           
 13906                           ;lcd.c: 241: LCDWriteCharacter((uint8_t)(48+str[3]));
 13907  08C3  0020               	movlb	0	; select bank0
 13908  08C4  084B               	movf	LCDWriteInt@str+3,w
 13909  08C5  3E30               	addlw	48
 13910  08C6  3192  22EC  3188   	fcall	_LCDWriteCharacter
 13911                           
 13912                           ;lcd.c: 242: LCDWriteCharacter((uint8_t)(48+str[4]));
 13913  08C9  0020               	movlb	0	; select bank0
 13914  08CA  084C               	movf	LCDWriteInt@str+4,w
 13915  08CB  3E30               	addlw	48
 13916  08CC  3192  22EC         	fcall	_LCDWriteCharacter
 13917  08CE  0008               	return
 13918  08CF                     __end_of_LCDWriteInt:	
 13919                           
 13920                           	psect	text35
 13921  1FD4                     __ptext35:	
 13922 ;; *************** function ___lwmod *****************
 13923 ;; Defined at:
 13924 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 13925 ;; Parameters:    Size  Location     Type
 13926 ;;  divisor         2    0[COMMON] unsigned int 
 13927 ;;  dividend        2    2[COMMON] unsigned int 
 13928 ;; Auto vars:     Size  Location     Type
 13929 ;;  counter         1    5[COMMON] unsigned char 
 13930 ;; Return value:  Size  Location     Type
 13931 ;;                  2    0[COMMON] unsigned int 
 13932 ;; Registers used:
 13933 ;;		wreg, status,2, status,0
 13934 ;; Tracked objects:
 13935 ;;		On entry : 0/0
 13936 ;;		On exit  : 0/0
 13937 ;;		Unchanged: 0/0
 13938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13939 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13940 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13941 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13942 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13943 ;;Total ram usage:        6 bytes
 13944 ;; Hardware stack levels used:    1
 13945 ;; This function calls:
 13946 ;;		Nothing
 13947 ;; This function is called by:
 13948 ;;		_LCDWriteInt
 13949 ;; This function uses a non-reentrant model
 13950 ;;
 13951                           
 13952                           
 13953                           ;psect for function ___lwmod
 13954  1FD4                     ___lwmod:	
 13955                           
 13956                           ;incstack = 0
 13957                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 13958  1FD4  0870               	movf	___lwmod@divisor,w
 13959  1FD5  0471               	iorwf	___lwmod@divisor+1,w
 13960  1FD6  1903               	btfsc	3,2
 13961  1FD7  2FFB               	goto	l3018
 13962  1FD8  01F5               	clrf	___lwmod@counter
 13963  1FD9  0AF5               	incf	___lwmod@counter,f
 13964  1FDA                     l3008:	
 13965  1FDA  1BF1               	btfsc	___lwmod@divisor+1,7
 13966  1FDB  2FE6               	goto	l3010
 13967  1FDC  3001               	movlw	1
 13968  1FDD                     u3365:	
 13969  1FDD  35F0               	lslf	___lwmod@divisor,f
 13970  1FDE  0DF1               	rlf	___lwmod@divisor+1,f
 13971  1FDF  0B89               	decfsz	9,f
 13972  1FE0  2FDD               	goto	u3365
 13973  1FE1  3001               	movlw	1
 13974  1FE2  00F4               	movwf	??___lwmod
 13975  1FE3  0874               	movf	??___lwmod,w
 13976  1FE4  07F5               	addwf	___lwmod@counter,f
 13977  1FE5  2FDA               	goto	l3008
 13978  1FE6                     l3010:	
 13979  1FE6  0871               	movf	___lwmod@divisor+1,w
 13980  1FE7  0273               	subwf	___lwmod@dividend+1,w
 13981  1FE8  1D03               	skipz
 13982  1FE9  2FEC               	goto	u3385
 13983  1FEA  0870               	movf	___lwmod@divisor,w
 13984  1FEB  0272               	subwf	___lwmod@dividend,w
 13985  1FEC                     u3385:	
 13986  1FEC  1C03               	skipc
 13987  1FED  2FF2               	goto	l3014
 13988  1FEE  0870               	movf	___lwmod@divisor,w
 13989  1FEF  02F2               	subwf	___lwmod@dividend,f
 13990  1FF0  0871               	movf	___lwmod@divisor+1,w
 13991  1FF1  3BF3               	subwfb	___lwmod@dividend+1,f
 13992  1FF2                     l3014:	
 13993  1FF2  3001               	movlw	1
 13994  1FF3                     u3395:	
 13995  1FF3  36F1               	lsrf	___lwmod@divisor+1,f
 13996  1FF4  0CF0               	rrf	___lwmod@divisor,f
 13997  1FF5  0B89               	decfsz	9,f
 13998  1FF6  2FF3               	goto	u3395
 13999  1FF7  3001               	movlw	1
 14000  1FF8  02F5               	subwf	___lwmod@counter,f
 14001  1FF9  1D03               	btfss	3,2
 14002  1FFA  2FE6               	goto	l3010
 14003  1FFB                     l3018:	
 14004  1FFB  0873               	movf	___lwmod@dividend+1,w
 14005  1FFC  00F1               	movwf	?___lwmod+1
 14006  1FFD  0872               	movf	___lwmod@dividend,w
 14007  1FFE  00F0               	movwf	?___lwmod
 14008  1FFF  0008               	return
 14009  2000                     __end_of___lwmod:	
 14010                           
 14011                           	psect	text36
 14012  129B                     __ptext36:	
 14013 ;; *************** function ___awdiv *****************
 14014 ;; Defined at:
 14015 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 14016 ;; Parameters:    Size  Location     Type
 14017 ;;  divisor         2    0[COMMON] int 
 14018 ;;  dividend        2    2[COMMON] int 
 14019 ;; Auto vars:     Size  Location     Type
 14020 ;;  quotient        2    7[COMMON] int 
 14021 ;;  sign            1    6[COMMON] unsigned char 
 14022 ;;  counter         1    5[COMMON] unsigned char 
 14023 ;; Return value:  Size  Location     Type
 14024 ;;                  2    0[COMMON] int 
 14025 ;; Registers used:
 14026 ;;		wreg, status,2, status,0
 14027 ;; Tracked objects:
 14028 ;;		On entry : 0/0
 14029 ;;		On exit  : 0/0
 14030 ;;		Unchanged: 0/0
 14031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14032 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14033 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14034 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14035 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14036 ;;Total ram usage:        9 bytes
 14037 ;; Hardware stack levels used:    1
 14038 ;; This function calls:
 14039 ;;		Nothing
 14040 ;; This function is called by:
 14041 ;;		_LCDWriteInt
 14042 ;;		_main
 14043 ;; This function uses a non-reentrant model
 14044 ;;
 14045                           
 14046                           
 14047                           ;psect for function ___awdiv
 14048  129B                     ___awdiv:	
 14049                           
 14050                           ;incstack = 0
 14051                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14052  129B  01F6               	clrf	___awdiv@sign
 14053  129C  1FF1               	btfss	___awdiv@divisor+1,7
 14054  129D  2AA5               	goto	l2914
 14055  129E  09F0               	comf	___awdiv@divisor,f
 14056  129F  09F1               	comf	___awdiv@divisor+1,f
 14057  12A0  0AF0               	incf	___awdiv@divisor,f
 14058  12A1  1903               	skipnz
 14059  12A2  0AF1               	incf	___awdiv@divisor+1,f
 14060  12A3  01F6               	clrf	___awdiv@sign
 14061  12A4  0AF6               	incf	___awdiv@sign,f
 14062  12A5                     l2914:	
 14063  12A5  1FF3               	btfss	___awdiv@dividend+1,7
 14064  12A6  2AB0               	goto	l2920
 14065  12A7  09F2               	comf	___awdiv@dividend,f
 14066  12A8  09F3               	comf	___awdiv@dividend+1,f
 14067  12A9  0AF2               	incf	___awdiv@dividend,f
 14068  12AA  1903               	skipnz
 14069  12AB  0AF3               	incf	___awdiv@dividend+1,f
 14070  12AC  3001               	movlw	1
 14071  12AD  00F4               	movwf	??___awdiv
 14072  12AE  0874               	movf	??___awdiv,w
 14073  12AF  06F6               	xorwf	___awdiv@sign,f
 14074  12B0                     l2920:	
 14075  12B0  01F7               	clrf	___awdiv@quotient
 14076  12B1  01F8               	clrf	___awdiv@quotient+1
 14077  12B2  0870               	movf	___awdiv@divisor,w
 14078  12B3  0471               	iorwf	___awdiv@divisor+1,w
 14079  12B4  1903               	btfsc	3,2
 14080  12B5  2ADF               	goto	l2942
 14081  12B6  01F5               	clrf	___awdiv@counter
 14082  12B7  0AF5               	incf	___awdiv@counter,f
 14083  12B8                     l2930:	
 14084  12B8  1BF1               	btfsc	___awdiv@divisor+1,7
 14085  12B9  2AC4               	goto	l2932
 14086  12BA  3001               	movlw	1
 14087  12BB                     u3195:	
 14088  12BB  35F0               	lslf	___awdiv@divisor,f
 14089  12BC  0DF1               	rlf	___awdiv@divisor+1,f
 14090  12BD  0B89               	decfsz	9,f
 14091  12BE  2ABB               	goto	u3195
 14092  12BF  3001               	movlw	1
 14093  12C0  00F4               	movwf	??___awdiv
 14094  12C1  0874               	movf	??___awdiv,w
 14095  12C2  07F5               	addwf	___awdiv@counter,f
 14096  12C3  2AB8               	goto	l2930
 14097  12C4                     l2932:	
 14098  12C4  3001               	movlw	1
 14099  12C5                     u3215:	
 14100  12C5  35F7               	lslf	___awdiv@quotient,f
 14101  12C6  0DF8               	rlf	___awdiv@quotient+1,f
 14102  12C7  0B89               	decfsz	9,f
 14103  12C8  2AC5               	goto	u3215
 14104  12C9  0871               	movf	___awdiv@divisor+1,w
 14105  12CA  0273               	subwf	___awdiv@dividend+1,w
 14106  12CB  1D03               	skipz
 14107  12CC  2ACF               	goto	u3225
 14108  12CD  0870               	movf	___awdiv@divisor,w
 14109  12CE  0272               	subwf	___awdiv@dividend,w
 14110  12CF                     u3225:	
 14111  12CF  1C03               	skipc
 14112  12D0  2AD6               	goto	l2938
 14113  12D1  0870               	movf	___awdiv@divisor,w
 14114  12D2  02F2               	subwf	___awdiv@dividend,f
 14115  12D3  0871               	movf	___awdiv@divisor+1,w
 14116  12D4  3BF3               	subwfb	___awdiv@dividend+1,f
 14117  12D5  1477               	bsf	___awdiv@quotient,0
 14118  12D6                     l2938:	
 14119  12D6  3001               	movlw	1
 14120  12D7                     u3235:	
 14121  12D7  36F1               	lsrf	___awdiv@divisor+1,f
 14122  12D8  0CF0               	rrf	___awdiv@divisor,f
 14123  12D9  0B89               	decfsz	9,f
 14124  12DA  2AD7               	goto	u3235
 14125  12DB  3001               	movlw	1
 14126  12DC  02F5               	subwf	___awdiv@counter,f
 14127  12DD  1D03               	btfss	3,2
 14128  12DE  2AC4               	goto	l2932
 14129  12DF                     l2942:	
 14130  12DF  0876               	movf	___awdiv@sign,w
 14131  12E0  1903               	btfsc	3,2
 14132  12E1  2AE7               	goto	l2946
 14133  12E2  09F7               	comf	___awdiv@quotient,f
 14134  12E3  09F8               	comf	___awdiv@quotient+1,f
 14135  12E4  0AF7               	incf	___awdiv@quotient,f
 14136  12E5  1903               	skipnz
 14137  12E6  0AF8               	incf	___awdiv@quotient+1,f
 14138  12E7                     l2946:	
 14139  12E7  0878               	movf	___awdiv@quotient+1,w
 14140  12E8  00F1               	movwf	?___awdiv+1
 14141  12E9  0877               	movf	___awdiv@quotient,w
 14142  12EA  00F0               	movwf	?___awdiv
 14143  12EB  0008               	return
 14144  12EC                     __end_of___awdiv:	
 14145                           
 14146                           	psect	text37
 14147  12EC                     __ptext37:	
 14148 ;; *************** function _LCDWriteCharacter *****************
 14149 ;; Defined at:
 14150 ;;		line 140 in file "lcd.c"
 14151 ;; Parameters:    Size  Location     Type
 14152 ;;  character       1    wreg     const unsigned char 
 14153 ;; Auto vars:     Size  Location     Type
 14154 ;;  character       1    9[COMMON] const unsigned char 
 14155 ;;  base            2   10[COMMON] unsigned int 
 14156 ;; Return value:  Size  Location     Type
 14157 ;;                  1    wreg      void 
 14158 ;; Registers used:
 14159 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14160 ;; Tracked objects:
 14161 ;;		On entry : 0/0
 14162 ;;		On exit  : 0/0
 14163 ;;		Unchanged: 0/0
 14164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14166 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14167 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14168 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14169 ;;Total ram usage:        6 bytes
 14170 ;; Hardware stack levels used:    1
 14171 ;; Hardware stack levels required when called:    1
 14172 ;; This function calls:
 14173 ;;		_LCDWrite
 14174 ;;		___wmul
 14175 ;; This function is called by:
 14176 ;;		_LCDWriteString
 14177 ;;		_LCDWriteInt
 14178 ;;		_main
 14179 ;; This function uses a non-reentrant model
 14180 ;;
 14181                           
 14182                           
 14183                           ;psect for function _LCDWriteCharacter
 14184  12EC                     _LCDWriteCharacter:	
 14185                           
 14186                           ;incstack = 0
 14187                           ; Regs used in _LCDWriteCharacter: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14188                           ;LCDWriteCharacter@character stored from wreg
 14189  12EC  00F9               	movwf	LCDWriteCharacter@character
 14190                           
 14191                           ;lcd.c: 142: uint16_t base;
 14192                           ;lcd.c: 143: base = character - 0x20;
 14193  12ED  0879               	movf	LCDWriteCharacter@character,w
 14194  12EE  3EE0               	addlw	224
 14195  12EF  00FA               	movwf	LCDWriteCharacter@base
 14196  12F0  30FF               	movlw	255
 14197  12F1  1803               	skipnc
 14198  12F2  3000               	movlw	0
 14199  12F3  00FB               	movwf	LCDWriteCharacter@base+1
 14200                           
 14201                           ;lcd.c: 144: base *= 3;
 14202  12F4  3003               	movlw	3
 14203  12F5  00F0               	movwf	___wmul@multiplier
 14204  12F6  3000               	movlw	0
 14205  12F7  00F1               	movwf	___wmul@multiplier+1
 14206  12F8  087B               	movf	LCDWriteCharacter@base+1,w
 14207  12F9  00F3               	movwf	___wmul@multiplicand+1
 14208  12FA  087A               	movf	LCDWriteCharacter@base,w
 14209  12FB  00F2               	movwf	___wmul@multiplicand
 14210  12FC  319E  26D0  3192   	fcall	___wmul
 14211  12FF  0871               	movf	?___wmul+1,w
 14212  1300  00FB               	movwf	LCDWriteCharacter@base+1
 14213  1301  0870               	movf	?___wmul,w
 14214  1302  00FA               	movwf	LCDWriteCharacter@base
 14215                           
 14216                           ;lcd.c: 145: LCDWrite(1,fonts[base]);
 14217  1303  087B               	movf	LCDWriteCharacter@base+1,w
 14218  1304  0085               	movwf	5
 14219  1305  087A               	movf	LCDWriteCharacter@base,w
 14220  1306  0084               	movwf	4
 14221  1307  3000               	movlw	low (_fonts| (0+32768))
 14222  1308  0784               	addwf	4,f
 14223  1309  3090               	movlw	high (_fonts| (0+32768))
 14224  130A  3D85               	addwfc	5,f
 14225  130B  0800               	movf	0,w	;code access
 14226  130C  00F6               	movwf	??_LCDWriteCharacter
 14227  130D  0876               	movf	??_LCDWriteCharacter,w
 14228  130E  00F0               	movwf	LCDWrite@data
 14229  130F  3001               	movlw	1
 14230  1310  319F  2789  3192   	fcall	_LCDWrite
 14231                           
 14232                           ;lcd.c: 146: LCDWrite(1,fonts[base + 1]);
 14233  1313  087A               	movf	LCDWriteCharacter@base,w
 14234  1314  3E01               	addlw	1
 14235  1315  00F6               	movwf	??_LCDWriteCharacter
 14236  1316  3000               	movlw	0
 14237  1317  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 14238  1318  00F7               	movwf	??_LCDWriteCharacter+1
 14239  1319  3000               	movlw	low (_fonts| (0+32768))
 14240  131A  0776               	addwf	??_LCDWriteCharacter,w
 14241  131B  0084               	movwf	4
 14242  131C  3090               	movlw	high (_fonts| (0+32768))
 14243  131D  3D77               	addwfc	??_LCDWriteCharacter+1,w
 14244  131E  0085               	movwf	5
 14245  131F  0800               	movf	0,w	;code access
 14246  1320  00F8               	movwf	??_LCDWriteCharacter+2
 14247  1321  0878               	movf	??_LCDWriteCharacter+2,w
 14248  1322  00F0               	movwf	LCDWrite@data
 14249  1323  3001               	movlw	1
 14250  1324  319F  2789  3192   	fcall	_LCDWrite
 14251                           
 14252                           ;lcd.c: 147: LCDWrite(1,fonts[base + 2]);
 14253  1327  087A               	movf	LCDWriteCharacter@base,w
 14254  1328  3E02               	addlw	2
 14255  1329  00F6               	movwf	??_LCDWriteCharacter
 14256  132A  3000               	movlw	0
 14257  132B  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 14258  132C  00F7               	movwf	??_LCDWriteCharacter+1
 14259  132D  3000               	movlw	low (_fonts| (0+32768))
 14260  132E  0776               	addwf	??_LCDWriteCharacter,w
 14261  132F  0084               	movwf	4
 14262  1330  3090               	movlw	high (_fonts| (0+32768))
 14263  1331  3D77               	addwfc	??_LCDWriteCharacter+1,w
 14264  1332  0085               	movwf	5
 14265  1333  0800               	movf	0,w	;code access
 14266  1334  00F8               	movwf	??_LCDWriteCharacter+2
 14267  1335  0878               	movf	??_LCDWriteCharacter+2,w
 14268  1336  00F0               	movwf	LCDWrite@data
 14269  1337  3001               	movlw	1
 14270  1338  319F  2789  3192   	fcall	_LCDWrite
 14271                           
 14272                           ;lcd.c: 148: LCDWrite(1, 0x00);
 14273  133B  01F0               	clrf	LCDWrite@data
 14274  133C  3001               	movlw	1
 14275  133D  319F  2789         	fcall	_LCDWrite
 14276  133F  0008               	return
 14277  1340                     __end_of_LCDWriteCharacter:	
 14278                           
 14279                           	psect	text38
 14280  1ED0                     __ptext38:	
 14281 ;; *************** function ___wmul *****************
 14282 ;; Defined at:
 14283 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 14284 ;; Parameters:    Size  Location     Type
 14285 ;;  multiplier      2    0[COMMON] unsigned int 
 14286 ;;  multiplicand    2    2[COMMON] unsigned int 
 14287 ;; Auto vars:     Size  Location     Type
 14288 ;;  product         2    4[COMMON] unsigned int 
 14289 ;; Return value:  Size  Location     Type
 14290 ;;                  2    0[COMMON] unsigned int 
 14291 ;; Registers used:
 14292 ;;		wreg, status,2, status,0
 14293 ;; Tracked objects:
 14294 ;;		On entry : 0/0
 14295 ;;		On exit  : 0/0
 14296 ;;		Unchanged: 0/0
 14297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14298 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14299 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14301 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14302 ;;Total ram usage:        6 bytes
 14303 ;; Hardware stack levels used:    1
 14304 ;; This function calls:
 14305 ;;		Nothing
 14306 ;; This function is called by:
 14307 ;;		_readIAnalog
 14308 ;;		_LCDWriteCharacter
 14309 ;;		_eval_poly
 14310 ;; This function uses a non-reentrant model
 14311 ;;
 14312                           
 14313                           
 14314                           ;psect for function ___wmul
 14315  1ED0                     ___wmul:	
 14316                           
 14317                           ;incstack = 0
 14318                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 14319  1ED0  01F4               	clrf	___wmul@product
 14320  1ED1  01F5               	clrf	___wmul@product+1
 14321  1ED2                     l2416:	
 14322  1ED2  1C70               	btfss	___wmul@multiplier,0
 14323  1ED3  2ED8               	goto	l628
 14324  1ED4  0872               	movf	___wmul@multiplicand,w
 14325  1ED5  07F4               	addwf	___wmul@product,f
 14326  1ED6  0873               	movf	___wmul@multiplicand+1,w
 14327  1ED7  3DF5               	addwfc	___wmul@product+1,f
 14328  1ED8                     l628:	
 14329  1ED8  3001               	movlw	1
 14330  1ED9                     u2425:	
 14331  1ED9  35F2               	lslf	___wmul@multiplicand,f
 14332  1EDA  0DF3               	rlf	___wmul@multiplicand+1,f
 14333  1EDB  0B89               	decfsz	9,f
 14334  1EDC  2ED9               	goto	u2425
 14335  1EDD  3001               	movlw	1
 14336  1EDE                     u2435:	
 14337  1EDE  36F1               	lsrf	___wmul@multiplier+1,f
 14338  1EDF  0CF0               	rrf	___wmul@multiplier,f
 14339  1EE0  0B89               	decfsz	9,f
 14340  1EE1  2EDE               	goto	u2435
 14341  1EE2  0870               	movf	___wmul@multiplier,w
 14342  1EE3  0471               	iorwf	___wmul@multiplier+1,w
 14343  1EE4  1D03               	btfss	3,2
 14344  1EE5  2ED2               	goto	l2416
 14345  1EE6  0875               	movf	___wmul@product+1,w
 14346  1EE7  00F1               	movwf	?___wmul+1
 14347  1EE8  0874               	movf	___wmul@product,w
 14348  1EE9  00F0               	movwf	?___wmul
 14349  1EEA  0008               	return
 14350  1EEB                     __end_of___wmul:	
 14351                           
 14352                           	psect	text39
 14353  1F89                     __ptext39:	
 14354 ;; *************** function _LCDWrite *****************
 14355 ;; Defined at:
 14356 ;;		line 281 in file "lcd.c"
 14357 ;; Parameters:    Size  Location     Type
 14358 ;;  data_or_comm    1    wreg     unsigned char 
 14359 ;;  data            1    0[COMMON] unsigned char 
 14360 ;; Auto vars:     Size  Location     Type
 14361 ;;  data_or_comm    1    2[COMMON] unsigned char 
 14362 ;;  i               1    4[COMMON] unsigned char 
 14363 ;;  d               1    3[COMMON] unsigned char 
 14364 ;; Return value:  Size  Location     Type
 14365 ;;                  1    wreg      void 
 14366 ;; Registers used:
 14367 ;;		wreg, status,2, status,0
 14368 ;; Tracked objects:
 14369 ;;		On entry : 0/0
 14370 ;;		On exit  : 0/0
 14371 ;;		Unchanged: 0/0
 14372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14373 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14374 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14375 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14376 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14377 ;;Total ram usage:        5 bytes
 14378 ;; Hardware stack levels used:    1
 14379 ;; This function calls:
 14380 ;;		Nothing
 14381 ;; This function is called by:
 14382 ;;		_gotoXY
 14383 ;;		_LCDWriteCharacter
 14384 ;;		_LCDClear
 14385 ;;		_LCDInit
 14386 ;; This function uses a non-reentrant model
 14387 ;;
 14388                           
 14389                           
 14390                           ;psect for function _LCDWrite
 14391  1F89                     _LCDWrite:	
 14392                           
 14393                           ;incstack = 0
 14394                           ; Regs used in _LCDWrite: [wreg+status,2+status,0]
 14395                           ;LCDWrite@data_or_command stored from wreg
 14396  1F89  00F2               	movwf	LCDWrite@data_or_command
 14397                           
 14398                           ;lcd.c: 283: uint8_t i,d;
 14399                           ;lcd.c: 285: d=data;
 14400  1F8A  0870               	movf	LCDWrite@data,w
 14401  1F8B  00F1               	movwf	??_LCDWrite
 14402  1F8C  0871               	movf	??_LCDWrite,w
 14403  1F8D  00F3               	movwf	LCDWrite@d
 14404                           
 14405                           ;lcd.c: 287: if(data_or_command == 0)
 14406  1F8E  0872               	movf	LCDWrite@data_or_command,w
 14407  1F8F  1D03               	btfss	3,2
 14408  1F90  2F94               	goto	l237
 14409                           
 14410                           ;lcd.c: 288: {
 14411                           ;lcd.c: 289: LATAbits.LATA2 = 0;
 14412  1F91  0020               	movlb	0	; select bank0
 14413  1F92  1116               	bcf	22,2	;volatile
 14414                           
 14415                           ;lcd.c: 290: }
 14416  1F93  2F96               	goto	l238
 14417  1F94                     l237:	
 14418                           
 14419                           ;lcd.c: 291: else
 14420                           ;lcd.c: 292: {
 14421                           ;lcd.c: 293: LATAbits.LATA2 = 1;
 14422  1F94  0020               	movlb	0	; select bank0
 14423  1F95  1516               	bsf	22,2	;volatile
 14424  1F96                     l238:	
 14425                           
 14426                           ;lcd.c: 294: }
 14427                           ;lcd.c: 296: LATAbits.LATA1 = 0;
 14428  1F96  1096               	bcf	22,1	;volatile
 14429                           
 14430                           ;lcd.c: 298: for(i=0;i<8;i++)
 14431  1F97  01F4               	clrf	LCDWrite@i
 14432  1F98  3008               	movlw	8
 14433  1F99  0274               	subwf	LCDWrite@i,w
 14434  1F9A  1803               	btfsc	3,0
 14435  1F9B  2FAC               	goto	l240
 14436  1F9C                     l239:	
 14437                           
 14438                           ;lcd.c: 299: {
 14439                           ;lcd.c: 300: LATAbits.LATA3 = 0;
 14440  1F9C  1196               	bcf	22,3	;volatile
 14441                           
 14442                           ;lcd.c: 302: if(d&0x80)
 14443  1F9D  1FF3               	btfss	LCDWrite@d,7
 14444  1F9E  2FA0               	goto	l241
 14445                           
 14446                           ;lcd.c: 303: {
 14447                           ;lcd.c: 304: LATAbits.LATA3 = 1;
 14448  1F9F  1596               	bsf	22,3	;volatile
 14449  1FA0                     l241:	
 14450                           
 14451                           ;lcd.c: 305: }
 14452                           ;lcd.c: 307: LATAbits.LATA4 = 1;
 14453  1FA0  1616               	bsf	22,4	;volatile
 14454                           
 14455                           ;lcd.c: 309: d<<=1;
 14456  1FA1  1003               	clrc
 14457  1FA2  0DF3               	rlf	LCDWrite@d,f
 14458                           
 14459                           ;lcd.c: 311: LATAbits.LATA4=0;
 14460  1FA3  1216               	bcf	22,4	;volatile
 14461  1FA4  3001               	movlw	1
 14462  1FA5  00F1               	movwf	??_LCDWrite
 14463  1FA6  0871               	movf	??_LCDWrite,w
 14464  1FA7  07F4               	addwf	LCDWrite@i,f
 14465  1FA8  3008               	movlw	8
 14466  1FA9  0274               	subwf	LCDWrite@i,w
 14467  1FAA  1C03               	skipc
 14468  1FAB  2F9C               	goto	l239
 14469  1FAC                     l240:	
 14470                           
 14471                           ;lcd.c: 312: }
 14472                           ;lcd.c: 314: LATAbits.LATA1 = 1;
 14473  1FAC  1496               	bsf	22,1	;volatile
 14474  1FAD  0008               	return
 14475  1FAE                     __end_of_LCDWrite:	
 14476                           
 14477                           	psect	text40
 14478  0E4B                     __ptext40:	
 14479 ;; *************** function _Battery_State_Machine *****************
 14480 ;; Defined at:
 14481 ;;		line 31 in file "battery_charger.c"
 14482 ;; Parameters:    Size  Location     Type
 14483 ;;  z               1    wreg     unsigned char 
 14484 ;; Auto vars:     Size  Location     Type
 14485 ;;  z               1   36[BANK0 ] unsigned char 
 14486 ;; Return value:  Size  Location     Type
 14487 ;;                  1    wreg      void 
 14488 ;; Registers used:
 14489 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14490 ;; Tracked objects:
 14491 ;;		On entry : 0/0
 14492 ;;		On exit  : 0/0
 14493 ;;		Unchanged: 0/0
 14494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14496 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14497 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14498 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14499 ;;Total ram usage:        6 bytes
 14500 ;; Hardware stack levels used:    1
 14501 ;; Hardware stack levels required when called:    2
 14502 ;; This function calls:
 14503 ;;		___awtoft
 14504 ;;		___ftmul
 14505 ;;		___fttol
 14506 ;; This function is called by:
 14507 ;;		_main
 14508 ;; This function uses a non-reentrant model
 14509 ;;
 14510                           
 14511                           
 14512                           ;psect for function _Battery_State_Machine
 14513  0E4B                     _Battery_State_Machine:	
 14514                           
 14515                           ;incstack = 0
 14516                           ; Regs used in _Battery_State_Machine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14517                           ;Battery_State_Machine@z stored from wreg
 14518  0E4B  0020               	movlb	0	; select bank0
 14519  0E4C  00C4               	movwf	Battery_State_Machine@z
 14520                           
 14521                           ;battery_charger.c: 33: if(batteryState[z]==PRECHARGE)
 14522  0E4D  0844               	movf	Battery_State_Machine@z,w
 14523  0E4E  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14524  0E4F  0086               	movwf	6
 14525  0E50  0187               	clrf	7
 14526  0E51  3003               	movlw	3
 14527  0E52  0601               	xorwf	1,w
 14528  0E53  1D03               	btfss	3,2
 14529  0E54  2EA2               	goto	l3074
 14530                           
 14531                           ;battery_charger.c: 34: {
 14532                           ;battery_charger.c: 35: if(voltage[z]<1075)
 14533  0E55  3544               	lslf	Battery_State_Machine@z,w
 14534  0E56  3EA0               	addlw	(low (_voltage| 0))& (0+255)
 14535  0E57  0086               	movwf	6
 14536  0E58  0187               	clrf	7
 14537  0E59  3F40               	moviw [0]fsr1
 14538  0E5A  00BF               	movwf	??_Battery_State_Machine
 14539  0E5B  3F41               	moviw [1]fsr1
 14540  0E5C  00C0               	movwf	??_Battery_State_Machine+1
 14541  0E5D  0840               	movf	??_Battery_State_Machine+1,w
 14542  0E5E  3A80               	xorlw	128
 14543  0E5F  00C1               	movwf	??_Battery_State_Machine+2
 14544  0E60  3084               	movlw	132
 14545  0E61  0241               	subwf	??_Battery_State_Machine+2,w
 14546  0E62  1D03               	skipz
 14547  0E63  2E66               	goto	u3595
 14548  0E64  3033               	movlw	51
 14549  0E65  023F               	subwf	??_Battery_State_Machine,w
 14550  0E66                     u3595:	
 14551  0E66  1803               	skipnc
 14552  0E67  2E90               	goto	l3072
 14553                           
 14554                           ;battery_charger.c: 36: {
 14555                           ;battery_charger.c: 37: if(stateCounter[z]>0)
 14556  0E68  0020               	movlb	0	; select bank0
 14557  0E69  3544               	lslf	Battery_State_Machine@z,w
 14558  0E6A  3EB4               	addlw	(low (_stateCounter| 0))& (0+255)
 14559  0E6B  0086               	movwf	6
 14560  0E6C  0187               	clrf	7
 14561  0E6D  3F40               	moviw [0]fsr1
 14562  0E6E  00BF               	movwf	??_Battery_State_Machine
 14563  0E6F  3F41               	moviw [1]fsr1
 14564  0E70  00C0               	movwf	??_Battery_State_Machine+1
 14565  0E71  0840               	movf	??_Battery_State_Machine+1,w
 14566  0E72  3A80               	xorlw	128
 14567  0E73  00C1               	movwf	??_Battery_State_Machine+2
 14568  0E74  3080               	movlw	128
 14569  0E75  0241               	subwf	??_Battery_State_Machine+2,w
 14570  0E76  1D03               	skipz
 14571  0E77  2E7A               	goto	u3605
 14572  0E78  3001               	movlw	1
 14573  0E79  023F               	subwf	??_Battery_State_Machine,w
 14574  0E7A                     u3605:	
 14575  0E7A  1C03               	skipc
 14576  0E7B  2E88               	goto	l3070
 14577                           
 14578                           ;battery_charger.c: 38: {
 14579                           ;battery_charger.c: 39: stateCounter[z]-=1;
 14580  0E7C  0020               	movlb	0	; select bank0
 14581  0E7D  3544               	lslf	Battery_State_Machine@z,w
 14582  0E7E  3EB4               	addlw	(low (_stateCounter| 0))& (0+255)
 14583  0E7F  0086               	movwf	6
 14584  0E80  0187               	clrf	7
 14585  0E81  30FF               	movlw	255
 14586  0E82  0781               	addwf	1,f
 14587  0E83  3141               	addfsr 1,1
 14588  0E84  30FF               	movlw	255
 14589  0E85  3D81               	addwfc	1,f
 14590  0E86  317F               	addfsr 1,-1
 14591                           
 14592                           ;battery_charger.c: 40: }
 14593  0E87  0008               	return
 14594  0E88                     l3070:	
 14595                           
 14596                           ;battery_charger.c: 41: else
 14597                           ;battery_charger.c: 42: {
 14598                           ;battery_charger.c: 43: batteryState[z]=FAULT;
 14599  0E88  0020               	movlb	0	; select bank0
 14600  0E89  0844               	movf	Battery_State_Machine@z,w
 14601  0E8A  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14602  0E8B  0086               	movwf	6
 14603  0E8C  0187               	clrf	7
 14604  0E8D  0181               	clrf	1
 14605  0E8E  0A81               	incf	1,f
 14606                           
 14607                           ;battery_charger.c: 44: }
 14608                           ;battery_charger.c: 45: }
 14609  0E8F  0008               	return
 14610  0E90                     l3072:	
 14611                           
 14612                           ;battery_charger.c: 46: else
 14613                           ;battery_charger.c: 47: {
 14614                           ;battery_charger.c: 48: batteryState[z]=CHARGE;
 14615  0E90  3004               	movlw	4
 14616  0E91  0020               	movlb	0	; select bank0
 14617  0E92  00BF               	movwf	??_Battery_State_Machine
 14618  0E93  0844               	movf	Battery_State_Machine@z,w
 14619  0E94  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14620  0E95  0086               	movwf	6
 14621  0E96  0187               	clrf	7
 14622  0E97  083F               	movf	??_Battery_State_Machine,w
 14623  0E98  0081               	movwf	1
 14624                           
 14625                           ;battery_charger.c: 49: Iref[z]=30;
 14626  0E99  3544               	lslf	Battery_State_Machine@z,w
 14627  0E9A  3EB8               	addlw	(low (_Iref| 0))& (0+255)
 14628  0E9B  0086               	movwf	6
 14629  0E9C  0187               	clrf	7
 14630  0E9D  301E               	movlw	30
 14631  0E9E  3FC0               	movwi [0]fsr1
 14632  0E9F  3000               	movlw	0
 14633  0EA0  3FC1               	movwi [1]fsr1
 14634                           
 14635                           ;battery_charger.c: 50: }
 14636                           ;battery_charger.c: 51: }
 14637  0EA1  0008               	return
 14638  0EA2                     l3074:	
 14639                           
 14640                           ;battery_charger.c: 52: else if(batteryState[z]==CHARGE)
 14641  0EA2  0844               	movf	Battery_State_Machine@z,w
 14642  0EA3  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14643  0EA4  0086               	movwf	6
 14644  0EA5  0187               	clrf	7
 14645  0EA6  3004               	movlw	4
 14646  0EA7  0601               	xorwf	1,w
 14647  0EA8  1D03               	btfss	3,2
 14648  0EA9  2F65               	goto	l3094
 14649                           
 14650                           ;battery_charger.c: 53: {
 14651                           ;battery_charger.c: 54: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 14652  0EAA  096D               	comf	_batteryTemp,w
 14653  0EAB  00BF               	movwf	??_Battery_State_Machine
 14654  0EAC  096E               	comf	_batteryTemp+1,w
 14655  0EAD  00C0               	movwf	??_Battery_State_Machine+1
 14656  0EAE  0ABF               	incf	??_Battery_State_Machine,f
 14657  0EAF  1903               	skipnz
 14658  0EB0  0AC0               	incf	??_Battery_State_Machine+1,f
 14659  0EB1  083F               	movf	??_Battery_State_Machine,w
 14660  0EB2  3EFA               	addlw	250
 14661  0EB3  00F9               	movwf	___awtoft@c
 14662  0EB4  3000               	movlw	0
 14663  0EB5  3D40               	addwfc	??_Battery_State_Machine+1,w
 14664  0EB6  00FA               	movwf	___awtoft@c+1
 14665  0EB7  319F  2747  318E   	fcall	___awtoft
 14666  0EBA  0879               	movf	?___awtoft,w
 14667  0EBB  0020               	movlb	0	; select bank0
 14668  0EBC  00A4               	movwf	___ftmul@f2
 14669  0EBD  087A               	movf	?___awtoft+1,w
 14670  0EBE  00A5               	movwf	___ftmul@f2+1
 14671  0EBF  087B               	movf	?___awtoft+2,w
 14672  0EC0  00A6               	movwf	___ftmul@f2+2
 14673  0EC1  30C3               	movlw	195
 14674  0EC2  00A1               	movwf	___ftmul@f1
 14675  0EC3  3075               	movlw	117
 14676  0EC4  00A2               	movwf	___ftmul@f1+1
 14677  0EC5  303E               	movlw	62
 14678  0EC6  00A3               	movwf	___ftmul@f1+2
 14679  0EC7  3197  274C  318E   	fcall	___ftmul
 14680  0ECA  0020               	movlb	0	; select bank0
 14681  0ECB  0821               	movf	?___ftmul,w
 14682  0ECC  00B1               	movwf	___fttol@f1
 14683  0ECD  0822               	movf	?___ftmul+1,w
 14684  0ECE  00B2               	movwf	___fttol@f1+1
 14685  0ECF  0823               	movf	?___ftmul+2,w
 14686  0ED0  00B3               	movwf	___fttol@f1+2
 14687  0ED1  3195  256C  318E   	fcall	___fttol
 14688  0ED4  0020               	movlb	0	; select bank0
 14689  0ED5  0831               	movf	?___fttol,w
 14690  0ED6  3E91               	addlw	145
 14691  0ED7  00C1               	movwf	??_Battery_State_Machine+2
 14692  0ED8  3005               	movlw	5
 14693  0ED9  3D32               	addwfc	?___fttol+1,w
 14694  0EDA  00C2               	movwf	??_Battery_State_Machine+3
 14695  0EDB  3544               	lslf	Battery_State_Machine@z,w
 14696  0EDC  3EB0               	addlw	(low (_Vref| 0))& (0+255)
 14697  0EDD  0086               	movwf	6
 14698  0EDE  0187               	clrf	7
 14699  0EDF  0841               	movf	??_Battery_State_Machine+2,w
 14700  0EE0  3FC0               	movwi [0]fsr1
 14701  0EE1  0842               	movf	??_Battery_State_Machine+3,w
 14702  0EE2  3FC1               	movwi [1]fsr1
 14703                           
 14704                           ;battery_charger.c: 55: if(!(Imode[z]))
 14705  0EE3  0844               	movf	Battery_State_Machine@z,w
 14706  0EE4  3E62               	addlw	(low (_Imode| 0))& (0+255)
 14707  0EE5  0086               	movwf	6
 14708  0EE6  0187               	clrf	7
 14709  0EE7  0801               	movf	1,w
 14710  0EE8  1D03               	btfss	3,2
 14711  0EE9  2F4C               	goto	l3090
 14712                           
 14713                           ;battery_charger.c: 56: {
 14714                           ;battery_charger.c: 57: if(current[z] < Imin[z])
 14715  0EEA  3544               	lslf	Battery_State_Machine@z,w
 14716  0EEB  3E55               	addlw	(low (_Imin| (0+256)))& (0+255)
 14717  0EEC  0086               	movwf	6
 14718  0EED  3001               	movlw	1	; select bank2/3
 14719  0EEE  0087               	movwf	7
 14720  0EEF  3F40               	moviw [0]fsr1
 14721  0EF0  00BF               	movwf	??_Battery_State_Machine
 14722  0EF1  3F41               	moviw [1]fsr1
 14723  0EF2  00C0               	movwf	??_Battery_State_Machine+1
 14724  0EF3  3544               	lslf	Battery_State_Machine@z,w
 14725  0EF4  3EA8               	addlw	(low (_current| 0))& (0+255)
 14726  0EF5  0086               	movwf	6
 14727  0EF6  0187               	clrf	7
 14728  0EF7  3F40               	moviw [0]fsr1
 14729  0EF8  00C1               	movwf	??_Battery_State_Machine+2
 14730  0EF9  3F41               	moviw [1]fsr1
 14731  0EFA  00C2               	movwf	??_Battery_State_Machine+3
 14732  0EFB  0842               	movf	??_Battery_State_Machine+3,w
 14733  0EFC  3A80               	xorlw	128
 14734  0EFD  00C3               	movwf	??_Battery_State_Machine+4
 14735  0EFE  0840               	movf	??_Battery_State_Machine+1,w
 14736  0EFF  3A80               	xorlw	128
 14737  0F00  0243               	subwf	??_Battery_State_Machine+4,w
 14738  0F01  1D03               	skipz
 14739  0F02  2F05               	goto	u3635
 14740  0F03  083F               	movf	??_Battery_State_Machine,w
 14741  0F04  0241               	subwf	??_Battery_State_Machine+2,w
 14742  0F05                     u3635:	
 14743  0F05  1803               	skipnc
 14744  0F06  2F32               	goto	l3086
 14745                           
 14746                           ;battery_charger.c: 58: {
 14747                           ;battery_charger.c: 59: IminCount[z]-=2;
 14748  0F07  0020               	movlb	0	; select bank0
 14749  0F08  3544               	lslf	Battery_State_Machine@z,w
 14750  0F09  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 14751  0F0A  0086               	movwf	6
 14752  0F0B  0187               	clrf	7
 14753  0F0C  3002               	movlw	2
 14754  0F0D  0281               	subwf	1,f
 14755  0F0E  3141               	addfsr 1,1
 14756  0F0F  3000               	movlw	0
 14757  0F10  3B81               	subwfb	1,f
 14758  0F11  317F               	addfsr 1,-1
 14759                           
 14760                           ;battery_charger.c: 60: if(IminCount[z]<10)
 14761  0F12  3544               	lslf	Battery_State_Machine@z,w
 14762  0F13  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 14763  0F14  0086               	movwf	6
 14764  0F15  0187               	clrf	7
 14765  0F16  3F40               	moviw [0]fsr1
 14766  0F17  00BF               	movwf	??_Battery_State_Machine
 14767  0F18  3F41               	moviw [1]fsr1
 14768  0F19  00C0               	movwf	??_Battery_State_Machine+1
 14769  0F1A  3000               	movlw	0
 14770  0F1B  0240               	subwf	??_Battery_State_Machine+1,w
 14771  0F1C  300A               	movlw	10
 14772  0F1D  1903               	skipnz
 14773  0F1E  023F               	subwf	??_Battery_State_Machine,w
 14774  0F1F  1803               	skipnc
 14775  0F20  0008               	return
 14776                           
 14777                           ;battery_charger.c: 61: {
 14778                           ;battery_charger.c: 62: batteryState[z] = FLOAT;
 14779  0F21  3005               	movlw	5
 14780  0F22  00BF               	movwf	??_Battery_State_Machine
 14781  0F23  0844               	movf	Battery_State_Machine@z,w
 14782  0F24  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14783  0F25  0086               	movwf	6
 14784  0F26  0187               	clrf	7
 14785  0F27  083F               	movf	??_Battery_State_Machine,w
 14786  0F28  0081               	movwf	1
 14787                           
 14788                           ;battery_charger.c: 63: IminCount[z]=10;
 14789  0F29  3544               	lslf	Battery_State_Machine@z,w
 14790  0F2A  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 14791  0F2B  0086               	movwf	6
 14792  0F2C  0187               	clrf	7
 14793  0F2D  300A               	movlw	10
 14794  0F2E  3FC0               	movwi [0]fsr1
 14795  0F2F  3000               	movlw	0
 14796  0F30  3FC1               	movwi [1]fsr1
 14797                           
 14798                           ;battery_charger.c: 64: }
 14799                           ;battery_charger.c: 65: }
 14800  0F31  0008               	return
 14801  0F32                     l3086:	
 14802                           
 14803                           ;battery_charger.c: 66: else
 14804                           ;battery_charger.c: 67: {
 14805                           ;battery_charger.c: 68: if(IminCount[z]<600)IminCount[z]+=1;
 14806  0F32  0020               	movlb	0	; select bank0
 14807  0F33  3544               	lslf	Battery_State_Machine@z,w
 14808  0F34  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 14809  0F35  0086               	movwf	6
 14810  0F36  0187               	clrf	7
 14811  0F37  3F40               	moviw [0]fsr1
 14812  0F38  00BF               	movwf	??_Battery_State_Machine
 14813  0F39  3F41               	moviw [1]fsr1
 14814  0F3A  00C0               	movwf	??_Battery_State_Machine+1
 14815  0F3B  3002               	movlw	2
 14816  0F3C  0240               	subwf	??_Battery_State_Machine+1,w
 14817  0F3D  3058               	movlw	88
 14818  0F3E  1903               	skipnz
 14819  0F3F  023F               	subwf	??_Battery_State_Machine,w
 14820  0F40  1803               	skipnc
 14821  0F41  0008               	return
 14822  0F42  3544               	lslf	Battery_State_Machine@z,w
 14823  0F43  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 14824  0F44  0086               	movwf	6
 14825  0F45  0187               	clrf	7
 14826  0F46  3001               	movlw	1
 14827  0F47  0781               	addwf	1,f
 14828  0F48  3141               	addfsr 1,1
 14829  0F49  1803               	skipnc
 14830  0F4A  0A81               	incf	1,f
 14831                           
 14832                           ;battery_charger.c: 69: }
 14833                           ;battery_charger.c: 70: }
 14834  0F4B  0008               	return
 14835  0F4C                     l3090:	
 14836                           
 14837                           ;battery_charger.c: 71: else if(IminCount[z]<600)IminCount[z]+=1;
 14838  0F4C  3544               	lslf	Battery_State_Machine@z,w
 14839  0F4D  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 14840  0F4E  0086               	movwf	6
 14841  0F4F  0187               	clrf	7
 14842  0F50  3F40               	moviw [0]fsr1
 14843  0F51  00BF               	movwf	??_Battery_State_Machine
 14844  0F52  3F41               	moviw [1]fsr1
 14845  0F53  00C0               	movwf	??_Battery_State_Machine+1
 14846  0F54  3002               	movlw	2
 14847  0F55  0240               	subwf	??_Battery_State_Machine+1,w
 14848  0F56  3058               	movlw	88
 14849  0F57  1903               	skipnz
 14850  0F58  023F               	subwf	??_Battery_State_Machine,w
 14851  0F59  1803               	skipnc
 14852  0F5A  0008               	return
 14853  0F5B  3544               	lslf	Battery_State_Machine@z,w
 14854  0F5C  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 14855  0F5D  0086               	movwf	6
 14856  0F5E  0187               	clrf	7
 14857  0F5F  3001               	movlw	1
 14858  0F60  0781               	addwf	1,f
 14859  0F61  3141               	addfsr 1,1
 14860  0F62  1803               	skipnc
 14861  0F63  0A81               	incf	1,f
 14862                           
 14863                           ;battery_charger.c: 72: }
 14864  0F64  0008               	return
 14865  0F65                     l3094:	
 14866                           
 14867                           ;battery_charger.c: 73: else if(batteryState[z] == FLOAT)
 14868  0F65  0844               	movf	Battery_State_Machine@z,w
 14869  0F66  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14870  0F67  0086               	movwf	6
 14871  0F68  0187               	clrf	7
 14872  0F69  3005               	movlw	5
 14873  0F6A  0601               	xorwf	1,w
 14874  0F6B  1D03               	btfss	3,2
 14875  0F6C  2FF0               	goto	l3116
 14876                           
 14877                           ;battery_charger.c: 74: {
 14878                           ;battery_charger.c: 75: otherState=(uint8_t)(1-z);
 14879  0F6D  0344               	decf	Battery_State_Machine@z,w
 14880  0F6E  3AFF               	xorlw	255
 14881  0F6F  3E01               	addlw	1
 14882  0F70  00BF               	movwf	??_Battery_State_Machine
 14883  0F71  083F               	movf	??_Battery_State_Machine,w
 14884  0F72  00EB               	movwf	_otherState
 14885                           
 14886                           ;battery_charger.c: 77: if(batteryState[otherState]==CHARGE)
 14887  0F73  086B               	movf	_otherState,w
 14888  0F74  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14889  0F75  0086               	movwf	6
 14890  0F76  0187               	clrf	7
 14891  0F77  3004               	movlw	4
 14892  0F78  0601               	xorwf	1,w
 14893  0F79  1D03               	btfss	3,2
 14894  0F7A  2FA5               	goto	l3108
 14895                           
 14896                           ;battery_charger.c: 78: {
 14897                           ;battery_charger.c: 79: floatCount[z]+=1;
 14898  0F7B  3001               	movlw	1
 14899  0F7C  00BF               	movwf	??_Battery_State_Machine
 14900  0F7D  0844               	movf	Battery_State_Machine@z,w
 14901  0F7E  3EC2               	addlw	(low (_floatCount| 0))& (0+255)
 14902  0F7F  0086               	movwf	6
 14903  0F80  0187               	clrf	7
 14904  0F81  083F               	movf	??_Battery_State_Machine,w
 14905  0F82  0781               	addwf	1,f
 14906                           
 14907                           ;battery_charger.c: 81: if(floatCount[z]>5)
 14908  0F83  0844               	movf	Battery_State_Machine@z,w
 14909  0F84  3EC2               	addlw	(low (_floatCount| 0))& (0+255)
 14910  0F85  0086               	movwf	6
 14911  0F86  0187               	clrf	7
 14912  0F87  3006               	movlw	6
 14913  0F88  0201               	subwf	1,w
 14914  0F89  1C03               	skipc
 14915  0F8A  0008               	return
 14916                           
 14917                           ;battery_charger.c: 82: {
 14918                           ;battery_charger.c: 83: IminCount[z]=IminCount[otherState];
 14919  0F8B  356B               	lslf	_otherState,w
 14920  0F8C  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 14921  0F8D  0086               	movwf	6
 14922  0F8E  0187               	clrf	7
 14923  0F8F  3544               	lslf	Battery_State_Machine@z,w
 14924  0F90  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 14925  0F91  0084               	movwf	4
 14926  0F92  0185               	clrf	5
 14927  0F93  3F40               	moviw [0]fsr1
 14928  0F94  3F80               	movwi [0]fsr0
 14929  0F95  3F41               	moviw [1]fsr1
 14930  0F96  3F81               	movwi [1]fsr0
 14931                           
 14932                           ;battery_charger.c: 84: floatCount[z]=0;
 14933  0F97  0844               	movf	Battery_State_Machine@z,w
 14934  0F98  3EC2               	addlw	(low (_floatCount| 0))& (0+255)
 14935  0F99  0086               	movwf	6
 14936  0F9A  0187               	clrf	7
 14937  0F9B  0181               	clrf	1
 14938                           
 14939                           ;battery_charger.c: 85: batteryState[z] = CHARGE;
 14940  0F9C  3004               	movlw	4
 14941  0F9D  00BF               	movwf	??_Battery_State_Machine
 14942  0F9E  0844               	movf	Battery_State_Machine@z,w
 14943  0F9F  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14944  0FA0  0086               	movwf	6
 14945  0FA1  0187               	clrf	7
 14946  0FA2  083F               	movf	??_Battery_State_Machine,w
 14947  0FA3  0081               	movwf	1
 14948                           
 14949                           ;battery_charger.c: 86: }
 14950                           ;battery_charger.c: 87: }
 14951  0FA4  0008               	return
 14952  0FA5                     l3108:	
 14953                           
 14954                           ;battery_charger.c: 88: else
 14955                           ;battery_charger.c: 89: {
 14956                           ;battery_charger.c: 90: Vref[z]=1350+(int16_t)((250-batteryTemp)*.24);
 14957  0FA5  096D               	comf	_batteryTemp,w
 14958  0FA6  00BF               	movwf	??_Battery_State_Machine
 14959  0FA7  096E               	comf	_batteryTemp+1,w
 14960  0FA8  00C0               	movwf	??_Battery_State_Machine+1
 14961  0FA9  0ABF               	incf	??_Battery_State_Machine,f
 14962  0FAA  1903               	skipnz
 14963  0FAB  0AC0               	incf	??_Battery_State_Machine+1,f
 14964  0FAC  083F               	movf	??_Battery_State_Machine,w
 14965  0FAD  3EFA               	addlw	250
 14966  0FAE  00F9               	movwf	___awtoft@c
 14967  0FAF  3000               	movlw	0
 14968  0FB0  3D40               	addwfc	??_Battery_State_Machine+1,w
 14969  0FB1  00FA               	movwf	___awtoft@c+1
 14970  0FB2  319F  2747  318E   	fcall	___awtoft
 14971  0FB5  0879               	movf	?___awtoft,w
 14972  0FB6  0020               	movlb	0	; select bank0
 14973  0FB7  00A4               	movwf	___ftmul@f2
 14974  0FB8  087A               	movf	?___awtoft+1,w
 14975  0FB9  00A5               	movwf	___ftmul@f2+1
 14976  0FBA  087B               	movf	?___awtoft+2,w
 14977  0FBB  00A6               	movwf	___ftmul@f2+2
 14978  0FBC  30C3               	movlw	195
 14979  0FBD  00A1               	movwf	___ftmul@f1
 14980  0FBE  3075               	movlw	117
 14981  0FBF  00A2               	movwf	___ftmul@f1+1
 14982  0FC0  303E               	movlw	62
 14983  0FC1  00A3               	movwf	___ftmul@f1+2
 14984  0FC2  3197  274C  318E   	fcall	___ftmul
 14985  0FC5  0020               	movlb	0	; select bank0
 14986  0FC6  0821               	movf	?___ftmul,w
 14987  0FC7  00B1               	movwf	___fttol@f1
 14988  0FC8  0822               	movf	?___ftmul+1,w
 14989  0FC9  00B2               	movwf	___fttol@f1+1
 14990  0FCA  0823               	movf	?___ftmul+2,w
 14991  0FCB  00B3               	movwf	___fttol@f1+2
 14992  0FCC  3195  256C         	fcall	___fttol
 14993  0FCE  0020               	movlb	0	; select bank0
 14994  0FCF  0831               	movf	?___fttol,w
 14995  0FD0  3E46               	addlw	70
 14996  0FD1  00C1               	movwf	??_Battery_State_Machine+2
 14997  0FD2  3005               	movlw	5
 14998  0FD3  3D32               	addwfc	?___fttol+1,w
 14999  0FD4  00C2               	movwf	??_Battery_State_Machine+3
 15000  0FD5  3544               	lslf	Battery_State_Machine@z,w
 15001  0FD6  3EB0               	addlw	(low (_Vref| 0))& (0+255)
 15002  0FD7  0086               	movwf	6
 15003  0FD8  0187               	clrf	7
 15004  0FD9  0841               	movf	??_Battery_State_Machine+2,w
 15005  0FDA  3FC0               	movwi [0]fsr1
 15006  0FDB  0842               	movf	??_Battery_State_Machine+3,w
 15007  0FDC  3FC1               	movwi [1]fsr1
 15008                           
 15009                           ;battery_charger.c: 91: Iref[z]=15;
 15010  0FDD  3544               	lslf	Battery_State_Machine@z,w
 15011  0FDE  3EB8               	addlw	(low (_Iref| 0))& (0+255)
 15012  0FDF  0086               	movwf	6
 15013  0FE0  0187               	clrf	7
 15014  0FE1  300F               	movlw	15
 15015  0FE2  3FC0               	movwi [0]fsr1
 15016  0FE3  3000               	movlw	0
 15017  0FE4  3FC1               	movwi [1]fsr1
 15018                           
 15019                           ;battery_charger.c: 92: Imode[z]=0;
 15020  0FE5  0844               	movf	Battery_State_Machine@z,w
 15021  0FE6  3E62               	addlw	(low (_Imode| 0))& (0+255)
 15022  0FE7  0086               	movwf	6
 15023  0FE8  0187               	clrf	7
 15024  0FE9  0181               	clrf	1
 15025                           
 15026                           ;battery_charger.c: 93: floatCount[z]=0;
 15027  0FEA  0844               	movf	Battery_State_Machine@z,w
 15028  0FEB  3EC2               	addlw	(low (_floatCount| 0))& (0+255)
 15029  0FEC  0086               	movwf	6
 15030  0FED  0187               	clrf	7
 15031  0FEE  0181               	clrf	1
 15032                           
 15033                           ;battery_charger.c: 94: }
 15034                           ;battery_charger.c: 95: }
 15035  0FEF  0008               	return
 15036  0FF0                     l3116:	
 15037                           
 15038                           ;battery_charger.c: 96: else
 15039                           ;battery_charger.c: 97: if(batteryState[z] == FAULT)
 15040  0FF0  0844               	movf	Battery_State_Machine@z,w
 15041  0FF1  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 15042  0FF2  0086               	movwf	6
 15043  0FF3  0187               	clrf	7
 15044  0FF4  0301               	decf	1,w
 15045  0FF5  1D03               	btfss	3,2
 15046  0FF6  0008               	return
 15047                           
 15048                           ;battery_charger.c: 98: {
 15049                           ;battery_charger.c: 99: batteryState[z]=PRECHARGE;
 15050  0FF7  3003               	movlw	3
 15051  0FF8  00BF               	movwf	??_Battery_State_Machine
 15052  0FF9  0844               	movf	Battery_State_Machine@z,w
 15053  0FFA  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 15054  0FFB  0086               	movwf	6
 15055  0FFC  0187               	clrf	7
 15056  0FFD  083F               	movf	??_Battery_State_Machine,w
 15057  0FFE  0081               	movwf	1
 15058  0FFF  0008               	return
 15059  1000                     __end_of_Battery_State_Machine:	
 15060                           
 15061                           	psect	text41
 15062  156C                     __ptext41:	
 15063 ;; *************** function ___fttol *****************
 15064 ;; Defined at:
 15065 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 15066 ;; Parameters:    Size  Location     Type
 15067 ;;  f1              3   17[BANK0 ] float 
 15068 ;; Auto vars:     Size  Location     Type
 15069 ;;  lval            4   26[BANK0 ] unsigned long 
 15070 ;;  exp1            1   30[BANK0 ] unsigned char 
 15071 ;;  sign1           1   25[BANK0 ] unsigned char 
 15072 ;; Return value:  Size  Location     Type
 15073 ;;                  4   17[BANK0 ] long 
 15074 ;; Registers used:
 15075 ;;		wreg, status,2, status,0
 15076 ;; Tracked objects:
 15077 ;;		On entry : 0/0
 15078 ;;		On exit  : 0/0
 15079 ;;		Unchanged: 0/0
 15080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15081 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15082 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15083 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15084 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15085 ;;Total ram usage:       14 bytes
 15086 ;; Hardware stack levels used:    1
 15087 ;; This function calls:
 15088 ;;		Nothing
 15089 ;; This function is called by:
 15090 ;;		_tempCalc
 15091 ;;		_main
 15092 ;;		_calculateCurrent0
 15093 ;;		_calculateCurrent3
 15094 ;;		_Init_Battery_State_Machine
 15095 ;;		_Battery_State_Machine
 15096 ;;		_cc_cv_mode
 15097 ;; This function uses a non-reentrant model
 15098 ;;
 15099                           
 15100                           
 15101                           ;psect for function ___fttol
 15102  156C                     ___fttol:	
 15103                           
 15104                           ;incstack = 0
 15105                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15106  156C  0020               	movlb	0	; select bank0
 15107  156D  0831               	movf	___fttol@f1,w
 15108  156E  00B5               	movwf	??___fttol
 15109  156F  0832               	movf	___fttol@f1+1,w
 15110  1570  00B6               	movwf	??___fttol+1
 15111  1571  0833               	movf	___fttol@f1+2,w
 15112  1572  00B7               	movwf	??___fttol+2
 15113  1573  1003               	clrc
 15114  1574  0D36               	rlf	??___fttol+1,w
 15115  1575  0D37               	rlf	??___fttol+2,w
 15116  1576  00B8               	movwf	??___fttol+3
 15117  1577  0838               	movf	??___fttol+3,w
 15118  1578  00BE               	movwf	___fttol@exp1
 15119  1579  083E               	movf	___fttol@exp1,w
 15120  157A  1D03               	btfss	3,2
 15121  157B  2D85               	goto	l2588
 15122  157C  3000               	movlw	0
 15123  157D  00B4               	movwf	?___fttol+3
 15124  157E  3000               	movlw	0
 15125  157F  00B3               	movwf	?___fttol+2
 15126  1580  3000               	movlw	0
 15127  1581  00B2               	movwf	?___fttol+1
 15128  1582  3000               	movlw	0
 15129  1583  00B1               	movwf	?___fttol
 15130  1584  0008               	return
 15131  1585                     l2588:	
 15132  1585  0831               	movf	___fttol@f1,w
 15133  1586  00B5               	movwf	??___fttol
 15134  1587  0832               	movf	___fttol@f1+1,w
 15135  1588  00B6               	movwf	??___fttol+1
 15136  1589  0833               	movf	___fttol@f1+2,w
 15137  158A  00B7               	movwf	??___fttol+2
 15138  158B  3017               	movlw	23
 15139  158C                     u2855:	
 15140  158C  36B7               	lsrf	??___fttol+2,f
 15141  158D  0CB6               	rrf	??___fttol+1,f
 15142  158E  0CB5               	rrf	??___fttol,f
 15143  158F  0B89               	decfsz	9,f
 15144  1590  2D8C               	goto	u2855
 15145  1591  0835               	movf	??___fttol,w
 15146  1592  00B8               	movwf	??___fttol+3
 15147  1593  0838               	movf	??___fttol+3,w
 15148  1594  00B9               	movwf	___fttol@sign1
 15149  1595  17B2               	bsf	___fttol@f1+1,7
 15150  1596  30FF               	movlw	255
 15151  1597  05B1               	andwf	___fttol@f1,f
 15152  1598  30FF               	movlw	255
 15153  1599  05B2               	andwf	___fttol@f1+1,f
 15154  159A  3000               	movlw	0
 15155  159B  05B3               	andwf	___fttol@f1+2,f
 15156  159C  0831               	movf	___fttol@f1,w
 15157  159D  00BA               	movwf	___fttol@lval
 15158  159E  0832               	movf	___fttol@f1+1,w
 15159  159F  00BB               	movwf	___fttol@lval+1
 15160  15A0  0833               	movf	___fttol@f1+2,w
 15161  15A1  00BC               	movwf	___fttol@lval+2
 15162  15A2  01BD               	clrf	___fttol@lval+3
 15163  15A3  308E               	movlw	142
 15164  15A4  02BE               	subwf	___fttol@exp1,f
 15165  15A5  1FBE               	btfss	___fttol@exp1,7
 15166  15A6  2DC3               	goto	l2608
 15167  15A7  083E               	movf	___fttol@exp1,w
 15168  15A8  3A80               	xorlw	128
 15169  15A9  3E8F               	addlw	143
 15170  15AA  1803               	skipnc
 15171  15AB  2DB5               	goto	l2606
 15172  15AC  3000               	movlw	0
 15173  15AD  00B4               	movwf	?___fttol+3
 15174  15AE  3000               	movlw	0
 15175  15AF  00B3               	movwf	?___fttol+2
 15176  15B0  3000               	movlw	0
 15177  15B1  00B2               	movwf	?___fttol+1
 15178  15B2  3000               	movlw	0
 15179  15B3  00B1               	movwf	?___fttol
 15180  15B4  0008               	return
 15181  15B5                     l2606:	
 15182  15B5  3001               	movlw	1
 15183  15B6                     u2885:	
 15184  15B6  36BD               	lsrf	___fttol@lval+3,f
 15185  15B7  0CBC               	rrf	___fttol@lval+2,f
 15186  15B8  0CBB               	rrf	___fttol@lval+1,f
 15187  15B9  0CBA               	rrf	___fttol@lval,f
 15188  15BA  0B89               	decfsz	9,f
 15189  15BB  2DB6               	goto	u2885
 15190  15BC  3001               	movlw	1
 15191  15BD  00B5               	movwf	??___fttol
 15192  15BE  0835               	movf	??___fttol,w
 15193  15BF  07BE               	addwf	___fttol@exp1,f
 15194  15C0  1903               	btfsc	3,2
 15195  15C1  2DDC               	goto	l2616
 15196  15C2  2DB5               	goto	l2606
 15197  15C3                     l2608:	
 15198  15C3  3018               	movlw	24
 15199  15C4  023E               	subwf	___fttol@exp1,w
 15200  15C5  1C03               	skipc
 15201  15C6  2DD9               	goto	l880
 15202  15C7  3000               	movlw	0
 15203  15C8  00B4               	movwf	?___fttol+3
 15204  15C9  3000               	movlw	0
 15205  15CA  00B3               	movwf	?___fttol+2
 15206  15CB  3000               	movlw	0
 15207  15CC  00B2               	movwf	?___fttol+1
 15208  15CD  3000               	movlw	0
 15209  15CE  00B1               	movwf	?___fttol
 15210  15CF  0008               	return
 15211  15D0                     l2614:	
 15212  15D0  3001               	movlw	1
 15213  15D1                     u2915:	
 15214  15D1  35BA               	lslf	___fttol@lval,f
 15215  15D2  0DBB               	rlf	___fttol@lval+1,f
 15216  15D3  0DBC               	rlf	___fttol@lval+2,f
 15217  15D4  0DBD               	rlf	___fttol@lval+3,f
 15218  15D5  0B89               	decfsz	9,f
 15219  15D6  2DD1               	goto	u2915
 15220  15D7  3001               	movlw	1
 15221  15D8  02BE               	subwf	___fttol@exp1,f
 15222  15D9                     l880:	
 15223  15D9  083E               	movf	___fttol@exp1,w
 15224  15DA  1D03               	btfss	3,2
 15225  15DB  2DD0               	goto	l2614
 15226  15DC                     l2616:	
 15227  15DC  0839               	movf	___fttol@sign1,w
 15228  15DD  1903               	btfsc	3,2
 15229  15DE  2DEA               	goto	l2620
 15230  15DF  09BA               	comf	___fttol@lval,f
 15231  15E0  09BB               	comf	___fttol@lval+1,f
 15232  15E1  09BC               	comf	___fttol@lval+2,f
 15233  15E2  09BD               	comf	___fttol@lval+3,f
 15234  15E3  0ABA               	incf	___fttol@lval,f
 15235  15E4  1903               	skipnz
 15236  15E5  0ABB               	incf	___fttol@lval+1,f
 15237  15E6  1903               	skipnz
 15238  15E7  0ABC               	incf	___fttol@lval+2,f
 15239  15E8  1903               	skipnz
 15240  15E9  0ABD               	incf	___fttol@lval+3,f
 15241  15EA                     l2620:	
 15242  15EA  083D               	movf	___fttol@lval+3,w
 15243  15EB  00B4               	movwf	?___fttol+3
 15244  15EC  083C               	movf	___fttol@lval+2,w
 15245  15ED  00B3               	movwf	?___fttol+2
 15246  15EE  083B               	movf	___fttol@lval+1,w
 15247  15EF  00B2               	movwf	?___fttol+1
 15248  15F0  083A               	movf	___fttol@lval,w
 15249  15F1  00B1               	movwf	?___fttol
 15250  15F2  0008               	return
 15251  15F3                     __end_of___fttol:	
 15252                           
 15253                           	psect	text42
 15254  174C                     __ptext42:	
 15255 ;; *************** function ___ftmul *****************
 15256 ;; Defined at:
 15257 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 15258 ;; Parameters:    Size  Location     Type
 15259 ;;  f1              3    1[BANK0 ] float 
 15260 ;;  f2              3    4[BANK0 ] float 
 15261 ;; Auto vars:     Size  Location     Type
 15262 ;;  f3_as_produc    3   12[BANK0 ] unsigned um
 15263 ;;  sign            1   16[BANK0 ] unsigned char 
 15264 ;;  cntr            1   15[BANK0 ] unsigned char 
 15265 ;;  exp             1   11[BANK0 ] unsigned char 
 15266 ;; Return value:  Size  Location     Type
 15267 ;;                  3    1[BANK0 ] float 
 15268 ;; Registers used:
 15269 ;;		wreg, status,2, status,0, pclath, cstack
 15270 ;; Tracked objects:
 15271 ;;		On entry : 0/0
 15272 ;;		On exit  : 0/0
 15273 ;;		Unchanged: 0/0
 15274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15275 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15276 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15277 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15278 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15279 ;;Total ram usage:       16 bytes
 15280 ;; Hardware stack levels used:    1
 15281 ;; Hardware stack levels required when called:    1
 15282 ;; This function calls:
 15283 ;;		___ftpack
 15284 ;; This function is called by:
 15285 ;;		_Init_Battery_State_Machine
 15286 ;;		_Battery_State_Machine
 15287 ;;		_cc_cv_mode
 15288 ;;		_tempCalc
 15289 ;;		_main
 15290 ;;		_log
 15291 ;;		_eval_poly
 15292 ;; This function uses a non-reentrant model
 15293 ;;
 15294                           
 15295                           
 15296                           ;psect for function ___ftmul
 15297  174C                     ___ftmul:	
 15298                           
 15299                           ;incstack = 0
 15300                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 15301  174C  0020               	movlb	0	; select bank0
 15302  174D  0821               	movf	___ftmul@f1,w
 15303  174E  00A7               	movwf	??___ftmul
 15304  174F  0822               	movf	___ftmul@f1+1,w
 15305  1750  00A8               	movwf	??___ftmul+1
 15306  1751  0823               	movf	___ftmul@f1+2,w
 15307  1752  00A9               	movwf	??___ftmul+2
 15308  1753  1003               	clrc
 15309  1754  0D28               	rlf	??___ftmul+1,w
 15310  1755  0D29               	rlf	??___ftmul+2,w
 15311  1756  00AA               	movwf	??___ftmul+3
 15312  1757  082A               	movf	??___ftmul+3,w
 15313  1758  00AB               	movwf	___ftmul@exp
 15314  1759  082B               	movf	___ftmul@exp,w
 15315  175A  1D03               	btfss	3,2
 15316  175B  2F63               	goto	l2504
 15317  175C  3000               	movlw	0
 15318  175D  00A1               	movwf	?___ftmul
 15319  175E  3000               	movlw	0
 15320  175F  00A2               	movwf	?___ftmul+1
 15321  1760  3000               	movlw	0
 15322  1761  00A3               	movwf	?___ftmul+2
 15323  1762  0008               	return
 15324  1763                     l2504:	
 15325  1763  0824               	movf	___ftmul@f2,w
 15326  1764  00A7               	movwf	??___ftmul
 15327  1765  0825               	movf	___ftmul@f2+1,w
 15328  1766  00A8               	movwf	??___ftmul+1
 15329  1767  0826               	movf	___ftmul@f2+2,w
 15330  1768  00A9               	movwf	??___ftmul+2
 15331  1769  1003               	clrc
 15332  176A  0D28               	rlf	??___ftmul+1,w
 15333  176B  0D29               	rlf	??___ftmul+2,w
 15334  176C  00AA               	movwf	??___ftmul+3
 15335  176D  082A               	movf	??___ftmul+3,w
 15336  176E  00B0               	movwf	___ftmul@sign
 15337  176F  0830               	movf	___ftmul@sign,w
 15338  1770  1D03               	btfss	3,2
 15339  1771  2F79               	goto	l2510
 15340  1772  3000               	movlw	0
 15341  1773  00A1               	movwf	?___ftmul
 15342  1774  3000               	movlw	0
 15343  1775  00A2               	movwf	?___ftmul+1
 15344  1776  3000               	movlw	0
 15345  1777  00A3               	movwf	?___ftmul+2
 15346  1778  0008               	return
 15347  1779                     l2510:	
 15348  1779  0830               	movf	___ftmul@sign,w
 15349  177A  3E7B               	addlw	123
 15350  177B  00A7               	movwf	??___ftmul
 15351  177C  0827               	movf	??___ftmul,w
 15352  177D  07AB               	addwf	___ftmul@exp,f
 15353  177E  0821               	movf	___ftmul@f1,w
 15354  177F  00A7               	movwf	??___ftmul
 15355  1780  0822               	movf	___ftmul@f1+1,w
 15356  1781  00A8               	movwf	??___ftmul+1
 15357  1782  0823               	movf	___ftmul@f1+2,w
 15358  1783  00A9               	movwf	??___ftmul+2
 15359  1784  3010               	movlw	16
 15360  1785                     u2705:	
 15361  1785  36A9               	lsrf	??___ftmul+2,f
 15362  1786  0CA8               	rrf	??___ftmul+1,f
 15363  1787  0CA7               	rrf	??___ftmul,f
 15364  1788  0B89               	decfsz	9,f
 15365  1789  2F85               	goto	u2705
 15366  178A  0827               	movf	??___ftmul,w
 15367  178B  00AA               	movwf	??___ftmul+3
 15368  178C  082A               	movf	??___ftmul+3,w
 15369  178D  00B0               	movwf	___ftmul@sign
 15370  178E  0824               	movf	___ftmul@f2,w
 15371  178F  00A7               	movwf	??___ftmul
 15372  1790  0825               	movf	___ftmul@f2+1,w
 15373  1791  00A8               	movwf	??___ftmul+1
 15374  1792  0826               	movf	___ftmul@f2+2,w
 15375  1793  00A9               	movwf	??___ftmul+2
 15376  1794  3010               	movlw	16
 15377  1795                     u2715:	
 15378  1795  36A9               	lsrf	??___ftmul+2,f
 15379  1796  0CA8               	rrf	??___ftmul+1,f
 15380  1797  0CA7               	rrf	??___ftmul,f
 15381  1798  0B89               	decfsz	9,f
 15382  1799  2F95               	goto	u2715
 15383  179A  0827               	movf	??___ftmul,w
 15384  179B  00AA               	movwf	??___ftmul+3
 15385  179C  082A               	movf	??___ftmul+3,w
 15386  179D  06B0               	xorwf	___ftmul@sign,f
 15387  179E  3080               	movlw	128
 15388  179F  00A7               	movwf	??___ftmul
 15389  17A0  0827               	movf	??___ftmul,w
 15390  17A1  05B0               	andwf	___ftmul@sign,f
 15391  17A2  17A2               	bsf	___ftmul@f1+1,7
 15392  17A3  17A5               	bsf	___ftmul@f2+1,7
 15393  17A4  30FF               	movlw	255
 15394  17A5  05A4               	andwf	___ftmul@f2,f
 15395  17A6  30FF               	movlw	255
 15396  17A7  05A5               	andwf	___ftmul@f2+1,f
 15397  17A8  3000               	movlw	0
 15398  17A9  05A6               	andwf	___ftmul@f2+2,f
 15399  17AA  3000               	movlw	0
 15400  17AB  00AC               	movwf	___ftmul@f3_as_product
 15401  17AC  3000               	movlw	0
 15402  17AD  00AD               	movwf	___ftmul@f3_as_product+1
 15403  17AE  3000               	movlw	0
 15404  17AF  00AE               	movwf	___ftmul@f3_as_product+2
 15405  17B0  3007               	movlw	7
 15406  17B1  00A7               	movwf	??___ftmul
 15407  17B2  0827               	movf	??___ftmul,w
 15408  17B3  00AF               	movwf	___ftmul@cntr
 15409  17B4                     l2522:	
 15410  17B4  1C21               	btfss	___ftmul@f1,0
 15411  17B5  2FBC               	goto	l2526
 15412  17B6  0824               	movf	___ftmul@f2,w
 15413  17B7  07AC               	addwf	___ftmul@f3_as_product,f
 15414  17B8  0825               	movf	___ftmul@f2+1,w
 15415  17B9  3DAD               	addwfc	___ftmul@f3_as_product+1,f
 15416  17BA  0826               	movf	___ftmul@f2+2,w
 15417  17BB  3DAE               	addwfc	___ftmul@f3_as_product+2,f
 15418  17BC                     l2526:	
 15419  17BC  3001               	movlw	1
 15420  17BD                     u2735:	
 15421  17BD  36A3               	lsrf	___ftmul@f1+2,f
 15422  17BE  0CA2               	rrf	___ftmul@f1+1,f
 15423  17BF  0CA1               	rrf	___ftmul@f1,f
 15424  17C0  0B89               	decfsz	9,f
 15425  17C1  2FBD               	goto	u2735
 15426  17C2  3001               	movlw	1
 15427  17C3                     u2745:	
 15428  17C3  35A4               	lslf	___ftmul@f2,f
 15429  17C4  0DA5               	rlf	___ftmul@f2+1,f
 15430  17C5  0DA6               	rlf	___ftmul@f2+2,f
 15431  17C6  0B89               	decfsz	9,f
 15432  17C7  2FC3               	goto	u2745
 15433  17C8  3001               	movlw	1
 15434  17C9  02AF               	subwf	___ftmul@cntr,f
 15435  17CA  1D03               	btfss	3,2
 15436  17CB  2FB4               	goto	l2522
 15437  17CC  3009               	movlw	9
 15438  17CD  00A7               	movwf	??___ftmul
 15439  17CE  0827               	movf	??___ftmul,w
 15440  17CF  00AF               	movwf	___ftmul@cntr
 15441  17D0                     l2534:	
 15442  17D0  1C21               	btfss	___ftmul@f1,0
 15443  17D1  2FD8               	goto	l2538
 15444  17D2  0824               	movf	___ftmul@f2,w
 15445  17D3  07AC               	addwf	___ftmul@f3_as_product,f
 15446  17D4  0825               	movf	___ftmul@f2+1,w
 15447  17D5  3DAD               	addwfc	___ftmul@f3_as_product+1,f
 15448  17D6  0826               	movf	___ftmul@f2+2,w
 15449  17D7  3DAE               	addwfc	___ftmul@f3_as_product+2,f
 15450  17D8                     l2538:	
 15451  17D8  3001               	movlw	1
 15452  17D9                     u2775:	
 15453  17D9  36A3               	lsrf	___ftmul@f1+2,f
 15454  17DA  0CA2               	rrf	___ftmul@f1+1,f
 15455  17DB  0CA1               	rrf	___ftmul@f1,f
 15456  17DC  0B89               	decfsz	9,f
 15457  17DD  2FD9               	goto	u2775
 15458  17DE  3001               	movlw	1
 15459  17DF                     u2785:	
 15460  17DF  36AE               	lsrf	___ftmul@f3_as_product+2,f
 15461  17E0  0CAD               	rrf	___ftmul@f3_as_product+1,f
 15462  17E1  0CAC               	rrf	___ftmul@f3_as_product,f
 15463  17E2  0B89               	decfsz	9,f
 15464  17E3  2FDF               	goto	u2785
 15465  17E4  3001               	movlw	1
 15466  17E5  02AF               	subwf	___ftmul@cntr,f
 15467  17E6  1D03               	btfss	3,2
 15468  17E7  2FD0               	goto	l2534
 15469  17E8  082C               	movf	___ftmul@f3_as_product,w
 15470  17E9  00F0               	movwf	___ftpack@arg
 15471  17EA  082D               	movf	___ftmul@f3_as_product+1,w
 15472  17EB  00F1               	movwf	___ftpack@arg+1
 15473  17EC  082E               	movf	___ftmul@f3_as_product+2,w
 15474  17ED  00F2               	movwf	___ftpack@arg+2
 15475  17EE  082B               	movf	___ftmul@exp,w
 15476  17EF  00A7               	movwf	??___ftmul
 15477  17F0  0827               	movf	??___ftmul,w
 15478  17F1  00F3               	movwf	___ftpack@exp
 15479  17F2  0830               	movf	___ftmul@sign,w
 15480  17F3  00A8               	movwf	??___ftmul+1
 15481  17F4  0828               	movf	??___ftmul+1,w
 15482  17F5  00F4               	movwf	___ftpack@sign
 15483  17F6  3193  23A0         	fcall	___ftpack
 15484  17F8  0870               	movf	?___ftpack,w
 15485  17F9  0020               	movlb	0	; select bank0
 15486  17FA  00A1               	movwf	?___ftmul
 15487  17FB  0871               	movf	?___ftpack+1,w
 15488  17FC  00A2               	movwf	?___ftmul+1
 15489  17FD  0872               	movf	?___ftpack+2,w
 15490  17FE  00A3               	movwf	?___ftmul+2
 15491  17FF  0008               	return
 15492  1800                     __end_of___ftmul:	
 15493                           
 15494                           	psect	text43
 15495  1F47                     __ptext43:	
 15496 ;; *************** function ___awtoft *****************
 15497 ;; Defined at:
 15498 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 15499 ;; Parameters:    Size  Location     Type
 15500 ;;  c               2    9[COMMON] int 
 15501 ;; Auto vars:     Size  Location     Type
 15502 ;;  sign            1    0[BANK0 ] unsigned char 
 15503 ;; Return value:  Size  Location     Type
 15504 ;;                  3    9[COMMON] float 
 15505 ;; Registers used:
 15506 ;;		wreg, status,2, status,0, pclath, cstack
 15507 ;; Tracked objects:
 15508 ;;		On entry : 0/0
 15509 ;;		On exit  : 0/0
 15510 ;;		Unchanged: 0/0
 15511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15512 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15513 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15514 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15515 ;;      Totals:         5       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15516 ;;Total ram usage:        6 bytes
 15517 ;; Hardware stack levels used:    1
 15518 ;; Hardware stack levels required when called:    1
 15519 ;; This function calls:
 15520 ;;		___ftpack
 15521 ;; This function is called by:
 15522 ;;		_Init_Battery_State_Machine
 15523 ;;		_Battery_State_Machine
 15524 ;;		_cc_cv_mode
 15525 ;;		_tempCalc
 15526 ;;		_main
 15527 ;;		_calculateCurrent0
 15528 ;;		_calculateCurrent3
 15529 ;;		_log
 15530 ;; This function uses a non-reentrant model
 15531 ;;
 15532                           
 15533                           
 15534                           ;psect for function ___awtoft
 15535  1F47                     ___awtoft:	
 15536                           
 15537                           ;incstack = 0
 15538                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15539  1F47  0020               	movlb	0	; select bank0
 15540  1F48  01A0               	clrf	___awtoft@sign
 15541  1F49  1FFA               	btfss	___awtoft@c+1,7
 15542  1F4A  2F52               	goto	l2558
 15543  1F4B  09F9               	comf	___awtoft@c,f
 15544  1F4C  09FA               	comf	___awtoft@c+1,f
 15545  1F4D  0AF9               	incf	___awtoft@c,f
 15546  1F4E  1903               	skipnz
 15547  1F4F  0AFA               	incf	___awtoft@c+1,f
 15548  1F50  01A0               	clrf	___awtoft@sign
 15549  1F51  0AA0               	incf	___awtoft@sign,f
 15550  1F52                     l2558:	
 15551  1F52  0879               	movf	___awtoft@c,w
 15552  1F53  00F0               	movwf	___ftpack@arg
 15553  1F54  087A               	movf	___awtoft@c+1,w
 15554  1F55  00F1               	movwf	___ftpack@arg+1
 15555  1F56  01F2               	clrf	___ftpack@arg+2
 15556  1F57  308E               	movlw	142
 15557  1F58  00FC               	movwf	??___awtoft
 15558  1F59  087C               	movf	??___awtoft,w
 15559  1F5A  00F3               	movwf	___ftpack@exp
 15560  1F5B  0820               	movf	___awtoft@sign,w
 15561  1F5C  00FD               	movwf	??___awtoft+1
 15562  1F5D  087D               	movf	??___awtoft+1,w
 15563  1F5E  00F4               	movwf	___ftpack@sign
 15564  1F5F  3193  23A0         	fcall	___ftpack
 15565  1F61  0870               	movf	?___ftpack,w
 15566  1F62  00F9               	movwf	?___awtoft
 15567  1F63  0871               	movf	?___ftpack+1,w
 15568  1F64  00FA               	movwf	?___awtoft+1
 15569  1F65  0872               	movf	?___ftpack+2,w
 15570  1F66  00FB               	movwf	?___awtoft+2
 15571  1F67  0008               	return
 15572  1F68                     __end_of___awtoft:	
 15573                           
 15574                           	psect	text44
 15575  13A0                     __ptext44:	
 15576 ;; *************** function ___ftpack *****************
 15577 ;; Defined at:
 15578 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 15579 ;; Parameters:    Size  Location     Type
 15580 ;;  arg             3    0[COMMON] unsigned um
 15581 ;;  exp             1    3[COMMON] unsigned char 
 15582 ;;  sign            1    4[COMMON] unsigned char 
 15583 ;; Auto vars:     Size  Location     Type
 15584 ;;		None
 15585 ;; Return value:  Size  Location     Type
 15586 ;;                  3    0[COMMON] float 
 15587 ;; Registers used:
 15588 ;;		wreg, status,2, status,0
 15589 ;; Tracked objects:
 15590 ;;		On entry : 0/0
 15591 ;;		On exit  : 0/0
 15592 ;;		Unchanged: 0/0
 15593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15594 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15596 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15597 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15598 ;;Total ram usage:        8 bytes
 15599 ;; Hardware stack levels used:    1
 15600 ;; This function calls:
 15601 ;;		Nothing
 15602 ;; This function is called by:
 15603 ;;		___awtoft
 15604 ;;		___ftadd
 15605 ;;		___ftdiv
 15606 ;;		___ftmul
 15607 ;; This function uses a non-reentrant model
 15608 ;;
 15609                           
 15610                           
 15611                           ;psect for function ___ftpack
 15612  13A0                     ___ftpack:	
 15613                           
 15614                           ;incstack = 0
 15615                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15616  13A0  0873               	movf	___ftpack@exp,w
 15617  13A1  1903               	btfsc	3,2
 15618  13A2  2BA8               	goto	l2364
 15619  13A3  0872               	movf	___ftpack@arg+2,w
 15620  13A4  0471               	iorwf	___ftpack@arg+1,w
 15621  13A5  0470               	iorwf	___ftpack@arg,w
 15622  13A6  1D03               	skipz
 15623  13A7  2BB9               	goto	l2370
 15624  13A8                     l2364:	
 15625  13A8  3000               	movlw	0
 15626  13A9  00F0               	movwf	?___ftpack
 15627  13AA  3000               	movlw	0
 15628  13AB  00F1               	movwf	?___ftpack+1
 15629  13AC  3000               	movlw	0
 15630  13AD  00F2               	movwf	?___ftpack+2
 15631  13AE  0008               	return
 15632  13AF                     l2368:	
 15633  13AF  3001               	movlw	1
 15634  13B0  00F5               	movwf	??___ftpack
 15635  13B1  0875               	movf	??___ftpack,w
 15636  13B2  07F3               	addwf	___ftpack@exp,f
 15637  13B3  3001               	movlw	1
 15638  13B4                     u2275:	
 15639  13B4  36F2               	lsrf	___ftpack@arg+2,f
 15640  13B5  0CF1               	rrf	___ftpack@arg+1,f
 15641  13B6  0CF0               	rrf	___ftpack@arg,f
 15642  13B7  0B89               	decfsz	9,f
 15643  13B8  2BB4               	goto	u2275
 15644  13B9                     l2370:	
 15645  13B9  30FE               	movlw	254
 15646  13BA  0572               	andwf	___ftpack@arg+2,w
 15647  13BB  1903               	btfsc	3,2
 15648  13BC  2BD2               	goto	l789
 15649  13BD  2BAF               	goto	l2368
 15650  13BE                     l2372:	
 15651  13BE  3001               	movlw	1
 15652  13BF  00F5               	movwf	??___ftpack
 15653  13C0  0875               	movf	??___ftpack,w
 15654  13C1  07F3               	addwf	___ftpack@exp,f
 15655  13C2  3001               	movlw	1
 15656  13C3  07F0               	addwf	___ftpack@arg,f
 15657  13C4  3000               	movlw	0
 15658  13C5  1803               	skipnc
 15659  13C6  3001               	movlw	1
 15660  13C7  07F1               	addwf	___ftpack@arg+1,f
 15661  13C8  3000               	movlw	0
 15662  13C9  1803               	skipnc
 15663  13CA  3001               	movlw	1
 15664  13CB  07F2               	addwf	___ftpack@arg+2,f
 15665  13CC  3001               	movlw	1
 15666  13CD                     u2295:	
 15667  13CD  36F2               	lsrf	___ftpack@arg+2,f
 15668  13CE  0CF1               	rrf	___ftpack@arg+1,f
 15669  13CF  0CF0               	rrf	___ftpack@arg,f
 15670  13D0  0B89               	decfsz	9,f
 15671  13D1  2BCD               	goto	u2295
 15672  13D2                     l789:	
 15673  13D2  30FF               	movlw	255
 15674  13D3  0572               	andwf	___ftpack@arg+2,w
 15675  13D4  1903               	btfsc	3,2
 15676  13D5  2BDF               	goto	l2380
 15677  13D6  2BBE               	goto	l2372
 15678  13D7                     l2378:	
 15679  13D7  3001               	movlw	1
 15680  13D8  02F3               	subwf	___ftpack@exp,f
 15681  13D9  3001               	movlw	1
 15682  13DA                     u2315:	
 15683  13DA  35F0               	lslf	___ftpack@arg,f
 15684  13DB  0DF1               	rlf	___ftpack@arg+1,f
 15685  13DC  0DF2               	rlf	___ftpack@arg+2,f
 15686  13DD  0B89               	decfsz	9,f
 15687  13DE  2BDA               	goto	u2315
 15688  13DF                     l2380:	
 15689  13DF  1BF1               	btfsc	___ftpack@arg+1,7
 15690  13E0  2BE5               	goto	l796
 15691  13E1  3002               	movlw	2
 15692  13E2  0273               	subwf	___ftpack@exp,w
 15693  13E3  1803               	skipnc
 15694  13E4  2BD7               	goto	l2378
 15695  13E5                     l796:	
 15696  13E5  1873               	btfsc	___ftpack@exp,0
 15697  13E6  2BED               	goto	l797
 15698  13E7  30FF               	movlw	255
 15699  13E8  05F0               	andwf	___ftpack@arg,f
 15700  13E9  307F               	movlw	127
 15701  13EA  05F1               	andwf	___ftpack@arg+1,f
 15702  13EB  30FF               	movlw	255
 15703  13EC  05F2               	andwf	___ftpack@arg+2,f
 15704  13ED                     l797:	
 15705  13ED  1003               	clrc
 15706  13EE  0CF3               	rrf	___ftpack@exp,f
 15707  13EF  0873               	movf	___ftpack@exp,w
 15708  13F0  00F5               	movwf	??___ftpack
 15709  13F1  01F6               	clrf	??___ftpack+1
 15710  13F2  01F7               	clrf	??___ftpack+2
 15711  13F3  3010               	movlw	16
 15712  13F4                     u2355:	
 15713  13F4  35F5               	lslf	??___ftpack,f
 15714  13F5  0DF6               	rlf	??___ftpack+1,f
 15715  13F6  0DF7               	rlf	??___ftpack+2,f
 15716  13F7  0B89               	decfsz	9,f
 15717  13F8  2BF4               	goto	u2355
 15718  13F9  0875               	movf	??___ftpack,w
 15719  13FA  04F0               	iorwf	___ftpack@arg,f
 15720  13FB  0876               	movf	??___ftpack+1,w
 15721  13FC  04F1               	iorwf	___ftpack@arg+1,f
 15722  13FD  0877               	movf	??___ftpack+2,w
 15723  13FE  04F2               	iorwf	___ftpack@arg+2,f
 15724  13FF  0874               	movf	___ftpack@sign,w
 15725  1400  1903               	btfsc	3,2
 15726  1401  0008               	return
 15727  1402  17F2               	bsf	___ftpack@arg+2,7
 15728  1403  0008               	return
 15729  1404                     __end_of___ftpack:	
 15730  007E                     btemp	set	126	;btemp
 15731  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    330
    Data        18
    BSS         154
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     62      79
    BANK1            80     37      79
    BANK2            80      0      73
    BANK3            80      0      40
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            48      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    LCDWriteString@characters	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _main->_LCDWriteString
    _main->___awtoft
    _tempCalc->___awtoft
    _log->___awtoft
    ___ftge->___awtoft
    ___ftadd->___awtoft
    _readVAnalog->___aldiv
    _readIAnalog->___aldiv
    _readButton->_ADCRead
    _cc_cv_mode->___awtoft
    _calculateCurrent3->___awtoft
    _calculateCurrent0->___awtoft
    ___ftdiv->___awtoft
    _LCDInit->_LCDWrite
    _LCDClear->_gotoXY
    _gotoXY->_LCDWrite
    _Init_Battery_State_Machine->___awtoft
    _LCDWriteString->_LCDWriteCharacter
    _LCDWriteInt->___awtoft
    _LCDWriteCharacter->___wmul
    _Battery_State_Machine->___awtoft
    ___fttol->___awtoft
    ___ftmul->___awtoft
    ___awtoft->___awdiv

Critical Paths under _main in BANK0

    _main->_tempCalc
    _tempCalc->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftge->___ftmul
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftadd->___ftmul
    _readVAnalog->___aldiv
    _readIAnalog->___aldiv
    _cc_cv_mode->___fttol
    _calculateCurrent3->___fttol
    _calculateCurrent0->___fttol
    ___ftdiv->___awtoft
    _SYSTEM_Initialize->_Init_Battery_State_Machine
    _Init_Battery_State_Machine->___fttol
    _LCDWriteInt->___fttol
    _Battery_State_Machine->___fttol
    ___fttol->___ftdiv
    ___fttol->___ftmul
    ___ftmul->___awtoft

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                42    42      0  113263
                                             57 BANK0      5     5      0
                                              0 BANK1     37    37      0
                            _ADCRead
              _Battery_State_Machine
                           _LCDClear
                            _LCDInit
                  _LCDWriteCharacter
                        _LCDWriteInt
                     _LCDWriteString
                 _PWM1_LoadDutyValue
                 _PWM6_LoadDutyValue
                 _PWM7_LoadDutyValue
                  _SYSTEM_Initialize
                            ___awdiv
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                  _calculateCurrent0
                  _calculateCurrent2
                  _calculateCurrent3
                         _cc_cv_mode
                             _gotoXY
                         _readButton
                        _readIAnalog
                        _readVAnalog
                           _tempCalc
 ---------------------------------------------------------------------------------
 (1) _tempCalc                                            11     9      2   37043
                                             46 BANK0     11     9      2
                            _ADCRead (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                            ___fttol
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   19403
                                             40 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     330
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           10     3      7    8325
                                             30 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     428
                                             17 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3356
                                             30 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3183
                                             17 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (1) _readVAnalog                                         21    19      2    1046
                                              9 COMMON     4     4      0
                                              6 BANK0     17    15      2
                            _ADCRead
                            ___aldiv
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     170
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _readIAnalog                                         24    22      2    1766
                                              9 COMMON     4     4      0
                                              6 BANK0     20    18      2
                            _ADCRead
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     512
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _readButton                                           2     2      0      22
                                              4 COMMON     2     2      0
                            _ADCRead
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     1      3      22
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _cc_cv_mode                                           8     8      0    8172
                                             31 BANK0      8     8      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent3                                    3     3      0    6904
                                             31 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent2                                    3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent0                                    3     3      0    6904
                                             31 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3153
                                              1 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    2     2      0   11645
                                             36 BANK0      2     2      0
                     _ADC_Initialize
         _Init_Battery_State_Machine
                           _LCDClear
                            _LCDInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PWM_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              1     1      0     803
                                              5 COMMON     1     1      0
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             3     3      0    3021
                                              8 COMMON     3     3      0
                           _LCDWrite
                             _gotoXY
 ---------------------------------------------------------------------------------
 (1) _gotoXY                                               3     2      1    2172
                                              5 COMMON     3     2      1
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _Init_Battery_State_Machine                           5     5      0    7798
                                             31 BANK0      5     5      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM7_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM6_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM1_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCDWriteString                                       3     1      2    2009
                                             12 COMMON     2     0      2
                                              0 BANK0      1     1      0
                  _LCDWriteCharacter
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         16    11      5    7853
                                             31 BANK0     16    11      5
                  _LCDWriteCharacter
                            ___awdiv
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _LCDWriteCharacter                                    6     6      0    1805
                                              6 COMMON     6     6      0
                           _LCDWrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     890
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _LCDWrite                                             5     4      1     803
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _Battery_State_Machine                                6     6      0    8392
                                             31 BANK0      6     6      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     787
                                             17 BANK0     14    10      4
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    3915
                                              1 BANK0     16    10      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2964
                                              9 COMMON     5     2      3
                                              0 BANK0      1     1      0
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1707
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _Battery_State_Machine
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _LCDClear
     _LCDWrite
     _gotoXY
       _LCDWrite
   _LCDInit
     _LCDWrite
   _LCDWriteCharacter
     _LCDWrite
     ___wmul
   _LCDWriteInt
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
     ___awdiv
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     ___lwmod (ARG)
   _LCDWriteString
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
   _PWM1_LoadDutyValue
   _PWM6_LoadDutyValue
   _PWM7_LoadDutyValue
   _SYSTEM_Initialize
     _ADC_Initialize
     _Init_Battery_State_Machine
       ___awtoft
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
     _LCDClear
       _LCDWrite
       _gotoXY
         _LCDWrite
     _LCDInit
       _LCDWrite
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM_Initialize
     _TMR2_Initialize
     _TMR4_Initialize
   ___awdiv
   ___awtoft
     ___awdiv (ARG)
     ___ftpack (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftge
     ___awdiv (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
   ___ftmul
     ___awdiv (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     _frexp (ARG)
   ___fttol
     ___awdiv (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
   _calculateCurrent0
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent2
   _calculateCurrent3
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _cc_cv_mode
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _gotoXY
     _LCDWrite
   _readButton
     _ADCRead
   _readIAnalog
     _ADCRead
     ___aldiv
     ___wmul
   _readVAnalog
     _ADCRead
     ___aldiv
     ___bmul
   _tempCalc
     _ADCRead (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___fttol (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     _log (ARG)
       ___awtoft
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftge
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
       ___ftmul
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul
       _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3E      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     25      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      49       9       91.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      28      11       50.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               30      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     11D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     11D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Sep 12 23:08:17 2018

                       _stateCounter 00B4                                    _j 0068  
                                  _x 006C               LCDWriteInt@fieldLength 0041  
                     ___bmul@product 0072              __size_of_PWM_Initialize 001F  
                        __CFG_CP$OFF 0000                                   l65 1E96  
                                 l68 1E9D                         ___awdiv@sign 0076  
                ___wmul@multiplicand 0072          __size_of_PWM6_LoadDutyValue 0016  
                       ___ftadd@exp1 003D                         ___ftadd@exp2 003C  
                        __CFG_LVP$ON 0000                         ___ftadd@sign 003B  
                                l240 1FAC                                  l152 0D90  
                                l241 1FA0                                  l147 0D3C  
                                l148 0D4D                                  l237 1F94  
                                l238 1F96                                  l239 1F9C  
                                l521 0478                        LCDClear@index 0079  
                                l474 00DD                                  l628 1ED8  
                                l820 0A55                                  l683 14FB  
                                l880 15D9                                  l796 13E5  
                                l797 13ED                                  l789 13D2  
                                _GIE 005F                                  _RB2 006A  
                       __CFG_CPD$OFF 0000                         _VsampleIndex 00C8  
                                _log 169C                      __end_of_ADCRead 1EA4  
                    _TMR2_Initialize 1E2B                         __CFG_BORV$LO 0000  
                                wreg 0009                      __end_of_LCDInit 11A4  
                       ?_LCDWriteInt 003F                         __CFG_ZCD$OFF 0000  
                       ___ftdiv@cntr 002B                         ___ftdiv@sign 0030  
                               l3010 1FE6                                 l3014 1FF2  
                               l3008 1FDA                                 l3018 1FFB  
                               l3202 1E7B                                 l3130 0D5B  
                               l3108 0FA5                                 l3116 0FF0  
                               l3036 0CE4                                 l2510 1779  
                               l3070 0E88                                 l3134 0D68  
                               l2504 1763                                 l3072 0E90  
                               l2416 1ED2                                 l3232 086F  
                               l3216 0837                                 l3304 001F  
                               l3056 0BA5                                 l2370 13B9  
                               l2522 17B4                                 l3090 0F4C  
                               l3074 0EA2                                 l3250 08BA  
                               l3234 0873                                 l3226 083E  
                               l3170 14BA                                 l2434 09DE  
                               l2380 13DF                                 l2372 13BE  
                               l2364 13A8                                 l2620 15EA  
                               l3244 0885                                 l3236 087B  
                               l3228 086B                                 l3164 14A6  
                               l2444 09F4                                 l3420 029B  
                               l2534 17D0                                 l2526 17BC  
                               l2614 15D0                                 l2606 15B5  
                               l3086 0F32                                 l3094 0F65  
                               l3246 08AC                                 l3238 0881  
                               l3190 14E7                                 l3158 148C  
                               l2462 0A21                                 l2438 09E5  
                               l3502 0484                                 l3414 027D  
                               l2368 13AF                                 l2616 15DC  
                               l2608 15C3                                 l3184 14CF  
                               l3192 14E8                                 l3168 14B8  
                               l2480 0A67                                 l2464 0A2B  
                               l2456 0A0E                                 l2632 11F1  
                               l3504 0487                                 l3352 009A  
                               l2378 13D7                                 l2538 17D8  
                               l2730 1FBB                                 l3178 14C6  
                               l2474 0A47                                 l2466 0A30  
                               l2570 1247                                 l2650 1399  
                               l3450 0303                                 l3426 02B5  
                               l3346 0094                                 l3338 0080  
                               l3292 126F                                 l2484 0A79  
                               l2476 0A51                                 l2468 0A34  
                               l3524 04C5                                 l3508 0498  
                               l3444 02E9                                 l3372 00E5  
                               l3364 00BE                                 l2558 1F52  
                               l2902 1563                                 l2494 0A94  
                               l2566 1231                                 l3470 0350  
                               l3438 02CB                                 l3390 01BC  
                               l3358 00B9                                 l2920 12B0  
                               l2736 1FCF                                 l3480 03C7  
                               l3464 0339                                 l2930 12B8  
                               l2914 12A5                                 l3298 1F7E  
                               l2842 16CE                                 l3490 0450  
                               l3474 0357                                 l3394 01E7  
                               l3386 0192                                 l2588 1585  
                               l2932 12C4                                 l2836 16BB  
                               l2942 12DF                                 l2854 1E59  
                               l3662 07A5                                 l3398 01F1  
                               l3496 0470                                 l3488 044C  
                               l2946 12E7                                 l2938 12D6  
                               l2962 1620                                 l2858 1E5F  
                               l3666 07AE                                 l2956 160A  
                               l2884 151C                                 l2876 150C  
                               l2894 154A                                 l2886 152A  
                               l2984 167A                                 l2976 1661  
                               l2898 1555                                 l2996 1EF3  
                               ?_log 0048                                 STR_1 1825  
                               STR_2 1820                                 STR_3 181B  
                               u3000 1167                                 _LATA 0016  
                               _LATB 0017                                 _LATC 0018  
                               u2315 13DA                                 u3115 152B  
                               u4005 1EC9                                 u3125 153F  
                               u3215 12C5                                 u4015 080F  
                               u3135 154B                                 u2425 1ED9  
                               u3225 12CF                                 u4025 1EB3  
                               u3305 1662                                 _T2PR 028D  
                               u2355 13F4                                 u2275 13B4  
                               u2435 1EDE                                 u3235 12D7  
                               u3315 1671                                 u4035 1269  
                               u3325 167B                                 u4045 1F78  
                               u2605 0A35                                 u2295 13CD  
                               u4055 0019                                 u3095 151F  
                               u3415 0BE4                                 u4215 028C  
                               u4135 01AF                                 u2705 1785  
                               u3425 0C3A                                 u3505 0B0E  
                               u2545 0A0F                                 u4145 01DA  
                               _T4PR 0293                                 u2715 1795  
                               u3195 12BB                                 u3435 0C74  
                               u3515 0B24                                 u2635 0A48  
                               u4315 02F8                                 u4235 02AA  
                               u3605 0E7A                                 u3365 1FDD  
                               u3285 1632                                 u3445 0CBF  
                               u3525 0B3E                                 u4405 0430  
                               u2735 17BD                                 u3295 1642  
                               u3535 0B54                                 u2575 0A22  
                               u4415 0445                                 u4175 026B  
                               u2745 17C3                                 u3385 1FEC  
                               u3545 0B7F                                 u4425 0462  
                               u4345 0332                                 u4265 02C8  
                               u2915 15D1                                 u3635 0F05  
                               u3395 1FF3                                 u3715 0D28  
                               u3475 0CEF                                 u4507 0088  
                               u3805 0DFF                                 u4517 14D9  
                               u3485 0AC2                                 u4365 0349  
                               u3910 0821                                 u2775 17D9  
                               u2855 158C                                 u4527 11C7  
                               u3815 147A                                 u3575 0BB1  
                               u3495 0AD8                                 u4295 02DA  
                               u2785 17DF                                 u4537 11D7  
                               u3825 1486                                 u3595 0E66  
                               u3835 1496                                 u2885 15B6  
                               u3845 14A2                                 u3775 0DAA  
                               u3855 14B0                                 u2985 1FB9  
                               u2995 1FCD                                 u3975 089A  
                tempCalc@analogValue 004E                                 _WPUA 0F39  
                               _WPUB 0F44                                 _WPUC 0F4F  
                               _WPUE 0F65                                 _Imin 0155  
                               _Iref 00B8                                 _Iout 00C4  
                       __CFG_WRT$OFF 0000                        __CFG_FCMEN$ON 0000  
                               _Vref 00B0                                 _main 004B  
                       ___ftpack@arg 0070                         ___ftpack@exp 0073  
                               fsr0h 0005                                 fsr1h 0007  
                               indf0 0000                                 fsr0l 0004  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E                                 log@x 0048  
                       ?_readIAnalog 0026                        __CFG_BOREN$ON 0000  
                               start 0002                        __CFG_CSWEN$ON 0000  
                  ___bmul@multiplier 0073                        __CFG_MCLRE$ON 0000  
                       ___ftmul@cntr 002F                         ___ftmul@sign 0030  
                       ?_readVAnalog 0026                     __end_of_LCDClear 1FD4  
                       ___fttol@exp1 003E                                ??_log 004B  
                       ___fttol@lval 003A                         main@fastLoop 00D1  
__size_of_Init_Battery_State_Machine 0064       __size_of_OSCILLATOR_Initialize 0009  
                   __end_of_LCDWrite 1FAE        __end_of_OSCILLATOR_Initialize 1E13  
                    __end_of___aldiv 156C                                _ADACQ 009D  
                              _ADACT 0099                                _ADCAP 009B  
                              ?_main 0070                                _ADCLK 0098  
                              _ADPCH 009E                                _ADREF 009A  
                    __end_of___awdiv 12EC                                _ADPRE 009C  
                    __end_of___ftadd 0AAC                        __CFG_WDTE$OFF 0000  
                              _ADRPT 010D                      __end_of___ftdiv 169C  
                    __end_of___ftmul 1800                      ___awdiv@divisor 0070  
                    __end_of___ftsub 1F09                      __end_of___fttol 15F3  
                              _T2CON 028E                                _LATA5 00B5  
                              _T4CON 0294                                _T2HLT 028F  
                              _T4HLT 0295                                _T2TMR 028C  
                              _T2RST 0291                      __end_of___lwmod 2000  
                              _T4TMR 0292                                _T4RST 0297  
                    ___awdiv@counter 0075                                _OSCEN 0891  
                              _TRISA 0011                                _TRISB 0012  
                              _TRISC 0013                      _TMR4_Initialize 1E39  
                              _Imode 0062               ?_Battery_State_Machine 0070  
                              _cc_cv 00C6                        ___awtoft@sign 0020  
                              _frexp 11DF                                _fonts 1000  
                              _errno 00C0                        ___ftpack@sign 0074  
                              main@j 00EE                         main@slowLoop 00DB  
                              status 0003                                wtemp0 007E  
                    __initialization 07B1                          log@exponent 004C  
                       __end_of_main 07B1              __end_of_TMR2_Initialize 1E39  
                          ??_ADCRead 0073                               ??_main 0059  
                      ___fttol@sign1 0039                            ??_LCDInit 0075  
             Battery_State_Machine@z 0044              LCDWrite@data_or_command 0072  
                             _ADCON0 0093                               _ADCON1 0094  
                             _ADCON2 0095                               _ADCON3 0096  
                             ?_frexp 0070                               _ADLTHH 010F  
                             _ADLTHL 010E                               _ADRESH 008D  
                             _ADRESL 008C                               _CCPR1H 030D  
                             _CCPR1L 030C                               _ADSTAT 0097  
                             _ADUTHH 0111                     ___awdiv@dividend 0072  
                             _ADUTHL 0110                     __end_of___awtoft 1F68  
                             _ANSELA 0F38                               _ANSELB 0F43  
                             _ANSELC 0F4E                     __end_of___ftpack 1404  
                             _RB0PPS 0F18                               _RA6PPS 0F16  
                             _RA7PPS 0F17                       __CFG_WDTCCS$SC 0000  
                             _FVRCON 090C                               _OSCFRQ 0893  
                     __CFG_PWRTE$OFF 0000                       _LCDWriteString 1E7B  
                       _CCPTMRS0bits 021E                         _CCPTMRS1bits 021F  
                             ___bmul 1E57                               ___ftge 121A  
                          ??___aldiv 0078                               ___wmul 1ED0  
                          ??___awdiv 0074                            ??___ftadd 0037  
                     __CFG_STVREN$ON 0000                       _PWM_Initialize 1F28  
                          ??___ftdiv 0027                            ??___ftmul 0027  
                          ??___ftsub 007E                            ??___fttol 0035  
                          ??___lwmod 0074                               _gotoXY 1E68  
                             _button 006A              __end_of_TMR4_Initialize 1E47  
                   ___awdiv@quotient 0077            readVAnalog@analog_channel 0079  
              ___ftmul@f3_as_product 002C                     __end_of_tempCalc 09B6  
                       LCDWrite@data 0070                         LCDWriteInt@i 004E  
                       LCDWriteInt@j 004D                            ?_LCDClear 0070  
                  _SYSTEM_Initialize 11A4                 __size_of_LCDWriteInt 00B9  
                   __end_oflog@coeff 181B              __end_of__initialization 07FD  
                         ___ftadd@f1 0031                           ___ftadd@f2 0034  
                         ___ftge@ff1 0031                           ___ftge@ff2 0034  
                          ?_LCDWrite 0070                   ?_SYSTEM_Initialize 0070  
             __end_of_LCDWriteString 1E8F                         eval_poly@res 0045  
                         ___ftdiv@f1 0024                           ___ftdiv@f2 0021  
                         ___ftdiv@f3 002C                           ___awtoft@c 0079  
                ___bmul@multiplicand 0070                           ___ftmul@f1 0021  
                         ___ftmul@f2 0024               __end_of_PWM_Initialize 1F47  
               __size_of_readIAnalog 013E                           ___ftsub@f1 0041  
                         ___ftsub@f2 003E                           ___fttol@f1 0031  
                     __pcstackCOMMON 0070                         __pidataBANK0 0004  
                       __pidataBANK2 1E47                  ??_SYSTEM_Initialize 0044  
                      __end_of_frexp 121A                        __end_of_fonts 112F  
                          LCDWrite@d 0073                            LCDWrite@i 0074  
               __size_of_readVAnalog 0122                   _PWM1_LoadDutyValue 1EA4  
                   ?_TMR2_Initialize 0070                           _cc_cv_mode 0D0C  
        __size_of_PWM7_LoadDutyValue 0016                       main@efficiency 00CA  
                ?_PWM1_LoadDutyValue 0070                    LCDWriteInt@F14392 0150  
                  _calculateCurrent0 1256                    _calculateCurrent2 1F68  
                  _calculateCurrent3 0006                              ??_frexp 0074  
          __end_of_SYSTEM_Initialize 11DF                           __pbssBANK0 005E  
                         __pbssBANK1 00A0                           __pbssBANK2 0120  
                         __pbssBANK3 01A0                   ?_calculateCurrent0 0070  
                 ?_calculateCurrent2 0070                   ?_calculateCurrent3 0070  
                       _batteryState 0064                   __size_of_eval_poly 0060  
                         ??_LCDClear 0078                       main@faultCount 00CD  
                         ??_LCDWrite 0071                      ?_LCDWriteString 007C  
               ??_PWM1_LoadDutyValue 0072                  ??_calculateCurrent0 003F  
                ??_calculateCurrent2 0070                  ??_calculateCurrent3 003F  
                    ?_PWM_Initialize 0070                           __pmaintext 004B  
                            ?___bmul 0070                              ?___ftge 0031  
                            ?___wmul 0070                      __CFG_PPS1WAY$ON 0000  
         __end_of_PWM6_LoadDutyValue 1ED0                              ?_gotoXY 0075  
                            _ADCRead 1E8F                     ?_TMR4_Initialize 0070  
                          ?___awtoft 0079                            ?___ftpack 0070  
                            _ADSTPTH 0113                              _ADSTPTL 0112  
           __CFG_SCANE$not_available 0000                  __CFG_RSTOSC$HFINT32 0000  
            __size_of_ADC_Initialize 001F              ??_Battery_State_Machine 003F  
                     main@largerIOut 00E0                              _LCDInit 1169  
          __end_of_calculateCurrent0 129B            __end_of_calculateCurrent2 1F89  
          __end_of_calculateCurrent3 004B                              _OSCCON1 088D  
                            _OSCCON3 088F                              _OSCTUNE 0892  
                            _PWM6DCH 038D                              _PWM6DCL 038C  
                            _PWM7DCH 0391                              _PWM7DCL 0390  
                            _PWM6CON 038E                              _PWM7CON 0392  
                            _PPSLOCK 0E8F                           _floatCount 00C2  
                     main@menuButton 00E2                       main@dutyCycle1 00E3  
                     main@dutyCycle6 00EA                       main@dutyCycle7 00EC  
                  main@tempFanOutput 00E5                           _lastButton 0069  
                          ?_tempCalc 004E                              _Itotals 0130  
                            ___aldiv 14EA                      __size_of___bmul 0011  
                    __size_of___ftge 003C                              ___awdiv 129B  
                            ___ftadd 09B6                           _readButton 1468  
                            ___ftdiv 15F3                      __size_of___wmul 001B  
                            ___ftmul 174C                              ___ftsub 1EEB  
                            ___fttol 156C                   main@displayRefresh 00DA  
                            ___lwmod 1FD4                              _Vtotals 0120  
                    __size_of_gotoXY 0013                           ??___awtoft 007C  
                         ??___ftpack 0075                    __end_of_eval_poly 13A0  
                            __ptext1 08CF                              __ptext2 169C  
                            __ptext3 11DF                              __ptext4 1340  
                            __ptext5 121A                              __ptext6 1EEB  
                            __ptext7 09B6                              __ptext8 0AAC  
                            __ptext9 1E57                          ?_cc_cv_mode 0070  
              _OSCILLATOR_Initialize 1E0A                            _T2CONbits 028E  
                            _current 00A8                         __size_of_log 00B0  
                     ADCRead@channel 0073                     ___aldiv@dividend 0074  
                          _T4CONbits 0294             ??_PIN_MANAGER_Initialize 0070  
         __size_of_SYSTEM_Initialize 003B                              clrloop0 1E14  
                            _voltage 00A0         ??_Init_Battery_State_Machine 003F  
               end_of_initialization 07FD                LCDWriteCharacter@base 007A  
                            gotoXY@x 0077                              gotoXY@y 0075  
                            init_ram 1E1F                              initloop 1E20  
                         ??_tempCalc 007E                     ___aldiv@quotient 0022  
                         _otherState 006B                    _LCDWriteCharacter 12EC  
              __CFG_WDTCPS$WDTCPS_31 0000                   ?_LCDWriteCharacter 0070  
                 readVAnalog@channel 0026           __size_of_calculateCurrent0 0045  
         __size_of_calculateCurrent2 0021           __size_of_calculateCurrent3 0045  
                          _TRISAbits 0011                  ??_LCDWriteCharacter 0076  
                   __CFG_FEXTOSC$OFF 0000         PWM1_LoadDutyValue@dutyCycle1 0070  
                        _CCP1CONbits 030E                          ___ftdiv@exp 002F  
                __size_of_cc_cv_mode 013F                    __size_of_LCDClear 0026  
         LCDWriteCharacter@character 0079                    __size_of_LCDWrite 0025  
                        ___ftmul@exp 002B            __end_of_LCDWriteCharacter 1340  
                        ?_readButton 0070                            _Ichannels 0161  
          readIAnalog@analog_channel 0079                       __end_of___bmul 1E68  
                     __end_of___ftge 1256                            _VHoldMode 0060  
                     __end_of___wmul 1EEB                       _ADC_Initialize 1F09  
                     __end_of_gotoXY 1E7B               ?_OSCILLATOR_Initialize 0070  
                          _IminCount 00BC                  start_initialization 07B1  
                         eval_poly@d 0041                           eval_poly@n 0043  
                         eval_poly@x 003E                    main@faultNotReset 00CF  
    __size_of_PIN_MANAGER_Initialize 0037                          __end_of_log 174C  
                      ??_LCDWriteInt 0044                     ??_LCDWriteString 0020  
                         frexp@value 0070                         _IsampleIndex 0066  
                   ??_PWM_Initialize 0070                        ??_readIAnalog 0028  
                          _Vchannels 0159                     __CFG_LPBOREN$OFF 0000  
                      ??_readVAnalog 0028                             ??___bmul 0071  
                           ??___ftge 0037                    tempCalc@steinhart 0056  
                           ??___wmul 0074               __end_of_ADC_Initialize 1F28  
                      _tempCalc$1308 0053                          __pdataBANK0 006D  
                        __pdataBANK2 0159           __end_of_PWM7_LoadDutyValue 0816  
                           ??_gotoXY 0076                             ?_ADCRead 0070  
       PWM7_LoadDutyValue@dutyCycle7 0070                    __size_of___awtoft 0021  
                           ?_LCDInit 0070                    __size_of___ftpack 0064  
                        __pbssBIGRAM 2260                     readVAnalog@value 007B  
     __size_of_Battery_State_Machine 01B5        __end_of_Battery_State_Machine 1000  
                          ___latbits 0002                        __pcstackBANK0 0020  
                      __pcstackBANK1 00CA                   _PWM6_LoadDutyValue 1EBA  
           __size_of_TMR2_Initialize 000E   __end_of_Init_Battery_State_Machine 1468  
         _Init_Battery_State_Machine 1404                  __size_of_readButton 0082  
                ?_PWM6_LoadDutyValue 0070                  __end_of_LCDWriteInt 08CF  
                        _batteryTemp 006D          __size_of_PWM1_LoadDutyValue 0016  
                          _main$1309 00E7               _PIN_MANAGER_Initialize 1132  
         __size_of_LCDWriteCharacter 0054                             ?___aldiv 0070  
                __end_of_readIAnalog 0D0C                    __size_of_tempCalc 00E7  
                           ?___awdiv 0070                             ?___ftadd 0031  
                           ?___ftdiv 0021                             ?___ftmul 0021  
                           ?___ftsub 003E                             ?___fttol 0031  
                   LCDWriteInt@value 003F                             ?___lwmod 0070  
                    ?_ADC_Initialize 0070                 ??_PWM6_LoadDutyValue 0072  
                       ??_cc_cv_mode 003F                  __end_of_readVAnalog 0BCE  
                          _eval_poly 1340             __size_of_TMR4_Initialize 000E  
                     __size_of_frexp 003B                             _T2CLKCON 0290  
                           _T4CLKCON 0296                          cc_cv_mode@z 0046  
                           _LCDClear 1FAE                      ___aldiv@divisor 0070  
                    ___aldiv@counter 0020                       ___wmul@product 0074  
                           _LATAbits 0016                             _LCDWrite 1F89  
                          clear_ram0 1E13                             _PIE0bits 0716  
                 __end_of_cc_cv_mode 0E4B                             _PIR4bits 0710  
                   readIAnalog@value 007B                            main@MPPT0 00DC  
                          main@MPPT1 00DE                     __size_of_ADCRead 0015  
                         _ADCON0bits 0093                    ___wmul@multiplier 0070  
                         ?_eval_poly 003E                     __size_of_LCDInit 003B  
                           _Ianalogs 0140                          _LCDWriteInt 0816  
        Init_Battery_State_Machine@z 0043                    ??_TMR2_Initialize 0070  
                           _Isamples 2260                          _readIAnalog 0BCE  
                          frexp@eptr 0073                             _Vanalogs 0148  
                        _readVAnalog 0AAC                         ??_readButton 0074  
            ??_OSCILLATOR_Initialize 0070                 LCDWriteInt@numPlaces 0042  
                   __size_of___aldiv 0082                     __size_of___awdiv 0051  
                   __size_of___ftadd 00F6                     __size_of___ftdiv 00A9  
                   __size_of___ftmul 00B4                     __size_of___ftsub 001E  
                   __size_of___fttol 0087                             _Vsamples 01A0  
                   __size_of___lwmod 002C                          _readButtons 005E  
                           ___awtoft 1F47                             ___ftpack 13A0  
                           __ptext10 0BCE                             __ptext11 14EA  
                           __ptext20 1E39                             __ptext12 1468  
                           __ptext21 1E2B                             __ptext13 1E8F  
                           __ptext30 0800                             __ptext22 1F28  
                           __ptext14 0D0C                             __ptext31 1EBA  
                           __ptext23 1132                             __ptext15 0006  
                           __ptext40 0E4B                             __ptext32 1EA4  
                           __ptext24 1E0A                             __ptext16 1F68  
                           __ptext41 156C                             __ptext33 1E7B  
                           __ptext25 1169                             __ptext17 1256  
                           __ptext42 174C                             __ptext34 0816  
                           __ptext26 1FAE                             __ptext18 15F3  
                           __ptext43 1F47                             __ptext35 1FD4  
                           __ptext27 1E68                             __ptext19 11A4  
                           __ptext44 13A0                             __ptext36 129B  
                           __ptext28 1404                             __ptext37 12EC  
                           __ptext29 1F09                             __ptext38 1ED0  
                           __ptext39 1F89                      LCDWriteInt@sign 0043  
                          tempCalc@R 0050                   __end_of_readButton 14EA  
                  ??_TMR4_Initialize 0070                        __size_of_main 0766  
               __CFG_WDTCWS$WDTCWS_7 0000                             _tempCalc 08CF  
                    main@tempVoltage 00D2          PIN_MANAGER_Initialize@state 0070  
                           log@coeff 1800                          ??_eval_poly 007E  
                 _PWM7_LoadDutyValue 0800          ?_Init_Battery_State_Machine 0070  
                   ___lwmod@dividend 0072                       LCDWriteInt@str 0048  
            ?_PIN_MANAGER_Initialize 0070                  ?_PWM7_LoadDutyValue 0070  
                  __CFG_CLKOUTEN$OFF 0000                          _PPSLOCKbits 0E8F  
                   ??_ADC_Initialize 0070         PWM6_LoadDutyValue@dutyCycle6 0070  
                      __pstringtext1 1000                        __pstringtext2 1800  
                      __pstringtext3 1820                        __pstringtext4 1825  
                      __pstringtext5 0000                 ??_PWM7_LoadDutyValue 0072  
                    ___lwmod@divisor 0070                      ___lwmod@counter 0075  
           LCDWriteString@characters 007C                         ___aldiv@sign 0021  
                 readIAnalog@channel 0026                _Battery_State_Machine 0E4B  
     __end_of_PIN_MANAGER_Initialize 1169           __end_of_PWM1_LoadDutyValue 1EBA  
            __size_of_LCDWriteString 0014  
