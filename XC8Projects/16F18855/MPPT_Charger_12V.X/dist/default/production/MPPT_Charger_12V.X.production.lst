

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Fri Sep 14 12:45:02 2018

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,delta=2
    56                           	psect	text40,local,class=CODE,merge=1,delta=2
    57                           	psect	text41,local,class=CODE,merge=1,delta=2
    58                           	psect	text42,local,class=CODE,merge=1,delta=2
    59                           	dabs	1,0x620,48
    60                           	dabs	1,0x5A0,80
    61                           	dabs	1,0x520,80
    62                           	dabs	1,0x4A0,80
    63                           	dabs	1,0x420,80
    64                           	dabs	1,0x3D0,32
    65                           	dabs	1,0x2260,0,_samples
    66                           	dabs	1,0x7E,2
    67  0000                     	;# 
    68  0001                     	;# 
    69  0002                     	;# 
    70  0003                     	;# 
    71  0004                     	;# 
    72  0005                     	;# 
    73  0006                     	;# 
    74  0007                     	;# 
    75  0008                     	;# 
    76  0009                     	;# 
    77  000A                     	;# 
    78  000B                     	;# 
    79  000C                     	;# 
    80  000D                     	;# 
    81  000E                     	;# 
    82  0010                     	;# 
    83  0011                     	;# 
    84  0012                     	;# 
    85  0013                     	;# 
    86  0016                     	;# 
    87  0017                     	;# 
    88  0018                     	;# 
    89  001C                     	;# 
    90  001C                     	;# 
    91  001D                     	;# 
    92  001D                     	;# 
    93  001E                     	;# 
    94  001F                     	;# 
    95  008C                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  008E                     	;# 
   100  008F                     	;# 
   101  0090                     	;# 
   102  0090                     	;# 
   103  0091                     	;# 
   104  0093                     	;# 
   105  0094                     	;# 
   106  0095                     	;# 
   107  0096                     	;# 
   108  0097                     	;# 
   109  0098                     	;# 
   110  0099                     	;# 
   111  009A                     	;# 
   112  009B                     	;# 
   113  009C                     	;# 
   114  009D                     	;# 
   115  009E                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010E                     	;# 
   120  010F                     	;# 
   121  0110                     	;# 
   122  0110                     	;# 
   123  0111                     	;# 
   124  0112                     	;# 
   125  0112                     	;# 
   126  0113                     	;# 
   127  0114                     	;# 
   128  0114                     	;# 
   129  0115                     	;# 
   130  0116                     	;# 
   131  0116                     	;# 
   132  0117                     	;# 
   133  0119                     	;# 
   134  0119                     	;# 
   135  0119                     	;# 
   136  011A                     	;# 
   137  011A                     	;# 
   138  011A                     	;# 
   139  011B                     	;# 
   140  011B                     	;# 
   141  011B                     	;# 
   142  011B                     	;# 
   143  011B                     	;# 
   144  011C                     	;# 
   145  011C                     	;# 
   146  011C                     	;# 
   147  011D                     	;# 
   148  011D                     	;# 
   149  011D                     	;# 
   150  011E                     	;# 
   151  011E                     	;# 
   152  011E                     	;# 
   153  011F                     	;# 
   154  011F                     	;# 
   155  011F                     	;# 
   156  011F                     	;# 
   157  011F                     	;# 
   158  018C                     	;# 
   159  018D                     	;# 
   160  018E                     	;# 
   161  018F                     	;# 
   162  0190                     	;# 
   163  0191                     	;# 
   164  0192                     	;# 
   165  0196                     	;# 
   166  0197                     	;# 
   167  0198                     	;# 
   168  0199                     	;# 
   169  019A                     	;# 
   170  019B                     	;# 
   171  019C                     	;# 
   172  020C                     	;# 
   173  020D                     	;# 
   174  020E                     	;# 
   175  020F                     	;# 
   176  020F                     	;# 
   177  0210                     	;# 
   178  0210                     	;# 
   179  0211                     	;# 
   180  0211                     	;# 
   181  0212                     	;# 
   182  0213                     	;# 
   183  0214                     	;# 
   184  0215                     	;# 
   185  0215                     	;# 
   186  0216                     	;# 
   187  0216                     	;# 
   188  0217                     	;# 
   189  0217                     	;# 
   190  0218                     	;# 
   191  0219                     	;# 
   192  021A                     	;# 
   193  021B                     	;# 
   194  021B                     	;# 
   195  021C                     	;# 
   196  021C                     	;# 
   197  021D                     	;# 
   198  021D                     	;# 
   199  021E                     	;# 
   200  021F                     	;# 
   201  028C                     	;# 
   202  028C                     	;# 
   203  028D                     	;# 
   204  028D                     	;# 
   205  028E                     	;# 
   206  028F                     	;# 
   207  0290                     	;# 
   208  0290                     	;# 
   209  0291                     	;# 
   210  0292                     	;# 
   211  0292                     	;# 
   212  0293                     	;# 
   213  0293                     	;# 
   214  0294                     	;# 
   215  0295                     	;# 
   216  0296                     	;# 
   217  0296                     	;# 
   218  0297                     	;# 
   219  0298                     	;# 
   220  0298                     	;# 
   221  0299                     	;# 
   222  0299                     	;# 
   223  029A                     	;# 
   224  029B                     	;# 
   225  029C                     	;# 
   226  029C                     	;# 
   227  029D                     	;# 
   228  030C                     	;# 
   229  030C                     	;# 
   230  030D                     	;# 
   231  030E                     	;# 
   232  030F                     	;# 
   233  0310                     	;# 
   234  0310                     	;# 
   235  0311                     	;# 
   236  0312                     	;# 
   237  0313                     	;# 
   238  0314                     	;# 
   239  0314                     	;# 
   240  0315                     	;# 
   241  0316                     	;# 
   242  0317                     	;# 
   243  0318                     	;# 
   244  0318                     	;# 
   245  0319                     	;# 
   246  031A                     	;# 
   247  031B                     	;# 
   248  031C                     	;# 
   249  031C                     	;# 
   250  031D                     	;# 
   251  031E                     	;# 
   252  031F                     	;# 
   253  038C                     	;# 
   254  038D                     	;# 
   255  038E                     	;# 
   256  0390                     	;# 
   257  0391                     	;# 
   258  0392                     	;# 
   259  040C                     	;# 
   260  040D                     	;# 
   261  040E                     	;# 
   262  040F                     	;# 
   263  0410                     	;# 
   264  0411                     	;# 
   265  0416                     	;# 
   266  0416                     	;# 
   267  0417                     	;# 
   268  0418                     	;# 
   269  0418                     	;# 
   270  0419                     	;# 
   271  041A                     	;# 
   272  041A                     	;# 
   273  041B                     	;# 
   274  041C                     	;# 
   275  041C                     	;# 
   276  041D                     	;# 
   277  041E                     	;# 
   278  041F                     	;# 
   279  048C                     	;# 
   280  048C                     	;# 
   281  048D                     	;# 
   282  048E                     	;# 
   283  048F                     	;# 
   284  048F                     	;# 
   285  0490                     	;# 
   286  0491                     	;# 
   287  0492                     	;# 
   288  0492                     	;# 
   289  0493                     	;# 
   290  0494                     	;# 
   291  0495                     	;# 
   292  0495                     	;# 
   293  0496                     	;# 
   294  0497                     	;# 
   295  0498                     	;# 
   296  0499                     	;# 
   297  049A                     	;# 
   298  049B                     	;# 
   299  049C                     	;# 
   300  049D                     	;# 
   301  050C                     	;# 
   302  050C                     	;# 
   303  050D                     	;# 
   304  050E                     	;# 
   305  050F                     	;# 
   306  050F                     	;# 
   307  0510                     	;# 
   308  0511                     	;# 
   309  0512                     	;# 
   310  0512                     	;# 
   311  0513                     	;# 
   312  0514                     	;# 
   313  0515                     	;# 
   314  0515                     	;# 
   315  0516                     	;# 
   316  0517                     	;# 
   317  0518                     	;# 
   318  0519                     	;# 
   319  051A                     	;# 
   320  051B                     	;# 
   321  051C                     	;# 
   322  051D                     	;# 
   323  058C                     	;# 
   324  058C                     	;# 
   325  058D                     	;# 
   326  058E                     	;# 
   327  058F                     	;# 
   328  058F                     	;# 
   329  0590                     	;# 
   330  0591                     	;# 
   331  0592                     	;# 
   332  0593                     	;# 
   333  060C                     	;# 
   334  060D                     	;# 
   335  060E                     	;# 
   336  060F                     	;# 
   337  0610                     	;# 
   338  0611                     	;# 
   339  0612                     	;# 
   340  0613                     	;# 
   341  0614                     	;# 
   342  0616                     	;# 
   343  0617                     	;# 
   344  0618                     	;# 
   345  0619                     	;# 
   346  061A                     	;# 
   347  061B                     	;# 
   348  061C                     	;# 
   349  061D                     	;# 
   350  061E                     	;# 
   351  068C                     	;# 
   352  068D                     	;# 
   353  068E                     	;# 
   354  068F                     	;# 
   355  0690                     	;# 
   356  0691                     	;# 
   357  0692                     	;# 
   358  0693                     	;# 
   359  0694                     	;# 
   360  070C                     	;# 
   361  070D                     	;# 
   362  070E                     	;# 
   363  070F                     	;# 
   364  0710                     	;# 
   365  0711                     	;# 
   366  0712                     	;# 
   367  0713                     	;# 
   368  0714                     	;# 
   369  0716                     	;# 
   370  0717                     	;# 
   371  0718                     	;# 
   372  0719                     	;# 
   373  071A                     	;# 
   374  071B                     	;# 
   375  071C                     	;# 
   376  071D                     	;# 
   377  071E                     	;# 
   378  0796                     	;# 
   379  0797                     	;# 
   380  0798                     	;# 
   381  0799                     	;# 
   382  079A                     	;# 
   383  079B                     	;# 
   384  080C                     	;# 
   385  080D                     	;# 
   386  080E                     	;# 
   387  080F                     	;# 
   388  0810                     	;# 
   389  0811                     	;# 
   390  0812                     	;# 
   391  0813                     	;# 
   392  0814                     	;# 
   393  081A                     	;# 
   394  081B                     	;# 
   395  081C                     	;# 
   396  081D                     	;# 
   397  081E                     	;# 
   398  081F                     	;# 
   399  088C                     	;# 
   400  088D                     	;# 
   401  088E                     	;# 
   402  088F                     	;# 
   403  0890                     	;# 
   404  0891                     	;# 
   405  0892                     	;# 
   406  0893                     	;# 
   407  0895                     	;# 
   408  0896                     	;# 
   409  0897                     	;# 
   410  0898                     	;# 
   411  0899                     	;# 
   412  089A                     	;# 
   413  089B                     	;# 
   414  090C                     	;# 
   415  090E                     	;# 
   416  090F                     	;# 
   417  091F                     	;# 
   418  091F                     	;# 
   419  098F                     	;# 
   420  098F                     	;# 
   421  0990                     	;# 
   422  0991                     	;# 
   423  0992                     	;# 
   424  0993                     	;# 
   425  0994                     	;# 
   426  0995                     	;# 
   427  0996                     	;# 
   428  0997                     	;# 
   429  0E0F                     	;# 
   430  0E10                     	;# 
   431  0E11                     	;# 
   432  0E12                     	;# 
   433  0E13                     	;# 
   434  0E14                     	;# 
   435  0E15                     	;# 
   436  0E16                     	;# 
   437  0E17                     	;# 
   438  0E18                     	;# 
   439  0E19                     	;# 
   440  0E1A                     	;# 
   441  0E1B                     	;# 
   442  0E1C                     	;# 
   443  0E1D                     	;# 
   444  0E1E                     	;# 
   445  0E1F                     	;# 
   446  0E20                     	;# 
   447  0E21                     	;# 
   448  0E22                     	;# 
   449  0E23                     	;# 
   450  0E24                     	;# 
   451  0E25                     	;# 
   452  0E26                     	;# 
   453  0E27                     	;# 
   454  0E28                     	;# 
   455  0E29                     	;# 
   456  0E2A                     	;# 
   457  0E2B                     	;# 
   458  0E2C                     	;# 
   459  0E2D                     	;# 
   460  0E2E                     	;# 
   461  0E2F                     	;# 
   462  0E30                     	;# 
   463  0E31                     	;# 
   464  0E32                     	;# 
   465  0E33                     	;# 
   466  0E34                     	;# 
   467  0E35                     	;# 
   468  0E36                     	;# 
   469  0E37                     	;# 
   470  0E8F                     	;# 
   471  0E90                     	;# 
   472  0E91                     	;# 
   473  0E92                     	;# 
   474  0E93                     	;# 
   475  0E94                     	;# 
   476  0E95                     	;# 
   477  0E96                     	;# 
   478  0E97                     	;# 
   479  0E9C                     	;# 
   480  0E9D                     	;# 
   481  0E9E                     	;# 
   482  0EA1                     	;# 
   483  0EA2                     	;# 
   484  0EA3                     	;# 
   485  0EA4                     	;# 
   486  0EA5                     	;# 
   487  0EA9                     	;# 
   488  0EAA                     	;# 
   489  0EAB                     	;# 
   490  0EAC                     	;# 
   491  0EB1                     	;# 
   492  0EB2                     	;# 
   493  0EB3                     	;# 
   494  0EB8                     	;# 
   495  0EB9                     	;# 
   496  0EBA                     	;# 
   497  0EBB                     	;# 
   498  0EBC                     	;# 
   499  0EBD                     	;# 
   500  0EBE                     	;# 
   501  0EC3                     	;# 
   502  0EC5                     	;# 
   503  0EC6                     	;# 
   504  0EC7                     	;# 
   505  0EC8                     	;# 
   506  0EC9                     	;# 
   507  0ECA                     	;# 
   508  0ECB                     	;# 
   509  0ECC                     	;# 
   510  0F10                     	;# 
   511  0F11                     	;# 
   512  0F12                     	;# 
   513  0F13                     	;# 
   514  0F14                     	;# 
   515  0F15                     	;# 
   516  0F16                     	;# 
   517  0F17                     	;# 
   518  0F18                     	;# 
   519  0F19                     	;# 
   520  0F1A                     	;# 
   521  0F1B                     	;# 
   522  0F1C                     	;# 
   523  0F1D                     	;# 
   524  0F1E                     	;# 
   525  0F1F                     	;# 
   526  0F20                     	;# 
   527  0F21                     	;# 
   528  0F22                     	;# 
   529  0F23                     	;# 
   530  0F24                     	;# 
   531  0F25                     	;# 
   532  0F26                     	;# 
   533  0F27                     	;# 
   534  0F38                     	;# 
   535  0F39                     	;# 
   536  0F3A                     	;# 
   537  0F3B                     	;# 
   538  0F3C                     	;# 
   539  0F3D                     	;# 
   540  0F3E                     	;# 
   541  0F3F                     	;# 
   542  0F40                     	;# 
   543  0F41                     	;# 
   544  0F43                     	;# 
   545  0F44                     	;# 
   546  0F45                     	;# 
   547  0F46                     	;# 
   548  0F47                     	;# 
   549  0F48                     	;# 
   550  0F49                     	;# 
   551  0F4A                     	;# 
   552  0F4B                     	;# 
   553  0F4C                     	;# 
   554  0F4E                     	;# 
   555  0F4F                     	;# 
   556  0F50                     	;# 
   557  0F51                     	;# 
   558  0F52                     	;# 
   559  0F53                     	;# 
   560  0F54                     	;# 
   561  0F55                     	;# 
   562  0F56                     	;# 
   563  0F57                     	;# 
   564  0F65                     	;# 
   565  0F68                     	;# 
   566  0F69                     	;# 
   567  0F6A                     	;# 
   568  0F6B                     	;# 
   569  0FE4                     	;# 
   570  0FE5                     	;# 
   571  0FE6                     	;# 
   572  0FE7                     	;# 
   573  0FE8                     	;# 
   574  0FE9                     	;# 
   575  0FEA                     	;# 
   576  0FEB                     	;# 
   577  0FED                     	;# 
   578  0FEE                     	;# 
   579  0FEF                     	;# 
   580  0000                     	;# 
   581  0001                     	;# 
   582  0002                     	;# 
   583  0003                     	;# 
   584  0004                     	;# 
   585  0005                     	;# 
   586  0006                     	;# 
   587  0007                     	;# 
   588  0008                     	;# 
   589  0009                     	;# 
   590  000A                     	;# 
   591  000B                     	;# 
   592  000C                     	;# 
   593  000D                     	;# 
   594  000E                     	;# 
   595  0010                     	;# 
   596  0011                     	;# 
   597  0012                     	;# 
   598  0013                     	;# 
   599  0016                     	;# 
   600  0017                     	;# 
   601  0018                     	;# 
   602  001C                     	;# 
   603  001C                     	;# 
   604  001D                     	;# 
   605  001D                     	;# 
   606  001E                     	;# 
   607  001F                     	;# 
   608  008C                     	;# 
   609  008C                     	;# 
   610  008D                     	;# 
   611  008E                     	;# 
   612  008E                     	;# 
   613  008F                     	;# 
   614  0090                     	;# 
   615  0090                     	;# 
   616  0091                     	;# 
   617  0093                     	;# 
   618  0094                     	;# 
   619  0095                     	;# 
   620  0096                     	;# 
   621  0097                     	;# 
   622  0098                     	;# 
   623  0099                     	;# 
   624  009A                     	;# 
   625  009B                     	;# 
   626  009C                     	;# 
   627  009D                     	;# 
   628  009E                     	;# 
   629  010C                     	;# 
   630  010D                     	;# 
   631  010E                     	;# 
   632  010E                     	;# 
   633  010F                     	;# 
   634  0110                     	;# 
   635  0110                     	;# 
   636  0111                     	;# 
   637  0112                     	;# 
   638  0112                     	;# 
   639  0113                     	;# 
   640  0114                     	;# 
   641  0114                     	;# 
   642  0115                     	;# 
   643  0116                     	;# 
   644  0116                     	;# 
   645  0117                     	;# 
   646  0119                     	;# 
   647  0119                     	;# 
   648  0119                     	;# 
   649  011A                     	;# 
   650  011A                     	;# 
   651  011A                     	;# 
   652  011B                     	;# 
   653  011B                     	;# 
   654  011B                     	;# 
   655  011B                     	;# 
   656  011B                     	;# 
   657  011C                     	;# 
   658  011C                     	;# 
   659  011C                     	;# 
   660  011D                     	;# 
   661  011D                     	;# 
   662  011D                     	;# 
   663  011E                     	;# 
   664  011E                     	;# 
   665  011E                     	;# 
   666  011F                     	;# 
   667  011F                     	;# 
   668  011F                     	;# 
   669  011F                     	;# 
   670  011F                     	;# 
   671  018C                     	;# 
   672  018D                     	;# 
   673  018E                     	;# 
   674  018F                     	;# 
   675  0190                     	;# 
   676  0191                     	;# 
   677  0192                     	;# 
   678  0196                     	;# 
   679  0197                     	;# 
   680  0198                     	;# 
   681  0199                     	;# 
   682  019A                     	;# 
   683  019B                     	;# 
   684  019C                     	;# 
   685  020C                     	;# 
   686  020D                     	;# 
   687  020E                     	;# 
   688  020F                     	;# 
   689  020F                     	;# 
   690  0210                     	;# 
   691  0210                     	;# 
   692  0211                     	;# 
   693  0211                     	;# 
   694  0212                     	;# 
   695  0213                     	;# 
   696  0214                     	;# 
   697  0215                     	;# 
   698  0215                     	;# 
   699  0216                     	;# 
   700  0216                     	;# 
   701  0217                     	;# 
   702  0217                     	;# 
   703  0218                     	;# 
   704  0219                     	;# 
   705  021A                     	;# 
   706  021B                     	;# 
   707  021B                     	;# 
   708  021C                     	;# 
   709  021C                     	;# 
   710  021D                     	;# 
   711  021D                     	;# 
   712  021E                     	;# 
   713  021F                     	;# 
   714  028C                     	;# 
   715  028C                     	;# 
   716  028D                     	;# 
   717  028D                     	;# 
   718  028E                     	;# 
   719  028F                     	;# 
   720  0290                     	;# 
   721  0290                     	;# 
   722  0291                     	;# 
   723  0292                     	;# 
   724  0292                     	;# 
   725  0293                     	;# 
   726  0293                     	;# 
   727  0294                     	;# 
   728  0295                     	;# 
   729  0296                     	;# 
   730  0296                     	;# 
   731  0297                     	;# 
   732  0298                     	;# 
   733  0298                     	;# 
   734  0299                     	;# 
   735  0299                     	;# 
   736  029A                     	;# 
   737  029B                     	;# 
   738  029C                     	;# 
   739  029C                     	;# 
   740  029D                     	;# 
   741  030C                     	;# 
   742  030C                     	;# 
   743  030D                     	;# 
   744  030E                     	;# 
   745  030F                     	;# 
   746  0310                     	;# 
   747  0310                     	;# 
   748  0311                     	;# 
   749  0312                     	;# 
   750  0313                     	;# 
   751  0314                     	;# 
   752  0314                     	;# 
   753  0315                     	;# 
   754  0316                     	;# 
   755  0317                     	;# 
   756  0318                     	;# 
   757  0318                     	;# 
   758  0319                     	;# 
   759  031A                     	;# 
   760  031B                     	;# 
   761  031C                     	;# 
   762  031C                     	;# 
   763  031D                     	;# 
   764  031E                     	;# 
   765  031F                     	;# 
   766  038C                     	;# 
   767  038D                     	;# 
   768  038E                     	;# 
   769  0390                     	;# 
   770  0391                     	;# 
   771  0392                     	;# 
   772  040C                     	;# 
   773  040D                     	;# 
   774  040E                     	;# 
   775  040F                     	;# 
   776  0410                     	;# 
   777  0411                     	;# 
   778  0416                     	;# 
   779  0416                     	;# 
   780  0417                     	;# 
   781  0418                     	;# 
   782  0418                     	;# 
   783  0419                     	;# 
   784  041A                     	;# 
   785  041A                     	;# 
   786  041B                     	;# 
   787  041C                     	;# 
   788  041C                     	;# 
   789  041D                     	;# 
   790  041E                     	;# 
   791  041F                     	;# 
   792  048C                     	;# 
   793  048C                     	;# 
   794  048D                     	;# 
   795  048E                     	;# 
   796  048F                     	;# 
   797  048F                     	;# 
   798  0490                     	;# 
   799  0491                     	;# 
   800  0492                     	;# 
   801  0492                     	;# 
   802  0493                     	;# 
   803  0494                     	;# 
   804  0495                     	;# 
   805  0495                     	;# 
   806  0496                     	;# 
   807  0497                     	;# 
   808  0498                     	;# 
   809  0499                     	;# 
   810  049A                     	;# 
   811  049B                     	;# 
   812  049C                     	;# 
   813  049D                     	;# 
   814  050C                     	;# 
   815  050C                     	;# 
   816  050D                     	;# 
   817  050E                     	;# 
   818  050F                     	;# 
   819  050F                     	;# 
   820  0510                     	;# 
   821  0511                     	;# 
   822  0512                     	;# 
   823  0512                     	;# 
   824  0513                     	;# 
   825  0514                     	;# 
   826  0515                     	;# 
   827  0515                     	;# 
   828  0516                     	;# 
   829  0517                     	;# 
   830  0518                     	;# 
   831  0519                     	;# 
   832  051A                     	;# 
   833  051B                     	;# 
   834  051C                     	;# 
   835  051D                     	;# 
   836  058C                     	;# 
   837  058C                     	;# 
   838  058D                     	;# 
   839  058E                     	;# 
   840  058F                     	;# 
   841  058F                     	;# 
   842  0590                     	;# 
   843  0591                     	;# 
   844  0592                     	;# 
   845  0593                     	;# 
   846  060C                     	;# 
   847  060D                     	;# 
   848  060E                     	;# 
   849  060F                     	;# 
   850  0610                     	;# 
   851  0611                     	;# 
   852  0612                     	;# 
   853  0613                     	;# 
   854  0614                     	;# 
   855  0616                     	;# 
   856  0617                     	;# 
   857  0618                     	;# 
   858  0619                     	;# 
   859  061A                     	;# 
   860  061B                     	;# 
   861  061C                     	;# 
   862  061D                     	;# 
   863  061E                     	;# 
   864  068C                     	;# 
   865  068D                     	;# 
   866  068E                     	;# 
   867  068F                     	;# 
   868  0690                     	;# 
   869  0691                     	;# 
   870  0692                     	;# 
   871  0693                     	;# 
   872  0694                     	;# 
   873  070C                     	;# 
   874  070D                     	;# 
   875  070E                     	;# 
   876  070F                     	;# 
   877  0710                     	;# 
   878  0711                     	;# 
   879  0712                     	;# 
   880  0713                     	;# 
   881  0714                     	;# 
   882  0716                     	;# 
   883  0717                     	;# 
   884  0718                     	;# 
   885  0719                     	;# 
   886  071A                     	;# 
   887  071B                     	;# 
   888  071C                     	;# 
   889  071D                     	;# 
   890  071E                     	;# 
   891  0796                     	;# 
   892  0797                     	;# 
   893  0798                     	;# 
   894  0799                     	;# 
   895  079A                     	;# 
   896  079B                     	;# 
   897  080C                     	;# 
   898  080D                     	;# 
   899  080E                     	;# 
   900  080F                     	;# 
   901  0810                     	;# 
   902  0811                     	;# 
   903  0812                     	;# 
   904  0813                     	;# 
   905  0814                     	;# 
   906  081A                     	;# 
   907  081B                     	;# 
   908  081C                     	;# 
   909  081D                     	;# 
   910  081E                     	;# 
   911  081F                     	;# 
   912  088C                     	;# 
   913  088D                     	;# 
   914  088E                     	;# 
   915  088F                     	;# 
   916  0890                     	;# 
   917  0891                     	;# 
   918  0892                     	;# 
   919  0893                     	;# 
   920  0895                     	;# 
   921  0896                     	;# 
   922  0897                     	;# 
   923  0898                     	;# 
   924  0899                     	;# 
   925  089A                     	;# 
   926  089B                     	;# 
   927  090C                     	;# 
   928  090E                     	;# 
   929  090F                     	;# 
   930  091F                     	;# 
   931  091F                     	;# 
   932  098F                     	;# 
   933  098F                     	;# 
   934  0990                     	;# 
   935  0991                     	;# 
   936  0992                     	;# 
   937  0993                     	;# 
   938  0994                     	;# 
   939  0995                     	;# 
   940  0996                     	;# 
   941  0997                     	;# 
   942  0E0F                     	;# 
   943  0E10                     	;# 
   944  0E11                     	;# 
   945  0E12                     	;# 
   946  0E13                     	;# 
   947  0E14                     	;# 
   948  0E15                     	;# 
   949  0E16                     	;# 
   950  0E17                     	;# 
   951  0E18                     	;# 
   952  0E19                     	;# 
   953  0E1A                     	;# 
   954  0E1B                     	;# 
   955  0E1C                     	;# 
   956  0E1D                     	;# 
   957  0E1E                     	;# 
   958  0E1F                     	;# 
   959  0E20                     	;# 
   960  0E21                     	;# 
   961  0E22                     	;# 
   962  0E23                     	;# 
   963  0E24                     	;# 
   964  0E25                     	;# 
   965  0E26                     	;# 
   966  0E27                     	;# 
   967  0E28                     	;# 
   968  0E29                     	;# 
   969  0E2A                     	;# 
   970  0E2B                     	;# 
   971  0E2C                     	;# 
   972  0E2D                     	;# 
   973  0E2E                     	;# 
   974  0E2F                     	;# 
   975  0E30                     	;# 
   976  0E31                     	;# 
   977  0E32                     	;# 
   978  0E33                     	;# 
   979  0E34                     	;# 
   980  0E35                     	;# 
   981  0E36                     	;# 
   982  0E37                     	;# 
   983  0E8F                     	;# 
   984  0E90                     	;# 
   985  0E91                     	;# 
   986  0E92                     	;# 
   987  0E93                     	;# 
   988  0E94                     	;# 
   989  0E95                     	;# 
   990  0E96                     	;# 
   991  0E97                     	;# 
   992  0E9C                     	;# 
   993  0E9D                     	;# 
   994  0E9E                     	;# 
   995  0EA1                     	;# 
   996  0EA2                     	;# 
   997  0EA3                     	;# 
   998  0EA4                     	;# 
   999  0EA5                     	;# 
  1000  0EA9                     	;# 
  1001  0EAA                     	;# 
  1002  0EAB                     	;# 
  1003  0EAC                     	;# 
  1004  0EB1                     	;# 
  1005  0EB2                     	;# 
  1006  0EB3                     	;# 
  1007  0EB8                     	;# 
  1008  0EB9                     	;# 
  1009  0EBA                     	;# 
  1010  0EBB                     	;# 
  1011  0EBC                     	;# 
  1012  0EBD                     	;# 
  1013  0EBE                     	;# 
  1014  0EC3                     	;# 
  1015  0EC5                     	;# 
  1016  0EC6                     	;# 
  1017  0EC7                     	;# 
  1018  0EC8                     	;# 
  1019  0EC9                     	;# 
  1020  0ECA                     	;# 
  1021  0ECB                     	;# 
  1022  0ECC                     	;# 
  1023  0F10                     	;# 
  1024  0F11                     	;# 
  1025  0F12                     	;# 
  1026  0F13                     	;# 
  1027  0F14                     	;# 
  1028  0F15                     	;# 
  1029  0F16                     	;# 
  1030  0F17                     	;# 
  1031  0F18                     	;# 
  1032  0F19                     	;# 
  1033  0F1A                     	;# 
  1034  0F1B                     	;# 
  1035  0F1C                     	;# 
  1036  0F1D                     	;# 
  1037  0F1E                     	;# 
  1038  0F1F                     	;# 
  1039  0F20                     	;# 
  1040  0F21                     	;# 
  1041  0F22                     	;# 
  1042  0F23                     	;# 
  1043  0F24                     	;# 
  1044  0F25                     	;# 
  1045  0F26                     	;# 
  1046  0F27                     	;# 
  1047  0F38                     	;# 
  1048  0F39                     	;# 
  1049  0F3A                     	;# 
  1050  0F3B                     	;# 
  1051  0F3C                     	;# 
  1052  0F3D                     	;# 
  1053  0F3E                     	;# 
  1054  0F3F                     	;# 
  1055  0F40                     	;# 
  1056  0F41                     	;# 
  1057  0F43                     	;# 
  1058  0F44                     	;# 
  1059  0F45                     	;# 
  1060  0F46                     	;# 
  1061  0F47                     	;# 
  1062  0F48                     	;# 
  1063  0F49                     	;# 
  1064  0F4A                     	;# 
  1065  0F4B                     	;# 
  1066  0F4C                     	;# 
  1067  0F4E                     	;# 
  1068  0F4F                     	;# 
  1069  0F50                     	;# 
  1070  0F51                     	;# 
  1071  0F52                     	;# 
  1072  0F53                     	;# 
  1073  0F54                     	;# 
  1074  0F55                     	;# 
  1075  0F56                     	;# 
  1076  0F57                     	;# 
  1077  0F65                     	;# 
  1078  0F68                     	;# 
  1079  0F69                     	;# 
  1080  0F6A                     	;# 
  1081  0F6B                     	;# 
  1082  0FE4                     	;# 
  1083  0FE5                     	;# 
  1084  0FE6                     	;# 
  1085  0FE7                     	;# 
  1086  0FE8                     	;# 
  1087  0FE9                     	;# 
  1088  0FEA                     	;# 
  1089  0FEB                     	;# 
  1090  0FED                     	;# 
  1091  0FEE                     	;# 
  1092  0FEF                     	;# 
  1093  0000                     	;# 
  1094  0001                     	;# 
  1095  0002                     	;# 
  1096  0003                     	;# 
  1097  0004                     	;# 
  1098  0005                     	;# 
  1099  0006                     	;# 
  1100  0007                     	;# 
  1101  0008                     	;# 
  1102  0009                     	;# 
  1103  000A                     	;# 
  1104  000B                     	;# 
  1105  000C                     	;# 
  1106  000D                     	;# 
  1107  000E                     	;# 
  1108  0010                     	;# 
  1109  0011                     	;# 
  1110  0012                     	;# 
  1111  0013                     	;# 
  1112  0016                     	;# 
  1113  0017                     	;# 
  1114  0018                     	;# 
  1115  001C                     	;# 
  1116  001C                     	;# 
  1117  001D                     	;# 
  1118  001D                     	;# 
  1119  001E                     	;# 
  1120  001F                     	;# 
  1121  008C                     	;# 
  1122  008C                     	;# 
  1123  008D                     	;# 
  1124  008E                     	;# 
  1125  008E                     	;# 
  1126  008F                     	;# 
  1127  0090                     	;# 
  1128  0090                     	;# 
  1129  0091                     	;# 
  1130  0093                     	;# 
  1131  0094                     	;# 
  1132  0095                     	;# 
  1133  0096                     	;# 
  1134  0097                     	;# 
  1135  0098                     	;# 
  1136  0099                     	;# 
  1137  009A                     	;# 
  1138  009B                     	;# 
  1139  009C                     	;# 
  1140  009D                     	;# 
  1141  009E                     	;# 
  1142  010C                     	;# 
  1143  010D                     	;# 
  1144  010E                     	;# 
  1145  010E                     	;# 
  1146  010F                     	;# 
  1147  0110                     	;# 
  1148  0110                     	;# 
  1149  0111                     	;# 
  1150  0112                     	;# 
  1151  0112                     	;# 
  1152  0113                     	;# 
  1153  0114                     	;# 
  1154  0114                     	;# 
  1155  0115                     	;# 
  1156  0116                     	;# 
  1157  0116                     	;# 
  1158  0117                     	;# 
  1159  0119                     	;# 
  1160  0119                     	;# 
  1161  0119                     	;# 
  1162  011A                     	;# 
  1163  011A                     	;# 
  1164  011A                     	;# 
  1165  011B                     	;# 
  1166  011B                     	;# 
  1167  011B                     	;# 
  1168  011B                     	;# 
  1169  011B                     	;# 
  1170  011C                     	;# 
  1171  011C                     	;# 
  1172  011C                     	;# 
  1173  011D                     	;# 
  1174  011D                     	;# 
  1175  011D                     	;# 
  1176  011E                     	;# 
  1177  011E                     	;# 
  1178  011E                     	;# 
  1179  011F                     	;# 
  1180  011F                     	;# 
  1181  011F                     	;# 
  1182  011F                     	;# 
  1183  011F                     	;# 
  1184  018C                     	;# 
  1185  018D                     	;# 
  1186  018E                     	;# 
  1187  018F                     	;# 
  1188  0190                     	;# 
  1189  0191                     	;# 
  1190  0192                     	;# 
  1191  0196                     	;# 
  1192  0197                     	;# 
  1193  0198                     	;# 
  1194  0199                     	;# 
  1195  019A                     	;# 
  1196  019B                     	;# 
  1197  019C                     	;# 
  1198  020C                     	;# 
  1199  020D                     	;# 
  1200  020E                     	;# 
  1201  020F                     	;# 
  1202  020F                     	;# 
  1203  0210                     	;# 
  1204  0210                     	;# 
  1205  0211                     	;# 
  1206  0211                     	;# 
  1207  0212                     	;# 
  1208  0213                     	;# 
  1209  0214                     	;# 
  1210  0215                     	;# 
  1211  0215                     	;# 
  1212  0216                     	;# 
  1213  0216                     	;# 
  1214  0217                     	;# 
  1215  0217                     	;# 
  1216  0218                     	;# 
  1217  0219                     	;# 
  1218  021A                     	;# 
  1219  021B                     	;# 
  1220  021B                     	;# 
  1221  021C                     	;# 
  1222  021C                     	;# 
  1223  021D                     	;# 
  1224  021D                     	;# 
  1225  021E                     	;# 
  1226  021F                     	;# 
  1227  028C                     	;# 
  1228  028C                     	;# 
  1229  028D                     	;# 
  1230  028D                     	;# 
  1231  028E                     	;# 
  1232  028F                     	;# 
  1233  0290                     	;# 
  1234  0290                     	;# 
  1235  0291                     	;# 
  1236  0292                     	;# 
  1237  0292                     	;# 
  1238  0293                     	;# 
  1239  0293                     	;# 
  1240  0294                     	;# 
  1241  0295                     	;# 
  1242  0296                     	;# 
  1243  0296                     	;# 
  1244  0297                     	;# 
  1245  0298                     	;# 
  1246  0298                     	;# 
  1247  0299                     	;# 
  1248  0299                     	;# 
  1249  029A                     	;# 
  1250  029B                     	;# 
  1251  029C                     	;# 
  1252  029C                     	;# 
  1253  029D                     	;# 
  1254  030C                     	;# 
  1255  030C                     	;# 
  1256  030D                     	;# 
  1257  030E                     	;# 
  1258  030F                     	;# 
  1259  0310                     	;# 
  1260  0310                     	;# 
  1261  0311                     	;# 
  1262  0312                     	;# 
  1263  0313                     	;# 
  1264  0314                     	;# 
  1265  0314                     	;# 
  1266  0315                     	;# 
  1267  0316                     	;# 
  1268  0317                     	;# 
  1269  0318                     	;# 
  1270  0318                     	;# 
  1271  0319                     	;# 
  1272  031A                     	;# 
  1273  031B                     	;# 
  1274  031C                     	;# 
  1275  031C                     	;# 
  1276  031D                     	;# 
  1277  031E                     	;# 
  1278  031F                     	;# 
  1279  038C                     	;# 
  1280  038D                     	;# 
  1281  038E                     	;# 
  1282  0390                     	;# 
  1283  0391                     	;# 
  1284  0392                     	;# 
  1285  040C                     	;# 
  1286  040D                     	;# 
  1287  040E                     	;# 
  1288  040F                     	;# 
  1289  0410                     	;# 
  1290  0411                     	;# 
  1291  0416                     	;# 
  1292  0416                     	;# 
  1293  0417                     	;# 
  1294  0418                     	;# 
  1295  0418                     	;# 
  1296  0419                     	;# 
  1297  041A                     	;# 
  1298  041A                     	;# 
  1299  041B                     	;# 
  1300  041C                     	;# 
  1301  041C                     	;# 
  1302  041D                     	;# 
  1303  041E                     	;# 
  1304  041F                     	;# 
  1305  048C                     	;# 
  1306  048C                     	;# 
  1307  048D                     	;# 
  1308  048E                     	;# 
  1309  048F                     	;# 
  1310  048F                     	;# 
  1311  0490                     	;# 
  1312  0491                     	;# 
  1313  0492                     	;# 
  1314  0492                     	;# 
  1315  0493                     	;# 
  1316  0494                     	;# 
  1317  0495                     	;# 
  1318  0495                     	;# 
  1319  0496                     	;# 
  1320  0497                     	;# 
  1321  0498                     	;# 
  1322  0499                     	;# 
  1323  049A                     	;# 
  1324  049B                     	;# 
  1325  049C                     	;# 
  1326  049D                     	;# 
  1327  050C                     	;# 
  1328  050C                     	;# 
  1329  050D                     	;# 
  1330  050E                     	;# 
  1331  050F                     	;# 
  1332  050F                     	;# 
  1333  0510                     	;# 
  1334  0511                     	;# 
  1335  0512                     	;# 
  1336  0512                     	;# 
  1337  0513                     	;# 
  1338  0514                     	;# 
  1339  0515                     	;# 
  1340  0515                     	;# 
  1341  0516                     	;# 
  1342  0517                     	;# 
  1343  0518                     	;# 
  1344  0519                     	;# 
  1345  051A                     	;# 
  1346  051B                     	;# 
  1347  051C                     	;# 
  1348  051D                     	;# 
  1349  058C                     	;# 
  1350  058C                     	;# 
  1351  058D                     	;# 
  1352  058E                     	;# 
  1353  058F                     	;# 
  1354  058F                     	;# 
  1355  0590                     	;# 
  1356  0591                     	;# 
  1357  0592                     	;# 
  1358  0593                     	;# 
  1359  060C                     	;# 
  1360  060D                     	;# 
  1361  060E                     	;# 
  1362  060F                     	;# 
  1363  0610                     	;# 
  1364  0611                     	;# 
  1365  0612                     	;# 
  1366  0613                     	;# 
  1367  0614                     	;# 
  1368  0616                     	;# 
  1369  0617                     	;# 
  1370  0618                     	;# 
  1371  0619                     	;# 
  1372  061A                     	;# 
  1373  061B                     	;# 
  1374  061C                     	;# 
  1375  061D                     	;# 
  1376  061E                     	;# 
  1377  068C                     	;# 
  1378  068D                     	;# 
  1379  068E                     	;# 
  1380  068F                     	;# 
  1381  0690                     	;# 
  1382  0691                     	;# 
  1383  0692                     	;# 
  1384  0693                     	;# 
  1385  0694                     	;# 
  1386  070C                     	;# 
  1387  070D                     	;# 
  1388  070E                     	;# 
  1389  070F                     	;# 
  1390  0710                     	;# 
  1391  0711                     	;# 
  1392  0712                     	;# 
  1393  0713                     	;# 
  1394  0714                     	;# 
  1395  0716                     	;# 
  1396  0717                     	;# 
  1397  0718                     	;# 
  1398  0719                     	;# 
  1399  071A                     	;# 
  1400  071B                     	;# 
  1401  071C                     	;# 
  1402  071D                     	;# 
  1403  071E                     	;# 
  1404  0796                     	;# 
  1405  0797                     	;# 
  1406  0798                     	;# 
  1407  0799                     	;# 
  1408  079A                     	;# 
  1409  079B                     	;# 
  1410  080C                     	;# 
  1411  080D                     	;# 
  1412  080E                     	;# 
  1413  080F                     	;# 
  1414  0810                     	;# 
  1415  0811                     	;# 
  1416  0812                     	;# 
  1417  0813                     	;# 
  1418  0814                     	;# 
  1419  081A                     	;# 
  1420  081B                     	;# 
  1421  081C                     	;# 
  1422  081D                     	;# 
  1423  081E                     	;# 
  1424  081F                     	;# 
  1425  088C                     	;# 
  1426  088D                     	;# 
  1427  088E                     	;# 
  1428  088F                     	;# 
  1429  0890                     	;# 
  1430  0891                     	;# 
  1431  0892                     	;# 
  1432  0893                     	;# 
  1433  0895                     	;# 
  1434  0896                     	;# 
  1435  0897                     	;# 
  1436  0898                     	;# 
  1437  0899                     	;# 
  1438  089A                     	;# 
  1439  089B                     	;# 
  1440  090C                     	;# 
  1441  090E                     	;# 
  1442  090F                     	;# 
  1443  091F                     	;# 
  1444  091F                     	;# 
  1445  098F                     	;# 
  1446  098F                     	;# 
  1447  0990                     	;# 
  1448  0991                     	;# 
  1449  0992                     	;# 
  1450  0993                     	;# 
  1451  0994                     	;# 
  1452  0995                     	;# 
  1453  0996                     	;# 
  1454  0997                     	;# 
  1455  0E0F                     	;# 
  1456  0E10                     	;# 
  1457  0E11                     	;# 
  1458  0E12                     	;# 
  1459  0E13                     	;# 
  1460  0E14                     	;# 
  1461  0E15                     	;# 
  1462  0E16                     	;# 
  1463  0E17                     	;# 
  1464  0E18                     	;# 
  1465  0E19                     	;# 
  1466  0E1A                     	;# 
  1467  0E1B                     	;# 
  1468  0E1C                     	;# 
  1469  0E1D                     	;# 
  1470  0E1E                     	;# 
  1471  0E1F                     	;# 
  1472  0E20                     	;# 
  1473  0E21                     	;# 
  1474  0E22                     	;# 
  1475  0E23                     	;# 
  1476  0E24                     	;# 
  1477  0E25                     	;# 
  1478  0E26                     	;# 
  1479  0E27                     	;# 
  1480  0E28                     	;# 
  1481  0E29                     	;# 
  1482  0E2A                     	;# 
  1483  0E2B                     	;# 
  1484  0E2C                     	;# 
  1485  0E2D                     	;# 
  1486  0E2E                     	;# 
  1487  0E2F                     	;# 
  1488  0E30                     	;# 
  1489  0E31                     	;# 
  1490  0E32                     	;# 
  1491  0E33                     	;# 
  1492  0E34                     	;# 
  1493  0E35                     	;# 
  1494  0E36                     	;# 
  1495  0E37                     	;# 
  1496  0E8F                     	;# 
  1497  0E90                     	;# 
  1498  0E91                     	;# 
  1499  0E92                     	;# 
  1500  0E93                     	;# 
  1501  0E94                     	;# 
  1502  0E95                     	;# 
  1503  0E96                     	;# 
  1504  0E97                     	;# 
  1505  0E9C                     	;# 
  1506  0E9D                     	;# 
  1507  0E9E                     	;# 
  1508  0EA1                     	;# 
  1509  0EA2                     	;# 
  1510  0EA3                     	;# 
  1511  0EA4                     	;# 
  1512  0EA5                     	;# 
  1513  0EA9                     	;# 
  1514  0EAA                     	;# 
  1515  0EAB                     	;# 
  1516  0EAC                     	;# 
  1517  0EB1                     	;# 
  1518  0EB2                     	;# 
  1519  0EB3                     	;# 
  1520  0EB8                     	;# 
  1521  0EB9                     	;# 
  1522  0EBA                     	;# 
  1523  0EBB                     	;# 
  1524  0EBC                     	;# 
  1525  0EBD                     	;# 
  1526  0EBE                     	;# 
  1527  0EC3                     	;# 
  1528  0EC5                     	;# 
  1529  0EC6                     	;# 
  1530  0EC7                     	;# 
  1531  0EC8                     	;# 
  1532  0EC9                     	;# 
  1533  0ECA                     	;# 
  1534  0ECB                     	;# 
  1535  0ECC                     	;# 
  1536  0F10                     	;# 
  1537  0F11                     	;# 
  1538  0F12                     	;# 
  1539  0F13                     	;# 
  1540  0F14                     	;# 
  1541  0F15                     	;# 
  1542  0F16                     	;# 
  1543  0F17                     	;# 
  1544  0F18                     	;# 
  1545  0F19                     	;# 
  1546  0F1A                     	;# 
  1547  0F1B                     	;# 
  1548  0F1C                     	;# 
  1549  0F1D                     	;# 
  1550  0F1E                     	;# 
  1551  0F1F                     	;# 
  1552  0F20                     	;# 
  1553  0F21                     	;# 
  1554  0F22                     	;# 
  1555  0F23                     	;# 
  1556  0F24                     	;# 
  1557  0F25                     	;# 
  1558  0F26                     	;# 
  1559  0F27                     	;# 
  1560  0F38                     	;# 
  1561  0F39                     	;# 
  1562  0F3A                     	;# 
  1563  0F3B                     	;# 
  1564  0F3C                     	;# 
  1565  0F3D                     	;# 
  1566  0F3E                     	;# 
  1567  0F3F                     	;# 
  1568  0F40                     	;# 
  1569  0F41                     	;# 
  1570  0F43                     	;# 
  1571  0F44                     	;# 
  1572  0F45                     	;# 
  1573  0F46                     	;# 
  1574  0F47                     	;# 
  1575  0F48                     	;# 
  1576  0F49                     	;# 
  1577  0F4A                     	;# 
  1578  0F4B                     	;# 
  1579  0F4C                     	;# 
  1580  0F4E                     	;# 
  1581  0F4F                     	;# 
  1582  0F50                     	;# 
  1583  0F51                     	;# 
  1584  0F52                     	;# 
  1585  0F53                     	;# 
  1586  0F54                     	;# 
  1587  0F55                     	;# 
  1588  0F56                     	;# 
  1589  0F57                     	;# 
  1590  0F65                     	;# 
  1591  0F68                     	;# 
  1592  0F69                     	;# 
  1593  0F6A                     	;# 
  1594  0F6B                     	;# 
  1595  0FE4                     	;# 
  1596  0FE5                     	;# 
  1597  0FE6                     	;# 
  1598  0FE7                     	;# 
  1599  0FE8                     	;# 
  1600  0FE9                     	;# 
  1601  0FEA                     	;# 
  1602  0FEB                     	;# 
  1603  0FED                     	;# 
  1604  0FEE                     	;# 
  1605  0FEF                     	;# 
  1606  0000                     	;# 
  1607  0001                     	;# 
  1608  0002                     	;# 
  1609  0003                     	;# 
  1610  0004                     	;# 
  1611  0005                     	;# 
  1612  0006                     	;# 
  1613  0007                     	;# 
  1614  0008                     	;# 
  1615  0009                     	;# 
  1616  000A                     	;# 
  1617  000B                     	;# 
  1618  000C                     	;# 
  1619  000D                     	;# 
  1620  000E                     	;# 
  1621  0010                     	;# 
  1622  0011                     	;# 
  1623  0012                     	;# 
  1624  0013                     	;# 
  1625  0016                     	;# 
  1626  0017                     	;# 
  1627  0018                     	;# 
  1628  001C                     	;# 
  1629  001C                     	;# 
  1630  001D                     	;# 
  1631  001D                     	;# 
  1632  001E                     	;# 
  1633  001F                     	;# 
  1634  008C                     	;# 
  1635  008C                     	;# 
  1636  008D                     	;# 
  1637  008E                     	;# 
  1638  008E                     	;# 
  1639  008F                     	;# 
  1640  0090                     	;# 
  1641  0090                     	;# 
  1642  0091                     	;# 
  1643  0093                     	;# 
  1644  0094                     	;# 
  1645  0095                     	;# 
  1646  0096                     	;# 
  1647  0097                     	;# 
  1648  0098                     	;# 
  1649  0099                     	;# 
  1650  009A                     	;# 
  1651  009B                     	;# 
  1652  009C                     	;# 
  1653  009D                     	;# 
  1654  009E                     	;# 
  1655  010C                     	;# 
  1656  010D                     	;# 
  1657  010E                     	;# 
  1658  010E                     	;# 
  1659  010F                     	;# 
  1660  0110                     	;# 
  1661  0110                     	;# 
  1662  0111                     	;# 
  1663  0112                     	;# 
  1664  0112                     	;# 
  1665  0113                     	;# 
  1666  0114                     	;# 
  1667  0114                     	;# 
  1668  0115                     	;# 
  1669  0116                     	;# 
  1670  0116                     	;# 
  1671  0117                     	;# 
  1672  0119                     	;# 
  1673  0119                     	;# 
  1674  0119                     	;# 
  1675  011A                     	;# 
  1676  011A                     	;# 
  1677  011A                     	;# 
  1678  011B                     	;# 
  1679  011B                     	;# 
  1680  011B                     	;# 
  1681  011B                     	;# 
  1682  011B                     	;# 
  1683  011C                     	;# 
  1684  011C                     	;# 
  1685  011C                     	;# 
  1686  011D                     	;# 
  1687  011D                     	;# 
  1688  011D                     	;# 
  1689  011E                     	;# 
  1690  011E                     	;# 
  1691  011E                     	;# 
  1692  011F                     	;# 
  1693  011F                     	;# 
  1694  011F                     	;# 
  1695  011F                     	;# 
  1696  011F                     	;# 
  1697  018C                     	;# 
  1698  018D                     	;# 
  1699  018E                     	;# 
  1700  018F                     	;# 
  1701  0190                     	;# 
  1702  0191                     	;# 
  1703  0192                     	;# 
  1704  0196                     	;# 
  1705  0197                     	;# 
  1706  0198                     	;# 
  1707  0199                     	;# 
  1708  019A                     	;# 
  1709  019B                     	;# 
  1710  019C                     	;# 
  1711  020C                     	;# 
  1712  020D                     	;# 
  1713  020E                     	;# 
  1714  020F                     	;# 
  1715  020F                     	;# 
  1716  0210                     	;# 
  1717  0210                     	;# 
  1718  0211                     	;# 
  1719  0211                     	;# 
  1720  0212                     	;# 
  1721  0213                     	;# 
  1722  0214                     	;# 
  1723  0215                     	;# 
  1724  0215                     	;# 
  1725  0216                     	;# 
  1726  0216                     	;# 
  1727  0217                     	;# 
  1728  0217                     	;# 
  1729  0218                     	;# 
  1730  0219                     	;# 
  1731  021A                     	;# 
  1732  021B                     	;# 
  1733  021B                     	;# 
  1734  021C                     	;# 
  1735  021C                     	;# 
  1736  021D                     	;# 
  1737  021D                     	;# 
  1738  021E                     	;# 
  1739  021F                     	;# 
  1740  028C                     	;# 
  1741  028C                     	;# 
  1742  028D                     	;# 
  1743  028D                     	;# 
  1744  028E                     	;# 
  1745  028F                     	;# 
  1746  0290                     	;# 
  1747  0290                     	;# 
  1748  0291                     	;# 
  1749  0292                     	;# 
  1750  0292                     	;# 
  1751  0293                     	;# 
  1752  0293                     	;# 
  1753  0294                     	;# 
  1754  0295                     	;# 
  1755  0296                     	;# 
  1756  0296                     	;# 
  1757  0297                     	;# 
  1758  0298                     	;# 
  1759  0298                     	;# 
  1760  0299                     	;# 
  1761  0299                     	;# 
  1762  029A                     	;# 
  1763  029B                     	;# 
  1764  029C                     	;# 
  1765  029C                     	;# 
  1766  029D                     	;# 
  1767  030C                     	;# 
  1768  030C                     	;# 
  1769  030D                     	;# 
  1770  030E                     	;# 
  1771  030F                     	;# 
  1772  0310                     	;# 
  1773  0310                     	;# 
  1774  0311                     	;# 
  1775  0312                     	;# 
  1776  0313                     	;# 
  1777  0314                     	;# 
  1778  0314                     	;# 
  1779  0315                     	;# 
  1780  0316                     	;# 
  1781  0317                     	;# 
  1782  0318                     	;# 
  1783  0318                     	;# 
  1784  0319                     	;# 
  1785  031A                     	;# 
  1786  031B                     	;# 
  1787  031C                     	;# 
  1788  031C                     	;# 
  1789  031D                     	;# 
  1790  031E                     	;# 
  1791  031F                     	;# 
  1792  038C                     	;# 
  1793  038D                     	;# 
  1794  038E                     	;# 
  1795  0390                     	;# 
  1796  0391                     	;# 
  1797  0392                     	;# 
  1798  040C                     	;# 
  1799  040D                     	;# 
  1800  040E                     	;# 
  1801  040F                     	;# 
  1802  0410                     	;# 
  1803  0411                     	;# 
  1804  0416                     	;# 
  1805  0416                     	;# 
  1806  0417                     	;# 
  1807  0418                     	;# 
  1808  0418                     	;# 
  1809  0419                     	;# 
  1810  041A                     	;# 
  1811  041A                     	;# 
  1812  041B                     	;# 
  1813  041C                     	;# 
  1814  041C                     	;# 
  1815  041D                     	;# 
  1816  041E                     	;# 
  1817  041F                     	;# 
  1818  048C                     	;# 
  1819  048C                     	;# 
  1820  048D                     	;# 
  1821  048E                     	;# 
  1822  048F                     	;# 
  1823  048F                     	;# 
  1824  0490                     	;# 
  1825  0491                     	;# 
  1826  0492                     	;# 
  1827  0492                     	;# 
  1828  0493                     	;# 
  1829  0494                     	;# 
  1830  0495                     	;# 
  1831  0495                     	;# 
  1832  0496                     	;# 
  1833  0497                     	;# 
  1834  0498                     	;# 
  1835  0499                     	;# 
  1836  049A                     	;# 
  1837  049B                     	;# 
  1838  049C                     	;# 
  1839  049D                     	;# 
  1840  050C                     	;# 
  1841  050C                     	;# 
  1842  050D                     	;# 
  1843  050E                     	;# 
  1844  050F                     	;# 
  1845  050F                     	;# 
  1846  0510                     	;# 
  1847  0511                     	;# 
  1848  0512                     	;# 
  1849  0512                     	;# 
  1850  0513                     	;# 
  1851  0514                     	;# 
  1852  0515                     	;# 
  1853  0515                     	;# 
  1854  0516                     	;# 
  1855  0517                     	;# 
  1856  0518                     	;# 
  1857  0519                     	;# 
  1858  051A                     	;# 
  1859  051B                     	;# 
  1860  051C                     	;# 
  1861  051D                     	;# 
  1862  058C                     	;# 
  1863  058C                     	;# 
  1864  058D                     	;# 
  1865  058E                     	;# 
  1866  058F                     	;# 
  1867  058F                     	;# 
  1868  0590                     	;# 
  1869  0591                     	;# 
  1870  0592                     	;# 
  1871  0593                     	;# 
  1872  060C                     	;# 
  1873  060D                     	;# 
  1874  060E                     	;# 
  1875  060F                     	;# 
  1876  0610                     	;# 
  1877  0611                     	;# 
  1878  0612                     	;# 
  1879  0613                     	;# 
  1880  0614                     	;# 
  1881  0616                     	;# 
  1882  0617                     	;# 
  1883  0618                     	;# 
  1884  0619                     	;# 
  1885  061A                     	;# 
  1886  061B                     	;# 
  1887  061C                     	;# 
  1888  061D                     	;# 
  1889  061E                     	;# 
  1890  068C                     	;# 
  1891  068D                     	;# 
  1892  068E                     	;# 
  1893  068F                     	;# 
  1894  0690                     	;# 
  1895  0691                     	;# 
  1896  0692                     	;# 
  1897  0693                     	;# 
  1898  0694                     	;# 
  1899  070C                     	;# 
  1900  070D                     	;# 
  1901  070E                     	;# 
  1902  070F                     	;# 
  1903  0710                     	;# 
  1904  0711                     	;# 
  1905  0712                     	;# 
  1906  0713                     	;# 
  1907  0714                     	;# 
  1908  0716                     	;# 
  1909  0717                     	;# 
  1910  0718                     	;# 
  1911  0719                     	;# 
  1912  071A                     	;# 
  1913  071B                     	;# 
  1914  071C                     	;# 
  1915  071D                     	;# 
  1916  071E                     	;# 
  1917  0796                     	;# 
  1918  0797                     	;# 
  1919  0798                     	;# 
  1920  0799                     	;# 
  1921  079A                     	;# 
  1922  079B                     	;# 
  1923  080C                     	;# 
  1924  080D                     	;# 
  1925  080E                     	;# 
  1926  080F                     	;# 
  1927  0810                     	;# 
  1928  0811                     	;# 
  1929  0812                     	;# 
  1930  0813                     	;# 
  1931  0814                     	;# 
  1932  081A                     	;# 
  1933  081B                     	;# 
  1934  081C                     	;# 
  1935  081D                     	;# 
  1936  081E                     	;# 
  1937  081F                     	;# 
  1938  088C                     	;# 
  1939  088D                     	;# 
  1940  088E                     	;# 
  1941  088F                     	;# 
  1942  0890                     	;# 
  1943  0891                     	;# 
  1944  0892                     	;# 
  1945  0893                     	;# 
  1946  0895                     	;# 
  1947  0896                     	;# 
  1948  0897                     	;# 
  1949  0898                     	;# 
  1950  0899                     	;# 
  1951  089A                     	;# 
  1952  089B                     	;# 
  1953  090C                     	;# 
  1954  090E                     	;# 
  1955  090F                     	;# 
  1956  091F                     	;# 
  1957  091F                     	;# 
  1958  098F                     	;# 
  1959  098F                     	;# 
  1960  0990                     	;# 
  1961  0991                     	;# 
  1962  0992                     	;# 
  1963  0993                     	;# 
  1964  0994                     	;# 
  1965  0995                     	;# 
  1966  0996                     	;# 
  1967  0997                     	;# 
  1968  0E0F                     	;# 
  1969  0E10                     	;# 
  1970  0E11                     	;# 
  1971  0E12                     	;# 
  1972  0E13                     	;# 
  1973  0E14                     	;# 
  1974  0E15                     	;# 
  1975  0E16                     	;# 
  1976  0E17                     	;# 
  1977  0E18                     	;# 
  1978  0E19                     	;# 
  1979  0E1A                     	;# 
  1980  0E1B                     	;# 
  1981  0E1C                     	;# 
  1982  0E1D                     	;# 
  1983  0E1E                     	;# 
  1984  0E1F                     	;# 
  1985  0E20                     	;# 
  1986  0E21                     	;# 
  1987  0E22                     	;# 
  1988  0E23                     	;# 
  1989  0E24                     	;# 
  1990  0E25                     	;# 
  1991  0E26                     	;# 
  1992  0E27                     	;# 
  1993  0E28                     	;# 
  1994  0E29                     	;# 
  1995  0E2A                     	;# 
  1996  0E2B                     	;# 
  1997  0E2C                     	;# 
  1998  0E2D                     	;# 
  1999  0E2E                     	;# 
  2000  0E2F                     	;# 
  2001  0E30                     	;# 
  2002  0E31                     	;# 
  2003  0E32                     	;# 
  2004  0E33                     	;# 
  2005  0E34                     	;# 
  2006  0E35                     	;# 
  2007  0E36                     	;# 
  2008  0E37                     	;# 
  2009  0E8F                     	;# 
  2010  0E90                     	;# 
  2011  0E91                     	;# 
  2012  0E92                     	;# 
  2013  0E93                     	;# 
  2014  0E94                     	;# 
  2015  0E95                     	;# 
  2016  0E96                     	;# 
  2017  0E97                     	;# 
  2018  0E9C                     	;# 
  2019  0E9D                     	;# 
  2020  0E9E                     	;# 
  2021  0EA1                     	;# 
  2022  0EA2                     	;# 
  2023  0EA3                     	;# 
  2024  0EA4                     	;# 
  2025  0EA5                     	;# 
  2026  0EA9                     	;# 
  2027  0EAA                     	;# 
  2028  0EAB                     	;# 
  2029  0EAC                     	;# 
  2030  0EB1                     	;# 
  2031  0EB2                     	;# 
  2032  0EB3                     	;# 
  2033  0EB8                     	;# 
  2034  0EB9                     	;# 
  2035  0EBA                     	;# 
  2036  0EBB                     	;# 
  2037  0EBC                     	;# 
  2038  0EBD                     	;# 
  2039  0EBE                     	;# 
  2040  0EC3                     	;# 
  2041  0EC5                     	;# 
  2042  0EC6                     	;# 
  2043  0EC7                     	;# 
  2044  0EC8                     	;# 
  2045  0EC9                     	;# 
  2046  0ECA                     	;# 
  2047  0ECB                     	;# 
  2048  0ECC                     	;# 
  2049  0F10                     	;# 
  2050  0F11                     	;# 
  2051  0F12                     	;# 
  2052  0F13                     	;# 
  2053  0F14                     	;# 
  2054  0F15                     	;# 
  2055  0F16                     	;# 
  2056  0F17                     	;# 
  2057  0F18                     	;# 
  2058  0F19                     	;# 
  2059  0F1A                     	;# 
  2060  0F1B                     	;# 
  2061  0F1C                     	;# 
  2062  0F1D                     	;# 
  2063  0F1E                     	;# 
  2064  0F1F                     	;# 
  2065  0F20                     	;# 
  2066  0F21                     	;# 
  2067  0F22                     	;# 
  2068  0F23                     	;# 
  2069  0F24                     	;# 
  2070  0F25                     	;# 
  2071  0F26                     	;# 
  2072  0F27                     	;# 
  2073  0F38                     	;# 
  2074  0F39                     	;# 
  2075  0F3A                     	;# 
  2076  0F3B                     	;# 
  2077  0F3C                     	;# 
  2078  0F3D                     	;# 
  2079  0F3E                     	;# 
  2080  0F3F                     	;# 
  2081  0F40                     	;# 
  2082  0F41                     	;# 
  2083  0F43                     	;# 
  2084  0F44                     	;# 
  2085  0F45                     	;# 
  2086  0F46                     	;# 
  2087  0F47                     	;# 
  2088  0F48                     	;# 
  2089  0F49                     	;# 
  2090  0F4A                     	;# 
  2091  0F4B                     	;# 
  2092  0F4C                     	;# 
  2093  0F4E                     	;# 
  2094  0F4F                     	;# 
  2095  0F50                     	;# 
  2096  0F51                     	;# 
  2097  0F52                     	;# 
  2098  0F53                     	;# 
  2099  0F54                     	;# 
  2100  0F55                     	;# 
  2101  0F56                     	;# 
  2102  0F57                     	;# 
  2103  0F65                     	;# 
  2104  0F68                     	;# 
  2105  0F69                     	;# 
  2106  0F6A                     	;# 
  2107  0F6B                     	;# 
  2108  0FE4                     	;# 
  2109  0FE5                     	;# 
  2110  0FE6                     	;# 
  2111  0FE7                     	;# 
  2112  0FE8                     	;# 
  2113  0FE9                     	;# 
  2114  0FEA                     	;# 
  2115  0FEB                     	;# 
  2116  0FED                     	;# 
  2117  0FEE                     	;# 
  2118  0FEF                     	;# 
  2119  0000                     	;# 
  2120  0001                     	;# 
  2121  0002                     	;# 
  2122  0003                     	;# 
  2123  0004                     	;# 
  2124  0005                     	;# 
  2125  0006                     	;# 
  2126  0007                     	;# 
  2127  0008                     	;# 
  2128  0009                     	;# 
  2129  000A                     	;# 
  2130  000B                     	;# 
  2131  000C                     	;# 
  2132  000D                     	;# 
  2133  000E                     	;# 
  2134  0010                     	;# 
  2135  0011                     	;# 
  2136  0012                     	;# 
  2137  0013                     	;# 
  2138  0016                     	;# 
  2139  0017                     	;# 
  2140  0018                     	;# 
  2141  001C                     	;# 
  2142  001C                     	;# 
  2143  001D                     	;# 
  2144  001D                     	;# 
  2145  001E                     	;# 
  2146  001F                     	;# 
  2147  008C                     	;# 
  2148  008C                     	;# 
  2149  008D                     	;# 
  2150  008E                     	;# 
  2151  008E                     	;# 
  2152  008F                     	;# 
  2153  0090                     	;# 
  2154  0090                     	;# 
  2155  0091                     	;# 
  2156  0093                     	;# 
  2157  0094                     	;# 
  2158  0095                     	;# 
  2159  0096                     	;# 
  2160  0097                     	;# 
  2161  0098                     	;# 
  2162  0099                     	;# 
  2163  009A                     	;# 
  2164  009B                     	;# 
  2165  009C                     	;# 
  2166  009D                     	;# 
  2167  009E                     	;# 
  2168  010C                     	;# 
  2169  010D                     	;# 
  2170  010E                     	;# 
  2171  010E                     	;# 
  2172  010F                     	;# 
  2173  0110                     	;# 
  2174  0110                     	;# 
  2175  0111                     	;# 
  2176  0112                     	;# 
  2177  0112                     	;# 
  2178  0113                     	;# 
  2179  0114                     	;# 
  2180  0114                     	;# 
  2181  0115                     	;# 
  2182  0116                     	;# 
  2183  0116                     	;# 
  2184  0117                     	;# 
  2185  0119                     	;# 
  2186  0119                     	;# 
  2187  0119                     	;# 
  2188  011A                     	;# 
  2189  011A                     	;# 
  2190  011A                     	;# 
  2191  011B                     	;# 
  2192  011B                     	;# 
  2193  011B                     	;# 
  2194  011B                     	;# 
  2195  011B                     	;# 
  2196  011C                     	;# 
  2197  011C                     	;# 
  2198  011C                     	;# 
  2199  011D                     	;# 
  2200  011D                     	;# 
  2201  011D                     	;# 
  2202  011E                     	;# 
  2203  011E                     	;# 
  2204  011E                     	;# 
  2205  011F                     	;# 
  2206  011F                     	;# 
  2207  011F                     	;# 
  2208  011F                     	;# 
  2209  011F                     	;# 
  2210  018C                     	;# 
  2211  018D                     	;# 
  2212  018E                     	;# 
  2213  018F                     	;# 
  2214  0190                     	;# 
  2215  0191                     	;# 
  2216  0192                     	;# 
  2217  0196                     	;# 
  2218  0197                     	;# 
  2219  0198                     	;# 
  2220  0199                     	;# 
  2221  019A                     	;# 
  2222  019B                     	;# 
  2223  019C                     	;# 
  2224  020C                     	;# 
  2225  020D                     	;# 
  2226  020E                     	;# 
  2227  020F                     	;# 
  2228  020F                     	;# 
  2229  0210                     	;# 
  2230  0210                     	;# 
  2231  0211                     	;# 
  2232  0211                     	;# 
  2233  0212                     	;# 
  2234  0213                     	;# 
  2235  0214                     	;# 
  2236  0215                     	;# 
  2237  0215                     	;# 
  2238  0216                     	;# 
  2239  0216                     	;# 
  2240  0217                     	;# 
  2241  0217                     	;# 
  2242  0218                     	;# 
  2243  0219                     	;# 
  2244  021A                     	;# 
  2245  021B                     	;# 
  2246  021B                     	;# 
  2247  021C                     	;# 
  2248  021C                     	;# 
  2249  021D                     	;# 
  2250  021D                     	;# 
  2251  021E                     	;# 
  2252  021F                     	;# 
  2253  028C                     	;# 
  2254  028C                     	;# 
  2255  028D                     	;# 
  2256  028D                     	;# 
  2257  028E                     	;# 
  2258  028F                     	;# 
  2259  0290                     	;# 
  2260  0290                     	;# 
  2261  0291                     	;# 
  2262  0292                     	;# 
  2263  0292                     	;# 
  2264  0293                     	;# 
  2265  0293                     	;# 
  2266  0294                     	;# 
  2267  0295                     	;# 
  2268  0296                     	;# 
  2269  0296                     	;# 
  2270  0297                     	;# 
  2271  0298                     	;# 
  2272  0298                     	;# 
  2273  0299                     	;# 
  2274  0299                     	;# 
  2275  029A                     	;# 
  2276  029B                     	;# 
  2277  029C                     	;# 
  2278  029C                     	;# 
  2279  029D                     	;# 
  2280  030C                     	;# 
  2281  030C                     	;# 
  2282  030D                     	;# 
  2283  030E                     	;# 
  2284  030F                     	;# 
  2285  0310                     	;# 
  2286  0310                     	;# 
  2287  0311                     	;# 
  2288  0312                     	;# 
  2289  0313                     	;# 
  2290  0314                     	;# 
  2291  0314                     	;# 
  2292  0315                     	;# 
  2293  0316                     	;# 
  2294  0317                     	;# 
  2295  0318                     	;# 
  2296  0318                     	;# 
  2297  0319                     	;# 
  2298  031A                     	;# 
  2299  031B                     	;# 
  2300  031C                     	;# 
  2301  031C                     	;# 
  2302  031D                     	;# 
  2303  031E                     	;# 
  2304  031F                     	;# 
  2305  038C                     	;# 
  2306  038D                     	;# 
  2307  038E                     	;# 
  2308  0390                     	;# 
  2309  0391                     	;# 
  2310  0392                     	;# 
  2311  040C                     	;# 
  2312  040D                     	;# 
  2313  040E                     	;# 
  2314  040F                     	;# 
  2315  0410                     	;# 
  2316  0411                     	;# 
  2317  0416                     	;# 
  2318  0416                     	;# 
  2319  0417                     	;# 
  2320  0418                     	;# 
  2321  0418                     	;# 
  2322  0419                     	;# 
  2323  041A                     	;# 
  2324  041A                     	;# 
  2325  041B                     	;# 
  2326  041C                     	;# 
  2327  041C                     	;# 
  2328  041D                     	;# 
  2329  041E                     	;# 
  2330  041F                     	;# 
  2331  048C                     	;# 
  2332  048C                     	;# 
  2333  048D                     	;# 
  2334  048E                     	;# 
  2335  048F                     	;# 
  2336  048F                     	;# 
  2337  0490                     	;# 
  2338  0491                     	;# 
  2339  0492                     	;# 
  2340  0492                     	;# 
  2341  0493                     	;# 
  2342  0494                     	;# 
  2343  0495                     	;# 
  2344  0495                     	;# 
  2345  0496                     	;# 
  2346  0497                     	;# 
  2347  0498                     	;# 
  2348  0499                     	;# 
  2349  049A                     	;# 
  2350  049B                     	;# 
  2351  049C                     	;# 
  2352  049D                     	;# 
  2353  050C                     	;# 
  2354  050C                     	;# 
  2355  050D                     	;# 
  2356  050E                     	;# 
  2357  050F                     	;# 
  2358  050F                     	;# 
  2359  0510                     	;# 
  2360  0511                     	;# 
  2361  0512                     	;# 
  2362  0512                     	;# 
  2363  0513                     	;# 
  2364  0514                     	;# 
  2365  0515                     	;# 
  2366  0515                     	;# 
  2367  0516                     	;# 
  2368  0517                     	;# 
  2369  0518                     	;# 
  2370  0519                     	;# 
  2371  051A                     	;# 
  2372  051B                     	;# 
  2373  051C                     	;# 
  2374  051D                     	;# 
  2375  058C                     	;# 
  2376  058C                     	;# 
  2377  058D                     	;# 
  2378  058E                     	;# 
  2379  058F                     	;# 
  2380  058F                     	;# 
  2381  0590                     	;# 
  2382  0591                     	;# 
  2383  0592                     	;# 
  2384  0593                     	;# 
  2385  060C                     	;# 
  2386  060D                     	;# 
  2387  060E                     	;# 
  2388  060F                     	;# 
  2389  0610                     	;# 
  2390  0611                     	;# 
  2391  0612                     	;# 
  2392  0613                     	;# 
  2393  0614                     	;# 
  2394  0616                     	;# 
  2395  0617                     	;# 
  2396  0618                     	;# 
  2397  0619                     	;# 
  2398  061A                     	;# 
  2399  061B                     	;# 
  2400  061C                     	;# 
  2401  061D                     	;# 
  2402  061E                     	;# 
  2403  068C                     	;# 
  2404  068D                     	;# 
  2405  068E                     	;# 
  2406  068F                     	;# 
  2407  0690                     	;# 
  2408  0691                     	;# 
  2409  0692                     	;# 
  2410  0693                     	;# 
  2411  0694                     	;# 
  2412  070C                     	;# 
  2413  070D                     	;# 
  2414  070E                     	;# 
  2415  070F                     	;# 
  2416  0710                     	;# 
  2417  0711                     	;# 
  2418  0712                     	;# 
  2419  0713                     	;# 
  2420  0714                     	;# 
  2421  0716                     	;# 
  2422  0717                     	;# 
  2423  0718                     	;# 
  2424  0719                     	;# 
  2425  071A                     	;# 
  2426  071B                     	;# 
  2427  071C                     	;# 
  2428  071D                     	;# 
  2429  071E                     	;# 
  2430  0796                     	;# 
  2431  0797                     	;# 
  2432  0798                     	;# 
  2433  0799                     	;# 
  2434  079A                     	;# 
  2435  079B                     	;# 
  2436  080C                     	;# 
  2437  080D                     	;# 
  2438  080E                     	;# 
  2439  080F                     	;# 
  2440  0810                     	;# 
  2441  0811                     	;# 
  2442  0812                     	;# 
  2443  0813                     	;# 
  2444  0814                     	;# 
  2445  081A                     	;# 
  2446  081B                     	;# 
  2447  081C                     	;# 
  2448  081D                     	;# 
  2449  081E                     	;# 
  2450  081F                     	;# 
  2451  088C                     	;# 
  2452  088D                     	;# 
  2453  088E                     	;# 
  2454  088F                     	;# 
  2455  0890                     	;# 
  2456  0891                     	;# 
  2457  0892                     	;# 
  2458  0893                     	;# 
  2459  0895                     	;# 
  2460  0896                     	;# 
  2461  0897                     	;# 
  2462  0898                     	;# 
  2463  0899                     	;# 
  2464  089A                     	;# 
  2465  089B                     	;# 
  2466  090C                     	;# 
  2467  090E                     	;# 
  2468  090F                     	;# 
  2469  091F                     	;# 
  2470  091F                     	;# 
  2471  098F                     	;# 
  2472  098F                     	;# 
  2473  0990                     	;# 
  2474  0991                     	;# 
  2475  0992                     	;# 
  2476  0993                     	;# 
  2477  0994                     	;# 
  2478  0995                     	;# 
  2479  0996                     	;# 
  2480  0997                     	;# 
  2481  0E0F                     	;# 
  2482  0E10                     	;# 
  2483  0E11                     	;# 
  2484  0E12                     	;# 
  2485  0E13                     	;# 
  2486  0E14                     	;# 
  2487  0E15                     	;# 
  2488  0E16                     	;# 
  2489  0E17                     	;# 
  2490  0E18                     	;# 
  2491  0E19                     	;# 
  2492  0E1A                     	;# 
  2493  0E1B                     	;# 
  2494  0E1C                     	;# 
  2495  0E1D                     	;# 
  2496  0E1E                     	;# 
  2497  0E1F                     	;# 
  2498  0E20                     	;# 
  2499  0E21                     	;# 
  2500  0E22                     	;# 
  2501  0E23                     	;# 
  2502  0E24                     	;# 
  2503  0E25                     	;# 
  2504  0E26                     	;# 
  2505  0E27                     	;# 
  2506  0E28                     	;# 
  2507  0E29                     	;# 
  2508  0E2A                     	;# 
  2509  0E2B                     	;# 
  2510  0E2C                     	;# 
  2511  0E2D                     	;# 
  2512  0E2E                     	;# 
  2513  0E2F                     	;# 
  2514  0E30                     	;# 
  2515  0E31                     	;# 
  2516  0E32                     	;# 
  2517  0E33                     	;# 
  2518  0E34                     	;# 
  2519  0E35                     	;# 
  2520  0E36                     	;# 
  2521  0E37                     	;# 
  2522  0E8F                     	;# 
  2523  0E90                     	;# 
  2524  0E91                     	;# 
  2525  0E92                     	;# 
  2526  0E93                     	;# 
  2527  0E94                     	;# 
  2528  0E95                     	;# 
  2529  0E96                     	;# 
  2530  0E97                     	;# 
  2531  0E9C                     	;# 
  2532  0E9D                     	;# 
  2533  0E9E                     	;# 
  2534  0EA1                     	;# 
  2535  0EA2                     	;# 
  2536  0EA3                     	;# 
  2537  0EA4                     	;# 
  2538  0EA5                     	;# 
  2539  0EA9                     	;# 
  2540  0EAA                     	;# 
  2541  0EAB                     	;# 
  2542  0EAC                     	;# 
  2543  0EB1                     	;# 
  2544  0EB2                     	;# 
  2545  0EB3                     	;# 
  2546  0EB8                     	;# 
  2547  0EB9                     	;# 
  2548  0EBA                     	;# 
  2549  0EBB                     	;# 
  2550  0EBC                     	;# 
  2551  0EBD                     	;# 
  2552  0EBE                     	;# 
  2553  0EC3                     	;# 
  2554  0EC5                     	;# 
  2555  0EC6                     	;# 
  2556  0EC7                     	;# 
  2557  0EC8                     	;# 
  2558  0EC9                     	;# 
  2559  0ECA                     	;# 
  2560  0ECB                     	;# 
  2561  0ECC                     	;# 
  2562  0F10                     	;# 
  2563  0F11                     	;# 
  2564  0F12                     	;# 
  2565  0F13                     	;# 
  2566  0F14                     	;# 
  2567  0F15                     	;# 
  2568  0F16                     	;# 
  2569  0F17                     	;# 
  2570  0F18                     	;# 
  2571  0F19                     	;# 
  2572  0F1A                     	;# 
  2573  0F1B                     	;# 
  2574  0F1C                     	;# 
  2575  0F1D                     	;# 
  2576  0F1E                     	;# 
  2577  0F1F                     	;# 
  2578  0F20                     	;# 
  2579  0F21                     	;# 
  2580  0F22                     	;# 
  2581  0F23                     	;# 
  2582  0F24                     	;# 
  2583  0F25                     	;# 
  2584  0F26                     	;# 
  2585  0F27                     	;# 
  2586  0F38                     	;# 
  2587  0F39                     	;# 
  2588  0F3A                     	;# 
  2589  0F3B                     	;# 
  2590  0F3C                     	;# 
  2591  0F3D                     	;# 
  2592  0F3E                     	;# 
  2593  0F3F                     	;# 
  2594  0F40                     	;# 
  2595  0F41                     	;# 
  2596  0F43                     	;# 
  2597  0F44                     	;# 
  2598  0F45                     	;# 
  2599  0F46                     	;# 
  2600  0F47                     	;# 
  2601  0F48                     	;# 
  2602  0F49                     	;# 
  2603  0F4A                     	;# 
  2604  0F4B                     	;# 
  2605  0F4C                     	;# 
  2606  0F4E                     	;# 
  2607  0F4F                     	;# 
  2608  0F50                     	;# 
  2609  0F51                     	;# 
  2610  0F52                     	;# 
  2611  0F53                     	;# 
  2612  0F54                     	;# 
  2613  0F55                     	;# 
  2614  0F56                     	;# 
  2615  0F57                     	;# 
  2616  0F65                     	;# 
  2617  0F68                     	;# 
  2618  0F69                     	;# 
  2619  0F6A                     	;# 
  2620  0F6B                     	;# 
  2621  0FE4                     	;# 
  2622  0FE5                     	;# 
  2623  0FE6                     	;# 
  2624  0FE7                     	;# 
  2625  0FE8                     	;# 
  2626  0FE9                     	;# 
  2627  0FEA                     	;# 
  2628  0FEB                     	;# 
  2629  0FED                     	;# 
  2630  0FEE                     	;# 
  2631  0FEF                     	;# 
  2632  0000                     	;# 
  2633  0001                     	;# 
  2634  0002                     	;# 
  2635  0003                     	;# 
  2636  0004                     	;# 
  2637  0005                     	;# 
  2638  0006                     	;# 
  2639  0007                     	;# 
  2640  0008                     	;# 
  2641  0009                     	;# 
  2642  000A                     	;# 
  2643  000B                     	;# 
  2644  000C                     	;# 
  2645  000D                     	;# 
  2646  000E                     	;# 
  2647  0010                     	;# 
  2648  0011                     	;# 
  2649  0012                     	;# 
  2650  0013                     	;# 
  2651  0016                     	;# 
  2652  0017                     	;# 
  2653  0018                     	;# 
  2654  001C                     	;# 
  2655  001C                     	;# 
  2656  001D                     	;# 
  2657  001D                     	;# 
  2658  001E                     	;# 
  2659  001F                     	;# 
  2660  008C                     	;# 
  2661  008C                     	;# 
  2662  008D                     	;# 
  2663  008E                     	;# 
  2664  008E                     	;# 
  2665  008F                     	;# 
  2666  0090                     	;# 
  2667  0090                     	;# 
  2668  0091                     	;# 
  2669  0093                     	;# 
  2670  0094                     	;# 
  2671  0095                     	;# 
  2672  0096                     	;# 
  2673  0097                     	;# 
  2674  0098                     	;# 
  2675  0099                     	;# 
  2676  009A                     	;# 
  2677  009B                     	;# 
  2678  009C                     	;# 
  2679  009D                     	;# 
  2680  009E                     	;# 
  2681  010C                     	;# 
  2682  010D                     	;# 
  2683  010E                     	;# 
  2684  010E                     	;# 
  2685  010F                     	;# 
  2686  0110                     	;# 
  2687  0110                     	;# 
  2688  0111                     	;# 
  2689  0112                     	;# 
  2690  0112                     	;# 
  2691  0113                     	;# 
  2692  0114                     	;# 
  2693  0114                     	;# 
  2694  0115                     	;# 
  2695  0116                     	;# 
  2696  0116                     	;# 
  2697  0117                     	;# 
  2698  0119                     	;# 
  2699  0119                     	;# 
  2700  0119                     	;# 
  2701  011A                     	;# 
  2702  011A                     	;# 
  2703  011A                     	;# 
  2704  011B                     	;# 
  2705  011B                     	;# 
  2706  011B                     	;# 
  2707  011B                     	;# 
  2708  011B                     	;# 
  2709  011C                     	;# 
  2710  011C                     	;# 
  2711  011C                     	;# 
  2712  011D                     	;# 
  2713  011D                     	;# 
  2714  011D                     	;# 
  2715  011E                     	;# 
  2716  011E                     	;# 
  2717  011E                     	;# 
  2718  011F                     	;# 
  2719  011F                     	;# 
  2720  011F                     	;# 
  2721  011F                     	;# 
  2722  011F                     	;# 
  2723  018C                     	;# 
  2724  018D                     	;# 
  2725  018E                     	;# 
  2726  018F                     	;# 
  2727  0190                     	;# 
  2728  0191                     	;# 
  2729  0192                     	;# 
  2730  0196                     	;# 
  2731  0197                     	;# 
  2732  0198                     	;# 
  2733  0199                     	;# 
  2734  019A                     	;# 
  2735  019B                     	;# 
  2736  019C                     	;# 
  2737  020C                     	;# 
  2738  020D                     	;# 
  2739  020E                     	;# 
  2740  020F                     	;# 
  2741  020F                     	;# 
  2742  0210                     	;# 
  2743  0210                     	;# 
  2744  0211                     	;# 
  2745  0211                     	;# 
  2746  0212                     	;# 
  2747  0213                     	;# 
  2748  0214                     	;# 
  2749  0215                     	;# 
  2750  0215                     	;# 
  2751  0216                     	;# 
  2752  0216                     	;# 
  2753  0217                     	;# 
  2754  0217                     	;# 
  2755  0218                     	;# 
  2756  0219                     	;# 
  2757  021A                     	;# 
  2758  021B                     	;# 
  2759  021B                     	;# 
  2760  021C                     	;# 
  2761  021C                     	;# 
  2762  021D                     	;# 
  2763  021D                     	;# 
  2764  021E                     	;# 
  2765  021F                     	;# 
  2766  028C                     	;# 
  2767  028C                     	;# 
  2768  028D                     	;# 
  2769  028D                     	;# 
  2770  028E                     	;# 
  2771  028F                     	;# 
  2772  0290                     	;# 
  2773  0290                     	;# 
  2774  0291                     	;# 
  2775  0292                     	;# 
  2776  0292                     	;# 
  2777  0293                     	;# 
  2778  0293                     	;# 
  2779  0294                     	;# 
  2780  0295                     	;# 
  2781  0296                     	;# 
  2782  0296                     	;# 
  2783  0297                     	;# 
  2784  0298                     	;# 
  2785  0298                     	;# 
  2786  0299                     	;# 
  2787  0299                     	;# 
  2788  029A                     	;# 
  2789  029B                     	;# 
  2790  029C                     	;# 
  2791  029C                     	;# 
  2792  029D                     	;# 
  2793  030C                     	;# 
  2794  030C                     	;# 
  2795  030D                     	;# 
  2796  030E                     	;# 
  2797  030F                     	;# 
  2798  0310                     	;# 
  2799  0310                     	;# 
  2800  0311                     	;# 
  2801  0312                     	;# 
  2802  0313                     	;# 
  2803  0314                     	;# 
  2804  0314                     	;# 
  2805  0315                     	;# 
  2806  0316                     	;# 
  2807  0317                     	;# 
  2808  0318                     	;# 
  2809  0318                     	;# 
  2810  0319                     	;# 
  2811  031A                     	;# 
  2812  031B                     	;# 
  2813  031C                     	;# 
  2814  031C                     	;# 
  2815  031D                     	;# 
  2816  031E                     	;# 
  2817  031F                     	;# 
  2818  038C                     	;# 
  2819  038D                     	;# 
  2820  038E                     	;# 
  2821  0390                     	;# 
  2822  0391                     	;# 
  2823  0392                     	;# 
  2824  040C                     	;# 
  2825  040D                     	;# 
  2826  040E                     	;# 
  2827  040F                     	;# 
  2828  0410                     	;# 
  2829  0411                     	;# 
  2830  0416                     	;# 
  2831  0416                     	;# 
  2832  0417                     	;# 
  2833  0418                     	;# 
  2834  0418                     	;# 
  2835  0419                     	;# 
  2836  041A                     	;# 
  2837  041A                     	;# 
  2838  041B                     	;# 
  2839  041C                     	;# 
  2840  041C                     	;# 
  2841  041D                     	;# 
  2842  041E                     	;# 
  2843  041F                     	;# 
  2844  048C                     	;# 
  2845  048C                     	;# 
  2846  048D                     	;# 
  2847  048E                     	;# 
  2848  048F                     	;# 
  2849  048F                     	;# 
  2850  0490                     	;# 
  2851  0491                     	;# 
  2852  0492                     	;# 
  2853  0492                     	;# 
  2854  0493                     	;# 
  2855  0494                     	;# 
  2856  0495                     	;# 
  2857  0495                     	;# 
  2858  0496                     	;# 
  2859  0497                     	;# 
  2860  0498                     	;# 
  2861  0499                     	;# 
  2862  049A                     	;# 
  2863  049B                     	;# 
  2864  049C                     	;# 
  2865  049D                     	;# 
  2866  050C                     	;# 
  2867  050C                     	;# 
  2868  050D                     	;# 
  2869  050E                     	;# 
  2870  050F                     	;# 
  2871  050F                     	;# 
  2872  0510                     	;# 
  2873  0511                     	;# 
  2874  0512                     	;# 
  2875  0512                     	;# 
  2876  0513                     	;# 
  2877  0514                     	;# 
  2878  0515                     	;# 
  2879  0515                     	;# 
  2880  0516                     	;# 
  2881  0517                     	;# 
  2882  0518                     	;# 
  2883  0519                     	;# 
  2884  051A                     	;# 
  2885  051B                     	;# 
  2886  051C                     	;# 
  2887  051D                     	;# 
  2888  058C                     	;# 
  2889  058C                     	;# 
  2890  058D                     	;# 
  2891  058E                     	;# 
  2892  058F                     	;# 
  2893  058F                     	;# 
  2894  0590                     	;# 
  2895  0591                     	;# 
  2896  0592                     	;# 
  2897  0593                     	;# 
  2898  060C                     	;# 
  2899  060D                     	;# 
  2900  060E                     	;# 
  2901  060F                     	;# 
  2902  0610                     	;# 
  2903  0611                     	;# 
  2904  0612                     	;# 
  2905  0613                     	;# 
  2906  0614                     	;# 
  2907  0616                     	;# 
  2908  0617                     	;# 
  2909  0618                     	;# 
  2910  0619                     	;# 
  2911  061A                     	;# 
  2912  061B                     	;# 
  2913  061C                     	;# 
  2914  061D                     	;# 
  2915  061E                     	;# 
  2916  068C                     	;# 
  2917  068D                     	;# 
  2918  068E                     	;# 
  2919  068F                     	;# 
  2920  0690                     	;# 
  2921  0691                     	;# 
  2922  0692                     	;# 
  2923  0693                     	;# 
  2924  0694                     	;# 
  2925  070C                     	;# 
  2926  070D                     	;# 
  2927  070E                     	;# 
  2928  070F                     	;# 
  2929  0710                     	;# 
  2930  0711                     	;# 
  2931  0712                     	;# 
  2932  0713                     	;# 
  2933  0714                     	;# 
  2934  0716                     	;# 
  2935  0717                     	;# 
  2936  0718                     	;# 
  2937  0719                     	;# 
  2938  071A                     	;# 
  2939  071B                     	;# 
  2940  071C                     	;# 
  2941  071D                     	;# 
  2942  071E                     	;# 
  2943  0796                     	;# 
  2944  0797                     	;# 
  2945  0798                     	;# 
  2946  0799                     	;# 
  2947  079A                     	;# 
  2948  079B                     	;# 
  2949  080C                     	;# 
  2950  080D                     	;# 
  2951  080E                     	;# 
  2952  080F                     	;# 
  2953  0810                     	;# 
  2954  0811                     	;# 
  2955  0812                     	;# 
  2956  0813                     	;# 
  2957  0814                     	;# 
  2958  081A                     	;# 
  2959  081B                     	;# 
  2960  081C                     	;# 
  2961  081D                     	;# 
  2962  081E                     	;# 
  2963  081F                     	;# 
  2964  088C                     	;# 
  2965  088D                     	;# 
  2966  088E                     	;# 
  2967  088F                     	;# 
  2968  0890                     	;# 
  2969  0891                     	;# 
  2970  0892                     	;# 
  2971  0893                     	;# 
  2972  0895                     	;# 
  2973  0896                     	;# 
  2974  0897                     	;# 
  2975  0898                     	;# 
  2976  0899                     	;# 
  2977  089A                     	;# 
  2978  089B                     	;# 
  2979  090C                     	;# 
  2980  090E                     	;# 
  2981  090F                     	;# 
  2982  091F                     	;# 
  2983  091F                     	;# 
  2984  098F                     	;# 
  2985  098F                     	;# 
  2986  0990                     	;# 
  2987  0991                     	;# 
  2988  0992                     	;# 
  2989  0993                     	;# 
  2990  0994                     	;# 
  2991  0995                     	;# 
  2992  0996                     	;# 
  2993  0997                     	;# 
  2994  0E0F                     	;# 
  2995  0E10                     	;# 
  2996  0E11                     	;# 
  2997  0E12                     	;# 
  2998  0E13                     	;# 
  2999  0E14                     	;# 
  3000  0E15                     	;# 
  3001  0E16                     	;# 
  3002  0E17                     	;# 
  3003  0E18                     	;# 
  3004  0E19                     	;# 
  3005  0E1A                     	;# 
  3006  0E1B                     	;# 
  3007  0E1C                     	;# 
  3008  0E1D                     	;# 
  3009  0E1E                     	;# 
  3010  0E1F                     	;# 
  3011  0E20                     	;# 
  3012  0E21                     	;# 
  3013  0E22                     	;# 
  3014  0E23                     	;# 
  3015  0E24                     	;# 
  3016  0E25                     	;# 
  3017  0E26                     	;# 
  3018  0E27                     	;# 
  3019  0E28                     	;# 
  3020  0E29                     	;# 
  3021  0E2A                     	;# 
  3022  0E2B                     	;# 
  3023  0E2C                     	;# 
  3024  0E2D                     	;# 
  3025  0E2E                     	;# 
  3026  0E2F                     	;# 
  3027  0E30                     	;# 
  3028  0E31                     	;# 
  3029  0E32                     	;# 
  3030  0E33                     	;# 
  3031  0E34                     	;# 
  3032  0E35                     	;# 
  3033  0E36                     	;# 
  3034  0E37                     	;# 
  3035  0E8F                     	;# 
  3036  0E90                     	;# 
  3037  0E91                     	;# 
  3038  0E92                     	;# 
  3039  0E93                     	;# 
  3040  0E94                     	;# 
  3041  0E95                     	;# 
  3042  0E96                     	;# 
  3043  0E97                     	;# 
  3044  0E9C                     	;# 
  3045  0E9D                     	;# 
  3046  0E9E                     	;# 
  3047  0EA1                     	;# 
  3048  0EA2                     	;# 
  3049  0EA3                     	;# 
  3050  0EA4                     	;# 
  3051  0EA5                     	;# 
  3052  0EA9                     	;# 
  3053  0EAA                     	;# 
  3054  0EAB                     	;# 
  3055  0EAC                     	;# 
  3056  0EB1                     	;# 
  3057  0EB2                     	;# 
  3058  0EB3                     	;# 
  3059  0EB8                     	;# 
  3060  0EB9                     	;# 
  3061  0EBA                     	;# 
  3062  0EBB                     	;# 
  3063  0EBC                     	;# 
  3064  0EBD                     	;# 
  3065  0EBE                     	;# 
  3066  0EC3                     	;# 
  3067  0EC5                     	;# 
  3068  0EC6                     	;# 
  3069  0EC7                     	;# 
  3070  0EC8                     	;# 
  3071  0EC9                     	;# 
  3072  0ECA                     	;# 
  3073  0ECB                     	;# 
  3074  0ECC                     	;# 
  3075  0F10                     	;# 
  3076  0F11                     	;# 
  3077  0F12                     	;# 
  3078  0F13                     	;# 
  3079  0F14                     	;# 
  3080  0F15                     	;# 
  3081  0F16                     	;# 
  3082  0F17                     	;# 
  3083  0F18                     	;# 
  3084  0F19                     	;# 
  3085  0F1A                     	;# 
  3086  0F1B                     	;# 
  3087  0F1C                     	;# 
  3088  0F1D                     	;# 
  3089  0F1E                     	;# 
  3090  0F1F                     	;# 
  3091  0F20                     	;# 
  3092  0F21                     	;# 
  3093  0F22                     	;# 
  3094  0F23                     	;# 
  3095  0F24                     	;# 
  3096  0F25                     	;# 
  3097  0F26                     	;# 
  3098  0F27                     	;# 
  3099  0F38                     	;# 
  3100  0F39                     	;# 
  3101  0F3A                     	;# 
  3102  0F3B                     	;# 
  3103  0F3C                     	;# 
  3104  0F3D                     	;# 
  3105  0F3E                     	;# 
  3106  0F3F                     	;# 
  3107  0F40                     	;# 
  3108  0F41                     	;# 
  3109  0F43                     	;# 
  3110  0F44                     	;# 
  3111  0F45                     	;# 
  3112  0F46                     	;# 
  3113  0F47                     	;# 
  3114  0F48                     	;# 
  3115  0F49                     	;# 
  3116  0F4A                     	;# 
  3117  0F4B                     	;# 
  3118  0F4C                     	;# 
  3119  0F4E                     	;# 
  3120  0F4F                     	;# 
  3121  0F50                     	;# 
  3122  0F51                     	;# 
  3123  0F52                     	;# 
  3124  0F53                     	;# 
  3125  0F54                     	;# 
  3126  0F55                     	;# 
  3127  0F56                     	;# 
  3128  0F57                     	;# 
  3129  0F65                     	;# 
  3130  0F68                     	;# 
  3131  0F69                     	;# 
  3132  0F6A                     	;# 
  3133  0F6B                     	;# 
  3134  0FE4                     	;# 
  3135  0FE5                     	;# 
  3136  0FE6                     	;# 
  3137  0FE7                     	;# 
  3138  0FE8                     	;# 
  3139  0FE9                     	;# 
  3140  0FEA                     	;# 
  3141  0FEB                     	;# 
  3142  0FED                     	;# 
  3143  0FEE                     	;# 
  3144  0FEF                     	;# 
  3145  0000                     	;# 
  3146  0001                     	;# 
  3147  0002                     	;# 
  3148  0003                     	;# 
  3149  0004                     	;# 
  3150  0005                     	;# 
  3151  0006                     	;# 
  3152  0007                     	;# 
  3153  0008                     	;# 
  3154  0009                     	;# 
  3155  000A                     	;# 
  3156  000B                     	;# 
  3157  000C                     	;# 
  3158  000D                     	;# 
  3159  000E                     	;# 
  3160  0010                     	;# 
  3161  0011                     	;# 
  3162  0012                     	;# 
  3163  0013                     	;# 
  3164  0016                     	;# 
  3165  0017                     	;# 
  3166  0018                     	;# 
  3167  001C                     	;# 
  3168  001C                     	;# 
  3169  001D                     	;# 
  3170  001D                     	;# 
  3171  001E                     	;# 
  3172  001F                     	;# 
  3173  008C                     	;# 
  3174  008C                     	;# 
  3175  008D                     	;# 
  3176  008E                     	;# 
  3177  008E                     	;# 
  3178  008F                     	;# 
  3179  0090                     	;# 
  3180  0090                     	;# 
  3181  0091                     	;# 
  3182  0093                     	;# 
  3183  0094                     	;# 
  3184  0095                     	;# 
  3185  0096                     	;# 
  3186  0097                     	;# 
  3187  0098                     	;# 
  3188  0099                     	;# 
  3189  009A                     	;# 
  3190  009B                     	;# 
  3191  009C                     	;# 
  3192  009D                     	;# 
  3193  009E                     	;# 
  3194  010C                     	;# 
  3195  010D                     	;# 
  3196  010E                     	;# 
  3197  010E                     	;# 
  3198  010F                     	;# 
  3199  0110                     	;# 
  3200  0110                     	;# 
  3201  0111                     	;# 
  3202  0112                     	;# 
  3203  0112                     	;# 
  3204  0113                     	;# 
  3205  0114                     	;# 
  3206  0114                     	;# 
  3207  0115                     	;# 
  3208  0116                     	;# 
  3209  0116                     	;# 
  3210  0117                     	;# 
  3211  0119                     	;# 
  3212  0119                     	;# 
  3213  0119                     	;# 
  3214  011A                     	;# 
  3215  011A                     	;# 
  3216  011A                     	;# 
  3217  011B                     	;# 
  3218  011B                     	;# 
  3219  011B                     	;# 
  3220  011B                     	;# 
  3221  011B                     	;# 
  3222  011C                     	;# 
  3223  011C                     	;# 
  3224  011C                     	;# 
  3225  011D                     	;# 
  3226  011D                     	;# 
  3227  011D                     	;# 
  3228  011E                     	;# 
  3229  011E                     	;# 
  3230  011E                     	;# 
  3231  011F                     	;# 
  3232  011F                     	;# 
  3233  011F                     	;# 
  3234  011F                     	;# 
  3235  011F                     	;# 
  3236  018C                     	;# 
  3237  018D                     	;# 
  3238  018E                     	;# 
  3239  018F                     	;# 
  3240  0190                     	;# 
  3241  0191                     	;# 
  3242  0192                     	;# 
  3243  0196                     	;# 
  3244  0197                     	;# 
  3245  0198                     	;# 
  3246  0199                     	;# 
  3247  019A                     	;# 
  3248  019B                     	;# 
  3249  019C                     	;# 
  3250  020C                     	;# 
  3251  020D                     	;# 
  3252  020E                     	;# 
  3253  020F                     	;# 
  3254  020F                     	;# 
  3255  0210                     	;# 
  3256  0210                     	;# 
  3257  0211                     	;# 
  3258  0211                     	;# 
  3259  0212                     	;# 
  3260  0213                     	;# 
  3261  0214                     	;# 
  3262  0215                     	;# 
  3263  0215                     	;# 
  3264  0216                     	;# 
  3265  0216                     	;# 
  3266  0217                     	;# 
  3267  0217                     	;# 
  3268  0218                     	;# 
  3269  0219                     	;# 
  3270  021A                     	;# 
  3271  021B                     	;# 
  3272  021B                     	;# 
  3273  021C                     	;# 
  3274  021C                     	;# 
  3275  021D                     	;# 
  3276  021D                     	;# 
  3277  021E                     	;# 
  3278  021F                     	;# 
  3279  028C                     	;# 
  3280  028C                     	;# 
  3281  028D                     	;# 
  3282  028D                     	;# 
  3283  028E                     	;# 
  3284  028F                     	;# 
  3285  0290                     	;# 
  3286  0290                     	;# 
  3287  0291                     	;# 
  3288  0292                     	;# 
  3289  0292                     	;# 
  3290  0293                     	;# 
  3291  0293                     	;# 
  3292  0294                     	;# 
  3293  0295                     	;# 
  3294  0296                     	;# 
  3295  0296                     	;# 
  3296  0297                     	;# 
  3297  0298                     	;# 
  3298  0298                     	;# 
  3299  0299                     	;# 
  3300  0299                     	;# 
  3301  029A                     	;# 
  3302  029B                     	;# 
  3303  029C                     	;# 
  3304  029C                     	;# 
  3305  029D                     	;# 
  3306  030C                     	;# 
  3307  030C                     	;# 
  3308  030D                     	;# 
  3309  030E                     	;# 
  3310  030F                     	;# 
  3311  0310                     	;# 
  3312  0310                     	;# 
  3313  0311                     	;# 
  3314  0312                     	;# 
  3315  0313                     	;# 
  3316  0314                     	;# 
  3317  0314                     	;# 
  3318  0315                     	;# 
  3319  0316                     	;# 
  3320  0317                     	;# 
  3321  0318                     	;# 
  3322  0318                     	;# 
  3323  0319                     	;# 
  3324  031A                     	;# 
  3325  031B                     	;# 
  3326  031C                     	;# 
  3327  031C                     	;# 
  3328  031D                     	;# 
  3329  031E                     	;# 
  3330  031F                     	;# 
  3331  038C                     	;# 
  3332  038D                     	;# 
  3333  038E                     	;# 
  3334  0390                     	;# 
  3335  0391                     	;# 
  3336  0392                     	;# 
  3337  040C                     	;# 
  3338  040D                     	;# 
  3339  040E                     	;# 
  3340  040F                     	;# 
  3341  0410                     	;# 
  3342  0411                     	;# 
  3343  0416                     	;# 
  3344  0416                     	;# 
  3345  0417                     	;# 
  3346  0418                     	;# 
  3347  0418                     	;# 
  3348  0419                     	;# 
  3349  041A                     	;# 
  3350  041A                     	;# 
  3351  041B                     	;# 
  3352  041C                     	;# 
  3353  041C                     	;# 
  3354  041D                     	;# 
  3355  041E                     	;# 
  3356  041F                     	;# 
  3357  048C                     	;# 
  3358  048C                     	;# 
  3359  048D                     	;# 
  3360  048E                     	;# 
  3361  048F                     	;# 
  3362  048F                     	;# 
  3363  0490                     	;# 
  3364  0491                     	;# 
  3365  0492                     	;# 
  3366  0492                     	;# 
  3367  0493                     	;# 
  3368  0494                     	;# 
  3369  0495                     	;# 
  3370  0495                     	;# 
  3371  0496                     	;# 
  3372  0497                     	;# 
  3373  0498                     	;# 
  3374  0499                     	;# 
  3375  049A                     	;# 
  3376  049B                     	;# 
  3377  049C                     	;# 
  3378  049D                     	;# 
  3379  050C                     	;# 
  3380  050C                     	;# 
  3381  050D                     	;# 
  3382  050E                     	;# 
  3383  050F                     	;# 
  3384  050F                     	;# 
  3385  0510                     	;# 
  3386  0511                     	;# 
  3387  0512                     	;# 
  3388  0512                     	;# 
  3389  0513                     	;# 
  3390  0514                     	;# 
  3391  0515                     	;# 
  3392  0515                     	;# 
  3393  0516                     	;# 
  3394  0517                     	;# 
  3395  0518                     	;# 
  3396  0519                     	;# 
  3397  051A                     	;# 
  3398  051B                     	;# 
  3399  051C                     	;# 
  3400  051D                     	;# 
  3401  058C                     	;# 
  3402  058C                     	;# 
  3403  058D                     	;# 
  3404  058E                     	;# 
  3405  058F                     	;# 
  3406  058F                     	;# 
  3407  0590                     	;# 
  3408  0591                     	;# 
  3409  0592                     	;# 
  3410  0593                     	;# 
  3411  060C                     	;# 
  3412  060D                     	;# 
  3413  060E                     	;# 
  3414  060F                     	;# 
  3415  0610                     	;# 
  3416  0611                     	;# 
  3417  0612                     	;# 
  3418  0613                     	;# 
  3419  0614                     	;# 
  3420  0616                     	;# 
  3421  0617                     	;# 
  3422  0618                     	;# 
  3423  0619                     	;# 
  3424  061A                     	;# 
  3425  061B                     	;# 
  3426  061C                     	;# 
  3427  061D                     	;# 
  3428  061E                     	;# 
  3429  068C                     	;# 
  3430  068D                     	;# 
  3431  068E                     	;# 
  3432  068F                     	;# 
  3433  0690                     	;# 
  3434  0691                     	;# 
  3435  0692                     	;# 
  3436  0693                     	;# 
  3437  0694                     	;# 
  3438  070C                     	;# 
  3439  070D                     	;# 
  3440  070E                     	;# 
  3441  070F                     	;# 
  3442  0710                     	;# 
  3443  0711                     	;# 
  3444  0712                     	;# 
  3445  0713                     	;# 
  3446  0714                     	;# 
  3447  0716                     	;# 
  3448  0717                     	;# 
  3449  0718                     	;# 
  3450  0719                     	;# 
  3451  071A                     	;# 
  3452  071B                     	;# 
  3453  071C                     	;# 
  3454  071D                     	;# 
  3455  071E                     	;# 
  3456  0796                     	;# 
  3457  0797                     	;# 
  3458  0798                     	;# 
  3459  0799                     	;# 
  3460  079A                     	;# 
  3461  079B                     	;# 
  3462  080C                     	;# 
  3463  080D                     	;# 
  3464  080E                     	;# 
  3465  080F                     	;# 
  3466  0810                     	;# 
  3467  0811                     	;# 
  3468  0812                     	;# 
  3469  0813                     	;# 
  3470  0814                     	;# 
  3471  081A                     	;# 
  3472  081B                     	;# 
  3473  081C                     	;# 
  3474  081D                     	;# 
  3475  081E                     	;# 
  3476  081F                     	;# 
  3477  088C                     	;# 
  3478  088D                     	;# 
  3479  088E                     	;# 
  3480  088F                     	;# 
  3481  0890                     	;# 
  3482  0891                     	;# 
  3483  0892                     	;# 
  3484  0893                     	;# 
  3485  0895                     	;# 
  3486  0896                     	;# 
  3487  0897                     	;# 
  3488  0898                     	;# 
  3489  0899                     	;# 
  3490  089A                     	;# 
  3491  089B                     	;# 
  3492  090C                     	;# 
  3493  090E                     	;# 
  3494  090F                     	;# 
  3495  091F                     	;# 
  3496  091F                     	;# 
  3497  098F                     	;# 
  3498  098F                     	;# 
  3499  0990                     	;# 
  3500  0991                     	;# 
  3501  0992                     	;# 
  3502  0993                     	;# 
  3503  0994                     	;# 
  3504  0995                     	;# 
  3505  0996                     	;# 
  3506  0997                     	;# 
  3507  0E0F                     	;# 
  3508  0E10                     	;# 
  3509  0E11                     	;# 
  3510  0E12                     	;# 
  3511  0E13                     	;# 
  3512  0E14                     	;# 
  3513  0E15                     	;# 
  3514  0E16                     	;# 
  3515  0E17                     	;# 
  3516  0E18                     	;# 
  3517  0E19                     	;# 
  3518  0E1A                     	;# 
  3519  0E1B                     	;# 
  3520  0E1C                     	;# 
  3521  0E1D                     	;# 
  3522  0E1E                     	;# 
  3523  0E1F                     	;# 
  3524  0E20                     	;# 
  3525  0E21                     	;# 
  3526  0E22                     	;# 
  3527  0E23                     	;# 
  3528  0E24                     	;# 
  3529  0E25                     	;# 
  3530  0E26                     	;# 
  3531  0E27                     	;# 
  3532  0E28                     	;# 
  3533  0E29                     	;# 
  3534  0E2A                     	;# 
  3535  0E2B                     	;# 
  3536  0E2C                     	;# 
  3537  0E2D                     	;# 
  3538  0E2E                     	;# 
  3539  0E2F                     	;# 
  3540  0E30                     	;# 
  3541  0E31                     	;# 
  3542  0E32                     	;# 
  3543  0E33                     	;# 
  3544  0E34                     	;# 
  3545  0E35                     	;# 
  3546  0E36                     	;# 
  3547  0E37                     	;# 
  3548  0E8F                     	;# 
  3549  0E90                     	;# 
  3550  0E91                     	;# 
  3551  0E92                     	;# 
  3552  0E93                     	;# 
  3553  0E94                     	;# 
  3554  0E95                     	;# 
  3555  0E96                     	;# 
  3556  0E97                     	;# 
  3557  0E9C                     	;# 
  3558  0E9D                     	;# 
  3559  0E9E                     	;# 
  3560  0EA1                     	;# 
  3561  0EA2                     	;# 
  3562  0EA3                     	;# 
  3563  0EA4                     	;# 
  3564  0EA5                     	;# 
  3565  0EA9                     	;# 
  3566  0EAA                     	;# 
  3567  0EAB                     	;# 
  3568  0EAC                     	;# 
  3569  0EB1                     	;# 
  3570  0EB2                     	;# 
  3571  0EB3                     	;# 
  3572  0EB8                     	;# 
  3573  0EB9                     	;# 
  3574  0EBA                     	;# 
  3575  0EBB                     	;# 
  3576  0EBC                     	;# 
  3577  0EBD                     	;# 
  3578  0EBE                     	;# 
  3579  0EC3                     	;# 
  3580  0EC5                     	;# 
  3581  0EC6                     	;# 
  3582  0EC7                     	;# 
  3583  0EC8                     	;# 
  3584  0EC9                     	;# 
  3585  0ECA                     	;# 
  3586  0ECB                     	;# 
  3587  0ECC                     	;# 
  3588  0F10                     	;# 
  3589  0F11                     	;# 
  3590  0F12                     	;# 
  3591  0F13                     	;# 
  3592  0F14                     	;# 
  3593  0F15                     	;# 
  3594  0F16                     	;# 
  3595  0F17                     	;# 
  3596  0F18                     	;# 
  3597  0F19                     	;# 
  3598  0F1A                     	;# 
  3599  0F1B                     	;# 
  3600  0F1C                     	;# 
  3601  0F1D                     	;# 
  3602  0F1E                     	;# 
  3603  0F1F                     	;# 
  3604  0F20                     	;# 
  3605  0F21                     	;# 
  3606  0F22                     	;# 
  3607  0F23                     	;# 
  3608  0F24                     	;# 
  3609  0F25                     	;# 
  3610  0F26                     	;# 
  3611  0F27                     	;# 
  3612  0F38                     	;# 
  3613  0F39                     	;# 
  3614  0F3A                     	;# 
  3615  0F3B                     	;# 
  3616  0F3C                     	;# 
  3617  0F3D                     	;# 
  3618  0F3E                     	;# 
  3619  0F3F                     	;# 
  3620  0F40                     	;# 
  3621  0F41                     	;# 
  3622  0F43                     	;# 
  3623  0F44                     	;# 
  3624  0F45                     	;# 
  3625  0F46                     	;# 
  3626  0F47                     	;# 
  3627  0F48                     	;# 
  3628  0F49                     	;# 
  3629  0F4A                     	;# 
  3630  0F4B                     	;# 
  3631  0F4C                     	;# 
  3632  0F4E                     	;# 
  3633  0F4F                     	;# 
  3634  0F50                     	;# 
  3635  0F51                     	;# 
  3636  0F52                     	;# 
  3637  0F53                     	;# 
  3638  0F54                     	;# 
  3639  0F55                     	;# 
  3640  0F56                     	;# 
  3641  0F57                     	;# 
  3642  0F65                     	;# 
  3643  0F68                     	;# 
  3644  0F69                     	;# 
  3645  0F6A                     	;# 
  3646  0F6B                     	;# 
  3647  0FE4                     	;# 
  3648  0FE5                     	;# 
  3649  0FE6                     	;# 
  3650  0FE7                     	;# 
  3651  0FE8                     	;# 
  3652  0FE9                     	;# 
  3653  0FEA                     	;# 
  3654  0FEB                     	;# 
  3655  0FED                     	;# 
  3656  0FEE                     	;# 
  3657  0FEF                     	;# 
  3658  0000                     	;# 
  3659  0001                     	;# 
  3660  0002                     	;# 
  3661  0003                     	;# 
  3662  0004                     	;# 
  3663  0005                     	;# 
  3664  0006                     	;# 
  3665  0007                     	;# 
  3666  0008                     	;# 
  3667  0009                     	;# 
  3668  000A                     	;# 
  3669  000B                     	;# 
  3670  000C                     	;# 
  3671  000D                     	;# 
  3672  000E                     	;# 
  3673  0010                     	;# 
  3674  0011                     	;# 
  3675  0012                     	;# 
  3676  0013                     	;# 
  3677  0016                     	;# 
  3678  0017                     	;# 
  3679  0018                     	;# 
  3680  001C                     	;# 
  3681  001C                     	;# 
  3682  001D                     	;# 
  3683  001D                     	;# 
  3684  001E                     	;# 
  3685  001F                     	;# 
  3686  008C                     	;# 
  3687  008C                     	;# 
  3688  008D                     	;# 
  3689  008E                     	;# 
  3690  008E                     	;# 
  3691  008F                     	;# 
  3692  0090                     	;# 
  3693  0090                     	;# 
  3694  0091                     	;# 
  3695  0093                     	;# 
  3696  0094                     	;# 
  3697  0095                     	;# 
  3698  0096                     	;# 
  3699  0097                     	;# 
  3700  0098                     	;# 
  3701  0099                     	;# 
  3702  009A                     	;# 
  3703  009B                     	;# 
  3704  009C                     	;# 
  3705  009D                     	;# 
  3706  009E                     	;# 
  3707  010C                     	;# 
  3708  010D                     	;# 
  3709  010E                     	;# 
  3710  010E                     	;# 
  3711  010F                     	;# 
  3712  0110                     	;# 
  3713  0110                     	;# 
  3714  0111                     	;# 
  3715  0112                     	;# 
  3716  0112                     	;# 
  3717  0113                     	;# 
  3718  0114                     	;# 
  3719  0114                     	;# 
  3720  0115                     	;# 
  3721  0116                     	;# 
  3722  0116                     	;# 
  3723  0117                     	;# 
  3724  0119                     	;# 
  3725  0119                     	;# 
  3726  0119                     	;# 
  3727  011A                     	;# 
  3728  011A                     	;# 
  3729  011A                     	;# 
  3730  011B                     	;# 
  3731  011B                     	;# 
  3732  011B                     	;# 
  3733  011B                     	;# 
  3734  011B                     	;# 
  3735  011C                     	;# 
  3736  011C                     	;# 
  3737  011C                     	;# 
  3738  011D                     	;# 
  3739  011D                     	;# 
  3740  011D                     	;# 
  3741  011E                     	;# 
  3742  011E                     	;# 
  3743  011E                     	;# 
  3744  011F                     	;# 
  3745  011F                     	;# 
  3746  011F                     	;# 
  3747  011F                     	;# 
  3748  011F                     	;# 
  3749  018C                     	;# 
  3750  018D                     	;# 
  3751  018E                     	;# 
  3752  018F                     	;# 
  3753  0190                     	;# 
  3754  0191                     	;# 
  3755  0192                     	;# 
  3756  0196                     	;# 
  3757  0197                     	;# 
  3758  0198                     	;# 
  3759  0199                     	;# 
  3760  019A                     	;# 
  3761  019B                     	;# 
  3762  019C                     	;# 
  3763  020C                     	;# 
  3764  020D                     	;# 
  3765  020E                     	;# 
  3766  020F                     	;# 
  3767  020F                     	;# 
  3768  0210                     	;# 
  3769  0210                     	;# 
  3770  0211                     	;# 
  3771  0211                     	;# 
  3772  0212                     	;# 
  3773  0213                     	;# 
  3774  0214                     	;# 
  3775  0215                     	;# 
  3776  0215                     	;# 
  3777  0216                     	;# 
  3778  0216                     	;# 
  3779  0217                     	;# 
  3780  0217                     	;# 
  3781  0218                     	;# 
  3782  0219                     	;# 
  3783  021A                     	;# 
  3784  021B                     	;# 
  3785  021B                     	;# 
  3786  021C                     	;# 
  3787  021C                     	;# 
  3788  021D                     	;# 
  3789  021D                     	;# 
  3790  021E                     	;# 
  3791  021F                     	;# 
  3792  028C                     	;# 
  3793  028C                     	;# 
  3794  028D                     	;# 
  3795  028D                     	;# 
  3796  028E                     	;# 
  3797  028F                     	;# 
  3798  0290                     	;# 
  3799  0290                     	;# 
  3800  0291                     	;# 
  3801  0292                     	;# 
  3802  0292                     	;# 
  3803  0293                     	;# 
  3804  0293                     	;# 
  3805  0294                     	;# 
  3806  0295                     	;# 
  3807  0296                     	;# 
  3808  0296                     	;# 
  3809  0297                     	;# 
  3810  0298                     	;# 
  3811  0298                     	;# 
  3812  0299                     	;# 
  3813  0299                     	;# 
  3814  029A                     	;# 
  3815  029B                     	;# 
  3816  029C                     	;# 
  3817  029C                     	;# 
  3818  029D                     	;# 
  3819  030C                     	;# 
  3820  030C                     	;# 
  3821  030D                     	;# 
  3822  030E                     	;# 
  3823  030F                     	;# 
  3824  0310                     	;# 
  3825  0310                     	;# 
  3826  0311                     	;# 
  3827  0312                     	;# 
  3828  0313                     	;# 
  3829  0314                     	;# 
  3830  0314                     	;# 
  3831  0315                     	;# 
  3832  0316                     	;# 
  3833  0317                     	;# 
  3834  0318                     	;# 
  3835  0318                     	;# 
  3836  0319                     	;# 
  3837  031A                     	;# 
  3838  031B                     	;# 
  3839  031C                     	;# 
  3840  031C                     	;# 
  3841  031D                     	;# 
  3842  031E                     	;# 
  3843  031F                     	;# 
  3844  038C                     	;# 
  3845  038D                     	;# 
  3846  038E                     	;# 
  3847  0390                     	;# 
  3848  0391                     	;# 
  3849  0392                     	;# 
  3850  040C                     	;# 
  3851  040D                     	;# 
  3852  040E                     	;# 
  3853  040F                     	;# 
  3854  0410                     	;# 
  3855  0411                     	;# 
  3856  0416                     	;# 
  3857  0416                     	;# 
  3858  0417                     	;# 
  3859  0418                     	;# 
  3860  0418                     	;# 
  3861  0419                     	;# 
  3862  041A                     	;# 
  3863  041A                     	;# 
  3864  041B                     	;# 
  3865  041C                     	;# 
  3866  041C                     	;# 
  3867  041D                     	;# 
  3868  041E                     	;# 
  3869  041F                     	;# 
  3870  048C                     	;# 
  3871  048C                     	;# 
  3872  048D                     	;# 
  3873  048E                     	;# 
  3874  048F                     	;# 
  3875  048F                     	;# 
  3876  0490                     	;# 
  3877  0491                     	;# 
  3878  0492                     	;# 
  3879  0492                     	;# 
  3880  0493                     	;# 
  3881  0494                     	;# 
  3882  0495                     	;# 
  3883  0495                     	;# 
  3884  0496                     	;# 
  3885  0497                     	;# 
  3886  0498                     	;# 
  3887  0499                     	;# 
  3888  049A                     	;# 
  3889  049B                     	;# 
  3890  049C                     	;# 
  3891  049D                     	;# 
  3892  050C                     	;# 
  3893  050C                     	;# 
  3894  050D                     	;# 
  3895  050E                     	;# 
  3896  050F                     	;# 
  3897  050F                     	;# 
  3898  0510                     	;# 
  3899  0511                     	;# 
  3900  0512                     	;# 
  3901  0512                     	;# 
  3902  0513                     	;# 
  3903  0514                     	;# 
  3904  0515                     	;# 
  3905  0515                     	;# 
  3906  0516                     	;# 
  3907  0517                     	;# 
  3908  0518                     	;# 
  3909  0519                     	;# 
  3910  051A                     	;# 
  3911  051B                     	;# 
  3912  051C                     	;# 
  3913  051D                     	;# 
  3914  058C                     	;# 
  3915  058C                     	;# 
  3916  058D                     	;# 
  3917  058E                     	;# 
  3918  058F                     	;# 
  3919  058F                     	;# 
  3920  0590                     	;# 
  3921  0591                     	;# 
  3922  0592                     	;# 
  3923  0593                     	;# 
  3924  060C                     	;# 
  3925  060D                     	;# 
  3926  060E                     	;# 
  3927  060F                     	;# 
  3928  0610                     	;# 
  3929  0611                     	;# 
  3930  0612                     	;# 
  3931  0613                     	;# 
  3932  0614                     	;# 
  3933  0616                     	;# 
  3934  0617                     	;# 
  3935  0618                     	;# 
  3936  0619                     	;# 
  3937  061A                     	;# 
  3938  061B                     	;# 
  3939  061C                     	;# 
  3940  061D                     	;# 
  3941  061E                     	;# 
  3942  068C                     	;# 
  3943  068D                     	;# 
  3944  068E                     	;# 
  3945  068F                     	;# 
  3946  0690                     	;# 
  3947  0691                     	;# 
  3948  0692                     	;# 
  3949  0693                     	;# 
  3950  0694                     	;# 
  3951  070C                     	;# 
  3952  070D                     	;# 
  3953  070E                     	;# 
  3954  070F                     	;# 
  3955  0710                     	;# 
  3956  0711                     	;# 
  3957  0712                     	;# 
  3958  0713                     	;# 
  3959  0714                     	;# 
  3960  0716                     	;# 
  3961  0717                     	;# 
  3962  0718                     	;# 
  3963  0719                     	;# 
  3964  071A                     	;# 
  3965  071B                     	;# 
  3966  071C                     	;# 
  3967  071D                     	;# 
  3968  071E                     	;# 
  3969  0796                     	;# 
  3970  0797                     	;# 
  3971  0798                     	;# 
  3972  0799                     	;# 
  3973  079A                     	;# 
  3974  079B                     	;# 
  3975  080C                     	;# 
  3976  080D                     	;# 
  3977  080E                     	;# 
  3978  080F                     	;# 
  3979  0810                     	;# 
  3980  0811                     	;# 
  3981  0812                     	;# 
  3982  0813                     	;# 
  3983  0814                     	;# 
  3984  081A                     	;# 
  3985  081B                     	;# 
  3986  081C                     	;# 
  3987  081D                     	;# 
  3988  081E                     	;# 
  3989  081F                     	;# 
  3990  088C                     	;# 
  3991  088D                     	;# 
  3992  088E                     	;# 
  3993  088F                     	;# 
  3994  0890                     	;# 
  3995  0891                     	;# 
  3996  0892                     	;# 
  3997  0893                     	;# 
  3998  0895                     	;# 
  3999  0896                     	;# 
  4000  0897                     	;# 
  4001  0898                     	;# 
  4002  0899                     	;# 
  4003  089A                     	;# 
  4004  089B                     	;# 
  4005  090C                     	;# 
  4006  090E                     	;# 
  4007  090F                     	;# 
  4008  091F                     	;# 
  4009  091F                     	;# 
  4010  098F                     	;# 
  4011  098F                     	;# 
  4012  0990                     	;# 
  4013  0991                     	;# 
  4014  0992                     	;# 
  4015  0993                     	;# 
  4016  0994                     	;# 
  4017  0995                     	;# 
  4018  0996                     	;# 
  4019  0997                     	;# 
  4020  0E0F                     	;# 
  4021  0E10                     	;# 
  4022  0E11                     	;# 
  4023  0E12                     	;# 
  4024  0E13                     	;# 
  4025  0E14                     	;# 
  4026  0E15                     	;# 
  4027  0E16                     	;# 
  4028  0E17                     	;# 
  4029  0E18                     	;# 
  4030  0E19                     	;# 
  4031  0E1A                     	;# 
  4032  0E1B                     	;# 
  4033  0E1C                     	;# 
  4034  0E1D                     	;# 
  4035  0E1E                     	;# 
  4036  0E1F                     	;# 
  4037  0E20                     	;# 
  4038  0E21                     	;# 
  4039  0E22                     	;# 
  4040  0E23                     	;# 
  4041  0E24                     	;# 
  4042  0E25                     	;# 
  4043  0E26                     	;# 
  4044  0E27                     	;# 
  4045  0E28                     	;# 
  4046  0E29                     	;# 
  4047  0E2A                     	;# 
  4048  0E2B                     	;# 
  4049  0E2C                     	;# 
  4050  0E2D                     	;# 
  4051  0E2E                     	;# 
  4052  0E2F                     	;# 
  4053  0E30                     	;# 
  4054  0E31                     	;# 
  4055  0E32                     	;# 
  4056  0E33                     	;# 
  4057  0E34                     	;# 
  4058  0E35                     	;# 
  4059  0E36                     	;# 
  4060  0E37                     	;# 
  4061  0E8F                     	;# 
  4062  0E90                     	;# 
  4063  0E91                     	;# 
  4064  0E92                     	;# 
  4065  0E93                     	;# 
  4066  0E94                     	;# 
  4067  0E95                     	;# 
  4068  0E96                     	;# 
  4069  0E97                     	;# 
  4070  0E9C                     	;# 
  4071  0E9D                     	;# 
  4072  0E9E                     	;# 
  4073  0EA1                     	;# 
  4074  0EA2                     	;# 
  4075  0EA3                     	;# 
  4076  0EA4                     	;# 
  4077  0EA5                     	;# 
  4078  0EA9                     	;# 
  4079  0EAA                     	;# 
  4080  0EAB                     	;# 
  4081  0EAC                     	;# 
  4082  0EB1                     	;# 
  4083  0EB2                     	;# 
  4084  0EB3                     	;# 
  4085  0EB8                     	;# 
  4086  0EB9                     	;# 
  4087  0EBA                     	;# 
  4088  0EBB                     	;# 
  4089  0EBC                     	;# 
  4090  0EBD                     	;# 
  4091  0EBE                     	;# 
  4092  0EC3                     	;# 
  4093  0EC5                     	;# 
  4094  0EC6                     	;# 
  4095  0EC7                     	;# 
  4096  0EC8                     	;# 
  4097  0EC9                     	;# 
  4098  0ECA                     	;# 
  4099  0ECB                     	;# 
  4100  0ECC                     	;# 
  4101  0F10                     	;# 
  4102  0F11                     	;# 
  4103  0F12                     	;# 
  4104  0F13                     	;# 
  4105  0F14                     	;# 
  4106  0F15                     	;# 
  4107  0F16                     	;# 
  4108  0F17                     	;# 
  4109  0F18                     	;# 
  4110  0F19                     	;# 
  4111  0F1A                     	;# 
  4112  0F1B                     	;# 
  4113  0F1C                     	;# 
  4114  0F1D                     	;# 
  4115  0F1E                     	;# 
  4116  0F1F                     	;# 
  4117  0F20                     	;# 
  4118  0F21                     	;# 
  4119  0F22                     	;# 
  4120  0F23                     	;# 
  4121  0F24                     	;# 
  4122  0F25                     	;# 
  4123  0F26                     	;# 
  4124  0F27                     	;# 
  4125  0F38                     	;# 
  4126  0F39                     	;# 
  4127  0F3A                     	;# 
  4128  0F3B                     	;# 
  4129  0F3C                     	;# 
  4130  0F3D                     	;# 
  4131  0F3E                     	;# 
  4132  0F3F                     	;# 
  4133  0F40                     	;# 
  4134  0F41                     	;# 
  4135  0F43                     	;# 
  4136  0F44                     	;# 
  4137  0F45                     	;# 
  4138  0F46                     	;# 
  4139  0F47                     	;# 
  4140  0F48                     	;# 
  4141  0F49                     	;# 
  4142  0F4A                     	;# 
  4143  0F4B                     	;# 
  4144  0F4C                     	;# 
  4145  0F4E                     	;# 
  4146  0F4F                     	;# 
  4147  0F50                     	;# 
  4148  0F51                     	;# 
  4149  0F52                     	;# 
  4150  0F53                     	;# 
  4151  0F54                     	;# 
  4152  0F55                     	;# 
  4153  0F56                     	;# 
  4154  0F57                     	;# 
  4155  0F65                     	;# 
  4156  0F68                     	;# 
  4157  0F69                     	;# 
  4158  0F6A                     	;# 
  4159  0F6B                     	;# 
  4160  0FE4                     	;# 
  4161  0FE5                     	;# 
  4162  0FE6                     	;# 
  4163  0FE7                     	;# 
  4164  0FE8                     	;# 
  4165  0FE9                     	;# 
  4166  0FEA                     	;# 
  4167  0FEB                     	;# 
  4168  0FED                     	;# 
  4169  0FEE                     	;# 
  4170  0FEF                     	;# 
  4171  0000                     	;# 
  4172  0001                     	;# 
  4173  0002                     	;# 
  4174  0003                     	;# 
  4175  0004                     	;# 
  4176  0005                     	;# 
  4177  0006                     	;# 
  4178  0007                     	;# 
  4179  0008                     	;# 
  4180  0009                     	;# 
  4181  000A                     	;# 
  4182  000B                     	;# 
  4183  000C                     	;# 
  4184  000D                     	;# 
  4185  000E                     	;# 
  4186  0010                     	;# 
  4187  0011                     	;# 
  4188  0012                     	;# 
  4189  0013                     	;# 
  4190  0016                     	;# 
  4191  0017                     	;# 
  4192  0018                     	;# 
  4193  001C                     	;# 
  4194  001C                     	;# 
  4195  001D                     	;# 
  4196  001D                     	;# 
  4197  001E                     	;# 
  4198  001F                     	;# 
  4199  008C                     	;# 
  4200  008C                     	;# 
  4201  008D                     	;# 
  4202  008E                     	;# 
  4203  008E                     	;# 
  4204  008F                     	;# 
  4205  0090                     	;# 
  4206  0090                     	;# 
  4207  0091                     	;# 
  4208  0093                     	;# 
  4209  0094                     	;# 
  4210  0095                     	;# 
  4211  0096                     	;# 
  4212  0097                     	;# 
  4213  0098                     	;# 
  4214  0099                     	;# 
  4215  009A                     	;# 
  4216  009B                     	;# 
  4217  009C                     	;# 
  4218  009D                     	;# 
  4219  009E                     	;# 
  4220  010C                     	;# 
  4221  010D                     	;# 
  4222  010E                     	;# 
  4223  010E                     	;# 
  4224  010F                     	;# 
  4225  0110                     	;# 
  4226  0110                     	;# 
  4227  0111                     	;# 
  4228  0112                     	;# 
  4229  0112                     	;# 
  4230  0113                     	;# 
  4231  0114                     	;# 
  4232  0114                     	;# 
  4233  0115                     	;# 
  4234  0116                     	;# 
  4235  0116                     	;# 
  4236  0117                     	;# 
  4237  0119                     	;# 
  4238  0119                     	;# 
  4239  0119                     	;# 
  4240  011A                     	;# 
  4241  011A                     	;# 
  4242  011A                     	;# 
  4243  011B                     	;# 
  4244  011B                     	;# 
  4245  011B                     	;# 
  4246  011B                     	;# 
  4247  011B                     	;# 
  4248  011C                     	;# 
  4249  011C                     	;# 
  4250  011C                     	;# 
  4251  011D                     	;# 
  4252  011D                     	;# 
  4253  011D                     	;# 
  4254  011E                     	;# 
  4255  011E                     	;# 
  4256  011E                     	;# 
  4257  011F                     	;# 
  4258  011F                     	;# 
  4259  011F                     	;# 
  4260  011F                     	;# 
  4261  011F                     	;# 
  4262  018C                     	;# 
  4263  018D                     	;# 
  4264  018E                     	;# 
  4265  018F                     	;# 
  4266  0190                     	;# 
  4267  0191                     	;# 
  4268  0192                     	;# 
  4269  0196                     	;# 
  4270  0197                     	;# 
  4271  0198                     	;# 
  4272  0199                     	;# 
  4273  019A                     	;# 
  4274  019B                     	;# 
  4275  019C                     	;# 
  4276  020C                     	;# 
  4277  020D                     	;# 
  4278  020E                     	;# 
  4279  020F                     	;# 
  4280  020F                     	;# 
  4281  0210                     	;# 
  4282  0210                     	;# 
  4283  0211                     	;# 
  4284  0211                     	;# 
  4285  0212                     	;# 
  4286  0213                     	;# 
  4287  0214                     	;# 
  4288  0215                     	;# 
  4289  0215                     	;# 
  4290  0216                     	;# 
  4291  0216                     	;# 
  4292  0217                     	;# 
  4293  0217                     	;# 
  4294  0218                     	;# 
  4295  0219                     	;# 
  4296  021A                     	;# 
  4297  021B                     	;# 
  4298  021B                     	;# 
  4299  021C                     	;# 
  4300  021C                     	;# 
  4301  021D                     	;# 
  4302  021D                     	;# 
  4303  021E                     	;# 
  4304  021F                     	;# 
  4305  028C                     	;# 
  4306  028C                     	;# 
  4307  028D                     	;# 
  4308  028D                     	;# 
  4309  028E                     	;# 
  4310  028F                     	;# 
  4311  0290                     	;# 
  4312  0290                     	;# 
  4313  0291                     	;# 
  4314  0292                     	;# 
  4315  0292                     	;# 
  4316  0293                     	;# 
  4317  0293                     	;# 
  4318  0294                     	;# 
  4319  0295                     	;# 
  4320  0296                     	;# 
  4321  0296                     	;# 
  4322  0297                     	;# 
  4323  0298                     	;# 
  4324  0298                     	;# 
  4325  0299                     	;# 
  4326  0299                     	;# 
  4327  029A                     	;# 
  4328  029B                     	;# 
  4329  029C                     	;# 
  4330  029C                     	;# 
  4331  029D                     	;# 
  4332  030C                     	;# 
  4333  030C                     	;# 
  4334  030D                     	;# 
  4335  030E                     	;# 
  4336  030F                     	;# 
  4337  0310                     	;# 
  4338  0310                     	;# 
  4339  0311                     	;# 
  4340  0312                     	;# 
  4341  0313                     	;# 
  4342  0314                     	;# 
  4343  0314                     	;# 
  4344  0315                     	;# 
  4345  0316                     	;# 
  4346  0317                     	;# 
  4347  0318                     	;# 
  4348  0318                     	;# 
  4349  0319                     	;# 
  4350  031A                     	;# 
  4351  031B                     	;# 
  4352  031C                     	;# 
  4353  031C                     	;# 
  4354  031D                     	;# 
  4355  031E                     	;# 
  4356  031F                     	;# 
  4357  038C                     	;# 
  4358  038D                     	;# 
  4359  038E                     	;# 
  4360  0390                     	;# 
  4361  0391                     	;# 
  4362  0392                     	;# 
  4363  040C                     	;# 
  4364  040D                     	;# 
  4365  040E                     	;# 
  4366  040F                     	;# 
  4367  0410                     	;# 
  4368  0411                     	;# 
  4369  0416                     	;# 
  4370  0416                     	;# 
  4371  0417                     	;# 
  4372  0418                     	;# 
  4373  0418                     	;# 
  4374  0419                     	;# 
  4375  041A                     	;# 
  4376  041A                     	;# 
  4377  041B                     	;# 
  4378  041C                     	;# 
  4379  041C                     	;# 
  4380  041D                     	;# 
  4381  041E                     	;# 
  4382  041F                     	;# 
  4383  048C                     	;# 
  4384  048C                     	;# 
  4385  048D                     	;# 
  4386  048E                     	;# 
  4387  048F                     	;# 
  4388  048F                     	;# 
  4389  0490                     	;# 
  4390  0491                     	;# 
  4391  0492                     	;# 
  4392  0492                     	;# 
  4393  0493                     	;# 
  4394  0494                     	;# 
  4395  0495                     	;# 
  4396  0495                     	;# 
  4397  0496                     	;# 
  4398  0497                     	;# 
  4399  0498                     	;# 
  4400  0499                     	;# 
  4401  049A                     	;# 
  4402  049B                     	;# 
  4403  049C                     	;# 
  4404  049D                     	;# 
  4405  050C                     	;# 
  4406  050C                     	;# 
  4407  050D                     	;# 
  4408  050E                     	;# 
  4409  050F                     	;# 
  4410  050F                     	;# 
  4411  0510                     	;# 
  4412  0511                     	;# 
  4413  0512                     	;# 
  4414  0512                     	;# 
  4415  0513                     	;# 
  4416  0514                     	;# 
  4417  0515                     	;# 
  4418  0515                     	;# 
  4419  0516                     	;# 
  4420  0517                     	;# 
  4421  0518                     	;# 
  4422  0519                     	;# 
  4423  051A                     	;# 
  4424  051B                     	;# 
  4425  051C                     	;# 
  4426  051D                     	;# 
  4427  058C                     	;# 
  4428  058C                     	;# 
  4429  058D                     	;# 
  4430  058E                     	;# 
  4431  058F                     	;# 
  4432  058F                     	;# 
  4433  0590                     	;# 
  4434  0591                     	;# 
  4435  0592                     	;# 
  4436  0593                     	;# 
  4437  060C                     	;# 
  4438  060D                     	;# 
  4439  060E                     	;# 
  4440  060F                     	;# 
  4441  0610                     	;# 
  4442  0611                     	;# 
  4443  0612                     	;# 
  4444  0613                     	;# 
  4445  0614                     	;# 
  4446  0616                     	;# 
  4447  0617                     	;# 
  4448  0618                     	;# 
  4449  0619                     	;# 
  4450  061A                     	;# 
  4451  061B                     	;# 
  4452  061C                     	;# 
  4453  061D                     	;# 
  4454  061E                     	;# 
  4455  068C                     	;# 
  4456  068D                     	;# 
  4457  068E                     	;# 
  4458  068F                     	;# 
  4459  0690                     	;# 
  4460  0691                     	;# 
  4461  0692                     	;# 
  4462  0693                     	;# 
  4463  0694                     	;# 
  4464  070C                     	;# 
  4465  070D                     	;# 
  4466  070E                     	;# 
  4467  070F                     	;# 
  4468  0710                     	;# 
  4469  0711                     	;# 
  4470  0712                     	;# 
  4471  0713                     	;# 
  4472  0714                     	;# 
  4473  0716                     	;# 
  4474  0717                     	;# 
  4475  0718                     	;# 
  4476  0719                     	;# 
  4477  071A                     	;# 
  4478  071B                     	;# 
  4479  071C                     	;# 
  4480  071D                     	;# 
  4481  071E                     	;# 
  4482  0796                     	;# 
  4483  0797                     	;# 
  4484  0798                     	;# 
  4485  0799                     	;# 
  4486  079A                     	;# 
  4487  079B                     	;# 
  4488  080C                     	;# 
  4489  080D                     	;# 
  4490  080E                     	;# 
  4491  080F                     	;# 
  4492  0810                     	;# 
  4493  0811                     	;# 
  4494  0812                     	;# 
  4495  0813                     	;# 
  4496  0814                     	;# 
  4497  081A                     	;# 
  4498  081B                     	;# 
  4499  081C                     	;# 
  4500  081D                     	;# 
  4501  081E                     	;# 
  4502  081F                     	;# 
  4503  088C                     	;# 
  4504  088D                     	;# 
  4505  088E                     	;# 
  4506  088F                     	;# 
  4507  0890                     	;# 
  4508  0891                     	;# 
  4509  0892                     	;# 
  4510  0893                     	;# 
  4511  0895                     	;# 
  4512  0896                     	;# 
  4513  0897                     	;# 
  4514  0898                     	;# 
  4515  0899                     	;# 
  4516  089A                     	;# 
  4517  089B                     	;# 
  4518  090C                     	;# 
  4519  090E                     	;# 
  4520  090F                     	;# 
  4521  091F                     	;# 
  4522  091F                     	;# 
  4523  098F                     	;# 
  4524  098F                     	;# 
  4525  0990                     	;# 
  4526  0991                     	;# 
  4527  0992                     	;# 
  4528  0993                     	;# 
  4529  0994                     	;# 
  4530  0995                     	;# 
  4531  0996                     	;# 
  4532  0997                     	;# 
  4533  0E0F                     	;# 
  4534  0E10                     	;# 
  4535  0E11                     	;# 
  4536  0E12                     	;# 
  4537  0E13                     	;# 
  4538  0E14                     	;# 
  4539  0E15                     	;# 
  4540  0E16                     	;# 
  4541  0E17                     	;# 
  4542  0E18                     	;# 
  4543  0E19                     	;# 
  4544  0E1A                     	;# 
  4545  0E1B                     	;# 
  4546  0E1C                     	;# 
  4547  0E1D                     	;# 
  4548  0E1E                     	;# 
  4549  0E1F                     	;# 
  4550  0E20                     	;# 
  4551  0E21                     	;# 
  4552  0E22                     	;# 
  4553  0E23                     	;# 
  4554  0E24                     	;# 
  4555  0E25                     	;# 
  4556  0E26                     	;# 
  4557  0E27                     	;# 
  4558  0E28                     	;# 
  4559  0E29                     	;# 
  4560  0E2A                     	;# 
  4561  0E2B                     	;# 
  4562  0E2C                     	;# 
  4563  0E2D                     	;# 
  4564  0E2E                     	;# 
  4565  0E2F                     	;# 
  4566  0E30                     	;# 
  4567  0E31                     	;# 
  4568  0E32                     	;# 
  4569  0E33                     	;# 
  4570  0E34                     	;# 
  4571  0E35                     	;# 
  4572  0E36                     	;# 
  4573  0E37                     	;# 
  4574  0E8F                     	;# 
  4575  0E90                     	;# 
  4576  0E91                     	;# 
  4577  0E92                     	;# 
  4578  0E93                     	;# 
  4579  0E94                     	;# 
  4580  0E95                     	;# 
  4581  0E96                     	;# 
  4582  0E97                     	;# 
  4583  0E9C                     	;# 
  4584  0E9D                     	;# 
  4585  0E9E                     	;# 
  4586  0EA1                     	;# 
  4587  0EA2                     	;# 
  4588  0EA3                     	;# 
  4589  0EA4                     	;# 
  4590  0EA5                     	;# 
  4591  0EA9                     	;# 
  4592  0EAA                     	;# 
  4593  0EAB                     	;# 
  4594  0EAC                     	;# 
  4595  0EB1                     	;# 
  4596  0EB2                     	;# 
  4597  0EB3                     	;# 
  4598  0EB8                     	;# 
  4599  0EB9                     	;# 
  4600  0EBA                     	;# 
  4601  0EBB                     	;# 
  4602  0EBC                     	;# 
  4603  0EBD                     	;# 
  4604  0EBE                     	;# 
  4605  0EC3                     	;# 
  4606  0EC5                     	;# 
  4607  0EC6                     	;# 
  4608  0EC7                     	;# 
  4609  0EC8                     	;# 
  4610  0EC9                     	;# 
  4611  0ECA                     	;# 
  4612  0ECB                     	;# 
  4613  0ECC                     	;# 
  4614  0F10                     	;# 
  4615  0F11                     	;# 
  4616  0F12                     	;# 
  4617  0F13                     	;# 
  4618  0F14                     	;# 
  4619  0F15                     	;# 
  4620  0F16                     	;# 
  4621  0F17                     	;# 
  4622  0F18                     	;# 
  4623  0F19                     	;# 
  4624  0F1A                     	;# 
  4625  0F1B                     	;# 
  4626  0F1C                     	;# 
  4627  0F1D                     	;# 
  4628  0F1E                     	;# 
  4629  0F1F                     	;# 
  4630  0F20                     	;# 
  4631  0F21                     	;# 
  4632  0F22                     	;# 
  4633  0F23                     	;# 
  4634  0F24                     	;# 
  4635  0F25                     	;# 
  4636  0F26                     	;# 
  4637  0F27                     	;# 
  4638  0F38                     	;# 
  4639  0F39                     	;# 
  4640  0F3A                     	;# 
  4641  0F3B                     	;# 
  4642  0F3C                     	;# 
  4643  0F3D                     	;# 
  4644  0F3E                     	;# 
  4645  0F3F                     	;# 
  4646  0F40                     	;# 
  4647  0F41                     	;# 
  4648  0F43                     	;# 
  4649  0F44                     	;# 
  4650  0F45                     	;# 
  4651  0F46                     	;# 
  4652  0F47                     	;# 
  4653  0F48                     	;# 
  4654  0F49                     	;# 
  4655  0F4A                     	;# 
  4656  0F4B                     	;# 
  4657  0F4C                     	;# 
  4658  0F4E                     	;# 
  4659  0F4F                     	;# 
  4660  0F50                     	;# 
  4661  0F51                     	;# 
  4662  0F52                     	;# 
  4663  0F53                     	;# 
  4664  0F54                     	;# 
  4665  0F55                     	;# 
  4666  0F56                     	;# 
  4667  0F57                     	;# 
  4668  0F65                     	;# 
  4669  0F68                     	;# 
  4670  0F69                     	;# 
  4671  0F6A                     	;# 
  4672  0F6B                     	;# 
  4673  0FE4                     	;# 
  4674  0FE5                     	;# 
  4675  0FE6                     	;# 
  4676  0FE7                     	;# 
  4677  0FE8                     	;# 
  4678  0FE9                     	;# 
  4679  0FEA                     	;# 
  4680  0FEB                     	;# 
  4681  0FED                     	;# 
  4682  0FEE                     	;# 
  4683  0FEF                     	;# 
  4684  0000                     	;# 
  4685  0001                     	;# 
  4686  0002                     	;# 
  4687  0003                     	;# 
  4688  0004                     	;# 
  4689  0005                     	;# 
  4690  0006                     	;# 
  4691  0007                     	;# 
  4692  0008                     	;# 
  4693  0009                     	;# 
  4694  000A                     	;# 
  4695  000B                     	;# 
  4696  000C                     	;# 
  4697  000D                     	;# 
  4698  000E                     	;# 
  4699  0010                     	;# 
  4700  0011                     	;# 
  4701  0012                     	;# 
  4702  0013                     	;# 
  4703  0016                     	;# 
  4704  0017                     	;# 
  4705  0018                     	;# 
  4706  001C                     	;# 
  4707  001C                     	;# 
  4708  001D                     	;# 
  4709  001D                     	;# 
  4710  001E                     	;# 
  4711  001F                     	;# 
  4712  008C                     	;# 
  4713  008C                     	;# 
  4714  008D                     	;# 
  4715  008E                     	;# 
  4716  008E                     	;# 
  4717  008F                     	;# 
  4718  0090                     	;# 
  4719  0090                     	;# 
  4720  0091                     	;# 
  4721  0093                     	;# 
  4722  0094                     	;# 
  4723  0095                     	;# 
  4724  0096                     	;# 
  4725  0097                     	;# 
  4726  0098                     	;# 
  4727  0099                     	;# 
  4728  009A                     	;# 
  4729  009B                     	;# 
  4730  009C                     	;# 
  4731  009D                     	;# 
  4732  009E                     	;# 
  4733  010C                     	;# 
  4734  010D                     	;# 
  4735  010E                     	;# 
  4736  010E                     	;# 
  4737  010F                     	;# 
  4738  0110                     	;# 
  4739  0110                     	;# 
  4740  0111                     	;# 
  4741  0112                     	;# 
  4742  0112                     	;# 
  4743  0113                     	;# 
  4744  0114                     	;# 
  4745  0114                     	;# 
  4746  0115                     	;# 
  4747  0116                     	;# 
  4748  0116                     	;# 
  4749  0117                     	;# 
  4750  0119                     	;# 
  4751  0119                     	;# 
  4752  0119                     	;# 
  4753  011A                     	;# 
  4754  011A                     	;# 
  4755  011A                     	;# 
  4756  011B                     	;# 
  4757  011B                     	;# 
  4758  011B                     	;# 
  4759  011B                     	;# 
  4760  011B                     	;# 
  4761  011C                     	;# 
  4762  011C                     	;# 
  4763  011C                     	;# 
  4764  011D                     	;# 
  4765  011D                     	;# 
  4766  011D                     	;# 
  4767  011E                     	;# 
  4768  011E                     	;# 
  4769  011E                     	;# 
  4770  011F                     	;# 
  4771  011F                     	;# 
  4772  011F                     	;# 
  4773  011F                     	;# 
  4774  011F                     	;# 
  4775  018C                     	;# 
  4776  018D                     	;# 
  4777  018E                     	;# 
  4778  018F                     	;# 
  4779  0190                     	;# 
  4780  0191                     	;# 
  4781  0192                     	;# 
  4782  0196                     	;# 
  4783  0197                     	;# 
  4784  0198                     	;# 
  4785  0199                     	;# 
  4786  019A                     	;# 
  4787  019B                     	;# 
  4788  019C                     	;# 
  4789  020C                     	;# 
  4790  020D                     	;# 
  4791  020E                     	;# 
  4792  020F                     	;# 
  4793  020F                     	;# 
  4794  0210                     	;# 
  4795  0210                     	;# 
  4796  0211                     	;# 
  4797  0211                     	;# 
  4798  0212                     	;# 
  4799  0213                     	;# 
  4800  0214                     	;# 
  4801  0215                     	;# 
  4802  0215                     	;# 
  4803  0216                     	;# 
  4804  0216                     	;# 
  4805  0217                     	;# 
  4806  0217                     	;# 
  4807  0218                     	;# 
  4808  0219                     	;# 
  4809  021A                     	;# 
  4810  021B                     	;# 
  4811  021B                     	;# 
  4812  021C                     	;# 
  4813  021C                     	;# 
  4814  021D                     	;# 
  4815  021D                     	;# 
  4816  021E                     	;# 
  4817  021F                     	;# 
  4818  028C                     	;# 
  4819  028C                     	;# 
  4820  028D                     	;# 
  4821  028D                     	;# 
  4822  028E                     	;# 
  4823  028F                     	;# 
  4824  0290                     	;# 
  4825  0290                     	;# 
  4826  0291                     	;# 
  4827  0292                     	;# 
  4828  0292                     	;# 
  4829  0293                     	;# 
  4830  0293                     	;# 
  4831  0294                     	;# 
  4832  0295                     	;# 
  4833  0296                     	;# 
  4834  0296                     	;# 
  4835  0297                     	;# 
  4836  0298                     	;# 
  4837  0298                     	;# 
  4838  0299                     	;# 
  4839  0299                     	;# 
  4840  029A                     	;# 
  4841  029B                     	;# 
  4842  029C                     	;# 
  4843  029C                     	;# 
  4844  029D                     	;# 
  4845  030C                     	;# 
  4846  030C                     	;# 
  4847  030D                     	;# 
  4848  030E                     	;# 
  4849  030F                     	;# 
  4850  0310                     	;# 
  4851  0310                     	;# 
  4852  0311                     	;# 
  4853  0312                     	;# 
  4854  0313                     	;# 
  4855  0314                     	;# 
  4856  0314                     	;# 
  4857  0315                     	;# 
  4858  0316                     	;# 
  4859  0317                     	;# 
  4860  0318                     	;# 
  4861  0318                     	;# 
  4862  0319                     	;# 
  4863  031A                     	;# 
  4864  031B                     	;# 
  4865  031C                     	;# 
  4866  031C                     	;# 
  4867  031D                     	;# 
  4868  031E                     	;# 
  4869  031F                     	;# 
  4870  038C                     	;# 
  4871  038D                     	;# 
  4872  038E                     	;# 
  4873  0390                     	;# 
  4874  0391                     	;# 
  4875  0392                     	;# 
  4876  040C                     	;# 
  4877  040D                     	;# 
  4878  040E                     	;# 
  4879  040F                     	;# 
  4880  0410                     	;# 
  4881  0411                     	;# 
  4882  0416                     	;# 
  4883  0416                     	;# 
  4884  0417                     	;# 
  4885  0418                     	;# 
  4886  0418                     	;# 
  4887  0419                     	;# 
  4888  041A                     	;# 
  4889  041A                     	;# 
  4890  041B                     	;# 
  4891  041C                     	;# 
  4892  041C                     	;# 
  4893  041D                     	;# 
  4894  041E                     	;# 
  4895  041F                     	;# 
  4896  048C                     	;# 
  4897  048C                     	;# 
  4898  048D                     	;# 
  4899  048E                     	;# 
  4900  048F                     	;# 
  4901  048F                     	;# 
  4902  0490                     	;# 
  4903  0491                     	;# 
  4904  0492                     	;# 
  4905  0492                     	;# 
  4906  0493                     	;# 
  4907  0494                     	;# 
  4908  0495                     	;# 
  4909  0495                     	;# 
  4910  0496                     	;# 
  4911  0497                     	;# 
  4912  0498                     	;# 
  4913  0499                     	;# 
  4914  049A                     	;# 
  4915  049B                     	;# 
  4916  049C                     	;# 
  4917  049D                     	;# 
  4918  050C                     	;# 
  4919  050C                     	;# 
  4920  050D                     	;# 
  4921  050E                     	;# 
  4922  050F                     	;# 
  4923  050F                     	;# 
  4924  0510                     	;# 
  4925  0511                     	;# 
  4926  0512                     	;# 
  4927  0512                     	;# 
  4928  0513                     	;# 
  4929  0514                     	;# 
  4930  0515                     	;# 
  4931  0515                     	;# 
  4932  0516                     	;# 
  4933  0517                     	;# 
  4934  0518                     	;# 
  4935  0519                     	;# 
  4936  051A                     	;# 
  4937  051B                     	;# 
  4938  051C                     	;# 
  4939  051D                     	;# 
  4940  058C                     	;# 
  4941  058C                     	;# 
  4942  058D                     	;# 
  4943  058E                     	;# 
  4944  058F                     	;# 
  4945  058F                     	;# 
  4946  0590                     	;# 
  4947  0591                     	;# 
  4948  0592                     	;# 
  4949  0593                     	;# 
  4950  060C                     	;# 
  4951  060D                     	;# 
  4952  060E                     	;# 
  4953  060F                     	;# 
  4954  0610                     	;# 
  4955  0611                     	;# 
  4956  0612                     	;# 
  4957  0613                     	;# 
  4958  0614                     	;# 
  4959  0616                     	;# 
  4960  0617                     	;# 
  4961  0618                     	;# 
  4962  0619                     	;# 
  4963  061A                     	;# 
  4964  061B                     	;# 
  4965  061C                     	;# 
  4966  061D                     	;# 
  4967  061E                     	;# 
  4968  068C                     	;# 
  4969  068D                     	;# 
  4970  068E                     	;# 
  4971  068F                     	;# 
  4972  0690                     	;# 
  4973  0691                     	;# 
  4974  0692                     	;# 
  4975  0693                     	;# 
  4976  0694                     	;# 
  4977  070C                     	;# 
  4978  070D                     	;# 
  4979  070E                     	;# 
  4980  070F                     	;# 
  4981  0710                     	;# 
  4982  0711                     	;# 
  4983  0712                     	;# 
  4984  0713                     	;# 
  4985  0714                     	;# 
  4986  0716                     	;# 
  4987  0717                     	;# 
  4988  0718                     	;# 
  4989  0719                     	;# 
  4990  071A                     	;# 
  4991  071B                     	;# 
  4992  071C                     	;# 
  4993  071D                     	;# 
  4994  071E                     	;# 
  4995  0796                     	;# 
  4996  0797                     	;# 
  4997  0798                     	;# 
  4998  0799                     	;# 
  4999  079A                     	;# 
  5000  079B                     	;# 
  5001  080C                     	;# 
  5002  080D                     	;# 
  5003  080E                     	;# 
  5004  080F                     	;# 
  5005  0810                     	;# 
  5006  0811                     	;# 
  5007  0812                     	;# 
  5008  0813                     	;# 
  5009  0814                     	;# 
  5010  081A                     	;# 
  5011  081B                     	;# 
  5012  081C                     	;# 
  5013  081D                     	;# 
  5014  081E                     	;# 
  5015  081F                     	;# 
  5016  088C                     	;# 
  5017  088D                     	;# 
  5018  088E                     	;# 
  5019  088F                     	;# 
  5020  0890                     	;# 
  5021  0891                     	;# 
  5022  0892                     	;# 
  5023  0893                     	;# 
  5024  0895                     	;# 
  5025  0896                     	;# 
  5026  0897                     	;# 
  5027  0898                     	;# 
  5028  0899                     	;# 
  5029  089A                     	;# 
  5030  089B                     	;# 
  5031  090C                     	;# 
  5032  090E                     	;# 
  5033  090F                     	;# 
  5034  091F                     	;# 
  5035  091F                     	;# 
  5036  098F                     	;# 
  5037  098F                     	;# 
  5038  0990                     	;# 
  5039  0991                     	;# 
  5040  0992                     	;# 
  5041  0993                     	;# 
  5042  0994                     	;# 
  5043  0995                     	;# 
  5044  0996                     	;# 
  5045  0997                     	;# 
  5046  0E0F                     	;# 
  5047  0E10                     	;# 
  5048  0E11                     	;# 
  5049  0E12                     	;# 
  5050  0E13                     	;# 
  5051  0E14                     	;# 
  5052  0E15                     	;# 
  5053  0E16                     	;# 
  5054  0E17                     	;# 
  5055  0E18                     	;# 
  5056  0E19                     	;# 
  5057  0E1A                     	;# 
  5058  0E1B                     	;# 
  5059  0E1C                     	;# 
  5060  0E1D                     	;# 
  5061  0E1E                     	;# 
  5062  0E1F                     	;# 
  5063  0E20                     	;# 
  5064  0E21                     	;# 
  5065  0E22                     	;# 
  5066  0E23                     	;# 
  5067  0E24                     	;# 
  5068  0E25                     	;# 
  5069  0E26                     	;# 
  5070  0E27                     	;# 
  5071  0E28                     	;# 
  5072  0E29                     	;# 
  5073  0E2A                     	;# 
  5074  0E2B                     	;# 
  5075  0E2C                     	;# 
  5076  0E2D                     	;# 
  5077  0E2E                     	;# 
  5078  0E2F                     	;# 
  5079  0E30                     	;# 
  5080  0E31                     	;# 
  5081  0E32                     	;# 
  5082  0E33                     	;# 
  5083  0E34                     	;# 
  5084  0E35                     	;# 
  5085  0E36                     	;# 
  5086  0E37                     	;# 
  5087  0E8F                     	;# 
  5088  0E90                     	;# 
  5089  0E91                     	;# 
  5090  0E92                     	;# 
  5091  0E93                     	;# 
  5092  0E94                     	;# 
  5093  0E95                     	;# 
  5094  0E96                     	;# 
  5095  0E97                     	;# 
  5096  0E9C                     	;# 
  5097  0E9D                     	;# 
  5098  0E9E                     	;# 
  5099  0EA1                     	;# 
  5100  0EA2                     	;# 
  5101  0EA3                     	;# 
  5102  0EA4                     	;# 
  5103  0EA5                     	;# 
  5104  0EA9                     	;# 
  5105  0EAA                     	;# 
  5106  0EAB                     	;# 
  5107  0EAC                     	;# 
  5108  0EB1                     	;# 
  5109  0EB2                     	;# 
  5110  0EB3                     	;# 
  5111  0EB8                     	;# 
  5112  0EB9                     	;# 
  5113  0EBA                     	;# 
  5114  0EBB                     	;# 
  5115  0EBC                     	;# 
  5116  0EBD                     	;# 
  5117  0EBE                     	;# 
  5118  0EC3                     	;# 
  5119  0EC5                     	;# 
  5120  0EC6                     	;# 
  5121  0EC7                     	;# 
  5122  0EC8                     	;# 
  5123  0EC9                     	;# 
  5124  0ECA                     	;# 
  5125  0ECB                     	;# 
  5126  0ECC                     	;# 
  5127  0F10                     	;# 
  5128  0F11                     	;# 
  5129  0F12                     	;# 
  5130  0F13                     	;# 
  5131  0F14                     	;# 
  5132  0F15                     	;# 
  5133  0F16                     	;# 
  5134  0F17                     	;# 
  5135  0F18                     	;# 
  5136  0F19                     	;# 
  5137  0F1A                     	;# 
  5138  0F1B                     	;# 
  5139  0F1C                     	;# 
  5140  0F1D                     	;# 
  5141  0F1E                     	;# 
  5142  0F1F                     	;# 
  5143  0F20                     	;# 
  5144  0F21                     	;# 
  5145  0F22                     	;# 
  5146  0F23                     	;# 
  5147  0F24                     	;# 
  5148  0F25                     	;# 
  5149  0F26                     	;# 
  5150  0F27                     	;# 
  5151  0F38                     	;# 
  5152  0F39                     	;# 
  5153  0F3A                     	;# 
  5154  0F3B                     	;# 
  5155  0F3C                     	;# 
  5156  0F3D                     	;# 
  5157  0F3E                     	;# 
  5158  0F3F                     	;# 
  5159  0F40                     	;# 
  5160  0F41                     	;# 
  5161  0F43                     	;# 
  5162  0F44                     	;# 
  5163  0F45                     	;# 
  5164  0F46                     	;# 
  5165  0F47                     	;# 
  5166  0F48                     	;# 
  5167  0F49                     	;# 
  5168  0F4A                     	;# 
  5169  0F4B                     	;# 
  5170  0F4C                     	;# 
  5171  0F4E                     	;# 
  5172  0F4F                     	;# 
  5173  0F50                     	;# 
  5174  0F51                     	;# 
  5175  0F52                     	;# 
  5176  0F53                     	;# 
  5177  0F54                     	;# 
  5178  0F55                     	;# 
  5179  0F56                     	;# 
  5180  0F57                     	;# 
  5181  0F65                     	;# 
  5182  0F68                     	;# 
  5183  0F69                     	;# 
  5184  0F6A                     	;# 
  5185  0F6B                     	;# 
  5186  0FE4                     	;# 
  5187  0FE5                     	;# 
  5188  0FE6                     	;# 
  5189  0FE7                     	;# 
  5190  0FE8                     	;# 
  5191  0FE9                     	;# 
  5192  0FEA                     	;# 
  5193  0FEB                     	;# 
  5194  0FED                     	;# 
  5195  0FEE                     	;# 
  5196  0FEF                     	;_samples
  5197                           
  5198                           	psect	idataBANK1
  5199  0007                     __pidataBANK1:	
  5200                           
  5201                           ;initializer for _batteryTemp
  5202  0007  342C               	retlw	44
  5203  0008  3401               	retlw	1
  5204                           
  5205                           	psect	idataBANK2
  5206  1167                     __pidataBANK2:	
  5207                           
  5208                           ;initializer for _channels
  5209  1167  3414               	retlw	20
  5210  1168  3400               	retlw	0
  5211  1169  3410               	retlw	16
  5212  116A  3400               	retlw	0
  5213  116B  3416               	retlw	22
  5214  116C  3400               	retlw	0
  5215  116D  3412               	retlw	18
  5216  116E  3400               	retlw	0
  5217                           
  5218                           	psect	stringtext
  5219  0800                     __pstringtext:	
  5220  0800                     _fonts:	
  5221  0800  3400               	retlw	0
  5222  0801  3400               	retlw	0
  5223  0802  3400               	retlw	0
  5224  0803  3400               	retlw	0
  5225  0804  344E               	retlw	78
  5226  0805  3400               	retlw	0
  5227  0806  3406               	retlw	6
  5228  0807  3400               	retlw	0
  5229  0808  3406               	retlw	6
  5230  0809  34FF               	retlw	255
  5231  080A  34FF               	retlw	255
  5232  080B  34FF               	retlw	255
  5233  080C  3448               	retlw	72
  5234  080D  34D6               	retlw	214
  5235  080E  3424               	retlw	36
  5236  080F  3412               	retlw	18
  5237  0810  3408               	retlw	8
  5238  0811  3424               	retlw	36
  5239  0812  34FF               	retlw	255
  5240  0813  34FF               	retlw	255
  5241  0814  34FF               	retlw	255
  5242  0815  3400               	retlw	0
  5243  0816  3406               	retlw	6
  5244  0817  3400               	retlw	0
  5245  0818  3438               	retlw	56
  5246  0819  3444               	retlw	68
  5247  081A  3482               	retlw	130
  5248  081B  3482               	retlw	130
  5249  081C  3444               	retlw	68
  5250  081D  3438               	retlw	56
  5251  081E  3414               	retlw	20
  5252  081F  3408               	retlw	8
  5253  0820  343E               	retlw	62
  5254  0821  3410               	retlw	16
  5255  0822  3438               	retlw	56
  5256  0823  3410               	retlw	16
  5257  0824  34A0               	retlw	160
  5258  0825  3460               	retlw	96
  5259  0826  3400               	retlw	0
  5260  0827  3410               	retlw	16
  5261  0828  3410               	retlw	16
  5262  0829  3410               	retlw	16
  5263  082A  3460               	retlw	96
  5264  082B  3460               	retlw	96
  5265  082C  3400               	retlw	0
  5266  082D  3460               	retlw	96
  5267  082E  3418               	retlw	24
  5268  082F  3406               	retlw	6
  5269  0830  347C               	retlw	124
  5270  0831  3442               	retlw	66
  5271  0832  347C               	retlw	124
  5272  0833  3444               	retlw	68
  5273  0834  347E               	retlw	126
  5274  0835  3440               	retlw	64
  5275  0836  3464               	retlw	100
  5276  0837  3452               	retlw	82
  5277  0838  344C               	retlw	76
  5278  0839  344A               	retlw	74
  5279  083A  344A               	retlw	74
  5280  083B  3434               	retlw	52
  5281  083C  3438               	retlw	56
  5282  083D  3424               	retlw	36
  5283  083E  347E               	retlw	126
  5284  083F  344E               	retlw	78
  5285  0840  344A               	retlw	74
  5286  0841  3432               	retlw	50
  5287  0842  343C               	retlw	60
  5288  0843  344A               	retlw	74
  5289  0844  3432               	retlw	50
  5290  0845  3462               	retlw	98
  5291  0846  341A               	retlw	26
  5292  0847  3406               	retlw	6
  5293  0848  3476               	retlw	118
  5294  0849  344A               	retlw	74
  5295  084A  3476               	retlw	118
  5296  084B  344C               	retlw	76
  5297  084C  3452               	retlw	82
  5298  084D  343C               	retlw	60
  5299  084E  346C               	retlw	108
  5300  084F  346C               	retlw	108
  5301  0850  3400               	retlw	0
  5302  0851  34AC               	retlw	172
  5303  0852  346C               	retlw	108
  5304  0853  3400               	retlw	0
  5305  0854  3410               	retlw	16
  5306  0855  3428               	retlw	40
  5307  0856  3444               	retlw	68
  5308  0857  3428               	retlw	40
  5309  0858  3428               	retlw	40
  5310  0859  3428               	retlw	40
  5311  085A  3444               	retlw	68
  5312  085B  3428               	retlw	40
  5313  085C  3410               	retlw	16
  5314  085D  3402               	retlw	2
  5315  085E  3459               	retlw	89
  5316  085F  3406               	retlw	6
  5317  0860  34FF               	retlw	255
  5318  0861  34FF               	retlw	255
  5319  0862  34FF               	retlw	255
  5320  0863  347C               	retlw	124
  5321  0864  3412               	retlw	18
  5322  0865  347C               	retlw	124
  5323  0866  347E               	retlw	126
  5324  0867  345A               	retlw	90
  5325  0868  3434               	retlw	52
  5326  0869  343C               	retlw	60
  5327  086A  3442               	retlw	66
  5328  086B  3442               	retlw	66
  5329  086C  347E               	retlw	126
  5330  086D  3442               	retlw	66
  5331  086E  343C               	retlw	60
  5332  086F  347E               	retlw	126
  5333  0870  344A               	retlw	74
  5334  0871  3442               	retlw	66
  5335  0872  347E               	retlw	126
  5336  0873  340A               	retlw	10
  5337  0874  340A               	retlw	10
  5338  0875  343C               	retlw	60
  5339  0876  3452               	retlw	82
  5340  0877  3434               	retlw	52
  5341  0878  347E               	retlw	126
  5342  0879  3408               	retlw	8
  5343  087A  347E               	retlw	126
  5344  087B  3442               	retlw	66
  5345  087C  347E               	retlw	126
  5346  087D  3442               	retlw	66
  5347  087E  3430               	retlw	48
  5348  087F  3440               	retlw	64
  5349  0880  343E               	retlw	62
  5350  0881  347E               	retlw	126
  5351  0882  3418               	retlw	24
  5352  0883  3466               	retlw	102
  5353  0884  347E               	retlw	126
  5354  0885  3440               	retlw	64
  5355  0886  3440               	retlw	64
  5356  0887  347E               	retlw	126
  5357  0888  341C               	retlw	28
  5358  0889  347E               	retlw	126
  5359  088A  347E               	retlw	126
  5360  088B  3402               	retlw	2
  5361  088C  347E               	retlw	126
  5362  088D  343C               	retlw	60
  5363  088E  3442               	retlw	66
  5364  088F  343C               	retlw	60
  5365  0890  347E               	retlw	126
  5366  0891  3412               	retlw	18
  5367  0892  340C               	retlw	12
  5368  0893  347E               	retlw	126
  5369  0894  3462               	retlw	98
  5370  0895  34FE               	retlw	254
  5371  0896  347E               	retlw	126
  5372  0897  3432               	retlw	50
  5373  0898  344E               	retlw	78
  5374  0899  3444               	retlw	68
  5375  089A  344A               	retlw	74
  5376  089B  3432               	retlw	50
  5377  089C  3402               	retlw	2
  5378  089D  347E               	retlw	126
  5379  089E  3402               	retlw	2
  5380  089F  347E               	retlw	126
  5381  08A0  3440               	retlw	64
  5382  08A1  347E               	retlw	126
  5383  08A2  343E               	retlw	62
  5384  08A3  3440               	retlw	64
  5385  08A4  343E               	retlw	62
  5386  08A5  347E               	retlw	126
  5387  08A6  3438               	retlw	56
  5388  08A7  347E               	retlw	126
  5389  08A8  3466               	retlw	102
  5390  08A9  3418               	retlw	24
  5391  08AA  3466               	retlw	102
  5392  08AB  340E               	retlw	14
  5393  08AC  3470               	retlw	112
  5394  08AD  340E               	retlw	14
  5395  08AE  3462               	retlw	98
  5396  08AF  345A               	retlw	90
  5397  08B0  3446               	retlw	70
  5398  08B1  3400               	retlw	0
  5399  08B2  347E               	retlw	126
  5400  08B3  3442               	retlw	66
  5401  08B4  3406               	retlw	6
  5402  08B5  3418               	retlw	24
  5403  08B6  3460               	retlw	96
  5404  08B7  3442               	retlw	66
  5405  08B8  347E               	retlw	126
  5406  08B9  3400               	retlw	0
  5407  08BA  3404               	retlw	4
  5408  08BB  3402               	retlw	2
  5409  08BC  3404               	retlw	4
  5410  08BD  3440               	retlw	64
  5411  08BE  3440               	retlw	64
  5412  08BF  3440               	retlw	64
  5413  08C0  3400               	retlw	0
  5414  08C1  3402               	retlw	2
  5415  08C2  3404               	retlw	4
  5416  08C3  3474               	retlw	116
  5417  08C4  3454               	retlw	84
  5418  08C5  3478               	retlw	120
  5419  08C6  347E               	retlw	126
  5420  08C7  3448               	retlw	72
  5421  08C8  3430               	retlw	48
  5422  08C9  3430               	retlw	48
  5423  08CA  3448               	retlw	72
  5424  08CB  3448               	retlw	72
  5425  08CC  3430               	retlw	48
  5426  08CD  3448               	retlw	72
  5427  08CE  347E               	retlw	126
  5428  08CF  3438               	retlw	56
  5429  08D0  3454               	retlw	84
  5430  08D1  3458               	retlw	88
  5431  08D2  347C               	retlw	124
  5432  08D3  340A               	retlw	10
  5433  08D4  3402               	retlw	2
  5434  08D5  3498               	retlw	152
  5435  08D6  34A4               	retlw	164
  5436  08D7  347C               	retlw	124
  5437  08D8  347E               	retlw	126
  5438  08D9  3408               	retlw	8
  5439  08DA  3470               	retlw	112
  5440  08DB  3448               	retlw	72
  5441  08DC  347A               	retlw	122
  5442  08DD  3440               	retlw	64
  5443  08DE  3488               	retlw	136
  5444  08DF  34FA               	retlw	250
  5445  08E0  3400               	retlw	0
  5446  08E1  347E               	retlw	126
  5447  08E2  3418               	retlw	24
  5448  08E3  3464               	retlw	100
  5449  08E4  3442               	retlw	66
  5450  08E5  347E               	retlw	126
  5451  08E6  3440               	retlw	64
  5452  08E7  347C               	retlw	124
  5453  08E8  3438               	retlw	56
  5454  08E9  347C               	retlw	124
  5455  08EA  347C               	retlw	124
  5456  08EB  3404               	retlw	4
  5457  08EC  3478               	retlw	120
  5458  08ED  3438               	retlw	56
  5459  08EE  3444               	retlw	68
  5460  08EF  3438               	retlw	56
  5461  08F0  34FC               	retlw	252
  5462  08F1  3424               	retlw	36
  5463  08F2  3418               	retlw	24
  5464  08F3  3418               	retlw	24
  5465  08F4  3424               	retlw	36
  5466  08F5  34FC               	retlw	252
  5467  08F6  3478               	retlw	120
  5468  08F7  3404               	retlw	4
  5469  08F8  3404               	retlw	4
  5470  08F9  3448               	retlw	72
  5471  08FA  3454               	retlw	84
  5472  08FB  3424               	retlw	36
  5473  08FC  3404               	retlw	4
  5474  08FD  343E               	retlw	62
  5475  08FE  3444               	retlw	68
  5476  08FF  347C               	retlw	124
  5477  0900  3440               	retlw	64
  5478  0901  347C               	retlw	124
  5479  0902  343C               	retlw	60
  5480  0903  3440               	retlw	64
  5481  0904  343C               	retlw	60
  5482  0905  347C               	retlw	124
  5483  0906  3430               	retlw	48
  5484  0907  347C               	retlw	124
  5485  0908  346C               	retlw	108
  5486  0909  3410               	retlw	16
  5487  090A  346C               	retlw	108
  5488  090B  349C               	retlw	156
  5489  090C  34A0               	retlw	160
  5490  090D  347C               	retlw	124
  5491  090E  3464               	retlw	100
  5492  090F  3454               	retlw	84
  5493  0910  344C               	retlw	76
  5494  0911  340C               	retlw	12
  5495  0912  3412               	retlw	18
  5496  0913  340C               	retlw	12
  5497  0914  34FF               	retlw	255
  5498  0915  34FF               	retlw	255
  5499  0916  34FF               	retlw	255
  5500  0917  34FF               	retlw	255
  5501  0918  34FF               	retlw	255
  5502  0919  34FF               	retlw	255
  5503  091A  34FF               	retlw	255
  5504  091B  34FF               	retlw	255
  5505  091C  34FF               	retlw	255
  5506  091D  34FF               	retlw	255
  5507  091E  34FF               	retlw	255
  5508  091F  34FF               	retlw	255
  5509  0920  34FF               	retlw	255
  5510  0921  34FF               	retlw	255
  5511  0922  34FF               	retlw	255
  5512  0923  34FF               	retlw	255
  5513  0924  34FF               	retlw	255
  5514  0925  34FF               	retlw	255
  5515  0926  34FC               	retlw	252
  5516  0927  3440               	retlw	64
  5517  0928  347C               	retlw	124
  5518  0929  34FF               	retlw	255
  5519  092A  34FF               	retlw	255
  5520  092B  34FF               	retlw	255
  5521  092C  34FF               	retlw	255
  5522  092D  34FF               	retlw	255
  5523  092E  34FF               	retlw	255
  5524  092F                     __end_of_fonts:	
  5525  092F                     log@coeff:	
  5526  092F  3400               	retlw	0
  5527  0930  3400               	retlw	0
  5528  0931  3400               	retlw	0
  5529  0932  3400               	retlw	0
  5530  0933  3480               	retlw	128
  5531  0934  343F               	retlw	63
  5532  0935  34F0               	retlw	240
  5533  0936  34FF               	retlw	255
  5534  0937  34BE               	retlw	190
  5535  0938  34E2               	retlw	226
  5536  0939  34A9               	retlw	169
  5537  093A  343E               	retlw	62
  5538  093B  3483               	retlw	131
  5539  093C  3476               	retlw	118
  5540  093D  34BE               	retlw	190
  5541  093E  34AE               	retlw	174
  5542  093F  342B               	retlw	43
  5543  0940  343E               	retlw	62
  5544  0941  343C               	retlw	60
  5545  0942  34C3               	retlw	195
  5546  0943  34BD               	retlw	189
  5547  0944  34D2               	retlw	210
  5548  0945  3413               	retlw	19
  5549  0946  343D               	retlw	61
  5550  0947  3478               	retlw	120
  5551  0948  34D3               	retlw	211
  5552  0949  34BB               	retlw	187
  5553  094A                     __end_oflog@coeff:	
  5554  0016                     _LATA	set	22
  5555  0016                     _LATAbits	set	22
  5556  0017                     _LATB	set	23
  5557  0018                     _LATC	set	24
  5558  0011                     _TRISA	set	17
  5559  0011                     _TRISAbits	set	17
  5560  0012                     _TRISB	set	18
  5561  0013                     _TRISC	set	19
  5562  005F                     _GIE	set	95
  5563  00B5                     _LATA5	set	181
  5564  006A                     _RB2	set	106
  5565  009D                     _ADACQ	set	157
  5566  0099                     _ADACT	set	153
  5567  009B                     _ADCAP	set	155
  5568  0098                     _ADCLK	set	152
  5569  0093                     _ADCON0	set	147
  5570  0093                     _ADCON0bits	set	147
  5571  0094                     _ADCON1	set	148
  5572  0095                     _ADCON2	set	149
  5573  0096                     _ADCON3	set	150
  5574  009E                     _ADPCH	set	158
  5575  009C                     _ADPRE	set	156
  5576  009A                     _ADREF	set	154
  5577  008D                     _ADRESH	set	141
  5578  008C                     _ADRESL	set	140
  5579  0097                     _ADSTAT	set	151
  5580  010F                     _ADLTHH	set	271
  5581  010E                     _ADLTHL	set	270
  5582  010D                     _ADRPT	set	269
  5583  0113                     _ADSTPTH	set	275
  5584  0112                     _ADSTPTL	set	274
  5585  0111                     _ADUTHH	set	273
  5586  0110                     _ADUTHL	set	272
  5587  021F                     _CCPTMRS1bits	set	543
  5588  0290                     _T2CLKCON	set	656
  5589  028E                     _T2CON	set	654
  5590  028E                     _T2CONbits	set	654
  5591  028F                     _T2HLT	set	655
  5592  028D                     _T2PR	set	653
  5593  0291                     _T2RST	set	657
  5594  028C                     _T2TMR	set	652
  5595  0296                     _T4CLKCON	set	662
  5596  0294                     _T4CON	set	660
  5597  0294                     _T4CONbits	set	660
  5598  0295                     _T4HLT	set	661
  5599  0293                     _T4PR	set	659
  5600  0297                     _T4RST	set	663
  5601  0292                     _T4TMR	set	658
  5602  038E                     _PWM6CON	set	910
  5603  038D                     _PWM6DCH	set	909
  5604  038C                     _PWM6DCL	set	908
  5605  0392                     _PWM7CON	set	914
  5606  0391                     _PWM7DCH	set	913
  5607  0390                     _PWM7DCL	set	912
  5608  0716                     _PIE0bits	set	1814
  5609  0710                     _PIR4bits	set	1808
  5610  088D                     _OSCCON1	set	2189
  5611  088F                     _OSCCON3	set	2191
  5612  0891                     _OSCEN	set	2193
  5613  0893                     _OSCFRQ	set	2195
  5614  0892                     _OSCTUNE	set	2194
  5615  090C                     _FVRCON	set	2316
  5616  0E8F                     _PPSLOCK	set	3727
  5617  0E8F                     _PPSLOCKbits	set	3727
  5618  0F38                     _ANSELA	set	3896
  5619  0F43                     _ANSELB	set	3907
  5620  0F4E                     _ANSELC	set	3918
  5621  0F16                     _RA6PPS	set	3862
  5622  0F17                     _RA7PPS	set	3863
  5623  0F18                     _RB0PPS	set	3864
  5624  0F39                     _WPUA	set	3897
  5625  0F44                     _WPUB	set	3908
  5626  0F4F                     _WPUC	set	3919
  5627  0F65                     _WPUE	set	3941
  5628  094A                     STR_3:	
  5629  094A  3452               	retlw	82	;'R'
  5630  094B  3465               	retlw	101	;'e'
  5631  094C  3466               	retlw	102	;'f'
  5632  094D  343A               	retlw	58	;':'
  5633  094E  3400               	retlw	0
  5634  094F                     STR_2:	
  5635  094F  344F               	retlw	79	;'O'
  5636  0950  3475               	retlw	117	;'u'
  5637  0951  3474               	retlw	116	;'t'
  5638  0952  343A               	retlw	58	;':'
  5639  0953  3400               	retlw	0
  5640  0954                     STR_1:	
  5641  0954  3449               	retlw	73	;'I'
  5642  0955  346E               	retlw	110	;'n'
  5643  0956  343A               	retlw	58	;':'
  5644  0957  3400               	retlw	0
  5645                           
  5646                           ; #config settings
  5647  0000                     
  5648                           	psect	cinit
  5649  07BD                     start_initialization:	
  5650  07BD                     __initialization:		;BIGRAM
  5651                           
  5652                           ; Initialize objects allocated to BANK1
  5653  07BD  0021               	movlb	1	; select bank1
  5654  07BE  3180  2007  3187   	fcall	__pidataBANK1	;fetch initializer
  5655  07C1  00EC               	movwf	__pdataBANK1& (0+127)
  5656  07C2  3180  2008  3187   	fcall	__pidataBANK1+1	;fetch initializer
  5657  07C5  00ED               	movwf	(__pdataBANK1+1)& (0+127)
  5658                           
  5659                           ; Initialize objects allocated to BANK2
  5660  07C6  3067               	movlw	low __pidataBANK2
  5661  07C7  0084               	movwf	4
  5662  07C8  3091               	movlw	(high __pidataBANK2)| (0+128)
  5663  07C9  0085               	movwf	5
  5664  07CA  0022               	movlb	2	; select bank2
  5665  07CB  0012               	moviw fsr0++
  5666  07CC  00B0               	movwf	__pdataBANK2& (0+127)
  5667  07CD  0012               	moviw fsr0++
  5668  07CE  00B1               	movwf	(__pdataBANK2+1)& (0+127)
  5669  07CF  0012               	moviw fsr0++
  5670  07D0  00B2               	movwf	(__pdataBANK2+2)& (0+127)
  5671  07D1  0012               	moviw fsr0++
  5672  07D2  00B3               	movwf	(__pdataBANK2+3)& (0+127)
  5673  07D3  0012               	moviw fsr0++
  5674  07D4  00B4               	movwf	(__pdataBANK2+4)& (0+127)
  5675  07D5  0012               	moviw fsr0++
  5676  07D6  00B5               	movwf	(__pdataBANK2+5)& (0+127)
  5677  07D7  0012               	moviw fsr0++
  5678  07D8  00B6               	movwf	(__pdataBANK2+6)& (0+127)
  5679  07D9  0012               	moviw fsr0++
  5680  07DA  00B7               	movwf	(__pdataBANK2+7)& (0+127)
  5681                           
  5682                           ; Clear objects allocated to BIGRAM
  5683  07DB  3060               	movlw	low (0+8800)
  5684  07DC  0084               	movwf	4
  5685  07DD  3022               	movlw	high (0+8800)
  5686  07DE  0085               	movwf	5
  5687  07DF  3090               	movlw	144
  5688  07E0  00FE               	movwf	btemp
  5689  07E1  3001               	movlw	1
  5690  07E2  00FF               	movwf	btemp+1
  5691  07E3  3191  2178  3187   	fcall	clear_ram0
  5692                           
  5693                           ; Clear objects allocated to BANK0
  5694  07E6  0020               	movlb	0	; select bank0
  5695  07E7  01EF               	clrf	__pbssBANK0& (0+127)
  5696                           
  5697                           ; Clear objects allocated to BANK1
  5698  07E8  30A0               	movlw	low __pbssBANK1
  5699  07E9  0084               	movwf	4
  5700  07EA  3000               	movlw	high __pbssBANK1
  5701  07EB  0085               	movwf	5
  5702  07EC  304C               	movlw	76
  5703  07ED  00FE               	movwf	btemp
  5704  07EE  3000               	movlw	0
  5705  07EF  00FF               	movwf	btemp+1
  5706  07F0  3191  2178  3187   	fcall	clear_ram0
  5707                           
  5708                           ; Clear objects allocated to BANK2
  5709  07F3  3020               	movlw	low __pbssBANK2
  5710  07F4  0084               	movwf	4
  5711  07F5  3001               	movlw	high __pbssBANK2
  5712  07F6  0085               	movwf	5
  5713  07F7  3010               	movlw	16
  5714  07F8  00FE               	movwf	btemp
  5715  07F9  3000               	movlw	0
  5716  07FA  00FF               	movwf	btemp+1
  5717  07FB  3191  2178         	fcall	clear_ram0
  5718  07FD                     end_of_initialization:	
  5719                           ;End of C runtime variable initialization code
  5720                           
  5721  07FD                     __end_of__initialization:	
  5722  07FD  0020               	movlb	0
  5723  07FE  3182  2AC3         	ljmp	_main	;jump to C main() function
  5724                           
  5725                           	psect	bssBANK0
  5726  006F                     __pbssBANK0:	
  5727  006F                     _button:	
  5728  006F                     	ds	1
  5729                           
  5730                           	psect	bssBANK1
  5731  00A0                     __pbssBANK1:	
  5732  00A0                     _Ianalogs:	
  5733  00A0                     	ds	8
  5734  00A8                     _Vanalogs:	
  5735  00A8                     	ds	8
  5736  00B0                     _current:	
  5737  00B0                     	ds	8
  5738  00B8                     _voltage:	
  5739  00B8                     	ds	8
  5740  00C0                     LCDWriteInt@F13688:	
  5741  00C0                     	ds	5
  5742  00C5                     _Imin:	
  5743  00C5                     	ds	4
  5744  00C9                     _IminCount:	
  5745  00C9                     	ds	4
  5746  00CD                     _Iref:	
  5747  00CD                     	ds	4
  5748  00D1                     _Vref:	
  5749  00D1                     	ds	4
  5750  00D5                     _stateCounter:	
  5751  00D5                     	ds	4
  5752  00D9                     _Imode:	
  5753  00D9                     	ds	2
  5754  00DB                     _Iout:	
  5755  00DB                     	ds	2
  5756  00DD                     _VHoldMode:	
  5757  00DD                     	ds	2
  5758  00DF                     _batteryState:	
  5759  00DF                     	ds	2
  5760  00E1                     _cc_cv:	
  5761  00E1                     	ds	2
  5762  00E3                     _errno:	
  5763  00E3                     	ds	2
  5764  00E5                     _readButtons:	
  5765  00E5                     	ds	2
  5766  00E7                     _sampleIndex:	
  5767  00E7                     	ds	2
  5768  00E9                     _j:	
  5769  00E9                     	ds	1
  5770  00EA                     _lastButton:	
  5771  00EA                     	ds	1
  5772  00EB                     _x:	
  5773  00EB                     	ds	1
  5774                           
  5775                           	psect	dataBANK1
  5776  00EC                     __pdataBANK1:	
  5777  00EC                     _batteryTemp:	
  5778  00EC                     	ds	2
  5779                           
  5780                           	psect	bssBANK2
  5781  0120                     __pbssBANK2:	
  5782  0120                     _totals:	
  5783  0120                     	ds	16
  5784                           
  5785                           	psect	dataBANK2
  5786  0130                     __pdataBANK2:	
  5787  0130                     _channels:	
  5788  0130                     	ds	8
  5789                           
  5790                           	psect	clrtext
  5791  1178                     clear_ram0:	
  5792                           ;	Called with FSR0 containing the base address, and
  5793                           ;	btemp/btemp+1 has the size to clear
  5794                           
  5795  1178  0064               	clrwdt	;clear the watchdog before getting into this loop
  5796  1179                     clrloop0:	
  5797  1179  0180               	clrf	0	;clear RAM location pointed to by FSR
  5798  117A  3101               	addfsr 0,1
  5799  117B  3001               	movlw	1
  5800  117C  02FE               	subwf	126,f
  5801  117D  3000               	movlw	0
  5802  117E  3BFF               	subwfb	127,f
  5803  117F  087F               	movf	127,w
  5804  1180  047E               	iorwf	126,w
  5805  1181  1903               	btfsc	3,2
  5806  1182  3400               	retlw	0	;all done for this memory range, return
  5807  1183  2979               	goto	clrloop0	;have we reached the end yet?
  5808                           
  5809                           	psect	cstackCOMMON
  5810  0070                     __pcstackCOMMON:	
  5811  0070                     ?___ftge:	
  5812  0070                     ?_SYSTEM_Initialize:	
  5813                           ; 1 bit 
  5814                           
  5815  0070                     ?_LCDClear:	
  5816                           ; 1 bytes @ 0x0
  5817                           
  5818  0070                     ?_PWM6_LoadDutyValue:	
  5819                           ; 1 bytes @ 0x0
  5820                           
  5821  0070                     ?_PWM7_LoadDutyValue:	
  5822                           ; 1 bytes @ 0x0
  5823                           
  5824  0070                     ?_readButton:	
  5825                           ; 1 bytes @ 0x0
  5826                           
  5827  0070                     ?_LCDInit:	
  5828                           ; 1 bytes @ 0x0
  5829                           
  5830  0070                     ?_Battery_State_Machine:	
  5831                           ; 1 bytes @ 0x0
  5832                           
  5833  0070                     ?_LCDWriteCharacter:	
  5834                           ; 1 bytes @ 0x0
  5835                           
  5836  0070                     ?_cc_cv_mode:	
  5837                           ; 1 bytes @ 0x0
  5838                           
  5839  0070                     ?_calculateCurrent0:	
  5840                           ; 1 bytes @ 0x0
  5841                           
  5842  0070                     ?_calculateCurrent1:	
  5843                           ; 1 bytes @ 0x0
  5844                           
  5845  0070                     ?_calculateCurrent2:	
  5846                           ; 1 bytes @ 0x0
  5847                           
  5848  0070                     ?_calculateCurrent3:	
  5849                           ; 1 bytes @ 0x0
  5850                           
  5851  0070                     ?_LCDWrite:	
  5852                           ; 1 bytes @ 0x0
  5853                           
  5854  0070                     ?_OSCILLATOR_Initialize:	
  5855                           ; 1 bytes @ 0x0
  5856                           
  5857  0070                     ??_OSCILLATOR_Initialize:	
  5858                           ; 1 bytes @ 0x0
  5859                           
  5860  0070                     ?_TMR2_Initialize:	
  5861                           ; 1 bytes @ 0x0
  5862                           
  5863  0070                     ??_TMR2_Initialize:	
  5864                           ; 1 bytes @ 0x0
  5865                           
  5866  0070                     ?_TMR4_Initialize:	
  5867                           ; 1 bytes @ 0x0
  5868                           
  5869  0070                     ??_TMR4_Initialize:	
  5870                           ; 1 bytes @ 0x0
  5871                           
  5872  0070                     ?_main:	
  5873                           ; 1 bytes @ 0x0
  5874                           
  5875  0070                     ?_ADC_Initialize:	
  5876                           ; 1 bytes @ 0x0
  5877                           
  5878  0070                     ??_ADC_Initialize:	
  5879                           ; 1 bytes @ 0x0
  5880                           
  5881  0070                     ?_Init_Battery_State_Machine:	
  5882                           ; 1 bytes @ 0x0
  5883                           
  5884  0070                     ?_PIN_MANAGER_Initialize:	
  5885                           ; 1 bytes @ 0x0
  5886                           
  5887  0070                     ??_PIN_MANAGER_Initialize:	
  5888                           ; 1 bytes @ 0x0
  5889                           
  5890  0070                     ?_PWM_Initialize:	
  5891                           ; 1 bytes @ 0x0
  5892                           
  5893  0070                     ??_PWM_Initialize:	
  5894                           ; 1 bytes @ 0x0
  5895                           
  5896  0070                     ?_ADCRead:	
  5897                           ; 1 bytes @ 0x0
  5898                           
  5899  0070                     ?___wmul:	
  5900                           ; 2 bytes @ 0x0
  5901                           
  5902  0070                     ?___awdiv:	
  5903                           ; 2 bytes @ 0x0
  5904                           
  5905  0070                     ?___lwmod:	
  5906                           ; 2 bytes @ 0x0
  5907                           
  5908  0070                     ?___ftpack:	
  5909                           ; 2 bytes @ 0x0
  5910                           
  5911  0070                     ?_frexp:	
  5912                           ; 3 bytes @ 0x0
  5913                           
  5914  0070                     ?___aldiv:	
  5915                           ; 3 bytes @ 0x0
  5916                           
  5917  0070                     LCDWrite@data:	
  5918                           ; 4 bytes @ 0x0
  5919                           
  5920  0070                     PIN_MANAGER_Initialize@state:	
  5921                           ; 1 bytes @ 0x0
  5922                           
  5923  0070                     PWM6_LoadDutyValue@dutyCycle6:	
  5924                           ; 1 bytes @ 0x0
  5925                           
  5926  0070                     PWM7_LoadDutyValue@dutyCycle7:	
  5927                           ; 2 bytes @ 0x0
  5928                           
  5929  0070                     ___wmul@multiplier:	
  5930                           ; 2 bytes @ 0x0
  5931                           
  5932  0070                     ___awdiv@divisor:	
  5933                           ; 2 bytes @ 0x0
  5934                           
  5935  0070                     ___lwmod@divisor:	
  5936                           ; 2 bytes @ 0x0
  5937                           
  5938  0070                     ___ftpack@arg:	
  5939                           ; 2 bytes @ 0x0
  5940                           
  5941  0070                     ___ftge@ff1:	
  5942                           ; 3 bytes @ 0x0
  5943                           
  5944  0070                     frexp@value:	
  5945                           ; 3 bytes @ 0x0
  5946                           
  5947  0070                     ___aldiv@divisor:	
  5948                           ; 3 bytes @ 0x0
  5949                           
  5950                           
  5951                           ; 4 bytes @ 0x0
  5952  0070                     	ds	1
  5953  0071                     ??_LCDWrite:	
  5954                           
  5955                           ; 1 bytes @ 0x1
  5956  0071                     	ds	1
  5957  0072                     ??_PWM6_LoadDutyValue:	
  5958  0072                     ??_PWM7_LoadDutyValue:	
  5959                           ; 1 bytes @ 0x2
  5960                           
  5961  0072                     LCDWrite@data_or_command:	
  5962                           ; 1 bytes @ 0x2
  5963                           
  5964  0072                     ___wmul@multiplicand:	
  5965                           ; 1 bytes @ 0x2
  5966                           
  5967  0072                     ___awdiv@dividend:	
  5968                           ; 2 bytes @ 0x2
  5969                           
  5970  0072                     ___lwmod@dividend:	
  5971                           ; 2 bytes @ 0x2
  5972                           
  5973                           
  5974                           ; 2 bytes @ 0x2
  5975  0072                     	ds	1
  5976  0073                     ??_ADCRead:	
  5977  0073                     ADCRead@channel:	
  5978                           ; 1 bytes @ 0x3
  5979                           
  5980  0073                     LCDWrite@d:	
  5981                           ; 1 bytes @ 0x3
  5982                           
  5983  0073                     ___ftpack@exp:	
  5984                           ; 1 bytes @ 0x3
  5985                           
  5986  0073                     frexp@eptr:	
  5987                           ; 1 bytes @ 0x3
  5988                           
  5989  0073                     ___ftge@ff2:	
  5990                           ; 1 bytes @ 0x3
  5991                           
  5992                           
  5993                           ; 3 bytes @ 0x3
  5994  0073                     	ds	1
  5995  0074                     ??_readButton:	
  5996  0074                     ??_frexp:	
  5997                           ; 1 bytes @ 0x4
  5998                           
  5999  0074                     ??___wmul:	
  6000                           ; 1 bytes @ 0x4
  6001                           
  6002  0074                     ??___awdiv:	
  6003                           ; 1 bytes @ 0x4
  6004                           
  6005  0074                     ??___lwmod:	
  6006                           ; 1 bytes @ 0x4
  6007                           
  6008  0074                     LCDWrite@i:	
  6009                           ; 1 bytes @ 0x4
  6010                           
  6011  0074                     ___ftpack@sign:	
  6012                           ; 1 bytes @ 0x4
  6013                           
  6014  0074                     ___wmul@product:	
  6015                           ; 1 bytes @ 0x4
  6016                           
  6017  0074                     ___aldiv@dividend:	
  6018                           ; 2 bytes @ 0x4
  6019                           
  6020                           
  6021                           ; 4 bytes @ 0x4
  6022  0074                     	ds	1
  6023  0075                     ??_LCDInit:	
  6024  0075                     ?_gotoXY:	
  6025                           ; 1 bytes @ 0x5
  6026                           
  6027  0075                     ??___ftpack:	
  6028                           ; 1 bytes @ 0x5
  6029                           
  6030  0075                     gotoXY@y:	
  6031                           ; 1 bytes @ 0x5
  6032                           
  6033  0075                     ___awdiv@counter:	
  6034                           ; 1 bytes @ 0x5
  6035                           
  6036  0075                     ___lwmod@counter:	
  6037                           ; 1 bytes @ 0x5
  6038                           
  6039                           
  6040                           ; 1 bytes @ 0x5
  6041  0075                     	ds	1
  6042  0076                     ??_gotoXY:	
  6043  0076                     ??_LCDWriteCharacter:	
  6044                           ; 1 bytes @ 0x6
  6045                           
  6046  0076                     ??___ftge:	
  6047                           ; 1 bytes @ 0x6
  6048                           
  6049  0076                     ___awdiv@sign:	
  6050                           ; 1 bytes @ 0x6
  6051                           
  6052                           
  6053                           ; 1 bytes @ 0x6
  6054  0076                     	ds	1
  6055  0077                     gotoXY@x:	
  6056  0077                     ___awdiv@quotient:	
  6057                           ; 1 bytes @ 0x7
  6058                           
  6059                           
  6060                           ; 2 bytes @ 0x7
  6061  0077                     	ds	1
  6062  0078                     ??_LCDClear:	
  6063  0078                     ??___aldiv:	
  6064                           ; 1 bytes @ 0x8
  6065                           
  6066  0078                     ?___awtoft:	
  6067                           ; 1 bytes @ 0x8
  6068                           
  6069  0078                     ___awtoft@c:	
  6070                           ; 3 bytes @ 0x8
  6071                           
  6072                           
  6073                           ; 2 bytes @ 0x8
  6074  0078                     	ds	1
  6075  0079                     LCDWriteCharacter@character:	
  6076  0079                     readIAnalog@analog_channel:	
  6077                           ; 1 bytes @ 0x9
  6078                           
  6079  0079                     LCDClear@index:	
  6080                           ; 2 bytes @ 0x9
  6081                           
  6082                           
  6083                           ; 2 bytes @ 0x9
  6084  0079                     	ds	1
  6085  007A                     LCDWriteCharacter@base:	
  6086                           
  6087                           ; 2 bytes @ 0xA
  6088  007A                     	ds	1
  6089  007B                     ??___awtoft:	
  6090  007B                     readIAnalog@value:	
  6091                           ; 1 bytes @ 0xB
  6092                           
  6093                           
  6094                           ; 2 bytes @ 0xB
  6095  007B                     	ds	1
  6096  007C                     ?_LCDWriteString:	
  6097  007C                     LCDWriteString@characters:	
  6098                           ; 1 bytes @ 0xC
  6099                           
  6100                           
  6101                           ; 2 bytes @ 0xC
  6102  007C                     	ds	1
  6103  007D                     ___awtoft@sign:	
  6104                           
  6105                           ; 1 bytes @ 0xD
  6106  007D                     	ds	1
  6107  007E                     ??_tempCalc:	
  6108  007E                     ??_eval_poly:	
  6109                           ; 1 bytes @ 0xE
  6110                           
  6111  007E                     ??___ftsub:	
  6112                           ; 1 bytes @ 0xE
  6113                           
  6114                           
  6115                           	psect	cstackBANK0
  6116  0020                     __pcstackBANK0:	
  6117                           ; 1 bytes @ 0xE
  6118                           
  6119  0020                     ??_LCDWriteString:	
  6120  0020                     ?_LCDWriteInt:	
  6121                           ; 1 bytes @ 0x0
  6122                           
  6123  0020                     ?___ftdiv:	
  6124                           ; 1 bytes @ 0x0
  6125                           
  6126  0020                     ?___ftmul:	
  6127                           ; 3 bytes @ 0x0
  6128                           
  6129  0020                     ___aldiv@counter:	
  6130                           ; 3 bytes @ 0x0
  6131                           
  6132  0020                     LCDWriteInt@value:	
  6133                           ; 1 bytes @ 0x0
  6134                           
  6135  0020                     ___ftdiv@f2:	
  6136                           ; 2 bytes @ 0x0
  6137                           
  6138  0020                     ___ftmul@f1:	
  6139                           ; 3 bytes @ 0x0
  6140                           
  6141                           
  6142                           ; 3 bytes @ 0x0
  6143  0020                     	ds	1
  6144  0021                     ___aldiv@sign:	
  6145                           
  6146                           ; 1 bytes @ 0x1
  6147  0021                     	ds	1
  6148  0022                     LCDWriteInt@fieldLength:	
  6149  0022                     ___aldiv@quotient:	
  6150                           ; 1 bytes @ 0x2
  6151                           
  6152                           
  6153                           ; 4 bytes @ 0x2
  6154  0022                     	ds	1
  6155  0023                     LCDWriteInt@numPlaces:	
  6156  0023                     ___ftdiv@f1:	
  6157                           ; 1 bytes @ 0x3
  6158                           
  6159  0023                     ___ftmul@f2:	
  6160                           ; 3 bytes @ 0x3
  6161                           
  6162                           
  6163                           ; 3 bytes @ 0x3
  6164  0023                     	ds	1
  6165  0024                     LCDWriteInt@sign:	
  6166                           
  6167                           ; 1 bytes @ 0x4
  6168  0024                     	ds	1
  6169  0025                     ??_LCDWriteInt:	
  6170                           
  6171                           ; 1 bytes @ 0x5
  6172  0025                     	ds	1
  6173  0026                     ??___ftdiv:	
  6174  0026                     ??___ftmul:	
  6175                           ; 1 bytes @ 0x6
  6176                           
  6177  0026                     ?_readIAnalog:	
  6178                           ; 1 bytes @ 0x6
  6179                           
  6180  0026                     readIAnalog@channel:	
  6181                           ; 2 bytes @ 0x6
  6182                           
  6183                           
  6184                           ; 2 bytes @ 0x6
  6185  0026                     	ds	2
  6186  0028                     ??_readIAnalog:	
  6187                           
  6188                           ; 1 bytes @ 0x8
  6189  0028                     	ds	1
  6190  0029                     LCDWriteInt@str:	
  6191                           
  6192                           ; 5 bytes @ 0x9
  6193  0029                     	ds	1
  6194  002A                     ___ftdiv@cntr:	
  6195  002A                     ___ftmul@exp:	
  6196                           ; 1 bytes @ 0xA
  6197                           
  6198                           
  6199                           ; 1 bytes @ 0xA
  6200  002A                     	ds	1
  6201  002B                     ___ftdiv@f3:	
  6202  002B                     ___ftmul@f3_as_product:	
  6203                           ; 3 bytes @ 0xB
  6204                           
  6205                           
  6206                           ; 3 bytes @ 0xB
  6207  002B                     	ds	3
  6208  002E                     LCDWriteInt@j:	
  6209  002E                     ___ftdiv@exp:	
  6210                           ; 1 bytes @ 0xE
  6211                           
  6212  002E                     ___ftmul@cntr:	
  6213                           ; 1 bytes @ 0xE
  6214                           
  6215                           
  6216                           ; 1 bytes @ 0xE
  6217  002E                     	ds	1
  6218  002F                     LCDWriteInt@i:	
  6219  002F                     ___ftdiv@sign:	
  6220                           ; 1 bytes @ 0xF
  6221                           
  6222  002F                     ___ftmul@sign:	
  6223                           ; 1 bytes @ 0xF
  6224                           
  6225                           
  6226                           ; 1 bytes @ 0xF
  6227  002F                     	ds	1
  6228  0030                     ?___ftadd:	
  6229  0030                     ?___fttol:	
  6230                           ; 3 bytes @ 0x10
  6231                           
  6232  0030                     ___ftadd@f1:	
  6233                           ; 4 bytes @ 0x10
  6234                           
  6235  0030                     ___fttol@f1:	
  6236                           ; 3 bytes @ 0x10
  6237                           
  6238                           
  6239                           ; 3 bytes @ 0x10
  6240  0030                     	ds	3
  6241  0033                     ___ftadd@f2:	
  6242                           
  6243                           ; 3 bytes @ 0x13
  6244  0033                     	ds	1
  6245  0034                     ??___fttol:	
  6246                           
  6247                           ; 1 bytes @ 0x14
  6248  0034                     	ds	2
  6249  0036                     ??___ftadd:	
  6250                           
  6251                           ; 1 bytes @ 0x16
  6252  0036                     	ds	2
  6253  0038                     ___fttol@sign1:	
  6254                           
  6255                           ; 1 bytes @ 0x18
  6256  0038                     	ds	1
  6257  0039                     ___fttol@lval:	
  6258                           
  6259                           ; 4 bytes @ 0x19
  6260  0039                     	ds	1
  6261  003A                     ___ftadd@sign:	
  6262                           
  6263                           ; 1 bytes @ 0x1A
  6264  003A                     	ds	1
  6265  003B                     ___ftadd@exp2:	
  6266                           
  6267                           ; 1 bytes @ 0x1B
  6268  003B                     	ds	1
  6269  003C                     ___ftadd@exp1:	
  6270                           
  6271                           ; 1 bytes @ 0x1C
  6272  003C                     	ds	1
  6273  003D                     ?_eval_poly:	
  6274  003D                     ?___ftsub:	
  6275                           ; 3 bytes @ 0x1D
  6276                           
  6277  003D                     ___fttol@exp1:	
  6278                           ; 3 bytes @ 0x1D
  6279                           
  6280  003D                     ___ftsub@f2:	
  6281                           ; 1 bytes @ 0x1D
  6282                           
  6283  003D                     eval_poly@x:	
  6284                           ; 3 bytes @ 0x1D
  6285                           
  6286                           
  6287                           ; 3 bytes @ 0x1D
  6288  003D                     	ds	1
  6289  003E                     ??_Battery_State_Machine:	
  6290  003E                     ??_cc_cv_mode:	
  6291                           ; 1 bytes @ 0x1E
  6292                           
  6293  003E                     ??_calculateCurrent0:	
  6294                           ; 1 bytes @ 0x1E
  6295                           
  6296  003E                     ??_calculateCurrent1:	
  6297                           ; 1 bytes @ 0x1E
  6298                           
  6299  003E                     ??_calculateCurrent2:	
  6300                           ; 1 bytes @ 0x1E
  6301                           
  6302  003E                     ??_calculateCurrent3:	
  6303                           ; 1 bytes @ 0x1E
  6304                           
  6305  003E                     ??_Init_Battery_State_Machine:	
  6306                           ; 1 bytes @ 0x1E
  6307                           
  6308                           
  6309                           ; 1 bytes @ 0x1E
  6310  003E                     	ds	2
  6311  0040                     eval_poly@d:	
  6312  0040                     ___ftsub@f1:	
  6313                           ; 2 bytes @ 0x20
  6314                           
  6315                           
  6316                           ; 3 bytes @ 0x20
  6317  0040                     	ds	2
  6318  0042                     Init_Battery_State_Machine@z:	
  6319  0042                     eval_poly@n:	
  6320                           ; 1 bytes @ 0x22
  6321                           
  6322                           
  6323                           ; 2 bytes @ 0x22
  6324  0042                     	ds	1
  6325  0043                     ??_SYSTEM_Initialize:	
  6326  0043                     Battery_State_Machine@z:	
  6327                           ; 1 bytes @ 0x23
  6328                           
  6329                           
  6330                           ; 1 bytes @ 0x23
  6331  0043                     	ds	1
  6332  0044                     eval_poly@res:	
  6333                           
  6334                           ; 3 bytes @ 0x24
  6335  0044                     	ds	1
  6336  0045                     cc_cv_mode@z:	
  6337                           
  6338                           ; 1 bytes @ 0x25
  6339  0045                     	ds	2
  6340  0047                     ?_log:	
  6341  0047                     log@x:	
  6342                           ; 3 bytes @ 0x27
  6343                           
  6344                           
  6345                           ; 3 bytes @ 0x27
  6346  0047                     	ds	3
  6347  004A                     ??_log:	
  6348                           
  6349                           ; 1 bytes @ 0x2A
  6350  004A                     	ds	1
  6351  004B                     log@exponent:	
  6352                           
  6353                           ; 2 bytes @ 0x2B
  6354  004B                     	ds	2
  6355  004D                     ?_tempCalc:	
  6356  004D                     tempCalc@analogValue:	
  6357                           ; 2 bytes @ 0x2D
  6358                           
  6359                           
  6360                           ; 2 bytes @ 0x2D
  6361  004D                     	ds	2
  6362  004F                     tempCalc@R:	
  6363                           
  6364                           ; 3 bytes @ 0x2F
  6365  004F                     	ds	3
  6366  0052                     _tempCalc$1190:	
  6367                           
  6368                           ; 3 bytes @ 0x32
  6369  0052                     	ds	3
  6370  0055                     tempCalc@steinhart:	
  6371                           
  6372                           ; 3 bytes @ 0x35
  6373  0055                     	ds	3
  6374  0058                     ??_main:	
  6375                           
  6376                           ; 1 bytes @ 0x38
  6377  0058                     	ds	2
  6378  005A                     main@efficiency:	
  6379                           
  6380                           ; 3 bytes @ 0x3A
  6381  005A                     	ds	3
  6382  005D                     main@IOutTotal:	
  6383                           
  6384                           ; 2 bytes @ 0x3D
  6385  005D                     	ds	2
  6386  005F                     main@faultCount:	
  6387                           
  6388                           ; 2 bytes @ 0x3F
  6389  005F                     	ds	2
  6390  0061                     main@faultNotReset:	
  6391                           
  6392                           ; 2 bytes @ 0x41
  6393  0061                     	ds	2
  6394  0063                     main@slowLoop:	
  6395                           
  6396                           ; 1 bytes @ 0x43
  6397  0063                     	ds	1
  6398  0064                     main@displayRefresh:	
  6399                           
  6400                           ; 1 bytes @ 0x44
  6401  0064                     	ds	1
  6402  0065                     main@MPPT0:	
  6403                           
  6404                           ; 2 bytes @ 0x45
  6405  0065                     	ds	2
  6406  0067                     main@MPPT1:	
  6407                           
  6408                           ; 2 bytes @ 0x47
  6409  0067                     	ds	2
  6410  0069                     main@menuButton:	
  6411                           
  6412                           ; 1 bytes @ 0x49
  6413  0069                     	ds	1
  6414  006A                     main@j:	
  6415                           
  6416                           ; 1 bytes @ 0x4A
  6417  006A                     	ds	1
  6418  006B                     main@dutyCycle6:	
  6419                           
  6420                           ; 2 bytes @ 0x4B
  6421  006B                     	ds	2
  6422  006D                     main@dutyCycle7:	
  6423                           
  6424                           ; 2 bytes @ 0x4D
  6425  006D                     	ds	2
  6426                           
  6427                           	psect	maintext
  6428  02C3                     __pmaintext:	
  6429 ;;
  6430 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  6431 ;;
  6432 ;; *************** function _main *****************
  6433 ;; Defined at:
  6434 ;;		line 42 in file "main.c"
  6435 ;; Parameters:    Size  Location     Type
  6436 ;;		None
  6437 ;; Auto vars:     Size  Location     Type
  6438 ;;  efficiency      3   58[BANK0 ] float 
  6439 ;;  dutyCycle7      2   77[BANK0 ] unsigned int 
  6440 ;;  dutyCycle6      2   75[BANK0 ] unsigned int 
  6441 ;;  MPPT1           2   71[BANK0 ] int 
  6442 ;;  MPPT0           2   69[BANK0 ] int 
  6443 ;;  faultNotRese    2   65[BANK0 ] unsigned int 
  6444 ;;  faultCount      2   63[BANK0 ] unsigned int 
  6445 ;;  IOutTotal       2   61[BANK0 ] int 
  6446 ;;  j               1   74[BANK0 ] unsigned char 
  6447 ;;  menuButton      1   73[BANK0 ] unsigned char 
  6448 ;;  displayRefre    1   68[BANK0 ] unsigned char 
  6449 ;;  slowLoop        1   67[BANK0 ] unsigned char 
  6450 ;; Return value:  Size  Location     Type
  6451 ;;                  1    wreg      void 
  6452 ;; Registers used:
  6453 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6454 ;; Tracked objects:
  6455 ;;		On entry : B1F/0
  6456 ;;		On exit  : 0/0
  6457 ;;		Unchanged: 0/0
  6458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6460 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6461 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6462 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6463 ;;Total ram usage:       23 bytes
  6464 ;; Hardware stack levels required when called:    5
  6465 ;; This function calls:
  6466 ;;		_ADCRead
  6467 ;;		_Battery_State_Machine
  6468 ;;		_LCDClear
  6469 ;;		_LCDInit
  6470 ;;		_LCDWriteCharacter
  6471 ;;		_LCDWriteInt
  6472 ;;		_LCDWriteString
  6473 ;;		_PWM6_LoadDutyValue
  6474 ;;		_PWM7_LoadDutyValue
  6475 ;;		_SYSTEM_Initialize
  6476 ;;		___awtoft
  6477 ;;		___ftdiv
  6478 ;;		___fttol
  6479 ;;		_calculateCurrent0
  6480 ;;		_calculateCurrent1
  6481 ;;		_calculateCurrent2
  6482 ;;		_calculateCurrent3
  6483 ;;		_cc_cv_mode
  6484 ;;		_gotoXY
  6485 ;;		_readButton
  6486 ;;		_readIAnalog
  6487 ;;		_tempCalc
  6488 ;; This function is called by:
  6489 ;;		Startup code after reset
  6490 ;; This function uses a non-reentrant model
  6491 ;;
  6492                           
  6493                           
  6494                           ;psect for function _main
  6495  02C3                     _main:	
  6496                           
  6497                           ;main.c: 44: int16_t MPPT0 = 1525;
  6498                           
  6499                           ;incstack = 0
  6500                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6501  02C3  30F5               	movlw	245
  6502  02C4  0020               	movlb	0	; select bank0
  6503  02C5  00E5               	movwf	main@MPPT0
  6504  02C6  3005               	movlw	5
  6505  02C7  00E6               	movwf	main@MPPT0+1
  6506                           
  6507                           ;main.c: 45: int16_t MPPT1 = 1525;
  6508  02C8  30F5               	movlw	245
  6509  02C9  00E7               	movwf	main@MPPT1
  6510  02CA  3005               	movlw	5
  6511  02CB  00E8               	movwf	main@MPPT1+1
  6512                           
  6513                           ;main.c: 47: uint16_t dutyCycle6 = 1023;
  6514  02CC  30FF               	movlw	255
  6515  02CD  00EB               	movwf	main@dutyCycle6
  6516  02CE  3003               	movlw	3
  6517  02CF  00EC               	movwf	main@dutyCycle6+1
  6518                           
  6519                           ;main.c: 48: uint16_t dutyCycle7 = 1023;
  6520  02D0  30FF               	movlw	255
  6521  02D1  00ED               	movwf	main@dutyCycle7
  6522  02D2  3003               	movlw	3
  6523  02D3  00EE               	movwf	main@dutyCycle7+1
  6524                           
  6525                           ;main.c: 50: int16_t IOutTotal = 0;
  6526  02D4  01DD               	clrf	main@IOutTotal
  6527  02D5  01DE               	clrf	main@IOutTotal+1
  6528                           
  6529                           ;main.c: 51: uint8_t j = 0;
  6530  02D6  01EA               	clrf	main@j
  6531                           
  6532                           ;main.c: 52: uint8_t slowLoop = 200;
  6533  02D7  30C8               	movlw	200
  6534  02D8  00D8               	movwf	??_main
  6535  02D9  0858               	movf	??_main,w
  6536  02DA  00E3               	movwf	main@slowLoop
  6537                           
  6538                           ;main.c: 53: uint8_t displayRefresh = 0;
  6539  02DB  01E4               	clrf	main@displayRefresh
  6540                           
  6541                           ;main.c: 54: float efficiency = 0;
  6542  02DC  3000               	movlw	0
  6543  02DD  00DA               	movwf	main@efficiency
  6544  02DE  3000               	movlw	0
  6545  02DF  00DB               	movwf	main@efficiency+1
  6546  02E0  3000               	movlw	0
  6547  02E1  00DC               	movwf	main@efficiency+2
  6548                           
  6549                           ;main.c: 55: extern int8_t Imode[2];
  6550                           ;main.c: 56: extern int16_t Vref[2];
  6551                           ;main.c: 57: extern int16_t Iref[2];
  6552                           ;main.c: 58: uint8_t menuButton = 0;
  6553  02E2  01E9               	clrf	main@menuButton
  6554                           
  6555                           ;main.c: 59: uint16_t faultCount = 0;
  6556  02E3  01DF               	clrf	main@faultCount
  6557  02E4  01E0               	clrf	main@faultCount+1
  6558                           
  6559                           ;main.c: 60: uint16_t faultNotReset = 0;
  6560  02E5  01E1               	clrf	main@faultNotReset
  6561  02E6  01E2               	clrf	main@faultNotReset+1
  6562                           
  6563                           ;main.c: 61: extern int8_t VHoldMode[2];
  6564                           ;main.c: 62: extern uint8_t batteryState[2];
  6565                           ;main.c: 64: extern uint16_t IminCount[2];
  6566                           ;main.c: 67: SYSTEM_Initialize();
  6567  02E7  3193  23F4  3182   	fcall	_SYSTEM_Initialize
  6568                           
  6569                           ;main.c: 69: LCDClear();
  6570  02EA  3192  22BA  3182   	fcall	_LCDClear
  6571  02ED                     l3120:	
  6572                           ;main.c: 71: void calculateCurrent0(void);
  6573                           ;main.c: 72: void calculateCurrent1(void);
  6574                           ;main.c: 73: void calculateCurrent2(void);
  6575                           ;main.c: 74: void calculateCurrent3(void);
  6576                           ;main.c: 88: while (1)
  6577                           
  6578                           
  6579                           ;main.c: 89: {
  6580                           ;main.c: 90: if(!(RB2))
  6581  02ED  0020               	movlb	0	; select bank0
  6582  02EE  190D               	btfsc	13,2	;volatile
  6583  02EF  2B00               	goto	l3128
  6584                           
  6585                           ;main.c: 91: {
  6586                           ;main.c: 92: LATA5=0;
  6587  02F0  1296               	bcf	22,5	;volatile
  6588                           
  6589                           ;main.c: 93: _delay((unsigned long)((400)*(32000000/4000000.0)));
  6590  02F1  3005               	movlw	5
  6591  02F2  00D9               	movwf	??_main+1
  6592  02F3  3026               	movlw	38
  6593  02F4  00D8               	movwf	??_main
  6594  02F5                     u3957:	
  6595  02F5  0BD8               	decfsz	??_main,f
  6596  02F6  2AF5               	goto	u3957
  6597  02F7  0BD9               	decfsz	??_main+1,f
  6598  02F8  2AF5               	goto	u3957
  6599  02F9  0000               	nop
  6600                           
  6601                           ;main.c: 94: faultCount+=1;
  6602  02FA  3001               	movlw	1
  6603  02FB  0020               	movlb	0	; select bank0
  6604  02FC  07DF               	addwf	main@faultCount,f
  6605  02FD  3000               	movlw	0
  6606  02FE  3DE0               	addwfc	main@faultCount+1,f
  6607                           
  6608                           ;main.c: 95: LATA5=1;
  6609  02FF  1696               	bsf	22,5	;volatile
  6610  0300                     l3128:	
  6611                           
  6612                           ;main.c: 96: }
  6613                           ;main.c: 97: for(j=0;j<4;j++) Ianalogs[j]=readIAnalog(j);
  6614  0300  01EA               	clrf	main@j
  6615  0301  3004               	movlw	4
  6616  0302  026A               	subwf	main@j,w
  6617  0303  1803               	btfsc	3,0
  6618  0304  2B20               	goto	l3140
  6619  0305                     l3134:	
  6620  0305  086A               	movf	main@j,w
  6621  0306  00D8               	movwf	??_main
  6622  0307  01D9               	clrf	??_main+1
  6623  0308  0858               	movf	??_main,w
  6624  0309  00A6               	movwf	readIAnalog@channel
  6625  030A  0859               	movf	??_main+1,w
  6626  030B  00A7               	movwf	readIAnalog@channel+1
  6627  030C  318D  2565  3182   	fcall	_readIAnalog
  6628  030F  0020               	movlb	0	; select bank0
  6629  0310  356A               	lslf	main@j,w
  6630  0311  3EA0               	addlw	(low (_Ianalogs| 0))& (0+255)
  6631  0312  0086               	movwf	6
  6632  0313  0187               	clrf	7
  6633  0314  0826               	movf	?_readIAnalog,w
  6634  0315  3FC0               	movwi [0]fsr1
  6635  0316  0827               	movf	?_readIAnalog+1,w
  6636  0317  3FC1               	movwi [1]fsr1
  6637  0318  3001               	movlw	1
  6638  0319  00D8               	movwf	??_main
  6639  031A  0858               	movf	??_main,w
  6640  031B  07EA               	addwf	main@j,f
  6641  031C  3004               	movlw	4
  6642  031D  026A               	subwf	main@j,w
  6643  031E  1C03               	skipc
  6644  031F  2B05               	goto	l3134
  6645  0320                     l3140:	
  6646                           
  6647                           ;main.c: 99: Vanalogs[0]=ADCRead(21);
  6648  0320  3015               	movlw	21
  6649  0321  3191  21DC  3182   	fcall	_ADCRead
  6650  0324  0871               	movf	?_ADCRead+1,w
  6651  0325  0021               	movlb	1	; select bank1
  6652  0326  00A9               	movwf	(_Vanalogs+1)^(0+128)
  6653  0327  0870               	movf	?_ADCRead,w
  6654  0328  00A8               	movwf	_Vanalogs^(0+128)
  6655                           
  6656                           ;main.c: 101: Vanalogs[1]=ADCRead(17);
  6657  0329  3011               	movlw	17
  6658  032A  3191  21DC  3182   	fcall	_ADCRead
  6659  032D  0871               	movf	?_ADCRead+1,w
  6660  032E  0021               	movlb	1	; select bank1
  6661  032F  00AB               	movwf	((_Vanalogs+1)^(0+128)+2)
  6662  0330  0870               	movf	?_ADCRead,w
  6663  0331  00AA               	movwf	(_Vanalogs^(0+128)+2)
  6664                           
  6665                           ;main.c: 103: Vanalogs[2]=ADCRead(23);
  6666  0332  3017               	movlw	23
  6667  0333  3191  21DC  3182   	fcall	_ADCRead
  6668  0336  0871               	movf	?_ADCRead+1,w
  6669  0337  0021               	movlb	1	; select bank1
  6670  0338  00AD               	movwf	((_Vanalogs+1)^(0+128)+4)
  6671  0339  0870               	movf	?_ADCRead,w
  6672  033A  00AC               	movwf	(_Vanalogs^(0+128)+4)
  6673                           
  6674                           ;main.c: 105: Vanalogs[3]=ADCRead(19);
  6675  033B  3013               	movlw	19
  6676  033C  3191  21DC  3182   	fcall	_ADCRead
  6677  033F  0871               	movf	?_ADCRead+1,w
  6678  0340  0021               	movlb	1	; select bank1
  6679  0341  00AF               	movwf	((_Vanalogs+1)^(0+128)+6)
  6680  0342  0870               	movf	?_ADCRead,w
  6681  0343  00AE               	movwf	(_Vanalogs^(0+128)+6)
  6682                           
  6683                           ;main.c: 107: if(!(RB2))faultNotReset+=1;
  6684  0344  0020               	movlb	0	; select bank0
  6685  0345  190D               	btfsc	13,2	;volatile
  6686  0346  2B4B               	goto	l3146
  6687  0347  3001               	movlw	1
  6688  0348  07E1               	addwf	main@faultNotReset,f
  6689  0349  3000               	movlw	0
  6690  034A  3DE2               	addwfc	main@faultNotReset+1,f
  6691  034B                     l3146:	
  6692                           
  6693                           ;main.c: 109: voltage[0]=(int16_t)(Vanalogs[0]/.5448);
  6694  034B  0021               	movlb	1	; select bank1
  6695  034C  0829               	movf	(_Vanalogs+1)^(0+128),w
  6696  034D  00F9               	movwf	___awtoft@c+1
  6697  034E  0828               	movf	_Vanalogs^(0+128),w
  6698  034F  00F8               	movwf	___awtoft@c
  6699  0350  3192  2275  3182   	fcall	___awtoft
  6700  0353  0878               	movf	?___awtoft,w
  6701  0354  0020               	movlb	0	; select bank0
  6702  0355  00A3               	movwf	___ftdiv@f1
  6703  0356  0879               	movf	?___awtoft+1,w
  6704  0357  00A4               	movwf	___ftdiv@f1+1
  6705  0358  087A               	movf	?___awtoft+2,w
  6706  0359  00A5               	movwf	___ftdiv@f1+2
  6707  035A  3078               	movlw	120
  6708  035B  00A0               	movwf	___ftdiv@f2
  6709  035C  300B               	movlw	11
  6710  035D  00A1               	movwf	___ftdiv@f2+1
  6711  035E  303F               	movlw	63
  6712  035F  00A2               	movwf	___ftdiv@f2+2
  6713  0360  3189  21B8  3182   	fcall	___ftdiv
  6714  0363  0020               	movlb	0	; select bank0
  6715  0364  0820               	movf	?___ftdiv,w
  6716  0365  00B0               	movwf	___fttol@f1
  6717  0366  0821               	movf	?___ftdiv+1,w
  6718  0367  00B1               	movwf	___fttol@f1+1
  6719  0368  0822               	movf	?___ftdiv+2,w
  6720  0369  00B2               	movwf	___fttol@f1+2
  6721  036A  3196  26F2  3182   	fcall	___fttol
  6722  036D  0020               	movlb	0	; select bank0
  6723  036E  0831               	movf	?___fttol+1,w
  6724  036F  0021               	movlb	1	; select bank1
  6725  0370  00B9               	movwf	(_voltage+1)^(0+128)
  6726  0371  0020               	movlb	0	; select bank0
  6727  0372  0830               	movf	?___fttol,w
  6728  0373  0021               	movlb	1	; select bank1
  6729  0374  00B8               	movwf	_voltage^(0+128)
  6730                           
  6731                           ;main.c: 112: voltage[1]=(int16_t)(Vanalogs[1]/.5448);
  6732  0375  082B               	movf	((_Vanalogs+1)^(0+128)+2),w
  6733  0376  00F9               	movwf	___awtoft@c+1
  6734  0377  082A               	movf	(_Vanalogs^(0+128)+2),w
  6735  0378  00F8               	movwf	___awtoft@c
  6736  0379  3192  2275  3182   	fcall	___awtoft
  6737  037C  0878               	movf	?___awtoft,w
  6738  037D  0020               	movlb	0	; select bank0
  6739  037E  00A3               	movwf	___ftdiv@f1
  6740  037F  0879               	movf	?___awtoft+1,w
  6741  0380  00A4               	movwf	___ftdiv@f1+1
  6742  0381  087A               	movf	?___awtoft+2,w
  6743  0382  00A5               	movwf	___ftdiv@f1+2
  6744  0383  3078               	movlw	120
  6745  0384  00A0               	movwf	___ftdiv@f2
  6746  0385  300B               	movlw	11
  6747  0386  00A1               	movwf	___ftdiv@f2+1
  6748  0387  303F               	movlw	63
  6749  0388  00A2               	movwf	___ftdiv@f2+2
  6750  0389  3189  21B8  3182   	fcall	___ftdiv
  6751  038C  0020               	movlb	0	; select bank0
  6752  038D  0820               	movf	?___ftdiv,w
  6753  038E  00B0               	movwf	___fttol@f1
  6754  038F  0821               	movf	?___ftdiv+1,w
  6755  0390  00B1               	movwf	___fttol@f1+1
  6756  0391  0822               	movf	?___ftdiv+2,w
  6757  0392  00B2               	movwf	___fttol@f1+2
  6758  0393  3196  26F2  3182   	fcall	___fttol
  6759  0396  0020               	movlb	0	; select bank0
  6760  0397  0831               	movf	?___fttol+1,w
  6761  0398  0021               	movlb	1	; select bank1
  6762  0399  00BB               	movwf	((_voltage+1)^(0+128)+2)
  6763  039A  0020               	movlb	0	; select bank0
  6764  039B  0830               	movf	?___fttol,w
  6765  039C  0021               	movlb	1	; select bank1
  6766  039D  00BA               	movwf	(_voltage^(0+128)+2)
  6767                           
  6768                           ;main.c: 114: voltage[2]=(int16_t)(Vanalogs[2]/.405775);
  6769  039E  082D               	movf	((_Vanalogs+1)^(0+128)+4),w
  6770  039F  00F9               	movwf	___awtoft@c+1
  6771  03A0  082C               	movf	(_Vanalogs^(0+128)+4),w
  6772  03A1  00F8               	movwf	___awtoft@c
  6773  03A2  3192  2275  3182   	fcall	___awtoft
  6774  03A5  0878               	movf	?___awtoft,w
  6775  03A6  0020               	movlb	0	; select bank0
  6776  03A7  00A3               	movwf	___ftdiv@f1
  6777  03A8  0879               	movf	?___awtoft+1,w
  6778  03A9  00A4               	movwf	___ftdiv@f1+1
  6779  03AA  087A               	movf	?___awtoft+2,w
  6780  03AB  00A5               	movwf	___ftdiv@f1+2
  6781  03AC  30C2               	movlw	194
  6782  03AD  00A0               	movwf	___ftdiv@f2
  6783  03AE  30CF               	movlw	207
  6784  03AF  00A1               	movwf	___ftdiv@f2+1
  6785  03B0  303E               	movlw	62
  6786  03B1  00A2               	movwf	___ftdiv@f2+2
  6787  03B2  3189  21B8  3182   	fcall	___ftdiv
  6788  03B5  0020               	movlb	0	; select bank0
  6789  03B6  0820               	movf	?___ftdiv,w
  6790  03B7  00B0               	movwf	___fttol@f1
  6791  03B8  0821               	movf	?___ftdiv+1,w
  6792  03B9  00B1               	movwf	___fttol@f1+1
  6793  03BA  0822               	movf	?___ftdiv+2,w
  6794  03BB  00B2               	movwf	___fttol@f1+2
  6795  03BC  3196  26F2  3182   	fcall	___fttol
  6796  03BF  0020               	movlb	0	; select bank0
  6797  03C0  0831               	movf	?___fttol+1,w
  6798  03C1  0021               	movlb	1	; select bank1
  6799  03C2  00BD               	movwf	((_voltage+1)^(0+128)+4)
  6800  03C3  0020               	movlb	0	; select bank0
  6801  03C4  0830               	movf	?___fttol,w
  6802  03C5  0021               	movlb	1	; select bank1
  6803  03C6  00BC               	movwf	(_voltage^(0+128)+4)
  6804                           
  6805                           ;main.c: 116: voltage[3]=(int16_t)(Vanalogs[3]/.406788);
  6806  03C7  082F               	movf	((_Vanalogs+1)^(0+128)+6),w
  6807  03C8  00F9               	movwf	___awtoft@c+1
  6808  03C9  082E               	movf	(_Vanalogs^(0+128)+6),w
  6809  03CA  00F8               	movwf	___awtoft@c
  6810  03CB  3192  2275  3182   	fcall	___awtoft
  6811  03CE  0878               	movf	?___awtoft,w
  6812  03CF  0020               	movlb	0	; select bank0
  6813  03D0  00A3               	movwf	___ftdiv@f1
  6814  03D1  0879               	movf	?___awtoft+1,w
  6815  03D2  00A4               	movwf	___ftdiv@f1+1
  6816  03D3  087A               	movf	?___awtoft+2,w
  6817  03D4  00A5               	movwf	___ftdiv@f1+2
  6818  03D5  3047               	movlw	71
  6819  03D6  00A0               	movwf	___ftdiv@f2
  6820  03D7  30D0               	movlw	208
  6821  03D8  00A1               	movwf	___ftdiv@f2+1
  6822  03D9  303E               	movlw	62
  6823  03DA  00A2               	movwf	___ftdiv@f2+2
  6824  03DB  3189  21B8  3182   	fcall	___ftdiv
  6825  03DE  0020               	movlb	0	; select bank0
  6826  03DF  0820               	movf	?___ftdiv,w
  6827  03E0  00B0               	movwf	___fttol@f1
  6828  03E1  0821               	movf	?___ftdiv+1,w
  6829  03E2  00B1               	movwf	___fttol@f1+1
  6830  03E3  0822               	movf	?___ftdiv+2,w
  6831  03E4  00B2               	movwf	___fttol@f1+2
  6832  03E5  3196  26F2  3182   	fcall	___fttol
  6833  03E8  0020               	movlb	0	; select bank0
  6834  03E9  0831               	movf	?___fttol+1,w
  6835  03EA  0021               	movlb	1	; select bank1
  6836  03EB  00BF               	movwf	((_voltage+1)^(0+128)+6)
  6837  03EC  0020               	movlb	0	; select bank0
  6838  03ED  0830               	movf	?___fttol,w
  6839  03EE  0021               	movlb	1	; select bank1
  6840  03EF  00BE               	movwf	(_voltage^(0+128)+6)
  6841                           
  6842                           ;main.c: 118: calculateCurrent0();
  6843  03F0  3194  2431  3182   	fcall	_calculateCurrent0
  6844                           
  6845                           ;main.c: 120: calculateCurrent1();
  6846  03F3  3194  2476  3182   	fcall	_calculateCurrent1
  6847                           
  6848                           ;main.c: 122: calculateCurrent2();
  6849  03F6  3194  24BB  3182   	fcall	_calculateCurrent2
  6850                           
  6851                           ;main.c: 124: calculateCurrent3();
  6852  03F9  3180  2009  3182   	fcall	_calculateCurrent3
  6853                           
  6854                           ;main.c: 126: if(Imode[0])
  6855  03FC  0021               	movlb	1	; select bank1
  6856  03FD  0859               	movf	_Imode^(0+128),w
  6857  03FE  1903               	btfsc	3,2
  6858  03FF  2C1E               	goto	l3176
  6859                           
  6860                           ;main.c: 127: {
  6861                           ;main.c: 128: if(voltage[2]<MPPT0)
  6862  0400  083D               	movf	((_voltage+1)^(0+128)+4),w
  6863  0401  3A80               	xorlw	128
  6864  0402  0020               	movlb	0	; select bank0
  6865  0403  00D8               	movwf	??_main
  6866  0404  0866               	movf	main@MPPT0+1,w
  6867  0405  3A80               	xorlw	128
  6868  0406  0258               	subwf	??_main,w
  6869  0407  1D03               	skipz
  6870  0408  2C0C               	goto	u3705
  6871  0409  0865               	movf	main@MPPT0,w
  6872  040A  0021               	movlb	1	; select bank1
  6873  040B  023C               	subwf	(_voltage^(0+128)+4),w
  6874  040C                     u3705:	
  6875  040C  1C03               	btfss	3,0
  6876  040D  2C2F               	goto	L1
  6877                           
  6878                           ;main.c: 135: else if(voltage[2]>MPPT0)
  6879                           
  6880                           ;main.c: 133: }
  6881                           ;main.c: 134: }
  6882                           
  6883                           ;main.c: 131: {
  6884                           ;main.c: 132: dutyCycle6+=1;
  6885                           
  6886                           ;main.c: 129: {
  6887                           ;main.c: 130: if(dutyCycle6<1023)
  6888  040E  0020               	movlb	0	; select bank0
  6889  040F  0866               	movf	main@MPPT0+1,w
  6890  0410  3A80               	xorlw	128
  6891  0411  00D8               	movwf	??_main
  6892  0412  0021               	movlb	1	; select bank1
  6893  0413  083D               	movf	((_voltage+1)^(0+128)+4),w
  6894  0414  3A80               	xorlw	128
  6895  0415  0020               	movlb	0	; select bank0
  6896  0416  0258               	subwf	??_main,w
  6897  0417  1D03               	skipz
  6898  0418  2C4B               	goto	u3765
  6899  0419  0021               	movlb	1	; select bank1
  6900  041A  083C               	movf	(_voltage^(0+128)+4),w
  6901  041B  0020               	movlb	0	; select bank0
  6902  041C  0265               	subwf	main@MPPT0,w
  6903  041D  2C4B               	goto	u3765
  6904  041E                     l3176:	
  6905                           ;main.c: 143: }
  6906                           
  6907                           ;main.c: 140: }
  6908                           ;main.c: 141: }
  6909                           
  6910                           ;main.c: 138: {
  6911                           ;main.c: 139: dutyCycle6-=1;
  6912                           
  6913                           ;main.c: 136: {
  6914                           ;main.c: 137: if(dutyCycle6>0)
  6915                           
  6916                           
  6917                           ;main.c: 144: else
  6918                           ;main.c: 145: {
  6919                           ;main.c: 146: if(voltage[0]>(int16_t)Vref[0])
  6920  041E  0021               	movlb	1	; select bank1
  6921  041F  0852               	movf	(_Vref+1)^(0+128),w
  6922  0420  3A80               	xorlw	128
  6923  0421  0020               	movlb	0	; select bank0
  6924  0422  00D8               	movwf	??_main
  6925  0423  0021               	movlb	1	; select bank1
  6926  0424  0839               	movf	(_voltage+1)^(0+128),w
  6927  0425  3A80               	xorlw	128
  6928  0426  0020               	movlb	0	; select bank0
  6929  0427  0258               	subwf	??_main,w
  6930  0428  1D03               	skipz
  6931  0429  2C2D               	goto	u3745
  6932  042A  0021               	movlb	1	; select bank1
  6933  042B  0838               	movf	_voltage^(0+128),w
  6934  042C  0251               	subwf	_Vref^(0+128),w
  6935  042D                     u3745:	
  6936  042D  1803               	skipnc
  6937  042E  2C3C               	goto	l3182
  6938  042F                     L1:	
  6939                           
  6940                           ;main.c: 147: {
  6941                           ;main.c: 148: if(dutyCycle6<1023) dutyCycle6+=1;
  6942  042F  3003               	movlw	3
  6943  0430  0020               	movlb	0	; select bank0
  6944  0431  026C               	subwf	main@dutyCycle6+1,w
  6945  0432  30FF               	movlw	255
  6946  0433  1903               	skipnz
  6947  0434  026B               	subwf	main@dutyCycle6,w
  6948  0435  1803               	skipnc
  6949  0436  2C56               	goto	l3188
  6950  0437  3001               	movlw	1
  6951  0438  07EB               	addwf	main@dutyCycle6,f
  6952  0439  3000               	movlw	0
  6953  043A  3DEC               	addwfc	main@dutyCycle6+1,f
  6954                           
  6955                           ;main.c: 149: }
  6956  043B  2C56               	goto	l3188
  6957  043C                     l3182:	
  6958                           
  6959                           ;main.c: 150: else if(voltage[0]<(int16_t)Vref[0])
  6960  043C  0021               	movlb	1	; select bank1
  6961  043D  0839               	movf	(_voltage+1)^(0+128),w
  6962  043E  3A80               	xorlw	128
  6963  043F  0020               	movlb	0	; select bank0
  6964  0440  00D8               	movwf	??_main
  6965  0441  0021               	movlb	1	; select bank1
  6966  0442  0852               	movf	(_Vref+1)^(0+128),w
  6967  0443  3A80               	xorlw	128
  6968  0444  0020               	movlb	0	; select bank0
  6969  0445  0258               	subwf	??_main,w
  6970  0446  1D03               	skipz
  6971  0447  2C4B               	goto	u3765
  6972  0448  0021               	movlb	1	; select bank1
  6973  0449  0851               	movf	_Vref^(0+128),w
  6974  044A  0238               	subwf	_voltage^(0+128),w
  6975  044B                     u3765:	
  6976  044B  1803               	skipnc
  6977  044C  2C56               	goto	l3188
  6978                           
  6979                           ;main.c: 151: {
  6980                           ;main.c: 152: if(dutyCycle6>0) dutyCycle6-=1;;
  6981  044D  0020               	movlb	0	; select bank0
  6982  044E  086B               	movf	main@dutyCycle6,w
  6983  044F  046C               	iorwf	main@dutyCycle6+1,w
  6984  0450  1903               	btfsc	3,2
  6985  0451  2C56               	goto	l3188
  6986  0452  3001               	movlw	1
  6987  0453  02EB               	subwf	main@dutyCycle6,f
  6988  0454  3000               	movlw	0
  6989  0455  3BEC               	subwfb	main@dutyCycle6+1,f
  6990  0456                     l3188:	
  6991                           ;main.c: 153: }
  6992                           
  6993                           
  6994                           ;main.c: 155: }
  6995                           ;main.c: 157: if(Imode[1])
  6996  0456  0021               	movlb	1	; select bank1
  6997  0457  085A               	movf	(_Imode^(0+128)+1),w
  6998  0458  1903               	btfsc	3,2
  6999  0459  2C69               	goto	l3200
  7000                           
  7001                           ;main.c: 158: {
  7002                           ;main.c: 159: if(voltage[3]<MPPT1)
  7003  045A  083F               	movf	((_voltage+1)^(0+128)+6),w
  7004  045B  3A80               	xorlw	128
  7005  045C  0020               	movlb	0	; select bank0
  7006  045D  00D8               	movwf	??_main
  7007  045E  0868               	movf	main@MPPT1+1,w
  7008  045F  3A80               	xorlw	128
  7009  0460  0258               	subwf	??_main,w
  7010  0461  1D03               	skipz
  7011  0462  2C66               	goto	u3795
  7012  0463  0867               	movf	main@MPPT1,w
  7013  0464  0021               	movlb	1	; select bank1
  7014  0465  023E               	subwf	(_voltage^(0+128)+6),w
  7015  0466                     u3795:	
  7016  0466  1C03               	btfss	3,0
  7017  0467  2C7A               	goto	L2
  7018                           
  7019                           ;main.c: 164: }
  7020                           ;main.c: 165: }
  7021                           
  7022                           ;main.c: 162: {
  7023                           ;main.c: 163: dutyCycle7+=1;
  7024                           
  7025                           ;main.c: 160: {
  7026                           ;main.c: 161: if(dutyCycle7<1023)
  7027  0468  2C98               	goto	L3
  7028  0469                     l3200:	
  7029                           ;main.c: 169: }
  7030                           ;main.c: 170: }
  7031                           
  7032                           ;main.c: 167: {
  7033                           ;main.c: 168: dutyCycle7-=1;
  7034                           
  7035                           ;main.c: 166: else if(dutyCycle7>0)
  7036                           
  7037                           
  7038                           ;main.c: 171: else
  7039                           ;main.c: 172: {
  7040                           ;main.c: 173: if(voltage[1]>(int16_t)Vref[1])
  7041  0469  0021               	movlb	1	; select bank1
  7042  046A  0854               	movf	((_Vref+1)^(0+128)+2),w
  7043  046B  3A80               	xorlw	128
  7044  046C  0020               	movlb	0	; select bank0
  7045  046D  00D8               	movwf	??_main
  7046  046E  0021               	movlb	1	; select bank1
  7047  046F  083B               	movf	((_voltage+1)^(0+128)+2),w
  7048  0470  3A80               	xorlw	128
  7049  0471  0020               	movlb	0	; select bank0
  7050  0472  0258               	subwf	??_main,w
  7051  0473  1D03               	skipz
  7052  0474  2C78               	goto	u3825
  7053  0475  0021               	movlb	1	; select bank1
  7054  0476  083A               	movf	(_voltage^(0+128)+2),w
  7055  0477  0253               	subwf	(_Vref^(0+128)+2),w
  7056  0478                     u3825:	
  7057  0478  1803               	skipnc
  7058  0479  2C87               	goto	l3206
  7059  047A                     L2:	
  7060                           
  7061                           ;main.c: 174: {
  7062                           ;main.c: 175: if(dutyCycle7<1023) dutyCycle7+=1;
  7063  047A  3003               	movlw	3
  7064  047B  0020               	movlb	0	; select bank0
  7065  047C  026E               	subwf	main@dutyCycle7+1,w
  7066  047D  30FF               	movlw	255
  7067  047E  1903               	skipnz
  7068  047F  026D               	subwf	main@dutyCycle7,w
  7069  0480  1803               	skipnc
  7070  0481  2CA1               	goto	l3212
  7071  0482  3001               	movlw	1
  7072  0483  07ED               	addwf	main@dutyCycle7,f
  7073  0484  3000               	movlw	0
  7074  0485  3DEE               	addwfc	main@dutyCycle7+1,f
  7075                           
  7076                           ;main.c: 176: }
  7077  0486  2CA1               	goto	l3212
  7078  0487                     l3206:	
  7079                           
  7080                           ;main.c: 177: else if(voltage[1]<(int16_t)Vref[1])
  7081  0487  0021               	movlb	1	; select bank1
  7082  0488  083B               	movf	((_voltage+1)^(0+128)+2),w
  7083  0489  3A80               	xorlw	128
  7084  048A  0020               	movlb	0	; select bank0
  7085  048B  00D8               	movwf	??_main
  7086  048C  0021               	movlb	1	; select bank1
  7087  048D  0854               	movf	((_Vref+1)^(0+128)+2),w
  7088  048E  3A80               	xorlw	128
  7089  048F  0020               	movlb	0	; select bank0
  7090  0490  0258               	subwf	??_main,w
  7091  0491  1D03               	skipz
  7092  0492  2C96               	goto	u3845
  7093  0493  0021               	movlb	1	; select bank1
  7094  0494  0853               	movf	(_Vref^(0+128)+2),w
  7095  0495  023A               	subwf	(_voltage^(0+128)+2),w
  7096  0496                     u3845:	
  7097  0496  1803               	skipnc
  7098  0497  2CA1               	goto	l3212
  7099  0498                     L3:	
  7100                           
  7101                           ;main.c: 178: {
  7102                           ;main.c: 179: if(dutyCycle7>0) dutyCycle7-=1;;
  7103  0498  0020               	movlb	0	; select bank0
  7104  0499  086D               	movf	main@dutyCycle7,w
  7105  049A  046E               	iorwf	main@dutyCycle7+1,w
  7106  049B  1903               	btfsc	3,2
  7107  049C  2CA1               	goto	l3212
  7108  049D  3001               	movlw	1
  7109  049E  02ED               	subwf	main@dutyCycle7,f
  7110  049F  3000               	movlw	0
  7111  04A0  3BEE               	subwfb	main@dutyCycle7+1,f
  7112  04A1                     l3212:	
  7113                           ;main.c: 180: }
  7114                           
  7115                           
  7116                           ;main.c: 182: }
  7117                           ;main.c: 184: slowLoop+=1;
  7118  04A1  3001               	movlw	1
  7119  04A2  0020               	movlb	0	; select bank0
  7120  04A3  00D8               	movwf	??_main
  7121  04A4  0858               	movf	??_main,w
  7122  04A5  07E3               	addwf	main@slowLoop,f
  7123                           
  7124                           ;main.c: 187: PWM6_LoadDutyValue(dutyCycle6);
  7125  04A6  086C               	movf	main@dutyCycle6+1,w
  7126  04A7  00F1               	movwf	PWM6_LoadDutyValue@dutyCycle6+1
  7127  04A8  086B               	movf	main@dutyCycle6,w
  7128  04A9  00F0               	movwf	PWM6_LoadDutyValue@dutyCycle6
  7129  04AA  3191  21F1  3182   	fcall	_PWM6_LoadDutyValue
  7130                           
  7131                           ;main.c: 188: PWM7_LoadDutyValue(dutyCycle7);
  7132  04AD  0020               	movlb	0	; select bank0
  7133  04AE  086E               	movf	main@dutyCycle7+1,w
  7134  04AF  00F1               	movwf	PWM7_LoadDutyValue@dutyCycle7+1
  7135  04B0  086D               	movf	main@dutyCycle7,w
  7136  04B1  00F0               	movwf	PWM7_LoadDutyValue@dutyCycle7
  7137  04B2  3192  2207  3182   	fcall	_PWM7_LoadDutyValue
  7138                           
  7139                           ;main.c: 190: menuButton = readButton();
  7140  04B5  3197  2779  3182   	fcall	_readButton
  7141  04B8  0020               	movlb	0	; select bank0
  7142  04B9  00D8               	movwf	??_main
  7143  04BA  0858               	movf	??_main,w
  7144  04BB  00E9               	movwf	main@menuButton
  7145                           
  7146                           ;main.c: 191: if(menuButton == 2) if(MPPT1>1375)MPPT1-=1;
  7147  04BC  3002               	movlw	2
  7148  04BD  0669               	xorwf	main@menuButton,w
  7149  04BE  1D03               	btfss	3,2
  7150  04BF  2CD0               	goto	l3226
  7151  04C0  0868               	movf	main@MPPT1+1,w
  7152  04C1  3A80               	xorlw	128
  7153  04C2  00D8               	movwf	??_main
  7154  04C3  3085               	movlw	133
  7155  04C4  0258               	subwf	??_main,w
  7156  04C5  1D03               	skipz
  7157  04C6  2CC9               	goto	u3875
  7158  04C7  3060               	movlw	96
  7159  04C8  0267               	subwf	main@MPPT1,w
  7160  04C9                     u3875:	
  7161  04C9  1C03               	skipc
  7162  04CA  2CD0               	goto	l3226
  7163  04CB  30FF               	movlw	255
  7164  04CC  0020               	movlb	0	; select bank0
  7165  04CD  07E7               	addwf	main@MPPT1,f
  7166  04CE  30FF               	movlw	255
  7167  04CF  3DE8               	addwfc	main@MPPT1+1,f
  7168  04D0                     l3226:	
  7169                           
  7170                           ;main.c: 192: if(menuButton == 3)if(MPPT1<2200)MPPT1+=1;
  7171  04D0  3003               	movlw	3
  7172  04D1  0020               	movlb	0	; select bank0
  7173  04D2  0669               	xorwf	main@menuButton,w
  7174  04D3  1D03               	btfss	3,2
  7175  04D4  2CE5               	goto	l3232
  7176  04D5  0868               	movf	main@MPPT1+1,w
  7177  04D6  3A80               	xorlw	128
  7178  04D7  00D8               	movwf	??_main
  7179  04D8  3088               	movlw	136
  7180  04D9  0258               	subwf	??_main,w
  7181  04DA  1D03               	skipz
  7182  04DB  2CDE               	goto	u3895
  7183  04DC  3098               	movlw	152
  7184  04DD  0267               	subwf	main@MPPT1,w
  7185  04DE                     u3895:	
  7186  04DE  1803               	skipnc
  7187  04DF  2CE5               	goto	l3232
  7188  04E0  3001               	movlw	1
  7189  04E1  0020               	movlb	0	; select bank0
  7190  04E2  07E7               	addwf	main@MPPT1,f
  7191  04E3  3000               	movlw	0
  7192  04E4  3DE8               	addwfc	main@MPPT1+1,f
  7193  04E5                     l3232:	
  7194                           
  7195                           ;main.c: 193: if(menuButton == 1)LCDInit();
  7196  04E5  0020               	movlb	0	; select bank0
  7197  04E6  0369               	decf	main@menuButton,w
  7198  04E7  1D03               	btfss	3,2
  7199  04E8  2CEC               	goto	l3236
  7200  04E9  3193  2343  3182   	fcall	_LCDInit
  7201  04EC                     l3236:	
  7202                           
  7203                           ;main.c: 197: if(slowLoop>250)
  7204  04EC  30FB               	movlw	251
  7205  04ED  0020               	movlb	0	; select bank0
  7206  04EE  0263               	subwf	main@slowLoop,w
  7207  04EF  1C03               	skipc
  7208  04F0  2AED               	goto	l3120
  7209                           
  7210                           ;main.c: 198: {
  7211                           ;main.c: 200: IOutTotal=current[0]+current[1];
  7212  04F1  0021               	movlb	1	; select bank1
  7213  04F2  0830               	movf	_current^(0+128),w
  7214  04F3  0732               	addwf	(_current^(0+128)+2),w
  7215  04F4  0020               	movlb	0	; select bank0
  7216  04F5  00DD               	movwf	main@IOutTotal
  7217  04F6  0021               	movlb	1	; select bank1
  7218  04F7  0831               	movf	(_current+1)^(0+128),w
  7219  04F8  3D33               	addwfc	((_current+1)^(0+128)+2),w
  7220  04F9  0020               	movlb	0	; select bank0
  7221  04FA  00DE               	movwf	main@IOutTotal+1
  7222                           
  7223                           ;main.c: 220: ADREF = 0x00;
  7224  04FB  0021               	movlb	1	; select bank1
  7225  04FC  019A               	clrf	26	;volatile
  7226                           
  7227                           ;main.c: 221: batteryTemp=tempCalc(ADCRead(9));
  7228  04FD  3009               	movlw	9
  7229  04FE  3191  21DC  3182   	fcall	_ADCRead
  7230  0501  0871               	movf	?_ADCRead+1,w
  7231  0502  0020               	movlb	0	; select bank0
  7232  0503  00CE               	movwf	tempCalc@analogValue+1
  7233  0504  0870               	movf	?_ADCRead,w
  7234  0505  00CD               	movwf	tempCalc@analogValue
  7235  0506  318C  247E  3182   	fcall	_tempCalc
  7236  0509  0020               	movlb	0	; select bank0
  7237  050A  084E               	movf	?_tempCalc+1,w
  7238  050B  0021               	movlb	1	; select bank1
  7239  050C  00ED               	movwf	(_batteryTemp+1)^(0+128)
  7240  050D  0020               	movlb	0	; select bank0
  7241  050E  084D               	movf	?_tempCalc,w
  7242  050F  0021               	movlb	1	; select bank1
  7243  0510  00EC               	movwf	_batteryTemp^(0+128)
  7244                           
  7245                           ;main.c: 222: ADREF = 0x03;
  7246  0511  3003               	movlw	3
  7247  0512  009A               	movwf	26	;volatile
  7248                           
  7249                           ;main.c: 224: displayRefresh+=1;
  7250  0513  3001               	movlw	1
  7251  0514  0020               	movlb	0	; select bank0
  7252  0515  00D8               	movwf	??_main
  7253  0516  0858               	movf	??_main,w
  7254  0517  07E4               	addwf	main@displayRefresh,f
  7255                           
  7256                           ;main.c: 225: if(displayRefresh>80)
  7257  0518  3051               	movlw	81
  7258  0519  0264               	subwf	main@displayRefresh,w
  7259  051A  1C03               	skipc
  7260  051B  2D21               	goto	l3254
  7261                           
  7262                           ;main.c: 226: {
  7263                           ;main.c: 227: LCDClear();
  7264  051C  3192  22BA  3182   	fcall	_LCDClear
  7265                           
  7266                           ;main.c: 228: displayRefresh=0;
  7267  051F  0020               	movlb	0	; select bank0
  7268  0520  01E4               	clrf	main@displayRefresh
  7269  0521                     l3254:	
  7270                           
  7271                           ;main.c: 230: }
  7272                           ;main.c: 231: Battery_State_Machine(0);
  7273  0521  3000               	movlw	0
  7274  0522  3181  2144  3182   	fcall	_Battery_State_Machine
  7275                           
  7276                           ;main.c: 232: Battery_State_Machine(1);
  7277  0525  3001               	movlw	1
  7278  0526  3181  2144  3182   	fcall	_Battery_State_Machine
  7279                           
  7280                           ;main.c: 235: { gotoXY(0,0); LCDWriteString("In:");};
  7281  0529  01F5               	clrf	gotoXY@y
  7282  052A  3000               	movlw	0
  7283  052B  3191  21A0  3182   	fcall	_gotoXY
  7284  052E  3054               	movlw	low (STR_1| (0+32768))
  7285  052F  00FC               	movwf	LCDWriteString@characters
  7286  0530  3089               	movlw	high (STR_1| (0+32768))
  7287  0531  00FD               	movwf	LCDWriteString@characters+1
  7288  0532  3191  21B3  3182   	fcall	_LCDWriteString
  7289                           
  7290                           ;main.c: 236: { gotoXY(26,0); LCDWriteString("Out:");};
  7291  0535  01F5               	clrf	gotoXY@y
  7292  0536  301A               	movlw	26
  7293  0537  3191  21A0  3182   	fcall	_gotoXY
  7294  053A  304F               	movlw	low (STR_2| (0+32768))
  7295  053B  00FC               	movwf	LCDWriteString@characters
  7296  053C  3089               	movlw	high (STR_2| (0+32768))
  7297  053D  00FD               	movwf	LCDWriteString@characters+1
  7298  053E  3191  21B3  3182   	fcall	_LCDWriteString
  7299                           
  7300                           ;main.c: 237: { gotoXY(52,0); LCDWriteString("Ref:");};
  7301  0541  01F5               	clrf	gotoXY@y
  7302  0542  3034               	movlw	52
  7303  0543  3191  21A0  3182   	fcall	_gotoXY
  7304  0546  304A               	movlw	low (STR_3| (0+32768))
  7305  0547  00FC               	movwf	LCDWriteString@characters
  7306  0548  3089               	movlw	high (STR_3| (0+32768))
  7307  0549  00FD               	movwf	LCDWriteString@characters+1
  7308  054A  3191  21B3  3182   	fcall	_LCDWriteString
  7309                           
  7310                           ;main.c: 239: { gotoXY(0,1); LCDWriteInt(voltage[2],4, 2, 0);};
  7311  054D  01F5               	clrf	gotoXY@y
  7312  054E  0AF5               	incf	gotoXY@y,f
  7313  054F  3000               	movlw	0
  7314  0550  3191  21A0  3182   	fcall	_gotoXY
  7315  0553  0021               	movlb	1	; select bank1
  7316  0554  083D               	movf	((_voltage+1)^(0+128)+4),w
  7317  0555  0020               	movlb	0	; select bank0
  7318  0556  00A1               	movwf	LCDWriteInt@value+1
  7319  0557  0021               	movlb	1	; select bank1
  7320  0558  083C               	movf	(_voltage^(0+128)+4),w
  7321  0559  0020               	movlb	0	; select bank0
  7322  055A  00A0               	movwf	LCDWriteInt@value
  7323  055B  3004               	movlw	4
  7324  055C  00D8               	movwf	??_main
  7325  055D  0858               	movf	??_main,w
  7326  055E  00A2               	movwf	LCDWriteInt@fieldLength
  7327  055F  3002               	movlw	2
  7328  0560  00D9               	movwf	??_main+1
  7329  0561  0859               	movf	??_main+1,w
  7330  0562  00A3               	movwf	LCDWriteInt@numPlaces
  7331  0563  01A4               	clrf	LCDWriteInt@sign
  7332  0564  318B  23C5  3182   	fcall	_LCDWriteInt
  7333                           
  7334                           ;main.c: 240: LCDWriteCharacter('V');
  7335  0567  3056               	movlw	86
  7336  0568  3195  2551  3182   	fcall	_LCDWriteCharacter
  7337                           
  7338                           ;main.c: 242: { gotoXY(26,1); LCDWriteInt(voltage[0],4, 2, 0);};
  7339  056B  01F5               	clrf	gotoXY@y
  7340  056C  0AF5               	incf	gotoXY@y,f
  7341  056D  301A               	movlw	26
  7342  056E  3191  21A0  3182   	fcall	_gotoXY
  7343  0571  0021               	movlb	1	; select bank1
  7344  0572  0839               	movf	(_voltage+1)^(0+128),w
  7345  0573  0020               	movlb	0	; select bank0
  7346  0574  00A1               	movwf	LCDWriteInt@value+1
  7347  0575  0021               	movlb	1	; select bank1
  7348  0576  0838               	movf	_voltage^(0+128),w
  7349  0577  0020               	movlb	0	; select bank0
  7350  0578  00A0               	movwf	LCDWriteInt@value
  7351  0579  3004               	movlw	4
  7352  057A  00D8               	movwf	??_main
  7353  057B  0858               	movf	??_main,w
  7354  057C  00A2               	movwf	LCDWriteInt@fieldLength
  7355  057D  3002               	movlw	2
  7356  057E  00D9               	movwf	??_main+1
  7357  057F  0859               	movf	??_main+1,w
  7358  0580  00A3               	movwf	LCDWriteInt@numPlaces
  7359  0581  01A4               	clrf	LCDWriteInt@sign
  7360  0582  318B  23C5  3182   	fcall	_LCDWriteInt
  7361                           
  7362                           ;main.c: 243: LCDWriteCharacter('V');
  7363  0585  3056               	movlw	86
  7364  0586  3195  2551  3182   	fcall	_LCDWriteCharacter
  7365                           
  7366                           ;main.c: 245: { gotoXY(52,1); LCDWriteInt(Vref[0],4, 2, 0);};
  7367  0589  01F5               	clrf	gotoXY@y
  7368  058A  0AF5               	incf	gotoXY@y,f
  7369  058B  3034               	movlw	52
  7370  058C  3191  21A0  3182   	fcall	_gotoXY
  7371  058F  0021               	movlb	1	; select bank1
  7372  0590  0852               	movf	(_Vref+1)^(0+128),w
  7373  0591  0020               	movlb	0	; select bank0
  7374  0592  00A1               	movwf	LCDWriteInt@value+1
  7375  0593  0021               	movlb	1	; select bank1
  7376  0594  0851               	movf	_Vref^(0+128),w
  7377  0595  0020               	movlb	0	; select bank0
  7378  0596  00A0               	movwf	LCDWriteInt@value
  7379  0597  3004               	movlw	4
  7380  0598  00D8               	movwf	??_main
  7381  0599  0858               	movf	??_main,w
  7382  059A  00A2               	movwf	LCDWriteInt@fieldLength
  7383  059B  3002               	movlw	2
  7384  059C  00D9               	movwf	??_main+1
  7385  059D  0859               	movf	??_main+1,w
  7386  059E  00A3               	movwf	LCDWriteInt@numPlaces
  7387  059F  01A4               	clrf	LCDWriteInt@sign
  7388  05A0  318B  23C5  3182   	fcall	_LCDWriteInt
  7389                           
  7390                           ;main.c: 246: LCDWriteCharacter('V');
  7391  05A3  3056               	movlw	86
  7392  05A4  3195  2551  3182   	fcall	_LCDWriteCharacter
  7393                           
  7394                           ;main.c: 248: { gotoXY(80,1); LCDWriteInt(Imode[0],1, 0, 0);};
  7395  05A7  01F5               	clrf	gotoXY@y
  7396  05A8  0AF5               	incf	gotoXY@y,f
  7397  05A9  3050               	movlw	80
  7398  05AA  3191  21A0  3182   	fcall	_gotoXY
  7399  05AD  0021               	movlb	1	; select bank1
  7400  05AE  0859               	movf	_Imode^(0+128),w
  7401  05AF  0020               	movlb	0	; select bank0
  7402  05B0  00A0               	movwf	LCDWriteInt@value
  7403  05B1  01A1               	clrf	LCDWriteInt@value+1
  7404  05B2  1BA0               	btfsc	LCDWriteInt@value,7
  7405  05B3  03A1               	decf	LCDWriteInt@value+1,f
  7406  05B4  01A2               	clrf	LCDWriteInt@fieldLength
  7407  05B5  0AA2               	incf	LCDWriteInt@fieldLength,f
  7408  05B6  01A3               	clrf	LCDWriteInt@numPlaces
  7409  05B7  01A4               	clrf	LCDWriteInt@sign
  7410  05B8  318B  23C5  3182   	fcall	_LCDWriteInt
  7411                           
  7412                           ;main.c: 250: { gotoXY(0,2); LCDWriteInt(current[2],3, 1, 0);};
  7413  05BB  3002               	movlw	2
  7414  05BC  0020               	movlb	0	; select bank0
  7415  05BD  00D8               	movwf	??_main
  7416  05BE  0858               	movf	??_main,w
  7417  05BF  00F5               	movwf	gotoXY@y
  7418  05C0  3000               	movlw	0
  7419  05C1  3191  21A0  3182   	fcall	_gotoXY
  7420  05C4  0021               	movlb	1	; select bank1
  7421  05C5  0835               	movf	((_current+1)^(0+128)+4),w
  7422  05C6  0020               	movlb	0	; select bank0
  7423  05C7  00A1               	movwf	LCDWriteInt@value+1
  7424  05C8  0021               	movlb	1	; select bank1
  7425  05C9  0834               	movf	(_current^(0+128)+4),w
  7426  05CA  0020               	movlb	0	; select bank0
  7427  05CB  00A0               	movwf	LCDWriteInt@value
  7428  05CC  3003               	movlw	3
  7429  05CD  00D8               	movwf	??_main
  7430  05CE  0858               	movf	??_main,w
  7431  05CF  00A2               	movwf	LCDWriteInt@fieldLength
  7432  05D0  01A3               	clrf	LCDWriteInt@numPlaces
  7433  05D1  0AA3               	incf	LCDWriteInt@numPlaces,f
  7434  05D2  01A4               	clrf	LCDWriteInt@sign
  7435  05D3  318B  23C5  3182   	fcall	_LCDWriteInt
  7436                           
  7437                           ;main.c: 252: LCDWriteCharacter('A');
  7438  05D6  3041               	movlw	65
  7439  05D7  3195  2551  3182   	fcall	_LCDWriteCharacter
  7440                           
  7441                           ;main.c: 254: { gotoXY(26,2); LCDWriteInt(current[0],3, 1, 0);};
  7442  05DA  3002               	movlw	2
  7443  05DB  0020               	movlb	0	; select bank0
  7444  05DC  00D8               	movwf	??_main
  7445  05DD  0858               	movf	??_main,w
  7446  05DE  00F5               	movwf	gotoXY@y
  7447  05DF  301A               	movlw	26
  7448  05E0  3191  21A0  3182   	fcall	_gotoXY
  7449  05E3  0021               	movlb	1	; select bank1
  7450  05E4  0831               	movf	(_current+1)^(0+128),w
  7451  05E5  0020               	movlb	0	; select bank0
  7452  05E6  00A1               	movwf	LCDWriteInt@value+1
  7453  05E7  0021               	movlb	1	; select bank1
  7454  05E8  0830               	movf	_current^(0+128),w
  7455  05E9  0020               	movlb	0	; select bank0
  7456  05EA  00A0               	movwf	LCDWriteInt@value
  7457  05EB  3003               	movlw	3
  7458  05EC  00D8               	movwf	??_main
  7459  05ED  0858               	movf	??_main,w
  7460  05EE  00A2               	movwf	LCDWriteInt@fieldLength
  7461  05EF  01A3               	clrf	LCDWriteInt@numPlaces
  7462  05F0  0AA3               	incf	LCDWriteInt@numPlaces,f
  7463  05F1  01A4               	clrf	LCDWriteInt@sign
  7464  05F2  318B  23C5  3182   	fcall	_LCDWriteInt
  7465                           
  7466                           ;main.c: 256: LCDWriteCharacter('A');
  7467  05F5  3041               	movlw	65
  7468  05F6  3195  2551  3182   	fcall	_LCDWriteCharacter
  7469                           
  7470                           ;main.c: 258: { gotoXY(52,2); LCDWriteInt(Iref[0],3, 1, 0);};
  7471  05F9  3002               	movlw	2
  7472  05FA  0020               	movlb	0	; select bank0
  7473  05FB  00D8               	movwf	??_main
  7474  05FC  0858               	movf	??_main,w
  7475  05FD  00F5               	movwf	gotoXY@y
  7476  05FE  3034               	movlw	52
  7477  05FF  3191  21A0  3182   	fcall	_gotoXY
  7478  0602  0021               	movlb	1	; select bank1
  7479  0603  084E               	movf	(_Iref+1)^(0+128),w
  7480  0604  0020               	movlb	0	; select bank0
  7481  0605  00A1               	movwf	LCDWriteInt@value+1
  7482  0606  0021               	movlb	1	; select bank1
  7483  0607  084D               	movf	_Iref^(0+128),w
  7484  0608  0020               	movlb	0	; select bank0
  7485  0609  00A0               	movwf	LCDWriteInt@value
  7486  060A  3003               	movlw	3
  7487  060B  00D8               	movwf	??_main
  7488  060C  0858               	movf	??_main,w
  7489  060D  00A2               	movwf	LCDWriteInt@fieldLength
  7490  060E  01A3               	clrf	LCDWriteInt@numPlaces
  7491  060F  0AA3               	incf	LCDWriteInt@numPlaces,f
  7492  0610  01A4               	clrf	LCDWriteInt@sign
  7493  0611  318B  23C5  3182   	fcall	_LCDWriteInt
  7494                           
  7495                           ;main.c: 259: LCDWriteCharacter('A');
  7496  0614  3041               	movlw	65
  7497  0615  3195  2551  3182   	fcall	_LCDWriteCharacter
  7498                           
  7499                           ;main.c: 261: { gotoXY(80,2); LCDWriteInt(batteryState[0],1, 0, 0);};
  7500  0618  3002               	movlw	2
  7501  0619  0020               	movlb	0	; select bank0
  7502  061A  00D8               	movwf	??_main
  7503  061B  0858               	movf	??_main,w
  7504  061C  00F5               	movwf	gotoXY@y
  7505  061D  3050               	movlw	80
  7506  061E  3191  21A0  3182   	fcall	_gotoXY
  7507  0621  0021               	movlb	1	; select bank1
  7508  0622  085F               	movf	_batteryState^(0+128),w
  7509  0623  0020               	movlb	0	; select bank0
  7510  0624  00D8               	movwf	??_main
  7511  0625  01D9               	clrf	??_main+1
  7512  0626  0858               	movf	??_main,w
  7513  0627  00A0               	movwf	LCDWriteInt@value
  7514  0628  0859               	movf	??_main+1,w
  7515  0629  00A1               	movwf	LCDWriteInt@value+1
  7516  062A  01A2               	clrf	LCDWriteInt@fieldLength
  7517  062B  0AA2               	incf	LCDWriteInt@fieldLength,f
  7518  062C  01A3               	clrf	LCDWriteInt@numPlaces
  7519  062D  01A4               	clrf	LCDWriteInt@sign
  7520  062E  318B  23C5  3182   	fcall	_LCDWriteInt
  7521                           
  7522                           ;main.c: 263: { gotoXY(0,3); LCDWriteInt(voltage[3],4, 2, 0);};
  7523  0631  3003               	movlw	3
  7524  0632  0020               	movlb	0	; select bank0
  7525  0633  00D8               	movwf	??_main
  7526  0634  0858               	movf	??_main,w
  7527  0635  00F5               	movwf	gotoXY@y
  7528  0636  3000               	movlw	0
  7529  0637  3191  21A0  3182   	fcall	_gotoXY
  7530  063A  0021               	movlb	1	; select bank1
  7531  063B  083F               	movf	((_voltage+1)^(0+128)+6),w
  7532  063C  0020               	movlb	0	; select bank0
  7533  063D  00A1               	movwf	LCDWriteInt@value+1
  7534  063E  0021               	movlb	1	; select bank1
  7535  063F  083E               	movf	(_voltage^(0+128)+6),w
  7536  0640  0020               	movlb	0	; select bank0
  7537  0641  00A0               	movwf	LCDWriteInt@value
  7538  0642  3004               	movlw	4
  7539  0643  00D8               	movwf	??_main
  7540  0644  0858               	movf	??_main,w
  7541  0645  00A2               	movwf	LCDWriteInt@fieldLength
  7542  0646  3002               	movlw	2
  7543  0647  00D9               	movwf	??_main+1
  7544  0648  0859               	movf	??_main+1,w
  7545  0649  00A3               	movwf	LCDWriteInt@numPlaces
  7546  064A  01A4               	clrf	LCDWriteInt@sign
  7547  064B  318B  23C5  3182   	fcall	_LCDWriteInt
  7548                           
  7549                           ;main.c: 264: LCDWriteCharacter('V');
  7550  064E  3056               	movlw	86
  7551  064F  3195  2551  3182   	fcall	_LCDWriteCharacter
  7552                           
  7553                           ;main.c: 266: { gotoXY(26,3); LCDWriteInt(voltage[1],4, 2, 0);};
  7554  0652  3003               	movlw	3
  7555  0653  0020               	movlb	0	; select bank0
  7556  0654  00D8               	movwf	??_main
  7557  0655  0858               	movf	??_main,w
  7558  0656  00F5               	movwf	gotoXY@y
  7559  0657  301A               	movlw	26
  7560  0658  3191  21A0  3182   	fcall	_gotoXY
  7561  065B  0021               	movlb	1	; select bank1
  7562  065C  083B               	movf	((_voltage+1)^(0+128)+2),w
  7563  065D  0020               	movlb	0	; select bank0
  7564  065E  00A1               	movwf	LCDWriteInt@value+1
  7565  065F  0021               	movlb	1	; select bank1
  7566  0660  083A               	movf	(_voltage^(0+128)+2),w
  7567  0661  0020               	movlb	0	; select bank0
  7568  0662  00A0               	movwf	LCDWriteInt@value
  7569  0663  3004               	movlw	4
  7570  0664  00D8               	movwf	??_main
  7571  0665  0858               	movf	??_main,w
  7572  0666  00A2               	movwf	LCDWriteInt@fieldLength
  7573  0667  3002               	movlw	2
  7574  0668  00D9               	movwf	??_main+1
  7575  0669  0859               	movf	??_main+1,w
  7576  066A  00A3               	movwf	LCDWriteInt@numPlaces
  7577  066B  01A4               	clrf	LCDWriteInt@sign
  7578  066C  318B  23C5  3182   	fcall	_LCDWriteInt
  7579                           
  7580                           ;main.c: 268: LCDWriteCharacter('V');
  7581  066F  3056               	movlw	86
  7582  0670  3195  2551  3182   	fcall	_LCDWriteCharacter
  7583                           
  7584                           ;main.c: 270: { gotoXY(52,3); LCDWriteInt(Vref[1],4, 2, 0);};
  7585  0673  3003               	movlw	3
  7586  0674  0020               	movlb	0	; select bank0
  7587  0675  00D8               	movwf	??_main
  7588  0676  0858               	movf	??_main,w
  7589  0677  00F5               	movwf	gotoXY@y
  7590  0678  3034               	movlw	52
  7591  0679  3191  21A0  3182   	fcall	_gotoXY
  7592  067C  0021               	movlb	1	; select bank1
  7593  067D  0854               	movf	((_Vref+1)^(0+128)+2),w
  7594  067E  0020               	movlb	0	; select bank0
  7595  067F  00A1               	movwf	LCDWriteInt@value+1
  7596  0680  0021               	movlb	1	; select bank1
  7597  0681  0853               	movf	(_Vref^(0+128)+2),w
  7598  0682  0020               	movlb	0	; select bank0
  7599  0683  00A0               	movwf	LCDWriteInt@value
  7600  0684  3004               	movlw	4
  7601  0685  00D8               	movwf	??_main
  7602  0686  0858               	movf	??_main,w
  7603  0687  00A2               	movwf	LCDWriteInt@fieldLength
  7604  0688  3002               	movlw	2
  7605  0689  00D9               	movwf	??_main+1
  7606  068A  0859               	movf	??_main+1,w
  7607  068B  00A3               	movwf	LCDWriteInt@numPlaces
  7608  068C  01A4               	clrf	LCDWriteInt@sign
  7609  068D  318B  23C5  3182   	fcall	_LCDWriteInt
  7610                           
  7611                           ;main.c: 271: LCDWriteCharacter('V');
  7612  0690  3056               	movlw	86
  7613  0691  3195  2551  3182   	fcall	_LCDWriteCharacter
  7614                           
  7615                           ;main.c: 273: { gotoXY(80,3); LCDWriteInt(Imode[1],1, 0, 0);};
  7616  0694  3003               	movlw	3
  7617  0695  0020               	movlb	0	; select bank0
  7618  0696  00D8               	movwf	??_main
  7619  0697  0858               	movf	??_main,w
  7620  0698  00F5               	movwf	gotoXY@y
  7621  0699  3050               	movlw	80
  7622  069A  3191  21A0  3182   	fcall	_gotoXY
  7623  069D  0021               	movlb	1	; select bank1
  7624  069E  085A               	movf	(_Imode^(0+128)+1),w
  7625  069F  0020               	movlb	0	; select bank0
  7626  06A0  00A0               	movwf	LCDWriteInt@value
  7627  06A1  01A1               	clrf	LCDWriteInt@value+1
  7628  06A2  1BA0               	btfsc	LCDWriteInt@value,7
  7629  06A3  03A1               	decf	LCDWriteInt@value+1,f
  7630  06A4  01A2               	clrf	LCDWriteInt@fieldLength
  7631  06A5  0AA2               	incf	LCDWriteInt@fieldLength,f
  7632  06A6  01A3               	clrf	LCDWriteInt@numPlaces
  7633  06A7  01A4               	clrf	LCDWriteInt@sign
  7634  06A8  318B  23C5  3182   	fcall	_LCDWriteInt
  7635                           
  7636                           ;main.c: 275: { gotoXY(0,4); LCDWriteInt(current[3],3, 1, 0);};
  7637  06AB  3004               	movlw	4
  7638  06AC  0020               	movlb	0	; select bank0
  7639  06AD  00D8               	movwf	??_main
  7640  06AE  0858               	movf	??_main,w
  7641  06AF  00F5               	movwf	gotoXY@y
  7642  06B0  3000               	movlw	0
  7643  06B1  3191  21A0  3182   	fcall	_gotoXY
  7644  06B4  0021               	movlb	1	; select bank1
  7645  06B5  0837               	movf	((_current+1)^(0+128)+6),w
  7646  06B6  0020               	movlb	0	; select bank0
  7647  06B7  00A1               	movwf	LCDWriteInt@value+1
  7648  06B8  0021               	movlb	1	; select bank1
  7649  06B9  0836               	movf	(_current^(0+128)+6),w
  7650  06BA  0020               	movlb	0	; select bank0
  7651  06BB  00A0               	movwf	LCDWriteInt@value
  7652  06BC  3003               	movlw	3
  7653  06BD  00D8               	movwf	??_main
  7654  06BE  0858               	movf	??_main,w
  7655  06BF  00A2               	movwf	LCDWriteInt@fieldLength
  7656  06C0  01A3               	clrf	LCDWriteInt@numPlaces
  7657  06C1  0AA3               	incf	LCDWriteInt@numPlaces,f
  7658  06C2  01A4               	clrf	LCDWriteInt@sign
  7659  06C3  318B  23C5  3182   	fcall	_LCDWriteInt
  7660                           
  7661                           ;main.c: 277: LCDWriteCharacter('A');
  7662  06C6  3041               	movlw	65
  7663  06C7  3195  2551  3182   	fcall	_LCDWriteCharacter
  7664                           
  7665                           ;main.c: 279: { gotoXY(26,4); LCDWriteInt(current[1],3, 1, 0);};
  7666  06CA  3004               	movlw	4
  7667  06CB  0020               	movlb	0	; select bank0
  7668  06CC  00D8               	movwf	??_main
  7669  06CD  0858               	movf	??_main,w
  7670  06CE  00F5               	movwf	gotoXY@y
  7671  06CF  301A               	movlw	26
  7672  06D0  3191  21A0  3182   	fcall	_gotoXY
  7673  06D3  0021               	movlb	1	; select bank1
  7674  06D4  0833               	movf	((_current+1)^(0+128)+2),w
  7675  06D5  0020               	movlb	0	; select bank0
  7676  06D6  00A1               	movwf	LCDWriteInt@value+1
  7677  06D7  0021               	movlb	1	; select bank1
  7678  06D8  0832               	movf	(_current^(0+128)+2),w
  7679  06D9  0020               	movlb	0	; select bank0
  7680  06DA  00A0               	movwf	LCDWriteInt@value
  7681  06DB  3003               	movlw	3
  7682  06DC  00D8               	movwf	??_main
  7683  06DD  0858               	movf	??_main,w
  7684  06DE  00A2               	movwf	LCDWriteInt@fieldLength
  7685  06DF  01A3               	clrf	LCDWriteInt@numPlaces
  7686  06E0  0AA3               	incf	LCDWriteInt@numPlaces,f
  7687  06E1  01A4               	clrf	LCDWriteInt@sign
  7688  06E2  318B  23C5  3182   	fcall	_LCDWriteInt
  7689                           
  7690                           ;main.c: 281: LCDWriteCharacter('A');
  7691  06E5  3041               	movlw	65
  7692  06E6  3195  2551  3182   	fcall	_LCDWriteCharacter
  7693                           
  7694                           ;main.c: 283: { gotoXY(52,4); LCDWriteInt(Iref[1],3, 1, 0);};
  7695  06E9  3004               	movlw	4
  7696  06EA  0020               	movlb	0	; select bank0
  7697  06EB  00D8               	movwf	??_main
  7698  06EC  0858               	movf	??_main,w
  7699  06ED  00F5               	movwf	gotoXY@y
  7700  06EE  3034               	movlw	52
  7701  06EF  3191  21A0  3182   	fcall	_gotoXY
  7702  06F2  0021               	movlb	1	; select bank1
  7703  06F3  0850               	movf	((_Iref+1)^(0+128)+2),w
  7704  06F4  0020               	movlb	0	; select bank0
  7705  06F5  00A1               	movwf	LCDWriteInt@value+1
  7706  06F6  0021               	movlb	1	; select bank1
  7707  06F7  084F               	movf	(_Iref^(0+128)+2),w
  7708  06F8  0020               	movlb	0	; select bank0
  7709  06F9  00A0               	movwf	LCDWriteInt@value
  7710  06FA  3003               	movlw	3
  7711  06FB  00D8               	movwf	??_main
  7712  06FC  0858               	movf	??_main,w
  7713  06FD  00A2               	movwf	LCDWriteInt@fieldLength
  7714  06FE  01A3               	clrf	LCDWriteInt@numPlaces
  7715  06FF  0AA3               	incf	LCDWriteInt@numPlaces,f
  7716  0700  01A4               	clrf	LCDWriteInt@sign
  7717  0701  318B  23C5  3182   	fcall	_LCDWriteInt
  7718                           
  7719                           ;main.c: 284: LCDWriteCharacter('A');
  7720  0704  3041               	movlw	65
  7721  0705  3195  2551  3182   	fcall	_LCDWriteCharacter
  7722                           
  7723                           ;main.c: 286: { gotoXY(80,4); LCDWriteInt(batteryState[1],1, 0, 0);};
  7724  0708  3004               	movlw	4
  7725  0709  0020               	movlb	0	; select bank0
  7726  070A  00D8               	movwf	??_main
  7727  070B  0858               	movf	??_main,w
  7728  070C  00F5               	movwf	gotoXY@y
  7729  070D  3050               	movlw	80
  7730  070E  3191  21A0  3182   	fcall	_gotoXY
  7731  0711  0021               	movlb	1	; select bank1
  7732  0712  0860               	movf	(_batteryState^(0+128)+1),w
  7733  0713  0020               	movlb	0	; select bank0
  7734  0714  00D8               	movwf	??_main
  7735  0715  01D9               	clrf	??_main+1
  7736  0716  0858               	movf	??_main,w
  7737  0717  00A0               	movwf	LCDWriteInt@value
  7738  0718  0859               	movf	??_main+1,w
  7739  0719  00A1               	movwf	LCDWriteInt@value+1
  7740  071A  01A2               	clrf	LCDWriteInt@fieldLength
  7741  071B  0AA2               	incf	LCDWriteInt@fieldLength,f
  7742  071C  01A3               	clrf	LCDWriteInt@numPlaces
  7743  071D  01A4               	clrf	LCDWriteInt@sign
  7744  071E  318B  23C5  3182   	fcall	_LCDWriteInt
  7745                           
  7746                           ;main.c: 290: { gotoXY(0,5); LCDWriteInt(dutyCycle6,4, 0, 0);};
  7747  0721  3005               	movlw	5
  7748  0722  0020               	movlb	0	; select bank0
  7749  0723  00D8               	movwf	??_main
  7750  0724  0858               	movf	??_main,w
  7751  0725  00F5               	movwf	gotoXY@y
  7752  0726  3000               	movlw	0
  7753  0727  3191  21A0  3182   	fcall	_gotoXY
  7754  072A  0020               	movlb	0	; select bank0
  7755  072B  086C               	movf	main@dutyCycle6+1,w
  7756  072C  00A1               	movwf	LCDWriteInt@value+1
  7757  072D  086B               	movf	main@dutyCycle6,w
  7758  072E  00A0               	movwf	LCDWriteInt@value
  7759  072F  3004               	movlw	4
  7760  0730  00D8               	movwf	??_main
  7761  0731  0858               	movf	??_main,w
  7762  0732  00A2               	movwf	LCDWriteInt@fieldLength
  7763  0733  01A3               	clrf	LCDWriteInt@numPlaces
  7764  0734  01A4               	clrf	LCDWriteInt@sign
  7765  0735  318B  23C5  3182   	fcall	_LCDWriteInt
  7766                           
  7767                           ;main.c: 291: { gotoXY(18,5); LCDWriteInt(VHoldMode[0],1, 0, 0);};
  7768  0738  3005               	movlw	5
  7769  0739  0020               	movlb	0	; select bank0
  7770  073A  00D8               	movwf	??_main
  7771  073B  0858               	movf	??_main,w
  7772  073C  00F5               	movwf	gotoXY@y
  7773  073D  3012               	movlw	18
  7774  073E  3191  21A0  3182   	fcall	_gotoXY
  7775  0741  0021               	movlb	1	; select bank1
  7776  0742  085D               	movf	_VHoldMode^(0+128),w
  7777  0743  0020               	movlb	0	; select bank0
  7778  0744  00A0               	movwf	LCDWriteInt@value
  7779  0745  01A1               	clrf	LCDWriteInt@value+1
  7780  0746  1BA0               	btfsc	LCDWriteInt@value,7
  7781  0747  03A1               	decf	LCDWriteInt@value+1,f
  7782  0748  01A2               	clrf	LCDWriteInt@fieldLength
  7783  0749  0AA2               	incf	LCDWriteInt@fieldLength,f
  7784  074A  01A3               	clrf	LCDWriteInt@numPlaces
  7785  074B  01A4               	clrf	LCDWriteInt@sign
  7786  074C  318B  23C5  3182   	fcall	_LCDWriteInt
  7787                           
  7788                           ;main.c: 292: LCDWriteCharacter(' ');
  7789  074F  3020               	movlw	32
  7790  0750  3195  2551  3182   	fcall	_LCDWriteCharacter
  7791                           
  7792                           ;main.c: 293: { gotoXY(28,5); LCDWriteInt(dutyCycle7,4, 0, 0);};
  7793  0753  3005               	movlw	5
  7794  0754  0020               	movlb	0	; select bank0
  7795  0755  00D8               	movwf	??_main
  7796  0756  0858               	movf	??_main,w
  7797  0757  00F5               	movwf	gotoXY@y
  7798  0758  301C               	movlw	28
  7799  0759  3191  21A0  3182   	fcall	_gotoXY
  7800  075C  0020               	movlb	0	; select bank0
  7801  075D  086E               	movf	main@dutyCycle7+1,w
  7802  075E  00A1               	movwf	LCDWriteInt@value+1
  7803  075F  086D               	movf	main@dutyCycle7,w
  7804  0760  00A0               	movwf	LCDWriteInt@value
  7805  0761  3004               	movlw	4
  7806  0762  00D8               	movwf	??_main
  7807  0763  0858               	movf	??_main,w
  7808  0764  00A2               	movwf	LCDWriteInt@fieldLength
  7809  0765  01A3               	clrf	LCDWriteInt@numPlaces
  7810  0766  01A4               	clrf	LCDWriteInt@sign
  7811  0767  318B  23C5  3182   	fcall	_LCDWriteInt
  7812                           
  7813                           ;main.c: 294: { gotoXY(46,5); LCDWriteInt(VHoldMode[1],1, 0, 0);};
  7814  076A  3005               	movlw	5
  7815  076B  0020               	movlb	0	; select bank0
  7816  076C  00D8               	movwf	??_main
  7817  076D  0858               	movf	??_main,w
  7818  076E  00F5               	movwf	gotoXY@y
  7819  076F  302E               	movlw	46
  7820  0770  3191  21A0  3182   	fcall	_gotoXY
  7821  0773  0021               	movlb	1	; select bank1
  7822  0774  085E               	movf	(_VHoldMode^(0+128)+1),w
  7823  0775  0020               	movlb	0	; select bank0
  7824  0776  00A0               	movwf	LCDWriteInt@value
  7825  0777  01A1               	clrf	LCDWriteInt@value+1
  7826  0778  1BA0               	btfsc	LCDWriteInt@value,7
  7827  0779  03A1               	decf	LCDWriteInt@value+1,f
  7828  077A  01A2               	clrf	LCDWriteInt@fieldLength
  7829  077B  0AA2               	incf	LCDWriteInt@fieldLength,f
  7830  077C  01A3               	clrf	LCDWriteInt@numPlaces
  7831  077D  01A4               	clrf	LCDWriteInt@sign
  7832  077E  318B  23C5  3182   	fcall	_LCDWriteInt
  7833                           
  7834                           ;main.c: 295: LCDWriteCharacter(' ');
  7835  0781  3020               	movlw	32
  7836  0782  3195  2551  3182   	fcall	_LCDWriteCharacter
  7837                           
  7838                           ;main.c: 296: { gotoXY(56,5); LCDWriteInt(batteryTemp,3, 1, 0);};
  7839  0785  3005               	movlw	5
  7840  0786  0020               	movlb	0	; select bank0
  7841  0787  00D8               	movwf	??_main
  7842  0788  0858               	movf	??_main,w
  7843  0789  00F5               	movwf	gotoXY@y
  7844  078A  3038               	movlw	56
  7845  078B  3191  21A0  3182   	fcall	_gotoXY
  7846  078E  0021               	movlb	1	; select bank1
  7847  078F  086D               	movf	(_batteryTemp+1)^(0+128),w
  7848  0790  0020               	movlb	0	; select bank0
  7849  0791  00A1               	movwf	LCDWriteInt@value+1
  7850  0792  0021               	movlb	1	; select bank1
  7851  0793  086C               	movf	_batteryTemp^(0+128),w
  7852  0794  0020               	movlb	0	; select bank0
  7853  0795  00A0               	movwf	LCDWriteInt@value
  7854  0796  3003               	movlw	3
  7855  0797  00D8               	movwf	??_main
  7856  0798  0858               	movf	??_main,w
  7857  0799  00A2               	movwf	LCDWriteInt@fieldLength
  7858  079A  01A3               	clrf	LCDWriteInt@numPlaces
  7859  079B  0AA3               	incf	LCDWriteInt@numPlaces,f
  7860  079C  01A4               	clrf	LCDWriteInt@sign
  7861  079D  318B  23C5  3182   	fcall	_LCDWriteInt
  7862                           
  7863                           ;main.c: 297: LCDWriteCharacter(123);
  7864  07A0  307B               	movlw	123
  7865  07A1  3195  2551  3182   	fcall	_LCDWriteCharacter
  7866                           
  7867                           ;main.c: 298: LCDWriteCharacter('C');
  7868  07A4  3043               	movlw	67
  7869  07A5  3195  2551  3182   	fcall	_LCDWriteCharacter
  7870                           
  7871                           ;main.c: 368: if(batteryState[0] > FINISHED)
  7872  07A8  3003               	movlw	3
  7873  07A9  0021               	movlb	1	; select bank1
  7874  07AA  025F               	subwf	_batteryState^(0+128),w
  7875  07AB  1C03               	skipc
  7876  07AC  2FB1               	goto	l3390
  7877                           
  7878                           ;main.c: 369: {
  7879                           ;main.c: 370: cc_cv_mode(0);
  7880  07AD  3000               	movlw	0
  7881  07AE  318E  26B1  3182   	fcall	_cc_cv_mode
  7882  07B1                     l3390:	
  7883                           
  7884                           ;main.c: 371: }
  7885                           ;main.c: 372: if(batteryState[1] > FINISHED)
  7886  07B1  3003               	movlw	3
  7887  07B2  0021               	movlb	1	; select bank1
  7888  07B3  0260               	subwf	(_batteryState^(0+128)+1),w
  7889  07B4  1C03               	skipc
  7890  07B5  2FBA               	goto	l3394
  7891                           
  7892                           ;main.c: 373: {
  7893                           ;main.c: 374: cc_cv_mode(1);
  7894  07B6  3001               	movlw	1
  7895  07B7  318E  26B1  3182   	fcall	_cc_cv_mode
  7896  07BA                     l3394:	
  7897                           
  7898                           ;main.c: 375: }
  7899                           ;main.c: 376: slowLoop=0;
  7900  07BA  0020               	movlb	0	; select bank0
  7901  07BB  01E3               	clrf	main@slowLoop
  7902  07BC  2AED               	goto	l3120
  7903  07BD                     __end_of_main:	
  7904                           
  7905                           	psect	text1
  7906  0C7E                     __ptext1:	
  7907 ;; *************** function _tempCalc *****************
  7908 ;; Defined at:
  7909 ;;		line 4 in file "tempCalc.c"
  7910 ;; Parameters:    Size  Location     Type
  7911 ;;  analogValue     2   45[BANK0 ] int 
  7912 ;; Auto vars:     Size  Location     Type
  7913 ;;  steinhart       3   53[BANK0 ] float 
  7914 ;;  R               3   47[BANK0 ] float 
  7915 ;; Return value:  Size  Location     Type
  7916 ;;                  2   45[BANK0 ] int 
  7917 ;; Registers used:
  7918 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7919 ;; Tracked objects:
  7920 ;;		On entry : 0/0
  7921 ;;		On exit  : 0/0
  7922 ;;		Unchanged: 0/0
  7923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7924 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7925 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7927 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7928 ;;Total ram usage:       11 bytes
  7929 ;; Hardware stack levels used:    1
  7930 ;; Hardware stack levels required when called:    4
  7931 ;; This function calls:
  7932 ;;		___awtoft
  7933 ;;		___ftadd
  7934 ;;		___ftdiv
  7935 ;;		___ftmul
  7936 ;;		___ftsub
  7937 ;;		___fttol
  7938 ;;		_log
  7939 ;; This function is called by:
  7940 ;;		_main
  7941 ;; This function uses a non-reentrant model
  7942 ;;
  7943                           
  7944                           
  7945                           ;psect for function _tempCalc
  7946  0C7E                     _tempCalc:	
  7947                           
  7948                           ;tempCalc.c: 6: float R, steinhart;
  7949                           ;tempCalc.c: 8: R=10030/(1023/(float)analogValue-1);
  7950                           
  7951                           ;incstack = 0
  7952                           ; Regs used in _tempCalc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7953  0C7E  3000               	movlw	0
  7954  0C7F  0020               	movlb	0	; select bank0
  7955  0C80  00B0               	movwf	___ftadd@f1
  7956  0C81  3080               	movlw	128
  7957  0C82  00B1               	movwf	___ftadd@f1+1
  7958  0C83  30BF               	movlw	191
  7959  0C84  00B2               	movwf	___ftadd@f1+2
  7960  0C85  084E               	movf	tempCalc@analogValue+1,w
  7961  0C86  00F9               	movwf	___awtoft@c+1
  7962  0C87  084D               	movf	tempCalc@analogValue,w
  7963  0C88  00F8               	movwf	___awtoft@c
  7964  0C89  3192  2275  318C   	fcall	___awtoft
  7965  0C8C  0878               	movf	?___awtoft,w
  7966  0C8D  0020               	movlb	0	; select bank0
  7967  0C8E  00A0               	movwf	___ftdiv@f2
  7968  0C8F  0879               	movf	?___awtoft+1,w
  7969  0C90  00A1               	movwf	___ftdiv@f2+1
  7970  0C91  087A               	movf	?___awtoft+2,w
  7971  0C92  00A2               	movwf	___ftdiv@f2+2
  7972  0C93  30C0               	movlw	192
  7973  0C94  00A3               	movwf	___ftdiv@f1
  7974  0C95  307F               	movlw	127
  7975  0C96  00A4               	movwf	___ftdiv@f1+1
  7976  0C97  3044               	movlw	68
  7977  0C98  00A5               	movwf	___ftdiv@f1+2
  7978  0C99  3189  21B8  318C   	fcall	___ftdiv
  7979  0C9C  0020               	movlb	0	; select bank0
  7980  0C9D  0820               	movf	?___ftdiv,w
  7981  0C9E  00B3               	movwf	___ftadd@f2
  7982  0C9F  0821               	movf	?___ftdiv+1,w
  7983  0CA0  00B4               	movwf	___ftadd@f2+1
  7984  0CA1  0822               	movf	?___ftdiv+2,w
  7985  0CA2  00B5               	movwf	___ftadd@f2+2
  7986  0CA3  3180  204E  318C   	fcall	___ftadd
  7987  0CA6  0020               	movlb	0	; select bank0
  7988  0CA7  0830               	movf	?___ftadd,w
  7989  0CA8  00D2               	movwf	_tempCalc$1190
  7990  0CA9  0831               	movf	?___ftadd+1,w
  7991  0CAA  00D3               	movwf	_tempCalc$1190+1
  7992  0CAB  0832               	movf	?___ftadd+2,w
  7993  0CAC  00D4               	movwf	_tempCalc$1190+2
  7994                           
  7995                           ;tempCalc.c: 6: float R, steinhart;
  7996                           ;tempCalc.c: 8: R=10030/(1023/(float)analogValue-1);
  7997  0CAD  0852               	movf	_tempCalc$1190,w
  7998  0CAE  00A0               	movwf	___ftdiv@f2
  7999  0CAF  0853               	movf	_tempCalc$1190+1,w
  8000  0CB0  00A1               	movwf	___ftdiv@f2+1
  8001  0CB1  0854               	movf	_tempCalc$1190+2,w
  8002  0CB2  00A2               	movwf	___ftdiv@f2+2
  8003  0CB3  30B8               	movlw	184
  8004  0CB4  00A3               	movwf	___ftdiv@f1
  8005  0CB5  301C               	movlw	28
  8006  0CB6  00A4               	movwf	___ftdiv@f1+1
  8007  0CB7  3046               	movlw	70
  8008  0CB8  00A5               	movwf	___ftdiv@f1+2
  8009  0CB9  3189  21B8  318C   	fcall	___ftdiv
  8010  0CBC  0020               	movlb	0	; select bank0
  8011  0CBD  0820               	movf	?___ftdiv,w
  8012  0CBE  00CF               	movwf	tempCalc@R
  8013  0CBF  0821               	movf	?___ftdiv+1,w
  8014  0CC0  00D0               	movwf	tempCalc@R+1
  8015  0CC1  0822               	movf	?___ftdiv+2,w
  8016  0CC2  00D1               	movwf	tempCalc@R+2
  8017                           
  8018                           ;tempCalc.c: 10: steinhart=R/10010;
  8019  0CC3  3068               	movlw	104
  8020  0CC4  00A0               	movwf	___ftdiv@f2
  8021  0CC5  301C               	movlw	28
  8022  0CC6  00A1               	movwf	___ftdiv@f2+1
  8023  0CC7  3046               	movlw	70
  8024  0CC8  00A2               	movwf	___ftdiv@f2+2
  8025  0CC9  084F               	movf	tempCalc@R,w
  8026  0CCA  00A3               	movwf	___ftdiv@f1
  8027  0CCB  0850               	movf	tempCalc@R+1,w
  8028  0CCC  00A4               	movwf	___ftdiv@f1+1
  8029  0CCD  0851               	movf	tempCalc@R+2,w
  8030  0CCE  00A5               	movwf	___ftdiv@f1+2
  8031  0CCF  3189  21B8  318C   	fcall	___ftdiv
  8032  0CD2  0020               	movlb	0	; select bank0
  8033  0CD3  0820               	movf	?___ftdiv,w
  8034  0CD4  00D5               	movwf	tempCalc@steinhart
  8035  0CD5  0821               	movf	?___ftdiv+1,w
  8036  0CD6  00D6               	movwf	tempCalc@steinhart+1
  8037  0CD7  0822               	movf	?___ftdiv+2,w
  8038  0CD8  00D7               	movwf	tempCalc@steinhart+2
  8039                           
  8040                           ;tempCalc.c: 11: steinhart=log(steinhart);
  8041  0CD9  0855               	movf	tempCalc@steinhart,w
  8042  0CDA  00C7               	movwf	log@x
  8043  0CDB  0856               	movf	tempCalc@steinhart+1,w
  8044  0CDC  00C8               	movwf	log@x+1
  8045  0CDD  0857               	movf	tempCalc@steinhart+2,w
  8046  0CDE  00C9               	movwf	log@x+2
  8047  0CDF  318A  2261  318C   	fcall	_log
  8048  0CE2  0020               	movlb	0	; select bank0
  8049  0CE3  0847               	movf	?_log,w
  8050  0CE4  00D5               	movwf	tempCalc@steinhart
  8051  0CE5  0848               	movf	?_log+1,w
  8052  0CE6  00D6               	movwf	tempCalc@steinhart+1
  8053  0CE7  0849               	movf	?_log+2,w
  8054  0CE8  00D7               	movwf	tempCalc@steinhart+2
  8055                           
  8056                           ;tempCalc.c: 12: steinhart/=3795.3;
  8057  0CE9  3035               	movlw	53
  8058  0CEA  00A0               	movwf	___ftdiv@f2
  8059  0CEB  306D               	movlw	109
  8060  0CEC  00A1               	movwf	___ftdiv@f2+1
  8061  0CED  3045               	movlw	69
  8062  0CEE  00A2               	movwf	___ftdiv@f2+2
  8063  0CEF  0855               	movf	tempCalc@steinhart,w
  8064  0CF0  00A3               	movwf	___ftdiv@f1
  8065  0CF1  0856               	movf	tempCalc@steinhart+1,w
  8066  0CF2  00A4               	movwf	___ftdiv@f1+1
  8067  0CF3  0857               	movf	tempCalc@steinhart+2,w
  8068  0CF4  00A5               	movwf	___ftdiv@f1+2
  8069  0CF5  3189  21B8  318C   	fcall	___ftdiv
  8070  0CF8  0020               	movlb	0	; select bank0
  8071  0CF9  0820               	movf	?___ftdiv,w
  8072  0CFA  00D5               	movwf	tempCalc@steinhart
  8073  0CFB  0821               	movf	?___ftdiv+1,w
  8074  0CFC  00D6               	movwf	tempCalc@steinhart+1
  8075  0CFD  0822               	movf	?___ftdiv+2,w
  8076  0CFE  00D7               	movwf	tempCalc@steinhart+2
  8077                           
  8078                           ;tempCalc.c: 16: steinhart+=1.0/(25+273.15);
  8079  0CFF  30CF               	movlw	207
  8080  0D00  00B0               	movwf	___ftadd@f1
  8081  0D01  305B               	movlw	91
  8082  0D02  00B1               	movwf	___ftadd@f1+1
  8083  0D03  303B               	movlw	59
  8084  0D04  00B2               	movwf	___ftadd@f1+2
  8085  0D05  0855               	movf	tempCalc@steinhart,w
  8086  0D06  00B3               	movwf	___ftadd@f2
  8087  0D07  0856               	movf	tempCalc@steinhart+1,w
  8088  0D08  00B4               	movwf	___ftadd@f2+1
  8089  0D09  0857               	movf	tempCalc@steinhart+2,w
  8090  0D0A  00B5               	movwf	___ftadd@f2+2
  8091  0D0B  3180  204E  318C   	fcall	___ftadd
  8092  0D0E  0020               	movlb	0	; select bank0
  8093  0D0F  0830               	movf	?___ftadd,w
  8094  0D10  00D5               	movwf	tempCalc@steinhart
  8095  0D11  0831               	movf	?___ftadd+1,w
  8096  0D12  00D6               	movwf	tempCalc@steinhart+1
  8097  0D13  0832               	movf	?___ftadd+2,w
  8098  0D14  00D7               	movwf	tempCalc@steinhart+2
  8099                           
  8100                           ;tempCalc.c: 17: steinhart=1.0/steinhart;
  8101  0D15  0855               	movf	tempCalc@steinhart,w
  8102  0D16  00A0               	movwf	___ftdiv@f2
  8103  0D17  0856               	movf	tempCalc@steinhart+1,w
  8104  0D18  00A1               	movwf	___ftdiv@f2+1
  8105  0D19  0857               	movf	tempCalc@steinhart+2,w
  8106  0D1A  00A2               	movwf	___ftdiv@f2+2
  8107  0D1B  3000               	movlw	0
  8108  0D1C  00A3               	movwf	___ftdiv@f1
  8109  0D1D  3080               	movlw	128
  8110  0D1E  00A4               	movwf	___ftdiv@f1+1
  8111  0D1F  303F               	movlw	63
  8112  0D20  00A5               	movwf	___ftdiv@f1+2
  8113  0D21  3189  21B8  318C   	fcall	___ftdiv
  8114  0D24  0020               	movlb	0	; select bank0
  8115  0D25  0820               	movf	?___ftdiv,w
  8116  0D26  00D5               	movwf	tempCalc@steinhart
  8117  0D27  0821               	movf	?___ftdiv+1,w
  8118  0D28  00D6               	movwf	tempCalc@steinhart+1
  8119  0D29  0822               	movf	?___ftdiv+2,w
  8120  0D2A  00D7               	movwf	tempCalc@steinhart+2
  8121                           
  8122                           ;tempCalc.c: 18: steinhart-=273.15;
  8123  0D2B  3093               	movlw	147
  8124  0D2C  00BD               	movwf	___ftsub@f2
  8125  0D2D  3088               	movlw	136
  8126  0D2E  00BE               	movwf	___ftsub@f2+1
  8127  0D2F  3043               	movlw	67
  8128  0D30  00BF               	movwf	___ftsub@f2+2
  8129  0D31  0855               	movf	tempCalc@steinhart,w
  8130  0D32  00C0               	movwf	___ftsub@f1
  8131  0D33  0856               	movf	tempCalc@steinhart+1,w
  8132  0D34  00C1               	movwf	___ftsub@f1+1
  8133  0D35  0857               	movf	tempCalc@steinhart+2,w
  8134  0D36  00C2               	movwf	___ftsub@f1+2
  8135  0D37  3192  2238  318C   	fcall	___ftsub
  8136  0D3A  0020               	movlb	0	; select bank0
  8137  0D3B  083D               	movf	?___ftsub,w
  8138  0D3C  00D5               	movwf	tempCalc@steinhart
  8139  0D3D  083E               	movf	?___ftsub+1,w
  8140  0D3E  00D6               	movwf	tempCalc@steinhart+1
  8141  0D3F  083F               	movf	?___ftsub+2,w
  8142  0D40  00D7               	movwf	tempCalc@steinhart+2
  8143                           
  8144                           ;tempCalc.c: 20: steinhart*=10;
  8145  0D41  3000               	movlw	0
  8146  0D42  00A0               	movwf	___ftmul@f1
  8147  0D43  3020               	movlw	32
  8148  0D44  00A1               	movwf	___ftmul@f1+1
  8149  0D45  3041               	movlw	65
  8150  0D46  00A2               	movwf	___ftmul@f1+2
  8151  0D47  0855               	movf	tempCalc@steinhart,w
  8152  0D48  00A3               	movwf	___ftmul@f2
  8153  0D49  0856               	movf	tempCalc@steinhart+1,w
  8154  0D4A  00A4               	movwf	___ftmul@f2+1
  8155  0D4B  0857               	movf	tempCalc@steinhart+2,w
  8156  0D4C  00A5               	movwf	___ftmul@f2+2
  8157  0D4D  318B  2311  318C   	fcall	___ftmul
  8158  0D50  0020               	movlb	0	; select bank0
  8159  0D51  0820               	movf	?___ftmul,w
  8160  0D52  00D5               	movwf	tempCalc@steinhart
  8161  0D53  0821               	movf	?___ftmul+1,w
  8162  0D54  00D6               	movwf	tempCalc@steinhart+1
  8163  0D55  0822               	movf	?___ftmul+2,w
  8164  0D56  00D7               	movwf	tempCalc@steinhart+2
  8165                           
  8166                           ;tempCalc.c: 24: return (int16_t)steinhart;
  8167  0D57  0855               	movf	tempCalc@steinhart,w
  8168  0D58  00B0               	movwf	___fttol@f1
  8169  0D59  0856               	movf	tempCalc@steinhart+1,w
  8170  0D5A  00B1               	movwf	___fttol@f1+1
  8171  0D5B  0857               	movf	tempCalc@steinhart+2,w
  8172  0D5C  00B2               	movwf	___fttol@f1+2
  8173  0D5D  3196  26F2         	fcall	___fttol
  8174  0D5F  0020               	movlb	0	; select bank0
  8175  0D60  0831               	movf	?___fttol+1,w
  8176  0D61  00CE               	movwf	?_tempCalc+1
  8177  0D62  0830               	movf	?___fttol,w
  8178  0D63  00CD               	movwf	?_tempCalc
  8179  0D64  0008               	return
  8180  0D65                     __end_of_tempCalc:	
  8181                           
  8182                           	psect	text2
  8183  0A61                     __ptext2:	
  8184 ;; *************** function _log *****************
  8185 ;; Defined at:
  8186 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\log.c"
  8187 ;; Parameters:    Size  Location     Type
  8188 ;;  x               3   39[BANK0 ] int 
  8189 ;; Auto vars:     Size  Location     Type
  8190 ;;  exponent        2   43[BANK0 ] int 
  8191 ;; Return value:  Size  Location     Type
  8192 ;;                  3   39[BANK0 ] int 
  8193 ;; Registers used:
  8194 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8195 ;; Tracked objects:
  8196 ;;		On entry : 0/0
  8197 ;;		On exit  : 0/0
  8198 ;;		Unchanged: 0/0
  8199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8200 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8201 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8202 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8203 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8204 ;;Total ram usage:        6 bytes
  8205 ;; Hardware stack levels used:    1
  8206 ;; Hardware stack levels required when called:    3
  8207 ;; This function calls:
  8208 ;;		___awtoft
  8209 ;;		___ftadd
  8210 ;;		___ftge
  8211 ;;		___ftmul
  8212 ;;		_eval_poly
  8213 ;;		_frexp
  8214 ;; This function is called by:
  8215 ;;		_tempCalc
  8216 ;; This function uses a non-reentrant model
  8217 ;;
  8218                           
  8219                           
  8220                           ;psect for function _log
  8221  0A61                     _log:	
  8222                           
  8223                           ;incstack = 0
  8224                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8225  0A61  0020               	movlb	0	; select bank0
  8226  0A62  0847               	movf	log@x,w
  8227  0A63  00F0               	movwf	___ftge@ff1
  8228  0A64  0848               	movf	log@x+1,w
  8229  0A65  00F1               	movwf	___ftge@ff1+1
  8230  0A66  0849               	movf	log@x+2,w
  8231  0A67  00F2               	movwf	___ftge@ff1+2
  8232  0A68  3000               	movlw	0
  8233  0A69  00F3               	movwf	___ftge@ff2
  8234  0A6A  3000               	movlw	0
  8235  0A6B  00F4               	movwf	___ftge@ff2+1
  8236  0A6C  3000               	movlw	0
  8237  0A6D  00F5               	movwf	___ftge@ff2+2
  8238  0A6E  3193  237E  318A   	fcall	___ftge
  8239  0A71  1803               	btfsc	3,0
  8240  0A72  2A80               	goto	l2680
  8241  0A73  3021               	movlw	33
  8242  0A74  0021               	movlb	1	; select bank1
  8243  0A75  00E3               	movwf	_errno^(0+128)
  8244  0A76  3000               	movlw	0
  8245  0A77  00E4               	movwf	(_errno^(0+128)+1)
  8246  0A78  3000               	movlw	0
  8247  0A79  0020               	movlb	0	; select bank0
  8248  0A7A  00C7               	movwf	?_log
  8249  0A7B  3000               	movlw	0
  8250  0A7C  00C8               	movwf	?_log+1
  8251  0A7D  3000               	movlw	0
  8252  0A7E  00C9               	movwf	?_log+2
  8253  0A7F  0008               	return
  8254  0A80                     l2680:	
  8255  0A80  0020               	movlb	0	; select bank0
  8256  0A81  0849               	movf	log@x+2,w
  8257  0A82  0448               	iorwf	log@x+1,w
  8258  0A83  0447               	iorwf	log@x,w
  8259  0A84  1D03               	skipz
  8260  0A85  2A93               	goto	l2686
  8261  0A86  3022               	movlw	34
  8262  0A87  0021               	movlb	1	; select bank1
  8263  0A88  00E3               	movwf	_errno^(0+128)
  8264  0A89  3000               	movlw	0
  8265  0A8A  00E4               	movwf	(_errno^(0+128)+1)
  8266  0A8B  3000               	movlw	0
  8267  0A8C  0020               	movlb	0	; select bank0
  8268  0A8D  00C7               	movwf	?_log
  8269  0A8E  3000               	movlw	0
  8270  0A8F  00C8               	movwf	?_log+1
  8271  0A90  3000               	movlw	0
  8272  0A91  00C9               	movwf	?_log+2
  8273  0A92  0008               	return
  8274  0A93                     l2686:	
  8275  0A93  3000               	movlw	0
  8276  0A94  00B0               	movwf	___ftadd@f1
  8277  0A95  3080               	movlw	128
  8278  0A96  00B1               	movwf	___ftadd@f1+1
  8279  0A97  30BF               	movlw	191
  8280  0A98  00B2               	movwf	___ftadd@f1+2
  8281  0A99  3000               	movlw	0
  8282  0A9A  00A0               	movwf	___ftmul@f1
  8283  0A9B  3000               	movlw	0
  8284  0A9C  00A1               	movwf	___ftmul@f1+1
  8285  0A9D  3040               	movlw	64
  8286  0A9E  00A2               	movwf	___ftmul@f1+2
  8287  0A9F  304B               	movlw	(low (log@exponent| 0))& (0+255)
  8288  0AA0  00CA               	movwf	??_log
  8289  0AA1  084A               	movf	??_log,w
  8290  0AA2  00F3               	movwf	frexp@eptr
  8291  0AA3  0847               	movf	log@x,w
  8292  0AA4  00F0               	movwf	frexp@value
  8293  0AA5  0848               	movf	log@x+1,w
  8294  0AA6  00F1               	movwf	frexp@value+1
  8295  0AA7  0849               	movf	log@x+2,w
  8296  0AA8  00F2               	movwf	frexp@value+2
  8297  0AA9  3193  23B9  318A   	fcall	_frexp
  8298  0AAC  0870               	movf	?_frexp,w
  8299  0AAD  0020               	movlb	0	; select bank0
  8300  0AAE  00A3               	movwf	___ftmul@f2
  8301  0AAF  0871               	movf	?_frexp+1,w
  8302  0AB0  00A4               	movwf	___ftmul@f2+1
  8303  0AB1  0872               	movf	?_frexp+2,w
  8304  0AB2  00A5               	movwf	___ftmul@f2+2
  8305  0AB3  318B  2311  318A   	fcall	___ftmul
  8306  0AB6  0020               	movlb	0	; select bank0
  8307  0AB7  0820               	movf	?___ftmul,w
  8308  0AB8  00B3               	movwf	___ftadd@f2
  8309  0AB9  0821               	movf	?___ftmul+1,w
  8310  0ABA  00B4               	movwf	___ftadd@f2+1
  8311  0ABB  0822               	movf	?___ftmul+2,w
  8312  0ABC  00B5               	movwf	___ftadd@f2+2
  8313  0ABD  3180  204E  318A   	fcall	___ftadd
  8314  0AC0  0020               	movlb	0	; select bank0
  8315  0AC1  0830               	movf	?___ftadd,w
  8316  0AC2  00C7               	movwf	log@x
  8317  0AC3  0831               	movf	?___ftadd+1,w
  8318  0AC4  00C8               	movwf	log@x+1
  8319  0AC5  0832               	movf	?___ftadd+2,w
  8320  0AC6  00C9               	movwf	log@x+2
  8321  0AC7  30FF               	movlw	255
  8322  0AC8  07CB               	addwf	log@exponent,f
  8323  0AC9  30FF               	movlw	255
  8324  0ACA  3DCC               	addwfc	log@exponent+1,f
  8325  0ACB  0847               	movf	log@x,w
  8326  0ACC  00BD               	movwf	eval_poly@x
  8327  0ACD  0848               	movf	log@x+1,w
  8328  0ACE  00BE               	movwf	eval_poly@x+1
  8329  0ACF  0849               	movf	log@x+2,w
  8330  0AD0  00BF               	movwf	eval_poly@x+2
  8331  0AD1  302F               	movlw	low (log@coeff| (0+32768))
  8332  0AD2  00C0               	movwf	eval_poly@d
  8333  0AD3  3089               	movlw	high (log@coeff| (0+32768))
  8334  0AD4  00C1               	movwf	eval_poly@d+1
  8335  0AD5  3008               	movlw	8
  8336  0AD6  00C2               	movwf	eval_poly@n
  8337  0AD7  3000               	movlw	0
  8338  0AD8  00C3               	movwf	eval_poly@n+1
  8339  0AD9  3189  2158  318A   	fcall	_eval_poly
  8340  0ADC  0020               	movlb	0	; select bank0
  8341  0ADD  083D               	movf	?_eval_poly,w
  8342  0ADE  00C7               	movwf	log@x
  8343  0ADF  083E               	movf	?_eval_poly+1,w
  8344  0AE0  00C8               	movwf	log@x+1
  8345  0AE1  083F               	movf	?_eval_poly+2,w
  8346  0AE2  00C9               	movwf	log@x+2
  8347  0AE3  0847               	movf	log@x,w
  8348  0AE4  00B0               	movwf	___ftadd@f1
  8349  0AE5  0848               	movf	log@x+1,w
  8350  0AE6  00B1               	movwf	___ftadd@f1+1
  8351  0AE7  0849               	movf	log@x+2,w
  8352  0AE8  00B2               	movwf	___ftadd@f1+2
  8353  0AE9  3072               	movlw	114
  8354  0AEA  00A0               	movwf	___ftmul@f1
  8355  0AEB  3031               	movlw	49
  8356  0AEC  00A1               	movwf	___ftmul@f1+1
  8357  0AED  303F               	movlw	63
  8358  0AEE  00A2               	movwf	___ftmul@f1+2
  8359  0AEF  084C               	movf	log@exponent+1,w
  8360  0AF0  00F9               	movwf	___awtoft@c+1
  8361  0AF1  084B               	movf	log@exponent,w
  8362  0AF2  00F8               	movwf	___awtoft@c
  8363  0AF3  3192  2275  318A   	fcall	___awtoft
  8364  0AF6  0878               	movf	?___awtoft,w
  8365  0AF7  0020               	movlb	0	; select bank0
  8366  0AF8  00A3               	movwf	___ftmul@f2
  8367  0AF9  0879               	movf	?___awtoft+1,w
  8368  0AFA  00A4               	movwf	___ftmul@f2+1
  8369  0AFB  087A               	movf	?___awtoft+2,w
  8370  0AFC  00A5               	movwf	___ftmul@f2+2
  8371  0AFD  318B  2311  318A   	fcall	___ftmul
  8372  0B00  0020               	movlb	0	; select bank0
  8373  0B01  0820               	movf	?___ftmul,w
  8374  0B02  00B3               	movwf	___ftadd@f2
  8375  0B03  0821               	movf	?___ftmul+1,w
  8376  0B04  00B4               	movwf	___ftadd@f2+1
  8377  0B05  0822               	movf	?___ftmul+2,w
  8378  0B06  00B5               	movwf	___ftadd@f2+2
  8379  0B07  3180  204E         	fcall	___ftadd
  8380  0B09  0020               	movlb	0	; select bank0
  8381  0B0A  0830               	movf	?___ftadd,w
  8382  0B0B  00C7               	movwf	?_log
  8383  0B0C  0831               	movf	?___ftadd+1,w
  8384  0B0D  00C8               	movwf	?_log+1
  8385  0B0E  0832               	movf	?___ftadd+2,w
  8386  0B0F  00C9               	movwf	?_log+2
  8387  0B10  0008               	return
  8388  0B11                     __end_of_log:	
  8389                           
  8390                           	psect	text3
  8391  13B9                     __ptext3:	
  8392 ;; *************** function _frexp *****************
  8393 ;; Defined at:
  8394 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\frexp.c"
  8395 ;; Parameters:    Size  Location     Type
  8396 ;;  value           3    0[COMMON] int 
  8397 ;;  eptr            1    3[COMMON] PTR int 
  8398 ;;		 -> log@exponent(2), 
  8399 ;; Auto vars:     Size  Location     Type
  8400 ;;		None
  8401 ;; Return value:  Size  Location     Type
  8402 ;;                  3    0[COMMON] PTR int 
  8403 ;; Registers used:
  8404 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8405 ;; Tracked objects:
  8406 ;;		On entry : 0/0
  8407 ;;		On exit  : 0/0
  8408 ;;		Unchanged: 0/0
  8409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8410 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8412 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8413 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8414 ;;Total ram usage:        6 bytes
  8415 ;; Hardware stack levels used:    1
  8416 ;; This function calls:
  8417 ;;		Nothing
  8418 ;; This function is called by:
  8419 ;;		_log
  8420 ;; This function uses a non-reentrant model
  8421 ;;
  8422                           
  8423                           
  8424                           ;psect for function _frexp
  8425  13B9                     _frexp:	
  8426                           
  8427                           ;incstack = 0
  8428                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  8429  13B9  0872               	movf	frexp@value+2,w
  8430  13BA  0471               	iorwf	frexp@value+1,w
  8431  13BB  0470               	iorwf	frexp@value,w
  8432  13BC  1D03               	skipz
  8433  13BD  2BCB               	goto	l2480
  8434  13BE  0873               	movf	frexp@eptr,w
  8435  13BF  0086               	movwf	6
  8436  13C0  0187               	clrf	7
  8437  13C1  3000               	movlw	0
  8438  13C2  3FC0               	movwi [0]fsr1
  8439  13C3  3FC1               	movwi [1]fsr1
  8440  13C4  3000               	movlw	0
  8441  13C5  00F0               	movwf	?_frexp
  8442  13C6  3000               	movlw	0
  8443  13C7  00F1               	movwf	?_frexp+1
  8444  13C8  3000               	movlw	0
  8445  13C9  00F2               	movwf	?_frexp+2
  8446  13CA  0008               	return
  8447  13CB                     l2480:	
  8448  13CB  0872               	movf	frexp@value+2,w
  8449  13CC  397F               	andlw	127
  8450  13CD  00F4               	movwf	??_frexp
  8451  13CE  01F5               	clrf	??_frexp+1
  8452  13CF  35F4               	lslf	??_frexp,f
  8453  13D0  0DF5               	rlf	??_frexp+1,f
  8454  13D1  0873               	movf	frexp@eptr,w
  8455  13D2  0086               	movwf	6
  8456  13D3  0187               	clrf	7
  8457  13D4  0874               	movf	??_frexp,w
  8458  13D5  3FC0               	movwi [0]fsr1
  8459  13D6  0875               	movf	??_frexp+1,w
  8460  13D7  3FC1               	movwi [1]fsr1
  8461  13D8  0D71               	rlf	frexp@value+1,w
  8462  13D9  0D71               	rlf	frexp@value+1,w
  8463  13DA  3901               	andlw	1
  8464  13DB  00F4               	movwf	??_frexp
  8465  13DC  01F5               	clrf	??_frexp+1
  8466  13DD  0873               	movf	frexp@eptr,w
  8467  13DE  0086               	movwf	6
  8468  13DF  0187               	clrf	7
  8469  13E0  0874               	movf	??_frexp,w
  8470  13E1  0481               	iorwf	1,f
  8471  13E2  3141               	addfsr 1,1
  8472  13E3  0875               	movf	??_frexp+1,w
  8473  13E4  0481               	iorwf	1,f
  8474  13E5  0873               	movf	frexp@eptr,w
  8475  13E6  0086               	movwf	6
  8476  13E7  0187               	clrf	7
  8477  13E8  3082               	movlw	130
  8478  13E9  0781               	addwf	1,f
  8479  13EA  3141               	addfsr 1,1
  8480  13EB  30FF               	movlw	255
  8481  13EC  3D81               	addwfc	1,f
  8482  13ED  317F               	addfsr 1,-1
  8483  13EE  0872               	movf	frexp@value+2,w
  8484  13EF  3980               	andlw	-128
  8485  13F0  383F               	iorlw	63
  8486  13F1  00F2               	movwf	frexp@value+2
  8487  13F2  13F1               	bcf	frexp@value+1,7
  8488  13F3  0008               	return
  8489  13F4                     __end_of_frexp:	
  8490                           
  8491                           	psect	text4
  8492  0958                     __ptext4:	
  8493 ;; *************** function _eval_poly *****************
  8494 ;; Defined at:
  8495 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\evalpoly.c"
  8496 ;; Parameters:    Size  Location     Type
  8497 ;;  x               3   29[BANK0 ] PTR int 
  8498 ;;  d               2   32[BANK0 ] PTR const 
  8499 ;;		 -> log@coeff(27), 
  8500 ;;  n               2   34[BANK0 ] int 
  8501 ;; Auto vars:     Size  Location     Type
  8502 ;;  res             3   36[BANK0 ] int 
  8503 ;; Return value:  Size  Location     Type
  8504 ;;                  3   29[BANK0 ] int 
  8505 ;; Registers used:
  8506 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8507 ;; Tracked objects:
  8508 ;;		On entry : 0/0
  8509 ;;		On exit  : 0/0
  8510 ;;		Unchanged: 0/0
  8511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8512 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8513 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8515 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8516 ;;Total ram usage:       10 bytes
  8517 ;; Hardware stack levels used:    1
  8518 ;; Hardware stack levels required when called:    2
  8519 ;; This function calls:
  8520 ;;		___ftadd
  8521 ;;		___ftmul
  8522 ;;		___wmul
  8523 ;; This function is called by:
  8524 ;;		_log
  8525 ;; This function uses a non-reentrant model
  8526 ;;
  8527                           
  8528                           
  8529                           ;psect for function _eval_poly
  8530  0958                     _eval_poly:	
  8531                           
  8532                           ;incstack = 0
  8533                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8534  0958  0020               	movlb	0	; select bank0
  8535  0959  0843               	movf	eval_poly@n+1,w
  8536  095A  00F1               	movwf	___wmul@multiplier+1
  8537  095B  0842               	movf	eval_poly@n,w
  8538  095C  00F0               	movwf	___wmul@multiplier
  8539  095D  3003               	movlw	3
  8540  095E  00F2               	movwf	___wmul@multiplicand
  8541  095F  3000               	movlw	0
  8542  0960  00F3               	movwf	___wmul@multiplicand+1
  8543  0961  3192  221D  3189   	fcall	___wmul
  8544  0964  0020               	movlb	0	; select bank0
  8545  0965  0840               	movf	eval_poly@d,w
  8546  0966  0770               	addwf	?___wmul,w
  8547  0967  0084               	movwf	4
  8548  0968  0841               	movf	eval_poly@d+1,w
  8549  0969  3D71               	addwfc	?___wmul+1,w
  8550  096A  0085               	movwf	5
  8551  096B  3F00               	moviw [0]fsr0
  8552  096C  00C4               	movwf	eval_poly@res
  8553  096D  3F01               	moviw [1]fsr0
  8554  096E  00C5               	movwf	eval_poly@res+1
  8555  096F  3F02               	moviw [2]fsr0
  8556  0970                     L4:	
  8557  0970  00C6               	movwf	eval_poly@res+2
  8558  0971  0842               	movf	eval_poly@n,w
  8559  0972  0443               	iorwf	eval_poly@n+1,w
  8560  0973  1903               	btfsc	3,2
  8561  0974  29B1               	goto	l2498
  8562  0975  30FF               	movlw	255
  8563  0976  07C2               	addwf	eval_poly@n,f
  8564  0977  30FF               	movlw	255
  8565  0978  3DC3               	addwfc	eval_poly@n+1,f
  8566  0979  0843               	movf	eval_poly@n+1,w
  8567  097A  00F1               	movwf	___wmul@multiplier+1
  8568  097B  0842               	movf	eval_poly@n,w
  8569  097C  00F0               	movwf	___wmul@multiplier
  8570  097D  3003               	movlw	3
  8571  097E  00F2               	movwf	___wmul@multiplicand
  8572  097F  3000               	movlw	0
  8573  0980  00F3               	movwf	___wmul@multiplicand+1
  8574  0981  3192  221D  3189   	fcall	___wmul
  8575  0984  0020               	movlb	0	; select bank0
  8576  0985  0840               	movf	eval_poly@d,w
  8577  0986  0770               	addwf	?___wmul,w
  8578  0987  0084               	movwf	4
  8579  0988  0841               	movf	eval_poly@d+1,w
  8580  0989  3D71               	addwfc	?___wmul+1,w
  8581  098A  0085               	movwf	5
  8582  098B  3F00               	moviw [0]fsr0
  8583  098C  00B0               	movwf	___ftadd@f1
  8584  098D  3F01               	moviw [1]fsr0
  8585  098E  00B1               	movwf	___ftadd@f1+1
  8586  098F  3F02               	moviw [2]fsr0
  8587  0990  00B2               	movwf	___ftadd@f1+2
  8588  0991  0844               	movf	eval_poly@res,w
  8589  0992  00A0               	movwf	___ftmul@f1
  8590  0993  0845               	movf	eval_poly@res+1,w
  8591  0994  00A1               	movwf	___ftmul@f1+1
  8592  0995  0846               	movf	eval_poly@res+2,w
  8593  0996  00A2               	movwf	___ftmul@f1+2
  8594  0997  083D               	movf	eval_poly@x,w
  8595  0998  00A3               	movwf	___ftmul@f2
  8596  0999  083E               	movf	eval_poly@x+1,w
  8597  099A  00A4               	movwf	___ftmul@f2+1
  8598  099B  083F               	movf	eval_poly@x+2,w
  8599  099C  00A5               	movwf	___ftmul@f2+2
  8600  099D  318B  2311  3189   	fcall	___ftmul
  8601  09A0  0020               	movlb	0	; select bank0
  8602  09A1  0820               	movf	?___ftmul,w
  8603  09A2  00B3               	movwf	___ftadd@f2
  8604  09A3  0821               	movf	?___ftmul+1,w
  8605  09A4  00B4               	movwf	___ftadd@f2+1
  8606  09A5  0822               	movf	?___ftmul+2,w
  8607  09A6  00B5               	movwf	___ftadd@f2+2
  8608  09A7  3180  204E  3189   	fcall	___ftadd
  8609  09AA  0020               	movlb	0	; select bank0
  8610  09AB  0830               	movf	?___ftadd,w
  8611  09AC  00C4               	movwf	eval_poly@res
  8612  09AD  0831               	movf	?___ftadd+1,w
  8613  09AE  00C5               	movwf	eval_poly@res+1
  8614  09AF  0832               	movf	?___ftadd+2,w
  8615  09B0  2970               	goto	L4
  8616  09B1                     l2498:	
  8617  09B1  0844               	movf	eval_poly@res,w
  8618  09B2  00BD               	movwf	?_eval_poly
  8619  09B3  0845               	movf	eval_poly@res+1,w
  8620  09B4  00BE               	movwf	?_eval_poly+1
  8621  09B5  0846               	movf	eval_poly@res+2,w
  8622  09B6  00BF               	movwf	?_eval_poly+2
  8623  09B7  0008               	return
  8624  09B8                     __end_of_eval_poly:	
  8625                           
  8626                           	psect	text5
  8627  137E                     __ptext5:	
  8628 ;; *************** function ___ftge *****************
  8629 ;; Defined at:
  8630 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
  8631 ;; Parameters:    Size  Location     Type
  8632 ;;  ff1             3    0[COMMON] float 
  8633 ;;  ff2             3    3[COMMON] float 
  8634 ;; Auto vars:     Size  Location     Type
  8635 ;;		None
  8636 ;; Return value:  Size  Location     Type
  8637 ;;		None               void
  8638 ;; Registers used:
  8639 ;;		wreg, status,2, status,0
  8640 ;; Tracked objects:
  8641 ;;		On entry : 0/0
  8642 ;;		On exit  : 0/0
  8643 ;;		Unchanged: 0/0
  8644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8645 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8647 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8648 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8649 ;;Total ram usage:        9 bytes
  8650 ;; Hardware stack levels used:    1
  8651 ;; This function calls:
  8652 ;;		Nothing
  8653 ;; This function is called by:
  8654 ;;		_log
  8655 ;; This function uses a non-reentrant model
  8656 ;;
  8657                           
  8658                           
  8659                           ;psect for function ___ftge
  8660  137E                     ___ftge:	
  8661                           
  8662                           ;incstack = 0
  8663                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8664  137E  1FF2               	btfss	___ftge@ff1+2,7
  8665  137F  2B94               	goto	l2414
  8666  1380  0970               	comf	___ftge@ff1,w
  8667  1381  00F6               	movwf	??___ftge
  8668  1382  0971               	comf	___ftge@ff1+1,w
  8669  1383  00F7               	movwf	??___ftge+1
  8670  1384  0972               	comf	___ftge@ff1+2,w
  8671  1385  00F8               	movwf	??___ftge+2
  8672  1386  0AF6               	incf	??___ftge,f
  8673  1387  1903               	skipnz
  8674  1388  0AF7               	incf	??___ftge+1,f
  8675  1389  1903               	skipnz
  8676  138A  0AF8               	incf	??___ftge+2,f
  8677  138B  3000               	movlw	0
  8678  138C  0776               	addwf	??___ftge,w
  8679  138D  00F0               	movwf	___ftge@ff1
  8680  138E  3000               	movlw	0
  8681  138F  3D77               	addwfc	??___ftge+1,w
  8682  1390  00F1               	movwf	___ftge@ff1+1
  8683  1391  3080               	movlw	128
  8684  1392  3D78               	addwfc	??___ftge+2,w
  8685  1393  00F2               	movwf	___ftge@ff1+2
  8686  1394                     l2414:	
  8687  1394  1FF5               	btfss	___ftge@ff2+2,7
  8688  1395  2BAA               	goto	l2418
  8689  1396  0973               	comf	___ftge@ff2,w
  8690  1397  00F6               	movwf	??___ftge
  8691  1398  0974               	comf	___ftge@ff2+1,w
  8692  1399  00F7               	movwf	??___ftge+1
  8693  139A  0975               	comf	___ftge@ff2+2,w
  8694  139B  00F8               	movwf	??___ftge+2
  8695  139C  0AF6               	incf	??___ftge,f
  8696  139D  1903               	skipnz
  8697  139E  0AF7               	incf	??___ftge+1,f
  8698  139F  1903               	skipnz
  8699  13A0  0AF8               	incf	??___ftge+2,f
  8700  13A1  3000               	movlw	0
  8701  13A2  0776               	addwf	??___ftge,w
  8702  13A3  00F3               	movwf	___ftge@ff2
  8703  13A4  3000               	movlw	0
  8704  13A5  3D77               	addwfc	??___ftge+1,w
  8705  13A6  00F4               	movwf	___ftge@ff2+1
  8706  13A7  3080               	movlw	128
  8707  13A8  3D78               	addwfc	??___ftge+2,w
  8708  13A9  00F5               	movwf	___ftge@ff2+2
  8709  13AA                     l2418:	
  8710  13AA  3080               	movlw	128
  8711  13AB  06F2               	xorwf	___ftge@ff1+2,f
  8712  13AC  3080               	movlw	128
  8713  13AD  06F5               	xorwf	___ftge@ff2+2,f
  8714  13AE  0875               	movf	___ftge@ff2+2,w
  8715  13AF  0272               	subwf	___ftge@ff1+2,w
  8716  13B0  1D03               	skipz
  8717  13B1  0008               	return
  8718  13B2  0874               	movf	___ftge@ff2+1,w
  8719  13B3  0271               	subwf	___ftge@ff1+1,w
  8720  13B4  1D03               	skipz
  8721  13B5  0008               	return
  8722  13B6  0873               	movf	___ftge@ff2,w
  8723  13B7  0270               	subwf	___ftge@ff1,w
  8724  13B8  0008               	return
  8725  13B9                     __end_of___ftge:	
  8726                           
  8727                           	psect	text6
  8728  1238                     __ptext6:	
  8729 ;; *************** function ___ftsub *****************
  8730 ;; Defined at:
  8731 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
  8732 ;; Parameters:    Size  Location     Type
  8733 ;;  f2              3   29[BANK0 ] float 
  8734 ;;  f1              3   32[BANK0 ] float 
  8735 ;; Auto vars:     Size  Location     Type
  8736 ;;		None
  8737 ;; Return value:  Size  Location     Type
  8738 ;;                  3   29[BANK0 ] float 
  8739 ;; Registers used:
  8740 ;;		wreg, status,2, status,0, pclath, cstack
  8741 ;; Tracked objects:
  8742 ;;		On entry : 0/0
  8743 ;;		On exit  : 0/0
  8744 ;;		Unchanged: 0/0
  8745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8746 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8749 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8750 ;;Total ram usage:        6 bytes
  8751 ;; Hardware stack levels used:    1
  8752 ;; Hardware stack levels required when called:    2
  8753 ;; This function calls:
  8754 ;;		___ftadd
  8755 ;; This function is called by:
  8756 ;;		_tempCalc
  8757 ;; This function uses a non-reentrant model
  8758 ;;
  8759                           
  8760                           
  8761                           ;psect for function ___ftsub
  8762  1238                     ___ftsub:	
  8763                           
  8764                           ;incstack = 0
  8765                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  8766  1238  0020               	movlb	0	; select bank0
  8767  1239  083F               	movf	___ftsub@f2+2,w
  8768  123A  043E               	iorwf	___ftsub@f2+1,w
  8769  123B  043D               	iorwf	___ftsub@f2,w
  8770  123C  1903               	skipnz
  8771  123D  2A40               	goto	l2826
  8772  123E  3080               	movlw	128
  8773  123F  06BF               	xorwf	___ftsub@f2+2,f
  8774  1240                     l2826:	
  8775  1240  0840               	movf	___ftsub@f1,w
  8776  1241  00B0               	movwf	___ftadd@f1
  8777  1242  0841               	movf	___ftsub@f1+1,w
  8778  1243  00B1               	movwf	___ftadd@f1+1
  8779  1244  0842               	movf	___ftsub@f1+2,w
  8780  1245  00B2               	movwf	___ftadd@f1+2
  8781  1246  083D               	movf	___ftsub@f2,w
  8782  1247  00B3               	movwf	___ftadd@f2
  8783  1248  083E               	movf	___ftsub@f2+1,w
  8784  1249  00B4               	movwf	___ftadd@f2+1
  8785  124A  083F               	movf	___ftsub@f2+2,w
  8786  124B  00B5               	movwf	___ftadd@f2+2
  8787  124C  3180  204E         	fcall	___ftadd
  8788  124E  0020               	movlb	0	; select bank0
  8789  124F  0830               	movf	?___ftadd,w
  8790  1250  00BD               	movwf	?___ftsub
  8791  1251  0831               	movf	?___ftadd+1,w
  8792  1252  00BE               	movwf	?___ftsub+1
  8793  1253  0832               	movf	?___ftadd+2,w
  8794  1254  00BF               	movwf	?___ftsub+2
  8795  1255  0008               	return
  8796  1256                     __end_of___ftsub:	
  8797                           
  8798                           	psect	text7
  8799  004E                     __ptext7:	
  8800 ;; *************** function ___ftadd *****************
  8801 ;; Defined at:
  8802 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
  8803 ;; Parameters:    Size  Location     Type
  8804 ;;  f1              3   16[BANK0 ] float 
  8805 ;;  f2              3   19[BANK0 ] float 
  8806 ;; Auto vars:     Size  Location     Type
  8807 ;;  exp1            1   28[BANK0 ] unsigned char 
  8808 ;;  exp2            1   27[BANK0 ] unsigned char 
  8809 ;;  sign            1   26[BANK0 ] unsigned char 
  8810 ;; Return value:  Size  Location     Type
  8811 ;;                  3   16[BANK0 ] float 
  8812 ;; Registers used:
  8813 ;;		wreg, status,2, status,0, pclath, cstack
  8814 ;; Tracked objects:
  8815 ;;		On entry : 0/0
  8816 ;;		On exit  : 0/0
  8817 ;;		Unchanged: 0/0
  8818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8819 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8820 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8821 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8822 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8823 ;;Total ram usage:       13 bytes
  8824 ;; Hardware stack levels used:    1
  8825 ;; Hardware stack levels required when called:    1
  8826 ;; This function calls:
  8827 ;;		___ftpack
  8828 ;; This function is called by:
  8829 ;;		_tempCalc
  8830 ;;		___ftsub
  8831 ;;		_log
  8832 ;;		_eval_poly
  8833 ;; This function uses a non-reentrant model
  8834 ;;
  8835                           
  8836                           
  8837                           ;psect for function ___ftadd
  8838  004E                     ___ftadd:	
  8839                           
  8840                           ;incstack = 0
  8841                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8842  004E  0020               	movlb	0	; select bank0
  8843  004F  0830               	movf	___ftadd@f1,w
  8844  0050  00B6               	movwf	??___ftadd
  8845  0051  0831               	movf	___ftadd@f1+1,w
  8846  0052  00B7               	movwf	??___ftadd+1
  8847  0053  0832               	movf	___ftadd@f1+2,w
  8848  0054  00B8               	movwf	??___ftadd+2
  8849  0055  1003               	clrc
  8850  0056  0D37               	rlf	??___ftadd+1,w
  8851  0057  0D38               	rlf	??___ftadd+2,w
  8852  0058  00B9               	movwf	??___ftadd+3
  8853  0059  0839               	movf	??___ftadd+3,w
  8854  005A  00BC               	movwf	___ftadd@exp1
  8855  005B  0833               	movf	___ftadd@f2,w
  8856  005C  00B6               	movwf	??___ftadd
  8857  005D  0834               	movf	___ftadd@f2+1,w
  8858  005E  00B7               	movwf	??___ftadd+1
  8859  005F  0835               	movf	___ftadd@f2+2,w
  8860  0060  00B8               	movwf	??___ftadd+2
  8861  0061  1003               	clrc
  8862  0062  0D37               	rlf	??___ftadd+1,w
  8863  0063  0D38               	rlf	??___ftadd+2,w
  8864  0064  00B9               	movwf	??___ftadd+3
  8865  0065  0839               	movf	??___ftadd+3,w
  8866  0066  00BB               	movwf	___ftadd@exp2
  8867  0067  083C               	movf	___ftadd@exp1,w
  8868  0068  1903               	btfsc	3,2
  8869  0069  2876               	goto	l2282
  8870  006A  083B               	movf	___ftadd@exp2,w
  8871  006B  023C               	subwf	___ftadd@exp1,w
  8872  006C  1803               	skipnc
  8873  006D  287D               	goto	l2286
  8874  006E  033C               	decf	___ftadd@exp1,w
  8875  006F  3AFF               	xorlw	255
  8876  0070  073B               	addwf	___ftadd@exp2,w
  8877  0071  00B6               	movwf	??___ftadd
  8878  0072  3019               	movlw	25
  8879  0073  0236               	subwf	??___ftadd,w
  8880  0074  1C03               	skipc
  8881  0075  287D               	goto	l2286
  8882  0076                     l2282:	
  8883  0076  0833               	movf	___ftadd@f2,w
  8884  0077  00B0               	movwf	?___ftadd
  8885  0078  0834               	movf	___ftadd@f2+1,w
  8886  0079  00B1               	movwf	?___ftadd+1
  8887  007A  0835               	movf	___ftadd@f2+2,w
  8888  007B  00B2               	movwf	?___ftadd+2
  8889  007C  0008               	return
  8890  007D                     l2286:	
  8891  007D  083B               	movf	___ftadd@exp2,w
  8892  007E  1903               	btfsc	3,2
  8893  007F  0008               	return
  8894  0080  083C               	movf	___ftadd@exp1,w
  8895  0081  023B               	subwf	___ftadd@exp2,w
  8896  0082  1803               	skipnc
  8897  0083  288C               	goto	l2292
  8898  0084  033B               	decf	___ftadd@exp2,w
  8899  0085  3AFF               	xorlw	255
  8900  0086  073C               	addwf	___ftadd@exp1,w
  8901  0087  00B6               	movwf	??___ftadd
  8902  0088  3019               	movlw	25
  8903  0089  0236               	subwf	??___ftadd,w
  8904  008A  1803               	btfsc	3,0
  8905  008B  0008               	return
  8906  008C                     l2292:	
  8907  008C  3006               	movlw	6
  8908  008D  00B6               	movwf	??___ftadd
  8909  008E  0836               	movf	??___ftadd,w
  8910  008F  00BA               	movwf	___ftadd@sign
  8911  0090  1BB2               	btfsc	___ftadd@f1+2,7
  8912  0091  17BA               	bsf	___ftadd@sign,7
  8913  0092  1BB5               	btfsc	___ftadd@f2+2,7
  8914  0093  173A               	bsf	___ftadd@sign,6
  8915  0094  17B1               	bsf	___ftadd@f1+1,7
  8916  0095  30FF               	movlw	255
  8917  0096  05B0               	andwf	___ftadd@f1,f
  8918  0097  30FF               	movlw	255
  8919  0098  05B1               	andwf	___ftadd@f1+1,f
  8920  0099  3000               	movlw	0
  8921  009A  05B2               	andwf	___ftadd@f1+2,f
  8922  009B  17B4               	bsf	___ftadd@f2+1,7
  8923  009C  30FF               	movlw	255
  8924  009D  05B3               	andwf	___ftadd@f2,f
  8925  009E  30FF               	movlw	255
  8926  009F  05B4               	andwf	___ftadd@f2+1,f
  8927  00A0  3000               	movlw	0
  8928  00A1  05B5               	andwf	___ftadd@f2+2,f
  8929  00A2  083B               	movf	___ftadd@exp2,w
  8930  00A3  023C               	subwf	___ftadd@exp1,w
  8931  00A4  1803               	skipnc
  8932  00A5  28C8               	goto	l2314
  8933  00A6                     l2304:	
  8934  00A6  3001               	movlw	1
  8935  00A7                     u2275:	
  8936  00A7  35B3               	lslf	___ftadd@f2,f
  8937  00A8  0DB4               	rlf	___ftadd@f2+1,f
  8938  00A9  0DB5               	rlf	___ftadd@f2+2,f
  8939  00AA  0B89               	decfsz	9,f
  8940  00AB  28A7               	goto	u2275
  8941  00AC  3001               	movlw	1
  8942  00AD  02BB               	subwf	___ftadd@exp2,f
  8943  00AE  083B               	movf	___ftadd@exp2,w
  8944  00AF  063C               	xorwf	___ftadd@exp1,w
  8945  00B0  1903               	skipnz
  8946  00B1  28C3               	goto	l2312
  8947  00B2  3001               	movlw	1
  8948  00B3  02BA               	subwf	___ftadd@sign,f
  8949  00B4  083A               	movf	___ftadd@sign,w
  8950  00B5  3907               	andlw	7
  8951  00B6  1903               	btfsc	3,2
  8952  00B7  28C3               	goto	l2312
  8953  00B8  28A6               	goto	l2304
  8954  00B9                     l2310:	
  8955  00B9  3001               	movlw	1
  8956  00BA                     u2305:	
  8957  00BA  36B2               	lsrf	___ftadd@f1+2,f
  8958  00BB  0CB1               	rrf	___ftadd@f1+1,f
  8959  00BC  0CB0               	rrf	___ftadd@f1,f
  8960  00BD  0B89               	decfsz	9,f
  8961  00BE  28BA               	goto	u2305
  8962  00BF  3001               	movlw	1
  8963  00C0  00B6               	movwf	??___ftadd
  8964  00C1  0836               	movf	??___ftadd,w
  8965  00C2  07BC               	addwf	___ftadd@exp1,f
  8966  00C3                     l2312:	
  8967  00C3  083C               	movf	___ftadd@exp1,w
  8968  00C4  063B               	xorwf	___ftadd@exp2,w
  8969  00C5  1903               	btfsc	3,2
  8970  00C6  28ED               	goto	l772
  8971  00C7  28B9               	goto	l2310
  8972  00C8                     l2314:	
  8973  00C8  083C               	movf	___ftadd@exp1,w
  8974  00C9  023B               	subwf	___ftadd@exp2,w
  8975  00CA  1803               	skipnc
  8976  00CB  28ED               	goto	l772
  8977  00CC                     l2316:	
  8978  00CC  3001               	movlw	1
  8979  00CD                     u2335:	
  8980  00CD  35B0               	lslf	___ftadd@f1,f
  8981  00CE  0DB1               	rlf	___ftadd@f1+1,f
  8982  00CF  0DB2               	rlf	___ftadd@f1+2,f
  8983  00D0  0B89               	decfsz	9,f
  8984  00D1  28CD               	goto	u2335
  8985  00D2  3001               	movlw	1
  8986  00D3  02BC               	subwf	___ftadd@exp1,f
  8987  00D4  083B               	movf	___ftadd@exp2,w
  8988  00D5  063C               	xorwf	___ftadd@exp1,w
  8989  00D6  1903               	skipnz
  8990  00D7  28E9               	goto	l2324
  8991  00D8  3001               	movlw	1
  8992  00D9  02BA               	subwf	___ftadd@sign,f
  8993  00DA  083A               	movf	___ftadd@sign,w
  8994  00DB  3907               	andlw	7
  8995  00DC  1903               	btfsc	3,2
  8996  00DD  28E9               	goto	l2324
  8997  00DE  28CC               	goto	l2316
  8998  00DF                     l2322:	
  8999  00DF  3001               	movlw	1
  9000  00E0                     u2365:	
  9001  00E0  36B5               	lsrf	___ftadd@f2+2,f
  9002  00E1  0CB4               	rrf	___ftadd@f2+1,f
  9003  00E2  0CB3               	rrf	___ftadd@f2,f
  9004  00E3  0B89               	decfsz	9,f
  9005  00E4  28E0               	goto	u2365
  9006  00E5  3001               	movlw	1
  9007  00E6  00B6               	movwf	??___ftadd
  9008  00E7  0836               	movf	??___ftadd,w
  9009  00E8  07BB               	addwf	___ftadd@exp2,f
  9010  00E9                     l2324:	
  9011  00E9  083C               	movf	___ftadd@exp1,w
  9012  00EA  063B               	xorwf	___ftadd@exp2,w
  9013  00EB  1D03               	skipz
  9014  00EC  28DF               	goto	l2322
  9015  00ED                     l772:	
  9016  00ED  1FBA               	btfss	___ftadd@sign,7
  9017  00EE  28FF               	goto	l2328
  9018  00EF  30FF               	movlw	255
  9019  00F0  06B0               	xorwf	___ftadd@f1,f
  9020  00F1  30FF               	movlw	255
  9021  00F2  06B1               	xorwf	___ftadd@f1+1,f
  9022  00F3  30FF               	movlw	255
  9023  00F4  06B2               	xorwf	___ftadd@f1+2,f
  9024  00F5  3001               	movlw	1
  9025  00F6  07B0               	addwf	___ftadd@f1,f
  9026  00F7  3000               	movlw	0
  9027  00F8  1803               	skipnc
  9028  00F9  3001               	movlw	1
  9029  00FA  07B1               	addwf	___ftadd@f1+1,f
  9030  00FB  3000               	movlw	0
  9031  00FC  1803               	skipnc
  9032  00FD  3001               	movlw	1
  9033  00FE  07B2               	addwf	___ftadd@f1+2,f
  9034  00FF                     l2328:	
  9035  00FF  1F3A               	btfss	___ftadd@sign,6
  9036  0100  2911               	goto	l2332
  9037  0101  30FF               	movlw	255
  9038  0102  06B3               	xorwf	___ftadd@f2,f
  9039  0103  30FF               	movlw	255
  9040  0104  06B4               	xorwf	___ftadd@f2+1,f
  9041  0105  30FF               	movlw	255
  9042  0106  06B5               	xorwf	___ftadd@f2+2,f
  9043  0107  3001               	movlw	1
  9044  0108  07B3               	addwf	___ftadd@f2,f
  9045  0109  3000               	movlw	0
  9046  010A  1803               	skipnc
  9047  010B  3001               	movlw	1
  9048  010C  07B4               	addwf	___ftadd@f2+1,f
  9049  010D  3000               	movlw	0
  9050  010E  1803               	skipnc
  9051  010F  3001               	movlw	1
  9052  0110  07B5               	addwf	___ftadd@f2+2,f
  9053  0111                     l2332:	
  9054  0111  01BA               	clrf	___ftadd@sign
  9055  0112  0830               	movf	___ftadd@f1,w
  9056  0113  07B3               	addwf	___ftadd@f2,f
  9057  0114  0831               	movf	___ftadd@f1+1,w
  9058  0115  3DB4               	addwfc	___ftadd@f2+1,f
  9059  0116  0832               	movf	___ftadd@f1+2,w
  9060  0117  3DB5               	addwfc	___ftadd@f2+2,f
  9061  0118  1FB5               	btfss	___ftadd@f2+2,7
  9062  0119  292C               	goto	l2342
  9063  011A  30FF               	movlw	255
  9064  011B  06B3               	xorwf	___ftadd@f2,f
  9065  011C  30FF               	movlw	255
  9066  011D  06B4               	xorwf	___ftadd@f2+1,f
  9067  011E  30FF               	movlw	255
  9068  011F  06B5               	xorwf	___ftadd@f2+2,f
  9069  0120  3001               	movlw	1
  9070  0121  07B3               	addwf	___ftadd@f2,f
  9071  0122  3000               	movlw	0
  9072  0123  1803               	skipnc
  9073  0124  3001               	movlw	1
  9074  0125  07B4               	addwf	___ftadd@f2+1,f
  9075  0126  3000               	movlw	0
  9076  0127  1803               	skipnc
  9077  0128  3001               	movlw	1
  9078  0129  07B5               	addwf	___ftadd@f2+2,f
  9079  012A  01BA               	clrf	___ftadd@sign
  9080  012B  0ABA               	incf	___ftadd@sign,f
  9081  012C                     l2342:	
  9082  012C  0833               	movf	___ftadd@f2,w
  9083  012D  00F0               	movwf	___ftpack@arg
  9084  012E  0834               	movf	___ftadd@f2+1,w
  9085  012F  00F1               	movwf	___ftpack@arg+1
  9086  0130  0835               	movf	___ftadd@f2+2,w
  9087  0131  00F2               	movwf	___ftpack@arg+2
  9088  0132  083C               	movf	___ftadd@exp1,w
  9089  0133  00B6               	movwf	??___ftadd
  9090  0134  0836               	movf	??___ftadd,w
  9091  0135  00F3               	movwf	___ftpack@exp
  9092  0136  083A               	movf	___ftadd@sign,w
  9093  0137  00B7               	movwf	??___ftadd+1
  9094  0138  0837               	movf	??___ftadd+1,w
  9095  0139  00F4               	movwf	___ftpack@sign
  9096  013A  3195  25A5         	fcall	___ftpack
  9097  013C  0870               	movf	?___ftpack,w
  9098  013D  0020               	movlb	0	; select bank0
  9099  013E  00B0               	movwf	?___ftadd
  9100  013F  0871               	movf	?___ftpack+1,w
  9101  0140  00B1               	movwf	?___ftadd+1
  9102  0141  0872               	movf	?___ftpack+2,w
  9103  0142  00B2               	movwf	?___ftadd+2
  9104  0143  0008               	return
  9105  0144                     __end_of___ftadd:	
  9106                           
  9107                           	psect	text8
  9108  0D65                     __ptext8:	
  9109 ;; *************** function _readIAnalog *****************
  9110 ;; Defined at:
  9111 ;;		line 77 in file "adc.c"
  9112 ;; Parameters:    Size  Location     Type
  9113 ;;  channel         2    6[BANK0 ] unsigned int 
  9114 ;; Auto vars:     Size  Location     Type
  9115 ;;  value           2   11[COMMON] int 
  9116 ;;  analog_chann    2    9[COMMON] unsigned int 
  9117 ;; Return value:  Size  Location     Type
  9118 ;;                  2    6[BANK0 ] int 
  9119 ;; Registers used:
  9120 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9121 ;; Tracked objects:
  9122 ;;		On entry : 0/0
  9123 ;;		On exit  : 0/0
  9124 ;;		Unchanged: 0/0
  9125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9126 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9127 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9128 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9129 ;;      Totals:         4      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9130 ;;Total ram usage:       24 bytes
  9131 ;; Hardware stack levels used:    1
  9132 ;; Hardware stack levels required when called:    1
  9133 ;; This function calls:
  9134 ;;		_ADCRead
  9135 ;;		___aldiv
  9136 ;;		___wmul
  9137 ;; This function is called by:
  9138 ;;		_main
  9139 ;; This function uses a non-reentrant model
  9140 ;;
  9141                           
  9142                           
  9143                           ;psect for function _readIAnalog
  9144  0D65                     _readIAnalog:	
  9145                           
  9146                           ;adc.c: 79: int16_t value;
  9147                           ;adc.c: 81: uint16_t analog_channel = channels[channel];
  9148                           
  9149                           ;incstack = 0
  9150                           ; Regs used in _readIAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9151  0D65  0020               	movlb	0	; select bank0
  9152  0D66  3526               	lslf	readIAnalog@channel,w
  9153  0D67  3E30               	addlw	(low (_channels| (0+256)))& (0+255)
  9154  0D68  0086               	movwf	6
  9155  0D69  3001               	movlw	1	; select bank2/3
  9156  0D6A  0087               	movwf	7
  9157  0D6B  3F40               	moviw [0]fsr1
  9158  0D6C  00F9               	movwf	readIAnalog@analog_channel
  9159  0D6D  3F41               	moviw [1]fsr1
  9160  0D6E  00FA               	movwf	readIAnalog@analog_channel+1
  9161                           
  9162                           ;adc.c: 83: value = ADCRead(analog_channel);
  9163  0D6F  0879               	movf	readIAnalog@analog_channel,w
  9164  0D70  3191  21DC  318D   	fcall	_ADCRead
  9165  0D73  0871               	movf	?_ADCRead+1,w
  9166  0D74  00FC               	movwf	readIAnalog@value+1
  9167  0D75  0870               	movf	?_ADCRead,w
  9168  0D76  00FB               	movwf	readIAnalog@value
  9169                           
  9170                           ;adc.c: 85: totals[channel] = totals[channel]-samples[channel][sampleIndex];
  9171  0D77  0020               	movlb	0	; select bank0
  9172  0D78  0826               	movf	readIAnalog@channel,w
  9173  0D79  00A8               	movwf	??_readIAnalog
  9174  0D7A  3001               	movlw	1
  9175  0D7B                     u3125:	
  9176  0D7B  35A8               	lslf	??_readIAnalog,f
  9177  0D7C  3EFF               	addlw	-1
  9178  0D7D  1D03               	skipz
  9179  0D7E  2D7B               	goto	u3125
  9180  0D7F  3528               	lslf	??_readIAnalog,w
  9181  0D80  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9182  0D81  0086               	movwf	6
  9183  0D82  3001               	movlw	1	; select bank2/3
  9184  0D83  0087               	movwf	7
  9185  0D84  3F40               	moviw [0]fsr1
  9186  0D85  00A9               	movwf	??_readIAnalog+1
  9187  0D86  3F41               	moviw [1]fsr1
  9188  0D87  00AA               	movwf	??_readIAnalog+2
  9189  0D88  3F42               	moviw [2]fsr1
  9190  0D89  00AB               	movwf	??_readIAnalog+3
  9191  0D8A  3F43               	moviw [3]fsr1
  9192  0D8B  00AC               	movwf	??_readIAnalog+4
  9193  0D8C  0021               	movlb	1	; select bank1
  9194  0D8D  0868               	movf	(_sampleIndex+1)^(0+128),w
  9195  0D8E  0020               	movlb	0	; select bank0
  9196  0D8F  00AE               	movwf	??_readIAnalog+6
  9197  0D90  0021               	movlb	1	; select bank1
  9198  0D91  0867               	movf	_sampleIndex^(0+128),w
  9199  0D92  0020               	movlb	0	; select bank0
  9200  0D93  00AD               	movwf	??_readIAnalog+5
  9201  0D94  35AD               	lslf	??_readIAnalog+5,f
  9202  0D95  0DAE               	rlf	??_readIAnalog+6,f
  9203  0D96  0827               	movf	readIAnalog@channel+1,w
  9204  0D97  00F1               	movwf	___wmul@multiplier+1
  9205  0D98  0826               	movf	readIAnalog@channel,w
  9206  0D99  00F0               	movwf	___wmul@multiplier
  9207  0D9A  3064               	movlw	100
  9208  0D9B  00F2               	movwf	___wmul@multiplicand
  9209  0D9C  3000               	movlw	0
  9210  0D9D  00F3               	movwf	___wmul@multiplicand+1
  9211  0D9E  3192  221D  318D   	fcall	___wmul
  9212  0DA1  3060               	movlw	96
  9213  0DA2  0020               	movlb	0	; select bank0
  9214  0DA3  00AF               	movwf	??_readIAnalog+7
  9215  0DA4  3022               	movlw	34
  9216  0DA5  00B0               	movwf	??_readIAnalog+8
  9217  0DA6  0870               	movf	?___wmul,w
  9218  0DA7  072F               	addwf	??_readIAnalog+7,w
  9219  0DA8  00B1               	movwf	??_readIAnalog+9
  9220  0DA9  0871               	movf	?___wmul+1,w
  9221  0DAA  3D30               	addwfc	??_readIAnalog+8,w
  9222  0DAB  00B2               	movwf	??_readIAnalog+10
  9223  0DAC  082D               	movf	??_readIAnalog+5,w
  9224  0DAD  0731               	addwf	??_readIAnalog+9,w
  9225  0DAE  0086               	movwf	6
  9226  0DAF  082E               	movf	??_readIAnalog+6,w
  9227  0DB0  3D32               	addwfc	??_readIAnalog+10,w
  9228  0DB1  0087               	movwf	7
  9229  0DB2  3F40               	moviw [0]fsr1
  9230  0DB3  00B3               	movwf	??_readIAnalog+11
  9231  0DB4  3F41               	moviw [1]fsr1
  9232  0DB5  00B4               	movwf	??_readIAnalog+12
  9233  0DB6  0833               	movf	??_readIAnalog+11,w
  9234  0DB7  00B5               	movwf	??_readIAnalog+13
  9235  0DB8  0834               	movf	??_readIAnalog+12,w
  9236  0DB9  00B6               	movwf	??_readIAnalog+14
  9237  0DBA  3000               	movlw	0
  9238  0DBB  1BB6               	btfsc	??_readIAnalog+14,7
  9239  0DBC  30FF               	movlw	255
  9240  0DBD  00B7               	movwf	??_readIAnalog+15
  9241  0DBE  00B8               	movwf	??_readIAnalog+16
  9242  0DBF  09B5               	comf	??_readIAnalog+13,f
  9243  0DC0  09B6               	comf	??_readIAnalog+14,f
  9244  0DC1  09B7               	comf	??_readIAnalog+15,f
  9245  0DC2  09B8               	comf	??_readIAnalog+16,f
  9246  0DC3  0AB5               	incf	??_readIAnalog+13,f
  9247  0DC4  1903               	skipnz
  9248  0DC5  0AB6               	incf	??_readIAnalog+14,f
  9249  0DC6  1903               	skipnz
  9250  0DC7  0AB7               	incf	??_readIAnalog+15,f
  9251  0DC8  1903               	skipnz
  9252  0DC9  0AB8               	incf	??_readIAnalog+16,f
  9253  0DCA  0835               	movf	??_readIAnalog+13,w
  9254  0DCB  07A9               	addwf	??_readIAnalog+1,f
  9255  0DCC  0836               	movf	??_readIAnalog+14,w
  9256  0DCD  3DAA               	addwfc	??_readIAnalog+2,f
  9257  0DCE  0837               	movf	??_readIAnalog+15,w
  9258  0DCF  3DAB               	addwfc	??_readIAnalog+3,f
  9259  0DD0  0838               	movf	??_readIAnalog+16,w
  9260  0DD1  3DAC               	addwfc	??_readIAnalog+4,f
  9261  0DD2  0826               	movf	readIAnalog@channel,w
  9262  0DD3  00B9               	movwf	??_readIAnalog+17
  9263  0DD4  3001               	movlw	1
  9264  0DD5                     u3135:	
  9265  0DD5  35B9               	lslf	??_readIAnalog+17,f
  9266  0DD6  3EFF               	addlw	-1
  9267  0DD7  1D03               	skipz
  9268  0DD8  2DD5               	goto	u3135
  9269  0DD9  3539               	lslf	??_readIAnalog+17,w
  9270  0DDA  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9271  0DDB  0086               	movwf	6
  9272  0DDC  3001               	movlw	1	; select bank2/3
  9273  0DDD  0087               	movwf	7
  9274  0DDE  0829               	movf	??_readIAnalog+1,w
  9275  0DDF  3FC0               	movwi [0]fsr1
  9276  0DE0  082A               	movf	??_readIAnalog+2,w
  9277  0DE1  3FC1               	movwi [1]fsr1
  9278  0DE2  082B               	movf	??_readIAnalog+3,w
  9279  0DE3  3FC2               	movwi [2]fsr1
  9280  0DE4  082C               	movf	??_readIAnalog+4,w
  9281  0DE5  3FC3               	movwi [3]fsr1
  9282                           
  9283                           ;adc.c: 87: samples[channel][sampleIndex] = value;
  9284  0DE6  0021               	movlb	1	; select bank1
  9285  0DE7  0868               	movf	(_sampleIndex+1)^(0+128),w
  9286  0DE8  0020               	movlb	0	; select bank0
  9287  0DE9  00A9               	movwf	??_readIAnalog+1
  9288  0DEA  0021               	movlb	1	; select bank1
  9289  0DEB  0867               	movf	_sampleIndex^(0+128),w
  9290  0DEC  0020               	movlb	0	; select bank0
  9291  0DED  00A8               	movwf	??_readIAnalog
  9292  0DEE  35A8               	lslf	??_readIAnalog,f
  9293  0DEF  0DA9               	rlf	??_readIAnalog+1,f
  9294  0DF0  0827               	movf	readIAnalog@channel+1,w
  9295  0DF1  00F1               	movwf	___wmul@multiplier+1
  9296  0DF2  0826               	movf	readIAnalog@channel,w
  9297  0DF3  00F0               	movwf	___wmul@multiplier
  9298  0DF4  3064               	movlw	100
  9299  0DF5  00F2               	movwf	___wmul@multiplicand
  9300  0DF6  3000               	movlw	0
  9301  0DF7  00F3               	movwf	___wmul@multiplicand+1
  9302  0DF8  3192  221D  318D   	fcall	___wmul
  9303  0DFB  3060               	movlw	96
  9304  0DFC  0020               	movlb	0	; select bank0
  9305  0DFD  00AA               	movwf	??_readIAnalog+2
  9306  0DFE  3022               	movlw	34
  9307  0DFF  00AB               	movwf	??_readIAnalog+3
  9308  0E00  0870               	movf	?___wmul,w
  9309  0E01  072A               	addwf	??_readIAnalog+2,w
  9310  0E02  00AC               	movwf	??_readIAnalog+4
  9311  0E03  0871               	movf	?___wmul+1,w
  9312  0E04  3D2B               	addwfc	??_readIAnalog+3,w
  9313  0E05  00AD               	movwf	??_readIAnalog+5
  9314  0E06  0828               	movf	??_readIAnalog,w
  9315  0E07  072C               	addwf	??_readIAnalog+4,w
  9316  0E08  0086               	movwf	6
  9317  0E09  0829               	movf	??_readIAnalog+1,w
  9318  0E0A  3D2D               	addwfc	??_readIAnalog+5,w
  9319  0E0B  0087               	movwf	7
  9320  0E0C  087B               	movf	readIAnalog@value,w
  9321  0E0D  3FC0               	movwi [0]fsr1
  9322  0E0E  087C               	movf	readIAnalog@value+1,w
  9323  0E0F  3FC1               	movwi [1]fsr1
  9324                           
  9325                           ;adc.c: 89: totals[channel] = totals[channel]+samples[channel][sampleIndex];
  9326  0E10  0826               	movf	readIAnalog@channel,w
  9327  0E11  00A8               	movwf	??_readIAnalog
  9328  0E12  3001               	movlw	1
  9329  0E13                     u3145:	
  9330  0E13  35A8               	lslf	??_readIAnalog,f
  9331  0E14  3EFF               	addlw	-1
  9332  0E15  1D03               	skipz
  9333  0E16  2E13               	goto	u3145
  9334  0E17  3528               	lslf	??_readIAnalog,w
  9335  0E18  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9336  0E19  0086               	movwf	6
  9337  0E1A  3001               	movlw	1	; select bank2/3
  9338  0E1B  0087               	movwf	7
  9339  0E1C  3F40               	moviw [0]fsr1
  9340  0E1D  00A9               	movwf	??_readIAnalog+1
  9341  0E1E  3F41               	moviw [1]fsr1
  9342  0E1F  00AA               	movwf	??_readIAnalog+2
  9343  0E20  3F42               	moviw [2]fsr1
  9344  0E21  00AB               	movwf	??_readIAnalog+3
  9345  0E22  3F43               	moviw [3]fsr1
  9346  0E23  00AC               	movwf	??_readIAnalog+4
  9347  0E24  0021               	movlb	1	; select bank1
  9348  0E25  0868               	movf	(_sampleIndex+1)^(0+128),w
  9349  0E26  0020               	movlb	0	; select bank0
  9350  0E27  00AE               	movwf	??_readIAnalog+6
  9351  0E28  0021               	movlb	1	; select bank1
  9352  0E29  0867               	movf	_sampleIndex^(0+128),w
  9353  0E2A  0020               	movlb	0	; select bank0
  9354  0E2B  00AD               	movwf	??_readIAnalog+5
  9355  0E2C  35AD               	lslf	??_readIAnalog+5,f
  9356  0E2D  0DAE               	rlf	??_readIAnalog+6,f
  9357  0E2E  0827               	movf	readIAnalog@channel+1,w
  9358  0E2F  00F1               	movwf	___wmul@multiplier+1
  9359  0E30  0826               	movf	readIAnalog@channel,w
  9360  0E31  00F0               	movwf	___wmul@multiplier
  9361  0E32  3064               	movlw	100
  9362  0E33  00F2               	movwf	___wmul@multiplicand
  9363  0E34  3000               	movlw	0
  9364  0E35  00F3               	movwf	___wmul@multiplicand+1
  9365  0E36  3192  221D  318D   	fcall	___wmul
  9366  0E39  3060               	movlw	96
  9367  0E3A  0020               	movlb	0	; select bank0
  9368  0E3B  00AF               	movwf	??_readIAnalog+7
  9369  0E3C  3022               	movlw	34
  9370  0E3D  00B0               	movwf	??_readIAnalog+8
  9371  0E3E  0870               	movf	?___wmul,w
  9372  0E3F  072F               	addwf	??_readIAnalog+7,w
  9373  0E40  00B1               	movwf	??_readIAnalog+9
  9374  0E41  0871               	movf	?___wmul+1,w
  9375  0E42  3D30               	addwfc	??_readIAnalog+8,w
  9376  0E43  00B2               	movwf	??_readIAnalog+10
  9377  0E44  082D               	movf	??_readIAnalog+5,w
  9378  0E45  0731               	addwf	??_readIAnalog+9,w
  9379  0E46  0086               	movwf	6
  9380  0E47  082E               	movf	??_readIAnalog+6,w
  9381  0E48  3D32               	addwfc	??_readIAnalog+10,w
  9382  0E49  0087               	movwf	7
  9383  0E4A  3F40               	moviw [0]fsr1
  9384  0E4B  00B3               	movwf	??_readIAnalog+11
  9385  0E4C  3F41               	moviw [1]fsr1
  9386  0E4D  00B4               	movwf	??_readIAnalog+12
  9387  0E4E  0833               	movf	??_readIAnalog+11,w
  9388  0E4F  00B5               	movwf	??_readIAnalog+13
  9389  0E50  0834               	movf	??_readIAnalog+12,w
  9390  0E51  00B6               	movwf	??_readIAnalog+14
  9391  0E52  3000               	movlw	0
  9392  0E53  1BB6               	btfsc	??_readIAnalog+14,7
  9393  0E54  30FF               	movlw	255
  9394  0E55  00B7               	movwf	??_readIAnalog+15
  9395  0E56  00B8               	movwf	??_readIAnalog+16
  9396  0E57  0835               	movf	??_readIAnalog+13,w
  9397  0E58  07A9               	addwf	??_readIAnalog+1,f
  9398  0E59  0836               	movf	??_readIAnalog+14,w
  9399  0E5A  3DAA               	addwfc	??_readIAnalog+2,f
  9400  0E5B  0837               	movf	??_readIAnalog+15,w
  9401  0E5C  3DAB               	addwfc	??_readIAnalog+3,f
  9402  0E5D  0838               	movf	??_readIAnalog+16,w
  9403  0E5E  3DAC               	addwfc	??_readIAnalog+4,f
  9404  0E5F  0826               	movf	readIAnalog@channel,w
  9405  0E60  00B9               	movwf	??_readIAnalog+17
  9406  0E61  3001               	movlw	1
  9407  0E62                     u3155:	
  9408  0E62  35B9               	lslf	??_readIAnalog+17,f
  9409  0E63  3EFF               	addlw	-1
  9410  0E64  1D03               	skipz
  9411  0E65  2E62               	goto	u3155
  9412  0E66  3539               	lslf	??_readIAnalog+17,w
  9413  0E67  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9414  0E68  0086               	movwf	6
  9415  0E69  3001               	movlw	1	; select bank2/3
  9416  0E6A  0087               	movwf	7
  9417  0E6B  0829               	movf	??_readIAnalog+1,w
  9418  0E6C  3FC0               	movwi [0]fsr1
  9419  0E6D  082A               	movf	??_readIAnalog+2,w
  9420  0E6E  3FC1               	movwi [1]fsr1
  9421  0E6F  082B               	movf	??_readIAnalog+3,w
  9422  0E70  3FC2               	movwi [2]fsr1
  9423  0E71  082C               	movf	??_readIAnalog+4,w
  9424  0E72  3FC3               	movwi [3]fsr1
  9425                           
  9426                           ;adc.c: 91: if(channel>=(4-1))
  9427  0E73  3000               	movlw	0
  9428  0E74  0227               	subwf	readIAnalog@channel+1,w
  9429  0E75  3003               	movlw	3
  9430  0E76  1903               	skipnz
  9431  0E77  0226               	subwf	readIAnalog@channel,w
  9432  0E78  1C03               	skipc
  9433  0E79  2E88               	goto	l2876
  9434                           
  9435                           ;adc.c: 92: {
  9436                           ;adc.c: 93: sampleIndex+=1;
  9437  0E7A  3001               	movlw	1
  9438  0E7B  0021               	movlb	1	; select bank1
  9439  0E7C  07E7               	addwf	_sampleIndex^(0+128),f
  9440  0E7D  3000               	movlw	0
  9441  0E7E  3DE8               	addwfc	(_sampleIndex+1)^(0+128),f
  9442                           
  9443                           ;adc.c: 94: if(sampleIndex >= 50)sampleIndex = 0;
  9444  0E7F  3000               	movlw	0
  9445  0E80  0268               	subwf	(_sampleIndex+1)^(0+128),w
  9446  0E81  3032               	movlw	50
  9447  0E82  1903               	skipnz
  9448  0E83  0267               	subwf	_sampleIndex^(0+128),w
  9449  0E84  1C03               	skipc
  9450  0E85  2E88               	goto	l2876
  9451  0E86  01E7               	clrf	_sampleIndex^(0+128)
  9452  0E87  01E8               	clrf	(_sampleIndex+1)^(0+128)
  9453  0E88                     l2876:	
  9454                           
  9455                           ;adc.c: 95: }
  9456                           ;adc.c: 97: value = totals[channel]/50;
  9457  0E88  3000               	movlw	0
  9458  0E89  00F3               	movwf	___aldiv@divisor+3
  9459  0E8A  3000               	movlw	0
  9460  0E8B  00F2               	movwf	___aldiv@divisor+2
  9461  0E8C  3000               	movlw	0
  9462  0E8D  00F1               	movwf	___aldiv@divisor+1
  9463  0E8E  3032               	movlw	50
  9464  0E8F  00F0               	movwf	___aldiv@divisor
  9465  0E90  0020               	movlb	0	; select bank0
  9466  0E91  0826               	movf	readIAnalog@channel,w
  9467  0E92  00A8               	movwf	??_readIAnalog
  9468  0E93  3001               	movlw	1
  9469  0E94                     u3185:	
  9470  0E94  35A8               	lslf	??_readIAnalog,f
  9471  0E95  3EFF               	addlw	-1
  9472  0E96  1D03               	skipz
  9473  0E97  2E94               	goto	u3185
  9474  0E98  3528               	lslf	??_readIAnalog,w
  9475  0E99  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9476  0E9A  0086               	movwf	6
  9477  0E9B  3001               	movlw	1	; select bank2/3
  9478  0E9C  0087               	movwf	7
  9479  0E9D  3F40               	moviw [0]fsr1
  9480  0E9E  00F4               	movwf	___aldiv@dividend
  9481  0E9F  3F41               	moviw [1]fsr1
  9482  0EA0  00F5               	movwf	___aldiv@dividend+1
  9483  0EA1  3F42               	moviw [2]fsr1
  9484  0EA2  00F6               	movwf	___aldiv@dividend+2
  9485  0EA3  3F43               	moviw [3]fsr1
  9486  0EA4  00F7               	movwf	___aldiv@dividend+3
  9487  0EA5  3196  2670         	fcall	___aldiv
  9488  0EA7  0871               	movf	?___aldiv+1,w
  9489  0EA8  00FC               	movwf	readIAnalog@value+1
  9490  0EA9  0870               	movf	?___aldiv,w
  9491  0EAA  00FB               	movwf	readIAnalog@value
  9492                           
  9493                           ;adc.c: 99: return value;
  9494  0EAB  087C               	movf	readIAnalog@value+1,w
  9495  0EAC  0020               	movlb	0	; select bank0
  9496  0EAD  00A7               	movwf	?_readIAnalog+1
  9497  0EAE  087B               	movf	readIAnalog@value,w
  9498  0EAF  00A6               	movwf	?_readIAnalog
  9499  0EB0  0008               	return
  9500  0EB1                     __end_of_readIAnalog:	
  9501                           
  9502                           	psect	text9
  9503  1670                     __ptext9:	
  9504 ;; *************** function ___aldiv *****************
  9505 ;; Defined at:
  9506 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
  9507 ;; Parameters:    Size  Location     Type
  9508 ;;  divisor         4    0[COMMON] long 
  9509 ;;  dividend        4    4[COMMON] long 
  9510 ;; Auto vars:     Size  Location     Type
  9511 ;;  quotient        4    2[BANK0 ] long 
  9512 ;;  sign            1    1[BANK0 ] unsigned char 
  9513 ;;  counter         1    0[BANK0 ] unsigned char 
  9514 ;; Return value:  Size  Location     Type
  9515 ;;                  4    0[COMMON] long 
  9516 ;; Registers used:
  9517 ;;		wreg, status,2, status,0
  9518 ;; Tracked objects:
  9519 ;;		On entry : 0/0
  9520 ;;		On exit  : 0/0
  9521 ;;		Unchanged: 0/0
  9522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9523 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9524 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9525 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9526 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9527 ;;Total ram usage:       15 bytes
  9528 ;; Hardware stack levels used:    1
  9529 ;; This function calls:
  9530 ;;		Nothing
  9531 ;; This function is called by:
  9532 ;;		_readIAnalog
  9533 ;; This function uses a non-reentrant model
  9534 ;;
  9535                           
  9536                           
  9537                           ;psect for function ___aldiv
  9538  1670                     ___aldiv:	
  9539                           
  9540                           ;incstack = 0
  9541                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9542  1670  0020               	movlb	0	; select bank0
  9543  1671  01A1               	clrf	___aldiv@sign
  9544  1672  1FF3               	btfss	___aldiv@divisor+3,7
  9545  1673  2E81               	goto	l635
  9546  1674  09F0               	comf	___aldiv@divisor,f
  9547  1675  09F1               	comf	___aldiv@divisor+1,f
  9548  1676  09F2               	comf	___aldiv@divisor+2,f
  9549  1677  09F3               	comf	___aldiv@divisor+3,f
  9550  1678  0AF0               	incf	___aldiv@divisor,f
  9551  1679  1903               	skipnz
  9552  167A  0AF1               	incf	___aldiv@divisor+1,f
  9553  167B  1903               	skipnz
  9554  167C  0AF2               	incf	___aldiv@divisor+2,f
  9555  167D  1903               	skipnz
  9556  167E  0AF3               	incf	___aldiv@divisor+3,f
  9557  167F  01A1               	clrf	___aldiv@sign
  9558  1680  0AA1               	incf	___aldiv@sign,f
  9559  1681                     l635:	
  9560  1681  1FF7               	btfss	___aldiv@dividend+3,7
  9561  1682  2E92               	goto	l2706
  9562  1683  09F4               	comf	___aldiv@dividend,f
  9563  1684  09F5               	comf	___aldiv@dividend+1,f
  9564  1685  09F6               	comf	___aldiv@dividend+2,f
  9565  1686  09F7               	comf	___aldiv@dividend+3,f
  9566  1687  0AF4               	incf	___aldiv@dividend,f
  9567  1688  1903               	skipnz
  9568  1689  0AF5               	incf	___aldiv@dividend+1,f
  9569  168A  1903               	skipnz
  9570  168B  0AF6               	incf	___aldiv@dividend+2,f
  9571  168C  1903               	skipnz
  9572  168D  0AF7               	incf	___aldiv@dividend+3,f
  9573  168E  3001               	movlw	1
  9574  168F  00F8               	movwf	??___aldiv
  9575  1690  0878               	movf	??___aldiv,w
  9576  1691  06A1               	xorwf	___aldiv@sign,f
  9577  1692                     l2706:	
  9578  1692  3000               	movlw	0
  9579  1693  00A5               	movwf	___aldiv@quotient+3
  9580  1694  3000               	movlw	0
  9581  1695  00A4               	movwf	___aldiv@quotient+2
  9582  1696  3000               	movlw	0
  9583  1697  00A3               	movwf	___aldiv@quotient+1
  9584  1698  3000               	movlw	0
  9585  1699  00A2               	movwf	___aldiv@quotient
  9586  169A  0873               	movf	___aldiv@divisor+3,w
  9587  169B  0472               	iorwf	___aldiv@divisor+2,w
  9588  169C  0471               	iorwf	___aldiv@divisor+1,w
  9589  169D  0470               	iorwf	___aldiv@divisor,w
  9590  169E  1903               	skipnz
  9591  169F  2EDB               	goto	l2728
  9592  16A0  01A0               	clrf	___aldiv@counter
  9593  16A1  0AA0               	incf	___aldiv@counter,f
  9594  16A2                     l2714:	
  9595  16A2  1BF3               	btfsc	___aldiv@divisor+3,7
  9596  16A3  2EB0               	goto	l2716
  9597  16A4  3001               	movlw	1
  9598  16A5                     u2805:	
  9599  16A5  35F0               	lslf	___aldiv@divisor,f
  9600  16A6  0DF1               	rlf	___aldiv@divisor+1,f
  9601  16A7  0DF2               	rlf	___aldiv@divisor+2,f
  9602  16A8  0DF3               	rlf	___aldiv@divisor+3,f
  9603  16A9  0B89               	decfsz	9,f
  9604  16AA  2EA5               	goto	u2805
  9605  16AB  3001               	movlw	1
  9606  16AC  00F8               	movwf	??___aldiv
  9607  16AD  0878               	movf	??___aldiv,w
  9608  16AE  07A0               	addwf	___aldiv@counter,f
  9609  16AF  2EA2               	goto	l2714
  9610  16B0                     l2716:	
  9611  16B0  3001               	movlw	1
  9612  16B1                     u2825:	
  9613  16B1  35A2               	lslf	___aldiv@quotient,f
  9614  16B2  0DA3               	rlf	___aldiv@quotient+1,f
  9615  16B3  0DA4               	rlf	___aldiv@quotient+2,f
  9616  16B4  0DA5               	rlf	___aldiv@quotient+3,f
  9617  16B5  0B89               	decfsz	9,f
  9618  16B6  2EB1               	goto	u2825
  9619  16B7  0873               	movf	___aldiv@divisor+3,w
  9620  16B8  0277               	subwf	___aldiv@dividend+3,w
  9621  16B9  1D03               	skipz
  9622  16BA  2EC5               	goto	u2835
  9623  16BB  0872               	movf	___aldiv@divisor+2,w
  9624  16BC  0276               	subwf	___aldiv@dividend+2,w
  9625  16BD  1D03               	skipz
  9626  16BE  2EC5               	goto	u2835
  9627  16BF  0871               	movf	___aldiv@divisor+1,w
  9628  16C0  0275               	subwf	___aldiv@dividend+1,w
  9629  16C1  1D03               	skipz
  9630  16C2  2EC5               	goto	u2835
  9631  16C3  0870               	movf	___aldiv@divisor,w
  9632  16C4  0274               	subwf	___aldiv@dividend,w
  9633  16C5                     u2835:	
  9634  16C5  1C03               	skipc
  9635  16C6  2ED0               	goto	l2724
  9636  16C7  0870               	movf	___aldiv@divisor,w
  9637  16C8  02F4               	subwf	___aldiv@dividend,f
  9638  16C9  0871               	movf	___aldiv@divisor+1,w
  9639  16CA  3BF5               	subwfb	___aldiv@dividend+1,f
  9640  16CB  0872               	movf	___aldiv@divisor+2,w
  9641  16CC  3BF6               	subwfb	___aldiv@dividend+2,f
  9642  16CD  0873               	movf	___aldiv@divisor+3,w
  9643  16CE  3BF7               	subwfb	___aldiv@dividend+3,f
  9644  16CF  1422               	bsf	___aldiv@quotient,0
  9645  16D0                     l2724:	
  9646  16D0  3001               	movlw	1
  9647  16D1                     u2845:	
  9648  16D1  36F3               	lsrf	___aldiv@divisor+3,f
  9649  16D2  0CF2               	rrf	___aldiv@divisor+2,f
  9650  16D3  0CF1               	rrf	___aldiv@divisor+1,f
  9651  16D4  0CF0               	rrf	___aldiv@divisor,f
  9652  16D5  0B89               	decfsz	9,f
  9653  16D6  2ED1               	goto	u2845
  9654  16D7  3001               	movlw	1
  9655  16D8  02A0               	subwf	___aldiv@counter,f
  9656  16D9  1D03               	btfss	3,2
  9657  16DA  2EB0               	goto	l2716
  9658  16DB                     l2728:	
  9659  16DB  0821               	movf	___aldiv@sign,w
  9660  16DC  1903               	btfsc	3,2
  9661  16DD  2EE9               	goto	l2732
  9662  16DE  09A2               	comf	___aldiv@quotient,f
  9663  16DF  09A3               	comf	___aldiv@quotient+1,f
  9664  16E0  09A4               	comf	___aldiv@quotient+2,f
  9665  16E1  09A5               	comf	___aldiv@quotient+3,f
  9666  16E2  0AA2               	incf	___aldiv@quotient,f
  9667  16E3  1903               	skipnz
  9668  16E4  0AA3               	incf	___aldiv@quotient+1,f
  9669  16E5  1903               	skipnz
  9670  16E6  0AA4               	incf	___aldiv@quotient+2,f
  9671  16E7  1903               	skipnz
  9672  16E8  0AA5               	incf	___aldiv@quotient+3,f
  9673  16E9                     l2732:	
  9674  16E9  0825               	movf	___aldiv@quotient+3,w
  9675  16EA  00F3               	movwf	?___aldiv+3
  9676  16EB  0824               	movf	___aldiv@quotient+2,w
  9677  16EC  00F2               	movwf	?___aldiv+2
  9678  16ED  0823               	movf	___aldiv@quotient+1,w
  9679  16EE  00F1               	movwf	?___aldiv+1
  9680  16EF  0822               	movf	___aldiv@quotient,w
  9681  16F0  00F0               	movwf	?___aldiv
  9682  16F1  0008               	return
  9683  16F2                     __end_of___aldiv:	
  9684                           
  9685                           	psect	text10
  9686  1779                     __ptext10:	
  9687 ;; *************** function _readButton *****************
  9688 ;; Defined at:
  9689 ;;		line 9 in file "buttons.c"
  9690 ;; Parameters:    Size  Location     Type
  9691 ;;		None
  9692 ;; Auto vars:     Size  Location     Type
  9693 ;;		None
  9694 ;; Return value:  Size  Location     Type
  9695 ;;                  1    wreg      unsigned char 
  9696 ;; Registers used:
  9697 ;;		wreg, status,2, status,0, pclath, cstack
  9698 ;; Tracked objects:
  9699 ;;		On entry : 0/0
  9700 ;;		On exit  : 0/0
  9701 ;;		Unchanged: 0/0
  9702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9705 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9706 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9707 ;;Total ram usage:        3 bytes
  9708 ;; Hardware stack levels used:    1
  9709 ;; Hardware stack levels required when called:    1
  9710 ;; This function calls:
  9711 ;;		_ADCRead
  9712 ;; This function is called by:
  9713 ;;		_main
  9714 ;; This function uses a non-reentrant model
  9715 ;;
  9716                           
  9717                           
  9718                           ;psect for function _readButton
  9719  1779                     _readButton:	
  9720                           
  9721                           ;buttons.c: 11: readButtons = ADCRead(11);
  9722                           
  9723                           ;incstack = 0
  9724                           ; Regs used in _readButton: [wreg+status,2+status,0+pclath+cstack]
  9725  1779  300B               	movlw	11
  9726  177A  3191  21DC  3197   	fcall	_ADCRead
  9727  177D  0871               	movf	?_ADCRead+1,w
  9728  177E  0021               	movlb	1	; select bank1
  9729  177F  00E6               	movwf	(_readButtons+1)^(0+128)
  9730  1780  0870               	movf	?_ADCRead,w
  9731  1781  00E5               	movwf	_readButtons^(0+128)
  9732                           
  9733                           ;buttons.c: 13: if(readButtons >= 425 && readButtons < 485)
  9734  1782  0866               	movf	(_readButtons+1)^(0+128),w
  9735  1783  3A80               	xorlw	128
  9736  1784  00F4               	movwf	??_readButton
  9737  1785  3081               	movlw	129
  9738  1786  0274               	subwf	??_readButton,w
  9739  1787  1D03               	skipz
  9740  1788  2F8B               	goto	u3255
  9741  1789  30A9               	movlw	169
  9742  178A  0265               	subwf	_readButtons^(0+128),w
  9743  178B                     u3255:	
  9744  178B  1C03               	skipc
  9745  178C  2F9D               	goto	l2918
  9746  178D  0021               	movlb	1	; select bank1
  9747  178E  0866               	movf	(_readButtons+1)^(0+128),w
  9748  178F  3A80               	xorlw	128
  9749  1790  00F4               	movwf	??_readButton
  9750  1791  3081               	movlw	129
  9751  1792  0274               	subwf	??_readButton,w
  9752  1793  1D03               	skipz
  9753  1794  2F97               	goto	u3265
  9754  1795  30E5               	movlw	229
  9755  1796  0265               	subwf	_readButtons^(0+128),w
  9756  1797                     u3265:	
  9757  1797  1803               	skipnc
  9758  1798  2F9D               	goto	l2918
  9759                           
  9760                           ;buttons.c: 14: {
  9761                           ;buttons.c: 15: button = 1;
  9762  1799  0020               	movlb	0	; select bank0
  9763  179A  01EF               	clrf	_button
  9764  179B  0AEF               	incf	_button,f
  9765                           
  9766                           ;buttons.c: 16: }
  9767  179C  2FCB               	goto	l2930
  9768  179D                     l2918:	
  9769                           
  9770                           ;buttons.c: 18: else if(readButtons >= 615 && readButtons < 690)
  9771  179D  0021               	movlb	1	; select bank1
  9772  179E  0866               	movf	(_readButtons+1)^(0+128),w
  9773  179F  3A80               	xorlw	128
  9774  17A0  00F4               	movwf	??_readButton
  9775  17A1  3082               	movlw	130
  9776  17A2  0274               	subwf	??_readButton,w
  9777  17A3  1D03               	skipz
  9778  17A4  2FA7               	goto	u3275
  9779  17A5  3067               	movlw	103
  9780  17A6  0265               	subwf	_readButtons^(0+128),w
  9781  17A7                     u3275:	
  9782  17A7  1C03               	skipc
  9783  17A8  2FB7               	goto	l2924
  9784  17A9  0021               	movlb	1	; select bank1
  9785  17AA  0866               	movf	(_readButtons+1)^(0+128),w
  9786  17AB  3A80               	xorlw	128
  9787  17AC  00F4               	movwf	??_readButton
  9788  17AD  3082               	movlw	130
  9789  17AE  0274               	subwf	??_readButton,w
  9790  17AF  1D03               	skipz
  9791  17B0  2FB3               	goto	u3285
  9792  17B1  30B2               	movlw	178
  9793  17B2  0265               	subwf	_readButtons^(0+128),w
  9794  17B3                     u3285:	
  9795  17B3  1803               	skipnc
  9796  17B4  2FB7               	goto	l2924
  9797                           
  9798                           ;buttons.c: 19: {
  9799                           ;buttons.c: 20: button = 2;
  9800  17B5  3002               	movlw	2
  9801  17B6  2FC4               	goto	L6
  9802  17B7                     l2924:	
  9803                           ;buttons.c: 21: }
  9804                           
  9805                           
  9806                           ;buttons.c: 23: else if(readButtons > 800)
  9807  17B7  0021               	movlb	1	; select bank1
  9808  17B8  0866               	movf	(_readButtons+1)^(0+128),w
  9809  17B9  3A80               	xorlw	128
  9810  17BA  00F4               	movwf	??_readButton
  9811  17BB  3083               	movlw	131
  9812  17BC  0274               	subwf	??_readButton,w
  9813  17BD  1D03               	skipz
  9814  17BE  2FC1               	goto	u3295
  9815  17BF  3021               	movlw	33
  9816  17C0  0265               	subwf	_readButtons^(0+128),w
  9817  17C1                     u3295:	
  9818  17C1  1C03               	skipc
  9819  17C2  2FC9               	goto	l2928
  9820                           
  9821                           ;buttons.c: 24: {
  9822                           ;buttons.c: 25: button = 3;
  9823  17C3  3003               	movlw	3
  9824  17C4                     L6:	
  9825  17C4  00F4               	movwf	??_readButton
  9826  17C5  0874               	movf	??_readButton,w
  9827  17C6  0020               	movlb	0	; select bank0
  9828  17C7  00EF               	movwf	_button
  9829                           
  9830                           ;buttons.c: 26: }
  9831  17C8  2FCB               	goto	l2930
  9832  17C9                     l2928:	
  9833                           
  9834                           ;buttons.c: 28: else
  9835                           ;buttons.c: 29: {
  9836                           ;buttons.c: 30: button = 0;
  9837  17C9  0020               	movlb	0	; select bank0
  9838  17CA  01EF               	clrf	_button
  9839  17CB                     l2930:	
  9840                           
  9841                           ;buttons.c: 31: }
  9842                           ;buttons.c: 33: if (button != 0)
  9843  17CB  086F               	movf	_button,w
  9844  17CC  1903               	btfsc	3,2
  9845  17CD  2FFC               	goto	l2950
  9846                           
  9847                           ;buttons.c: 34: {
  9848                           ;buttons.c: 35: if (button != lastButton)
  9849  17CE  086F               	movf	_button,w
  9850  17CF  0021               	movlb	1	; select bank1
  9851  17D0  066A               	xorwf	_lastButton^(0+128),w
  9852  17D1  1903               	skipnz
  9853  17D2  2FDA               	goto	l2938
  9854                           
  9855                           ;buttons.c: 36: {
  9856                           ;buttons.c: 37: lastButton = button;
  9857  17D3  0020               	movlb	0	; select bank0
  9858  17D4  086F               	movf	_button,w
  9859  17D5  00F4               	movwf	??_readButton
  9860  17D6  0874               	movf	??_readButton,w
  9861  17D7  0021               	movlb	1	; select bank1
  9862  17D8  00EA               	movwf	_lastButton^(0+128)
  9863  17D9  2FFD               	goto	L7
  9864  17DA                     l2938:	
  9865                           ;buttons.c: 39: }
  9866                           
  9867                           ;buttons.c: 38: j = 0;
  9868                           
  9869                           
  9870                           ;buttons.c: 40: else
  9871                           ;buttons.c: 41: {
  9872                           ;buttons.c: 42: j += 1;
  9873  17DA  3001               	movlw	1
  9874  17DB  00F4               	movwf	??_readButton
  9875  17DC  0874               	movf	??_readButton,w
  9876  17DD  07E9               	addwf	_j^(0+128),f
  9877                           
  9878                           ;buttons.c: 44: if(j == 1)
  9879  17DE  0369               	decf	_j^(0+128),w
  9880  17DF  1D03               	btfss	3,2
  9881  17E0  2FE3               	goto	l2944
  9882                           
  9883                           ;buttons.c: 45: {
  9884                           ;buttons.c: 46: return (lastButton);
  9885  17E1  086A               	movf	_lastButton^(0+128),w
  9886  17E2  0008               	return
  9887  17E3                     l2944:	
  9888                           
  9889                           ;buttons.c: 47: }
  9890                           ;buttons.c: 49: if (j >10)
  9891  17E3  0869               	movf	_j^(0+128),w
  9892  17E4  3A80               	xorlw	128
  9893  17E5  3E75               	addlw	-139
  9894  17E6  1C03               	skipc
  9895  17E7  2FFE               	goto	l2952
  9896                           
  9897                           ;buttons.c: 50: {
  9898                           ;buttons.c: 51: _delay((unsigned long)((25)*(32000000/4000.0)));
  9899  17E8  3002               	movlw	2
  9900  17E9  00F6               	movwf	??_readButton+2
  9901  17EA  3004               	movlw	4
  9902  17EB  00F5               	movwf	??_readButton+1
  9903  17EC  30BA               	movlw	186
  9904  17ED  00F4               	movwf	??_readButton
  9905  17EE                     u3967:	
  9906  17EE  0BF4               	decfsz	??_readButton,f
  9907  17EF  2FEE               	goto	u3967
  9908  17F0  0BF5               	decfsz	??_readButton+1,f
  9909  17F1  2FEE               	goto	u3967
  9910  17F2  0BF6               	decfsz	??_readButton+2,f
  9911  17F3  2FEE               	goto	u3967
  9912  17F4  0000               	nop
  9913                           
  9914                           ;buttons.c: 52: j = 10;
  9915  17F5  300A               	movlw	10
  9916  17F6  00F4               	movwf	??_readButton
  9917  17F7  0874               	movf	??_readButton,w
  9918  17F8  0021               	movlb	1	; select bank1
  9919  17F9  00E9               	movwf	_j^(0+128)
  9920                           
  9921                           ;buttons.c: 53: return (lastButton);
  9922  17FA  086A               	movf	_lastButton^(0+128),w
  9923  17FB  0008               	return
  9924  17FC                     l2950:	
  9925                           ;buttons.c: 54: }
  9926                           ;buttons.c: 55: }
  9927                           ;buttons.c: 56: goto end;
  9928                           
  9929                           
  9930                           ;buttons.c: 57: }
  9931                           ;buttons.c: 59: j = 0;
  9932  17FC  0021               	movlb	1	; select bank1
  9933  17FD                     L7:	
  9934  17FD  01E9               	clrf	_j^(0+128)
  9935  17FE                     l2952:	
  9936                           ;buttons.c: 61: end:
  9937                           
  9938                           
  9939                           ;buttons.c: 63: return (0);
  9940  17FE  3000               	movlw	0
  9941  17FF  0008               	return
  9942  1800                     __end_of_readButton:	
  9943                           
  9944                           	psect	text11
  9945  11DC                     __ptext11:	
  9946 ;; *************** function _ADCRead *****************
  9947 ;; Defined at:
  9948 ;;		line 21 in file "adc.c"
  9949 ;; Parameters:    Size  Location     Type
  9950 ;;  channel         1    wreg     enum E13559
  9951 ;; Auto vars:     Size  Location     Type
  9952 ;;  channel         1    3[COMMON] enum E13559
  9953 ;; Return value:  Size  Location     Type
  9954 ;;                  2    0[COMMON] int 
  9955 ;; Registers used:
  9956 ;;		wreg
  9957 ;; Tracked objects:
  9958 ;;		On entry : 0/0
  9959 ;;		On exit  : 0/0
  9960 ;;		Unchanged: 0/0
  9961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9962 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9963 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9965 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9966 ;;Total ram usage:        4 bytes
  9967 ;; Hardware stack levels used:    1
  9968 ;; This function calls:
  9969 ;;		Nothing
  9970 ;; This function is called by:
  9971 ;;		_main
  9972 ;;		_readIAnalog
  9973 ;;		_readButton
  9974 ;; This function uses a non-reentrant model
  9975 ;;
  9976                           
  9977                           
  9978                           ;psect for function _ADCRead
  9979  11DC                     _ADCRead:	
  9980                           
  9981                           ;incstack = 0
  9982                           ; Regs used in _ADCRead: [wreg]
  9983                           ;ADCRead@channel stored from wreg
  9984  11DC  00F3               	movwf	ADCRead@channel
  9985                           
  9986                           ;adc.c: 23: ADPCH = channel_VSS;
  9987  11DD  303C               	movlw	60
  9988  11DE  0021               	movlb	1	; select bank1
  9989  11DF  009E               	movwf	30	;volatile
  9990                           
  9991                           ;adc.c: 25: ADCON0bits.ADON = 1;
  9992  11E0  1793               	bsf	19,7	;volatile
  9993                           
  9994                           ;adc.c: 27: ADCON0bits.ADCONT = 0;
  9995  11E1  1313               	bcf	19,6	;volatile
  9996                           
  9997                           ;adc.c: 29: ADCON0bits.ADGO = 1;
  9998  11E2  1413               	bsf	19,0	;volatile
  9999  11E3                     l190:	
 10000                           ;adc.c: 32: {
 10001                           
 10002                           ;adc.c: 31: while(ADCON0bits.ADGO)
 10003                           
 10004  11E3  1813               	btfsc	19,0	;volatile
 10005  11E4  29E3               	goto	l190
 10006                           
 10007                           ;adc.c: 33: }
 10008                           ;adc.c: 35: ADPCH = channel;
 10009  11E5  0873               	movf	ADCRead@channel,w
 10010  11E6  009E               	movwf	30	;volatile
 10011                           
 10012                           ;adc.c: 37: ADCON0bits.ADON = 1;
 10013  11E7  1793               	bsf	19,7	;volatile
 10014                           
 10015                           ;adc.c: 39: ADCON0bits.ADCONT = 0;
 10016  11E8  1313               	bcf	19,6	;volatile
 10017                           
 10018                           ;adc.c: 41: ADCON0bits.ADGO = 1;
 10019  11E9  1413               	bsf	19,0	;volatile
 10020  11EA                     l193:	
 10021                           ;adc.c: 44: {
 10022                           
 10023                           ;adc.c: 43: while(ADCON0bits.ADGO)
 10024                           
 10025  11EA  1813               	btfsc	19,0	;volatile
 10026  11EB  29EA               	goto	l193
 10027                           
 10028                           ;adc.c: 45: }
 10029                           ;adc.c: 47: return ((ADRESH<<8)+ADRESL);
 10030  11EC  080D               	movf	13,w	;volatile
 10031  11ED  00F1               	movwf	?_ADCRead+1
 10032  11EE  080C               	movf	12,w	;volatile
 10033  11EF  00F0               	movwf	?_ADCRead
 10034  11F0  0008               	return
 10035  11F1                     __end_of_ADCRead:	
 10036                           
 10037                           	psect	text12
 10038  0EB1                     __ptext12:	
 10039 ;; *************** function _cc_cv_mode *****************
 10040 ;; Defined at:
 10041 ;;		line 83 in file "battery_charger.c"
 10042 ;; Parameters:    Size  Location     Type
 10043 ;;  z               1    wreg     unsigned char 
 10044 ;; Auto vars:     Size  Location     Type
 10045 ;;  z               1   37[BANK0 ] unsigned char 
 10046 ;; Return value:  Size  Location     Type
 10047 ;;                  1    wreg      void 
 10048 ;; Registers used:
 10049 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10050 ;; Tracked objects:
 10051 ;;		On entry : 0/0
 10052 ;;		On exit  : 0/0
 10053 ;;		Unchanged: 0/0
 10054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10056 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10057 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10058 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10059 ;;Total ram usage:        8 bytes
 10060 ;; Hardware stack levels used:    1
 10061 ;; Hardware stack levels required when called:    2
 10062 ;; This function calls:
 10063 ;;		___awtoft
 10064 ;;		___ftmul
 10065 ;;		___fttol
 10066 ;; This function is called by:
 10067 ;;		_main
 10068 ;; This function uses a non-reentrant model
 10069 ;;
 10070                           
 10071                           
 10072                           ;psect for function _cc_cv_mode
 10073  0EB1                     _cc_cv_mode:	
 10074                           
 10075                           ;incstack = 0
 10076                           ; Regs used in _cc_cv_mode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10077                           ;cc_cv_mode@z stored from wreg
 10078  0EB1  0020               	movlb	0	; select bank0
 10079  0EB2  00C5               	movwf	cc_cv_mode@z
 10080                           
 10081                           ;battery_charger.c: 85: if(voltage[z]>=Vref[z])
 10082  0EB3  3545               	lslf	cc_cv_mode@z,w
 10083  0EB4  3ED1               	addlw	(low (_Vref| 0))& (0+255)
 10084  0EB5  0086               	movwf	6
 10085  0EB6  0187               	clrf	7
 10086  0EB7  3F40               	moviw [0]fsr1
 10087  0EB8  00BE               	movwf	??_cc_cv_mode
 10088  0EB9  3F41               	moviw [1]fsr1
 10089  0EBA  00BF               	movwf	??_cc_cv_mode+1
 10090  0EBB  3545               	lslf	cc_cv_mode@z,w
 10091  0EBC  3EB8               	addlw	(low (_voltage| 0))& (0+255)
 10092  0EBD  0086               	movwf	6
 10093  0EBE  0187               	clrf	7
 10094  0EBF  3F40               	moviw [0]fsr1
 10095  0EC0  00C0               	movwf	??_cc_cv_mode+2
 10096  0EC1  3F41               	moviw [1]fsr1
 10097  0EC2  00C1               	movwf	??_cc_cv_mode+3
 10098  0EC3  0841               	movf	??_cc_cv_mode+3,w
 10099  0EC4  3A80               	xorlw	128
 10100  0EC5  00C2               	movwf	??_cc_cv_mode+4
 10101  0EC6  083F               	movf	??_cc_cv_mode+1,w
 10102  0EC7  3A80               	xorlw	128
 10103  0EC8  0242               	subwf	??_cc_cv_mode+4,w
 10104  0EC9  1D03               	skipz
 10105  0ECA  2ECD               	goto	u3555
 10106  0ECB  083E               	movf	??_cc_cv_mode,w
 10107  0ECC  0240               	subwf	??_cc_cv_mode+2,w
 10108  0ECD                     u3555:	
 10109  0ECD  1C03               	skipc
 10110  0ECE  2F0D               	goto	l3090
 10111                           
 10112                           ;battery_charger.c: 86: {
 10113                           ;battery_charger.c: 87: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 10114  0ECF  0020               	movlb	0	; select bank0
 10115  0ED0  0845               	movf	cc_cv_mode@z,w
 10116  0ED1  3EDD               	addlw	(low (_VHoldMode| 0))& (0+255)
 10117  0ED2  0086               	movwf	6
 10118  0ED3  0187               	clrf	7
 10119  0ED4  0801               	movf	1,w
 10120  0ED5  3A80               	xorlw	128
 10121  0ED6  3E77               	addlw	-137
 10122  0ED7  1803               	skipnc
 10123  0ED8  2EE1               	goto	l260
 10124  0ED9  3001               	movlw	1
 10125  0EDA  00BE               	movwf	??_cc_cv_mode
 10126  0EDB  0845               	movf	cc_cv_mode@z,w
 10127  0EDC  3EDD               	addlw	(low (_VHoldMode| 0))& (0+255)
 10128  0EDD  0086               	movwf	6
 10129  0EDE  0187               	clrf	7
 10130  0EDF  083E               	movf	??_cc_cv_mode,w
 10131  0EE0  0781               	addwf	1,f
 10132  0EE1                     l260:	
 10133                           
 10134                           ;battery_charger.c: 88: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 10135  0EE1  0845               	movf	cc_cv_mode@z,w
 10136  0EE2  3EDD               	addlw	(low (_VHoldMode| 0))& (0+255)
 10137  0EE3  0086               	movwf	6
 10138  0EE4  0187               	clrf	7
 10139  0EE5  0801               	movf	1,w
 10140  0EE6  3A80               	xorlw	128
 10141  0EE7  3E77               	addlw	-137
 10142  0EE8  1803               	skipnc
 10143  0EE9  2EF2               	goto	l261
 10144  0EEA  3001               	movlw	1
 10145  0EEB  00BE               	movwf	??_cc_cv_mode
 10146  0EEC  0845               	movf	cc_cv_mode@z,w
 10147  0EED  3EDD               	addlw	(low (_VHoldMode| 0))& (0+255)
 10148  0EEE  0086               	movwf	6
 10149  0EEF  0187               	clrf	7
 10150  0EF0  083E               	movf	??_cc_cv_mode,w
 10151  0EF1  0781               	addwf	1,f
 10152  0EF2                     l261:	
 10153                           
 10154                           ;battery_charger.c: 90: if(cc_cv[z])
 10155  0EF2  0845               	movf	cc_cv_mode@z,w
 10156  0EF3  3EE1               	addlw	(low (_cc_cv| 0))& (0+255)
 10157  0EF4  0086               	movwf	6
 10158  0EF5  0187               	clrf	7
 10159  0EF6  0801               	movf	1,w
 10160  0EF7  1903               	btfsc	3,2
 10161  0EF8  2F00               	goto	l3086
 10162                           
 10163                           ;battery_charger.c: 91: {
 10164                           ;battery_charger.c: 92: cc_cv[z]-=1;
 10165  0EF9  0845               	movf	cc_cv_mode@z,w
 10166  0EFA  3EE1               	addlw	(low (_cc_cv| 0))& (0+255)
 10167  0EFB  0086               	movwf	6
 10168  0EFC  0187               	clrf	7
 10169  0EFD  3001               	movlw	1
 10170  0EFE  0281               	subwf	1,f
 10171                           
 10172                           ;battery_charger.c: 93: }
 10173  0EFF  2F3D               	goto	l265
 10174  0F00                     l3086:	
 10175                           
 10176                           ;battery_charger.c: 94: else
 10177                           ;battery_charger.c: 95: {
 10178                           ;battery_charger.c: 96: if(Imode[z])
 10179  0F00  0845               	movf	cc_cv_mode@z,w
 10180  0F01  3ED9               	addlw	(low (_Imode| 0))& (0+255)
 10181  0F02  0086               	movwf	6
 10182  0F03  0187               	clrf	7
 10183  0F04  0801               	movf	1,w
 10184  0F05  1903               	btfsc	3,2
 10185  0F06  2F3D               	goto	l265
 10186                           
 10187                           ;battery_charger.c: 97: {
 10188                           ;battery_charger.c: 98: Imode[z]=0;
 10189  0F07  0845               	movf	cc_cv_mode@z,w
 10190  0F08  3ED9               	addlw	(low (_Imode| 0))& (0+255)
 10191  0F09  0086               	movwf	6
 10192  0F0A  0187               	clrf	7
 10193  0F0B  0181               	clrf	1
 10194                           
 10195                           ;battery_charger.c: 99: }
 10196                           ;battery_charger.c: 100: }
 10197                           ;battery_charger.c: 101: }
 10198  0F0C  2F3D               	goto	l265
 10199  0F0D                     l3090:	
 10200                           
 10201                           ;battery_charger.c: 102: else
 10202                           ;battery_charger.c: 103: {
 10203                           ;battery_charger.c: 104: VHoldMode[z]-=1;
 10204  0F0D  30FF               	movlw	255
 10205  0F0E  0020               	movlb	0	; select bank0
 10206  0F0F  00BE               	movwf	??_cc_cv_mode
 10207  0F10  0845               	movf	cc_cv_mode@z,w
 10208  0F11  3EDD               	addlw	(low (_VHoldMode| 0))& (0+255)
 10209  0F12  0086               	movwf	6
 10210  0F13  0187               	clrf	7
 10211  0F14  083E               	movf	??_cc_cv_mode,w
 10212  0F15  0781               	addwf	1,f
 10213                           
 10214                           ;battery_charger.c: 105: if(VHoldMode[z]<(9*-1))
 10215  0F16  0845               	movf	cc_cv_mode@z,w
 10216  0F17  3EDD               	addlw	(low (_VHoldMode| 0))& (0+255)
 10217  0F18  0086               	movwf	6
 10218  0F19  0187               	clrf	7
 10219  0F1A  0801               	movf	1,w
 10220  0F1B  3A80               	xorlw	128
 10221  0F1C  3E89               	addlw	137
 10222  0F1D  1803               	skipnc
 10223  0F1E  2F3D               	goto	l265
 10224                           
 10225                           ;battery_charger.c: 106: {
 10226                           ;battery_charger.c: 107: batteryState[z]=CHARGE;
 10227  0F1F  3004               	movlw	4
 10228  0F20  00BE               	movwf	??_cc_cv_mode
 10229  0F21  0845               	movf	cc_cv_mode@z,w
 10230  0F22  3EDF               	addlw	(low (_batteryState| 0))& (0+255)
 10231  0F23  0086               	movwf	6
 10232  0F24  0187               	clrf	7
 10233  0F25  083E               	movf	??_cc_cv_mode,w
 10234  0F26  0081               	movwf	1
 10235                           
 10236                           ;battery_charger.c: 108: Imode[z]=1;
 10237  0F27  0845               	movf	cc_cv_mode@z,w
 10238  0F28  3ED9               	addlw	(low (_Imode| 0))& (0+255)
 10239  0F29  0086               	movwf	6
 10240  0F2A  0187               	clrf	7
 10241  0F2B  0181               	clrf	1
 10242  0F2C  0A81               	incf	1,f
 10243                           
 10244                           ;battery_charger.c: 109: cc_cv[z]=(9*2);
 10245  0F2D  3012               	movlw	18
 10246  0F2E  00BE               	movwf	??_cc_cv_mode
 10247  0F2F  0845               	movf	cc_cv_mode@z,w
 10248  0F30  3EE1               	addlw	(low (_cc_cv| 0))& (0+255)
 10249  0F31  0086               	movwf	6
 10250  0F32  0187               	clrf	7
 10251  0F33  083E               	movf	??_cc_cv_mode,w
 10252  0F34  0081               	movwf	1
 10253                           
 10254                           ;battery_charger.c: 110: VHoldMode[z]=(9*-1);
 10255  0F35  30F7               	movlw	247
 10256  0F36  00BE               	movwf	??_cc_cv_mode
 10257  0F37  0845               	movf	cc_cv_mode@z,w
 10258  0F38  3EDD               	addlw	(low (_VHoldMode| 0))& (0+255)
 10259  0F39  0086               	movwf	6
 10260  0F3A  0187               	clrf	7
 10261  0F3B  083E               	movf	??_cc_cv_mode,w
 10262  0F3C  0081               	movwf	1
 10263  0F3D                     l265:	
 10264                           
 10265                           ;battery_charger.c: 111: }
 10266                           ;battery_charger.c: 112: }
 10267                           ;battery_charger.c: 114: if(current[z]>Iref[z])
 10268  0F3D  3545               	lslf	cc_cv_mode@z,w
 10269  0F3E  3EB0               	addlw	(low (_current| 0))& (0+255)
 10270  0F3F  0086               	movwf	6
 10271  0F40  0187               	clrf	7
 10272  0F41  3F40               	moviw [0]fsr1
 10273  0F42  00BE               	movwf	??_cc_cv_mode
 10274  0F43  3F41               	moviw [1]fsr1
 10275  0F44  00BF               	movwf	??_cc_cv_mode+1
 10276  0F45  3545               	lslf	cc_cv_mode@z,w
 10277  0F46  3ECD               	addlw	(low (_Iref| 0))& (0+255)
 10278  0F47  0086               	movwf	6
 10279  0F48  0187               	clrf	7
 10280  0F49  3F40               	moviw [0]fsr1
 10281  0F4A  00C0               	movwf	??_cc_cv_mode+2
 10282  0F4B  3F41               	moviw [1]fsr1
 10283  0F4C  00C1               	movwf	??_cc_cv_mode+3
 10284  0F4D  0841               	movf	??_cc_cv_mode+3,w
 10285  0F4E  3A80               	xorlw	128
 10286  0F4F  00C2               	movwf	??_cc_cv_mode+4
 10287  0F50  083F               	movf	??_cc_cv_mode+1,w
 10288  0F51  3A80               	xorlw	128
 10289  0F52  0242               	subwf	??_cc_cv_mode+4,w
 10290  0F53  1D03               	skipz
 10291  0F54  2F57               	goto	u3615
 10292  0F55  083E               	movf	??_cc_cv_mode,w
 10293  0F56  0240               	subwf	??_cc_cv_mode+2,w
 10294  0F57                     u3615:	
 10295  0F57  1803               	skipnc
 10296  0F58  0008               	return
 10297                           
 10298                           ;battery_charger.c: 115: {
 10299                           ;battery_charger.c: 116: if(!(Imode[z]))
 10300  0F59  0020               	movlb	0	; select bank0
 10301  0F5A  0845               	movf	cc_cv_mode@z,w
 10302  0F5B  3ED9               	addlw	(low (_Imode| 0))& (0+255)
 10303  0F5C  0086               	movwf	6
 10304  0F5D  0187               	clrf	7
 10305  0F5E  0801               	movf	1,w
 10306  0F5F  1D03               	btfss	3,2
 10307  0F60  0008               	return
 10308                           
 10309                           ;battery_charger.c: 117: {
 10310                           ;battery_charger.c: 118: if(batteryState[z]==FLOAT)
 10311  0F61  0845               	movf	cc_cv_mode@z,w
 10312  0F62  3EDF               	addlw	(low (_batteryState| 0))& (0+255)
 10313  0F63  0086               	movwf	6
 10314  0F64  0187               	clrf	7
 10315  0F65  3005               	movlw	5
 10316  0F66  0601               	xorwf	1,w
 10317  0F67  1D03               	btfss	3,2
 10318  0F68  0008               	return
 10319                           
 10320                           ;battery_charger.c: 119: {
 10321                           ;battery_charger.c: 120: if(voltage[z]<1350+(int16_t)((250-batteryTemp)*.24)-70)
 10322  0F69  0021               	movlb	1	; select bank1
 10323  0F6A  096C               	comf	_batteryTemp^(0+128),w
 10324  0F6B  0020               	movlb	0	; select bank0
 10325  0F6C  00BE               	movwf	??_cc_cv_mode
 10326  0F6D  0021               	movlb	1	; select bank1
 10327  0F6E  096D               	comf	(_batteryTemp+1)^(0+128),w
 10328  0F6F  0020               	movlb	0	; select bank0
 10329  0F70  00BF               	movwf	??_cc_cv_mode+1
 10330  0F71  0ABE               	incf	??_cc_cv_mode,f
 10331  0F72  1903               	skipnz
 10332  0F73  0ABF               	incf	??_cc_cv_mode+1,f
 10333  0F74  083E               	movf	??_cc_cv_mode,w
 10334  0F75  3EFA               	addlw	250
 10335  0F76  00F8               	movwf	___awtoft@c
 10336  0F77  3000               	movlw	0
 10337  0F78  3D3F               	addwfc	??_cc_cv_mode+1,w
 10338  0F79  00F9               	movwf	___awtoft@c+1
 10339  0F7A  3192  2275  318E   	fcall	___awtoft
 10340  0F7D  0878               	movf	?___awtoft,w
 10341  0F7E  0020               	movlb	0	; select bank0
 10342  0F7F  00A3               	movwf	___ftmul@f2
 10343  0F80  0879               	movf	?___awtoft+1,w
 10344  0F81  00A4               	movwf	___ftmul@f2+1
 10345  0F82  087A               	movf	?___awtoft+2,w
 10346  0F83  00A5               	movwf	___ftmul@f2+2
 10347  0F84  30C3               	movlw	195
 10348  0F85  00A0               	movwf	___ftmul@f1
 10349  0F86  3075               	movlw	117
 10350  0F87  00A1               	movwf	___ftmul@f1+1
 10351  0F88  303E               	movlw	62
 10352  0F89  00A2               	movwf	___ftmul@f1+2
 10353  0F8A  318B  2311  318E   	fcall	___ftmul
 10354  0F8D  0020               	movlb	0	; select bank0
 10355  0F8E  0820               	movf	?___ftmul,w
 10356  0F8F  00B0               	movwf	___fttol@f1
 10357  0F90  0821               	movf	?___ftmul+1,w
 10358  0F91  00B1               	movwf	___fttol@f1+1
 10359  0F92  0822               	movf	?___ftmul+2,w
 10360  0F93  00B2               	movwf	___fttol@f1+2
 10361  0F94  3196  26F2  318E   	fcall	___fttol
 10362  0F97  0020               	movlb	0	; select bank0
 10363  0F98  0830               	movf	?___fttol,w
 10364  0F99  3E00               	addlw	0
 10365  0F9A  00C0               	movwf	??_cc_cv_mode+2
 10366  0F9B  3005               	movlw	5
 10367  0F9C  3D31               	addwfc	?___fttol+1,w
 10368  0F9D  00C1               	movwf	??_cc_cv_mode+3
 10369  0F9E  3545               	lslf	cc_cv_mode@z,w
 10370  0F9F  3EB8               	addlw	(low (_voltage| 0))& (0+255)
 10371  0FA0  0086               	movwf	6
 10372  0FA1  0187               	clrf	7
 10373  0FA2  3F40               	moviw [0]fsr1
 10374  0FA3  00C2               	movwf	??_cc_cv_mode+4
 10375  0FA4  3F41               	moviw [1]fsr1
 10376  0FA5  00C3               	movwf	??_cc_cv_mode+5
 10377  0FA6  0843               	movf	??_cc_cv_mode+5,w
 10378  0FA7  3A80               	xorlw	128
 10379  0FA8  00C4               	movwf	??_cc_cv_mode+6
 10380  0FA9  0841               	movf	??_cc_cv_mode+3,w
 10381  0FAA  3A80               	xorlw	128
 10382  0FAB  0244               	subwf	??_cc_cv_mode+6,w
 10383  0FAC  1D03               	skipz
 10384  0FAD  2FB0               	goto	u3645
 10385  0FAE  0840               	movf	??_cc_cv_mode+2,w
 10386  0FAF  0242               	subwf	??_cc_cv_mode+4,w
 10387  0FB0                     u3645:	
 10388  0FB0  1803               	skipnc
 10389  0FB1  0008               	return
 10390                           
 10391                           ;battery_charger.c: 121: {
 10392                           ;battery_charger.c: 122: batteryState[z]=CHARGE;
 10393  0FB2  3004               	movlw	4
 10394  0FB3  0020               	movlb	0	; select bank0
 10395  0FB4  00BE               	movwf	??_cc_cv_mode
 10396  0FB5  0845               	movf	cc_cv_mode@z,w
 10397  0FB6  3EDF               	addlw	(low (_batteryState| 0))& (0+255)
 10398  0FB7  0086               	movwf	6
 10399  0FB8  0187               	clrf	7
 10400  0FB9  083E               	movf	??_cc_cv_mode,w
 10401  0FBA  0081               	movwf	1
 10402                           
 10403                           ;battery_charger.c: 123: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 10404  0FBB  0021               	movlb	1	; select bank1
 10405  0FBC  096C               	comf	_batteryTemp^(0+128),w
 10406  0FBD  0020               	movlb	0	; select bank0
 10407  0FBE  00BE               	movwf	??_cc_cv_mode
 10408  0FBF  0021               	movlb	1	; select bank1
 10409  0FC0  096D               	comf	(_batteryTemp+1)^(0+128),w
 10410  0FC1  0020               	movlb	0	; select bank0
 10411  0FC2  00BF               	movwf	??_cc_cv_mode+1
 10412  0FC3  0ABE               	incf	??_cc_cv_mode,f
 10413  0FC4  1903               	skipnz
 10414  0FC5  0ABF               	incf	??_cc_cv_mode+1,f
 10415  0FC6  083E               	movf	??_cc_cv_mode,w
 10416  0FC7  3EFA               	addlw	250
 10417  0FC8  00F8               	movwf	___awtoft@c
 10418  0FC9  3000               	movlw	0
 10419  0FCA  3D3F               	addwfc	??_cc_cv_mode+1,w
 10420  0FCB  00F9               	movwf	___awtoft@c+1
 10421  0FCC  3192  2275  318E   	fcall	___awtoft
 10422  0FCF  0878               	movf	?___awtoft,w
 10423  0FD0  0020               	movlb	0	; select bank0
 10424  0FD1  00A3               	movwf	___ftmul@f2
 10425  0FD2  0879               	movf	?___awtoft+1,w
 10426  0FD3  00A4               	movwf	___ftmul@f2+1
 10427  0FD4  087A               	movf	?___awtoft+2,w
 10428  0FD5  00A5               	movwf	___ftmul@f2+2
 10429  0FD6  30C3               	movlw	195
 10430  0FD7  00A0               	movwf	___ftmul@f1
 10431  0FD8  3075               	movlw	117
 10432  0FD9  00A1               	movwf	___ftmul@f1+1
 10433  0FDA  303E               	movlw	62
 10434  0FDB  00A2               	movwf	___ftmul@f1+2
 10435  0FDC  318B  2311  318E   	fcall	___ftmul
 10436  0FDF  0020               	movlb	0	; select bank0
 10437  0FE0  0820               	movf	?___ftmul,w
 10438  0FE1  00B0               	movwf	___fttol@f1
 10439  0FE2  0821               	movf	?___ftmul+1,w
 10440  0FE3  00B1               	movwf	___fttol@f1+1
 10441  0FE4  0822               	movf	?___ftmul+2,w
 10442  0FE5  00B2               	movwf	___fttol@f1+2
 10443  0FE6  3196  26F2         	fcall	___fttol
 10444  0FE8  0020               	movlb	0	; select bank0
 10445  0FE9  0830               	movf	?___fttol,w
 10446  0FEA  3E91               	addlw	145
 10447  0FEB  00C0               	movwf	??_cc_cv_mode+2
 10448  0FEC  3005               	movlw	5
 10449  0FED  3D31               	addwfc	?___fttol+1,w
 10450  0FEE  00C1               	movwf	??_cc_cv_mode+3
 10451  0FEF  3545               	lslf	cc_cv_mode@z,w
 10452  0FF0  3ED1               	addlw	(low (_Vref| 0))& (0+255)
 10453  0FF1  0086               	movwf	6
 10454  0FF2  0187               	clrf	7
 10455  0FF3  0840               	movf	??_cc_cv_mode+2,w
 10456  0FF4  3FC0               	movwi [0]fsr1
 10457  0FF5  0841               	movf	??_cc_cv_mode+3,w
 10458  0FF6  3FC1               	movwi [1]fsr1
 10459                           
 10460                           ;battery_charger.c: 124: Iref[z]=35;
 10461  0FF7  3545               	lslf	cc_cv_mode@z,w
 10462  0FF8  3ECD               	addlw	(low (_Iref| 0))& (0+255)
 10463  0FF9  0086               	movwf	6
 10464  0FFA  0187               	clrf	7
 10465  0FFB  3023               	movlw	35
 10466  0FFC  3FC0               	movwi [0]fsr1
 10467  0FFD  3000               	movlw	0
 10468  0FFE  3FC1               	movwi [1]fsr1
 10469  0FFF  0008               	return
 10470  1000                     __end_of_cc_cv_mode:	
 10471                           
 10472                           	psect	text13
 10473  0009                     __ptext13:	
 10474 ;; *************** function _calculateCurrent3 *****************
 10475 ;; Defined at:
 10476 ;;		line 421 in file "main.c"
 10477 ;; Parameters:    Size  Location     Type
 10478 ;;		None
 10479 ;; Auto vars:     Size  Location     Type
 10480 ;;		None
 10481 ;; Return value:  Size  Location     Type
 10482 ;;                  1    wreg      void 
 10483 ;; Registers used:
 10484 ;;		wreg, status,2, status,0, pclath, cstack
 10485 ;; Tracked objects:
 10486 ;;		On entry : 0/0
 10487 ;;		On exit  : 0/0
 10488 ;;		Unchanged: 0/0
 10489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10492 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10493 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10494 ;;Total ram usage:        3 bytes
 10495 ;; Hardware stack levels used:    1
 10496 ;; Hardware stack levels required when called:    2
 10497 ;; This function calls:
 10498 ;;		___awtoft
 10499 ;;		___ftdiv
 10500 ;;		___fttol
 10501 ;; This function is called by:
 10502 ;;		_main
 10503 ;; This function uses a non-reentrant model
 10504 ;;
 10505                           
 10506                           
 10507                           ;psect for function _calculateCurrent3
 10508  0009                     _calculateCurrent3:	
 10509                           
 10510                           ;main.c: 423: if(Ianalogs[3]-545<=0)
 10511                           
 10512                           ;incstack = 0
 10513                           ; Regs used in _calculateCurrent3: [wreg+status,2+status,0+pclath+cstack]
 10514  0009  0021               	movlb	1	; select bank1
 10515  000A  0826               	movf	(_Ianalogs^(0+128)+6),w
 10516  000B  3EDF               	addlw	223
 10517  000C  0020               	movlb	0	; select bank0
 10518  000D  00BE               	movwf	??_calculateCurrent3
 10519  000E  30FD               	movlw	253
 10520  000F  0021               	movlb	1	; select bank1
 10521  0010  3D27               	addwfc	((_Ianalogs+1)^(0+128)+6),w
 10522  0011  0020               	movlb	0	; select bank0
 10523  0012  00BF               	movwf	??_calculateCurrent3+1
 10524  0013  083F               	movf	??_calculateCurrent3+1,w
 10525  0014  3A80               	xorlw	128
 10526  0015  00C0               	movwf	??_calculateCurrent3+2
 10527  0016  3080               	movlw	128
 10528  0017  0240               	subwf	??_calculateCurrent3+2,w
 10529  0018  1D03               	skipz
 10530  0019  281C               	goto	u3225
 10531  001A  3001               	movlw	1
 10532  001B  023E               	subwf	??_calculateCurrent3,w
 10533  001C                     u3225:	
 10534  001C  1803               	skipnc
 10535  001D  2822               	goto	l2904
 10536                           
 10537                           ;main.c: 424: {
 10538                           ;main.c: 425: current[3]=0;
 10539  001E  0021               	movlb	1	; select bank1
 10540  001F  01B6               	clrf	(_current^(0+128)+6)
 10541  0020  01B7               	clrf	((_current+1)^(0+128)+6)
 10542                           
 10543                           ;main.c: 426: }
 10544  0021  0008               	return
 10545  0022                     l2904:	
 10546                           
 10547                           ;main.c: 427: else
 10548                           ;main.c: 428: {
 10549                           ;main.c: 429: current[3]=(int16_t)((Ianalogs[3]-545)/2.4);
 10550  0022  0021               	movlb	1	; select bank1
 10551  0023  0826               	movf	(_Ianalogs^(0+128)+6),w
 10552  0024  3EDF               	addlw	223
 10553  0025  00F8               	movwf	___awtoft@c
 10554  0026  30FD               	movlw	253
 10555  0027  3D27               	addwfc	((_Ianalogs+1)^(0+128)+6),w
 10556  0028  00F9               	movwf	___awtoft@c+1
 10557  0029  3192  2275  3180   	fcall	___awtoft
 10558  002C  0878               	movf	?___awtoft,w
 10559  002D  0020               	movlb	0	; select bank0
 10560  002E  00A3               	movwf	___ftdiv@f1
 10561  002F  0879               	movf	?___awtoft+1,w
 10562  0030  00A4               	movwf	___ftdiv@f1+1
 10563  0031  087A               	movf	?___awtoft+2,w
 10564  0032  00A5               	movwf	___ftdiv@f1+2
 10565  0033  309A               	movlw	154
 10566  0034  00A0               	movwf	___ftdiv@f2
 10567  0035  3019               	movlw	25
 10568  0036  00A1               	movwf	___ftdiv@f2+1
 10569  0037  3040               	movlw	64
 10570  0038  00A2               	movwf	___ftdiv@f2+2
 10571  0039  3189  21B8  3180   	fcall	___ftdiv
 10572  003C  0020               	movlb	0	; select bank0
 10573  003D  0820               	movf	?___ftdiv,w
 10574  003E  00B0               	movwf	___fttol@f1
 10575  003F  0821               	movf	?___ftdiv+1,w
 10576  0040  00B1               	movwf	___fttol@f1+1
 10577  0041  0822               	movf	?___ftdiv+2,w
 10578  0042  00B2               	movwf	___fttol@f1+2
 10579  0043  3196  26F2         	fcall	___fttol
 10580  0045  0020               	movlb	0	; select bank0
 10581  0046  0831               	movf	?___fttol+1,w
 10582  0047  0021               	movlb	1	; select bank1
 10583  0048  00B7               	movwf	((_current+1)^(0+128)+6)
 10584  0049  0020               	movlb	0	; select bank0
 10585  004A  0830               	movf	?___fttol,w
 10586  004B  0021               	movlb	1	; select bank1
 10587  004C  00B6               	movwf	(_current^(0+128)+6)
 10588  004D  0008               	return
 10589  004E                     __end_of_calculateCurrent3:	
 10590                           
 10591                           	psect	text14
 10592  14BB                     __ptext14:	
 10593 ;; *************** function _calculateCurrent2 *****************
 10594 ;; Defined at:
 10595 ;;		line 408 in file "main.c"
 10596 ;; Parameters:    Size  Location     Type
 10597 ;;		None
 10598 ;; Auto vars:     Size  Location     Type
 10599 ;;		None
 10600 ;; Return value:  Size  Location     Type
 10601 ;;                  1    wreg      void 
 10602 ;; Registers used:
 10603 ;;		wreg, status,2, status,0, pclath, cstack
 10604 ;; Tracked objects:
 10605 ;;		On entry : 0/0
 10606 ;;		On exit  : 0/0
 10607 ;;		Unchanged: 0/0
 10608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10611 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10612 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10613 ;;Total ram usage:        3 bytes
 10614 ;; Hardware stack levels used:    1
 10615 ;; Hardware stack levels required when called:    2
 10616 ;; This function calls:
 10617 ;;		___awtoft
 10618 ;;		___ftdiv
 10619 ;;		___fttol
 10620 ;; This function is called by:
 10621 ;;		_main
 10622 ;; This function uses a non-reentrant model
 10623 ;;
 10624                           
 10625                           
 10626                           ;psect for function _calculateCurrent2
 10627  14BB                     _calculateCurrent2:	
 10628                           
 10629                           ;main.c: 410: if(Ianalogs[2]-535<=0)
 10630                           
 10631                           ;incstack = 0
 10632                           ; Regs used in _calculateCurrent2: [wreg+status,2+status,0+pclath+cstack]
 10633  14BB  0021               	movlb	1	; select bank1
 10634  14BC  0824               	movf	(_Ianalogs^(0+128)+4),w
 10635  14BD  3EE9               	addlw	233
 10636  14BE  0020               	movlb	0	; select bank0
 10637  14BF  00BE               	movwf	??_calculateCurrent2
 10638  14C0  30FD               	movlw	253
 10639  14C1  0021               	movlb	1	; select bank1
 10640  14C2  3D25               	addwfc	((_Ianalogs+1)^(0+128)+4),w
 10641  14C3  0020               	movlb	0	; select bank0
 10642  14C4  00BF               	movwf	??_calculateCurrent2+1
 10643  14C5  083F               	movf	??_calculateCurrent2+1,w
 10644  14C6  3A80               	xorlw	128
 10645  14C7  00C0               	movwf	??_calculateCurrent2+2
 10646  14C8  3080               	movlw	128
 10647  14C9  0240               	subwf	??_calculateCurrent2+2,w
 10648  14CA  1D03               	skipz
 10649  14CB  2CCE               	goto	u3215
 10650  14CC  3001               	movlw	1
 10651  14CD  023E               	subwf	??_calculateCurrent2,w
 10652  14CE                     u3215:	
 10653  14CE  1803               	skipnc
 10654  14CF  2CD4               	goto	l2898
 10655                           
 10656                           ;main.c: 411: {
 10657                           ;main.c: 412: current[2]=0;
 10658  14D0  0021               	movlb	1	; select bank1
 10659  14D1  01B4               	clrf	(_current^(0+128)+4)
 10660  14D2  01B5               	clrf	((_current+1)^(0+128)+4)
 10661                           
 10662                           ;main.c: 413: }
 10663  14D3  0008               	return
 10664  14D4                     l2898:	
 10665                           
 10666                           ;main.c: 414: else
 10667                           ;main.c: 415: {
 10668                           ;main.c: 417: current[2]=(int16_t)((Ianalogs[2]-535)/2.82);
 10669  14D4  0021               	movlb	1	; select bank1
 10670  14D5  0824               	movf	(_Ianalogs^(0+128)+4),w
 10671  14D6  3EE9               	addlw	233
 10672  14D7  00F8               	movwf	___awtoft@c
 10673  14D8  30FD               	movlw	253
 10674  14D9  3D25               	addwfc	((_Ianalogs+1)^(0+128)+4),w
 10675  14DA  00F9               	movwf	___awtoft@c+1
 10676  14DB  3192  2275  3194   	fcall	___awtoft
 10677  14DE  0878               	movf	?___awtoft,w
 10678  14DF  0020               	movlb	0	; select bank0
 10679  14E0  00A3               	movwf	___ftdiv@f1
 10680  14E1  0879               	movf	?___awtoft+1,w
 10681  14E2  00A4               	movwf	___ftdiv@f1+1
 10682  14E3  087A               	movf	?___awtoft+2,w
 10683  14E4  00A5               	movwf	___ftdiv@f1+2
 10684  14E5  307B               	movlw	123
 10685  14E6  00A0               	movwf	___ftdiv@f2
 10686  14E7  3034               	movlw	52
 10687  14E8  00A1               	movwf	___ftdiv@f2+1
 10688  14E9  3040               	movlw	64
 10689  14EA  00A2               	movwf	___ftdiv@f2+2
 10690  14EB  3189  21B8  3194   	fcall	___ftdiv
 10691  14EE  0020               	movlb	0	; select bank0
 10692  14EF  0820               	movf	?___ftdiv,w
 10693  14F0  00B0               	movwf	___fttol@f1
 10694  14F1  0821               	movf	?___ftdiv+1,w
 10695  14F2  00B1               	movwf	___fttol@f1+1
 10696  14F3  0822               	movf	?___ftdiv+2,w
 10697  14F4  00B2               	movwf	___fttol@f1+2
 10698  14F5  3196  26F2         	fcall	___fttol
 10699  14F7  0020               	movlb	0	; select bank0
 10700  14F8  0831               	movf	?___fttol+1,w
 10701  14F9  0021               	movlb	1	; select bank1
 10702  14FA  00B5               	movwf	((_current+1)^(0+128)+4)
 10703  14FB  0020               	movlb	0	; select bank0
 10704  14FC  0830               	movf	?___fttol,w
 10705  14FD  0021               	movlb	1	; select bank1
 10706  14FE  00B4               	movwf	(_current^(0+128)+4)
 10707  14FF  0008               	return
 10708  1500                     __end_of_calculateCurrent2:	
 10709                           
 10710                           	psect	text15
 10711  1476                     __ptext15:	
 10712 ;; *************** function _calculateCurrent1 *****************
 10713 ;; Defined at:
 10714 ;;		line 395 in file "main.c"
 10715 ;; Parameters:    Size  Location     Type
 10716 ;;		None
 10717 ;; Auto vars:     Size  Location     Type
 10718 ;;		None
 10719 ;; Return value:  Size  Location     Type
 10720 ;;                  1    wreg      void 
 10721 ;; Registers used:
 10722 ;;		wreg, status,2, status,0, pclath, cstack
 10723 ;; Tracked objects:
 10724 ;;		On entry : 0/0
 10725 ;;		On exit  : 0/0
 10726 ;;		Unchanged: 0/0
 10727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10730 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10731 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10732 ;;Total ram usage:        3 bytes
 10733 ;; Hardware stack levels used:    1
 10734 ;; Hardware stack levels required when called:    2
 10735 ;; This function calls:
 10736 ;;		___awtoft
 10737 ;;		___ftdiv
 10738 ;;		___fttol
 10739 ;; This function is called by:
 10740 ;;		_main
 10741 ;; This function uses a non-reentrant model
 10742 ;;
 10743                           
 10744                           
 10745                           ;psect for function _calculateCurrent1
 10746  1476                     _calculateCurrent1:	
 10747                           
 10748                           ;main.c: 397: if(Ianalogs[1]-545<=0)
 10749                           
 10750                           ;incstack = 0
 10751                           ; Regs used in _calculateCurrent1: [wreg+status,2+status,0+pclath+cstack]
 10752  1476  0021               	movlb	1	; select bank1
 10753  1477  0822               	movf	(_Ianalogs^(0+128)+2),w
 10754  1478  3EDF               	addlw	223
 10755  1479  0020               	movlb	0	; select bank0
 10756  147A  00BE               	movwf	??_calculateCurrent1
 10757  147B  30FD               	movlw	253
 10758  147C  0021               	movlb	1	; select bank1
 10759  147D  3D23               	addwfc	((_Ianalogs+1)^(0+128)+2),w
 10760  147E  0020               	movlb	0	; select bank0
 10761  147F  00BF               	movwf	??_calculateCurrent1+1
 10762  1480  083F               	movf	??_calculateCurrent1+1,w
 10763  1481  3A80               	xorlw	128
 10764  1482  00C0               	movwf	??_calculateCurrent1+2
 10765  1483  3080               	movlw	128
 10766  1484  0240               	subwf	??_calculateCurrent1+2,w
 10767  1485  1D03               	skipz
 10768  1486  2C89               	goto	u3205
 10769  1487  3001               	movlw	1
 10770  1488  023E               	subwf	??_calculateCurrent1,w
 10771  1489                     u3205:	
 10772  1489  1803               	skipnc
 10773  148A  2C8F               	goto	l2892
 10774                           
 10775                           ;main.c: 398: {
 10776                           ;main.c: 399: current[1]=0;
 10777  148B  0021               	movlb	1	; select bank1
 10778  148C  01B2               	clrf	(_current^(0+128)+2)
 10779  148D  01B3               	clrf	((_current+1)^(0+128)+2)
 10780                           
 10781                           ;main.c: 400: }
 10782  148E  0008               	return
 10783  148F                     l2892:	
 10784                           
 10785                           ;main.c: 401: else
 10786                           ;main.c: 402: {
 10787                           ;main.c: 404: current[1]=(int16_t)((Ianalogs[1]-545)/1.2);
 10788  148F  0021               	movlb	1	; select bank1
 10789  1490  0822               	movf	(_Ianalogs^(0+128)+2),w
 10790  1491  3EDF               	addlw	223
 10791  1492  00F8               	movwf	___awtoft@c
 10792  1493  30FD               	movlw	253
 10793  1494  3D23               	addwfc	((_Ianalogs+1)^(0+128)+2),w
 10794  1495  00F9               	movwf	___awtoft@c+1
 10795  1496  3192  2275  3194   	fcall	___awtoft
 10796  1499  0878               	movf	?___awtoft,w
 10797  149A  0020               	movlb	0	; select bank0
 10798  149B  00A3               	movwf	___ftdiv@f1
 10799  149C  0879               	movf	?___awtoft+1,w
 10800  149D  00A4               	movwf	___ftdiv@f1+1
 10801  149E  087A               	movf	?___awtoft+2,w
 10802  149F  00A5               	movwf	___ftdiv@f1+2
 10803  14A0  309A               	movlw	154
 10804  14A1  00A0               	movwf	___ftdiv@f2
 10805  14A2  3099               	movlw	153
 10806  14A3  00A1               	movwf	___ftdiv@f2+1
 10807  14A4  303F               	movlw	63
 10808  14A5  00A2               	movwf	___ftdiv@f2+2
 10809  14A6  3189  21B8  3194   	fcall	___ftdiv
 10810  14A9  0020               	movlb	0	; select bank0
 10811  14AA  0820               	movf	?___ftdiv,w
 10812  14AB  00B0               	movwf	___fttol@f1
 10813  14AC  0821               	movf	?___ftdiv+1,w
 10814  14AD  00B1               	movwf	___fttol@f1+1
 10815  14AE  0822               	movf	?___ftdiv+2,w
 10816  14AF  00B2               	movwf	___fttol@f1+2
 10817  14B0  3196  26F2         	fcall	___fttol
 10818  14B2  0020               	movlb	0	; select bank0
 10819  14B3  0831               	movf	?___fttol+1,w
 10820  14B4  0021               	movlb	1	; select bank1
 10821  14B5  00B3               	movwf	((_current+1)^(0+128)+2)
 10822  14B6  0020               	movlb	0	; select bank0
 10823  14B7  0830               	movf	?___fttol,w
 10824  14B8  0021               	movlb	1	; select bank1
 10825  14B9  00B2               	movwf	(_current^(0+128)+2)
 10826  14BA  0008               	return
 10827  14BB                     __end_of_calculateCurrent1:	
 10828                           
 10829                           	psect	text16
 10830  1431                     __ptext16:	
 10831 ;; *************** function _calculateCurrent0 *****************
 10832 ;; Defined at:
 10833 ;;		line 382 in file "main.c"
 10834 ;; Parameters:    Size  Location     Type
 10835 ;;		None
 10836 ;; Auto vars:     Size  Location     Type
 10837 ;;		None
 10838 ;; Return value:  Size  Location     Type
 10839 ;;                  1    wreg      void 
 10840 ;; Registers used:
 10841 ;;		wreg, status,2, status,0, pclath, cstack
 10842 ;; Tracked objects:
 10843 ;;		On entry : 0/0
 10844 ;;		On exit  : 0/0
 10845 ;;		Unchanged: 0/0
 10846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10849 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10850 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10851 ;;Total ram usage:        3 bytes
 10852 ;; Hardware stack levels used:    1
 10853 ;; Hardware stack levels required when called:    2
 10854 ;; This function calls:
 10855 ;;		___awtoft
 10856 ;;		___ftdiv
 10857 ;;		___fttol
 10858 ;; This function is called by:
 10859 ;;		_main
 10860 ;; This function uses a non-reentrant model
 10861 ;;
 10862                           
 10863                           
 10864                           ;psect for function _calculateCurrent0
 10865  1431                     _calculateCurrent0:	
 10866                           
 10867                           ;main.c: 384: if(Ianalogs[0]-545<=0)
 10868                           
 10869                           ;incstack = 0
 10870                           ; Regs used in _calculateCurrent0: [wreg+status,2+status,0+pclath+cstack]
 10871  1431  0021               	movlb	1	; select bank1
 10872  1432  0820               	movf	_Ianalogs^(0+128),w
 10873  1433  3EDF               	addlw	223
 10874  1434  0020               	movlb	0	; select bank0
 10875  1435  00BE               	movwf	??_calculateCurrent0
 10876  1436  30FD               	movlw	253
 10877  1437  0021               	movlb	1	; select bank1
 10878  1438  3D21               	addwfc	(_Ianalogs+1)^(0+128),w
 10879  1439  0020               	movlb	0	; select bank0
 10880  143A  00BF               	movwf	??_calculateCurrent0+1
 10881  143B  083F               	movf	??_calculateCurrent0+1,w
 10882  143C  3A80               	xorlw	128
 10883  143D  00C0               	movwf	??_calculateCurrent0+2
 10884  143E  3080               	movlw	128
 10885  143F  0240               	subwf	??_calculateCurrent0+2,w
 10886  1440  1D03               	skipz
 10887  1441  2C44               	goto	u3195
 10888  1442  3001               	movlw	1
 10889  1443  023E               	subwf	??_calculateCurrent0,w
 10890  1444                     u3195:	
 10891  1444  1803               	skipnc
 10892  1445  2C4A               	goto	l2886
 10893                           
 10894                           ;main.c: 385: {
 10895                           ;main.c: 386: current[0]=0;
 10896  1446  0021               	movlb	1	; select bank1
 10897  1447  01B0               	clrf	_current^(0+128)
 10898  1448  01B1               	clrf	(_current+1)^(0+128)
 10899                           
 10900                           ;main.c: 387: }
 10901  1449  0008               	return
 10902  144A                     l2886:	
 10903                           
 10904                           ;main.c: 388: else
 10905                           ;main.c: 389: {
 10906                           ;main.c: 390: current[0]=(int16_t)((Ianalogs[0]-545)/2.92);
 10907  144A  0021               	movlb	1	; select bank1
 10908  144B  0820               	movf	_Ianalogs^(0+128),w
 10909  144C  3EDF               	addlw	223
 10910  144D  00F8               	movwf	___awtoft@c
 10911  144E  30FD               	movlw	253
 10912  144F  3D21               	addwfc	(_Ianalogs+1)^(0+128),w
 10913  1450  00F9               	movwf	___awtoft@c+1
 10914  1451  3192  2275  3194   	fcall	___awtoft
 10915  1454  0878               	movf	?___awtoft,w
 10916  1455  0020               	movlb	0	; select bank0
 10917  1456  00A3               	movwf	___ftdiv@f1
 10918  1457  0879               	movf	?___awtoft+1,w
 10919  1458  00A4               	movwf	___ftdiv@f1+1
 10920  1459  087A               	movf	?___awtoft+2,w
 10921  145A  00A5               	movwf	___ftdiv@f1+2
 10922  145B  30E1               	movlw	225
 10923  145C  00A0               	movwf	___ftdiv@f2
 10924  145D  303A               	movlw	58
 10925  145E  00A1               	movwf	___ftdiv@f2+1
 10926  145F  3040               	movlw	64
 10927  1460  00A2               	movwf	___ftdiv@f2+2
 10928  1461  3189  21B8  3194   	fcall	___ftdiv
 10929  1464  0020               	movlb	0	; select bank0
 10930  1465  0820               	movf	?___ftdiv,w
 10931  1466  00B0               	movwf	___fttol@f1
 10932  1467  0821               	movf	?___ftdiv+1,w
 10933  1468  00B1               	movwf	___fttol@f1+1
 10934  1469  0822               	movf	?___ftdiv+2,w
 10935  146A  00B2               	movwf	___fttol@f1+2
 10936  146B  3196  26F2         	fcall	___fttol
 10937  146D  0020               	movlb	0	; select bank0
 10938  146E  0831               	movf	?___fttol+1,w
 10939  146F  0021               	movlb	1	; select bank1
 10940  1470  00B1               	movwf	(_current+1)^(0+128)
 10941  1471  0020               	movlb	0	; select bank0
 10942  1472  0830               	movf	?___fttol,w
 10943  1473  0021               	movlb	1	; select bank1
 10944  1474  00B0               	movwf	_current^(0+128)
 10945  1475  0008               	return
 10946  1476                     __end_of_calculateCurrent0:	
 10947                           
 10948                           	psect	text17
 10949  09B8                     __ptext17:	
 10950 ;; *************** function ___ftdiv *****************
 10951 ;; Defined at:
 10952 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
 10953 ;; Parameters:    Size  Location     Type
 10954 ;;  f2              3    0[BANK0 ] float 
 10955 ;;  f1              3    3[BANK0 ] float 
 10956 ;; Auto vars:     Size  Location     Type
 10957 ;;  f3              3   11[BANK0 ] float 
 10958 ;;  sign            1   15[BANK0 ] unsigned char 
 10959 ;;  exp             1   14[BANK0 ] unsigned char 
 10960 ;;  cntr            1   10[BANK0 ] unsigned char 
 10961 ;; Return value:  Size  Location     Type
 10962 ;;                  3    0[BANK0 ] float 
 10963 ;; Registers used:
 10964 ;;		wreg, status,2, status,0, pclath, cstack
 10965 ;; Tracked objects:
 10966 ;;		On entry : 0/0
 10967 ;;		On exit  : 0/0
 10968 ;;		Unchanged: 0/0
 10969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10970 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10971 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10972 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10973 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10974 ;;Total ram usage:       16 bytes
 10975 ;; Hardware stack levels used:    1
 10976 ;; Hardware stack levels required when called:    1
 10977 ;; This function calls:
 10978 ;;		___ftpack
 10979 ;; This function is called by:
 10980 ;;		_main
 10981 ;;		_calculateCurrent0
 10982 ;;		_calculateCurrent1
 10983 ;;		_calculateCurrent2
 10984 ;;		_calculateCurrent3
 10985 ;;		_tempCalc
 10986 ;; This function uses a non-reentrant model
 10987 ;;
 10988                           
 10989                           
 10990                           ;psect for function ___ftdiv
 10991  09B8                     ___ftdiv:	
 10992                           
 10993                           ;incstack = 0
 10994                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 10995  09B8  0020               	movlb	0	; select bank0
 10996  09B9  0823               	movf	___ftdiv@f1,w
 10997  09BA  00A6               	movwf	??___ftdiv
 10998  09BB  0824               	movf	___ftdiv@f1+1,w
 10999  09BC  00A7               	movwf	??___ftdiv+1
 11000  09BD  0825               	movf	___ftdiv@f1+2,w
 11001  09BE  00A8               	movwf	??___ftdiv+2
 11002  09BF  1003               	clrc
 11003  09C0  0D27               	rlf	??___ftdiv+1,w
 11004  09C1  0D28               	rlf	??___ftdiv+2,w
 11005  09C2  00A9               	movwf	??___ftdiv+3
 11006  09C3  0829               	movf	??___ftdiv+3,w
 11007  09C4  00AE               	movwf	___ftdiv@exp
 11008  09C5  082E               	movf	___ftdiv@exp,w
 11009  09C6  1D03               	btfss	3,2
 11010  09C7  29CF               	goto	l2786
 11011  09C8  3000               	movlw	0
 11012  09C9  00A0               	movwf	?___ftdiv
 11013  09CA  3000               	movlw	0
 11014  09CB  00A1               	movwf	?___ftdiv+1
 11015  09CC  3000               	movlw	0
 11016  09CD  00A2               	movwf	?___ftdiv+2
 11017  09CE  0008               	return
 11018  09CF                     l2786:	
 11019  09CF  0820               	movf	___ftdiv@f2,w
 11020  09D0  00A6               	movwf	??___ftdiv
 11021  09D1  0821               	movf	___ftdiv@f2+1,w
 11022  09D2  00A7               	movwf	??___ftdiv+1
 11023  09D3  0822               	movf	___ftdiv@f2+2,w
 11024  09D4  00A8               	movwf	??___ftdiv+2
 11025  09D5  1003               	clrc
 11026  09D6  0D27               	rlf	??___ftdiv+1,w
 11027  09D7  0D28               	rlf	??___ftdiv+2,w
 11028  09D8  00A9               	movwf	??___ftdiv+3
 11029  09D9  0829               	movf	??___ftdiv+3,w
 11030  09DA  00AF               	movwf	___ftdiv@sign
 11031  09DB  082F               	movf	___ftdiv@sign,w
 11032  09DC  1D03               	btfss	3,2
 11033  09DD  29E5               	goto	l2792
 11034  09DE  3000               	movlw	0
 11035  09DF  00A0               	movwf	?___ftdiv
 11036  09E0  3000               	movlw	0
 11037  09E1  00A1               	movwf	?___ftdiv+1
 11038  09E2  3000               	movlw	0
 11039  09E3  00A2               	movwf	?___ftdiv+2
 11040  09E4  0008               	return
 11041  09E5                     l2792:	
 11042  09E5  3000               	movlw	0
 11043  09E6  00AB               	movwf	___ftdiv@f3
 11044  09E7  3000               	movlw	0
 11045  09E8  00AC               	movwf	___ftdiv@f3+1
 11046  09E9  3000               	movlw	0
 11047  09EA  00AD               	movwf	___ftdiv@f3+2
 11048  09EB  3089               	movlw	137
 11049  09EC  072F               	addwf	___ftdiv@sign,w
 11050  09ED  00A6               	movwf	??___ftdiv
 11051  09EE  0826               	movf	??___ftdiv,w
 11052  09EF  02AE               	subwf	___ftdiv@exp,f
 11053  09F0  0823               	movf	___ftdiv@f1,w
 11054  09F1  00A6               	movwf	??___ftdiv
 11055  09F2  0824               	movf	___ftdiv@f1+1,w
 11056  09F3  00A7               	movwf	??___ftdiv+1
 11057  09F4  0825               	movf	___ftdiv@f1+2,w
 11058  09F5  00A8               	movwf	??___ftdiv+2
 11059  09F6  3010               	movlw	16
 11060  09F7                     u2995:	
 11061  09F7  36A8               	lsrf	??___ftdiv+2,f
 11062  09F8  0CA7               	rrf	??___ftdiv+1,f
 11063  09F9  0CA6               	rrf	??___ftdiv,f
 11064  09FA  0B89               	decfsz	9,f
 11065  09FB  29F7               	goto	u2995
 11066  09FC  0826               	movf	??___ftdiv,w
 11067  09FD  00A9               	movwf	??___ftdiv+3
 11068  09FE  0829               	movf	??___ftdiv+3,w
 11069  09FF  00AF               	movwf	___ftdiv@sign
 11070  0A00  0820               	movf	___ftdiv@f2,w
 11071  0A01  00A6               	movwf	??___ftdiv
 11072  0A02  0821               	movf	___ftdiv@f2+1,w
 11073  0A03  00A7               	movwf	??___ftdiv+1
 11074  0A04  0822               	movf	___ftdiv@f2+2,w
 11075  0A05  00A8               	movwf	??___ftdiv+2
 11076  0A06  3010               	movlw	16
 11077  0A07                     u3005:	
 11078  0A07  36A8               	lsrf	??___ftdiv+2,f
 11079  0A08  0CA7               	rrf	??___ftdiv+1,f
 11080  0A09  0CA6               	rrf	??___ftdiv,f
 11081  0A0A  0B89               	decfsz	9,f
 11082  0A0B  2A07               	goto	u3005
 11083  0A0C  0826               	movf	??___ftdiv,w
 11084  0A0D  00A9               	movwf	??___ftdiv+3
 11085  0A0E  0829               	movf	??___ftdiv+3,w
 11086  0A0F  06AF               	xorwf	___ftdiv@sign,f
 11087  0A10  3080               	movlw	128
 11088  0A11  00A6               	movwf	??___ftdiv
 11089  0A12  0826               	movf	??___ftdiv,w
 11090  0A13  05AF               	andwf	___ftdiv@sign,f
 11091  0A14  17A4               	bsf	___ftdiv@f1+1,7
 11092  0A15  30FF               	movlw	255
 11093  0A16  05A3               	andwf	___ftdiv@f1,f
 11094  0A17  30FF               	movlw	255
 11095  0A18  05A4               	andwf	___ftdiv@f1+1,f
 11096  0A19  3000               	movlw	0
 11097  0A1A  05A5               	andwf	___ftdiv@f1+2,f
 11098  0A1B  17A1               	bsf	___ftdiv@f2+1,7
 11099  0A1C  30FF               	movlw	255
 11100  0A1D  05A0               	andwf	___ftdiv@f2,f
 11101  0A1E  30FF               	movlw	255
 11102  0A1F  05A1               	andwf	___ftdiv@f2+1,f
 11103  0A20  3000               	movlw	0
 11104  0A21  05A2               	andwf	___ftdiv@f2+2,f
 11105  0A22  3018               	movlw	24
 11106  0A23  00A6               	movwf	??___ftdiv
 11107  0A24  0826               	movf	??___ftdiv,w
 11108  0A25  00AA               	movwf	___ftdiv@cntr
 11109  0A26                     l2806:	
 11110  0A26  3001               	movlw	1
 11111  0A27                     u3015:	
 11112  0A27  35AB               	lslf	___ftdiv@f3,f
 11113  0A28  0DAC               	rlf	___ftdiv@f3+1,f
 11114  0A29  0DAD               	rlf	___ftdiv@f3+2,f
 11115  0A2A  0B89               	decfsz	9,f
 11116  0A2B  2A27               	goto	u3015
 11117  0A2C  0822               	movf	___ftdiv@f2+2,w
 11118  0A2D  0225               	subwf	___ftdiv@f1+2,w
 11119  0A2E  1D03               	skipz
 11120  0A2F  2A36               	goto	u3025
 11121  0A30  0821               	movf	___ftdiv@f2+1,w
 11122  0A31  0224               	subwf	___ftdiv@f1+1,w
 11123  0A32  1D03               	skipz
 11124  0A33  2A36               	goto	u3025
 11125  0A34  0820               	movf	___ftdiv@f2,w
 11126  0A35  0223               	subwf	___ftdiv@f1,w
 11127  0A36                     u3025:	
 11128  0A36  1C03               	skipc
 11129  0A37  2A3F               	goto	l2814
 11130  0A38  0820               	movf	___ftdiv@f2,w
 11131  0A39  02A3               	subwf	___ftdiv@f1,f
 11132  0A3A  0821               	movf	___ftdiv@f2+1,w
 11133  0A3B  3BA4               	subwfb	___ftdiv@f1+1,f
 11134  0A3C  0822               	movf	___ftdiv@f2+2,w
 11135  0A3D  3BA5               	subwfb	___ftdiv@f1+2,f
 11136  0A3E  142B               	bsf	___ftdiv@f3,0
 11137  0A3F                     l2814:	
 11138  0A3F  3001               	movlw	1
 11139  0A40                     u3035:	
 11140  0A40  35A3               	lslf	___ftdiv@f1,f
 11141  0A41  0DA4               	rlf	___ftdiv@f1+1,f
 11142  0A42  0DA5               	rlf	___ftdiv@f1+2,f
 11143  0A43  0B89               	decfsz	9,f
 11144  0A44  2A40               	goto	u3035
 11145  0A45  3001               	movlw	1
 11146  0A46  02AA               	subwf	___ftdiv@cntr,f
 11147  0A47  1D03               	btfss	3,2
 11148  0A48  2A26               	goto	l2806
 11149  0A49  082B               	movf	___ftdiv@f3,w
 11150  0A4A  00F0               	movwf	___ftpack@arg
 11151  0A4B  082C               	movf	___ftdiv@f3+1,w
 11152  0A4C  00F1               	movwf	___ftpack@arg+1
 11153  0A4D  082D               	movf	___ftdiv@f3+2,w
 11154  0A4E  00F2               	movwf	___ftpack@arg+2
 11155  0A4F  082E               	movf	___ftdiv@exp,w
 11156  0A50  00A6               	movwf	??___ftdiv
 11157  0A51  0826               	movf	??___ftdiv,w
 11158  0A52  00F3               	movwf	___ftpack@exp
 11159  0A53  082F               	movf	___ftdiv@sign,w
 11160  0A54  00A7               	movwf	??___ftdiv+1
 11161  0A55  0827               	movf	??___ftdiv+1,w
 11162  0A56  00F4               	movwf	___ftpack@sign
 11163  0A57  3195  25A5         	fcall	___ftpack
 11164  0A59  0870               	movf	?___ftpack,w
 11165  0A5A  0020               	movlb	0	; select bank0
 11166  0A5B  00A0               	movwf	?___ftdiv
 11167  0A5C  0871               	movf	?___ftpack+1,w
 11168  0A5D  00A1               	movwf	?___ftdiv+1
 11169  0A5E  0872               	movf	?___ftpack+2,w
 11170  0A5F  00A2               	movwf	?___ftdiv+2
 11171  0A60  0008               	return
 11172  0A61                     __end_of___ftdiv:	
 11173                           
 11174                           	psect	text18
 11175  13F4                     __ptext18:	
 11176 ;; *************** function _SYSTEM_Initialize *****************
 11177 ;; Defined at:
 11178 ;;		line 71 in file "system.c"
 11179 ;; Parameters:    Size  Location     Type
 11180 ;;		None
 11181 ;; Auto vars:     Size  Location     Type
 11182 ;;		None
 11183 ;; Return value:  Size  Location     Type
 11184 ;;                  1    wreg      void 
 11185 ;; Registers used:
 11186 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11187 ;; Tracked objects:
 11188 ;;		On entry : 0/0
 11189 ;;		On exit  : 0/0
 11190 ;;		Unchanged: 0/0
 11191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11194 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11195 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11196 ;;Total ram usage:        3 bytes
 11197 ;; Hardware stack levels used:    1
 11198 ;; Hardware stack levels required when called:    3
 11199 ;; This function calls:
 11200 ;;		_ADC_Initialize
 11201 ;;		_Init_Battery_State_Machine
 11202 ;;		_LCDClear
 11203 ;;		_LCDInit
 11204 ;;		_OSCILLATOR_Initialize
 11205 ;;		_PIN_MANAGER_Initialize
 11206 ;;		_PWM_Initialize
 11207 ;;		_TMR2_Initialize
 11208 ;;		_TMR4_Initialize
 11209 ;; This function is called by:
 11210 ;;		_main
 11211 ;; This function uses a non-reentrant model
 11212 ;;
 11213                           
 11214                           
 11215                           ;psect for function _SYSTEM_Initialize
 11216  13F4                     _SYSTEM_Initialize:	
 11217                           
 11218                           ;system.c: 73: PIN_MANAGER_Initialize();
 11219                           
 11220                           ;incstack = 0
 11221                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11222  13F4  3193  230C  3193   	fcall	_PIN_MANAGER_Initialize
 11223                           
 11224                           ;system.c: 74: OSCILLATOR_Initialize();
 11225  13F7  3191  216F  3193   	fcall	_OSCILLATOR_Initialize
 11226                           
 11227                           ;system.c: 76: ADC_Initialize();
 11228  13FA  3192  2256  3193   	fcall	_ADC_Initialize
 11229                           
 11230                           ;system.c: 77: PWM_Initialize();
 11231  13FD  3191  21C7  3193   	fcall	_PWM_Initialize
 11232                           
 11233                           ;system.c: 79: TMR2_Initialize();
 11234  1400  3191  2184  3193   	fcall	_TMR2_Initialize
 11235                           
 11236                           ;system.c: 80: TMR4_Initialize();
 11237  1403  3191  2192  3193   	fcall	_TMR4_Initialize
 11238                           
 11239                           ;system.c: 81: Init_Battery_State_Machine(0);
 11240  1406  3000               	movlw	0
 11241  1407  3196  2609  3193   	fcall	_Init_Battery_State_Machine
 11242                           
 11243                           ;system.c: 82: Init_Battery_State_Machine(1);
 11244  140A  3001               	movlw	1
 11245  140B  3196  2609  3193   	fcall	_Init_Battery_State_Machine
 11246                           
 11247                           ;system.c: 83: LCDInit();
 11248  140E  3193  2343  3193   	fcall	_LCDInit
 11249                           
 11250                           ;system.c: 84: _delay((unsigned long)((200)*(32000000/4000.0)));
 11251  1411  3009               	movlw	9
 11252  1412  0020               	movlb	0	; select bank0
 11253  1413  00C5               	movwf	??_SYSTEM_Initialize+2
 11254  1414  301E               	movlw	30
 11255  1415  00C4               	movwf	??_SYSTEM_Initialize+1
 11256  1416  30EB               	movlw	235
 11257  1417  00C3               	movwf	??_SYSTEM_Initialize
 11258  1418                     u3977:	
 11259  1418  0BC3               	decfsz	??_SYSTEM_Initialize,f
 11260  1419  2C18               	goto	u3977
 11261  141A  0BC4               	decfsz	??_SYSTEM_Initialize+1,f
 11262  141B  2C18               	goto	u3977
 11263  141C  0BC5               	decfsz	??_SYSTEM_Initialize+2,f
 11264  141D  2C18               	goto	u3977
 11265  141E  0000               	nop
 11266                           
 11267                           ;system.c: 85: LCDClear();
 11268  141F  3192  22BA  3193   	fcall	_LCDClear
 11269                           
 11270                           ;system.c: 86: _delay((unsigned long)((200)*(32000000/4000.0)));
 11271  1422  3009               	movlw	9
 11272  1423  0020               	movlb	0	; select bank0
 11273  1424  00C5               	movwf	??_SYSTEM_Initialize+2
 11274  1425  301E               	movlw	30
 11275  1426  00C4               	movwf	??_SYSTEM_Initialize+1
 11276  1427  30EB               	movlw	235
 11277  1428  00C3               	movwf	??_SYSTEM_Initialize
 11278  1429                     u3987:	
 11279  1429  0BC3               	decfsz	??_SYSTEM_Initialize,f
 11280  142A  2C29               	goto	u3987
 11281  142B  0BC4               	decfsz	??_SYSTEM_Initialize+1,f
 11282  142C  2C29               	goto	u3987
 11283  142D  0BC5               	decfsz	??_SYSTEM_Initialize+2,f
 11284  142E  2C29               	goto	u3987
 11285  142F  0000               	nop
 11286  1430  0008               	return
 11287  1431                     __end_of_SYSTEM_Initialize:	
 11288                           
 11289                           	psect	text19
 11290  1192                     __ptext19:	
 11291 ;; *************** function _TMR4_Initialize *****************
 11292 ;; Defined at:
 11293 ;;		line 25 in file "tmr.c"
 11294 ;; Parameters:    Size  Location     Type
 11295 ;;		None
 11296 ;; Auto vars:     Size  Location     Type
 11297 ;;		None
 11298 ;; Return value:  Size  Location     Type
 11299 ;;                  1    wreg      void 
 11300 ;; Registers used:
 11301 ;;		wreg, status,2
 11302 ;; Tracked objects:
 11303 ;;		On entry : 0/0
 11304 ;;		On exit  : 0/0
 11305 ;;		Unchanged: 0/0
 11306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11311 ;;Total ram usage:        0 bytes
 11312 ;; Hardware stack levels used:    1
 11313 ;; This function calls:
 11314 ;;		Nothing
 11315 ;; This function is called by:
 11316 ;;		_SYSTEM_Initialize
 11317 ;; This function uses a non-reentrant model
 11318 ;;
 11319                           
 11320                           
 11321                           ;psect for function _TMR4_Initialize
 11322  1192                     _TMR4_Initialize:	
 11323                           
 11324                           ;tmr.c: 27: T4CON = 0x00;
 11325                           
 11326                           ;incstack = 0
 11327                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
 11328  1192  0025               	movlb	5	; select bank5
 11329  1193  0194               	clrf	20	;volatile
 11330                           
 11331                           ;tmr.c: 29: T4CLKCON = 0x01;
 11332  1194  3001               	movlw	1
 11333  1195  0096               	movwf	22	;volatile
 11334                           
 11335                           ;tmr.c: 31: T4HLT = 0x00;
 11336  1196  0195               	clrf	21	;volatile
 11337                           
 11338                           ;tmr.c: 33: T4RST = 0x00;
 11339  1197  0197               	clrf	23	;volatile
 11340                           
 11341                           ;tmr.c: 35: T4PR = 0xFE;
 11342  1198  30FE               	movlw	254
 11343  1199  0093               	movwf	19	;volatile
 11344                           
 11345                           ;tmr.c: 39: T4TMR = 0x00;
 11346  119A  0192               	clrf	18	;volatile
 11347                           
 11348                           ;tmr.c: 41: PIR4bits.TMR4IF = 0;
 11349  119B  002E               	movlb	14	; select bank14
 11350  119C  1190               	bcf	16,3	;volatile
 11351                           
 11352                           ;tmr.c: 43: T4CONbits.TMR4ON = 1;
 11353  119D  0025               	movlb	5	; select bank5
 11354  119E  1794               	bsf	20,7	;volatile
 11355  119F  0008               	return
 11356  11A0                     __end_of_TMR4_Initialize:	
 11357                           
 11358                           	psect	text20
 11359  1184                     __ptext20:	
 11360 ;; *************** function _TMR2_Initialize *****************
 11361 ;; Defined at:
 11362 ;;		line 3 in file "tmr.c"
 11363 ;; Parameters:    Size  Location     Type
 11364 ;;		None
 11365 ;; Auto vars:     Size  Location     Type
 11366 ;;		None
 11367 ;; Return value:  Size  Location     Type
 11368 ;;                  1    wreg      void 
 11369 ;; Registers used:
 11370 ;;		wreg, status,2
 11371 ;; Tracked objects:
 11372 ;;		On entry : 0/0
 11373 ;;		On exit  : 0/0
 11374 ;;		Unchanged: 0/0
 11375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11379 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11380 ;;Total ram usage:        0 bytes
 11381 ;; Hardware stack levels used:    1
 11382 ;; This function calls:
 11383 ;;		Nothing
 11384 ;; This function is called by:
 11385 ;;		_SYSTEM_Initialize
 11386 ;; This function uses a non-reentrant model
 11387 ;;
 11388                           
 11389                           
 11390                           ;psect for function _TMR2_Initialize
 11391  1184                     _TMR2_Initialize:	
 11392                           
 11393                           ;tmr.c: 5: T2CON = 0x00;
 11394                           
 11395                           ;incstack = 0
 11396                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 11397  1184  0025               	movlb	5	; select bank5
 11398  1185  018E               	clrf	14	;volatile
 11399                           
 11400                           ;tmr.c: 7: T2CLKCON = 0x01;
 11401  1186  3001               	movlw	1
 11402  1187  0090               	movwf	16	;volatile
 11403                           
 11404                           ;tmr.c: 9: T2HLT = 0x00;
 11405  1188  018F               	clrf	15	;volatile
 11406                           
 11407                           ;tmr.c: 11: T2RST = 0x00;
 11408  1189  0191               	clrf	17	;volatile
 11409                           
 11410                           ;tmr.c: 13: T2PR = 0xFE;
 11411  118A  30FE               	movlw	254
 11412  118B  008D               	movwf	13	;volatile
 11413                           
 11414                           ;tmr.c: 18: T2TMR = 0x00;
 11415  118C  018C               	clrf	12	;volatile
 11416                           
 11417                           ;tmr.c: 20: PIR4bits.TMR2IF = 0;
 11418  118D  002E               	movlb	14	; select bank14
 11419  118E  1090               	bcf	16,1	;volatile
 11420                           
 11421                           ;tmr.c: 22: T2CONbits.TMR2ON = 1;
 11422  118F  0025               	movlb	5	; select bank5
 11423  1190  178E               	bsf	14,7	;volatile
 11424  1191  0008               	return
 11425  1192                     __end_of_TMR2_Initialize:	
 11426                           
 11427                           	psect	text21
 11428  11C7                     __ptext21:	
 11429 ;; *************** function _PWM_Initialize *****************
 11430 ;; Defined at:
 11431 ;;		line 3 in file "pwm.c"
 11432 ;; Parameters:    Size  Location     Type
 11433 ;;		None
 11434 ;; Auto vars:     Size  Location     Type
 11435 ;;		None
 11436 ;; Return value:  Size  Location     Type
 11437 ;;                  1    wreg      void 
 11438 ;; Registers used:
 11439 ;;		wreg, status,2, status,0
 11440 ;; Tracked objects:
 11441 ;;		On entry : 0/0
 11442 ;;		On exit  : 0/0
 11443 ;;		Unchanged: 0/0
 11444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11449 ;;Total ram usage:        0 bytes
 11450 ;; Hardware stack levels used:    1
 11451 ;; This function calls:
 11452 ;;		Nothing
 11453 ;; This function is called by:
 11454 ;;		_SYSTEM_Initialize
 11455 ;; This function uses a non-reentrant model
 11456 ;;
 11457                           
 11458                           
 11459                           ;psect for function _PWM_Initialize
 11460  11C7                     _PWM_Initialize:	
 11461                           
 11462                           ;pwm.c: 5: PWM6CON = 0x80;
 11463                           
 11464                           ;incstack = 0
 11465                           ; Regs used in _PWM_Initialize: [wreg+status,2+status,0]
 11466  11C7  3080               	movlw	128
 11467  11C8  0027               	movlb	7	; select bank7
 11468  11C9  008E               	movwf	14	;volatile
 11469                           
 11470                           ;pwm.c: 7: PWM6DCH = 0x00;
 11471  11CA  018D               	clrf	13	;volatile
 11472                           
 11473                           ;pwm.c: 9: PWM6DCL = 0x00;
 11474  11CB  018C               	clrf	12	;volatile
 11475                           
 11476                           ;pwm.c: 11: CCPTMRS1bits.P6TSEL = 0x01;
 11477  11CC  0024               	movlb	4	; select bank4
 11478  11CD  081F               	movf	31,w	;volatile
 11479  11CE  39F3               	andlw	-13
 11480  11CF  3804               	iorlw	4
 11481  11D0  009F               	movwf	31	;volatile
 11482                           
 11483                           ;pwm.c: 14: PWM7CON = 0x80;
 11484  11D1  3080               	movlw	128
 11485  11D2  0027               	movlb	7	; select bank7
 11486  11D3  0092               	movwf	18	;volatile
 11487                           
 11488                           ;pwm.c: 16: PWM7DCH = 0x00;
 11489  11D4  0191               	clrf	17	;volatile
 11490                           
 11491                           ;pwm.c: 18: PWM7DCL = 0x00;
 11492  11D5  0190               	clrf	16	;volatile
 11493                           
 11494                           ;pwm.c: 20: CCPTMRS1bits.P7TSEL = 0x02;
 11495  11D6  0024               	movlb	4	; select bank4
 11496  11D7  081F               	movf	31,w	;volatile
 11497  11D8  39CF               	andlw	-49
 11498  11D9  3820               	iorlw	32
 11499  11DA  009F               	movwf	31	;volatile
 11500  11DB  0008               	return
 11501  11DC                     __end_of_PWM_Initialize:	
 11502                           
 11503                           	psect	text22
 11504  130C                     __ptext22:	
 11505 ;; *************** function _PIN_MANAGER_Initialize *****************
 11506 ;; Defined at:
 11507 ;;		line 5 in file "pin_manager.c"
 11508 ;; Parameters:    Size  Location     Type
 11509 ;;		None
 11510 ;; Auto vars:     Size  Location     Type
 11511 ;;  state           1    0[COMMON] char 
 11512 ;; Return value:  Size  Location     Type
 11513 ;;                  1    wreg      void 
 11514 ;; Registers used:
 11515 ;;		wreg, status,2
 11516 ;; Tracked objects:
 11517 ;;		On entry : 0/0
 11518 ;;		On exit  : 0/0
 11519 ;;		Unchanged: 0/0
 11520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11522 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11524 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11525 ;;Total ram usage:        1 bytes
 11526 ;; Hardware stack levels used:    1
 11527 ;; This function calls:
 11528 ;;		Nothing
 11529 ;; This function is called by:
 11530 ;;		_SYSTEM_Initialize
 11531 ;; This function uses a non-reentrant model
 11532 ;;
 11533                           
 11534                           
 11535                           ;psect for function _PIN_MANAGER_Initialize
 11536  130C                     _PIN_MANAGER_Initialize:	
 11537                           
 11538                           ;pin_manager.c: 7: LATA = 0x20;
 11539                           
 11540                           ;incstack = 0
 11541                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 11542  130C  3020               	movlw	32
 11543  130D  0020               	movlb	0	; select bank0
 11544  130E  0096               	movwf	22	;volatile
 11545                           
 11546                           ;pin_manager.c: 8: LATB = 0x00;
 11547  130F  0197               	clrf	23	;volatile
 11548                           
 11549                           ;pin_manager.c: 9: LATC = 0x00;
 11550  1310  0198               	clrf	24	;volatile
 11551                           
 11552                           ;pin_manager.c: 11: WPUA = 0x00;
 11553  1311  003E               	movlb	30	; select bank30
 11554  1312  01B9               	clrf	57	;volatile
 11555                           
 11556                           ;pin_manager.c: 12: WPUB = 0x00;
 11557  1313  01C4               	clrf	68	;volatile
 11558                           
 11559                           ;pin_manager.c: 13: WPUC = 0x00;
 11560  1314  01CF               	clrf	79	;volatile
 11561                           
 11562                           ;pin_manager.c: 14: WPUE = 0x8;
 11563  1315  3008               	movlw	8
 11564  1316  00E5               	movwf	101	;volatile
 11565                           
 11566                           ;pin_manager.c: 16: TRISA = 0x00;
 11567  1317  0020               	movlb	0	; select bank0
 11568  1318  0191               	clrf	17	;volatile
 11569                           
 11570                           ;pin_manager.c: 17: TRISB = 0x0E;
 11571  1319  300E               	movlw	14
 11572  131A  0092               	movwf	18	;volatile
 11573                           
 11574                           ;pin_manager.c: 18: TRISC = 0xFF;
 11575  131B  30FF               	movlw	255
 11576  131C  0093               	movwf	19	;volatile
 11577                           
 11578                           ;pin_manager.c: 20: ANSELA = 0x00;
 11579  131D  003E               	movlb	30	; select bank30
 11580  131E  01B8               	clrf	56	;volatile
 11581                           
 11582                           ;pin_manager.c: 21: ANSELB = 0x0A;
 11583  131F  300A               	movlw	10
 11584  1320  00C3               	movwf	67	;volatile
 11585                           
 11586                           ;pin_manager.c: 22: ANSELC = 0xFF;
 11587  1321  30FF               	movlw	255
 11588  1322  00CE               	movwf	78	;volatile
 11589                           
 11590                           ;pin_manager.c: 25: PIE0bits.IOCIE = 0;
 11591  1323  002E               	movlb	14	; select bank14
 11592  1324  1216               	bcf	22,4	;volatile
 11593                           
 11594                           ;pin_manager.c: 26: int8_t state = GIE;
 11595  1325  3000               	movlw	0
 11596  1326  1B8B               	btfsc	11,7	;volatile
 11597  1327  3001               	movlw	1
 11598  1328  00F0               	movwf	PIN_MANAGER_Initialize@state
 11599                           
 11600                           ;pin_manager.c: 27: GIE = 0;
 11601  1329  138B               	bcf	11,7	;volatile
 11602                           
 11603                           ;pin_manager.c: 28: PPSLOCK = 0x55;
 11604  132A  3055               	movlw	85
 11605  132B  003D               	movlb	29	; select bank29
 11606  132C  008F               	movwf	15	;volatile
 11607                           
 11608                           ;pin_manager.c: 29: PPSLOCK = 0xAA;
 11609  132D  30AA               	movlw	170
 11610  132E  008F               	movwf	15	;volatile
 11611                           
 11612                           ;pin_manager.c: 30: PPSLOCKbits.PPSLOCKED = 0x00;
 11613  132F  100F               	bcf	15,0	;volatile
 11614                           
 11615                           ;pin_manager.c: 32: RA6PPS = 0x0E;
 11616  1330  300E               	movlw	14
 11617  1331  003E               	movlb	30	; select bank30
 11618  1332  0096               	movwf	22	;volatile
 11619                           
 11620                           ;pin_manager.c: 33: RA7PPS = 0x0F;
 11621  1333  300F               	movlw	15
 11622  1334  0097               	movwf	23	;volatile
 11623                           
 11624                           ;pin_manager.c: 34: RB0PPS = 0x09;
 11625  1335  3009               	movlw	9
 11626  1336  0098               	movwf	24	;volatile
 11627                           
 11628                           ;pin_manager.c: 35: PPSLOCK = 0x55;
 11629  1337  3055               	movlw	85
 11630  1338  003D               	movlb	29	; select bank29
 11631  1339  008F               	movwf	15	;volatile
 11632                           
 11633                           ;pin_manager.c: 36: PPSLOCK = 0xAA;
 11634  133A  30AA               	movlw	170
 11635  133B  008F               	movwf	15	;volatile
 11636                           
 11637                           ;pin_manager.c: 37: PPSLOCKbits.PPSLOCKED = 0x01;
 11638  133C  140F               	bsf	15,0	;volatile
 11639                           
 11640                           ;pin_manager.c: 38: GIE = state;
 11641  133D  1C70               	btfss	PIN_MANAGER_Initialize@state,0
 11642  133E  2B41               	goto	u2730
 11643  133F  178B               	bsf	11,7	;volatile
 11644  1340  0008               	return
 11645  1341                     u2730:	
 11646  1341  138B               	bcf	11,7	;volatile
 11647  1342  0008               	return
 11648  1343                     __end_of_PIN_MANAGER_Initialize:	
 11649                           
 11650                           	psect	text23
 11651  116F                     __ptext23:	
 11652 ;; *************** function _OSCILLATOR_Initialize *****************
 11653 ;; Defined at:
 11654 ;;		line 89 in file "system.c"
 11655 ;; Parameters:    Size  Location     Type
 11656 ;;		None
 11657 ;; Auto vars:     Size  Location     Type
 11658 ;;		None
 11659 ;; Return value:  Size  Location     Type
 11660 ;;                  1    wreg      void 
 11661 ;; Registers used:
 11662 ;;		wreg, status,2
 11663 ;; Tracked objects:
 11664 ;;		On entry : 0/0
 11665 ;;		On exit  : 0/0
 11666 ;;		Unchanged: 0/0
 11667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11672 ;;Total ram usage:        0 bytes
 11673 ;; Hardware stack levels used:    1
 11674 ;; This function calls:
 11675 ;;		Nothing
 11676 ;; This function is called by:
 11677 ;;		_SYSTEM_Initialize
 11678 ;; This function uses a non-reentrant model
 11679 ;;
 11680                           
 11681                           
 11682                           ;psect for function _OSCILLATOR_Initialize
 11683  116F                     _OSCILLATOR_Initialize:	
 11684                           
 11685                           ;system.c: 91: OSCCON1 = 0x60;
 11686                           
 11687                           ;incstack = 0
 11688                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 11689  116F  3060               	movlw	96
 11690  1170  0031               	movlb	17	; select bank17
 11691  1171  008D               	movwf	13	;volatile
 11692                           
 11693                           ;system.c: 92: OSCCON3 = 0x00;
 11694  1172  018F               	clrf	15	;volatile
 11695                           
 11696                           ;system.c: 93: OSCEN = 0x00;
 11697  1173  0191               	clrf	17	;volatile
 11698                           
 11699                           ;system.c: 94: OSCFRQ = 0x06;
 11700  1174  3006               	movlw	6
 11701  1175  0093               	movwf	19	;volatile
 11702                           
 11703                           ;system.c: 95: OSCTUNE = 0x00;
 11704  1176  0192               	clrf	18	;volatile
 11705  1177  0008               	return
 11706  1178                     __end_of_OSCILLATOR_Initialize:	
 11707                           
 11708                           	psect	text24
 11709  1343                     __ptext24:	
 11710 ;; *************** function _LCDInit *****************
 11711 ;; Defined at:
 11712 ;;		line 247 in file "lcd.c"
 11713 ;; Parameters:    Size  Location     Type
 11714 ;;		None
 11715 ;; Auto vars:     Size  Location     Type
 11716 ;;		None
 11717 ;; Return value:  Size  Location     Type
 11718 ;;                  1    wreg      void 
 11719 ;; Registers used:
 11720 ;;		wreg, status,2, status,0, pclath, cstack
 11721 ;; Tracked objects:
 11722 ;;		On entry : 0/0
 11723 ;;		On exit  : 0/0
 11724 ;;		Unchanged: 0/0
 11725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11728 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11729 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11730 ;;Total ram usage:        1 bytes
 11731 ;; Hardware stack levels used:    1
 11732 ;; Hardware stack levels required when called:    1
 11733 ;; This function calls:
 11734 ;;		_LCDWrite
 11735 ;; This function is called by:
 11736 ;;		_main
 11737 ;;		_SYSTEM_Initialize
 11738 ;; This function uses a non-reentrant model
 11739 ;;
 11740                           
 11741                           
 11742                           ;psect for function _LCDInit
 11743  1343                     _LCDInit:	
 11744                           
 11745                           ;lcd.c: 249: TRISAbits.TRISA0 = 0;
 11746                           
 11747                           ;incstack = 0
 11748                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
 11749  1343  0020               	movlb	0	; select bank0
 11750  1344  1011               	bcf	17,0	;volatile
 11751                           
 11752                           ;lcd.c: 250: TRISAbits.TRISA1 = 0;
 11753  1345  1091               	bcf	17,1	;volatile
 11754                           
 11755                           ;lcd.c: 251: TRISAbits.TRISA2 = 0;
 11756  1346  1111               	bcf	17,2	;volatile
 11757                           
 11758                           ;lcd.c: 252: TRISAbits.TRISA3 = 0;
 11759  1347  1191               	bcf	17,3	;volatile
 11760                           
 11761                           ;lcd.c: 253: TRISAbits.TRISA4 = 0;
 11762  1348  1211               	bcf	17,4	;volatile
 11763                           
 11764                           ;lcd.c: 254: LATAbits.LATA3 = 0;
 11765  1349  1196               	bcf	22,3	;volatile
 11766                           
 11767                           ;lcd.c: 255: LATAbits.LATA4 = 0;
 11768  134A  1216               	bcf	22,4	;volatile
 11769                           
 11770                           ;lcd.c: 256: LATAbits.LATA2 = 0;
 11771  134B  1116               	bcf	22,2	;volatile
 11772                           
 11773                           ;lcd.c: 257: LATAbits.LATA0 = 0;
 11774  134C  1016               	bcf	22,0	;volatile
 11775                           
 11776                           ;lcd.c: 259: LATAbits.LATA0 = 1;
 11777  134D  1416               	bsf	22,0	;volatile
 11778                           
 11779                           ;lcd.c: 261: LCDWrite(0, 0x21);
 11780  134E  3021               	movlw	33
 11781  134F  00F5               	movwf	??_LCDInit
 11782  1350  0875               	movf	??_LCDInit,w
 11783  1351  00F0               	movwf	LCDWrite@data
 11784  1352  3000               	movlw	0
 11785  1353  3192  2295  3193   	fcall	_LCDWrite
 11786                           
 11787                           ;lcd.c: 269: LCDWrite(0, 0XB9);
 11788  1356  30B9               	movlw	185
 11789  1357  00F5               	movwf	??_LCDInit
 11790  1358  0875               	movf	??_LCDInit,w
 11791  1359  00F0               	movwf	LCDWrite@data
 11792  135A  3000               	movlw	0
 11793  135B  3192  2295  3193   	fcall	_LCDWrite
 11794                           
 11795                           ;lcd.c: 271: LCDWrite(0, 0x04);
 11796  135E  3004               	movlw	4
 11797  135F  00F5               	movwf	??_LCDInit
 11798  1360  0875               	movf	??_LCDInit,w
 11799  1361  00F0               	movwf	LCDWrite@data
 11800  1362  3000               	movlw	0
 11801  1363  3192  2295  3193   	fcall	_LCDWrite
 11802                           
 11803                           ;lcd.c: 273: LCDWrite(0, 0x14);
 11804  1366  3014               	movlw	20
 11805  1367  00F5               	movwf	??_LCDInit
 11806  1368  0875               	movf	??_LCDInit,w
 11807  1369  00F0               	movwf	LCDWrite@data
 11808  136A  3000               	movlw	0
 11809  136B  3192  2295  3193   	fcall	_LCDWrite
 11810                           
 11811                           ;lcd.c: 275: LCDWrite(0, 0x20);
 11812  136E  3020               	movlw	32
 11813  136F  00F5               	movwf	??_LCDInit
 11814  1370  0875               	movf	??_LCDInit,w
 11815  1371  00F0               	movwf	LCDWrite@data
 11816  1372  3000               	movlw	0
 11817  1373  3192  2295  3193   	fcall	_LCDWrite
 11818                           
 11819                           ;lcd.c: 277: LCDWrite(0, 0x0C);
 11820  1376  300C               	movlw	12
 11821  1377  00F5               	movwf	??_LCDInit
 11822  1378  0875               	movf	??_LCDInit,w
 11823  1379  00F0               	movwf	LCDWrite@data
 11824  137A  3000               	movlw	0
 11825  137B  3192  2295         	fcall	_LCDWrite
 11826  137D  0008               	return
 11827  137E                     __end_of_LCDInit:	
 11828                           
 11829                           	psect	text25
 11830  12BA                     __ptext25:	
 11831 ;; *************** function _LCDClear *****************
 11832 ;; Defined at:
 11833 ;;		line 182 in file "lcd.c"
 11834 ;; Parameters:    Size  Location     Type
 11835 ;;		None
 11836 ;; Auto vars:     Size  Location     Type
 11837 ;;  index           2    9[COMMON] int 
 11838 ;; Return value:  Size  Location     Type
 11839 ;;                  1    wreg      void 
 11840 ;; Registers used:
 11841 ;;		wreg, status,2, status,0, pclath, cstack
 11842 ;; Tracked objects:
 11843 ;;		On entry : 0/0
 11844 ;;		On exit  : 0/0
 11845 ;;		Unchanged: 0/0
 11846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11848 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11849 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11850 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11851 ;;Total ram usage:        3 bytes
 11852 ;; Hardware stack levels used:    1
 11853 ;; Hardware stack levels required when called:    2
 11854 ;; This function calls:
 11855 ;;		_LCDWrite
 11856 ;;		_gotoXY
 11857 ;; This function is called by:
 11858 ;;		_main
 11859 ;;		_SYSTEM_Initialize
 11860 ;; This function uses a non-reentrant model
 11861 ;;
 11862                           
 11863                           
 11864                           ;psect for function _LCDClear
 11865  12BA                     _LCDClear:	
 11866                           
 11867                           ;lcd.c: 184: int index;
 11868                           ;lcd.c: 185: for (index = 0 ; index < (84 * 48 / 8) ; index++)
 11869                           
 11870                           ;incstack = 0
 11871                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
 11872  12BA  01F9               	clrf	LCDClear@index
 11873  12BB  01FA               	clrf	LCDClear@index+1
 11874  12BC  087A               	movf	LCDClear@index+1,w
 11875  12BD  3A80               	xorlw	128
 11876  12BE  00F8               	movwf	??_LCDClear
 11877  12BF  3081               	movlw	129
 11878  12C0  0278               	subwf	??_LCDClear,w
 11879  12C1  1D03               	skipz
 11880  12C2  2AC5               	goto	u2695
 11881  12C3  30F8               	movlw	248
 11882  12C4  0279               	subwf	LCDClear@index,w
 11883  12C5                     u2695:	
 11884  12C5  1803               	btfsc	3,0
 11885  12C6  2ADB               	goto	l2514
 11886  12C7                     l2508:	
 11887                           
 11888                           ;lcd.c: 186: LCDWrite(1, 0x00);
 11889  12C7  01F0               	clrf	LCDWrite@data
 11890  12C8  3001               	movlw	1
 11891  12C9  3192  2295  3192   	fcall	_LCDWrite
 11892  12CC  3001               	movlw	1
 11893  12CD  07F9               	addwf	LCDClear@index,f
 11894  12CE  3000               	movlw	0
 11895  12CF  3DFA               	addwfc	LCDClear@index+1,f
 11896  12D0  087A               	movf	LCDClear@index+1,w
 11897  12D1  3A80               	xorlw	128
 11898  12D2  00F8               	movwf	??_LCDClear
 11899  12D3  3081               	movlw	129
 11900  12D4  0278               	subwf	??_LCDClear,w
 11901  12D5  1D03               	skipz
 11902  12D6  2AD9               	goto	u2705
 11903  12D7  30F8               	movlw	248
 11904  12D8  0279               	subwf	LCDClear@index,w
 11905  12D9                     u2705:	
 11906  12D9  1C03               	skipc
 11907  12DA  2AC7               	goto	l2508
 11908  12DB                     l2514:	
 11909                           
 11910                           ;lcd.c: 187: gotoXY(0, 0);
 11911  12DB  01F5               	clrf	gotoXY@y
 11912  12DC  3000               	movlw	0
 11913  12DD  3191  21A0         	fcall	_gotoXY
 11914  12DF  0008               	return
 11915  12E0                     __end_of_LCDClear:	
 11916                           
 11917                           	psect	text26
 11918  11A0                     __ptext26:	
 11919 ;; *************** function _gotoXY *****************
 11920 ;; Defined at:
 11921 ;;		line 124 in file "lcd.c"
 11922 ;; Parameters:    Size  Location     Type
 11923 ;;  x               1    wreg     unsigned char 
 11924 ;;  y               1    5[COMMON] unsigned char 
 11925 ;; Auto vars:     Size  Location     Type
 11926 ;;  x               1    7[COMMON] unsigned char 
 11927 ;; Return value:  Size  Location     Type
 11928 ;;                  1    wreg      void 
 11929 ;; Registers used:
 11930 ;;		wreg, status,2, status,0, pclath, cstack
 11931 ;; Tracked objects:
 11932 ;;		On entry : 0/0
 11933 ;;		On exit  : 0/0
 11934 ;;		Unchanged: 0/0
 11935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11936 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11937 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11938 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11939 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11940 ;;Total ram usage:        3 bytes
 11941 ;; Hardware stack levels used:    1
 11942 ;; Hardware stack levels required when called:    1
 11943 ;; This function calls:
 11944 ;;		_LCDWrite
 11945 ;; This function is called by:
 11946 ;;		_main
 11947 ;;		_LCDClear
 11948 ;; This function uses a non-reentrant model
 11949 ;;
 11950                           
 11951                           
 11952                           ;psect for function _gotoXY
 11953  11A0                     _gotoXY:	
 11954                           
 11955                           ;incstack = 0
 11956                           ; Regs used in _gotoXY: [wreg+status,2+status,0+pclath+cstack]
 11957                           ;gotoXY@x stored from wreg
 11958  11A0  00F7               	movwf	gotoXY@x
 11959                           
 11960                           ;lcd.c: 126: LCDWrite(0,(uint8_t)(0x80 | x));
 11961  11A1  0877               	movf	gotoXY@x,w
 11962  11A2  3880               	iorlw	128
 11963  11A3  00F6               	movwf	??_gotoXY
 11964  11A4  0876               	movf	??_gotoXY,w
 11965  11A5  00F0               	movwf	LCDWrite@data
 11966  11A6  3000               	movlw	0
 11967  11A7  3192  2295  3191   	fcall	_LCDWrite
 11968                           
 11969                           ;lcd.c: 127: LCDWrite(0,(uint8_t)(0x40 | y));
 11970  11AA  0875               	movf	gotoXY@y,w
 11971  11AB  3840               	iorlw	64
 11972  11AC  00F6               	movwf	??_gotoXY
 11973  11AD  0876               	movf	??_gotoXY,w
 11974  11AE  00F0               	movwf	LCDWrite@data
 11975  11AF  3000               	movlw	0
 11976  11B0  3192  2295         	fcall	_LCDWrite
 11977  11B2  0008               	return
 11978  11B3                     __end_of_gotoXY:	
 11979                           
 11980                           	psect	text27
 11981  1609                     __ptext27:	
 11982 ;; *************** function _Init_Battery_State_Machine *****************
 11983 ;; Defined at:
 11984 ;;		line 18 in file "battery_charger.c"
 11985 ;; Parameters:    Size  Location     Type
 11986 ;;  z               1    wreg     unsigned char 
 11987 ;; Auto vars:     Size  Location     Type
 11988 ;;  z               1   34[BANK0 ] unsigned char 
 11989 ;; Return value:  Size  Location     Type
 11990 ;;                  1    wreg      void 
 11991 ;; Registers used:
 11992 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11993 ;; Tracked objects:
 11994 ;;		On entry : 0/0
 11995 ;;		On exit  : 0/0
 11996 ;;		Unchanged: 0/0
 11997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11999 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12000 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12001 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12002 ;;Total ram usage:        5 bytes
 12003 ;; Hardware stack levels used:    1
 12004 ;; Hardware stack levels required when called:    2
 12005 ;; This function calls:
 12006 ;;		___awtoft
 12007 ;;		___ftmul
 12008 ;;		___fttol
 12009 ;; This function is called by:
 12010 ;;		_SYSTEM_Initialize
 12011 ;; This function uses a non-reentrant model
 12012 ;;
 12013                           
 12014                           
 12015                           ;psect for function _Init_Battery_State_Machine
 12016  1609                     _Init_Battery_State_Machine:	
 12017                           
 12018                           ;incstack = 0
 12019                           ; Regs used in _Init_Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12020                           ;Init_Battery_State_Machine@z stored from wreg
 12021  1609  0020               	movlb	0	; select bank0
 12022  160A  00C2               	movwf	Init_Battery_State_Machine@z
 12023                           
 12024                           ;battery_charger.c: 20: batteryState[z] =PRECHARGE;
 12025  160B  3003               	movlw	3
 12026  160C  00BE               	movwf	??_Init_Battery_State_Machine
 12027  160D  0842               	movf	Init_Battery_State_Machine@z,w
 12028  160E  3EDF               	addlw	(low (_batteryState| 0))& (0+255)
 12029  160F  0086               	movwf	6
 12030  1610  0187               	clrf	7
 12031  1611  083E               	movf	??_Init_Battery_State_Machine,w
 12032  1612  0081               	movwf	1
 12033                           
 12034                           ;battery_charger.c: 21: stateCounter[z] =5;
 12035  1613  3542               	lslf	Init_Battery_State_Machine@z,w
 12036  1614  3ED5               	addlw	(low (_stateCounter| 0))& (0+255)
 12037  1615  0086               	movwf	6
 12038  1616  0187               	clrf	7
 12039  1617  3005               	movlw	5
 12040  1618  3FC0               	movwi [0]fsr1
 12041  1619  3000               	movlw	0
 12042  161A  3FC1               	movwi [1]fsr1
 12043                           
 12044                           ;battery_charger.c: 22: Iref[z] =10;
 12045  161B  3542               	lslf	Init_Battery_State_Machine@z,w
 12046  161C  3ECD               	addlw	(low (_Iref| 0))& (0+255)
 12047  161D  0086               	movwf	6
 12048  161E  0187               	clrf	7
 12049  161F  300A               	movlw	10
 12050  1620  3FC0               	movwi [0]fsr1
 12051  1621  3000               	movlw	0
 12052  1622  3FC1               	movwi [1]fsr1
 12053                           
 12054                           ;battery_charger.c: 23: Vref[z] =1425+(int16_t)((250-batteryTemp)*.24);
 12055  1623  0021               	movlb	1	; select bank1
 12056  1624  096C               	comf	_batteryTemp^(0+128),w
 12057  1625  0020               	movlb	0	; select bank0
 12058  1626  00BE               	movwf	??_Init_Battery_State_Machine
 12059  1627  0021               	movlb	1	; select bank1
 12060  1628  096D               	comf	(_batteryTemp+1)^(0+128),w
 12061  1629  0020               	movlb	0	; select bank0
 12062  162A  00BF               	movwf	??_Init_Battery_State_Machine+1
 12063  162B  0ABE               	incf	??_Init_Battery_State_Machine,f
 12064  162C  1903               	skipnz
 12065  162D  0ABF               	incf	??_Init_Battery_State_Machine+1,f
 12066  162E  083E               	movf	??_Init_Battery_State_Machine,w
 12067  162F  3EFA               	addlw	250
 12068  1630  00F8               	movwf	___awtoft@c
 12069  1631  3000               	movlw	0
 12070  1632  3D3F               	addwfc	??_Init_Battery_State_Machine+1,w
 12071  1633  00F9               	movwf	___awtoft@c+1
 12072  1634  3192  2275  3196   	fcall	___awtoft
 12073  1637  0878               	movf	?___awtoft,w
 12074  1638  0020               	movlb	0	; select bank0
 12075  1639  00A3               	movwf	___ftmul@f2
 12076  163A  0879               	movf	?___awtoft+1,w
 12077  163B  00A4               	movwf	___ftmul@f2+1
 12078  163C  087A               	movf	?___awtoft+2,w
 12079  163D  00A5               	movwf	___ftmul@f2+2
 12080  163E  30C3               	movlw	195
 12081  163F  00A0               	movwf	___ftmul@f1
 12082  1640  3075               	movlw	117
 12083  1641  00A1               	movwf	___ftmul@f1+1
 12084  1642  303E               	movlw	62
 12085  1643  00A2               	movwf	___ftmul@f1+2
 12086  1644  318B  2311  3196   	fcall	___ftmul
 12087  1647  0020               	movlb	0	; select bank0
 12088  1648  0820               	movf	?___ftmul,w
 12089  1649  00B0               	movwf	___fttol@f1
 12090  164A  0821               	movf	?___ftmul+1,w
 12091  164B  00B1               	movwf	___fttol@f1+1
 12092  164C  0822               	movf	?___ftmul+2,w
 12093  164D  00B2               	movwf	___fttol@f1+2
 12094  164E  3196  26F2         	fcall	___fttol
 12095  1650  0020               	movlb	0	; select bank0
 12096  1651  0830               	movf	?___fttol,w
 12097  1652  3E91               	addlw	145
 12098  1653  00C0               	movwf	??_Init_Battery_State_Machine+2
 12099  1654  3005               	movlw	5
 12100  1655  3D31               	addwfc	?___fttol+1,w
 12101  1656  00C1               	movwf	??_Init_Battery_State_Machine+3
 12102  1657  3542               	lslf	Init_Battery_State_Machine@z,w
 12103  1658  3ED1               	addlw	(low (_Vref| 0))& (0+255)
 12104  1659  0086               	movwf	6
 12105  165A  0187               	clrf	7
 12106  165B  0840               	movf	??_Init_Battery_State_Machine+2,w
 12107  165C  3FC0               	movwi [0]fsr1
 12108  165D  0841               	movf	??_Init_Battery_State_Machine+3,w
 12109  165E  3FC1               	movwi [1]fsr1
 12110                           
 12111                           ;battery_charger.c: 24: Imin[z] =15;
 12112  165F  3542               	lslf	Init_Battery_State_Machine@z,w
 12113  1660  3EC5               	addlw	(low (_Imin| 0))& (0+255)
 12114  1661  0086               	movwf	6
 12115  1662  0187               	clrf	7
 12116  1663  300F               	movlw	15
 12117  1664  3FC0               	movwi [0]fsr1
 12118  1665  3000               	movlw	0
 12119  1666  3FC1               	movwi [1]fsr1
 12120                           
 12121                           ;battery_charger.c: 25: IminCount[z] = 600;
 12122  1667  3542               	lslf	Init_Battery_State_Machine@z,w
 12123  1668  3EC9               	addlw	(low (_IminCount| 0))& (0+255)
 12124  1669  0086               	movwf	6
 12125  166A  0187               	clrf	7
 12126  166B  3058               	movlw	88
 12127  166C  3FC0               	movwi [0]fsr1
 12128  166D  3002               	movlw	2
 12129  166E  3FC1               	movwi [1]fsr1
 12130  166F  0008               	return
 12131  1670                     __end_of_Init_Battery_State_Machine:	
 12132                           
 12133                           	psect	text28
 12134  1256                     __ptext28:	
 12135 ;; *************** function _ADC_Initialize *****************
 12136 ;; Defined at:
 12137 ;;		line 111 in file "adc.c"
 12138 ;; Parameters:    Size  Location     Type
 12139 ;;		None
 12140 ;; Auto vars:     Size  Location     Type
 12141 ;;		None
 12142 ;; Return value:  Size  Location     Type
 12143 ;;                  1    wreg      void 
 12144 ;; Registers used:
 12145 ;;		wreg, status,2
 12146 ;; Tracked objects:
 12147 ;;		On entry : 0/0
 12148 ;;		On exit  : 0/0
 12149 ;;		Unchanged: 0/0
 12150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12155 ;;Total ram usage:        0 bytes
 12156 ;; Hardware stack levels used:    1
 12157 ;; This function calls:
 12158 ;;		Nothing
 12159 ;; This function is called by:
 12160 ;;		_SYSTEM_Initialize
 12161 ;; This function uses a non-reentrant model
 12162 ;;
 12163                           
 12164                           
 12165                           ;psect for function _ADC_Initialize
 12166  1256                     _ADC_Initialize:	
 12167                           
 12168                           ;adc.c: 113: ADCON1 = 0x00;
 12169                           
 12170                           ;incstack = 0
 12171                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 12172  1256  0021               	movlb	1	; select bank1
 12173  1257  0194               	clrf	20	;volatile
 12174                           
 12175                           ;adc.c: 115: ADCON2 = 0x00;
 12176  1258  0195               	clrf	21	;volatile
 12177                           
 12178                           ;adc.c: 117: ADCON3 = 0x00;
 12179  1259  0196               	clrf	22	;volatile
 12180                           
 12181                           ;adc.c: 119: ADACT = 0x00;
 12182  125A  0199               	clrf	25	;volatile
 12183                           
 12184                           ;adc.c: 121: ADSTAT = 0x00;
 12185  125B  0197               	clrf	23	;volatile
 12186                           
 12187                           ;adc.c: 123: FVRCON = 0b11000011;
 12188  125C  30C3               	movlw	195
 12189  125D  0032               	movlb	18	; select bank18
 12190  125E  008C               	movwf	12	;volatile
 12191                           
 12192                           ;adc.c: 124: ADCLK = 0x3F;
 12193  125F  303F               	movlw	63
 12194  1260  0021               	movlb	1	; select bank1
 12195  1261  0098               	movwf	24	;volatile
 12196                           
 12197                           ;adc.c: 131: ADREF = 0x03;
 12198  1262  3003               	movlw	3
 12199  1263  009A               	movwf	26	;volatile
 12200                           
 12201                           ;adc.c: 134: ADCAP = 0x00;
 12202  1264  019B               	clrf	27	;volatile
 12203                           
 12204                           ;adc.c: 137: ADPRE = 0x07;
 12205  1265  3007               	movlw	7
 12206  1266  009C               	movwf	28	;volatile
 12207                           
 12208                           ;adc.c: 139: ADACQ = 0x00;
 12209  1267  019D               	clrf	29	;volatile
 12210                           
 12211                           ;adc.c: 141: ADPCH = 0x00;
 12212  1268  019E               	clrf	30	;volatile
 12213                           
 12214                           ;adc.c: 143: ADRPT = 0x00;
 12215  1269  0022               	movlb	2	; select bank2
 12216  126A  018D               	clrf	13	;volatile
 12217                           
 12218                           ;adc.c: 145: ADLTHL = 0x00;
 12219  126B  018E               	clrf	14	;volatile
 12220                           
 12221                           ;adc.c: 147: ADLTHH = 0x00;
 12222  126C  018F               	clrf	15	;volatile
 12223                           
 12224                           ;adc.c: 149: ADUTHL = 0x00;
 12225  126D  0190               	clrf	16	;volatile
 12226                           
 12227                           ;adc.c: 151: ADUTHH = 0x00;
 12228  126E  0191               	clrf	17	;volatile
 12229                           
 12230                           ;adc.c: 153: ADSTPTL = 0x00;
 12231  126F  0192               	clrf	18	;volatile
 12232                           
 12233                           ;adc.c: 155: ADSTPTH = 0x00;
 12234  1270  0193               	clrf	19	;volatile
 12235                           
 12236                           ;adc.c: 157: ADCON0 = 0x84;
 12237  1271  3084               	movlw	132
 12238  1272  0021               	movlb	1	; select bank1
 12239  1273  0093               	movwf	19	;volatile
 12240  1274  0008               	return
 12241  1275                     __end_of_ADC_Initialize:	
 12242                           
 12243                           	psect	text29
 12244  1207                     __ptext29:	
 12245 ;; *************** function _PWM7_LoadDutyValue *****************
 12246 ;; Defined at:
 12247 ;;		line 37 in file "pwm.c"
 12248 ;; Parameters:    Size  Location     Type
 12249 ;;  dutyCycle7      2    0[COMMON] unsigned int 
 12250 ;; Auto vars:     Size  Location     Type
 12251 ;;		None
 12252 ;; Return value:  Size  Location     Type
 12253 ;;                  1    wreg      void 
 12254 ;; Registers used:
 12255 ;;		wreg, status,2, status,0
 12256 ;; Tracked objects:
 12257 ;;		On entry : 0/0
 12258 ;;		On exit  : 0/0
 12259 ;;		Unchanged: 0/0
 12260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12261 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12263 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12264 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12265 ;;Total ram usage:        4 bytes
 12266 ;; Hardware stack levels used:    1
 12267 ;; This function calls:
 12268 ;;		Nothing
 12269 ;; This function is called by:
 12270 ;;		_main
 12271 ;; This function uses a non-reentrant model
 12272 ;;
 12273                           
 12274                           
 12275                           ;psect for function _PWM7_LoadDutyValue
 12276  1207                     _PWM7_LoadDutyValue:	
 12277                           
 12278                           ;pwm.c: 39: PWM7DCH = (dutyCycle7 & 0x03FC)>>2;
 12279                           
 12280                           ;incstack = 0
 12281                           ; Regs used in _PWM7_LoadDutyValue: [wreg+status,2+status,0]
 12282  1207  0871               	movf	PWM7_LoadDutyValue@dutyCycle7+1,w
 12283  1208  00F3               	movwf	??_PWM7_LoadDutyValue+1
 12284  1209  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 12285  120A  00F2               	movwf	??_PWM7_LoadDutyValue
 12286  120B  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 12287  120C  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 12288  120D  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 12289  120E  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 12290  120F  0872               	movf	??_PWM7_LoadDutyValue,w
 12291  1210  0027               	movlb	7	; select bank7
 12292  1211  0091               	movwf	17	;volatile
 12293                           
 12294                           ;pwm.c: 41: PWM7DCL = (dutyCycle7 & 0x0003)<<6;
 12295  1212  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 12296  1213  3903               	andlw	3
 12297  1214  00F2               	movwf	??_PWM7_LoadDutyValue
 12298  1215  3005               	movlw	5
 12299  1216                     u3245:	
 12300  1216  35F2               	lslf	??_PWM7_LoadDutyValue,f
 12301  1217  3EFF               	addlw	-1
 12302  1218  1D03               	skipz
 12303  1219  2A16               	goto	u3245
 12304  121A  3572               	lslf	??_PWM7_LoadDutyValue,w
 12305  121B  0090               	movwf	16	;volatile
 12306  121C  0008               	return
 12307  121D                     __end_of_PWM7_LoadDutyValue:	
 12308                           
 12309                           	psect	text30
 12310  11F1                     __ptext30:	
 12311 ;; *************** function _PWM6_LoadDutyValue *****************
 12312 ;; Defined at:
 12313 ;;		line 30 in file "pwm.c"
 12314 ;; Parameters:    Size  Location     Type
 12315 ;;  dutyCycle6      2    0[COMMON] unsigned int 
 12316 ;; Auto vars:     Size  Location     Type
 12317 ;;		None
 12318 ;; Return value:  Size  Location     Type
 12319 ;;                  1    wreg      void 
 12320 ;; Registers used:
 12321 ;;		wreg, status,2, status,0
 12322 ;; Tracked objects:
 12323 ;;		On entry : 0/0
 12324 ;;		On exit  : 0/0
 12325 ;;		Unchanged: 0/0
 12326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12327 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12329 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12330 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12331 ;;Total ram usage:        4 bytes
 12332 ;; Hardware stack levels used:    1
 12333 ;; This function calls:
 12334 ;;		Nothing
 12335 ;; This function is called by:
 12336 ;;		_main
 12337 ;; This function uses a non-reentrant model
 12338 ;;
 12339                           
 12340                           
 12341                           ;psect for function _PWM6_LoadDutyValue
 12342  11F1                     _PWM6_LoadDutyValue:	
 12343                           
 12344                           ;pwm.c: 32: PWM6DCH = (dutyCycle6 & 0x03FC)>>2;
 12345                           
 12346                           ;incstack = 0
 12347                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 12348  11F1  0871               	movf	PWM6_LoadDutyValue@dutyCycle6+1,w
 12349  11F2  00F3               	movwf	??_PWM6_LoadDutyValue+1
 12350  11F3  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 12351  11F4  00F2               	movwf	??_PWM6_LoadDutyValue
 12352  11F5  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 12353  11F6  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 12354  11F7  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 12355  11F8  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 12356  11F9  0872               	movf	??_PWM6_LoadDutyValue,w
 12357  11FA  0027               	movlb	7	; select bank7
 12358  11FB  008D               	movwf	13	;volatile
 12359                           
 12360                           ;pwm.c: 34: PWM6DCL = (dutyCycle6 & 0x0003)<<6;
 12361  11FC  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 12362  11FD  3903               	andlw	3
 12363  11FE  00F2               	movwf	??_PWM6_LoadDutyValue
 12364  11FF  3005               	movlw	5
 12365  1200                     u3235:	
 12366  1200  35F2               	lslf	??_PWM6_LoadDutyValue,f
 12367  1201  3EFF               	addlw	-1
 12368  1202  1D03               	skipz
 12369  1203  2A00               	goto	u3235
 12370  1204  3572               	lslf	??_PWM6_LoadDutyValue,w
 12371  1205  008C               	movwf	12	;volatile
 12372  1206  0008               	return
 12373  1207                     __end_of_PWM6_LoadDutyValue:	
 12374                           
 12375                           	psect	text31
 12376  11B3                     __ptext31:	
 12377 ;; *************** function _LCDWriteString *****************
 12378 ;; Defined at:
 12379 ;;		line 176 in file "lcd.c"
 12380 ;; Parameters:    Size  Location     Type
 12381 ;;  characters      2   12[COMMON] PTR const unsigned char 
 12382 ;;		 -> STR_3(5), STR_2(5), STR_1(4), 
 12383 ;; Auto vars:     Size  Location     Type
 12384 ;;		None
 12385 ;; Return value:  Size  Location     Type
 12386 ;;                  1    wreg      void 
 12387 ;; Registers used:
 12388 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12389 ;; Tracked objects:
 12390 ;;		On entry : 0/0
 12391 ;;		On exit  : 0/0
 12392 ;;		Unchanged: 0/0
 12393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12394 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12396 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12397 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12398 ;;Total ram usage:        3 bytes
 12399 ;; Hardware stack levels used:    1
 12400 ;; Hardware stack levels required when called:    2
 12401 ;; This function calls:
 12402 ;;		_LCDWriteCharacter
 12403 ;; This function is called by:
 12404 ;;		_main
 12405 ;; This function uses a non-reentrant model
 12406 ;;
 12407                           
 12408                           
 12409                           ;psect for function _LCDWriteString
 12410  11B3                     _LCDWriteString:	
 12411  11B3                     l3024:	
 12412                           ;lcd.c: 178: while (*characters)
 12413                           
 12414                           ;incstack = 0
 12415                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12416                           
 12417  11B3  087C               	movf	LCDWriteString@characters,w
 12418  11B4  0084               	movwf	4
 12419  11B5  087D               	movf	LCDWriteString@characters+1,w
 12420  11B6  0085               	movwf	5
 12421  11B7  0012               	moviw fsr0++
 12422  11B8  1903               	btfsc	3,2
 12423  11B9  0008               	return
 12424                           
 12425                           ;lcd.c: 179: LCDWriteCharacter(*characters++);
 12426  11BA  087C               	movf	LCDWriteString@characters,w
 12427  11BB  0084               	movwf	4
 12428  11BC  087D               	movf	LCDWriteString@characters+1,w
 12429  11BD  0085               	movwf	5
 12430  11BE  0800               	movf	0,w	;code access
 12431  11BF  3195  2551  3191   	fcall	_LCDWriteCharacter
 12432  11C2  3001               	movlw	1
 12433  11C3  07FC               	addwf	LCDWriteString@characters,f
 12434  11C4  3000               	movlw	0
 12435  11C5  3DFD               	addwfc	LCDWriteString@characters+1,f
 12436  11C6  29B3               	goto	l3024
 12437  11C7                     __end_of_LCDWriteString:	
 12438                           
 12439                           	psect	text32
 12440  0BC5                     __ptext32:	
 12441 ;; *************** function _LCDWriteInt *****************
 12442 ;; Defined at:
 12443 ;;		line 190 in file "lcd.c"
 12444 ;; Parameters:    Size  Location     Type
 12445 ;;  value           2    0[BANK0 ] int 
 12446 ;;  fieldLength     1    2[BANK0 ] char 
 12447 ;;  numPlaces       1    3[BANK0 ] unsigned char 
 12448 ;;  sign            1    4[BANK0 ] unsigned char 
 12449 ;; Auto vars:     Size  Location     Type
 12450 ;;  str             5    9[BANK0 ] unsigned char [5]
 12451 ;;  i               1   15[BANK0 ] unsigned char 
 12452 ;;  j               1   14[BANK0 ] unsigned char 
 12453 ;; Return value:  Size  Location     Type
 12454 ;;                  1    wreg      void 
 12455 ;; Registers used:
 12456 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12457 ;; Tracked objects:
 12458 ;;		On entry : 0/0
 12459 ;;		On exit  : 0/0
 12460 ;;		Unchanged: 0/0
 12461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12462 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12463 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12464 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12465 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12466 ;;Total ram usage:       16 bytes
 12467 ;; Hardware stack levels used:    1
 12468 ;; Hardware stack levels required when called:    2
 12469 ;; This function calls:
 12470 ;;		_LCDWriteCharacter
 12471 ;;		___awdiv
 12472 ;;		___lwmod
 12473 ;; This function is called by:
 12474 ;;		_main
 12475 ;; This function uses a non-reentrant model
 12476 ;;
 12477                           
 12478                           
 12479                           ;psect for function _LCDWriteInt
 12480  0BC5                     _LCDWriteInt:	
 12481                           
 12482                           ;lcd.c: 192: uint8_t str[5]={0,0,0,0,0};
 12483                           
 12484                           ;incstack = 0
 12485                           ; Regs used in _LCDWriteInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12486  0BC5  30C0               	movlw	low LCDWriteInt@F13688
 12487  0BC6  0086               	movwf	6
 12488  0BC7  3000               	movlw	high LCDWriteInt@F13688
 12489  0BC8  0087               	movwf	7
 12490  0BC9  3029               	movlw	low LCDWriteInt@str
 12491  0BCA  0084               	movwf	4
 12492  0BCB  3000               	movlw	high LCDWriteInt@str
 12493  0BCC  0085               	movwf	5
 12494  0BCD  3005               	movlw	5
 12495  0BCE  0020               	movlb	0	; select bank0
 12496  0BCF  00A5               	movwf	??_LCDWriteInt
 12497  0BD0                     u3460:	
 12498  0BD0  0016               	moviw fsr1++
 12499  0BD1  001A               	movwi fsr0++
 12500  0BD2  0BA5               	decfsz	??_LCDWriteInt,f
 12501  0BD3  2BD0               	goto	u3460
 12502                           
 12503                           ;lcd.c: 193: uint8_t i=4,j=0;
 12504  0BD4  3004               	movlw	4
 12505  0BD5  00A5               	movwf	??_LCDWriteInt
 12506  0BD6  0825               	movf	??_LCDWriteInt,w
 12507  0BD7  00AF               	movwf	LCDWriteInt@i
 12508  0BD8  01AE               	clrf	LCDWriteInt@j
 12509                           
 12510                           ;lcd.c: 195: if(value<0)
 12511  0BD9  1FA1               	btfss	LCDWriteInt@value+1,7
 12512  0BDA  2BE6               	goto	l3038
 12513                           
 12514                           ;lcd.c: 196: {
 12515                           ;lcd.c: 197: LCDWriteCharacter('-');
 12516  0BDB  302D               	movlw	45
 12517  0BDC  3195  2551  318B   	fcall	_LCDWriteCharacter
 12518                           
 12519                           ;lcd.c: 198: value=value*-1;
 12520  0BDF  0020               	movlb	0	; select bank0
 12521  0BE0  09A0               	comf	LCDWriteInt@value,f
 12522  0BE1  09A1               	comf	LCDWriteInt@value+1,f
 12523  0BE2  0AA0               	incf	LCDWriteInt@value,f
 12524  0BE3  1903               	skipnz
 12525  0BE4  0AA1               	incf	LCDWriteInt@value+1,f
 12526                           
 12527                           ;lcd.c: 199: }
 12528  0BE5  2BED               	goto	l3048
 12529  0BE6                     l3038:	
 12530                           
 12531                           ;lcd.c: 201: else
 12532                           ;lcd.c: 202: {
 12533                           ;lcd.c: 203: if(sign == 1)
 12534  0BE6  0324               	decf	LCDWriteInt@sign,w
 12535  0BE7  1D03               	btfss	3,2
 12536  0BE8  2BED               	goto	l3048
 12537                           
 12538                           ;lcd.c: 204: {
 12539                           ;lcd.c: 205: LCDWriteCharacter('+');
 12540  0BE9  302B               	movlw	43
 12541  0BEA  3195  2551  318B   	fcall	_LCDWriteCharacter
 12542  0BED                     l3048:	
 12543                           ;lcd.c: 206: }
 12544                           ;lcd.c: 207: }
 12545                           ;lcd.c: 209: while(value)
 12546                           
 12547  0BED  0020               	movlb	0	; select bank0
 12548  0BEE  0820               	movf	LCDWriteInt@value,w
 12549  0BEF  0421               	iorwf	LCDWriteInt@value+1,w
 12550  0BF0  1903               	btfsc	3,2
 12551  0BF1  2C1A               	goto	l3050
 12552                           
 12553                           ;lcd.c: 210: {
 12554                           ;lcd.c: 211: str[i]=(uint16_t)value%10;
 12555  0BF2  300A               	movlw	10
 12556  0BF3  00F0               	movwf	___lwmod@divisor
 12557  0BF4  3000               	movlw	0
 12558  0BF5  00F1               	movwf	___lwmod@divisor+1
 12559  0BF6  0020               	movlb	0	; select bank0
 12560  0BF7  0821               	movf	LCDWriteInt@value+1,w
 12561  0BF8  00F3               	movwf	___lwmod@dividend+1
 12562  0BF9  0820               	movf	LCDWriteInt@value,w
 12563  0BFA  00F2               	movwf	___lwmod@dividend
 12564  0BFB  3192  22E0  318B   	fcall	___lwmod
 12565  0BFE  0870               	movf	?___lwmod,w
 12566  0BFF  0020               	movlb	0	; select bank0
 12567  0C00  00A5               	movwf	??_LCDWriteInt
 12568  0C01  082F               	movf	LCDWriteInt@i,w
 12569  0C02  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 12570  0C03  0086               	movwf	6
 12571  0C04  0187               	clrf	7
 12572  0C05  0825               	movf	??_LCDWriteInt,w
 12573  0C06  0081               	movwf	1
 12574                           
 12575                           ;lcd.c: 212: value=value/10;
 12576  0C07  300A               	movlw	10
 12577  0C08  00F0               	movwf	___awdiv@divisor
 12578  0C09  3000               	movlw	0
 12579  0C0A  00F1               	movwf	___awdiv@divisor+1
 12580  0C0B  0821               	movf	LCDWriteInt@value+1,w
 12581  0C0C  00F3               	movwf	___awdiv@dividend+1
 12582  0C0D  0820               	movf	LCDWriteInt@value,w
 12583  0C0E  00F2               	movwf	___awdiv@dividend
 12584  0C0F  3195  2500  318B   	fcall	___awdiv
 12585  0C12  0871               	movf	?___awdiv+1,w
 12586  0C13  0020               	movlb	0	; select bank0
 12587  0C14  00A1               	movwf	LCDWriteInt@value+1
 12588  0C15  0870               	movf	?___awdiv,w
 12589  0C16  00A0               	movwf	LCDWriteInt@value
 12590                           
 12591                           ;lcd.c: 213: i--;
 12592  0C17  3001               	movlw	1
 12593  0C18  02AF               	subwf	LCDWriteInt@i,f
 12594  0C19  2BED               	goto	l3048
 12595  0C1A                     l3050:	
 12596                           
 12597                           ;lcd.c: 214: }
 12598                           ;lcd.c: 215: if(fieldLength==-1)
 12599  0C1A  0A22               	incf	LCDWriteInt@fieldLength,w
 12600  0C1B  1903               	btfsc	3,2
 12601  0C1C  2C22               	goto	l3056
 12602  0C1D  2C2A               	goto	l3058
 12603  0C1E                     l3054:	
 12604                           ;lcd.c: 216: {
 12605                           ;lcd.c: 217: while(str[j]==0)
 12606                           
 12607                           
 12608                           ;lcd.c: 218: {
 12609                           ;lcd.c: 219: j++;
 12610  0C1E  3001               	movlw	1
 12611  0C1F  00A5               	movwf	??_LCDWriteInt
 12612  0C20  0825               	movf	??_LCDWriteInt,w
 12613  0C21  07AE               	addwf	LCDWriteInt@j,f
 12614  0C22                     l3056:	
 12615  0C22  082E               	movf	LCDWriteInt@j,w
 12616  0C23  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 12617  0C24  0086               	movwf	6
 12618  0C25  0187               	clrf	7
 12619  0C26  0801               	movf	1,w
 12620  0C27  1D03               	btfss	3,2
 12621  0C28  2C30               	goto	l3060
 12622  0C29  2C1E               	goto	l3054
 12623  0C2A                     l3058:	
 12624                           ;lcd.c: 220: }
 12625                           ;lcd.c: 221: }
 12626                           
 12627                           
 12628                           ;lcd.c: 222: else
 12629                           ;lcd.c: 223: {
 12630                           ;lcd.c: 224: j=(uint8_t)(5-fieldLength);
 12631  0C2A  0322               	decf	LCDWriteInt@fieldLength,w
 12632  0C2B  3AFF               	xorlw	255
 12633  0C2C  3E05               	addlw	5
 12634  0C2D  00A5               	movwf	??_LCDWriteInt
 12635  0C2E  0825               	movf	??_LCDWriteInt,w
 12636  0C2F  00AE               	movwf	LCDWriteInt@j
 12637  0C30                     l3060:	
 12638                           
 12639                           ;lcd.c: 225: }
 12640                           ;lcd.c: 227: for(i=j;i<(5-numPlaces);i++)
 12641  0C30  082E               	movf	LCDWriteInt@j,w
 12642  0C31  00A5               	movwf	??_LCDWriteInt
 12643  0C32  0825               	movf	??_LCDWriteInt,w
 12644  0C33  00AF               	movwf	LCDWriteInt@i
 12645  0C34                     l3066:	
 12646  0C34  0823               	movf	LCDWriteInt@numPlaces,w
 12647  0C35  00A5               	movwf	??_LCDWriteInt
 12648  0C36  01A6               	clrf	??_LCDWriteInt+1
 12649  0C37  09A5               	comf	??_LCDWriteInt,f
 12650  0C38  09A6               	comf	??_LCDWriteInt+1,f
 12651  0C39  0AA5               	incf	??_LCDWriteInt,f
 12652  0C3A  1903               	skipnz
 12653  0C3B  0AA6               	incf	??_LCDWriteInt+1,f
 12654  0C3C  0825               	movf	??_LCDWriteInt,w
 12655  0C3D  3E05               	addlw	5
 12656  0C3E  00A7               	movwf	??_LCDWriteInt+2
 12657  0C3F  3000               	movlw	0
 12658  0C40  3D26               	addwfc	??_LCDWriteInt+1,w
 12659  0C41  00A8               	movwf	??_LCDWriteInt+3
 12660  0C42  0828               	movf	??_LCDWriteInt+3,w
 12661  0C43  3A80               	xorlw	128
 12662  0C44  3C80               	sublw	128
 12663  0C45  1D03               	skipz
 12664  0C46  2C49               	goto	u3525
 12665  0C47  0827               	movf	??_LCDWriteInt+2,w
 12666  0C48  022F               	subwf	LCDWriteInt@i,w
 12667  0C49                     u3525:	
 12668  0C49  1803               	btfsc	3,0
 12669  0C4A  2C5B               	goto	l3068
 12670                           
 12671                           ;lcd.c: 228: {
 12672                           ;lcd.c: 229: LCDWriteCharacter((uint8_t)(48+str[i]));
 12673  0C4B  0020               	movlb	0	; select bank0
 12674  0C4C  082F               	movf	LCDWriteInt@i,w
 12675  0C4D  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 12676  0C4E  0086               	movwf	6
 12677  0C4F  0187               	clrf	7
 12678  0C50  0801               	movf	1,w
 12679  0C51  3E30               	addlw	48
 12680  0C52  3195  2551  318B   	fcall	_LCDWriteCharacter
 12681  0C55  3001               	movlw	1
 12682  0C56  0020               	movlb	0	; select bank0
 12683  0C57  00A5               	movwf	??_LCDWriteInt
 12684  0C58  0825               	movf	??_LCDWriteInt,w
 12685  0C59  07AF               	addwf	LCDWriteInt@i,f
 12686  0C5A  2C34               	goto	l3066
 12687  0C5B                     l3068:	
 12688                           
 12689                           ;lcd.c: 230: }
 12690                           ;lcd.c: 232: if(numPlaces == 1)
 12691  0C5B  0020               	movlb	0	; select bank0
 12692  0C5C  0323               	decf	LCDWriteInt@numPlaces,w
 12693  0C5D  1D03               	btfss	3,2
 12694  0C5E  2C69               	goto	l3072
 12695                           
 12696                           ;lcd.c: 233: {
 12697                           ;lcd.c: 234: LCDWriteCharacter(46);
 12698  0C5F  302E               	movlw	46
 12699  0C60  3195  2551  318B   	fcall	_LCDWriteCharacter
 12700                           
 12701                           ;lcd.c: 235: LCDWriteCharacter ((uint8_t)(48+str[4]));
 12702  0C63  0020               	movlb	0	; select bank0
 12703  0C64  082D               	movf	LCDWriteInt@str+4,w
 12704  0C65  3E30               	addlw	48
 12705  0C66  3195  2551  318B   	fcall	_LCDWriteCharacter
 12706  0C69                     l3072:	
 12707                           
 12708                           ;lcd.c: 236: }
 12709                           ;lcd.c: 238: if(numPlaces == 2)
 12710  0C69  3002               	movlw	2
 12711  0C6A  0020               	movlb	0	; select bank0
 12712  0C6B  0623               	xorwf	LCDWriteInt@numPlaces,w
 12713  0C6C  1D03               	btfss	3,2
 12714  0C6D  0008               	return
 12715                           
 12716                           ;lcd.c: 239: {
 12717                           ;lcd.c: 240: LCDWriteCharacter(46);
 12718  0C6E  302E               	movlw	46
 12719  0C6F  3195  2551  318B   	fcall	_LCDWriteCharacter
 12720                           
 12721                           ;lcd.c: 241: LCDWriteCharacter((uint8_t)(48+str[3]));
 12722  0C72  0020               	movlb	0	; select bank0
 12723  0C73  082C               	movf	LCDWriteInt@str+3,w
 12724  0C74  3E30               	addlw	48
 12725  0C75  3195  2551  318B   	fcall	_LCDWriteCharacter
 12726                           
 12727                           ;lcd.c: 242: LCDWriteCharacter((uint8_t)(48+str[4]));
 12728  0C78  0020               	movlb	0	; select bank0
 12729  0C79  082D               	movf	LCDWriteInt@str+4,w
 12730  0C7A  3E30               	addlw	48
 12731  0C7B  3195  2551         	fcall	_LCDWriteCharacter
 12732  0C7D  0008               	return
 12733  0C7E                     __end_of_LCDWriteInt:	
 12734                           
 12735                           	psect	text33
 12736  12E0                     __ptext33:	
 12737 ;; *************** function ___lwmod *****************
 12738 ;; Defined at:
 12739 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
 12740 ;; Parameters:    Size  Location     Type
 12741 ;;  divisor         2    0[COMMON] unsigned int 
 12742 ;;  dividend        2    2[COMMON] unsigned int 
 12743 ;; Auto vars:     Size  Location     Type
 12744 ;;  counter         1    5[COMMON] unsigned char 
 12745 ;; Return value:  Size  Location     Type
 12746 ;;                  2    0[COMMON] unsigned int 
 12747 ;; Registers used:
 12748 ;;		wreg, status,2, status,0
 12749 ;; Tracked objects:
 12750 ;;		On entry : 0/0
 12751 ;;		On exit  : 0/0
 12752 ;;		Unchanged: 0/0
 12753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12754 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12755 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12756 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12757 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12758 ;;Total ram usage:        6 bytes
 12759 ;; Hardware stack levels used:    1
 12760 ;; This function calls:
 12761 ;;		Nothing
 12762 ;; This function is called by:
 12763 ;;		_LCDWriteInt
 12764 ;; This function uses a non-reentrant model
 12765 ;;
 12766                           
 12767                           
 12768                           ;psect for function ___lwmod
 12769  12E0                     ___lwmod:	
 12770                           
 12771                           ;incstack = 0
 12772                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 12773  12E0  0870               	movf	___lwmod@divisor,w
 12774  12E1  0471               	iorwf	___lwmod@divisor+1,w
 12775  12E2  1903               	btfsc	3,2
 12776  12E3  2B07               	goto	l2848
 12777  12E4  01F5               	clrf	___lwmod@counter
 12778  12E5  0AF5               	incf	___lwmod@counter,f
 12779  12E6                     l2838:	
 12780  12E6  1BF1               	btfsc	___lwmod@divisor+1,7
 12781  12E7  2AF2               	goto	l2840
 12782  12E8  3001               	movlw	1
 12783  12E9                     u3075:	
 12784  12E9  35F0               	lslf	___lwmod@divisor,f
 12785  12EA  0DF1               	rlf	___lwmod@divisor+1,f
 12786  12EB  0B89               	decfsz	9,f
 12787  12EC  2AE9               	goto	u3075
 12788  12ED  3001               	movlw	1
 12789  12EE  00F4               	movwf	??___lwmod
 12790  12EF  0874               	movf	??___lwmod,w
 12791  12F0  07F5               	addwf	___lwmod@counter,f
 12792  12F1  2AE6               	goto	l2838
 12793  12F2                     l2840:	
 12794  12F2  0871               	movf	___lwmod@divisor+1,w
 12795  12F3  0273               	subwf	___lwmod@dividend+1,w
 12796  12F4  1D03               	skipz
 12797  12F5  2AF8               	goto	u3095
 12798  12F6  0870               	movf	___lwmod@divisor,w
 12799  12F7  0272               	subwf	___lwmod@dividend,w
 12800  12F8                     u3095:	
 12801  12F8  1C03               	skipc
 12802  12F9  2AFE               	goto	l2844
 12803  12FA  0870               	movf	___lwmod@divisor,w
 12804  12FB  02F2               	subwf	___lwmod@dividend,f
 12805  12FC  0871               	movf	___lwmod@divisor+1,w
 12806  12FD  3BF3               	subwfb	___lwmod@dividend+1,f
 12807  12FE                     l2844:	
 12808  12FE  3001               	movlw	1
 12809  12FF                     u3105:	
 12810  12FF  36F1               	lsrf	___lwmod@divisor+1,f
 12811  1300  0CF0               	rrf	___lwmod@divisor,f
 12812  1301  0B89               	decfsz	9,f
 12813  1302  2AFF               	goto	u3105
 12814  1303  3001               	movlw	1
 12815  1304  02F5               	subwf	___lwmod@counter,f
 12816  1305  1D03               	btfss	3,2
 12817  1306  2AF2               	goto	l2840
 12818  1307                     l2848:	
 12819  1307  0873               	movf	___lwmod@dividend+1,w
 12820  1308  00F1               	movwf	?___lwmod+1
 12821  1309  0872               	movf	___lwmod@dividend,w
 12822  130A  00F0               	movwf	?___lwmod
 12823  130B  0008               	return
 12824  130C                     __end_of___lwmod:	
 12825                           
 12826                           	psect	text34
 12827  1500                     __ptext34:	
 12828 ;; *************** function ___awdiv *****************
 12829 ;; Defined at:
 12830 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
 12831 ;; Parameters:    Size  Location     Type
 12832 ;;  divisor         2    0[COMMON] int 
 12833 ;;  dividend        2    2[COMMON] int 
 12834 ;; Auto vars:     Size  Location     Type
 12835 ;;  quotient        2    7[COMMON] int 
 12836 ;;  sign            1    6[COMMON] unsigned char 
 12837 ;;  counter         1    5[COMMON] unsigned char 
 12838 ;; Return value:  Size  Location     Type
 12839 ;;                  2    0[COMMON] int 
 12840 ;; Registers used:
 12841 ;;		wreg, status,2, status,0
 12842 ;; Tracked objects:
 12843 ;;		On entry : 0/0
 12844 ;;		On exit  : 0/0
 12845 ;;		Unchanged: 0/0
 12846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12847 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12848 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12849 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12850 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12851 ;;Total ram usage:        9 bytes
 12852 ;; Hardware stack levels used:    1
 12853 ;; This function calls:
 12854 ;;		Nothing
 12855 ;; This function is called by:
 12856 ;;		_LCDWriteInt
 12857 ;; This function uses a non-reentrant model
 12858 ;;
 12859                           
 12860                           
 12861                           ;psect for function ___awdiv
 12862  1500                     ___awdiv:	
 12863                           
 12864                           ;incstack = 0
 12865                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 12866  1500  01F6               	clrf	___awdiv@sign
 12867  1501  1FF1               	btfss	___awdiv@divisor+1,7
 12868  1502  2D0A               	goto	l2744
 12869  1503  09F0               	comf	___awdiv@divisor,f
 12870  1504  09F1               	comf	___awdiv@divisor+1,f
 12871  1505  0AF0               	incf	___awdiv@divisor,f
 12872  1506  1903               	skipnz
 12873  1507  0AF1               	incf	___awdiv@divisor+1,f
 12874  1508  01F6               	clrf	___awdiv@sign
 12875  1509  0AF6               	incf	___awdiv@sign,f
 12876  150A                     l2744:	
 12877  150A  1FF3               	btfss	___awdiv@dividend+1,7
 12878  150B  2D15               	goto	l2750
 12879  150C  09F2               	comf	___awdiv@dividend,f
 12880  150D  09F3               	comf	___awdiv@dividend+1,f
 12881  150E  0AF2               	incf	___awdiv@dividend,f
 12882  150F  1903               	skipnz
 12883  1510  0AF3               	incf	___awdiv@dividend+1,f
 12884  1511  3001               	movlw	1
 12885  1512  00F4               	movwf	??___awdiv
 12886  1513  0874               	movf	??___awdiv,w
 12887  1514  06F6               	xorwf	___awdiv@sign,f
 12888  1515                     l2750:	
 12889  1515  01F7               	clrf	___awdiv@quotient
 12890  1516  01F8               	clrf	___awdiv@quotient+1
 12891  1517  0870               	movf	___awdiv@divisor,w
 12892  1518  0471               	iorwf	___awdiv@divisor+1,w
 12893  1519  1903               	btfsc	3,2
 12894  151A  2D44               	goto	l2772
 12895  151B  01F5               	clrf	___awdiv@counter
 12896  151C  0AF5               	incf	___awdiv@counter,f
 12897  151D                     l2760:	
 12898  151D  1BF1               	btfsc	___awdiv@divisor+1,7
 12899  151E  2D29               	goto	l2762
 12900  151F  3001               	movlw	1
 12901  1520                     u2905:	
 12902  1520  35F0               	lslf	___awdiv@divisor,f
 12903  1521  0DF1               	rlf	___awdiv@divisor+1,f
 12904  1522  0B89               	decfsz	9,f
 12905  1523  2D20               	goto	u2905
 12906  1524  3001               	movlw	1
 12907  1525  00F4               	movwf	??___awdiv
 12908  1526  0874               	movf	??___awdiv,w
 12909  1527  07F5               	addwf	___awdiv@counter,f
 12910  1528  2D1D               	goto	l2760
 12911  1529                     l2762:	
 12912  1529  3001               	movlw	1
 12913  152A                     u2925:	
 12914  152A  35F7               	lslf	___awdiv@quotient,f
 12915  152B  0DF8               	rlf	___awdiv@quotient+1,f
 12916  152C  0B89               	decfsz	9,f
 12917  152D  2D2A               	goto	u2925
 12918  152E  0871               	movf	___awdiv@divisor+1,w
 12919  152F  0273               	subwf	___awdiv@dividend+1,w
 12920  1530  1D03               	skipz
 12921  1531  2D34               	goto	u2935
 12922  1532  0870               	movf	___awdiv@divisor,w
 12923  1533  0272               	subwf	___awdiv@dividend,w
 12924  1534                     u2935:	
 12925  1534  1C03               	skipc
 12926  1535  2D3B               	goto	l2768
 12927  1536  0870               	movf	___awdiv@divisor,w
 12928  1537  02F2               	subwf	___awdiv@dividend,f
 12929  1538  0871               	movf	___awdiv@divisor+1,w
 12930  1539  3BF3               	subwfb	___awdiv@dividend+1,f
 12931  153A  1477               	bsf	___awdiv@quotient,0
 12932  153B                     l2768:	
 12933  153B  3001               	movlw	1
 12934  153C                     u2945:	
 12935  153C  36F1               	lsrf	___awdiv@divisor+1,f
 12936  153D  0CF0               	rrf	___awdiv@divisor,f
 12937  153E  0B89               	decfsz	9,f
 12938  153F  2D3C               	goto	u2945
 12939  1540  3001               	movlw	1
 12940  1541  02F5               	subwf	___awdiv@counter,f
 12941  1542  1D03               	btfss	3,2
 12942  1543  2D29               	goto	l2762
 12943  1544                     l2772:	
 12944  1544  0876               	movf	___awdiv@sign,w
 12945  1545  1903               	btfsc	3,2
 12946  1546  2D4C               	goto	l2776
 12947  1547  09F7               	comf	___awdiv@quotient,f
 12948  1548  09F8               	comf	___awdiv@quotient+1,f
 12949  1549  0AF7               	incf	___awdiv@quotient,f
 12950  154A  1903               	skipnz
 12951  154B  0AF8               	incf	___awdiv@quotient+1,f
 12952  154C                     l2776:	
 12953  154C  0878               	movf	___awdiv@quotient+1,w
 12954  154D  00F1               	movwf	?___awdiv+1
 12955  154E  0877               	movf	___awdiv@quotient,w
 12956  154F  00F0               	movwf	?___awdiv
 12957  1550  0008               	return
 12958  1551                     __end_of___awdiv:	
 12959                           
 12960                           	psect	text35
 12961  1551                     __ptext35:	
 12962 ;; *************** function _LCDWriteCharacter *****************
 12963 ;; Defined at:
 12964 ;;		line 140 in file "lcd.c"
 12965 ;; Parameters:    Size  Location     Type
 12966 ;;  character       1    wreg     const unsigned char 
 12967 ;; Auto vars:     Size  Location     Type
 12968 ;;  character       1    9[COMMON] const unsigned char 
 12969 ;;  base            2   10[COMMON] unsigned int 
 12970 ;; Return value:  Size  Location     Type
 12971 ;;                  1    wreg      void 
 12972 ;; Registers used:
 12973 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12974 ;; Tracked objects:
 12975 ;;		On entry : 0/0
 12976 ;;		On exit  : 0/0
 12977 ;;		Unchanged: 0/0
 12978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12980 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12981 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12982 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12983 ;;Total ram usage:        6 bytes
 12984 ;; Hardware stack levels used:    1
 12985 ;; Hardware stack levels required when called:    1
 12986 ;; This function calls:
 12987 ;;		_LCDWrite
 12988 ;;		___wmul
 12989 ;; This function is called by:
 12990 ;;		_main
 12991 ;;		_LCDWriteString
 12992 ;;		_LCDWriteInt
 12993 ;; This function uses a non-reentrant model
 12994 ;;
 12995                           
 12996                           
 12997                           ;psect for function _LCDWriteCharacter
 12998  1551                     _LCDWriteCharacter:	
 12999                           
 13000                           ;incstack = 0
 13001                           ; Regs used in _LCDWriteCharacter: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13002                           ;LCDWriteCharacter@character stored from wreg
 13003  1551  00F9               	movwf	LCDWriteCharacter@character
 13004                           
 13005                           ;lcd.c: 142: uint16_t base;
 13006                           ;lcd.c: 143: base = character - 0x20;
 13007  1552  0879               	movf	LCDWriteCharacter@character,w
 13008  1553  3EE0               	addlw	224
 13009  1554  00FA               	movwf	LCDWriteCharacter@base
 13010  1555  30FF               	movlw	255
 13011  1556  1803               	skipnc
 13012  1557  3000               	movlw	0
 13013  1558  00FB               	movwf	LCDWriteCharacter@base+1
 13014                           
 13015                           ;lcd.c: 144: base *= 3;
 13016  1559  3003               	movlw	3
 13017  155A  00F0               	movwf	___wmul@multiplier
 13018  155B  3000               	movlw	0
 13019  155C  00F1               	movwf	___wmul@multiplier+1
 13020  155D  087B               	movf	LCDWriteCharacter@base+1,w
 13021  155E  00F3               	movwf	___wmul@multiplicand+1
 13022  155F  087A               	movf	LCDWriteCharacter@base,w
 13023  1560  00F2               	movwf	___wmul@multiplicand
 13024  1561  3192  221D  3195   	fcall	___wmul
 13025  1564  0871               	movf	?___wmul+1,w
 13026  1565  00FB               	movwf	LCDWriteCharacter@base+1
 13027  1566  0870               	movf	?___wmul,w
 13028  1567  00FA               	movwf	LCDWriteCharacter@base
 13029                           
 13030                           ;lcd.c: 145: LCDWrite(1,fonts[base]);
 13031  1568  087B               	movf	LCDWriteCharacter@base+1,w
 13032  1569  0085               	movwf	5
 13033  156A  087A               	movf	LCDWriteCharacter@base,w
 13034  156B  0084               	movwf	4
 13035  156C  3000               	movlw	low (_fonts| (0+32768))
 13036  156D  0784               	addwf	4,f
 13037  156E  3088               	movlw	high (_fonts| (0+32768))
 13038  156F  3D85               	addwfc	5,f
 13039  1570  0800               	movf	0,w	;code access
 13040  1571  00F6               	movwf	??_LCDWriteCharacter
 13041  1572  0876               	movf	??_LCDWriteCharacter,w
 13042  1573  00F0               	movwf	LCDWrite@data
 13043  1574  3001               	movlw	1
 13044  1575  3192  2295  3195   	fcall	_LCDWrite
 13045                           
 13046                           ;lcd.c: 146: LCDWrite(1,fonts[base + 1]);
 13047  1578  087A               	movf	LCDWriteCharacter@base,w
 13048  1579  3E01               	addlw	1
 13049  157A  00F6               	movwf	??_LCDWriteCharacter
 13050  157B  3000               	movlw	0
 13051  157C  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 13052  157D  00F7               	movwf	??_LCDWriteCharacter+1
 13053  157E  3000               	movlw	low (_fonts| (0+32768))
 13054  157F  0776               	addwf	??_LCDWriteCharacter,w
 13055  1580  0084               	movwf	4
 13056  1581  3088               	movlw	high (_fonts| (0+32768))
 13057  1582  3D77               	addwfc	??_LCDWriteCharacter+1,w
 13058  1583  0085               	movwf	5
 13059  1584  0800               	movf	0,w	;code access
 13060  1585  00F8               	movwf	??_LCDWriteCharacter+2
 13061  1586  0878               	movf	??_LCDWriteCharacter+2,w
 13062  1587  00F0               	movwf	LCDWrite@data
 13063  1588  3001               	movlw	1
 13064  1589  3192  2295  3195   	fcall	_LCDWrite
 13065                           
 13066                           ;lcd.c: 147: LCDWrite(1,fonts[base + 2]);
 13067  158C  087A               	movf	LCDWriteCharacter@base,w
 13068  158D  3E02               	addlw	2
 13069  158E  00F6               	movwf	??_LCDWriteCharacter
 13070  158F  3000               	movlw	0
 13071  1590  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 13072  1591  00F7               	movwf	??_LCDWriteCharacter+1
 13073  1592  3000               	movlw	low (_fonts| (0+32768))
 13074  1593  0776               	addwf	??_LCDWriteCharacter,w
 13075  1594  0084               	movwf	4
 13076  1595  3088               	movlw	high (_fonts| (0+32768))
 13077  1596  3D77               	addwfc	??_LCDWriteCharacter+1,w
 13078  1597  0085               	movwf	5
 13079  1598  0800               	movf	0,w	;code access
 13080  1599  00F8               	movwf	??_LCDWriteCharacter+2
 13081  159A  0878               	movf	??_LCDWriteCharacter+2,w
 13082  159B  00F0               	movwf	LCDWrite@data
 13083  159C  3001               	movlw	1
 13084  159D  3192  2295  3195   	fcall	_LCDWrite
 13085                           
 13086                           ;lcd.c: 148: LCDWrite(1, 0x00);
 13087  15A0  01F0               	clrf	LCDWrite@data
 13088  15A1  3001               	movlw	1
 13089  15A2  3192  2295         	fcall	_LCDWrite
 13090  15A4  0008               	return
 13091  15A5                     __end_of_LCDWriteCharacter:	
 13092                           
 13093                           	psect	text36
 13094  121D                     __ptext36:	
 13095 ;; *************** function ___wmul *****************
 13096 ;; Defined at:
 13097 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
 13098 ;; Parameters:    Size  Location     Type
 13099 ;;  multiplier      2    0[COMMON] unsigned int 
 13100 ;;  multiplicand    2    2[COMMON] unsigned int 
 13101 ;; Auto vars:     Size  Location     Type
 13102 ;;  product         2    4[COMMON] unsigned int 
 13103 ;; Return value:  Size  Location     Type
 13104 ;;                  2    0[COMMON] unsigned int 
 13105 ;; Registers used:
 13106 ;;		wreg, status,2, status,0
 13107 ;; Tracked objects:
 13108 ;;		On entry : 0/0
 13109 ;;		On exit  : 0/0
 13110 ;;		Unchanged: 0/0
 13111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13112 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13113 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13115 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13116 ;;Total ram usage:        6 bytes
 13117 ;; Hardware stack levels used:    1
 13118 ;; This function calls:
 13119 ;;		Nothing
 13120 ;; This function is called by:
 13121 ;;		_readIAnalog
 13122 ;;		_LCDWriteCharacter
 13123 ;;		_eval_poly
 13124 ;; This function uses a non-reentrant model
 13125 ;;
 13126                           
 13127                           
 13128                           ;psect for function ___wmul
 13129  121D                     ___wmul:	
 13130                           
 13131                           ;incstack = 0
 13132                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 13133  121D  01F4               	clrf	___wmul@product
 13134  121E  01F5               	clrf	___wmul@product+1
 13135  121F                     l2264:	
 13136  121F  1C70               	btfss	___wmul@multiplier,0
 13137  1220  2A25               	goto	l580
 13138  1221  0872               	movf	___wmul@multiplicand,w
 13139  1222  07F4               	addwf	___wmul@product,f
 13140  1223  0873               	movf	___wmul@multiplicand+1,w
 13141  1224  3DF5               	addwfc	___wmul@product+1,f
 13142  1225                     l580:	
 13143  1225  3001               	movlw	1
 13144  1226                     u2155:	
 13145  1226  35F2               	lslf	___wmul@multiplicand,f
 13146  1227  0DF3               	rlf	___wmul@multiplicand+1,f
 13147  1228  0B89               	decfsz	9,f
 13148  1229  2A26               	goto	u2155
 13149  122A  3001               	movlw	1
 13150  122B                     u2165:	
 13151  122B  36F1               	lsrf	___wmul@multiplier+1,f
 13152  122C  0CF0               	rrf	___wmul@multiplier,f
 13153  122D  0B89               	decfsz	9,f
 13154  122E  2A2B               	goto	u2165
 13155  122F  0870               	movf	___wmul@multiplier,w
 13156  1230  0471               	iorwf	___wmul@multiplier+1,w
 13157  1231  1D03               	btfss	3,2
 13158  1232  2A1F               	goto	l2264
 13159  1233  0875               	movf	___wmul@product+1,w
 13160  1234  00F1               	movwf	?___wmul+1
 13161  1235  0874               	movf	___wmul@product,w
 13162  1236  00F0               	movwf	?___wmul
 13163  1237  0008               	return
 13164  1238                     __end_of___wmul:	
 13165                           
 13166                           	psect	text37
 13167  1295                     __ptext37:	
 13168 ;; *************** function _LCDWrite *****************
 13169 ;; Defined at:
 13170 ;;		line 281 in file "lcd.c"
 13171 ;; Parameters:    Size  Location     Type
 13172 ;;  data_or_comm    1    wreg     unsigned char 
 13173 ;;  data            1    0[COMMON] unsigned char 
 13174 ;; Auto vars:     Size  Location     Type
 13175 ;;  data_or_comm    1    2[COMMON] unsigned char 
 13176 ;;  i               1    4[COMMON] unsigned char 
 13177 ;;  d               1    3[COMMON] unsigned char 
 13178 ;; Return value:  Size  Location     Type
 13179 ;;                  1    wreg      void 
 13180 ;; Registers used:
 13181 ;;		wreg, status,2, status,0
 13182 ;; Tracked objects:
 13183 ;;		On entry : 0/0
 13184 ;;		On exit  : 0/0
 13185 ;;		Unchanged: 0/0
 13186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13187 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13188 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13189 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13190 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13191 ;;Total ram usage:        5 bytes
 13192 ;; Hardware stack levels used:    1
 13193 ;; This function calls:
 13194 ;;		Nothing
 13195 ;; This function is called by:
 13196 ;;		_gotoXY
 13197 ;;		_LCDWriteCharacter
 13198 ;;		_LCDClear
 13199 ;;		_LCDInit
 13200 ;; This function uses a non-reentrant model
 13201 ;;
 13202                           
 13203                           
 13204                           ;psect for function _LCDWrite
 13205  1295                     _LCDWrite:	
 13206                           
 13207                           ;incstack = 0
 13208                           ; Regs used in _LCDWrite: [wreg+status,2+status,0]
 13209                           ;LCDWrite@data_or_command stored from wreg
 13210  1295  00F2               	movwf	LCDWrite@data_or_command
 13211                           
 13212                           ;lcd.c: 283: uint8_t i,d;
 13213                           ;lcd.c: 285: d=data;
 13214  1296  0870               	movf	LCDWrite@data,w
 13215  1297  00F1               	movwf	??_LCDWrite
 13216  1298  0871               	movf	??_LCDWrite,w
 13217  1299  00F3               	movwf	LCDWrite@d
 13218                           
 13219                           ;lcd.c: 287: if(data_or_command == 0)
 13220  129A  0872               	movf	LCDWrite@data_or_command,w
 13221  129B  1D03               	btfss	3,2
 13222  129C  2AA0               	goto	l350
 13223                           
 13224                           ;lcd.c: 288: {
 13225                           ;lcd.c: 289: LATAbits.LATA2 = 0;
 13226  129D  0020               	movlb	0	; select bank0
 13227  129E  1116               	bcf	22,2	;volatile
 13228                           
 13229                           ;lcd.c: 290: }
 13230  129F  2AA2               	goto	l351
 13231  12A0                     l350:	
 13232                           
 13233                           ;lcd.c: 291: else
 13234                           ;lcd.c: 292: {
 13235                           ;lcd.c: 293: LATAbits.LATA2 = 1;
 13236  12A0  0020               	movlb	0	; select bank0
 13237  12A1  1516               	bsf	22,2	;volatile
 13238  12A2                     l351:	
 13239                           
 13240                           ;lcd.c: 294: }
 13241                           ;lcd.c: 296: LATAbits.LATA1 = 0;
 13242  12A2  1096               	bcf	22,1	;volatile
 13243                           
 13244                           ;lcd.c: 298: for(i=0;i<8;i++)
 13245  12A3  01F4               	clrf	LCDWrite@i
 13246  12A4  3008               	movlw	8
 13247  12A5  0274               	subwf	LCDWrite@i,w
 13248  12A6  1803               	btfsc	3,0
 13249  12A7  2AB8               	goto	l353
 13250  12A8                     l352:	
 13251                           
 13252                           ;lcd.c: 299: {
 13253                           ;lcd.c: 300: LATAbits.LATA3 = 0;
 13254  12A8  1196               	bcf	22,3	;volatile
 13255                           
 13256                           ;lcd.c: 302: if(d&0x80)
 13257  12A9  1FF3               	btfss	LCDWrite@d,7
 13258  12AA  2AAC               	goto	l354
 13259                           
 13260                           ;lcd.c: 303: {
 13261                           ;lcd.c: 304: LATAbits.LATA3 = 1;
 13262  12AB  1596               	bsf	22,3	;volatile
 13263  12AC                     l354:	
 13264                           
 13265                           ;lcd.c: 305: }
 13266                           ;lcd.c: 307: LATAbits.LATA4 = 1;
 13267  12AC  1616               	bsf	22,4	;volatile
 13268                           
 13269                           ;lcd.c: 309: d<<=1;
 13270  12AD  1003               	clrc
 13271  12AE  0DF3               	rlf	LCDWrite@d,f
 13272                           
 13273                           ;lcd.c: 311: LATAbits.LATA4=0;
 13274  12AF  1216               	bcf	22,4	;volatile
 13275  12B0  3001               	movlw	1
 13276  12B1  00F1               	movwf	??_LCDWrite
 13277  12B2  0871               	movf	??_LCDWrite,w
 13278  12B3  07F4               	addwf	LCDWrite@i,f
 13279  12B4  3008               	movlw	8
 13280  12B5  0274               	subwf	LCDWrite@i,w
 13281  12B6  1C03               	skipc
 13282  12B7  2AA8               	goto	l352
 13283  12B8                     l353:	
 13284                           
 13285                           ;lcd.c: 312: }
 13286                           ;lcd.c: 314: LATAbits.LATA1 = 1;
 13287  12B8  1496               	bsf	22,1	;volatile
 13288  12B9  0008               	return
 13289  12BA                     __end_of_LCDWrite:	
 13290                           
 13291                           	psect	text38
 13292  0144                     __ptext38:	
 13293 ;; *************** function _Battery_State_Machine *****************
 13294 ;; Defined at:
 13295 ;;		line 28 in file "battery_charger.c"
 13296 ;; Parameters:    Size  Location     Type
 13297 ;;  z               1    wreg     unsigned char 
 13298 ;; Auto vars:     Size  Location     Type
 13299 ;;  z               1   35[BANK0 ] unsigned char 
 13300 ;; Return value:  Size  Location     Type
 13301 ;;                  1    wreg      void 
 13302 ;; Registers used:
 13303 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13304 ;; Tracked objects:
 13305 ;;		On entry : 0/0
 13306 ;;		On exit  : 0/0
 13307 ;;		Unchanged: 0/0
 13308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13310 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13311 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13312 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13313 ;;Total ram usage:        6 bytes
 13314 ;; Hardware stack levels used:    1
 13315 ;; Hardware stack levels required when called:    2
 13316 ;; This function calls:
 13317 ;;		___awtoft
 13318 ;;		___ftmul
 13319 ;;		___fttol
 13320 ;; This function is called by:
 13321 ;;		_main
 13322 ;; This function uses a non-reentrant model
 13323 ;;
 13324                           
 13325                           
 13326                           ;psect for function _Battery_State_Machine
 13327  0144                     _Battery_State_Machine:	
 13328                           
 13329                           ;incstack = 0
 13330                           ; Regs used in _Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13331                           ;Battery_State_Machine@z stored from wreg
 13332  0144  0020               	movlb	0	; select bank0
 13333  0145  00C3               	movwf	Battery_State_Machine@z
 13334                           
 13335                           ;battery_charger.c: 30: if(batteryState[z]==PRECHARGE)
 13336  0146  0843               	movf	Battery_State_Machine@z,w
 13337  0147  3EDF               	addlw	(low (_batteryState| 0))& (0+255)
 13338  0148  0086               	movwf	6
 13339  0149  0187               	clrf	7
 13340  014A  3003               	movlw	3
 13341  014B  0601               	xorwf	1,w
 13342  014C  1D03               	btfss	3,2
 13343  014D  299B               	goto	l2986
 13344                           
 13345                           ;battery_charger.c: 31: {
 13346                           ;battery_charger.c: 32: if(voltage[z]<1075)
 13347  014E  3543               	lslf	Battery_State_Machine@z,w
 13348  014F  3EB8               	addlw	(low (_voltage| 0))& (0+255)
 13349  0150  0086               	movwf	6
 13350  0151  0187               	clrf	7
 13351  0152  3F40               	moviw [0]fsr1
 13352  0153  00BE               	movwf	??_Battery_State_Machine
 13353  0154  3F41               	moviw [1]fsr1
 13354  0155  00BF               	movwf	??_Battery_State_Machine+1
 13355  0156  083F               	movf	??_Battery_State_Machine+1,w
 13356  0157  3A80               	xorlw	128
 13357  0158  00C0               	movwf	??_Battery_State_Machine+2
 13358  0159  3084               	movlw	132
 13359  015A  0240               	subwf	??_Battery_State_Machine+2,w
 13360  015B  1D03               	skipz
 13361  015C  295F               	goto	u3355
 13362  015D  3033               	movlw	51
 13363  015E  023E               	subwf	??_Battery_State_Machine,w
 13364  015F                     u3355:	
 13365  015F  1803               	skipnc
 13366  0160  2989               	goto	l2984
 13367                           
 13368                           ;battery_charger.c: 33: {
 13369                           ;battery_charger.c: 34: if(stateCounter[z]>0)
 13370  0161  0020               	movlb	0	; select bank0
 13371  0162  3543               	lslf	Battery_State_Machine@z,w
 13372  0163  3ED5               	addlw	(low (_stateCounter| 0))& (0+255)
 13373  0164  0086               	movwf	6
 13374  0165  0187               	clrf	7
 13375  0166  3F40               	moviw [0]fsr1
 13376  0167  00BE               	movwf	??_Battery_State_Machine
 13377  0168  3F41               	moviw [1]fsr1
 13378  0169  00BF               	movwf	??_Battery_State_Machine+1
 13379  016A  083F               	movf	??_Battery_State_Machine+1,w
 13380  016B  3A80               	xorlw	128
 13381  016C  00C0               	movwf	??_Battery_State_Machine+2
 13382  016D  3080               	movlw	128
 13383  016E  0240               	subwf	??_Battery_State_Machine+2,w
 13384  016F  1D03               	skipz
 13385  0170  2973               	goto	u3365
 13386  0171  3001               	movlw	1
 13387  0172  023E               	subwf	??_Battery_State_Machine,w
 13388  0173                     u3365:	
 13389  0173  1C03               	skipc
 13390  0174  2981               	goto	l2982
 13391                           
 13392                           ;battery_charger.c: 35: {
 13393                           ;battery_charger.c: 36: stateCounter[z]-=1;
 13394  0175  0020               	movlb	0	; select bank0
 13395  0176  3543               	lslf	Battery_State_Machine@z,w
 13396  0177  3ED5               	addlw	(low (_stateCounter| 0))& (0+255)
 13397  0178  0086               	movwf	6
 13398  0179  0187               	clrf	7
 13399  017A  30FF               	movlw	255
 13400  017B  0781               	addwf	1,f
 13401  017C  3141               	addfsr 1,1
 13402  017D  30FF               	movlw	255
 13403  017E  3D81               	addwfc	1,f
 13404  017F  317F               	addfsr 1,-1
 13405                           
 13406                           ;battery_charger.c: 37: }
 13407  0180  0008               	return
 13408  0181                     l2982:	
 13409                           
 13410                           ;battery_charger.c: 38: else
 13411                           ;battery_charger.c: 39: {
 13412                           ;battery_charger.c: 40: batteryState[z]=FAULT;
 13413  0181  0020               	movlb	0	; select bank0
 13414  0182  0843               	movf	Battery_State_Machine@z,w
 13415  0183  3EDF               	addlw	(low (_batteryState| 0))& (0+255)
 13416  0184  0086               	movwf	6
 13417  0185  0187               	clrf	7
 13418  0186  0181               	clrf	1
 13419  0187  0A81               	incf	1,f
 13420                           
 13421                           ;battery_charger.c: 41: }
 13422                           ;battery_charger.c: 42: }
 13423  0188  0008               	return
 13424  0189                     l2984:	
 13425                           
 13426                           ;battery_charger.c: 43: else
 13427                           ;battery_charger.c: 44: {
 13428                           ;battery_charger.c: 45: batteryState[z]=CHARGE;
 13429  0189  3004               	movlw	4
 13430  018A  0020               	movlb	0	; select bank0
 13431  018B  00BE               	movwf	??_Battery_State_Machine
 13432  018C  0843               	movf	Battery_State_Machine@z,w
 13433  018D  3EDF               	addlw	(low (_batteryState| 0))& (0+255)
 13434  018E  0086               	movwf	6
 13435  018F  0187               	clrf	7
 13436  0190  083E               	movf	??_Battery_State_Machine,w
 13437  0191  0081               	movwf	1
 13438                           
 13439                           ;battery_charger.c: 46: Iref[z]=35;
 13440  0192  3543               	lslf	Battery_State_Machine@z,w
 13441  0193  3ECD               	addlw	(low (_Iref| 0))& (0+255)
 13442  0194  0086               	movwf	6
 13443  0195  0187               	clrf	7
 13444  0196  3023               	movlw	35
 13445  0197  3FC0               	movwi [0]fsr1
 13446  0198  3000               	movlw	0
 13447  0199  3FC1               	movwi [1]fsr1
 13448                           
 13449                           ;battery_charger.c: 47: }
 13450                           ;battery_charger.c: 48: }
 13451  019A  0008               	return
 13452  019B                     l2986:	
 13453                           
 13454                           ;battery_charger.c: 49: else if(batteryState[z]==CHARGE)
 13455  019B  0843               	movf	Battery_State_Machine@z,w
 13456  019C  3EDF               	addlw	(low (_batteryState| 0))& (0+255)
 13457  019D  0086               	movwf	6
 13458  019E  0187               	clrf	7
 13459  019F  3004               	movlw	4
 13460  01A0  0601               	xorwf	1,w
 13461  01A1  1D03               	btfss	3,2
 13462  01A2  2A61               	goto	l3006
 13463                           
 13464                           ;battery_charger.c: 50: {
 13465                           ;battery_charger.c: 51: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 13466  01A3  0021               	movlb	1	; select bank1
 13467  01A4  096C               	comf	_batteryTemp^(0+128),w
 13468  01A5  0020               	movlb	0	; select bank0
 13469  01A6  00BE               	movwf	??_Battery_State_Machine
 13470  01A7  0021               	movlb	1	; select bank1
 13471  01A8  096D               	comf	(_batteryTemp+1)^(0+128),w
 13472  01A9  0020               	movlb	0	; select bank0
 13473  01AA  00BF               	movwf	??_Battery_State_Machine+1
 13474  01AB  0ABE               	incf	??_Battery_State_Machine,f
 13475  01AC  1903               	skipnz
 13476  01AD  0ABF               	incf	??_Battery_State_Machine+1,f
 13477  01AE  083E               	movf	??_Battery_State_Machine,w
 13478  01AF  3EFA               	addlw	250
 13479  01B0  00F8               	movwf	___awtoft@c
 13480  01B1  3000               	movlw	0
 13481  01B2  3D3F               	addwfc	??_Battery_State_Machine+1,w
 13482  01B3  00F9               	movwf	___awtoft@c+1
 13483  01B4  3192  2275  3181   	fcall	___awtoft
 13484  01B7  0878               	movf	?___awtoft,w
 13485  01B8  0020               	movlb	0	; select bank0
 13486  01B9  00A3               	movwf	___ftmul@f2
 13487  01BA  0879               	movf	?___awtoft+1,w
 13488  01BB  00A4               	movwf	___ftmul@f2+1
 13489  01BC  087A               	movf	?___awtoft+2,w
 13490  01BD  00A5               	movwf	___ftmul@f2+2
 13491  01BE  30C3               	movlw	195
 13492  01BF  00A0               	movwf	___ftmul@f1
 13493  01C0  3075               	movlw	117
 13494  01C1  00A1               	movwf	___ftmul@f1+1
 13495  01C2  303E               	movlw	62
 13496  01C3  00A2               	movwf	___ftmul@f1+2
 13497  01C4  318B  2311  3181   	fcall	___ftmul
 13498  01C7  0020               	movlb	0	; select bank0
 13499  01C8  0820               	movf	?___ftmul,w
 13500  01C9  00B0               	movwf	___fttol@f1
 13501  01CA  0821               	movf	?___ftmul+1,w
 13502  01CB  00B1               	movwf	___fttol@f1+1
 13503  01CC  0822               	movf	?___ftmul+2,w
 13504  01CD  00B2               	movwf	___fttol@f1+2
 13505  01CE  3196  26F2  3181   	fcall	___fttol
 13506  01D1  0020               	movlb	0	; select bank0
 13507  01D2  0830               	movf	?___fttol,w
 13508  01D3  3E91               	addlw	145
 13509  01D4  00C0               	movwf	??_Battery_State_Machine+2
 13510  01D5  3005               	movlw	5
 13511  01D6  3D31               	addwfc	?___fttol+1,w
 13512  01D7  00C1               	movwf	??_Battery_State_Machine+3
 13513  01D8  3543               	lslf	Battery_State_Machine@z,w
 13514  01D9  3ED1               	addlw	(low (_Vref| 0))& (0+255)
 13515  01DA  0086               	movwf	6
 13516  01DB  0187               	clrf	7
 13517  01DC  0840               	movf	??_Battery_State_Machine+2,w
 13518  01DD  3FC0               	movwi [0]fsr1
 13519  01DE  0841               	movf	??_Battery_State_Machine+3,w
 13520  01DF  3FC1               	movwi [1]fsr1
 13521                           
 13522                           ;battery_charger.c: 52: if(!(Imode[z]))
 13523  01E0  0843               	movf	Battery_State_Machine@z,w
 13524  01E1  3ED9               	addlw	(low (_Imode| 0))& (0+255)
 13525  01E2  0086               	movwf	6
 13526  01E3  0187               	clrf	7
 13527  01E4  0801               	movf	1,w
 13528  01E5  1D03               	btfss	3,2
 13529  01E6  2A48               	goto	l3002
 13530                           
 13531                           ;battery_charger.c: 53: {
 13532                           ;battery_charger.c: 54: if(current[z] < Imin[z])
 13533  01E7  3543               	lslf	Battery_State_Machine@z,w
 13534  01E8  3EC5               	addlw	(low (_Imin| 0))& (0+255)
 13535  01E9  0086               	movwf	6
 13536  01EA  0187               	clrf	7
 13537  01EB  3F40               	moviw [0]fsr1
 13538  01EC  00BE               	movwf	??_Battery_State_Machine
 13539  01ED  3F41               	moviw [1]fsr1
 13540  01EE  00BF               	movwf	??_Battery_State_Machine+1
 13541  01EF  3543               	lslf	Battery_State_Machine@z,w
 13542  01F0  3EB0               	addlw	(low (_current| 0))& (0+255)
 13543  01F1  0086               	movwf	6
 13544  01F2  0187               	clrf	7
 13545  01F3  3F40               	moviw [0]fsr1
 13546  01F4  00C0               	movwf	??_Battery_State_Machine+2
 13547  01F5  3F41               	moviw [1]fsr1
 13548  01F6  00C1               	movwf	??_Battery_State_Machine+3
 13549  01F7  0841               	movf	??_Battery_State_Machine+3,w
 13550  01F8  3A80               	xorlw	128
 13551  01F9  00C2               	movwf	??_Battery_State_Machine+4
 13552  01FA  083F               	movf	??_Battery_State_Machine+1,w
 13553  01FB  3A80               	xorlw	128
 13554  01FC  0242               	subwf	??_Battery_State_Machine+4,w
 13555  01FD  1D03               	skipz
 13556  01FE  2A01               	goto	u3395
 13557  01FF  083E               	movf	??_Battery_State_Machine,w
 13558  0200  0240               	subwf	??_Battery_State_Machine+2,w
 13559  0201                     u3395:	
 13560  0201  1803               	skipnc
 13561  0202  2A2E               	goto	l2998
 13562                           
 13563                           ;battery_charger.c: 55: {
 13564                           ;battery_charger.c: 56: IminCount[z]-=2;
 13565  0203  0020               	movlb	0	; select bank0
 13566  0204  3543               	lslf	Battery_State_Machine@z,w
 13567  0205  3EC9               	addlw	(low (_IminCount| 0))& (0+255)
 13568  0206  0086               	movwf	6
 13569  0207  0187               	clrf	7
 13570  0208  3002               	movlw	2
 13571  0209  0281               	subwf	1,f
 13572  020A  3141               	addfsr 1,1
 13573  020B  3000               	movlw	0
 13574  020C  3B81               	subwfb	1,f
 13575  020D  317F               	addfsr 1,-1
 13576                           
 13577                           ;battery_charger.c: 57: if(IminCount[z]<10)
 13578  020E  3543               	lslf	Battery_State_Machine@z,w
 13579  020F  3EC9               	addlw	(low (_IminCount| 0))& (0+255)
 13580  0210  0086               	movwf	6
 13581  0211  0187               	clrf	7
 13582  0212  3F40               	moviw [0]fsr1
 13583  0213  00BE               	movwf	??_Battery_State_Machine
 13584  0214  3F41               	moviw [1]fsr1
 13585  0215  00BF               	movwf	??_Battery_State_Machine+1
 13586  0216  3000               	movlw	0
 13587  0217  023F               	subwf	??_Battery_State_Machine+1,w
 13588  0218  300A               	movlw	10
 13589  0219  1903               	skipnz
 13590  021A  023E               	subwf	??_Battery_State_Machine,w
 13591  021B  1803               	skipnc
 13592  021C  0008               	return
 13593                           
 13594                           ;battery_charger.c: 58: {
 13595                           ;battery_charger.c: 59: batteryState[z] = FLOAT;
 13596  021D  3005               	movlw	5
 13597  021E  00BE               	movwf	??_Battery_State_Machine
 13598  021F  0843               	movf	Battery_State_Machine@z,w
 13599  0220  3EDF               	addlw	(low (_batteryState| 0))& (0+255)
 13600  0221  0086               	movwf	6
 13601  0222  0187               	clrf	7
 13602  0223  083E               	movf	??_Battery_State_Machine,w
 13603  0224  0081               	movwf	1
 13604                           
 13605                           ;battery_charger.c: 60: IminCount[z]=10;
 13606  0225  3543               	lslf	Battery_State_Machine@z,w
 13607  0226  3EC9               	addlw	(low (_IminCount| 0))& (0+255)
 13608  0227  0086               	movwf	6
 13609  0228  0187               	clrf	7
 13610  0229  300A               	movlw	10
 13611  022A  3FC0               	movwi [0]fsr1
 13612  022B  3000               	movlw	0
 13613  022C  3FC1               	movwi [1]fsr1
 13614                           
 13615                           ;battery_charger.c: 61: }
 13616                           ;battery_charger.c: 62: }
 13617  022D  0008               	return
 13618  022E                     l2998:	
 13619                           
 13620                           ;battery_charger.c: 63: else
 13621                           ;battery_charger.c: 64: {
 13622                           ;battery_charger.c: 65: if(IminCount[z]<600)IminCount[z]+=1;
 13623  022E  0020               	movlb	0	; select bank0
 13624  022F  3543               	lslf	Battery_State_Machine@z,w
 13625  0230  3EC9               	addlw	(low (_IminCount| 0))& (0+255)
 13626  0231  0086               	movwf	6
 13627  0232  0187               	clrf	7
 13628  0233  3F40               	moviw [0]fsr1
 13629  0234  00BE               	movwf	??_Battery_State_Machine
 13630  0235  3F41               	moviw [1]fsr1
 13631  0236  00BF               	movwf	??_Battery_State_Machine+1
 13632  0237  3002               	movlw	2
 13633  0238  023F               	subwf	??_Battery_State_Machine+1,w
 13634  0239  3058               	movlw	88
 13635  023A  1903               	skipnz
 13636  023B  023E               	subwf	??_Battery_State_Machine,w
 13637  023C  1803               	skipnc
 13638  023D  0008               	return
 13639  023E  3543               	lslf	Battery_State_Machine@z,w
 13640  023F  3EC9               	addlw	(low (_IminCount| 0))& (0+255)
 13641  0240  0086               	movwf	6
 13642  0241  0187               	clrf	7
 13643  0242  3001               	movlw	1
 13644  0243  0781               	addwf	1,f
 13645  0244  3141               	addfsr 1,1
 13646  0245  1803               	skipnc
 13647  0246  0A81               	incf	1,f
 13648                           
 13649                           ;battery_charger.c: 66: }
 13650                           ;battery_charger.c: 67: }
 13651  0247  0008               	return
 13652  0248                     l3002:	
 13653                           
 13654                           ;battery_charger.c: 68: else if(IminCount[z]<600)IminCount[z]+=1;
 13655  0248  3543               	lslf	Battery_State_Machine@z,w
 13656  0249  3EC9               	addlw	(low (_IminCount| 0))& (0+255)
 13657  024A  0086               	movwf	6
 13658  024B  0187               	clrf	7
 13659  024C  3F40               	moviw [0]fsr1
 13660  024D  00BE               	movwf	??_Battery_State_Machine
 13661  024E  3F41               	moviw [1]fsr1
 13662  024F  00BF               	movwf	??_Battery_State_Machine+1
 13663  0250  3002               	movlw	2
 13664  0251  023F               	subwf	??_Battery_State_Machine+1,w
 13665  0252  3058               	movlw	88
 13666  0253  1903               	skipnz
 13667  0254  023E               	subwf	??_Battery_State_Machine,w
 13668  0255  1803               	skipnc
 13669  0256  0008               	return
 13670  0257  3543               	lslf	Battery_State_Machine@z,w
 13671  0258  3EC9               	addlw	(low (_IminCount| 0))& (0+255)
 13672  0259  0086               	movwf	6
 13673  025A  0187               	clrf	7
 13674  025B  3001               	movlw	1
 13675  025C  0781               	addwf	1,f
 13676  025D  3141               	addfsr 1,1
 13677  025E  1803               	skipnc
 13678  025F  0A81               	incf	1,f
 13679                           
 13680                           ;battery_charger.c: 69: }
 13681  0260  0008               	return
 13682  0261                     l3006:	
 13683                           
 13684                           ;battery_charger.c: 70: else if(batteryState[z] == FLOAT)
 13685  0261  0843               	movf	Battery_State_Machine@z,w
 13686  0262  3EDF               	addlw	(low (_batteryState| 0))& (0+255)
 13687  0263  0086               	movwf	6
 13688  0264  0187               	clrf	7
 13689  0265  3005               	movlw	5
 13690  0266  0601               	xorwf	1,w
 13691  0267  1D03               	btfss	3,2
 13692  0268  2AB3               	goto	l3014
 13693                           
 13694                           ;battery_charger.c: 71: {
 13695                           ;battery_charger.c: 72: Vref[z]=1350+(int16_t)((250-batteryTemp)*.24);
 13696  0269  0021               	movlb	1	; select bank1
 13697  026A  096C               	comf	_batteryTemp^(0+128),w
 13698  026B  0020               	movlb	0	; select bank0
 13699  026C  00BE               	movwf	??_Battery_State_Machine
 13700  026D  0021               	movlb	1	; select bank1
 13701  026E  096D               	comf	(_batteryTemp+1)^(0+128),w
 13702  026F  0020               	movlb	0	; select bank0
 13703  0270  00BF               	movwf	??_Battery_State_Machine+1
 13704  0271  0ABE               	incf	??_Battery_State_Machine,f
 13705  0272  1903               	skipnz
 13706  0273  0ABF               	incf	??_Battery_State_Machine+1,f
 13707  0274  083E               	movf	??_Battery_State_Machine,w
 13708  0275  3EFA               	addlw	250
 13709  0276  00F8               	movwf	___awtoft@c
 13710  0277  3000               	movlw	0
 13711  0278  3D3F               	addwfc	??_Battery_State_Machine+1,w
 13712  0279  00F9               	movwf	___awtoft@c+1
 13713  027A  3192  2275  3181   	fcall	___awtoft
 13714  027D  0878               	movf	?___awtoft,w
 13715  027E  0020               	movlb	0	; select bank0
 13716  027F  00A3               	movwf	___ftmul@f2
 13717  0280  0879               	movf	?___awtoft+1,w
 13718  0281  00A4               	movwf	___ftmul@f2+1
 13719  0282  087A               	movf	?___awtoft+2,w
 13720  0283  00A5               	movwf	___ftmul@f2+2
 13721  0284  30C3               	movlw	195
 13722  0285  00A0               	movwf	___ftmul@f1
 13723  0286  3075               	movlw	117
 13724  0287  00A1               	movwf	___ftmul@f1+1
 13725  0288  303E               	movlw	62
 13726  0289  00A2               	movwf	___ftmul@f1+2
 13727  028A  318B  2311  3181   	fcall	___ftmul
 13728  028D  0020               	movlb	0	; select bank0
 13729  028E  0820               	movf	?___ftmul,w
 13730  028F  00B0               	movwf	___fttol@f1
 13731  0290  0821               	movf	?___ftmul+1,w
 13732  0291  00B1               	movwf	___fttol@f1+1
 13733  0292  0822               	movf	?___ftmul+2,w
 13734  0293  00B2               	movwf	___fttol@f1+2
 13735  0294  3196  26F2         	fcall	___fttol
 13736  0296  0020               	movlb	0	; select bank0
 13737  0297  0830               	movf	?___fttol,w
 13738  0298  3E46               	addlw	70
 13739  0299  00C0               	movwf	??_Battery_State_Machine+2
 13740  029A  3005               	movlw	5
 13741  029B  3D31               	addwfc	?___fttol+1,w
 13742  029C  00C1               	movwf	??_Battery_State_Machine+3
 13743  029D  3543               	lslf	Battery_State_Machine@z,w
 13744  029E  3ED1               	addlw	(low (_Vref| 0))& (0+255)
 13745  029F  0086               	movwf	6
 13746  02A0  0187               	clrf	7
 13747  02A1  0840               	movf	??_Battery_State_Machine+2,w
 13748  02A2  3FC0               	movwi [0]fsr1
 13749  02A3  0841               	movf	??_Battery_State_Machine+3,w
 13750  02A4  3FC1               	movwi [1]fsr1
 13751                           
 13752                           ;battery_charger.c: 73: Iref[z]=15;
 13753  02A5  3543               	lslf	Battery_State_Machine@z,w
 13754  02A6  3ECD               	addlw	(low (_Iref| 0))& (0+255)
 13755  02A7  0086               	movwf	6
 13756  02A8  0187               	clrf	7
 13757  02A9  300F               	movlw	15
 13758  02AA  3FC0               	movwi [0]fsr1
 13759  02AB  3000               	movlw	0
 13760  02AC  3FC1               	movwi [1]fsr1
 13761                           
 13762                           ;battery_charger.c: 74: Imode[z]=0;
 13763  02AD  0843               	movf	Battery_State_Machine@z,w
 13764  02AE  3ED9               	addlw	(low (_Imode| 0))& (0+255)
 13765  02AF  0086               	movwf	6
 13766  02B0  0187               	clrf	7
 13767  02B1  0181               	clrf	1
 13768                           
 13769                           ;battery_charger.c: 75: }
 13770  02B2  0008               	return
 13771  02B3                     l3014:	
 13772                           
 13773                           ;battery_charger.c: 76: else
 13774                           ;battery_charger.c: 77: if(batteryState[z] == FAULT)
 13775  02B3  0843               	movf	Battery_State_Machine@z,w
 13776  02B4  3EDF               	addlw	(low (_batteryState| 0))& (0+255)
 13777  02B5  0086               	movwf	6
 13778  02B6  0187               	clrf	7
 13779  02B7  0301               	decf	1,w
 13780  02B8  1D03               	btfss	3,2
 13781  02B9  0008               	return
 13782                           
 13783                           ;battery_charger.c: 78: {
 13784                           ;battery_charger.c: 79: batteryState[z]=PRECHARGE;
 13785  02BA  3003               	movlw	3
 13786  02BB  00BE               	movwf	??_Battery_State_Machine
 13787  02BC  0843               	movf	Battery_State_Machine@z,w
 13788  02BD  3EDF               	addlw	(low (_batteryState| 0))& (0+255)
 13789  02BE  0086               	movwf	6
 13790  02BF  0187               	clrf	7
 13791  02C0  083E               	movf	??_Battery_State_Machine,w
 13792  02C1  0081               	movwf	1
 13793  02C2  0008               	return
 13794  02C3                     __end_of_Battery_State_Machine:	
 13795                           
 13796                           	psect	text39
 13797  16F2                     __ptext39:	
 13798 ;; *************** function ___fttol *****************
 13799 ;; Defined at:
 13800 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
 13801 ;; Parameters:    Size  Location     Type
 13802 ;;  f1              3   16[BANK0 ] float 
 13803 ;; Auto vars:     Size  Location     Type
 13804 ;;  lval            4   25[BANK0 ] unsigned long 
 13805 ;;  exp1            1   29[BANK0 ] unsigned char 
 13806 ;;  sign1           1   24[BANK0 ] unsigned char 
 13807 ;; Return value:  Size  Location     Type
 13808 ;;                  4   16[BANK0 ] long 
 13809 ;; Registers used:
 13810 ;;		wreg, status,2, status,0
 13811 ;; Tracked objects:
 13812 ;;		On entry : 0/0
 13813 ;;		On exit  : 0/0
 13814 ;;		Unchanged: 0/0
 13815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13816 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13817 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13818 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13819 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13820 ;;Total ram usage:       14 bytes
 13821 ;; Hardware stack levels used:    1
 13822 ;; This function calls:
 13823 ;;		Nothing
 13824 ;; This function is called by:
 13825 ;;		_main
 13826 ;;		_calculateCurrent0
 13827 ;;		_calculateCurrent1
 13828 ;;		_calculateCurrent2
 13829 ;;		_calculateCurrent3
 13830 ;;		_Init_Battery_State_Machine
 13831 ;;		_Battery_State_Machine
 13832 ;;		_cc_cv_mode
 13833 ;;		_tempCalc
 13834 ;; This function uses a non-reentrant model
 13835 ;;
 13836                           
 13837                           
 13838                           ;psect for function ___fttol
 13839  16F2                     ___fttol:	
 13840                           
 13841                           ;incstack = 0
 13842                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13843  16F2  0020               	movlb	0	; select bank0
 13844  16F3  0830               	movf	___fttol@f1,w
 13845  16F4  00B4               	movwf	??___fttol
 13846  16F5  0831               	movf	___fttol@f1+1,w
 13847  16F6  00B5               	movwf	??___fttol+1
 13848  16F7  0832               	movf	___fttol@f1+2,w
 13849  16F8  00B6               	movwf	??___fttol+2
 13850  16F9  1003               	clrc
 13851  16FA  0D35               	rlf	??___fttol+1,w
 13852  16FB  0D36               	rlf	??___fttol+2,w
 13853  16FC  00B7               	movwf	??___fttol+3
 13854  16FD  0837               	movf	??___fttol+3,w
 13855  16FE  00BD               	movwf	___fttol@exp1
 13856  16FF  083D               	movf	___fttol@exp1,w
 13857  1700  1D03               	btfss	3,2
 13858  1701  2F0B               	goto	l2436
 13859  1702  3000               	movlw	0
 13860  1703  00B3               	movwf	?___fttol+3
 13861  1704  3000               	movlw	0
 13862  1705  00B2               	movwf	?___fttol+2
 13863  1706  3000               	movlw	0
 13864  1707  00B1               	movwf	?___fttol+1
 13865  1708  3000               	movlw	0
 13866  1709  00B0               	movwf	?___fttol
 13867  170A  0008               	return
 13868  170B                     l2436:	
 13869  170B  0830               	movf	___fttol@f1,w
 13870  170C  00B4               	movwf	??___fttol
 13871  170D  0831               	movf	___fttol@f1+1,w
 13872  170E  00B5               	movwf	??___fttol+1
 13873  170F  0832               	movf	___fttol@f1+2,w
 13874  1710  00B6               	movwf	??___fttol+2
 13875  1711  3017               	movlw	23
 13876  1712                     u2585:	
 13877  1712  36B6               	lsrf	??___fttol+2,f
 13878  1713  0CB5               	rrf	??___fttol+1,f
 13879  1714  0CB4               	rrf	??___fttol,f
 13880  1715  0B89               	decfsz	9,f
 13881  1716  2F12               	goto	u2585
 13882  1717  0834               	movf	??___fttol,w
 13883  1718  00B7               	movwf	??___fttol+3
 13884  1719  0837               	movf	??___fttol+3,w
 13885  171A  00B8               	movwf	___fttol@sign1
 13886  171B  17B1               	bsf	___fttol@f1+1,7
 13887  171C  30FF               	movlw	255
 13888  171D  05B0               	andwf	___fttol@f1,f
 13889  171E  30FF               	movlw	255
 13890  171F  05B1               	andwf	___fttol@f1+1,f
 13891  1720  3000               	movlw	0
 13892  1721  05B2               	andwf	___fttol@f1+2,f
 13893  1722  0830               	movf	___fttol@f1,w
 13894  1723  00B9               	movwf	___fttol@lval
 13895  1724  0831               	movf	___fttol@f1+1,w
 13896  1725  00BA               	movwf	___fttol@lval+1
 13897  1726  0832               	movf	___fttol@f1+2,w
 13898  1727  00BB               	movwf	___fttol@lval+2
 13899  1728  01BC               	clrf	___fttol@lval+3
 13900  1729  308E               	movlw	142
 13901  172A  02BD               	subwf	___fttol@exp1,f
 13902  172B  1FBD               	btfss	___fttol@exp1,7
 13903  172C  2F49               	goto	l2456
 13904  172D  083D               	movf	___fttol@exp1,w
 13905  172E  3A80               	xorlw	128
 13906  172F  3E8F               	addlw	143
 13907  1730  1803               	skipnc
 13908  1731  2F3B               	goto	l2454
 13909  1732  3000               	movlw	0
 13910  1733  00B3               	movwf	?___fttol+3
 13911  1734  3000               	movlw	0
 13912  1735  00B2               	movwf	?___fttol+2
 13913  1736  3000               	movlw	0
 13914  1737  00B1               	movwf	?___fttol+1
 13915  1738  3000               	movlw	0
 13916  1739  00B0               	movwf	?___fttol
 13917  173A  0008               	return
 13918  173B                     l2454:	
 13919  173B  3001               	movlw	1
 13920  173C                     u2615:	
 13921  173C  36BC               	lsrf	___fttol@lval+3,f
 13922  173D  0CBB               	rrf	___fttol@lval+2,f
 13923  173E  0CBA               	rrf	___fttol@lval+1,f
 13924  173F  0CB9               	rrf	___fttol@lval,f
 13925  1740  0B89               	decfsz	9,f
 13926  1741  2F3C               	goto	u2615
 13927  1742  3001               	movlw	1
 13928  1743  00B4               	movwf	??___fttol
 13929  1744  0834               	movf	??___fttol,w
 13930  1745  07BD               	addwf	___fttol@exp1,f
 13931  1746  1903               	btfsc	3,2
 13932  1747  2F62               	goto	l2464
 13933  1748  2F3B               	goto	l2454
 13934  1749                     l2456:	
 13935  1749  3018               	movlw	24
 13936  174A  023D               	subwf	___fttol@exp1,w
 13937  174B  1C03               	skipc
 13938  174C  2F5F               	goto	l832
 13939  174D  3000               	movlw	0
 13940  174E  00B3               	movwf	?___fttol+3
 13941  174F  3000               	movlw	0
 13942  1750  00B2               	movwf	?___fttol+2
 13943  1751  3000               	movlw	0
 13944  1752  00B1               	movwf	?___fttol+1
 13945  1753  3000               	movlw	0
 13946  1754  00B0               	movwf	?___fttol
 13947  1755  0008               	return
 13948  1756                     l2462:	
 13949  1756  3001               	movlw	1
 13950  1757                     u2645:	
 13951  1757  35B9               	lslf	___fttol@lval,f
 13952  1758  0DBA               	rlf	___fttol@lval+1,f
 13953  1759  0DBB               	rlf	___fttol@lval+2,f
 13954  175A  0DBC               	rlf	___fttol@lval+3,f
 13955  175B  0B89               	decfsz	9,f
 13956  175C  2F57               	goto	u2645
 13957  175D  3001               	movlw	1
 13958  175E  02BD               	subwf	___fttol@exp1,f
 13959  175F                     l832:	
 13960  175F  083D               	movf	___fttol@exp1,w
 13961  1760  1D03               	btfss	3,2
 13962  1761  2F56               	goto	l2462
 13963  1762                     l2464:	
 13964  1762  0838               	movf	___fttol@sign1,w
 13965  1763  1903               	btfsc	3,2
 13966  1764  2F70               	goto	l2468
 13967  1765  09B9               	comf	___fttol@lval,f
 13968  1766  09BA               	comf	___fttol@lval+1,f
 13969  1767  09BB               	comf	___fttol@lval+2,f
 13970  1768  09BC               	comf	___fttol@lval+3,f
 13971  1769  0AB9               	incf	___fttol@lval,f
 13972  176A  1903               	skipnz
 13973  176B  0ABA               	incf	___fttol@lval+1,f
 13974  176C  1903               	skipnz
 13975  176D  0ABB               	incf	___fttol@lval+2,f
 13976  176E  1903               	skipnz
 13977  176F  0ABC               	incf	___fttol@lval+3,f
 13978  1770                     l2468:	
 13979  1770  083C               	movf	___fttol@lval+3,w
 13980  1771  00B3               	movwf	?___fttol+3
 13981  1772  083B               	movf	___fttol@lval+2,w
 13982  1773  00B2               	movwf	?___fttol+2
 13983  1774  083A               	movf	___fttol@lval+1,w
 13984  1775  00B1               	movwf	?___fttol+1
 13985  1776  0839               	movf	___fttol@lval,w
 13986  1777  00B0               	movwf	?___fttol
 13987  1778  0008               	return
 13988  1779                     __end_of___fttol:	
 13989                           
 13990                           	psect	text40
 13991  0B11                     __ptext40:	
 13992 ;; *************** function ___ftmul *****************
 13993 ;; Defined at:
 13994 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
 13995 ;; Parameters:    Size  Location     Type
 13996 ;;  f1              3    0[BANK0 ] float 
 13997 ;;  f2              3    3[BANK0 ] float 
 13998 ;; Auto vars:     Size  Location     Type
 13999 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
 14000 ;;  sign            1   15[BANK0 ] unsigned char 
 14001 ;;  cntr            1   14[BANK0 ] unsigned char 
 14002 ;;  exp             1   10[BANK0 ] unsigned char 
 14003 ;; Return value:  Size  Location     Type
 14004 ;;                  3    0[BANK0 ] float 
 14005 ;; Registers used:
 14006 ;;		wreg, status,2, status,0, pclath, cstack
 14007 ;; Tracked objects:
 14008 ;;		On entry : 0/0
 14009 ;;		On exit  : 0/0
 14010 ;;		Unchanged: 0/0
 14011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14012 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14013 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14014 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14015 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14016 ;;Total ram usage:       16 bytes
 14017 ;; Hardware stack levels used:    1
 14018 ;; Hardware stack levels required when called:    1
 14019 ;; This function calls:
 14020 ;;		___ftpack
 14021 ;; This function is called by:
 14022 ;;		_Init_Battery_State_Machine
 14023 ;;		_Battery_State_Machine
 14024 ;;		_cc_cv_mode
 14025 ;;		_tempCalc
 14026 ;;		_log
 14027 ;;		_eval_poly
 14028 ;; This function uses a non-reentrant model
 14029 ;;
 14030                           
 14031                           
 14032                           ;psect for function ___ftmul
 14033  0B11                     ___ftmul:	
 14034                           
 14035                           ;incstack = 0
 14036                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14037  0B11  0020               	movlb	0	; select bank0
 14038  0B12  0820               	movf	___ftmul@f1,w
 14039  0B13  00A6               	movwf	??___ftmul
 14040  0B14  0821               	movf	___ftmul@f1+1,w
 14041  0B15  00A7               	movwf	??___ftmul+1
 14042  0B16  0822               	movf	___ftmul@f1+2,w
 14043  0B17  00A8               	movwf	??___ftmul+2
 14044  0B18  1003               	clrc
 14045  0B19  0D27               	rlf	??___ftmul+1,w
 14046  0B1A  0D28               	rlf	??___ftmul+2,w
 14047  0B1B  00A9               	movwf	??___ftmul+3
 14048  0B1C  0829               	movf	??___ftmul+3,w
 14049  0B1D  00AA               	movwf	___ftmul@exp
 14050  0B1E  082A               	movf	___ftmul@exp,w
 14051  0B1F  1D03               	btfss	3,2
 14052  0B20  2B28               	goto	l2352
 14053  0B21  3000               	movlw	0
 14054  0B22  00A0               	movwf	?___ftmul
 14055  0B23  3000               	movlw	0
 14056  0B24  00A1               	movwf	?___ftmul+1
 14057  0B25  3000               	movlw	0
 14058  0B26  00A2               	movwf	?___ftmul+2
 14059  0B27  0008               	return
 14060  0B28                     l2352:	
 14061  0B28  0823               	movf	___ftmul@f2,w
 14062  0B29  00A6               	movwf	??___ftmul
 14063  0B2A  0824               	movf	___ftmul@f2+1,w
 14064  0B2B  00A7               	movwf	??___ftmul+1
 14065  0B2C  0825               	movf	___ftmul@f2+2,w
 14066  0B2D  00A8               	movwf	??___ftmul+2
 14067  0B2E  1003               	clrc
 14068  0B2F  0D27               	rlf	??___ftmul+1,w
 14069  0B30  0D28               	rlf	??___ftmul+2,w
 14070  0B31  00A9               	movwf	??___ftmul+3
 14071  0B32  0829               	movf	??___ftmul+3,w
 14072  0B33  00AF               	movwf	___ftmul@sign
 14073  0B34  082F               	movf	___ftmul@sign,w
 14074  0B35  1D03               	btfss	3,2
 14075  0B36  2B3E               	goto	l2358
 14076  0B37  3000               	movlw	0
 14077  0B38  00A0               	movwf	?___ftmul
 14078  0B39  3000               	movlw	0
 14079  0B3A  00A1               	movwf	?___ftmul+1
 14080  0B3B  3000               	movlw	0
 14081  0B3C  00A2               	movwf	?___ftmul+2
 14082  0B3D  0008               	return
 14083  0B3E                     l2358:	
 14084  0B3E  082F               	movf	___ftmul@sign,w
 14085  0B3F  3E7B               	addlw	123
 14086  0B40  00A6               	movwf	??___ftmul
 14087  0B41  0826               	movf	??___ftmul,w
 14088  0B42  07AA               	addwf	___ftmul@exp,f
 14089  0B43  0820               	movf	___ftmul@f1,w
 14090  0B44  00A6               	movwf	??___ftmul
 14091  0B45  0821               	movf	___ftmul@f1+1,w
 14092  0B46  00A7               	movwf	??___ftmul+1
 14093  0B47  0822               	movf	___ftmul@f1+2,w
 14094  0B48  00A8               	movwf	??___ftmul+2
 14095  0B49  3010               	movlw	16
 14096  0B4A                     u2435:	
 14097  0B4A  36A8               	lsrf	??___ftmul+2,f
 14098  0B4B  0CA7               	rrf	??___ftmul+1,f
 14099  0B4C  0CA6               	rrf	??___ftmul,f
 14100  0B4D  0B89               	decfsz	9,f
 14101  0B4E  2B4A               	goto	u2435
 14102  0B4F  0826               	movf	??___ftmul,w
 14103  0B50  00A9               	movwf	??___ftmul+3
 14104  0B51  0829               	movf	??___ftmul+3,w
 14105  0B52  00AF               	movwf	___ftmul@sign
 14106  0B53  0823               	movf	___ftmul@f2,w
 14107  0B54  00A6               	movwf	??___ftmul
 14108  0B55  0824               	movf	___ftmul@f2+1,w
 14109  0B56  00A7               	movwf	??___ftmul+1
 14110  0B57  0825               	movf	___ftmul@f2+2,w
 14111  0B58  00A8               	movwf	??___ftmul+2
 14112  0B59  3010               	movlw	16
 14113  0B5A                     u2445:	
 14114  0B5A  36A8               	lsrf	??___ftmul+2,f
 14115  0B5B  0CA7               	rrf	??___ftmul+1,f
 14116  0B5C  0CA6               	rrf	??___ftmul,f
 14117  0B5D  0B89               	decfsz	9,f
 14118  0B5E  2B5A               	goto	u2445
 14119  0B5F  0826               	movf	??___ftmul,w
 14120  0B60  00A9               	movwf	??___ftmul+3
 14121  0B61  0829               	movf	??___ftmul+3,w
 14122  0B62  06AF               	xorwf	___ftmul@sign,f
 14123  0B63  3080               	movlw	128
 14124  0B64  00A6               	movwf	??___ftmul
 14125  0B65  0826               	movf	??___ftmul,w
 14126  0B66  05AF               	andwf	___ftmul@sign,f
 14127  0B67  17A1               	bsf	___ftmul@f1+1,7
 14128  0B68  17A4               	bsf	___ftmul@f2+1,7
 14129  0B69  30FF               	movlw	255
 14130  0B6A  05A3               	andwf	___ftmul@f2,f
 14131  0B6B  30FF               	movlw	255
 14132  0B6C  05A4               	andwf	___ftmul@f2+1,f
 14133  0B6D  3000               	movlw	0
 14134  0B6E  05A5               	andwf	___ftmul@f2+2,f
 14135  0B6F  3000               	movlw	0
 14136  0B70  00AB               	movwf	___ftmul@f3_as_product
 14137  0B71  3000               	movlw	0
 14138  0B72  00AC               	movwf	___ftmul@f3_as_product+1
 14139  0B73  3000               	movlw	0
 14140  0B74  00AD               	movwf	___ftmul@f3_as_product+2
 14141  0B75  3007               	movlw	7
 14142  0B76  00A6               	movwf	??___ftmul
 14143  0B77  0826               	movf	??___ftmul,w
 14144  0B78  00AE               	movwf	___ftmul@cntr
 14145  0B79                     l2370:	
 14146  0B79  1C20               	btfss	___ftmul@f1,0
 14147  0B7A  2B81               	goto	l2374
 14148  0B7B  0823               	movf	___ftmul@f2,w
 14149  0B7C  07AB               	addwf	___ftmul@f3_as_product,f
 14150  0B7D  0824               	movf	___ftmul@f2+1,w
 14151  0B7E  3DAC               	addwfc	___ftmul@f3_as_product+1,f
 14152  0B7F  0825               	movf	___ftmul@f2+2,w
 14153  0B80  3DAD               	addwfc	___ftmul@f3_as_product+2,f
 14154  0B81                     l2374:	
 14155  0B81  3001               	movlw	1
 14156  0B82                     u2465:	
 14157  0B82  36A2               	lsrf	___ftmul@f1+2,f
 14158  0B83  0CA1               	rrf	___ftmul@f1+1,f
 14159  0B84  0CA0               	rrf	___ftmul@f1,f
 14160  0B85  0B89               	decfsz	9,f
 14161  0B86  2B82               	goto	u2465
 14162  0B87  3001               	movlw	1
 14163  0B88                     u2475:	
 14164  0B88  35A3               	lslf	___ftmul@f2,f
 14165  0B89  0DA4               	rlf	___ftmul@f2+1,f
 14166  0B8A  0DA5               	rlf	___ftmul@f2+2,f
 14167  0B8B  0B89               	decfsz	9,f
 14168  0B8C  2B88               	goto	u2475
 14169  0B8D  3001               	movlw	1
 14170  0B8E  02AE               	subwf	___ftmul@cntr,f
 14171  0B8F  1D03               	btfss	3,2
 14172  0B90  2B79               	goto	l2370
 14173  0B91  3009               	movlw	9
 14174  0B92  00A6               	movwf	??___ftmul
 14175  0B93  0826               	movf	??___ftmul,w
 14176  0B94  00AE               	movwf	___ftmul@cntr
 14177  0B95                     l2382:	
 14178  0B95  1C20               	btfss	___ftmul@f1,0
 14179  0B96  2B9D               	goto	l2386
 14180  0B97  0823               	movf	___ftmul@f2,w
 14181  0B98  07AB               	addwf	___ftmul@f3_as_product,f
 14182  0B99  0824               	movf	___ftmul@f2+1,w
 14183  0B9A  3DAC               	addwfc	___ftmul@f3_as_product+1,f
 14184  0B9B  0825               	movf	___ftmul@f2+2,w
 14185  0B9C  3DAD               	addwfc	___ftmul@f3_as_product+2,f
 14186  0B9D                     l2386:	
 14187  0B9D  3001               	movlw	1
 14188  0B9E                     u2505:	
 14189  0B9E  36A2               	lsrf	___ftmul@f1+2,f
 14190  0B9F  0CA1               	rrf	___ftmul@f1+1,f
 14191  0BA0  0CA0               	rrf	___ftmul@f1,f
 14192  0BA1  0B89               	decfsz	9,f
 14193  0BA2  2B9E               	goto	u2505
 14194  0BA3  3001               	movlw	1
 14195  0BA4                     u2515:	
 14196  0BA4  36AD               	lsrf	___ftmul@f3_as_product+2,f
 14197  0BA5  0CAC               	rrf	___ftmul@f3_as_product+1,f
 14198  0BA6  0CAB               	rrf	___ftmul@f3_as_product,f
 14199  0BA7  0B89               	decfsz	9,f
 14200  0BA8  2BA4               	goto	u2515
 14201  0BA9  3001               	movlw	1
 14202  0BAA  02AE               	subwf	___ftmul@cntr,f
 14203  0BAB  1D03               	btfss	3,2
 14204  0BAC  2B95               	goto	l2382
 14205  0BAD  082B               	movf	___ftmul@f3_as_product,w
 14206  0BAE  00F0               	movwf	___ftpack@arg
 14207  0BAF  082C               	movf	___ftmul@f3_as_product+1,w
 14208  0BB0  00F1               	movwf	___ftpack@arg+1
 14209  0BB1  082D               	movf	___ftmul@f3_as_product+2,w
 14210  0BB2  00F2               	movwf	___ftpack@arg+2
 14211  0BB3  082A               	movf	___ftmul@exp,w
 14212  0BB4  00A6               	movwf	??___ftmul
 14213  0BB5  0826               	movf	??___ftmul,w
 14214  0BB6  00F3               	movwf	___ftpack@exp
 14215  0BB7  082F               	movf	___ftmul@sign,w
 14216  0BB8  00A7               	movwf	??___ftmul+1
 14217  0BB9  0827               	movf	??___ftmul+1,w
 14218  0BBA  00F4               	movwf	___ftpack@sign
 14219  0BBB  3195  25A5         	fcall	___ftpack
 14220  0BBD  0870               	movf	?___ftpack,w
 14221  0BBE  0020               	movlb	0	; select bank0
 14222  0BBF  00A0               	movwf	?___ftmul
 14223  0BC0  0871               	movf	?___ftpack+1,w
 14224  0BC1  00A1               	movwf	?___ftmul+1
 14225  0BC2  0872               	movf	?___ftpack+2,w
 14226  0BC3  00A2               	movwf	?___ftmul+2
 14227  0BC4  0008               	return
 14228  0BC5                     __end_of___ftmul:	
 14229                           
 14230                           	psect	text41
 14231  1275                     __ptext41:	
 14232 ;; *************** function ___awtoft *****************
 14233 ;; Defined at:
 14234 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awtoft.c"
 14235 ;; Parameters:    Size  Location     Type
 14236 ;;  c               2    8[COMMON] int 
 14237 ;; Auto vars:     Size  Location     Type
 14238 ;;  sign            1   13[COMMON] unsigned char 
 14239 ;; Return value:  Size  Location     Type
 14240 ;;                  3    8[COMMON] float 
 14241 ;; Registers used:
 14242 ;;		wreg, status,2, status,0, pclath, cstack
 14243 ;; Tracked objects:
 14244 ;;		On entry : 0/0
 14245 ;;		On exit  : 0/0
 14246 ;;		Unchanged: 0/0
 14247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14248 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14249 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14250 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14251 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14252 ;;Total ram usage:        6 bytes
 14253 ;; Hardware stack levels used:    1
 14254 ;; Hardware stack levels required when called:    1
 14255 ;; This function calls:
 14256 ;;		___ftpack
 14257 ;; This function is called by:
 14258 ;;		_main
 14259 ;;		_calculateCurrent0
 14260 ;;		_calculateCurrent1
 14261 ;;		_calculateCurrent2
 14262 ;;		_calculateCurrent3
 14263 ;;		_Init_Battery_State_Machine
 14264 ;;		_Battery_State_Machine
 14265 ;;		_cc_cv_mode
 14266 ;;		_tempCalc
 14267 ;;		_log
 14268 ;; This function uses a non-reentrant model
 14269 ;;
 14270                           
 14271                           
 14272                           ;psect for function ___awtoft
 14273  1275                     ___awtoft:	
 14274                           
 14275                           ;incstack = 0
 14276                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14277  1275  01FD               	clrf	___awtoft@sign
 14278  1276  1FF9               	btfss	___awtoft@c+1,7
 14279  1277  2A7F               	goto	l2406
 14280  1278  09F8               	comf	___awtoft@c,f
 14281  1279  09F9               	comf	___awtoft@c+1,f
 14282  127A  0AF8               	incf	___awtoft@c,f
 14283  127B  1903               	skipnz
 14284  127C  0AF9               	incf	___awtoft@c+1,f
 14285  127D  01FD               	clrf	___awtoft@sign
 14286  127E  0AFD               	incf	___awtoft@sign,f
 14287  127F                     l2406:	
 14288  127F  0878               	movf	___awtoft@c,w
 14289  1280  00F0               	movwf	___ftpack@arg
 14290  1281  0879               	movf	___awtoft@c+1,w
 14291  1282  00F1               	movwf	___ftpack@arg+1
 14292  1283  01F2               	clrf	___ftpack@arg+2
 14293  1284  308E               	movlw	142
 14294  1285  00FB               	movwf	??___awtoft
 14295  1286  087B               	movf	??___awtoft,w
 14296  1287  00F3               	movwf	___ftpack@exp
 14297  1288  087D               	movf	___awtoft@sign,w
 14298  1289  00FC               	movwf	??___awtoft+1
 14299  128A  087C               	movf	??___awtoft+1,w
 14300  128B  00F4               	movwf	___ftpack@sign
 14301  128C  3195  25A5         	fcall	___ftpack
 14302  128E  0870               	movf	?___ftpack,w
 14303  128F  00F8               	movwf	?___awtoft
 14304  1290  0871               	movf	?___ftpack+1,w
 14305  1291  00F9               	movwf	?___awtoft+1
 14306  1292  0872               	movf	?___ftpack+2,w
 14307  1293  00FA               	movwf	?___awtoft+2
 14308  1294  0008               	return
 14309  1295                     __end_of___awtoft:	
 14310                           
 14311                           	psect	text42
 14312  15A5                     __ptext42:	
 14313 ;; *************** function ___ftpack *****************
 14314 ;; Defined at:
 14315 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 14316 ;; Parameters:    Size  Location     Type
 14317 ;;  arg             3    0[COMMON] unsigned um
 14318 ;;  exp             1    3[COMMON] unsigned char 
 14319 ;;  sign            1    4[COMMON] unsigned char 
 14320 ;; Auto vars:     Size  Location     Type
 14321 ;;		None
 14322 ;; Return value:  Size  Location     Type
 14323 ;;                  3    0[COMMON] float 
 14324 ;; Registers used:
 14325 ;;		wreg, status,2, status,0
 14326 ;; Tracked objects:
 14327 ;;		On entry : 0/0
 14328 ;;		On exit  : 0/0
 14329 ;;		Unchanged: 0/0
 14330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14331 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14333 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14334 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14335 ;;Total ram usage:        8 bytes
 14336 ;; Hardware stack levels used:    1
 14337 ;; This function calls:
 14338 ;;		Nothing
 14339 ;; This function is called by:
 14340 ;;		___awtoft
 14341 ;;		___ftadd
 14342 ;;		___ftdiv
 14343 ;;		___ftmul
 14344 ;; This function uses a non-reentrant model
 14345 ;;
 14346                           
 14347                           
 14348                           ;psect for function ___ftpack
 14349  15A5                     ___ftpack:	
 14350                           
 14351                           ;incstack = 0
 14352                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14353  15A5  0873               	movf	___ftpack@exp,w
 14354  15A6  1903               	btfsc	3,2
 14355  15A7  2DAD               	goto	l2212
 14356  15A8  0872               	movf	___ftpack@arg+2,w
 14357  15A9  0471               	iorwf	___ftpack@arg+1,w
 14358  15AA  0470               	iorwf	___ftpack@arg,w
 14359  15AB  1D03               	skipz
 14360  15AC  2DBE               	goto	l2218
 14361  15AD                     l2212:	
 14362  15AD  3000               	movlw	0
 14363  15AE  00F0               	movwf	?___ftpack
 14364  15AF  3000               	movlw	0
 14365  15B0  00F1               	movwf	?___ftpack+1
 14366  15B1  3000               	movlw	0
 14367  15B2  00F2               	movwf	?___ftpack+2
 14368  15B3  0008               	return
 14369  15B4                     l2216:	
 14370  15B4  3001               	movlw	1
 14371  15B5  00F5               	movwf	??___ftpack
 14372  15B6  0875               	movf	??___ftpack,w
 14373  15B7  07F3               	addwf	___ftpack@exp,f
 14374  15B8  3001               	movlw	1
 14375  15B9                     u2005:	
 14376  15B9  36F2               	lsrf	___ftpack@arg+2,f
 14377  15BA  0CF1               	rrf	___ftpack@arg+1,f
 14378  15BB  0CF0               	rrf	___ftpack@arg,f
 14379  15BC  0B89               	decfsz	9,f
 14380  15BD  2DB9               	goto	u2005
 14381  15BE                     l2218:	
 14382  15BE  30FE               	movlw	254
 14383  15BF  0572               	andwf	___ftpack@arg+2,w
 14384  15C0  1903               	btfsc	3,2
 14385  15C1  2DD7               	goto	l741
 14386  15C2  2DB4               	goto	l2216
 14387  15C3                     l2220:	
 14388  15C3  3001               	movlw	1
 14389  15C4  00F5               	movwf	??___ftpack
 14390  15C5  0875               	movf	??___ftpack,w
 14391  15C6  07F3               	addwf	___ftpack@exp,f
 14392  15C7  3001               	movlw	1
 14393  15C8  07F0               	addwf	___ftpack@arg,f
 14394  15C9  3000               	movlw	0
 14395  15CA  1803               	skipnc
 14396  15CB  3001               	movlw	1
 14397  15CC  07F1               	addwf	___ftpack@arg+1,f
 14398  15CD  3000               	movlw	0
 14399  15CE  1803               	skipnc
 14400  15CF  3001               	movlw	1
 14401  15D0  07F2               	addwf	___ftpack@arg+2,f
 14402  15D1  3001               	movlw	1
 14403  15D2                     u2025:	
 14404  15D2  36F2               	lsrf	___ftpack@arg+2,f
 14405  15D3  0CF1               	rrf	___ftpack@arg+1,f
 14406  15D4  0CF0               	rrf	___ftpack@arg,f
 14407  15D5  0B89               	decfsz	9,f
 14408  15D6  2DD2               	goto	u2025
 14409  15D7                     l741:	
 14410  15D7  30FF               	movlw	255
 14411  15D8  0572               	andwf	___ftpack@arg+2,w
 14412  15D9  1903               	btfsc	3,2
 14413  15DA  2DE4               	goto	l2228
 14414  15DB  2DC3               	goto	l2220
 14415  15DC                     l2226:	
 14416  15DC  3001               	movlw	1
 14417  15DD  02F3               	subwf	___ftpack@exp,f
 14418  15DE  3001               	movlw	1
 14419  15DF                     u2045:	
 14420  15DF  35F0               	lslf	___ftpack@arg,f
 14421  15E0  0DF1               	rlf	___ftpack@arg+1,f
 14422  15E1  0DF2               	rlf	___ftpack@arg+2,f
 14423  15E2  0B89               	decfsz	9,f
 14424  15E3  2DDF               	goto	u2045
 14425  15E4                     l2228:	
 14426  15E4  1BF1               	btfsc	___ftpack@arg+1,7
 14427  15E5  2DEA               	goto	l748
 14428  15E6  3002               	movlw	2
 14429  15E7  0273               	subwf	___ftpack@exp,w
 14430  15E8  1803               	skipnc
 14431  15E9  2DDC               	goto	l2226
 14432  15EA                     l748:	
 14433  15EA  1873               	btfsc	___ftpack@exp,0
 14434  15EB  2DF2               	goto	l749
 14435  15EC  30FF               	movlw	255
 14436  15ED  05F0               	andwf	___ftpack@arg,f
 14437  15EE  307F               	movlw	127
 14438  15EF  05F1               	andwf	___ftpack@arg+1,f
 14439  15F0  30FF               	movlw	255
 14440  15F1  05F2               	andwf	___ftpack@arg+2,f
 14441  15F2                     l749:	
 14442  15F2  1003               	clrc
 14443  15F3  0CF3               	rrf	___ftpack@exp,f
 14444  15F4  0873               	movf	___ftpack@exp,w
 14445  15F5  00F5               	movwf	??___ftpack
 14446  15F6  01F6               	clrf	??___ftpack+1
 14447  15F7  01F7               	clrf	??___ftpack+2
 14448  15F8  3010               	movlw	16
 14449  15F9                     u2085:	
 14450  15F9  35F5               	lslf	??___ftpack,f
 14451  15FA  0DF6               	rlf	??___ftpack+1,f
 14452  15FB  0DF7               	rlf	??___ftpack+2,f
 14453  15FC  0B89               	decfsz	9,f
 14454  15FD  2DF9               	goto	u2085
 14455  15FE  0875               	movf	??___ftpack,w
 14456  15FF  04F0               	iorwf	___ftpack@arg,f
 14457  1600  0876               	movf	??___ftpack+1,w
 14458  1601  04F1               	iorwf	___ftpack@arg+1,f
 14459  1602  0877               	movf	??___ftpack+2,w
 14460  1603  04F2               	iorwf	___ftpack@arg+2,f
 14461  1604  0874               	movf	___ftpack@sign,w
 14462  1605  1903               	btfsc	3,2
 14463  1606  0008               	return
 14464  1607  17F2               	bsf	___ftpack@arg+2,7
 14465  1608  0008               	return
 14466  1609                     __end_of___ftpack:	
 14467  007E                     btemp	set	126	;btemp
 14468  007E                     wtemp	set	126
 14469  007E                     wtemp0	set	126
 14470  0080                     wtemp1	set	128
 14471  0082                     wtemp2	set	130
 14472  0084                     wtemp3	set	132
 14473  0086                     wtemp4	set	134
 14474  0088                     wtemp5	set	136
 14475  007F                     wtemp6	set	127
 14476  007E                     ttemp	set	126
 14477  007E                     ttemp0	set	126
 14478  0081                     ttemp1	set	129
 14479  0084                     ttemp2	set	132
 14480  0087                     ttemp3	set	135
 14481  007F                     ttemp4	set	127
 14482  007E                     ltemp	set	126
 14483  007E                     ltemp0	set	126
 14484  0082                     ltemp1	set	130
 14485  0086                     ltemp2	set	134
 14486  0080                     ltemp3	set	128


Data Sizes:
    Strings     14
    Constant    330
    Data        10
    BSS         93
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     79      80
    BANK1            80      0      78
    BANK2            80      0      24
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            48      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    LCDWriteString@characters	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _main->_LCDWriteString
    _main->___awtoft
    _tempCalc->___awtoft
    _log->___awtoft
    ___ftadd->___awtoft
    _readIAnalog->___aldiv
    _readButton->_ADCRead
    _cc_cv_mode->___awtoft
    _calculateCurrent3->___awtoft
    _calculateCurrent2->___awtoft
    _calculateCurrent1->___awtoft
    _calculateCurrent0->___awtoft
    ___ftdiv->___awtoft
    _LCDInit->_LCDWrite
    _LCDClear->_gotoXY
    _gotoXY->_LCDWrite
    _Init_Battery_State_Machine->___awtoft
    _LCDWriteString->_LCDWriteCharacter
    _LCDWriteInt->_LCDWriteCharacter
    _LCDWriteCharacter->___wmul
    _Battery_State_Machine->___awtoft
    ___fttol->___awtoft
    ___ftmul->___awtoft
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_tempCalc
    _tempCalc->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftadd->___ftmul
    _readIAnalog->___aldiv
    _cc_cv_mode->___fttol
    _calculateCurrent3->___fttol
    _calculateCurrent2->___fttol
    _calculateCurrent1->___fttol
    _calculateCurrent0->___fttol
    _SYSTEM_Initialize->_Init_Battery_State_Machine
    _Init_Battery_State_Machine->___fttol
    _Battery_State_Machine->___fttol
    ___fttol->___ftdiv
    ___fttol->___ftmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0  112802
                                             56 BANK0     23    23      0
                            _ADCRead
              _Battery_State_Machine
                           _LCDClear
                            _LCDInit
                  _LCDWriteCharacter
                        _LCDWriteInt
                     _LCDWriteString
                 _PWM6_LoadDutyValue
                 _PWM7_LoadDutyValue
                  _SYSTEM_Initialize
                           ___awtoft
                            ___ftdiv
                            ___fttol
                  _calculateCurrent0
                  _calculateCurrent1
                  _calculateCurrent2
                  _calculateCurrent3
                         _cc_cv_mode
                             _gotoXY
                         _readButton
                        _readIAnalog
                           _tempCalc
 ---------------------------------------------------------------------------------
 (1) _tempCalc                                            11     9      2   33908
                                             45 BANK0     11     9      2
                            _ADCRead (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                            ___fttol
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   17068
                                             39 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     330
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           10     3      7    7315
                                             29 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     322
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3356
                                             29 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3183
                                             16 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (1) _readIAnalog                                         24    22      2    1498
                                              9 COMMON     4     4      0
                                              6 BANK0     20    18      2
                            _ADCRead
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     406
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _readButton                                           3     3      0      22
                                              4 COMMON     3     3      0
                            _ADCRead
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     1      3      22
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _cc_cv_mode                                           8     8      0    7182
                                             30 BANK0      8     8      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent3                                    3     3      0    6952
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent2                                    3     3      0    6952
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent1                                    3     3      0    6952
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent0                                    3     3      0    6952
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3365
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    3     3      0   10633
                                             35 BANK0      3     3      0
                     _ADC_Initialize
         _Init_Battery_State_Machine
                           _LCDClear
                            _LCDInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PWM_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              1     1      0     803
                                              5 COMMON     1     1      0
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             3     3      0    3021
                                              8 COMMON     3     3      0
                           _LCDWrite
                             _gotoXY
 ---------------------------------------------------------------------------------
 (1) _gotoXY                                               3     2      1    2172
                                              5 COMMON     3     2      1
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _Init_Battery_State_Machine                           5     5      0    6786
                                             30 BANK0      5     5      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM7_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM6_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCDWriteString                                       3     1      2    1847
                                             12 COMMON     2     0      2
                                              0 BANK0      1     1      0
                  _LCDWriteCharacter
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         16    11      5    7267
                                              0 BANK0     16    11      5
                  _LCDWriteCharacter
                            ___awdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     406
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _LCDWriteCharacter                                    6     6      0    1643
                                              6 COMMON     6     6      0
                           _LCDWrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     728
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _LCDWrite                                             5     4      1     803
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _Battery_State_Machine                                6     6      0    7226
                                             30 BANK0      6     6      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     994
                                             16 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    3067
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2593
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1707
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _Battery_State_Machine
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _LCDClear
     _LCDWrite
     _gotoXY
       _LCDWrite
   _LCDInit
     _LCDWrite
   _LCDWriteCharacter
     _LCDWrite
     ___wmul
   _LCDWriteInt
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
     ___awdiv
     ___lwmod
   _LCDWriteString
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
   _PWM6_LoadDutyValue
   _PWM7_LoadDutyValue
   _SYSTEM_Initialize
     _ADC_Initialize
     _Init_Battery_State_Machine
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
     _LCDClear
       _LCDWrite
       _gotoXY
         _LCDWrite
     _LCDInit
       _LCDWrite
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM_Initialize
     _TMR2_Initialize
     _TMR4_Initialize
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___ftpack (ARG)
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
   _calculateCurrent0
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent1
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent2
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent3
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _cc_cv_mode
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _gotoXY
     _LCDWrite
   _readButton
     _ADCRead
   _readIAnalog
     _ADCRead
     ___aldiv
     ___wmul
   _tempCalc
     _ADCRead (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___fttol (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _log (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul
       _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      18       9       30.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               30      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      C4      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      C4      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri Sep 14 12:45:02 2018

                       _stateCounter 00D5                                    _j 00E9  
                                  _x 00EB               LCDWriteInt@fieldLength 0022  
            __size_of_PWM_Initialize 0015                          __CFG_CP$OFF 0000  
                       ___awdiv@sign 0076                  ___wmul@multiplicand 0072  
        __size_of_PWM6_LoadDutyValue 0016                         ___ftadd@exp1 003C  
                       ___ftadd@exp2 003B                          __CFG_LVP$ON 0000  
                       ___ftadd@sign 003A                                  l260 0EE1  
                                l261 0EF2                                  l350 12A0  
                                l190 11E3                                  l351 12A2  
                                l352 12A8                                  l353 12B8  
                                l265 0F3D                                  l193 11EA  
                                l354 12AC                        LCDClear@index 0079  
                                l635 1681                                  l580 1225  
                                l741 15D7                                  l832 175F  
                                l748 15EA                                  l772 00ED  
                                l749 15F2                                  _GIE 005F  
                                _RB2 006A                         __CFG_CPD$OFF 0000  
                                _log 0A61                      __end_of_ADCRead 11F1  
                    _TMR2_Initialize 1184                         __CFG_BORV$LO 0000  
                                wreg 0009                      __end_of_LCDInit 137E  
                       ?_LCDWriteInt 0020                         __CFG_ZCD$OFF 0000  
                       ___ftdiv@cntr 002A                         ___ftdiv@sign 002F  
                               l3002 0248                                 l2220 15C3  
                               l2212 15AD                                 l3014 02B3  
                               l3006 0261                                 l2310 00B9  
                               l2216 15B4                                 l3024 11B3  
                               l2312 00C3                                 l2304 00A6  
                               l3200 0469                                 l3120 02ED  
                               l2226 15DC                                 l2218 15BE  
                               l3050 0C1A                                 l2322 00DF  
                               l2314 00C8                                 l2228 15E4  
                               l3060 0C30                                 l2332 0111  
                               l2324 00E9                                 l2316 00CC  
                               l3212 04A1                                 l3140 0320  
                               l2406 127F                                 l3054 0C1E  
                               l3038 0BE6                                 l2342 012C  
                               l2414 1394                                 l3206 0487  
                               l3134 0305                                 l2352 0B28  
                               l2264 121F                                 l3072 0C69  
                               l3056 0C22                                 l3048 0BED  
                               l2328 00FF                                 l3232 04E5  
                               l3128 0300                                 l2370 0B79  
                               l3066 0C34                                 l3058 0C2A  
                               l2514 12DB                                 l3090 0F0D  
                               l2282 0076                                 l2418 13AA  
                               l3226 04D0                                 l3146 034B  
                               l2436 170B                                 l3068 0C5B  
                               l2508 12C7                                 l2292 008C  
                               l3236 04EC                                 l2382 0B95  
                               l2374 0B81                                 l2358 0B3E  
                               l2462 1756                                 l2454 173B  
                               l3086 0F00                                 l2286 007D  
                               l3254 0521                                 l3182 043C  
                               l2464 1762                                 l2456 1749  
                               l2480 13CB                                 l3176 041E  
                               l2386 0B9D                                 l2714 16A2  
                               l2706 1692                                 l2468 1770  
                               l2732 16E9                                 l2724 16D0  
                               l2716 16B0                                 l3188 0456  
                               l2750 1515                                 l2814 0A3F  
                               l2806 0A26                                 l3390 07B1  
                               l2760 151D                                 l2744 150A  
                               l2840 12F2                                 l2904 0022  
                               l2728 16DB                                 l2680 0A80  
                               l2762 1529                                 l2930 17CB  
                               l2826 1240                                 l2498 09B1  
                               l3394 07BA                                 l2772 1544  
                               l2844 12FE                                 l2924 17B7  
                               l2838 12E6                                 l2950 17FC  
                               l2918 179D                                 l2686 0A93  
                               l2776 154C                                 l2768 153B  
                               l2848 1307                                 l2792 09E5  
                               l2944 17E3                                 l2952 17FE  
                               l2928 17C9                                 l2786 09CF  
                               l2938 17DA                                 l2892 148F  
                               l2876 0E88                                 l2982 0181  
                               l2886 144A                                 l2984 0189  
                               l2986 019B                                 l2898 14D4  
                               ?_log 0047                                 l2998 022E  
                               STR_1 0954                                 STR_2 094F  
                               STR_3 094A                                 u2005 15B9  
                               u2025 15D2                                 u2045 15DF  
                               u3005 0A07                                 _LATA 0016  
                               _LATB 0017                                 u3015 0A27  
                               _LATC 0018                                 u3105 12FF  
                               u3025 0A36                                 u2305 00BA  
                               u2155 1226                                 u3035 0A40  
                               u2085 15F9                                 u2165 122B  
                               u3205 1489                                 u3125 0D7B  
                               u3215 14CE                                 u3135 0DD5  
                               u2335 00CD                                 u2505 0B9E  
                               u3225 001C                                 u3145 0E13  
                               _T2PR 028D                                 u2515 0BA4  
                               u2435 0B4A                                 u3075 12E9  
                               u3235 1200                                 u3155 0E62  
                               u2275 00A7                                 u2445 0B5A  
                               u3245 1216                                 u2365 00E0  
                               u2615 173C                                 u3095 12F8  
                               u3255 178B                                 u2465 0B82  
                               u2705 12D9                                 u3265 1797  
                               u3185 0E94                                 u2730 1341  
                               _T4PR 0293                                 u2475 0B88  
                               u3355 015F                                 u3195 1444  
                               u3275 17A7                                 u3460 0BD0  
                               u2645 1757                                 u3365 0173  
                               u3525 0C49                                 u3285 17B3  
                               u2805 16A5                                 u3615 0F57  
                               u3295 17C1                                 u2585 1712  
                               u2905 1520                                 u2825 16B1  
                               u3705 040C                                 u3395 0201  
                               u3555 0ECD                                 u2835 16C5  
                               u2925 152A                                 u3645 0FB0  
                               u2845 16D1                                 u2935 1534  
                               u2695 12C5                                 u2945 153C  
                               u3825 0478                                 u3745 042D  
                               u3845 0496                                 u3765 044B  
                               u2995 09F7                                 u3875 04C9  
                               u3795 0466                                 u3957 02F5  
                               u3967 17EE                                 u3895 04DE  
                               u3977 1418                                 u3987 1429  
                tempCalc@analogValue 004D                                 _WPUA 0F39  
                               _WPUB 0F44                                 _WPUC 0F4F  
                               _WPUE 0F65                                 _Imin 00C5  
                               _Iref 00CD                                 _Iout 00DB  
                       __CFG_WRT$OFF 0000                        __CFG_FCMEN$ON 0000  
                               _Vref 00D1                                 _main 02C3  
                       ___ftpack@arg 0070                         ___ftpack@exp 0073  
                               fsr0h 0005                                 fsr1h 0007  
                               fsr0l 0004                                 indf0 0000  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E                                 log@x 0047  
                       ?_readIAnalog 0026                        __CFG_BOREN$ON 0000  
                               ltemp 007E                                 start 0002  
                               ttemp 007E                                 wtemp 007E  
                      __CFG_CSWEN$ON 0000                        __CFG_MCLRE$ON 0000  
                       ___ftmul@cntr 002E                         ___ftmul@sign 002F  
                   __end_of_LCDClear 12E0                         ___fttol@exp1 003D  
                              ??_log 004A                         ___fttol@lval 0039  
__size_of_Init_Battery_State_Machine 0067       __size_of_OSCILLATOR_Initialize 0009  
                   __end_of_LCDWrite 12BA        __end_of_OSCILLATOR_Initialize 1178  
                    __end_of___aldiv 16F2                                _ADACQ 009D  
                              _ADCAP 009B                                _ADACT 0099  
                              ?_main 0070                                _ADCLK 0098  
                              _ADPCH 009E                                _ADREF 009A  
                    __end_of___awdiv 1551                                _ADPRE 009C  
                    __end_of___ftadd 0144                        __CFG_WDTE$OFF 0000  
                              _ADRPT 010D                      __end_of___ftdiv 0A61  
                    __end_of___ftmul 0BC5                      ___awdiv@divisor 0070  
                    __end_of___ftsub 1256                      __end_of___fttol 1779  
                              _T2CON 028E                                _LATA5 00B5  
                              _T4CON 0294                                _T2HLT 028F  
                              _T4HLT 0295                                _T2TMR 028C  
                              _T2RST 0291                      __end_of___lwmod 130C  
                              _T4TMR 0292                                _T4RST 0297  
                    ___awdiv@counter 0075                                _OSCEN 0891  
                              _TRISA 0011                                _TRISB 0012  
                              _TRISC 0013                      _TMR4_Initialize 1192  
                              _Imode 00D9               ?_Battery_State_Machine 0070  
                              _cc_cv 00E1                        ___awtoft@sign 007D  
                              _frexp 13B9                                _fonts 0800  
                              _errno 00E3                        ___ftpack@sign 0074  
                              main@j 006A                                ltemp0 007E  
                              ltemp1 0082                                ltemp2 0086  
                              ltemp3 0080                         main@slowLoop 0063  
                              ttemp0 007E                                ttemp1 0081  
                              ttemp2 0084                                ttemp3 0087  
                              ttemp4 007F                                status 0003  
                              wtemp0 007E                                wtemp1 0080  
                              wtemp2 0082                                wtemp3 0084  
                              wtemp4 0086                                wtemp5 0088  
                              wtemp6 007F                      __initialization 07BD  
                        log@exponent 004B                         __end_of_main 07BD  
            __end_of_TMR2_Initialize 1192                            ??_ADCRead 0073  
                             ??_main 0058                        ___fttol@sign1 0038  
                          ??_LCDInit 0075               Battery_State_Machine@z 0043  
            LCDWrite@data_or_command 0072                               _ADCON0 0093  
                             _ADCON1 0094                               _ADCON2 0095  
                             _ADCON3 0096                               ?_frexp 0070  
                             _ADLTHH 010F                               _ADLTHL 010E  
                             _ADRESH 008D                               _ADRESL 008C  
                             _ADSTAT 0097                               _ADUTHH 0111  
                   ___awdiv@dividend 0072                               _ADUTHL 0110  
                   __end_of___awtoft 1295                               _ANSELA 0F38  
                             _ANSELB 0F43                               _ANSELC 0F4E  
                   __end_of___ftpack 1609                               _RB0PPS 0F18  
                             _RA6PPS 0F16                               _RA7PPS 0F17  
                     __CFG_WDTCCS$SC 0000                               _FVRCON 090C  
                             _OSCFRQ 0893                       __CFG_PWRTE$OFF 0000  
                     _LCDWriteString 11B3                         _CCPTMRS1bits 021F  
                             ___ftge 137E                            ??___aldiv 0078  
                             ___wmul 121D                            ??___awdiv 0074  
                          ??___ftadd 0036                       __CFG_STVREN$ON 0000  
                     _PWM_Initialize 11C7                            ??___ftdiv 0026  
                          ??___ftmul 0026                            ??___ftsub 007E  
                          ??___fttol 0034                            ??___lwmod 0074  
                             _gotoXY 11A0                               _button 006F  
            __end_of_TMR4_Initialize 11A0                     ___awdiv@quotient 0077  
                             _totals 0120                ___ftmul@f3_as_product 002B  
                   __end_of_tempCalc 0D65                         LCDWrite@data 0070  
                       LCDWriteInt@i 002F                         LCDWriteInt@j 002E  
                          ?_LCDClear 0070                    _SYSTEM_Initialize 13F4  
               __size_of_LCDWriteInt 00B9                     __end_oflog@coeff 094A  
            __end_of__initialization 07FD                           ___ftadd@f1 0030  
                         ___ftadd@f2 0033                           ___ftge@ff1 0070  
                         ___ftge@ff2 0073                            ?_LCDWrite 0070  
                 ?_SYSTEM_Initialize 0070               __end_of_LCDWriteString 11C7  
                       eval_poly@res 0044                           ___ftdiv@f1 0023  
                         ___ftdiv@f2 0020                           ___ftdiv@f3 002B  
                         ___awtoft@c 0078                           ___ftmul@f1 0020  
                         ___ftmul@f2 0023               __end_of_PWM_Initialize 11DC  
               __size_of_readIAnalog 014C                           ___ftsub@f1 0040  
                         ___ftsub@f2 003D                           ___fttol@f1 0030  
                     __pcstackCOMMON 0070                         __pidataBANK1 0007  
                       __pidataBANK2 1167                  ??_SYSTEM_Initialize 0043  
                      __end_of_frexp 13F4                        __end_of_fonts 092F  
                          LCDWrite@d 0073                            LCDWrite@i 0074  
                   ?_TMR2_Initialize 0070                           _cc_cv_mode 0EB1  
        __size_of_PWM7_LoadDutyValue 0016                       main@efficiency 005A  
                  LCDWriteInt@F13688 00C0                    _calculateCurrent0 1431  
                  _calculateCurrent1 1476                    _calculateCurrent2 14BB  
                  _calculateCurrent3 0009                              ??_frexp 0074  
          __end_of_SYSTEM_Initialize 1431                           __pbssBANK0 006F  
                         __pbssBANK1 00A0                           __pbssBANK2 0120  
                 ?_calculateCurrent0 0070                   ?_calculateCurrent1 0070  
                 ?_calculateCurrent2 0070                   ?_calculateCurrent3 0070  
                       _batteryState 00DF                   __size_of_eval_poly 0060  
                         ??_LCDClear 0078                       main@faultCount 005F  
                         ??_LCDWrite 0071                      ?_LCDWriteString 007C  
                ??_calculateCurrent0 003E                  ??_calculateCurrent1 003E  
                ??_calculateCurrent2 003E                  ??_calculateCurrent3 003E  
                    ?_PWM_Initialize 0070                           __pmaintext 02C3  
                            ?___ftge 0070                              ?___wmul 0070  
                    __CFG_PPS1WAY$ON 0000           __end_of_PWM6_LoadDutyValue 1207  
                            ?_gotoXY 0075                              _ADCRead 11DC  
                   ?_TMR4_Initialize 0070                            ?___awtoft 0078  
                          ?___ftpack 0070                              _ADSTPTH 0113  
                            _ADSTPTL 0112             __CFG_SCANE$not_available 0000  
                __CFG_RSTOSC$HFINT32 0000              __size_of_ADC_Initialize 001F  
            ??_Battery_State_Machine 003E                              _LCDInit 1343  
          __end_of_calculateCurrent0 1476            __end_of_calculateCurrent1 14BB  
          __end_of_calculateCurrent2 1500            __end_of_calculateCurrent3 004E  
                            _OSCCON1 088D                              _OSCCON3 088F  
                            _OSCTUNE 0892                              _PWM6DCH 038D  
                            _PWM6DCL 038C                              _PWM7DCH 0391  
                            _PWM7DCL 0390                              _PWM6CON 038E  
                            _PWM7CON 0392                              _PPSLOCK 0E8F  
                     main@menuButton 0069                       main@dutyCycle6 006B  
                     main@dutyCycle7 006D                           _lastButton 00EA  
                          ?_tempCalc 004D                              ___aldiv 1670  
                    __size_of___ftge 003B                              ___awdiv 1500  
                            ___ftadd 004E                           _readButton 1779  
                            ___ftdiv 09B8                      __size_of___wmul 001B  
                            ___ftmul 0B11                              ___ftsub 1238  
                            ___fttol 16F2                   main@displayRefresh 0064  
                            ___lwmod 12E0                      __size_of_gotoXY 0013  
                         ??___awtoft 007B                           ??___ftpack 0075  
                  __end_of_eval_poly 09B8                              __ptext1 0C7E  
                            __ptext2 0A61                              __ptext3 13B9  
                            __ptext4 0958                              __ptext5 137E  
                            __ptext6 1238                              __ptext7 004E  
                            __ptext8 0D65                              __ptext9 1670  
                        ?_cc_cv_mode 0070                _OSCILLATOR_Initialize 116F  
                          _T2CONbits 028E                              _current 00B0  
                       __size_of_log 00B0                       ADCRead@channel 0073  
                   ___aldiv@dividend 0074                            _T4CONbits 0294  
           ??_PIN_MANAGER_Initialize 0070                              _samples 2260  
         __size_of_SYSTEM_Initialize 003D                              clrloop0 1179  
                            _voltage 00B8         ??_Init_Battery_State_Machine 003E  
               end_of_initialization 07FD                LCDWriteCharacter@base 007A  
                            gotoXY@x 0077                              gotoXY@y 0075  
                         ??_tempCalc 007E                     ___aldiv@quotient 0022  
                       __pstringtext 0800                    _LCDWriteCharacter 1551  
              __CFG_WDTCPS$WDTCPS_31 0000                   ?_LCDWriteCharacter 0070  
         __size_of_calculateCurrent0 0045           __size_of_calculateCurrent1 0045  
         __size_of_calculateCurrent2 0045           __size_of_calculateCurrent3 0045  
                          _TRISAbits 0011                  ??_LCDWriteCharacter 0076  
                   __CFG_FEXTOSC$OFF 0000                          ___ftdiv@exp 002E  
                __size_of_cc_cv_mode 014F                    __size_of_LCDClear 0026  
         LCDWriteCharacter@character 0079                    __size_of_LCDWrite 0025  
                        ___ftmul@exp 002A            __end_of_LCDWriteCharacter 15A5  
                        ?_readButton 0070            readIAnalog@analog_channel 0079  
                     __end_of___ftge 13B9                            _VHoldMode 00DD  
                     __end_of___wmul 1238                       _ADC_Initialize 1256  
                     __end_of_gotoXY 11B3               ?_OSCILLATOR_Initialize 0070  
                          _IminCount 00C9                  start_initialization 07BD  
                         eval_poly@d 0040                           eval_poly@n 0042  
                         eval_poly@x 003D                    main@faultNotReset 0061  
    __size_of_PIN_MANAGER_Initialize 0037                          __end_of_log 0B11  
                      ??_LCDWriteInt 0025                     ??_LCDWriteString 0020  
                         frexp@value 0070                     ??_PWM_Initialize 0070  
                      ??_readIAnalog 0028                     __CFG_LPBOREN$OFF 0000  
                           ??___ftge 0076                    tempCalc@steinhart 0055  
                           ??___wmul 0074               __end_of_ADC_Initialize 1275  
                      _tempCalc$1190 0052                          __pdataBANK1 00EC  
                        __pdataBANK2 0130           __end_of_PWM7_LoadDutyValue 121D  
                           ??_gotoXY 0076                             ?_ADCRead 0070  
       PWM7_LoadDutyValue@dutyCycle7 0070                    __size_of___awtoft 0020  
                           ?_LCDInit 0070                    __size_of___ftpack 0064  
                        __pbssBIGRAM 2260       __size_of_Battery_State_Machine 017F  
      __end_of_Battery_State_Machine 02C3                            ___latbits 0002  
                      __pcstackBANK0 0020                   _PWM6_LoadDutyValue 11F1  
           __size_of_TMR2_Initialize 000E   __end_of_Init_Battery_State_Machine 1670  
         _Init_Battery_State_Machine 1609                  __size_of_readButton 0087  
                ?_PWM6_LoadDutyValue 0070                  __end_of_LCDWriteInt 0C7E  
                        _batteryTemp 00EC               _PIN_MANAGER_Initialize 130C  
         __size_of_LCDWriteCharacter 0054                             ?___aldiv 0070  
                __end_of_readIAnalog 0EB1                    __size_of_tempCalc 00E7  
                           ?___awdiv 0070                             ?___ftadd 0030  
                           ?___ftdiv 0020                             ?___ftmul 0020  
                           ?___ftsub 003D                             ?___fttol 0030  
                   LCDWriteInt@value 0020                             ?___lwmod 0070  
                    ?_ADC_Initialize 0070                 ??_PWM6_LoadDutyValue 0072  
                       ??_cc_cv_mode 003E                            _eval_poly 0958  
           __size_of_TMR4_Initialize 000E                       __size_of_frexp 003B  
                           _T2CLKCON 0290                             _T4CLKCON 0296  
                        cc_cv_mode@z 0045                             _LCDClear 12BA  
                    ___aldiv@divisor 0070                      ___aldiv@counter 0020  
                     ___wmul@product 0074                             _LATAbits 0016  
                           _LCDWrite 1295                            clear_ram0 1178  
                           _PIE0bits 0716                   __end_of_cc_cv_mode 1000  
                           _PIR4bits 0710                     readIAnalog@value 007B  
                          main@MPPT0 0065                            main@MPPT1 0067  
                   __size_of_ADCRead 0015                           _ADCON0bits 0093  
                  ___wmul@multiplier 0070                           ?_eval_poly 003D  
                   __size_of_LCDInit 003B                             _Ianalogs 00A0  
                        _LCDWriteInt 0BC5          Init_Battery_State_Machine@z 0042  
                  ??_TMR2_Initialize 0070                          _readIAnalog 0D65  
                          frexp@eptr 0073                             _Vanalogs 00A8  
                       ??_readButton 0074              ??_OSCILLATOR_Initialize 0070  
               LCDWriteInt@numPlaces 0023                     __size_of___aldiv 0082  
                   __size_of___awdiv 0051                     __size_of___ftadd 00F6  
                   __size_of___ftdiv 00A9                     __size_of___ftmul 00B4  
                   __size_of___ftsub 001E                     __size_of___fttol 0087  
                   __size_of___lwmod 002C                          _readButtons 00E5  
                           ___awtoft 1275                             ___ftpack 15A5  
                           _channels 0130                             __ptext10 1779  
                           __ptext11 11DC                             __ptext20 1184  
                           __ptext12 0EB1                             __ptext21 11C7  
                           __ptext13 0009                             __ptext30 11F1  
                           __ptext22 130C                             __ptext14 14BB  
                           __ptext31 11B3                             __ptext23 116F  
                           __ptext15 1476                             __ptext40 0B11  
                           __ptext32 0BC5                             __ptext24 1343  
                           __ptext16 1431                             __ptext41 1275  
                           __ptext33 12E0                             __ptext25 12BA  
                           __ptext17 09B8                             __ptext42 15A5  
                           __ptext34 1500                             __ptext26 11A0  
                           __ptext18 13F4                             __ptext35 1551  
                           __ptext27 1609                             __ptext19 1192  
                           __ptext36 121D                             __ptext28 1256  
                           __ptext37 1295                             __ptext29 1207  
                           __ptext38 0144                             __ptext39 16F2  
                    LCDWriteInt@sign 0024                            tempCalc@R 004F  
                 __end_of_readButton 1800                    ??_TMR4_Initialize 0070  
                      __size_of_main 04FA                 __CFG_WDTCWS$WDTCWS_7 0000  
                           _tempCalc 0C7E          PIN_MANAGER_Initialize@state 0070  
                           log@coeff 092F                          ??_eval_poly 007E  
                        _sampleIndex 00E7                   _PWM7_LoadDutyValue 1207  
        ?_Init_Battery_State_Machine 0070                     ___lwmod@dividend 0072  
                     LCDWriteInt@str 0029              ?_PIN_MANAGER_Initialize 0070  
                ?_PWM7_LoadDutyValue 0070                    __CFG_CLKOUTEN$OFF 0000  
                        _PPSLOCKbits 0E8F                     ??_ADC_Initialize 0070  
       PWM6_LoadDutyValue@dutyCycle6 0070                 ??_PWM7_LoadDutyValue 0072  
                    ___lwmod@divisor 0070                      ___lwmod@counter 0075  
           LCDWriteString@characters 007C                         ___aldiv@sign 0021  
                 readIAnalog@channel 0026                _Battery_State_Machine 0144  
     __end_of_PIN_MANAGER_Initialize 1343                        main@IOutTotal 005D  
            __size_of_LCDWriteString 0014  
