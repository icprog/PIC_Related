

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Fri Sep 14 13:09:54 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
    62                           	dabs	1,0x620,48
    63                           	dabs	1,0x5A0,80
    64                           	dabs	1,0x520,80
    65                           	dabs	1,0x4A0,80
    66                           	dabs	1,0x420,80
    67                           	dabs	1,0x3D0,32
    68                           	dabs	1,0x2260,0,_samples
    69                           	dabs	1,0x7E,2
    70  0000                     
    71                           ; Version 1.44
    72                           ; Generated 14/09/2017 GMT
    73                           ; 
    74                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    75                           ; All rights reserved.
    76                           ; 
    77                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    78                           ; 
    79                           ; Redistribution and use in source and binary forms, with or without modification, are
    80                           ; permitted provided that the following conditions are met:
    81                           ; 
    82                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    83                           ;        conditions and the following disclaimer.
    84                           ; 
    85                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    86                           ;        of conditions and the following disclaimer in the documentation and/or other
    87                           ;        materials provided with the distribution.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC16F18855 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105  0000                     	;# 
   106  0001                     	;# 
   107  0002                     	;# 
   108  0003                     	;# 
   109  0004                     	;# 
   110  0005                     	;# 
   111  0006                     	;# 
   112  0007                     	;# 
   113  0008                     	;# 
   114  0009                     	;# 
   115  000A                     	;# 
   116  000B                     	;# 
   117  000C                     	;# 
   118  000D                     	;# 
   119  000E                     	;# 
   120  0010                     	;# 
   121  0011                     	;# 
   122  0012                     	;# 
   123  0013                     	;# 
   124  0016                     	;# 
   125  0017                     	;# 
   126  0018                     	;# 
   127  001C                     	;# 
   128  001C                     	;# 
   129  001D                     	;# 
   130  001D                     	;# 
   131  001E                     	;# 
   132  001F                     	;# 
   133  008C                     	;# 
   134  008C                     	;# 
   135  008D                     	;# 
   136  008E                     	;# 
   137  008E                     	;# 
   138  008F                     	;# 
   139  0090                     	;# 
   140  0090                     	;# 
   141  0091                     	;# 
   142  0093                     	;# 
   143  0094                     	;# 
   144  0095                     	;# 
   145  0096                     	;# 
   146  0097                     	;# 
   147  0098                     	;# 
   148  0099                     	;# 
   149  009A                     	;# 
   150  009B                     	;# 
   151  009C                     	;# 
   152  009D                     	;# 
   153  009E                     	;# 
   154  010C                     	;# 
   155  010D                     	;# 
   156  010E                     	;# 
   157  010E                     	;# 
   158  010F                     	;# 
   159  0110                     	;# 
   160  0110                     	;# 
   161  0111                     	;# 
   162  0112                     	;# 
   163  0112                     	;# 
   164  0113                     	;# 
   165  0114                     	;# 
   166  0114                     	;# 
   167  0115                     	;# 
   168  0116                     	;# 
   169  0116                     	;# 
   170  0117                     	;# 
   171  0119                     	;# 
   172  0119                     	;# 
   173  0119                     	;# 
   174  011A                     	;# 
   175  011A                     	;# 
   176  011A                     	;# 
   177  011B                     	;# 
   178  011B                     	;# 
   179  011B                     	;# 
   180  011B                     	;# 
   181  011B                     	;# 
   182  011C                     	;# 
   183  011C                     	;# 
   184  011C                     	;# 
   185  011D                     	;# 
   186  011D                     	;# 
   187  011D                     	;# 
   188  011E                     	;# 
   189  011E                     	;# 
   190  011E                     	;# 
   191  011F                     	;# 
   192  011F                     	;# 
   193  011F                     	;# 
   194  011F                     	;# 
   195  011F                     	;# 
   196  018C                     	;# 
   197  018D                     	;# 
   198  018E                     	;# 
   199  018F                     	;# 
   200  0190                     	;# 
   201  0191                     	;# 
   202  0192                     	;# 
   203  0196                     	;# 
   204  0197                     	;# 
   205  0198                     	;# 
   206  0199                     	;# 
   207  019A                     	;# 
   208  019B                     	;# 
   209  019C                     	;# 
   210  020C                     	;# 
   211  020C                     	;# 
   212  020D                     	;# 
   213  020E                     	;# 
   214  020F                     	;# 
   215  020F                     	;# 
   216  0210                     	;# 
   217  0210                     	;# 
   218  0211                     	;# 
   219  0211                     	;# 
   220  0212                     	;# 
   221  0212                     	;# 
   222  0213                     	;# 
   223  0214                     	;# 
   224  0215                     	;# 
   225  0215                     	;# 
   226  0216                     	;# 
   227  0216                     	;# 
   228  0217                     	;# 
   229  0217                     	;# 
   230  0218                     	;# 
   231  0218                     	;# 
   232  0219                     	;# 
   233  021A                     	;# 
   234  021B                     	;# 
   235  021B                     	;# 
   236  021C                     	;# 
   237  021C                     	;# 
   238  021D                     	;# 
   239  021D                     	;# 
   240  021E                     	;# 
   241  021F                     	;# 
   242  028C                     	;# 
   243  028C                     	;# 
   244  028D                     	;# 
   245  028D                     	;# 
   246  028E                     	;# 
   247  028F                     	;# 
   248  0290                     	;# 
   249  0290                     	;# 
   250  0291                     	;# 
   251  0292                     	;# 
   252  0292                     	;# 
   253  0293                     	;# 
   254  0293                     	;# 
   255  0294                     	;# 
   256  0295                     	;# 
   257  0296                     	;# 
   258  0296                     	;# 
   259  0297                     	;# 
   260  0298                     	;# 
   261  0298                     	;# 
   262  0299                     	;# 
   263  0299                     	;# 
   264  029A                     	;# 
   265  029B                     	;# 
   266  029C                     	;# 
   267  029C                     	;# 
   268  029D                     	;# 
   269  030C                     	;# 
   270  030C                     	;# 
   271  030D                     	;# 
   272  030E                     	;# 
   273  030F                     	;# 
   274  0310                     	;# 
   275  0310                     	;# 
   276  0311                     	;# 
   277  0312                     	;# 
   278  0313                     	;# 
   279  0314                     	;# 
   280  0314                     	;# 
   281  0315                     	;# 
   282  0316                     	;# 
   283  0317                     	;# 
   284  0318                     	;# 
   285  0318                     	;# 
   286  0319                     	;# 
   287  031A                     	;# 
   288  031B                     	;# 
   289  031C                     	;# 
   290  031C                     	;# 
   291  031D                     	;# 
   292  031E                     	;# 
   293  031F                     	;# 
   294  038C                     	;# 
   295  038D                     	;# 
   296  038E                     	;# 
   297  0390                     	;# 
   298  0391                     	;# 
   299  0392                     	;# 
   300  040C                     	;# 
   301  040D                     	;# 
   302  040E                     	;# 
   303  040F                     	;# 
   304  0410                     	;# 
   305  0411                     	;# 
   306  0416                     	;# 
   307  0416                     	;# 
   308  0417                     	;# 
   309  0418                     	;# 
   310  0418                     	;# 
   311  0419                     	;# 
   312  041A                     	;# 
   313  041A                     	;# 
   314  041B                     	;# 
   315  041C                     	;# 
   316  041C                     	;# 
   317  041D                     	;# 
   318  041E                     	;# 
   319  041F                     	;# 
   320  048C                     	;# 
   321  048C                     	;# 
   322  048D                     	;# 
   323  048E                     	;# 
   324  048F                     	;# 
   325  048F                     	;# 
   326  0490                     	;# 
   327  0491                     	;# 
   328  0492                     	;# 
   329  0492                     	;# 
   330  0493                     	;# 
   331  0494                     	;# 
   332  0495                     	;# 
   333  0495                     	;# 
   334  0496                     	;# 
   335  0497                     	;# 
   336  0498                     	;# 
   337  0499                     	;# 
   338  049A                     	;# 
   339  049B                     	;# 
   340  049C                     	;# 
   341  049D                     	;# 
   342  050C                     	;# 
   343  050C                     	;# 
   344  050D                     	;# 
   345  050E                     	;# 
   346  050F                     	;# 
   347  050F                     	;# 
   348  0510                     	;# 
   349  0511                     	;# 
   350  0512                     	;# 
   351  0512                     	;# 
   352  0513                     	;# 
   353  0514                     	;# 
   354  0515                     	;# 
   355  0515                     	;# 
   356  0516                     	;# 
   357  0517                     	;# 
   358  0518                     	;# 
   359  0519                     	;# 
   360  051A                     	;# 
   361  051B                     	;# 
   362  051C                     	;# 
   363  051D                     	;# 
   364  058C                     	;# 
   365  058C                     	;# 
   366  058D                     	;# 
   367  058E                     	;# 
   368  058F                     	;# 
   369  058F                     	;# 
   370  0590                     	;# 
   371  0591                     	;# 
   372  0592                     	;# 
   373  0593                     	;# 
   374  060C                     	;# 
   375  060D                     	;# 
   376  060E                     	;# 
   377  060F                     	;# 
   378  0610                     	;# 
   379  0611                     	;# 
   380  0612                     	;# 
   381  0613                     	;# 
   382  0614                     	;# 
   383  0616                     	;# 
   384  0617                     	;# 
   385  0618                     	;# 
   386  0619                     	;# 
   387  061A                     	;# 
   388  061B                     	;# 
   389  061C                     	;# 
   390  061D                     	;# 
   391  061E                     	;# 
   392  068C                     	;# 
   393  068D                     	;# 
   394  068E                     	;# 
   395  068F                     	;# 
   396  0690                     	;# 
   397  0691                     	;# 
   398  0692                     	;# 
   399  0693                     	;# 
   400  0694                     	;# 
   401  070C                     	;# 
   402  070D                     	;# 
   403  070E                     	;# 
   404  070F                     	;# 
   405  0710                     	;# 
   406  0711                     	;# 
   407  0712                     	;# 
   408  0713                     	;# 
   409  0714                     	;# 
   410  0716                     	;# 
   411  0717                     	;# 
   412  0718                     	;# 
   413  0719                     	;# 
   414  071A                     	;# 
   415  071B                     	;# 
   416  071C                     	;# 
   417  071D                     	;# 
   418  071E                     	;# 
   419  0796                     	;# 
   420  0797                     	;# 
   421  0798                     	;# 
   422  0799                     	;# 
   423  079A                     	;# 
   424  079B                     	;# 
   425  080C                     	;# 
   426  080D                     	;# 
   427  080E                     	;# 
   428  080F                     	;# 
   429  0810                     	;# 
   430  0811                     	;# 
   431  0812                     	;# 
   432  0813                     	;# 
   433  0814                     	;# 
   434  081A                     	;# 
   435  081B                     	;# 
   436  081C                     	;# 
   437  081D                     	;# 
   438  081E                     	;# 
   439  081F                     	;# 
   440  088C                     	;# 
   441  088D                     	;# 
   442  088E                     	;# 
   443  088F                     	;# 
   444  0890                     	;# 
   445  0891                     	;# 
   446  0892                     	;# 
   447  0893                     	;# 
   448  0895                     	;# 
   449  0896                     	;# 
   450  0897                     	;# 
   451  0898                     	;# 
   452  0899                     	;# 
   453  089A                     	;# 
   454  089B                     	;# 
   455  090C                     	;# 
   456  090E                     	;# 
   457  090F                     	;# 
   458  091F                     	;# 
   459  091F                     	;# 
   460  098F                     	;# 
   461  098F                     	;# 
   462  0990                     	;# 
   463  0991                     	;# 
   464  0992                     	;# 
   465  0993                     	;# 
   466  0994                     	;# 
   467  0995                     	;# 
   468  0996                     	;# 
   469  0997                     	;# 
   470  0E0F                     	;# 
   471  0E10                     	;# 
   472  0E11                     	;# 
   473  0E12                     	;# 
   474  0E13                     	;# 
   475  0E14                     	;# 
   476  0E15                     	;# 
   477  0E16                     	;# 
   478  0E17                     	;# 
   479  0E18                     	;# 
   480  0E19                     	;# 
   481  0E1A                     	;# 
   482  0E1B                     	;# 
   483  0E1C                     	;# 
   484  0E1D                     	;# 
   485  0E1E                     	;# 
   486  0E1F                     	;# 
   487  0E20                     	;# 
   488  0E21                     	;# 
   489  0E22                     	;# 
   490  0E23                     	;# 
   491  0E24                     	;# 
   492  0E25                     	;# 
   493  0E26                     	;# 
   494  0E27                     	;# 
   495  0E28                     	;# 
   496  0E29                     	;# 
   497  0E2A                     	;# 
   498  0E2B                     	;# 
   499  0E2C                     	;# 
   500  0E2D                     	;# 
   501  0E2E                     	;# 
   502  0E2F                     	;# 
   503  0E30                     	;# 
   504  0E31                     	;# 
   505  0E32                     	;# 
   506  0E33                     	;# 
   507  0E34                     	;# 
   508  0E35                     	;# 
   509  0E36                     	;# 
   510  0E37                     	;# 
   511  0E8F                     	;# 
   512  0E90                     	;# 
   513  0E91                     	;# 
   514  0E92                     	;# 
   515  0E93                     	;# 
   516  0E94                     	;# 
   517  0E95                     	;# 
   518  0E96                     	;# 
   519  0E97                     	;# 
   520  0E9C                     	;# 
   521  0E9D                     	;# 
   522  0E9E                     	;# 
   523  0EA1                     	;# 
   524  0EA2                     	;# 
   525  0EA3                     	;# 
   526  0EA4                     	;# 
   527  0EA5                     	;# 
   528  0EA9                     	;# 
   529  0EAA                     	;# 
   530  0EAB                     	;# 
   531  0EAC                     	;# 
   532  0EB1                     	;# 
   533  0EB2                     	;# 
   534  0EB3                     	;# 
   535  0EB8                     	;# 
   536  0EB9                     	;# 
   537  0EBA                     	;# 
   538  0EBB                     	;# 
   539  0EBC                     	;# 
   540  0EBD                     	;# 
   541  0EBE                     	;# 
   542  0EC3                     	;# 
   543  0EC5                     	;# 
   544  0EC6                     	;# 
   545  0EC7                     	;# 
   546  0EC8                     	;# 
   547  0EC9                     	;# 
   548  0ECA                     	;# 
   549  0ECB                     	;# 
   550  0ECC                     	;# 
   551  0F10                     	;# 
   552  0F11                     	;# 
   553  0F12                     	;# 
   554  0F13                     	;# 
   555  0F14                     	;# 
   556  0F15                     	;# 
   557  0F16                     	;# 
   558  0F17                     	;# 
   559  0F18                     	;# 
   560  0F19                     	;# 
   561  0F1A                     	;# 
   562  0F1B                     	;# 
   563  0F1C                     	;# 
   564  0F1D                     	;# 
   565  0F1E                     	;# 
   566  0F1F                     	;# 
   567  0F20                     	;# 
   568  0F21                     	;# 
   569  0F22                     	;# 
   570  0F23                     	;# 
   571  0F24                     	;# 
   572  0F25                     	;# 
   573  0F26                     	;# 
   574  0F27                     	;# 
   575  0F38                     	;# 
   576  0F39                     	;# 
   577  0F3A                     	;# 
   578  0F3B                     	;# 
   579  0F3C                     	;# 
   580  0F3D                     	;# 
   581  0F3E                     	;# 
   582  0F3F                     	;# 
   583  0F40                     	;# 
   584  0F41                     	;# 
   585  0F43                     	;# 
   586  0F44                     	;# 
   587  0F45                     	;# 
   588  0F46                     	;# 
   589  0F47                     	;# 
   590  0F48                     	;# 
   591  0F49                     	;# 
   592  0F4A                     	;# 
   593  0F4B                     	;# 
   594  0F4C                     	;# 
   595  0F4E                     	;# 
   596  0F4F                     	;# 
   597  0F50                     	;# 
   598  0F51                     	;# 
   599  0F52                     	;# 
   600  0F53                     	;# 
   601  0F54                     	;# 
   602  0F55                     	;# 
   603  0F56                     	;# 
   604  0F57                     	;# 
   605  0F65                     	;# 
   606  0F68                     	;# 
   607  0F69                     	;# 
   608  0F6A                     	;# 
   609  0F6B                     	;# 
   610  0FE4                     	;# 
   611  0FE5                     	;# 
   612  0FE6                     	;# 
   613  0FE7                     	;# 
   614  0FE8                     	;# 
   615  0FE9                     	;# 
   616  0FEA                     	;# 
   617  0FEB                     	;# 
   618  0FED                     	;# 
   619  0FEE                     	;# 
   620  0FEF                     	;# 
   621  0000                     	;# 
   622  0001                     	;# 
   623  0002                     	;# 
   624  0003                     	;# 
   625  0004                     	;# 
   626  0005                     	;# 
   627  0006                     	;# 
   628  0007                     	;# 
   629  0008                     	;# 
   630  0009                     	;# 
   631  000A                     	;# 
   632  000B                     	;# 
   633  000C                     	;# 
   634  000D                     	;# 
   635  000E                     	;# 
   636  0010                     	;# 
   637  0011                     	;# 
   638  0012                     	;# 
   639  0013                     	;# 
   640  0016                     	;# 
   641  0017                     	;# 
   642  0018                     	;# 
   643  001C                     	;# 
   644  001C                     	;# 
   645  001D                     	;# 
   646  001D                     	;# 
   647  001E                     	;# 
   648  001F                     	;# 
   649  008C                     	;# 
   650  008C                     	;# 
   651  008D                     	;# 
   652  008E                     	;# 
   653  008E                     	;# 
   654  008F                     	;# 
   655  0090                     	;# 
   656  0090                     	;# 
   657  0091                     	;# 
   658  0093                     	;# 
   659  0094                     	;# 
   660  0095                     	;# 
   661  0096                     	;# 
   662  0097                     	;# 
   663  0098                     	;# 
   664  0099                     	;# 
   665  009A                     	;# 
   666  009B                     	;# 
   667  009C                     	;# 
   668  009D                     	;# 
   669  009E                     	;# 
   670  010C                     	;# 
   671  010D                     	;# 
   672  010E                     	;# 
   673  010E                     	;# 
   674  010F                     	;# 
   675  0110                     	;# 
   676  0110                     	;# 
   677  0111                     	;# 
   678  0112                     	;# 
   679  0112                     	;# 
   680  0113                     	;# 
   681  0114                     	;# 
   682  0114                     	;# 
   683  0115                     	;# 
   684  0116                     	;# 
   685  0116                     	;# 
   686  0117                     	;# 
   687  0119                     	;# 
   688  0119                     	;# 
   689  0119                     	;# 
   690  011A                     	;# 
   691  011A                     	;# 
   692  011A                     	;# 
   693  011B                     	;# 
   694  011B                     	;# 
   695  011B                     	;# 
   696  011B                     	;# 
   697  011B                     	;# 
   698  011C                     	;# 
   699  011C                     	;# 
   700  011C                     	;# 
   701  011D                     	;# 
   702  011D                     	;# 
   703  011D                     	;# 
   704  011E                     	;# 
   705  011E                     	;# 
   706  011E                     	;# 
   707  011F                     	;# 
   708  011F                     	;# 
   709  011F                     	;# 
   710  011F                     	;# 
   711  011F                     	;# 
   712  018C                     	;# 
   713  018D                     	;# 
   714  018E                     	;# 
   715  018F                     	;# 
   716  0190                     	;# 
   717  0191                     	;# 
   718  0192                     	;# 
   719  0196                     	;# 
   720  0197                     	;# 
   721  0198                     	;# 
   722  0199                     	;# 
   723  019A                     	;# 
   724  019B                     	;# 
   725  019C                     	;# 
   726  020C                     	;# 
   727  020C                     	;# 
   728  020D                     	;# 
   729  020E                     	;# 
   730  020F                     	;# 
   731  020F                     	;# 
   732  0210                     	;# 
   733  0210                     	;# 
   734  0211                     	;# 
   735  0211                     	;# 
   736  0212                     	;# 
   737  0212                     	;# 
   738  0213                     	;# 
   739  0214                     	;# 
   740  0215                     	;# 
   741  0215                     	;# 
   742  0216                     	;# 
   743  0216                     	;# 
   744  0217                     	;# 
   745  0217                     	;# 
   746  0218                     	;# 
   747  0218                     	;# 
   748  0219                     	;# 
   749  021A                     	;# 
   750  021B                     	;# 
   751  021B                     	;# 
   752  021C                     	;# 
   753  021C                     	;# 
   754  021D                     	;# 
   755  021D                     	;# 
   756  021E                     	;# 
   757  021F                     	;# 
   758  028C                     	;# 
   759  028C                     	;# 
   760  028D                     	;# 
   761  028D                     	;# 
   762  028E                     	;# 
   763  028F                     	;# 
   764  0290                     	;# 
   765  0290                     	;# 
   766  0291                     	;# 
   767  0292                     	;# 
   768  0292                     	;# 
   769  0293                     	;# 
   770  0293                     	;# 
   771  0294                     	;# 
   772  0295                     	;# 
   773  0296                     	;# 
   774  0296                     	;# 
   775  0297                     	;# 
   776  0298                     	;# 
   777  0298                     	;# 
   778  0299                     	;# 
   779  0299                     	;# 
   780  029A                     	;# 
   781  029B                     	;# 
   782  029C                     	;# 
   783  029C                     	;# 
   784  029D                     	;# 
   785  030C                     	;# 
   786  030C                     	;# 
   787  030D                     	;# 
   788  030E                     	;# 
   789  030F                     	;# 
   790  0310                     	;# 
   791  0310                     	;# 
   792  0311                     	;# 
   793  0312                     	;# 
   794  0313                     	;# 
   795  0314                     	;# 
   796  0314                     	;# 
   797  0315                     	;# 
   798  0316                     	;# 
   799  0317                     	;# 
   800  0318                     	;# 
   801  0318                     	;# 
   802  0319                     	;# 
   803  031A                     	;# 
   804  031B                     	;# 
   805  031C                     	;# 
   806  031C                     	;# 
   807  031D                     	;# 
   808  031E                     	;# 
   809  031F                     	;# 
   810  038C                     	;# 
   811  038D                     	;# 
   812  038E                     	;# 
   813  0390                     	;# 
   814  0391                     	;# 
   815  0392                     	;# 
   816  040C                     	;# 
   817  040D                     	;# 
   818  040E                     	;# 
   819  040F                     	;# 
   820  0410                     	;# 
   821  0411                     	;# 
   822  0416                     	;# 
   823  0416                     	;# 
   824  0417                     	;# 
   825  0418                     	;# 
   826  0418                     	;# 
   827  0419                     	;# 
   828  041A                     	;# 
   829  041A                     	;# 
   830  041B                     	;# 
   831  041C                     	;# 
   832  041C                     	;# 
   833  041D                     	;# 
   834  041E                     	;# 
   835  041F                     	;# 
   836  048C                     	;# 
   837  048C                     	;# 
   838  048D                     	;# 
   839  048E                     	;# 
   840  048F                     	;# 
   841  048F                     	;# 
   842  0490                     	;# 
   843  0491                     	;# 
   844  0492                     	;# 
   845  0492                     	;# 
   846  0493                     	;# 
   847  0494                     	;# 
   848  0495                     	;# 
   849  0495                     	;# 
   850  0496                     	;# 
   851  0497                     	;# 
   852  0498                     	;# 
   853  0499                     	;# 
   854  049A                     	;# 
   855  049B                     	;# 
   856  049C                     	;# 
   857  049D                     	;# 
   858  050C                     	;# 
   859  050C                     	;# 
   860  050D                     	;# 
   861  050E                     	;# 
   862  050F                     	;# 
   863  050F                     	;# 
   864  0510                     	;# 
   865  0511                     	;# 
   866  0512                     	;# 
   867  0512                     	;# 
   868  0513                     	;# 
   869  0514                     	;# 
   870  0515                     	;# 
   871  0515                     	;# 
   872  0516                     	;# 
   873  0517                     	;# 
   874  0518                     	;# 
   875  0519                     	;# 
   876  051A                     	;# 
   877  051B                     	;# 
   878  051C                     	;# 
   879  051D                     	;# 
   880  058C                     	;# 
   881  058C                     	;# 
   882  058D                     	;# 
   883  058E                     	;# 
   884  058F                     	;# 
   885  058F                     	;# 
   886  0590                     	;# 
   887  0591                     	;# 
   888  0592                     	;# 
   889  0593                     	;# 
   890  060C                     	;# 
   891  060D                     	;# 
   892  060E                     	;# 
   893  060F                     	;# 
   894  0610                     	;# 
   895  0611                     	;# 
   896  0612                     	;# 
   897  0613                     	;# 
   898  0614                     	;# 
   899  0616                     	;# 
   900  0617                     	;# 
   901  0618                     	;# 
   902  0619                     	;# 
   903  061A                     	;# 
   904  061B                     	;# 
   905  061C                     	;# 
   906  061D                     	;# 
   907  061E                     	;# 
   908  068C                     	;# 
   909  068D                     	;# 
   910  068E                     	;# 
   911  068F                     	;# 
   912  0690                     	;# 
   913  0691                     	;# 
   914  0692                     	;# 
   915  0693                     	;# 
   916  0694                     	;# 
   917  070C                     	;# 
   918  070D                     	;# 
   919  070E                     	;# 
   920  070F                     	;# 
   921  0710                     	;# 
   922  0711                     	;# 
   923  0712                     	;# 
   924  0713                     	;# 
   925  0714                     	;# 
   926  0716                     	;# 
   927  0717                     	;# 
   928  0718                     	;# 
   929  0719                     	;# 
   930  071A                     	;# 
   931  071B                     	;# 
   932  071C                     	;# 
   933  071D                     	;# 
   934  071E                     	;# 
   935  0796                     	;# 
   936  0797                     	;# 
   937  0798                     	;# 
   938  0799                     	;# 
   939  079A                     	;# 
   940  079B                     	;# 
   941  080C                     	;# 
   942  080D                     	;# 
   943  080E                     	;# 
   944  080F                     	;# 
   945  0810                     	;# 
   946  0811                     	;# 
   947  0812                     	;# 
   948  0813                     	;# 
   949  0814                     	;# 
   950  081A                     	;# 
   951  081B                     	;# 
   952  081C                     	;# 
   953  081D                     	;# 
   954  081E                     	;# 
   955  081F                     	;# 
   956  088C                     	;# 
   957  088D                     	;# 
   958  088E                     	;# 
   959  088F                     	;# 
   960  0890                     	;# 
   961  0891                     	;# 
   962  0892                     	;# 
   963  0893                     	;# 
   964  0895                     	;# 
   965  0896                     	;# 
   966  0897                     	;# 
   967  0898                     	;# 
   968  0899                     	;# 
   969  089A                     	;# 
   970  089B                     	;# 
   971  090C                     	;# 
   972  090E                     	;# 
   973  090F                     	;# 
   974  091F                     	;# 
   975  091F                     	;# 
   976  098F                     	;# 
   977  098F                     	;# 
   978  0990                     	;# 
   979  0991                     	;# 
   980  0992                     	;# 
   981  0993                     	;# 
   982  0994                     	;# 
   983  0995                     	;# 
   984  0996                     	;# 
   985  0997                     	;# 
   986  0E0F                     	;# 
   987  0E10                     	;# 
   988  0E11                     	;# 
   989  0E12                     	;# 
   990  0E13                     	;# 
   991  0E14                     	;# 
   992  0E15                     	;# 
   993  0E16                     	;# 
   994  0E17                     	;# 
   995  0E18                     	;# 
   996  0E19                     	;# 
   997  0E1A                     	;# 
   998  0E1B                     	;# 
   999  0E1C                     	;# 
  1000  0E1D                     	;# 
  1001  0E1E                     	;# 
  1002  0E1F                     	;# 
  1003  0E20                     	;# 
  1004  0E21                     	;# 
  1005  0E22                     	;# 
  1006  0E23                     	;# 
  1007  0E24                     	;# 
  1008  0E25                     	;# 
  1009  0E26                     	;# 
  1010  0E27                     	;# 
  1011  0E28                     	;# 
  1012  0E29                     	;# 
  1013  0E2A                     	;# 
  1014  0E2B                     	;# 
  1015  0E2C                     	;# 
  1016  0E2D                     	;# 
  1017  0E2E                     	;# 
  1018  0E2F                     	;# 
  1019  0E30                     	;# 
  1020  0E31                     	;# 
  1021  0E32                     	;# 
  1022  0E33                     	;# 
  1023  0E34                     	;# 
  1024  0E35                     	;# 
  1025  0E36                     	;# 
  1026  0E37                     	;# 
  1027  0E8F                     	;# 
  1028  0E90                     	;# 
  1029  0E91                     	;# 
  1030  0E92                     	;# 
  1031  0E93                     	;# 
  1032  0E94                     	;# 
  1033  0E95                     	;# 
  1034  0E96                     	;# 
  1035  0E97                     	;# 
  1036  0E9C                     	;# 
  1037  0E9D                     	;# 
  1038  0E9E                     	;# 
  1039  0EA1                     	;# 
  1040  0EA2                     	;# 
  1041  0EA3                     	;# 
  1042  0EA4                     	;# 
  1043  0EA5                     	;# 
  1044  0EA9                     	;# 
  1045  0EAA                     	;# 
  1046  0EAB                     	;# 
  1047  0EAC                     	;# 
  1048  0EB1                     	;# 
  1049  0EB2                     	;# 
  1050  0EB3                     	;# 
  1051  0EB8                     	;# 
  1052  0EB9                     	;# 
  1053  0EBA                     	;# 
  1054  0EBB                     	;# 
  1055  0EBC                     	;# 
  1056  0EBD                     	;# 
  1057  0EBE                     	;# 
  1058  0EC3                     	;# 
  1059  0EC5                     	;# 
  1060  0EC6                     	;# 
  1061  0EC7                     	;# 
  1062  0EC8                     	;# 
  1063  0EC9                     	;# 
  1064  0ECA                     	;# 
  1065  0ECB                     	;# 
  1066  0ECC                     	;# 
  1067  0F10                     	;# 
  1068  0F11                     	;# 
  1069  0F12                     	;# 
  1070  0F13                     	;# 
  1071  0F14                     	;# 
  1072  0F15                     	;# 
  1073  0F16                     	;# 
  1074  0F17                     	;# 
  1075  0F18                     	;# 
  1076  0F19                     	;# 
  1077  0F1A                     	;# 
  1078  0F1B                     	;# 
  1079  0F1C                     	;# 
  1080  0F1D                     	;# 
  1081  0F1E                     	;# 
  1082  0F1F                     	;# 
  1083  0F20                     	;# 
  1084  0F21                     	;# 
  1085  0F22                     	;# 
  1086  0F23                     	;# 
  1087  0F24                     	;# 
  1088  0F25                     	;# 
  1089  0F26                     	;# 
  1090  0F27                     	;# 
  1091  0F38                     	;# 
  1092  0F39                     	;# 
  1093  0F3A                     	;# 
  1094  0F3B                     	;# 
  1095  0F3C                     	;# 
  1096  0F3D                     	;# 
  1097  0F3E                     	;# 
  1098  0F3F                     	;# 
  1099  0F40                     	;# 
  1100  0F41                     	;# 
  1101  0F43                     	;# 
  1102  0F44                     	;# 
  1103  0F45                     	;# 
  1104  0F46                     	;# 
  1105  0F47                     	;# 
  1106  0F48                     	;# 
  1107  0F49                     	;# 
  1108  0F4A                     	;# 
  1109  0F4B                     	;# 
  1110  0F4C                     	;# 
  1111  0F4E                     	;# 
  1112  0F4F                     	;# 
  1113  0F50                     	;# 
  1114  0F51                     	;# 
  1115  0F52                     	;# 
  1116  0F53                     	;# 
  1117  0F54                     	;# 
  1118  0F55                     	;# 
  1119  0F56                     	;# 
  1120  0F57                     	;# 
  1121  0F65                     	;# 
  1122  0F68                     	;# 
  1123  0F69                     	;# 
  1124  0F6A                     	;# 
  1125  0F6B                     	;# 
  1126  0FE4                     	;# 
  1127  0FE5                     	;# 
  1128  0FE6                     	;# 
  1129  0FE7                     	;# 
  1130  0FE8                     	;# 
  1131  0FE9                     	;# 
  1132  0FEA                     	;# 
  1133  0FEB                     	;# 
  1134  0FED                     	;# 
  1135  0FEE                     	;# 
  1136  0FEF                     	;# 
  1137  0000                     	;# 
  1138  0001                     	;# 
  1139  0002                     	;# 
  1140  0003                     	;# 
  1141  0004                     	;# 
  1142  0005                     	;# 
  1143  0006                     	;# 
  1144  0007                     	;# 
  1145  0008                     	;# 
  1146  0009                     	;# 
  1147  000A                     	;# 
  1148  000B                     	;# 
  1149  000C                     	;# 
  1150  000D                     	;# 
  1151  000E                     	;# 
  1152  0010                     	;# 
  1153  0011                     	;# 
  1154  0012                     	;# 
  1155  0013                     	;# 
  1156  0016                     	;# 
  1157  0017                     	;# 
  1158  0018                     	;# 
  1159  001C                     	;# 
  1160  001C                     	;# 
  1161  001D                     	;# 
  1162  001D                     	;# 
  1163  001E                     	;# 
  1164  001F                     	;# 
  1165  008C                     	;# 
  1166  008C                     	;# 
  1167  008D                     	;# 
  1168  008E                     	;# 
  1169  008E                     	;# 
  1170  008F                     	;# 
  1171  0090                     	;# 
  1172  0090                     	;# 
  1173  0091                     	;# 
  1174  0093                     	;# 
  1175  0094                     	;# 
  1176  0095                     	;# 
  1177  0096                     	;# 
  1178  0097                     	;# 
  1179  0098                     	;# 
  1180  0099                     	;# 
  1181  009A                     	;# 
  1182  009B                     	;# 
  1183  009C                     	;# 
  1184  009D                     	;# 
  1185  009E                     	;# 
  1186  010C                     	;# 
  1187  010D                     	;# 
  1188  010E                     	;# 
  1189  010E                     	;# 
  1190  010F                     	;# 
  1191  0110                     	;# 
  1192  0110                     	;# 
  1193  0111                     	;# 
  1194  0112                     	;# 
  1195  0112                     	;# 
  1196  0113                     	;# 
  1197  0114                     	;# 
  1198  0114                     	;# 
  1199  0115                     	;# 
  1200  0116                     	;# 
  1201  0116                     	;# 
  1202  0117                     	;# 
  1203  0119                     	;# 
  1204  0119                     	;# 
  1205  0119                     	;# 
  1206  011A                     	;# 
  1207  011A                     	;# 
  1208  011A                     	;# 
  1209  011B                     	;# 
  1210  011B                     	;# 
  1211  011B                     	;# 
  1212  011B                     	;# 
  1213  011B                     	;# 
  1214  011C                     	;# 
  1215  011C                     	;# 
  1216  011C                     	;# 
  1217  011D                     	;# 
  1218  011D                     	;# 
  1219  011D                     	;# 
  1220  011E                     	;# 
  1221  011E                     	;# 
  1222  011E                     	;# 
  1223  011F                     	;# 
  1224  011F                     	;# 
  1225  011F                     	;# 
  1226  011F                     	;# 
  1227  011F                     	;# 
  1228  018C                     	;# 
  1229  018D                     	;# 
  1230  018E                     	;# 
  1231  018F                     	;# 
  1232  0190                     	;# 
  1233  0191                     	;# 
  1234  0192                     	;# 
  1235  0196                     	;# 
  1236  0197                     	;# 
  1237  0198                     	;# 
  1238  0199                     	;# 
  1239  019A                     	;# 
  1240  019B                     	;# 
  1241  019C                     	;# 
  1242  020C                     	;# 
  1243  020C                     	;# 
  1244  020D                     	;# 
  1245  020E                     	;# 
  1246  020F                     	;# 
  1247  020F                     	;# 
  1248  0210                     	;# 
  1249  0210                     	;# 
  1250  0211                     	;# 
  1251  0211                     	;# 
  1252  0212                     	;# 
  1253  0212                     	;# 
  1254  0213                     	;# 
  1255  0214                     	;# 
  1256  0215                     	;# 
  1257  0215                     	;# 
  1258  0216                     	;# 
  1259  0216                     	;# 
  1260  0217                     	;# 
  1261  0217                     	;# 
  1262  0218                     	;# 
  1263  0218                     	;# 
  1264  0219                     	;# 
  1265  021A                     	;# 
  1266  021B                     	;# 
  1267  021B                     	;# 
  1268  021C                     	;# 
  1269  021C                     	;# 
  1270  021D                     	;# 
  1271  021D                     	;# 
  1272  021E                     	;# 
  1273  021F                     	;# 
  1274  028C                     	;# 
  1275  028C                     	;# 
  1276  028D                     	;# 
  1277  028D                     	;# 
  1278  028E                     	;# 
  1279  028F                     	;# 
  1280  0290                     	;# 
  1281  0290                     	;# 
  1282  0291                     	;# 
  1283  0292                     	;# 
  1284  0292                     	;# 
  1285  0293                     	;# 
  1286  0293                     	;# 
  1287  0294                     	;# 
  1288  0295                     	;# 
  1289  0296                     	;# 
  1290  0296                     	;# 
  1291  0297                     	;# 
  1292  0298                     	;# 
  1293  0298                     	;# 
  1294  0299                     	;# 
  1295  0299                     	;# 
  1296  029A                     	;# 
  1297  029B                     	;# 
  1298  029C                     	;# 
  1299  029C                     	;# 
  1300  029D                     	;# 
  1301  030C                     	;# 
  1302  030C                     	;# 
  1303  030D                     	;# 
  1304  030E                     	;# 
  1305  030F                     	;# 
  1306  0310                     	;# 
  1307  0310                     	;# 
  1308  0311                     	;# 
  1309  0312                     	;# 
  1310  0313                     	;# 
  1311  0314                     	;# 
  1312  0314                     	;# 
  1313  0315                     	;# 
  1314  0316                     	;# 
  1315  0317                     	;# 
  1316  0318                     	;# 
  1317  0318                     	;# 
  1318  0319                     	;# 
  1319  031A                     	;# 
  1320  031B                     	;# 
  1321  031C                     	;# 
  1322  031C                     	;# 
  1323  031D                     	;# 
  1324  031E                     	;# 
  1325  031F                     	;# 
  1326  038C                     	;# 
  1327  038D                     	;# 
  1328  038E                     	;# 
  1329  0390                     	;# 
  1330  0391                     	;# 
  1331  0392                     	;# 
  1332  040C                     	;# 
  1333  040D                     	;# 
  1334  040E                     	;# 
  1335  040F                     	;# 
  1336  0410                     	;# 
  1337  0411                     	;# 
  1338  0416                     	;# 
  1339  0416                     	;# 
  1340  0417                     	;# 
  1341  0418                     	;# 
  1342  0418                     	;# 
  1343  0419                     	;# 
  1344  041A                     	;# 
  1345  041A                     	;# 
  1346  041B                     	;# 
  1347  041C                     	;# 
  1348  041C                     	;# 
  1349  041D                     	;# 
  1350  041E                     	;# 
  1351  041F                     	;# 
  1352  048C                     	;# 
  1353  048C                     	;# 
  1354  048D                     	;# 
  1355  048E                     	;# 
  1356  048F                     	;# 
  1357  048F                     	;# 
  1358  0490                     	;# 
  1359  0491                     	;# 
  1360  0492                     	;# 
  1361  0492                     	;# 
  1362  0493                     	;# 
  1363  0494                     	;# 
  1364  0495                     	;# 
  1365  0495                     	;# 
  1366  0496                     	;# 
  1367  0497                     	;# 
  1368  0498                     	;# 
  1369  0499                     	;# 
  1370  049A                     	;# 
  1371  049B                     	;# 
  1372  049C                     	;# 
  1373  049D                     	;# 
  1374  050C                     	;# 
  1375  050C                     	;# 
  1376  050D                     	;# 
  1377  050E                     	;# 
  1378  050F                     	;# 
  1379  050F                     	;# 
  1380  0510                     	;# 
  1381  0511                     	;# 
  1382  0512                     	;# 
  1383  0512                     	;# 
  1384  0513                     	;# 
  1385  0514                     	;# 
  1386  0515                     	;# 
  1387  0515                     	;# 
  1388  0516                     	;# 
  1389  0517                     	;# 
  1390  0518                     	;# 
  1391  0519                     	;# 
  1392  051A                     	;# 
  1393  051B                     	;# 
  1394  051C                     	;# 
  1395  051D                     	;# 
  1396  058C                     	;# 
  1397  058C                     	;# 
  1398  058D                     	;# 
  1399  058E                     	;# 
  1400  058F                     	;# 
  1401  058F                     	;# 
  1402  0590                     	;# 
  1403  0591                     	;# 
  1404  0592                     	;# 
  1405  0593                     	;# 
  1406  060C                     	;# 
  1407  060D                     	;# 
  1408  060E                     	;# 
  1409  060F                     	;# 
  1410  0610                     	;# 
  1411  0611                     	;# 
  1412  0612                     	;# 
  1413  0613                     	;# 
  1414  0614                     	;# 
  1415  0616                     	;# 
  1416  0617                     	;# 
  1417  0618                     	;# 
  1418  0619                     	;# 
  1419  061A                     	;# 
  1420  061B                     	;# 
  1421  061C                     	;# 
  1422  061D                     	;# 
  1423  061E                     	;# 
  1424  068C                     	;# 
  1425  068D                     	;# 
  1426  068E                     	;# 
  1427  068F                     	;# 
  1428  0690                     	;# 
  1429  0691                     	;# 
  1430  0692                     	;# 
  1431  0693                     	;# 
  1432  0694                     	;# 
  1433  070C                     	;# 
  1434  070D                     	;# 
  1435  070E                     	;# 
  1436  070F                     	;# 
  1437  0710                     	;# 
  1438  0711                     	;# 
  1439  0712                     	;# 
  1440  0713                     	;# 
  1441  0714                     	;# 
  1442  0716                     	;# 
  1443  0717                     	;# 
  1444  0718                     	;# 
  1445  0719                     	;# 
  1446  071A                     	;# 
  1447  071B                     	;# 
  1448  071C                     	;# 
  1449  071D                     	;# 
  1450  071E                     	;# 
  1451  0796                     	;# 
  1452  0797                     	;# 
  1453  0798                     	;# 
  1454  0799                     	;# 
  1455  079A                     	;# 
  1456  079B                     	;# 
  1457  080C                     	;# 
  1458  080D                     	;# 
  1459  080E                     	;# 
  1460  080F                     	;# 
  1461  0810                     	;# 
  1462  0811                     	;# 
  1463  0812                     	;# 
  1464  0813                     	;# 
  1465  0814                     	;# 
  1466  081A                     	;# 
  1467  081B                     	;# 
  1468  081C                     	;# 
  1469  081D                     	;# 
  1470  081E                     	;# 
  1471  081F                     	;# 
  1472  088C                     	;# 
  1473  088D                     	;# 
  1474  088E                     	;# 
  1475  088F                     	;# 
  1476  0890                     	;# 
  1477  0891                     	;# 
  1478  0892                     	;# 
  1479  0893                     	;# 
  1480  0895                     	;# 
  1481  0896                     	;# 
  1482  0897                     	;# 
  1483  0898                     	;# 
  1484  0899                     	;# 
  1485  089A                     	;# 
  1486  089B                     	;# 
  1487  090C                     	;# 
  1488  090E                     	;# 
  1489  090F                     	;# 
  1490  091F                     	;# 
  1491  091F                     	;# 
  1492  098F                     	;# 
  1493  098F                     	;# 
  1494  0990                     	;# 
  1495  0991                     	;# 
  1496  0992                     	;# 
  1497  0993                     	;# 
  1498  0994                     	;# 
  1499  0995                     	;# 
  1500  0996                     	;# 
  1501  0997                     	;# 
  1502  0E0F                     	;# 
  1503  0E10                     	;# 
  1504  0E11                     	;# 
  1505  0E12                     	;# 
  1506  0E13                     	;# 
  1507  0E14                     	;# 
  1508  0E15                     	;# 
  1509  0E16                     	;# 
  1510  0E17                     	;# 
  1511  0E18                     	;# 
  1512  0E19                     	;# 
  1513  0E1A                     	;# 
  1514  0E1B                     	;# 
  1515  0E1C                     	;# 
  1516  0E1D                     	;# 
  1517  0E1E                     	;# 
  1518  0E1F                     	;# 
  1519  0E20                     	;# 
  1520  0E21                     	;# 
  1521  0E22                     	;# 
  1522  0E23                     	;# 
  1523  0E24                     	;# 
  1524  0E25                     	;# 
  1525  0E26                     	;# 
  1526  0E27                     	;# 
  1527  0E28                     	;# 
  1528  0E29                     	;# 
  1529  0E2A                     	;# 
  1530  0E2B                     	;# 
  1531  0E2C                     	;# 
  1532  0E2D                     	;# 
  1533  0E2E                     	;# 
  1534  0E2F                     	;# 
  1535  0E30                     	;# 
  1536  0E31                     	;# 
  1537  0E32                     	;# 
  1538  0E33                     	;# 
  1539  0E34                     	;# 
  1540  0E35                     	;# 
  1541  0E36                     	;# 
  1542  0E37                     	;# 
  1543  0E8F                     	;# 
  1544  0E90                     	;# 
  1545  0E91                     	;# 
  1546  0E92                     	;# 
  1547  0E93                     	;# 
  1548  0E94                     	;# 
  1549  0E95                     	;# 
  1550  0E96                     	;# 
  1551  0E97                     	;# 
  1552  0E9C                     	;# 
  1553  0E9D                     	;# 
  1554  0E9E                     	;# 
  1555  0EA1                     	;# 
  1556  0EA2                     	;# 
  1557  0EA3                     	;# 
  1558  0EA4                     	;# 
  1559  0EA5                     	;# 
  1560  0EA9                     	;# 
  1561  0EAA                     	;# 
  1562  0EAB                     	;# 
  1563  0EAC                     	;# 
  1564  0EB1                     	;# 
  1565  0EB2                     	;# 
  1566  0EB3                     	;# 
  1567  0EB8                     	;# 
  1568  0EB9                     	;# 
  1569  0EBA                     	;# 
  1570  0EBB                     	;# 
  1571  0EBC                     	;# 
  1572  0EBD                     	;# 
  1573  0EBE                     	;# 
  1574  0EC3                     	;# 
  1575  0EC5                     	;# 
  1576  0EC6                     	;# 
  1577  0EC7                     	;# 
  1578  0EC8                     	;# 
  1579  0EC9                     	;# 
  1580  0ECA                     	;# 
  1581  0ECB                     	;# 
  1582  0ECC                     	;# 
  1583  0F10                     	;# 
  1584  0F11                     	;# 
  1585  0F12                     	;# 
  1586  0F13                     	;# 
  1587  0F14                     	;# 
  1588  0F15                     	;# 
  1589  0F16                     	;# 
  1590  0F17                     	;# 
  1591  0F18                     	;# 
  1592  0F19                     	;# 
  1593  0F1A                     	;# 
  1594  0F1B                     	;# 
  1595  0F1C                     	;# 
  1596  0F1D                     	;# 
  1597  0F1E                     	;# 
  1598  0F1F                     	;# 
  1599  0F20                     	;# 
  1600  0F21                     	;# 
  1601  0F22                     	;# 
  1602  0F23                     	;# 
  1603  0F24                     	;# 
  1604  0F25                     	;# 
  1605  0F26                     	;# 
  1606  0F27                     	;# 
  1607  0F38                     	;# 
  1608  0F39                     	;# 
  1609  0F3A                     	;# 
  1610  0F3B                     	;# 
  1611  0F3C                     	;# 
  1612  0F3D                     	;# 
  1613  0F3E                     	;# 
  1614  0F3F                     	;# 
  1615  0F40                     	;# 
  1616  0F41                     	;# 
  1617  0F43                     	;# 
  1618  0F44                     	;# 
  1619  0F45                     	;# 
  1620  0F46                     	;# 
  1621  0F47                     	;# 
  1622  0F48                     	;# 
  1623  0F49                     	;# 
  1624  0F4A                     	;# 
  1625  0F4B                     	;# 
  1626  0F4C                     	;# 
  1627  0F4E                     	;# 
  1628  0F4F                     	;# 
  1629  0F50                     	;# 
  1630  0F51                     	;# 
  1631  0F52                     	;# 
  1632  0F53                     	;# 
  1633  0F54                     	;# 
  1634  0F55                     	;# 
  1635  0F56                     	;# 
  1636  0F57                     	;# 
  1637  0F65                     	;# 
  1638  0F68                     	;# 
  1639  0F69                     	;# 
  1640  0F6A                     	;# 
  1641  0F6B                     	;# 
  1642  0FE4                     	;# 
  1643  0FE5                     	;# 
  1644  0FE6                     	;# 
  1645  0FE7                     	;# 
  1646  0FE8                     	;# 
  1647  0FE9                     	;# 
  1648  0FEA                     	;# 
  1649  0FEB                     	;# 
  1650  0FED                     	;# 
  1651  0FEE                     	;# 
  1652  0FEF                     	;# 
  1653  0000                     	;# 
  1654  0001                     	;# 
  1655  0002                     	;# 
  1656  0003                     	;# 
  1657  0004                     	;# 
  1658  0005                     	;# 
  1659  0006                     	;# 
  1660  0007                     	;# 
  1661  0008                     	;# 
  1662  0009                     	;# 
  1663  000A                     	;# 
  1664  000B                     	;# 
  1665  000C                     	;# 
  1666  000D                     	;# 
  1667  000E                     	;# 
  1668  0010                     	;# 
  1669  0011                     	;# 
  1670  0012                     	;# 
  1671  0013                     	;# 
  1672  0016                     	;# 
  1673  0017                     	;# 
  1674  0018                     	;# 
  1675  001C                     	;# 
  1676  001C                     	;# 
  1677  001D                     	;# 
  1678  001D                     	;# 
  1679  001E                     	;# 
  1680  001F                     	;# 
  1681  008C                     	;# 
  1682  008C                     	;# 
  1683  008D                     	;# 
  1684  008E                     	;# 
  1685  008E                     	;# 
  1686  008F                     	;# 
  1687  0090                     	;# 
  1688  0090                     	;# 
  1689  0091                     	;# 
  1690  0093                     	;# 
  1691  0094                     	;# 
  1692  0095                     	;# 
  1693  0096                     	;# 
  1694  0097                     	;# 
  1695  0098                     	;# 
  1696  0099                     	;# 
  1697  009A                     	;# 
  1698  009B                     	;# 
  1699  009C                     	;# 
  1700  009D                     	;# 
  1701  009E                     	;# 
  1702  010C                     	;# 
  1703  010D                     	;# 
  1704  010E                     	;# 
  1705  010E                     	;# 
  1706  010F                     	;# 
  1707  0110                     	;# 
  1708  0110                     	;# 
  1709  0111                     	;# 
  1710  0112                     	;# 
  1711  0112                     	;# 
  1712  0113                     	;# 
  1713  0114                     	;# 
  1714  0114                     	;# 
  1715  0115                     	;# 
  1716  0116                     	;# 
  1717  0116                     	;# 
  1718  0117                     	;# 
  1719  0119                     	;# 
  1720  0119                     	;# 
  1721  0119                     	;# 
  1722  011A                     	;# 
  1723  011A                     	;# 
  1724  011A                     	;# 
  1725  011B                     	;# 
  1726  011B                     	;# 
  1727  011B                     	;# 
  1728  011B                     	;# 
  1729  011B                     	;# 
  1730  011C                     	;# 
  1731  011C                     	;# 
  1732  011C                     	;# 
  1733  011D                     	;# 
  1734  011D                     	;# 
  1735  011D                     	;# 
  1736  011E                     	;# 
  1737  011E                     	;# 
  1738  011E                     	;# 
  1739  011F                     	;# 
  1740  011F                     	;# 
  1741  011F                     	;# 
  1742  011F                     	;# 
  1743  011F                     	;# 
  1744  018C                     	;# 
  1745  018D                     	;# 
  1746  018E                     	;# 
  1747  018F                     	;# 
  1748  0190                     	;# 
  1749  0191                     	;# 
  1750  0192                     	;# 
  1751  0196                     	;# 
  1752  0197                     	;# 
  1753  0198                     	;# 
  1754  0199                     	;# 
  1755  019A                     	;# 
  1756  019B                     	;# 
  1757  019C                     	;# 
  1758  020C                     	;# 
  1759  020C                     	;# 
  1760  020D                     	;# 
  1761  020E                     	;# 
  1762  020F                     	;# 
  1763  020F                     	;# 
  1764  0210                     	;# 
  1765  0210                     	;# 
  1766  0211                     	;# 
  1767  0211                     	;# 
  1768  0212                     	;# 
  1769  0212                     	;# 
  1770  0213                     	;# 
  1771  0214                     	;# 
  1772  0215                     	;# 
  1773  0215                     	;# 
  1774  0216                     	;# 
  1775  0216                     	;# 
  1776  0217                     	;# 
  1777  0217                     	;# 
  1778  0218                     	;# 
  1779  0218                     	;# 
  1780  0219                     	;# 
  1781  021A                     	;# 
  1782  021B                     	;# 
  1783  021B                     	;# 
  1784  021C                     	;# 
  1785  021C                     	;# 
  1786  021D                     	;# 
  1787  021D                     	;# 
  1788  021E                     	;# 
  1789  021F                     	;# 
  1790  028C                     	;# 
  1791  028C                     	;# 
  1792  028D                     	;# 
  1793  028D                     	;# 
  1794  028E                     	;# 
  1795  028F                     	;# 
  1796  0290                     	;# 
  1797  0290                     	;# 
  1798  0291                     	;# 
  1799  0292                     	;# 
  1800  0292                     	;# 
  1801  0293                     	;# 
  1802  0293                     	;# 
  1803  0294                     	;# 
  1804  0295                     	;# 
  1805  0296                     	;# 
  1806  0296                     	;# 
  1807  0297                     	;# 
  1808  0298                     	;# 
  1809  0298                     	;# 
  1810  0299                     	;# 
  1811  0299                     	;# 
  1812  029A                     	;# 
  1813  029B                     	;# 
  1814  029C                     	;# 
  1815  029C                     	;# 
  1816  029D                     	;# 
  1817  030C                     	;# 
  1818  030C                     	;# 
  1819  030D                     	;# 
  1820  030E                     	;# 
  1821  030F                     	;# 
  1822  0310                     	;# 
  1823  0310                     	;# 
  1824  0311                     	;# 
  1825  0312                     	;# 
  1826  0313                     	;# 
  1827  0314                     	;# 
  1828  0314                     	;# 
  1829  0315                     	;# 
  1830  0316                     	;# 
  1831  0317                     	;# 
  1832  0318                     	;# 
  1833  0318                     	;# 
  1834  0319                     	;# 
  1835  031A                     	;# 
  1836  031B                     	;# 
  1837  031C                     	;# 
  1838  031C                     	;# 
  1839  031D                     	;# 
  1840  031E                     	;# 
  1841  031F                     	;# 
  1842  038C                     	;# 
  1843  038D                     	;# 
  1844  038E                     	;# 
  1845  0390                     	;# 
  1846  0391                     	;# 
  1847  0392                     	;# 
  1848  040C                     	;# 
  1849  040D                     	;# 
  1850  040E                     	;# 
  1851  040F                     	;# 
  1852  0410                     	;# 
  1853  0411                     	;# 
  1854  0416                     	;# 
  1855  0416                     	;# 
  1856  0417                     	;# 
  1857  0418                     	;# 
  1858  0418                     	;# 
  1859  0419                     	;# 
  1860  041A                     	;# 
  1861  041A                     	;# 
  1862  041B                     	;# 
  1863  041C                     	;# 
  1864  041C                     	;# 
  1865  041D                     	;# 
  1866  041E                     	;# 
  1867  041F                     	;# 
  1868  048C                     	;# 
  1869  048C                     	;# 
  1870  048D                     	;# 
  1871  048E                     	;# 
  1872  048F                     	;# 
  1873  048F                     	;# 
  1874  0490                     	;# 
  1875  0491                     	;# 
  1876  0492                     	;# 
  1877  0492                     	;# 
  1878  0493                     	;# 
  1879  0494                     	;# 
  1880  0495                     	;# 
  1881  0495                     	;# 
  1882  0496                     	;# 
  1883  0497                     	;# 
  1884  0498                     	;# 
  1885  0499                     	;# 
  1886  049A                     	;# 
  1887  049B                     	;# 
  1888  049C                     	;# 
  1889  049D                     	;# 
  1890  050C                     	;# 
  1891  050C                     	;# 
  1892  050D                     	;# 
  1893  050E                     	;# 
  1894  050F                     	;# 
  1895  050F                     	;# 
  1896  0510                     	;# 
  1897  0511                     	;# 
  1898  0512                     	;# 
  1899  0512                     	;# 
  1900  0513                     	;# 
  1901  0514                     	;# 
  1902  0515                     	;# 
  1903  0515                     	;# 
  1904  0516                     	;# 
  1905  0517                     	;# 
  1906  0518                     	;# 
  1907  0519                     	;# 
  1908  051A                     	;# 
  1909  051B                     	;# 
  1910  051C                     	;# 
  1911  051D                     	;# 
  1912  058C                     	;# 
  1913  058C                     	;# 
  1914  058D                     	;# 
  1915  058E                     	;# 
  1916  058F                     	;# 
  1917  058F                     	;# 
  1918  0590                     	;# 
  1919  0591                     	;# 
  1920  0592                     	;# 
  1921  0593                     	;# 
  1922  060C                     	;# 
  1923  060D                     	;# 
  1924  060E                     	;# 
  1925  060F                     	;# 
  1926  0610                     	;# 
  1927  0611                     	;# 
  1928  0612                     	;# 
  1929  0613                     	;# 
  1930  0614                     	;# 
  1931  0616                     	;# 
  1932  0617                     	;# 
  1933  0618                     	;# 
  1934  0619                     	;# 
  1935  061A                     	;# 
  1936  061B                     	;# 
  1937  061C                     	;# 
  1938  061D                     	;# 
  1939  061E                     	;# 
  1940  068C                     	;# 
  1941  068D                     	;# 
  1942  068E                     	;# 
  1943  068F                     	;# 
  1944  0690                     	;# 
  1945  0691                     	;# 
  1946  0692                     	;# 
  1947  0693                     	;# 
  1948  0694                     	;# 
  1949  070C                     	;# 
  1950  070D                     	;# 
  1951  070E                     	;# 
  1952  070F                     	;# 
  1953  0710                     	;# 
  1954  0711                     	;# 
  1955  0712                     	;# 
  1956  0713                     	;# 
  1957  0714                     	;# 
  1958  0716                     	;# 
  1959  0717                     	;# 
  1960  0718                     	;# 
  1961  0719                     	;# 
  1962  071A                     	;# 
  1963  071B                     	;# 
  1964  071C                     	;# 
  1965  071D                     	;# 
  1966  071E                     	;# 
  1967  0796                     	;# 
  1968  0797                     	;# 
  1969  0798                     	;# 
  1970  0799                     	;# 
  1971  079A                     	;# 
  1972  079B                     	;# 
  1973  080C                     	;# 
  1974  080D                     	;# 
  1975  080E                     	;# 
  1976  080F                     	;# 
  1977  0810                     	;# 
  1978  0811                     	;# 
  1979  0812                     	;# 
  1980  0813                     	;# 
  1981  0814                     	;# 
  1982  081A                     	;# 
  1983  081B                     	;# 
  1984  081C                     	;# 
  1985  081D                     	;# 
  1986  081E                     	;# 
  1987  081F                     	;# 
  1988  088C                     	;# 
  1989  088D                     	;# 
  1990  088E                     	;# 
  1991  088F                     	;# 
  1992  0890                     	;# 
  1993  0891                     	;# 
  1994  0892                     	;# 
  1995  0893                     	;# 
  1996  0895                     	;# 
  1997  0896                     	;# 
  1998  0897                     	;# 
  1999  0898                     	;# 
  2000  0899                     	;# 
  2001  089A                     	;# 
  2002  089B                     	;# 
  2003  090C                     	;# 
  2004  090E                     	;# 
  2005  090F                     	;# 
  2006  091F                     	;# 
  2007  091F                     	;# 
  2008  098F                     	;# 
  2009  098F                     	;# 
  2010  0990                     	;# 
  2011  0991                     	;# 
  2012  0992                     	;# 
  2013  0993                     	;# 
  2014  0994                     	;# 
  2015  0995                     	;# 
  2016  0996                     	;# 
  2017  0997                     	;# 
  2018  0E0F                     	;# 
  2019  0E10                     	;# 
  2020  0E11                     	;# 
  2021  0E12                     	;# 
  2022  0E13                     	;# 
  2023  0E14                     	;# 
  2024  0E15                     	;# 
  2025  0E16                     	;# 
  2026  0E17                     	;# 
  2027  0E18                     	;# 
  2028  0E19                     	;# 
  2029  0E1A                     	;# 
  2030  0E1B                     	;# 
  2031  0E1C                     	;# 
  2032  0E1D                     	;# 
  2033  0E1E                     	;# 
  2034  0E1F                     	;# 
  2035  0E20                     	;# 
  2036  0E21                     	;# 
  2037  0E22                     	;# 
  2038  0E23                     	;# 
  2039  0E24                     	;# 
  2040  0E25                     	;# 
  2041  0E26                     	;# 
  2042  0E27                     	;# 
  2043  0E28                     	;# 
  2044  0E29                     	;# 
  2045  0E2A                     	;# 
  2046  0E2B                     	;# 
  2047  0E2C                     	;# 
  2048  0E2D                     	;# 
  2049  0E2E                     	;# 
  2050  0E2F                     	;# 
  2051  0E30                     	;# 
  2052  0E31                     	;# 
  2053  0E32                     	;# 
  2054  0E33                     	;# 
  2055  0E34                     	;# 
  2056  0E35                     	;# 
  2057  0E36                     	;# 
  2058  0E37                     	;# 
  2059  0E8F                     	;# 
  2060  0E90                     	;# 
  2061  0E91                     	;# 
  2062  0E92                     	;# 
  2063  0E93                     	;# 
  2064  0E94                     	;# 
  2065  0E95                     	;# 
  2066  0E96                     	;# 
  2067  0E97                     	;# 
  2068  0E9C                     	;# 
  2069  0E9D                     	;# 
  2070  0E9E                     	;# 
  2071  0EA1                     	;# 
  2072  0EA2                     	;# 
  2073  0EA3                     	;# 
  2074  0EA4                     	;# 
  2075  0EA5                     	;# 
  2076  0EA9                     	;# 
  2077  0EAA                     	;# 
  2078  0EAB                     	;# 
  2079  0EAC                     	;# 
  2080  0EB1                     	;# 
  2081  0EB2                     	;# 
  2082  0EB3                     	;# 
  2083  0EB8                     	;# 
  2084  0EB9                     	;# 
  2085  0EBA                     	;# 
  2086  0EBB                     	;# 
  2087  0EBC                     	;# 
  2088  0EBD                     	;# 
  2089  0EBE                     	;# 
  2090  0EC3                     	;# 
  2091  0EC5                     	;# 
  2092  0EC6                     	;# 
  2093  0EC7                     	;# 
  2094  0EC8                     	;# 
  2095  0EC9                     	;# 
  2096  0ECA                     	;# 
  2097  0ECB                     	;# 
  2098  0ECC                     	;# 
  2099  0F10                     	;# 
  2100  0F11                     	;# 
  2101  0F12                     	;# 
  2102  0F13                     	;# 
  2103  0F14                     	;# 
  2104  0F15                     	;# 
  2105  0F16                     	;# 
  2106  0F17                     	;# 
  2107  0F18                     	;# 
  2108  0F19                     	;# 
  2109  0F1A                     	;# 
  2110  0F1B                     	;# 
  2111  0F1C                     	;# 
  2112  0F1D                     	;# 
  2113  0F1E                     	;# 
  2114  0F1F                     	;# 
  2115  0F20                     	;# 
  2116  0F21                     	;# 
  2117  0F22                     	;# 
  2118  0F23                     	;# 
  2119  0F24                     	;# 
  2120  0F25                     	;# 
  2121  0F26                     	;# 
  2122  0F27                     	;# 
  2123  0F38                     	;# 
  2124  0F39                     	;# 
  2125  0F3A                     	;# 
  2126  0F3B                     	;# 
  2127  0F3C                     	;# 
  2128  0F3D                     	;# 
  2129  0F3E                     	;# 
  2130  0F3F                     	;# 
  2131  0F40                     	;# 
  2132  0F41                     	;# 
  2133  0F43                     	;# 
  2134  0F44                     	;# 
  2135  0F45                     	;# 
  2136  0F46                     	;# 
  2137  0F47                     	;# 
  2138  0F48                     	;# 
  2139  0F49                     	;# 
  2140  0F4A                     	;# 
  2141  0F4B                     	;# 
  2142  0F4C                     	;# 
  2143  0F4E                     	;# 
  2144  0F4F                     	;# 
  2145  0F50                     	;# 
  2146  0F51                     	;# 
  2147  0F52                     	;# 
  2148  0F53                     	;# 
  2149  0F54                     	;# 
  2150  0F55                     	;# 
  2151  0F56                     	;# 
  2152  0F57                     	;# 
  2153  0F65                     	;# 
  2154  0F68                     	;# 
  2155  0F69                     	;# 
  2156  0F6A                     	;# 
  2157  0F6B                     	;# 
  2158  0FE4                     	;# 
  2159  0FE5                     	;# 
  2160  0FE6                     	;# 
  2161  0FE7                     	;# 
  2162  0FE8                     	;# 
  2163  0FE9                     	;# 
  2164  0FEA                     	;# 
  2165  0FEB                     	;# 
  2166  0FED                     	;# 
  2167  0FEE                     	;# 
  2168  0FEF                     	;# 
  2169  0000                     	;# 
  2170  0001                     	;# 
  2171  0002                     	;# 
  2172  0003                     	;# 
  2173  0004                     	;# 
  2174  0005                     	;# 
  2175  0006                     	;# 
  2176  0007                     	;# 
  2177  0008                     	;# 
  2178  0009                     	;# 
  2179  000A                     	;# 
  2180  000B                     	;# 
  2181  000C                     	;# 
  2182  000D                     	;# 
  2183  000E                     	;# 
  2184  0010                     	;# 
  2185  0011                     	;# 
  2186  0012                     	;# 
  2187  0013                     	;# 
  2188  0016                     	;# 
  2189  0017                     	;# 
  2190  0018                     	;# 
  2191  001C                     	;# 
  2192  001C                     	;# 
  2193  001D                     	;# 
  2194  001D                     	;# 
  2195  001E                     	;# 
  2196  001F                     	;# 
  2197  008C                     	;# 
  2198  008C                     	;# 
  2199  008D                     	;# 
  2200  008E                     	;# 
  2201  008E                     	;# 
  2202  008F                     	;# 
  2203  0090                     	;# 
  2204  0090                     	;# 
  2205  0091                     	;# 
  2206  0093                     	;# 
  2207  0094                     	;# 
  2208  0095                     	;# 
  2209  0096                     	;# 
  2210  0097                     	;# 
  2211  0098                     	;# 
  2212  0099                     	;# 
  2213  009A                     	;# 
  2214  009B                     	;# 
  2215  009C                     	;# 
  2216  009D                     	;# 
  2217  009E                     	;# 
  2218  010C                     	;# 
  2219  010D                     	;# 
  2220  010E                     	;# 
  2221  010E                     	;# 
  2222  010F                     	;# 
  2223  0110                     	;# 
  2224  0110                     	;# 
  2225  0111                     	;# 
  2226  0112                     	;# 
  2227  0112                     	;# 
  2228  0113                     	;# 
  2229  0114                     	;# 
  2230  0114                     	;# 
  2231  0115                     	;# 
  2232  0116                     	;# 
  2233  0116                     	;# 
  2234  0117                     	;# 
  2235  0119                     	;# 
  2236  0119                     	;# 
  2237  0119                     	;# 
  2238  011A                     	;# 
  2239  011A                     	;# 
  2240  011A                     	;# 
  2241  011B                     	;# 
  2242  011B                     	;# 
  2243  011B                     	;# 
  2244  011B                     	;# 
  2245  011B                     	;# 
  2246  011C                     	;# 
  2247  011C                     	;# 
  2248  011C                     	;# 
  2249  011D                     	;# 
  2250  011D                     	;# 
  2251  011D                     	;# 
  2252  011E                     	;# 
  2253  011E                     	;# 
  2254  011E                     	;# 
  2255  011F                     	;# 
  2256  011F                     	;# 
  2257  011F                     	;# 
  2258  011F                     	;# 
  2259  011F                     	;# 
  2260  018C                     	;# 
  2261  018D                     	;# 
  2262  018E                     	;# 
  2263  018F                     	;# 
  2264  0190                     	;# 
  2265  0191                     	;# 
  2266  0192                     	;# 
  2267  0196                     	;# 
  2268  0197                     	;# 
  2269  0198                     	;# 
  2270  0199                     	;# 
  2271  019A                     	;# 
  2272  019B                     	;# 
  2273  019C                     	;# 
  2274  020C                     	;# 
  2275  020C                     	;# 
  2276  020D                     	;# 
  2277  020E                     	;# 
  2278  020F                     	;# 
  2279  020F                     	;# 
  2280  0210                     	;# 
  2281  0210                     	;# 
  2282  0211                     	;# 
  2283  0211                     	;# 
  2284  0212                     	;# 
  2285  0212                     	;# 
  2286  0213                     	;# 
  2287  0214                     	;# 
  2288  0215                     	;# 
  2289  0215                     	;# 
  2290  0216                     	;# 
  2291  0216                     	;# 
  2292  0217                     	;# 
  2293  0217                     	;# 
  2294  0218                     	;# 
  2295  0218                     	;# 
  2296  0219                     	;# 
  2297  021A                     	;# 
  2298  021B                     	;# 
  2299  021B                     	;# 
  2300  021C                     	;# 
  2301  021C                     	;# 
  2302  021D                     	;# 
  2303  021D                     	;# 
  2304  021E                     	;# 
  2305  021F                     	;# 
  2306  028C                     	;# 
  2307  028C                     	;# 
  2308  028D                     	;# 
  2309  028D                     	;# 
  2310  028E                     	;# 
  2311  028F                     	;# 
  2312  0290                     	;# 
  2313  0290                     	;# 
  2314  0291                     	;# 
  2315  0292                     	;# 
  2316  0292                     	;# 
  2317  0293                     	;# 
  2318  0293                     	;# 
  2319  0294                     	;# 
  2320  0295                     	;# 
  2321  0296                     	;# 
  2322  0296                     	;# 
  2323  0297                     	;# 
  2324  0298                     	;# 
  2325  0298                     	;# 
  2326  0299                     	;# 
  2327  0299                     	;# 
  2328  029A                     	;# 
  2329  029B                     	;# 
  2330  029C                     	;# 
  2331  029C                     	;# 
  2332  029D                     	;# 
  2333  030C                     	;# 
  2334  030C                     	;# 
  2335  030D                     	;# 
  2336  030E                     	;# 
  2337  030F                     	;# 
  2338  0310                     	;# 
  2339  0310                     	;# 
  2340  0311                     	;# 
  2341  0312                     	;# 
  2342  0313                     	;# 
  2343  0314                     	;# 
  2344  0314                     	;# 
  2345  0315                     	;# 
  2346  0316                     	;# 
  2347  0317                     	;# 
  2348  0318                     	;# 
  2349  0318                     	;# 
  2350  0319                     	;# 
  2351  031A                     	;# 
  2352  031B                     	;# 
  2353  031C                     	;# 
  2354  031C                     	;# 
  2355  031D                     	;# 
  2356  031E                     	;# 
  2357  031F                     	;# 
  2358  038C                     	;# 
  2359  038D                     	;# 
  2360  038E                     	;# 
  2361  0390                     	;# 
  2362  0391                     	;# 
  2363  0392                     	;# 
  2364  040C                     	;# 
  2365  040D                     	;# 
  2366  040E                     	;# 
  2367  040F                     	;# 
  2368  0410                     	;# 
  2369  0411                     	;# 
  2370  0416                     	;# 
  2371  0416                     	;# 
  2372  0417                     	;# 
  2373  0418                     	;# 
  2374  0418                     	;# 
  2375  0419                     	;# 
  2376  041A                     	;# 
  2377  041A                     	;# 
  2378  041B                     	;# 
  2379  041C                     	;# 
  2380  041C                     	;# 
  2381  041D                     	;# 
  2382  041E                     	;# 
  2383  041F                     	;# 
  2384  048C                     	;# 
  2385  048C                     	;# 
  2386  048D                     	;# 
  2387  048E                     	;# 
  2388  048F                     	;# 
  2389  048F                     	;# 
  2390  0490                     	;# 
  2391  0491                     	;# 
  2392  0492                     	;# 
  2393  0492                     	;# 
  2394  0493                     	;# 
  2395  0494                     	;# 
  2396  0495                     	;# 
  2397  0495                     	;# 
  2398  0496                     	;# 
  2399  0497                     	;# 
  2400  0498                     	;# 
  2401  0499                     	;# 
  2402  049A                     	;# 
  2403  049B                     	;# 
  2404  049C                     	;# 
  2405  049D                     	;# 
  2406  050C                     	;# 
  2407  050C                     	;# 
  2408  050D                     	;# 
  2409  050E                     	;# 
  2410  050F                     	;# 
  2411  050F                     	;# 
  2412  0510                     	;# 
  2413  0511                     	;# 
  2414  0512                     	;# 
  2415  0512                     	;# 
  2416  0513                     	;# 
  2417  0514                     	;# 
  2418  0515                     	;# 
  2419  0515                     	;# 
  2420  0516                     	;# 
  2421  0517                     	;# 
  2422  0518                     	;# 
  2423  0519                     	;# 
  2424  051A                     	;# 
  2425  051B                     	;# 
  2426  051C                     	;# 
  2427  051D                     	;# 
  2428  058C                     	;# 
  2429  058C                     	;# 
  2430  058D                     	;# 
  2431  058E                     	;# 
  2432  058F                     	;# 
  2433  058F                     	;# 
  2434  0590                     	;# 
  2435  0591                     	;# 
  2436  0592                     	;# 
  2437  0593                     	;# 
  2438  060C                     	;# 
  2439  060D                     	;# 
  2440  060E                     	;# 
  2441  060F                     	;# 
  2442  0610                     	;# 
  2443  0611                     	;# 
  2444  0612                     	;# 
  2445  0613                     	;# 
  2446  0614                     	;# 
  2447  0616                     	;# 
  2448  0617                     	;# 
  2449  0618                     	;# 
  2450  0619                     	;# 
  2451  061A                     	;# 
  2452  061B                     	;# 
  2453  061C                     	;# 
  2454  061D                     	;# 
  2455  061E                     	;# 
  2456  068C                     	;# 
  2457  068D                     	;# 
  2458  068E                     	;# 
  2459  068F                     	;# 
  2460  0690                     	;# 
  2461  0691                     	;# 
  2462  0692                     	;# 
  2463  0693                     	;# 
  2464  0694                     	;# 
  2465  070C                     	;# 
  2466  070D                     	;# 
  2467  070E                     	;# 
  2468  070F                     	;# 
  2469  0710                     	;# 
  2470  0711                     	;# 
  2471  0712                     	;# 
  2472  0713                     	;# 
  2473  0714                     	;# 
  2474  0716                     	;# 
  2475  0717                     	;# 
  2476  0718                     	;# 
  2477  0719                     	;# 
  2478  071A                     	;# 
  2479  071B                     	;# 
  2480  071C                     	;# 
  2481  071D                     	;# 
  2482  071E                     	;# 
  2483  0796                     	;# 
  2484  0797                     	;# 
  2485  0798                     	;# 
  2486  0799                     	;# 
  2487  079A                     	;# 
  2488  079B                     	;# 
  2489  080C                     	;# 
  2490  080D                     	;# 
  2491  080E                     	;# 
  2492  080F                     	;# 
  2493  0810                     	;# 
  2494  0811                     	;# 
  2495  0812                     	;# 
  2496  0813                     	;# 
  2497  0814                     	;# 
  2498  081A                     	;# 
  2499  081B                     	;# 
  2500  081C                     	;# 
  2501  081D                     	;# 
  2502  081E                     	;# 
  2503  081F                     	;# 
  2504  088C                     	;# 
  2505  088D                     	;# 
  2506  088E                     	;# 
  2507  088F                     	;# 
  2508  0890                     	;# 
  2509  0891                     	;# 
  2510  0892                     	;# 
  2511  0893                     	;# 
  2512  0895                     	;# 
  2513  0896                     	;# 
  2514  0897                     	;# 
  2515  0898                     	;# 
  2516  0899                     	;# 
  2517  089A                     	;# 
  2518  089B                     	;# 
  2519  090C                     	;# 
  2520  090E                     	;# 
  2521  090F                     	;# 
  2522  091F                     	;# 
  2523  091F                     	;# 
  2524  098F                     	;# 
  2525  098F                     	;# 
  2526  0990                     	;# 
  2527  0991                     	;# 
  2528  0992                     	;# 
  2529  0993                     	;# 
  2530  0994                     	;# 
  2531  0995                     	;# 
  2532  0996                     	;# 
  2533  0997                     	;# 
  2534  0E0F                     	;# 
  2535  0E10                     	;# 
  2536  0E11                     	;# 
  2537  0E12                     	;# 
  2538  0E13                     	;# 
  2539  0E14                     	;# 
  2540  0E15                     	;# 
  2541  0E16                     	;# 
  2542  0E17                     	;# 
  2543  0E18                     	;# 
  2544  0E19                     	;# 
  2545  0E1A                     	;# 
  2546  0E1B                     	;# 
  2547  0E1C                     	;# 
  2548  0E1D                     	;# 
  2549  0E1E                     	;# 
  2550  0E1F                     	;# 
  2551  0E20                     	;# 
  2552  0E21                     	;# 
  2553  0E22                     	;# 
  2554  0E23                     	;# 
  2555  0E24                     	;# 
  2556  0E25                     	;# 
  2557  0E26                     	;# 
  2558  0E27                     	;# 
  2559  0E28                     	;# 
  2560  0E29                     	;# 
  2561  0E2A                     	;# 
  2562  0E2B                     	;# 
  2563  0E2C                     	;# 
  2564  0E2D                     	;# 
  2565  0E2E                     	;# 
  2566  0E2F                     	;# 
  2567  0E30                     	;# 
  2568  0E31                     	;# 
  2569  0E32                     	;# 
  2570  0E33                     	;# 
  2571  0E34                     	;# 
  2572  0E35                     	;# 
  2573  0E36                     	;# 
  2574  0E37                     	;# 
  2575  0E8F                     	;# 
  2576  0E90                     	;# 
  2577  0E91                     	;# 
  2578  0E92                     	;# 
  2579  0E93                     	;# 
  2580  0E94                     	;# 
  2581  0E95                     	;# 
  2582  0E96                     	;# 
  2583  0E97                     	;# 
  2584  0E9C                     	;# 
  2585  0E9D                     	;# 
  2586  0E9E                     	;# 
  2587  0EA1                     	;# 
  2588  0EA2                     	;# 
  2589  0EA3                     	;# 
  2590  0EA4                     	;# 
  2591  0EA5                     	;# 
  2592  0EA9                     	;# 
  2593  0EAA                     	;# 
  2594  0EAB                     	;# 
  2595  0EAC                     	;# 
  2596  0EB1                     	;# 
  2597  0EB2                     	;# 
  2598  0EB3                     	;# 
  2599  0EB8                     	;# 
  2600  0EB9                     	;# 
  2601  0EBA                     	;# 
  2602  0EBB                     	;# 
  2603  0EBC                     	;# 
  2604  0EBD                     	;# 
  2605  0EBE                     	;# 
  2606  0EC3                     	;# 
  2607  0EC5                     	;# 
  2608  0EC6                     	;# 
  2609  0EC7                     	;# 
  2610  0EC8                     	;# 
  2611  0EC9                     	;# 
  2612  0ECA                     	;# 
  2613  0ECB                     	;# 
  2614  0ECC                     	;# 
  2615  0F10                     	;# 
  2616  0F11                     	;# 
  2617  0F12                     	;# 
  2618  0F13                     	;# 
  2619  0F14                     	;# 
  2620  0F15                     	;# 
  2621  0F16                     	;# 
  2622  0F17                     	;# 
  2623  0F18                     	;# 
  2624  0F19                     	;# 
  2625  0F1A                     	;# 
  2626  0F1B                     	;# 
  2627  0F1C                     	;# 
  2628  0F1D                     	;# 
  2629  0F1E                     	;# 
  2630  0F1F                     	;# 
  2631  0F20                     	;# 
  2632  0F21                     	;# 
  2633  0F22                     	;# 
  2634  0F23                     	;# 
  2635  0F24                     	;# 
  2636  0F25                     	;# 
  2637  0F26                     	;# 
  2638  0F27                     	;# 
  2639  0F38                     	;# 
  2640  0F39                     	;# 
  2641  0F3A                     	;# 
  2642  0F3B                     	;# 
  2643  0F3C                     	;# 
  2644  0F3D                     	;# 
  2645  0F3E                     	;# 
  2646  0F3F                     	;# 
  2647  0F40                     	;# 
  2648  0F41                     	;# 
  2649  0F43                     	;# 
  2650  0F44                     	;# 
  2651  0F45                     	;# 
  2652  0F46                     	;# 
  2653  0F47                     	;# 
  2654  0F48                     	;# 
  2655  0F49                     	;# 
  2656  0F4A                     	;# 
  2657  0F4B                     	;# 
  2658  0F4C                     	;# 
  2659  0F4E                     	;# 
  2660  0F4F                     	;# 
  2661  0F50                     	;# 
  2662  0F51                     	;# 
  2663  0F52                     	;# 
  2664  0F53                     	;# 
  2665  0F54                     	;# 
  2666  0F55                     	;# 
  2667  0F56                     	;# 
  2668  0F57                     	;# 
  2669  0F65                     	;# 
  2670  0F68                     	;# 
  2671  0F69                     	;# 
  2672  0F6A                     	;# 
  2673  0F6B                     	;# 
  2674  0FE4                     	;# 
  2675  0FE5                     	;# 
  2676  0FE6                     	;# 
  2677  0FE7                     	;# 
  2678  0FE8                     	;# 
  2679  0FE9                     	;# 
  2680  0FEA                     	;# 
  2681  0FEB                     	;# 
  2682  0FED                     	;# 
  2683  0FEE                     	;# 
  2684  0FEF                     	;# 
  2685  0000                     	;# 
  2686  0001                     	;# 
  2687  0002                     	;# 
  2688  0003                     	;# 
  2689  0004                     	;# 
  2690  0005                     	;# 
  2691  0006                     	;# 
  2692  0007                     	;# 
  2693  0008                     	;# 
  2694  0009                     	;# 
  2695  000A                     	;# 
  2696  000B                     	;# 
  2697  000C                     	;# 
  2698  000D                     	;# 
  2699  000E                     	;# 
  2700  0010                     	;# 
  2701  0011                     	;# 
  2702  0012                     	;# 
  2703  0013                     	;# 
  2704  0016                     	;# 
  2705  0017                     	;# 
  2706  0018                     	;# 
  2707  001C                     	;# 
  2708  001C                     	;# 
  2709  001D                     	;# 
  2710  001D                     	;# 
  2711  001E                     	;# 
  2712  001F                     	;# 
  2713  008C                     	;# 
  2714  008C                     	;# 
  2715  008D                     	;# 
  2716  008E                     	;# 
  2717  008E                     	;# 
  2718  008F                     	;# 
  2719  0090                     	;# 
  2720  0090                     	;# 
  2721  0091                     	;# 
  2722  0093                     	;# 
  2723  0094                     	;# 
  2724  0095                     	;# 
  2725  0096                     	;# 
  2726  0097                     	;# 
  2727  0098                     	;# 
  2728  0099                     	;# 
  2729  009A                     	;# 
  2730  009B                     	;# 
  2731  009C                     	;# 
  2732  009D                     	;# 
  2733  009E                     	;# 
  2734  010C                     	;# 
  2735  010D                     	;# 
  2736  010E                     	;# 
  2737  010E                     	;# 
  2738  010F                     	;# 
  2739  0110                     	;# 
  2740  0110                     	;# 
  2741  0111                     	;# 
  2742  0112                     	;# 
  2743  0112                     	;# 
  2744  0113                     	;# 
  2745  0114                     	;# 
  2746  0114                     	;# 
  2747  0115                     	;# 
  2748  0116                     	;# 
  2749  0116                     	;# 
  2750  0117                     	;# 
  2751  0119                     	;# 
  2752  0119                     	;# 
  2753  0119                     	;# 
  2754  011A                     	;# 
  2755  011A                     	;# 
  2756  011A                     	;# 
  2757  011B                     	;# 
  2758  011B                     	;# 
  2759  011B                     	;# 
  2760  011B                     	;# 
  2761  011B                     	;# 
  2762  011C                     	;# 
  2763  011C                     	;# 
  2764  011C                     	;# 
  2765  011D                     	;# 
  2766  011D                     	;# 
  2767  011D                     	;# 
  2768  011E                     	;# 
  2769  011E                     	;# 
  2770  011E                     	;# 
  2771  011F                     	;# 
  2772  011F                     	;# 
  2773  011F                     	;# 
  2774  011F                     	;# 
  2775  011F                     	;# 
  2776  018C                     	;# 
  2777  018D                     	;# 
  2778  018E                     	;# 
  2779  018F                     	;# 
  2780  0190                     	;# 
  2781  0191                     	;# 
  2782  0192                     	;# 
  2783  0196                     	;# 
  2784  0197                     	;# 
  2785  0198                     	;# 
  2786  0199                     	;# 
  2787  019A                     	;# 
  2788  019B                     	;# 
  2789  019C                     	;# 
  2790  020C                     	;# 
  2791  020C                     	;# 
  2792  020D                     	;# 
  2793  020E                     	;# 
  2794  020F                     	;# 
  2795  020F                     	;# 
  2796  0210                     	;# 
  2797  0210                     	;# 
  2798  0211                     	;# 
  2799  0211                     	;# 
  2800  0212                     	;# 
  2801  0212                     	;# 
  2802  0213                     	;# 
  2803  0214                     	;# 
  2804  0215                     	;# 
  2805  0215                     	;# 
  2806  0216                     	;# 
  2807  0216                     	;# 
  2808  0217                     	;# 
  2809  0217                     	;# 
  2810  0218                     	;# 
  2811  0218                     	;# 
  2812  0219                     	;# 
  2813  021A                     	;# 
  2814  021B                     	;# 
  2815  021B                     	;# 
  2816  021C                     	;# 
  2817  021C                     	;# 
  2818  021D                     	;# 
  2819  021D                     	;# 
  2820  021E                     	;# 
  2821  021F                     	;# 
  2822  028C                     	;# 
  2823  028C                     	;# 
  2824  028D                     	;# 
  2825  028D                     	;# 
  2826  028E                     	;# 
  2827  028F                     	;# 
  2828  0290                     	;# 
  2829  0290                     	;# 
  2830  0291                     	;# 
  2831  0292                     	;# 
  2832  0292                     	;# 
  2833  0293                     	;# 
  2834  0293                     	;# 
  2835  0294                     	;# 
  2836  0295                     	;# 
  2837  0296                     	;# 
  2838  0296                     	;# 
  2839  0297                     	;# 
  2840  0298                     	;# 
  2841  0298                     	;# 
  2842  0299                     	;# 
  2843  0299                     	;# 
  2844  029A                     	;# 
  2845  029B                     	;# 
  2846  029C                     	;# 
  2847  029C                     	;# 
  2848  029D                     	;# 
  2849  030C                     	;# 
  2850  030C                     	;# 
  2851  030D                     	;# 
  2852  030E                     	;# 
  2853  030F                     	;# 
  2854  0310                     	;# 
  2855  0310                     	;# 
  2856  0311                     	;# 
  2857  0312                     	;# 
  2858  0313                     	;# 
  2859  0314                     	;# 
  2860  0314                     	;# 
  2861  0315                     	;# 
  2862  0316                     	;# 
  2863  0317                     	;# 
  2864  0318                     	;# 
  2865  0318                     	;# 
  2866  0319                     	;# 
  2867  031A                     	;# 
  2868  031B                     	;# 
  2869  031C                     	;# 
  2870  031C                     	;# 
  2871  031D                     	;# 
  2872  031E                     	;# 
  2873  031F                     	;# 
  2874  038C                     	;# 
  2875  038D                     	;# 
  2876  038E                     	;# 
  2877  0390                     	;# 
  2878  0391                     	;# 
  2879  0392                     	;# 
  2880  040C                     	;# 
  2881  040D                     	;# 
  2882  040E                     	;# 
  2883  040F                     	;# 
  2884  0410                     	;# 
  2885  0411                     	;# 
  2886  0416                     	;# 
  2887  0416                     	;# 
  2888  0417                     	;# 
  2889  0418                     	;# 
  2890  0418                     	;# 
  2891  0419                     	;# 
  2892  041A                     	;# 
  2893  041A                     	;# 
  2894  041B                     	;# 
  2895  041C                     	;# 
  2896  041C                     	;# 
  2897  041D                     	;# 
  2898  041E                     	;# 
  2899  041F                     	;# 
  2900  048C                     	;# 
  2901  048C                     	;# 
  2902  048D                     	;# 
  2903  048E                     	;# 
  2904  048F                     	;# 
  2905  048F                     	;# 
  2906  0490                     	;# 
  2907  0491                     	;# 
  2908  0492                     	;# 
  2909  0492                     	;# 
  2910  0493                     	;# 
  2911  0494                     	;# 
  2912  0495                     	;# 
  2913  0495                     	;# 
  2914  0496                     	;# 
  2915  0497                     	;# 
  2916  0498                     	;# 
  2917  0499                     	;# 
  2918  049A                     	;# 
  2919  049B                     	;# 
  2920  049C                     	;# 
  2921  049D                     	;# 
  2922  050C                     	;# 
  2923  050C                     	;# 
  2924  050D                     	;# 
  2925  050E                     	;# 
  2926  050F                     	;# 
  2927  050F                     	;# 
  2928  0510                     	;# 
  2929  0511                     	;# 
  2930  0512                     	;# 
  2931  0512                     	;# 
  2932  0513                     	;# 
  2933  0514                     	;# 
  2934  0515                     	;# 
  2935  0515                     	;# 
  2936  0516                     	;# 
  2937  0517                     	;# 
  2938  0518                     	;# 
  2939  0519                     	;# 
  2940  051A                     	;# 
  2941  051B                     	;# 
  2942  051C                     	;# 
  2943  051D                     	;# 
  2944  058C                     	;# 
  2945  058C                     	;# 
  2946  058D                     	;# 
  2947  058E                     	;# 
  2948  058F                     	;# 
  2949  058F                     	;# 
  2950  0590                     	;# 
  2951  0591                     	;# 
  2952  0592                     	;# 
  2953  0593                     	;# 
  2954  060C                     	;# 
  2955  060D                     	;# 
  2956  060E                     	;# 
  2957  060F                     	;# 
  2958  0610                     	;# 
  2959  0611                     	;# 
  2960  0612                     	;# 
  2961  0613                     	;# 
  2962  0614                     	;# 
  2963  0616                     	;# 
  2964  0617                     	;# 
  2965  0618                     	;# 
  2966  0619                     	;# 
  2967  061A                     	;# 
  2968  061B                     	;# 
  2969  061C                     	;# 
  2970  061D                     	;# 
  2971  061E                     	;# 
  2972  068C                     	;# 
  2973  068D                     	;# 
  2974  068E                     	;# 
  2975  068F                     	;# 
  2976  0690                     	;# 
  2977  0691                     	;# 
  2978  0692                     	;# 
  2979  0693                     	;# 
  2980  0694                     	;# 
  2981  070C                     	;# 
  2982  070D                     	;# 
  2983  070E                     	;# 
  2984  070F                     	;# 
  2985  0710                     	;# 
  2986  0711                     	;# 
  2987  0712                     	;# 
  2988  0713                     	;# 
  2989  0714                     	;# 
  2990  0716                     	;# 
  2991  0717                     	;# 
  2992  0718                     	;# 
  2993  0719                     	;# 
  2994  071A                     	;# 
  2995  071B                     	;# 
  2996  071C                     	;# 
  2997  071D                     	;# 
  2998  071E                     	;# 
  2999  0796                     	;# 
  3000  0797                     	;# 
  3001  0798                     	;# 
  3002  0799                     	;# 
  3003  079A                     	;# 
  3004  079B                     	;# 
  3005  080C                     	;# 
  3006  080D                     	;# 
  3007  080E                     	;# 
  3008  080F                     	;# 
  3009  0810                     	;# 
  3010  0811                     	;# 
  3011  0812                     	;# 
  3012  0813                     	;# 
  3013  0814                     	;# 
  3014  081A                     	;# 
  3015  081B                     	;# 
  3016  081C                     	;# 
  3017  081D                     	;# 
  3018  081E                     	;# 
  3019  081F                     	;# 
  3020  088C                     	;# 
  3021  088D                     	;# 
  3022  088E                     	;# 
  3023  088F                     	;# 
  3024  0890                     	;# 
  3025  0891                     	;# 
  3026  0892                     	;# 
  3027  0893                     	;# 
  3028  0895                     	;# 
  3029  0896                     	;# 
  3030  0897                     	;# 
  3031  0898                     	;# 
  3032  0899                     	;# 
  3033  089A                     	;# 
  3034  089B                     	;# 
  3035  090C                     	;# 
  3036  090E                     	;# 
  3037  090F                     	;# 
  3038  091F                     	;# 
  3039  091F                     	;# 
  3040  098F                     	;# 
  3041  098F                     	;# 
  3042  0990                     	;# 
  3043  0991                     	;# 
  3044  0992                     	;# 
  3045  0993                     	;# 
  3046  0994                     	;# 
  3047  0995                     	;# 
  3048  0996                     	;# 
  3049  0997                     	;# 
  3050  0E0F                     	;# 
  3051  0E10                     	;# 
  3052  0E11                     	;# 
  3053  0E12                     	;# 
  3054  0E13                     	;# 
  3055  0E14                     	;# 
  3056  0E15                     	;# 
  3057  0E16                     	;# 
  3058  0E17                     	;# 
  3059  0E18                     	;# 
  3060  0E19                     	;# 
  3061  0E1A                     	;# 
  3062  0E1B                     	;# 
  3063  0E1C                     	;# 
  3064  0E1D                     	;# 
  3065  0E1E                     	;# 
  3066  0E1F                     	;# 
  3067  0E20                     	;# 
  3068  0E21                     	;# 
  3069  0E22                     	;# 
  3070  0E23                     	;# 
  3071  0E24                     	;# 
  3072  0E25                     	;# 
  3073  0E26                     	;# 
  3074  0E27                     	;# 
  3075  0E28                     	;# 
  3076  0E29                     	;# 
  3077  0E2A                     	;# 
  3078  0E2B                     	;# 
  3079  0E2C                     	;# 
  3080  0E2D                     	;# 
  3081  0E2E                     	;# 
  3082  0E2F                     	;# 
  3083  0E30                     	;# 
  3084  0E31                     	;# 
  3085  0E32                     	;# 
  3086  0E33                     	;# 
  3087  0E34                     	;# 
  3088  0E35                     	;# 
  3089  0E36                     	;# 
  3090  0E37                     	;# 
  3091  0E8F                     	;# 
  3092  0E90                     	;# 
  3093  0E91                     	;# 
  3094  0E92                     	;# 
  3095  0E93                     	;# 
  3096  0E94                     	;# 
  3097  0E95                     	;# 
  3098  0E96                     	;# 
  3099  0E97                     	;# 
  3100  0E9C                     	;# 
  3101  0E9D                     	;# 
  3102  0E9E                     	;# 
  3103  0EA1                     	;# 
  3104  0EA2                     	;# 
  3105  0EA3                     	;# 
  3106  0EA4                     	;# 
  3107  0EA5                     	;# 
  3108  0EA9                     	;# 
  3109  0EAA                     	;# 
  3110  0EAB                     	;# 
  3111  0EAC                     	;# 
  3112  0EB1                     	;# 
  3113  0EB2                     	;# 
  3114  0EB3                     	;# 
  3115  0EB8                     	;# 
  3116  0EB9                     	;# 
  3117  0EBA                     	;# 
  3118  0EBB                     	;# 
  3119  0EBC                     	;# 
  3120  0EBD                     	;# 
  3121  0EBE                     	;# 
  3122  0EC3                     	;# 
  3123  0EC5                     	;# 
  3124  0EC6                     	;# 
  3125  0EC7                     	;# 
  3126  0EC8                     	;# 
  3127  0EC9                     	;# 
  3128  0ECA                     	;# 
  3129  0ECB                     	;# 
  3130  0ECC                     	;# 
  3131  0F10                     	;# 
  3132  0F11                     	;# 
  3133  0F12                     	;# 
  3134  0F13                     	;# 
  3135  0F14                     	;# 
  3136  0F15                     	;# 
  3137  0F16                     	;# 
  3138  0F17                     	;# 
  3139  0F18                     	;# 
  3140  0F19                     	;# 
  3141  0F1A                     	;# 
  3142  0F1B                     	;# 
  3143  0F1C                     	;# 
  3144  0F1D                     	;# 
  3145  0F1E                     	;# 
  3146  0F1F                     	;# 
  3147  0F20                     	;# 
  3148  0F21                     	;# 
  3149  0F22                     	;# 
  3150  0F23                     	;# 
  3151  0F24                     	;# 
  3152  0F25                     	;# 
  3153  0F26                     	;# 
  3154  0F27                     	;# 
  3155  0F38                     	;# 
  3156  0F39                     	;# 
  3157  0F3A                     	;# 
  3158  0F3B                     	;# 
  3159  0F3C                     	;# 
  3160  0F3D                     	;# 
  3161  0F3E                     	;# 
  3162  0F3F                     	;# 
  3163  0F40                     	;# 
  3164  0F41                     	;# 
  3165  0F43                     	;# 
  3166  0F44                     	;# 
  3167  0F45                     	;# 
  3168  0F46                     	;# 
  3169  0F47                     	;# 
  3170  0F48                     	;# 
  3171  0F49                     	;# 
  3172  0F4A                     	;# 
  3173  0F4B                     	;# 
  3174  0F4C                     	;# 
  3175  0F4E                     	;# 
  3176  0F4F                     	;# 
  3177  0F50                     	;# 
  3178  0F51                     	;# 
  3179  0F52                     	;# 
  3180  0F53                     	;# 
  3181  0F54                     	;# 
  3182  0F55                     	;# 
  3183  0F56                     	;# 
  3184  0F57                     	;# 
  3185  0F65                     	;# 
  3186  0F68                     	;# 
  3187  0F69                     	;# 
  3188  0F6A                     	;# 
  3189  0F6B                     	;# 
  3190  0FE4                     	;# 
  3191  0FE5                     	;# 
  3192  0FE6                     	;# 
  3193  0FE7                     	;# 
  3194  0FE8                     	;# 
  3195  0FE9                     	;# 
  3196  0FEA                     	;# 
  3197  0FEB                     	;# 
  3198  0FED                     	;# 
  3199  0FEE                     	;# 
  3200  0FEF                     	;# 
  3201  0000                     	;# 
  3202  0001                     	;# 
  3203  0002                     	;# 
  3204  0003                     	;# 
  3205  0004                     	;# 
  3206  0005                     	;# 
  3207  0006                     	;# 
  3208  0007                     	;# 
  3209  0008                     	;# 
  3210  0009                     	;# 
  3211  000A                     	;# 
  3212  000B                     	;# 
  3213  000C                     	;# 
  3214  000D                     	;# 
  3215  000E                     	;# 
  3216  0010                     	;# 
  3217  0011                     	;# 
  3218  0012                     	;# 
  3219  0013                     	;# 
  3220  0016                     	;# 
  3221  0017                     	;# 
  3222  0018                     	;# 
  3223  001C                     	;# 
  3224  001C                     	;# 
  3225  001D                     	;# 
  3226  001D                     	;# 
  3227  001E                     	;# 
  3228  001F                     	;# 
  3229  008C                     	;# 
  3230  008C                     	;# 
  3231  008D                     	;# 
  3232  008E                     	;# 
  3233  008E                     	;# 
  3234  008F                     	;# 
  3235  0090                     	;# 
  3236  0090                     	;# 
  3237  0091                     	;# 
  3238  0093                     	;# 
  3239  0094                     	;# 
  3240  0095                     	;# 
  3241  0096                     	;# 
  3242  0097                     	;# 
  3243  0098                     	;# 
  3244  0099                     	;# 
  3245  009A                     	;# 
  3246  009B                     	;# 
  3247  009C                     	;# 
  3248  009D                     	;# 
  3249  009E                     	;# 
  3250  010C                     	;# 
  3251  010D                     	;# 
  3252  010E                     	;# 
  3253  010E                     	;# 
  3254  010F                     	;# 
  3255  0110                     	;# 
  3256  0110                     	;# 
  3257  0111                     	;# 
  3258  0112                     	;# 
  3259  0112                     	;# 
  3260  0113                     	;# 
  3261  0114                     	;# 
  3262  0114                     	;# 
  3263  0115                     	;# 
  3264  0116                     	;# 
  3265  0116                     	;# 
  3266  0117                     	;# 
  3267  0119                     	;# 
  3268  0119                     	;# 
  3269  0119                     	;# 
  3270  011A                     	;# 
  3271  011A                     	;# 
  3272  011A                     	;# 
  3273  011B                     	;# 
  3274  011B                     	;# 
  3275  011B                     	;# 
  3276  011B                     	;# 
  3277  011B                     	;# 
  3278  011C                     	;# 
  3279  011C                     	;# 
  3280  011C                     	;# 
  3281  011D                     	;# 
  3282  011D                     	;# 
  3283  011D                     	;# 
  3284  011E                     	;# 
  3285  011E                     	;# 
  3286  011E                     	;# 
  3287  011F                     	;# 
  3288  011F                     	;# 
  3289  011F                     	;# 
  3290  011F                     	;# 
  3291  011F                     	;# 
  3292  018C                     	;# 
  3293  018D                     	;# 
  3294  018E                     	;# 
  3295  018F                     	;# 
  3296  0190                     	;# 
  3297  0191                     	;# 
  3298  0192                     	;# 
  3299  0196                     	;# 
  3300  0197                     	;# 
  3301  0198                     	;# 
  3302  0199                     	;# 
  3303  019A                     	;# 
  3304  019B                     	;# 
  3305  019C                     	;# 
  3306  020C                     	;# 
  3307  020C                     	;# 
  3308  020D                     	;# 
  3309  020E                     	;# 
  3310  020F                     	;# 
  3311  020F                     	;# 
  3312  0210                     	;# 
  3313  0210                     	;# 
  3314  0211                     	;# 
  3315  0211                     	;# 
  3316  0212                     	;# 
  3317  0212                     	;# 
  3318  0213                     	;# 
  3319  0214                     	;# 
  3320  0215                     	;# 
  3321  0215                     	;# 
  3322  0216                     	;# 
  3323  0216                     	;# 
  3324  0217                     	;# 
  3325  0217                     	;# 
  3326  0218                     	;# 
  3327  0218                     	;# 
  3328  0219                     	;# 
  3329  021A                     	;# 
  3330  021B                     	;# 
  3331  021B                     	;# 
  3332  021C                     	;# 
  3333  021C                     	;# 
  3334  021D                     	;# 
  3335  021D                     	;# 
  3336  021E                     	;# 
  3337  021F                     	;# 
  3338  028C                     	;# 
  3339  028C                     	;# 
  3340  028D                     	;# 
  3341  028D                     	;# 
  3342  028E                     	;# 
  3343  028F                     	;# 
  3344  0290                     	;# 
  3345  0290                     	;# 
  3346  0291                     	;# 
  3347  0292                     	;# 
  3348  0292                     	;# 
  3349  0293                     	;# 
  3350  0293                     	;# 
  3351  0294                     	;# 
  3352  0295                     	;# 
  3353  0296                     	;# 
  3354  0296                     	;# 
  3355  0297                     	;# 
  3356  0298                     	;# 
  3357  0298                     	;# 
  3358  0299                     	;# 
  3359  0299                     	;# 
  3360  029A                     	;# 
  3361  029B                     	;# 
  3362  029C                     	;# 
  3363  029C                     	;# 
  3364  029D                     	;# 
  3365  030C                     	;# 
  3366  030C                     	;# 
  3367  030D                     	;# 
  3368  030E                     	;# 
  3369  030F                     	;# 
  3370  0310                     	;# 
  3371  0310                     	;# 
  3372  0311                     	;# 
  3373  0312                     	;# 
  3374  0313                     	;# 
  3375  0314                     	;# 
  3376  0314                     	;# 
  3377  0315                     	;# 
  3378  0316                     	;# 
  3379  0317                     	;# 
  3380  0318                     	;# 
  3381  0318                     	;# 
  3382  0319                     	;# 
  3383  031A                     	;# 
  3384  031B                     	;# 
  3385  031C                     	;# 
  3386  031C                     	;# 
  3387  031D                     	;# 
  3388  031E                     	;# 
  3389  031F                     	;# 
  3390  038C                     	;# 
  3391  038D                     	;# 
  3392  038E                     	;# 
  3393  0390                     	;# 
  3394  0391                     	;# 
  3395  0392                     	;# 
  3396  040C                     	;# 
  3397  040D                     	;# 
  3398  040E                     	;# 
  3399  040F                     	;# 
  3400  0410                     	;# 
  3401  0411                     	;# 
  3402  0416                     	;# 
  3403  0416                     	;# 
  3404  0417                     	;# 
  3405  0418                     	;# 
  3406  0418                     	;# 
  3407  0419                     	;# 
  3408  041A                     	;# 
  3409  041A                     	;# 
  3410  041B                     	;# 
  3411  041C                     	;# 
  3412  041C                     	;# 
  3413  041D                     	;# 
  3414  041E                     	;# 
  3415  041F                     	;# 
  3416  048C                     	;# 
  3417  048C                     	;# 
  3418  048D                     	;# 
  3419  048E                     	;# 
  3420  048F                     	;# 
  3421  048F                     	;# 
  3422  0490                     	;# 
  3423  0491                     	;# 
  3424  0492                     	;# 
  3425  0492                     	;# 
  3426  0493                     	;# 
  3427  0494                     	;# 
  3428  0495                     	;# 
  3429  0495                     	;# 
  3430  0496                     	;# 
  3431  0497                     	;# 
  3432  0498                     	;# 
  3433  0499                     	;# 
  3434  049A                     	;# 
  3435  049B                     	;# 
  3436  049C                     	;# 
  3437  049D                     	;# 
  3438  050C                     	;# 
  3439  050C                     	;# 
  3440  050D                     	;# 
  3441  050E                     	;# 
  3442  050F                     	;# 
  3443  050F                     	;# 
  3444  0510                     	;# 
  3445  0511                     	;# 
  3446  0512                     	;# 
  3447  0512                     	;# 
  3448  0513                     	;# 
  3449  0514                     	;# 
  3450  0515                     	;# 
  3451  0515                     	;# 
  3452  0516                     	;# 
  3453  0517                     	;# 
  3454  0518                     	;# 
  3455  0519                     	;# 
  3456  051A                     	;# 
  3457  051B                     	;# 
  3458  051C                     	;# 
  3459  051D                     	;# 
  3460  058C                     	;# 
  3461  058C                     	;# 
  3462  058D                     	;# 
  3463  058E                     	;# 
  3464  058F                     	;# 
  3465  058F                     	;# 
  3466  0590                     	;# 
  3467  0591                     	;# 
  3468  0592                     	;# 
  3469  0593                     	;# 
  3470  060C                     	;# 
  3471  060D                     	;# 
  3472  060E                     	;# 
  3473  060F                     	;# 
  3474  0610                     	;# 
  3475  0611                     	;# 
  3476  0612                     	;# 
  3477  0613                     	;# 
  3478  0614                     	;# 
  3479  0616                     	;# 
  3480  0617                     	;# 
  3481  0618                     	;# 
  3482  0619                     	;# 
  3483  061A                     	;# 
  3484  061B                     	;# 
  3485  061C                     	;# 
  3486  061D                     	;# 
  3487  061E                     	;# 
  3488  068C                     	;# 
  3489  068D                     	;# 
  3490  068E                     	;# 
  3491  068F                     	;# 
  3492  0690                     	;# 
  3493  0691                     	;# 
  3494  0692                     	;# 
  3495  0693                     	;# 
  3496  0694                     	;# 
  3497  070C                     	;# 
  3498  070D                     	;# 
  3499  070E                     	;# 
  3500  070F                     	;# 
  3501  0710                     	;# 
  3502  0711                     	;# 
  3503  0712                     	;# 
  3504  0713                     	;# 
  3505  0714                     	;# 
  3506  0716                     	;# 
  3507  0717                     	;# 
  3508  0718                     	;# 
  3509  0719                     	;# 
  3510  071A                     	;# 
  3511  071B                     	;# 
  3512  071C                     	;# 
  3513  071D                     	;# 
  3514  071E                     	;# 
  3515  0796                     	;# 
  3516  0797                     	;# 
  3517  0798                     	;# 
  3518  0799                     	;# 
  3519  079A                     	;# 
  3520  079B                     	;# 
  3521  080C                     	;# 
  3522  080D                     	;# 
  3523  080E                     	;# 
  3524  080F                     	;# 
  3525  0810                     	;# 
  3526  0811                     	;# 
  3527  0812                     	;# 
  3528  0813                     	;# 
  3529  0814                     	;# 
  3530  081A                     	;# 
  3531  081B                     	;# 
  3532  081C                     	;# 
  3533  081D                     	;# 
  3534  081E                     	;# 
  3535  081F                     	;# 
  3536  088C                     	;# 
  3537  088D                     	;# 
  3538  088E                     	;# 
  3539  088F                     	;# 
  3540  0890                     	;# 
  3541  0891                     	;# 
  3542  0892                     	;# 
  3543  0893                     	;# 
  3544  0895                     	;# 
  3545  0896                     	;# 
  3546  0897                     	;# 
  3547  0898                     	;# 
  3548  0899                     	;# 
  3549  089A                     	;# 
  3550  089B                     	;# 
  3551  090C                     	;# 
  3552  090E                     	;# 
  3553  090F                     	;# 
  3554  091F                     	;# 
  3555  091F                     	;# 
  3556  098F                     	;# 
  3557  098F                     	;# 
  3558  0990                     	;# 
  3559  0991                     	;# 
  3560  0992                     	;# 
  3561  0993                     	;# 
  3562  0994                     	;# 
  3563  0995                     	;# 
  3564  0996                     	;# 
  3565  0997                     	;# 
  3566  0E0F                     	;# 
  3567  0E10                     	;# 
  3568  0E11                     	;# 
  3569  0E12                     	;# 
  3570  0E13                     	;# 
  3571  0E14                     	;# 
  3572  0E15                     	;# 
  3573  0E16                     	;# 
  3574  0E17                     	;# 
  3575  0E18                     	;# 
  3576  0E19                     	;# 
  3577  0E1A                     	;# 
  3578  0E1B                     	;# 
  3579  0E1C                     	;# 
  3580  0E1D                     	;# 
  3581  0E1E                     	;# 
  3582  0E1F                     	;# 
  3583  0E20                     	;# 
  3584  0E21                     	;# 
  3585  0E22                     	;# 
  3586  0E23                     	;# 
  3587  0E24                     	;# 
  3588  0E25                     	;# 
  3589  0E26                     	;# 
  3590  0E27                     	;# 
  3591  0E28                     	;# 
  3592  0E29                     	;# 
  3593  0E2A                     	;# 
  3594  0E2B                     	;# 
  3595  0E2C                     	;# 
  3596  0E2D                     	;# 
  3597  0E2E                     	;# 
  3598  0E2F                     	;# 
  3599  0E30                     	;# 
  3600  0E31                     	;# 
  3601  0E32                     	;# 
  3602  0E33                     	;# 
  3603  0E34                     	;# 
  3604  0E35                     	;# 
  3605  0E36                     	;# 
  3606  0E37                     	;# 
  3607  0E8F                     	;# 
  3608  0E90                     	;# 
  3609  0E91                     	;# 
  3610  0E92                     	;# 
  3611  0E93                     	;# 
  3612  0E94                     	;# 
  3613  0E95                     	;# 
  3614  0E96                     	;# 
  3615  0E97                     	;# 
  3616  0E9C                     	;# 
  3617  0E9D                     	;# 
  3618  0E9E                     	;# 
  3619  0EA1                     	;# 
  3620  0EA2                     	;# 
  3621  0EA3                     	;# 
  3622  0EA4                     	;# 
  3623  0EA5                     	;# 
  3624  0EA9                     	;# 
  3625  0EAA                     	;# 
  3626  0EAB                     	;# 
  3627  0EAC                     	;# 
  3628  0EB1                     	;# 
  3629  0EB2                     	;# 
  3630  0EB3                     	;# 
  3631  0EB8                     	;# 
  3632  0EB9                     	;# 
  3633  0EBA                     	;# 
  3634  0EBB                     	;# 
  3635  0EBC                     	;# 
  3636  0EBD                     	;# 
  3637  0EBE                     	;# 
  3638  0EC3                     	;# 
  3639  0EC5                     	;# 
  3640  0EC6                     	;# 
  3641  0EC7                     	;# 
  3642  0EC8                     	;# 
  3643  0EC9                     	;# 
  3644  0ECA                     	;# 
  3645  0ECB                     	;# 
  3646  0ECC                     	;# 
  3647  0F10                     	;# 
  3648  0F11                     	;# 
  3649  0F12                     	;# 
  3650  0F13                     	;# 
  3651  0F14                     	;# 
  3652  0F15                     	;# 
  3653  0F16                     	;# 
  3654  0F17                     	;# 
  3655  0F18                     	;# 
  3656  0F19                     	;# 
  3657  0F1A                     	;# 
  3658  0F1B                     	;# 
  3659  0F1C                     	;# 
  3660  0F1D                     	;# 
  3661  0F1E                     	;# 
  3662  0F1F                     	;# 
  3663  0F20                     	;# 
  3664  0F21                     	;# 
  3665  0F22                     	;# 
  3666  0F23                     	;# 
  3667  0F24                     	;# 
  3668  0F25                     	;# 
  3669  0F26                     	;# 
  3670  0F27                     	;# 
  3671  0F38                     	;# 
  3672  0F39                     	;# 
  3673  0F3A                     	;# 
  3674  0F3B                     	;# 
  3675  0F3C                     	;# 
  3676  0F3D                     	;# 
  3677  0F3E                     	;# 
  3678  0F3F                     	;# 
  3679  0F40                     	;# 
  3680  0F41                     	;# 
  3681  0F43                     	;# 
  3682  0F44                     	;# 
  3683  0F45                     	;# 
  3684  0F46                     	;# 
  3685  0F47                     	;# 
  3686  0F48                     	;# 
  3687  0F49                     	;# 
  3688  0F4A                     	;# 
  3689  0F4B                     	;# 
  3690  0F4C                     	;# 
  3691  0F4E                     	;# 
  3692  0F4F                     	;# 
  3693  0F50                     	;# 
  3694  0F51                     	;# 
  3695  0F52                     	;# 
  3696  0F53                     	;# 
  3697  0F54                     	;# 
  3698  0F55                     	;# 
  3699  0F56                     	;# 
  3700  0F57                     	;# 
  3701  0F65                     	;# 
  3702  0F68                     	;# 
  3703  0F69                     	;# 
  3704  0F6A                     	;# 
  3705  0F6B                     	;# 
  3706  0FE4                     	;# 
  3707  0FE5                     	;# 
  3708  0FE6                     	;# 
  3709  0FE7                     	;# 
  3710  0FE8                     	;# 
  3711  0FE9                     	;# 
  3712  0FEA                     	;# 
  3713  0FEB                     	;# 
  3714  0FED                     	;# 
  3715  0FEE                     	;# 
  3716  0FEF                     	;# 
  3717  0000                     	;# 
  3718  0001                     	;# 
  3719  0002                     	;# 
  3720  0003                     	;# 
  3721  0004                     	;# 
  3722  0005                     	;# 
  3723  0006                     	;# 
  3724  0007                     	;# 
  3725  0008                     	;# 
  3726  0009                     	;# 
  3727  000A                     	;# 
  3728  000B                     	;# 
  3729  000C                     	;# 
  3730  000D                     	;# 
  3731  000E                     	;# 
  3732  0010                     	;# 
  3733  0011                     	;# 
  3734  0012                     	;# 
  3735  0013                     	;# 
  3736  0016                     	;# 
  3737  0017                     	;# 
  3738  0018                     	;# 
  3739  001C                     	;# 
  3740  001C                     	;# 
  3741  001D                     	;# 
  3742  001D                     	;# 
  3743  001E                     	;# 
  3744  001F                     	;# 
  3745  008C                     	;# 
  3746  008C                     	;# 
  3747  008D                     	;# 
  3748  008E                     	;# 
  3749  008E                     	;# 
  3750  008F                     	;# 
  3751  0090                     	;# 
  3752  0090                     	;# 
  3753  0091                     	;# 
  3754  0093                     	;# 
  3755  0094                     	;# 
  3756  0095                     	;# 
  3757  0096                     	;# 
  3758  0097                     	;# 
  3759  0098                     	;# 
  3760  0099                     	;# 
  3761  009A                     	;# 
  3762  009B                     	;# 
  3763  009C                     	;# 
  3764  009D                     	;# 
  3765  009E                     	;# 
  3766  010C                     	;# 
  3767  010D                     	;# 
  3768  010E                     	;# 
  3769  010E                     	;# 
  3770  010F                     	;# 
  3771  0110                     	;# 
  3772  0110                     	;# 
  3773  0111                     	;# 
  3774  0112                     	;# 
  3775  0112                     	;# 
  3776  0113                     	;# 
  3777  0114                     	;# 
  3778  0114                     	;# 
  3779  0115                     	;# 
  3780  0116                     	;# 
  3781  0116                     	;# 
  3782  0117                     	;# 
  3783  0119                     	;# 
  3784  0119                     	;# 
  3785  0119                     	;# 
  3786  011A                     	;# 
  3787  011A                     	;# 
  3788  011A                     	;# 
  3789  011B                     	;# 
  3790  011B                     	;# 
  3791  011B                     	;# 
  3792  011B                     	;# 
  3793  011B                     	;# 
  3794  011C                     	;# 
  3795  011C                     	;# 
  3796  011C                     	;# 
  3797  011D                     	;# 
  3798  011D                     	;# 
  3799  011D                     	;# 
  3800  011E                     	;# 
  3801  011E                     	;# 
  3802  011E                     	;# 
  3803  011F                     	;# 
  3804  011F                     	;# 
  3805  011F                     	;# 
  3806  011F                     	;# 
  3807  011F                     	;# 
  3808  018C                     	;# 
  3809  018D                     	;# 
  3810  018E                     	;# 
  3811  018F                     	;# 
  3812  0190                     	;# 
  3813  0191                     	;# 
  3814  0192                     	;# 
  3815  0196                     	;# 
  3816  0197                     	;# 
  3817  0198                     	;# 
  3818  0199                     	;# 
  3819  019A                     	;# 
  3820  019B                     	;# 
  3821  019C                     	;# 
  3822  020C                     	;# 
  3823  020C                     	;# 
  3824  020D                     	;# 
  3825  020E                     	;# 
  3826  020F                     	;# 
  3827  020F                     	;# 
  3828  0210                     	;# 
  3829  0210                     	;# 
  3830  0211                     	;# 
  3831  0211                     	;# 
  3832  0212                     	;# 
  3833  0212                     	;# 
  3834  0213                     	;# 
  3835  0214                     	;# 
  3836  0215                     	;# 
  3837  0215                     	;# 
  3838  0216                     	;# 
  3839  0216                     	;# 
  3840  0217                     	;# 
  3841  0217                     	;# 
  3842  0218                     	;# 
  3843  0218                     	;# 
  3844  0219                     	;# 
  3845  021A                     	;# 
  3846  021B                     	;# 
  3847  021B                     	;# 
  3848  021C                     	;# 
  3849  021C                     	;# 
  3850  021D                     	;# 
  3851  021D                     	;# 
  3852  021E                     	;# 
  3853  021F                     	;# 
  3854  028C                     	;# 
  3855  028C                     	;# 
  3856  028D                     	;# 
  3857  028D                     	;# 
  3858  028E                     	;# 
  3859  028F                     	;# 
  3860  0290                     	;# 
  3861  0290                     	;# 
  3862  0291                     	;# 
  3863  0292                     	;# 
  3864  0292                     	;# 
  3865  0293                     	;# 
  3866  0293                     	;# 
  3867  0294                     	;# 
  3868  0295                     	;# 
  3869  0296                     	;# 
  3870  0296                     	;# 
  3871  0297                     	;# 
  3872  0298                     	;# 
  3873  0298                     	;# 
  3874  0299                     	;# 
  3875  0299                     	;# 
  3876  029A                     	;# 
  3877  029B                     	;# 
  3878  029C                     	;# 
  3879  029C                     	;# 
  3880  029D                     	;# 
  3881  030C                     	;# 
  3882  030C                     	;# 
  3883  030D                     	;# 
  3884  030E                     	;# 
  3885  030F                     	;# 
  3886  0310                     	;# 
  3887  0310                     	;# 
  3888  0311                     	;# 
  3889  0312                     	;# 
  3890  0313                     	;# 
  3891  0314                     	;# 
  3892  0314                     	;# 
  3893  0315                     	;# 
  3894  0316                     	;# 
  3895  0317                     	;# 
  3896  0318                     	;# 
  3897  0318                     	;# 
  3898  0319                     	;# 
  3899  031A                     	;# 
  3900  031B                     	;# 
  3901  031C                     	;# 
  3902  031C                     	;# 
  3903  031D                     	;# 
  3904  031E                     	;# 
  3905  031F                     	;# 
  3906  038C                     	;# 
  3907  038D                     	;# 
  3908  038E                     	;# 
  3909  0390                     	;# 
  3910  0391                     	;# 
  3911  0392                     	;# 
  3912  040C                     	;# 
  3913  040D                     	;# 
  3914  040E                     	;# 
  3915  040F                     	;# 
  3916  0410                     	;# 
  3917  0411                     	;# 
  3918  0416                     	;# 
  3919  0416                     	;# 
  3920  0417                     	;# 
  3921  0418                     	;# 
  3922  0418                     	;# 
  3923  0419                     	;# 
  3924  041A                     	;# 
  3925  041A                     	;# 
  3926  041B                     	;# 
  3927  041C                     	;# 
  3928  041C                     	;# 
  3929  041D                     	;# 
  3930  041E                     	;# 
  3931  041F                     	;# 
  3932  048C                     	;# 
  3933  048C                     	;# 
  3934  048D                     	;# 
  3935  048E                     	;# 
  3936  048F                     	;# 
  3937  048F                     	;# 
  3938  0490                     	;# 
  3939  0491                     	;# 
  3940  0492                     	;# 
  3941  0492                     	;# 
  3942  0493                     	;# 
  3943  0494                     	;# 
  3944  0495                     	;# 
  3945  0495                     	;# 
  3946  0496                     	;# 
  3947  0497                     	;# 
  3948  0498                     	;# 
  3949  0499                     	;# 
  3950  049A                     	;# 
  3951  049B                     	;# 
  3952  049C                     	;# 
  3953  049D                     	;# 
  3954  050C                     	;# 
  3955  050C                     	;# 
  3956  050D                     	;# 
  3957  050E                     	;# 
  3958  050F                     	;# 
  3959  050F                     	;# 
  3960  0510                     	;# 
  3961  0511                     	;# 
  3962  0512                     	;# 
  3963  0512                     	;# 
  3964  0513                     	;# 
  3965  0514                     	;# 
  3966  0515                     	;# 
  3967  0515                     	;# 
  3968  0516                     	;# 
  3969  0517                     	;# 
  3970  0518                     	;# 
  3971  0519                     	;# 
  3972  051A                     	;# 
  3973  051B                     	;# 
  3974  051C                     	;# 
  3975  051D                     	;# 
  3976  058C                     	;# 
  3977  058C                     	;# 
  3978  058D                     	;# 
  3979  058E                     	;# 
  3980  058F                     	;# 
  3981  058F                     	;# 
  3982  0590                     	;# 
  3983  0591                     	;# 
  3984  0592                     	;# 
  3985  0593                     	;# 
  3986  060C                     	;# 
  3987  060D                     	;# 
  3988  060E                     	;# 
  3989  060F                     	;# 
  3990  0610                     	;# 
  3991  0611                     	;# 
  3992  0612                     	;# 
  3993  0613                     	;# 
  3994  0614                     	;# 
  3995  0616                     	;# 
  3996  0617                     	;# 
  3997  0618                     	;# 
  3998  0619                     	;# 
  3999  061A                     	;# 
  4000  061B                     	;# 
  4001  061C                     	;# 
  4002  061D                     	;# 
  4003  061E                     	;# 
  4004  068C                     	;# 
  4005  068D                     	;# 
  4006  068E                     	;# 
  4007  068F                     	;# 
  4008  0690                     	;# 
  4009  0691                     	;# 
  4010  0692                     	;# 
  4011  0693                     	;# 
  4012  0694                     	;# 
  4013  070C                     	;# 
  4014  070D                     	;# 
  4015  070E                     	;# 
  4016  070F                     	;# 
  4017  0710                     	;# 
  4018  0711                     	;# 
  4019  0712                     	;# 
  4020  0713                     	;# 
  4021  0714                     	;# 
  4022  0716                     	;# 
  4023  0717                     	;# 
  4024  0718                     	;# 
  4025  0719                     	;# 
  4026  071A                     	;# 
  4027  071B                     	;# 
  4028  071C                     	;# 
  4029  071D                     	;# 
  4030  071E                     	;# 
  4031  0796                     	;# 
  4032  0797                     	;# 
  4033  0798                     	;# 
  4034  0799                     	;# 
  4035  079A                     	;# 
  4036  079B                     	;# 
  4037  080C                     	;# 
  4038  080D                     	;# 
  4039  080E                     	;# 
  4040  080F                     	;# 
  4041  0810                     	;# 
  4042  0811                     	;# 
  4043  0812                     	;# 
  4044  0813                     	;# 
  4045  0814                     	;# 
  4046  081A                     	;# 
  4047  081B                     	;# 
  4048  081C                     	;# 
  4049  081D                     	;# 
  4050  081E                     	;# 
  4051  081F                     	;# 
  4052  088C                     	;# 
  4053  088D                     	;# 
  4054  088E                     	;# 
  4055  088F                     	;# 
  4056  0890                     	;# 
  4057  0891                     	;# 
  4058  0892                     	;# 
  4059  0893                     	;# 
  4060  0895                     	;# 
  4061  0896                     	;# 
  4062  0897                     	;# 
  4063  0898                     	;# 
  4064  0899                     	;# 
  4065  089A                     	;# 
  4066  089B                     	;# 
  4067  090C                     	;# 
  4068  090E                     	;# 
  4069  090F                     	;# 
  4070  091F                     	;# 
  4071  091F                     	;# 
  4072  098F                     	;# 
  4073  098F                     	;# 
  4074  0990                     	;# 
  4075  0991                     	;# 
  4076  0992                     	;# 
  4077  0993                     	;# 
  4078  0994                     	;# 
  4079  0995                     	;# 
  4080  0996                     	;# 
  4081  0997                     	;# 
  4082  0E0F                     	;# 
  4083  0E10                     	;# 
  4084  0E11                     	;# 
  4085  0E12                     	;# 
  4086  0E13                     	;# 
  4087  0E14                     	;# 
  4088  0E15                     	;# 
  4089  0E16                     	;# 
  4090  0E17                     	;# 
  4091  0E18                     	;# 
  4092  0E19                     	;# 
  4093  0E1A                     	;# 
  4094  0E1B                     	;# 
  4095  0E1C                     	;# 
  4096  0E1D                     	;# 
  4097  0E1E                     	;# 
  4098  0E1F                     	;# 
  4099  0E20                     	;# 
  4100  0E21                     	;# 
  4101  0E22                     	;# 
  4102  0E23                     	;# 
  4103  0E24                     	;# 
  4104  0E25                     	;# 
  4105  0E26                     	;# 
  4106  0E27                     	;# 
  4107  0E28                     	;# 
  4108  0E29                     	;# 
  4109  0E2A                     	;# 
  4110  0E2B                     	;# 
  4111  0E2C                     	;# 
  4112  0E2D                     	;# 
  4113  0E2E                     	;# 
  4114  0E2F                     	;# 
  4115  0E30                     	;# 
  4116  0E31                     	;# 
  4117  0E32                     	;# 
  4118  0E33                     	;# 
  4119  0E34                     	;# 
  4120  0E35                     	;# 
  4121  0E36                     	;# 
  4122  0E37                     	;# 
  4123  0E8F                     	;# 
  4124  0E90                     	;# 
  4125  0E91                     	;# 
  4126  0E92                     	;# 
  4127  0E93                     	;# 
  4128  0E94                     	;# 
  4129  0E95                     	;# 
  4130  0E96                     	;# 
  4131  0E97                     	;# 
  4132  0E9C                     	;# 
  4133  0E9D                     	;# 
  4134  0E9E                     	;# 
  4135  0EA1                     	;# 
  4136  0EA2                     	;# 
  4137  0EA3                     	;# 
  4138  0EA4                     	;# 
  4139  0EA5                     	;# 
  4140  0EA9                     	;# 
  4141  0EAA                     	;# 
  4142  0EAB                     	;# 
  4143  0EAC                     	;# 
  4144  0EB1                     	;# 
  4145  0EB2                     	;# 
  4146  0EB3                     	;# 
  4147  0EB8                     	;# 
  4148  0EB9                     	;# 
  4149  0EBA                     	;# 
  4150  0EBB                     	;# 
  4151  0EBC                     	;# 
  4152  0EBD                     	;# 
  4153  0EBE                     	;# 
  4154  0EC3                     	;# 
  4155  0EC5                     	;# 
  4156  0EC6                     	;# 
  4157  0EC7                     	;# 
  4158  0EC8                     	;# 
  4159  0EC9                     	;# 
  4160  0ECA                     	;# 
  4161  0ECB                     	;# 
  4162  0ECC                     	;# 
  4163  0F10                     	;# 
  4164  0F11                     	;# 
  4165  0F12                     	;# 
  4166  0F13                     	;# 
  4167  0F14                     	;# 
  4168  0F15                     	;# 
  4169  0F16                     	;# 
  4170  0F17                     	;# 
  4171  0F18                     	;# 
  4172  0F19                     	;# 
  4173  0F1A                     	;# 
  4174  0F1B                     	;# 
  4175  0F1C                     	;# 
  4176  0F1D                     	;# 
  4177  0F1E                     	;# 
  4178  0F1F                     	;# 
  4179  0F20                     	;# 
  4180  0F21                     	;# 
  4181  0F22                     	;# 
  4182  0F23                     	;# 
  4183  0F24                     	;# 
  4184  0F25                     	;# 
  4185  0F26                     	;# 
  4186  0F27                     	;# 
  4187  0F38                     	;# 
  4188  0F39                     	;# 
  4189  0F3A                     	;# 
  4190  0F3B                     	;# 
  4191  0F3C                     	;# 
  4192  0F3D                     	;# 
  4193  0F3E                     	;# 
  4194  0F3F                     	;# 
  4195  0F40                     	;# 
  4196  0F41                     	;# 
  4197  0F43                     	;# 
  4198  0F44                     	;# 
  4199  0F45                     	;# 
  4200  0F46                     	;# 
  4201  0F47                     	;# 
  4202  0F48                     	;# 
  4203  0F49                     	;# 
  4204  0F4A                     	;# 
  4205  0F4B                     	;# 
  4206  0F4C                     	;# 
  4207  0F4E                     	;# 
  4208  0F4F                     	;# 
  4209  0F50                     	;# 
  4210  0F51                     	;# 
  4211  0F52                     	;# 
  4212  0F53                     	;# 
  4213  0F54                     	;# 
  4214  0F55                     	;# 
  4215  0F56                     	;# 
  4216  0F57                     	;# 
  4217  0F65                     	;# 
  4218  0F68                     	;# 
  4219  0F69                     	;# 
  4220  0F6A                     	;# 
  4221  0F6B                     	;# 
  4222  0FE4                     	;# 
  4223  0FE5                     	;# 
  4224  0FE6                     	;# 
  4225  0FE7                     	;# 
  4226  0FE8                     	;# 
  4227  0FE9                     	;# 
  4228  0FEA                     	;# 
  4229  0FEB                     	;# 
  4230  0FED                     	;# 
  4231  0FEE                     	;# 
  4232  0FEF                     	;# 
  4233  0000                     	;# 
  4234  0001                     	;# 
  4235  0002                     	;# 
  4236  0003                     	;# 
  4237  0004                     	;# 
  4238  0005                     	;# 
  4239  0006                     	;# 
  4240  0007                     	;# 
  4241  0008                     	;# 
  4242  0009                     	;# 
  4243  000A                     	;# 
  4244  000B                     	;# 
  4245  000C                     	;# 
  4246  000D                     	;# 
  4247  000E                     	;# 
  4248  0010                     	;# 
  4249  0011                     	;# 
  4250  0012                     	;# 
  4251  0013                     	;# 
  4252  0016                     	;# 
  4253  0017                     	;# 
  4254  0018                     	;# 
  4255  001C                     	;# 
  4256  001C                     	;# 
  4257  001D                     	;# 
  4258  001D                     	;# 
  4259  001E                     	;# 
  4260  001F                     	;# 
  4261  008C                     	;# 
  4262  008C                     	;# 
  4263  008D                     	;# 
  4264  008E                     	;# 
  4265  008E                     	;# 
  4266  008F                     	;# 
  4267  0090                     	;# 
  4268  0090                     	;# 
  4269  0091                     	;# 
  4270  0093                     	;# 
  4271  0094                     	;# 
  4272  0095                     	;# 
  4273  0096                     	;# 
  4274  0097                     	;# 
  4275  0098                     	;# 
  4276  0099                     	;# 
  4277  009A                     	;# 
  4278  009B                     	;# 
  4279  009C                     	;# 
  4280  009D                     	;# 
  4281  009E                     	;# 
  4282  010C                     	;# 
  4283  010D                     	;# 
  4284  010E                     	;# 
  4285  010E                     	;# 
  4286  010F                     	;# 
  4287  0110                     	;# 
  4288  0110                     	;# 
  4289  0111                     	;# 
  4290  0112                     	;# 
  4291  0112                     	;# 
  4292  0113                     	;# 
  4293  0114                     	;# 
  4294  0114                     	;# 
  4295  0115                     	;# 
  4296  0116                     	;# 
  4297  0116                     	;# 
  4298  0117                     	;# 
  4299  0119                     	;# 
  4300  0119                     	;# 
  4301  0119                     	;# 
  4302  011A                     	;# 
  4303  011A                     	;# 
  4304  011A                     	;# 
  4305  011B                     	;# 
  4306  011B                     	;# 
  4307  011B                     	;# 
  4308  011B                     	;# 
  4309  011B                     	;# 
  4310  011C                     	;# 
  4311  011C                     	;# 
  4312  011C                     	;# 
  4313  011D                     	;# 
  4314  011D                     	;# 
  4315  011D                     	;# 
  4316  011E                     	;# 
  4317  011E                     	;# 
  4318  011E                     	;# 
  4319  011F                     	;# 
  4320  011F                     	;# 
  4321  011F                     	;# 
  4322  011F                     	;# 
  4323  011F                     	;# 
  4324  018C                     	;# 
  4325  018D                     	;# 
  4326  018E                     	;# 
  4327  018F                     	;# 
  4328  0190                     	;# 
  4329  0191                     	;# 
  4330  0192                     	;# 
  4331  0196                     	;# 
  4332  0197                     	;# 
  4333  0198                     	;# 
  4334  0199                     	;# 
  4335  019A                     	;# 
  4336  019B                     	;# 
  4337  019C                     	;# 
  4338  020C                     	;# 
  4339  020C                     	;# 
  4340  020D                     	;# 
  4341  020E                     	;# 
  4342  020F                     	;# 
  4343  020F                     	;# 
  4344  0210                     	;# 
  4345  0210                     	;# 
  4346  0211                     	;# 
  4347  0211                     	;# 
  4348  0212                     	;# 
  4349  0212                     	;# 
  4350  0213                     	;# 
  4351  0214                     	;# 
  4352  0215                     	;# 
  4353  0215                     	;# 
  4354  0216                     	;# 
  4355  0216                     	;# 
  4356  0217                     	;# 
  4357  0217                     	;# 
  4358  0218                     	;# 
  4359  0218                     	;# 
  4360  0219                     	;# 
  4361  021A                     	;# 
  4362  021B                     	;# 
  4363  021B                     	;# 
  4364  021C                     	;# 
  4365  021C                     	;# 
  4366  021D                     	;# 
  4367  021D                     	;# 
  4368  021E                     	;# 
  4369  021F                     	;# 
  4370  028C                     	;# 
  4371  028C                     	;# 
  4372  028D                     	;# 
  4373  028D                     	;# 
  4374  028E                     	;# 
  4375  028F                     	;# 
  4376  0290                     	;# 
  4377  0290                     	;# 
  4378  0291                     	;# 
  4379  0292                     	;# 
  4380  0292                     	;# 
  4381  0293                     	;# 
  4382  0293                     	;# 
  4383  0294                     	;# 
  4384  0295                     	;# 
  4385  0296                     	;# 
  4386  0296                     	;# 
  4387  0297                     	;# 
  4388  0298                     	;# 
  4389  0298                     	;# 
  4390  0299                     	;# 
  4391  0299                     	;# 
  4392  029A                     	;# 
  4393  029B                     	;# 
  4394  029C                     	;# 
  4395  029C                     	;# 
  4396  029D                     	;# 
  4397  030C                     	;# 
  4398  030C                     	;# 
  4399  030D                     	;# 
  4400  030E                     	;# 
  4401  030F                     	;# 
  4402  0310                     	;# 
  4403  0310                     	;# 
  4404  0311                     	;# 
  4405  0312                     	;# 
  4406  0313                     	;# 
  4407  0314                     	;# 
  4408  0314                     	;# 
  4409  0315                     	;# 
  4410  0316                     	;# 
  4411  0317                     	;# 
  4412  0318                     	;# 
  4413  0318                     	;# 
  4414  0319                     	;# 
  4415  031A                     	;# 
  4416  031B                     	;# 
  4417  031C                     	;# 
  4418  031C                     	;# 
  4419  031D                     	;# 
  4420  031E                     	;# 
  4421  031F                     	;# 
  4422  038C                     	;# 
  4423  038D                     	;# 
  4424  038E                     	;# 
  4425  0390                     	;# 
  4426  0391                     	;# 
  4427  0392                     	;# 
  4428  040C                     	;# 
  4429  040D                     	;# 
  4430  040E                     	;# 
  4431  040F                     	;# 
  4432  0410                     	;# 
  4433  0411                     	;# 
  4434  0416                     	;# 
  4435  0416                     	;# 
  4436  0417                     	;# 
  4437  0418                     	;# 
  4438  0418                     	;# 
  4439  0419                     	;# 
  4440  041A                     	;# 
  4441  041A                     	;# 
  4442  041B                     	;# 
  4443  041C                     	;# 
  4444  041C                     	;# 
  4445  041D                     	;# 
  4446  041E                     	;# 
  4447  041F                     	;# 
  4448  048C                     	;# 
  4449  048C                     	;# 
  4450  048D                     	;# 
  4451  048E                     	;# 
  4452  048F                     	;# 
  4453  048F                     	;# 
  4454  0490                     	;# 
  4455  0491                     	;# 
  4456  0492                     	;# 
  4457  0492                     	;# 
  4458  0493                     	;# 
  4459  0494                     	;# 
  4460  0495                     	;# 
  4461  0495                     	;# 
  4462  0496                     	;# 
  4463  0497                     	;# 
  4464  0498                     	;# 
  4465  0499                     	;# 
  4466  049A                     	;# 
  4467  049B                     	;# 
  4468  049C                     	;# 
  4469  049D                     	;# 
  4470  050C                     	;# 
  4471  050C                     	;# 
  4472  050D                     	;# 
  4473  050E                     	;# 
  4474  050F                     	;# 
  4475  050F                     	;# 
  4476  0510                     	;# 
  4477  0511                     	;# 
  4478  0512                     	;# 
  4479  0512                     	;# 
  4480  0513                     	;# 
  4481  0514                     	;# 
  4482  0515                     	;# 
  4483  0515                     	;# 
  4484  0516                     	;# 
  4485  0517                     	;# 
  4486  0518                     	;# 
  4487  0519                     	;# 
  4488  051A                     	;# 
  4489  051B                     	;# 
  4490  051C                     	;# 
  4491  051D                     	;# 
  4492  058C                     	;# 
  4493  058C                     	;# 
  4494  058D                     	;# 
  4495  058E                     	;# 
  4496  058F                     	;# 
  4497  058F                     	;# 
  4498  0590                     	;# 
  4499  0591                     	;# 
  4500  0592                     	;# 
  4501  0593                     	;# 
  4502  060C                     	;# 
  4503  060D                     	;# 
  4504  060E                     	;# 
  4505  060F                     	;# 
  4506  0610                     	;# 
  4507  0611                     	;# 
  4508  0612                     	;# 
  4509  0613                     	;# 
  4510  0614                     	;# 
  4511  0616                     	;# 
  4512  0617                     	;# 
  4513  0618                     	;# 
  4514  0619                     	;# 
  4515  061A                     	;# 
  4516  061B                     	;# 
  4517  061C                     	;# 
  4518  061D                     	;# 
  4519  061E                     	;# 
  4520  068C                     	;# 
  4521  068D                     	;# 
  4522  068E                     	;# 
  4523  068F                     	;# 
  4524  0690                     	;# 
  4525  0691                     	;# 
  4526  0692                     	;# 
  4527  0693                     	;# 
  4528  0694                     	;# 
  4529  070C                     	;# 
  4530  070D                     	;# 
  4531  070E                     	;# 
  4532  070F                     	;# 
  4533  0710                     	;# 
  4534  0711                     	;# 
  4535  0712                     	;# 
  4536  0713                     	;# 
  4537  0714                     	;# 
  4538  0716                     	;# 
  4539  0717                     	;# 
  4540  0718                     	;# 
  4541  0719                     	;# 
  4542  071A                     	;# 
  4543  071B                     	;# 
  4544  071C                     	;# 
  4545  071D                     	;# 
  4546  071E                     	;# 
  4547  0796                     	;# 
  4548  0797                     	;# 
  4549  0798                     	;# 
  4550  0799                     	;# 
  4551  079A                     	;# 
  4552  079B                     	;# 
  4553  080C                     	;# 
  4554  080D                     	;# 
  4555  080E                     	;# 
  4556  080F                     	;# 
  4557  0810                     	;# 
  4558  0811                     	;# 
  4559  0812                     	;# 
  4560  0813                     	;# 
  4561  0814                     	;# 
  4562  081A                     	;# 
  4563  081B                     	;# 
  4564  081C                     	;# 
  4565  081D                     	;# 
  4566  081E                     	;# 
  4567  081F                     	;# 
  4568  088C                     	;# 
  4569  088D                     	;# 
  4570  088E                     	;# 
  4571  088F                     	;# 
  4572  0890                     	;# 
  4573  0891                     	;# 
  4574  0892                     	;# 
  4575  0893                     	;# 
  4576  0895                     	;# 
  4577  0896                     	;# 
  4578  0897                     	;# 
  4579  0898                     	;# 
  4580  0899                     	;# 
  4581  089A                     	;# 
  4582  089B                     	;# 
  4583  090C                     	;# 
  4584  090E                     	;# 
  4585  090F                     	;# 
  4586  091F                     	;# 
  4587  091F                     	;# 
  4588  098F                     	;# 
  4589  098F                     	;# 
  4590  0990                     	;# 
  4591  0991                     	;# 
  4592  0992                     	;# 
  4593  0993                     	;# 
  4594  0994                     	;# 
  4595  0995                     	;# 
  4596  0996                     	;# 
  4597  0997                     	;# 
  4598  0E0F                     	;# 
  4599  0E10                     	;# 
  4600  0E11                     	;# 
  4601  0E12                     	;# 
  4602  0E13                     	;# 
  4603  0E14                     	;# 
  4604  0E15                     	;# 
  4605  0E16                     	;# 
  4606  0E17                     	;# 
  4607  0E18                     	;# 
  4608  0E19                     	;# 
  4609  0E1A                     	;# 
  4610  0E1B                     	;# 
  4611  0E1C                     	;# 
  4612  0E1D                     	;# 
  4613  0E1E                     	;# 
  4614  0E1F                     	;# 
  4615  0E20                     	;# 
  4616  0E21                     	;# 
  4617  0E22                     	;# 
  4618  0E23                     	;# 
  4619  0E24                     	;# 
  4620  0E25                     	;# 
  4621  0E26                     	;# 
  4622  0E27                     	;# 
  4623  0E28                     	;# 
  4624  0E29                     	;# 
  4625  0E2A                     	;# 
  4626  0E2B                     	;# 
  4627  0E2C                     	;# 
  4628  0E2D                     	;# 
  4629  0E2E                     	;# 
  4630  0E2F                     	;# 
  4631  0E30                     	;# 
  4632  0E31                     	;# 
  4633  0E32                     	;# 
  4634  0E33                     	;# 
  4635  0E34                     	;# 
  4636  0E35                     	;# 
  4637  0E36                     	;# 
  4638  0E37                     	;# 
  4639  0E8F                     	;# 
  4640  0E90                     	;# 
  4641  0E91                     	;# 
  4642  0E92                     	;# 
  4643  0E93                     	;# 
  4644  0E94                     	;# 
  4645  0E95                     	;# 
  4646  0E96                     	;# 
  4647  0E97                     	;# 
  4648  0E9C                     	;# 
  4649  0E9D                     	;# 
  4650  0E9E                     	;# 
  4651  0EA1                     	;# 
  4652  0EA2                     	;# 
  4653  0EA3                     	;# 
  4654  0EA4                     	;# 
  4655  0EA5                     	;# 
  4656  0EA9                     	;# 
  4657  0EAA                     	;# 
  4658  0EAB                     	;# 
  4659  0EAC                     	;# 
  4660  0EB1                     	;# 
  4661  0EB2                     	;# 
  4662  0EB3                     	;# 
  4663  0EB8                     	;# 
  4664  0EB9                     	;# 
  4665  0EBA                     	;# 
  4666  0EBB                     	;# 
  4667  0EBC                     	;# 
  4668  0EBD                     	;# 
  4669  0EBE                     	;# 
  4670  0EC3                     	;# 
  4671  0EC5                     	;# 
  4672  0EC6                     	;# 
  4673  0EC7                     	;# 
  4674  0EC8                     	;# 
  4675  0EC9                     	;# 
  4676  0ECA                     	;# 
  4677  0ECB                     	;# 
  4678  0ECC                     	;# 
  4679  0F10                     	;# 
  4680  0F11                     	;# 
  4681  0F12                     	;# 
  4682  0F13                     	;# 
  4683  0F14                     	;# 
  4684  0F15                     	;# 
  4685  0F16                     	;# 
  4686  0F17                     	;# 
  4687  0F18                     	;# 
  4688  0F19                     	;# 
  4689  0F1A                     	;# 
  4690  0F1B                     	;# 
  4691  0F1C                     	;# 
  4692  0F1D                     	;# 
  4693  0F1E                     	;# 
  4694  0F1F                     	;# 
  4695  0F20                     	;# 
  4696  0F21                     	;# 
  4697  0F22                     	;# 
  4698  0F23                     	;# 
  4699  0F24                     	;# 
  4700  0F25                     	;# 
  4701  0F26                     	;# 
  4702  0F27                     	;# 
  4703  0F38                     	;# 
  4704  0F39                     	;# 
  4705  0F3A                     	;# 
  4706  0F3B                     	;# 
  4707  0F3C                     	;# 
  4708  0F3D                     	;# 
  4709  0F3E                     	;# 
  4710  0F3F                     	;# 
  4711  0F40                     	;# 
  4712  0F41                     	;# 
  4713  0F43                     	;# 
  4714  0F44                     	;# 
  4715  0F45                     	;# 
  4716  0F46                     	;# 
  4717  0F47                     	;# 
  4718  0F48                     	;# 
  4719  0F49                     	;# 
  4720  0F4A                     	;# 
  4721  0F4B                     	;# 
  4722  0F4C                     	;# 
  4723  0F4E                     	;# 
  4724  0F4F                     	;# 
  4725  0F50                     	;# 
  4726  0F51                     	;# 
  4727  0F52                     	;# 
  4728  0F53                     	;# 
  4729  0F54                     	;# 
  4730  0F55                     	;# 
  4731  0F56                     	;# 
  4732  0F57                     	;# 
  4733  0F65                     	;# 
  4734  0F68                     	;# 
  4735  0F69                     	;# 
  4736  0F6A                     	;# 
  4737  0F6B                     	;# 
  4738  0FE4                     	;# 
  4739  0FE5                     	;# 
  4740  0FE6                     	;# 
  4741  0FE7                     	;# 
  4742  0FE8                     	;# 
  4743  0FE9                     	;# 
  4744  0FEA                     	;# 
  4745  0FEB                     	;# 
  4746  0FED                     	;# 
  4747  0FEE                     	;# 
  4748  0FEF                     	;# 
  4749  0000                     	;# 
  4750  0001                     	;# 
  4751  0002                     	;# 
  4752  0003                     	;# 
  4753  0004                     	;# 
  4754  0005                     	;# 
  4755  0006                     	;# 
  4756  0007                     	;# 
  4757  0008                     	;# 
  4758  0009                     	;# 
  4759  000A                     	;# 
  4760  000B                     	;# 
  4761  000C                     	;# 
  4762  000D                     	;# 
  4763  000E                     	;# 
  4764  0010                     	;# 
  4765  0011                     	;# 
  4766  0012                     	;# 
  4767  0013                     	;# 
  4768  0016                     	;# 
  4769  0017                     	;# 
  4770  0018                     	;# 
  4771  001C                     	;# 
  4772  001C                     	;# 
  4773  001D                     	;# 
  4774  001D                     	;# 
  4775  001E                     	;# 
  4776  001F                     	;# 
  4777  008C                     	;# 
  4778  008C                     	;# 
  4779  008D                     	;# 
  4780  008E                     	;# 
  4781  008E                     	;# 
  4782  008F                     	;# 
  4783  0090                     	;# 
  4784  0090                     	;# 
  4785  0091                     	;# 
  4786  0093                     	;# 
  4787  0094                     	;# 
  4788  0095                     	;# 
  4789  0096                     	;# 
  4790  0097                     	;# 
  4791  0098                     	;# 
  4792  0099                     	;# 
  4793  009A                     	;# 
  4794  009B                     	;# 
  4795  009C                     	;# 
  4796  009D                     	;# 
  4797  009E                     	;# 
  4798  010C                     	;# 
  4799  010D                     	;# 
  4800  010E                     	;# 
  4801  010E                     	;# 
  4802  010F                     	;# 
  4803  0110                     	;# 
  4804  0110                     	;# 
  4805  0111                     	;# 
  4806  0112                     	;# 
  4807  0112                     	;# 
  4808  0113                     	;# 
  4809  0114                     	;# 
  4810  0114                     	;# 
  4811  0115                     	;# 
  4812  0116                     	;# 
  4813  0116                     	;# 
  4814  0117                     	;# 
  4815  0119                     	;# 
  4816  0119                     	;# 
  4817  0119                     	;# 
  4818  011A                     	;# 
  4819  011A                     	;# 
  4820  011A                     	;# 
  4821  011B                     	;# 
  4822  011B                     	;# 
  4823  011B                     	;# 
  4824  011B                     	;# 
  4825  011B                     	;# 
  4826  011C                     	;# 
  4827  011C                     	;# 
  4828  011C                     	;# 
  4829  011D                     	;# 
  4830  011D                     	;# 
  4831  011D                     	;# 
  4832  011E                     	;# 
  4833  011E                     	;# 
  4834  011E                     	;# 
  4835  011F                     	;# 
  4836  011F                     	;# 
  4837  011F                     	;# 
  4838  011F                     	;# 
  4839  011F                     	;# 
  4840  018C                     	;# 
  4841  018D                     	;# 
  4842  018E                     	;# 
  4843  018F                     	;# 
  4844  0190                     	;# 
  4845  0191                     	;# 
  4846  0192                     	;# 
  4847  0196                     	;# 
  4848  0197                     	;# 
  4849  0198                     	;# 
  4850  0199                     	;# 
  4851  019A                     	;# 
  4852  019B                     	;# 
  4853  019C                     	;# 
  4854  020C                     	;# 
  4855  020C                     	;# 
  4856  020D                     	;# 
  4857  020E                     	;# 
  4858  020F                     	;# 
  4859  020F                     	;# 
  4860  0210                     	;# 
  4861  0210                     	;# 
  4862  0211                     	;# 
  4863  0211                     	;# 
  4864  0212                     	;# 
  4865  0212                     	;# 
  4866  0213                     	;# 
  4867  0214                     	;# 
  4868  0215                     	;# 
  4869  0215                     	;# 
  4870  0216                     	;# 
  4871  0216                     	;# 
  4872  0217                     	;# 
  4873  0217                     	;# 
  4874  0218                     	;# 
  4875  0218                     	;# 
  4876  0219                     	;# 
  4877  021A                     	;# 
  4878  021B                     	;# 
  4879  021B                     	;# 
  4880  021C                     	;# 
  4881  021C                     	;# 
  4882  021D                     	;# 
  4883  021D                     	;# 
  4884  021E                     	;# 
  4885  021F                     	;# 
  4886  028C                     	;# 
  4887  028C                     	;# 
  4888  028D                     	;# 
  4889  028D                     	;# 
  4890  028E                     	;# 
  4891  028F                     	;# 
  4892  0290                     	;# 
  4893  0290                     	;# 
  4894  0291                     	;# 
  4895  0292                     	;# 
  4896  0292                     	;# 
  4897  0293                     	;# 
  4898  0293                     	;# 
  4899  0294                     	;# 
  4900  0295                     	;# 
  4901  0296                     	;# 
  4902  0296                     	;# 
  4903  0297                     	;# 
  4904  0298                     	;# 
  4905  0298                     	;# 
  4906  0299                     	;# 
  4907  0299                     	;# 
  4908  029A                     	;# 
  4909  029B                     	;# 
  4910  029C                     	;# 
  4911  029C                     	;# 
  4912  029D                     	;# 
  4913  030C                     	;# 
  4914  030C                     	;# 
  4915  030D                     	;# 
  4916  030E                     	;# 
  4917  030F                     	;# 
  4918  0310                     	;# 
  4919  0310                     	;# 
  4920  0311                     	;# 
  4921  0312                     	;# 
  4922  0313                     	;# 
  4923  0314                     	;# 
  4924  0314                     	;# 
  4925  0315                     	;# 
  4926  0316                     	;# 
  4927  0317                     	;# 
  4928  0318                     	;# 
  4929  0318                     	;# 
  4930  0319                     	;# 
  4931  031A                     	;# 
  4932  031B                     	;# 
  4933  031C                     	;# 
  4934  031C                     	;# 
  4935  031D                     	;# 
  4936  031E                     	;# 
  4937  031F                     	;# 
  4938  038C                     	;# 
  4939  038D                     	;# 
  4940  038E                     	;# 
  4941  0390                     	;# 
  4942  0391                     	;# 
  4943  0392                     	;# 
  4944  040C                     	;# 
  4945  040D                     	;# 
  4946  040E                     	;# 
  4947  040F                     	;# 
  4948  0410                     	;# 
  4949  0411                     	;# 
  4950  0416                     	;# 
  4951  0416                     	;# 
  4952  0417                     	;# 
  4953  0418                     	;# 
  4954  0418                     	;# 
  4955  0419                     	;# 
  4956  041A                     	;# 
  4957  041A                     	;# 
  4958  041B                     	;# 
  4959  041C                     	;# 
  4960  041C                     	;# 
  4961  041D                     	;# 
  4962  041E                     	;# 
  4963  041F                     	;# 
  4964  048C                     	;# 
  4965  048C                     	;# 
  4966  048D                     	;# 
  4967  048E                     	;# 
  4968  048F                     	;# 
  4969  048F                     	;# 
  4970  0490                     	;# 
  4971  0491                     	;# 
  4972  0492                     	;# 
  4973  0492                     	;# 
  4974  0493                     	;# 
  4975  0494                     	;# 
  4976  0495                     	;# 
  4977  0495                     	;# 
  4978  0496                     	;# 
  4979  0497                     	;# 
  4980  0498                     	;# 
  4981  0499                     	;# 
  4982  049A                     	;# 
  4983  049B                     	;# 
  4984  049C                     	;# 
  4985  049D                     	;# 
  4986  050C                     	;# 
  4987  050C                     	;# 
  4988  050D                     	;# 
  4989  050E                     	;# 
  4990  050F                     	;# 
  4991  050F                     	;# 
  4992  0510                     	;# 
  4993  0511                     	;# 
  4994  0512                     	;# 
  4995  0512                     	;# 
  4996  0513                     	;# 
  4997  0514                     	;# 
  4998  0515                     	;# 
  4999  0515                     	;# 
  5000  0516                     	;# 
  5001  0517                     	;# 
  5002  0518                     	;# 
  5003  0519                     	;# 
  5004  051A                     	;# 
  5005  051B                     	;# 
  5006  051C                     	;# 
  5007  051D                     	;# 
  5008  058C                     	;# 
  5009  058C                     	;# 
  5010  058D                     	;# 
  5011  058E                     	;# 
  5012  058F                     	;# 
  5013  058F                     	;# 
  5014  0590                     	;# 
  5015  0591                     	;# 
  5016  0592                     	;# 
  5017  0593                     	;# 
  5018  060C                     	;# 
  5019  060D                     	;# 
  5020  060E                     	;# 
  5021  060F                     	;# 
  5022  0610                     	;# 
  5023  0611                     	;# 
  5024  0612                     	;# 
  5025  0613                     	;# 
  5026  0614                     	;# 
  5027  0616                     	;# 
  5028  0617                     	;# 
  5029  0618                     	;# 
  5030  0619                     	;# 
  5031  061A                     	;# 
  5032  061B                     	;# 
  5033  061C                     	;# 
  5034  061D                     	;# 
  5035  061E                     	;# 
  5036  068C                     	;# 
  5037  068D                     	;# 
  5038  068E                     	;# 
  5039  068F                     	;# 
  5040  0690                     	;# 
  5041  0691                     	;# 
  5042  0692                     	;# 
  5043  0693                     	;# 
  5044  0694                     	;# 
  5045  070C                     	;# 
  5046  070D                     	;# 
  5047  070E                     	;# 
  5048  070F                     	;# 
  5049  0710                     	;# 
  5050  0711                     	;# 
  5051  0712                     	;# 
  5052  0713                     	;# 
  5053  0714                     	;# 
  5054  0716                     	;# 
  5055  0717                     	;# 
  5056  0718                     	;# 
  5057  0719                     	;# 
  5058  071A                     	;# 
  5059  071B                     	;# 
  5060  071C                     	;# 
  5061  071D                     	;# 
  5062  071E                     	;# 
  5063  0796                     	;# 
  5064  0797                     	;# 
  5065  0798                     	;# 
  5066  0799                     	;# 
  5067  079A                     	;# 
  5068  079B                     	;# 
  5069  080C                     	;# 
  5070  080D                     	;# 
  5071  080E                     	;# 
  5072  080F                     	;# 
  5073  0810                     	;# 
  5074  0811                     	;# 
  5075  0812                     	;# 
  5076  0813                     	;# 
  5077  0814                     	;# 
  5078  081A                     	;# 
  5079  081B                     	;# 
  5080  081C                     	;# 
  5081  081D                     	;# 
  5082  081E                     	;# 
  5083  081F                     	;# 
  5084  088C                     	;# 
  5085  088D                     	;# 
  5086  088E                     	;# 
  5087  088F                     	;# 
  5088  0890                     	;# 
  5089  0891                     	;# 
  5090  0892                     	;# 
  5091  0893                     	;# 
  5092  0895                     	;# 
  5093  0896                     	;# 
  5094  0897                     	;# 
  5095  0898                     	;# 
  5096  0899                     	;# 
  5097  089A                     	;# 
  5098  089B                     	;# 
  5099  090C                     	;# 
  5100  090E                     	;# 
  5101  090F                     	;# 
  5102  091F                     	;# 
  5103  091F                     	;# 
  5104  098F                     	;# 
  5105  098F                     	;# 
  5106  0990                     	;# 
  5107  0991                     	;# 
  5108  0992                     	;# 
  5109  0993                     	;# 
  5110  0994                     	;# 
  5111  0995                     	;# 
  5112  0996                     	;# 
  5113  0997                     	;# 
  5114  0E0F                     	;# 
  5115  0E10                     	;# 
  5116  0E11                     	;# 
  5117  0E12                     	;# 
  5118  0E13                     	;# 
  5119  0E14                     	;# 
  5120  0E15                     	;# 
  5121  0E16                     	;# 
  5122  0E17                     	;# 
  5123  0E18                     	;# 
  5124  0E19                     	;# 
  5125  0E1A                     	;# 
  5126  0E1B                     	;# 
  5127  0E1C                     	;# 
  5128  0E1D                     	;# 
  5129  0E1E                     	;# 
  5130  0E1F                     	;# 
  5131  0E20                     	;# 
  5132  0E21                     	;# 
  5133  0E22                     	;# 
  5134  0E23                     	;# 
  5135  0E24                     	;# 
  5136  0E25                     	;# 
  5137  0E26                     	;# 
  5138  0E27                     	;# 
  5139  0E28                     	;# 
  5140  0E29                     	;# 
  5141  0E2A                     	;# 
  5142  0E2B                     	;# 
  5143  0E2C                     	;# 
  5144  0E2D                     	;# 
  5145  0E2E                     	;# 
  5146  0E2F                     	;# 
  5147  0E30                     	;# 
  5148  0E31                     	;# 
  5149  0E32                     	;# 
  5150  0E33                     	;# 
  5151  0E34                     	;# 
  5152  0E35                     	;# 
  5153  0E36                     	;# 
  5154  0E37                     	;# 
  5155  0E8F                     	;# 
  5156  0E90                     	;# 
  5157  0E91                     	;# 
  5158  0E92                     	;# 
  5159  0E93                     	;# 
  5160  0E94                     	;# 
  5161  0E95                     	;# 
  5162  0E96                     	;# 
  5163  0E97                     	;# 
  5164  0E9C                     	;# 
  5165  0E9D                     	;# 
  5166  0E9E                     	;# 
  5167  0EA1                     	;# 
  5168  0EA2                     	;# 
  5169  0EA3                     	;# 
  5170  0EA4                     	;# 
  5171  0EA5                     	;# 
  5172  0EA9                     	;# 
  5173  0EAA                     	;# 
  5174  0EAB                     	;# 
  5175  0EAC                     	;# 
  5176  0EB1                     	;# 
  5177  0EB2                     	;# 
  5178  0EB3                     	;# 
  5179  0EB8                     	;# 
  5180  0EB9                     	;# 
  5181  0EBA                     	;# 
  5182  0EBB                     	;# 
  5183  0EBC                     	;# 
  5184  0EBD                     	;# 
  5185  0EBE                     	;# 
  5186  0EC3                     	;# 
  5187  0EC5                     	;# 
  5188  0EC6                     	;# 
  5189  0EC7                     	;# 
  5190  0EC8                     	;# 
  5191  0EC9                     	;# 
  5192  0ECA                     	;# 
  5193  0ECB                     	;# 
  5194  0ECC                     	;# 
  5195  0F10                     	;# 
  5196  0F11                     	;# 
  5197  0F12                     	;# 
  5198  0F13                     	;# 
  5199  0F14                     	;# 
  5200  0F15                     	;# 
  5201  0F16                     	;# 
  5202  0F17                     	;# 
  5203  0F18                     	;# 
  5204  0F19                     	;# 
  5205  0F1A                     	;# 
  5206  0F1B                     	;# 
  5207  0F1C                     	;# 
  5208  0F1D                     	;# 
  5209  0F1E                     	;# 
  5210  0F1F                     	;# 
  5211  0F20                     	;# 
  5212  0F21                     	;# 
  5213  0F22                     	;# 
  5214  0F23                     	;# 
  5215  0F24                     	;# 
  5216  0F25                     	;# 
  5217  0F26                     	;# 
  5218  0F27                     	;# 
  5219  0F38                     	;# 
  5220  0F39                     	;# 
  5221  0F3A                     	;# 
  5222  0F3B                     	;# 
  5223  0F3C                     	;# 
  5224  0F3D                     	;# 
  5225  0F3E                     	;# 
  5226  0F3F                     	;# 
  5227  0F40                     	;# 
  5228  0F41                     	;# 
  5229  0F43                     	;# 
  5230  0F44                     	;# 
  5231  0F45                     	;# 
  5232  0F46                     	;# 
  5233  0F47                     	;# 
  5234  0F48                     	;# 
  5235  0F49                     	;# 
  5236  0F4A                     	;# 
  5237  0F4B                     	;# 
  5238  0F4C                     	;# 
  5239  0F4E                     	;# 
  5240  0F4F                     	;# 
  5241  0F50                     	;# 
  5242  0F51                     	;# 
  5243  0F52                     	;# 
  5244  0F53                     	;# 
  5245  0F54                     	;# 
  5246  0F55                     	;# 
  5247  0F56                     	;# 
  5248  0F57                     	;# 
  5249  0F65                     	;# 
  5250  0F68                     	;# 
  5251  0F69                     	;# 
  5252  0F6A                     	;# 
  5253  0F6B                     	;# 
  5254  0FE4                     	;# 
  5255  0FE5                     	;# 
  5256  0FE6                     	;# 
  5257  0FE7                     	;# 
  5258  0FE8                     	;# 
  5259  0FE9                     	;# 
  5260  0FEA                     	;# 
  5261  0FEB                     	;# 
  5262  0FED                     	;# 
  5263  0FEE                     	;# 
  5264  0FEF                     	;_samples
  5265                           
  5266                           	psect	idataBANK1
  5267  0004                     __pidataBANK1:	
  5268                           
  5269                           ;initializer for _batteryTemp
  5270  0004  342C               	retlw	44
  5271  0005  3401               	retlw	1
  5272                           
  5273                           	psect	idataBANK2
  5274  0801                     __pidataBANK2:	
  5275                           
  5276                           ;initializer for _channels
  5277  0801  3414               	retlw	20
  5278  0802  3400               	retlw	0
  5279  0803  3410               	retlw	16
  5280  0804  3400               	retlw	0
  5281  0805  3416               	retlw	22
  5282  0806  3400               	retlw	0
  5283  0807  3412               	retlw	18
  5284  0808  3400               	retlw	0
  5285                           
  5286                           	psect	stringtext1
  5287  1000                     __pstringtext1:	
  5288  1000                     _fonts:	
  5289  1000  3400               	retlw	0
  5290  1001  3400               	retlw	0
  5291  1002  3400               	retlw	0
  5292  1003  3400               	retlw	0
  5293  1004  344E               	retlw	78
  5294  1005  3400               	retlw	0
  5295  1006  3406               	retlw	6
  5296  1007  3400               	retlw	0
  5297  1008  3406               	retlw	6
  5298  1009  34FF               	retlw	255
  5299  100A  34FF               	retlw	255
  5300  100B  34FF               	retlw	255
  5301  100C  3448               	retlw	72
  5302  100D  34D6               	retlw	214
  5303  100E  3424               	retlw	36
  5304  100F  3412               	retlw	18
  5305  1010  3408               	retlw	8
  5306  1011  3424               	retlw	36
  5307  1012  34FF               	retlw	255
  5308  1013  34FF               	retlw	255
  5309  1014  34FF               	retlw	255
  5310  1015  3400               	retlw	0
  5311  1016  3406               	retlw	6
  5312  1017  3400               	retlw	0
  5313  1018  3438               	retlw	56
  5314  1019  3444               	retlw	68
  5315  101A  3482               	retlw	130
  5316  101B  3482               	retlw	130
  5317  101C  3444               	retlw	68
  5318  101D  3438               	retlw	56
  5319  101E  3414               	retlw	20
  5320  101F  3408               	retlw	8
  5321  1020  343E               	retlw	62
  5322  1021  3410               	retlw	16
  5323  1022  3438               	retlw	56
  5324  1023  3410               	retlw	16
  5325  1024  34A0               	retlw	160
  5326  1025  3460               	retlw	96
  5327  1026  3400               	retlw	0
  5328  1027  3410               	retlw	16
  5329  1028  3410               	retlw	16
  5330  1029  3410               	retlw	16
  5331  102A  3460               	retlw	96
  5332  102B  3460               	retlw	96
  5333  102C  3400               	retlw	0
  5334  102D  3460               	retlw	96
  5335  102E  3418               	retlw	24
  5336  102F  3406               	retlw	6
  5337  1030  347C               	retlw	124
  5338  1031  3442               	retlw	66
  5339  1032  347C               	retlw	124
  5340  1033  3444               	retlw	68
  5341  1034  347E               	retlw	126
  5342  1035  3440               	retlw	64
  5343  1036  3464               	retlw	100
  5344  1037  3452               	retlw	82
  5345  1038  344C               	retlw	76
  5346  1039  344A               	retlw	74
  5347  103A  344A               	retlw	74
  5348  103B  3434               	retlw	52
  5349  103C  3438               	retlw	56
  5350  103D  3424               	retlw	36
  5351  103E  347E               	retlw	126
  5352  103F  344E               	retlw	78
  5353  1040  344A               	retlw	74
  5354  1041  3432               	retlw	50
  5355  1042  343C               	retlw	60
  5356  1043  344A               	retlw	74
  5357  1044  3432               	retlw	50
  5358  1045  3462               	retlw	98
  5359  1046  341A               	retlw	26
  5360  1047  3406               	retlw	6
  5361  1048  3476               	retlw	118
  5362  1049  344A               	retlw	74
  5363  104A  3476               	retlw	118
  5364  104B  344C               	retlw	76
  5365  104C  3452               	retlw	82
  5366  104D  343C               	retlw	60
  5367  104E  346C               	retlw	108
  5368  104F  346C               	retlw	108
  5369  1050  3400               	retlw	0
  5370  1051  34AC               	retlw	172
  5371  1052  346C               	retlw	108
  5372  1053  3400               	retlw	0
  5373  1054  3410               	retlw	16
  5374  1055  3428               	retlw	40
  5375  1056  3444               	retlw	68
  5376  1057  3428               	retlw	40
  5377  1058  3428               	retlw	40
  5378  1059  3428               	retlw	40
  5379  105A  3444               	retlw	68
  5380  105B  3428               	retlw	40
  5381  105C  3410               	retlw	16
  5382  105D  3402               	retlw	2
  5383  105E  3459               	retlw	89
  5384  105F  3406               	retlw	6
  5385  1060  34FF               	retlw	255
  5386  1061  34FF               	retlw	255
  5387  1062  34FF               	retlw	255
  5388  1063  347C               	retlw	124
  5389  1064  3412               	retlw	18
  5390  1065  347C               	retlw	124
  5391  1066  347E               	retlw	126
  5392  1067  345A               	retlw	90
  5393  1068  3434               	retlw	52
  5394  1069  343C               	retlw	60
  5395  106A  3442               	retlw	66
  5396  106B  3442               	retlw	66
  5397  106C  347E               	retlw	126
  5398  106D  3442               	retlw	66
  5399  106E  343C               	retlw	60
  5400  106F  347E               	retlw	126
  5401  1070  344A               	retlw	74
  5402  1071  3442               	retlw	66
  5403  1072  347E               	retlw	126
  5404  1073  340A               	retlw	10
  5405  1074  340A               	retlw	10
  5406  1075  343C               	retlw	60
  5407  1076  3452               	retlw	82
  5408  1077  3434               	retlw	52
  5409  1078  347E               	retlw	126
  5410  1079  3408               	retlw	8
  5411  107A  347E               	retlw	126
  5412  107B  3442               	retlw	66
  5413  107C  347E               	retlw	126
  5414  107D  3442               	retlw	66
  5415  107E  3430               	retlw	48
  5416  107F  3440               	retlw	64
  5417  1080  343E               	retlw	62
  5418  1081  347E               	retlw	126
  5419  1082  3418               	retlw	24
  5420  1083  3466               	retlw	102
  5421  1084  347E               	retlw	126
  5422  1085  3440               	retlw	64
  5423  1086  3440               	retlw	64
  5424  1087  347E               	retlw	126
  5425  1088  341C               	retlw	28
  5426  1089  347E               	retlw	126
  5427  108A  347E               	retlw	126
  5428  108B  3402               	retlw	2
  5429  108C  347E               	retlw	126
  5430  108D  343C               	retlw	60
  5431  108E  3442               	retlw	66
  5432  108F  343C               	retlw	60
  5433  1090  347E               	retlw	126
  5434  1091  3412               	retlw	18
  5435  1092  340C               	retlw	12
  5436  1093  347E               	retlw	126
  5437  1094  3462               	retlw	98
  5438  1095  34FE               	retlw	254
  5439  1096  347E               	retlw	126
  5440  1097  3432               	retlw	50
  5441  1098  344E               	retlw	78
  5442  1099  3444               	retlw	68
  5443  109A  344A               	retlw	74
  5444  109B  3432               	retlw	50
  5445  109C  3402               	retlw	2
  5446  109D  347E               	retlw	126
  5447  109E  3402               	retlw	2
  5448  109F  347E               	retlw	126
  5449  10A0  3440               	retlw	64
  5450  10A1  347E               	retlw	126
  5451  10A2  343E               	retlw	62
  5452  10A3  3440               	retlw	64
  5453  10A4  343E               	retlw	62
  5454  10A5  347E               	retlw	126
  5455  10A6  3438               	retlw	56
  5456  10A7  347E               	retlw	126
  5457  10A8  3466               	retlw	102
  5458  10A9  3418               	retlw	24
  5459  10AA  3466               	retlw	102
  5460  10AB  340E               	retlw	14
  5461  10AC  3470               	retlw	112
  5462  10AD  340E               	retlw	14
  5463  10AE  3462               	retlw	98
  5464  10AF  345A               	retlw	90
  5465  10B0  3446               	retlw	70
  5466  10B1  3400               	retlw	0
  5467  10B2  347E               	retlw	126
  5468  10B3  3442               	retlw	66
  5469  10B4  3406               	retlw	6
  5470  10B5  3418               	retlw	24
  5471  10B6  3460               	retlw	96
  5472  10B7  3442               	retlw	66
  5473  10B8  347E               	retlw	126
  5474  10B9  3400               	retlw	0
  5475  10BA  3404               	retlw	4
  5476  10BB  3402               	retlw	2
  5477  10BC  3404               	retlw	4
  5478  10BD  3440               	retlw	64
  5479  10BE  3440               	retlw	64
  5480  10BF  3440               	retlw	64
  5481  10C0  3400               	retlw	0
  5482  10C1  3402               	retlw	2
  5483  10C2  3404               	retlw	4
  5484  10C3  3474               	retlw	116
  5485  10C4  3454               	retlw	84
  5486  10C5  3478               	retlw	120
  5487  10C6  347E               	retlw	126
  5488  10C7  3448               	retlw	72
  5489  10C8  3430               	retlw	48
  5490  10C9  3430               	retlw	48
  5491  10CA  3448               	retlw	72
  5492  10CB  3448               	retlw	72
  5493  10CC  3430               	retlw	48
  5494  10CD  3448               	retlw	72
  5495  10CE  347E               	retlw	126
  5496  10CF  3438               	retlw	56
  5497  10D0  3454               	retlw	84
  5498  10D1  3458               	retlw	88
  5499  10D2  347C               	retlw	124
  5500  10D3  340A               	retlw	10
  5501  10D4  3402               	retlw	2
  5502  10D5  3498               	retlw	152
  5503  10D6  34A4               	retlw	164
  5504  10D7  347C               	retlw	124
  5505  10D8  347E               	retlw	126
  5506  10D9  3408               	retlw	8
  5507  10DA  3470               	retlw	112
  5508  10DB  3448               	retlw	72
  5509  10DC  347A               	retlw	122
  5510  10DD  3440               	retlw	64
  5511  10DE  3488               	retlw	136
  5512  10DF  34FA               	retlw	250
  5513  10E0  3400               	retlw	0
  5514  10E1  347E               	retlw	126
  5515  10E2  3418               	retlw	24
  5516  10E3  3464               	retlw	100
  5517  10E4  3442               	retlw	66
  5518  10E5  347E               	retlw	126
  5519  10E6  3440               	retlw	64
  5520  10E7  347C               	retlw	124
  5521  10E8  3438               	retlw	56
  5522  10E9  347C               	retlw	124
  5523  10EA  347C               	retlw	124
  5524  10EB  3404               	retlw	4
  5525  10EC  3478               	retlw	120
  5526  10ED  3438               	retlw	56
  5527  10EE  3444               	retlw	68
  5528  10EF  3438               	retlw	56
  5529  10F0  34FC               	retlw	252
  5530  10F1  3424               	retlw	36
  5531  10F2  3418               	retlw	24
  5532  10F3  3418               	retlw	24
  5533  10F4  3424               	retlw	36
  5534  10F5  34FC               	retlw	252
  5535  10F6  3478               	retlw	120
  5536  10F7  3404               	retlw	4
  5537  10F8  3404               	retlw	4
  5538  10F9  3448               	retlw	72
  5539  10FA  3454               	retlw	84
  5540  10FB  3424               	retlw	36
  5541  10FC  3404               	retlw	4
  5542  10FD  343E               	retlw	62
  5543  10FE  3444               	retlw	68
  5544  10FF  347C               	retlw	124
  5545  1100  3440               	retlw	64
  5546  1101  347C               	retlw	124
  5547  1102  343C               	retlw	60
  5548  1103  3440               	retlw	64
  5549  1104  343C               	retlw	60
  5550  1105  347C               	retlw	124
  5551  1106  3430               	retlw	48
  5552  1107  347C               	retlw	124
  5553  1108  346C               	retlw	108
  5554  1109  3410               	retlw	16
  5555  110A  346C               	retlw	108
  5556  110B  349C               	retlw	156
  5557  110C  34A0               	retlw	160
  5558  110D  347C               	retlw	124
  5559  110E  3464               	retlw	100
  5560  110F  3454               	retlw	84
  5561  1110  344C               	retlw	76
  5562  1111  340C               	retlw	12
  5563  1112  3412               	retlw	18
  5564  1113  340C               	retlw	12
  5565  1114  34FF               	retlw	255
  5566  1115  34FF               	retlw	255
  5567  1116  34FF               	retlw	255
  5568  1117  34FF               	retlw	255
  5569  1118  34FF               	retlw	255
  5570  1119  34FF               	retlw	255
  5571  111A  34FF               	retlw	255
  5572  111B  34FF               	retlw	255
  5573  111C  34FF               	retlw	255
  5574  111D  34FF               	retlw	255
  5575  111E  34FF               	retlw	255
  5576  111F  34FF               	retlw	255
  5577  1120  34FF               	retlw	255
  5578  1121  34FF               	retlw	255
  5579  1122  34FF               	retlw	255
  5580  1123  34FF               	retlw	255
  5581  1124  34FF               	retlw	255
  5582  1125  34FF               	retlw	255
  5583  1126  34FC               	retlw	252
  5584  1127  3440               	retlw	64
  5585  1128  347C               	retlw	124
  5586  1129  34FF               	retlw	255
  5587  112A  34FF               	retlw	255
  5588  112B  34FF               	retlw	255
  5589  112C  34FF               	retlw	255
  5590  112D  34FF               	retlw	255
  5591  112E  34FF               	retlw	255
  5592  112F                     __end_of_fonts:	
  5593                           
  5594                           	psect	stringtext2
  5595  1800                     __pstringtext2:	
  5596  1800                     log@coeff:	
  5597  1800  3400               	retlw	0
  5598  1801  3400               	retlw	0
  5599  1802  3400               	retlw	0
  5600  1803  3400               	retlw	0
  5601  1804  3480               	retlw	128
  5602  1805  343F               	retlw	63
  5603  1806  34F0               	retlw	240
  5604  1807  34FF               	retlw	255
  5605  1808  34BE               	retlw	190
  5606  1809  34E2               	retlw	226
  5607  180A  34A9               	retlw	169
  5608  180B  343E               	retlw	62
  5609  180C  3483               	retlw	131
  5610  180D  3476               	retlw	118
  5611  180E  34BE               	retlw	190
  5612  180F  34AE               	retlw	174
  5613  1810  342B               	retlw	43
  5614  1811  343E               	retlw	62
  5615  1812  343C               	retlw	60
  5616  1813  34C3               	retlw	195
  5617  1814  34BD               	retlw	189
  5618  1815  34D2               	retlw	210
  5619  1816  3413               	retlw	19
  5620  1817  343D               	retlw	61
  5621  1818  3478               	retlw	120
  5622  1819  34D3               	retlw	211
  5623  181A  34BB               	retlw	187
  5624  181B                     __end_oflog@coeff:	
  5625  0013                     _TRISC	set	19
  5626  0012                     _TRISB	set	18
  5627  0011                     _TRISA	set	17
  5628  0018                     _LATC	set	24
  5629  0017                     _LATB	set	23
  5630  0016                     _LATA	set	22
  5631  0016                     _LATAbits	set	22
  5632  0011                     _TRISAbits	set	17
  5633  00B5                     _LATA5	set	181
  5634  006A                     _RB2	set	106
  5635  005F                     _GIE	set	95
  5636  0093                     _ADCON0	set	147
  5637  009D                     _ADACQ	set	157
  5638  009C                     _ADPRE	set	156
  5639  009B                     _ADCAP	set	155
  5640  009A                     _ADREF	set	154
  5641  0098                     _ADCLK	set	152
  5642  0097                     _ADSTAT	set	151
  5643  0099                     _ADACT	set	153
  5644  0096                     _ADCON3	set	150
  5645  0095                     _ADCON2	set	149
  5646  0094                     _ADCON1	set	148
  5647  008C                     _ADRESL	set	140
  5648  008D                     _ADRESH	set	141
  5649  0093                     _ADCON0bits	set	147
  5650  009E                     _ADPCH	set	158
  5651  0113                     _ADSTPTH	set	275
  5652  0112                     _ADSTPTL	set	274
  5653  0111                     _ADUTHH	set	273
  5654  0110                     _ADUTHL	set	272
  5655  010F                     _ADLTHH	set	271
  5656  010E                     _ADLTHL	set	270
  5657  010D                     _ADRPT	set	269
  5658  021F                     _CCPTMRS1bits	set	543
  5659  0294                     _T4CONbits	set	660
  5660  0292                     _T4TMR	set	658
  5661  0293                     _T4PR	set	659
  5662  0297                     _T4RST	set	663
  5663  0295                     _T4HLT	set	661
  5664  0296                     _T4CLKCON	set	662
  5665  0294                     _T4CON	set	660
  5666  028E                     _T2CONbits	set	654
  5667  028C                     _T2TMR	set	652
  5668  028D                     _T2PR	set	653
  5669  0291                     _T2RST	set	657
  5670  028F                     _T2HLT	set	655
  5671  0290                     _T2CLKCON	set	656
  5672  028E                     _T2CON	set	654
  5673  0390                     _PWM7DCL	set	912
  5674  0391                     _PWM7DCH	set	913
  5675  0392                     _PWM7CON	set	914
  5676  038C                     _PWM6DCL	set	908
  5677  038D                     _PWM6DCH	set	909
  5678  038E                     _PWM6CON	set	910
  5679  0710                     _PIR4bits	set	1808
  5680  0716                     _PIE0bits	set	1814
  5681  0892                     _OSCTUNE	set	2194
  5682  0893                     _OSCFRQ	set	2195
  5683  0891                     _OSCEN	set	2193
  5684  088F                     _OSCCON3	set	2191
  5685  088D                     _OSCCON1	set	2189
  5686  090C                     _FVRCON	set	2316
  5687  0E8F                     _PPSLOCKbits	set	3727
  5688  0E8F                     _PPSLOCK	set	3727
  5689  0F18                     _RB0PPS	set	3864
  5690  0F17                     _RA7PPS	set	3863
  5691  0F16                     _RA6PPS	set	3862
  5692  0F4E                     _ANSELC	set	3918
  5693  0F43                     _ANSELB	set	3907
  5694  0F38                     _ANSELA	set	3896
  5695  0F65                     _WPUE	set	3941
  5696  0F4F                     _WPUC	set	3919
  5697  0F44                     _WPUB	set	3908
  5698  0F39                     _WPUA	set	3897
  5699  181B                     STR_3:	
  5700  181B  3452               	retlw	82	;'R'
  5701  181C  3465               	retlw	101	;'e'
  5702  181D  3466               	retlw	102	;'f'
  5703  181E  343A               	retlw	58	;':'
  5704  181F  3400               	retlw	0
  5705                           
  5706                           	psect	stringtext3
  5707  1820                     __pstringtext3:	
  5708  1820                     STR_2:	
  5709  1820  344F               	retlw	79	;'O'
  5710  1821  3475               	retlw	117	;'u'
  5711  1822  3474               	retlw	116	;'t'
  5712  1823  343A               	retlw	58	;':'
  5713  1824  3400               	retlw	0
  5714                           
  5715                           	psect	stringtext4
  5716  1825                     __pstringtext4:	
  5717  1825                     STR_1:	
  5718  1825  3449               	retlw	73	;'I'
  5719  1826  346E               	retlw	110	;'n'
  5720  1827  343A               	retlw	58	;':'
  5721  1828  3400               	retlw	0
  5722                           
  5723                           	psect	stringtext5
  5724  0000                     __pstringtext5:	
  5725                           
  5726                           ; #config settings
  5727  0000                     
  5728                           	psect	cinit
  5729  07BF                     start_initialization:	
  5730  07BF                     __initialization:		;BIGRAM
  5731                           
  5732                           ; Initialize objects allocated to BANK1
  5733  07BF  0021               	movlb	1	; select bank1
  5734  07C0  3180  2004  3187   	fcall	__pidataBANK1	;fetch initializer
  5735  07C3  00EB               	movwf	__pdataBANK1& (0+127)
  5736  07C4  3180  2005  3187   	fcall	__pidataBANK1+1	;fetch initializer
  5737  07C7  00EC               	movwf	(__pdataBANK1+1)& (0+127)
  5738                           
  5739                           ; Initialize objects allocated to BANK2
  5740  07C8  3001               	movlw	low __pidataBANK2
  5741  07C9  0084               	movwf	4
  5742  07CA  3088               	movlw	(high __pidataBANK2)| (0+128)
  5743  07CB  0085               	movwf	5
  5744  07CC  0022               	movlb	2	; select bank2
  5745  07CD  0012               	moviw fsr0++
  5746  07CE  00B5               	movwf	__pdataBANK2& (0+127)
  5747  07CF  0012               	moviw fsr0++
  5748  07D0  00B6               	movwf	(__pdataBANK2+1)& (0+127)
  5749  07D1  0012               	moviw fsr0++
  5750  07D2  00B7               	movwf	(__pdataBANK2+2)& (0+127)
  5751  07D3  0012               	moviw fsr0++
  5752  07D4  00B8               	movwf	(__pdataBANK2+3)& (0+127)
  5753  07D5  0012               	moviw fsr0++
  5754  07D6  00B9               	movwf	(__pdataBANK2+4)& (0+127)
  5755  07D7  0012               	moviw fsr0++
  5756  07D8  00BA               	movwf	(__pdataBANK2+5)& (0+127)
  5757  07D9  0012               	moviw fsr0++
  5758  07DA  00BB               	movwf	(__pdataBANK2+6)& (0+127)
  5759  07DB  0012               	moviw fsr0++
  5760  07DC  00BC               	movwf	(__pdataBANK2+7)& (0+127)
  5761                           
  5762                           ; Clear objects allocated to BIGRAM
  5763  07DD  3060               	movlw	low (0+8800)
  5764  07DE  0084               	movwf	4
  5765  07DF  3022               	movlw	high (0+8800)
  5766  07E0  0085               	movwf	5
  5767  07E1  3090               	movlw	144
  5768  07E2  00FE               	movwf	btemp
  5769  07E3  3001               	movlw	1
  5770  07E4  00FF               	movwf	btemp+1
  5771  07E5  3192  2291  3187   	fcall	clear_ram0
  5772                           
  5773                           ; Clear objects allocated to BANK1
  5774  07E8  30A0               	movlw	low __pbssBANK1
  5775  07E9  0084               	movwf	4
  5776  07EA  3000               	movlw	high __pbssBANK1
  5777  07EB  0085               	movwf	5
  5778  07EC  304B               	movlw	75
  5779  07ED  00FE               	movwf	btemp
  5780  07EE  3000               	movlw	0
  5781  07EF  00FF               	movwf	btemp+1
  5782  07F0  3192  2291  3187   	fcall	clear_ram0
  5783                           
  5784                           ; Clear objects allocated to BANK2
  5785  07F3  3020               	movlw	low __pbssBANK2
  5786  07F4  0084               	movwf	4
  5787  07F5  3001               	movlw	high __pbssBANK2
  5788  07F6  0085               	movwf	5
  5789  07F7  3015               	movlw	21
  5790  07F8  00FE               	movwf	btemp
  5791  07F9  3000               	movlw	0
  5792  07FA  00FF               	movwf	btemp+1
  5793  07FB  3192  2291         	fcall	clear_ram0
  5794  07FD                     end_of_initialization:	
  5795                           ;End of C runtime variable initialization code
  5796                           
  5797  07FD                     __end_of__initialization:	
  5798  07FD  0020               	movlb	0
  5799  07FE  3182  2AC5         	ljmp	_main	;jump to C main() function
  5800                           
  5801                           	psect	bssBANK1
  5802  00A0                     __pbssBANK1:	
  5803  00A0                     _Ianalogs:	
  5804  00A0                     	ds	8
  5805  00A8                     _Vanalogs:	
  5806  00A8                     	ds	8
  5807  00B0                     _voltage:	
  5808  00B0                     	ds	8
  5809  00B8                     _current:	
  5810  00B8                     	ds	8
  5811  00C0                     _Vref:	
  5812  00C0                     	ds	4
  5813  00C4                     _stateCounter:	
  5814  00C4                     	ds	4
  5815  00C8                     _Iref:	
  5816  00C8                     	ds	4
  5817  00CC                     _IminCount:	
  5818  00CC                     	ds	4
  5819  00D0                     _Imin:	
  5820  00D0                     	ds	4
  5821  00D4                     _errno:	
  5822  00D4                     	ds	2
  5823  00D6                     _readButtons:	
  5824  00D6                     	ds	2
  5825  00D8                     _floatCount:	
  5826  00D8                     	ds	2
  5827  00DA                     _VHoldMode:	
  5828  00DA                     	ds	2
  5829  00DC                     _Iout:	
  5830  00DC                     	ds	2
  5831  00DE                     _Imode:	
  5832  00DE                     	ds	2
  5833  00E0                     _cc_cv:	
  5834  00E0                     	ds	2
  5835  00E2                     _batteryState:	
  5836  00E2                     	ds	2
  5837  00E4                     _sampleIndex:	
  5838  00E4                     	ds	2
  5839  00E6                     _j:	
  5840  00E6                     	ds	1
  5841  00E7                     _lastButton:	
  5842  00E7                     	ds	1
  5843  00E8                     _button:	
  5844  00E8                     	ds	1
  5845  00E9                     _otherState:	
  5846  00E9                     	ds	1
  5847  00EA                     _x:	
  5848  00EA                     	ds	1
  5849                           
  5850                           	psect	dataBANK1
  5851  00EB                     __pdataBANK1:	
  5852  00EB                     _batteryTemp:	
  5853  00EB                     	ds	2
  5854                           
  5855                           	psect	bssBANK2
  5856  0120                     __pbssBANK2:	
  5857  0120                     _totals:	
  5858  0120                     	ds	16
  5859  0130                     LCDWriteInt@F14388:	
  5860  0130                     	ds	5
  5861                           
  5862                           	psect	dataBANK2
  5863  0135                     __pdataBANK2:	
  5864  0135                     _channels:	
  5865  0135                     	ds	8
  5866                           
  5867                           	psect	clrtext
  5868  1291                     clear_ram0:	
  5869                           ;	Called with FSR0 containing the base address, and
  5870                           ;	btemp/btemp+1 has the size to clear
  5871                           
  5872  1291  0064               	clrwdt	;clear the watchdog before getting into this loop
  5873  1292                     clrloop0:	
  5874  1292  0180               	clrf	0	;clear RAM location pointed to by FSR
  5875  1293  3101               	addfsr 0,1
  5876  1294  3001               	movlw	1
  5877  1295  02FE               	subwf	126,f
  5878  1296  3000               	movlw	0
  5879  1297  3BFF               	subwfb	127,f
  5880  1298  087F               	movf	127,w
  5881  1299  047E               	iorwf	126,w
  5882  129A  1903               	btfsc	3,2
  5883  129B  3400               	retlw	0	;all done for this memory range, return
  5884  129C  2A92               	goto	clrloop0	;have we reached the end yet?
  5885                           
  5886                           	psect	cstackCOMMON
  5887  0070                     __pcstackCOMMON:	
  5888  0070                     ?___ftge:	
  5889  0070                     ?_LCDWrite:	
  5890                           ; 1 bit 
  5891                           
  5892  0070                     ?_OSCILLATOR_Initialize:	
  5893                           ; 1 bytes @ 0x0
  5894                           
  5895  0070                     ??_OSCILLATOR_Initialize:	
  5896                           ; 1 bytes @ 0x0
  5897                           
  5898  0070                     ?_TMR2_Initialize:	
  5899                           ; 1 bytes @ 0x0
  5900                           
  5901  0070                     ??_TMR2_Initialize:	
  5902                           ; 1 bytes @ 0x0
  5903                           
  5904  0070                     ?_TMR4_Initialize:	
  5905                           ; 1 bytes @ 0x0
  5906                           
  5907  0070                     ??_TMR4_Initialize:	
  5908                           ; 1 bytes @ 0x0
  5909                           
  5910  0070                     ?_calculateCurrent0:	
  5911                           ; 1 bytes @ 0x0
  5912                           
  5913  0070                     ?_calculateCurrent1:	
  5914                           ; 1 bytes @ 0x0
  5915                           
  5916  0070                     ?_calculateCurrent2:	
  5917                           ; 1 bytes @ 0x0
  5918                           
  5919  0070                     ?_calculateCurrent3:	
  5920                           ; 1 bytes @ 0x0
  5921                           
  5922  0070                     ?_ADC_Initialize:	
  5923                           ; 1 bytes @ 0x0
  5924                           
  5925  0070                     ??_ADC_Initialize:	
  5926                           ; 1 bytes @ 0x0
  5927                           
  5928  0070                     ?_Init_Battery_State_Machine:	
  5929                           ; 1 bytes @ 0x0
  5930                           
  5931  0070                     ?_Battery_State_Machine:	
  5932                           ; 1 bytes @ 0x0
  5933                           
  5934  0070                     ?_cc_cv_mode:	
  5935                           ; 1 bytes @ 0x0
  5936                           
  5937  0070                     ?_readButton:	
  5938                           ; 1 bytes @ 0x0
  5939                           
  5940  0070                     ?_LCDWriteCharacter:	
  5941                           ; 1 bytes @ 0x0
  5942                           
  5943  0070                     ?_LCDClear:	
  5944                           ; 1 bytes @ 0x0
  5945                           
  5946  0070                     ?_LCDInit:	
  5947                           ; 1 bytes @ 0x0
  5948                           
  5949  0070                     ?_PIN_MANAGER_Initialize:	
  5950                           ; 1 bytes @ 0x0
  5951                           
  5952  0070                     ??_PIN_MANAGER_Initialize:	
  5953                           ; 1 bytes @ 0x0
  5954                           
  5955  0070                     ?_PWM_Initialize:	
  5956                           ; 1 bytes @ 0x0
  5957                           
  5958  0070                     ??_PWM_Initialize:	
  5959                           ; 1 bytes @ 0x0
  5960                           
  5961  0070                     ?_PWM6_LoadDutyValue:	
  5962                           ; 1 bytes @ 0x0
  5963                           
  5964  0070                     ?_PWM7_LoadDutyValue:	
  5965                           ; 1 bytes @ 0x0
  5966                           
  5967  0070                     ?_SYSTEM_Initialize:	
  5968                           ; 1 bytes @ 0x0
  5969                           
  5970  0070                     ?_main:	
  5971                           ; 1 bytes @ 0x0
  5972                           
  5973  0070                     ?_ADCRead:	
  5974                           ; 1 bytes @ 0x0
  5975                           
  5976  0070                     ?___wmul:	
  5977                           ; 2 bytes @ 0x0
  5978                           
  5979  0070                     ?___awdiv:	
  5980                           ; 2 bytes @ 0x0
  5981                           
  5982  0070                     ?___lwmod:	
  5983                           ; 2 bytes @ 0x0
  5984                           
  5985  0070                     ?___ftpack:	
  5986                           ; 2 bytes @ 0x0
  5987                           
  5988  0070                     ?_frexp:	
  5989                           ; 3 bytes @ 0x0
  5990                           
  5991  0070                     ?___aldiv:	
  5992                           ; 3 bytes @ 0x0
  5993                           
  5994  0070                     LCDWrite@data:	
  5995                           ; 4 bytes @ 0x0
  5996                           
  5997  0070                     PIN_MANAGER_Initialize@state:	
  5998                           ; 1 bytes @ 0x0
  5999                           
  6000  0070                     PWM6_LoadDutyValue@dutyCycle6:	
  6001                           ; 1 bytes @ 0x0
  6002                           
  6003  0070                     PWM7_LoadDutyValue@dutyCycle7:	
  6004                           ; 2 bytes @ 0x0
  6005                           
  6006  0070                     ___wmul@multiplier:	
  6007                           ; 2 bytes @ 0x0
  6008                           
  6009  0070                     ___awdiv@divisor:	
  6010                           ; 2 bytes @ 0x0
  6011                           
  6012  0070                     ___lwmod@divisor:	
  6013                           ; 2 bytes @ 0x0
  6014                           
  6015  0070                     ___ftpack@arg:	
  6016                           ; 2 bytes @ 0x0
  6017                           
  6018  0070                     ___ftge@ff1:	
  6019                           ; 3 bytes @ 0x0
  6020                           
  6021  0070                     frexp@value:	
  6022                           ; 3 bytes @ 0x0
  6023                           
  6024  0070                     ___aldiv@divisor:	
  6025                           ; 3 bytes @ 0x0
  6026                           
  6027                           
  6028                           ; 4 bytes @ 0x0
  6029  0070                     	ds	1
  6030  0071                     ??_LCDWrite:	
  6031                           
  6032                           ; 1 bytes @ 0x1
  6033  0071                     	ds	1
  6034  0072                     ??_PWM6_LoadDutyValue:	
  6035  0072                     ??_PWM7_LoadDutyValue:	
  6036                           ; 1 bytes @ 0x2
  6037                           
  6038  0072                     LCDWrite@data_or_command:	
  6039                           ; 1 bytes @ 0x2
  6040                           
  6041  0072                     ___wmul@multiplicand:	
  6042                           ; 1 bytes @ 0x2
  6043                           
  6044  0072                     ___awdiv@dividend:	
  6045                           ; 2 bytes @ 0x2
  6046                           
  6047  0072                     ___lwmod@dividend:	
  6048                           ; 2 bytes @ 0x2
  6049                           
  6050                           
  6051                           ; 2 bytes @ 0x2
  6052  0072                     	ds	1
  6053  0073                     ??_ADCRead:	
  6054  0073                     ADCRead@channel:	
  6055                           ; 1 bytes @ 0x3
  6056                           
  6057  0073                     LCDWrite@d:	
  6058                           ; 1 bytes @ 0x3
  6059                           
  6060  0073                     ___ftpack@exp:	
  6061                           ; 1 bytes @ 0x3
  6062                           
  6063  0073                     frexp@eptr:	
  6064                           ; 1 bytes @ 0x3
  6065                           
  6066  0073                     ___ftge@ff2:	
  6067                           ; 1 bytes @ 0x3
  6068                           
  6069                           
  6070                           ; 3 bytes @ 0x3
  6071  0073                     	ds	1
  6072  0074                     ??_frexp:	
  6073  0074                     ??_readButton:	
  6074                           ; 1 bytes @ 0x4
  6075                           
  6076  0074                     ??___wmul:	
  6077                           ; 1 bytes @ 0x4
  6078                           
  6079  0074                     ??___awdiv:	
  6080                           ; 1 bytes @ 0x4
  6081                           
  6082  0074                     ??___lwmod:	
  6083                           ; 1 bytes @ 0x4
  6084                           
  6085  0074                     LCDWrite@i:	
  6086                           ; 1 bytes @ 0x4
  6087                           
  6088  0074                     ___ftpack@sign:	
  6089                           ; 1 bytes @ 0x4
  6090                           
  6091  0074                     ___wmul@product:	
  6092                           ; 1 bytes @ 0x4
  6093                           
  6094  0074                     ___aldiv@dividend:	
  6095                           ; 2 bytes @ 0x4
  6096                           
  6097                           
  6098                           ; 4 bytes @ 0x4
  6099  0074                     	ds	1
  6100  0075                     ??___ftpack:	
  6101  0075                     ?_gotoXY:	
  6102                           ; 1 bytes @ 0x5
  6103                           
  6104  0075                     ??_LCDInit:	
  6105                           ; 1 bytes @ 0x5
  6106                           
  6107  0075                     gotoXY@y:	
  6108                           ; 1 bytes @ 0x5
  6109                           
  6110  0075                     ___awdiv@counter:	
  6111                           ; 1 bytes @ 0x5
  6112                           
  6113  0075                     ___lwmod@counter:	
  6114                           ; 1 bytes @ 0x5
  6115                           
  6116                           
  6117                           ; 1 bytes @ 0x5
  6118  0075                     	ds	1
  6119  0076                     ??_gotoXY:	
  6120  0076                     ??_LCDWriteCharacter:	
  6121                           ; 1 bytes @ 0x6
  6122                           
  6123  0076                     ??___ftge:	
  6124                           ; 1 bytes @ 0x6
  6125                           
  6126  0076                     ___awdiv@sign:	
  6127                           ; 1 bytes @ 0x6
  6128                           
  6129                           
  6130                           ; 1 bytes @ 0x6
  6131  0076                     	ds	1
  6132  0077                     gotoXY@x:	
  6133  0077                     ___awdiv@quotient:	
  6134                           ; 1 bytes @ 0x7
  6135                           
  6136                           
  6137                           ; 2 bytes @ 0x7
  6138  0077                     	ds	1
  6139  0078                     ??_LCDClear:	
  6140  0078                     ??___aldiv:	
  6141                           ; 1 bytes @ 0x8
  6142                           
  6143  0078                     ?___awtoft:	
  6144                           ; 1 bytes @ 0x8
  6145                           
  6146  0078                     ___awtoft@c:	
  6147                           ; 3 bytes @ 0x8
  6148                           
  6149                           
  6150                           ; 2 bytes @ 0x8
  6151  0078                     	ds	1
  6152  0079                     LCDWriteCharacter@character:	
  6153  0079                     readIAnalog@analog_channel:	
  6154                           ; 1 bytes @ 0x9
  6155                           
  6156  0079                     LCDClear@index:	
  6157                           ; 2 bytes @ 0x9
  6158                           
  6159                           
  6160                           ; 2 bytes @ 0x9
  6161  0079                     	ds	1
  6162  007A                     LCDWriteCharacter@base:	
  6163                           
  6164                           ; 2 bytes @ 0xA
  6165  007A                     	ds	1
  6166  007B                     ??___awtoft:	
  6167  007B                     readIAnalog@value:	
  6168                           ; 1 bytes @ 0xB
  6169                           
  6170                           
  6171                           ; 2 bytes @ 0xB
  6172  007B                     	ds	1
  6173  007C                     ?_LCDWriteString:	
  6174  007C                     LCDWriteString@characters:	
  6175                           ; 1 bytes @ 0xC
  6176                           
  6177                           
  6178                           ; 2 bytes @ 0xC
  6179  007C                     	ds	1
  6180  007D                     ___awtoft@sign:	
  6181                           
  6182                           ; 1 bytes @ 0xD
  6183  007D                     	ds	1
  6184  007E                     ??_eval_poly:	
  6185  007E                     ??_tempCalc:	
  6186                           ; 1 bytes @ 0xE
  6187                           
  6188  007E                     ??___ftsub:	
  6189                           ; 1 bytes @ 0xE
  6190                           
  6191                           
  6192                           	psect	cstackBANK0
  6193  0020                     __pcstackBANK0:	
  6194                           ; 1 bytes @ 0xE
  6195                           
  6196  0020                     ??_LCDWriteString:	
  6197  0020                     ?_LCDWriteInt:	
  6198                           ; 1 bytes @ 0x0
  6199                           
  6200  0020                     ?___ftdiv:	
  6201                           ; 1 bytes @ 0x0
  6202                           
  6203  0020                     ?___ftmul:	
  6204                           ; 3 bytes @ 0x0
  6205                           
  6206  0020                     ___aldiv@counter:	
  6207                           ; 3 bytes @ 0x0
  6208                           
  6209  0020                     LCDWriteInt@value:	
  6210                           ; 1 bytes @ 0x0
  6211                           
  6212  0020                     ___ftdiv@f2:	
  6213                           ; 2 bytes @ 0x0
  6214                           
  6215  0020                     ___ftmul@f1:	
  6216                           ; 3 bytes @ 0x0
  6217                           
  6218                           
  6219                           ; 3 bytes @ 0x0
  6220  0020                     	ds	1
  6221  0021                     ___aldiv@sign:	
  6222                           
  6223                           ; 1 bytes @ 0x1
  6224  0021                     	ds	1
  6225  0022                     LCDWriteInt@fieldLength:	
  6226  0022                     ___aldiv@quotient:	
  6227                           ; 1 bytes @ 0x2
  6228                           
  6229                           
  6230                           ; 4 bytes @ 0x2
  6231  0022                     	ds	1
  6232  0023                     LCDWriteInt@numPlaces:	
  6233  0023                     ___ftdiv@f1:	
  6234                           ; 1 bytes @ 0x3
  6235                           
  6236  0023                     ___ftmul@f2:	
  6237                           ; 3 bytes @ 0x3
  6238                           
  6239                           
  6240                           ; 3 bytes @ 0x3
  6241  0023                     	ds	1
  6242  0024                     LCDWriteInt@sign:	
  6243                           
  6244                           ; 1 bytes @ 0x4
  6245  0024                     	ds	1
  6246  0025                     ??_LCDWriteInt:	
  6247                           
  6248                           ; 1 bytes @ 0x5
  6249  0025                     	ds	1
  6250  0026                     ??___ftdiv:	
  6251  0026                     ??___ftmul:	
  6252                           ; 1 bytes @ 0x6
  6253                           
  6254  0026                     ?_readIAnalog:	
  6255                           ; 1 bytes @ 0x6
  6256                           
  6257  0026                     readIAnalog@channel:	
  6258                           ; 2 bytes @ 0x6
  6259                           
  6260                           
  6261                           ; 2 bytes @ 0x6
  6262  0026                     	ds	2
  6263  0028                     ??_readIAnalog:	
  6264                           
  6265                           ; 1 bytes @ 0x8
  6266  0028                     	ds	1
  6267  0029                     LCDWriteInt@str:	
  6268                           
  6269                           ; 5 bytes @ 0x9
  6270  0029                     	ds	1
  6271  002A                     ___ftdiv@cntr:	
  6272  002A                     ___ftmul@exp:	
  6273                           ; 1 bytes @ 0xA
  6274                           
  6275                           
  6276                           ; 1 bytes @ 0xA
  6277  002A                     	ds	1
  6278  002B                     ___ftdiv@f3:	
  6279  002B                     ___ftmul@f3_as_product:	
  6280                           ; 3 bytes @ 0xB
  6281                           
  6282                           
  6283                           ; 3 bytes @ 0xB
  6284  002B                     	ds	3
  6285  002E                     LCDWriteInt@j:	
  6286  002E                     ___ftdiv@exp:	
  6287                           ; 1 bytes @ 0xE
  6288                           
  6289  002E                     ___ftmul@cntr:	
  6290                           ; 1 bytes @ 0xE
  6291                           
  6292                           
  6293                           ; 1 bytes @ 0xE
  6294  002E                     	ds	1
  6295  002F                     LCDWriteInt@i:	
  6296  002F                     ___ftdiv@sign:	
  6297                           ; 1 bytes @ 0xF
  6298                           
  6299  002F                     ___ftmul@sign:	
  6300                           ; 1 bytes @ 0xF
  6301                           
  6302                           
  6303                           ; 1 bytes @ 0xF
  6304  002F                     	ds	1
  6305  0030                     ?___ftadd:	
  6306  0030                     ?___fttol:	
  6307                           ; 3 bytes @ 0x10
  6308                           
  6309  0030                     ___ftadd@f1:	
  6310                           ; 4 bytes @ 0x10
  6311                           
  6312  0030                     ___fttol@f1:	
  6313                           ; 3 bytes @ 0x10
  6314                           
  6315                           
  6316                           ; 3 bytes @ 0x10
  6317  0030                     	ds	3
  6318  0033                     ___ftadd@f2:	
  6319                           
  6320                           ; 3 bytes @ 0x13
  6321  0033                     	ds	1
  6322  0034                     ??___fttol:	
  6323                           
  6324                           ; 1 bytes @ 0x14
  6325  0034                     	ds	2
  6326  0036                     ??___ftadd:	
  6327                           
  6328                           ; 1 bytes @ 0x16
  6329  0036                     	ds	2
  6330  0038                     ___fttol@sign1:	
  6331                           
  6332                           ; 1 bytes @ 0x18
  6333  0038                     	ds	1
  6334  0039                     ___fttol@lval:	
  6335                           
  6336                           ; 4 bytes @ 0x19
  6337  0039                     	ds	1
  6338  003A                     ___ftadd@sign:	
  6339                           
  6340                           ; 1 bytes @ 0x1A
  6341  003A                     	ds	1
  6342  003B                     ___ftadd@exp2:	
  6343                           
  6344                           ; 1 bytes @ 0x1B
  6345  003B                     	ds	1
  6346  003C                     ___ftadd@exp1:	
  6347                           
  6348                           ; 1 bytes @ 0x1C
  6349  003C                     	ds	1
  6350  003D                     ?_eval_poly:	
  6351  003D                     ?___ftsub:	
  6352                           ; 3 bytes @ 0x1D
  6353                           
  6354  003D                     ___fttol@exp1:	
  6355                           ; 3 bytes @ 0x1D
  6356                           
  6357  003D                     ___ftsub@f2:	
  6358                           ; 1 bytes @ 0x1D
  6359                           
  6360  003D                     eval_poly@x:	
  6361                           ; 3 bytes @ 0x1D
  6362                           
  6363                           
  6364                           ; 3 bytes @ 0x1D
  6365  003D                     	ds	1
  6366  003E                     ??_calculateCurrent0:	
  6367  003E                     ??_calculateCurrent1:	
  6368                           ; 1 bytes @ 0x1E
  6369                           
  6370  003E                     ??_calculateCurrent2:	
  6371                           ; 1 bytes @ 0x1E
  6372                           
  6373  003E                     ??_calculateCurrent3:	
  6374                           ; 1 bytes @ 0x1E
  6375                           
  6376  003E                     ??_Init_Battery_State_Machine:	
  6377                           ; 1 bytes @ 0x1E
  6378                           
  6379  003E                     ??_Battery_State_Machine:	
  6380                           ; 1 bytes @ 0x1E
  6381                           
  6382  003E                     ??_cc_cv_mode:	
  6383                           ; 1 bytes @ 0x1E
  6384                           
  6385                           
  6386                           ; 1 bytes @ 0x1E
  6387  003E                     	ds	2
  6388  0040                     eval_poly@d:	
  6389  0040                     ___ftsub@f1:	
  6390                           ; 2 bytes @ 0x20
  6391                           
  6392                           
  6393                           ; 3 bytes @ 0x20
  6394  0040                     	ds	2
  6395  0042                     Init_Battery_State_Machine@z:	
  6396  0042                     eval_poly@n:	
  6397                           ; 1 bytes @ 0x22
  6398                           
  6399                           
  6400                           ; 2 bytes @ 0x22
  6401  0042                     	ds	1
  6402  0043                     ??_SYSTEM_Initialize:	
  6403  0043                     Battery_State_Machine@z:	
  6404                           ; 1 bytes @ 0x23
  6405                           
  6406                           
  6407                           ; 1 bytes @ 0x23
  6408  0043                     	ds	1
  6409  0044                     eval_poly@res:	
  6410                           
  6411                           ; 3 bytes @ 0x24
  6412  0044                     	ds	1
  6413  0045                     cc_cv_mode@z:	
  6414                           
  6415                           ; 1 bytes @ 0x25
  6416  0045                     	ds	2
  6417  0047                     ?_log:	
  6418  0047                     log@x:	
  6419                           ; 3 bytes @ 0x27
  6420                           
  6421                           
  6422                           ; 3 bytes @ 0x27
  6423  0047                     	ds	3
  6424  004A                     ??_log:	
  6425                           
  6426                           ; 1 bytes @ 0x2A
  6427  004A                     	ds	1
  6428  004B                     log@exponent:	
  6429                           
  6430                           ; 2 bytes @ 0x2B
  6431  004B                     	ds	2
  6432  004D                     ?_tempCalc:	
  6433  004D                     tempCalc@analogValue:	
  6434                           ; 2 bytes @ 0x2D
  6435                           
  6436                           
  6437                           ; 2 bytes @ 0x2D
  6438  004D                     	ds	2
  6439  004F                     tempCalc@R:	
  6440                           
  6441                           ; 3 bytes @ 0x2F
  6442  004F                     	ds	3
  6443  0052                     _tempCalc$1189:	
  6444                           
  6445                           ; 3 bytes @ 0x32
  6446  0052                     	ds	3
  6447  0055                     tempCalc@steinhart:	
  6448                           
  6449                           ; 3 bytes @ 0x35
  6450  0055                     	ds	3
  6451  0058                     ??_main:	
  6452                           
  6453                           ; 1 bytes @ 0x38
  6454  0058                     	ds	2
  6455  005A                     main@efficiency:	
  6456                           
  6457                           ; 3 bytes @ 0x3A
  6458  005A                     	ds	3
  6459  005D                     main@IOutTotal:	
  6460                           
  6461                           ; 2 bytes @ 0x3D
  6462  005D                     	ds	2
  6463  005F                     main@faultCount:	
  6464                           
  6465                           ; 2 bytes @ 0x3F
  6466  005F                     	ds	2
  6467  0061                     main@faultNotReset:	
  6468                           
  6469                           ; 2 bytes @ 0x41
  6470  0061                     	ds	2
  6471  0063                     main@slowLoop:	
  6472                           
  6473                           ; 1 bytes @ 0x43
  6474  0063                     	ds	1
  6475  0064                     main@displayRefresh:	
  6476                           
  6477                           ; 1 bytes @ 0x44
  6478  0064                     	ds	1
  6479  0065                     main@MPPT0:	
  6480                           
  6481                           ; 2 bytes @ 0x45
  6482  0065                     	ds	2
  6483  0067                     main@MPPT1:	
  6484                           
  6485                           ; 2 bytes @ 0x47
  6486  0067                     	ds	2
  6487  0069                     main@menuButton:	
  6488                           
  6489                           ; 1 bytes @ 0x49
  6490  0069                     	ds	1
  6491  006A                     main@j:	
  6492                           
  6493                           ; 1 bytes @ 0x4A
  6494  006A                     	ds	1
  6495  006B                     main@dutyCycle6:	
  6496                           
  6497                           ; 2 bytes @ 0x4B
  6498  006B                     	ds	2
  6499  006D                     main@dutyCycle7:	
  6500                           
  6501                           ; 2 bytes @ 0x4D
  6502  006D                     	ds	2
  6503                           
  6504                           	psect	maintext
  6505  02C5                     __pmaintext:	
  6506 ;;
  6507 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  6508 ;;
  6509 ;; *************** function _main *****************
  6510 ;; Defined at:
  6511 ;;		line 42 in file "main.c"
  6512 ;; Parameters:    Size  Location     Type
  6513 ;;		None
  6514 ;; Auto vars:     Size  Location     Type
  6515 ;;  efficiency      3   58[BANK0 ] float 
  6516 ;;  dutyCycle7      2   77[BANK0 ] unsigned int 
  6517 ;;  dutyCycle6      2   75[BANK0 ] unsigned int 
  6518 ;;  MPPT1           2   71[BANK0 ] int 
  6519 ;;  MPPT0           2   69[BANK0 ] int 
  6520 ;;  faultNotRese    2   65[BANK0 ] unsigned int 
  6521 ;;  faultCount      2   63[BANK0 ] unsigned int 
  6522 ;;  IOutTotal       2   61[BANK0 ] int 
  6523 ;;  j               1   74[BANK0 ] unsigned char 
  6524 ;;  menuButton      1   73[BANK0 ] unsigned char 
  6525 ;;  displayRefre    1   68[BANK0 ] unsigned char 
  6526 ;;  slowLoop        1   67[BANK0 ] unsigned char 
  6527 ;; Return value:  Size  Location     Type
  6528 ;;                  1    wreg      void 
  6529 ;; Registers used:
  6530 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6531 ;; Tracked objects:
  6532 ;;		On entry : B1F/0
  6533 ;;		On exit  : 0/0
  6534 ;;		Unchanged: 0/0
  6535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6537 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6538 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6539 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6540 ;;Total ram usage:       23 bytes
  6541 ;; Hardware stack levels required when called:    5
  6542 ;; This function calls:
  6543 ;;		_ADCRead
  6544 ;;		_Battery_State_Machine
  6545 ;;		_LCDClear
  6546 ;;		_LCDInit
  6547 ;;		_LCDWriteCharacter
  6548 ;;		_LCDWriteInt
  6549 ;;		_LCDWriteString
  6550 ;;		_PWM6_LoadDutyValue
  6551 ;;		_PWM7_LoadDutyValue
  6552 ;;		_SYSTEM_Initialize
  6553 ;;		___awtoft
  6554 ;;		___ftdiv
  6555 ;;		___fttol
  6556 ;;		_calculateCurrent0
  6557 ;;		_calculateCurrent1
  6558 ;;		_calculateCurrent2
  6559 ;;		_calculateCurrent3
  6560 ;;		_cc_cv_mode
  6561 ;;		_gotoXY
  6562 ;;		_readButton
  6563 ;;		_readIAnalog
  6564 ;;		_tempCalc
  6565 ;; This function is called by:
  6566 ;;		Startup code after reset
  6567 ;; This function uses a non-reentrant model
  6568 ;;
  6569                           
  6570                           
  6571                           ;psect for function _main
  6572  02C5                     _main:	
  6573                           
  6574                           ;main.c: 44: int16_t MPPT0 = 1525;
  6575                           
  6576                           ;incstack = 0
  6577                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6578  02C5  30F5               	movlw	245
  6579  02C6  0020               	movlb	0	; select bank0
  6580  02C7  00E5               	movwf	main@MPPT0
  6581  02C8  3005               	movlw	5
  6582  02C9  00E6               	movwf	main@MPPT0+1
  6583                           
  6584                           ;main.c: 45: int16_t MPPT1 = 1525;
  6585  02CA  30F5               	movlw	245
  6586  02CB  00E7               	movwf	main@MPPT1
  6587  02CC  3005               	movlw	5
  6588  02CD  00E8               	movwf	main@MPPT1+1
  6589                           
  6590                           ;main.c: 47: uint16_t dutyCycle6 = 1023;
  6591  02CE  30FF               	movlw	255
  6592  02CF  00EB               	movwf	main@dutyCycle6
  6593  02D0  3003               	movlw	3
  6594  02D1  00EC               	movwf	main@dutyCycle6+1
  6595                           
  6596                           ;main.c: 48: uint16_t dutyCycle7 = 1023;
  6597  02D2  30FF               	movlw	255
  6598  02D3  00ED               	movwf	main@dutyCycle7
  6599  02D4  3003               	movlw	3
  6600  02D5  00EE               	movwf	main@dutyCycle7+1
  6601                           
  6602                           ;main.c: 50: int16_t IOutTotal = 0;
  6603  02D6  01DD               	clrf	main@IOutTotal
  6604  02D7  01DE               	clrf	main@IOutTotal+1
  6605                           
  6606                           ;main.c: 51: uint8_t j = 0;
  6607  02D8  01EA               	clrf	main@j
  6608                           
  6609                           ;main.c: 52: uint8_t slowLoop = 200;
  6610  02D9  30C8               	movlw	200
  6611  02DA  00D8               	movwf	??_main
  6612  02DB  0858               	movf	??_main,w
  6613  02DC  00E3               	movwf	main@slowLoop
  6614                           
  6615                           ;main.c: 53: uint8_t displayRefresh = 0;
  6616  02DD  01E4               	clrf	main@displayRefresh
  6617                           
  6618                           ;main.c: 54: float efficiency = 0;
  6619  02DE  3000               	movlw	0
  6620  02DF  00DA               	movwf	main@efficiency
  6621  02E0  3000               	movlw	0
  6622  02E1  00DB               	movwf	main@efficiency+1
  6623  02E2  3000               	movlw	0
  6624  02E3  00DC               	movwf	main@efficiency+2
  6625                           
  6626                           ;main.c: 55: extern int8_t Imode[2];
  6627                           ;main.c: 56: extern int16_t Vref[2];
  6628                           ;main.c: 57: extern int16_t Iref[2];
  6629                           ;main.c: 58: uint8_t menuButton = 0;
  6630  02E4  01E9               	clrf	main@menuButton
  6631                           
  6632                           ;main.c: 59: uint16_t faultCount = 0;
  6633  02E5  01DF               	clrf	main@faultCount
  6634  02E6  01E0               	clrf	main@faultCount+1
  6635                           
  6636                           ;main.c: 60: uint16_t faultNotReset = 0;
  6637  02E7  01E1               	clrf	main@faultNotReset
  6638  02E8  01E2               	clrf	main@faultNotReset+1
  6639                           
  6640                           ;main.c: 61: extern int8_t VHoldMode[2];
  6641                           ;main.c: 62: extern uint8_t batteryState[2];
  6642                           ;main.c: 64: extern uint16_t IminCount[2];
  6643                           ;main.c: 67: SYSTEM_Initialize();
  6644  02E9  3194  246B  3182   	fcall	_SYSTEM_Initialize
  6645                           
  6646                           ;main.c: 69: LCDClear();
  6647  02EC  3193  23D3  3182   	fcall	_LCDClear
  6648  02EF                     l3141:	
  6649                           ;main.c: 71: void calculateCurrent0(void);
  6650                           ;main.c: 72: void calculateCurrent1(void);
  6651                           ;main.c: 73: void calculateCurrent2(void);
  6652                           ;main.c: 74: void calculateCurrent3(void);
  6653                           ;main.c: 88: while (1)
  6654                           
  6655                           
  6656                           ;main.c: 89: {
  6657                           ;main.c: 90: if(!(RB2))
  6658  02EF  0020               	movlb	0	; select bank0
  6659  02F0  190D               	btfsc	13,2	;volatile
  6660  02F1  2B02               	goto	l3149
  6661                           
  6662                           ;main.c: 91: {
  6663                           ;main.c: 92: LATA5=0;
  6664  02F2  1296               	bcf	22,5	;volatile
  6665                           
  6666                           ;main.c: 93: _delay((unsigned long)((400)*(32000000/4000000.0)));
  6667  02F3  3005               	movlw	5
  6668  02F4  0020               	movlb	0	; select bank0
  6669  02F5  00D8               	movwf	??_main
  6670  02F6  3026               	movlw	38
  6671  02F7                     u3987:	
  6672  02F7  0B89               	decfsz	9,f
  6673  02F8  2AF7               	goto	u3987
  6674  02F9  0BD8               	decfsz	??_main,f
  6675  02FA  2AF7               	goto	u3987
  6676  02FB  0000               	nop
  6677                           
  6678                           ;main.c: 94: faultCount+=1;
  6679  02FC  3001               	movlw	1
  6680  02FD  0020               	movlb	0	; select bank0
  6681  02FE  07DF               	addwf	main@faultCount,f
  6682  02FF  3000               	movlw	0
  6683  0300  3DE0               	addwfc	main@faultCount+1,f
  6684                           
  6685                           ;main.c: 95: LATA5=1;
  6686  0301  1696               	bsf	22,5	;volatile
  6687  0302                     l3149:	
  6688                           
  6689                           ;main.c: 96: }
  6690                           ;main.c: 97: for(j=0;j<4;j++) Ianalogs[j]=readIAnalog(j);
  6691  0302  01EA               	clrf	main@j
  6692  0303  3004               	movlw	4
  6693  0304  026A               	subwf	main@j,w
  6694  0305  1803               	btfsc	3,0
  6695  0306  2B22               	goto	l3161
  6696  0307                     l3155:	
  6697  0307  086A               	movf	main@j,w
  6698  0308  00D8               	movwf	??_main
  6699  0309  01D9               	clrf	??_main+1
  6700  030A  0858               	movf	??_main,w
  6701  030B  00A6               	movwf	readIAnalog@channel
  6702  030C  0859               	movf	??_main+1,w
  6703  030D  00A7               	movwf	readIAnalog@channel+1
  6704  030E  318E  26B4  3182   	fcall	_readIAnalog
  6705  0311  0020               	movlb	0	; select bank0
  6706  0312  356A               	lslf	main@j,w
  6707  0313  3EA0               	addlw	(low (_Ianalogs| 0))& (0+255)
  6708  0314  0086               	movwf	6
  6709  0315  0187               	clrf	7
  6710  0316  0826               	movf	?_readIAnalog,w
  6711  0317  3FC0               	movwi [0]fsr1
  6712  0318  0827               	movf	?_readIAnalog+1,w
  6713  0319  3FC1               	movwi [1]fsr1
  6714  031A  3001               	movlw	1
  6715  031B  00D8               	movwf	??_main
  6716  031C  0858               	movf	??_main,w
  6717  031D  07EA               	addwf	main@j,f
  6718  031E  3004               	movlw	4
  6719  031F  026A               	subwf	main@j,w
  6720  0320  1C03               	skipc
  6721  0321  2B07               	goto	l3155
  6722  0322                     l3161:	
  6723                           
  6724                           ;main.c: 99: Vanalogs[0]=ADCRead(21);
  6725  0322  3015               	movlw	21
  6726  0323  3192  22F5  3182   	fcall	_ADCRead
  6727  0326  0871               	movf	?_ADCRead+1,w
  6728  0327  0021               	movlb	1	; select bank1
  6729  0328  00A9               	movwf	(_Vanalogs+1)^(0+128)
  6730  0329  0870               	movf	?_ADCRead,w
  6731  032A  00A8               	movwf	_Vanalogs^(0+128)
  6732                           
  6733                           ;main.c: 101: Vanalogs[1]=ADCRead(17);
  6734  032B  3011               	movlw	17
  6735  032C  3192  22F5  3182   	fcall	_ADCRead
  6736  032F  0871               	movf	?_ADCRead+1,w
  6737  0330  0021               	movlb	1	; select bank1
  6738  0331  00AB               	movwf	((_Vanalogs+1)^(0+128)+2)
  6739  0332  0870               	movf	?_ADCRead,w
  6740  0333  00AA               	movwf	(_Vanalogs^(0+128)+2)
  6741                           
  6742                           ;main.c: 103: Vanalogs[2]=ADCRead(23);
  6743  0334  3017               	movlw	23
  6744  0335  3192  22F5  3182   	fcall	_ADCRead
  6745  0338  0871               	movf	?_ADCRead+1,w
  6746  0339  0021               	movlb	1	; select bank1
  6747  033A  00AD               	movwf	((_Vanalogs+1)^(0+128)+4)
  6748  033B  0870               	movf	?_ADCRead,w
  6749  033C  00AC               	movwf	(_Vanalogs^(0+128)+4)
  6750                           
  6751                           ;main.c: 105: Vanalogs[3]=ADCRead(19);
  6752  033D  3013               	movlw	19
  6753  033E  3192  22F5  3182   	fcall	_ADCRead
  6754  0341  0871               	movf	?_ADCRead+1,w
  6755  0342  0021               	movlb	1	; select bank1
  6756  0343  00AF               	movwf	((_Vanalogs+1)^(0+128)+6)
  6757  0344  0870               	movf	?_ADCRead,w
  6758  0345  00AE               	movwf	(_Vanalogs^(0+128)+6)
  6759                           
  6760                           ;main.c: 107: if(!(RB2))faultNotReset+=1;
  6761  0346  0020               	movlb	0	; select bank0
  6762  0347  190D               	btfsc	13,2	;volatile
  6763  0348  2B4D               	goto	l3167
  6764  0349  3001               	movlw	1
  6765  034A  07E1               	addwf	main@faultNotReset,f
  6766  034B  3000               	movlw	0
  6767  034C  3DE2               	addwfc	main@faultNotReset+1,f
  6768  034D                     l3167:	
  6769                           
  6770                           ;main.c: 109: voltage[0]=(int16_t)(Vanalogs[0]/.5448);
  6771  034D  0021               	movlb	1	; select bank1
  6772  034E  0829               	movf	(_Vanalogs+1)^(0+128),w
  6773  034F  00F9               	movwf	___awtoft@c+1
  6774  0350  0828               	movf	_Vanalogs^(0+128),w
  6775  0351  00F8               	movwf	___awtoft@c
  6776  0352  3193  238E  3182   	fcall	___awtoft
  6777  0355  0878               	movf	?___awtoft,w
  6778  0356  0020               	movlb	0	; select bank0
  6779  0357  00A3               	movwf	___ftdiv@f1
  6780  0358  0879               	movf	?___awtoft+1,w
  6781  0359  00A4               	movwf	___ftdiv@f1+1
  6782  035A  087A               	movf	?___awtoft+2,w
  6783  035B  00A5               	movwf	___ftdiv@f1+2
  6784  035C  3078               	movlw	120
  6785  035D  00A0               	movwf	___ftdiv@f2
  6786  035E  300B               	movlw	11
  6787  035F  00A1               	movwf	___ftdiv@f2+1
  6788  0360  303F               	movlw	63
  6789  0361  00A2               	movwf	___ftdiv@f2+2
  6790  0362  3189  21C0  3182   	fcall	___ftdiv
  6791  0365  0020               	movlb	0	; select bank0
  6792  0366  0820               	movf	?___ftdiv,w
  6793  0367  00B0               	movwf	___fttol@f1
  6794  0368  0821               	movf	?___ftdiv+1,w
  6795  0369  00B1               	movwf	___fttol@f1+1
  6796  036A  0822               	movf	?___ftdiv+2,w
  6797  036B  00B2               	movwf	___fttol@f1+2
  6798  036C  3189  2139  3182   	fcall	___fttol
  6799  036F  0020               	movlb	0	; select bank0
  6800  0370  0831               	movf	?___fttol+1,w
  6801  0371  0021               	movlb	1	; select bank1
  6802  0372  00B1               	movwf	(_voltage+1)^(0+128)
  6803  0373  0020               	movlb	0	; select bank0
  6804  0374  0830               	movf	?___fttol,w
  6805  0375  0021               	movlb	1	; select bank1
  6806  0376  00B0               	movwf	_voltage^(0+128)
  6807                           
  6808                           ;main.c: 112: voltage[1]=(int16_t)(Vanalogs[1]/.5448);
  6809  0377  082B               	movf	((_Vanalogs+1)^(0+128)+2),w
  6810  0378  00F9               	movwf	___awtoft@c+1
  6811  0379  082A               	movf	(_Vanalogs^(0+128)+2),w
  6812  037A  00F8               	movwf	___awtoft@c
  6813  037B  3193  238E  3182   	fcall	___awtoft
  6814  037E  0878               	movf	?___awtoft,w
  6815  037F  0020               	movlb	0	; select bank0
  6816  0380  00A3               	movwf	___ftdiv@f1
  6817  0381  0879               	movf	?___awtoft+1,w
  6818  0382  00A4               	movwf	___ftdiv@f1+1
  6819  0383  087A               	movf	?___awtoft+2,w
  6820  0384  00A5               	movwf	___ftdiv@f1+2
  6821  0385  3078               	movlw	120
  6822  0386  00A0               	movwf	___ftdiv@f2
  6823  0387  300B               	movlw	11
  6824  0388  00A1               	movwf	___ftdiv@f2+1
  6825  0389  303F               	movlw	63
  6826  038A  00A2               	movwf	___ftdiv@f2+2
  6827  038B  3189  21C0  3182   	fcall	___ftdiv
  6828  038E  0020               	movlb	0	; select bank0
  6829  038F  0820               	movf	?___ftdiv,w
  6830  0390  00B0               	movwf	___fttol@f1
  6831  0391  0821               	movf	?___ftdiv+1,w
  6832  0392  00B1               	movwf	___fttol@f1+1
  6833  0393  0822               	movf	?___ftdiv+2,w
  6834  0394  00B2               	movwf	___fttol@f1+2
  6835  0395  3189  2139  3182   	fcall	___fttol
  6836  0398  0020               	movlb	0	; select bank0
  6837  0399  0831               	movf	?___fttol+1,w
  6838  039A  0021               	movlb	1	; select bank1
  6839  039B  00B3               	movwf	((_voltage+1)^(0+128)+2)
  6840  039C  0020               	movlb	0	; select bank0
  6841  039D  0830               	movf	?___fttol,w
  6842  039E  0021               	movlb	1	; select bank1
  6843  039F  00B2               	movwf	(_voltage^(0+128)+2)
  6844                           
  6845                           ;main.c: 114: voltage[2]=(int16_t)(Vanalogs[2]/.405775);
  6846  03A0  082D               	movf	((_Vanalogs+1)^(0+128)+4),w
  6847  03A1  00F9               	movwf	___awtoft@c+1
  6848  03A2  082C               	movf	(_Vanalogs^(0+128)+4),w
  6849  03A3  00F8               	movwf	___awtoft@c
  6850  03A4  3193  238E  3182   	fcall	___awtoft
  6851  03A7  0878               	movf	?___awtoft,w
  6852  03A8  0020               	movlb	0	; select bank0
  6853  03A9  00A3               	movwf	___ftdiv@f1
  6854  03AA  0879               	movf	?___awtoft+1,w
  6855  03AB  00A4               	movwf	___ftdiv@f1+1
  6856  03AC  087A               	movf	?___awtoft+2,w
  6857  03AD  00A5               	movwf	___ftdiv@f1+2
  6858  03AE  30C2               	movlw	194
  6859  03AF  00A0               	movwf	___ftdiv@f2
  6860  03B0  30CF               	movlw	207
  6861  03B1  00A1               	movwf	___ftdiv@f2+1
  6862  03B2  303E               	movlw	62
  6863  03B3  00A2               	movwf	___ftdiv@f2+2
  6864  03B4  3189  21C0  3182   	fcall	___ftdiv
  6865  03B7  0020               	movlb	0	; select bank0
  6866  03B8  0820               	movf	?___ftdiv,w
  6867  03B9  00B0               	movwf	___fttol@f1
  6868  03BA  0821               	movf	?___ftdiv+1,w
  6869  03BB  00B1               	movwf	___fttol@f1+1
  6870  03BC  0822               	movf	?___ftdiv+2,w
  6871  03BD  00B2               	movwf	___fttol@f1+2
  6872  03BE  3189  2139  3182   	fcall	___fttol
  6873  03C1  0020               	movlb	0	; select bank0
  6874  03C2  0831               	movf	?___fttol+1,w
  6875  03C3  0021               	movlb	1	; select bank1
  6876  03C4  00B5               	movwf	((_voltage+1)^(0+128)+4)
  6877  03C5  0020               	movlb	0	; select bank0
  6878  03C6  0830               	movf	?___fttol,w
  6879  03C7  0021               	movlb	1	; select bank1
  6880  03C8  00B4               	movwf	(_voltage^(0+128)+4)
  6881                           
  6882                           ;main.c: 116: voltage[3]=(int16_t)(Vanalogs[3]/.406788);
  6883  03C9  082F               	movf	((_Vanalogs+1)^(0+128)+6),w
  6884  03CA  00F9               	movwf	___awtoft@c+1
  6885  03CB  082E               	movf	(_Vanalogs^(0+128)+6),w
  6886  03CC  00F8               	movwf	___awtoft@c
  6887  03CD  3193  238E  3182   	fcall	___awtoft
  6888  03D0  0878               	movf	?___awtoft,w
  6889  03D1  0020               	movlb	0	; select bank0
  6890  03D2  00A3               	movwf	___ftdiv@f1
  6891  03D3  0879               	movf	?___awtoft+1,w
  6892  03D4  00A4               	movwf	___ftdiv@f1+1
  6893  03D5  087A               	movf	?___awtoft+2,w
  6894  03D6  00A5               	movwf	___ftdiv@f1+2
  6895  03D7  3047               	movlw	71
  6896  03D8  00A0               	movwf	___ftdiv@f2
  6897  03D9  30D0               	movlw	208
  6898  03DA  00A1               	movwf	___ftdiv@f2+1
  6899  03DB  303E               	movlw	62
  6900  03DC  00A2               	movwf	___ftdiv@f2+2
  6901  03DD  3189  21C0  3182   	fcall	___ftdiv
  6902  03E0  0020               	movlb	0	; select bank0
  6903  03E1  0820               	movf	?___ftdiv,w
  6904  03E2  00B0               	movwf	___fttol@f1
  6905  03E3  0821               	movf	?___ftdiv+1,w
  6906  03E4  00B1               	movwf	___fttol@f1+1
  6907  03E5  0822               	movf	?___ftdiv+2,w
  6908  03E6  00B2               	movwf	___fttol@f1+2
  6909  03E7  3189  2139  3182   	fcall	___fttol
  6910  03EA  0020               	movlb	0	; select bank0
  6911  03EB  0831               	movf	?___fttol+1,w
  6912  03EC  0021               	movlb	1	; select bank1
  6913  03ED  00B7               	movwf	((_voltage+1)^(0+128)+6)
  6914  03EE  0020               	movlb	0	; select bank0
  6915  03EF  0830               	movf	?___fttol,w
  6916  03F0  0021               	movlb	1	; select bank1
  6917  03F1  00B6               	movwf	(_voltage^(0+128)+6)
  6918                           
  6919                           ;main.c: 118: calculateCurrent0();
  6920  03F2  3195  251C  3182   	fcall	_calculateCurrent0
  6921                           
  6922                           ;main.c: 120: calculateCurrent1();
  6923  03F5  3195  2561  3182   	fcall	_calculateCurrent1
  6924                           
  6925                           ;main.c: 122: calculateCurrent2();
  6926  03F8  3195  25A6  3182   	fcall	_calculateCurrent2
  6927                           
  6928                           ;main.c: 124: calculateCurrent3();
  6929  03FB  3195  25EB  3182   	fcall	_calculateCurrent3
  6930                           
  6931                           ;main.c: 126: if(Imode[0])
  6932  03FE  0021               	movlb	1	; select bank1
  6933  03FF  085E               	movf	_Imode^(0+128),w
  6934  0400  1903               	btfsc	3,2
  6935  0401  2C20               	goto	l3197
  6936                           
  6937                           ;main.c: 127: {
  6938                           ;main.c: 128: if(voltage[2]<MPPT0)
  6939  0402  0835               	movf	((_voltage+1)^(0+128)+4),w
  6940  0403  3A80               	xorlw	128
  6941  0404  0020               	movlb	0	; select bank0
  6942  0405  00D8               	movwf	??_main
  6943  0406  0866               	movf	main@MPPT0+1,w
  6944  0407  3A80               	xorlw	128
  6945  0408  0258               	subwf	??_main,w
  6946  0409  1D03               	skipz
  6947  040A  2C0E               	goto	u3735
  6948  040B  0865               	movf	main@MPPT0,w
  6949  040C  0021               	movlb	1	; select bank1
  6950  040D  0234               	subwf	(_voltage^(0+128)+4),w
  6951  040E                     u3735:	
  6952  040E  1C03               	btfss	3,0
  6953  040F  2C31               	goto	L1
  6954                           
  6955                           ;main.c: 135: else if(voltage[2]>MPPT0)
  6956                           
  6957                           ;main.c: 133: }
  6958                           ;main.c: 134: }
  6959                           
  6960                           ;main.c: 131: {
  6961                           ;main.c: 132: dutyCycle6+=1;
  6962                           
  6963                           ;main.c: 129: {
  6964                           ;main.c: 130: if(dutyCycle6<1023)
  6965  0410  0020               	movlb	0	; select bank0
  6966  0411  0866               	movf	main@MPPT0+1,w
  6967  0412  3A80               	xorlw	128
  6968  0413  00D8               	movwf	??_main
  6969  0414  0021               	movlb	1	; select bank1
  6970  0415  0835               	movf	((_voltage+1)^(0+128)+4),w
  6971  0416  3A80               	xorlw	128
  6972  0417  0020               	movlb	0	; select bank0
  6973  0418  0258               	subwf	??_main,w
  6974  0419  1D03               	skipz
  6975  041A  2C4D               	goto	u3795
  6976  041B  0021               	movlb	1	; select bank1
  6977  041C  0834               	movf	(_voltage^(0+128)+4),w
  6978  041D  0020               	movlb	0	; select bank0
  6979  041E  0265               	subwf	main@MPPT0,w
  6980  041F  2C4D               	goto	u3795
  6981  0420                     l3197:	
  6982                           ;main.c: 143: }
  6983                           
  6984                           ;main.c: 140: }
  6985                           ;main.c: 141: }
  6986                           
  6987                           ;main.c: 138: {
  6988                           ;main.c: 139: dutyCycle6-=1;
  6989                           
  6990                           ;main.c: 136: {
  6991                           ;main.c: 137: if(dutyCycle6>0)
  6992                           
  6993                           
  6994                           ;main.c: 144: else
  6995                           ;main.c: 145: {
  6996                           ;main.c: 146: if(voltage[0]>(int16_t)Vref[0])
  6997  0420  0021               	movlb	1	; select bank1
  6998  0421  0841               	movf	(_Vref+1)^(0+128),w
  6999  0422  3A80               	xorlw	128
  7000  0423  0020               	movlb	0	; select bank0
  7001  0424  00D8               	movwf	??_main
  7002  0425  0021               	movlb	1	; select bank1
  7003  0426  0831               	movf	(_voltage+1)^(0+128),w
  7004  0427  3A80               	xorlw	128
  7005  0428  0020               	movlb	0	; select bank0
  7006  0429  0258               	subwf	??_main,w
  7007  042A  1D03               	skipz
  7008  042B  2C2F               	goto	u3775
  7009  042C  0021               	movlb	1	; select bank1
  7010  042D  0830               	movf	_voltage^(0+128),w
  7011  042E  0240               	subwf	_Vref^(0+128),w
  7012  042F                     u3775:	
  7013  042F  1803               	skipnc
  7014  0430  2C3E               	goto	l3203
  7015  0431                     L1:	
  7016                           
  7017                           ;main.c: 147: {
  7018                           ;main.c: 148: if(dutyCycle6<1023) dutyCycle6+=1;
  7019  0431  3003               	movlw	3
  7020  0432  0020               	movlb	0	; select bank0
  7021  0433  026C               	subwf	main@dutyCycle6+1,w
  7022  0434  30FF               	movlw	255
  7023  0435  1903               	skipnz
  7024  0436  026B               	subwf	main@dutyCycle6,w
  7025  0437  1803               	skipnc
  7026  0438  2C58               	goto	l3209
  7027  0439  3001               	movlw	1
  7028  043A  07EB               	addwf	main@dutyCycle6,f
  7029  043B  3000               	movlw	0
  7030  043C  3DEC               	addwfc	main@dutyCycle6+1,f
  7031                           
  7032                           ;main.c: 149: }
  7033  043D  2C58               	goto	l3209
  7034  043E                     l3203:	
  7035                           
  7036                           ;main.c: 150: else if(voltage[0]<(int16_t)Vref[0])
  7037  043E  0021               	movlb	1	; select bank1
  7038  043F  0831               	movf	(_voltage+1)^(0+128),w
  7039  0440  3A80               	xorlw	128
  7040  0441  0020               	movlb	0	; select bank0
  7041  0442  00D8               	movwf	??_main
  7042  0443  0021               	movlb	1	; select bank1
  7043  0444  0841               	movf	(_Vref+1)^(0+128),w
  7044  0445  3A80               	xorlw	128
  7045  0446  0020               	movlb	0	; select bank0
  7046  0447  0258               	subwf	??_main,w
  7047  0448  1D03               	skipz
  7048  0449  2C4D               	goto	u3795
  7049  044A  0021               	movlb	1	; select bank1
  7050  044B  0840               	movf	_Vref^(0+128),w
  7051  044C  0230               	subwf	_voltage^(0+128),w
  7052  044D                     u3795:	
  7053  044D  1803               	skipnc
  7054  044E  2C58               	goto	l3209
  7055                           
  7056                           ;main.c: 151: {
  7057                           ;main.c: 152: if(dutyCycle6>0) dutyCycle6-=1;;
  7058  044F  0020               	movlb	0	; select bank0
  7059  0450  086B               	movf	main@dutyCycle6,w
  7060  0451  046C               	iorwf	main@dutyCycle6+1,w
  7061  0452  1903               	btfsc	3,2
  7062  0453  2C58               	goto	l3209
  7063  0454  3001               	movlw	1
  7064  0455  02EB               	subwf	main@dutyCycle6,f
  7065  0456  3000               	movlw	0
  7066  0457  3BEC               	subwfb	main@dutyCycle6+1,f
  7067  0458                     l3209:	
  7068                           ;main.c: 153: }
  7069                           
  7070                           
  7071                           ;main.c: 155: }
  7072                           ;main.c: 157: if(Imode[1])
  7073  0458  0021               	movlb	1	; select bank1
  7074  0459  085F               	movf	(_Imode^(0+128)+1),w
  7075  045A  1903               	btfsc	3,2
  7076  045B  2C6B               	goto	l3221
  7077                           
  7078                           ;main.c: 158: {
  7079                           ;main.c: 159: if(voltage[3]<MPPT1)
  7080  045C  0837               	movf	((_voltage+1)^(0+128)+6),w
  7081  045D  3A80               	xorlw	128
  7082  045E  0020               	movlb	0	; select bank0
  7083  045F  00D8               	movwf	??_main
  7084  0460  0868               	movf	main@MPPT1+1,w
  7085  0461  3A80               	xorlw	128
  7086  0462  0258               	subwf	??_main,w
  7087  0463  1D03               	skipz
  7088  0464  2C68               	goto	u3825
  7089  0465  0867               	movf	main@MPPT1,w
  7090  0466  0021               	movlb	1	; select bank1
  7091  0467  0236               	subwf	(_voltage^(0+128)+6),w
  7092  0468                     u3825:	
  7093  0468  1C03               	btfss	3,0
  7094  0469  2C7C               	goto	L2
  7095                           
  7096                           ;main.c: 164: }
  7097                           ;main.c: 165: }
  7098                           
  7099                           ;main.c: 162: {
  7100                           ;main.c: 163: dutyCycle7+=1;
  7101                           
  7102                           ;main.c: 160: {
  7103                           ;main.c: 161: if(dutyCycle7<1023)
  7104  046A  2C9A               	goto	L3
  7105  046B                     l3221:	
  7106                           ;main.c: 169: }
  7107                           ;main.c: 170: }
  7108                           
  7109                           ;main.c: 167: {
  7110                           ;main.c: 168: dutyCycle7-=1;
  7111                           
  7112                           ;main.c: 166: else if(dutyCycle7>0)
  7113                           
  7114                           
  7115                           ;main.c: 171: else
  7116                           ;main.c: 172: {
  7117                           ;main.c: 173: if(voltage[1]>(int16_t)Vref[1])
  7118  046B  0021               	movlb	1	; select bank1
  7119  046C  0843               	movf	((_Vref+1)^(0+128)+2),w
  7120  046D  3A80               	xorlw	128
  7121  046E  0020               	movlb	0	; select bank0
  7122  046F  00D8               	movwf	??_main
  7123  0470  0021               	movlb	1	; select bank1
  7124  0471  0833               	movf	((_voltage+1)^(0+128)+2),w
  7125  0472  3A80               	xorlw	128
  7126  0473  0020               	movlb	0	; select bank0
  7127  0474  0258               	subwf	??_main,w
  7128  0475  1D03               	skipz
  7129  0476  2C7A               	goto	u3855
  7130  0477  0021               	movlb	1	; select bank1
  7131  0478  0832               	movf	(_voltage^(0+128)+2),w
  7132  0479  0242               	subwf	(_Vref^(0+128)+2),w
  7133  047A                     u3855:	
  7134  047A  1803               	skipnc
  7135  047B  2C89               	goto	l3227
  7136  047C                     L2:	
  7137                           
  7138                           ;main.c: 174: {
  7139                           ;main.c: 175: if(dutyCycle7<1023) dutyCycle7+=1;
  7140  047C  3003               	movlw	3
  7141  047D  0020               	movlb	0	; select bank0
  7142  047E  026E               	subwf	main@dutyCycle7+1,w
  7143  047F  30FF               	movlw	255
  7144  0480  1903               	skipnz
  7145  0481  026D               	subwf	main@dutyCycle7,w
  7146  0482  1803               	skipnc
  7147  0483  2CA3               	goto	l3233
  7148  0484  3001               	movlw	1
  7149  0485  07ED               	addwf	main@dutyCycle7,f
  7150  0486  3000               	movlw	0
  7151  0487  3DEE               	addwfc	main@dutyCycle7+1,f
  7152                           
  7153                           ;main.c: 176: }
  7154  0488  2CA3               	goto	l3233
  7155  0489                     l3227:	
  7156                           
  7157                           ;main.c: 177: else if(voltage[1]<(int16_t)Vref[1])
  7158  0489  0021               	movlb	1	; select bank1
  7159  048A  0833               	movf	((_voltage+1)^(0+128)+2),w
  7160  048B  3A80               	xorlw	128
  7161  048C  0020               	movlb	0	; select bank0
  7162  048D  00D8               	movwf	??_main
  7163  048E  0021               	movlb	1	; select bank1
  7164  048F  0843               	movf	((_Vref+1)^(0+128)+2),w
  7165  0490  3A80               	xorlw	128
  7166  0491  0020               	movlb	0	; select bank0
  7167  0492  0258               	subwf	??_main,w
  7168  0493  1D03               	skipz
  7169  0494  2C98               	goto	u3875
  7170  0495  0021               	movlb	1	; select bank1
  7171  0496  0842               	movf	(_Vref^(0+128)+2),w
  7172  0497  0232               	subwf	(_voltage^(0+128)+2),w
  7173  0498                     u3875:	
  7174  0498  1803               	skipnc
  7175  0499  2CA3               	goto	l3233
  7176  049A                     L3:	
  7177                           
  7178                           ;main.c: 178: {
  7179                           ;main.c: 179: if(dutyCycle7>0) dutyCycle7-=1;;
  7180  049A  0020               	movlb	0	; select bank0
  7181  049B  086D               	movf	main@dutyCycle7,w
  7182  049C  046E               	iorwf	main@dutyCycle7+1,w
  7183  049D  1903               	btfsc	3,2
  7184  049E  2CA3               	goto	l3233
  7185  049F  3001               	movlw	1
  7186  04A0  02ED               	subwf	main@dutyCycle7,f
  7187  04A1  3000               	movlw	0
  7188  04A2  3BEE               	subwfb	main@dutyCycle7+1,f
  7189  04A3                     l3233:	
  7190                           ;main.c: 180: }
  7191                           
  7192                           
  7193                           ;main.c: 182: }
  7194                           ;main.c: 184: slowLoop+=1;
  7195  04A3  3001               	movlw	1
  7196  04A4  0020               	movlb	0	; select bank0
  7197  04A5  00D8               	movwf	??_main
  7198  04A6  0858               	movf	??_main,w
  7199  04A7  07E3               	addwf	main@slowLoop,f
  7200                           
  7201                           ;main.c: 187: PWM6_LoadDutyValue(dutyCycle6);
  7202  04A8  086C               	movf	main@dutyCycle6+1,w
  7203  04A9  00F1               	movwf	PWM6_LoadDutyValue@dutyCycle6+1
  7204  04AA  086B               	movf	main@dutyCycle6,w
  7205  04AB  00F0               	movwf	PWM6_LoadDutyValue@dutyCycle6
  7206  04AC  3193  230A  3182   	fcall	_PWM6_LoadDutyValue
  7207                           
  7208                           ;main.c: 188: PWM7_LoadDutyValue(dutyCycle7);
  7209  04AF  0020               	movlb	0	; select bank0
  7210  04B0  086E               	movf	main@dutyCycle7+1,w
  7211  04B1  00F1               	movwf	PWM7_LoadDutyValue@dutyCycle7+1
  7212  04B2  086D               	movf	main@dutyCycle7,w
  7213  04B3  00F0               	movwf	PWM7_LoadDutyValue@dutyCycle7
  7214  04B4  3193  2320  3182   	fcall	_PWM7_LoadDutyValue
  7215                           
  7216                           ;main.c: 190: menuButton = readButton();
  7217  04B7  3188  2035  3182   	fcall	_readButton
  7218  04BA  0020               	movlb	0	; select bank0
  7219  04BB  00D8               	movwf	??_main
  7220  04BC  0858               	movf	??_main,w
  7221  04BD  00E9               	movwf	main@menuButton
  7222                           
  7223                           ;main.c: 191: if(menuButton == 2) if(MPPT1>1375)MPPT1-=1;
  7224  04BE  3002               	movlw	2
  7225  04BF  0669               	xorwf	main@menuButton,w
  7226  04C0  1D03               	btfss	3,2
  7227  04C1  2CD2               	goto	l3247
  7228  04C2  0868               	movf	main@MPPT1+1,w
  7229  04C3  3A80               	xorlw	128
  7230  04C4  00D8               	movwf	??_main
  7231  04C5  3085               	movlw	133
  7232  04C6  0258               	subwf	??_main,w
  7233  04C7  1D03               	skipz
  7234  04C8  2CCB               	goto	u3905
  7235  04C9  3060               	movlw	96
  7236  04CA  0267               	subwf	main@MPPT1,w
  7237  04CB                     u3905:	
  7238  04CB  1C03               	skipc
  7239  04CC  2CD2               	goto	l3247
  7240  04CD  30FF               	movlw	255
  7241  04CE  0020               	movlb	0	; select bank0
  7242  04CF  07E7               	addwf	main@MPPT1,f
  7243  04D0  30FF               	movlw	255
  7244  04D1  3DE8               	addwfc	main@MPPT1+1,f
  7245  04D2                     l3247:	
  7246                           
  7247                           ;main.c: 192: if(menuButton == 3)if(MPPT1<2200)MPPT1+=1;
  7248  04D2  3003               	movlw	3
  7249  04D3  0020               	movlb	0	; select bank0
  7250  04D4  0669               	xorwf	main@menuButton,w
  7251  04D5  1D03               	btfss	3,2
  7252  04D6  2CE7               	goto	l3253
  7253  04D7  0868               	movf	main@MPPT1+1,w
  7254  04D8  3A80               	xorlw	128
  7255  04D9  00D8               	movwf	??_main
  7256  04DA  3088               	movlw	136
  7257  04DB  0258               	subwf	??_main,w
  7258  04DC  1D03               	skipz
  7259  04DD  2CE0               	goto	u3925
  7260  04DE  3098               	movlw	152
  7261  04DF  0267               	subwf	main@MPPT1,w
  7262  04E0                     u3925:	
  7263  04E0  1803               	skipnc
  7264  04E1  2CE7               	goto	l3253
  7265  04E2  3001               	movlw	1
  7266  04E3  0020               	movlb	0	; select bank0
  7267  04E4  07E7               	addwf	main@MPPT1,f
  7268  04E5  3000               	movlw	0
  7269  04E6  3DE8               	addwfc	main@MPPT1+1,f
  7270  04E7                     l3253:	
  7271                           
  7272                           ;main.c: 193: if(menuButton == 1)LCDInit();
  7273  04E7  0020               	movlb	0	; select bank0
  7274  04E8  0369               	decf	main@menuButton,w
  7275  04E9  1D03               	btfss	3,2
  7276  04EA  2CEE               	goto	l3257
  7277  04EB  3194  2430  3182   	fcall	_LCDInit
  7278  04EE                     l3257:	
  7279                           
  7280                           ;main.c: 197: if(slowLoop>250)
  7281  04EE  30FB               	movlw	251
  7282  04EF  0020               	movlb	0	; select bank0
  7283  04F0  0263               	subwf	main@slowLoop,w
  7284  04F1  1C03               	skipc
  7285  04F2  2AEF               	goto	l3141
  7286                           
  7287                           ;main.c: 198: {
  7288                           ;main.c: 200: IOutTotal=current[0]+current[1];
  7289  04F3  0021               	movlb	1	; select bank1
  7290  04F4  0838               	movf	_current^(0+128),w
  7291  04F5  073A               	addwf	(_current^(0+128)+2),w
  7292  04F6  0020               	movlb	0	; select bank0
  7293  04F7  00DD               	movwf	main@IOutTotal
  7294  04F8  0021               	movlb	1	; select bank1
  7295  04F9  0839               	movf	(_current+1)^(0+128),w
  7296  04FA  3D3B               	addwfc	((_current+1)^(0+128)+2),w
  7297  04FB  0020               	movlb	0	; select bank0
  7298  04FC  00DE               	movwf	main@IOutTotal+1
  7299                           
  7300                           ;main.c: 220: ADREF = 0x00;
  7301  04FD  0021               	movlb	1	; select bank1
  7302  04FE  019A               	clrf	26	;volatile
  7303                           
  7304                           ;main.c: 221: batteryTemp=tempCalc(ADCRead(9));
  7305  04FF  3009               	movlw	9
  7306  0500  3192  22F5  3182   	fcall	_ADCRead
  7307  0503  0871               	movf	?_ADCRead+1,w
  7308  0504  0020               	movlb	0	; select bank0
  7309  0505  00CE               	movwf	tempCalc@analogValue+1
  7310  0506  0870               	movf	?_ADCRead,w
  7311  0507  00CD               	movwf	tempCalc@analogValue
  7312  0508  318C  2486  3182   	fcall	_tempCalc
  7313  050B  0020               	movlb	0	; select bank0
  7314  050C  084E               	movf	?_tempCalc+1,w
  7315  050D  0021               	movlb	1	; select bank1
  7316  050E  00EC               	movwf	(_batteryTemp+1)^(0+128)
  7317  050F  0020               	movlb	0	; select bank0
  7318  0510  084D               	movf	?_tempCalc,w
  7319  0511  0021               	movlb	1	; select bank1
  7320  0512  00EB               	movwf	_batteryTemp^(0+128)
  7321                           
  7322                           ;main.c: 222: ADREF = 0x03;
  7323  0513  3003               	movlw	3
  7324  0514  009A               	movwf	26	;volatile
  7325                           
  7326                           ;main.c: 224: displayRefresh+=1;
  7327  0515  3001               	movlw	1
  7328  0516  0020               	movlb	0	; select bank0
  7329  0517  00D8               	movwf	??_main
  7330  0518  0858               	movf	??_main,w
  7331  0519  07E4               	addwf	main@displayRefresh,f
  7332                           
  7333                           ;main.c: 225: if(displayRefresh>80)
  7334  051A  3051               	movlw	81
  7335  051B  0264               	subwf	main@displayRefresh,w
  7336  051C  1C03               	skipc
  7337  051D  2D23               	goto	l3275
  7338                           
  7339                           ;main.c: 226: {
  7340                           ;main.c: 227: LCDClear();
  7341  051E  3193  23D3  3182   	fcall	_LCDClear
  7342                           
  7343                           ;main.c: 228: displayRefresh=0;
  7344  0521  0020               	movlb	0	; select bank0
  7345  0522  01E4               	clrf	main@displayRefresh
  7346  0523                     l3275:	
  7347                           
  7348                           ;main.c: 230: }
  7349                           ;main.c: 231: Battery_State_Machine(0);
  7350  0523  3000               	movlw	0
  7351  0524  3181  2105  3182   	fcall	_Battery_State_Machine
  7352                           
  7353                           ;main.c: 232: Battery_State_Machine(1);
  7354  0527  3001               	movlw	1
  7355  0528  3181  2105  3182   	fcall	_Battery_State_Machine
  7356                           
  7357                           ;main.c: 235: { gotoXY(0,0); LCDWriteString("In:");};
  7358  052B  01F5               	clrf	gotoXY@y
  7359  052C  3000               	movlw	0
  7360  052D  3192  22B9  3182   	fcall	_gotoXY
  7361  0530  3025               	movlw	low (STR_1| (0+32768))
  7362  0531  00FC               	movwf	LCDWriteString@characters
  7363  0532  3098               	movlw	high (STR_1| (0+32768))
  7364  0533  00FD               	movwf	LCDWriteString@characters+1
  7365  0534  3192  22CC  3182   	fcall	_LCDWriteString
  7366                           
  7367                           ;main.c: 236: { gotoXY(26,0); LCDWriteString("Out:");};
  7368  0537  01F5               	clrf	gotoXY@y
  7369  0538  301A               	movlw	26
  7370  0539  3192  22B9  3182   	fcall	_gotoXY
  7371  053C  3020               	movlw	low (STR_2| (0+32768))
  7372  053D  00FC               	movwf	LCDWriteString@characters
  7373  053E  3098               	movlw	high (STR_2| (0+32768))
  7374  053F  00FD               	movwf	LCDWriteString@characters+1
  7375  0540  3192  22CC  3182   	fcall	_LCDWriteString
  7376                           
  7377                           ;main.c: 237: { gotoXY(52,0); LCDWriteString("Ref:");};
  7378  0543  01F5               	clrf	gotoXY@y
  7379  0544  3034               	movlw	52
  7380  0545  3192  22B9  3182   	fcall	_gotoXY
  7381  0548  301B               	movlw	low (STR_3| (0+32768))
  7382  0549  00FC               	movwf	LCDWriteString@characters
  7383  054A  3098               	movlw	high (STR_3| (0+32768))
  7384  054B  00FD               	movwf	LCDWriteString@characters+1
  7385  054C  3192  22CC  3182   	fcall	_LCDWriteString
  7386                           
  7387                           ;main.c: 239: { gotoXY(0,1); LCDWriteInt(voltage[2],4, 2, 0);};
  7388  054F  01F5               	clrf	gotoXY@y
  7389  0550  0AF5               	incf	gotoXY@y,f
  7390  0551  3000               	movlw	0
  7391  0552  3192  22B9  3182   	fcall	_gotoXY
  7392  0555  0021               	movlb	1	; select bank1
  7393  0556  0835               	movf	((_voltage+1)^(0+128)+4),w
  7394  0557  0020               	movlb	0	; select bank0
  7395  0558  00A1               	movwf	LCDWriteInt@value+1
  7396  0559  0021               	movlb	1	; select bank1
  7397  055A  0834               	movf	(_voltage^(0+128)+4),w
  7398  055B  0020               	movlb	0	; select bank0
  7399  055C  00A0               	movwf	LCDWriteInt@value
  7400  055D  3004               	movlw	4
  7401  055E  00D8               	movwf	??_main
  7402  055F  0858               	movf	??_main,w
  7403  0560  00A2               	movwf	LCDWriteInt@fieldLength
  7404  0561  3002               	movlw	2
  7405  0562  00D9               	movwf	??_main+1
  7406  0563  0859               	movf	??_main+1,w
  7407  0564  00A3               	movwf	LCDWriteInt@numPlaces
  7408  0565  01A4               	clrf	LCDWriteInt@sign
  7409  0566  318B  23CD  3182   	fcall	_LCDWriteInt
  7410                           
  7411                           ;main.c: 240: LCDWriteCharacter('V');
  7412  0569  3056               	movlw	86
  7413  056A  3196  2681  3182   	fcall	_LCDWriteCharacter
  7414                           
  7415                           ;main.c: 242: { gotoXY(26,1); LCDWriteInt(voltage[0],4, 2, 0);};
  7416  056D  01F5               	clrf	gotoXY@y
  7417  056E  0AF5               	incf	gotoXY@y,f
  7418  056F  301A               	movlw	26
  7419  0570  3192  22B9  3182   	fcall	_gotoXY
  7420  0573  0021               	movlb	1	; select bank1
  7421  0574  0831               	movf	(_voltage+1)^(0+128),w
  7422  0575  0020               	movlb	0	; select bank0
  7423  0576  00A1               	movwf	LCDWriteInt@value+1
  7424  0577  0021               	movlb	1	; select bank1
  7425  0578  0830               	movf	_voltage^(0+128),w
  7426  0579  0020               	movlb	0	; select bank0
  7427  057A  00A0               	movwf	LCDWriteInt@value
  7428  057B  3004               	movlw	4
  7429  057C  00D8               	movwf	??_main
  7430  057D  0858               	movf	??_main,w
  7431  057E  00A2               	movwf	LCDWriteInt@fieldLength
  7432  057F  3002               	movlw	2
  7433  0580  00D9               	movwf	??_main+1
  7434  0581  0859               	movf	??_main+1,w
  7435  0582  00A3               	movwf	LCDWriteInt@numPlaces
  7436  0583  01A4               	clrf	LCDWriteInt@sign
  7437  0584  318B  23CD  3182   	fcall	_LCDWriteInt
  7438                           
  7439                           ;main.c: 243: LCDWriteCharacter('V');
  7440  0587  3056               	movlw	86
  7441  0588  3196  2681  3182   	fcall	_LCDWriteCharacter
  7442                           
  7443                           ;main.c: 245: { gotoXY(52,1); LCDWriteInt(Vref[0],4, 2, 0);};
  7444  058B  01F5               	clrf	gotoXY@y
  7445  058C  0AF5               	incf	gotoXY@y,f
  7446  058D  3034               	movlw	52
  7447  058E  3192  22B9  3182   	fcall	_gotoXY
  7448  0591  0021               	movlb	1	; select bank1
  7449  0592  0841               	movf	(_Vref+1)^(0+128),w
  7450  0593  0020               	movlb	0	; select bank0
  7451  0594  00A1               	movwf	LCDWriteInt@value+1
  7452  0595  0021               	movlb	1	; select bank1
  7453  0596  0840               	movf	_Vref^(0+128),w
  7454  0597  0020               	movlb	0	; select bank0
  7455  0598  00A0               	movwf	LCDWriteInt@value
  7456  0599  3004               	movlw	4
  7457  059A  00D8               	movwf	??_main
  7458  059B  0858               	movf	??_main,w
  7459  059C  00A2               	movwf	LCDWriteInt@fieldLength
  7460  059D  3002               	movlw	2
  7461  059E  00D9               	movwf	??_main+1
  7462  059F  0859               	movf	??_main+1,w
  7463  05A0  00A3               	movwf	LCDWriteInt@numPlaces
  7464  05A1  01A4               	clrf	LCDWriteInt@sign
  7465  05A2  318B  23CD  3182   	fcall	_LCDWriteInt
  7466                           
  7467                           ;main.c: 246: LCDWriteCharacter('V');
  7468  05A5  3056               	movlw	86
  7469  05A6  3196  2681  3182   	fcall	_LCDWriteCharacter
  7470                           
  7471                           ;main.c: 248: { gotoXY(80,1); LCDWriteInt(Imode[0],1, 0, 0);};
  7472  05A9  01F5               	clrf	gotoXY@y
  7473  05AA  0AF5               	incf	gotoXY@y,f
  7474  05AB  3050               	movlw	80
  7475  05AC  3192  22B9  3182   	fcall	_gotoXY
  7476  05AF  0021               	movlb	1	; select bank1
  7477  05B0  085E               	movf	_Imode^(0+128),w
  7478  05B1  0020               	movlb	0	; select bank0
  7479  05B2  00A0               	movwf	LCDWriteInt@value
  7480  05B3  01A1               	clrf	LCDWriteInt@value+1
  7481  05B4  1BA0               	btfsc	LCDWriteInt@value,7
  7482  05B5  03A1               	decf	LCDWriteInt@value+1,f
  7483  05B6  01A2               	clrf	LCDWriteInt@fieldLength
  7484  05B7  0AA2               	incf	LCDWriteInt@fieldLength,f
  7485  05B8  01A3               	clrf	LCDWriteInt@numPlaces
  7486  05B9  01A4               	clrf	LCDWriteInt@sign
  7487  05BA  318B  23CD  3182   	fcall	_LCDWriteInt
  7488                           
  7489                           ;main.c: 250: { gotoXY(0,2); LCDWriteInt(current[2],3, 1, 0);};
  7490  05BD  3002               	movlw	2
  7491  05BE  0020               	movlb	0	; select bank0
  7492  05BF  00D8               	movwf	??_main
  7493  05C0  0858               	movf	??_main,w
  7494  05C1  00F5               	movwf	gotoXY@y
  7495  05C2  3000               	movlw	0
  7496  05C3  3192  22B9  3182   	fcall	_gotoXY
  7497  05C6  0021               	movlb	1	; select bank1
  7498  05C7  083D               	movf	((_current+1)^(0+128)+4),w
  7499  05C8  0020               	movlb	0	; select bank0
  7500  05C9  00A1               	movwf	LCDWriteInt@value+1
  7501  05CA  0021               	movlb	1	; select bank1
  7502  05CB  083C               	movf	(_current^(0+128)+4),w
  7503  05CC  0020               	movlb	0	; select bank0
  7504  05CD  00A0               	movwf	LCDWriteInt@value
  7505  05CE  3003               	movlw	3
  7506  05CF  00D8               	movwf	??_main
  7507  05D0  0858               	movf	??_main,w
  7508  05D1  00A2               	movwf	LCDWriteInt@fieldLength
  7509  05D2  01A3               	clrf	LCDWriteInt@numPlaces
  7510  05D3  0AA3               	incf	LCDWriteInt@numPlaces,f
  7511  05D4  01A4               	clrf	LCDWriteInt@sign
  7512  05D5  318B  23CD  3182   	fcall	_LCDWriteInt
  7513                           
  7514                           ;main.c: 252: LCDWriteCharacter('A');
  7515  05D8  3041               	movlw	65
  7516  05D9  3196  2681  3182   	fcall	_LCDWriteCharacter
  7517                           
  7518                           ;main.c: 254: { gotoXY(26,2); LCDWriteInt(current[0],3, 1, 0);};
  7519  05DC  3002               	movlw	2
  7520  05DD  0020               	movlb	0	; select bank0
  7521  05DE  00D8               	movwf	??_main
  7522  05DF  0858               	movf	??_main,w
  7523  05E0  00F5               	movwf	gotoXY@y
  7524  05E1  301A               	movlw	26
  7525  05E2  3192  22B9  3182   	fcall	_gotoXY
  7526  05E5  0021               	movlb	1	; select bank1
  7527  05E6  0839               	movf	(_current+1)^(0+128),w
  7528  05E7  0020               	movlb	0	; select bank0
  7529  05E8  00A1               	movwf	LCDWriteInt@value+1
  7530  05E9  0021               	movlb	1	; select bank1
  7531  05EA  0838               	movf	_current^(0+128),w
  7532  05EB  0020               	movlb	0	; select bank0
  7533  05EC  00A0               	movwf	LCDWriteInt@value
  7534  05ED  3003               	movlw	3
  7535  05EE  00D8               	movwf	??_main
  7536  05EF  0858               	movf	??_main,w
  7537  05F0  00A2               	movwf	LCDWriteInt@fieldLength
  7538  05F1  01A3               	clrf	LCDWriteInt@numPlaces
  7539  05F2  0AA3               	incf	LCDWriteInt@numPlaces,f
  7540  05F3  01A4               	clrf	LCDWriteInt@sign
  7541  05F4  318B  23CD  3182   	fcall	_LCDWriteInt
  7542                           
  7543                           ;main.c: 256: LCDWriteCharacter('A');
  7544  05F7  3041               	movlw	65
  7545  05F8  3196  2681  3182   	fcall	_LCDWriteCharacter
  7546                           
  7547                           ;main.c: 258: { gotoXY(52,2); LCDWriteInt(Iref[0],3, 1, 0);};
  7548  05FB  3002               	movlw	2
  7549  05FC  0020               	movlb	0	; select bank0
  7550  05FD  00D8               	movwf	??_main
  7551  05FE  0858               	movf	??_main,w
  7552  05FF  00F5               	movwf	gotoXY@y
  7553  0600  3034               	movlw	52
  7554  0601  3192  22B9  3182   	fcall	_gotoXY
  7555  0604  0021               	movlb	1	; select bank1
  7556  0605  0849               	movf	(_Iref+1)^(0+128),w
  7557  0606  0020               	movlb	0	; select bank0
  7558  0607  00A1               	movwf	LCDWriteInt@value+1
  7559  0608  0021               	movlb	1	; select bank1
  7560  0609  0848               	movf	_Iref^(0+128),w
  7561  060A  0020               	movlb	0	; select bank0
  7562  060B  00A0               	movwf	LCDWriteInt@value
  7563  060C  3003               	movlw	3
  7564  060D  00D8               	movwf	??_main
  7565  060E  0858               	movf	??_main,w
  7566  060F  00A2               	movwf	LCDWriteInt@fieldLength
  7567  0610  01A3               	clrf	LCDWriteInt@numPlaces
  7568  0611  0AA3               	incf	LCDWriteInt@numPlaces,f
  7569  0612  01A4               	clrf	LCDWriteInt@sign
  7570  0613  318B  23CD  3182   	fcall	_LCDWriteInt
  7571                           
  7572                           ;main.c: 259: LCDWriteCharacter('A');
  7573  0616  3041               	movlw	65
  7574  0617  3196  2681  3182   	fcall	_LCDWriteCharacter
  7575                           
  7576                           ;main.c: 261: { gotoXY(80,2); LCDWriteInt(batteryState[0],1, 0, 0);};
  7577  061A  3002               	movlw	2
  7578  061B  0020               	movlb	0	; select bank0
  7579  061C  00D8               	movwf	??_main
  7580  061D  0858               	movf	??_main,w
  7581  061E  00F5               	movwf	gotoXY@y
  7582  061F  3050               	movlw	80
  7583  0620  3192  22B9  3182   	fcall	_gotoXY
  7584  0623  0021               	movlb	1	; select bank1
  7585  0624  0862               	movf	_batteryState^(0+128),w
  7586  0625  0020               	movlb	0	; select bank0
  7587  0626  00D8               	movwf	??_main
  7588  0627  01D9               	clrf	??_main+1
  7589  0628  0858               	movf	??_main,w
  7590  0629  00A0               	movwf	LCDWriteInt@value
  7591  062A  0859               	movf	??_main+1,w
  7592  062B  00A1               	movwf	LCDWriteInt@value+1
  7593  062C  01A2               	clrf	LCDWriteInt@fieldLength
  7594  062D  0AA2               	incf	LCDWriteInt@fieldLength,f
  7595  062E  01A3               	clrf	LCDWriteInt@numPlaces
  7596  062F  01A4               	clrf	LCDWriteInt@sign
  7597  0630  318B  23CD  3182   	fcall	_LCDWriteInt
  7598                           
  7599                           ;main.c: 263: { gotoXY(0,3); LCDWriteInt(voltage[3],4, 2, 0);};
  7600  0633  3003               	movlw	3
  7601  0634  0020               	movlb	0	; select bank0
  7602  0635  00D8               	movwf	??_main
  7603  0636  0858               	movf	??_main,w
  7604  0637  00F5               	movwf	gotoXY@y
  7605  0638  3000               	movlw	0
  7606  0639  3192  22B9  3182   	fcall	_gotoXY
  7607  063C  0021               	movlb	1	; select bank1
  7608  063D  0837               	movf	((_voltage+1)^(0+128)+6),w
  7609  063E  0020               	movlb	0	; select bank0
  7610  063F  00A1               	movwf	LCDWriteInt@value+1
  7611  0640  0021               	movlb	1	; select bank1
  7612  0641  0836               	movf	(_voltage^(0+128)+6),w
  7613  0642  0020               	movlb	0	; select bank0
  7614  0643  00A0               	movwf	LCDWriteInt@value
  7615  0644  3004               	movlw	4
  7616  0645  00D8               	movwf	??_main
  7617  0646  0858               	movf	??_main,w
  7618  0647  00A2               	movwf	LCDWriteInt@fieldLength
  7619  0648  3002               	movlw	2
  7620  0649  00D9               	movwf	??_main+1
  7621  064A  0859               	movf	??_main+1,w
  7622  064B  00A3               	movwf	LCDWriteInt@numPlaces
  7623  064C  01A4               	clrf	LCDWriteInt@sign
  7624  064D  318B  23CD  3182   	fcall	_LCDWriteInt
  7625                           
  7626                           ;main.c: 264: LCDWriteCharacter('V');
  7627  0650  3056               	movlw	86
  7628  0651  3196  2681  3182   	fcall	_LCDWriteCharacter
  7629                           
  7630                           ;main.c: 266: { gotoXY(26,3); LCDWriteInt(voltage[1],4, 2, 0);};
  7631  0654  3003               	movlw	3
  7632  0655  0020               	movlb	0	; select bank0
  7633  0656  00D8               	movwf	??_main
  7634  0657  0858               	movf	??_main,w
  7635  0658  00F5               	movwf	gotoXY@y
  7636  0659  301A               	movlw	26
  7637  065A  3192  22B9  3182   	fcall	_gotoXY
  7638  065D  0021               	movlb	1	; select bank1
  7639  065E  0833               	movf	((_voltage+1)^(0+128)+2),w
  7640  065F  0020               	movlb	0	; select bank0
  7641  0660  00A1               	movwf	LCDWriteInt@value+1
  7642  0661  0021               	movlb	1	; select bank1
  7643  0662  0832               	movf	(_voltage^(0+128)+2),w
  7644  0663  0020               	movlb	0	; select bank0
  7645  0664  00A0               	movwf	LCDWriteInt@value
  7646  0665  3004               	movlw	4
  7647  0666  00D8               	movwf	??_main
  7648  0667  0858               	movf	??_main,w
  7649  0668  00A2               	movwf	LCDWriteInt@fieldLength
  7650  0669  3002               	movlw	2
  7651  066A  00D9               	movwf	??_main+1
  7652  066B  0859               	movf	??_main+1,w
  7653  066C  00A3               	movwf	LCDWriteInt@numPlaces
  7654  066D  01A4               	clrf	LCDWriteInt@sign
  7655  066E  318B  23CD  3182   	fcall	_LCDWriteInt
  7656                           
  7657                           ;main.c: 268: LCDWriteCharacter('V');
  7658  0671  3056               	movlw	86
  7659  0672  3196  2681  3182   	fcall	_LCDWriteCharacter
  7660                           
  7661                           ;main.c: 270: { gotoXY(52,3); LCDWriteInt(Vref[1],4, 2, 0);};
  7662  0675  3003               	movlw	3
  7663  0676  0020               	movlb	0	; select bank0
  7664  0677  00D8               	movwf	??_main
  7665  0678  0858               	movf	??_main,w
  7666  0679  00F5               	movwf	gotoXY@y
  7667  067A  3034               	movlw	52
  7668  067B  3192  22B9  3182   	fcall	_gotoXY
  7669  067E  0021               	movlb	1	; select bank1
  7670  067F  0843               	movf	((_Vref+1)^(0+128)+2),w
  7671  0680  0020               	movlb	0	; select bank0
  7672  0681  00A1               	movwf	LCDWriteInt@value+1
  7673  0682  0021               	movlb	1	; select bank1
  7674  0683  0842               	movf	(_Vref^(0+128)+2),w
  7675  0684  0020               	movlb	0	; select bank0
  7676  0685  00A0               	movwf	LCDWriteInt@value
  7677  0686  3004               	movlw	4
  7678  0687  00D8               	movwf	??_main
  7679  0688  0858               	movf	??_main,w
  7680  0689  00A2               	movwf	LCDWriteInt@fieldLength
  7681  068A  3002               	movlw	2
  7682  068B  00D9               	movwf	??_main+1
  7683  068C  0859               	movf	??_main+1,w
  7684  068D  00A3               	movwf	LCDWriteInt@numPlaces
  7685  068E  01A4               	clrf	LCDWriteInt@sign
  7686  068F  318B  23CD  3182   	fcall	_LCDWriteInt
  7687                           
  7688                           ;main.c: 271: LCDWriteCharacter('V');
  7689  0692  3056               	movlw	86
  7690  0693  3196  2681  3182   	fcall	_LCDWriteCharacter
  7691                           
  7692                           ;main.c: 273: { gotoXY(80,3); LCDWriteInt(Imode[1],1, 0, 0);};
  7693  0696  3003               	movlw	3
  7694  0697  0020               	movlb	0	; select bank0
  7695  0698  00D8               	movwf	??_main
  7696  0699  0858               	movf	??_main,w
  7697  069A  00F5               	movwf	gotoXY@y
  7698  069B  3050               	movlw	80
  7699  069C  3192  22B9  3182   	fcall	_gotoXY
  7700  069F  0021               	movlb	1	; select bank1
  7701  06A0  085F               	movf	(_Imode^(0+128)+1),w
  7702  06A1  0020               	movlb	0	; select bank0
  7703  06A2  00A0               	movwf	LCDWriteInt@value
  7704  06A3  01A1               	clrf	LCDWriteInt@value+1
  7705  06A4  1BA0               	btfsc	LCDWriteInt@value,7
  7706  06A5  03A1               	decf	LCDWriteInt@value+1,f
  7707  06A6  01A2               	clrf	LCDWriteInt@fieldLength
  7708  06A7  0AA2               	incf	LCDWriteInt@fieldLength,f
  7709  06A8  01A3               	clrf	LCDWriteInt@numPlaces
  7710  06A9  01A4               	clrf	LCDWriteInt@sign
  7711  06AA  318B  23CD  3182   	fcall	_LCDWriteInt
  7712                           
  7713                           ;main.c: 275: { gotoXY(0,4); LCDWriteInt(current[3],3, 1, 0);};
  7714  06AD  3004               	movlw	4
  7715  06AE  0020               	movlb	0	; select bank0
  7716  06AF  00D8               	movwf	??_main
  7717  06B0  0858               	movf	??_main,w
  7718  06B1  00F5               	movwf	gotoXY@y
  7719  06B2  3000               	movlw	0
  7720  06B3  3192  22B9  3182   	fcall	_gotoXY
  7721  06B6  0021               	movlb	1	; select bank1
  7722  06B7  083F               	movf	((_current+1)^(0+128)+6),w
  7723  06B8  0020               	movlb	0	; select bank0
  7724  06B9  00A1               	movwf	LCDWriteInt@value+1
  7725  06BA  0021               	movlb	1	; select bank1
  7726  06BB  083E               	movf	(_current^(0+128)+6),w
  7727  06BC  0020               	movlb	0	; select bank0
  7728  06BD  00A0               	movwf	LCDWriteInt@value
  7729  06BE  3003               	movlw	3
  7730  06BF  00D8               	movwf	??_main
  7731  06C0  0858               	movf	??_main,w
  7732  06C1  00A2               	movwf	LCDWriteInt@fieldLength
  7733  06C2  01A3               	clrf	LCDWriteInt@numPlaces
  7734  06C3  0AA3               	incf	LCDWriteInt@numPlaces,f
  7735  06C4  01A4               	clrf	LCDWriteInt@sign
  7736  06C5  318B  23CD  3182   	fcall	_LCDWriteInt
  7737                           
  7738                           ;main.c: 277: LCDWriteCharacter('A');
  7739  06C8  3041               	movlw	65
  7740  06C9  3196  2681  3182   	fcall	_LCDWriteCharacter
  7741                           
  7742                           ;main.c: 279: { gotoXY(26,4); LCDWriteInt(current[1],3, 1, 0);};
  7743  06CC  3004               	movlw	4
  7744  06CD  0020               	movlb	0	; select bank0
  7745  06CE  00D8               	movwf	??_main
  7746  06CF  0858               	movf	??_main,w
  7747  06D0  00F5               	movwf	gotoXY@y
  7748  06D1  301A               	movlw	26
  7749  06D2  3192  22B9  3182   	fcall	_gotoXY
  7750  06D5  0021               	movlb	1	; select bank1
  7751  06D6  083B               	movf	((_current+1)^(0+128)+2),w
  7752  06D7  0020               	movlb	0	; select bank0
  7753  06D8  00A1               	movwf	LCDWriteInt@value+1
  7754  06D9  0021               	movlb	1	; select bank1
  7755  06DA  083A               	movf	(_current^(0+128)+2),w
  7756  06DB  0020               	movlb	0	; select bank0
  7757  06DC  00A0               	movwf	LCDWriteInt@value
  7758  06DD  3003               	movlw	3
  7759  06DE  00D8               	movwf	??_main
  7760  06DF  0858               	movf	??_main,w
  7761  06E0  00A2               	movwf	LCDWriteInt@fieldLength
  7762  06E1  01A3               	clrf	LCDWriteInt@numPlaces
  7763  06E2  0AA3               	incf	LCDWriteInt@numPlaces,f
  7764  06E3  01A4               	clrf	LCDWriteInt@sign
  7765  06E4  318B  23CD  3182   	fcall	_LCDWriteInt
  7766                           
  7767                           ;main.c: 281: LCDWriteCharacter('A');
  7768  06E7  3041               	movlw	65
  7769  06E8  3196  2681  3182   	fcall	_LCDWriteCharacter
  7770                           
  7771                           ;main.c: 283: { gotoXY(52,4); LCDWriteInt(Iref[1],3, 1, 0);};
  7772  06EB  3004               	movlw	4
  7773  06EC  0020               	movlb	0	; select bank0
  7774  06ED  00D8               	movwf	??_main
  7775  06EE  0858               	movf	??_main,w
  7776  06EF  00F5               	movwf	gotoXY@y
  7777  06F0  3034               	movlw	52
  7778  06F1  3192  22B9  3182   	fcall	_gotoXY
  7779  06F4  0021               	movlb	1	; select bank1
  7780  06F5  084B               	movf	((_Iref+1)^(0+128)+2),w
  7781  06F6  0020               	movlb	0	; select bank0
  7782  06F7  00A1               	movwf	LCDWriteInt@value+1
  7783  06F8  0021               	movlb	1	; select bank1
  7784  06F9  084A               	movf	(_Iref^(0+128)+2),w
  7785  06FA  0020               	movlb	0	; select bank0
  7786  06FB  00A0               	movwf	LCDWriteInt@value
  7787  06FC  3003               	movlw	3
  7788  06FD  00D8               	movwf	??_main
  7789  06FE  0858               	movf	??_main,w
  7790  06FF  00A2               	movwf	LCDWriteInt@fieldLength
  7791  0700  01A3               	clrf	LCDWriteInt@numPlaces
  7792  0701  0AA3               	incf	LCDWriteInt@numPlaces,f
  7793  0702  01A4               	clrf	LCDWriteInt@sign
  7794  0703  318B  23CD  3182   	fcall	_LCDWriteInt
  7795                           
  7796                           ;main.c: 284: LCDWriteCharacter('A');
  7797  0706  3041               	movlw	65
  7798  0707  3196  2681  3182   	fcall	_LCDWriteCharacter
  7799                           
  7800                           ;main.c: 286: { gotoXY(80,4); LCDWriteInt(batteryState[1],1, 0, 0);};
  7801  070A  3004               	movlw	4
  7802  070B  0020               	movlb	0	; select bank0
  7803  070C  00D8               	movwf	??_main
  7804  070D  0858               	movf	??_main,w
  7805  070E  00F5               	movwf	gotoXY@y
  7806  070F  3050               	movlw	80
  7807  0710  3192  22B9  3182   	fcall	_gotoXY
  7808  0713  0021               	movlb	1	; select bank1
  7809  0714  0863               	movf	(_batteryState^(0+128)+1),w
  7810  0715  0020               	movlb	0	; select bank0
  7811  0716  00D8               	movwf	??_main
  7812  0717  01D9               	clrf	??_main+1
  7813  0718  0858               	movf	??_main,w
  7814  0719  00A0               	movwf	LCDWriteInt@value
  7815  071A  0859               	movf	??_main+1,w
  7816  071B  00A1               	movwf	LCDWriteInt@value+1
  7817  071C  01A2               	clrf	LCDWriteInt@fieldLength
  7818  071D  0AA2               	incf	LCDWriteInt@fieldLength,f
  7819  071E  01A3               	clrf	LCDWriteInt@numPlaces
  7820  071F  01A4               	clrf	LCDWriteInt@sign
  7821  0720  318B  23CD  3182   	fcall	_LCDWriteInt
  7822                           
  7823                           ;main.c: 290: { gotoXY(0,5); LCDWriteInt(dutyCycle6,4, 0, 0);};
  7824  0723  3005               	movlw	5
  7825  0724  0020               	movlb	0	; select bank0
  7826  0725  00D8               	movwf	??_main
  7827  0726  0858               	movf	??_main,w
  7828  0727  00F5               	movwf	gotoXY@y
  7829  0728  3000               	movlw	0
  7830  0729  3192  22B9  3182   	fcall	_gotoXY
  7831  072C  0020               	movlb	0	; select bank0
  7832  072D  086C               	movf	main@dutyCycle6+1,w
  7833  072E  00A1               	movwf	LCDWriteInt@value+1
  7834  072F  086B               	movf	main@dutyCycle6,w
  7835  0730  00A0               	movwf	LCDWriteInt@value
  7836  0731  3004               	movlw	4
  7837  0732  00D8               	movwf	??_main
  7838  0733  0858               	movf	??_main,w
  7839  0734  00A2               	movwf	LCDWriteInt@fieldLength
  7840  0735  01A3               	clrf	LCDWriteInt@numPlaces
  7841  0736  01A4               	clrf	LCDWriteInt@sign
  7842  0737  318B  23CD  3182   	fcall	_LCDWriteInt
  7843                           
  7844                           ;main.c: 291: { gotoXY(18,5); LCDWriteInt(VHoldMode[0],1, 0, 0);};
  7845  073A  3005               	movlw	5
  7846  073B  0020               	movlb	0	; select bank0
  7847  073C  00D8               	movwf	??_main
  7848  073D  0858               	movf	??_main,w
  7849  073E  00F5               	movwf	gotoXY@y
  7850  073F  3012               	movlw	18
  7851  0740  3192  22B9  3182   	fcall	_gotoXY
  7852  0743  0021               	movlb	1	; select bank1
  7853  0744  085A               	movf	_VHoldMode^(0+128),w
  7854  0745  0020               	movlb	0	; select bank0
  7855  0746  00A0               	movwf	LCDWriteInt@value
  7856  0747  01A1               	clrf	LCDWriteInt@value+1
  7857  0748  1BA0               	btfsc	LCDWriteInt@value,7
  7858  0749  03A1               	decf	LCDWriteInt@value+1,f
  7859  074A  01A2               	clrf	LCDWriteInt@fieldLength
  7860  074B  0AA2               	incf	LCDWriteInt@fieldLength,f
  7861  074C  01A3               	clrf	LCDWriteInt@numPlaces
  7862  074D  01A4               	clrf	LCDWriteInt@sign
  7863  074E  318B  23CD  3182   	fcall	_LCDWriteInt
  7864                           
  7865                           ;main.c: 292: LCDWriteCharacter(' ');
  7866  0751  3020               	movlw	32
  7867  0752  3196  2681  3182   	fcall	_LCDWriteCharacter
  7868                           
  7869                           ;main.c: 293: { gotoXY(28,5); LCDWriteInt(dutyCycle7,4, 0, 0);};
  7870  0755  3005               	movlw	5
  7871  0756  0020               	movlb	0	; select bank0
  7872  0757  00D8               	movwf	??_main
  7873  0758  0858               	movf	??_main,w
  7874  0759  00F5               	movwf	gotoXY@y
  7875  075A  301C               	movlw	28
  7876  075B  3192  22B9  3182   	fcall	_gotoXY
  7877  075E  0020               	movlb	0	; select bank0
  7878  075F  086E               	movf	main@dutyCycle7+1,w
  7879  0760  00A1               	movwf	LCDWriteInt@value+1
  7880  0761  086D               	movf	main@dutyCycle7,w
  7881  0762  00A0               	movwf	LCDWriteInt@value
  7882  0763  3004               	movlw	4
  7883  0764  00D8               	movwf	??_main
  7884  0765  0858               	movf	??_main,w
  7885  0766  00A2               	movwf	LCDWriteInt@fieldLength
  7886  0767  01A3               	clrf	LCDWriteInt@numPlaces
  7887  0768  01A4               	clrf	LCDWriteInt@sign
  7888  0769  318B  23CD  3182   	fcall	_LCDWriteInt
  7889                           
  7890                           ;main.c: 294: { gotoXY(46,5); LCDWriteInt(VHoldMode[1],1, 0, 0);};
  7891  076C  3005               	movlw	5
  7892  076D  0020               	movlb	0	; select bank0
  7893  076E  00D8               	movwf	??_main
  7894  076F  0858               	movf	??_main,w
  7895  0770  00F5               	movwf	gotoXY@y
  7896  0771  302E               	movlw	46
  7897  0772  3192  22B9  3182   	fcall	_gotoXY
  7898  0775  0021               	movlb	1	; select bank1
  7899  0776  085B               	movf	(_VHoldMode^(0+128)+1),w
  7900  0777  0020               	movlb	0	; select bank0
  7901  0778  00A0               	movwf	LCDWriteInt@value
  7902  0779  01A1               	clrf	LCDWriteInt@value+1
  7903  077A  1BA0               	btfsc	LCDWriteInt@value,7
  7904  077B  03A1               	decf	LCDWriteInt@value+1,f
  7905  077C  01A2               	clrf	LCDWriteInt@fieldLength
  7906  077D  0AA2               	incf	LCDWriteInt@fieldLength,f
  7907  077E  01A3               	clrf	LCDWriteInt@numPlaces
  7908  077F  01A4               	clrf	LCDWriteInt@sign
  7909  0780  318B  23CD  3182   	fcall	_LCDWriteInt
  7910                           
  7911                           ;main.c: 295: LCDWriteCharacter(' ');
  7912  0783  3020               	movlw	32
  7913  0784  3196  2681  3182   	fcall	_LCDWriteCharacter
  7914                           
  7915                           ;main.c: 296: { gotoXY(56,5); LCDWriteInt(batteryTemp,3, 1, 0);};
  7916  0787  3005               	movlw	5
  7917  0788  0020               	movlb	0	; select bank0
  7918  0789  00D8               	movwf	??_main
  7919  078A  0858               	movf	??_main,w
  7920  078B  00F5               	movwf	gotoXY@y
  7921  078C  3038               	movlw	56
  7922  078D  3192  22B9  3182   	fcall	_gotoXY
  7923  0790  0021               	movlb	1	; select bank1
  7924  0791  086C               	movf	(_batteryTemp+1)^(0+128),w
  7925  0792  0020               	movlb	0	; select bank0
  7926  0793  00A1               	movwf	LCDWriteInt@value+1
  7927  0794  0021               	movlb	1	; select bank1
  7928  0795  086B               	movf	_batteryTemp^(0+128),w
  7929  0796  0020               	movlb	0	; select bank0
  7930  0797  00A0               	movwf	LCDWriteInt@value
  7931  0798  3003               	movlw	3
  7932  0799  00D8               	movwf	??_main
  7933  079A  0858               	movf	??_main,w
  7934  079B  00A2               	movwf	LCDWriteInt@fieldLength
  7935  079C  01A3               	clrf	LCDWriteInt@numPlaces
  7936  079D  0AA3               	incf	LCDWriteInt@numPlaces,f
  7937  079E  01A4               	clrf	LCDWriteInt@sign
  7938  079F  318B  23CD  3182   	fcall	_LCDWriteInt
  7939                           
  7940                           ;main.c: 297: LCDWriteCharacter(123);
  7941  07A2  307B               	movlw	123
  7942  07A3  3196  2681  3182   	fcall	_LCDWriteCharacter
  7943                           
  7944                           ;main.c: 298: LCDWriteCharacter('C');
  7945  07A6  3043               	movlw	67
  7946  07A7  3196  2681  3182   	fcall	_LCDWriteCharacter
  7947                           
  7948                           ;main.c: 368: if(batteryState[0] > FINISHED)
  7949  07AA  3003               	movlw	3
  7950  07AB  0021               	movlb	1	; select bank1
  7951  07AC  0262               	subwf	_batteryState^(0+128),w
  7952  07AD  1C03               	skipc
  7953  07AE  2FB3               	goto	l3411
  7954                           
  7955                           ;main.c: 369: {
  7956                           ;main.c: 370: cc_cv_mode(0);
  7957  07AF  3000               	movlw	0
  7958  07B0  318D  256D  3182   	fcall	_cc_cv_mode
  7959  07B3                     l3411:	
  7960                           
  7961                           ;main.c: 371: }
  7962                           ;main.c: 372: if(batteryState[1] > FINISHED)
  7963  07B3  3003               	movlw	3
  7964  07B4  0021               	movlb	1	; select bank1
  7965  07B5  0263               	subwf	(_batteryState^(0+128)+1),w
  7966  07B6  1C03               	skipc
  7967  07B7  2FBC               	goto	l3415
  7968                           
  7969                           ;main.c: 373: {
  7970                           ;main.c: 374: cc_cv_mode(1);
  7971  07B8  3001               	movlw	1
  7972  07B9  318D  256D  3182   	fcall	_cc_cv_mode
  7973  07BC                     l3415:	
  7974                           
  7975                           ;main.c: 375: }
  7976                           ;main.c: 376: slowLoop=0;
  7977  07BC  0020               	movlb	0	; select bank0
  7978  07BD  01E3               	clrf	main@slowLoop
  7979  07BE  2AEF               	goto	l3141
  7980  07BF                     __end_of_main:	
  7981                           
  7982                           	psect	text1
  7983  0C86                     __ptext1:	
  7984 ;; *************** function _tempCalc *****************
  7985 ;; Defined at:
  7986 ;;		line 4 in file "tempCalc.c"
  7987 ;; Parameters:    Size  Location     Type
  7988 ;;  analogValue     2   45[BANK0 ] int 
  7989 ;; Auto vars:     Size  Location     Type
  7990 ;;  steinhart       3   53[BANK0 ] float 
  7991 ;;  R               3   47[BANK0 ] float 
  7992 ;; Return value:  Size  Location     Type
  7993 ;;                  2   45[BANK0 ] int 
  7994 ;; Registers used:
  7995 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7996 ;; Tracked objects:
  7997 ;;		On entry : 0/0
  7998 ;;		On exit  : 0/0
  7999 ;;		Unchanged: 0/0
  8000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8001 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8002 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8004 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8005 ;;Total ram usage:       11 bytes
  8006 ;; Hardware stack levels used:    1
  8007 ;; Hardware stack levels required when called:    4
  8008 ;; This function calls:
  8009 ;;		___awtoft
  8010 ;;		___ftadd
  8011 ;;		___ftdiv
  8012 ;;		___ftmul
  8013 ;;		___ftsub
  8014 ;;		___fttol
  8015 ;;		_log
  8016 ;; This function is called by:
  8017 ;;		_main
  8018 ;; This function uses a non-reentrant model
  8019 ;;
  8020                           
  8021                           
  8022                           ;psect for function _tempCalc
  8023  0C86                     _tempCalc:	
  8024                           
  8025                           ;tempCalc.c: 6: float R, steinhart;
  8026                           ;tempCalc.c: 8: R=10030/(1023/(float)analogValue-1);
  8027                           
  8028                           ;incstack = 0
  8029                           ; Regs used in _tempCalc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8030  0C86  3000               	movlw	0
  8031  0C87  0020               	movlb	0	; select bank0
  8032  0C88  00B0               	movwf	___ftadd@f1
  8033  0C89  3080               	movlw	128
  8034  0C8A  00B1               	movwf	___ftadd@f1+1
  8035  0C8B  30BF               	movlw	191
  8036  0C8C  00B2               	movwf	___ftadd@f1+2
  8037  0C8D  084E               	movf	tempCalc@analogValue+1,w
  8038  0C8E  00F9               	movwf	___awtoft@c+1
  8039  0C8F  084D               	movf	tempCalc@analogValue,w
  8040  0C90  00F8               	movwf	___awtoft@c
  8041  0C91  3193  238E  318C   	fcall	___awtoft
  8042  0C94  0878               	movf	?___awtoft,w
  8043  0C95  0020               	movlb	0	; select bank0
  8044  0C96  00A0               	movwf	___ftdiv@f2
  8045  0C97  0879               	movf	?___awtoft+1,w
  8046  0C98  00A1               	movwf	___ftdiv@f2+1
  8047  0C99  087A               	movf	?___awtoft+2,w
  8048  0C9A  00A2               	movwf	___ftdiv@f2+2
  8049  0C9B  30C0               	movlw	192
  8050  0C9C  00A3               	movwf	___ftdiv@f1
  8051  0C9D  307F               	movlw	127
  8052  0C9E  00A4               	movwf	___ftdiv@f1+1
  8053  0C9F  3044               	movlw	68
  8054  0CA0  00A5               	movwf	___ftdiv@f1+2
  8055  0CA1  3189  21C0  318C   	fcall	___ftdiv
  8056  0CA4  0020               	movlb	0	; select bank0
  8057  0CA5  0820               	movf	?___ftdiv,w
  8058  0CA6  00B3               	movwf	___ftadd@f2
  8059  0CA7  0821               	movf	?___ftdiv+1,w
  8060  0CA8  00B4               	movwf	___ftadd@f2+1
  8061  0CA9  0822               	movf	?___ftdiv+2,w
  8062  0CAA  00B5               	movwf	___ftadd@f2+2
  8063  0CAB  3180  200F  318C   	fcall	___ftadd
  8064  0CAE  0020               	movlb	0	; select bank0
  8065  0CAF  0830               	movf	?___ftadd,w
  8066  0CB0  00D2               	movwf	_tempCalc$1189
  8067  0CB1  0831               	movf	?___ftadd+1,w
  8068  0CB2  00D3               	movwf	_tempCalc$1189+1
  8069  0CB3  0832               	movf	?___ftadd+2,w
  8070  0CB4  00D4               	movwf	_tempCalc$1189+2
  8071                           
  8072                           ;tempCalc.c: 6: float R, steinhart;
  8073                           ;tempCalc.c: 8: R=10030/(1023/(float)analogValue-1);
  8074  0CB5  0852               	movf	_tempCalc$1189,w
  8075  0CB6  00A0               	movwf	___ftdiv@f2
  8076  0CB7  0853               	movf	_tempCalc$1189+1,w
  8077  0CB8  00A1               	movwf	___ftdiv@f2+1
  8078  0CB9  0854               	movf	_tempCalc$1189+2,w
  8079  0CBA  00A2               	movwf	___ftdiv@f2+2
  8080  0CBB  30B8               	movlw	184
  8081  0CBC  00A3               	movwf	___ftdiv@f1
  8082  0CBD  301C               	movlw	28
  8083  0CBE  00A4               	movwf	___ftdiv@f1+1
  8084  0CBF  3046               	movlw	70
  8085  0CC0  00A5               	movwf	___ftdiv@f1+2
  8086  0CC1  3189  21C0  318C   	fcall	___ftdiv
  8087  0CC4  0020               	movlb	0	; select bank0
  8088  0CC5  0820               	movf	?___ftdiv,w
  8089  0CC6  00CF               	movwf	tempCalc@R
  8090  0CC7  0821               	movf	?___ftdiv+1,w
  8091  0CC8  00D0               	movwf	tempCalc@R+1
  8092  0CC9  0822               	movf	?___ftdiv+2,w
  8093  0CCA  00D1               	movwf	tempCalc@R+2
  8094                           
  8095                           ;tempCalc.c: 10: steinhart=R/10010;
  8096  0CCB  3068               	movlw	104
  8097  0CCC  00A0               	movwf	___ftdiv@f2
  8098  0CCD  301C               	movlw	28
  8099  0CCE  00A1               	movwf	___ftdiv@f2+1
  8100  0CCF  3046               	movlw	70
  8101  0CD0  00A2               	movwf	___ftdiv@f2+2
  8102  0CD1  084F               	movf	tempCalc@R,w
  8103  0CD2  00A3               	movwf	___ftdiv@f1
  8104  0CD3  0850               	movf	tempCalc@R+1,w
  8105  0CD4  00A4               	movwf	___ftdiv@f1+1
  8106  0CD5  0851               	movf	tempCalc@R+2,w
  8107  0CD6  00A5               	movwf	___ftdiv@f1+2
  8108  0CD7  3189  21C0  318C   	fcall	___ftdiv
  8109  0CDA  0020               	movlb	0	; select bank0
  8110  0CDB  0820               	movf	?___ftdiv,w
  8111  0CDC  00D5               	movwf	tempCalc@steinhart
  8112  0CDD  0821               	movf	?___ftdiv+1,w
  8113  0CDE  00D6               	movwf	tempCalc@steinhart+1
  8114  0CDF  0822               	movf	?___ftdiv+2,w
  8115  0CE0  00D7               	movwf	tempCalc@steinhart+2
  8116                           
  8117                           ;tempCalc.c: 11: steinhart=log(steinhart);
  8118  0CE1  0855               	movf	tempCalc@steinhart,w
  8119  0CE2  00C7               	movwf	log@x
  8120  0CE3  0856               	movf	tempCalc@steinhart+1,w
  8121  0CE4  00C8               	movwf	log@x+1
  8122  0CE5  0857               	movf	tempCalc@steinhart+2,w
  8123  0CE6  00C9               	movwf	log@x+2
  8124  0CE7  318A  2269  318C   	fcall	_log
  8125  0CEA  0020               	movlb	0	; select bank0
  8126  0CEB  0847               	movf	?_log,w
  8127  0CEC  00D5               	movwf	tempCalc@steinhart
  8128  0CED  0848               	movf	?_log+1,w
  8129  0CEE  00D6               	movwf	tempCalc@steinhart+1
  8130  0CEF  0849               	movf	?_log+2,w
  8131  0CF0  00D7               	movwf	tempCalc@steinhart+2
  8132                           
  8133                           ;tempCalc.c: 12: steinhart/=3795.3;
  8134  0CF1  3035               	movlw	53
  8135  0CF2  00A0               	movwf	___ftdiv@f2
  8136  0CF3  306D               	movlw	109
  8137  0CF4  00A1               	movwf	___ftdiv@f2+1
  8138  0CF5  3045               	movlw	69
  8139  0CF6  00A2               	movwf	___ftdiv@f2+2
  8140  0CF7  0855               	movf	tempCalc@steinhart,w
  8141  0CF8  00A3               	movwf	___ftdiv@f1
  8142  0CF9  0856               	movf	tempCalc@steinhart+1,w
  8143  0CFA  00A4               	movwf	___ftdiv@f1+1
  8144  0CFB  0857               	movf	tempCalc@steinhart+2,w
  8145  0CFC  00A5               	movwf	___ftdiv@f1+2
  8146  0CFD  3189  21C0  318C   	fcall	___ftdiv
  8147  0D00  0020               	movlb	0	; select bank0
  8148  0D01  0820               	movf	?___ftdiv,w
  8149  0D02  00D5               	movwf	tempCalc@steinhart
  8150  0D03  0821               	movf	?___ftdiv+1,w
  8151  0D04  00D6               	movwf	tempCalc@steinhart+1
  8152  0D05  0822               	movf	?___ftdiv+2,w
  8153  0D06  00D7               	movwf	tempCalc@steinhart+2
  8154                           
  8155                           ;tempCalc.c: 16: steinhart+=1.0/(25+273.15);
  8156  0D07  30CF               	movlw	207
  8157  0D08  00B0               	movwf	___ftadd@f1
  8158  0D09  305B               	movlw	91
  8159  0D0A  00B1               	movwf	___ftadd@f1+1
  8160  0D0B  303B               	movlw	59
  8161  0D0C  00B2               	movwf	___ftadd@f1+2
  8162  0D0D  0855               	movf	tempCalc@steinhart,w
  8163  0D0E  00B3               	movwf	___ftadd@f2
  8164  0D0F  0856               	movf	tempCalc@steinhart+1,w
  8165  0D10  00B4               	movwf	___ftadd@f2+1
  8166  0D11  0857               	movf	tempCalc@steinhart+2,w
  8167  0D12  00B5               	movwf	___ftadd@f2+2
  8168  0D13  3180  200F  318C   	fcall	___ftadd
  8169  0D16  0020               	movlb	0	; select bank0
  8170  0D17  0830               	movf	?___ftadd,w
  8171  0D18  00D5               	movwf	tempCalc@steinhart
  8172  0D19  0831               	movf	?___ftadd+1,w
  8173  0D1A  00D6               	movwf	tempCalc@steinhart+1
  8174  0D1B  0832               	movf	?___ftadd+2,w
  8175  0D1C  00D7               	movwf	tempCalc@steinhart+2
  8176                           
  8177                           ;tempCalc.c: 17: steinhart=1.0/steinhart;
  8178  0D1D  0855               	movf	tempCalc@steinhart,w
  8179  0D1E  00A0               	movwf	___ftdiv@f2
  8180  0D1F  0856               	movf	tempCalc@steinhart+1,w
  8181  0D20  00A1               	movwf	___ftdiv@f2+1
  8182  0D21  0857               	movf	tempCalc@steinhart+2,w
  8183  0D22  00A2               	movwf	___ftdiv@f2+2
  8184  0D23  3000               	movlw	0
  8185  0D24  00A3               	movwf	___ftdiv@f1
  8186  0D25  3080               	movlw	128
  8187  0D26  00A4               	movwf	___ftdiv@f1+1
  8188  0D27  303F               	movlw	63
  8189  0D28  00A5               	movwf	___ftdiv@f1+2
  8190  0D29  3189  21C0  318C   	fcall	___ftdiv
  8191  0D2C  0020               	movlb	0	; select bank0
  8192  0D2D  0820               	movf	?___ftdiv,w
  8193  0D2E  00D5               	movwf	tempCalc@steinhart
  8194  0D2F  0821               	movf	?___ftdiv+1,w
  8195  0D30  00D6               	movwf	tempCalc@steinhart+1
  8196  0D31  0822               	movf	?___ftdiv+2,w
  8197  0D32  00D7               	movwf	tempCalc@steinhart+2
  8198                           
  8199                           ;tempCalc.c: 18: steinhart-=273.15;
  8200  0D33  3093               	movlw	147
  8201  0D34  00BD               	movwf	___ftsub@f2
  8202  0D35  3088               	movlw	136
  8203  0D36  00BE               	movwf	___ftsub@f2+1
  8204  0D37  3043               	movlw	67
  8205  0D38  00BF               	movwf	___ftsub@f2+2
  8206  0D39  0855               	movf	tempCalc@steinhart,w
  8207  0D3A  00C0               	movwf	___ftsub@f1
  8208  0D3B  0856               	movf	tempCalc@steinhart+1,w
  8209  0D3C  00C1               	movwf	___ftsub@f1+1
  8210  0D3D  0857               	movf	tempCalc@steinhart+2,w
  8211  0D3E  00C2               	movwf	___ftsub@f1+2
  8212  0D3F  3193  2351  318C   	fcall	___ftsub
  8213  0D42  0020               	movlb	0	; select bank0
  8214  0D43  083D               	movf	?___ftsub,w
  8215  0D44  00D5               	movwf	tempCalc@steinhart
  8216  0D45  083E               	movf	?___ftsub+1,w
  8217  0D46  00D6               	movwf	tempCalc@steinhart+1
  8218  0D47  083F               	movf	?___ftsub+2,w
  8219  0D48  00D7               	movwf	tempCalc@steinhart+2
  8220                           
  8221                           ;tempCalc.c: 20: steinhart*=10;
  8222  0D49  3000               	movlw	0
  8223  0D4A  00A0               	movwf	___ftmul@f1
  8224  0D4B  3020               	movlw	32
  8225  0D4C  00A1               	movwf	___ftmul@f1+1
  8226  0D4D  3041               	movlw	65
  8227  0D4E  00A2               	movwf	___ftmul@f1+2
  8228  0D4F  0855               	movf	tempCalc@steinhart,w
  8229  0D50  00A3               	movwf	___ftmul@f2
  8230  0D51  0856               	movf	tempCalc@steinhart+1,w
  8231  0D52  00A4               	movwf	___ftmul@f2+1
  8232  0D53  0857               	movf	tempCalc@steinhart+2,w
  8233  0D54  00A5               	movwf	___ftmul@f2+2
  8234  0D55  318B  2319  318C   	fcall	___ftmul
  8235  0D58  0020               	movlb	0	; select bank0
  8236  0D59  0820               	movf	?___ftmul,w
  8237  0D5A  00D5               	movwf	tempCalc@steinhart
  8238  0D5B  0821               	movf	?___ftmul+1,w
  8239  0D5C  00D6               	movwf	tempCalc@steinhart+1
  8240  0D5D  0822               	movf	?___ftmul+2,w
  8241  0D5E  00D7               	movwf	tempCalc@steinhart+2
  8242                           
  8243                           ;tempCalc.c: 24: return (int16_t)steinhart;
  8244  0D5F  0855               	movf	tempCalc@steinhart,w
  8245  0D60  00B0               	movwf	___fttol@f1
  8246  0D61  0856               	movf	tempCalc@steinhart+1,w
  8247  0D62  00B1               	movwf	___fttol@f1+1
  8248  0D63  0857               	movf	tempCalc@steinhart+2,w
  8249  0D64  00B2               	movwf	___fttol@f1+2
  8250  0D65  3189  2139         	fcall	___fttol
  8251  0D67  0020               	movlb	0	; select bank0
  8252  0D68  0831               	movf	?___fttol+1,w
  8253  0D69  00CE               	movwf	?_tempCalc+1
  8254  0D6A  0830               	movf	?___fttol,w
  8255  0D6B  00CD               	movwf	?_tempCalc
  8256  0D6C  0008               	return
  8257  0D6D                     __end_of_tempCalc:	
  8258                           
  8259                           	psect	text2
  8260  0A69                     __ptext2:	
  8261 ;; *************** function _log *****************
  8262 ;; Defined at:
  8263 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\log.c"
  8264 ;; Parameters:    Size  Location     Type
  8265 ;;  x               3   39[BANK0 ] int 
  8266 ;; Auto vars:     Size  Location     Type
  8267 ;;  exponent        2   43[BANK0 ] int 
  8268 ;; Return value:  Size  Location     Type
  8269 ;;                  3   39[BANK0 ] int 
  8270 ;; Registers used:
  8271 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8272 ;; Tracked objects:
  8273 ;;		On entry : 0/0
  8274 ;;		On exit  : 0/0
  8275 ;;		Unchanged: 0/0
  8276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8277 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8278 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8279 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8280 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8281 ;;Total ram usage:        6 bytes
  8282 ;; Hardware stack levels used:    1
  8283 ;; Hardware stack levels required when called:    3
  8284 ;; This function calls:
  8285 ;;		___awtoft
  8286 ;;		___ftadd
  8287 ;;		___ftge
  8288 ;;		___ftmul
  8289 ;;		_eval_poly
  8290 ;;		_frexp
  8291 ;; This function is called by:
  8292 ;;		_tempCalc
  8293 ;; This function uses a non-reentrant model
  8294 ;;
  8295                           
  8296                           
  8297                           ;psect for function _log
  8298  0A69                     _log:	
  8299                           
  8300                           ;incstack = 0
  8301                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8302  0A69  0020               	movlb	0	; select bank0
  8303  0A6A  0847               	movf	log@x,w
  8304  0A6B  00F0               	movwf	___ftge@ff1
  8305  0A6C  0848               	movf	log@x+1,w
  8306  0A6D  00F1               	movwf	___ftge@ff1+1
  8307  0A6E  0849               	movf	log@x+2,w
  8308  0A6F  00F2               	movwf	___ftge@ff1+2
  8309  0A70  3000               	movlw	0
  8310  0A71  00F3               	movwf	___ftge@ff2
  8311  0A72  3000               	movlw	0
  8312  0A73  00F4               	movwf	___ftge@ff2+1
  8313  0A74  3000               	movlw	0
  8314  0A75  00F5               	movwf	___ftge@ff2+2
  8315  0A76  3194  24A6  318A   	fcall	___ftge
  8316  0A79  1803               	btfsc	3,0
  8317  0A7A  2A88               	goto	l2687
  8318  0A7B  3021               	movlw	33
  8319  0A7C  0021               	movlb	1	; select bank1
  8320  0A7D  00D4               	movwf	_errno^(0+128)
  8321  0A7E  3000               	movlw	0
  8322  0A7F  00D5               	movwf	(_errno^(0+128)+1)
  8323  0A80  3000               	movlw	0
  8324  0A81  0020               	movlb	0	; select bank0
  8325  0A82  00C7               	movwf	?_log
  8326  0A83  3000               	movlw	0
  8327  0A84  00C8               	movwf	?_log+1
  8328  0A85  3000               	movlw	0
  8329  0A86  00C9               	movwf	?_log+2
  8330  0A87  0008               	return
  8331  0A88                     l2687:	
  8332  0A88  0020               	movlb	0	; select bank0
  8333  0A89  0849               	movf	log@x+2,w
  8334  0A8A  0448               	iorwf	log@x+1,w
  8335  0A8B  0447               	iorwf	log@x,w
  8336  0A8C  1D03               	skipz
  8337  0A8D  2A9B               	goto	l2693
  8338  0A8E  3022               	movlw	34
  8339  0A8F  0021               	movlb	1	; select bank1
  8340  0A90  00D4               	movwf	_errno^(0+128)
  8341  0A91  3000               	movlw	0
  8342  0A92  00D5               	movwf	(_errno^(0+128)+1)
  8343  0A93  3000               	movlw	0
  8344  0A94  0020               	movlb	0	; select bank0
  8345  0A95  00C7               	movwf	?_log
  8346  0A96  3000               	movlw	0
  8347  0A97  00C8               	movwf	?_log+1
  8348  0A98  3000               	movlw	0
  8349  0A99  00C9               	movwf	?_log+2
  8350  0A9A  0008               	return
  8351  0A9B                     l2693:	
  8352  0A9B  3000               	movlw	0
  8353  0A9C  00B0               	movwf	___ftadd@f1
  8354  0A9D  3080               	movlw	128
  8355  0A9E  00B1               	movwf	___ftadd@f1+1
  8356  0A9F  30BF               	movlw	191
  8357  0AA0  00B2               	movwf	___ftadd@f1+2
  8358  0AA1  3000               	movlw	0
  8359  0AA2  00A0               	movwf	___ftmul@f1
  8360  0AA3  3000               	movlw	0
  8361  0AA4  00A1               	movwf	___ftmul@f1+1
  8362  0AA5  3040               	movlw	64
  8363  0AA6  00A2               	movwf	___ftmul@f1+2
  8364  0AA7  304B               	movlw	(low (log@exponent| 0))& (0+255)
  8365  0AA8  00CA               	movwf	??_log
  8366  0AA9  084A               	movf	??_log,w
  8367  0AAA  00F3               	movwf	frexp@eptr
  8368  0AAB  0847               	movf	log@x,w
  8369  0AAC  00F0               	movwf	frexp@value
  8370  0AAD  0848               	movf	log@x+1,w
  8371  0AAE  00F1               	movwf	frexp@value+1
  8372  0AAF  0849               	movf	log@x+2,w
  8373  0AB0  00F2               	movwf	frexp@value+2
  8374  0AB1  3194  24E1  318A   	fcall	_frexp
  8375  0AB4  0870               	movf	?_frexp,w
  8376  0AB5  0020               	movlb	0	; select bank0
  8377  0AB6  00A3               	movwf	___ftmul@f2
  8378  0AB7  0871               	movf	?_frexp+1,w
  8379  0AB8  00A4               	movwf	___ftmul@f2+1
  8380  0AB9  0872               	movf	?_frexp+2,w
  8381  0ABA  00A5               	movwf	___ftmul@f2+2
  8382  0ABB  318B  2319  318A   	fcall	___ftmul
  8383  0ABE  0020               	movlb	0	; select bank0
  8384  0ABF  0820               	movf	?___ftmul,w
  8385  0AC0  00B3               	movwf	___ftadd@f2
  8386  0AC1  0821               	movf	?___ftmul+1,w
  8387  0AC2  00B4               	movwf	___ftadd@f2+1
  8388  0AC3  0822               	movf	?___ftmul+2,w
  8389  0AC4  00B5               	movwf	___ftadd@f2+2
  8390  0AC5  3180  200F  318A   	fcall	___ftadd
  8391  0AC8  0020               	movlb	0	; select bank0
  8392  0AC9  0830               	movf	?___ftadd,w
  8393  0ACA  00C7               	movwf	log@x
  8394  0ACB  0831               	movf	?___ftadd+1,w
  8395  0ACC  00C8               	movwf	log@x+1
  8396  0ACD  0832               	movf	?___ftadd+2,w
  8397  0ACE  00C9               	movwf	log@x+2
  8398  0ACF  30FF               	movlw	255
  8399  0AD0  07CB               	addwf	log@exponent,f
  8400  0AD1  30FF               	movlw	255
  8401  0AD2  3DCC               	addwfc	log@exponent+1,f
  8402  0AD3  0847               	movf	log@x,w
  8403  0AD4  00BD               	movwf	eval_poly@x
  8404  0AD5  0848               	movf	log@x+1,w
  8405  0AD6  00BE               	movwf	eval_poly@x+1
  8406  0AD7  0849               	movf	log@x+2,w
  8407  0AD8  00BF               	movwf	eval_poly@x+2
  8408  0AD9  3000               	movlw	low (log@coeff| (0+32768))
  8409  0ADA  00C0               	movwf	eval_poly@d
  8410  0ADB  3098               	movlw	high (log@coeff| (0+32768))
  8411  0ADC  00C1               	movwf	eval_poly@d+1
  8412  0ADD  3008               	movlw	8
  8413  0ADE  00C2               	movwf	eval_poly@n
  8414  0ADF  3000               	movlw	0
  8415  0AE0  00C3               	movwf	eval_poly@n+1
  8416  0AE1  3196  26D5  318A   	fcall	_eval_poly
  8417  0AE4  0020               	movlb	0	; select bank0
  8418  0AE5  083D               	movf	?_eval_poly,w
  8419  0AE6  00C7               	movwf	log@x
  8420  0AE7  083E               	movf	?_eval_poly+1,w
  8421  0AE8  00C8               	movwf	log@x+1
  8422  0AE9  083F               	movf	?_eval_poly+2,w
  8423  0AEA  00C9               	movwf	log@x+2
  8424  0AEB  0847               	movf	log@x,w
  8425  0AEC  00B0               	movwf	___ftadd@f1
  8426  0AED  0848               	movf	log@x+1,w
  8427  0AEE  00B1               	movwf	___ftadd@f1+1
  8428  0AEF  0849               	movf	log@x+2,w
  8429  0AF0  00B2               	movwf	___ftadd@f1+2
  8430  0AF1  3072               	movlw	114
  8431  0AF2  00A0               	movwf	___ftmul@f1
  8432  0AF3  3031               	movlw	49
  8433  0AF4  00A1               	movwf	___ftmul@f1+1
  8434  0AF5  303F               	movlw	63
  8435  0AF6  00A2               	movwf	___ftmul@f1+2
  8436  0AF7  084C               	movf	log@exponent+1,w
  8437  0AF8  00F9               	movwf	___awtoft@c+1
  8438  0AF9  084B               	movf	log@exponent,w
  8439  0AFA  00F8               	movwf	___awtoft@c
  8440  0AFB  3193  238E  318A   	fcall	___awtoft
  8441  0AFE  0878               	movf	?___awtoft,w
  8442  0AFF  0020               	movlb	0	; select bank0
  8443  0B00  00A3               	movwf	___ftmul@f2
  8444  0B01  0879               	movf	?___awtoft+1,w
  8445  0B02  00A4               	movwf	___ftmul@f2+1
  8446  0B03  087A               	movf	?___awtoft+2,w
  8447  0B04  00A5               	movwf	___ftmul@f2+2
  8448  0B05  318B  2319  318A   	fcall	___ftmul
  8449  0B08  0020               	movlb	0	; select bank0
  8450  0B09  0820               	movf	?___ftmul,w
  8451  0B0A  00B3               	movwf	___ftadd@f2
  8452  0B0B  0821               	movf	?___ftmul+1,w
  8453  0B0C  00B4               	movwf	___ftadd@f2+1
  8454  0B0D  0822               	movf	?___ftmul+2,w
  8455  0B0E  00B5               	movwf	___ftadd@f2+2
  8456  0B0F  3180  200F         	fcall	___ftadd
  8457  0B11  0020               	movlb	0	; select bank0
  8458  0B12  0830               	movf	?___ftadd,w
  8459  0B13  00C7               	movwf	?_log
  8460  0B14  0831               	movf	?___ftadd+1,w
  8461  0B15  00C8               	movwf	?_log+1
  8462  0B16  0832               	movf	?___ftadd+2,w
  8463  0B17  00C9               	movwf	?_log+2
  8464  0B18  0008               	return
  8465  0B19                     __end_of_log:	
  8466                           
  8467                           	psect	text3
  8468  14E1                     __ptext3:	
  8469 ;; *************** function _frexp *****************
  8470 ;; Defined at:
  8471 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
  8472 ;; Parameters:    Size  Location     Type
  8473 ;;  value           3    0[COMMON] int 
  8474 ;;  eptr            1    3[COMMON] PTR int 
  8475 ;;		 -> log@exponent(2), 
  8476 ;; Auto vars:     Size  Location     Type
  8477 ;;		None
  8478 ;; Return value:  Size  Location     Type
  8479 ;;                  3    0[COMMON] PTR int 
  8480 ;; Registers used:
  8481 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8482 ;; Tracked objects:
  8483 ;;		On entry : 0/0
  8484 ;;		On exit  : 0/0
  8485 ;;		Unchanged: 0/0
  8486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8487 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8489 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8490 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8491 ;;Total ram usage:        6 bytes
  8492 ;; Hardware stack levels used:    1
  8493 ;; This function calls:
  8494 ;;		Nothing
  8495 ;; This function is called by:
  8496 ;;		_log
  8497 ;; This function uses a non-reentrant model
  8498 ;;
  8499                           
  8500                           
  8501                           ;psect for function _frexp
  8502  14E1                     _frexp:	
  8503                           
  8504                           ;incstack = 0
  8505                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  8506  14E1  0872               	movf	frexp@value+2,w
  8507  14E2  0471               	iorwf	frexp@value+1,w
  8508  14E3  0470               	iorwf	frexp@value,w
  8509  14E4  1D03               	skipz
  8510  14E5  2CF3               	goto	l2487
  8511  14E6  0873               	movf	frexp@eptr,w
  8512  14E7  0086               	movwf	6
  8513  14E8  0187               	clrf	7
  8514  14E9  3000               	movlw	0
  8515  14EA  3FC0               	movwi [0]fsr1
  8516  14EB  3FC1               	movwi [1]fsr1
  8517  14EC  3000               	movlw	0
  8518  14ED  00F0               	movwf	?_frexp
  8519  14EE  3000               	movlw	0
  8520  14EF  00F1               	movwf	?_frexp+1
  8521  14F0  3000               	movlw	0
  8522  14F1  00F2               	movwf	?_frexp+2
  8523  14F2  0008               	return
  8524  14F3                     l2487:	
  8525  14F3  0872               	movf	frexp@value+2,w
  8526  14F4  397F               	andlw	127
  8527  14F5  00F4               	movwf	??_frexp
  8528  14F6  01F5               	clrf	??_frexp+1
  8529  14F7  35F4               	lslf	??_frexp,f
  8530  14F8  0DF5               	rlf	??_frexp+1,f
  8531  14F9  0873               	movf	frexp@eptr,w
  8532  14FA  0086               	movwf	6
  8533  14FB  0187               	clrf	7
  8534  14FC  0874               	movf	??_frexp,w
  8535  14FD  3FC0               	movwi [0]fsr1
  8536  14FE  0875               	movf	??_frexp+1,w
  8537  14FF  3FC1               	movwi [1]fsr1
  8538  1500  0D71               	rlf	frexp@value+1,w
  8539  1501  0D71               	rlf	frexp@value+1,w
  8540  1502  3901               	andlw	1
  8541  1503  00F4               	movwf	??_frexp
  8542  1504  01F5               	clrf	??_frexp+1
  8543  1505  0873               	movf	frexp@eptr,w
  8544  1506  0086               	movwf	6
  8545  1507  0187               	clrf	7
  8546  1508  0874               	movf	??_frexp,w
  8547  1509  0481               	iorwf	1,f
  8548  150A  3141               	addfsr 1,1
  8549  150B  0875               	movf	??_frexp+1,w
  8550  150C  0481               	iorwf	1,f
  8551  150D  0873               	movf	frexp@eptr,w
  8552  150E  0086               	movwf	6
  8553  150F  0187               	clrf	7
  8554  1510  3082               	movlw	130
  8555  1511  0781               	addwf	1,f
  8556  1512  3141               	addfsr 1,1
  8557  1513  30FF               	movlw	255
  8558  1514  3D81               	addwfc	1,f
  8559  1515  317F               	addfsr 1,-1
  8560  1516  0872               	movf	frexp@value+2,w
  8561  1517  3980               	andlw	-128
  8562  1518  383F               	iorlw	63
  8563  1519  00F2               	movwf	frexp@value+2
  8564  151A  13F1               	bcf	frexp@value+1,7
  8565  151B  0008               	return
  8566  151C                     __end_of_frexp:	
  8567                           
  8568                           	psect	text4
  8569  16D5                     __ptext4:	
  8570 ;; *************** function _eval_poly *****************
  8571 ;; Defined at:
  8572 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\evalpoly.c"
  8573 ;; Parameters:    Size  Location     Type
  8574 ;;  x               3   29[BANK0 ] PTR int 
  8575 ;;  d               2   32[BANK0 ] PTR const 
  8576 ;;		 -> log@coeff(27), 
  8577 ;;  n               2   34[BANK0 ] int 
  8578 ;; Auto vars:     Size  Location     Type
  8579 ;;  res             3   36[BANK0 ] int 
  8580 ;; Return value:  Size  Location     Type
  8581 ;;                  3   29[BANK0 ] int 
  8582 ;; Registers used:
  8583 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8584 ;; Tracked objects:
  8585 ;;		On entry : 0/0
  8586 ;;		On exit  : 0/0
  8587 ;;		Unchanged: 0/0
  8588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8589 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8590 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8592 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8593 ;;Total ram usage:       10 bytes
  8594 ;; Hardware stack levels used:    1
  8595 ;; Hardware stack levels required when called:    2
  8596 ;; This function calls:
  8597 ;;		___ftadd
  8598 ;;		___ftmul
  8599 ;;		___wmul
  8600 ;; This function is called by:
  8601 ;;		_log
  8602 ;; This function uses a non-reentrant model
  8603 ;;
  8604                           
  8605                           
  8606                           ;psect for function _eval_poly
  8607  16D5                     _eval_poly:	
  8608                           
  8609                           ;incstack = 0
  8610                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8611  16D5  0020               	movlb	0	; select bank0
  8612  16D6  0843               	movf	eval_poly@n+1,w
  8613  16D7  00F1               	movwf	___wmul@multiplier+1
  8614  16D8  0842               	movf	eval_poly@n,w
  8615  16D9  00F0               	movwf	___wmul@multiplier
  8616  16DA  3003               	movlw	3
  8617  16DB  00F2               	movwf	___wmul@multiplicand
  8618  16DC  3000               	movlw	0
  8619  16DD  00F3               	movwf	___wmul@multiplicand+1
  8620  16DE  3193  2336  3196   	fcall	___wmul
  8621  16E1  0020               	movlb	0	; select bank0
  8622  16E2  0840               	movf	eval_poly@d,w
  8623  16E3  0770               	addwf	?___wmul,w
  8624  16E4  0084               	movwf	4
  8625  16E5  0841               	movf	eval_poly@d+1,w
  8626  16E6  3D71               	addwfc	?___wmul+1,w
  8627  16E7  0085               	movwf	5
  8628  16E8  3F00               	moviw [0]fsr0
  8629  16E9  00C4               	movwf	eval_poly@res
  8630  16EA  3F01               	moviw [1]fsr0
  8631  16EB  00C5               	movwf	eval_poly@res+1
  8632  16EC  3F02               	moviw [2]fsr0
  8633  16ED                     L4:	
  8634  16ED  00C6               	movwf	eval_poly@res+2
  8635  16EE  0842               	movf	eval_poly@n,w
  8636  16EF  0443               	iorwf	eval_poly@n+1,w
  8637  16F0  1903               	btfsc	3,2
  8638  16F1  2F2E               	goto	l2505
  8639  16F2  30FF               	movlw	255
  8640  16F3  07C2               	addwf	eval_poly@n,f
  8641  16F4  30FF               	movlw	255
  8642  16F5  3DC3               	addwfc	eval_poly@n+1,f
  8643  16F6  0843               	movf	eval_poly@n+1,w
  8644  16F7  00F1               	movwf	___wmul@multiplier+1
  8645  16F8  0842               	movf	eval_poly@n,w
  8646  16F9  00F0               	movwf	___wmul@multiplier
  8647  16FA  3003               	movlw	3
  8648  16FB  00F2               	movwf	___wmul@multiplicand
  8649  16FC  3000               	movlw	0
  8650  16FD  00F3               	movwf	___wmul@multiplicand+1
  8651  16FE  3193  2336  3196   	fcall	___wmul
  8652  1701  0020               	movlb	0	; select bank0
  8653  1702  0840               	movf	eval_poly@d,w
  8654  1703  0770               	addwf	?___wmul,w
  8655  1704  0084               	movwf	4
  8656  1705  0841               	movf	eval_poly@d+1,w
  8657  1706  3D71               	addwfc	?___wmul+1,w
  8658  1707  0085               	movwf	5
  8659  1708  3F00               	moviw [0]fsr0
  8660  1709  00B0               	movwf	___ftadd@f1
  8661  170A  3F01               	moviw [1]fsr0
  8662  170B  00B1               	movwf	___ftadd@f1+1
  8663  170C  3F02               	moviw [2]fsr0
  8664  170D  00B2               	movwf	___ftadd@f1+2
  8665  170E  0844               	movf	eval_poly@res,w
  8666  170F  00A0               	movwf	___ftmul@f1
  8667  1710  0845               	movf	eval_poly@res+1,w
  8668  1711  00A1               	movwf	___ftmul@f1+1
  8669  1712  0846               	movf	eval_poly@res+2,w
  8670  1713  00A2               	movwf	___ftmul@f1+2
  8671  1714  083D               	movf	eval_poly@x,w
  8672  1715  00A3               	movwf	___ftmul@f2
  8673  1716  083E               	movf	eval_poly@x+1,w
  8674  1717  00A4               	movwf	___ftmul@f2+1
  8675  1718  083F               	movf	eval_poly@x+2,w
  8676  1719  00A5               	movwf	___ftmul@f2+2
  8677  171A  318B  2319  3196   	fcall	___ftmul
  8678  171D  0020               	movlb	0	; select bank0
  8679  171E  0820               	movf	?___ftmul,w
  8680  171F  00B3               	movwf	___ftadd@f2
  8681  1720  0821               	movf	?___ftmul+1,w
  8682  1721  00B4               	movwf	___ftadd@f2+1
  8683  1722  0822               	movf	?___ftmul+2,w
  8684  1723  00B5               	movwf	___ftadd@f2+2
  8685  1724  3180  200F  3196   	fcall	___ftadd
  8686  1727  0020               	movlb	0	; select bank0
  8687  1728  0830               	movf	?___ftadd,w
  8688  1729  00C4               	movwf	eval_poly@res
  8689  172A  0831               	movf	?___ftadd+1,w
  8690  172B  00C5               	movwf	eval_poly@res+1
  8691  172C  0832               	movf	?___ftadd+2,w
  8692  172D  2EED               	goto	L4
  8693  172E                     l2505:	
  8694  172E  0844               	movf	eval_poly@res,w
  8695  172F  00BD               	movwf	?_eval_poly
  8696  1730  0845               	movf	eval_poly@res+1,w
  8697  1731  00BE               	movwf	?_eval_poly+1
  8698  1732  0846               	movf	eval_poly@res+2,w
  8699  1733  00BF               	movwf	?_eval_poly+2
  8700  1734  0008               	return
  8701  1735                     __end_of_eval_poly:	
  8702                           
  8703                           	psect	text5
  8704  14A6                     __ptext5:	
  8705 ;; *************** function ___ftge *****************
  8706 ;; Defined at:
  8707 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  8708 ;; Parameters:    Size  Location     Type
  8709 ;;  ff1             3    0[COMMON] float 
  8710 ;;  ff2             3    3[COMMON] float 
  8711 ;; Auto vars:     Size  Location     Type
  8712 ;;		None
  8713 ;; Return value:  Size  Location     Type
  8714 ;;		None               void
  8715 ;; Registers used:
  8716 ;;		wreg, status,2, status,0
  8717 ;; Tracked objects:
  8718 ;;		On entry : 0/0
  8719 ;;		On exit  : 0/0
  8720 ;;		Unchanged: 0/0
  8721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8722 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8724 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8725 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8726 ;;Total ram usage:        9 bytes
  8727 ;; Hardware stack levels used:    1
  8728 ;; This function calls:
  8729 ;;		Nothing
  8730 ;; This function is called by:
  8731 ;;		_log
  8732 ;; This function uses a non-reentrant model
  8733 ;;
  8734                           
  8735                           
  8736                           ;psect for function ___ftge
  8737  14A6                     ___ftge:	
  8738                           
  8739                           ;incstack = 0
  8740                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8741  14A6  1FF2               	btfss	___ftge@ff1+2,7
  8742  14A7  2CBC               	goto	l2421
  8743  14A8  0970               	comf	___ftge@ff1,w
  8744  14A9  00F6               	movwf	??___ftge
  8745  14AA  0971               	comf	___ftge@ff1+1,w
  8746  14AB  00F7               	movwf	??___ftge+1
  8747  14AC  0972               	comf	___ftge@ff1+2,w
  8748  14AD  00F8               	movwf	??___ftge+2
  8749  14AE  0AF6               	incf	??___ftge,f
  8750  14AF  1903               	skipnz
  8751  14B0  0AF7               	incf	??___ftge+1,f
  8752  14B1  1903               	skipnz
  8753  14B2  0AF8               	incf	??___ftge+2,f
  8754  14B3  3000               	movlw	0
  8755  14B4  0776               	addwf	??___ftge,w
  8756  14B5  00F0               	movwf	___ftge@ff1
  8757  14B6  3000               	movlw	0
  8758  14B7  3D77               	addwfc	??___ftge+1,w
  8759  14B8  00F1               	movwf	___ftge@ff1+1
  8760  14B9  3080               	movlw	128
  8761  14BA  3D78               	addwfc	??___ftge+2,w
  8762  14BB  00F2               	movwf	___ftge@ff1+2
  8763  14BC                     l2421:	
  8764  14BC  1FF5               	btfss	___ftge@ff2+2,7
  8765  14BD  2CD2               	goto	l2425
  8766  14BE  0973               	comf	___ftge@ff2,w
  8767  14BF  00F6               	movwf	??___ftge
  8768  14C0  0974               	comf	___ftge@ff2+1,w
  8769  14C1  00F7               	movwf	??___ftge+1
  8770  14C2  0975               	comf	___ftge@ff2+2,w
  8771  14C3  00F8               	movwf	??___ftge+2
  8772  14C4  0AF6               	incf	??___ftge,f
  8773  14C5  1903               	skipnz
  8774  14C6  0AF7               	incf	??___ftge+1,f
  8775  14C7  1903               	skipnz
  8776  14C8  0AF8               	incf	??___ftge+2,f
  8777  14C9  3000               	movlw	0
  8778  14CA  0776               	addwf	??___ftge,w
  8779  14CB  00F3               	movwf	___ftge@ff2
  8780  14CC  3000               	movlw	0
  8781  14CD  3D77               	addwfc	??___ftge+1,w
  8782  14CE  00F4               	movwf	___ftge@ff2+1
  8783  14CF  3080               	movlw	128
  8784  14D0  3D78               	addwfc	??___ftge+2,w
  8785  14D1  00F5               	movwf	___ftge@ff2+2
  8786  14D2                     l2425:	
  8787  14D2  3080               	movlw	128
  8788  14D3  06F2               	xorwf	___ftge@ff1+2,f
  8789  14D4  3080               	movlw	128
  8790  14D5  06F5               	xorwf	___ftge@ff2+2,f
  8791  14D6  0875               	movf	___ftge@ff2+2,w
  8792  14D7  0272               	subwf	___ftge@ff1+2,w
  8793  14D8  1D03               	skipz
  8794  14D9  0008               	return
  8795  14DA  0874               	movf	___ftge@ff2+1,w
  8796  14DB  0271               	subwf	___ftge@ff1+1,w
  8797  14DC  1D03               	skipz
  8798  14DD  0008               	return
  8799  14DE  0873               	movf	___ftge@ff2,w
  8800  14DF  0270               	subwf	___ftge@ff1,w
  8801  14E0  0008               	return
  8802  14E1                     __end_of___ftge:	
  8803                           
  8804                           	psect	text6
  8805  1351                     __ptext6:	
  8806 ;; *************** function ___ftsub *****************
  8807 ;; Defined at:
  8808 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftsub.c"
  8809 ;; Parameters:    Size  Location     Type
  8810 ;;  f2              3   29[BANK0 ] float 
  8811 ;;  f1              3   32[BANK0 ] float 
  8812 ;; Auto vars:     Size  Location     Type
  8813 ;;		None
  8814 ;; Return value:  Size  Location     Type
  8815 ;;                  3   29[BANK0 ] float 
  8816 ;; Registers used:
  8817 ;;		wreg, status,2, status,0, pclath, cstack
  8818 ;; Tracked objects:
  8819 ;;		On entry : 0/0
  8820 ;;		On exit  : 0/0
  8821 ;;		Unchanged: 0/0
  8822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8823 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8826 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8827 ;;Total ram usage:        6 bytes
  8828 ;; Hardware stack levels used:    1
  8829 ;; Hardware stack levels required when called:    2
  8830 ;; This function calls:
  8831 ;;		___ftadd
  8832 ;; This function is called by:
  8833 ;;		_tempCalc
  8834 ;; This function uses a non-reentrant model
  8835 ;;
  8836                           
  8837                           
  8838                           ;psect for function ___ftsub
  8839  1351                     ___ftsub:	
  8840                           
  8841                           ;incstack = 0
  8842                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  8843  1351  0020               	movlb	0	; select bank0
  8844  1352  083F               	movf	___ftsub@f2+2,w
  8845  1353  043E               	iorwf	___ftsub@f2+1,w
  8846  1354  043D               	iorwf	___ftsub@f2,w
  8847  1355  1903               	skipnz
  8848  1356  2B59               	goto	l2833
  8849  1357  3080               	movlw	128
  8850  1358  06BF               	xorwf	___ftsub@f2+2,f
  8851  1359                     l2833:	
  8852  1359  0840               	movf	___ftsub@f1,w
  8853  135A  00B0               	movwf	___ftadd@f1
  8854  135B  0841               	movf	___ftsub@f1+1,w
  8855  135C  00B1               	movwf	___ftadd@f1+1
  8856  135D  0842               	movf	___ftsub@f1+2,w
  8857  135E  00B2               	movwf	___ftadd@f1+2
  8858  135F  083D               	movf	___ftsub@f2,w
  8859  1360  00B3               	movwf	___ftadd@f2
  8860  1361  083E               	movf	___ftsub@f2+1,w
  8861  1362  00B4               	movwf	___ftadd@f2+1
  8862  1363  083F               	movf	___ftsub@f2+2,w
  8863  1364  00B5               	movwf	___ftadd@f2+2
  8864  1365  3180  200F         	fcall	___ftadd
  8865  1367  0020               	movlb	0	; select bank0
  8866  1368  0830               	movf	?___ftadd,w
  8867  1369  00BD               	movwf	?___ftsub
  8868  136A  0831               	movf	?___ftadd+1,w
  8869  136B  00BE               	movwf	?___ftsub+1
  8870  136C  0832               	movf	?___ftadd+2,w
  8871  136D  00BF               	movwf	?___ftsub+2
  8872  136E  0008               	return
  8873  136F                     __end_of___ftsub:	
  8874                           
  8875                           	psect	text7
  8876  000F                     __ptext7:	
  8877 ;; *************** function ___ftadd *****************
  8878 ;; Defined at:
  8879 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  8880 ;; Parameters:    Size  Location     Type
  8881 ;;  f1              3   16[BANK0 ] float 
  8882 ;;  f2              3   19[BANK0 ] float 
  8883 ;; Auto vars:     Size  Location     Type
  8884 ;;  exp1            1   28[BANK0 ] unsigned char 
  8885 ;;  exp2            1   27[BANK0 ] unsigned char 
  8886 ;;  sign            1   26[BANK0 ] unsigned char 
  8887 ;; Return value:  Size  Location     Type
  8888 ;;                  3   16[BANK0 ] float 
  8889 ;; Registers used:
  8890 ;;		wreg, status,2, status,0, pclath, cstack
  8891 ;; Tracked objects:
  8892 ;;		On entry : 0/0
  8893 ;;		On exit  : 0/0
  8894 ;;		Unchanged: 0/0
  8895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8896 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8897 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8898 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8899 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8900 ;;Total ram usage:       13 bytes
  8901 ;; Hardware stack levels used:    1
  8902 ;; Hardware stack levels required when called:    1
  8903 ;; This function calls:
  8904 ;;		___ftpack
  8905 ;; This function is called by:
  8906 ;;		_tempCalc
  8907 ;;		___ftsub
  8908 ;;		_log
  8909 ;;		_eval_poly
  8910 ;; This function uses a non-reentrant model
  8911 ;;
  8912                           
  8913                           
  8914                           ;psect for function ___ftadd
  8915  000F                     ___ftadd:	
  8916                           
  8917                           ;incstack = 0
  8918                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8919  000F  0020               	movlb	0	; select bank0
  8920  0010  0830               	movf	___ftadd@f1,w
  8921  0011  00B6               	movwf	??___ftadd
  8922  0012  0831               	movf	___ftadd@f1+1,w
  8923  0013  00B7               	movwf	??___ftadd+1
  8924  0014  0832               	movf	___ftadd@f1+2,w
  8925  0015  00B8               	movwf	??___ftadd+2
  8926  0016  1003               	clrc
  8927  0017  0D37               	rlf	??___ftadd+1,w
  8928  0018  0D38               	rlf	??___ftadd+2,w
  8929  0019  00B9               	movwf	??___ftadd+3
  8930  001A  0839               	movf	??___ftadd+3,w
  8931  001B  00BC               	movwf	___ftadd@exp1
  8932  001C  0833               	movf	___ftadd@f2,w
  8933  001D  00B6               	movwf	??___ftadd
  8934  001E  0834               	movf	___ftadd@f2+1,w
  8935  001F  00B7               	movwf	??___ftadd+1
  8936  0020  0835               	movf	___ftadd@f2+2,w
  8937  0021  00B8               	movwf	??___ftadd+2
  8938  0022  1003               	clrc
  8939  0023  0D37               	rlf	??___ftadd+1,w
  8940  0024  0D38               	rlf	??___ftadd+2,w
  8941  0025  00B9               	movwf	??___ftadd+3
  8942  0026  0839               	movf	??___ftadd+3,w
  8943  0027  00BB               	movwf	___ftadd@exp2
  8944  0028  083C               	movf	___ftadd@exp1,w
  8945  0029  1903               	btfsc	3,2
  8946  002A  2837               	goto	l2289
  8947  002B  083B               	movf	___ftadd@exp2,w
  8948  002C  023C               	subwf	___ftadd@exp1,w
  8949  002D  1803               	skipnc
  8950  002E  283E               	goto	l2293
  8951  002F  033C               	decf	___ftadd@exp1,w
  8952  0030  3AFF               	xorlw	255
  8953  0031  073B               	addwf	___ftadd@exp2,w
  8954  0032  00B6               	movwf	??___ftadd
  8955  0033  3019               	movlw	25
  8956  0034  0236               	subwf	??___ftadd,w
  8957  0035  1C03               	skipc
  8958  0036  283E               	goto	l2293
  8959  0037                     l2289:	
  8960  0037  0833               	movf	___ftadd@f2,w
  8961  0038  00B0               	movwf	?___ftadd
  8962  0039  0834               	movf	___ftadd@f2+1,w
  8963  003A  00B1               	movwf	?___ftadd+1
  8964  003B  0835               	movf	___ftadd@f2+2,w
  8965  003C  00B2               	movwf	?___ftadd+2
  8966  003D  0008               	return
  8967  003E                     l2293:	
  8968  003E  083B               	movf	___ftadd@exp2,w
  8969  003F  1903               	btfsc	3,2
  8970  0040  0008               	return
  8971  0041  083C               	movf	___ftadd@exp1,w
  8972  0042  023B               	subwf	___ftadd@exp2,w
  8973  0043  1803               	skipnc
  8974  0044  284D               	goto	l2299
  8975  0045  033B               	decf	___ftadd@exp2,w
  8976  0046  3AFF               	xorlw	255
  8977  0047  073C               	addwf	___ftadd@exp1,w
  8978  0048  00B6               	movwf	??___ftadd
  8979  0049  3019               	movlw	25
  8980  004A  0236               	subwf	??___ftadd,w
  8981  004B  1803               	btfsc	3,0
  8982  004C  0008               	return
  8983  004D                     l2299:	
  8984  004D  3006               	movlw	6
  8985  004E  00B6               	movwf	??___ftadd
  8986  004F  0836               	movf	??___ftadd,w
  8987  0050  00BA               	movwf	___ftadd@sign
  8988  0051  1BB2               	btfsc	___ftadd@f1+2,7
  8989  0052  17BA               	bsf	___ftadd@sign,7
  8990  0053  1BB5               	btfsc	___ftadd@f2+2,7
  8991  0054  173A               	bsf	___ftadd@sign,6
  8992  0055  17B1               	bsf	___ftadd@f1+1,7
  8993  0056  30FF               	movlw	255
  8994  0057  05B0               	andwf	___ftadd@f1,f
  8995  0058  30FF               	movlw	255
  8996  0059  05B1               	andwf	___ftadd@f1+1,f
  8997  005A  3000               	movlw	0
  8998  005B  05B2               	andwf	___ftadd@f1+2,f
  8999  005C  17B4               	bsf	___ftadd@f2+1,7
  9000  005D  30FF               	movlw	255
  9001  005E  05B3               	andwf	___ftadd@f2,f
  9002  005F  30FF               	movlw	255
  9003  0060  05B4               	andwf	___ftadd@f2+1,f
  9004  0061  3000               	movlw	0
  9005  0062  05B5               	andwf	___ftadd@f2+2,f
  9006  0063  083B               	movf	___ftadd@exp2,w
  9007  0064  023C               	subwf	___ftadd@exp1,w
  9008  0065  1803               	skipnc
  9009  0066  2889               	goto	l2321
  9010  0067                     l2311:	
  9011  0067  3001               	movlw	1
  9012  0068                     u2285:	
  9013  0068  35B3               	lslf	___ftadd@f2,f
  9014  0069  0DB4               	rlf	___ftadd@f2+1,f
  9015  006A  0DB5               	rlf	___ftadd@f2+2,f
  9016  006B  0B89               	decfsz	9,f
  9017  006C  2868               	goto	u2285
  9018  006D  3001               	movlw	1
  9019  006E  02BB               	subwf	___ftadd@exp2,f
  9020  006F  083B               	movf	___ftadd@exp2,w
  9021  0070  063C               	xorwf	___ftadd@exp1,w
  9022  0071  1903               	skipnz
  9023  0072  2884               	goto	l2319
  9024  0073  3001               	movlw	1
  9025  0074  02BA               	subwf	___ftadd@sign,f
  9026  0075  083A               	movf	___ftadd@sign,w
  9027  0076  3907               	andlw	7
  9028  0077  1903               	btfsc	3,2
  9029  0078  2884               	goto	l2319
  9030  0079  2867               	goto	l2311
  9031  007A                     l2317:	
  9032  007A  3001               	movlw	1
  9033  007B                     u2315:	
  9034  007B  36B2               	lsrf	___ftadd@f1+2,f
  9035  007C  0CB1               	rrf	___ftadd@f1+1,f
  9036  007D  0CB0               	rrf	___ftadd@f1,f
  9037  007E  0B89               	decfsz	9,f
  9038  007F  287B               	goto	u2315
  9039  0080  3001               	movlw	1
  9040  0081  00B6               	movwf	??___ftadd
  9041  0082  0836               	movf	??___ftadd,w
  9042  0083  07BC               	addwf	___ftadd@exp1,f
  9043  0084                     l2319:	
  9044  0084  083C               	movf	___ftadd@exp1,w
  9045  0085  063B               	xorwf	___ftadd@exp2,w
  9046  0086  1903               	btfsc	3,2
  9047  0087  28AE               	goto	l781
  9048  0088  287A               	goto	l2317
  9049  0089                     l2321:	
  9050  0089  083C               	movf	___ftadd@exp1,w
  9051  008A  023B               	subwf	___ftadd@exp2,w
  9052  008B  1803               	skipnc
  9053  008C  28AE               	goto	l781
  9054  008D                     l2323:	
  9055  008D  3001               	movlw	1
  9056  008E                     u2345:	
  9057  008E  35B0               	lslf	___ftadd@f1,f
  9058  008F  0DB1               	rlf	___ftadd@f1+1,f
  9059  0090  0DB2               	rlf	___ftadd@f1+2,f
  9060  0091  0B89               	decfsz	9,f
  9061  0092  288E               	goto	u2345
  9062  0093  3001               	movlw	1
  9063  0094  02BC               	subwf	___ftadd@exp1,f
  9064  0095  083B               	movf	___ftadd@exp2,w
  9065  0096  063C               	xorwf	___ftadd@exp1,w
  9066  0097  1903               	skipnz
  9067  0098  28AA               	goto	l2331
  9068  0099  3001               	movlw	1
  9069  009A  02BA               	subwf	___ftadd@sign,f
  9070  009B  083A               	movf	___ftadd@sign,w
  9071  009C  3907               	andlw	7
  9072  009D  1903               	btfsc	3,2
  9073  009E  28AA               	goto	l2331
  9074  009F  288D               	goto	l2323
  9075  00A0                     l2329:	
  9076  00A0  3001               	movlw	1
  9077  00A1                     u2375:	
  9078  00A1  36B5               	lsrf	___ftadd@f2+2,f
  9079  00A2  0CB4               	rrf	___ftadd@f2+1,f
  9080  00A3  0CB3               	rrf	___ftadd@f2,f
  9081  00A4  0B89               	decfsz	9,f
  9082  00A5  28A1               	goto	u2375
  9083  00A6  3001               	movlw	1
  9084  00A7  00B6               	movwf	??___ftadd
  9085  00A8  0836               	movf	??___ftadd,w
  9086  00A9  07BB               	addwf	___ftadd@exp2,f
  9087  00AA                     l2331:	
  9088  00AA  083C               	movf	___ftadd@exp1,w
  9089  00AB  063B               	xorwf	___ftadd@exp2,w
  9090  00AC  1D03               	skipz
  9091  00AD  28A0               	goto	l2329
  9092  00AE                     l781:	
  9093  00AE  1FBA               	btfss	___ftadd@sign,7
  9094  00AF  28C0               	goto	l2335
  9095  00B0  30FF               	movlw	255
  9096  00B1  06B0               	xorwf	___ftadd@f1,f
  9097  00B2  30FF               	movlw	255
  9098  00B3  06B1               	xorwf	___ftadd@f1+1,f
  9099  00B4  30FF               	movlw	255
  9100  00B5  06B2               	xorwf	___ftadd@f1+2,f
  9101  00B6  3001               	movlw	1
  9102  00B7  07B0               	addwf	___ftadd@f1,f
  9103  00B8  3000               	movlw	0
  9104  00B9  1803               	skipnc
  9105  00BA  3001               	movlw	1
  9106  00BB  07B1               	addwf	___ftadd@f1+1,f
  9107  00BC  3000               	movlw	0
  9108  00BD  1803               	skipnc
  9109  00BE  3001               	movlw	1
  9110  00BF  07B2               	addwf	___ftadd@f1+2,f
  9111  00C0                     l2335:	
  9112  00C0  1F3A               	btfss	___ftadd@sign,6
  9113  00C1  28D2               	goto	l2339
  9114  00C2  30FF               	movlw	255
  9115  00C3  06B3               	xorwf	___ftadd@f2,f
  9116  00C4  30FF               	movlw	255
  9117  00C5  06B4               	xorwf	___ftadd@f2+1,f
  9118  00C6  30FF               	movlw	255
  9119  00C7  06B5               	xorwf	___ftadd@f2+2,f
  9120  00C8  3001               	movlw	1
  9121  00C9  07B3               	addwf	___ftadd@f2,f
  9122  00CA  3000               	movlw	0
  9123  00CB  1803               	skipnc
  9124  00CC  3001               	movlw	1
  9125  00CD  07B4               	addwf	___ftadd@f2+1,f
  9126  00CE  3000               	movlw	0
  9127  00CF  1803               	skipnc
  9128  00D0  3001               	movlw	1
  9129  00D1  07B5               	addwf	___ftadd@f2+2,f
  9130  00D2                     l2339:	
  9131  00D2  01BA               	clrf	___ftadd@sign
  9132  00D3  0830               	movf	___ftadd@f1,w
  9133  00D4  07B3               	addwf	___ftadd@f2,f
  9134  00D5  0831               	movf	___ftadd@f1+1,w
  9135  00D6  3DB4               	addwfc	___ftadd@f2+1,f
  9136  00D7  0832               	movf	___ftadd@f1+2,w
  9137  00D8  3DB5               	addwfc	___ftadd@f2+2,f
  9138  00D9  1FB5               	btfss	___ftadd@f2+2,7
  9139  00DA  28ED               	goto	l2349
  9140  00DB  30FF               	movlw	255
  9141  00DC  06B3               	xorwf	___ftadd@f2,f
  9142  00DD  30FF               	movlw	255
  9143  00DE  06B4               	xorwf	___ftadd@f2+1,f
  9144  00DF  30FF               	movlw	255
  9145  00E0  06B5               	xorwf	___ftadd@f2+2,f
  9146  00E1  3001               	movlw	1
  9147  00E2  07B3               	addwf	___ftadd@f2,f
  9148  00E3  3000               	movlw	0
  9149  00E4  1803               	skipnc
  9150  00E5  3001               	movlw	1
  9151  00E6  07B4               	addwf	___ftadd@f2+1,f
  9152  00E7  3000               	movlw	0
  9153  00E8  1803               	skipnc
  9154  00E9  3001               	movlw	1
  9155  00EA  07B5               	addwf	___ftadd@f2+2,f
  9156  00EB  01BA               	clrf	___ftadd@sign
  9157  00EC  0ABA               	incf	___ftadd@sign,f
  9158  00ED                     l2349:	
  9159  00ED  0833               	movf	___ftadd@f2,w
  9160  00EE  00F0               	movwf	___ftpack@arg
  9161  00EF  0834               	movf	___ftadd@f2+1,w
  9162  00F0  00F1               	movwf	___ftpack@arg+1
  9163  00F1  0835               	movf	___ftadd@f2+2,w
  9164  00F2  00F2               	movwf	___ftpack@arg+2
  9165  00F3  083C               	movf	___ftadd@exp1,w
  9166  00F4  00B6               	movwf	??___ftadd
  9167  00F5  0836               	movf	??___ftadd,w
  9168  00F6  00F3               	movwf	___ftpack@exp
  9169  00F7  083A               	movf	___ftadd@sign,w
  9170  00F8  00B7               	movwf	??___ftadd+1
  9171  00F9  0837               	movf	??___ftadd+1,w
  9172  00FA  00F4               	movwf	___ftpack@sign
  9173  00FB  3197  2735         	fcall	___ftpack
  9174  00FD  0870               	movf	?___ftpack,w
  9175  00FE  0020               	movlb	0	; select bank0
  9176  00FF  00B0               	movwf	?___ftadd
  9177  0100  0871               	movf	?___ftpack+1,w
  9178  0101  00B1               	movwf	?___ftadd+1
  9179  0102  0872               	movf	?___ftpack+2,w
  9180  0103  00B2               	movwf	?___ftadd+2
  9181  0104  0008               	return
  9182  0105                     __end_of___ftadd:	
  9183                           
  9184                           	psect	text8
  9185  0EB4                     __ptext8:	
  9186 ;; *************** function _readIAnalog *****************
  9187 ;; Defined at:
  9188 ;;		line 77 in file "adc.c"
  9189 ;; Parameters:    Size  Location     Type
  9190 ;;  channel         2    6[BANK0 ] unsigned int 
  9191 ;; Auto vars:     Size  Location     Type
  9192 ;;  value           2   11[COMMON] int 
  9193 ;;  analog_chann    2    9[COMMON] unsigned int 
  9194 ;; Return value:  Size  Location     Type
  9195 ;;                  2    6[BANK0 ] int 
  9196 ;; Registers used:
  9197 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9198 ;; Tracked objects:
  9199 ;;		On entry : 0/0
  9200 ;;		On exit  : 0/0
  9201 ;;		Unchanged: 0/0
  9202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9203 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9204 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9205 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9206 ;;      Totals:         4      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9207 ;;Total ram usage:       24 bytes
  9208 ;; Hardware stack levels used:    1
  9209 ;; Hardware stack levels required when called:    1
  9210 ;; This function calls:
  9211 ;;		_ADCRead
  9212 ;;		___aldiv
  9213 ;;		___wmul
  9214 ;; This function is called by:
  9215 ;;		_main
  9216 ;; This function uses a non-reentrant model
  9217 ;;
  9218                           
  9219                           
  9220                           ;psect for function _readIAnalog
  9221  0EB4                     _readIAnalog:	
  9222                           
  9223                           ;adc.c: 79: int16_t value;
  9224                           ;adc.c: 81: uint16_t analog_channel = channels[channel];
  9225                           
  9226                           ;incstack = 0
  9227                           ; Regs used in _readIAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9228  0EB4  0020               	movlb	0	; select bank0
  9229  0EB5  3526               	lslf	readIAnalog@channel,w
  9230  0EB6  3E35               	addlw	(low (_channels| (0+256)))& (0+255)
  9231  0EB7  0086               	movwf	6
  9232  0EB8  3001               	movlw	1	; select bank2/3
  9233  0EB9  0087               	movwf	7
  9234  0EBA  3F40               	moviw [0]fsr1
  9235  0EBB  00F9               	movwf	readIAnalog@analog_channel
  9236  0EBC  3F41               	moviw [1]fsr1
  9237  0EBD  00FA               	movwf	readIAnalog@analog_channel+1
  9238                           
  9239                           ;adc.c: 83: value = ADCRead(analog_channel);
  9240  0EBE  0879               	movf	readIAnalog@analog_channel,w
  9241  0EBF  3192  22F5  318E   	fcall	_ADCRead
  9242  0EC2  0871               	movf	?_ADCRead+1,w
  9243  0EC3  00FC               	movwf	readIAnalog@value+1
  9244  0EC4  0870               	movf	?_ADCRead,w
  9245  0EC5  00FB               	movwf	readIAnalog@value
  9246                           
  9247                           ;adc.c: 85: totals[channel] = totals[channel]-samples[channel][sampleIndex];
  9248  0EC6  0020               	movlb	0	; select bank0
  9249  0EC7  0826               	movf	readIAnalog@channel,w
  9250  0EC8  00A8               	movwf	??_readIAnalog
  9251  0EC9  3001               	movlw	1
  9252  0ECA                     u3135:	
  9253  0ECA  35A8               	lslf	??_readIAnalog,f
  9254  0ECB  3EFF               	addlw	-1
  9255  0ECC  1D03               	skipz
  9256  0ECD  2ECA               	goto	u3135
  9257  0ECE  3528               	lslf	??_readIAnalog,w
  9258  0ECF  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9259  0ED0  0086               	movwf	6
  9260  0ED1  3001               	movlw	1	; select bank2/3
  9261  0ED2  0087               	movwf	7
  9262  0ED3  3F40               	moviw [0]fsr1
  9263  0ED4  00A9               	movwf	??_readIAnalog+1
  9264  0ED5  3F41               	moviw [1]fsr1
  9265  0ED6  00AA               	movwf	??_readIAnalog+2
  9266  0ED7  3F42               	moviw [2]fsr1
  9267  0ED8  00AB               	movwf	??_readIAnalog+3
  9268  0ED9  3F43               	moviw [3]fsr1
  9269  0EDA  00AC               	movwf	??_readIAnalog+4
  9270  0EDB  0021               	movlb	1	; select bank1
  9271  0EDC  0865               	movf	(_sampleIndex+1)^(0+128),w
  9272  0EDD  0020               	movlb	0	; select bank0
  9273  0EDE  00AE               	movwf	??_readIAnalog+6
  9274  0EDF  0021               	movlb	1	; select bank1
  9275  0EE0  0864               	movf	_sampleIndex^(0+128),w
  9276  0EE1  0020               	movlb	0	; select bank0
  9277  0EE2  00AD               	movwf	??_readIAnalog+5
  9278  0EE3  35AD               	lslf	??_readIAnalog+5,f
  9279  0EE4  0DAE               	rlf	??_readIAnalog+6,f
  9280  0EE5  0827               	movf	readIAnalog@channel+1,w
  9281  0EE6  00F1               	movwf	___wmul@multiplier+1
  9282  0EE7  0826               	movf	readIAnalog@channel,w
  9283  0EE8  00F0               	movwf	___wmul@multiplier
  9284  0EE9  3064               	movlw	100
  9285  0EEA  00F2               	movwf	___wmul@multiplicand
  9286  0EEB  3000               	movlw	0
  9287  0EEC  00F3               	movwf	___wmul@multiplicand+1
  9288  0EED  3193  2336  318E   	fcall	___wmul
  9289  0EF0  3060               	movlw	96
  9290  0EF1  0020               	movlb	0	; select bank0
  9291  0EF2  00AF               	movwf	??_readIAnalog+7
  9292  0EF3  3022               	movlw	34
  9293  0EF4  00B0               	movwf	??_readIAnalog+8
  9294  0EF5  0870               	movf	?___wmul,w
  9295  0EF6  072F               	addwf	??_readIAnalog+7,w
  9296  0EF7  00B1               	movwf	??_readIAnalog+9
  9297  0EF8  0871               	movf	?___wmul+1,w
  9298  0EF9  3D30               	addwfc	??_readIAnalog+8,w
  9299  0EFA  00B2               	movwf	??_readIAnalog+10
  9300  0EFB  082D               	movf	??_readIAnalog+5,w
  9301  0EFC  0731               	addwf	??_readIAnalog+9,w
  9302  0EFD  0086               	movwf	6
  9303  0EFE  082E               	movf	??_readIAnalog+6,w
  9304  0EFF  3D32               	addwfc	??_readIAnalog+10,w
  9305  0F00  0087               	movwf	7
  9306  0F01  3F40               	moviw [0]fsr1
  9307  0F02  00B3               	movwf	??_readIAnalog+11
  9308  0F03  3F41               	moviw [1]fsr1
  9309  0F04  00B4               	movwf	??_readIAnalog+12
  9310  0F05  0833               	movf	??_readIAnalog+11,w
  9311  0F06  00B5               	movwf	??_readIAnalog+13
  9312  0F07  0834               	movf	??_readIAnalog+12,w
  9313  0F08  00B6               	movwf	??_readIAnalog+14
  9314  0F09  3000               	movlw	0
  9315  0F0A  1BB6               	btfsc	??_readIAnalog+14,7
  9316  0F0B  30FF               	movlw	255
  9317  0F0C  00B7               	movwf	??_readIAnalog+15
  9318  0F0D  00B8               	movwf	??_readIAnalog+16
  9319  0F0E  09B5               	comf	??_readIAnalog+13,f
  9320  0F0F  09B6               	comf	??_readIAnalog+14,f
  9321  0F10  09B7               	comf	??_readIAnalog+15,f
  9322  0F11  09B8               	comf	??_readIAnalog+16,f
  9323  0F12  0AB5               	incf	??_readIAnalog+13,f
  9324  0F13  1903               	skipnz
  9325  0F14  0AB6               	incf	??_readIAnalog+14,f
  9326  0F15  1903               	skipnz
  9327  0F16  0AB7               	incf	??_readIAnalog+15,f
  9328  0F17  1903               	skipnz
  9329  0F18  0AB8               	incf	??_readIAnalog+16,f
  9330  0F19  0835               	movf	??_readIAnalog+13,w
  9331  0F1A  07A9               	addwf	??_readIAnalog+1,f
  9332  0F1B  0836               	movf	??_readIAnalog+14,w
  9333  0F1C  3DAA               	addwfc	??_readIAnalog+2,f
  9334  0F1D  0837               	movf	??_readIAnalog+15,w
  9335  0F1E  3DAB               	addwfc	??_readIAnalog+3,f
  9336  0F1F  0838               	movf	??_readIAnalog+16,w
  9337  0F20  3DAC               	addwfc	??_readIAnalog+4,f
  9338  0F21  0826               	movf	readIAnalog@channel,w
  9339  0F22  00B9               	movwf	??_readIAnalog+17
  9340  0F23  3001               	movlw	1
  9341  0F24                     u3145:	
  9342  0F24  35B9               	lslf	??_readIAnalog+17,f
  9343  0F25  3EFF               	addlw	-1
  9344  0F26  1D03               	skipz
  9345  0F27  2F24               	goto	u3145
  9346  0F28  3539               	lslf	??_readIAnalog+17,w
  9347  0F29  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9348  0F2A  0086               	movwf	6
  9349  0F2B  3001               	movlw	1	; select bank2/3
  9350  0F2C  0087               	movwf	7
  9351  0F2D  0829               	movf	??_readIAnalog+1,w
  9352  0F2E  3FC0               	movwi [0]fsr1
  9353  0F2F  082A               	movf	??_readIAnalog+2,w
  9354  0F30  3FC1               	movwi [1]fsr1
  9355  0F31  082B               	movf	??_readIAnalog+3,w
  9356  0F32  3FC2               	movwi [2]fsr1
  9357  0F33  082C               	movf	??_readIAnalog+4,w
  9358  0F34  3FC3               	movwi [3]fsr1
  9359                           
  9360                           ;adc.c: 87: samples[channel][sampleIndex] = value;
  9361  0F35  0021               	movlb	1	; select bank1
  9362  0F36  0865               	movf	(_sampleIndex+1)^(0+128),w
  9363  0F37  0020               	movlb	0	; select bank0
  9364  0F38  00A9               	movwf	??_readIAnalog+1
  9365  0F39  0021               	movlb	1	; select bank1
  9366  0F3A  0864               	movf	_sampleIndex^(0+128),w
  9367  0F3B  0020               	movlb	0	; select bank0
  9368  0F3C  00A8               	movwf	??_readIAnalog
  9369  0F3D  35A8               	lslf	??_readIAnalog,f
  9370  0F3E  0DA9               	rlf	??_readIAnalog+1,f
  9371  0F3F  0827               	movf	readIAnalog@channel+1,w
  9372  0F40  00F1               	movwf	___wmul@multiplier+1
  9373  0F41  0826               	movf	readIAnalog@channel,w
  9374  0F42  00F0               	movwf	___wmul@multiplier
  9375  0F43  3064               	movlw	100
  9376  0F44  00F2               	movwf	___wmul@multiplicand
  9377  0F45  3000               	movlw	0
  9378  0F46  00F3               	movwf	___wmul@multiplicand+1
  9379  0F47  3193  2336  318E   	fcall	___wmul
  9380  0F4A  3060               	movlw	96
  9381  0F4B  0020               	movlb	0	; select bank0
  9382  0F4C  00AA               	movwf	??_readIAnalog+2
  9383  0F4D  3022               	movlw	34
  9384  0F4E  00AB               	movwf	??_readIAnalog+3
  9385  0F4F  0870               	movf	?___wmul,w
  9386  0F50  072A               	addwf	??_readIAnalog+2,w
  9387  0F51  00AC               	movwf	??_readIAnalog+4
  9388  0F52  0871               	movf	?___wmul+1,w
  9389  0F53  3D2B               	addwfc	??_readIAnalog+3,w
  9390  0F54  00AD               	movwf	??_readIAnalog+5
  9391  0F55  0828               	movf	??_readIAnalog,w
  9392  0F56  072C               	addwf	??_readIAnalog+4,w
  9393  0F57  0086               	movwf	6
  9394  0F58  0829               	movf	??_readIAnalog+1,w
  9395  0F59  3D2D               	addwfc	??_readIAnalog+5,w
  9396  0F5A  0087               	movwf	7
  9397  0F5B  087B               	movf	readIAnalog@value,w
  9398  0F5C  3FC0               	movwi [0]fsr1
  9399  0F5D  087C               	movf	readIAnalog@value+1,w
  9400  0F5E  3FC1               	movwi [1]fsr1
  9401                           
  9402                           ;adc.c: 89: totals[channel] = totals[channel]+samples[channel][sampleIndex];
  9403  0F5F  0826               	movf	readIAnalog@channel,w
  9404  0F60  00A8               	movwf	??_readIAnalog
  9405  0F61  3001               	movlw	1
  9406  0F62                     u3155:	
  9407  0F62  35A8               	lslf	??_readIAnalog,f
  9408  0F63  3EFF               	addlw	-1
  9409  0F64  1D03               	skipz
  9410  0F65  2F62               	goto	u3155
  9411  0F66  3528               	lslf	??_readIAnalog,w
  9412  0F67  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9413  0F68  0086               	movwf	6
  9414  0F69  3001               	movlw	1	; select bank2/3
  9415  0F6A  0087               	movwf	7
  9416  0F6B  3F40               	moviw [0]fsr1
  9417  0F6C  00A9               	movwf	??_readIAnalog+1
  9418  0F6D  3F41               	moviw [1]fsr1
  9419  0F6E  00AA               	movwf	??_readIAnalog+2
  9420  0F6F  3F42               	moviw [2]fsr1
  9421  0F70  00AB               	movwf	??_readIAnalog+3
  9422  0F71  3F43               	moviw [3]fsr1
  9423  0F72  00AC               	movwf	??_readIAnalog+4
  9424  0F73  0021               	movlb	1	; select bank1
  9425  0F74  0865               	movf	(_sampleIndex+1)^(0+128),w
  9426  0F75  0020               	movlb	0	; select bank0
  9427  0F76  00AE               	movwf	??_readIAnalog+6
  9428  0F77  0021               	movlb	1	; select bank1
  9429  0F78  0864               	movf	_sampleIndex^(0+128),w
  9430  0F79  0020               	movlb	0	; select bank0
  9431  0F7A  00AD               	movwf	??_readIAnalog+5
  9432  0F7B  35AD               	lslf	??_readIAnalog+5,f
  9433  0F7C  0DAE               	rlf	??_readIAnalog+6,f
  9434  0F7D  0827               	movf	readIAnalog@channel+1,w
  9435  0F7E  00F1               	movwf	___wmul@multiplier+1
  9436  0F7F  0826               	movf	readIAnalog@channel,w
  9437  0F80  00F0               	movwf	___wmul@multiplier
  9438  0F81  3064               	movlw	100
  9439  0F82  00F2               	movwf	___wmul@multiplicand
  9440  0F83  3000               	movlw	0
  9441  0F84  00F3               	movwf	___wmul@multiplicand+1
  9442  0F85  3193  2336  318E   	fcall	___wmul
  9443  0F88  3060               	movlw	96
  9444  0F89  0020               	movlb	0	; select bank0
  9445  0F8A  00AF               	movwf	??_readIAnalog+7
  9446  0F8B  3022               	movlw	34
  9447  0F8C  00B0               	movwf	??_readIAnalog+8
  9448  0F8D  0870               	movf	?___wmul,w
  9449  0F8E  072F               	addwf	??_readIAnalog+7,w
  9450  0F8F  00B1               	movwf	??_readIAnalog+9
  9451  0F90  0871               	movf	?___wmul+1,w
  9452  0F91  3D30               	addwfc	??_readIAnalog+8,w
  9453  0F92  00B2               	movwf	??_readIAnalog+10
  9454  0F93  082D               	movf	??_readIAnalog+5,w
  9455  0F94  0731               	addwf	??_readIAnalog+9,w
  9456  0F95  0086               	movwf	6
  9457  0F96  082E               	movf	??_readIAnalog+6,w
  9458  0F97  3D32               	addwfc	??_readIAnalog+10,w
  9459  0F98  0087               	movwf	7
  9460  0F99  3F40               	moviw [0]fsr1
  9461  0F9A  00B3               	movwf	??_readIAnalog+11
  9462  0F9B  3F41               	moviw [1]fsr1
  9463  0F9C  00B4               	movwf	??_readIAnalog+12
  9464  0F9D  0833               	movf	??_readIAnalog+11,w
  9465  0F9E  00B5               	movwf	??_readIAnalog+13
  9466  0F9F  0834               	movf	??_readIAnalog+12,w
  9467  0FA0  00B6               	movwf	??_readIAnalog+14
  9468  0FA1  3000               	movlw	0
  9469  0FA2  1BB6               	btfsc	??_readIAnalog+14,7
  9470  0FA3  30FF               	movlw	255
  9471  0FA4  00B7               	movwf	??_readIAnalog+15
  9472  0FA5  00B8               	movwf	??_readIAnalog+16
  9473  0FA6  0835               	movf	??_readIAnalog+13,w
  9474  0FA7  07A9               	addwf	??_readIAnalog+1,f
  9475  0FA8  0836               	movf	??_readIAnalog+14,w
  9476  0FA9  3DAA               	addwfc	??_readIAnalog+2,f
  9477  0FAA  0837               	movf	??_readIAnalog+15,w
  9478  0FAB  3DAB               	addwfc	??_readIAnalog+3,f
  9479  0FAC  0838               	movf	??_readIAnalog+16,w
  9480  0FAD  3DAC               	addwfc	??_readIAnalog+4,f
  9481  0FAE  0826               	movf	readIAnalog@channel,w
  9482  0FAF  00B9               	movwf	??_readIAnalog+17
  9483  0FB0  3001               	movlw	1
  9484  0FB1                     u3165:	
  9485  0FB1  35B9               	lslf	??_readIAnalog+17,f
  9486  0FB2  3EFF               	addlw	-1
  9487  0FB3  1D03               	skipz
  9488  0FB4  2FB1               	goto	u3165
  9489  0FB5  3539               	lslf	??_readIAnalog+17,w
  9490  0FB6  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9491  0FB7  0086               	movwf	6
  9492  0FB8  3001               	movlw	1	; select bank2/3
  9493  0FB9  0087               	movwf	7
  9494  0FBA  0829               	movf	??_readIAnalog+1,w
  9495  0FBB  3FC0               	movwi [0]fsr1
  9496  0FBC  082A               	movf	??_readIAnalog+2,w
  9497  0FBD  3FC1               	movwi [1]fsr1
  9498  0FBE  082B               	movf	??_readIAnalog+3,w
  9499  0FBF  3FC2               	movwi [2]fsr1
  9500  0FC0  082C               	movf	??_readIAnalog+4,w
  9501  0FC1  3FC3               	movwi [3]fsr1
  9502                           
  9503                           ;adc.c: 91: if(channel>=(4-1))
  9504  0FC2  3000               	movlw	0
  9505  0FC3  0227               	subwf	readIAnalog@channel+1,w
  9506  0FC4  3003               	movlw	3
  9507  0FC5  1903               	skipnz
  9508  0FC6  0226               	subwf	readIAnalog@channel,w
  9509  0FC7  1C03               	skipc
  9510  0FC8  2FD7               	goto	l2873
  9511                           
  9512                           ;adc.c: 92: {
  9513                           ;adc.c: 93: sampleIndex+=1;
  9514  0FC9  3001               	movlw	1
  9515  0FCA  0021               	movlb	1	; select bank1
  9516  0FCB  07E4               	addwf	_sampleIndex^(0+128),f
  9517  0FCC  3000               	movlw	0
  9518  0FCD  3DE5               	addwfc	(_sampleIndex+1)^(0+128),f
  9519                           
  9520                           ;adc.c: 94: if(sampleIndex >= 50)sampleIndex = 0;
  9521  0FCE  3000               	movlw	0
  9522  0FCF  0265               	subwf	(_sampleIndex+1)^(0+128),w
  9523  0FD0  3032               	movlw	50
  9524  0FD1  1903               	skipnz
  9525  0FD2  0264               	subwf	_sampleIndex^(0+128),w
  9526  0FD3  1C03               	skipc
  9527  0FD4  2FD7               	goto	l2873
  9528  0FD5  01E4               	clrf	_sampleIndex^(0+128)
  9529  0FD6  01E5               	clrf	(_sampleIndex+1)^(0+128)
  9530  0FD7                     l2873:	
  9531                           
  9532                           ;adc.c: 95: }
  9533                           ;adc.c: 97: value = totals[channel]/50;
  9534  0FD7  3000               	movlw	0
  9535  0FD8  00F3               	movwf	___aldiv@divisor+3
  9536  0FD9  3000               	movlw	0
  9537  0FDA  00F2               	movwf	___aldiv@divisor+2
  9538  0FDB  3000               	movlw	0
  9539  0FDC  00F1               	movwf	___aldiv@divisor+1
  9540  0FDD  3032               	movlw	50
  9541  0FDE  00F0               	movwf	___aldiv@divisor
  9542  0FDF  0020               	movlb	0	; select bank0
  9543  0FE0  0826               	movf	readIAnalog@channel,w
  9544  0FE1  00A8               	movwf	??_readIAnalog
  9545  0FE2  3001               	movlw	1
  9546  0FE3                     u3195:	
  9547  0FE3  35A8               	lslf	??_readIAnalog,f
  9548  0FE4  3EFF               	addlw	-1
  9549  0FE5  1D03               	skipz
  9550  0FE6  2FE3               	goto	u3195
  9551  0FE7  3528               	lslf	??_readIAnalog,w
  9552  0FE8  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9553  0FE9  0086               	movwf	6
  9554  0FEA  3001               	movlw	1	; select bank2/3
  9555  0FEB  0087               	movwf	7
  9556  0FEC  3F40               	moviw [0]fsr1
  9557  0FED  00F4               	movwf	___aldiv@dividend
  9558  0FEE  3F41               	moviw [1]fsr1
  9559  0FEF  00F5               	movwf	___aldiv@dividend+1
  9560  0FF0  3F42               	moviw [2]fsr1
  9561  0FF1  00F6               	movwf	___aldiv@dividend+2
  9562  0FF2  3F43               	moviw [3]fsr1
  9563  0FF3  00F7               	movwf	___aldiv@dividend+3
  9564  0FF4  3188  20B7         	fcall	___aldiv
  9565  0FF6  0871               	movf	?___aldiv+1,w
  9566  0FF7  00FC               	movwf	readIAnalog@value+1
  9567  0FF8  0870               	movf	?___aldiv,w
  9568  0FF9  00FB               	movwf	readIAnalog@value
  9569                           
  9570                           ;adc.c: 99: return value;
  9571  0FFA  087C               	movf	readIAnalog@value+1,w
  9572  0FFB  0020               	movlb	0	; select bank0
  9573  0FFC  00A7               	movwf	?_readIAnalog+1
  9574  0FFD  087B               	movf	readIAnalog@value,w
  9575  0FFE  00A6               	movwf	?_readIAnalog
  9576  0FFF  0008               	return
  9577  1000                     __end_of_readIAnalog:	
  9578                           
  9579                           	psect	text9
  9580  08B7                     __ptext9:	
  9581 ;; *************** function ___aldiv *****************
  9582 ;; Defined at:
  9583 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
  9584 ;; Parameters:    Size  Location     Type
  9585 ;;  divisor         4    0[COMMON] long 
  9586 ;;  dividend        4    4[COMMON] long 
  9587 ;; Auto vars:     Size  Location     Type
  9588 ;;  quotient        4    2[BANK0 ] long 
  9589 ;;  sign            1    1[BANK0 ] unsigned char 
  9590 ;;  counter         1    0[BANK0 ] unsigned char 
  9591 ;; Return value:  Size  Location     Type
  9592 ;;                  4    0[COMMON] long 
  9593 ;; Registers used:
  9594 ;;		wreg, status,2, status,0
  9595 ;; Tracked objects:
  9596 ;;		On entry : 0/0
  9597 ;;		On exit  : 0/0
  9598 ;;		Unchanged: 0/0
  9599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9600 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9601 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9602 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9603 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9604 ;;Total ram usage:       15 bytes
  9605 ;; Hardware stack levels used:    1
  9606 ;; This function calls:
  9607 ;;		Nothing
  9608 ;; This function is called by:
  9609 ;;		_readIAnalog
  9610 ;; This function uses a non-reentrant model
  9611 ;;
  9612                           
  9613                           
  9614                           ;psect for function ___aldiv
  9615  08B7                     ___aldiv:	
  9616                           
  9617                           ;incstack = 0
  9618                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9619  08B7  0020               	movlb	0	; select bank0
  9620  08B8  01A1               	clrf	___aldiv@sign
  9621  08B9  1FF3               	btfss	___aldiv@divisor+3,7
  9622  08BA  28C8               	goto	l644
  9623  08BB  09F0               	comf	___aldiv@divisor,f
  9624  08BC  09F1               	comf	___aldiv@divisor+1,f
  9625  08BD  09F2               	comf	___aldiv@divisor+2,f
  9626  08BE  09F3               	comf	___aldiv@divisor+3,f
  9627  08BF  0AF0               	incf	___aldiv@divisor,f
  9628  08C0  1903               	skipnz
  9629  08C1  0AF1               	incf	___aldiv@divisor+1,f
  9630  08C2  1903               	skipnz
  9631  08C3  0AF2               	incf	___aldiv@divisor+2,f
  9632  08C4  1903               	skipnz
  9633  08C5  0AF3               	incf	___aldiv@divisor+3,f
  9634  08C6  01A1               	clrf	___aldiv@sign
  9635  08C7  0AA1               	incf	___aldiv@sign,f
  9636  08C8                     l644:	
  9637  08C8  1FF7               	btfss	___aldiv@dividend+3,7
  9638  08C9  28D9               	goto	l2713
  9639  08CA  09F4               	comf	___aldiv@dividend,f
  9640  08CB  09F5               	comf	___aldiv@dividend+1,f
  9641  08CC  09F6               	comf	___aldiv@dividend+2,f
  9642  08CD  09F7               	comf	___aldiv@dividend+3,f
  9643  08CE  0AF4               	incf	___aldiv@dividend,f
  9644  08CF  1903               	skipnz
  9645  08D0  0AF5               	incf	___aldiv@dividend+1,f
  9646  08D1  1903               	skipnz
  9647  08D2  0AF6               	incf	___aldiv@dividend+2,f
  9648  08D3  1903               	skipnz
  9649  08D4  0AF7               	incf	___aldiv@dividend+3,f
  9650  08D5  3001               	movlw	1
  9651  08D6  00F8               	movwf	??___aldiv
  9652  08D7  0878               	movf	??___aldiv,w
  9653  08D8  06A1               	xorwf	___aldiv@sign,f
  9654  08D9                     l2713:	
  9655  08D9  3000               	movlw	0
  9656  08DA  00A5               	movwf	___aldiv@quotient+3
  9657  08DB  3000               	movlw	0
  9658  08DC  00A4               	movwf	___aldiv@quotient+2
  9659  08DD  3000               	movlw	0
  9660  08DE  00A3               	movwf	___aldiv@quotient+1
  9661  08DF  3000               	movlw	0
  9662  08E0  00A2               	movwf	___aldiv@quotient
  9663  08E1  0873               	movf	___aldiv@divisor+3,w
  9664  08E2  0472               	iorwf	___aldiv@divisor+2,w
  9665  08E3  0471               	iorwf	___aldiv@divisor+1,w
  9666  08E4  0470               	iorwf	___aldiv@divisor,w
  9667  08E5  1903               	skipnz
  9668  08E6  2922               	goto	l2735
  9669  08E7  01A0               	clrf	___aldiv@counter
  9670  08E8  0AA0               	incf	___aldiv@counter,f
  9671  08E9                     l2721:	
  9672  08E9  1BF3               	btfsc	___aldiv@divisor+3,7
  9673  08EA  28F7               	goto	l2723
  9674  08EB  3001               	movlw	1
  9675  08EC                     u2815:	
  9676  08EC  35F0               	lslf	___aldiv@divisor,f
  9677  08ED  0DF1               	rlf	___aldiv@divisor+1,f
  9678  08EE  0DF2               	rlf	___aldiv@divisor+2,f
  9679  08EF  0DF3               	rlf	___aldiv@divisor+3,f
  9680  08F0  0B89               	decfsz	9,f
  9681  08F1  28EC               	goto	u2815
  9682  08F2  3001               	movlw	1
  9683  08F3  00F8               	movwf	??___aldiv
  9684  08F4  0878               	movf	??___aldiv,w
  9685  08F5  07A0               	addwf	___aldiv@counter,f
  9686  08F6  28E9               	goto	l2721
  9687  08F7                     l2723:	
  9688  08F7  3001               	movlw	1
  9689  08F8                     u2835:	
  9690  08F8  35A2               	lslf	___aldiv@quotient,f
  9691  08F9  0DA3               	rlf	___aldiv@quotient+1,f
  9692  08FA  0DA4               	rlf	___aldiv@quotient+2,f
  9693  08FB  0DA5               	rlf	___aldiv@quotient+3,f
  9694  08FC  0B89               	decfsz	9,f
  9695  08FD  28F8               	goto	u2835
  9696  08FE  0873               	movf	___aldiv@divisor+3,w
  9697  08FF  0277               	subwf	___aldiv@dividend+3,w
  9698  0900  1D03               	skipz
  9699  0901  290C               	goto	u2845
  9700  0902  0872               	movf	___aldiv@divisor+2,w
  9701  0903  0276               	subwf	___aldiv@dividend+2,w
  9702  0904  1D03               	skipz
  9703  0905  290C               	goto	u2845
  9704  0906  0871               	movf	___aldiv@divisor+1,w
  9705  0907  0275               	subwf	___aldiv@dividend+1,w
  9706  0908  1D03               	skipz
  9707  0909  290C               	goto	u2845
  9708  090A  0870               	movf	___aldiv@divisor,w
  9709  090B  0274               	subwf	___aldiv@dividend,w
  9710  090C                     u2845:	
  9711  090C  1C03               	skipc
  9712  090D  2917               	goto	l2731
  9713  090E  0870               	movf	___aldiv@divisor,w
  9714  090F  02F4               	subwf	___aldiv@dividend,f
  9715  0910  0871               	movf	___aldiv@divisor+1,w
  9716  0911  3BF5               	subwfb	___aldiv@dividend+1,f
  9717  0912  0872               	movf	___aldiv@divisor+2,w
  9718  0913  3BF6               	subwfb	___aldiv@dividend+2,f
  9719  0914  0873               	movf	___aldiv@divisor+3,w
  9720  0915  3BF7               	subwfb	___aldiv@dividend+3,f
  9721  0916  1422               	bsf	___aldiv@quotient,0
  9722  0917                     l2731:	
  9723  0917  3001               	movlw	1
  9724  0918                     u2855:	
  9725  0918  36F3               	lsrf	___aldiv@divisor+3,f
  9726  0919  0CF2               	rrf	___aldiv@divisor+2,f
  9727  091A  0CF1               	rrf	___aldiv@divisor+1,f
  9728  091B  0CF0               	rrf	___aldiv@divisor,f
  9729  091C  0B89               	decfsz	9,f
  9730  091D  2918               	goto	u2855
  9731  091E  3001               	movlw	1
  9732  091F  02A0               	subwf	___aldiv@counter,f
  9733  0920  1D03               	btfss	3,2
  9734  0921  28F7               	goto	l2723
  9735  0922                     l2735:	
  9736  0922  0821               	movf	___aldiv@sign,w
  9737  0923  1903               	btfsc	3,2
  9738  0924  2930               	goto	l2739
  9739  0925  09A2               	comf	___aldiv@quotient,f
  9740  0926  09A3               	comf	___aldiv@quotient+1,f
  9741  0927  09A4               	comf	___aldiv@quotient+2,f
  9742  0928  09A5               	comf	___aldiv@quotient+3,f
  9743  0929  0AA2               	incf	___aldiv@quotient,f
  9744  092A  1903               	skipnz
  9745  092B  0AA3               	incf	___aldiv@quotient+1,f
  9746  092C  1903               	skipnz
  9747  092D  0AA4               	incf	___aldiv@quotient+2,f
  9748  092E  1903               	skipnz
  9749  092F  0AA5               	incf	___aldiv@quotient+3,f
  9750  0930                     l2739:	
  9751  0930  0825               	movf	___aldiv@quotient+3,w
  9752  0931  00F3               	movwf	?___aldiv+3
  9753  0932  0824               	movf	___aldiv@quotient+2,w
  9754  0933  00F2               	movwf	?___aldiv+2
  9755  0934  0823               	movf	___aldiv@quotient+1,w
  9756  0935  00F1               	movwf	?___aldiv+1
  9757  0936  0822               	movf	___aldiv@quotient,w
  9758  0937  00F0               	movwf	?___aldiv
  9759  0938  0008               	return
  9760  0939                     __end_of___aldiv:	
  9761                           
  9762                           	psect	text10
  9763  0835                     __ptext10:	
  9764 ;; *************** function _readButton *****************
  9765 ;; Defined at:
  9766 ;;		line 9 in file "buttons.c"
  9767 ;; Parameters:    Size  Location     Type
  9768 ;;		None
  9769 ;; Auto vars:     Size  Location     Type
  9770 ;;		None
  9771 ;; Return value:  Size  Location     Type
  9772 ;;                  1    wreg      unsigned char 
  9773 ;; Registers used:
  9774 ;;		wreg, status,2, status,0, pclath, cstack
  9775 ;; Tracked objects:
  9776 ;;		On entry : 0/0
  9777 ;;		On exit  : 0/0
  9778 ;;		Unchanged: 0/0
  9779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9782 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9783 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9784 ;;Total ram usage:        2 bytes
  9785 ;; Hardware stack levels used:    1
  9786 ;; Hardware stack levels required when called:    1
  9787 ;; This function calls:
  9788 ;;		_ADCRead
  9789 ;; This function is called by:
  9790 ;;		_main
  9791 ;; This function uses a non-reentrant model
  9792 ;;
  9793                           
  9794                           
  9795                           ;psect for function _readButton
  9796  0835                     _readButton:	
  9797                           
  9798                           ;buttons.c: 11: readButtons = ADCRead(11);
  9799                           
  9800                           ;incstack = 0
  9801                           ; Regs used in _readButton: [wreg+status,2+status,0+pclath+cstack]
  9802  0835  300B               	movlw	11
  9803  0836  3192  22F5  3188   	fcall	_ADCRead
  9804  0839  0871               	movf	?_ADCRead+1,w
  9805  083A  0021               	movlb	1	; select bank1
  9806  083B  00D7               	movwf	(_readButtons+1)^(0+128)
  9807  083C  0870               	movf	?_ADCRead,w
  9808  083D  00D6               	movwf	_readButtons^(0+128)
  9809                           
  9810                           ;buttons.c: 13: if(readButtons >= 425 && readButtons < 485)
  9811  083E  0857               	movf	(_readButtons+1)^(0+128),w
  9812  083F  3A80               	xorlw	128
  9813  0840  00F4               	movwf	??_readButton
  9814  0841  3081               	movlw	129
  9815  0842  0274               	subwf	??_readButton,w
  9816  0843  1D03               	skipz
  9817  0844  2847               	goto	u3435
  9818  0845  30A9               	movlw	169
  9819  0846  0256               	subwf	_readButtons^(0+128),w
  9820  0847                     u3435:	
  9821  0847  1C03               	skipc
  9822  0848  2859               	goto	l2975
  9823  0849  0021               	movlb	1	; select bank1
  9824  084A  0857               	movf	(_readButtons+1)^(0+128),w
  9825  084B  3A80               	xorlw	128
  9826  084C  00F4               	movwf	??_readButton
  9827  084D  3081               	movlw	129
  9828  084E  0274               	subwf	??_readButton,w
  9829  084F  1D03               	skipz
  9830  0850  2853               	goto	u3445
  9831  0851  30E5               	movlw	229
  9832  0852  0256               	subwf	_readButtons^(0+128),w
  9833  0853                     u3445:	
  9834  0853  1803               	skipnc
  9835  0854  2859               	goto	l2975
  9836                           
  9837                           ;buttons.c: 14: {
  9838                           ;buttons.c: 15: button = 1;
  9839  0855  0021               	movlb	1	; select bank1
  9840  0856  01E8               	clrf	_button^(0+128)
  9841  0857  0AE8               	incf	_button^(0+128),f
  9842                           
  9843                           ;buttons.c: 16: }
  9844  0858  2887               	goto	l2987
  9845  0859                     l2975:	
  9846                           
  9847                           ;buttons.c: 18: else if(readButtons >= 615 && readButtons < 690)
  9848  0859  0021               	movlb	1	; select bank1
  9849  085A  0857               	movf	(_readButtons+1)^(0+128),w
  9850  085B  3A80               	xorlw	128
  9851  085C  00F4               	movwf	??_readButton
  9852  085D  3082               	movlw	130
  9853  085E  0274               	subwf	??_readButton,w
  9854  085F  1D03               	skipz
  9855  0860  2863               	goto	u3455
  9856  0861  3067               	movlw	103
  9857  0862  0256               	subwf	_readButtons^(0+128),w
  9858  0863                     u3455:	
  9859  0863  1C03               	skipc
  9860  0864  2873               	goto	l2981
  9861  0865  0021               	movlb	1	; select bank1
  9862  0866  0857               	movf	(_readButtons+1)^(0+128),w
  9863  0867  3A80               	xorlw	128
  9864  0868  00F4               	movwf	??_readButton
  9865  0869  3082               	movlw	130
  9866  086A  0274               	subwf	??_readButton,w
  9867  086B  1D03               	skipz
  9868  086C  286F               	goto	u3465
  9869  086D  30B2               	movlw	178
  9870  086E  0256               	subwf	_readButtons^(0+128),w
  9871  086F                     u3465:	
  9872  086F  1803               	skipnc
  9873  0870  2873               	goto	l2981
  9874                           
  9875                           ;buttons.c: 19: {
  9876                           ;buttons.c: 20: button = 2;
  9877  0871  3002               	movlw	2
  9878  0872  2880               	goto	L6
  9879  0873                     l2981:	
  9880                           ;buttons.c: 21: }
  9881                           
  9882                           
  9883                           ;buttons.c: 23: else if(readButtons > 800)
  9884  0873  0021               	movlb	1	; select bank1
  9885  0874  0857               	movf	(_readButtons+1)^(0+128),w
  9886  0875  3A80               	xorlw	128
  9887  0876  00F4               	movwf	??_readButton
  9888  0877  3083               	movlw	131
  9889  0878  0274               	subwf	??_readButton,w
  9890  0879  1D03               	skipz
  9891  087A  287D               	goto	u3475
  9892  087B  3021               	movlw	33
  9893  087C  0256               	subwf	_readButtons^(0+128),w
  9894  087D                     u3475:	
  9895  087D  1C03               	skipc
  9896  087E  2885               	goto	l2985
  9897                           
  9898                           ;buttons.c: 24: {
  9899                           ;buttons.c: 25: button = 3;
  9900  087F  3003               	movlw	3
  9901  0880                     L6:	
  9902  0880  00F4               	movwf	??_readButton
  9903  0881  0874               	movf	??_readButton,w
  9904  0882  0021               	movlb	1	; select bank1
  9905  0883  00E8               	movwf	_button^(0+128)
  9906                           
  9907                           ;buttons.c: 26: }
  9908  0884  2887               	goto	l2987
  9909  0885                     l2985:	
  9910                           
  9911                           ;buttons.c: 28: else
  9912                           ;buttons.c: 29: {
  9913                           ;buttons.c: 30: button = 0;
  9914  0885  0021               	movlb	1	; select bank1
  9915  0886  01E8               	clrf	_button^(0+128)
  9916  0887                     l2987:	
  9917                           
  9918                           ;buttons.c: 31: }
  9919                           ;buttons.c: 33: if (button != 0)
  9920  0887  0868               	movf	_button^(0+128),w
  9921  0888  1903               	btfsc	3,2
  9922  0889  28B4               	goto	l3007
  9923                           
  9924                           ;buttons.c: 34: {
  9925                           ;buttons.c: 35: if (button != lastButton)
  9926  088A  0868               	movf	_button^(0+128),w
  9927  088B  0667               	xorwf	_lastButton^(0+128),w
  9928  088C  1903               	skipnz
  9929  088D  2893               	goto	l2995
  9930                           
  9931                           ;buttons.c: 36: {
  9932                           ;buttons.c: 37: lastButton = button;
  9933  088E  0868               	movf	_button^(0+128),w
  9934  088F  00F4               	movwf	??_readButton
  9935  0890  0874               	movf	??_readButton,w
  9936  0891  00E7               	movwf	_lastButton^(0+128)
  9937  0892  28B4               	goto	l3007
  9938  0893                     l2995:	
  9939                           ;buttons.c: 39: }
  9940                           
  9941                           ;buttons.c: 38: j = 0;
  9942                           
  9943                           
  9944                           ;buttons.c: 40: else
  9945                           ;buttons.c: 41: {
  9946                           ;buttons.c: 42: j += 1;
  9947  0893  3001               	movlw	1
  9948  0894  00F4               	movwf	??_readButton
  9949  0895  0874               	movf	??_readButton,w
  9950  0896  07E6               	addwf	_j^(0+128),f
  9951                           
  9952                           ;buttons.c: 44: if(j == 1)
  9953  0897  0366               	decf	_j^(0+128),w
  9954  0898  1D03               	btfss	3,2
  9955  0899  289C               	goto	l3001
  9956                           
  9957                           ;buttons.c: 45: {
  9958                           ;buttons.c: 46: return (lastButton);
  9959  089A  0867               	movf	_lastButton^(0+128),w
  9960  089B  0008               	return
  9961  089C                     l3001:	
  9962                           
  9963                           ;buttons.c: 47: }
  9964                           ;buttons.c: 49: if (j >10)
  9965  089C  0866               	movf	_j^(0+128),w
  9966  089D  3A80               	xorlw	128
  9967  089E  3E75               	addlw	-139
  9968  089F  1C03               	skipc
  9969  08A0  28B5               	goto	l3009
  9970                           
  9971                           ;buttons.c: 50: {
  9972                           ;buttons.c: 51: _delay((unsigned long)((25)*(32000000/4000.0)));
  9973  08A1  3002               	movlw	2
  9974  08A2  00F5               	movwf	??_readButton+1
  9975  08A3  3004               	movlw	4
  9976  08A4  00F4               	movwf	??_readButton
  9977  08A5  30BA               	movlw	186
  9978  08A6                     u3997:	
  9979  08A6  0B89               	decfsz	9,f
  9980  08A7  28A6               	goto	u3997
  9981  08A8  0BF4               	decfsz	??_readButton,f
  9982  08A9  28A6               	goto	u3997
  9983  08AA  0BF5               	decfsz	??_readButton+1,f
  9984  08AB  28A6               	goto	u3997
  9985  08AC  3200               	nop2
  9986                           
  9987                           ;buttons.c: 52: j = 10;
  9988  08AD  300A               	movlw	10
  9989  08AE  00F4               	movwf	??_readButton
  9990  08AF  0874               	movf	??_readButton,w
  9991  08B0  0021               	movlb	1	; select bank1
  9992  08B1  00E6               	movwf	_j^(0+128)
  9993                           
  9994                           ;buttons.c: 53: return (lastButton);
  9995  08B2  0867               	movf	_lastButton^(0+128),w
  9996  08B3  0008               	return
  9997  08B4                     l3007:	
  9998                           ;buttons.c: 54: }
  9999                           ;buttons.c: 55: }
 10000                           ;buttons.c: 56: goto end;
 10001                           
 10002                           
 10003                           ;buttons.c: 57: }
 10004                           ;buttons.c: 59: j = 0;
 10005  08B4  01E6               	clrf	_j^(0+128)
 10006  08B5                     l3009:	
 10007                           ;buttons.c: 61: end:
 10008                           
 10009                           
 10010                           ;buttons.c: 63: return (0);
 10011  08B5  3000               	movlw	0
 10012  08B6  0008               	return
 10013  08B7                     __end_of_readButton:	
 10014                           
 10015                           	psect	text11
 10016  12F5                     __ptext11:	
 10017 ;; *************** function _ADCRead *****************
 10018 ;; Defined at:
 10019 ;;		line 21 in file "adc.c"
 10020 ;; Parameters:    Size  Location     Type
 10021 ;;  channel         1    wreg     enum E14259
 10022 ;; Auto vars:     Size  Location     Type
 10023 ;;  channel         1    3[COMMON] enum E14259
 10024 ;; Return value:  Size  Location     Type
 10025 ;;                  2    0[COMMON] int 
 10026 ;; Registers used:
 10027 ;;		wreg
 10028 ;; Tracked objects:
 10029 ;;		On entry : 0/0
 10030 ;;		On exit  : 0/0
 10031 ;;		Unchanged: 0/0
 10032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10033 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10034 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10036 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10037 ;;Total ram usage:        4 bytes
 10038 ;; Hardware stack levels used:    1
 10039 ;; This function calls:
 10040 ;;		Nothing
 10041 ;; This function is called by:
 10042 ;;		_readIAnalog
 10043 ;;		_readButton
 10044 ;;		_main
 10045 ;; This function uses a non-reentrant model
 10046 ;;
 10047                           
 10048                           
 10049                           ;psect for function _ADCRead
 10050  12F5                     _ADCRead:	
 10051                           
 10052                           ;incstack = 0
 10053                           ; Regs used in _ADCRead: [wreg]
 10054                           ;ADCRead@channel stored from wreg
 10055  12F5  00F3               	movwf	ADCRead@channel
 10056                           
 10057                           ;adc.c: 23: ADPCH = channel_VSS;
 10058  12F6  303C               	movlw	60
 10059  12F7  0021               	movlb	1	; select bank1
 10060  12F8  009E               	movwf	30	;volatile
 10061                           
 10062                           ;adc.c: 25: ADCON0bits.ADON = 1;
 10063  12F9  1793               	bsf	19,7	;volatile
 10064                           
 10065                           ;adc.c: 27: ADCON0bits.ADCONT = 0;
 10066  12FA  1313               	bcf	19,6	;volatile
 10067                           
 10068                           ;adc.c: 29: ADCON0bits.ADGO = 1;
 10069  12FB  1413               	bsf	19,0	;volatile
 10070  12FC                     l57:	
 10071                           ;adc.c: 32: {
 10072                           
 10073                           ;adc.c: 31: while(ADCON0bits.ADGO)
 10074                           
 10075  12FC  1813               	btfsc	19,0	;volatile
 10076  12FD  2AFC               	goto	l57
 10077                           
 10078                           ;adc.c: 33: }
 10079                           ;adc.c: 35: ADPCH = channel;
 10080  12FE  0873               	movf	ADCRead@channel,w
 10081  12FF  009E               	movwf	30	;volatile
 10082                           
 10083                           ;adc.c: 37: ADCON0bits.ADON = 1;
 10084  1300  1793               	bsf	19,7	;volatile
 10085                           
 10086                           ;adc.c: 39: ADCON0bits.ADCONT = 0;
 10087  1301  1313               	bcf	19,6	;volatile
 10088                           
 10089                           ;adc.c: 41: ADCON0bits.ADGO = 1;
 10090  1302  1413               	bsf	19,0	;volatile
 10091  1303                     l60:	
 10092                           ;adc.c: 44: {
 10093                           
 10094                           ;adc.c: 43: while(ADCON0bits.ADGO)
 10095                           
 10096  1303  1813               	btfsc	19,0	;volatile
 10097  1304  2B03               	goto	l60
 10098                           
 10099                           ;adc.c: 45: }
 10100                           ;adc.c: 47: return ((ADRESH<<8)+ADRESL);
 10101  1305  080D               	movf	13,w	;volatile
 10102  1306  00F1               	movwf	?_ADCRead+1
 10103  1307  080C               	movf	12,w	;volatile
 10104  1308  00F0               	movwf	?_ADCRead
 10105  1309  0008               	return
 10106  130A                     __end_of_ADCRead:	
 10107                           
 10108                           	psect	text12
 10109  0D6D                     __ptext12:	
 10110 ;; *************** function _cc_cv_mode *****************
 10111 ;; Defined at:
 10112 ;;		line 107 in file "battery_charger.c"
 10113 ;; Parameters:    Size  Location     Type
 10114 ;;  z               1    wreg     unsigned char 
 10115 ;; Auto vars:     Size  Location     Type
 10116 ;;  z               1   37[BANK0 ] unsigned char 
 10117 ;; Return value:  Size  Location     Type
 10118 ;;                  1    wreg      void 
 10119 ;; Registers used:
 10120 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10121 ;; Tracked objects:
 10122 ;;		On entry : 0/0
 10123 ;;		On exit  : 0/0
 10124 ;;		Unchanged: 0/0
 10125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10127 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10128 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10129 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10130 ;;Total ram usage:        8 bytes
 10131 ;; Hardware stack levels used:    1
 10132 ;; Hardware stack levels required when called:    2
 10133 ;; This function calls:
 10134 ;;		___awtoft
 10135 ;;		___ftmul
 10136 ;;		___fttol
 10137 ;; This function is called by:
 10138 ;;		_main
 10139 ;; This function uses a non-reentrant model
 10140 ;;
 10141                           
 10142                           
 10143                           ;psect for function _cc_cv_mode
 10144  0D6D                     _cc_cv_mode:	
 10145                           
 10146                           ;incstack = 0
 10147                           ; Regs used in _cc_cv_mode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10148                           ;cc_cv_mode@z stored from wreg
 10149  0D6D  0020               	movlb	0	; select bank0
 10150  0D6E  00C5               	movwf	cc_cv_mode@z
 10151                           
 10152                           ;battery_charger.c: 109: if(voltage[z]>=Vref[z])
 10153  0D6F  3545               	lslf	cc_cv_mode@z,w
 10154  0D70  3EC0               	addlw	(low (_Vref| 0))& (0+255)
 10155  0D71  0086               	movwf	6
 10156  0D72  0187               	clrf	7
 10157  0D73  3F40               	moviw [0]fsr1
 10158  0D74  00BE               	movwf	??_cc_cv_mode
 10159  0D75  3F41               	moviw [1]fsr1
 10160  0D76  00BF               	movwf	??_cc_cv_mode+1
 10161  0D77  3545               	lslf	cc_cv_mode@z,w
 10162  0D78  3EB0               	addlw	(low (_voltage| 0))& (0+255)
 10163  0D79  0086               	movwf	6
 10164  0D7A  0187               	clrf	7
 10165  0D7B  3F40               	moviw [0]fsr1
 10166  0D7C  00C0               	movwf	??_cc_cv_mode+2
 10167  0D7D  3F41               	moviw [1]fsr1
 10168  0D7E  00C1               	movwf	??_cc_cv_mode+3
 10169  0D7F  0841               	movf	??_cc_cv_mode+3,w
 10170  0D80  3A80               	xorlw	128
 10171  0D81  00C2               	movwf	??_cc_cv_mode+4
 10172  0D82  083F               	movf	??_cc_cv_mode+1,w
 10173  0D83  3A80               	xorlw	128
 10174  0D84  0242               	subwf	??_cc_cv_mode+4,w
 10175  0D85  1D03               	skipz
 10176  0D86  2D89               	goto	u3335
 10177  0D87  083E               	movf	??_cc_cv_mode,w
 10178  0D88  0240               	subwf	??_cc_cv_mode+2,w
 10179  0D89                     u3335:	
 10180  0D89  1C03               	skipc
 10181  0D8A  2DC9               	goto	l2951
 10182                           
 10183                           ;battery_charger.c: 110: {
 10184                           ;battery_charger.c: 111: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 10185  0D8B  0020               	movlb	0	; select bank0
 10186  0D8C  0845               	movf	cc_cv_mode@z,w
 10187  0D8D  3EDA               	addlw	(low (_VHoldMode| 0))& (0+255)
 10188  0D8E  0086               	movwf	6
 10189  0D8F  0187               	clrf	7
 10190  0D90  0801               	movf	1,w
 10191  0D91  3A80               	xorlw	128
 10192  0D92  3E77               	addlw	-137
 10193  0D93  1803               	skipnc
 10194  0D94  2D9D               	goto	l134
 10195  0D95  3001               	movlw	1
 10196  0D96  00BE               	movwf	??_cc_cv_mode
 10197  0D97  0845               	movf	cc_cv_mode@z,w
 10198  0D98  3EDA               	addlw	(low (_VHoldMode| 0))& (0+255)
 10199  0D99  0086               	movwf	6
 10200  0D9A  0187               	clrf	7
 10201  0D9B  083E               	movf	??_cc_cv_mode,w
 10202  0D9C  0781               	addwf	1,f
 10203  0D9D                     l134:	
 10204                           
 10205                           ;battery_charger.c: 112: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 10206  0D9D  0845               	movf	cc_cv_mode@z,w
 10207  0D9E  3EDA               	addlw	(low (_VHoldMode| 0))& (0+255)
 10208  0D9F  0086               	movwf	6
 10209  0DA0  0187               	clrf	7
 10210  0DA1  0801               	movf	1,w
 10211  0DA2  3A80               	xorlw	128
 10212  0DA3  3E77               	addlw	-137
 10213  0DA4  1803               	skipnc
 10214  0DA5  2DAE               	goto	l135
 10215  0DA6  3001               	movlw	1
 10216  0DA7  00BE               	movwf	??_cc_cv_mode
 10217  0DA8  0845               	movf	cc_cv_mode@z,w
 10218  0DA9  3EDA               	addlw	(low (_VHoldMode| 0))& (0+255)
 10219  0DAA  0086               	movwf	6
 10220  0DAB  0187               	clrf	7
 10221  0DAC  083E               	movf	??_cc_cv_mode,w
 10222  0DAD  0781               	addwf	1,f
 10223  0DAE                     l135:	
 10224                           
 10225                           ;battery_charger.c: 114: if(cc_cv[z])
 10226  0DAE  0845               	movf	cc_cv_mode@z,w
 10227  0DAF  3EE0               	addlw	(low (_cc_cv| 0))& (0+255)
 10228  0DB0  0086               	movwf	6
 10229  0DB1  0187               	clrf	7
 10230  0DB2  0801               	movf	1,w
 10231  0DB3  1903               	btfsc	3,2
 10232  0DB4  2DBC               	goto	l2947
 10233                           
 10234                           ;battery_charger.c: 115: {
 10235                           ;battery_charger.c: 116: cc_cv[z]-=1;
 10236  0DB5  0845               	movf	cc_cv_mode@z,w
 10237  0DB6  3EE0               	addlw	(low (_cc_cv| 0))& (0+255)
 10238  0DB7  0086               	movwf	6
 10239  0DB8  0187               	clrf	7
 10240  0DB9  3001               	movlw	1
 10241  0DBA  0281               	subwf	1,f
 10242                           
 10243                           ;battery_charger.c: 117: }
 10244  0DBB  2DF1               	goto	l139
 10245  0DBC                     l2947:	
 10246                           
 10247                           ;battery_charger.c: 118: else
 10248                           ;battery_charger.c: 119: {
 10249                           ;battery_charger.c: 120: if(Imode[z])
 10250  0DBC  0845               	movf	cc_cv_mode@z,w
 10251  0DBD  3EDE               	addlw	(low (_Imode| 0))& (0+255)
 10252  0DBE  0086               	movwf	6
 10253  0DBF  0187               	clrf	7
 10254  0DC0  0801               	movf	1,w
 10255  0DC1  1903               	btfsc	3,2
 10256  0DC2  2DF1               	goto	l139
 10257                           
 10258                           ;battery_charger.c: 121: {
 10259                           ;battery_charger.c: 122: Imode[z]=0;
 10260  0DC3  0845               	movf	cc_cv_mode@z,w
 10261  0DC4  3EDE               	addlw	(low (_Imode| 0))& (0+255)
 10262  0DC5  0086               	movwf	6
 10263  0DC6  0187               	clrf	7
 10264  0DC7  0181               	clrf	1
 10265                           
 10266                           ;battery_charger.c: 123: }
 10267                           ;battery_charger.c: 124: }
 10268                           ;battery_charger.c: 125: }
 10269  0DC8  2DF1               	goto	l139
 10270  0DC9                     l2951:	
 10271                           
 10272                           ;battery_charger.c: 126: else
 10273                           ;battery_charger.c: 127: {
 10274                           ;battery_charger.c: 128: VHoldMode[z]-=1;
 10275  0DC9  30FF               	movlw	255
 10276  0DCA  0020               	movlb	0	; select bank0
 10277  0DCB  00BE               	movwf	??_cc_cv_mode
 10278  0DCC  0845               	movf	cc_cv_mode@z,w
 10279  0DCD  3EDA               	addlw	(low (_VHoldMode| 0))& (0+255)
 10280  0DCE  0086               	movwf	6
 10281  0DCF  0187               	clrf	7
 10282  0DD0  083E               	movf	??_cc_cv_mode,w
 10283  0DD1  0781               	addwf	1,f
 10284                           
 10285                           ;battery_charger.c: 129: if(VHoldMode[z]<(9*-1))
 10286  0DD2  0845               	movf	cc_cv_mode@z,w
 10287  0DD3  3EDA               	addlw	(low (_VHoldMode| 0))& (0+255)
 10288  0DD4  0086               	movwf	6
 10289  0DD5  0187               	clrf	7
 10290  0DD6  0801               	movf	1,w
 10291  0DD7  3A80               	xorlw	128
 10292  0DD8  3E89               	addlw	137
 10293  0DD9  1803               	skipnc
 10294  0DDA  2DF1               	goto	l139
 10295                           
 10296                           ;battery_charger.c: 130: {
 10297                           ;battery_charger.c: 132: Imode[z]=1;
 10298  0DDB  0845               	movf	cc_cv_mode@z,w
 10299  0DDC  3EDE               	addlw	(low (_Imode| 0))& (0+255)
 10300  0DDD  0086               	movwf	6
 10301  0DDE  0187               	clrf	7
 10302  0DDF  0181               	clrf	1
 10303  0DE0  0A81               	incf	1,f
 10304                           
 10305                           ;battery_charger.c: 133: cc_cv[z]=(9*2);
 10306  0DE1  3012               	movlw	18
 10307  0DE2  00BE               	movwf	??_cc_cv_mode
 10308  0DE3  0845               	movf	cc_cv_mode@z,w
 10309  0DE4  3EE0               	addlw	(low (_cc_cv| 0))& (0+255)
 10310  0DE5  0086               	movwf	6
 10311  0DE6  0187               	clrf	7
 10312  0DE7  083E               	movf	??_cc_cv_mode,w
 10313  0DE8  0081               	movwf	1
 10314                           
 10315                           ;battery_charger.c: 134: VHoldMode[z]=(9*-1);
 10316  0DE9  30F7               	movlw	247
 10317  0DEA  00BE               	movwf	??_cc_cv_mode
 10318  0DEB  0845               	movf	cc_cv_mode@z,w
 10319  0DEC  3EDA               	addlw	(low (_VHoldMode| 0))& (0+255)
 10320  0DED  0086               	movwf	6
 10321  0DEE  0187               	clrf	7
 10322  0DEF  083E               	movf	??_cc_cv_mode,w
 10323  0DF0  0081               	movwf	1
 10324  0DF1                     l139:	
 10325                           
 10326                           ;battery_charger.c: 135: }
 10327                           ;battery_charger.c: 136: }
 10328                           ;battery_charger.c: 138: if(current[z]>Iref[z])
 10329  0DF1  3545               	lslf	cc_cv_mode@z,w
 10330  0DF2  3EB8               	addlw	(low (_current| 0))& (0+255)
 10331  0DF3  0086               	movwf	6
 10332  0DF4  0187               	clrf	7
 10333  0DF5  3F40               	moviw [0]fsr1
 10334  0DF6  00BE               	movwf	??_cc_cv_mode
 10335  0DF7  3F41               	moviw [1]fsr1
 10336  0DF8  00BF               	movwf	??_cc_cv_mode+1
 10337  0DF9  3545               	lslf	cc_cv_mode@z,w
 10338  0DFA  3EC8               	addlw	(low (_Iref| 0))& (0+255)
 10339  0DFB  0086               	movwf	6
 10340  0DFC  0187               	clrf	7
 10341  0DFD  3F40               	moviw [0]fsr1
 10342  0DFE  00C0               	movwf	??_cc_cv_mode+2
 10343  0DFF  3F41               	moviw [1]fsr1
 10344  0E00  00C1               	movwf	??_cc_cv_mode+3
 10345  0E01  0841               	movf	??_cc_cv_mode+3,w
 10346  0E02  3A80               	xorlw	128
 10347  0E03  00C2               	movwf	??_cc_cv_mode+4
 10348  0E04  083F               	movf	??_cc_cv_mode+1,w
 10349  0E05  3A80               	xorlw	128
 10350  0E06  0242               	subwf	??_cc_cv_mode+4,w
 10351  0E07  1D03               	skipz
 10352  0E08  2E0B               	goto	u3395
 10353  0E09  083E               	movf	??_cc_cv_mode,w
 10354  0E0A  0240               	subwf	??_cc_cv_mode+2,w
 10355  0E0B                     u3395:	
 10356  0E0B  1803               	skipnc
 10357  0E0C  0008               	return
 10358                           
 10359                           ;battery_charger.c: 139: {
 10360                           ;battery_charger.c: 140: if(!(Imode[z]))
 10361  0E0D  0020               	movlb	0	; select bank0
 10362  0E0E  0845               	movf	cc_cv_mode@z,w
 10363  0E0F  3EDE               	addlw	(low (_Imode| 0))& (0+255)
 10364  0E10  0086               	movwf	6
 10365  0E11  0187               	clrf	7
 10366  0E12  0801               	movf	1,w
 10367  0E13  1D03               	btfss	3,2
 10368  0E14  0008               	return
 10369                           
 10370                           ;battery_charger.c: 141: {
 10371                           ;battery_charger.c: 142: if(batteryState[z]==FLOAT)
 10372  0E15  0845               	movf	cc_cv_mode@z,w
 10373  0E16  3EE2               	addlw	(low (_batteryState| 0))& (0+255)
 10374  0E17  0086               	movwf	6
 10375  0E18  0187               	clrf	7
 10376  0E19  3005               	movlw	5
 10377  0E1A  0601               	xorwf	1,w
 10378  0E1B  1D03               	btfss	3,2
 10379  0E1C  0008               	return
 10380                           
 10381                           ;battery_charger.c: 143: {
 10382                           ;battery_charger.c: 144: if(voltage[z]<1350+(int16_t)((250-batteryTemp)*.24)-70)
 10383  0E1D  0021               	movlb	1	; select bank1
 10384  0E1E  096B               	comf	_batteryTemp^(0+128),w
 10385  0E1F  0020               	movlb	0	; select bank0
 10386  0E20  00BE               	movwf	??_cc_cv_mode
 10387  0E21  0021               	movlb	1	; select bank1
 10388  0E22  096C               	comf	(_batteryTemp+1)^(0+128),w
 10389  0E23  0020               	movlb	0	; select bank0
 10390  0E24  00BF               	movwf	??_cc_cv_mode+1
 10391  0E25  0ABE               	incf	??_cc_cv_mode,f
 10392  0E26  1903               	skipnz
 10393  0E27  0ABF               	incf	??_cc_cv_mode+1,f
 10394  0E28  083E               	movf	??_cc_cv_mode,w
 10395  0E29  3EFA               	addlw	250
 10396  0E2A  00F8               	movwf	___awtoft@c
 10397  0E2B  3000               	movlw	0
 10398  0E2C  3D3F               	addwfc	??_cc_cv_mode+1,w
 10399  0E2D  00F9               	movwf	___awtoft@c+1
 10400  0E2E  3193  238E  318D   	fcall	___awtoft
 10401  0E31  0878               	movf	?___awtoft,w
 10402  0E32  0020               	movlb	0	; select bank0
 10403  0E33  00A3               	movwf	___ftmul@f2
 10404  0E34  0879               	movf	?___awtoft+1,w
 10405  0E35  00A4               	movwf	___ftmul@f2+1
 10406  0E36  087A               	movf	?___awtoft+2,w
 10407  0E37  00A5               	movwf	___ftmul@f2+2
 10408  0E38  30C3               	movlw	195
 10409  0E39  00A0               	movwf	___ftmul@f1
 10410  0E3A  3075               	movlw	117
 10411  0E3B  00A1               	movwf	___ftmul@f1+1
 10412  0E3C  303E               	movlw	62
 10413  0E3D  00A2               	movwf	___ftmul@f1+2
 10414  0E3E  318B  2319  318D   	fcall	___ftmul
 10415  0E41  0020               	movlb	0	; select bank0
 10416  0E42  0820               	movf	?___ftmul,w
 10417  0E43  00B0               	movwf	___fttol@f1
 10418  0E44  0821               	movf	?___ftmul+1,w
 10419  0E45  00B1               	movwf	___fttol@f1+1
 10420  0E46  0822               	movf	?___ftmul+2,w
 10421  0E47  00B2               	movwf	___fttol@f1+2
 10422  0E48  3189  2139  318D   	fcall	___fttol
 10423  0E4B  0020               	movlb	0	; select bank0
 10424  0E4C  0830               	movf	?___fttol,w
 10425  0E4D  3E00               	addlw	0
 10426  0E4E  00C0               	movwf	??_cc_cv_mode+2
 10427  0E4F  3005               	movlw	5
 10428  0E50  3D31               	addwfc	?___fttol+1,w
 10429  0E51  00C1               	movwf	??_cc_cv_mode+3
 10430  0E52  3545               	lslf	cc_cv_mode@z,w
 10431  0E53  3EB0               	addlw	(low (_voltage| 0))& (0+255)
 10432  0E54  0086               	movwf	6
 10433  0E55  0187               	clrf	7
 10434  0E56  3F40               	moviw [0]fsr1
 10435  0E57  00C2               	movwf	??_cc_cv_mode+4
 10436  0E58  3F41               	moviw [1]fsr1
 10437  0E59  00C3               	movwf	??_cc_cv_mode+5
 10438  0E5A  0843               	movf	??_cc_cv_mode+5,w
 10439  0E5B  3A80               	xorlw	128
 10440  0E5C  00C4               	movwf	??_cc_cv_mode+6
 10441  0E5D  0841               	movf	??_cc_cv_mode+3,w
 10442  0E5E  3A80               	xorlw	128
 10443  0E5F  0244               	subwf	??_cc_cv_mode+6,w
 10444  0E60  1D03               	skipz
 10445  0E61  2E64               	goto	u3425
 10446  0E62  0840               	movf	??_cc_cv_mode+2,w
 10447  0E63  0242               	subwf	??_cc_cv_mode+4,w
 10448  0E64                     u3425:	
 10449  0E64  1803               	skipnc
 10450  0E65  0008               	return
 10451                           
 10452                           ;battery_charger.c: 145: {
 10453                           ;battery_charger.c: 146: batteryState[z]=CHARGE;
 10454  0E66  3004               	movlw	4
 10455  0E67  0020               	movlb	0	; select bank0
 10456  0E68  00BE               	movwf	??_cc_cv_mode
 10457  0E69  0845               	movf	cc_cv_mode@z,w
 10458  0E6A  3EE2               	addlw	(low (_batteryState| 0))& (0+255)
 10459  0E6B  0086               	movwf	6
 10460  0E6C  0187               	clrf	7
 10461  0E6D  083E               	movf	??_cc_cv_mode,w
 10462  0E6E  0081               	movwf	1
 10463                           
 10464                           ;battery_charger.c: 147: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 10465  0E6F  0021               	movlb	1	; select bank1
 10466  0E70  096B               	comf	_batteryTemp^(0+128),w
 10467  0E71  0020               	movlb	0	; select bank0
 10468  0E72  00BE               	movwf	??_cc_cv_mode
 10469  0E73  0021               	movlb	1	; select bank1
 10470  0E74  096C               	comf	(_batteryTemp+1)^(0+128),w
 10471  0E75  0020               	movlb	0	; select bank0
 10472  0E76  00BF               	movwf	??_cc_cv_mode+1
 10473  0E77  0ABE               	incf	??_cc_cv_mode,f
 10474  0E78  1903               	skipnz
 10475  0E79  0ABF               	incf	??_cc_cv_mode+1,f
 10476  0E7A  083E               	movf	??_cc_cv_mode,w
 10477  0E7B  3EFA               	addlw	250
 10478  0E7C  00F8               	movwf	___awtoft@c
 10479  0E7D  3000               	movlw	0
 10480  0E7E  3D3F               	addwfc	??_cc_cv_mode+1,w
 10481  0E7F  00F9               	movwf	___awtoft@c+1
 10482  0E80  3193  238E  318D   	fcall	___awtoft
 10483  0E83  0878               	movf	?___awtoft,w
 10484  0E84  0020               	movlb	0	; select bank0
 10485  0E85  00A3               	movwf	___ftmul@f2
 10486  0E86  0879               	movf	?___awtoft+1,w
 10487  0E87  00A4               	movwf	___ftmul@f2+1
 10488  0E88  087A               	movf	?___awtoft+2,w
 10489  0E89  00A5               	movwf	___ftmul@f2+2
 10490  0E8A  30C3               	movlw	195
 10491  0E8B  00A0               	movwf	___ftmul@f1
 10492  0E8C  3075               	movlw	117
 10493  0E8D  00A1               	movwf	___ftmul@f1+1
 10494  0E8E  303E               	movlw	62
 10495  0E8F  00A2               	movwf	___ftmul@f1+2
 10496  0E90  318B  2319  318D   	fcall	___ftmul
 10497  0E93  0020               	movlb	0	; select bank0
 10498  0E94  0820               	movf	?___ftmul,w
 10499  0E95  00B0               	movwf	___fttol@f1
 10500  0E96  0821               	movf	?___ftmul+1,w
 10501  0E97  00B1               	movwf	___fttol@f1+1
 10502  0E98  0822               	movf	?___ftmul+2,w
 10503  0E99  00B2               	movwf	___fttol@f1+2
 10504  0E9A  3189  2139         	fcall	___fttol
 10505  0E9C  0020               	movlb	0	; select bank0
 10506  0E9D  0830               	movf	?___fttol,w
 10507  0E9E  3E91               	addlw	145
 10508  0E9F  00C0               	movwf	??_cc_cv_mode+2
 10509  0EA0  3005               	movlw	5
 10510  0EA1  3D31               	addwfc	?___fttol+1,w
 10511  0EA2  00C1               	movwf	??_cc_cv_mode+3
 10512  0EA3  3545               	lslf	cc_cv_mode@z,w
 10513  0EA4  3EC0               	addlw	(low (_Vref| 0))& (0+255)
 10514  0EA5  0086               	movwf	6
 10515  0EA6  0187               	clrf	7
 10516  0EA7  0840               	movf	??_cc_cv_mode+2,w
 10517  0EA8  3FC0               	movwi [0]fsr1
 10518  0EA9  0841               	movf	??_cc_cv_mode+3,w
 10519  0EAA  3FC1               	movwi [1]fsr1
 10520                           
 10521                           ;battery_charger.c: 148: Iref[z]=35;
 10522  0EAB  3545               	lslf	cc_cv_mode@z,w
 10523  0EAC  3EC8               	addlw	(low (_Iref| 0))& (0+255)
 10524  0EAD  0086               	movwf	6
 10525  0EAE  0187               	clrf	7
 10526  0EAF  3023               	movlw	35
 10527  0EB0  3FC0               	movwi [0]fsr1
 10528  0EB1  3000               	movlw	0
 10529  0EB2  3FC1               	movwi [1]fsr1
 10530  0EB3  0008               	return
 10531  0EB4                     __end_of_cc_cv_mode:	
 10532                           
 10533                           	psect	text13
 10534  15EB                     __ptext13:	
 10535 ;; *************** function _calculateCurrent3 *****************
 10536 ;; Defined at:
 10537 ;;		line 421 in file "main.c"
 10538 ;; Parameters:    Size  Location     Type
 10539 ;;		None
 10540 ;; Auto vars:     Size  Location     Type
 10541 ;;		None
 10542 ;; Return value:  Size  Location     Type
 10543 ;;                  1    wreg      void 
 10544 ;; Registers used:
 10545 ;;		wreg, status,2, status,0, pclath, cstack
 10546 ;; Tracked objects:
 10547 ;;		On entry : 0/0
 10548 ;;		On exit  : 0/0
 10549 ;;		Unchanged: 0/0
 10550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10553 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10554 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10555 ;;Total ram usage:        3 bytes
 10556 ;; Hardware stack levels used:    1
 10557 ;; Hardware stack levels required when called:    2
 10558 ;; This function calls:
 10559 ;;		___awtoft
 10560 ;;		___ftdiv
 10561 ;;		___fttol
 10562 ;; This function is called by:
 10563 ;;		_main
 10564 ;; This function uses a non-reentrant model
 10565 ;;
 10566                           
 10567                           
 10568                           ;psect for function _calculateCurrent3
 10569  15EB                     _calculateCurrent3:	
 10570                           
 10571                           ;main.c: 423: if(Ianalogs[3]-545<=0)
 10572                           
 10573                           ;incstack = 0
 10574                           ; Regs used in _calculateCurrent3: [wreg+status,2+status,0+pclath+cstack]
 10575  15EB  0021               	movlb	1	; select bank1
 10576  15EC  0826               	movf	(_Ianalogs^(0+128)+6),w
 10577  15ED  3EDF               	addlw	223
 10578  15EE  0020               	movlb	0	; select bank0
 10579  15EF  00BE               	movwf	??_calculateCurrent3
 10580  15F0  30FD               	movlw	253
 10581  15F1  0021               	movlb	1	; select bank1
 10582  15F2  3D27               	addwfc	((_Ianalogs+1)^(0+128)+6),w
 10583  15F3  0020               	movlb	0	; select bank0
 10584  15F4  00BF               	movwf	??_calculateCurrent3+1
 10585  15F5  083F               	movf	??_calculateCurrent3+1,w
 10586  15F6  3A80               	xorlw	128
 10587  15F7  00C0               	movwf	??_calculateCurrent3+2
 10588  15F8  3080               	movlw	128
 10589  15F9  0240               	subwf	??_calculateCurrent3+2,w
 10590  15FA  1D03               	skipz
 10591  15FB  2DFE               	goto	u3675
 10592  15FC  3001               	movlw	1
 10593  15FD  023E               	subwf	??_calculateCurrent3,w
 10594  15FE                     u3675:	
 10595  15FE  1803               	skipnc
 10596  15FF  2E04               	goto	l3125
 10597                           
 10598                           ;main.c: 424: {
 10599                           ;main.c: 425: current[3]=0;
 10600  1600  0021               	movlb	1	; select bank1
 10601  1601  01BE               	clrf	(_current^(0+128)+6)
 10602  1602  01BF               	clrf	((_current+1)^(0+128)+6)
 10603                           
 10604                           ;main.c: 426: }
 10605  1603  0008               	return
 10606  1604                     l3125:	
 10607                           
 10608                           ;main.c: 427: else
 10609                           ;main.c: 428: {
 10610                           ;main.c: 429: current[3]=(int16_t)((Ianalogs[3]-545)/2.4);
 10611  1604  0021               	movlb	1	; select bank1
 10612  1605  0826               	movf	(_Ianalogs^(0+128)+6),w
 10613  1606  3EDF               	addlw	223
 10614  1607  00F8               	movwf	___awtoft@c
 10615  1608  30FD               	movlw	253
 10616  1609  3D27               	addwfc	((_Ianalogs+1)^(0+128)+6),w
 10617  160A  00F9               	movwf	___awtoft@c+1
 10618  160B  3193  238E  3195   	fcall	___awtoft
 10619  160E  0878               	movf	?___awtoft,w
 10620  160F  0020               	movlb	0	; select bank0
 10621  1610  00A3               	movwf	___ftdiv@f1
 10622  1611  0879               	movf	?___awtoft+1,w
 10623  1612  00A4               	movwf	___ftdiv@f1+1
 10624  1613  087A               	movf	?___awtoft+2,w
 10625  1614  00A5               	movwf	___ftdiv@f1+2
 10626  1615  309A               	movlw	154
 10627  1616  00A0               	movwf	___ftdiv@f2
 10628  1617  3019               	movlw	25
 10629  1618  00A1               	movwf	___ftdiv@f2+1
 10630  1619  3040               	movlw	64
 10631  161A  00A2               	movwf	___ftdiv@f2+2
 10632  161B  3189  21C0  3195   	fcall	___ftdiv
 10633  161E  0020               	movlb	0	; select bank0
 10634  161F  0820               	movf	?___ftdiv,w
 10635  1620  00B0               	movwf	___fttol@f1
 10636  1621  0821               	movf	?___ftdiv+1,w
 10637  1622  00B1               	movwf	___fttol@f1+1
 10638  1623  0822               	movf	?___ftdiv+2,w
 10639  1624  00B2               	movwf	___fttol@f1+2
 10640  1625  3189  2139         	fcall	___fttol
 10641  1627  0020               	movlb	0	; select bank0
 10642  1628  0831               	movf	?___fttol+1,w
 10643  1629  0021               	movlb	1	; select bank1
 10644  162A  00BF               	movwf	((_current+1)^(0+128)+6)
 10645  162B  0020               	movlb	0	; select bank0
 10646  162C  0830               	movf	?___fttol,w
 10647  162D  0021               	movlb	1	; select bank1
 10648  162E  00BE               	movwf	(_current^(0+128)+6)
 10649  162F  0008               	return
 10650  1630                     __end_of_calculateCurrent3:	
 10651                           
 10652                           	psect	text14
 10653  15A6                     __ptext14:	
 10654 ;; *************** function _calculateCurrent2 *****************
 10655 ;; Defined at:
 10656 ;;		line 408 in file "main.c"
 10657 ;; Parameters:    Size  Location     Type
 10658 ;;		None
 10659 ;; Auto vars:     Size  Location     Type
 10660 ;;		None
 10661 ;; Return value:  Size  Location     Type
 10662 ;;                  1    wreg      void 
 10663 ;; Registers used:
 10664 ;;		wreg, status,2, status,0, pclath, cstack
 10665 ;; Tracked objects:
 10666 ;;		On entry : 0/0
 10667 ;;		On exit  : 0/0
 10668 ;;		Unchanged: 0/0
 10669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10672 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10673 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10674 ;;Total ram usage:        3 bytes
 10675 ;; Hardware stack levels used:    1
 10676 ;; Hardware stack levels required when called:    2
 10677 ;; This function calls:
 10678 ;;		___awtoft
 10679 ;;		___ftdiv
 10680 ;;		___fttol
 10681 ;; This function is called by:
 10682 ;;		_main
 10683 ;; This function uses a non-reentrant model
 10684 ;;
 10685                           
 10686                           
 10687                           ;psect for function _calculateCurrent2
 10688  15A6                     _calculateCurrent2:	
 10689                           
 10690                           ;main.c: 410: if(Ianalogs[2]-535<=0)
 10691                           
 10692                           ;incstack = 0
 10693                           ; Regs used in _calculateCurrent2: [wreg+status,2+status,0+pclath+cstack]
 10694  15A6  0021               	movlb	1	; select bank1
 10695  15A7  0824               	movf	(_Ianalogs^(0+128)+4),w
 10696  15A8  3EE9               	addlw	233
 10697  15A9  0020               	movlb	0	; select bank0
 10698  15AA  00BE               	movwf	??_calculateCurrent2
 10699  15AB  30FD               	movlw	253
 10700  15AC  0021               	movlb	1	; select bank1
 10701  15AD  3D25               	addwfc	((_Ianalogs+1)^(0+128)+4),w
 10702  15AE  0020               	movlb	0	; select bank0
 10703  15AF  00BF               	movwf	??_calculateCurrent2+1
 10704  15B0  083F               	movf	??_calculateCurrent2+1,w
 10705  15B1  3A80               	xorlw	128
 10706  15B2  00C0               	movwf	??_calculateCurrent2+2
 10707  15B3  3080               	movlw	128
 10708  15B4  0240               	subwf	??_calculateCurrent2+2,w
 10709  15B5  1D03               	skipz
 10710  15B6  2DB9               	goto	u3665
 10711  15B7  3001               	movlw	1
 10712  15B8  023E               	subwf	??_calculateCurrent2,w
 10713  15B9                     u3665:	
 10714  15B9  1803               	skipnc
 10715  15BA  2DBF               	goto	l3119
 10716                           
 10717                           ;main.c: 411: {
 10718                           ;main.c: 412: current[2]=0;
 10719  15BB  0021               	movlb	1	; select bank1
 10720  15BC  01BC               	clrf	(_current^(0+128)+4)
 10721  15BD  01BD               	clrf	((_current+1)^(0+128)+4)
 10722                           
 10723                           ;main.c: 413: }
 10724  15BE  0008               	return
 10725  15BF                     l3119:	
 10726                           
 10727                           ;main.c: 414: else
 10728                           ;main.c: 415: {
 10729                           ;main.c: 417: current[2]=(int16_t)((Ianalogs[2]-535)/2.82);
 10730  15BF  0021               	movlb	1	; select bank1
 10731  15C0  0824               	movf	(_Ianalogs^(0+128)+4),w
 10732  15C1  3EE9               	addlw	233
 10733  15C2  00F8               	movwf	___awtoft@c
 10734  15C3  30FD               	movlw	253
 10735  15C4  3D25               	addwfc	((_Ianalogs+1)^(0+128)+4),w
 10736  15C5  00F9               	movwf	___awtoft@c+1
 10737  15C6  3193  238E  3195   	fcall	___awtoft
 10738  15C9  0878               	movf	?___awtoft,w
 10739  15CA  0020               	movlb	0	; select bank0
 10740  15CB  00A3               	movwf	___ftdiv@f1
 10741  15CC  0879               	movf	?___awtoft+1,w
 10742  15CD  00A4               	movwf	___ftdiv@f1+1
 10743  15CE  087A               	movf	?___awtoft+2,w
 10744  15CF  00A5               	movwf	___ftdiv@f1+2
 10745  15D0  307B               	movlw	123
 10746  15D1  00A0               	movwf	___ftdiv@f2
 10747  15D2  3034               	movlw	52
 10748  15D3  00A1               	movwf	___ftdiv@f2+1
 10749  15D4  3040               	movlw	64
 10750  15D5  00A2               	movwf	___ftdiv@f2+2
 10751  15D6  3189  21C0  3195   	fcall	___ftdiv
 10752  15D9  0020               	movlb	0	; select bank0
 10753  15DA  0820               	movf	?___ftdiv,w
 10754  15DB  00B0               	movwf	___fttol@f1
 10755  15DC  0821               	movf	?___ftdiv+1,w
 10756  15DD  00B1               	movwf	___fttol@f1+1
 10757  15DE  0822               	movf	?___ftdiv+2,w
 10758  15DF  00B2               	movwf	___fttol@f1+2
 10759  15E0  3189  2139         	fcall	___fttol
 10760  15E2  0020               	movlb	0	; select bank0
 10761  15E3  0831               	movf	?___fttol+1,w
 10762  15E4  0021               	movlb	1	; select bank1
 10763  15E5  00BD               	movwf	((_current+1)^(0+128)+4)
 10764  15E6  0020               	movlb	0	; select bank0
 10765  15E7  0830               	movf	?___fttol,w
 10766  15E8  0021               	movlb	1	; select bank1
 10767  15E9  00BC               	movwf	(_current^(0+128)+4)
 10768  15EA  0008               	return
 10769  15EB                     __end_of_calculateCurrent2:	
 10770                           
 10771                           	psect	text15
 10772  1561                     __ptext15:	
 10773 ;; *************** function _calculateCurrent1 *****************
 10774 ;; Defined at:
 10775 ;;		line 395 in file "main.c"
 10776 ;; Parameters:    Size  Location     Type
 10777 ;;		None
 10778 ;; Auto vars:     Size  Location     Type
 10779 ;;		None
 10780 ;; Return value:  Size  Location     Type
 10781 ;;                  1    wreg      void 
 10782 ;; Registers used:
 10783 ;;		wreg, status,2, status,0, pclath, cstack
 10784 ;; Tracked objects:
 10785 ;;		On entry : 0/0
 10786 ;;		On exit  : 0/0
 10787 ;;		Unchanged: 0/0
 10788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10791 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10792 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10793 ;;Total ram usage:        3 bytes
 10794 ;; Hardware stack levels used:    1
 10795 ;; Hardware stack levels required when called:    2
 10796 ;; This function calls:
 10797 ;;		___awtoft
 10798 ;;		___ftdiv
 10799 ;;		___fttol
 10800 ;; This function is called by:
 10801 ;;		_main
 10802 ;; This function uses a non-reentrant model
 10803 ;;
 10804                           
 10805                           
 10806                           ;psect for function _calculateCurrent1
 10807  1561                     _calculateCurrent1:	
 10808                           
 10809                           ;main.c: 397: if(Ianalogs[1]-545<=0)
 10810                           
 10811                           ;incstack = 0
 10812                           ; Regs used in _calculateCurrent1: [wreg+status,2+status,0+pclath+cstack]
 10813  1561  0021               	movlb	1	; select bank1
 10814  1562  0822               	movf	(_Ianalogs^(0+128)+2),w
 10815  1563  3EDF               	addlw	223
 10816  1564  0020               	movlb	0	; select bank0
 10817  1565  00BE               	movwf	??_calculateCurrent1
 10818  1566  30FD               	movlw	253
 10819  1567  0021               	movlb	1	; select bank1
 10820  1568  3D23               	addwfc	((_Ianalogs+1)^(0+128)+2),w
 10821  1569  0020               	movlb	0	; select bank0
 10822  156A  00BF               	movwf	??_calculateCurrent1+1
 10823  156B  083F               	movf	??_calculateCurrent1+1,w
 10824  156C  3A80               	xorlw	128
 10825  156D  00C0               	movwf	??_calculateCurrent1+2
 10826  156E  3080               	movlw	128
 10827  156F  0240               	subwf	??_calculateCurrent1+2,w
 10828  1570  1D03               	skipz
 10829  1571  2D74               	goto	u3655
 10830  1572  3001               	movlw	1
 10831  1573  023E               	subwf	??_calculateCurrent1,w
 10832  1574                     u3655:	
 10833  1574  1803               	skipnc
 10834  1575  2D7A               	goto	l3113
 10835                           
 10836                           ;main.c: 398: {
 10837                           ;main.c: 399: current[1]=0;
 10838  1576  0021               	movlb	1	; select bank1
 10839  1577  01BA               	clrf	(_current^(0+128)+2)
 10840  1578  01BB               	clrf	((_current+1)^(0+128)+2)
 10841                           
 10842                           ;main.c: 400: }
 10843  1579  0008               	return
 10844  157A                     l3113:	
 10845                           
 10846                           ;main.c: 401: else
 10847                           ;main.c: 402: {
 10848                           ;main.c: 404: current[1]=(int16_t)((Ianalogs[1]-545)/1.2);
 10849  157A  0021               	movlb	1	; select bank1
 10850  157B  0822               	movf	(_Ianalogs^(0+128)+2),w
 10851  157C  3EDF               	addlw	223
 10852  157D  00F8               	movwf	___awtoft@c
 10853  157E  30FD               	movlw	253
 10854  157F  3D23               	addwfc	((_Ianalogs+1)^(0+128)+2),w
 10855  1580  00F9               	movwf	___awtoft@c+1
 10856  1581  3193  238E  3195   	fcall	___awtoft
 10857  1584  0878               	movf	?___awtoft,w
 10858  1585  0020               	movlb	0	; select bank0
 10859  1586  00A3               	movwf	___ftdiv@f1
 10860  1587  0879               	movf	?___awtoft+1,w
 10861  1588  00A4               	movwf	___ftdiv@f1+1
 10862  1589  087A               	movf	?___awtoft+2,w
 10863  158A  00A5               	movwf	___ftdiv@f1+2
 10864  158B  309A               	movlw	154
 10865  158C  00A0               	movwf	___ftdiv@f2
 10866  158D  3099               	movlw	153
 10867  158E  00A1               	movwf	___ftdiv@f2+1
 10868  158F  303F               	movlw	63
 10869  1590  00A2               	movwf	___ftdiv@f2+2
 10870  1591  3189  21C0  3195   	fcall	___ftdiv
 10871  1594  0020               	movlb	0	; select bank0
 10872  1595  0820               	movf	?___ftdiv,w
 10873  1596  00B0               	movwf	___fttol@f1
 10874  1597  0821               	movf	?___ftdiv+1,w
 10875  1598  00B1               	movwf	___fttol@f1+1
 10876  1599  0822               	movf	?___ftdiv+2,w
 10877  159A  00B2               	movwf	___fttol@f1+2
 10878  159B  3189  2139         	fcall	___fttol
 10879  159D  0020               	movlb	0	; select bank0
 10880  159E  0831               	movf	?___fttol+1,w
 10881  159F  0021               	movlb	1	; select bank1
 10882  15A0  00BB               	movwf	((_current+1)^(0+128)+2)
 10883  15A1  0020               	movlb	0	; select bank0
 10884  15A2  0830               	movf	?___fttol,w
 10885  15A3  0021               	movlb	1	; select bank1
 10886  15A4  00BA               	movwf	(_current^(0+128)+2)
 10887  15A5  0008               	return
 10888  15A6                     __end_of_calculateCurrent1:	
 10889                           
 10890                           	psect	text16
 10891  151C                     __ptext16:	
 10892 ;; *************** function _calculateCurrent0 *****************
 10893 ;; Defined at:
 10894 ;;		line 382 in file "main.c"
 10895 ;; Parameters:    Size  Location     Type
 10896 ;;		None
 10897 ;; Auto vars:     Size  Location     Type
 10898 ;;		None
 10899 ;; Return value:  Size  Location     Type
 10900 ;;                  1    wreg      void 
 10901 ;; Registers used:
 10902 ;;		wreg, status,2, status,0, pclath, cstack
 10903 ;; Tracked objects:
 10904 ;;		On entry : 0/0
 10905 ;;		On exit  : 0/0
 10906 ;;		Unchanged: 0/0
 10907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10910 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10911 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10912 ;;Total ram usage:        3 bytes
 10913 ;; Hardware stack levels used:    1
 10914 ;; Hardware stack levels required when called:    2
 10915 ;; This function calls:
 10916 ;;		___awtoft
 10917 ;;		___ftdiv
 10918 ;;		___fttol
 10919 ;; This function is called by:
 10920 ;;		_main
 10921 ;; This function uses a non-reentrant model
 10922 ;;
 10923                           
 10924                           
 10925                           ;psect for function _calculateCurrent0
 10926  151C                     _calculateCurrent0:	
 10927                           
 10928                           ;main.c: 384: if(Ianalogs[0]-545<=0)
 10929                           
 10930                           ;incstack = 0
 10931                           ; Regs used in _calculateCurrent0: [wreg+status,2+status,0+pclath+cstack]
 10932  151C  0021               	movlb	1	; select bank1
 10933  151D  0820               	movf	_Ianalogs^(0+128),w
 10934  151E  3EDF               	addlw	223
 10935  151F  0020               	movlb	0	; select bank0
 10936  1520  00BE               	movwf	??_calculateCurrent0
 10937  1521  30FD               	movlw	253
 10938  1522  0021               	movlb	1	; select bank1
 10939  1523  3D21               	addwfc	(_Ianalogs+1)^(0+128),w
 10940  1524  0020               	movlb	0	; select bank0
 10941  1525  00BF               	movwf	??_calculateCurrent0+1
 10942  1526  083F               	movf	??_calculateCurrent0+1,w
 10943  1527  3A80               	xorlw	128
 10944  1528  00C0               	movwf	??_calculateCurrent0+2
 10945  1529  3080               	movlw	128
 10946  152A  0240               	subwf	??_calculateCurrent0+2,w
 10947  152B  1D03               	skipz
 10948  152C  2D2F               	goto	u3645
 10949  152D  3001               	movlw	1
 10950  152E  023E               	subwf	??_calculateCurrent0,w
 10951  152F                     u3645:	
 10952  152F  1803               	skipnc
 10953  1530  2D35               	goto	l3107
 10954                           
 10955                           ;main.c: 385: {
 10956                           ;main.c: 386: current[0]=0;
 10957  1531  0021               	movlb	1	; select bank1
 10958  1532  01B8               	clrf	_current^(0+128)
 10959  1533  01B9               	clrf	(_current+1)^(0+128)
 10960                           
 10961                           ;main.c: 387: }
 10962  1534  0008               	return
 10963  1535                     l3107:	
 10964                           
 10965                           ;main.c: 388: else
 10966                           ;main.c: 389: {
 10967                           ;main.c: 390: current[0]=(int16_t)((Ianalogs[0]-545)/2.92);
 10968  1535  0021               	movlb	1	; select bank1
 10969  1536  0820               	movf	_Ianalogs^(0+128),w
 10970  1537  3EDF               	addlw	223
 10971  1538  00F8               	movwf	___awtoft@c
 10972  1539  30FD               	movlw	253
 10973  153A  3D21               	addwfc	(_Ianalogs+1)^(0+128),w
 10974  153B  00F9               	movwf	___awtoft@c+1
 10975  153C  3193  238E  3195   	fcall	___awtoft
 10976  153F  0878               	movf	?___awtoft,w
 10977  1540  0020               	movlb	0	; select bank0
 10978  1541  00A3               	movwf	___ftdiv@f1
 10979  1542  0879               	movf	?___awtoft+1,w
 10980  1543  00A4               	movwf	___ftdiv@f1+1
 10981  1544  087A               	movf	?___awtoft+2,w
 10982  1545  00A5               	movwf	___ftdiv@f1+2
 10983  1546  30E1               	movlw	225
 10984  1547  00A0               	movwf	___ftdiv@f2
 10985  1548  303A               	movlw	58
 10986  1549  00A1               	movwf	___ftdiv@f2+1
 10987  154A  3040               	movlw	64
 10988  154B  00A2               	movwf	___ftdiv@f2+2
 10989  154C  3189  21C0  3195   	fcall	___ftdiv
 10990  154F  0020               	movlb	0	; select bank0
 10991  1550  0820               	movf	?___ftdiv,w
 10992  1551  00B0               	movwf	___fttol@f1
 10993  1552  0821               	movf	?___ftdiv+1,w
 10994  1553  00B1               	movwf	___fttol@f1+1
 10995  1554  0822               	movf	?___ftdiv+2,w
 10996  1555  00B2               	movwf	___fttol@f1+2
 10997  1556  3189  2139         	fcall	___fttol
 10998  1558  0020               	movlb	0	; select bank0
 10999  1559  0831               	movf	?___fttol+1,w
 11000  155A  0021               	movlb	1	; select bank1
 11001  155B  00B9               	movwf	(_current+1)^(0+128)
 11002  155C  0020               	movlb	0	; select bank0
 11003  155D  0830               	movf	?___fttol,w
 11004  155E  0021               	movlb	1	; select bank1
 11005  155F  00B8               	movwf	_current^(0+128)
 11006  1560  0008               	return
 11007  1561                     __end_of_calculateCurrent0:	
 11008                           
 11009                           	psect	text17
 11010  09C0                     __ptext17:	
 11011 ;; *************** function ___ftdiv *****************
 11012 ;; Defined at:
 11013 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdiv.c"
 11014 ;; Parameters:    Size  Location     Type
 11015 ;;  f2              3    0[BANK0 ] float 
 11016 ;;  f1              3    3[BANK0 ] float 
 11017 ;; Auto vars:     Size  Location     Type
 11018 ;;  f3              3   11[BANK0 ] float 
 11019 ;;  sign            1   15[BANK0 ] unsigned char 
 11020 ;;  exp             1   14[BANK0 ] unsigned char 
 11021 ;;  cntr            1   10[BANK0 ] unsigned char 
 11022 ;; Return value:  Size  Location     Type
 11023 ;;                  3    0[BANK0 ] float 
 11024 ;; Registers used:
 11025 ;;		wreg, status,2, status,0, pclath, cstack
 11026 ;; Tracked objects:
 11027 ;;		On entry : 0/0
 11028 ;;		On exit  : 0/0
 11029 ;;		Unchanged: 0/0
 11030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11031 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11032 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11033 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11034 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11035 ;;Total ram usage:       16 bytes
 11036 ;; Hardware stack levels used:    1
 11037 ;; Hardware stack levels required when called:    1
 11038 ;; This function calls:
 11039 ;;		___ftpack
 11040 ;; This function is called by:
 11041 ;;		_tempCalc
 11042 ;;		_main
 11043 ;;		_calculateCurrent0
 11044 ;;		_calculateCurrent1
 11045 ;;		_calculateCurrent2
 11046 ;;		_calculateCurrent3
 11047 ;; This function uses a non-reentrant model
 11048 ;;
 11049                           
 11050                           
 11051                           ;psect for function ___ftdiv
 11052  09C0                     ___ftdiv:	
 11053                           
 11054                           ;incstack = 0
 11055                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 11056  09C0  0020               	movlb	0	; select bank0
 11057  09C1  0823               	movf	___ftdiv@f1,w
 11058  09C2  00A6               	movwf	??___ftdiv
 11059  09C3  0824               	movf	___ftdiv@f1+1,w
 11060  09C4  00A7               	movwf	??___ftdiv+1
 11061  09C5  0825               	movf	___ftdiv@f1+2,w
 11062  09C6  00A8               	movwf	??___ftdiv+2
 11063  09C7  1003               	clrc
 11064  09C8  0D27               	rlf	??___ftdiv+1,w
 11065  09C9  0D28               	rlf	??___ftdiv+2,w
 11066  09CA  00A9               	movwf	??___ftdiv+3
 11067  09CB  0829               	movf	??___ftdiv+3,w
 11068  09CC  00AE               	movwf	___ftdiv@exp
 11069  09CD  082E               	movf	___ftdiv@exp,w
 11070  09CE  1D03               	btfss	3,2
 11071  09CF  29D7               	goto	l2793
 11072  09D0  3000               	movlw	0
 11073  09D1  00A0               	movwf	?___ftdiv
 11074  09D2  3000               	movlw	0
 11075  09D3  00A1               	movwf	?___ftdiv+1
 11076  09D4  3000               	movlw	0
 11077  09D5  00A2               	movwf	?___ftdiv+2
 11078  09D6  0008               	return
 11079  09D7                     l2793:	
 11080  09D7  0820               	movf	___ftdiv@f2,w
 11081  09D8  00A6               	movwf	??___ftdiv
 11082  09D9  0821               	movf	___ftdiv@f2+1,w
 11083  09DA  00A7               	movwf	??___ftdiv+1
 11084  09DB  0822               	movf	___ftdiv@f2+2,w
 11085  09DC  00A8               	movwf	??___ftdiv+2
 11086  09DD  1003               	clrc
 11087  09DE  0D27               	rlf	??___ftdiv+1,w
 11088  09DF  0D28               	rlf	??___ftdiv+2,w
 11089  09E0  00A9               	movwf	??___ftdiv+3
 11090  09E1  0829               	movf	??___ftdiv+3,w
 11091  09E2  00AF               	movwf	___ftdiv@sign
 11092  09E3  082F               	movf	___ftdiv@sign,w
 11093  09E4  1D03               	btfss	3,2
 11094  09E5  29ED               	goto	l2799
 11095  09E6  3000               	movlw	0
 11096  09E7  00A0               	movwf	?___ftdiv
 11097  09E8  3000               	movlw	0
 11098  09E9  00A1               	movwf	?___ftdiv+1
 11099  09EA  3000               	movlw	0
 11100  09EB  00A2               	movwf	?___ftdiv+2
 11101  09EC  0008               	return
 11102  09ED                     l2799:	
 11103  09ED  3000               	movlw	0
 11104  09EE  00AB               	movwf	___ftdiv@f3
 11105  09EF  3000               	movlw	0
 11106  09F0  00AC               	movwf	___ftdiv@f3+1
 11107  09F1  3000               	movlw	0
 11108  09F2  00AD               	movwf	___ftdiv@f3+2
 11109  09F3  3089               	movlw	137
 11110  09F4  072F               	addwf	___ftdiv@sign,w
 11111  09F5  00A6               	movwf	??___ftdiv
 11112  09F6  0826               	movf	??___ftdiv,w
 11113  09F7  02AE               	subwf	___ftdiv@exp,f
 11114  09F8  0823               	movf	___ftdiv@f1,w
 11115  09F9  00A6               	movwf	??___ftdiv
 11116  09FA  0824               	movf	___ftdiv@f1+1,w
 11117  09FB  00A7               	movwf	??___ftdiv+1
 11118  09FC  0825               	movf	___ftdiv@f1+2,w
 11119  09FD  00A8               	movwf	??___ftdiv+2
 11120  09FE  3010               	movlw	16
 11121  09FF                     u3005:	
 11122  09FF  36A8               	lsrf	??___ftdiv+2,f
 11123  0A00  0CA7               	rrf	??___ftdiv+1,f
 11124  0A01  0CA6               	rrf	??___ftdiv,f
 11125  0A02  0B89               	decfsz	9,f
 11126  0A03  29FF               	goto	u3005
 11127  0A04  0826               	movf	??___ftdiv,w
 11128  0A05  00A9               	movwf	??___ftdiv+3
 11129  0A06  0829               	movf	??___ftdiv+3,w
 11130  0A07  00AF               	movwf	___ftdiv@sign
 11131  0A08  0820               	movf	___ftdiv@f2,w
 11132  0A09  00A6               	movwf	??___ftdiv
 11133  0A0A  0821               	movf	___ftdiv@f2+1,w
 11134  0A0B  00A7               	movwf	??___ftdiv+1
 11135  0A0C  0822               	movf	___ftdiv@f2+2,w
 11136  0A0D  00A8               	movwf	??___ftdiv+2
 11137  0A0E  3010               	movlw	16
 11138  0A0F                     u3015:	
 11139  0A0F  36A8               	lsrf	??___ftdiv+2,f
 11140  0A10  0CA7               	rrf	??___ftdiv+1,f
 11141  0A11  0CA6               	rrf	??___ftdiv,f
 11142  0A12  0B89               	decfsz	9,f
 11143  0A13  2A0F               	goto	u3015
 11144  0A14  0826               	movf	??___ftdiv,w
 11145  0A15  00A9               	movwf	??___ftdiv+3
 11146  0A16  0829               	movf	??___ftdiv+3,w
 11147  0A17  06AF               	xorwf	___ftdiv@sign,f
 11148  0A18  3080               	movlw	128
 11149  0A19  00A6               	movwf	??___ftdiv
 11150  0A1A  0826               	movf	??___ftdiv,w
 11151  0A1B  05AF               	andwf	___ftdiv@sign,f
 11152  0A1C  17A4               	bsf	___ftdiv@f1+1,7
 11153  0A1D  30FF               	movlw	255
 11154  0A1E  05A3               	andwf	___ftdiv@f1,f
 11155  0A1F  30FF               	movlw	255
 11156  0A20  05A4               	andwf	___ftdiv@f1+1,f
 11157  0A21  3000               	movlw	0
 11158  0A22  05A5               	andwf	___ftdiv@f1+2,f
 11159  0A23  17A1               	bsf	___ftdiv@f2+1,7
 11160  0A24  30FF               	movlw	255
 11161  0A25  05A0               	andwf	___ftdiv@f2,f
 11162  0A26  30FF               	movlw	255
 11163  0A27  05A1               	andwf	___ftdiv@f2+1,f
 11164  0A28  3000               	movlw	0
 11165  0A29  05A2               	andwf	___ftdiv@f2+2,f
 11166  0A2A  3018               	movlw	24
 11167  0A2B  00A6               	movwf	??___ftdiv
 11168  0A2C  0826               	movf	??___ftdiv,w
 11169  0A2D  00AA               	movwf	___ftdiv@cntr
 11170  0A2E                     l2813:	
 11171  0A2E  3001               	movlw	1
 11172  0A2F                     u3025:	
 11173  0A2F  35AB               	lslf	___ftdiv@f3,f
 11174  0A30  0DAC               	rlf	___ftdiv@f3+1,f
 11175  0A31  0DAD               	rlf	___ftdiv@f3+2,f
 11176  0A32  0B89               	decfsz	9,f
 11177  0A33  2A2F               	goto	u3025
 11178  0A34  0822               	movf	___ftdiv@f2+2,w
 11179  0A35  0225               	subwf	___ftdiv@f1+2,w
 11180  0A36  1D03               	skipz
 11181  0A37  2A3E               	goto	u3035
 11182  0A38  0821               	movf	___ftdiv@f2+1,w
 11183  0A39  0224               	subwf	___ftdiv@f1+1,w
 11184  0A3A  1D03               	skipz
 11185  0A3B  2A3E               	goto	u3035
 11186  0A3C  0820               	movf	___ftdiv@f2,w
 11187  0A3D  0223               	subwf	___ftdiv@f1,w
 11188  0A3E                     u3035:	
 11189  0A3E  1C03               	skipc
 11190  0A3F  2A47               	goto	l2821
 11191  0A40  0820               	movf	___ftdiv@f2,w
 11192  0A41  02A3               	subwf	___ftdiv@f1,f
 11193  0A42  0821               	movf	___ftdiv@f2+1,w
 11194  0A43  3BA4               	subwfb	___ftdiv@f1+1,f
 11195  0A44  0822               	movf	___ftdiv@f2+2,w
 11196  0A45  3BA5               	subwfb	___ftdiv@f1+2,f
 11197  0A46  142B               	bsf	___ftdiv@f3,0
 11198  0A47                     l2821:	
 11199  0A47  3001               	movlw	1
 11200  0A48                     u3045:	
 11201  0A48  35A3               	lslf	___ftdiv@f1,f
 11202  0A49  0DA4               	rlf	___ftdiv@f1+1,f
 11203  0A4A  0DA5               	rlf	___ftdiv@f1+2,f
 11204  0A4B  0B89               	decfsz	9,f
 11205  0A4C  2A48               	goto	u3045
 11206  0A4D  3001               	movlw	1
 11207  0A4E  02AA               	subwf	___ftdiv@cntr,f
 11208  0A4F  1D03               	btfss	3,2
 11209  0A50  2A2E               	goto	l2813
 11210  0A51  082B               	movf	___ftdiv@f3,w
 11211  0A52  00F0               	movwf	___ftpack@arg
 11212  0A53  082C               	movf	___ftdiv@f3+1,w
 11213  0A54  00F1               	movwf	___ftpack@arg+1
 11214  0A55  082D               	movf	___ftdiv@f3+2,w
 11215  0A56  00F2               	movwf	___ftpack@arg+2
 11216  0A57  082E               	movf	___ftdiv@exp,w
 11217  0A58  00A6               	movwf	??___ftdiv
 11218  0A59  0826               	movf	??___ftdiv,w
 11219  0A5A  00F3               	movwf	___ftpack@exp
 11220  0A5B  082F               	movf	___ftdiv@sign,w
 11221  0A5C  00A7               	movwf	??___ftdiv+1
 11222  0A5D  0827               	movf	??___ftdiv+1,w
 11223  0A5E  00F4               	movwf	___ftpack@sign
 11224  0A5F  3197  2735         	fcall	___ftpack
 11225  0A61  0870               	movf	?___ftpack,w
 11226  0A62  0020               	movlb	0	; select bank0
 11227  0A63  00A0               	movwf	?___ftdiv
 11228  0A64  0871               	movf	?___ftpack+1,w
 11229  0A65  00A1               	movwf	?___ftdiv+1
 11230  0A66  0872               	movf	?___ftpack+2,w
 11231  0A67  00A2               	movwf	?___ftdiv+2
 11232  0A68  0008               	return
 11233  0A69                     __end_of___ftdiv:	
 11234                           
 11235                           	psect	text18
 11236  146B                     __ptext18:	
 11237 ;; *************** function _SYSTEM_Initialize *****************
 11238 ;; Defined at:
 11239 ;;		line 71 in file "system.c"
 11240 ;; Parameters:    Size  Location     Type
 11241 ;;		None
 11242 ;; Auto vars:     Size  Location     Type
 11243 ;;		None
 11244 ;; Return value:  Size  Location     Type
 11245 ;;                  1    wreg      void 
 11246 ;; Registers used:
 11247 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11248 ;; Tracked objects:
 11249 ;;		On entry : 0/0
 11250 ;;		On exit  : 0/0
 11251 ;;		Unchanged: 0/0
 11252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11255 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11256 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11257 ;;Total ram usage:        2 bytes
 11258 ;; Hardware stack levels used:    1
 11259 ;; Hardware stack levels required when called:    3
 11260 ;; This function calls:
 11261 ;;		_ADC_Initialize
 11262 ;;		_Init_Battery_State_Machine
 11263 ;;		_LCDClear
 11264 ;;		_LCDInit
 11265 ;;		_OSCILLATOR_Initialize
 11266 ;;		_PIN_MANAGER_Initialize
 11267 ;;		_PWM_Initialize
 11268 ;;		_TMR2_Initialize
 11269 ;;		_TMR4_Initialize
 11270 ;; This function is called by:
 11271 ;;		_main
 11272 ;; This function uses a non-reentrant model
 11273 ;;
 11274                           
 11275                           
 11276                           ;psect for function _SYSTEM_Initialize
 11277  146B                     _SYSTEM_Initialize:	
 11278                           
 11279                           ;system.c: 73: PIN_MANAGER_Initialize();
 11280                           
 11281                           ;incstack = 0
 11282                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11283  146B  3193  23F9  3194   	fcall	_PIN_MANAGER_Initialize
 11284                           
 11285                           ;system.c: 74: OSCILLATOR_Initialize();
 11286  146E  3180  2006  3194   	fcall	_OSCILLATOR_Initialize
 11287                           
 11288                           ;system.c: 76: ADC_Initialize();
 11289  1471  3193  236F  3194   	fcall	_ADC_Initialize
 11290                           
 11291                           ;system.c: 77: PWM_Initialize();
 11292  1474  3192  22E0  3194   	fcall	_PWM_Initialize
 11293                           
 11294                           ;system.c: 79: TMR2_Initialize();
 11295  1477  3192  229D  3194   	fcall	_TMR2_Initialize
 11296                           
 11297                           ;system.c: 80: TMR4_Initialize();
 11298  147A  3192  22AB  3194   	fcall	_TMR4_Initialize
 11299                           
 11300                           ;system.c: 81: Init_Battery_State_Machine(0);
 11301  147D  3000               	movlw	0
 11302  147E  3197  2799  3194   	fcall	_Init_Battery_State_Machine
 11303                           
 11304                           ;system.c: 82: Init_Battery_State_Machine(1);
 11305  1481  3001               	movlw	1
 11306  1482  3197  2799  3194   	fcall	_Init_Battery_State_Machine
 11307                           
 11308                           ;system.c: 83: LCDInit();
 11309  1485  3194  2430  3194   	fcall	_LCDInit
 11310                           
 11311                           ;system.c: 84: _delay((unsigned long)((200)*(32000000/4000.0)));
 11312  1488  3009               	movlw	9
 11313  1489  0020               	movlb	0	; select bank0
 11314  148A  00C4               	movwf	??_SYSTEM_Initialize+1
 11315  148B  301E               	movlw	30
 11316  148C  00C3               	movwf	??_SYSTEM_Initialize
 11317  148D  30E4               	movlw	228
 11318  148E                     u4007:	
 11319  148E  0B89               	decfsz	9,f
 11320  148F  2C8E               	goto	u4007
 11321  1490  0BC3               	decfsz	??_SYSTEM_Initialize,f
 11322  1491  2C8E               	goto	u4007
 11323  1492  0BC4               	decfsz	??_SYSTEM_Initialize+1,f
 11324  1493  2C8E               	goto	u4007
 11325  1494  0000               	nop
 11326                           
 11327                           ;system.c: 85: LCDClear();
 11328  1495  3193  23D3  3194   	fcall	_LCDClear
 11329                           
 11330                           ;system.c: 86: _delay((unsigned long)((200)*(32000000/4000.0)));
 11331  1498  3009               	movlw	9
 11332  1499  0020               	movlb	0	; select bank0
 11333  149A  00C4               	movwf	??_SYSTEM_Initialize+1
 11334  149B  301E               	movlw	30
 11335  149C  00C3               	movwf	??_SYSTEM_Initialize
 11336  149D  30E4               	movlw	228
 11337  149E                     u4017:	
 11338  149E  0B89               	decfsz	9,f
 11339  149F  2C9E               	goto	u4017
 11340  14A0  0BC3               	decfsz	??_SYSTEM_Initialize,f
 11341  14A1  2C9E               	goto	u4017
 11342  14A2  0BC4               	decfsz	??_SYSTEM_Initialize+1,f
 11343  14A3  2C9E               	goto	u4017
 11344  14A4  0000               	nop
 11345  14A5  0008               	return
 11346  14A6                     __end_of_SYSTEM_Initialize:	
 11347                           
 11348                           	psect	text19
 11349  12AB                     __ptext19:	
 11350 ;; *************** function _TMR4_Initialize *****************
 11351 ;; Defined at:
 11352 ;;		line 25 in file "tmr.c"
 11353 ;; Parameters:    Size  Location     Type
 11354 ;;		None
 11355 ;; Auto vars:     Size  Location     Type
 11356 ;;		None
 11357 ;; Return value:  Size  Location     Type
 11358 ;;                  1    wreg      void 
 11359 ;; Registers used:
 11360 ;;		wreg, status,2
 11361 ;; Tracked objects:
 11362 ;;		On entry : 0/0
 11363 ;;		On exit  : 0/0
 11364 ;;		Unchanged: 0/0
 11365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11370 ;;Total ram usage:        0 bytes
 11371 ;; Hardware stack levels used:    1
 11372 ;; This function calls:
 11373 ;;		Nothing
 11374 ;; This function is called by:
 11375 ;;		_SYSTEM_Initialize
 11376 ;; This function uses a non-reentrant model
 11377 ;;
 11378                           
 11379                           
 11380                           ;psect for function _TMR4_Initialize
 11381  12AB                     _TMR4_Initialize:	
 11382                           
 11383                           ;tmr.c: 27: T4CON = 0x00;
 11384                           
 11385                           ;incstack = 0
 11386                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
 11387  12AB  0025               	movlb	5	; select bank5
 11388  12AC  0194               	clrf	20	;volatile
 11389                           
 11390                           ;tmr.c: 29: T4CLKCON = 0x01;
 11391  12AD  3001               	movlw	1
 11392  12AE  0096               	movwf	22	;volatile
 11393                           
 11394                           ;tmr.c: 31: T4HLT = 0x00;
 11395  12AF  0195               	clrf	21	;volatile
 11396                           
 11397                           ;tmr.c: 33: T4RST = 0x00;
 11398  12B0  0197               	clrf	23	;volatile
 11399                           
 11400                           ;tmr.c: 35: T4PR = 0xFE;
 11401  12B1  30FE               	movlw	254
 11402  12B2  0093               	movwf	19	;volatile
 11403                           
 11404                           ;tmr.c: 39: T4TMR = 0x00;
 11405  12B3  0192               	clrf	18	;volatile
 11406                           
 11407                           ;tmr.c: 41: PIR4bits.TMR4IF = 0;
 11408  12B4  002E               	movlb	14	; select bank14
 11409  12B5  1190               	bcf	16,3	;volatile
 11410                           
 11411                           ;tmr.c: 43: T4CONbits.TMR4ON = 1;
 11412  12B6  0025               	movlb	5	; select bank5
 11413  12B7  1794               	bsf	20,7	;volatile
 11414  12B8  0008               	return
 11415  12B9                     __end_of_TMR4_Initialize:	
 11416                           
 11417                           	psect	text20
 11418  129D                     __ptext20:	
 11419 ;; *************** function _TMR2_Initialize *****************
 11420 ;; Defined at:
 11421 ;;		line 3 in file "tmr.c"
 11422 ;; Parameters:    Size  Location     Type
 11423 ;;		None
 11424 ;; Auto vars:     Size  Location     Type
 11425 ;;		None
 11426 ;; Return value:  Size  Location     Type
 11427 ;;                  1    wreg      void 
 11428 ;; Registers used:
 11429 ;;		wreg, status,2
 11430 ;; Tracked objects:
 11431 ;;		On entry : 0/0
 11432 ;;		On exit  : 0/0
 11433 ;;		Unchanged: 0/0
 11434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11439 ;;Total ram usage:        0 bytes
 11440 ;; Hardware stack levels used:    1
 11441 ;; This function calls:
 11442 ;;		Nothing
 11443 ;; This function is called by:
 11444 ;;		_SYSTEM_Initialize
 11445 ;; This function uses a non-reentrant model
 11446 ;;
 11447                           
 11448                           
 11449                           ;psect for function _TMR2_Initialize
 11450  129D                     _TMR2_Initialize:	
 11451                           
 11452                           ;tmr.c: 5: T2CON = 0x00;
 11453                           
 11454                           ;incstack = 0
 11455                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 11456  129D  0025               	movlb	5	; select bank5
 11457  129E  018E               	clrf	14	;volatile
 11458                           
 11459                           ;tmr.c: 7: T2CLKCON = 0x01;
 11460  129F  3001               	movlw	1
 11461  12A0  0090               	movwf	16	;volatile
 11462                           
 11463                           ;tmr.c: 9: T2HLT = 0x00;
 11464  12A1  018F               	clrf	15	;volatile
 11465                           
 11466                           ;tmr.c: 11: T2RST = 0x00;
 11467  12A2  0191               	clrf	17	;volatile
 11468                           
 11469                           ;tmr.c: 13: T2PR = 0xFE;
 11470  12A3  30FE               	movlw	254
 11471  12A4  008D               	movwf	13	;volatile
 11472                           
 11473                           ;tmr.c: 18: T2TMR = 0x00;
 11474  12A5  018C               	clrf	12	;volatile
 11475                           
 11476                           ;tmr.c: 20: PIR4bits.TMR2IF = 0;
 11477  12A6  002E               	movlb	14	; select bank14
 11478  12A7  1090               	bcf	16,1	;volatile
 11479                           
 11480                           ;tmr.c: 22: T2CONbits.TMR2ON = 1;
 11481  12A8  0025               	movlb	5	; select bank5
 11482  12A9  178E               	bsf	14,7	;volatile
 11483  12AA  0008               	return
 11484  12AB                     __end_of_TMR2_Initialize:	
 11485                           
 11486                           	psect	text21
 11487  12E0                     __ptext21:	
 11488 ;; *************** function _PWM_Initialize *****************
 11489 ;; Defined at:
 11490 ;;		line 3 in file "pwm.c"
 11491 ;; Parameters:    Size  Location     Type
 11492 ;;		None
 11493 ;; Auto vars:     Size  Location     Type
 11494 ;;		None
 11495 ;; Return value:  Size  Location     Type
 11496 ;;                  1    wreg      void 
 11497 ;; Registers used:
 11498 ;;		wreg, status,2, status,0
 11499 ;; Tracked objects:
 11500 ;;		On entry : 0/0
 11501 ;;		On exit  : 0/0
 11502 ;;		Unchanged: 0/0
 11503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11508 ;;Total ram usage:        0 bytes
 11509 ;; Hardware stack levels used:    1
 11510 ;; This function calls:
 11511 ;;		Nothing
 11512 ;; This function is called by:
 11513 ;;		_SYSTEM_Initialize
 11514 ;; This function uses a non-reentrant model
 11515 ;;
 11516                           
 11517                           
 11518                           ;psect for function _PWM_Initialize
 11519  12E0                     _PWM_Initialize:	
 11520                           
 11521                           ;pwm.c: 5: PWM6CON = 0x80;
 11522                           
 11523                           ;incstack = 0
 11524                           ; Regs used in _PWM_Initialize: [wreg+status,2+status,0]
 11525  12E0  3080               	movlw	128
 11526  12E1  0027               	movlb	7	; select bank7
 11527  12E2  008E               	movwf	14	;volatile
 11528                           
 11529                           ;pwm.c: 7: PWM6DCH = 0x00;
 11530  12E3  018D               	clrf	13	;volatile
 11531                           
 11532                           ;pwm.c: 9: PWM6DCL = 0x00;
 11533  12E4  018C               	clrf	12	;volatile
 11534                           
 11535                           ;pwm.c: 11: CCPTMRS1bits.P6TSEL = 0x01;
 11536  12E5  0024               	movlb	4	; select bank4
 11537  12E6  081F               	movf	31,w	;volatile
 11538  12E7  39F3               	andlw	-13
 11539  12E8  3804               	iorlw	4
 11540  12E9  009F               	movwf	31	;volatile
 11541                           
 11542                           ;pwm.c: 14: PWM7CON = 0x80;
 11543  12EA  3080               	movlw	128
 11544  12EB  0027               	movlb	7	; select bank7
 11545  12EC  0092               	movwf	18	;volatile
 11546                           
 11547                           ;pwm.c: 16: PWM7DCH = 0x00;
 11548  12ED  0191               	clrf	17	;volatile
 11549                           
 11550                           ;pwm.c: 18: PWM7DCL = 0x00;
 11551  12EE  0190               	clrf	16	;volatile
 11552                           
 11553                           ;pwm.c: 20: CCPTMRS1bits.P7TSEL = 0x02;
 11554  12EF  0024               	movlb	4	; select bank4
 11555  12F0  081F               	movf	31,w	;volatile
 11556  12F1  39CF               	andlw	-49
 11557  12F2  3820               	iorlw	32
 11558  12F3  009F               	movwf	31	;volatile
 11559  12F4  0008               	return
 11560  12F5                     __end_of_PWM_Initialize:	
 11561                           
 11562                           	psect	text22
 11563  13F9                     __ptext22:	
 11564 ;; *************** function _PIN_MANAGER_Initialize *****************
 11565 ;; Defined at:
 11566 ;;		line 5 in file "pin_manager.c"
 11567 ;; Parameters:    Size  Location     Type
 11568 ;;		None
 11569 ;; Auto vars:     Size  Location     Type
 11570 ;;  state           1    0[COMMON] char 
 11571 ;; Return value:  Size  Location     Type
 11572 ;;                  1    wreg      void 
 11573 ;; Registers used:
 11574 ;;		wreg, status,2
 11575 ;; Tracked objects:
 11576 ;;		On entry : 0/0
 11577 ;;		On exit  : 0/0
 11578 ;;		Unchanged: 0/0
 11579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11581 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11583 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11584 ;;Total ram usage:        1 bytes
 11585 ;; Hardware stack levels used:    1
 11586 ;; This function calls:
 11587 ;;		Nothing
 11588 ;; This function is called by:
 11589 ;;		_SYSTEM_Initialize
 11590 ;; This function uses a non-reentrant model
 11591 ;;
 11592                           
 11593                           
 11594                           ;psect for function _PIN_MANAGER_Initialize
 11595  13F9                     _PIN_MANAGER_Initialize:	
 11596                           
 11597                           ;pin_manager.c: 7: LATA = 0x20;
 11598                           
 11599                           ;incstack = 0
 11600                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 11601  13F9  3020               	movlw	32
 11602  13FA  0020               	movlb	0	; select bank0
 11603  13FB  0096               	movwf	22	;volatile
 11604                           
 11605                           ;pin_manager.c: 8: LATB = 0x00;
 11606  13FC  0197               	clrf	23	;volatile
 11607                           
 11608                           ;pin_manager.c: 9: LATC = 0x00;
 11609  13FD  0198               	clrf	24	;volatile
 11610                           
 11611                           ;pin_manager.c: 11: WPUA = 0x00;
 11612  13FE  003E               	movlb	30	; select bank30
 11613  13FF  01B9               	clrf	57	;volatile
 11614                           
 11615                           ;pin_manager.c: 12: WPUB = 0x00;
 11616  1400  01C4               	clrf	68	;volatile
 11617                           
 11618                           ;pin_manager.c: 13: WPUC = 0x00;
 11619  1401  01CF               	clrf	79	;volatile
 11620                           
 11621                           ;pin_manager.c: 14: WPUE = 0x8;
 11622  1402  3008               	movlw	8
 11623  1403  00E5               	movwf	101	;volatile
 11624                           
 11625                           ;pin_manager.c: 16: TRISA = 0x00;
 11626  1404  0020               	movlb	0	; select bank0
 11627  1405  0191               	clrf	17	;volatile
 11628                           
 11629                           ;pin_manager.c: 17: TRISB = 0x0E;
 11630  1406  300E               	movlw	14
 11631  1407  0092               	movwf	18	;volatile
 11632                           
 11633                           ;pin_manager.c: 18: TRISC = 0xFF;
 11634  1408  30FF               	movlw	255
 11635  1409  0093               	movwf	19	;volatile
 11636                           
 11637                           ;pin_manager.c: 20: ANSELA = 0x00;
 11638  140A  003E               	movlb	30	; select bank30
 11639  140B  01B8               	clrf	56	;volatile
 11640                           
 11641                           ;pin_manager.c: 21: ANSELB = 0x0A;
 11642  140C  300A               	movlw	10
 11643  140D  00C3               	movwf	67	;volatile
 11644                           
 11645                           ;pin_manager.c: 22: ANSELC = 0xFF;
 11646  140E  30FF               	movlw	255
 11647  140F  00CE               	movwf	78	;volatile
 11648                           
 11649                           ;pin_manager.c: 25: PIE0bits.IOCIE = 0;
 11650  1410  002E               	movlb	14	; select bank14
 11651  1411  1216               	bcf	22,4	;volatile
 11652                           
 11653                           ;pin_manager.c: 26: int8_t state = GIE;
 11654  1412  3000               	movlw	0
 11655  1413  1B8B               	btfsc	11,7	;volatile
 11656  1414  3001               	movlw	1
 11657  1415  00F0               	movwf	PIN_MANAGER_Initialize@state
 11658                           
 11659                           ;pin_manager.c: 27: GIE = 0;
 11660  1416  138B               	bcf	11,7	;volatile
 11661                           
 11662                           ;pin_manager.c: 28: PPSLOCK = 0x55;
 11663  1417  3055               	movlw	85
 11664  1418  003D               	movlb	29	; select bank29
 11665  1419  008F               	movwf	15	;volsfr
 11666                           
 11667                           ;pin_manager.c: 29: PPSLOCK = 0xAA;
 11668  141A  30AA               	movlw	170
 11669  141B  008F               	movwf	15	;volsfr
 11670                           
 11671                           ;pin_manager.c: 30: PPSLOCKbits.PPSLOCKED = 0x00;
 11672  141C  100F               	bcf	15,0	;volsfr
 11673                           
 11674                           ;pin_manager.c: 32: RA6PPS = 0x0E;
 11675  141D  300E               	movlw	14
 11676  141E  003E               	movlb	30	; select bank30
 11677  141F  0096               	movwf	22	;volatile
 11678                           
 11679                           ;pin_manager.c: 33: RA7PPS = 0x0F;
 11680  1420  300F               	movlw	15
 11681  1421  0097               	movwf	23	;volatile
 11682                           
 11683                           ;pin_manager.c: 34: RB0PPS = 0x09;
 11684  1422  3009               	movlw	9
 11685  1423  0098               	movwf	24	;volatile
 11686                           
 11687                           ;pin_manager.c: 35: PPSLOCK = 0x55;
 11688  1424  3055               	movlw	85
 11689  1425  003D               	movlb	29	; select bank29
 11690  1426  008F               	movwf	15	;volsfr
 11691                           
 11692                           ;pin_manager.c: 36: PPSLOCK = 0xAA;
 11693  1427  30AA               	movlw	170
 11694  1428  008F               	movwf	15	;volsfr
 11695                           
 11696                           ;pin_manager.c: 37: PPSLOCKbits.PPSLOCKED = 0x01;
 11697  1429  140F               	bsf	15,0	;volsfr
 11698                           
 11699                           ;pin_manager.c: 38: GIE = state;
 11700  142A  1C70               	btfss	PIN_MANAGER_Initialize@state,0
 11701  142B  2C2E               	goto	u2740
 11702  142C  178B               	bsf	11,7	;volatile
 11703  142D  0008               	return
 11704  142E                     u2740:	
 11705  142E  138B               	bcf	11,7	;volatile
 11706  142F  0008               	return
 11707  1430                     __end_of_PIN_MANAGER_Initialize:	
 11708                           
 11709                           	psect	text23
 11710  0006                     __ptext23:	
 11711 ;; *************** function _OSCILLATOR_Initialize *****************
 11712 ;; Defined at:
 11713 ;;		line 89 in file "system.c"
 11714 ;; Parameters:    Size  Location     Type
 11715 ;;		None
 11716 ;; Auto vars:     Size  Location     Type
 11717 ;;		None
 11718 ;; Return value:  Size  Location     Type
 11719 ;;                  1    wreg      void 
 11720 ;; Registers used:
 11721 ;;		wreg, status,2
 11722 ;; Tracked objects:
 11723 ;;		On entry : 0/0
 11724 ;;		On exit  : 0/0
 11725 ;;		Unchanged: 0/0
 11726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11731 ;;Total ram usage:        0 bytes
 11732 ;; Hardware stack levels used:    1
 11733 ;; This function calls:
 11734 ;;		Nothing
 11735 ;; This function is called by:
 11736 ;;		_SYSTEM_Initialize
 11737 ;; This function uses a non-reentrant model
 11738 ;;
 11739                           
 11740                           
 11741                           ;psect for function _OSCILLATOR_Initialize
 11742  0006                     _OSCILLATOR_Initialize:	
 11743                           
 11744                           ;system.c: 91: OSCCON1 = 0x60;
 11745                           
 11746                           ;incstack = 0
 11747                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 11748  0006  3060               	movlw	96
 11749  0007  0031               	movlb	17	; select bank17
 11750  0008  008D               	movwf	13	;volatile
 11751                           
 11752                           ;system.c: 92: OSCCON3 = 0x00;
 11753  0009  018F               	clrf	15	;volatile
 11754                           
 11755                           ;system.c: 93: OSCEN = 0x00;
 11756  000A  0191               	clrf	17	;volatile
 11757                           
 11758                           ;system.c: 94: OSCFRQ = 0x06;
 11759  000B  3006               	movlw	6
 11760  000C  0093               	movwf	19	;volatile
 11761                           
 11762                           ;system.c: 95: OSCTUNE = 0x00;
 11763  000D  0192               	clrf	18	;volatile
 11764  000E  0008               	return
 11765  000F                     __end_of_OSCILLATOR_Initialize:	
 11766                           
 11767                           	psect	text24
 11768  1430                     __ptext24:	
 11769 ;; *************** function _LCDInit *****************
 11770 ;; Defined at:
 11771 ;;		line 247 in file "lcd.c"
 11772 ;; Parameters:    Size  Location     Type
 11773 ;;		None
 11774 ;; Auto vars:     Size  Location     Type
 11775 ;;		None
 11776 ;; Return value:  Size  Location     Type
 11777 ;;                  1    wreg      void 
 11778 ;; Registers used:
 11779 ;;		wreg, status,2, status,0, pclath, cstack
 11780 ;; Tracked objects:
 11781 ;;		On entry : 0/0
 11782 ;;		On exit  : 0/0
 11783 ;;		Unchanged: 0/0
 11784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11787 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11788 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11789 ;;Total ram usage:        1 bytes
 11790 ;; Hardware stack levels used:    1
 11791 ;; Hardware stack levels required when called:    1
 11792 ;; This function calls:
 11793 ;;		_LCDWrite
 11794 ;; This function is called by:
 11795 ;;		_SYSTEM_Initialize
 11796 ;;		_main
 11797 ;; This function uses a non-reentrant model
 11798 ;;
 11799                           
 11800                           
 11801                           ;psect for function _LCDInit
 11802  1430                     _LCDInit:	
 11803                           
 11804                           ;lcd.c: 249: TRISAbits.TRISA0 = 0;
 11805                           
 11806                           ;incstack = 0
 11807                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
 11808  1430  0020               	movlb	0	; select bank0
 11809  1431  1011               	bcf	17,0	;volatile
 11810                           
 11811                           ;lcd.c: 250: TRISAbits.TRISA1 = 0;
 11812  1432  1091               	bcf	17,1	;volatile
 11813                           
 11814                           ;lcd.c: 251: TRISAbits.TRISA2 = 0;
 11815  1433  1111               	bcf	17,2	;volatile
 11816                           
 11817                           ;lcd.c: 252: TRISAbits.TRISA3 = 0;
 11818  1434  1191               	bcf	17,3	;volatile
 11819                           
 11820                           ;lcd.c: 253: TRISAbits.TRISA4 = 0;
 11821  1435  1211               	bcf	17,4	;volatile
 11822                           
 11823                           ;lcd.c: 254: LATAbits.LATA3 = 0;
 11824  1436  1196               	bcf	22,3	;volatile
 11825                           
 11826                           ;lcd.c: 255: LATAbits.LATA4 = 0;
 11827  1437  1216               	bcf	22,4	;volatile
 11828                           
 11829                           ;lcd.c: 256: LATAbits.LATA2 = 0;
 11830  1438  1116               	bcf	22,2	;volatile
 11831                           
 11832                           ;lcd.c: 257: LATAbits.LATA0 = 0;
 11833  1439  1016               	bcf	22,0	;volatile
 11834                           
 11835                           ;lcd.c: 259: LATAbits.LATA0 = 1;
 11836  143A  1416               	bsf	22,0	;volatile
 11837                           
 11838                           ;lcd.c: 261: LCDWrite(0, 0x21);
 11839  143B  3021               	movlw	33
 11840  143C  00F5               	movwf	??_LCDInit
 11841  143D  0875               	movf	??_LCDInit,w
 11842  143E  00F0               	movwf	LCDWrite@data
 11843  143F  3000               	movlw	0
 11844  1440  3193  23AE  3194   	fcall	_LCDWrite
 11845                           
 11846                           ;lcd.c: 269: LCDWrite(0, 0XB9);
 11847  1443  30B9               	movlw	185
 11848  1444  00F5               	movwf	??_LCDInit
 11849  1445  0875               	movf	??_LCDInit,w
 11850  1446  00F0               	movwf	LCDWrite@data
 11851  1447  3000               	movlw	0
 11852  1448  3193  23AE  3194   	fcall	_LCDWrite
 11853                           
 11854                           ;lcd.c: 271: LCDWrite(0, 0x04);
 11855  144B  3004               	movlw	4
 11856  144C  00F5               	movwf	??_LCDInit
 11857  144D  0875               	movf	??_LCDInit,w
 11858  144E  00F0               	movwf	LCDWrite@data
 11859  144F  3000               	movlw	0
 11860  1450  3193  23AE  3194   	fcall	_LCDWrite
 11861                           
 11862                           ;lcd.c: 273: LCDWrite(0, 0x14);
 11863  1453  3014               	movlw	20
 11864  1454  00F5               	movwf	??_LCDInit
 11865  1455  0875               	movf	??_LCDInit,w
 11866  1456  00F0               	movwf	LCDWrite@data
 11867  1457  3000               	movlw	0
 11868  1458  3193  23AE  3194   	fcall	_LCDWrite
 11869                           
 11870                           ;lcd.c: 275: LCDWrite(0, 0x20);
 11871  145B  3020               	movlw	32
 11872  145C  00F5               	movwf	??_LCDInit
 11873  145D  0875               	movf	??_LCDInit,w
 11874  145E  00F0               	movwf	LCDWrite@data
 11875  145F  3000               	movlw	0
 11876  1460  3193  23AE  3194   	fcall	_LCDWrite
 11877                           
 11878                           ;lcd.c: 277: LCDWrite(0, 0x0C);
 11879  1463  300C               	movlw	12
 11880  1464  00F5               	movwf	??_LCDInit
 11881  1465  0875               	movf	??_LCDInit,w
 11882  1466  00F0               	movwf	LCDWrite@data
 11883  1467  3000               	movlw	0
 11884  1468  3193  23AE         	fcall	_LCDWrite
 11885  146A  0008               	return
 11886  146B                     __end_of_LCDInit:	
 11887                           
 11888                           	psect	text25
 11889  13D3                     __ptext25:	
 11890 ;; *************** function _LCDClear *****************
 11891 ;; Defined at:
 11892 ;;		line 182 in file "lcd.c"
 11893 ;; Parameters:    Size  Location     Type
 11894 ;;		None
 11895 ;; Auto vars:     Size  Location     Type
 11896 ;;  index           2    9[COMMON] int 
 11897 ;; Return value:  Size  Location     Type
 11898 ;;                  1    wreg      void 
 11899 ;; Registers used:
 11900 ;;		wreg, status,2, status,0, pclath, cstack
 11901 ;; Tracked objects:
 11902 ;;		On entry : 0/0
 11903 ;;		On exit  : 0/0
 11904 ;;		Unchanged: 0/0
 11905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11907 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11908 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11909 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11910 ;;Total ram usage:        3 bytes
 11911 ;; Hardware stack levels used:    1
 11912 ;; Hardware stack levels required when called:    2
 11913 ;; This function calls:
 11914 ;;		_LCDWrite
 11915 ;;		_gotoXY
 11916 ;; This function is called by:
 11917 ;;		_SYSTEM_Initialize
 11918 ;;		_main
 11919 ;; This function uses a non-reentrant model
 11920 ;;
 11921                           
 11922                           
 11923                           ;psect for function _LCDClear
 11924  13D3                     _LCDClear:	
 11925                           
 11926                           ;lcd.c: 184: int index;
 11927                           ;lcd.c: 185: for (index = 0 ; index < (84 * 48 / 8) ; index++)
 11928                           
 11929                           ;incstack = 0
 11930                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
 11931  13D3  01F9               	clrf	LCDClear@index
 11932  13D4  01FA               	clrf	LCDClear@index+1
 11933  13D5  087A               	movf	LCDClear@index+1,w
 11934  13D6  3A80               	xorlw	128
 11935  13D7  00F8               	movwf	??_LCDClear
 11936  13D8  3081               	movlw	129
 11937  13D9  0278               	subwf	??_LCDClear,w
 11938  13DA  1D03               	skipz
 11939  13DB  2BDE               	goto	u2725
 11940  13DC  30F8               	movlw	248
 11941  13DD  0279               	subwf	LCDClear@index,w
 11942  13DE                     u2725:	
 11943  13DE  1803               	btfsc	3,0
 11944  13DF  2BF4               	goto	l2591
 11945  13E0                     l2585:	
 11946                           
 11947                           ;lcd.c: 186: LCDWrite(1, 0x00);
 11948  13E0  01F0               	clrf	LCDWrite@data
 11949  13E1  3001               	movlw	1
 11950  13E2  3193  23AE  3193   	fcall	_LCDWrite
 11951  13E5  3001               	movlw	1
 11952  13E6  07F9               	addwf	LCDClear@index,f
 11953  13E7  3000               	movlw	0
 11954  13E8  3DFA               	addwfc	LCDClear@index+1,f
 11955  13E9  087A               	movf	LCDClear@index+1,w
 11956  13EA  3A80               	xorlw	128
 11957  13EB  00F8               	movwf	??_LCDClear
 11958  13EC  3081               	movlw	129
 11959  13ED  0278               	subwf	??_LCDClear,w
 11960  13EE  1D03               	skipz
 11961  13EF  2BF2               	goto	u2735
 11962  13F0  30F8               	movlw	248
 11963  13F1  0279               	subwf	LCDClear@index,w
 11964  13F2                     u2735:	
 11965  13F2  1C03               	skipc
 11966  13F3  2BE0               	goto	l2585
 11967  13F4                     l2591:	
 11968                           
 11969                           ;lcd.c: 187: gotoXY(0, 0);
 11970  13F4  01F5               	clrf	gotoXY@y
 11971  13F5  3000               	movlw	0
 11972  13F6  3192  22B9         	fcall	_gotoXY
 11973  13F8  0008               	return
 11974  13F9                     __end_of_LCDClear:	
 11975                           
 11976                           	psect	text26
 11977  12B9                     __ptext26:	
 11978 ;; *************** function _gotoXY *****************
 11979 ;; Defined at:
 11980 ;;		line 124 in file "lcd.c"
 11981 ;; Parameters:    Size  Location     Type
 11982 ;;  x               1    wreg     unsigned char 
 11983 ;;  y               1    5[COMMON] unsigned char 
 11984 ;; Auto vars:     Size  Location     Type
 11985 ;;  x               1    7[COMMON] unsigned char 
 11986 ;; Return value:  Size  Location     Type
 11987 ;;                  1    wreg      void 
 11988 ;; Registers used:
 11989 ;;		wreg, status,2, status,0, pclath, cstack
 11990 ;; Tracked objects:
 11991 ;;		On entry : 0/0
 11992 ;;		On exit  : 0/0
 11993 ;;		Unchanged: 0/0
 11994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11995 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11996 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11997 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11998 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11999 ;;Total ram usage:        3 bytes
 12000 ;; Hardware stack levels used:    1
 12001 ;; Hardware stack levels required when called:    1
 12002 ;; This function calls:
 12003 ;;		_LCDWrite
 12004 ;; This function is called by:
 12005 ;;		_LCDClear
 12006 ;;		_main
 12007 ;; This function uses a non-reentrant model
 12008 ;;
 12009                           
 12010                           
 12011                           ;psect for function _gotoXY
 12012  12B9                     _gotoXY:	
 12013                           
 12014                           ;incstack = 0
 12015                           ; Regs used in _gotoXY: [wreg+status,2+status,0+pclath+cstack]
 12016                           ;gotoXY@x stored from wreg
 12017  12B9  00F7               	movwf	gotoXY@x
 12018                           
 12019                           ;lcd.c: 126: LCDWrite(0,(uint8_t)(0x80 | x));
 12020  12BA  0877               	movf	gotoXY@x,w
 12021  12BB  3880               	iorlw	128
 12022  12BC  00F6               	movwf	??_gotoXY
 12023  12BD  0876               	movf	??_gotoXY,w
 12024  12BE  00F0               	movwf	LCDWrite@data
 12025  12BF  3000               	movlw	0
 12026  12C0  3193  23AE  3192   	fcall	_LCDWrite
 12027                           
 12028                           ;lcd.c: 127: LCDWrite(0,(uint8_t)(0x40 | y));
 12029  12C3  0875               	movf	gotoXY@y,w
 12030  12C4  3840               	iorlw	64
 12031  12C5  00F6               	movwf	??_gotoXY
 12032  12C6  0876               	movf	??_gotoXY,w
 12033  12C7  00F0               	movwf	LCDWrite@data
 12034  12C8  3000               	movlw	0
 12035  12C9  3193  23AE         	fcall	_LCDWrite
 12036  12CB  0008               	return
 12037  12CC                     __end_of_gotoXY:	
 12038                           
 12039                           	psect	text27
 12040  1799                     __ptext27:	
 12041 ;; *************** function _Init_Battery_State_Machine *****************
 12042 ;; Defined at:
 12043 ;;		line 20 in file "battery_charger.c"
 12044 ;; Parameters:    Size  Location     Type
 12045 ;;  z               1    wreg     unsigned char 
 12046 ;; Auto vars:     Size  Location     Type
 12047 ;;  z               1   34[BANK0 ] unsigned char 
 12048 ;; Return value:  Size  Location     Type
 12049 ;;                  1    wreg      void 
 12050 ;; Registers used:
 12051 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12052 ;; Tracked objects:
 12053 ;;		On entry : 0/0
 12054 ;;		On exit  : 0/0
 12055 ;;		Unchanged: 0/0
 12056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12058 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12059 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12060 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12061 ;;Total ram usage:        5 bytes
 12062 ;; Hardware stack levels used:    1
 12063 ;; Hardware stack levels required when called:    2
 12064 ;; This function calls:
 12065 ;;		___awtoft
 12066 ;;		___ftmul
 12067 ;;		___fttol
 12068 ;; This function is called by:
 12069 ;;		_SYSTEM_Initialize
 12070 ;; This function uses a non-reentrant model
 12071 ;;
 12072                           
 12073                           
 12074                           ;psect for function _Init_Battery_State_Machine
 12075  1799                     _Init_Battery_State_Machine:	
 12076                           
 12077                           ;incstack = 0
 12078                           ; Regs used in _Init_Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12079                           ;Init_Battery_State_Machine@z stored from wreg
 12080  1799  0020               	movlb	0	; select bank0
 12081  179A  00C2               	movwf	Init_Battery_State_Machine@z
 12082                           
 12083                           ;battery_charger.c: 22: batteryState[z] =PRECHARGE;
 12084  179B  3003               	movlw	3
 12085  179C  00BE               	movwf	??_Init_Battery_State_Machine
 12086  179D  0842               	movf	Init_Battery_State_Machine@z,w
 12087  179E  3EE2               	addlw	(low (_batteryState| 0))& (0+255)
 12088  179F  0086               	movwf	6
 12089  17A0  0187               	clrf	7
 12090  17A1  083E               	movf	??_Init_Battery_State_Machine,w
 12091  17A2  0081               	movwf	1
 12092                           
 12093                           ;battery_charger.c: 23: stateCounter[z] =5;
 12094  17A3  3542               	lslf	Init_Battery_State_Machine@z,w
 12095  17A4  3EC4               	addlw	(low (_stateCounter| 0))& (0+255)
 12096  17A5  0086               	movwf	6
 12097  17A6  0187               	clrf	7
 12098  17A7  3005               	movlw	5
 12099  17A8  3FC0               	movwi [0]fsr1
 12100  17A9  3000               	movlw	0
 12101  17AA  3FC1               	movwi [1]fsr1
 12102                           
 12103                           ;battery_charger.c: 24: Iref[z] =10;
 12104  17AB  3542               	lslf	Init_Battery_State_Machine@z,w
 12105  17AC  3EC8               	addlw	(low (_Iref| 0))& (0+255)
 12106  17AD  0086               	movwf	6
 12107  17AE  0187               	clrf	7
 12108  17AF  300A               	movlw	10
 12109  17B0  3FC0               	movwi [0]fsr1
 12110  17B1  3000               	movlw	0
 12111  17B2  3FC1               	movwi [1]fsr1
 12112                           
 12113                           ;battery_charger.c: 25: Vref[z] =1425+(int16_t)((250-batteryTemp)*.24);
 12114  17B3  0021               	movlb	1	; select bank1
 12115  17B4  096B               	comf	_batteryTemp^(0+128),w
 12116  17B5  0020               	movlb	0	; select bank0
 12117  17B6  00BE               	movwf	??_Init_Battery_State_Machine
 12118  17B7  0021               	movlb	1	; select bank1
 12119  17B8  096C               	comf	(_batteryTemp+1)^(0+128),w
 12120  17B9  0020               	movlb	0	; select bank0
 12121  17BA  00BF               	movwf	??_Init_Battery_State_Machine+1
 12122  17BB  0ABE               	incf	??_Init_Battery_State_Machine,f
 12123  17BC  1903               	skipnz
 12124  17BD  0ABF               	incf	??_Init_Battery_State_Machine+1,f
 12125  17BE  083E               	movf	??_Init_Battery_State_Machine,w
 12126  17BF  3EFA               	addlw	250
 12127  17C0  00F8               	movwf	___awtoft@c
 12128  17C1  3000               	movlw	0
 12129  17C2  3D3F               	addwfc	??_Init_Battery_State_Machine+1,w
 12130  17C3  00F9               	movwf	___awtoft@c+1
 12131  17C4  3193  238E  3197   	fcall	___awtoft
 12132  17C7  0878               	movf	?___awtoft,w
 12133  17C8  0020               	movlb	0	; select bank0
 12134  17C9  00A3               	movwf	___ftmul@f2
 12135  17CA  0879               	movf	?___awtoft+1,w
 12136  17CB  00A4               	movwf	___ftmul@f2+1
 12137  17CC  087A               	movf	?___awtoft+2,w
 12138  17CD  00A5               	movwf	___ftmul@f2+2
 12139  17CE  30C3               	movlw	195
 12140  17CF  00A0               	movwf	___ftmul@f1
 12141  17D0  3075               	movlw	117
 12142  17D1  00A1               	movwf	___ftmul@f1+1
 12143  17D2  303E               	movlw	62
 12144  17D3  00A2               	movwf	___ftmul@f1+2
 12145  17D4  318B  2319  3197   	fcall	___ftmul
 12146  17D7  0020               	movlb	0	; select bank0
 12147  17D8  0820               	movf	?___ftmul,w
 12148  17D9  00B0               	movwf	___fttol@f1
 12149  17DA  0821               	movf	?___ftmul+1,w
 12150  17DB  00B1               	movwf	___fttol@f1+1
 12151  17DC  0822               	movf	?___ftmul+2,w
 12152  17DD  00B2               	movwf	___fttol@f1+2
 12153  17DE  3189  2139         	fcall	___fttol
 12154  17E0  0020               	movlb	0	; select bank0
 12155  17E1  0830               	movf	?___fttol,w
 12156  17E2  3E91               	addlw	145
 12157  17E3  00C0               	movwf	??_Init_Battery_State_Machine+2
 12158  17E4  3005               	movlw	5
 12159  17E5  3D31               	addwfc	?___fttol+1,w
 12160  17E6  00C1               	movwf	??_Init_Battery_State_Machine+3
 12161  17E7  3542               	lslf	Init_Battery_State_Machine@z,w
 12162  17E8  3EC0               	addlw	(low (_Vref| 0))& (0+255)
 12163  17E9  0086               	movwf	6
 12164  17EA  0187               	clrf	7
 12165  17EB  0840               	movf	??_Init_Battery_State_Machine+2,w
 12166  17EC  3FC0               	movwi [0]fsr1
 12167  17ED  0841               	movf	??_Init_Battery_State_Machine+3,w
 12168  17EE  3FC1               	movwi [1]fsr1
 12169                           
 12170                           ;battery_charger.c: 26: Imin[z] =15;
 12171  17EF  3542               	lslf	Init_Battery_State_Machine@z,w
 12172  17F0  3ED0               	addlw	(low (_Imin| 0))& (0+255)
 12173  17F1  0086               	movwf	6
 12174  17F2  0187               	clrf	7
 12175  17F3  300F               	movlw	15
 12176  17F4  3FC0               	movwi [0]fsr1
 12177  17F5  3000               	movlw	0
 12178  17F6  3FC1               	movwi [1]fsr1
 12179                           
 12180                           ;battery_charger.c: 27: IminCount[z] = 600;
 12181  17F7  3542               	lslf	Init_Battery_State_Machine@z,w
 12182  17F8  3ECC               	addlw	(low (_IminCount| 0))& (0+255)
 12183  17F9  0086               	movwf	6
 12184  17FA  0187               	clrf	7
 12185  17FB  3058               	movlw	88
 12186  17FC  3FC0               	movwi [0]fsr1
 12187  17FD  3002               	movlw	2
 12188  17FE  3FC1               	movwi [1]fsr1
 12189  17FF  0008               	return
 12190  1800                     __end_of_Init_Battery_State_Machine:	
 12191                           
 12192                           	psect	text28
 12193  136F                     __ptext28:	
 12194 ;; *************** function _ADC_Initialize *****************
 12195 ;; Defined at:
 12196 ;;		line 111 in file "adc.c"
 12197 ;; Parameters:    Size  Location     Type
 12198 ;;		None
 12199 ;; Auto vars:     Size  Location     Type
 12200 ;;		None
 12201 ;; Return value:  Size  Location     Type
 12202 ;;                  1    wreg      void 
 12203 ;; Registers used:
 12204 ;;		wreg, status,2
 12205 ;; Tracked objects:
 12206 ;;		On entry : 0/0
 12207 ;;		On exit  : 0/0
 12208 ;;		Unchanged: 0/0
 12209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12214 ;;Total ram usage:        0 bytes
 12215 ;; Hardware stack levels used:    1
 12216 ;; This function calls:
 12217 ;;		Nothing
 12218 ;; This function is called by:
 12219 ;;		_SYSTEM_Initialize
 12220 ;; This function uses a non-reentrant model
 12221 ;;
 12222                           
 12223                           
 12224                           ;psect for function _ADC_Initialize
 12225  136F                     _ADC_Initialize:	
 12226                           
 12227                           ;adc.c: 113: ADCON1 = 0x00;
 12228                           
 12229                           ;incstack = 0
 12230                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 12231  136F  0021               	movlb	1	; select bank1
 12232  1370  0194               	clrf	20	;volatile
 12233                           
 12234                           ;adc.c: 115: ADCON2 = 0x00;
 12235  1371  0195               	clrf	21	;volatile
 12236                           
 12237                           ;adc.c: 117: ADCON3 = 0x00;
 12238  1372  0196               	clrf	22	;volatile
 12239                           
 12240                           ;adc.c: 119: ADACT = 0x00;
 12241  1373  0199               	clrf	25	;volatile
 12242                           
 12243                           ;adc.c: 121: ADSTAT = 0x00;
 12244  1374  0197               	clrf	23	;volatile
 12245                           
 12246                           ;adc.c: 123: FVRCON = 0b11000011;
 12247  1375  30C3               	movlw	195
 12248  1376  0032               	movlb	18	; select bank18
 12249  1377  008C               	movwf	12	;volatile
 12250                           
 12251                           ;adc.c: 124: ADCLK = 0x3F;
 12252  1378  303F               	movlw	63
 12253  1379  0021               	movlb	1	; select bank1
 12254  137A  0098               	movwf	24	;volatile
 12255                           
 12256                           ;adc.c: 131: ADREF = 0x03;
 12257  137B  3003               	movlw	3
 12258  137C  009A               	movwf	26	;volatile
 12259                           
 12260                           ;adc.c: 134: ADCAP = 0x00;
 12261  137D  019B               	clrf	27	;volatile
 12262                           
 12263                           ;adc.c: 137: ADPRE = 0x07;
 12264  137E  3007               	movlw	7
 12265  137F  009C               	movwf	28	;volatile
 12266                           
 12267                           ;adc.c: 139: ADACQ = 0x00;
 12268  1380  019D               	clrf	29	;volatile
 12269                           
 12270                           ;adc.c: 141: ADPCH = 0x00;
 12271  1381  019E               	clrf	30	;volatile
 12272                           
 12273                           ;adc.c: 143: ADRPT = 0x00;
 12274  1382  0022               	movlb	2	; select bank2
 12275  1383  018D               	clrf	13	;volatile
 12276                           
 12277                           ;adc.c: 145: ADLTHL = 0x00;
 12278  1384  018E               	clrf	14	;volatile
 12279                           
 12280                           ;adc.c: 147: ADLTHH = 0x00;
 12281  1385  018F               	clrf	15	;volatile
 12282                           
 12283                           ;adc.c: 149: ADUTHL = 0x00;
 12284  1386  0190               	clrf	16	;volatile
 12285                           
 12286                           ;adc.c: 151: ADUTHH = 0x00;
 12287  1387  0191               	clrf	17	;volatile
 12288                           
 12289                           ;adc.c: 153: ADSTPTL = 0x00;
 12290  1388  0192               	clrf	18	;volatile
 12291                           
 12292                           ;adc.c: 155: ADSTPTH = 0x00;
 12293  1389  0193               	clrf	19	;volatile
 12294                           
 12295                           ;adc.c: 157: ADCON0 = 0x84;
 12296  138A  3084               	movlw	132
 12297  138B  0021               	movlb	1	; select bank1
 12298  138C  0093               	movwf	19	;volatile
 12299  138D  0008               	return
 12300  138E                     __end_of_ADC_Initialize:	
 12301                           
 12302                           	psect	text29
 12303  1320                     __ptext29:	
 12304 ;; *************** function _PWM7_LoadDutyValue *****************
 12305 ;; Defined at:
 12306 ;;		line 37 in file "pwm.c"
 12307 ;; Parameters:    Size  Location     Type
 12308 ;;  dutyCycle7      2    0[COMMON] unsigned int 
 12309 ;; Auto vars:     Size  Location     Type
 12310 ;;		None
 12311 ;; Return value:  Size  Location     Type
 12312 ;;                  1    wreg      void 
 12313 ;; Registers used:
 12314 ;;		wreg, status,2, status,0
 12315 ;; Tracked objects:
 12316 ;;		On entry : 0/0
 12317 ;;		On exit  : 0/0
 12318 ;;		Unchanged: 0/0
 12319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12320 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12322 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12323 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12324 ;;Total ram usage:        4 bytes
 12325 ;; Hardware stack levels used:    1
 12326 ;; This function calls:
 12327 ;;		Nothing
 12328 ;; This function is called by:
 12329 ;;		_main
 12330 ;; This function uses a non-reentrant model
 12331 ;;
 12332                           
 12333                           
 12334                           ;psect for function _PWM7_LoadDutyValue
 12335  1320                     _PWM7_LoadDutyValue:	
 12336                           
 12337                           ;pwm.c: 39: PWM7DCH = (dutyCycle7 & 0x03FC)>>2;
 12338                           
 12339                           ;incstack = 0
 12340                           ; Regs used in _PWM7_LoadDutyValue: [wreg+status,2+status,0]
 12341  1320  0871               	movf	PWM7_LoadDutyValue@dutyCycle7+1,w
 12342  1321  00F3               	movwf	??_PWM7_LoadDutyValue+1
 12343  1322  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 12344  1323  00F2               	movwf	??_PWM7_LoadDutyValue
 12345  1324  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 12346  1325  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 12347  1326  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 12348  1327  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 12349  1328  0872               	movf	??_PWM7_LoadDutyValue,w
 12350  1329  0027               	movlb	7	; select bank7
 12351  132A  0091               	movwf	17	;volatile
 12352                           
 12353                           ;pwm.c: 41: PWM7DCL = (dutyCycle7 & 0x0003)<<6;
 12354  132B  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 12355  132C  3903               	andlw	3
 12356  132D  00F2               	movwf	??_PWM7_LoadDutyValue
 12357  132E  3005               	movlw	5
 12358  132F                     u3635:	
 12359  132F  35F2               	lslf	??_PWM7_LoadDutyValue,f
 12360  1330  3EFF               	addlw	-1
 12361  1331  1D03               	skipz
 12362  1332  2B2F               	goto	u3635
 12363  1333  3572               	lslf	??_PWM7_LoadDutyValue,w
 12364  1334  0090               	movwf	16	;volatile
 12365  1335  0008               	return
 12366  1336                     __end_of_PWM7_LoadDutyValue:	
 12367                           
 12368                           	psect	text30
 12369  130A                     __ptext30:	
 12370 ;; *************** function _PWM6_LoadDutyValue *****************
 12371 ;; Defined at:
 12372 ;;		line 30 in file "pwm.c"
 12373 ;; Parameters:    Size  Location     Type
 12374 ;;  dutyCycle6      2    0[COMMON] unsigned int 
 12375 ;; Auto vars:     Size  Location     Type
 12376 ;;		None
 12377 ;; Return value:  Size  Location     Type
 12378 ;;                  1    wreg      void 
 12379 ;; Registers used:
 12380 ;;		wreg, status,2, status,0
 12381 ;; Tracked objects:
 12382 ;;		On entry : 0/0
 12383 ;;		On exit  : 0/0
 12384 ;;		Unchanged: 0/0
 12385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12386 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12388 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12389 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12390 ;;Total ram usage:        4 bytes
 12391 ;; Hardware stack levels used:    1
 12392 ;; This function calls:
 12393 ;;		Nothing
 12394 ;; This function is called by:
 12395 ;;		_main
 12396 ;; This function uses a non-reentrant model
 12397 ;;
 12398                           
 12399                           
 12400                           ;psect for function _PWM6_LoadDutyValue
 12401  130A                     _PWM6_LoadDutyValue:	
 12402                           
 12403                           ;pwm.c: 32: PWM6DCH = (dutyCycle6 & 0x03FC)>>2;
 12404                           
 12405                           ;incstack = 0
 12406                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 12407  130A  0871               	movf	PWM6_LoadDutyValue@dutyCycle6+1,w
 12408  130B  00F3               	movwf	??_PWM6_LoadDutyValue+1
 12409  130C  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 12410  130D  00F2               	movwf	??_PWM6_LoadDutyValue
 12411  130E  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 12412  130F  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 12413  1310  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 12414  1311  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 12415  1312  0872               	movf	??_PWM6_LoadDutyValue,w
 12416  1313  0027               	movlb	7	; select bank7
 12417  1314  008D               	movwf	13	;volatile
 12418                           
 12419                           ;pwm.c: 34: PWM6DCL = (dutyCycle6 & 0x0003)<<6;
 12420  1315  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 12421  1316  3903               	andlw	3
 12422  1317  00F2               	movwf	??_PWM6_LoadDutyValue
 12423  1318  3005               	movlw	5
 12424  1319                     u3625:	
 12425  1319  35F2               	lslf	??_PWM6_LoadDutyValue,f
 12426  131A  3EFF               	addlw	-1
 12427  131B  1D03               	skipz
 12428  131C  2B19               	goto	u3625
 12429  131D  3572               	lslf	??_PWM6_LoadDutyValue,w
 12430  131E  008C               	movwf	12	;volatile
 12431  131F  0008               	return
 12432  1320                     __end_of_PWM6_LoadDutyValue:	
 12433                           
 12434                           	psect	text31
 12435  12CC                     __ptext31:	
 12436 ;; *************** function _LCDWriteString *****************
 12437 ;; Defined at:
 12438 ;;		line 176 in file "lcd.c"
 12439 ;; Parameters:    Size  Location     Type
 12440 ;;  characters      2   12[COMMON] PTR const unsigned char 
 12441 ;;		 -> STR_3(5), STR_2(5), STR_1(4), 
 12442 ;; Auto vars:     Size  Location     Type
 12443 ;;		None
 12444 ;; Return value:  Size  Location     Type
 12445 ;;                  1    wreg      void 
 12446 ;; Registers used:
 12447 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12448 ;; Tracked objects:
 12449 ;;		On entry : 0/0
 12450 ;;		On exit  : 0/0
 12451 ;;		Unchanged: 0/0
 12452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12453 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12455 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12456 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12457 ;;Total ram usage:        3 bytes
 12458 ;; Hardware stack levels used:    1
 12459 ;; Hardware stack levels required when called:    2
 12460 ;; This function calls:
 12461 ;;		_LCDWriteCharacter
 12462 ;; This function is called by:
 12463 ;;		_main
 12464 ;; This function uses a non-reentrant model
 12465 ;;
 12466                           
 12467                           
 12468                           ;psect for function _LCDWriteString
 12469  12CC                     _LCDWriteString:	
 12470  12CC                     l3019:	
 12471                           ;lcd.c: 178: while (*characters)
 12472                           
 12473                           ;incstack = 0
 12474                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12475                           
 12476  12CC  087C               	movf	LCDWriteString@characters,w
 12477  12CD  0084               	movwf	4
 12478  12CE  087D               	movf	LCDWriteString@characters+1,w
 12479  12CF  0085               	movwf	5
 12480  12D0  0012               	moviw fsr0++
 12481  12D1  1903               	btfsc	3,2
 12482  12D2  0008               	return
 12483                           
 12484                           ;lcd.c: 179: LCDWriteCharacter(*characters++);
 12485  12D3  087C               	movf	LCDWriteString@characters,w
 12486  12D4  0084               	movwf	4
 12487  12D5  087D               	movf	LCDWriteString@characters+1,w
 12488  12D6  0085               	movwf	5
 12489  12D7  0800               	movf	0,w	;code access
 12490  12D8  3196  2681  3192   	fcall	_LCDWriteCharacter
 12491  12DB  3001               	movlw	1
 12492  12DC  07FC               	addwf	LCDWriteString@characters,f
 12493  12DD  3000               	movlw	0
 12494  12DE  3DFD               	addwfc	LCDWriteString@characters+1,f
 12495  12DF  2ACC               	goto	l3019
 12496  12E0                     __end_of_LCDWriteString:	
 12497                           
 12498                           	psect	text32
 12499  0BCD                     __ptext32:	
 12500 ;; *************** function _LCDWriteInt *****************
 12501 ;; Defined at:
 12502 ;;		line 190 in file "lcd.c"
 12503 ;; Parameters:    Size  Location     Type
 12504 ;;  value           2    0[BANK0 ] int 
 12505 ;;  fieldLength     1    2[BANK0 ] char 
 12506 ;;  numPlaces       1    3[BANK0 ] unsigned char 
 12507 ;;  sign            1    4[BANK0 ] unsigned char 
 12508 ;; Auto vars:     Size  Location     Type
 12509 ;;  str             5    9[BANK0 ] unsigned char [5]
 12510 ;;  i               1   15[BANK0 ] unsigned char 
 12511 ;;  j               1   14[BANK0 ] unsigned char 
 12512 ;; Return value:  Size  Location     Type
 12513 ;;                  1    wreg      void 
 12514 ;; Registers used:
 12515 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12516 ;; Tracked objects:
 12517 ;;		On entry : 0/0
 12518 ;;		On exit  : 0/0
 12519 ;;		Unchanged: 0/0
 12520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12521 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12522 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12523 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12524 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12525 ;;Total ram usage:       16 bytes
 12526 ;; Hardware stack levels used:    1
 12527 ;; Hardware stack levels required when called:    2
 12528 ;; This function calls:
 12529 ;;		_LCDWriteCharacter
 12530 ;;		___awdiv
 12531 ;;		___lwmod
 12532 ;; This function is called by:
 12533 ;;		_main
 12534 ;; This function uses a non-reentrant model
 12535 ;;
 12536                           
 12537                           
 12538                           ;psect for function _LCDWriteInt
 12539  0BCD                     _LCDWriteInt:	
 12540                           
 12541                           ;lcd.c: 192: uint8_t str[5]={0,0,0,0,0};
 12542                           
 12543                           ;incstack = 0
 12544                           ; Regs used in _LCDWriteInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12545  0BCD  3030               	movlw	low LCDWriteInt@F14388
 12546  0BCE  0086               	movwf	6
 12547  0BCF  3001               	movlw	high LCDWriteInt@F14388
 12548  0BD0  0087               	movwf	7
 12549  0BD1  3029               	movlw	low LCDWriteInt@str
 12550  0BD2  0084               	movwf	4
 12551  0BD3  3000               	movlw	high LCDWriteInt@str
 12552  0BD4  0085               	movwf	5
 12553  0BD5  3005               	movlw	5
 12554  0BD6  0020               	movlb	0	; select bank0
 12555  0BD7  00A5               	movwf	??_LCDWriteInt
 12556  0BD8                     u3530:	
 12557  0BD8  0016               	moviw fsr1++
 12558  0BD9  001A               	movwi fsr0++
 12559  0BDA  0BA5               	decfsz	??_LCDWriteInt,f
 12560  0BDB  2BD8               	goto	u3530
 12561                           
 12562                           ;lcd.c: 193: uint8_t i=4,j=0;
 12563  0BDC  3004               	movlw	4
 12564  0BDD  00A5               	movwf	??_LCDWriteInt
 12565  0BDE  0825               	movf	??_LCDWriteInt,w
 12566  0BDF  00AF               	movwf	LCDWriteInt@i
 12567  0BE0  01AE               	clrf	LCDWriteInt@j
 12568                           
 12569                           ;lcd.c: 195: if(value<0)
 12570  0BE1  1FA1               	btfss	LCDWriteInt@value+1,7
 12571  0BE2  2BEE               	goto	l3033
 12572                           
 12573                           ;lcd.c: 196: {
 12574                           ;lcd.c: 197: LCDWriteCharacter('-');
 12575  0BE3  302D               	movlw	45
 12576  0BE4  3196  2681  318B   	fcall	_LCDWriteCharacter
 12577                           
 12578                           ;lcd.c: 198: value=value*-1;
 12579  0BE7  0020               	movlb	0	; select bank0
 12580  0BE8  09A0               	comf	LCDWriteInt@value,f
 12581  0BE9  09A1               	comf	LCDWriteInt@value+1,f
 12582  0BEA  0AA0               	incf	LCDWriteInt@value,f
 12583  0BEB  1903               	skipnz
 12584  0BEC  0AA1               	incf	LCDWriteInt@value+1,f
 12585                           
 12586                           ;lcd.c: 199: }
 12587  0BED  2BF5               	goto	l3043
 12588  0BEE                     l3033:	
 12589                           
 12590                           ;lcd.c: 201: else
 12591                           ;lcd.c: 202: {
 12592                           ;lcd.c: 203: if(sign == 1)
 12593  0BEE  0324               	decf	LCDWriteInt@sign,w
 12594  0BEF  1D03               	btfss	3,2
 12595  0BF0  2BF5               	goto	l3043
 12596                           
 12597                           ;lcd.c: 204: {
 12598                           ;lcd.c: 205: LCDWriteCharacter('+');
 12599  0BF1  302B               	movlw	43
 12600  0BF2  3196  2681  318B   	fcall	_LCDWriteCharacter
 12601  0BF5                     l3043:	
 12602                           ;lcd.c: 206: }
 12603                           ;lcd.c: 207: }
 12604                           ;lcd.c: 209: while(value)
 12605                           
 12606  0BF5  0020               	movlb	0	; select bank0
 12607  0BF6  0820               	movf	LCDWriteInt@value,w
 12608  0BF7  0421               	iorwf	LCDWriteInt@value+1,w
 12609  0BF8  1903               	btfsc	3,2
 12610  0BF9  2C22               	goto	l3045
 12611                           
 12612                           ;lcd.c: 210: {
 12613                           ;lcd.c: 211: str[i]=(uint16_t)value%10;
 12614  0BFA  300A               	movlw	10
 12615  0BFB  00F0               	movwf	___lwmod@divisor
 12616  0BFC  3000               	movlw	0
 12617  0BFD  00F1               	movwf	___lwmod@divisor+1
 12618  0BFE  0020               	movlb	0	; select bank0
 12619  0BFF  0821               	movf	LCDWriteInt@value+1,w
 12620  0C00  00F3               	movwf	___lwmod@dividend+1
 12621  0C01  0820               	movf	LCDWriteInt@value,w
 12622  0C02  00F2               	movwf	___lwmod@dividend
 12623  0C03  3188  2009  318B   	fcall	___lwmod
 12624  0C06  0870               	movf	?___lwmod,w
 12625  0C07  0020               	movlb	0	; select bank0
 12626  0C08  00A5               	movwf	??_LCDWriteInt
 12627  0C09  082F               	movf	LCDWriteInt@i,w
 12628  0C0A  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 12629  0C0B  0086               	movwf	6
 12630  0C0C  0187               	clrf	7
 12631  0C0D  0825               	movf	??_LCDWriteInt,w
 12632  0C0E  0081               	movwf	1
 12633                           
 12634                           ;lcd.c: 212: value=value/10;
 12635  0C0F  300A               	movlw	10
 12636  0C10  00F0               	movwf	___awdiv@divisor
 12637  0C11  3000               	movlw	0
 12638  0C12  00F1               	movwf	___awdiv@divisor+1
 12639  0C13  0821               	movf	LCDWriteInt@value+1,w
 12640  0C14  00F3               	movwf	___awdiv@dividend+1
 12641  0C15  0820               	movf	LCDWriteInt@value,w
 12642  0C16  00F2               	movwf	___awdiv@dividend
 12643  0C17  3196  2630  318B   	fcall	___awdiv
 12644  0C1A  0871               	movf	?___awdiv+1,w
 12645  0C1B  0020               	movlb	0	; select bank0
 12646  0C1C  00A1               	movwf	LCDWriteInt@value+1
 12647  0C1D  0870               	movf	?___awdiv,w
 12648  0C1E  00A0               	movwf	LCDWriteInt@value
 12649                           
 12650                           ;lcd.c: 213: i--;
 12651  0C1F  3001               	movlw	1
 12652  0C20  02AF               	subwf	LCDWriteInt@i,f
 12653  0C21  2BF5               	goto	l3043
 12654  0C22                     l3045:	
 12655                           
 12656                           ;lcd.c: 214: }
 12657                           ;lcd.c: 215: if(fieldLength==-1)
 12658  0C22  0A22               	incf	LCDWriteInt@fieldLength,w
 12659  0C23  1903               	btfsc	3,2
 12660  0C24  2C2A               	goto	l3051
 12661  0C25  2C32               	goto	l3053
 12662  0C26                     l3049:	
 12663                           ;lcd.c: 216: {
 12664                           ;lcd.c: 217: while(str[j]==0)
 12665                           
 12666                           
 12667                           ;lcd.c: 218: {
 12668                           ;lcd.c: 219: j++;
 12669  0C26  3001               	movlw	1
 12670  0C27  00A5               	movwf	??_LCDWriteInt
 12671  0C28  0825               	movf	??_LCDWriteInt,w
 12672  0C29  07AE               	addwf	LCDWriteInt@j,f
 12673  0C2A                     l3051:	
 12674  0C2A  082E               	movf	LCDWriteInt@j,w
 12675  0C2B  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 12676  0C2C  0086               	movwf	6
 12677  0C2D  0187               	clrf	7
 12678  0C2E  0801               	movf	1,w
 12679  0C2F  1D03               	btfss	3,2
 12680  0C30  2C38               	goto	l3055
 12681  0C31  2C26               	goto	l3049
 12682  0C32                     l3053:	
 12683                           ;lcd.c: 220: }
 12684                           ;lcd.c: 221: }
 12685                           
 12686                           
 12687                           ;lcd.c: 222: else
 12688                           ;lcd.c: 223: {
 12689                           ;lcd.c: 224: j=(uint8_t)(5-fieldLength);
 12690  0C32  0322               	decf	LCDWriteInt@fieldLength,w
 12691  0C33  3AFF               	xorlw	255
 12692  0C34  3E05               	addlw	5
 12693  0C35  00A5               	movwf	??_LCDWriteInt
 12694  0C36  0825               	movf	??_LCDWriteInt,w
 12695  0C37  00AE               	movwf	LCDWriteInt@j
 12696  0C38                     l3055:	
 12697                           
 12698                           ;lcd.c: 225: }
 12699                           ;lcd.c: 227: for(i=j;i<(5-numPlaces);i++)
 12700  0C38  082E               	movf	LCDWriteInt@j,w
 12701  0C39  00A5               	movwf	??_LCDWriteInt
 12702  0C3A  0825               	movf	??_LCDWriteInt,w
 12703  0C3B  00AF               	movwf	LCDWriteInt@i
 12704  0C3C                     l3061:	
 12705  0C3C  0823               	movf	LCDWriteInt@numPlaces,w
 12706  0C3D  00A5               	movwf	??_LCDWriteInt
 12707  0C3E  01A6               	clrf	??_LCDWriteInt+1
 12708  0C3F  09A5               	comf	??_LCDWriteInt,f
 12709  0C40  09A6               	comf	??_LCDWriteInt+1,f
 12710  0C41  0AA5               	incf	??_LCDWriteInt,f
 12711  0C42  1903               	skipnz
 12712  0C43  0AA6               	incf	??_LCDWriteInt+1,f
 12713  0C44  0825               	movf	??_LCDWriteInt,w
 12714  0C45  3E05               	addlw	5
 12715  0C46  00A7               	movwf	??_LCDWriteInt+2
 12716  0C47  3000               	movlw	0
 12717  0C48  3D26               	addwfc	??_LCDWriteInt+1,w
 12718  0C49  00A8               	movwf	??_LCDWriteInt+3
 12719  0C4A  0828               	movf	??_LCDWriteInt+3,w
 12720  0C4B  3A80               	xorlw	128
 12721  0C4C  3C80               	sublw	128
 12722  0C4D  1D03               	skipz
 12723  0C4E  2C51               	goto	u3595
 12724  0C4F  0827               	movf	??_LCDWriteInt+2,w
 12725  0C50  022F               	subwf	LCDWriteInt@i,w
 12726  0C51                     u3595:	
 12727  0C51  1803               	btfsc	3,0
 12728  0C52  2C63               	goto	l3063
 12729                           
 12730                           ;lcd.c: 228: {
 12731                           ;lcd.c: 229: LCDWriteCharacter((uint8_t)(48+str[i]));
 12732  0C53  0020               	movlb	0	; select bank0
 12733  0C54  082F               	movf	LCDWriteInt@i,w
 12734  0C55  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 12735  0C56  0086               	movwf	6
 12736  0C57  0187               	clrf	7
 12737  0C58  0801               	movf	1,w
 12738  0C59  3E30               	addlw	48
 12739  0C5A  3196  2681  318B   	fcall	_LCDWriteCharacter
 12740  0C5D  3001               	movlw	1
 12741  0C5E  0020               	movlb	0	; select bank0
 12742  0C5F  00A5               	movwf	??_LCDWriteInt
 12743  0C60  0825               	movf	??_LCDWriteInt,w
 12744  0C61  07AF               	addwf	LCDWriteInt@i,f
 12745  0C62  2C3C               	goto	l3061
 12746  0C63                     l3063:	
 12747                           
 12748                           ;lcd.c: 230: }
 12749                           ;lcd.c: 232: if(numPlaces == 1)
 12750  0C63  0020               	movlb	0	; select bank0
 12751  0C64  0323               	decf	LCDWriteInt@numPlaces,w
 12752  0C65  1D03               	btfss	3,2
 12753  0C66  2C71               	goto	l3067
 12754                           
 12755                           ;lcd.c: 233: {
 12756                           ;lcd.c: 234: LCDWriteCharacter(46);
 12757  0C67  302E               	movlw	46
 12758  0C68  3196  2681  318B   	fcall	_LCDWriteCharacter
 12759                           
 12760                           ;lcd.c: 235: LCDWriteCharacter ((uint8_t)(48+str[4]));
 12761  0C6B  0020               	movlb	0	; select bank0
 12762  0C6C  082D               	movf	LCDWriteInt@str+4,w
 12763  0C6D  3E30               	addlw	48
 12764  0C6E  3196  2681  318B   	fcall	_LCDWriteCharacter
 12765  0C71                     l3067:	
 12766                           
 12767                           ;lcd.c: 236: }
 12768                           ;lcd.c: 238: if(numPlaces == 2)
 12769  0C71  3002               	movlw	2
 12770  0C72  0020               	movlb	0	; select bank0
 12771  0C73  0623               	xorwf	LCDWriteInt@numPlaces,w
 12772  0C74  1D03               	btfss	3,2
 12773  0C75  0008               	return
 12774                           
 12775                           ;lcd.c: 239: {
 12776                           ;lcd.c: 240: LCDWriteCharacter(46);
 12777  0C76  302E               	movlw	46
 12778  0C77  3196  2681  318B   	fcall	_LCDWriteCharacter
 12779                           
 12780                           ;lcd.c: 241: LCDWriteCharacter((uint8_t)(48+str[3]));
 12781  0C7A  0020               	movlb	0	; select bank0
 12782  0C7B  082C               	movf	LCDWriteInt@str+3,w
 12783  0C7C  3E30               	addlw	48
 12784  0C7D  3196  2681  318B   	fcall	_LCDWriteCharacter
 12785                           
 12786                           ;lcd.c: 242: LCDWriteCharacter((uint8_t)(48+str[4]));
 12787  0C80  0020               	movlb	0	; select bank0
 12788  0C81  082D               	movf	LCDWriteInt@str+4,w
 12789  0C82  3E30               	addlw	48
 12790  0C83  3196  2681         	fcall	_LCDWriteCharacter
 12791  0C85  0008               	return
 12792  0C86                     __end_of_LCDWriteInt:	
 12793                           
 12794                           	psect	text33
 12795  0809                     __ptext33:	
 12796 ;; *************** function ___lwmod *****************
 12797 ;; Defined at:
 12798 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
 12799 ;; Parameters:    Size  Location     Type
 12800 ;;  divisor         2    0[COMMON] unsigned int 
 12801 ;;  dividend        2    2[COMMON] unsigned int 
 12802 ;; Auto vars:     Size  Location     Type
 12803 ;;  counter         1    5[COMMON] unsigned char 
 12804 ;; Return value:  Size  Location     Type
 12805 ;;                  2    0[COMMON] unsigned int 
 12806 ;; Registers used:
 12807 ;;		wreg, status,2, status,0
 12808 ;; Tracked objects:
 12809 ;;		On entry : 0/0
 12810 ;;		On exit  : 0/0
 12811 ;;		Unchanged: 0/0
 12812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12813 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12814 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12815 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12816 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12817 ;;Total ram usage:        6 bytes
 12818 ;; Hardware stack levels used:    1
 12819 ;; This function calls:
 12820 ;;		Nothing
 12821 ;; This function is called by:
 12822 ;;		_LCDWriteInt
 12823 ;; This function uses a non-reentrant model
 12824 ;;
 12825                           
 12826                           
 12827                           ;psect for function ___lwmod
 12828  0809                     ___lwmod:	
 12829                           
 12830                           ;incstack = 0
 12831                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 12832  0809  0870               	movf	___lwmod@divisor,w
 12833  080A  0471               	iorwf	___lwmod@divisor+1,w
 12834  080B  1903               	btfsc	3,2
 12835  080C  2830               	goto	l2855
 12836  080D  01F5               	clrf	___lwmod@counter
 12837  080E  0AF5               	incf	___lwmod@counter,f
 12838  080F                     l2845:	
 12839  080F  1BF1               	btfsc	___lwmod@divisor+1,7
 12840  0810  281B               	goto	l2847
 12841  0811  3001               	movlw	1
 12842  0812                     u3085:	
 12843  0812  35F0               	lslf	___lwmod@divisor,f
 12844  0813  0DF1               	rlf	___lwmod@divisor+1,f
 12845  0814  0B89               	decfsz	9,f
 12846  0815  2812               	goto	u3085
 12847  0816  3001               	movlw	1
 12848  0817  00F4               	movwf	??___lwmod
 12849  0818  0874               	movf	??___lwmod,w
 12850  0819  07F5               	addwf	___lwmod@counter,f
 12851  081A  280F               	goto	l2845
 12852  081B                     l2847:	
 12853  081B  0871               	movf	___lwmod@divisor+1,w
 12854  081C  0273               	subwf	___lwmod@dividend+1,w
 12855  081D  1D03               	skipz
 12856  081E  2821               	goto	u3105
 12857  081F  0870               	movf	___lwmod@divisor,w
 12858  0820  0272               	subwf	___lwmod@dividend,w
 12859  0821                     u3105:	
 12860  0821  1C03               	skipc
 12861  0822  2827               	goto	l2851
 12862  0823  0870               	movf	___lwmod@divisor,w
 12863  0824  02F2               	subwf	___lwmod@dividend,f
 12864  0825  0871               	movf	___lwmod@divisor+1,w
 12865  0826  3BF3               	subwfb	___lwmod@dividend+1,f
 12866  0827                     l2851:	
 12867  0827  3001               	movlw	1
 12868  0828                     u3115:	
 12869  0828  36F1               	lsrf	___lwmod@divisor+1,f
 12870  0829  0CF0               	rrf	___lwmod@divisor,f
 12871  082A  0B89               	decfsz	9,f
 12872  082B  2828               	goto	u3115
 12873  082C  3001               	movlw	1
 12874  082D  02F5               	subwf	___lwmod@counter,f
 12875  082E  1D03               	btfss	3,2
 12876  082F  281B               	goto	l2847
 12877  0830                     l2855:	
 12878  0830  0873               	movf	___lwmod@dividend+1,w
 12879  0831  00F1               	movwf	?___lwmod+1
 12880  0832  0872               	movf	___lwmod@dividend,w
 12881  0833  00F0               	movwf	?___lwmod
 12882  0834  0008               	return
 12883  0835                     __end_of___lwmod:	
 12884                           
 12885                           	psect	text34
 12886  1630                     __ptext34:	
 12887 ;; *************** function ___awdiv *****************
 12888 ;; Defined at:
 12889 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
 12890 ;; Parameters:    Size  Location     Type
 12891 ;;  divisor         2    0[COMMON] int 
 12892 ;;  dividend        2    2[COMMON] int 
 12893 ;; Auto vars:     Size  Location     Type
 12894 ;;  quotient        2    7[COMMON] int 
 12895 ;;  sign            1    6[COMMON] unsigned char 
 12896 ;;  counter         1    5[COMMON] unsigned char 
 12897 ;; Return value:  Size  Location     Type
 12898 ;;                  2    0[COMMON] int 
 12899 ;; Registers used:
 12900 ;;		wreg, status,2, status,0
 12901 ;; Tracked objects:
 12902 ;;		On entry : 0/0
 12903 ;;		On exit  : 0/0
 12904 ;;		Unchanged: 0/0
 12905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12906 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12907 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12908 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12909 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12910 ;;Total ram usage:        9 bytes
 12911 ;; Hardware stack levels used:    1
 12912 ;; This function calls:
 12913 ;;		Nothing
 12914 ;; This function is called by:
 12915 ;;		_LCDWriteInt
 12916 ;; This function uses a non-reentrant model
 12917 ;;
 12918                           
 12919                           
 12920                           ;psect for function ___awdiv
 12921  1630                     ___awdiv:	
 12922                           
 12923                           ;incstack = 0
 12924                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 12925  1630  01F6               	clrf	___awdiv@sign
 12926  1631  1FF1               	btfss	___awdiv@divisor+1,7
 12927  1632  2E3A               	goto	l2751
 12928  1633  09F0               	comf	___awdiv@divisor,f
 12929  1634  09F1               	comf	___awdiv@divisor+1,f
 12930  1635  0AF0               	incf	___awdiv@divisor,f
 12931  1636  1903               	skipnz
 12932  1637  0AF1               	incf	___awdiv@divisor+1,f
 12933  1638  01F6               	clrf	___awdiv@sign
 12934  1639  0AF6               	incf	___awdiv@sign,f
 12935  163A                     l2751:	
 12936  163A  1FF3               	btfss	___awdiv@dividend+1,7
 12937  163B  2E45               	goto	l2757
 12938  163C  09F2               	comf	___awdiv@dividend,f
 12939  163D  09F3               	comf	___awdiv@dividend+1,f
 12940  163E  0AF2               	incf	___awdiv@dividend,f
 12941  163F  1903               	skipnz
 12942  1640  0AF3               	incf	___awdiv@dividend+1,f
 12943  1641  3001               	movlw	1
 12944  1642  00F4               	movwf	??___awdiv
 12945  1643  0874               	movf	??___awdiv,w
 12946  1644  06F6               	xorwf	___awdiv@sign,f
 12947  1645                     l2757:	
 12948  1645  01F7               	clrf	___awdiv@quotient
 12949  1646  01F8               	clrf	___awdiv@quotient+1
 12950  1647  0870               	movf	___awdiv@divisor,w
 12951  1648  0471               	iorwf	___awdiv@divisor+1,w
 12952  1649  1903               	btfsc	3,2
 12953  164A  2E74               	goto	l2779
 12954  164B  01F5               	clrf	___awdiv@counter
 12955  164C  0AF5               	incf	___awdiv@counter,f
 12956  164D                     l2767:	
 12957  164D  1BF1               	btfsc	___awdiv@divisor+1,7
 12958  164E  2E59               	goto	l2769
 12959  164F  3001               	movlw	1
 12960  1650                     u2915:	
 12961  1650  35F0               	lslf	___awdiv@divisor,f
 12962  1651  0DF1               	rlf	___awdiv@divisor+1,f
 12963  1652  0B89               	decfsz	9,f
 12964  1653  2E50               	goto	u2915
 12965  1654  3001               	movlw	1
 12966  1655  00F4               	movwf	??___awdiv
 12967  1656  0874               	movf	??___awdiv,w
 12968  1657  07F5               	addwf	___awdiv@counter,f
 12969  1658  2E4D               	goto	l2767
 12970  1659                     l2769:	
 12971  1659  3001               	movlw	1
 12972  165A                     u2935:	
 12973  165A  35F7               	lslf	___awdiv@quotient,f
 12974  165B  0DF8               	rlf	___awdiv@quotient+1,f
 12975  165C  0B89               	decfsz	9,f
 12976  165D  2E5A               	goto	u2935
 12977  165E  0871               	movf	___awdiv@divisor+1,w
 12978  165F  0273               	subwf	___awdiv@dividend+1,w
 12979  1660  1D03               	skipz
 12980  1661  2E64               	goto	u2945
 12981  1662  0870               	movf	___awdiv@divisor,w
 12982  1663  0272               	subwf	___awdiv@dividend,w
 12983  1664                     u2945:	
 12984  1664  1C03               	skipc
 12985  1665  2E6B               	goto	l2775
 12986  1666  0870               	movf	___awdiv@divisor,w
 12987  1667  02F2               	subwf	___awdiv@dividend,f
 12988  1668  0871               	movf	___awdiv@divisor+1,w
 12989  1669  3BF3               	subwfb	___awdiv@dividend+1,f
 12990  166A  1477               	bsf	___awdiv@quotient,0
 12991  166B                     l2775:	
 12992  166B  3001               	movlw	1
 12993  166C                     u2955:	
 12994  166C  36F1               	lsrf	___awdiv@divisor+1,f
 12995  166D  0CF0               	rrf	___awdiv@divisor,f
 12996  166E  0B89               	decfsz	9,f
 12997  166F  2E6C               	goto	u2955
 12998  1670  3001               	movlw	1
 12999  1671  02F5               	subwf	___awdiv@counter,f
 13000  1672  1D03               	btfss	3,2
 13001  1673  2E59               	goto	l2769
 13002  1674                     l2779:	
 13003  1674  0876               	movf	___awdiv@sign,w
 13004  1675  1903               	btfsc	3,2
 13005  1676  2E7C               	goto	l2783
 13006  1677  09F7               	comf	___awdiv@quotient,f
 13007  1678  09F8               	comf	___awdiv@quotient+1,f
 13008  1679  0AF7               	incf	___awdiv@quotient,f
 13009  167A  1903               	skipnz
 13010  167B  0AF8               	incf	___awdiv@quotient+1,f
 13011  167C                     l2783:	
 13012  167C  0878               	movf	___awdiv@quotient+1,w
 13013  167D  00F1               	movwf	?___awdiv+1
 13014  167E  0877               	movf	___awdiv@quotient,w
 13015  167F  00F0               	movwf	?___awdiv
 13016  1680  0008               	return
 13017  1681                     __end_of___awdiv:	
 13018                           
 13019                           	psect	text35
 13020  1681                     __ptext35:	
 13021 ;; *************** function _LCDWriteCharacter *****************
 13022 ;; Defined at:
 13023 ;;		line 140 in file "lcd.c"
 13024 ;; Parameters:    Size  Location     Type
 13025 ;;  character       1    wreg     const unsigned char 
 13026 ;; Auto vars:     Size  Location     Type
 13027 ;;  character       1    9[COMMON] const unsigned char 
 13028 ;;  base            2   10[COMMON] unsigned int 
 13029 ;; Return value:  Size  Location     Type
 13030 ;;                  1    wreg      void 
 13031 ;; Registers used:
 13032 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13033 ;; Tracked objects:
 13034 ;;		On entry : 0/0
 13035 ;;		On exit  : 0/0
 13036 ;;		Unchanged: 0/0
 13037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13039 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13040 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13041 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13042 ;;Total ram usage:        6 bytes
 13043 ;; Hardware stack levels used:    1
 13044 ;; Hardware stack levels required when called:    1
 13045 ;; This function calls:
 13046 ;;		_LCDWrite
 13047 ;;		___wmul
 13048 ;; This function is called by:
 13049 ;;		_LCDWriteString
 13050 ;;		_LCDWriteInt
 13051 ;;		_main
 13052 ;; This function uses a non-reentrant model
 13053 ;;
 13054                           
 13055                           
 13056                           ;psect for function _LCDWriteCharacter
 13057  1681                     _LCDWriteCharacter:	
 13058                           
 13059                           ;incstack = 0
 13060                           ; Regs used in _LCDWriteCharacter: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13061                           ;LCDWriteCharacter@character stored from wreg
 13062  1681  00F9               	movwf	LCDWriteCharacter@character
 13063                           
 13064                           ;lcd.c: 142: uint16_t base;
 13065                           ;lcd.c: 143: base = character - 0x20;
 13066  1682  0879               	movf	LCDWriteCharacter@character,w
 13067  1683  3EE0               	addlw	224
 13068  1684  00FA               	movwf	LCDWriteCharacter@base
 13069  1685  30FF               	movlw	255
 13070  1686  1803               	skipnc
 13071  1687  3000               	movlw	0
 13072  1688  00FB               	movwf	LCDWriteCharacter@base+1
 13073                           
 13074                           ;lcd.c: 144: base *= 3;
 13075  1689  3003               	movlw	3
 13076  168A  00F0               	movwf	___wmul@multiplier
 13077  168B  3000               	movlw	0
 13078  168C  00F1               	movwf	___wmul@multiplier+1
 13079  168D  087B               	movf	LCDWriteCharacter@base+1,w
 13080  168E  00F3               	movwf	___wmul@multiplicand+1
 13081  168F  087A               	movf	LCDWriteCharacter@base,w
 13082  1690  00F2               	movwf	___wmul@multiplicand
 13083  1691  3193  2336  3196   	fcall	___wmul
 13084  1694  0871               	movf	?___wmul+1,w
 13085  1695  00FB               	movwf	LCDWriteCharacter@base+1
 13086  1696  0870               	movf	?___wmul,w
 13087  1697  00FA               	movwf	LCDWriteCharacter@base
 13088                           
 13089                           ;lcd.c: 145: LCDWrite(1,fonts[base]);
 13090  1698  087B               	movf	LCDWriteCharacter@base+1,w
 13091  1699  0085               	movwf	5
 13092  169A  087A               	movf	LCDWriteCharacter@base,w
 13093  169B  0084               	movwf	4
 13094  169C  3000               	movlw	low (_fonts| (0+32768))
 13095  169D  0784               	addwf	4,f
 13096  169E  3090               	movlw	high (_fonts| (0+32768))
 13097  169F  3D85               	addwfc	5,f
 13098  16A0  0800               	movf	0,w	;code access
 13099  16A1  00F6               	movwf	??_LCDWriteCharacter
 13100  16A2  0876               	movf	??_LCDWriteCharacter,w
 13101  16A3  00F0               	movwf	LCDWrite@data
 13102  16A4  3001               	movlw	1
 13103  16A5  3193  23AE  3196   	fcall	_LCDWrite
 13104                           
 13105                           ;lcd.c: 146: LCDWrite(1,fonts[base + 1]);
 13106  16A8  087A               	movf	LCDWriteCharacter@base,w
 13107  16A9  3E01               	addlw	1
 13108  16AA  00F6               	movwf	??_LCDWriteCharacter
 13109  16AB  3000               	movlw	0
 13110  16AC  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 13111  16AD  00F7               	movwf	??_LCDWriteCharacter+1
 13112  16AE  3000               	movlw	low (_fonts| (0+32768))
 13113  16AF  0776               	addwf	??_LCDWriteCharacter,w
 13114  16B0  0084               	movwf	4
 13115  16B1  3090               	movlw	high (_fonts| (0+32768))
 13116  16B2  3D77               	addwfc	??_LCDWriteCharacter+1,w
 13117  16B3  0085               	movwf	5
 13118  16B4  0800               	movf	0,w	;code access
 13119  16B5  00F8               	movwf	??_LCDWriteCharacter+2
 13120  16B6  0878               	movf	??_LCDWriteCharacter+2,w
 13121  16B7  00F0               	movwf	LCDWrite@data
 13122  16B8  3001               	movlw	1
 13123  16B9  3193  23AE  3196   	fcall	_LCDWrite
 13124                           
 13125                           ;lcd.c: 147: LCDWrite(1,fonts[base + 2]);
 13126  16BC  087A               	movf	LCDWriteCharacter@base,w
 13127  16BD  3E02               	addlw	2
 13128  16BE  00F6               	movwf	??_LCDWriteCharacter
 13129  16BF  3000               	movlw	0
 13130  16C0  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 13131  16C1  00F7               	movwf	??_LCDWriteCharacter+1
 13132  16C2  3000               	movlw	low (_fonts| (0+32768))
 13133  16C3  0776               	addwf	??_LCDWriteCharacter,w
 13134  16C4  0084               	movwf	4
 13135  16C5  3090               	movlw	high (_fonts| (0+32768))
 13136  16C6  3D77               	addwfc	??_LCDWriteCharacter+1,w
 13137  16C7  0085               	movwf	5
 13138  16C8  0800               	movf	0,w	;code access
 13139  16C9  00F8               	movwf	??_LCDWriteCharacter+2
 13140  16CA  0878               	movf	??_LCDWriteCharacter+2,w
 13141  16CB  00F0               	movwf	LCDWrite@data
 13142  16CC  3001               	movlw	1
 13143  16CD  3193  23AE  3196   	fcall	_LCDWrite
 13144                           
 13145                           ;lcd.c: 148: LCDWrite(1, 0x00);
 13146  16D0  01F0               	clrf	LCDWrite@data
 13147  16D1  3001               	movlw	1
 13148  16D2  3193  23AE         	fcall	_LCDWrite
 13149  16D4  0008               	return
 13150  16D5                     __end_of_LCDWriteCharacter:	
 13151                           
 13152                           	psect	text36
 13153  1336                     __ptext36:	
 13154 ;; *************** function ___wmul *****************
 13155 ;; Defined at:
 13156 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
 13157 ;; Parameters:    Size  Location     Type
 13158 ;;  multiplier      2    0[COMMON] unsigned int 
 13159 ;;  multiplicand    2    2[COMMON] unsigned int 
 13160 ;; Auto vars:     Size  Location     Type
 13161 ;;  product         2    4[COMMON] unsigned int 
 13162 ;; Return value:  Size  Location     Type
 13163 ;;                  2    0[COMMON] unsigned int 
 13164 ;; Registers used:
 13165 ;;		wreg, status,2, status,0
 13166 ;; Tracked objects:
 13167 ;;		On entry : 0/0
 13168 ;;		On exit  : 0/0
 13169 ;;		Unchanged: 0/0
 13170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13171 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13172 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13174 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13175 ;;Total ram usage:        6 bytes
 13176 ;; Hardware stack levels used:    1
 13177 ;; This function calls:
 13178 ;;		Nothing
 13179 ;; This function is called by:
 13180 ;;		_readIAnalog
 13181 ;;		_LCDWriteCharacter
 13182 ;;		_eval_poly
 13183 ;; This function uses a non-reentrant model
 13184 ;;
 13185                           
 13186                           
 13187                           ;psect for function ___wmul
 13188  1336                     ___wmul:	
 13189                           
 13190                           ;incstack = 0
 13191                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 13192  1336  01F4               	clrf	___wmul@product
 13193  1337  01F5               	clrf	___wmul@product+1
 13194  1338                     l2271:	
 13195  1338  1C70               	btfss	___wmul@multiplier,0
 13196  1339  2B3E               	goto	l589
 13197  133A  0872               	movf	___wmul@multiplicand,w
 13198  133B  07F4               	addwf	___wmul@product,f
 13199  133C  0873               	movf	___wmul@multiplicand+1,w
 13200  133D  3DF5               	addwfc	___wmul@product+1,f
 13201  133E                     l589:	
 13202  133E  3001               	movlw	1
 13203  133F                     u2165:	
 13204  133F  35F2               	lslf	___wmul@multiplicand,f
 13205  1340  0DF3               	rlf	___wmul@multiplicand+1,f
 13206  1341  0B89               	decfsz	9,f
 13207  1342  2B3F               	goto	u2165
 13208  1343  3001               	movlw	1
 13209  1344                     u2175:	
 13210  1344  36F1               	lsrf	___wmul@multiplier+1,f
 13211  1345  0CF0               	rrf	___wmul@multiplier,f
 13212  1346  0B89               	decfsz	9,f
 13213  1347  2B44               	goto	u2175
 13214  1348  0870               	movf	___wmul@multiplier,w
 13215  1349  0471               	iorwf	___wmul@multiplier+1,w
 13216  134A  1D03               	btfss	3,2
 13217  134B  2B38               	goto	l2271
 13218  134C  0875               	movf	___wmul@product+1,w
 13219  134D  00F1               	movwf	?___wmul+1
 13220  134E  0874               	movf	___wmul@product,w
 13221  134F  00F0               	movwf	?___wmul
 13222  1350  0008               	return
 13223  1351                     __end_of___wmul:	
 13224                           
 13225                           	psect	text37
 13226  13AE                     __ptext37:	
 13227 ;; *************** function _LCDWrite *****************
 13228 ;; Defined at:
 13229 ;;		line 281 in file "lcd.c"
 13230 ;; Parameters:    Size  Location     Type
 13231 ;;  data_or_comm    1    wreg     unsigned char 
 13232 ;;  data            1    0[COMMON] unsigned char 
 13233 ;; Auto vars:     Size  Location     Type
 13234 ;;  data_or_comm    1    2[COMMON] unsigned char 
 13235 ;;  i               1    4[COMMON] unsigned char 
 13236 ;;  d               1    3[COMMON] unsigned char 
 13237 ;; Return value:  Size  Location     Type
 13238 ;;                  1    wreg      void 
 13239 ;; Registers used:
 13240 ;;		wreg, status,2, status,0
 13241 ;; Tracked objects:
 13242 ;;		On entry : 0/0
 13243 ;;		On exit  : 0/0
 13244 ;;		Unchanged: 0/0
 13245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13246 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13247 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13248 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13249 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13250 ;;Total ram usage:        5 bytes
 13251 ;; Hardware stack levels used:    1
 13252 ;; This function calls:
 13253 ;;		Nothing
 13254 ;; This function is called by:
 13255 ;;		_gotoXY
 13256 ;;		_LCDWriteCharacter
 13257 ;;		_LCDClear
 13258 ;;		_LCDInit
 13259 ;; This function uses a non-reentrant model
 13260 ;;
 13261                           
 13262                           
 13263                           ;psect for function _LCDWrite
 13264  13AE                     _LCDWrite:	
 13265                           
 13266                           ;incstack = 0
 13267                           ; Regs used in _LCDWrite: [wreg+status,2+status,0]
 13268                           ;LCDWrite@data_or_command stored from wreg
 13269  13AE  00F2               	movwf	LCDWrite@data_or_command
 13270                           
 13271                           ;lcd.c: 283: uint8_t i,d;
 13272                           ;lcd.c: 285: d=data;
 13273  13AF  0870               	movf	LCDWrite@data,w
 13274  13B0  00F1               	movwf	??_LCDWrite
 13275  13B1  0871               	movf	??_LCDWrite,w
 13276  13B2  00F3               	movwf	LCDWrite@d
 13277                           
 13278                           ;lcd.c: 287: if(data_or_command == 0)
 13279  13B3  0872               	movf	LCDWrite@data_or_command,w
 13280  13B4  1D03               	btfss	3,2
 13281  13B5  2BB9               	goto	l224
 13282                           
 13283                           ;lcd.c: 288: {
 13284                           ;lcd.c: 289: LATAbits.LATA2 = 0;
 13285  13B6  0020               	movlb	0	; select bank0
 13286  13B7  1116               	bcf	22,2	;volatile
 13287                           
 13288                           ;lcd.c: 290: }
 13289  13B8  2BBB               	goto	l225
 13290  13B9                     l224:	
 13291                           
 13292                           ;lcd.c: 291: else
 13293                           ;lcd.c: 292: {
 13294                           ;lcd.c: 293: LATAbits.LATA2 = 1;
 13295  13B9  0020               	movlb	0	; select bank0
 13296  13BA  1516               	bsf	22,2	;volatile
 13297  13BB                     l225:	
 13298                           
 13299                           ;lcd.c: 294: }
 13300                           ;lcd.c: 296: LATAbits.LATA1 = 0;
 13301  13BB  1096               	bcf	22,1	;volatile
 13302                           
 13303                           ;lcd.c: 298: for(i=0;i<8;i++)
 13304  13BC  01F4               	clrf	LCDWrite@i
 13305  13BD  3008               	movlw	8
 13306  13BE  0274               	subwf	LCDWrite@i,w
 13307  13BF  1803               	btfsc	3,0
 13308  13C0  2BD1               	goto	l227
 13309  13C1                     l226:	
 13310                           
 13311                           ;lcd.c: 299: {
 13312                           ;lcd.c: 300: LATAbits.LATA3 = 0;
 13313  13C1  1196               	bcf	22,3	;volatile
 13314                           
 13315                           ;lcd.c: 302: if(d&0x80)
 13316  13C2  1FF3               	btfss	LCDWrite@d,7
 13317  13C3  2BC5               	goto	l228
 13318                           
 13319                           ;lcd.c: 303: {
 13320                           ;lcd.c: 304: LATAbits.LATA3 = 1;
 13321  13C4  1596               	bsf	22,3	;volatile
 13322  13C5                     l228:	
 13323                           
 13324                           ;lcd.c: 305: }
 13325                           ;lcd.c: 307: LATAbits.LATA4 = 1;
 13326  13C5  1616               	bsf	22,4	;volatile
 13327                           
 13328                           ;lcd.c: 309: d<<=1;
 13329  13C6  1003               	clrc
 13330  13C7  0DF3               	rlf	LCDWrite@d,f
 13331                           
 13332                           ;lcd.c: 311: LATAbits.LATA4=0;
 13333  13C8  1216               	bcf	22,4	;volatile
 13334  13C9  3001               	movlw	1
 13335  13CA  00F1               	movwf	??_LCDWrite
 13336  13CB  0871               	movf	??_LCDWrite,w
 13337  13CC  07F4               	addwf	LCDWrite@i,f
 13338  13CD  3008               	movlw	8
 13339  13CE  0274               	subwf	LCDWrite@i,w
 13340  13CF  1C03               	skipc
 13341  13D0  2BC1               	goto	l226
 13342  13D1                     l227:	
 13343                           
 13344                           ;lcd.c: 312: }
 13345                           ;lcd.c: 314: LATAbits.LATA1 = 1;
 13346  13D1  1496               	bsf	22,1	;volatile
 13347  13D2  0008               	return
 13348  13D3                     __end_of_LCDWrite:	
 13349                           
 13350                           	psect	text38
 13351  0105                     __ptext38:	
 13352 ;; *************** function _Battery_State_Machine *****************
 13353 ;; Defined at:
 13354 ;;		line 30 in file "battery_charger.c"
 13355 ;; Parameters:    Size  Location     Type
 13356 ;;  z               1    wreg     unsigned char 
 13357 ;; Auto vars:     Size  Location     Type
 13358 ;;  z               1   35[BANK0 ] unsigned char 
 13359 ;; Return value:  Size  Location     Type
 13360 ;;                  1    wreg      void 
 13361 ;; Registers used:
 13362 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13363 ;; Tracked objects:
 13364 ;;		On entry : 0/0
 13365 ;;		On exit  : 0/0
 13366 ;;		Unchanged: 0/0
 13367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13369 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13370 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13371 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13372 ;;Total ram usage:        6 bytes
 13373 ;; Hardware stack levels used:    1
 13374 ;; Hardware stack levels required when called:    2
 13375 ;; This function calls:
 13376 ;;		___awtoft
 13377 ;;		___ftmul
 13378 ;;		___fttol
 13379 ;; This function is called by:
 13380 ;;		_main
 13381 ;; This function uses a non-reentrant model
 13382 ;;
 13383                           
 13384                           
 13385                           ;psect for function _Battery_State_Machine
 13386  0105                     _Battery_State_Machine:	
 13387                           
 13388                           ;incstack = 0
 13389                           ; Regs used in _Battery_State_Machine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13390                           ;Battery_State_Machine@z stored from wreg
 13391  0105  0020               	movlb	0	; select bank0
 13392  0106  00C3               	movwf	Battery_State_Machine@z
 13393                           
 13394                           ;battery_charger.c: 32: if(batteryState[z]==PRECHARGE)
 13395  0107  0843               	movf	Battery_State_Machine@z,w
 13396  0108  3EE2               	addlw	(low (_batteryState| 0))& (0+255)
 13397  0109  0086               	movwf	6
 13398  010A  0187               	clrf	7
 13399  010B  3003               	movlw	3
 13400  010C  0601               	xorwf	1,w
 13401  010D  1D03               	btfss	3,2
 13402  010E  295C               	goto	l2891
 13403                           
 13404                           ;battery_charger.c: 33: {
 13405                           ;battery_charger.c: 34: if(voltage[z]<1075)
 13406  010F  3543               	lslf	Battery_State_Machine@z,w
 13407  0110  3EB0               	addlw	(low (_voltage| 0))& (0+255)
 13408  0111  0086               	movwf	6
 13409  0112  0187               	clrf	7
 13410  0113  3F40               	moviw [0]fsr1
 13411  0114  00BE               	movwf	??_Battery_State_Machine
 13412  0115  3F41               	moviw [1]fsr1
 13413  0116  00BF               	movwf	??_Battery_State_Machine+1
 13414  0117  083F               	movf	??_Battery_State_Machine+1,w
 13415  0118  3A80               	xorlw	128
 13416  0119  00C0               	movwf	??_Battery_State_Machine+2
 13417  011A  3084               	movlw	132
 13418  011B  0240               	subwf	??_Battery_State_Machine+2,w
 13419  011C  1D03               	skipz
 13420  011D  2920               	goto	u3215
 13421  011E  3033               	movlw	51
 13422  011F  023E               	subwf	??_Battery_State_Machine,w
 13423  0120                     u3215:	
 13424  0120  1803               	skipnc
 13425  0121  294A               	goto	l2889
 13426                           
 13427                           ;battery_charger.c: 35: {
 13428                           ;battery_charger.c: 36: if(stateCounter[z]>0)
 13429  0122  0020               	movlb	0	; select bank0
 13430  0123  3543               	lslf	Battery_State_Machine@z,w
 13431  0124  3EC4               	addlw	(low (_stateCounter| 0))& (0+255)
 13432  0125  0086               	movwf	6
 13433  0126  0187               	clrf	7
 13434  0127  3F40               	moviw [0]fsr1
 13435  0128  00BE               	movwf	??_Battery_State_Machine
 13436  0129  3F41               	moviw [1]fsr1
 13437  012A  00BF               	movwf	??_Battery_State_Machine+1
 13438  012B  083F               	movf	??_Battery_State_Machine+1,w
 13439  012C  3A80               	xorlw	128
 13440  012D  00C0               	movwf	??_Battery_State_Machine+2
 13441  012E  3080               	movlw	128
 13442  012F  0240               	subwf	??_Battery_State_Machine+2,w
 13443  0130  1D03               	skipz
 13444  0131  2934               	goto	u3225
 13445  0132  3001               	movlw	1
 13446  0133  023E               	subwf	??_Battery_State_Machine,w
 13447  0134                     u3225:	
 13448  0134  1C03               	skipc
 13449  0135  2942               	goto	l2887
 13450                           
 13451                           ;battery_charger.c: 37: {
 13452                           ;battery_charger.c: 38: stateCounter[z]-=1;
 13453  0136  0020               	movlb	0	; select bank0
 13454  0137  3543               	lslf	Battery_State_Machine@z,w
 13455  0138  3EC4               	addlw	(low (_stateCounter| 0))& (0+255)
 13456  0139  0086               	movwf	6
 13457  013A  0187               	clrf	7
 13458  013B  30FF               	movlw	255
 13459  013C  0781               	addwf	1,f
 13460  013D  3141               	addfsr 1,1
 13461  013E  30FF               	movlw	255
 13462  013F  3D81               	addwfc	1,f
 13463  0140  317F               	addfsr 1,-1
 13464                           
 13465                           ;battery_charger.c: 39: }
 13466  0141  0008               	return
 13467  0142                     l2887:	
 13468                           
 13469                           ;battery_charger.c: 40: else
 13470                           ;battery_charger.c: 41: {
 13471                           ;battery_charger.c: 42: batteryState[z]=FAULT;
 13472  0142  0020               	movlb	0	; select bank0
 13473  0143  0843               	movf	Battery_State_Machine@z,w
 13474  0144  3EE2               	addlw	(low (_batteryState| 0))& (0+255)
 13475  0145  0086               	movwf	6
 13476  0146  0187               	clrf	7
 13477  0147  0181               	clrf	1
 13478  0148  0A81               	incf	1,f
 13479                           
 13480                           ;battery_charger.c: 43: }
 13481                           ;battery_charger.c: 44: }
 13482  0149  0008               	return
 13483  014A                     l2889:	
 13484                           
 13485                           ;battery_charger.c: 45: else
 13486                           ;battery_charger.c: 46: {
 13487                           ;battery_charger.c: 47: batteryState[z]=CHARGE;
 13488  014A  3004               	movlw	4
 13489  014B  0020               	movlb	0	; select bank0
 13490  014C  00BE               	movwf	??_Battery_State_Machine
 13491  014D  0843               	movf	Battery_State_Machine@z,w
 13492  014E  3EE2               	addlw	(low (_batteryState| 0))& (0+255)
 13493  014F  0086               	movwf	6
 13494  0150  0187               	clrf	7
 13495  0151  083E               	movf	??_Battery_State_Machine,w
 13496  0152  0081               	movwf	1
 13497                           
 13498                           ;battery_charger.c: 48: Iref[z]=35;
 13499  0153  3543               	lslf	Battery_State_Machine@z,w
 13500  0154  3EC8               	addlw	(low (_Iref| 0))& (0+255)
 13501  0155  0086               	movwf	6
 13502  0156  0187               	clrf	7
 13503  0157  3023               	movlw	35
 13504  0158  3FC0               	movwi [0]fsr1
 13505  0159  3000               	movlw	0
 13506  015A  3FC1               	movwi [1]fsr1
 13507                           
 13508                           ;battery_charger.c: 49: }
 13509                           ;battery_charger.c: 50: }
 13510  015B  0008               	return
 13511  015C                     l2891:	
 13512                           
 13513                           ;battery_charger.c: 51: else if(batteryState[z]==CHARGE)
 13514  015C  0843               	movf	Battery_State_Machine@z,w
 13515  015D  3EE2               	addlw	(low (_batteryState| 0))& (0+255)
 13516  015E  0086               	movwf	6
 13517  015F  0187               	clrf	7
 13518  0160  3004               	movlw	4
 13519  0161  0601               	xorwf	1,w
 13520  0162  1D03               	btfss	3,2
 13521  0163  2A22               	goto	l2911
 13522                           
 13523                           ;battery_charger.c: 52: {
 13524                           ;battery_charger.c: 53: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 13525  0164  0021               	movlb	1	; select bank1
 13526  0165  096B               	comf	_batteryTemp^(0+128),w
 13527  0166  0020               	movlb	0	; select bank0
 13528  0167  00BE               	movwf	??_Battery_State_Machine
 13529  0168  0021               	movlb	1	; select bank1
 13530  0169  096C               	comf	(_batteryTemp+1)^(0+128),w
 13531  016A  0020               	movlb	0	; select bank0
 13532  016B  00BF               	movwf	??_Battery_State_Machine+1
 13533  016C  0ABE               	incf	??_Battery_State_Machine,f
 13534  016D  1903               	skipnz
 13535  016E  0ABF               	incf	??_Battery_State_Machine+1,f
 13536  016F  083E               	movf	??_Battery_State_Machine,w
 13537  0170  3EFA               	addlw	250
 13538  0171  00F8               	movwf	___awtoft@c
 13539  0172  3000               	movlw	0
 13540  0173  3D3F               	addwfc	??_Battery_State_Machine+1,w
 13541  0174  00F9               	movwf	___awtoft@c+1
 13542  0175  3193  238E  3181   	fcall	___awtoft
 13543  0178  0878               	movf	?___awtoft,w
 13544  0179  0020               	movlb	0	; select bank0
 13545  017A  00A3               	movwf	___ftmul@f2
 13546  017B  0879               	movf	?___awtoft+1,w
 13547  017C  00A4               	movwf	___ftmul@f2+1
 13548  017D  087A               	movf	?___awtoft+2,w
 13549  017E  00A5               	movwf	___ftmul@f2+2
 13550  017F  30C3               	movlw	195
 13551  0180  00A0               	movwf	___ftmul@f1
 13552  0181  3075               	movlw	117
 13553  0182  00A1               	movwf	___ftmul@f1+1
 13554  0183  303E               	movlw	62
 13555  0184  00A2               	movwf	___ftmul@f1+2
 13556  0185  318B  2319  3181   	fcall	___ftmul
 13557  0188  0020               	movlb	0	; select bank0
 13558  0189  0820               	movf	?___ftmul,w
 13559  018A  00B0               	movwf	___fttol@f1
 13560  018B  0821               	movf	?___ftmul+1,w
 13561  018C  00B1               	movwf	___fttol@f1+1
 13562  018D  0822               	movf	?___ftmul+2,w
 13563  018E  00B2               	movwf	___fttol@f1+2
 13564  018F  3189  2139  3181   	fcall	___fttol
 13565  0192  0020               	movlb	0	; select bank0
 13566  0193  0830               	movf	?___fttol,w
 13567  0194  3E91               	addlw	145
 13568  0195  00C0               	movwf	??_Battery_State_Machine+2
 13569  0196  3005               	movlw	5
 13570  0197  3D31               	addwfc	?___fttol+1,w
 13571  0198  00C1               	movwf	??_Battery_State_Machine+3
 13572  0199  3543               	lslf	Battery_State_Machine@z,w
 13573  019A  3EC0               	addlw	(low (_Vref| 0))& (0+255)
 13574  019B  0086               	movwf	6
 13575  019C  0187               	clrf	7
 13576  019D  0840               	movf	??_Battery_State_Machine+2,w
 13577  019E  3FC0               	movwi [0]fsr1
 13578  019F  0841               	movf	??_Battery_State_Machine+3,w
 13579  01A0  3FC1               	movwi [1]fsr1
 13580                           
 13581                           ;battery_charger.c: 54: if(!(Imode[z]))
 13582  01A1  0843               	movf	Battery_State_Machine@z,w
 13583  01A2  3EDE               	addlw	(low (_Imode| 0))& (0+255)
 13584  01A3  0086               	movwf	6
 13585  01A4  0187               	clrf	7
 13586  01A5  0801               	movf	1,w
 13587  01A6  1D03               	btfss	3,2
 13588  01A7  2A09               	goto	l2907
 13589                           
 13590                           ;battery_charger.c: 55: {
 13591                           ;battery_charger.c: 56: if(current[z] < Imin[z])
 13592  01A8  3543               	lslf	Battery_State_Machine@z,w
 13593  01A9  3ED0               	addlw	(low (_Imin| 0))& (0+255)
 13594  01AA  0086               	movwf	6
 13595  01AB  0187               	clrf	7
 13596  01AC  3F40               	moviw [0]fsr1
 13597  01AD  00BE               	movwf	??_Battery_State_Machine
 13598  01AE  3F41               	moviw [1]fsr1
 13599  01AF  00BF               	movwf	??_Battery_State_Machine+1
 13600  01B0  3543               	lslf	Battery_State_Machine@z,w
 13601  01B1  3EB8               	addlw	(low (_current| 0))& (0+255)
 13602  01B2  0086               	movwf	6
 13603  01B3  0187               	clrf	7
 13604  01B4  3F40               	moviw [0]fsr1
 13605  01B5  00C0               	movwf	??_Battery_State_Machine+2
 13606  01B6  3F41               	moviw [1]fsr1
 13607  01B7  00C1               	movwf	??_Battery_State_Machine+3
 13608  01B8  0841               	movf	??_Battery_State_Machine+3,w
 13609  01B9  3A80               	xorlw	128
 13610  01BA  00C2               	movwf	??_Battery_State_Machine+4
 13611  01BB  083F               	movf	??_Battery_State_Machine+1,w
 13612  01BC  3A80               	xorlw	128
 13613  01BD  0242               	subwf	??_Battery_State_Machine+4,w
 13614  01BE  1D03               	skipz
 13615  01BF  29C2               	goto	u3255
 13616  01C0  083E               	movf	??_Battery_State_Machine,w
 13617  01C1  0240               	subwf	??_Battery_State_Machine+2,w
 13618  01C2                     u3255:	
 13619  01C2  1803               	skipnc
 13620  01C3  29EF               	goto	l2903
 13621                           
 13622                           ;battery_charger.c: 57: {
 13623                           ;battery_charger.c: 58: IminCount[z]-=2;
 13624  01C4  0020               	movlb	0	; select bank0
 13625  01C5  3543               	lslf	Battery_State_Machine@z,w
 13626  01C6  3ECC               	addlw	(low (_IminCount| 0))& (0+255)
 13627  01C7  0086               	movwf	6
 13628  01C8  0187               	clrf	7
 13629  01C9  3002               	movlw	2
 13630  01CA  0281               	subwf	1,f
 13631  01CB  3141               	addfsr 1,1
 13632  01CC  3000               	movlw	0
 13633  01CD  3B81               	subwfb	1,f
 13634  01CE  317F               	addfsr 1,-1
 13635                           
 13636                           ;battery_charger.c: 59: if(IminCount[z]<10)
 13637  01CF  3543               	lslf	Battery_State_Machine@z,w
 13638  01D0  3ECC               	addlw	(low (_IminCount| 0))& (0+255)
 13639  01D1  0086               	movwf	6
 13640  01D2  0187               	clrf	7
 13641  01D3  3F40               	moviw [0]fsr1
 13642  01D4  00BE               	movwf	??_Battery_State_Machine
 13643  01D5  3F41               	moviw [1]fsr1
 13644  01D6  00BF               	movwf	??_Battery_State_Machine+1
 13645  01D7  3000               	movlw	0
 13646  01D8  023F               	subwf	??_Battery_State_Machine+1,w
 13647  01D9  300A               	movlw	10
 13648  01DA  1903               	skipnz
 13649  01DB  023E               	subwf	??_Battery_State_Machine,w
 13650  01DC  1803               	skipnc
 13651  01DD  0008               	return
 13652                           
 13653                           ;battery_charger.c: 60: {
 13654                           ;battery_charger.c: 61: batteryState[z] = FLOAT;
 13655  01DE  3005               	movlw	5
 13656  01DF  00BE               	movwf	??_Battery_State_Machine
 13657  01E0  0843               	movf	Battery_State_Machine@z,w
 13658  01E1  3EE2               	addlw	(low (_batteryState| 0))& (0+255)
 13659  01E2  0086               	movwf	6
 13660  01E3  0187               	clrf	7
 13661  01E4  083E               	movf	??_Battery_State_Machine,w
 13662  01E5  0081               	movwf	1
 13663                           
 13664                           ;battery_charger.c: 62: IminCount[z]=10;
 13665  01E6  3543               	lslf	Battery_State_Machine@z,w
 13666  01E7  3ECC               	addlw	(low (_IminCount| 0))& (0+255)
 13667  01E8  0086               	movwf	6
 13668  01E9  0187               	clrf	7
 13669  01EA  300A               	movlw	10
 13670  01EB  3FC0               	movwi [0]fsr1
 13671  01EC  3000               	movlw	0
 13672  01ED  3FC1               	movwi [1]fsr1
 13673                           
 13674                           ;battery_charger.c: 63: }
 13675                           ;battery_charger.c: 64: }
 13676  01EE  0008               	return
 13677  01EF                     l2903:	
 13678                           
 13679                           ;battery_charger.c: 65: else
 13680                           ;battery_charger.c: 66: {
 13681                           ;battery_charger.c: 67: if(IminCount[z]<600)IminCount[z]+=1;
 13682  01EF  0020               	movlb	0	; select bank0
 13683  01F0  3543               	lslf	Battery_State_Machine@z,w
 13684  01F1  3ECC               	addlw	(low (_IminCount| 0))& (0+255)
 13685  01F2  0086               	movwf	6
 13686  01F3  0187               	clrf	7
 13687  01F4  3F40               	moviw [0]fsr1
 13688  01F5  00BE               	movwf	??_Battery_State_Machine
 13689  01F6  3F41               	moviw [1]fsr1
 13690  01F7  00BF               	movwf	??_Battery_State_Machine+1
 13691  01F8  3002               	movlw	2
 13692  01F9  023F               	subwf	??_Battery_State_Machine+1,w
 13693  01FA  3058               	movlw	88
 13694  01FB  1903               	skipnz
 13695  01FC  023E               	subwf	??_Battery_State_Machine,w
 13696  01FD  1803               	skipnc
 13697  01FE  0008               	return
 13698  01FF  3543               	lslf	Battery_State_Machine@z,w
 13699  0200  3ECC               	addlw	(low (_IminCount| 0))& (0+255)
 13700  0201  0086               	movwf	6
 13701  0202  0187               	clrf	7
 13702  0203  3001               	movlw	1
 13703  0204  0781               	addwf	1,f
 13704  0205  3141               	addfsr 1,1
 13705  0206  1803               	skipnc
 13706  0207  0A81               	incf	1,f
 13707                           
 13708                           ;battery_charger.c: 68: }
 13709                           ;battery_charger.c: 69: }
 13710  0208  0008               	return
 13711  0209                     l2907:	
 13712                           
 13713                           ;battery_charger.c: 70: else if(IminCount[z]<600)IminCount[z]+=1;
 13714  0209  3543               	lslf	Battery_State_Machine@z,w
 13715  020A  3ECC               	addlw	(low (_IminCount| 0))& (0+255)
 13716  020B  0086               	movwf	6
 13717  020C  0187               	clrf	7
 13718  020D  3F40               	moviw [0]fsr1
 13719  020E  00BE               	movwf	??_Battery_State_Machine
 13720  020F  3F41               	moviw [1]fsr1
 13721  0210  00BF               	movwf	??_Battery_State_Machine+1
 13722  0211  3002               	movlw	2
 13723  0212  023F               	subwf	??_Battery_State_Machine+1,w
 13724  0213  3058               	movlw	88
 13725  0214  1903               	skipnz
 13726  0215  023E               	subwf	??_Battery_State_Machine,w
 13727  0216  1803               	skipnc
 13728  0217  0008               	return
 13729  0218  3543               	lslf	Battery_State_Machine@z,w
 13730  0219  3ECC               	addlw	(low (_IminCount| 0))& (0+255)
 13731  021A  0086               	movwf	6
 13732  021B  0187               	clrf	7
 13733  021C  3001               	movlw	1
 13734  021D  0781               	addwf	1,f
 13735  021E  3141               	addfsr 1,1
 13736  021F  1803               	skipnc
 13737  0220  0A81               	incf	1,f
 13738                           
 13739                           ;battery_charger.c: 71: }
 13740  0221  0008               	return
 13741  0222                     l2911:	
 13742                           
 13743                           ;battery_charger.c: 72: else if(batteryState[z] == FLOAT)
 13744  0222  0843               	movf	Battery_State_Machine@z,w
 13745  0223  3EE2               	addlw	(low (_batteryState| 0))& (0+255)
 13746  0224  0086               	movwf	6
 13747  0225  0187               	clrf	7
 13748  0226  3005               	movlw	5
 13749  0227  0601               	xorwf	1,w
 13750  0228  1D03               	btfss	3,2
 13751  0229  2AB5               	goto	l2933
 13752                           
 13753                           ;battery_charger.c: 73: {
 13754                           ;battery_charger.c: 74: otherState=(uint8_t)(1-z);
 13755  022A  0343               	decf	Battery_State_Machine@z,w
 13756  022B  3AFF               	xorlw	255
 13757  022C  3E01               	addlw	1
 13758  022D  00BE               	movwf	??_Battery_State_Machine
 13759  022E  083E               	movf	??_Battery_State_Machine,w
 13760  022F  0021               	movlb	1	; select bank1
 13761  0230  00E9               	movwf	_otherState^(0+128)
 13762                           
 13763                           ;battery_charger.c: 76: if(batteryState[otherState]==CHARGE)
 13764  0231  0869               	movf	_otherState^(0+128),w
 13765  0232  3EE2               	addlw	(low (_batteryState| 0))& (0+255)
 13766  0233  0086               	movwf	6
 13767  0234  0187               	clrf	7
 13768  0235  3004               	movlw	4
 13769  0236  0601               	xorwf	1,w
 13770  0237  1D03               	btfss	3,2
 13771  0238  2A66               	goto	l2925
 13772                           
 13773                           ;battery_charger.c: 77: {
 13774                           ;battery_charger.c: 78: floatCount[z]+=1;
 13775  0239  3001               	movlw	1
 13776  023A  0020               	movlb	0	; select bank0
 13777  023B  00BE               	movwf	??_Battery_State_Machine
 13778  023C  0843               	movf	Battery_State_Machine@z,w
 13779  023D  3ED8               	addlw	(low (_floatCount| 0))& (0+255)
 13780  023E  0086               	movwf	6
 13781  023F  0187               	clrf	7
 13782  0240  083E               	movf	??_Battery_State_Machine,w
 13783  0241  0781               	addwf	1,f
 13784                           
 13785                           ;battery_charger.c: 80: if(floatCount[z]>5)
 13786  0242  0843               	movf	Battery_State_Machine@z,w
 13787  0243  3ED8               	addlw	(low (_floatCount| 0))& (0+255)
 13788  0244  0086               	movwf	6
 13789  0245  0187               	clrf	7
 13790  0246  3006               	movlw	6
 13791  0247  0201               	subwf	1,w
 13792  0248  1C03               	skipc
 13793  0249  0008               	return
 13794                           
 13795                           ;battery_charger.c: 81: {
 13796                           ;battery_charger.c: 82: IminCount[z]=IminCount[otherState];
 13797  024A  0021               	movlb	1	; select bank1
 13798  024B  3569               	lslf	_otherState^(0+128),w
 13799  024C  3ECC               	addlw	(low (_IminCount| 0))& (0+255)
 13800  024D  0086               	movwf	6
 13801  024E  0187               	clrf	7
 13802  024F  0020               	movlb	0	; select bank0
 13803  0250  3543               	lslf	Battery_State_Machine@z,w
 13804  0251  3ECC               	addlw	(low (_IminCount| 0))& (0+255)
 13805  0252  0084               	movwf	4
 13806  0253  0185               	clrf	5
 13807  0254  3F40               	moviw [0]fsr1
 13808  0255  3F80               	movwi [0]fsr0
 13809  0256  3F41               	moviw [1]fsr1
 13810  0257  3F81               	movwi [1]fsr0
 13811                           
 13812                           ;battery_charger.c: 83: floatCount[z]=0;
 13813  0258  0843               	movf	Battery_State_Machine@z,w
 13814  0259  3ED8               	addlw	(low (_floatCount| 0))& (0+255)
 13815  025A  0086               	movwf	6
 13816  025B  0187               	clrf	7
 13817  025C  0181               	clrf	1
 13818                           
 13819                           ;battery_charger.c: 84: batteryState[z] = CHARGE;
 13820  025D  3004               	movlw	4
 13821  025E  00BE               	movwf	??_Battery_State_Machine
 13822  025F  0843               	movf	Battery_State_Machine@z,w
 13823  0260  3EE2               	addlw	(low (_batteryState| 0))& (0+255)
 13824  0261  0086               	movwf	6
 13825  0262  0187               	clrf	7
 13826  0263  083E               	movf	??_Battery_State_Machine,w
 13827  0264  0081               	movwf	1
 13828                           
 13829                           ;battery_charger.c: 85: }
 13830                           ;battery_charger.c: 86: }
 13831  0265  0008               	return
 13832  0266                     l2925:	
 13833                           
 13834                           ;battery_charger.c: 87: else
 13835                           ;battery_charger.c: 88: {
 13836                           ;battery_charger.c: 89: Vref[z]=1350+(int16_t)((250-batteryTemp)*.24);
 13837  0266  0021               	movlb	1	; select bank1
 13838  0267  096B               	comf	_batteryTemp^(0+128),w
 13839  0268  0020               	movlb	0	; select bank0
 13840  0269  00BE               	movwf	??_Battery_State_Machine
 13841  026A  0021               	movlb	1	; select bank1
 13842  026B  096C               	comf	(_batteryTemp+1)^(0+128),w
 13843  026C  0020               	movlb	0	; select bank0
 13844  026D  00BF               	movwf	??_Battery_State_Machine+1
 13845  026E  0ABE               	incf	??_Battery_State_Machine,f
 13846  026F  1903               	skipnz
 13847  0270  0ABF               	incf	??_Battery_State_Machine+1,f
 13848  0271  083E               	movf	??_Battery_State_Machine,w
 13849  0272  3EFA               	addlw	250
 13850  0273  00F8               	movwf	___awtoft@c
 13851  0274  3000               	movlw	0
 13852  0275  3D3F               	addwfc	??_Battery_State_Machine+1,w
 13853  0276  00F9               	movwf	___awtoft@c+1
 13854  0277  3193  238E  3181   	fcall	___awtoft
 13855  027A  0878               	movf	?___awtoft,w
 13856  027B  0020               	movlb	0	; select bank0
 13857  027C  00A3               	movwf	___ftmul@f2
 13858  027D  0879               	movf	?___awtoft+1,w
 13859  027E  00A4               	movwf	___ftmul@f2+1
 13860  027F  087A               	movf	?___awtoft+2,w
 13861  0280  00A5               	movwf	___ftmul@f2+2
 13862  0281  30C3               	movlw	195
 13863  0282  00A0               	movwf	___ftmul@f1
 13864  0283  3075               	movlw	117
 13865  0284  00A1               	movwf	___ftmul@f1+1
 13866  0285  303E               	movlw	62
 13867  0286  00A2               	movwf	___ftmul@f1+2
 13868  0287  318B  2319  3181   	fcall	___ftmul
 13869  028A  0020               	movlb	0	; select bank0
 13870  028B  0820               	movf	?___ftmul,w
 13871  028C  00B0               	movwf	___fttol@f1
 13872  028D  0821               	movf	?___ftmul+1,w
 13873  028E  00B1               	movwf	___fttol@f1+1
 13874  028F  0822               	movf	?___ftmul+2,w
 13875  0290  00B2               	movwf	___fttol@f1+2
 13876  0291  3189  2139         	fcall	___fttol
 13877  0293  0020               	movlb	0	; select bank0
 13878  0294  0830               	movf	?___fttol,w
 13879  0295  3E46               	addlw	70
 13880  0296  00C0               	movwf	??_Battery_State_Machine+2
 13881  0297  3005               	movlw	5
 13882  0298  3D31               	addwfc	?___fttol+1,w
 13883  0299  00C1               	movwf	??_Battery_State_Machine+3
 13884  029A  3543               	lslf	Battery_State_Machine@z,w
 13885  029B  3EC0               	addlw	(low (_Vref| 0))& (0+255)
 13886  029C  0086               	movwf	6
 13887  029D  0187               	clrf	7
 13888  029E  0840               	movf	??_Battery_State_Machine+2,w
 13889  029F  3FC0               	movwi [0]fsr1
 13890  02A0  0841               	movf	??_Battery_State_Machine+3,w
 13891  02A1  3FC1               	movwi [1]fsr1
 13892                           
 13893                           ;battery_charger.c: 90: Iref[z]=15;
 13894  02A2  3543               	lslf	Battery_State_Machine@z,w
 13895  02A3  3EC8               	addlw	(low (_Iref| 0))& (0+255)
 13896  02A4  0086               	movwf	6
 13897  02A5  0187               	clrf	7
 13898  02A6  300F               	movlw	15
 13899  02A7  3FC0               	movwi [0]fsr1
 13900  02A8  3000               	movlw	0
 13901  02A9  3FC1               	movwi [1]fsr1
 13902                           
 13903                           ;battery_charger.c: 91: Imode[z]=0;
 13904  02AA  0843               	movf	Battery_State_Machine@z,w
 13905  02AB  3EDE               	addlw	(low (_Imode| 0))& (0+255)
 13906  02AC  0086               	movwf	6
 13907  02AD  0187               	clrf	7
 13908  02AE  0181               	clrf	1
 13909                           
 13910                           ;battery_charger.c: 92: floatCount[z]=0;
 13911  02AF  0843               	movf	Battery_State_Machine@z,w
 13912  02B0  3ED8               	addlw	(low (_floatCount| 0))& (0+255)
 13913  02B1  0086               	movwf	6
 13914  02B2  0187               	clrf	7
 13915  02B3  0181               	clrf	1
 13916                           
 13917                           ;battery_charger.c: 93: }
 13918                           ;battery_charger.c: 94: }
 13919  02B4  0008               	return
 13920  02B5                     l2933:	
 13921                           
 13922                           ;battery_charger.c: 100: else
 13923                           ;battery_charger.c: 101: if(batteryState[z] == FAULT)
 13924  02B5  0843               	movf	Battery_State_Machine@z,w
 13925  02B6  3EE2               	addlw	(low (_batteryState| 0))& (0+255)
 13926  02B7  0086               	movwf	6
 13927  02B8  0187               	clrf	7
 13928  02B9  0301               	decf	1,w
 13929  02BA  1D03               	btfss	3,2
 13930  02BB  0008               	return
 13931                           
 13932                           ;battery_charger.c: 102: {
 13933                           ;battery_charger.c: 103: batteryState[z]=PRECHARGE;
 13934  02BC  3003               	movlw	3
 13935  02BD  00BE               	movwf	??_Battery_State_Machine
 13936  02BE  0843               	movf	Battery_State_Machine@z,w
 13937  02BF  3EE2               	addlw	(low (_batteryState| 0))& (0+255)
 13938  02C0  0086               	movwf	6
 13939  02C1  0187               	clrf	7
 13940  02C2  083E               	movf	??_Battery_State_Machine,w
 13941  02C3  0081               	movwf	1
 13942  02C4  0008               	return
 13943  02C5                     __end_of_Battery_State_Machine:	
 13944                           
 13945                           	psect	text39
 13946  0939                     __ptext39:	
 13947 ;; *************** function ___fttol *****************
 13948 ;; Defined at:
 13949 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
 13950 ;; Parameters:    Size  Location     Type
 13951 ;;  f1              3   16[BANK0 ] float 
 13952 ;; Auto vars:     Size  Location     Type
 13953 ;;  lval            4   25[BANK0 ] unsigned long 
 13954 ;;  exp1            1   29[BANK0 ] unsigned char 
 13955 ;;  sign1           1   24[BANK0 ] unsigned char 
 13956 ;; Return value:  Size  Location     Type
 13957 ;;                  4   16[BANK0 ] long 
 13958 ;; Registers used:
 13959 ;;		wreg, status,2, status,0
 13960 ;; Tracked objects:
 13961 ;;		On entry : 0/0
 13962 ;;		On exit  : 0/0
 13963 ;;		Unchanged: 0/0
 13964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13965 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13966 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13967 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13968 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13969 ;;Total ram usage:       14 bytes
 13970 ;; Hardware stack levels used:    1
 13971 ;; This function calls:
 13972 ;;		Nothing
 13973 ;; This function is called by:
 13974 ;;		_tempCalc
 13975 ;;		_main
 13976 ;;		_calculateCurrent0
 13977 ;;		_calculateCurrent1
 13978 ;;		_calculateCurrent2
 13979 ;;		_calculateCurrent3
 13980 ;;		_Init_Battery_State_Machine
 13981 ;;		_Battery_State_Machine
 13982 ;;		_cc_cv_mode
 13983 ;; This function uses a non-reentrant model
 13984 ;;
 13985                           
 13986                           
 13987                           ;psect for function ___fttol
 13988  0939                     ___fttol:	
 13989                           
 13990                           ;incstack = 0
 13991                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13992  0939  0020               	movlb	0	; select bank0
 13993  093A  0830               	movf	___fttol@f1,w
 13994  093B  00B4               	movwf	??___fttol
 13995  093C  0831               	movf	___fttol@f1+1,w
 13996  093D  00B5               	movwf	??___fttol+1
 13997  093E  0832               	movf	___fttol@f1+2,w
 13998  093F  00B6               	movwf	??___fttol+2
 13999  0940  1003               	clrc
 14000  0941  0D35               	rlf	??___fttol+1,w
 14001  0942  0D36               	rlf	??___fttol+2,w
 14002  0943  00B7               	movwf	??___fttol+3
 14003  0944  0837               	movf	??___fttol+3,w
 14004  0945  00BD               	movwf	___fttol@exp1
 14005  0946  083D               	movf	___fttol@exp1,w
 14006  0947  1D03               	btfss	3,2
 14007  0948  2952               	goto	l2443
 14008  0949  3000               	movlw	0
 14009  094A  00B3               	movwf	?___fttol+3
 14010  094B  3000               	movlw	0
 14011  094C  00B2               	movwf	?___fttol+2
 14012  094D  3000               	movlw	0
 14013  094E  00B1               	movwf	?___fttol+1
 14014  094F  3000               	movlw	0
 14015  0950  00B0               	movwf	?___fttol
 14016  0951  0008               	return
 14017  0952                     l2443:	
 14018  0952  0830               	movf	___fttol@f1,w
 14019  0953  00B4               	movwf	??___fttol
 14020  0954  0831               	movf	___fttol@f1+1,w
 14021  0955  00B5               	movwf	??___fttol+1
 14022  0956  0832               	movf	___fttol@f1+2,w
 14023  0957  00B6               	movwf	??___fttol+2
 14024  0958  3017               	movlw	23
 14025  0959                     u2595:	
 14026  0959  36B6               	lsrf	??___fttol+2,f
 14027  095A  0CB5               	rrf	??___fttol+1,f
 14028  095B  0CB4               	rrf	??___fttol,f
 14029  095C  0B89               	decfsz	9,f
 14030  095D  2959               	goto	u2595
 14031  095E  0834               	movf	??___fttol,w
 14032  095F  00B7               	movwf	??___fttol+3
 14033  0960  0837               	movf	??___fttol+3,w
 14034  0961  00B8               	movwf	___fttol@sign1
 14035  0962  17B1               	bsf	___fttol@f1+1,7
 14036  0963  30FF               	movlw	255
 14037  0964  05B0               	andwf	___fttol@f1,f
 14038  0965  30FF               	movlw	255
 14039  0966  05B1               	andwf	___fttol@f1+1,f
 14040  0967  3000               	movlw	0
 14041  0968  05B2               	andwf	___fttol@f1+2,f
 14042  0969  0830               	movf	___fttol@f1,w
 14043  096A  00B9               	movwf	___fttol@lval
 14044  096B  0831               	movf	___fttol@f1+1,w
 14045  096C  00BA               	movwf	___fttol@lval+1
 14046  096D  0832               	movf	___fttol@f1+2,w
 14047  096E  00BB               	movwf	___fttol@lval+2
 14048  096F  01BC               	clrf	___fttol@lval+3
 14049  0970  308E               	movlw	142
 14050  0971  02BD               	subwf	___fttol@exp1,f
 14051  0972  1FBD               	btfss	___fttol@exp1,7
 14052  0973  2990               	goto	l2463
 14053  0974  083D               	movf	___fttol@exp1,w
 14054  0975  3A80               	xorlw	128
 14055  0976  3E8F               	addlw	143
 14056  0977  1803               	skipnc
 14057  0978  2982               	goto	l2461
 14058  0979  3000               	movlw	0
 14059  097A  00B3               	movwf	?___fttol+3
 14060  097B  3000               	movlw	0
 14061  097C  00B2               	movwf	?___fttol+2
 14062  097D  3000               	movlw	0
 14063  097E  00B1               	movwf	?___fttol+1
 14064  097F  3000               	movlw	0
 14065  0980  00B0               	movwf	?___fttol
 14066  0981  0008               	return
 14067  0982                     l2461:	
 14068  0982  3001               	movlw	1
 14069  0983                     u2625:	
 14070  0983  36BC               	lsrf	___fttol@lval+3,f
 14071  0984  0CBB               	rrf	___fttol@lval+2,f
 14072  0985  0CBA               	rrf	___fttol@lval+1,f
 14073  0986  0CB9               	rrf	___fttol@lval,f
 14074  0987  0B89               	decfsz	9,f
 14075  0988  2983               	goto	u2625
 14076  0989  3001               	movlw	1
 14077  098A  00B4               	movwf	??___fttol
 14078  098B  0834               	movf	??___fttol,w
 14079  098C  07BD               	addwf	___fttol@exp1,f
 14080  098D  1903               	btfsc	3,2
 14081  098E  29A9               	goto	l2471
 14082  098F  2982               	goto	l2461
 14083  0990                     l2463:	
 14084  0990  3018               	movlw	24
 14085  0991  023D               	subwf	___fttol@exp1,w
 14086  0992  1C03               	skipc
 14087  0993  29A6               	goto	l841
 14088  0994  3000               	movlw	0
 14089  0995  00B3               	movwf	?___fttol+3
 14090  0996  3000               	movlw	0
 14091  0997  00B2               	movwf	?___fttol+2
 14092  0998  3000               	movlw	0
 14093  0999  00B1               	movwf	?___fttol+1
 14094  099A  3000               	movlw	0
 14095  099B  00B0               	movwf	?___fttol
 14096  099C  0008               	return
 14097  099D                     l2469:	
 14098  099D  3001               	movlw	1
 14099  099E                     u2655:	
 14100  099E  35B9               	lslf	___fttol@lval,f
 14101  099F  0DBA               	rlf	___fttol@lval+1,f
 14102  09A0  0DBB               	rlf	___fttol@lval+2,f
 14103  09A1  0DBC               	rlf	___fttol@lval+3,f
 14104  09A2  0B89               	decfsz	9,f
 14105  09A3  299E               	goto	u2655
 14106  09A4  3001               	movlw	1
 14107  09A5  02BD               	subwf	___fttol@exp1,f
 14108  09A6                     l841:	
 14109  09A6  083D               	movf	___fttol@exp1,w
 14110  09A7  1D03               	btfss	3,2
 14111  09A8  299D               	goto	l2469
 14112  09A9                     l2471:	
 14113  09A9  0838               	movf	___fttol@sign1,w
 14114  09AA  1903               	btfsc	3,2
 14115  09AB  29B7               	goto	l2475
 14116  09AC  09B9               	comf	___fttol@lval,f
 14117  09AD  09BA               	comf	___fttol@lval+1,f
 14118  09AE  09BB               	comf	___fttol@lval+2,f
 14119  09AF  09BC               	comf	___fttol@lval+3,f
 14120  09B0  0AB9               	incf	___fttol@lval,f
 14121  09B1  1903               	skipnz
 14122  09B2  0ABA               	incf	___fttol@lval+1,f
 14123  09B3  1903               	skipnz
 14124  09B4  0ABB               	incf	___fttol@lval+2,f
 14125  09B5  1903               	skipnz
 14126  09B6  0ABC               	incf	___fttol@lval+3,f
 14127  09B7                     l2475:	
 14128  09B7  083C               	movf	___fttol@lval+3,w
 14129  09B8  00B3               	movwf	?___fttol+3
 14130  09B9  083B               	movf	___fttol@lval+2,w
 14131  09BA  00B2               	movwf	?___fttol+2
 14132  09BB  083A               	movf	___fttol@lval+1,w
 14133  09BC  00B1               	movwf	?___fttol+1
 14134  09BD  0839               	movf	___fttol@lval,w
 14135  09BE  00B0               	movwf	?___fttol
 14136  09BF  0008               	return
 14137  09C0                     __end_of___fttol:	
 14138                           
 14139                           	psect	text40
 14140  0B19                     __ptext40:	
 14141 ;; *************** function ___ftmul *****************
 14142 ;; Defined at:
 14143 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
 14144 ;; Parameters:    Size  Location     Type
 14145 ;;  f1              3    0[BANK0 ] float 
 14146 ;;  f2              3    3[BANK0 ] float 
 14147 ;; Auto vars:     Size  Location     Type
 14148 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
 14149 ;;  sign            1   15[BANK0 ] unsigned char 
 14150 ;;  cntr            1   14[BANK0 ] unsigned char 
 14151 ;;  exp             1   10[BANK0 ] unsigned char 
 14152 ;; Return value:  Size  Location     Type
 14153 ;;                  3    0[BANK0 ] float 
 14154 ;; Registers used:
 14155 ;;		wreg, status,2, status,0, pclath, cstack
 14156 ;; Tracked objects:
 14157 ;;		On entry : 0/0
 14158 ;;		On exit  : 0/0
 14159 ;;		Unchanged: 0/0
 14160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14161 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14162 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14163 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14164 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14165 ;;Total ram usage:       16 bytes
 14166 ;; Hardware stack levels used:    1
 14167 ;; Hardware stack levels required when called:    1
 14168 ;; This function calls:
 14169 ;;		___ftpack
 14170 ;; This function is called by:
 14171 ;;		_Init_Battery_State_Machine
 14172 ;;		_Battery_State_Machine
 14173 ;;		_cc_cv_mode
 14174 ;;		_tempCalc
 14175 ;;		_log
 14176 ;;		_eval_poly
 14177 ;; This function uses a non-reentrant model
 14178 ;;
 14179                           
 14180                           
 14181                           ;psect for function ___ftmul
 14182  0B19                     ___ftmul:	
 14183                           
 14184                           ;incstack = 0
 14185                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14186  0B19  0020               	movlb	0	; select bank0
 14187  0B1A  0820               	movf	___ftmul@f1,w
 14188  0B1B  00A6               	movwf	??___ftmul
 14189  0B1C  0821               	movf	___ftmul@f1+1,w
 14190  0B1D  00A7               	movwf	??___ftmul+1
 14191  0B1E  0822               	movf	___ftmul@f1+2,w
 14192  0B1F  00A8               	movwf	??___ftmul+2
 14193  0B20  1003               	clrc
 14194  0B21  0D27               	rlf	??___ftmul+1,w
 14195  0B22  0D28               	rlf	??___ftmul+2,w
 14196  0B23  00A9               	movwf	??___ftmul+3
 14197  0B24  0829               	movf	??___ftmul+3,w
 14198  0B25  00AA               	movwf	___ftmul@exp
 14199  0B26  082A               	movf	___ftmul@exp,w
 14200  0B27  1D03               	btfss	3,2
 14201  0B28  2B30               	goto	l2359
 14202  0B29  3000               	movlw	0
 14203  0B2A  00A0               	movwf	?___ftmul
 14204  0B2B  3000               	movlw	0
 14205  0B2C  00A1               	movwf	?___ftmul+1
 14206  0B2D  3000               	movlw	0
 14207  0B2E  00A2               	movwf	?___ftmul+2
 14208  0B2F  0008               	return
 14209  0B30                     l2359:	
 14210  0B30  0823               	movf	___ftmul@f2,w
 14211  0B31  00A6               	movwf	??___ftmul
 14212  0B32  0824               	movf	___ftmul@f2+1,w
 14213  0B33  00A7               	movwf	??___ftmul+1
 14214  0B34  0825               	movf	___ftmul@f2+2,w
 14215  0B35  00A8               	movwf	??___ftmul+2
 14216  0B36  1003               	clrc
 14217  0B37  0D27               	rlf	??___ftmul+1,w
 14218  0B38  0D28               	rlf	??___ftmul+2,w
 14219  0B39  00A9               	movwf	??___ftmul+3
 14220  0B3A  0829               	movf	??___ftmul+3,w
 14221  0B3B  00AF               	movwf	___ftmul@sign
 14222  0B3C  082F               	movf	___ftmul@sign,w
 14223  0B3D  1D03               	btfss	3,2
 14224  0B3E  2B46               	goto	l2365
 14225  0B3F  3000               	movlw	0
 14226  0B40  00A0               	movwf	?___ftmul
 14227  0B41  3000               	movlw	0
 14228  0B42  00A1               	movwf	?___ftmul+1
 14229  0B43  3000               	movlw	0
 14230  0B44  00A2               	movwf	?___ftmul+2
 14231  0B45  0008               	return
 14232  0B46                     l2365:	
 14233  0B46  082F               	movf	___ftmul@sign,w
 14234  0B47  3E7B               	addlw	123
 14235  0B48  00A6               	movwf	??___ftmul
 14236  0B49  0826               	movf	??___ftmul,w
 14237  0B4A  07AA               	addwf	___ftmul@exp,f
 14238  0B4B  0820               	movf	___ftmul@f1,w
 14239  0B4C  00A6               	movwf	??___ftmul
 14240  0B4D  0821               	movf	___ftmul@f1+1,w
 14241  0B4E  00A7               	movwf	??___ftmul+1
 14242  0B4F  0822               	movf	___ftmul@f1+2,w
 14243  0B50  00A8               	movwf	??___ftmul+2
 14244  0B51  3010               	movlw	16
 14245  0B52                     u2445:	
 14246  0B52  36A8               	lsrf	??___ftmul+2,f
 14247  0B53  0CA7               	rrf	??___ftmul+1,f
 14248  0B54  0CA6               	rrf	??___ftmul,f
 14249  0B55  0B89               	decfsz	9,f
 14250  0B56  2B52               	goto	u2445
 14251  0B57  0826               	movf	??___ftmul,w
 14252  0B58  00A9               	movwf	??___ftmul+3
 14253  0B59  0829               	movf	??___ftmul+3,w
 14254  0B5A  00AF               	movwf	___ftmul@sign
 14255  0B5B  0823               	movf	___ftmul@f2,w
 14256  0B5C  00A6               	movwf	??___ftmul
 14257  0B5D  0824               	movf	___ftmul@f2+1,w
 14258  0B5E  00A7               	movwf	??___ftmul+1
 14259  0B5F  0825               	movf	___ftmul@f2+2,w
 14260  0B60  00A8               	movwf	??___ftmul+2
 14261  0B61  3010               	movlw	16
 14262  0B62                     u2455:	
 14263  0B62  36A8               	lsrf	??___ftmul+2,f
 14264  0B63  0CA7               	rrf	??___ftmul+1,f
 14265  0B64  0CA6               	rrf	??___ftmul,f
 14266  0B65  0B89               	decfsz	9,f
 14267  0B66  2B62               	goto	u2455
 14268  0B67  0826               	movf	??___ftmul,w
 14269  0B68  00A9               	movwf	??___ftmul+3
 14270  0B69  0829               	movf	??___ftmul+3,w
 14271  0B6A  06AF               	xorwf	___ftmul@sign,f
 14272  0B6B  3080               	movlw	128
 14273  0B6C  00A6               	movwf	??___ftmul
 14274  0B6D  0826               	movf	??___ftmul,w
 14275  0B6E  05AF               	andwf	___ftmul@sign,f
 14276  0B6F  17A1               	bsf	___ftmul@f1+1,7
 14277  0B70  17A4               	bsf	___ftmul@f2+1,7
 14278  0B71  30FF               	movlw	255
 14279  0B72  05A3               	andwf	___ftmul@f2,f
 14280  0B73  30FF               	movlw	255
 14281  0B74  05A4               	andwf	___ftmul@f2+1,f
 14282  0B75  3000               	movlw	0
 14283  0B76  05A5               	andwf	___ftmul@f2+2,f
 14284  0B77  3000               	movlw	0
 14285  0B78  00AB               	movwf	___ftmul@f3_as_product
 14286  0B79  3000               	movlw	0
 14287  0B7A  00AC               	movwf	___ftmul@f3_as_product+1
 14288  0B7B  3000               	movlw	0
 14289  0B7C  00AD               	movwf	___ftmul@f3_as_product+2
 14290  0B7D  3007               	movlw	7
 14291  0B7E  00A6               	movwf	??___ftmul
 14292  0B7F  0826               	movf	??___ftmul,w
 14293  0B80  00AE               	movwf	___ftmul@cntr
 14294  0B81                     l2377:	
 14295  0B81  1C20               	btfss	___ftmul@f1,0
 14296  0B82  2B89               	goto	l2381
 14297  0B83  0823               	movf	___ftmul@f2,w
 14298  0B84  07AB               	addwf	___ftmul@f3_as_product,f
 14299  0B85  0824               	movf	___ftmul@f2+1,w
 14300  0B86  3DAC               	addwfc	___ftmul@f3_as_product+1,f
 14301  0B87  0825               	movf	___ftmul@f2+2,w
 14302  0B88  3DAD               	addwfc	___ftmul@f3_as_product+2,f
 14303  0B89                     l2381:	
 14304  0B89  3001               	movlw	1
 14305  0B8A                     u2475:	
 14306  0B8A  36A2               	lsrf	___ftmul@f1+2,f
 14307  0B8B  0CA1               	rrf	___ftmul@f1+1,f
 14308  0B8C  0CA0               	rrf	___ftmul@f1,f
 14309  0B8D  0B89               	decfsz	9,f
 14310  0B8E  2B8A               	goto	u2475
 14311  0B8F  3001               	movlw	1
 14312  0B90                     u2485:	
 14313  0B90  35A3               	lslf	___ftmul@f2,f
 14314  0B91  0DA4               	rlf	___ftmul@f2+1,f
 14315  0B92  0DA5               	rlf	___ftmul@f2+2,f
 14316  0B93  0B89               	decfsz	9,f
 14317  0B94  2B90               	goto	u2485
 14318  0B95  3001               	movlw	1
 14319  0B96  02AE               	subwf	___ftmul@cntr,f
 14320  0B97  1D03               	btfss	3,2
 14321  0B98  2B81               	goto	l2377
 14322  0B99  3009               	movlw	9
 14323  0B9A  00A6               	movwf	??___ftmul
 14324  0B9B  0826               	movf	??___ftmul,w
 14325  0B9C  00AE               	movwf	___ftmul@cntr
 14326  0B9D                     l2389:	
 14327  0B9D  1C20               	btfss	___ftmul@f1,0
 14328  0B9E  2BA5               	goto	l2393
 14329  0B9F  0823               	movf	___ftmul@f2,w
 14330  0BA0  07AB               	addwf	___ftmul@f3_as_product,f
 14331  0BA1  0824               	movf	___ftmul@f2+1,w
 14332  0BA2  3DAC               	addwfc	___ftmul@f3_as_product+1,f
 14333  0BA3  0825               	movf	___ftmul@f2+2,w
 14334  0BA4  3DAD               	addwfc	___ftmul@f3_as_product+2,f
 14335  0BA5                     l2393:	
 14336  0BA5  3001               	movlw	1
 14337  0BA6                     u2515:	
 14338  0BA6  36A2               	lsrf	___ftmul@f1+2,f
 14339  0BA7  0CA1               	rrf	___ftmul@f1+1,f
 14340  0BA8  0CA0               	rrf	___ftmul@f1,f
 14341  0BA9  0B89               	decfsz	9,f
 14342  0BAA  2BA6               	goto	u2515
 14343  0BAB  3001               	movlw	1
 14344  0BAC                     u2525:	
 14345  0BAC  36AD               	lsrf	___ftmul@f3_as_product+2,f
 14346  0BAD  0CAC               	rrf	___ftmul@f3_as_product+1,f
 14347  0BAE  0CAB               	rrf	___ftmul@f3_as_product,f
 14348  0BAF  0B89               	decfsz	9,f
 14349  0BB0  2BAC               	goto	u2525
 14350  0BB1  3001               	movlw	1
 14351  0BB2  02AE               	subwf	___ftmul@cntr,f
 14352  0BB3  1D03               	btfss	3,2
 14353  0BB4  2B9D               	goto	l2389
 14354  0BB5  082B               	movf	___ftmul@f3_as_product,w
 14355  0BB6  00F0               	movwf	___ftpack@arg
 14356  0BB7  082C               	movf	___ftmul@f3_as_product+1,w
 14357  0BB8  00F1               	movwf	___ftpack@arg+1
 14358  0BB9  082D               	movf	___ftmul@f3_as_product+2,w
 14359  0BBA  00F2               	movwf	___ftpack@arg+2
 14360  0BBB  082A               	movf	___ftmul@exp,w
 14361  0BBC  00A6               	movwf	??___ftmul
 14362  0BBD  0826               	movf	??___ftmul,w
 14363  0BBE  00F3               	movwf	___ftpack@exp
 14364  0BBF  082F               	movf	___ftmul@sign,w
 14365  0BC0  00A7               	movwf	??___ftmul+1
 14366  0BC1  0827               	movf	??___ftmul+1,w
 14367  0BC2  00F4               	movwf	___ftpack@sign
 14368  0BC3  3197  2735         	fcall	___ftpack
 14369  0BC5  0870               	movf	?___ftpack,w
 14370  0BC6  0020               	movlb	0	; select bank0
 14371  0BC7  00A0               	movwf	?___ftmul
 14372  0BC8  0871               	movf	?___ftpack+1,w
 14373  0BC9  00A1               	movwf	?___ftmul+1
 14374  0BCA  0872               	movf	?___ftpack+2,w
 14375  0BCB  00A2               	movwf	?___ftmul+2
 14376  0BCC  0008               	return
 14377  0BCD                     __end_of___ftmul:	
 14378                           
 14379                           	psect	text41
 14380  138E                     __ptext41:	
 14381 ;; *************** function ___awtoft *****************
 14382 ;; Defined at:
 14383 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awtoft.c"
 14384 ;; Parameters:    Size  Location     Type
 14385 ;;  c               2    8[COMMON] int 
 14386 ;; Auto vars:     Size  Location     Type
 14387 ;;  sign            1   13[COMMON] unsigned char 
 14388 ;; Return value:  Size  Location     Type
 14389 ;;                  3    8[COMMON] float 
 14390 ;; Registers used:
 14391 ;;		wreg, status,2, status,0, pclath, cstack
 14392 ;; Tracked objects:
 14393 ;;		On entry : 0/0
 14394 ;;		On exit  : 0/0
 14395 ;;		Unchanged: 0/0
 14396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14397 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14398 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14399 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14400 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14401 ;;Total ram usage:        6 bytes
 14402 ;; Hardware stack levels used:    1
 14403 ;; Hardware stack levels required when called:    1
 14404 ;; This function calls:
 14405 ;;		___ftpack
 14406 ;; This function is called by:
 14407 ;;		_Init_Battery_State_Machine
 14408 ;;		_Battery_State_Machine
 14409 ;;		_cc_cv_mode
 14410 ;;		_tempCalc
 14411 ;;		_main
 14412 ;;		_calculateCurrent0
 14413 ;;		_calculateCurrent1
 14414 ;;		_calculateCurrent2
 14415 ;;		_calculateCurrent3
 14416 ;;		_log
 14417 ;; This function uses a non-reentrant model
 14418 ;;
 14419                           
 14420                           
 14421                           ;psect for function ___awtoft
 14422  138E                     ___awtoft:	
 14423                           
 14424                           ;incstack = 0
 14425                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14426  138E  01FD               	clrf	___awtoft@sign
 14427  138F  1FF9               	btfss	___awtoft@c+1,7
 14428  1390  2B98               	goto	l2413
 14429  1391  09F8               	comf	___awtoft@c,f
 14430  1392  09F9               	comf	___awtoft@c+1,f
 14431  1393  0AF8               	incf	___awtoft@c,f
 14432  1394  1903               	skipnz
 14433  1395  0AF9               	incf	___awtoft@c+1,f
 14434  1396  01FD               	clrf	___awtoft@sign
 14435  1397  0AFD               	incf	___awtoft@sign,f
 14436  1398                     l2413:	
 14437  1398  0878               	movf	___awtoft@c,w
 14438  1399  00F0               	movwf	___ftpack@arg
 14439  139A  0879               	movf	___awtoft@c+1,w
 14440  139B  00F1               	movwf	___ftpack@arg+1
 14441  139C  01F2               	clrf	___ftpack@arg+2
 14442  139D  308E               	movlw	142
 14443  139E  00FB               	movwf	??___awtoft
 14444  139F  087B               	movf	??___awtoft,w
 14445  13A0  00F3               	movwf	___ftpack@exp
 14446  13A1  087D               	movf	___awtoft@sign,w
 14447  13A2  00FC               	movwf	??___awtoft+1
 14448  13A3  087C               	movf	??___awtoft+1,w
 14449  13A4  00F4               	movwf	___ftpack@sign
 14450  13A5  3197  2735         	fcall	___ftpack
 14451  13A7  0870               	movf	?___ftpack,w
 14452  13A8  00F8               	movwf	?___awtoft
 14453  13A9  0871               	movf	?___ftpack+1,w
 14454  13AA  00F9               	movwf	?___awtoft+1
 14455  13AB  0872               	movf	?___ftpack+2,w
 14456  13AC  00FA               	movwf	?___awtoft+2
 14457  13AD  0008               	return
 14458  13AE                     __end_of___awtoft:	
 14459                           
 14460                           	psect	text42
 14461  1735                     __ptext42:	
 14462 ;; *************** function ___ftpack *****************
 14463 ;; Defined at:
 14464 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
 14465 ;; Parameters:    Size  Location     Type
 14466 ;;  arg             3    0[COMMON] unsigned um
 14467 ;;  exp             1    3[COMMON] unsigned char 
 14468 ;;  sign            1    4[COMMON] unsigned char 
 14469 ;; Auto vars:     Size  Location     Type
 14470 ;;		None
 14471 ;; Return value:  Size  Location     Type
 14472 ;;                  3    0[COMMON] float 
 14473 ;; Registers used:
 14474 ;;		wreg, status,2, status,0
 14475 ;; Tracked objects:
 14476 ;;		On entry : 0/0
 14477 ;;		On exit  : 0/0
 14478 ;;		Unchanged: 0/0
 14479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14480 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14482 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14483 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14484 ;;Total ram usage:        8 bytes
 14485 ;; Hardware stack levels used:    1
 14486 ;; This function calls:
 14487 ;;		Nothing
 14488 ;; This function is called by:
 14489 ;;		___awtoft
 14490 ;;		___ftadd
 14491 ;;		___ftdiv
 14492 ;;		___ftmul
 14493 ;; This function uses a non-reentrant model
 14494 ;;
 14495                           
 14496                           
 14497                           ;psect for function ___ftpack
 14498  1735                     ___ftpack:	
 14499                           
 14500                           ;incstack = 0
 14501                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14502  1735  0873               	movf	___ftpack@exp,w
 14503  1736  1903               	btfsc	3,2
 14504  1737  2F3D               	goto	l2219
 14505  1738  0872               	movf	___ftpack@arg+2,w
 14506  1739  0471               	iorwf	___ftpack@arg+1,w
 14507  173A  0470               	iorwf	___ftpack@arg,w
 14508  173B  1D03               	skipz
 14509  173C  2F4E               	goto	l2225
 14510  173D                     l2219:	
 14511  173D  3000               	movlw	0
 14512  173E  00F0               	movwf	?___ftpack
 14513  173F  3000               	movlw	0
 14514  1740  00F1               	movwf	?___ftpack+1
 14515  1741  3000               	movlw	0
 14516  1742  00F2               	movwf	?___ftpack+2
 14517  1743  0008               	return
 14518  1744                     l2223:	
 14519  1744  3001               	movlw	1
 14520  1745  00F5               	movwf	??___ftpack
 14521  1746  0875               	movf	??___ftpack,w
 14522  1747  07F3               	addwf	___ftpack@exp,f
 14523  1748  3001               	movlw	1
 14524  1749                     u2015:	
 14525  1749  36F2               	lsrf	___ftpack@arg+2,f
 14526  174A  0CF1               	rrf	___ftpack@arg+1,f
 14527  174B  0CF0               	rrf	___ftpack@arg,f
 14528  174C  0B89               	decfsz	9,f
 14529  174D  2F49               	goto	u2015
 14530  174E                     l2225:	
 14531  174E  30FE               	movlw	254
 14532  174F  0572               	andwf	___ftpack@arg+2,w
 14533  1750  1903               	btfsc	3,2
 14534  1751  2F67               	goto	l750
 14535  1752  2F44               	goto	l2223
 14536  1753                     l2227:	
 14537  1753  3001               	movlw	1
 14538  1754  00F5               	movwf	??___ftpack
 14539  1755  0875               	movf	??___ftpack,w
 14540  1756  07F3               	addwf	___ftpack@exp,f
 14541  1757  3001               	movlw	1
 14542  1758  07F0               	addwf	___ftpack@arg,f
 14543  1759  3000               	movlw	0
 14544  175A  1803               	skipnc
 14545  175B  3001               	movlw	1
 14546  175C  07F1               	addwf	___ftpack@arg+1,f
 14547  175D  3000               	movlw	0
 14548  175E  1803               	skipnc
 14549  175F  3001               	movlw	1
 14550  1760  07F2               	addwf	___ftpack@arg+2,f
 14551  1761  3001               	movlw	1
 14552  1762                     u2035:	
 14553  1762  36F2               	lsrf	___ftpack@arg+2,f
 14554  1763  0CF1               	rrf	___ftpack@arg+1,f
 14555  1764  0CF0               	rrf	___ftpack@arg,f
 14556  1765  0B89               	decfsz	9,f
 14557  1766  2F62               	goto	u2035
 14558  1767                     l750:	
 14559  1767  30FF               	movlw	255
 14560  1768  0572               	andwf	___ftpack@arg+2,w
 14561  1769  1903               	btfsc	3,2
 14562  176A  2F74               	goto	l2235
 14563  176B  2F53               	goto	l2227
 14564  176C                     l2233:	
 14565  176C  3001               	movlw	1
 14566  176D  02F3               	subwf	___ftpack@exp,f
 14567  176E  3001               	movlw	1
 14568  176F                     u2055:	
 14569  176F  35F0               	lslf	___ftpack@arg,f
 14570  1770  0DF1               	rlf	___ftpack@arg+1,f
 14571  1771  0DF2               	rlf	___ftpack@arg+2,f
 14572  1772  0B89               	decfsz	9,f
 14573  1773  2F6F               	goto	u2055
 14574  1774                     l2235:	
 14575  1774  1BF1               	btfsc	___ftpack@arg+1,7
 14576  1775  2F7A               	goto	l757
 14577  1776  3002               	movlw	2
 14578  1777  0273               	subwf	___ftpack@exp,w
 14579  1778  1803               	skipnc
 14580  1779  2F6C               	goto	l2233
 14581  177A                     l757:	
 14582  177A  1873               	btfsc	___ftpack@exp,0
 14583  177B  2F82               	goto	l758
 14584  177C  30FF               	movlw	255
 14585  177D  05F0               	andwf	___ftpack@arg,f
 14586  177E  307F               	movlw	127
 14587  177F  05F1               	andwf	___ftpack@arg+1,f
 14588  1780  30FF               	movlw	255
 14589  1781  05F2               	andwf	___ftpack@arg+2,f
 14590  1782                     l758:	
 14591  1782  1003               	clrc
 14592  1783  0CF3               	rrf	___ftpack@exp,f
 14593  1784  0873               	movf	___ftpack@exp,w
 14594  1785  00F5               	movwf	??___ftpack
 14595  1786  01F6               	clrf	??___ftpack+1
 14596  1787  01F7               	clrf	??___ftpack+2
 14597  1788  3010               	movlw	16
 14598  1789                     u2095:	
 14599  1789  35F5               	lslf	??___ftpack,f
 14600  178A  0DF6               	rlf	??___ftpack+1,f
 14601  178B  0DF7               	rlf	??___ftpack+2,f
 14602  178C  0B89               	decfsz	9,f
 14603  178D  2F89               	goto	u2095
 14604  178E  0875               	movf	??___ftpack,w
 14605  178F  04F0               	iorwf	___ftpack@arg,f
 14606  1790  0876               	movf	??___ftpack+1,w
 14607  1791  04F1               	iorwf	___ftpack@arg+1,f
 14608  1792  0877               	movf	??___ftpack+2,w
 14609  1793  04F2               	iorwf	___ftpack@arg+2,f
 14610  1794  0874               	movf	___ftpack@sign,w
 14611  1795  1903               	btfsc	3,2
 14612  1796  0008               	return
 14613  1797  17F2               	bsf	___ftpack@arg+2,7
 14614  1798  0008               	return
 14615  1799                     __end_of___ftpack:	
 14616  007E                     btemp	set	126	;btemp
 14617  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    330
    Data        10
    BSS         96
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     79      79
    BANK1            80      0      77
    BANK2            80      0      29
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            48      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    LCDWriteString@characters	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _main->_LCDWriteString
    _main->___awtoft
    _tempCalc->___awtoft
    _log->___awtoft
    ___ftadd->___awtoft
    _readIAnalog->___aldiv
    _readButton->_ADCRead
    _cc_cv_mode->___awtoft
    _calculateCurrent3->___awtoft
    _calculateCurrent2->___awtoft
    _calculateCurrent1->___awtoft
    _calculateCurrent0->___awtoft
    ___ftdiv->___awtoft
    _LCDInit->_LCDWrite
    _LCDClear->_gotoXY
    _gotoXY->_LCDWrite
    _Init_Battery_State_Machine->___awtoft
    _LCDWriteString->_LCDWriteCharacter
    _LCDWriteInt->_LCDWriteCharacter
    _LCDWriteCharacter->___wmul
    _Battery_State_Machine->___awtoft
    ___fttol->___awtoft
    ___ftmul->___awtoft
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_tempCalc
    _tempCalc->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftadd->___ftmul
    _readIAnalog->___aldiv
    _cc_cv_mode->___fttol
    _calculateCurrent3->___fttol
    _calculateCurrent2->___fttol
    _calculateCurrent1->___fttol
    _calculateCurrent0->___fttol
    _SYSTEM_Initialize->_Init_Battery_State_Machine
    _Init_Battery_State_Machine->___fttol
    _Battery_State_Machine->___fttol
    ___fttol->___ftdiv
    ___fttol->___ftmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0  110594
                                             56 BANK0     23    23      0
                            _ADCRead
              _Battery_State_Machine
                           _LCDClear
                            _LCDInit
                  _LCDWriteCharacter
                        _LCDWriteInt
                     _LCDWriteString
                 _PWM6_LoadDutyValue
                 _PWM7_LoadDutyValue
                  _SYSTEM_Initialize
                           ___awtoft
                            ___ftdiv
                            ___fttol
                  _calculateCurrent0
                  _calculateCurrent1
                  _calculateCurrent2
                  _calculateCurrent3
                         _cc_cv_mode
                             _gotoXY
                         _readButton
                        _readIAnalog
                           _tempCalc
 ---------------------------------------------------------------------------------
 (1) _tempCalc                                            11     9      2   33648
                                             45 BANK0     11     9      2
                            _ADCRead (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                            ___fttol
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   17068
                                             39 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     330
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           10     3      7    7315
                                             29 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     322
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3356
                                             29 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3183
                                             16 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (1) _readIAnalog                                         24    22      2    1498
                                              9 COMMON     4     4      0
                                              6 BANK0     20    18      2
                            _ADCRead
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     406
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _readButton                                           2     2      0      22
                                              4 COMMON     2     2      0
                            _ADCRead
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     1      3      22
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _cc_cv_mode                                           8     8      0    6900
                                             30 BANK0      8     8      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent3                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent2                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent1                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent0                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3365
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    2     2      0   10373
                                             35 BANK0      2     2      0
                     _ADC_Initialize
         _Init_Battery_State_Machine
                           _LCDClear
                            _LCDInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PWM_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              1     1      0     803
                                              5 COMMON     1     1      0
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             3     3      0    3021
                                              8 COMMON     3     3      0
                           _LCDWrite
                             _gotoXY
 ---------------------------------------------------------------------------------
 (1) _gotoXY                                               3     2      1    2172
                                              5 COMMON     3     2      1
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _Init_Battery_State_Machine                           5     5      0    6526
                                             30 BANK0      5     5      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM7_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM6_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCDWriteString                                       3     1      2    1847
                                             12 COMMON     2     0      2
                                              0 BANK0      1     1      0
                  _LCDWriteCharacter
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         16    11      5    7267
                                              0 BANK0     16    11      5
                  _LCDWriteCharacter
                            ___awdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     406
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _LCDWriteCharacter                                    6     6      0    1643
                                              6 COMMON     6     6      0
                           _LCDWrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     728
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _LCDWrite                                             5     4      1     803
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _Battery_State_Machine                                6     6      0    7120
                                             30 BANK0      6     6      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     734
                                             16 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    3067
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2593
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1707
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _Battery_State_Machine
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _LCDClear
     _LCDWrite
     _gotoXY
       _LCDWrite
   _LCDInit
     _LCDWrite
   _LCDWriteCharacter
     _LCDWrite
     ___wmul
   _LCDWriteInt
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
     ___awdiv
     ___lwmod
   _LCDWriteString
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
   _PWM6_LoadDutyValue
   _PWM7_LoadDutyValue
   _SYSTEM_Initialize
     _ADC_Initialize
     _Init_Battery_State_Machine
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
     _LCDClear
       _LCDWrite
       _gotoXY
         _LCDWrite
     _LCDInit
       _LCDWrite
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM_Initialize
     _TMR2_Initialize
     _TMR4_Initialize
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___ftpack (ARG)
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
   _calculateCurrent0
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent1
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent2
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent3
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _cc_cv_mode
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _gotoXY
     _LCDWrite
   _readButton
     _ADCRead
   _readIAnalog
     _ADCRead
     ___aldiv
     ___wmul
   _tempCalc
     _ADCRead (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___fttol (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _log (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul
       _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4D       7       96.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      1D       9       36.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               30      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      C7      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      C7      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Fri Sep 14 13:09:54 2018

                       _stateCounter 00C4                                    _j 00E6  
                                  _x 00EA               LCDWriteInt@fieldLength 0022  
            __size_of_PWM_Initialize 0015                          __CFG_CP$OFF 0000  
                                 l60 1303                                   l57 12FC  
                       ___awdiv@sign 0076                  ___wmul@multiplicand 0072  
        __size_of_PWM6_LoadDutyValue 0016                         ___ftadd@exp1 003C  
                       ___ftadd@exp2 003B                          __CFG_LVP$ON 0000  
                       ___ftadd@sign 003A                                  l134 0D9D  
                                l135 0DAE                                  l224 13B9  
                                l225 13BB                                  l226 13C1  
                                l227 13D1                                  l139 0DF1  
                                l228 13C5                        LCDClear@index 0079  
                                l644 08C8                                  l750 1767  
                                l841 09A6                                  l757 177A  
                                l589 133E                                  l781 00AE  
                                l758 1782                                  _GIE 005F  
                                _RB2 006A                         __CFG_CPD$OFF 0000  
                                _log 0A69                      __end_of_ADCRead 130A  
                    _TMR2_Initialize 129D                         __CFG_BORV$LO 0000  
                                wreg 0009                      __end_of_LCDInit 146B  
                       ?_LCDWriteInt 0020                         __CFG_ZCD$OFF 0000  
                       ___ftdiv@cntr 002A                         ___ftdiv@sign 002F  
                               l3001 089C                                 l2223 1744  
                               l3007 08B4                                 l2311 0067  
                               l2233 176C                                 l2225 174E  
                               l3033 0BEE                                 l3113 157A  
                               l3009 08B5                                 l2321 0089  
                               l2235 1774                                 l2227 1753  
                               l2219 173D                                 l3051 0C2A  
                               l3043 0BF5                                 l3019 12CC  
                               l3107 1535                                 l2331 00AA  
                               l2323 008D                                 l3203 043E  
                               l2413 1398                                 l3061 0C3C  
                               l3053 0C32                                 l3045 0C22  
                               l3125 1604                                 l2317 007A  
                               l2421 14BC                                 l3221 046B  
                               l3141 02EF                                 l2271 1338  
                               l3063 0C63                                 l3055 0C38  
                               l3119 15BF                                 l2335 00C0  
                               l2319 0084                                 l3049 0C26  
                               l2329 00A0                                 l2425 14D2  
                               l2505 172E                                 l3233 04A3  
                               l3209 0458                                 l3161 0322  
                               l2443 0952                                 l3067 0C71  
                               l2339 00D2                                 l3411 07B3  
                               l3227 0489                                 l3155 0307  
                               l2381 0B89                                 l2365 0B46  
                               l2461 0982                                 l2349 00ED  
                               l2293 003E                                 l3253 04E7  
                               l3149 0302                                 l2359 0B30  
                               l2471 09A9                                 l2463 0990  
                               l3415 07BC                                 l3247 04D2  
                               l3167 034D                                 l2393 0BA5  
                               l2377 0B81                                 l2721 08E9  
                               l2713 08D9                                 l2289 0037  
                               l3257 04EE                                 l2475 09B7  
                               l2731 0917                                 l2723 08F7  
                               l2299 004D                                 l3275 0523  
                               l2389 0B9D                                 l2469 099D  
                               l2821 0A47                                 l2813 0A2E  
                               l3197 0420                                 l2903 01EF  
                               l2911 0222                                 l2751 163A  
                               l2591 13F4                                 l2735 0922  
                               l2487 14F3                                 l2585 13E0  
                               l2833 1359                                 l2907 0209  
                               l2851 0827                                 l2739 0930  
                               l2925 0266                                 l2933 02B5  
                               l2757 1645                                 l2845 080F  
                               l2693 0A9B                                 l2783 167C  
                               l2775 166B                                 l2767 164D  
                               l2847 081B                                 l2855 0830  
                               l2951 0DC9                                 l2687 0A88  
                               l2769 1659                                 l2793 09D7  
                               l2873 0FD7                                 l2891 015C  
                               l2779 1674                                 l2947 0DBC  
                               l2981 0873                                 l2887 0142  
                               l2799 09ED                                 l2975 0859  
                               l2889 014A                                 l2985 0885  
                               l2995 0893                                 l2987 0887  
                               ?_log 0047                                 STR_1 1825  
                               STR_2 1820                                 STR_3 181B  
                               u2015 1749                                 u2035 1762  
                               u3005 09FF                                 _LATA 0016  
                               _LATB 0017                                 u2055 176F  
                               u3015 0A0F                                 _LATC 0018  
                               u3105 0821                                 u3025 0A2F  
                               u3115 0828                                 u3035 0A3E  
                               u2315 007B                                 u2165 133F  
                               u3045 0A48                                 u2095 1789  
                               u3215 0120                                 u2175 1344  
                               u4007 148E                                 u3135 0ECA  
                               u3225 0134                                 u4017 149E  
                               u3145 0F24                                 u2345 008E  
                               _T2PR 028D                                 u2515 0BA6  
                               u3155 0F62                                 u2525 0BAC  
                               u2445 0B52                                 u3085 0812  
                               u3165 0FB1                                 u2285 0068  
                               u2455 0B62                                 u3255 01C2  
                               u3335 0D89                                 u2375 00A1  
                               u2625 0983                                 u3425 0E64  
                               u3530 0BD8                                 _T4PR 0293  
                               u2475 0B8A                                 u3435 0847  
                               u3195 0FE3                                 u2740 142E  
                               u2485 0B90                                 u2725 13DE  
                               u3445 0853                                 u2655 099E  
                               u2735 13F2                                 u3455 0863  
                               u2815 08EC                                 u3625 1319  
                               u3465 086F                                 u2595 0959  
                               u2915 1650                                 u3635 132F  
                               u3395 0E0B                                 u3475 087D  
                               u2835 08F8                                 u3645 152F  
                               u2845 090C                                 u2935 165A  
                               u3655 1574                                 u2855 0918  
                               u3735 040E                                 u2945 1664  
                               u3665 15B9                                 u3905 04CB  
                               u3825 0468                                 u2955 166C  
                               u3595 0C51                                 u3675 15FE  
                               u3925 04E0                                 u3855 047A  
                               u3775 042F                                 u3875 0498  
                               u3795 044D                                 u3987 02F7  
                               u3997 08A6                  tempCalc@analogValue 004D  
                               _WPUA 0F39                                 _WPUB 0F44  
                               _WPUC 0F4F                                 _WPUE 0F65  
                               _Imin 00D0                                 _Iref 00C8  
                               _Iout 00DC                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                                 _Vref 00C0  
                               _main 02C5                         ___ftpack@arg 0070  
                       ___ftpack@exp 0073                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 indf1 0001  
                               fsr1l 0006                                 btemp 007E  
                               log@x 0047                         ?_readIAnalog 0026  
                      __CFG_BOREN$ON 0000                                 start 0002  
                      __CFG_CSWEN$ON 0000                        __CFG_MCLRE$ON 0000  
                       ___ftmul@cntr 002E                         ___ftmul@sign 002F  
                   __end_of_LCDClear 13F9                         ___fttol@exp1 003D  
                              ??_log 004A                         ___fttol@lval 0039  
__size_of_Init_Battery_State_Machine 0067       __size_of_OSCILLATOR_Initialize 0009  
                   __end_of_LCDWrite 13D3        __end_of_OSCILLATOR_Initialize 000F  
                    __end_of___aldiv 0939                                _ADACQ 009D  
                              _ADACT 0099                                _ADCAP 009B  
                              ?_main 0070                                _ADCLK 0098  
                              _ADPCH 009E                                _ADREF 009A  
                    __end_of___awdiv 1681                                _ADPRE 009C  
                    __end_of___ftadd 0105                        __CFG_WDTE$OFF 0000  
                              _ADRPT 010D                      __end_of___ftdiv 0A69  
                    __end_of___ftmul 0BCD                      ___awdiv@divisor 0070  
                    __end_of___ftsub 136F                      __end_of___fttol 09C0  
                              _T2CON 028E                                _LATA5 00B5  
                              _T4CON 0294                                _T2HLT 028F  
                              _T4HLT 0295                                _T2TMR 028C  
                              _T2RST 0291                      __end_of___lwmod 0835  
                              _T4TMR 0292                                _T4RST 0297  
                    ___awdiv@counter 0075                                _OSCEN 0891  
                              _TRISA 0011                                _TRISB 0012  
                              _TRISC 0013                      _TMR4_Initialize 12AB  
                              _Imode 00DE               ?_Battery_State_Machine 0070  
                              _cc_cv 00E0                        ___awtoft@sign 007D  
                              _frexp 14E1                                _fonts 1000  
                              _errno 00D4                        ___ftpack@sign 0074  
                              main@j 006A                         main@slowLoop 0063  
                              status 0003                                wtemp0 007E  
                    __initialization 07BF                          log@exponent 004B  
                       __end_of_main 07BF              __end_of_TMR2_Initialize 12AB  
                          ??_ADCRead 0073                               ??_main 0058  
                      ___fttol@sign1 0038                            ??_LCDInit 0075  
             Battery_State_Machine@z 0043              LCDWrite@data_or_command 0072  
                             _ADCON0 0093                               _ADCON1 0094  
                             _ADCON2 0095                               _ADCON3 0096  
                             ?_frexp 0070                               _ADLTHH 010F  
                             _ADLTHL 010E                               _ADRESH 008D  
                             _ADRESL 008C                               _ADSTAT 0097  
                             _ADUTHH 0111                     ___awdiv@dividend 0072  
                             _ADUTHL 0110                     __end_of___awtoft 13AE  
                             _ANSELA 0F38                               _ANSELB 0F43  
                             _ANSELC 0F4E                     __end_of___ftpack 1799  
                             _RB0PPS 0F18                               _RA6PPS 0F16  
                             _RA7PPS 0F17                       __CFG_WDTCCS$SC 0000  
                             _FVRCON 090C                               _OSCFRQ 0893  
                     __CFG_PWRTE$OFF 0000                       _LCDWriteString 12CC  
                       _CCPTMRS1bits 021F                               ___ftge 14A6  
                          ??___aldiv 0078                               ___wmul 1336  
                          ??___awdiv 0074                            ??___ftadd 0036  
                     __CFG_STVREN$ON 0000                       _PWM_Initialize 12E0  
                          ??___ftdiv 0026                            ??___ftmul 0026  
                          ??___ftsub 007E                            ??___fttol 0034  
                          ??___lwmod 0074                               _gotoXY 12B9  
                             _button 00E8              __end_of_TMR4_Initialize 12B9  
                   ___awdiv@quotient 0077                               _totals 0120  
              ___ftmul@f3_as_product 002B                     __end_of_tempCalc 0D6D  
                       LCDWrite@data 0070                         LCDWriteInt@i 002F  
                       LCDWriteInt@j 002E                            ?_LCDClear 0070  
                  _SYSTEM_Initialize 146B                 __size_of_LCDWriteInt 00B9  
                   __end_oflog@coeff 181B              __end_of__initialization 07FD  
                         ___ftadd@f1 0030                           ___ftadd@f2 0033  
                         ___ftge@ff1 0070                           ___ftge@ff2 0073  
                          ?_LCDWrite 0070                   ?_SYSTEM_Initialize 0070  
             __end_of_LCDWriteString 12E0                         eval_poly@res 0044  
                         ___ftdiv@f1 0023                           ___ftdiv@f2 0020  
                         ___ftdiv@f3 002B                           ___awtoft@c 0078  
                         ___ftmul@f1 0020                           ___ftmul@f2 0023  
             __end_of_PWM_Initialize 12F5                 __size_of_readIAnalog 014C  
                         ___ftsub@f1 0040                           ___ftsub@f2 003D  
                         ___fttol@f1 0030                       __pcstackCOMMON 0070  
                       __pidataBANK1 0004                         __pidataBANK2 0801  
                ??_SYSTEM_Initialize 0043                        __end_of_frexp 151C  
                      __end_of_fonts 112F                            LCDWrite@d 0073  
                          LCDWrite@i 0074                     ?_TMR2_Initialize 0070  
                         _cc_cv_mode 0D6D          __size_of_PWM7_LoadDutyValue 0016  
                     main@efficiency 005A                    LCDWriteInt@F14388 0130  
                  _calculateCurrent0 151C                    _calculateCurrent1 1561  
                  _calculateCurrent2 15A6                    _calculateCurrent3 15EB  
                            ??_frexp 0074            __end_of_SYSTEM_Initialize 14A6  
                         __pbssBANK1 00A0                           __pbssBANK2 0120  
                 ?_calculateCurrent0 0070                   ?_calculateCurrent1 0070  
                 ?_calculateCurrent2 0070                   ?_calculateCurrent3 0070  
                       _batteryState 00E2                   __size_of_eval_poly 0060  
                         ??_LCDClear 0078                       main@faultCount 005F  
                         ??_LCDWrite 0071                      ?_LCDWriteString 007C  
                ??_calculateCurrent0 003E                  ??_calculateCurrent1 003E  
                ??_calculateCurrent2 003E                  ??_calculateCurrent3 003E  
                    ?_PWM_Initialize 0070                           __pmaintext 02C5  
                            ?___ftge 0070                              ?___wmul 0070  
                    __CFG_PPS1WAY$ON 0000           __end_of_PWM6_LoadDutyValue 1320  
                            ?_gotoXY 0075                              _ADCRead 12F5  
                   ?_TMR4_Initialize 0070                            ?___awtoft 0078  
                          ?___ftpack 0070                              _ADSTPTH 0113  
                            _ADSTPTL 0112             __CFG_SCANE$not_available 0000  
                __CFG_RSTOSC$HFINT32 0000              __size_of_ADC_Initialize 001F  
            ??_Battery_State_Machine 003E                              _LCDInit 1430  
          __end_of_calculateCurrent0 1561            __end_of_calculateCurrent1 15A6  
          __end_of_calculateCurrent2 15EB            __end_of_calculateCurrent3 1630  
                            _OSCCON1 088D                              _OSCCON3 088F  
                            _OSCTUNE 0892                              _PWM6DCH 038D  
                            _PWM6DCL 038C                              _PWM7DCH 0391  
                            _PWM7DCL 0390                              _PWM6CON 038E  
                            _PWM7CON 0392                              _PPSLOCK 0E8F  
                         _floatCount 00D8                       main@menuButton 0069  
                     main@dutyCycle6 006B                       main@dutyCycle7 006D  
                         _lastButton 00E7                            ?_tempCalc 004D  
                            ___aldiv 08B7                      __size_of___ftge 003B  
                            ___awdiv 1630                              ___ftadd 000F  
                         _readButton 0835                              ___ftdiv 09C0  
                    __size_of___wmul 001B                              ___ftmul 0B19  
                            ___ftsub 1351                              ___fttol 0939  
                 main@displayRefresh 0064                              ___lwmod 0809  
                    __size_of_gotoXY 0013                           ??___awtoft 007B  
                         ??___ftpack 0075                    __end_of_eval_poly 1735  
                            __ptext1 0C86                              __ptext2 0A69  
                            __ptext3 14E1                              __ptext4 16D5  
                            __ptext5 14A6                              __ptext6 1351  
                            __ptext7 000F                              __ptext8 0EB4  
                            __ptext9 08B7                          ?_cc_cv_mode 0070  
              _OSCILLATOR_Initialize 0006                            _T2CONbits 028E  
                            _current 00B8                         __size_of_log 00B0  
                     ADCRead@channel 0073                     ___aldiv@dividend 0074  
                          _T4CONbits 0294             ??_PIN_MANAGER_Initialize 0070  
                            _samples 2260           __size_of_SYSTEM_Initialize 003B  
                            clrloop0 1292                              _voltage 00B0  
       ??_Init_Battery_State_Machine 003E                 end_of_initialization 07FD  
              LCDWriteCharacter@base 007A                              gotoXY@x 0077  
                            gotoXY@y 0075                           ??_tempCalc 007E  
                   ___aldiv@quotient 0022                           _otherState 00E9  
                  _LCDWriteCharacter 1681                __CFG_WDTCPS$WDTCPS_31 0000  
                 ?_LCDWriteCharacter 0070           __size_of_calculateCurrent0 0045  
         __size_of_calculateCurrent1 0045           __size_of_calculateCurrent2 0045  
         __size_of_calculateCurrent3 0045                            _TRISAbits 0011  
                ??_LCDWriteCharacter 0076                     __CFG_FEXTOSC$OFF 0000  
                        ___ftdiv@exp 002E                  __size_of_cc_cv_mode 0147  
                  __size_of_LCDClear 0026           LCDWriteCharacter@character 0079  
                  __size_of_LCDWrite 0025                          ___ftmul@exp 002A  
          __end_of_LCDWriteCharacter 16D5                          ?_readButton 0070  
          readIAnalog@analog_channel 0079                       __end_of___ftge 14E1  
                          _VHoldMode 00DA                       __end_of___wmul 1351  
                     _ADC_Initialize 136F                       __end_of_gotoXY 12CC  
             ?_OSCILLATOR_Initialize 0070                            _IminCount 00CC  
                start_initialization 07BF                           eval_poly@d 0040  
                         eval_poly@n 0042                           eval_poly@x 003D  
                  main@faultNotReset 0061      __size_of_PIN_MANAGER_Initialize 0037  
                        __end_of_log 0B19                        ??_LCDWriteInt 0025  
                   ??_LCDWriteString 0020                           frexp@value 0070  
                   ??_PWM_Initialize 0070                        ??_readIAnalog 0028  
                   __CFG_LPBOREN$OFF 0000                             ??___ftge 0076  
                  tempCalc@steinhart 0055                             ??___wmul 0074  
             __end_of_ADC_Initialize 138E                        _tempCalc$1189 0052  
                        __pdataBANK1 00EB                          __pdataBANK2 0135  
         __end_of_PWM7_LoadDutyValue 1336                             ??_gotoXY 0076  
                           ?_ADCRead 0070         PWM7_LoadDutyValue@dutyCycle7 0070  
                  __size_of___awtoft 0020                             ?_LCDInit 0070  
                  __size_of___ftpack 0064                          __pbssBIGRAM 2260  
     __size_of_Battery_State_Machine 01C0        __end_of_Battery_State_Machine 02C5  
                          ___latbits 0002                        __pcstackBANK0 0020  
                 _PWM6_LoadDutyValue 130A             __size_of_TMR2_Initialize 000E  
 __end_of_Init_Battery_State_Machine 1800           _Init_Battery_State_Machine 1799  
                __size_of_readButton 0082                  ?_PWM6_LoadDutyValue 0070  
                __end_of_LCDWriteInt 0C86                          _batteryTemp 00EB  
             _PIN_MANAGER_Initialize 13F9           __size_of_LCDWriteCharacter 0054  
                           ?___aldiv 0070                  __end_of_readIAnalog 1000  
                  __size_of_tempCalc 00E7                             ?___awdiv 0070  
                           ?___ftadd 0030                             ?___ftdiv 0020  
                           ?___ftmul 0020                             ?___ftsub 003D  
                           ?___fttol 0030                     LCDWriteInt@value 0020  
                           ?___lwmod 0070                      ?_ADC_Initialize 0070  
               ??_PWM6_LoadDutyValue 0072                         ??_cc_cv_mode 003E  
                          _eval_poly 16D5             __size_of_TMR4_Initialize 000E  
                     __size_of_frexp 003B                             _T2CLKCON 0290  
                           _T4CLKCON 0296                          cc_cv_mode@z 0045  
                           _LCDClear 13D3                      ___aldiv@divisor 0070  
                    ___aldiv@counter 0020                       ___wmul@product 0074  
                           _LATAbits 0016                             _LCDWrite 13AE  
                          clear_ram0 1291                             _PIE0bits 0716  
                 __end_of_cc_cv_mode 0EB4                             _PIR4bits 0710  
                   readIAnalog@value 007B                            main@MPPT0 0065  
                          main@MPPT1 0067                     __size_of_ADCRead 0015  
                         _ADCON0bits 0093                    ___wmul@multiplier 0070  
                         ?_eval_poly 003D                     __size_of_LCDInit 003B  
                           _Ianalogs 00A0                          _LCDWriteInt 0BCD  
        Init_Battery_State_Machine@z 0042                    ??_TMR2_Initialize 0070  
                        _readIAnalog 0EB4                            frexp@eptr 0073  
                           _Vanalogs 00A8                         ??_readButton 0074  
            ??_OSCILLATOR_Initialize 0070                 LCDWriteInt@numPlaces 0023  
                   __size_of___aldiv 0082                     __size_of___awdiv 0051  
                   __size_of___ftadd 00F6                     __size_of___ftdiv 00A9  
                   __size_of___ftmul 00B4                     __size_of___ftsub 001E  
                   __size_of___fttol 0087                     __size_of___lwmod 002C  
                        _readButtons 00D6                             ___awtoft 138E  
                           ___ftpack 1735                             _channels 0135  
                           __ptext10 0835                             __ptext11 12F5  
                           __ptext20 129D                             __ptext12 0D6D  
                           __ptext21 12E0                             __ptext13 15EB  
                           __ptext30 130A                             __ptext22 13F9  
                           __ptext14 15A6                             __ptext31 12CC  
                           __ptext23 0006                             __ptext15 1561  
                           __ptext40 0B19                             __ptext32 0BCD  
                           __ptext24 1430                             __ptext16 151C  
                           __ptext41 138E                             __ptext33 0809  
                           __ptext25 13D3                             __ptext17 09C0  
                           __ptext42 1735                             __ptext34 1630  
                           __ptext26 12B9                             __ptext18 146B  
                           __ptext35 1681                             __ptext27 1799  
                           __ptext19 12AB                             __ptext36 1336  
                           __ptext28 136F                             __ptext37 13AE  
                           __ptext29 1320                             __ptext38 0105  
                           __ptext39 0939                      LCDWriteInt@sign 0024  
                          tempCalc@R 004F                   __end_of_readButton 08B7  
                  ??_TMR4_Initialize 0070                        __size_of_main 04FA  
               __CFG_WDTCWS$WDTCWS_7 0000                             _tempCalc 0C86  
        PIN_MANAGER_Initialize@state 0070                             log@coeff 1800  
                        ??_eval_poly 007E                          _sampleIndex 00E4  
                 _PWM7_LoadDutyValue 1320          ?_Init_Battery_State_Machine 0070  
                   ___lwmod@dividend 0072                       LCDWriteInt@str 0029  
            ?_PIN_MANAGER_Initialize 0070                  ?_PWM7_LoadDutyValue 0070  
                  __CFG_CLKOUTEN$OFF 0000                          _PPSLOCKbits 0E8F  
                   ??_ADC_Initialize 0070         PWM6_LoadDutyValue@dutyCycle6 0070  
                      __pstringtext1 1000                        __pstringtext2 1800  
                      __pstringtext3 1820                        __pstringtext4 1825  
                      __pstringtext5 0000                 ??_PWM7_LoadDutyValue 0072  
                    ___lwmod@divisor 0070                      ___lwmod@counter 0075  
           LCDWriteString@characters 007C                         ___aldiv@sign 0021  
                 readIAnalog@channel 0026                _Battery_State_Machine 0105  
     __end_of_PIN_MANAGER_Initialize 1430                        main@IOutTotal 005D  
            __size_of_LCDWriteString 0014  
