

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Aug 09 17:07:22 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
    62                           	dabs	1,0x620,48
    63                           	dabs	1,0x5A0,80
    64                           	dabs	1,0x520,80
    65                           	dabs	1,0x4A0,80
    66                           	dabs	1,0x420,80
    67                           	dabs	1,0x3D0,32
    68                           	dabs	1,0x2260,0,_samples
    69                           	dabs	1,0x7E,2
    70  0000                     
    71                           ; Version 1.45
    72                           ; Generated 16/11/2017 GMT
    73                           ; 
    74                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    75                           ; All rights reserved.
    76                           ; 
    77                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    78                           ; 
    79                           ; Redistribution and use in source and binary forms, with or without modification, are
    80                           ; permitted provided that the following conditions are met:
    81                           ; 
    82                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    83                           ;        conditions and the following disclaimer.
    84                           ; 
    85                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    86                           ;        of conditions and the following disclaimer in the documentation and/or other
    87                           ;        materials provided with the distribution.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC16F18855 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105  0000                     	;# 
   106  0001                     	;# 
   107  0002                     	;# 
   108  0003                     	;# 
   109  0004                     	;# 
   110  0005                     	;# 
   111  0006                     	;# 
   112  0007                     	;# 
   113  0008                     	;# 
   114  0009                     	;# 
   115  000A                     	;# 
   116  000B                     	;# 
   117  000C                     	;# 
   118  000D                     	;# 
   119  000E                     	;# 
   120  0010                     	;# 
   121  0011                     	;# 
   122  0012                     	;# 
   123  0013                     	;# 
   124  0016                     	;# 
   125  0017                     	;# 
   126  0018                     	;# 
   127  001C                     	;# 
   128  001C                     	;# 
   129  001D                     	;# 
   130  001D                     	;# 
   131  001E                     	;# 
   132  001F                     	;# 
   133  008C                     	;# 
   134  008C                     	;# 
   135  008D                     	;# 
   136  008E                     	;# 
   137  008E                     	;# 
   138  008F                     	;# 
   139  0090                     	;# 
   140  0090                     	;# 
   141  0091                     	;# 
   142  0093                     	;# 
   143  0094                     	;# 
   144  0095                     	;# 
   145  0096                     	;# 
   146  0097                     	;# 
   147  0098                     	;# 
   148  0099                     	;# 
   149  009A                     	;# 
   150  009B                     	;# 
   151  009C                     	;# 
   152  009D                     	;# 
   153  009E                     	;# 
   154  010C                     	;# 
   155  010D                     	;# 
   156  010E                     	;# 
   157  010E                     	;# 
   158  010F                     	;# 
   159  0110                     	;# 
   160  0110                     	;# 
   161  0111                     	;# 
   162  0112                     	;# 
   163  0112                     	;# 
   164  0113                     	;# 
   165  0114                     	;# 
   166  0114                     	;# 
   167  0115                     	;# 
   168  0116                     	;# 
   169  0116                     	;# 
   170  0117                     	;# 
   171  0119                     	;# 
   172  0119                     	;# 
   173  0119                     	;# 
   174  011A                     	;# 
   175  011A                     	;# 
   176  011A                     	;# 
   177  011B                     	;# 
   178  011B                     	;# 
   179  011B                     	;# 
   180  011B                     	;# 
   181  011B                     	;# 
   182  011C                     	;# 
   183  011C                     	;# 
   184  011C                     	;# 
   185  011D                     	;# 
   186  011D                     	;# 
   187  011D                     	;# 
   188  011E                     	;# 
   189  011E                     	;# 
   190  011E                     	;# 
   191  011F                     	;# 
   192  011F                     	;# 
   193  011F                     	;# 
   194  011F                     	;# 
   195  011F                     	;# 
   196  018C                     	;# 
   197  018D                     	;# 
   198  018E                     	;# 
   199  018F                     	;# 
   200  0190                     	;# 
   201  0191                     	;# 
   202  0192                     	;# 
   203  0196                     	;# 
   204  0197                     	;# 
   205  0198                     	;# 
   206  0199                     	;# 
   207  019A                     	;# 
   208  019B                     	;# 
   209  019C                     	;# 
   210  020C                     	;# 
   211  020C                     	;# 
   212  020D                     	;# 
   213  020E                     	;# 
   214  020F                     	;# 
   215  020F                     	;# 
   216  0210                     	;# 
   217  0210                     	;# 
   218  0211                     	;# 
   219  0211                     	;# 
   220  0212                     	;# 
   221  0212                     	;# 
   222  0213                     	;# 
   223  0214                     	;# 
   224  0215                     	;# 
   225  0215                     	;# 
   226  0216                     	;# 
   227  0216                     	;# 
   228  0217                     	;# 
   229  0217                     	;# 
   230  0218                     	;# 
   231  0218                     	;# 
   232  0219                     	;# 
   233  021A                     	;# 
   234  021B                     	;# 
   235  021B                     	;# 
   236  021C                     	;# 
   237  021C                     	;# 
   238  021D                     	;# 
   239  021D                     	;# 
   240  021E                     	;# 
   241  021F                     	;# 
   242  028C                     	;# 
   243  028C                     	;# 
   244  028D                     	;# 
   245  028D                     	;# 
   246  028E                     	;# 
   247  028F                     	;# 
   248  0290                     	;# 
   249  0290                     	;# 
   250  0291                     	;# 
   251  0292                     	;# 
   252  0292                     	;# 
   253  0293                     	;# 
   254  0293                     	;# 
   255  0294                     	;# 
   256  0295                     	;# 
   257  0296                     	;# 
   258  0296                     	;# 
   259  0297                     	;# 
   260  0298                     	;# 
   261  0298                     	;# 
   262  0299                     	;# 
   263  0299                     	;# 
   264  029A                     	;# 
   265  029B                     	;# 
   266  029C                     	;# 
   267  029C                     	;# 
   268  029D                     	;# 
   269  030C                     	;# 
   270  030C                     	;# 
   271  030D                     	;# 
   272  030E                     	;# 
   273  030F                     	;# 
   274  0310                     	;# 
   275  0310                     	;# 
   276  0311                     	;# 
   277  0312                     	;# 
   278  0313                     	;# 
   279  0314                     	;# 
   280  0314                     	;# 
   281  0315                     	;# 
   282  0316                     	;# 
   283  0317                     	;# 
   284  0318                     	;# 
   285  0318                     	;# 
   286  0319                     	;# 
   287  031A                     	;# 
   288  031B                     	;# 
   289  031C                     	;# 
   290  031C                     	;# 
   291  031D                     	;# 
   292  031E                     	;# 
   293  031F                     	;# 
   294  038C                     	;# 
   295  038D                     	;# 
   296  038E                     	;# 
   297  0390                     	;# 
   298  0391                     	;# 
   299  0392                     	;# 
   300  040C                     	;# 
   301  040D                     	;# 
   302  040E                     	;# 
   303  040F                     	;# 
   304  0410                     	;# 
   305  0411                     	;# 
   306  0416                     	;# 
   307  0416                     	;# 
   308  0417                     	;# 
   309  0418                     	;# 
   310  0418                     	;# 
   311  0419                     	;# 
   312  041A                     	;# 
   313  041A                     	;# 
   314  041B                     	;# 
   315  041C                     	;# 
   316  041C                     	;# 
   317  041D                     	;# 
   318  041E                     	;# 
   319  041F                     	;# 
   320  048C                     	;# 
   321  048C                     	;# 
   322  048D                     	;# 
   323  048E                     	;# 
   324  048F                     	;# 
   325  048F                     	;# 
   326  0490                     	;# 
   327  0491                     	;# 
   328  0492                     	;# 
   329  0492                     	;# 
   330  0493                     	;# 
   331  0494                     	;# 
   332  0495                     	;# 
   333  0495                     	;# 
   334  0496                     	;# 
   335  0497                     	;# 
   336  0498                     	;# 
   337  0499                     	;# 
   338  049A                     	;# 
   339  049B                     	;# 
   340  049C                     	;# 
   341  049D                     	;# 
   342  050C                     	;# 
   343  050C                     	;# 
   344  050D                     	;# 
   345  050E                     	;# 
   346  050F                     	;# 
   347  050F                     	;# 
   348  0510                     	;# 
   349  0511                     	;# 
   350  0512                     	;# 
   351  0512                     	;# 
   352  0513                     	;# 
   353  0514                     	;# 
   354  0515                     	;# 
   355  0515                     	;# 
   356  0516                     	;# 
   357  0517                     	;# 
   358  0518                     	;# 
   359  0519                     	;# 
   360  051A                     	;# 
   361  051B                     	;# 
   362  051C                     	;# 
   363  051D                     	;# 
   364  058C                     	;# 
   365  058C                     	;# 
   366  058D                     	;# 
   367  058E                     	;# 
   368  058F                     	;# 
   369  058F                     	;# 
   370  0590                     	;# 
   371  0591                     	;# 
   372  0592                     	;# 
   373  0593                     	;# 
   374  060C                     	;# 
   375  060D                     	;# 
   376  060E                     	;# 
   377  060F                     	;# 
   378  0610                     	;# 
   379  0611                     	;# 
   380  0612                     	;# 
   381  0613                     	;# 
   382  0614                     	;# 
   383  0616                     	;# 
   384  0617                     	;# 
   385  0618                     	;# 
   386  0619                     	;# 
   387  061A                     	;# 
   388  061B                     	;# 
   389  061C                     	;# 
   390  061D                     	;# 
   391  061E                     	;# 
   392  068C                     	;# 
   393  068D                     	;# 
   394  068E                     	;# 
   395  068F                     	;# 
   396  0690                     	;# 
   397  0691                     	;# 
   398  0692                     	;# 
   399  0693                     	;# 
   400  0694                     	;# 
   401  070C                     	;# 
   402  070D                     	;# 
   403  070E                     	;# 
   404  070F                     	;# 
   405  0710                     	;# 
   406  0711                     	;# 
   407  0712                     	;# 
   408  0713                     	;# 
   409  0714                     	;# 
   410  0716                     	;# 
   411  0717                     	;# 
   412  0718                     	;# 
   413  0719                     	;# 
   414  071A                     	;# 
   415  071B                     	;# 
   416  071C                     	;# 
   417  071D                     	;# 
   418  071E                     	;# 
   419  0796                     	;# 
   420  0797                     	;# 
   421  0798                     	;# 
   422  0799                     	;# 
   423  079A                     	;# 
   424  079B                     	;# 
   425  080C                     	;# 
   426  080D                     	;# 
   427  080E                     	;# 
   428  080F                     	;# 
   429  0810                     	;# 
   430  0811                     	;# 
   431  0812                     	;# 
   432  0813                     	;# 
   433  0814                     	;# 
   434  081A                     	;# 
   435  081B                     	;# 
   436  081C                     	;# 
   437  081D                     	;# 
   438  081E                     	;# 
   439  081F                     	;# 
   440  088C                     	;# 
   441  088D                     	;# 
   442  088E                     	;# 
   443  088F                     	;# 
   444  0890                     	;# 
   445  0891                     	;# 
   446  0892                     	;# 
   447  0893                     	;# 
   448  0895                     	;# 
   449  0896                     	;# 
   450  0897                     	;# 
   451  0898                     	;# 
   452  0899                     	;# 
   453  089A                     	;# 
   454  089B                     	;# 
   455  090C                     	;# 
   456  090E                     	;# 
   457  090F                     	;# 
   458  091F                     	;# 
   459  091F                     	;# 
   460  098F                     	;# 
   461  098F                     	;# 
   462  0990                     	;# 
   463  0991                     	;# 
   464  0992                     	;# 
   465  0993                     	;# 
   466  0994                     	;# 
   467  0995                     	;# 
   468  0996                     	;# 
   469  0997                     	;# 
   470  0E0F                     	;# 
   471  0E10                     	;# 
   472  0E11                     	;# 
   473  0E12                     	;# 
   474  0E13                     	;# 
   475  0E14                     	;# 
   476  0E15                     	;# 
   477  0E16                     	;# 
   478  0E17                     	;# 
   479  0E18                     	;# 
   480  0E19                     	;# 
   481  0E1A                     	;# 
   482  0E1B                     	;# 
   483  0E1C                     	;# 
   484  0E1D                     	;# 
   485  0E1E                     	;# 
   486  0E1F                     	;# 
   487  0E20                     	;# 
   488  0E21                     	;# 
   489  0E22                     	;# 
   490  0E23                     	;# 
   491  0E24                     	;# 
   492  0E25                     	;# 
   493  0E26                     	;# 
   494  0E27                     	;# 
   495  0E28                     	;# 
   496  0E29                     	;# 
   497  0E2A                     	;# 
   498  0E2B                     	;# 
   499  0E2C                     	;# 
   500  0E2D                     	;# 
   501  0E2E                     	;# 
   502  0E2F                     	;# 
   503  0E30                     	;# 
   504  0E31                     	;# 
   505  0E32                     	;# 
   506  0E33                     	;# 
   507  0E34                     	;# 
   508  0E35                     	;# 
   509  0E36                     	;# 
   510  0E37                     	;# 
   511  0E8F                     	;# 
   512  0E90                     	;# 
   513  0E91                     	;# 
   514  0E92                     	;# 
   515  0E93                     	;# 
   516  0E94                     	;# 
   517  0E95                     	;# 
   518  0E96                     	;# 
   519  0E97                     	;# 
   520  0E9C                     	;# 
   521  0E9D                     	;# 
   522  0E9E                     	;# 
   523  0EA1                     	;# 
   524  0EA2                     	;# 
   525  0EA3                     	;# 
   526  0EA4                     	;# 
   527  0EA5                     	;# 
   528  0EA9                     	;# 
   529  0EAA                     	;# 
   530  0EAB                     	;# 
   531  0EAC                     	;# 
   532  0EB1                     	;# 
   533  0EB2                     	;# 
   534  0EB3                     	;# 
   535  0EB8                     	;# 
   536  0EB9                     	;# 
   537  0EBA                     	;# 
   538  0EBB                     	;# 
   539  0EBC                     	;# 
   540  0EBD                     	;# 
   541  0EBE                     	;# 
   542  0EC3                     	;# 
   543  0EC5                     	;# 
   544  0EC6                     	;# 
   545  0EC7                     	;# 
   546  0EC8                     	;# 
   547  0EC9                     	;# 
   548  0ECA                     	;# 
   549  0ECB                     	;# 
   550  0ECC                     	;# 
   551  0F10                     	;# 
   552  0F11                     	;# 
   553  0F12                     	;# 
   554  0F13                     	;# 
   555  0F14                     	;# 
   556  0F15                     	;# 
   557  0F16                     	;# 
   558  0F17                     	;# 
   559  0F18                     	;# 
   560  0F19                     	;# 
   561  0F1A                     	;# 
   562  0F1B                     	;# 
   563  0F1C                     	;# 
   564  0F1D                     	;# 
   565  0F1E                     	;# 
   566  0F1F                     	;# 
   567  0F20                     	;# 
   568  0F21                     	;# 
   569  0F22                     	;# 
   570  0F23                     	;# 
   571  0F24                     	;# 
   572  0F25                     	;# 
   573  0F26                     	;# 
   574  0F27                     	;# 
   575  0F38                     	;# 
   576  0F39                     	;# 
   577  0F3A                     	;# 
   578  0F3B                     	;# 
   579  0F3C                     	;# 
   580  0F3D                     	;# 
   581  0F3E                     	;# 
   582  0F3F                     	;# 
   583  0F40                     	;# 
   584  0F41                     	;# 
   585  0F43                     	;# 
   586  0F44                     	;# 
   587  0F45                     	;# 
   588  0F46                     	;# 
   589  0F47                     	;# 
   590  0F48                     	;# 
   591  0F49                     	;# 
   592  0F4A                     	;# 
   593  0F4B                     	;# 
   594  0F4C                     	;# 
   595  0F4E                     	;# 
   596  0F4F                     	;# 
   597  0F50                     	;# 
   598  0F51                     	;# 
   599  0F52                     	;# 
   600  0F53                     	;# 
   601  0F54                     	;# 
   602  0F55                     	;# 
   603  0F56                     	;# 
   604  0F57                     	;# 
   605  0F65                     	;# 
   606  0F68                     	;# 
   607  0F69                     	;# 
   608  0F6A                     	;# 
   609  0F6B                     	;# 
   610  0FE4                     	;# 
   611  0FE5                     	;# 
   612  0FE6                     	;# 
   613  0FE7                     	;# 
   614  0FE8                     	;# 
   615  0FE9                     	;# 
   616  0FEA                     	;# 
   617  0FEB                     	;# 
   618  0FED                     	;# 
   619  0FEE                     	;# 
   620  0FEF                     	;# 
   621  0000                     	;# 
   622  0001                     	;# 
   623  0002                     	;# 
   624  0003                     	;# 
   625  0004                     	;# 
   626  0005                     	;# 
   627  0006                     	;# 
   628  0007                     	;# 
   629  0008                     	;# 
   630  0009                     	;# 
   631  000A                     	;# 
   632  000B                     	;# 
   633  000C                     	;# 
   634  000D                     	;# 
   635  000E                     	;# 
   636  0010                     	;# 
   637  0011                     	;# 
   638  0012                     	;# 
   639  0013                     	;# 
   640  0016                     	;# 
   641  0017                     	;# 
   642  0018                     	;# 
   643  001C                     	;# 
   644  001C                     	;# 
   645  001D                     	;# 
   646  001D                     	;# 
   647  001E                     	;# 
   648  001F                     	;# 
   649  008C                     	;# 
   650  008C                     	;# 
   651  008D                     	;# 
   652  008E                     	;# 
   653  008E                     	;# 
   654  008F                     	;# 
   655  0090                     	;# 
   656  0090                     	;# 
   657  0091                     	;# 
   658  0093                     	;# 
   659  0094                     	;# 
   660  0095                     	;# 
   661  0096                     	;# 
   662  0097                     	;# 
   663  0098                     	;# 
   664  0099                     	;# 
   665  009A                     	;# 
   666  009B                     	;# 
   667  009C                     	;# 
   668  009D                     	;# 
   669  009E                     	;# 
   670  010C                     	;# 
   671  010D                     	;# 
   672  010E                     	;# 
   673  010E                     	;# 
   674  010F                     	;# 
   675  0110                     	;# 
   676  0110                     	;# 
   677  0111                     	;# 
   678  0112                     	;# 
   679  0112                     	;# 
   680  0113                     	;# 
   681  0114                     	;# 
   682  0114                     	;# 
   683  0115                     	;# 
   684  0116                     	;# 
   685  0116                     	;# 
   686  0117                     	;# 
   687  0119                     	;# 
   688  0119                     	;# 
   689  0119                     	;# 
   690  011A                     	;# 
   691  011A                     	;# 
   692  011A                     	;# 
   693  011B                     	;# 
   694  011B                     	;# 
   695  011B                     	;# 
   696  011B                     	;# 
   697  011B                     	;# 
   698  011C                     	;# 
   699  011C                     	;# 
   700  011C                     	;# 
   701  011D                     	;# 
   702  011D                     	;# 
   703  011D                     	;# 
   704  011E                     	;# 
   705  011E                     	;# 
   706  011E                     	;# 
   707  011F                     	;# 
   708  011F                     	;# 
   709  011F                     	;# 
   710  011F                     	;# 
   711  011F                     	;# 
   712  018C                     	;# 
   713  018D                     	;# 
   714  018E                     	;# 
   715  018F                     	;# 
   716  0190                     	;# 
   717  0191                     	;# 
   718  0192                     	;# 
   719  0196                     	;# 
   720  0197                     	;# 
   721  0198                     	;# 
   722  0199                     	;# 
   723  019A                     	;# 
   724  019B                     	;# 
   725  019C                     	;# 
   726  020C                     	;# 
   727  020C                     	;# 
   728  020D                     	;# 
   729  020E                     	;# 
   730  020F                     	;# 
   731  020F                     	;# 
   732  0210                     	;# 
   733  0210                     	;# 
   734  0211                     	;# 
   735  0211                     	;# 
   736  0212                     	;# 
   737  0212                     	;# 
   738  0213                     	;# 
   739  0214                     	;# 
   740  0215                     	;# 
   741  0215                     	;# 
   742  0216                     	;# 
   743  0216                     	;# 
   744  0217                     	;# 
   745  0217                     	;# 
   746  0218                     	;# 
   747  0218                     	;# 
   748  0219                     	;# 
   749  021A                     	;# 
   750  021B                     	;# 
   751  021B                     	;# 
   752  021C                     	;# 
   753  021C                     	;# 
   754  021D                     	;# 
   755  021D                     	;# 
   756  021E                     	;# 
   757  021F                     	;# 
   758  028C                     	;# 
   759  028C                     	;# 
   760  028D                     	;# 
   761  028D                     	;# 
   762  028E                     	;# 
   763  028F                     	;# 
   764  0290                     	;# 
   765  0290                     	;# 
   766  0291                     	;# 
   767  0292                     	;# 
   768  0292                     	;# 
   769  0293                     	;# 
   770  0293                     	;# 
   771  0294                     	;# 
   772  0295                     	;# 
   773  0296                     	;# 
   774  0296                     	;# 
   775  0297                     	;# 
   776  0298                     	;# 
   777  0298                     	;# 
   778  0299                     	;# 
   779  0299                     	;# 
   780  029A                     	;# 
   781  029B                     	;# 
   782  029C                     	;# 
   783  029C                     	;# 
   784  029D                     	;# 
   785  030C                     	;# 
   786  030C                     	;# 
   787  030D                     	;# 
   788  030E                     	;# 
   789  030F                     	;# 
   790  0310                     	;# 
   791  0310                     	;# 
   792  0311                     	;# 
   793  0312                     	;# 
   794  0313                     	;# 
   795  0314                     	;# 
   796  0314                     	;# 
   797  0315                     	;# 
   798  0316                     	;# 
   799  0317                     	;# 
   800  0318                     	;# 
   801  0318                     	;# 
   802  0319                     	;# 
   803  031A                     	;# 
   804  031B                     	;# 
   805  031C                     	;# 
   806  031C                     	;# 
   807  031D                     	;# 
   808  031E                     	;# 
   809  031F                     	;# 
   810  038C                     	;# 
   811  038D                     	;# 
   812  038E                     	;# 
   813  0390                     	;# 
   814  0391                     	;# 
   815  0392                     	;# 
   816  040C                     	;# 
   817  040D                     	;# 
   818  040E                     	;# 
   819  040F                     	;# 
   820  0410                     	;# 
   821  0411                     	;# 
   822  0416                     	;# 
   823  0416                     	;# 
   824  0417                     	;# 
   825  0418                     	;# 
   826  0418                     	;# 
   827  0419                     	;# 
   828  041A                     	;# 
   829  041A                     	;# 
   830  041B                     	;# 
   831  041C                     	;# 
   832  041C                     	;# 
   833  041D                     	;# 
   834  041E                     	;# 
   835  041F                     	;# 
   836  048C                     	;# 
   837  048C                     	;# 
   838  048D                     	;# 
   839  048E                     	;# 
   840  048F                     	;# 
   841  048F                     	;# 
   842  0490                     	;# 
   843  0491                     	;# 
   844  0492                     	;# 
   845  0492                     	;# 
   846  0493                     	;# 
   847  0494                     	;# 
   848  0495                     	;# 
   849  0495                     	;# 
   850  0496                     	;# 
   851  0497                     	;# 
   852  0498                     	;# 
   853  0499                     	;# 
   854  049A                     	;# 
   855  049B                     	;# 
   856  049C                     	;# 
   857  049D                     	;# 
   858  050C                     	;# 
   859  050C                     	;# 
   860  050D                     	;# 
   861  050E                     	;# 
   862  050F                     	;# 
   863  050F                     	;# 
   864  0510                     	;# 
   865  0511                     	;# 
   866  0512                     	;# 
   867  0512                     	;# 
   868  0513                     	;# 
   869  0514                     	;# 
   870  0515                     	;# 
   871  0515                     	;# 
   872  0516                     	;# 
   873  0517                     	;# 
   874  0518                     	;# 
   875  0519                     	;# 
   876  051A                     	;# 
   877  051B                     	;# 
   878  051C                     	;# 
   879  051D                     	;# 
   880  058C                     	;# 
   881  058C                     	;# 
   882  058D                     	;# 
   883  058E                     	;# 
   884  058F                     	;# 
   885  058F                     	;# 
   886  0590                     	;# 
   887  0591                     	;# 
   888  0592                     	;# 
   889  0593                     	;# 
   890  060C                     	;# 
   891  060D                     	;# 
   892  060E                     	;# 
   893  060F                     	;# 
   894  0610                     	;# 
   895  0611                     	;# 
   896  0612                     	;# 
   897  0613                     	;# 
   898  0614                     	;# 
   899  0616                     	;# 
   900  0617                     	;# 
   901  0618                     	;# 
   902  0619                     	;# 
   903  061A                     	;# 
   904  061B                     	;# 
   905  061C                     	;# 
   906  061D                     	;# 
   907  061E                     	;# 
   908  068C                     	;# 
   909  068D                     	;# 
   910  068E                     	;# 
   911  068F                     	;# 
   912  0690                     	;# 
   913  0691                     	;# 
   914  0692                     	;# 
   915  0693                     	;# 
   916  0694                     	;# 
   917  070C                     	;# 
   918  070D                     	;# 
   919  070E                     	;# 
   920  070F                     	;# 
   921  0710                     	;# 
   922  0711                     	;# 
   923  0712                     	;# 
   924  0713                     	;# 
   925  0714                     	;# 
   926  0716                     	;# 
   927  0717                     	;# 
   928  0718                     	;# 
   929  0719                     	;# 
   930  071A                     	;# 
   931  071B                     	;# 
   932  071C                     	;# 
   933  071D                     	;# 
   934  071E                     	;# 
   935  0796                     	;# 
   936  0797                     	;# 
   937  0798                     	;# 
   938  0799                     	;# 
   939  079A                     	;# 
   940  079B                     	;# 
   941  080C                     	;# 
   942  080D                     	;# 
   943  080E                     	;# 
   944  080F                     	;# 
   945  0810                     	;# 
   946  0811                     	;# 
   947  0812                     	;# 
   948  0813                     	;# 
   949  0814                     	;# 
   950  081A                     	;# 
   951  081B                     	;# 
   952  081C                     	;# 
   953  081D                     	;# 
   954  081E                     	;# 
   955  081F                     	;# 
   956  088C                     	;# 
   957  088D                     	;# 
   958  088E                     	;# 
   959  088F                     	;# 
   960  0890                     	;# 
   961  0891                     	;# 
   962  0892                     	;# 
   963  0893                     	;# 
   964  0895                     	;# 
   965  0896                     	;# 
   966  0897                     	;# 
   967  0898                     	;# 
   968  0899                     	;# 
   969  089A                     	;# 
   970  089B                     	;# 
   971  090C                     	;# 
   972  090E                     	;# 
   973  090F                     	;# 
   974  091F                     	;# 
   975  091F                     	;# 
   976  098F                     	;# 
   977  098F                     	;# 
   978  0990                     	;# 
   979  0991                     	;# 
   980  0992                     	;# 
   981  0993                     	;# 
   982  0994                     	;# 
   983  0995                     	;# 
   984  0996                     	;# 
   985  0997                     	;# 
   986  0E0F                     	;# 
   987  0E10                     	;# 
   988  0E11                     	;# 
   989  0E12                     	;# 
   990  0E13                     	;# 
   991  0E14                     	;# 
   992  0E15                     	;# 
   993  0E16                     	;# 
   994  0E17                     	;# 
   995  0E18                     	;# 
   996  0E19                     	;# 
   997  0E1A                     	;# 
   998  0E1B                     	;# 
   999  0E1C                     	;# 
  1000  0E1D                     	;# 
  1001  0E1E                     	;# 
  1002  0E1F                     	;# 
  1003  0E20                     	;# 
  1004  0E21                     	;# 
  1005  0E22                     	;# 
  1006  0E23                     	;# 
  1007  0E24                     	;# 
  1008  0E25                     	;# 
  1009  0E26                     	;# 
  1010  0E27                     	;# 
  1011  0E28                     	;# 
  1012  0E29                     	;# 
  1013  0E2A                     	;# 
  1014  0E2B                     	;# 
  1015  0E2C                     	;# 
  1016  0E2D                     	;# 
  1017  0E2E                     	;# 
  1018  0E2F                     	;# 
  1019  0E30                     	;# 
  1020  0E31                     	;# 
  1021  0E32                     	;# 
  1022  0E33                     	;# 
  1023  0E34                     	;# 
  1024  0E35                     	;# 
  1025  0E36                     	;# 
  1026  0E37                     	;# 
  1027  0E8F                     	;# 
  1028  0E90                     	;# 
  1029  0E91                     	;# 
  1030  0E92                     	;# 
  1031  0E93                     	;# 
  1032  0E94                     	;# 
  1033  0E95                     	;# 
  1034  0E96                     	;# 
  1035  0E97                     	;# 
  1036  0E9C                     	;# 
  1037  0E9D                     	;# 
  1038  0E9E                     	;# 
  1039  0EA1                     	;# 
  1040  0EA2                     	;# 
  1041  0EA3                     	;# 
  1042  0EA4                     	;# 
  1043  0EA5                     	;# 
  1044  0EA9                     	;# 
  1045  0EAA                     	;# 
  1046  0EAB                     	;# 
  1047  0EAC                     	;# 
  1048  0EB1                     	;# 
  1049  0EB2                     	;# 
  1050  0EB3                     	;# 
  1051  0EB8                     	;# 
  1052  0EB9                     	;# 
  1053  0EBA                     	;# 
  1054  0EBB                     	;# 
  1055  0EBC                     	;# 
  1056  0EBD                     	;# 
  1057  0EBE                     	;# 
  1058  0EC3                     	;# 
  1059  0EC5                     	;# 
  1060  0EC6                     	;# 
  1061  0EC7                     	;# 
  1062  0EC8                     	;# 
  1063  0EC9                     	;# 
  1064  0ECA                     	;# 
  1065  0ECB                     	;# 
  1066  0ECC                     	;# 
  1067  0F10                     	;# 
  1068  0F11                     	;# 
  1069  0F12                     	;# 
  1070  0F13                     	;# 
  1071  0F14                     	;# 
  1072  0F15                     	;# 
  1073  0F16                     	;# 
  1074  0F17                     	;# 
  1075  0F18                     	;# 
  1076  0F19                     	;# 
  1077  0F1A                     	;# 
  1078  0F1B                     	;# 
  1079  0F1C                     	;# 
  1080  0F1D                     	;# 
  1081  0F1E                     	;# 
  1082  0F1F                     	;# 
  1083  0F20                     	;# 
  1084  0F21                     	;# 
  1085  0F22                     	;# 
  1086  0F23                     	;# 
  1087  0F24                     	;# 
  1088  0F25                     	;# 
  1089  0F26                     	;# 
  1090  0F27                     	;# 
  1091  0F38                     	;# 
  1092  0F39                     	;# 
  1093  0F3A                     	;# 
  1094  0F3B                     	;# 
  1095  0F3C                     	;# 
  1096  0F3D                     	;# 
  1097  0F3E                     	;# 
  1098  0F3F                     	;# 
  1099  0F40                     	;# 
  1100  0F41                     	;# 
  1101  0F43                     	;# 
  1102  0F44                     	;# 
  1103  0F45                     	;# 
  1104  0F46                     	;# 
  1105  0F47                     	;# 
  1106  0F48                     	;# 
  1107  0F49                     	;# 
  1108  0F4A                     	;# 
  1109  0F4B                     	;# 
  1110  0F4C                     	;# 
  1111  0F4E                     	;# 
  1112  0F4F                     	;# 
  1113  0F50                     	;# 
  1114  0F51                     	;# 
  1115  0F52                     	;# 
  1116  0F53                     	;# 
  1117  0F54                     	;# 
  1118  0F55                     	;# 
  1119  0F56                     	;# 
  1120  0F57                     	;# 
  1121  0F65                     	;# 
  1122  0F68                     	;# 
  1123  0F69                     	;# 
  1124  0F6A                     	;# 
  1125  0F6B                     	;# 
  1126  0FE4                     	;# 
  1127  0FE5                     	;# 
  1128  0FE6                     	;# 
  1129  0FE7                     	;# 
  1130  0FE8                     	;# 
  1131  0FE9                     	;# 
  1132  0FEA                     	;# 
  1133  0FEB                     	;# 
  1134  0FED                     	;# 
  1135  0FEE                     	;# 
  1136  0FEF                     	;# 
  1137  0000                     	;# 
  1138  0001                     	;# 
  1139  0002                     	;# 
  1140  0003                     	;# 
  1141  0004                     	;# 
  1142  0005                     	;# 
  1143  0006                     	;# 
  1144  0007                     	;# 
  1145  0008                     	;# 
  1146  0009                     	;# 
  1147  000A                     	;# 
  1148  000B                     	;# 
  1149  000C                     	;# 
  1150  000D                     	;# 
  1151  000E                     	;# 
  1152  0010                     	;# 
  1153  0011                     	;# 
  1154  0012                     	;# 
  1155  0013                     	;# 
  1156  0016                     	;# 
  1157  0017                     	;# 
  1158  0018                     	;# 
  1159  001C                     	;# 
  1160  001C                     	;# 
  1161  001D                     	;# 
  1162  001D                     	;# 
  1163  001E                     	;# 
  1164  001F                     	;# 
  1165  008C                     	;# 
  1166  008C                     	;# 
  1167  008D                     	;# 
  1168  008E                     	;# 
  1169  008E                     	;# 
  1170  008F                     	;# 
  1171  0090                     	;# 
  1172  0090                     	;# 
  1173  0091                     	;# 
  1174  0093                     	;# 
  1175  0094                     	;# 
  1176  0095                     	;# 
  1177  0096                     	;# 
  1178  0097                     	;# 
  1179  0098                     	;# 
  1180  0099                     	;# 
  1181  009A                     	;# 
  1182  009B                     	;# 
  1183  009C                     	;# 
  1184  009D                     	;# 
  1185  009E                     	;# 
  1186  010C                     	;# 
  1187  010D                     	;# 
  1188  010E                     	;# 
  1189  010E                     	;# 
  1190  010F                     	;# 
  1191  0110                     	;# 
  1192  0110                     	;# 
  1193  0111                     	;# 
  1194  0112                     	;# 
  1195  0112                     	;# 
  1196  0113                     	;# 
  1197  0114                     	;# 
  1198  0114                     	;# 
  1199  0115                     	;# 
  1200  0116                     	;# 
  1201  0116                     	;# 
  1202  0117                     	;# 
  1203  0119                     	;# 
  1204  0119                     	;# 
  1205  0119                     	;# 
  1206  011A                     	;# 
  1207  011A                     	;# 
  1208  011A                     	;# 
  1209  011B                     	;# 
  1210  011B                     	;# 
  1211  011B                     	;# 
  1212  011B                     	;# 
  1213  011B                     	;# 
  1214  011C                     	;# 
  1215  011C                     	;# 
  1216  011C                     	;# 
  1217  011D                     	;# 
  1218  011D                     	;# 
  1219  011D                     	;# 
  1220  011E                     	;# 
  1221  011E                     	;# 
  1222  011E                     	;# 
  1223  011F                     	;# 
  1224  011F                     	;# 
  1225  011F                     	;# 
  1226  011F                     	;# 
  1227  011F                     	;# 
  1228  018C                     	;# 
  1229  018D                     	;# 
  1230  018E                     	;# 
  1231  018F                     	;# 
  1232  0190                     	;# 
  1233  0191                     	;# 
  1234  0192                     	;# 
  1235  0196                     	;# 
  1236  0197                     	;# 
  1237  0198                     	;# 
  1238  0199                     	;# 
  1239  019A                     	;# 
  1240  019B                     	;# 
  1241  019C                     	;# 
  1242  020C                     	;# 
  1243  020C                     	;# 
  1244  020D                     	;# 
  1245  020E                     	;# 
  1246  020F                     	;# 
  1247  020F                     	;# 
  1248  0210                     	;# 
  1249  0210                     	;# 
  1250  0211                     	;# 
  1251  0211                     	;# 
  1252  0212                     	;# 
  1253  0212                     	;# 
  1254  0213                     	;# 
  1255  0214                     	;# 
  1256  0215                     	;# 
  1257  0215                     	;# 
  1258  0216                     	;# 
  1259  0216                     	;# 
  1260  0217                     	;# 
  1261  0217                     	;# 
  1262  0218                     	;# 
  1263  0218                     	;# 
  1264  0219                     	;# 
  1265  021A                     	;# 
  1266  021B                     	;# 
  1267  021B                     	;# 
  1268  021C                     	;# 
  1269  021C                     	;# 
  1270  021D                     	;# 
  1271  021D                     	;# 
  1272  021E                     	;# 
  1273  021F                     	;# 
  1274  028C                     	;# 
  1275  028C                     	;# 
  1276  028D                     	;# 
  1277  028D                     	;# 
  1278  028E                     	;# 
  1279  028F                     	;# 
  1280  0290                     	;# 
  1281  0290                     	;# 
  1282  0291                     	;# 
  1283  0292                     	;# 
  1284  0292                     	;# 
  1285  0293                     	;# 
  1286  0293                     	;# 
  1287  0294                     	;# 
  1288  0295                     	;# 
  1289  0296                     	;# 
  1290  0296                     	;# 
  1291  0297                     	;# 
  1292  0298                     	;# 
  1293  0298                     	;# 
  1294  0299                     	;# 
  1295  0299                     	;# 
  1296  029A                     	;# 
  1297  029B                     	;# 
  1298  029C                     	;# 
  1299  029C                     	;# 
  1300  029D                     	;# 
  1301  030C                     	;# 
  1302  030C                     	;# 
  1303  030D                     	;# 
  1304  030E                     	;# 
  1305  030F                     	;# 
  1306  0310                     	;# 
  1307  0310                     	;# 
  1308  0311                     	;# 
  1309  0312                     	;# 
  1310  0313                     	;# 
  1311  0314                     	;# 
  1312  0314                     	;# 
  1313  0315                     	;# 
  1314  0316                     	;# 
  1315  0317                     	;# 
  1316  0318                     	;# 
  1317  0318                     	;# 
  1318  0319                     	;# 
  1319  031A                     	;# 
  1320  031B                     	;# 
  1321  031C                     	;# 
  1322  031C                     	;# 
  1323  031D                     	;# 
  1324  031E                     	;# 
  1325  031F                     	;# 
  1326  038C                     	;# 
  1327  038D                     	;# 
  1328  038E                     	;# 
  1329  0390                     	;# 
  1330  0391                     	;# 
  1331  0392                     	;# 
  1332  040C                     	;# 
  1333  040D                     	;# 
  1334  040E                     	;# 
  1335  040F                     	;# 
  1336  0410                     	;# 
  1337  0411                     	;# 
  1338  0416                     	;# 
  1339  0416                     	;# 
  1340  0417                     	;# 
  1341  0418                     	;# 
  1342  0418                     	;# 
  1343  0419                     	;# 
  1344  041A                     	;# 
  1345  041A                     	;# 
  1346  041B                     	;# 
  1347  041C                     	;# 
  1348  041C                     	;# 
  1349  041D                     	;# 
  1350  041E                     	;# 
  1351  041F                     	;# 
  1352  048C                     	;# 
  1353  048C                     	;# 
  1354  048D                     	;# 
  1355  048E                     	;# 
  1356  048F                     	;# 
  1357  048F                     	;# 
  1358  0490                     	;# 
  1359  0491                     	;# 
  1360  0492                     	;# 
  1361  0492                     	;# 
  1362  0493                     	;# 
  1363  0494                     	;# 
  1364  0495                     	;# 
  1365  0495                     	;# 
  1366  0496                     	;# 
  1367  0497                     	;# 
  1368  0498                     	;# 
  1369  0499                     	;# 
  1370  049A                     	;# 
  1371  049B                     	;# 
  1372  049C                     	;# 
  1373  049D                     	;# 
  1374  050C                     	;# 
  1375  050C                     	;# 
  1376  050D                     	;# 
  1377  050E                     	;# 
  1378  050F                     	;# 
  1379  050F                     	;# 
  1380  0510                     	;# 
  1381  0511                     	;# 
  1382  0512                     	;# 
  1383  0512                     	;# 
  1384  0513                     	;# 
  1385  0514                     	;# 
  1386  0515                     	;# 
  1387  0515                     	;# 
  1388  0516                     	;# 
  1389  0517                     	;# 
  1390  0518                     	;# 
  1391  0519                     	;# 
  1392  051A                     	;# 
  1393  051B                     	;# 
  1394  051C                     	;# 
  1395  051D                     	;# 
  1396  058C                     	;# 
  1397  058C                     	;# 
  1398  058D                     	;# 
  1399  058E                     	;# 
  1400  058F                     	;# 
  1401  058F                     	;# 
  1402  0590                     	;# 
  1403  0591                     	;# 
  1404  0592                     	;# 
  1405  0593                     	;# 
  1406  060C                     	;# 
  1407  060D                     	;# 
  1408  060E                     	;# 
  1409  060F                     	;# 
  1410  0610                     	;# 
  1411  0611                     	;# 
  1412  0612                     	;# 
  1413  0613                     	;# 
  1414  0614                     	;# 
  1415  0616                     	;# 
  1416  0617                     	;# 
  1417  0618                     	;# 
  1418  0619                     	;# 
  1419  061A                     	;# 
  1420  061B                     	;# 
  1421  061C                     	;# 
  1422  061D                     	;# 
  1423  061E                     	;# 
  1424  068C                     	;# 
  1425  068D                     	;# 
  1426  068E                     	;# 
  1427  068F                     	;# 
  1428  0690                     	;# 
  1429  0691                     	;# 
  1430  0692                     	;# 
  1431  0693                     	;# 
  1432  0694                     	;# 
  1433  070C                     	;# 
  1434  070D                     	;# 
  1435  070E                     	;# 
  1436  070F                     	;# 
  1437  0710                     	;# 
  1438  0711                     	;# 
  1439  0712                     	;# 
  1440  0713                     	;# 
  1441  0714                     	;# 
  1442  0716                     	;# 
  1443  0717                     	;# 
  1444  0718                     	;# 
  1445  0719                     	;# 
  1446  071A                     	;# 
  1447  071B                     	;# 
  1448  071C                     	;# 
  1449  071D                     	;# 
  1450  071E                     	;# 
  1451  0796                     	;# 
  1452  0797                     	;# 
  1453  0798                     	;# 
  1454  0799                     	;# 
  1455  079A                     	;# 
  1456  079B                     	;# 
  1457  080C                     	;# 
  1458  080D                     	;# 
  1459  080E                     	;# 
  1460  080F                     	;# 
  1461  0810                     	;# 
  1462  0811                     	;# 
  1463  0812                     	;# 
  1464  0813                     	;# 
  1465  0814                     	;# 
  1466  081A                     	;# 
  1467  081B                     	;# 
  1468  081C                     	;# 
  1469  081D                     	;# 
  1470  081E                     	;# 
  1471  081F                     	;# 
  1472  088C                     	;# 
  1473  088D                     	;# 
  1474  088E                     	;# 
  1475  088F                     	;# 
  1476  0890                     	;# 
  1477  0891                     	;# 
  1478  0892                     	;# 
  1479  0893                     	;# 
  1480  0895                     	;# 
  1481  0896                     	;# 
  1482  0897                     	;# 
  1483  0898                     	;# 
  1484  0899                     	;# 
  1485  089A                     	;# 
  1486  089B                     	;# 
  1487  090C                     	;# 
  1488  090E                     	;# 
  1489  090F                     	;# 
  1490  091F                     	;# 
  1491  091F                     	;# 
  1492  098F                     	;# 
  1493  098F                     	;# 
  1494  0990                     	;# 
  1495  0991                     	;# 
  1496  0992                     	;# 
  1497  0993                     	;# 
  1498  0994                     	;# 
  1499  0995                     	;# 
  1500  0996                     	;# 
  1501  0997                     	;# 
  1502  0E0F                     	;# 
  1503  0E10                     	;# 
  1504  0E11                     	;# 
  1505  0E12                     	;# 
  1506  0E13                     	;# 
  1507  0E14                     	;# 
  1508  0E15                     	;# 
  1509  0E16                     	;# 
  1510  0E17                     	;# 
  1511  0E18                     	;# 
  1512  0E19                     	;# 
  1513  0E1A                     	;# 
  1514  0E1B                     	;# 
  1515  0E1C                     	;# 
  1516  0E1D                     	;# 
  1517  0E1E                     	;# 
  1518  0E1F                     	;# 
  1519  0E20                     	;# 
  1520  0E21                     	;# 
  1521  0E22                     	;# 
  1522  0E23                     	;# 
  1523  0E24                     	;# 
  1524  0E25                     	;# 
  1525  0E26                     	;# 
  1526  0E27                     	;# 
  1527  0E28                     	;# 
  1528  0E29                     	;# 
  1529  0E2A                     	;# 
  1530  0E2B                     	;# 
  1531  0E2C                     	;# 
  1532  0E2D                     	;# 
  1533  0E2E                     	;# 
  1534  0E2F                     	;# 
  1535  0E30                     	;# 
  1536  0E31                     	;# 
  1537  0E32                     	;# 
  1538  0E33                     	;# 
  1539  0E34                     	;# 
  1540  0E35                     	;# 
  1541  0E36                     	;# 
  1542  0E37                     	;# 
  1543  0E8F                     	;# 
  1544  0E90                     	;# 
  1545  0E91                     	;# 
  1546  0E92                     	;# 
  1547  0E93                     	;# 
  1548  0E94                     	;# 
  1549  0E95                     	;# 
  1550  0E96                     	;# 
  1551  0E97                     	;# 
  1552  0E9C                     	;# 
  1553  0E9D                     	;# 
  1554  0E9E                     	;# 
  1555  0EA1                     	;# 
  1556  0EA2                     	;# 
  1557  0EA3                     	;# 
  1558  0EA4                     	;# 
  1559  0EA5                     	;# 
  1560  0EA9                     	;# 
  1561  0EAA                     	;# 
  1562  0EAB                     	;# 
  1563  0EAC                     	;# 
  1564  0EB1                     	;# 
  1565  0EB2                     	;# 
  1566  0EB3                     	;# 
  1567  0EB8                     	;# 
  1568  0EB9                     	;# 
  1569  0EBA                     	;# 
  1570  0EBB                     	;# 
  1571  0EBC                     	;# 
  1572  0EBD                     	;# 
  1573  0EBE                     	;# 
  1574  0EC3                     	;# 
  1575  0EC5                     	;# 
  1576  0EC6                     	;# 
  1577  0EC7                     	;# 
  1578  0EC8                     	;# 
  1579  0EC9                     	;# 
  1580  0ECA                     	;# 
  1581  0ECB                     	;# 
  1582  0ECC                     	;# 
  1583  0F10                     	;# 
  1584  0F11                     	;# 
  1585  0F12                     	;# 
  1586  0F13                     	;# 
  1587  0F14                     	;# 
  1588  0F15                     	;# 
  1589  0F16                     	;# 
  1590  0F17                     	;# 
  1591  0F18                     	;# 
  1592  0F19                     	;# 
  1593  0F1A                     	;# 
  1594  0F1B                     	;# 
  1595  0F1C                     	;# 
  1596  0F1D                     	;# 
  1597  0F1E                     	;# 
  1598  0F1F                     	;# 
  1599  0F20                     	;# 
  1600  0F21                     	;# 
  1601  0F22                     	;# 
  1602  0F23                     	;# 
  1603  0F24                     	;# 
  1604  0F25                     	;# 
  1605  0F26                     	;# 
  1606  0F27                     	;# 
  1607  0F38                     	;# 
  1608  0F39                     	;# 
  1609  0F3A                     	;# 
  1610  0F3B                     	;# 
  1611  0F3C                     	;# 
  1612  0F3D                     	;# 
  1613  0F3E                     	;# 
  1614  0F3F                     	;# 
  1615  0F40                     	;# 
  1616  0F41                     	;# 
  1617  0F43                     	;# 
  1618  0F44                     	;# 
  1619  0F45                     	;# 
  1620  0F46                     	;# 
  1621  0F47                     	;# 
  1622  0F48                     	;# 
  1623  0F49                     	;# 
  1624  0F4A                     	;# 
  1625  0F4B                     	;# 
  1626  0F4C                     	;# 
  1627  0F4E                     	;# 
  1628  0F4F                     	;# 
  1629  0F50                     	;# 
  1630  0F51                     	;# 
  1631  0F52                     	;# 
  1632  0F53                     	;# 
  1633  0F54                     	;# 
  1634  0F55                     	;# 
  1635  0F56                     	;# 
  1636  0F57                     	;# 
  1637  0F65                     	;# 
  1638  0F68                     	;# 
  1639  0F69                     	;# 
  1640  0F6A                     	;# 
  1641  0F6B                     	;# 
  1642  0FE4                     	;# 
  1643  0FE5                     	;# 
  1644  0FE6                     	;# 
  1645  0FE7                     	;# 
  1646  0FE8                     	;# 
  1647  0FE9                     	;# 
  1648  0FEA                     	;# 
  1649  0FEB                     	;# 
  1650  0FED                     	;# 
  1651  0FEE                     	;# 
  1652  0FEF                     	;# 
  1653  0000                     	;# 
  1654  0001                     	;# 
  1655  0002                     	;# 
  1656  0003                     	;# 
  1657  0004                     	;# 
  1658  0005                     	;# 
  1659  0006                     	;# 
  1660  0007                     	;# 
  1661  0008                     	;# 
  1662  0009                     	;# 
  1663  000A                     	;# 
  1664  000B                     	;# 
  1665  000C                     	;# 
  1666  000D                     	;# 
  1667  000E                     	;# 
  1668  0010                     	;# 
  1669  0011                     	;# 
  1670  0012                     	;# 
  1671  0013                     	;# 
  1672  0016                     	;# 
  1673  0017                     	;# 
  1674  0018                     	;# 
  1675  001C                     	;# 
  1676  001C                     	;# 
  1677  001D                     	;# 
  1678  001D                     	;# 
  1679  001E                     	;# 
  1680  001F                     	;# 
  1681  008C                     	;# 
  1682  008C                     	;# 
  1683  008D                     	;# 
  1684  008E                     	;# 
  1685  008E                     	;# 
  1686  008F                     	;# 
  1687  0090                     	;# 
  1688  0090                     	;# 
  1689  0091                     	;# 
  1690  0093                     	;# 
  1691  0094                     	;# 
  1692  0095                     	;# 
  1693  0096                     	;# 
  1694  0097                     	;# 
  1695  0098                     	;# 
  1696  0099                     	;# 
  1697  009A                     	;# 
  1698  009B                     	;# 
  1699  009C                     	;# 
  1700  009D                     	;# 
  1701  009E                     	;# 
  1702  010C                     	;# 
  1703  010D                     	;# 
  1704  010E                     	;# 
  1705  010E                     	;# 
  1706  010F                     	;# 
  1707  0110                     	;# 
  1708  0110                     	;# 
  1709  0111                     	;# 
  1710  0112                     	;# 
  1711  0112                     	;# 
  1712  0113                     	;# 
  1713  0114                     	;# 
  1714  0114                     	;# 
  1715  0115                     	;# 
  1716  0116                     	;# 
  1717  0116                     	;# 
  1718  0117                     	;# 
  1719  0119                     	;# 
  1720  0119                     	;# 
  1721  0119                     	;# 
  1722  011A                     	;# 
  1723  011A                     	;# 
  1724  011A                     	;# 
  1725  011B                     	;# 
  1726  011B                     	;# 
  1727  011B                     	;# 
  1728  011B                     	;# 
  1729  011B                     	;# 
  1730  011C                     	;# 
  1731  011C                     	;# 
  1732  011C                     	;# 
  1733  011D                     	;# 
  1734  011D                     	;# 
  1735  011D                     	;# 
  1736  011E                     	;# 
  1737  011E                     	;# 
  1738  011E                     	;# 
  1739  011F                     	;# 
  1740  011F                     	;# 
  1741  011F                     	;# 
  1742  011F                     	;# 
  1743  011F                     	;# 
  1744  018C                     	;# 
  1745  018D                     	;# 
  1746  018E                     	;# 
  1747  018F                     	;# 
  1748  0190                     	;# 
  1749  0191                     	;# 
  1750  0192                     	;# 
  1751  0196                     	;# 
  1752  0197                     	;# 
  1753  0198                     	;# 
  1754  0199                     	;# 
  1755  019A                     	;# 
  1756  019B                     	;# 
  1757  019C                     	;# 
  1758  020C                     	;# 
  1759  020C                     	;# 
  1760  020D                     	;# 
  1761  020E                     	;# 
  1762  020F                     	;# 
  1763  020F                     	;# 
  1764  0210                     	;# 
  1765  0210                     	;# 
  1766  0211                     	;# 
  1767  0211                     	;# 
  1768  0212                     	;# 
  1769  0212                     	;# 
  1770  0213                     	;# 
  1771  0214                     	;# 
  1772  0215                     	;# 
  1773  0215                     	;# 
  1774  0216                     	;# 
  1775  0216                     	;# 
  1776  0217                     	;# 
  1777  0217                     	;# 
  1778  0218                     	;# 
  1779  0218                     	;# 
  1780  0219                     	;# 
  1781  021A                     	;# 
  1782  021B                     	;# 
  1783  021B                     	;# 
  1784  021C                     	;# 
  1785  021C                     	;# 
  1786  021D                     	;# 
  1787  021D                     	;# 
  1788  021E                     	;# 
  1789  021F                     	;# 
  1790  028C                     	;# 
  1791  028C                     	;# 
  1792  028D                     	;# 
  1793  028D                     	;# 
  1794  028E                     	;# 
  1795  028F                     	;# 
  1796  0290                     	;# 
  1797  0290                     	;# 
  1798  0291                     	;# 
  1799  0292                     	;# 
  1800  0292                     	;# 
  1801  0293                     	;# 
  1802  0293                     	;# 
  1803  0294                     	;# 
  1804  0295                     	;# 
  1805  0296                     	;# 
  1806  0296                     	;# 
  1807  0297                     	;# 
  1808  0298                     	;# 
  1809  0298                     	;# 
  1810  0299                     	;# 
  1811  0299                     	;# 
  1812  029A                     	;# 
  1813  029B                     	;# 
  1814  029C                     	;# 
  1815  029C                     	;# 
  1816  029D                     	;# 
  1817  030C                     	;# 
  1818  030C                     	;# 
  1819  030D                     	;# 
  1820  030E                     	;# 
  1821  030F                     	;# 
  1822  0310                     	;# 
  1823  0310                     	;# 
  1824  0311                     	;# 
  1825  0312                     	;# 
  1826  0313                     	;# 
  1827  0314                     	;# 
  1828  0314                     	;# 
  1829  0315                     	;# 
  1830  0316                     	;# 
  1831  0317                     	;# 
  1832  0318                     	;# 
  1833  0318                     	;# 
  1834  0319                     	;# 
  1835  031A                     	;# 
  1836  031B                     	;# 
  1837  031C                     	;# 
  1838  031C                     	;# 
  1839  031D                     	;# 
  1840  031E                     	;# 
  1841  031F                     	;# 
  1842  038C                     	;# 
  1843  038D                     	;# 
  1844  038E                     	;# 
  1845  0390                     	;# 
  1846  0391                     	;# 
  1847  0392                     	;# 
  1848  040C                     	;# 
  1849  040D                     	;# 
  1850  040E                     	;# 
  1851  040F                     	;# 
  1852  0410                     	;# 
  1853  0411                     	;# 
  1854  0416                     	;# 
  1855  0416                     	;# 
  1856  0417                     	;# 
  1857  0418                     	;# 
  1858  0418                     	;# 
  1859  0419                     	;# 
  1860  041A                     	;# 
  1861  041A                     	;# 
  1862  041B                     	;# 
  1863  041C                     	;# 
  1864  041C                     	;# 
  1865  041D                     	;# 
  1866  041E                     	;# 
  1867  041F                     	;# 
  1868  048C                     	;# 
  1869  048C                     	;# 
  1870  048D                     	;# 
  1871  048E                     	;# 
  1872  048F                     	;# 
  1873  048F                     	;# 
  1874  0490                     	;# 
  1875  0491                     	;# 
  1876  0492                     	;# 
  1877  0492                     	;# 
  1878  0493                     	;# 
  1879  0494                     	;# 
  1880  0495                     	;# 
  1881  0495                     	;# 
  1882  0496                     	;# 
  1883  0497                     	;# 
  1884  0498                     	;# 
  1885  0499                     	;# 
  1886  049A                     	;# 
  1887  049B                     	;# 
  1888  049C                     	;# 
  1889  049D                     	;# 
  1890  050C                     	;# 
  1891  050C                     	;# 
  1892  050D                     	;# 
  1893  050E                     	;# 
  1894  050F                     	;# 
  1895  050F                     	;# 
  1896  0510                     	;# 
  1897  0511                     	;# 
  1898  0512                     	;# 
  1899  0512                     	;# 
  1900  0513                     	;# 
  1901  0514                     	;# 
  1902  0515                     	;# 
  1903  0515                     	;# 
  1904  0516                     	;# 
  1905  0517                     	;# 
  1906  0518                     	;# 
  1907  0519                     	;# 
  1908  051A                     	;# 
  1909  051B                     	;# 
  1910  051C                     	;# 
  1911  051D                     	;# 
  1912  058C                     	;# 
  1913  058C                     	;# 
  1914  058D                     	;# 
  1915  058E                     	;# 
  1916  058F                     	;# 
  1917  058F                     	;# 
  1918  0590                     	;# 
  1919  0591                     	;# 
  1920  0592                     	;# 
  1921  0593                     	;# 
  1922  060C                     	;# 
  1923  060D                     	;# 
  1924  060E                     	;# 
  1925  060F                     	;# 
  1926  0610                     	;# 
  1927  0611                     	;# 
  1928  0612                     	;# 
  1929  0613                     	;# 
  1930  0614                     	;# 
  1931  0616                     	;# 
  1932  0617                     	;# 
  1933  0618                     	;# 
  1934  0619                     	;# 
  1935  061A                     	;# 
  1936  061B                     	;# 
  1937  061C                     	;# 
  1938  061D                     	;# 
  1939  061E                     	;# 
  1940  068C                     	;# 
  1941  068D                     	;# 
  1942  068E                     	;# 
  1943  068F                     	;# 
  1944  0690                     	;# 
  1945  0691                     	;# 
  1946  0692                     	;# 
  1947  0693                     	;# 
  1948  0694                     	;# 
  1949  070C                     	;# 
  1950  070D                     	;# 
  1951  070E                     	;# 
  1952  070F                     	;# 
  1953  0710                     	;# 
  1954  0711                     	;# 
  1955  0712                     	;# 
  1956  0713                     	;# 
  1957  0714                     	;# 
  1958  0716                     	;# 
  1959  0717                     	;# 
  1960  0718                     	;# 
  1961  0719                     	;# 
  1962  071A                     	;# 
  1963  071B                     	;# 
  1964  071C                     	;# 
  1965  071D                     	;# 
  1966  071E                     	;# 
  1967  0796                     	;# 
  1968  0797                     	;# 
  1969  0798                     	;# 
  1970  0799                     	;# 
  1971  079A                     	;# 
  1972  079B                     	;# 
  1973  080C                     	;# 
  1974  080D                     	;# 
  1975  080E                     	;# 
  1976  080F                     	;# 
  1977  0810                     	;# 
  1978  0811                     	;# 
  1979  0812                     	;# 
  1980  0813                     	;# 
  1981  0814                     	;# 
  1982  081A                     	;# 
  1983  081B                     	;# 
  1984  081C                     	;# 
  1985  081D                     	;# 
  1986  081E                     	;# 
  1987  081F                     	;# 
  1988  088C                     	;# 
  1989  088D                     	;# 
  1990  088E                     	;# 
  1991  088F                     	;# 
  1992  0890                     	;# 
  1993  0891                     	;# 
  1994  0892                     	;# 
  1995  0893                     	;# 
  1996  0895                     	;# 
  1997  0896                     	;# 
  1998  0897                     	;# 
  1999  0898                     	;# 
  2000  0899                     	;# 
  2001  089A                     	;# 
  2002  089B                     	;# 
  2003  090C                     	;# 
  2004  090E                     	;# 
  2005  090F                     	;# 
  2006  091F                     	;# 
  2007  091F                     	;# 
  2008  098F                     	;# 
  2009  098F                     	;# 
  2010  0990                     	;# 
  2011  0991                     	;# 
  2012  0992                     	;# 
  2013  0993                     	;# 
  2014  0994                     	;# 
  2015  0995                     	;# 
  2016  0996                     	;# 
  2017  0997                     	;# 
  2018  0E0F                     	;# 
  2019  0E10                     	;# 
  2020  0E11                     	;# 
  2021  0E12                     	;# 
  2022  0E13                     	;# 
  2023  0E14                     	;# 
  2024  0E15                     	;# 
  2025  0E16                     	;# 
  2026  0E17                     	;# 
  2027  0E18                     	;# 
  2028  0E19                     	;# 
  2029  0E1A                     	;# 
  2030  0E1B                     	;# 
  2031  0E1C                     	;# 
  2032  0E1D                     	;# 
  2033  0E1E                     	;# 
  2034  0E1F                     	;# 
  2035  0E20                     	;# 
  2036  0E21                     	;# 
  2037  0E22                     	;# 
  2038  0E23                     	;# 
  2039  0E24                     	;# 
  2040  0E25                     	;# 
  2041  0E26                     	;# 
  2042  0E27                     	;# 
  2043  0E28                     	;# 
  2044  0E29                     	;# 
  2045  0E2A                     	;# 
  2046  0E2B                     	;# 
  2047  0E2C                     	;# 
  2048  0E2D                     	;# 
  2049  0E2E                     	;# 
  2050  0E2F                     	;# 
  2051  0E30                     	;# 
  2052  0E31                     	;# 
  2053  0E32                     	;# 
  2054  0E33                     	;# 
  2055  0E34                     	;# 
  2056  0E35                     	;# 
  2057  0E36                     	;# 
  2058  0E37                     	;# 
  2059  0E8F                     	;# 
  2060  0E90                     	;# 
  2061  0E91                     	;# 
  2062  0E92                     	;# 
  2063  0E93                     	;# 
  2064  0E94                     	;# 
  2065  0E95                     	;# 
  2066  0E96                     	;# 
  2067  0E97                     	;# 
  2068  0E9C                     	;# 
  2069  0E9D                     	;# 
  2070  0E9E                     	;# 
  2071  0EA1                     	;# 
  2072  0EA2                     	;# 
  2073  0EA3                     	;# 
  2074  0EA4                     	;# 
  2075  0EA5                     	;# 
  2076  0EA9                     	;# 
  2077  0EAA                     	;# 
  2078  0EAB                     	;# 
  2079  0EAC                     	;# 
  2080  0EB1                     	;# 
  2081  0EB2                     	;# 
  2082  0EB3                     	;# 
  2083  0EB8                     	;# 
  2084  0EB9                     	;# 
  2085  0EBA                     	;# 
  2086  0EBB                     	;# 
  2087  0EBC                     	;# 
  2088  0EBD                     	;# 
  2089  0EBE                     	;# 
  2090  0EC3                     	;# 
  2091  0EC5                     	;# 
  2092  0EC6                     	;# 
  2093  0EC7                     	;# 
  2094  0EC8                     	;# 
  2095  0EC9                     	;# 
  2096  0ECA                     	;# 
  2097  0ECB                     	;# 
  2098  0ECC                     	;# 
  2099  0F10                     	;# 
  2100  0F11                     	;# 
  2101  0F12                     	;# 
  2102  0F13                     	;# 
  2103  0F14                     	;# 
  2104  0F15                     	;# 
  2105  0F16                     	;# 
  2106  0F17                     	;# 
  2107  0F18                     	;# 
  2108  0F19                     	;# 
  2109  0F1A                     	;# 
  2110  0F1B                     	;# 
  2111  0F1C                     	;# 
  2112  0F1D                     	;# 
  2113  0F1E                     	;# 
  2114  0F1F                     	;# 
  2115  0F20                     	;# 
  2116  0F21                     	;# 
  2117  0F22                     	;# 
  2118  0F23                     	;# 
  2119  0F24                     	;# 
  2120  0F25                     	;# 
  2121  0F26                     	;# 
  2122  0F27                     	;# 
  2123  0F38                     	;# 
  2124  0F39                     	;# 
  2125  0F3A                     	;# 
  2126  0F3B                     	;# 
  2127  0F3C                     	;# 
  2128  0F3D                     	;# 
  2129  0F3E                     	;# 
  2130  0F3F                     	;# 
  2131  0F40                     	;# 
  2132  0F41                     	;# 
  2133  0F43                     	;# 
  2134  0F44                     	;# 
  2135  0F45                     	;# 
  2136  0F46                     	;# 
  2137  0F47                     	;# 
  2138  0F48                     	;# 
  2139  0F49                     	;# 
  2140  0F4A                     	;# 
  2141  0F4B                     	;# 
  2142  0F4C                     	;# 
  2143  0F4E                     	;# 
  2144  0F4F                     	;# 
  2145  0F50                     	;# 
  2146  0F51                     	;# 
  2147  0F52                     	;# 
  2148  0F53                     	;# 
  2149  0F54                     	;# 
  2150  0F55                     	;# 
  2151  0F56                     	;# 
  2152  0F57                     	;# 
  2153  0F65                     	;# 
  2154  0F68                     	;# 
  2155  0F69                     	;# 
  2156  0F6A                     	;# 
  2157  0F6B                     	;# 
  2158  0FE4                     	;# 
  2159  0FE5                     	;# 
  2160  0FE6                     	;# 
  2161  0FE7                     	;# 
  2162  0FE8                     	;# 
  2163  0FE9                     	;# 
  2164  0FEA                     	;# 
  2165  0FEB                     	;# 
  2166  0FED                     	;# 
  2167  0FEE                     	;# 
  2168  0FEF                     	;# 
  2169  0000                     	;# 
  2170  0001                     	;# 
  2171  0002                     	;# 
  2172  0003                     	;# 
  2173  0004                     	;# 
  2174  0005                     	;# 
  2175  0006                     	;# 
  2176  0007                     	;# 
  2177  0008                     	;# 
  2178  0009                     	;# 
  2179  000A                     	;# 
  2180  000B                     	;# 
  2181  000C                     	;# 
  2182  000D                     	;# 
  2183  000E                     	;# 
  2184  0010                     	;# 
  2185  0011                     	;# 
  2186  0012                     	;# 
  2187  0013                     	;# 
  2188  0016                     	;# 
  2189  0017                     	;# 
  2190  0018                     	;# 
  2191  001C                     	;# 
  2192  001C                     	;# 
  2193  001D                     	;# 
  2194  001D                     	;# 
  2195  001E                     	;# 
  2196  001F                     	;# 
  2197  008C                     	;# 
  2198  008C                     	;# 
  2199  008D                     	;# 
  2200  008E                     	;# 
  2201  008E                     	;# 
  2202  008F                     	;# 
  2203  0090                     	;# 
  2204  0090                     	;# 
  2205  0091                     	;# 
  2206  0093                     	;# 
  2207  0094                     	;# 
  2208  0095                     	;# 
  2209  0096                     	;# 
  2210  0097                     	;# 
  2211  0098                     	;# 
  2212  0099                     	;# 
  2213  009A                     	;# 
  2214  009B                     	;# 
  2215  009C                     	;# 
  2216  009D                     	;# 
  2217  009E                     	;# 
  2218  010C                     	;# 
  2219  010D                     	;# 
  2220  010E                     	;# 
  2221  010E                     	;# 
  2222  010F                     	;# 
  2223  0110                     	;# 
  2224  0110                     	;# 
  2225  0111                     	;# 
  2226  0112                     	;# 
  2227  0112                     	;# 
  2228  0113                     	;# 
  2229  0114                     	;# 
  2230  0114                     	;# 
  2231  0115                     	;# 
  2232  0116                     	;# 
  2233  0116                     	;# 
  2234  0117                     	;# 
  2235  0119                     	;# 
  2236  0119                     	;# 
  2237  0119                     	;# 
  2238  011A                     	;# 
  2239  011A                     	;# 
  2240  011A                     	;# 
  2241  011B                     	;# 
  2242  011B                     	;# 
  2243  011B                     	;# 
  2244  011B                     	;# 
  2245  011B                     	;# 
  2246  011C                     	;# 
  2247  011C                     	;# 
  2248  011C                     	;# 
  2249  011D                     	;# 
  2250  011D                     	;# 
  2251  011D                     	;# 
  2252  011E                     	;# 
  2253  011E                     	;# 
  2254  011E                     	;# 
  2255  011F                     	;# 
  2256  011F                     	;# 
  2257  011F                     	;# 
  2258  011F                     	;# 
  2259  011F                     	;# 
  2260  018C                     	;# 
  2261  018D                     	;# 
  2262  018E                     	;# 
  2263  018F                     	;# 
  2264  0190                     	;# 
  2265  0191                     	;# 
  2266  0192                     	;# 
  2267  0196                     	;# 
  2268  0197                     	;# 
  2269  0198                     	;# 
  2270  0199                     	;# 
  2271  019A                     	;# 
  2272  019B                     	;# 
  2273  019C                     	;# 
  2274  020C                     	;# 
  2275  020C                     	;# 
  2276  020D                     	;# 
  2277  020E                     	;# 
  2278  020F                     	;# 
  2279  020F                     	;# 
  2280  0210                     	;# 
  2281  0210                     	;# 
  2282  0211                     	;# 
  2283  0211                     	;# 
  2284  0212                     	;# 
  2285  0212                     	;# 
  2286  0213                     	;# 
  2287  0214                     	;# 
  2288  0215                     	;# 
  2289  0215                     	;# 
  2290  0216                     	;# 
  2291  0216                     	;# 
  2292  0217                     	;# 
  2293  0217                     	;# 
  2294  0218                     	;# 
  2295  0218                     	;# 
  2296  0219                     	;# 
  2297  021A                     	;# 
  2298  021B                     	;# 
  2299  021B                     	;# 
  2300  021C                     	;# 
  2301  021C                     	;# 
  2302  021D                     	;# 
  2303  021D                     	;# 
  2304  021E                     	;# 
  2305  021F                     	;# 
  2306  028C                     	;# 
  2307  028C                     	;# 
  2308  028D                     	;# 
  2309  028D                     	;# 
  2310  028E                     	;# 
  2311  028F                     	;# 
  2312  0290                     	;# 
  2313  0290                     	;# 
  2314  0291                     	;# 
  2315  0292                     	;# 
  2316  0292                     	;# 
  2317  0293                     	;# 
  2318  0293                     	;# 
  2319  0294                     	;# 
  2320  0295                     	;# 
  2321  0296                     	;# 
  2322  0296                     	;# 
  2323  0297                     	;# 
  2324  0298                     	;# 
  2325  0298                     	;# 
  2326  0299                     	;# 
  2327  0299                     	;# 
  2328  029A                     	;# 
  2329  029B                     	;# 
  2330  029C                     	;# 
  2331  029C                     	;# 
  2332  029D                     	;# 
  2333  030C                     	;# 
  2334  030C                     	;# 
  2335  030D                     	;# 
  2336  030E                     	;# 
  2337  030F                     	;# 
  2338  0310                     	;# 
  2339  0310                     	;# 
  2340  0311                     	;# 
  2341  0312                     	;# 
  2342  0313                     	;# 
  2343  0314                     	;# 
  2344  0314                     	;# 
  2345  0315                     	;# 
  2346  0316                     	;# 
  2347  0317                     	;# 
  2348  0318                     	;# 
  2349  0318                     	;# 
  2350  0319                     	;# 
  2351  031A                     	;# 
  2352  031B                     	;# 
  2353  031C                     	;# 
  2354  031C                     	;# 
  2355  031D                     	;# 
  2356  031E                     	;# 
  2357  031F                     	;# 
  2358  038C                     	;# 
  2359  038D                     	;# 
  2360  038E                     	;# 
  2361  0390                     	;# 
  2362  0391                     	;# 
  2363  0392                     	;# 
  2364  040C                     	;# 
  2365  040D                     	;# 
  2366  040E                     	;# 
  2367  040F                     	;# 
  2368  0410                     	;# 
  2369  0411                     	;# 
  2370  0416                     	;# 
  2371  0416                     	;# 
  2372  0417                     	;# 
  2373  0418                     	;# 
  2374  0418                     	;# 
  2375  0419                     	;# 
  2376  041A                     	;# 
  2377  041A                     	;# 
  2378  041B                     	;# 
  2379  041C                     	;# 
  2380  041C                     	;# 
  2381  041D                     	;# 
  2382  041E                     	;# 
  2383  041F                     	;# 
  2384  048C                     	;# 
  2385  048C                     	;# 
  2386  048D                     	;# 
  2387  048E                     	;# 
  2388  048F                     	;# 
  2389  048F                     	;# 
  2390  0490                     	;# 
  2391  0491                     	;# 
  2392  0492                     	;# 
  2393  0492                     	;# 
  2394  0493                     	;# 
  2395  0494                     	;# 
  2396  0495                     	;# 
  2397  0495                     	;# 
  2398  0496                     	;# 
  2399  0497                     	;# 
  2400  0498                     	;# 
  2401  0499                     	;# 
  2402  049A                     	;# 
  2403  049B                     	;# 
  2404  049C                     	;# 
  2405  049D                     	;# 
  2406  050C                     	;# 
  2407  050C                     	;# 
  2408  050D                     	;# 
  2409  050E                     	;# 
  2410  050F                     	;# 
  2411  050F                     	;# 
  2412  0510                     	;# 
  2413  0511                     	;# 
  2414  0512                     	;# 
  2415  0512                     	;# 
  2416  0513                     	;# 
  2417  0514                     	;# 
  2418  0515                     	;# 
  2419  0515                     	;# 
  2420  0516                     	;# 
  2421  0517                     	;# 
  2422  0518                     	;# 
  2423  0519                     	;# 
  2424  051A                     	;# 
  2425  051B                     	;# 
  2426  051C                     	;# 
  2427  051D                     	;# 
  2428  058C                     	;# 
  2429  058C                     	;# 
  2430  058D                     	;# 
  2431  058E                     	;# 
  2432  058F                     	;# 
  2433  058F                     	;# 
  2434  0590                     	;# 
  2435  0591                     	;# 
  2436  0592                     	;# 
  2437  0593                     	;# 
  2438  060C                     	;# 
  2439  060D                     	;# 
  2440  060E                     	;# 
  2441  060F                     	;# 
  2442  0610                     	;# 
  2443  0611                     	;# 
  2444  0612                     	;# 
  2445  0613                     	;# 
  2446  0614                     	;# 
  2447  0616                     	;# 
  2448  0617                     	;# 
  2449  0618                     	;# 
  2450  0619                     	;# 
  2451  061A                     	;# 
  2452  061B                     	;# 
  2453  061C                     	;# 
  2454  061D                     	;# 
  2455  061E                     	;# 
  2456  068C                     	;# 
  2457  068D                     	;# 
  2458  068E                     	;# 
  2459  068F                     	;# 
  2460  0690                     	;# 
  2461  0691                     	;# 
  2462  0692                     	;# 
  2463  0693                     	;# 
  2464  0694                     	;# 
  2465  070C                     	;# 
  2466  070D                     	;# 
  2467  070E                     	;# 
  2468  070F                     	;# 
  2469  0710                     	;# 
  2470  0711                     	;# 
  2471  0712                     	;# 
  2472  0713                     	;# 
  2473  0714                     	;# 
  2474  0716                     	;# 
  2475  0717                     	;# 
  2476  0718                     	;# 
  2477  0719                     	;# 
  2478  071A                     	;# 
  2479  071B                     	;# 
  2480  071C                     	;# 
  2481  071D                     	;# 
  2482  071E                     	;# 
  2483  0796                     	;# 
  2484  0797                     	;# 
  2485  0798                     	;# 
  2486  0799                     	;# 
  2487  079A                     	;# 
  2488  079B                     	;# 
  2489  080C                     	;# 
  2490  080D                     	;# 
  2491  080E                     	;# 
  2492  080F                     	;# 
  2493  0810                     	;# 
  2494  0811                     	;# 
  2495  0812                     	;# 
  2496  0813                     	;# 
  2497  0814                     	;# 
  2498  081A                     	;# 
  2499  081B                     	;# 
  2500  081C                     	;# 
  2501  081D                     	;# 
  2502  081E                     	;# 
  2503  081F                     	;# 
  2504  088C                     	;# 
  2505  088D                     	;# 
  2506  088E                     	;# 
  2507  088F                     	;# 
  2508  0890                     	;# 
  2509  0891                     	;# 
  2510  0892                     	;# 
  2511  0893                     	;# 
  2512  0895                     	;# 
  2513  0896                     	;# 
  2514  0897                     	;# 
  2515  0898                     	;# 
  2516  0899                     	;# 
  2517  089A                     	;# 
  2518  089B                     	;# 
  2519  090C                     	;# 
  2520  090E                     	;# 
  2521  090F                     	;# 
  2522  091F                     	;# 
  2523  091F                     	;# 
  2524  098F                     	;# 
  2525  098F                     	;# 
  2526  0990                     	;# 
  2527  0991                     	;# 
  2528  0992                     	;# 
  2529  0993                     	;# 
  2530  0994                     	;# 
  2531  0995                     	;# 
  2532  0996                     	;# 
  2533  0997                     	;# 
  2534  0E0F                     	;# 
  2535  0E10                     	;# 
  2536  0E11                     	;# 
  2537  0E12                     	;# 
  2538  0E13                     	;# 
  2539  0E14                     	;# 
  2540  0E15                     	;# 
  2541  0E16                     	;# 
  2542  0E17                     	;# 
  2543  0E18                     	;# 
  2544  0E19                     	;# 
  2545  0E1A                     	;# 
  2546  0E1B                     	;# 
  2547  0E1C                     	;# 
  2548  0E1D                     	;# 
  2549  0E1E                     	;# 
  2550  0E1F                     	;# 
  2551  0E20                     	;# 
  2552  0E21                     	;# 
  2553  0E22                     	;# 
  2554  0E23                     	;# 
  2555  0E24                     	;# 
  2556  0E25                     	;# 
  2557  0E26                     	;# 
  2558  0E27                     	;# 
  2559  0E28                     	;# 
  2560  0E29                     	;# 
  2561  0E2A                     	;# 
  2562  0E2B                     	;# 
  2563  0E2C                     	;# 
  2564  0E2D                     	;# 
  2565  0E2E                     	;# 
  2566  0E2F                     	;# 
  2567  0E30                     	;# 
  2568  0E31                     	;# 
  2569  0E32                     	;# 
  2570  0E33                     	;# 
  2571  0E34                     	;# 
  2572  0E35                     	;# 
  2573  0E36                     	;# 
  2574  0E37                     	;# 
  2575  0E8F                     	;# 
  2576  0E90                     	;# 
  2577  0E91                     	;# 
  2578  0E92                     	;# 
  2579  0E93                     	;# 
  2580  0E94                     	;# 
  2581  0E95                     	;# 
  2582  0E96                     	;# 
  2583  0E97                     	;# 
  2584  0E9C                     	;# 
  2585  0E9D                     	;# 
  2586  0E9E                     	;# 
  2587  0EA1                     	;# 
  2588  0EA2                     	;# 
  2589  0EA3                     	;# 
  2590  0EA4                     	;# 
  2591  0EA5                     	;# 
  2592  0EA9                     	;# 
  2593  0EAA                     	;# 
  2594  0EAB                     	;# 
  2595  0EAC                     	;# 
  2596  0EB1                     	;# 
  2597  0EB2                     	;# 
  2598  0EB3                     	;# 
  2599  0EB8                     	;# 
  2600  0EB9                     	;# 
  2601  0EBA                     	;# 
  2602  0EBB                     	;# 
  2603  0EBC                     	;# 
  2604  0EBD                     	;# 
  2605  0EBE                     	;# 
  2606  0EC3                     	;# 
  2607  0EC5                     	;# 
  2608  0EC6                     	;# 
  2609  0EC7                     	;# 
  2610  0EC8                     	;# 
  2611  0EC9                     	;# 
  2612  0ECA                     	;# 
  2613  0ECB                     	;# 
  2614  0ECC                     	;# 
  2615  0F10                     	;# 
  2616  0F11                     	;# 
  2617  0F12                     	;# 
  2618  0F13                     	;# 
  2619  0F14                     	;# 
  2620  0F15                     	;# 
  2621  0F16                     	;# 
  2622  0F17                     	;# 
  2623  0F18                     	;# 
  2624  0F19                     	;# 
  2625  0F1A                     	;# 
  2626  0F1B                     	;# 
  2627  0F1C                     	;# 
  2628  0F1D                     	;# 
  2629  0F1E                     	;# 
  2630  0F1F                     	;# 
  2631  0F20                     	;# 
  2632  0F21                     	;# 
  2633  0F22                     	;# 
  2634  0F23                     	;# 
  2635  0F24                     	;# 
  2636  0F25                     	;# 
  2637  0F26                     	;# 
  2638  0F27                     	;# 
  2639  0F38                     	;# 
  2640  0F39                     	;# 
  2641  0F3A                     	;# 
  2642  0F3B                     	;# 
  2643  0F3C                     	;# 
  2644  0F3D                     	;# 
  2645  0F3E                     	;# 
  2646  0F3F                     	;# 
  2647  0F40                     	;# 
  2648  0F41                     	;# 
  2649  0F43                     	;# 
  2650  0F44                     	;# 
  2651  0F45                     	;# 
  2652  0F46                     	;# 
  2653  0F47                     	;# 
  2654  0F48                     	;# 
  2655  0F49                     	;# 
  2656  0F4A                     	;# 
  2657  0F4B                     	;# 
  2658  0F4C                     	;# 
  2659  0F4E                     	;# 
  2660  0F4F                     	;# 
  2661  0F50                     	;# 
  2662  0F51                     	;# 
  2663  0F52                     	;# 
  2664  0F53                     	;# 
  2665  0F54                     	;# 
  2666  0F55                     	;# 
  2667  0F56                     	;# 
  2668  0F57                     	;# 
  2669  0F65                     	;# 
  2670  0F68                     	;# 
  2671  0F69                     	;# 
  2672  0F6A                     	;# 
  2673  0F6B                     	;# 
  2674  0FE4                     	;# 
  2675  0FE5                     	;# 
  2676  0FE6                     	;# 
  2677  0FE7                     	;# 
  2678  0FE8                     	;# 
  2679  0FE9                     	;# 
  2680  0FEA                     	;# 
  2681  0FEB                     	;# 
  2682  0FED                     	;# 
  2683  0FEE                     	;# 
  2684  0FEF                     	;# 
  2685  0000                     	;# 
  2686  0001                     	;# 
  2687  0002                     	;# 
  2688  0003                     	;# 
  2689  0004                     	;# 
  2690  0005                     	;# 
  2691  0006                     	;# 
  2692  0007                     	;# 
  2693  0008                     	;# 
  2694  0009                     	;# 
  2695  000A                     	;# 
  2696  000B                     	;# 
  2697  000C                     	;# 
  2698  000D                     	;# 
  2699  000E                     	;# 
  2700  0010                     	;# 
  2701  0011                     	;# 
  2702  0012                     	;# 
  2703  0013                     	;# 
  2704  0016                     	;# 
  2705  0017                     	;# 
  2706  0018                     	;# 
  2707  001C                     	;# 
  2708  001C                     	;# 
  2709  001D                     	;# 
  2710  001D                     	;# 
  2711  001E                     	;# 
  2712  001F                     	;# 
  2713  008C                     	;# 
  2714  008C                     	;# 
  2715  008D                     	;# 
  2716  008E                     	;# 
  2717  008E                     	;# 
  2718  008F                     	;# 
  2719  0090                     	;# 
  2720  0090                     	;# 
  2721  0091                     	;# 
  2722  0093                     	;# 
  2723  0094                     	;# 
  2724  0095                     	;# 
  2725  0096                     	;# 
  2726  0097                     	;# 
  2727  0098                     	;# 
  2728  0099                     	;# 
  2729  009A                     	;# 
  2730  009B                     	;# 
  2731  009C                     	;# 
  2732  009D                     	;# 
  2733  009E                     	;# 
  2734  010C                     	;# 
  2735  010D                     	;# 
  2736  010E                     	;# 
  2737  010E                     	;# 
  2738  010F                     	;# 
  2739  0110                     	;# 
  2740  0110                     	;# 
  2741  0111                     	;# 
  2742  0112                     	;# 
  2743  0112                     	;# 
  2744  0113                     	;# 
  2745  0114                     	;# 
  2746  0114                     	;# 
  2747  0115                     	;# 
  2748  0116                     	;# 
  2749  0116                     	;# 
  2750  0117                     	;# 
  2751  0119                     	;# 
  2752  0119                     	;# 
  2753  0119                     	;# 
  2754  011A                     	;# 
  2755  011A                     	;# 
  2756  011A                     	;# 
  2757  011B                     	;# 
  2758  011B                     	;# 
  2759  011B                     	;# 
  2760  011B                     	;# 
  2761  011B                     	;# 
  2762  011C                     	;# 
  2763  011C                     	;# 
  2764  011C                     	;# 
  2765  011D                     	;# 
  2766  011D                     	;# 
  2767  011D                     	;# 
  2768  011E                     	;# 
  2769  011E                     	;# 
  2770  011E                     	;# 
  2771  011F                     	;# 
  2772  011F                     	;# 
  2773  011F                     	;# 
  2774  011F                     	;# 
  2775  011F                     	;# 
  2776  018C                     	;# 
  2777  018D                     	;# 
  2778  018E                     	;# 
  2779  018F                     	;# 
  2780  0190                     	;# 
  2781  0191                     	;# 
  2782  0192                     	;# 
  2783  0196                     	;# 
  2784  0197                     	;# 
  2785  0198                     	;# 
  2786  0199                     	;# 
  2787  019A                     	;# 
  2788  019B                     	;# 
  2789  019C                     	;# 
  2790  020C                     	;# 
  2791  020C                     	;# 
  2792  020D                     	;# 
  2793  020E                     	;# 
  2794  020F                     	;# 
  2795  020F                     	;# 
  2796  0210                     	;# 
  2797  0210                     	;# 
  2798  0211                     	;# 
  2799  0211                     	;# 
  2800  0212                     	;# 
  2801  0212                     	;# 
  2802  0213                     	;# 
  2803  0214                     	;# 
  2804  0215                     	;# 
  2805  0215                     	;# 
  2806  0216                     	;# 
  2807  0216                     	;# 
  2808  0217                     	;# 
  2809  0217                     	;# 
  2810  0218                     	;# 
  2811  0218                     	;# 
  2812  0219                     	;# 
  2813  021A                     	;# 
  2814  021B                     	;# 
  2815  021B                     	;# 
  2816  021C                     	;# 
  2817  021C                     	;# 
  2818  021D                     	;# 
  2819  021D                     	;# 
  2820  021E                     	;# 
  2821  021F                     	;# 
  2822  028C                     	;# 
  2823  028C                     	;# 
  2824  028D                     	;# 
  2825  028D                     	;# 
  2826  028E                     	;# 
  2827  028F                     	;# 
  2828  0290                     	;# 
  2829  0290                     	;# 
  2830  0291                     	;# 
  2831  0292                     	;# 
  2832  0292                     	;# 
  2833  0293                     	;# 
  2834  0293                     	;# 
  2835  0294                     	;# 
  2836  0295                     	;# 
  2837  0296                     	;# 
  2838  0296                     	;# 
  2839  0297                     	;# 
  2840  0298                     	;# 
  2841  0298                     	;# 
  2842  0299                     	;# 
  2843  0299                     	;# 
  2844  029A                     	;# 
  2845  029B                     	;# 
  2846  029C                     	;# 
  2847  029C                     	;# 
  2848  029D                     	;# 
  2849  030C                     	;# 
  2850  030C                     	;# 
  2851  030D                     	;# 
  2852  030E                     	;# 
  2853  030F                     	;# 
  2854  0310                     	;# 
  2855  0310                     	;# 
  2856  0311                     	;# 
  2857  0312                     	;# 
  2858  0313                     	;# 
  2859  0314                     	;# 
  2860  0314                     	;# 
  2861  0315                     	;# 
  2862  0316                     	;# 
  2863  0317                     	;# 
  2864  0318                     	;# 
  2865  0318                     	;# 
  2866  0319                     	;# 
  2867  031A                     	;# 
  2868  031B                     	;# 
  2869  031C                     	;# 
  2870  031C                     	;# 
  2871  031D                     	;# 
  2872  031E                     	;# 
  2873  031F                     	;# 
  2874  038C                     	;# 
  2875  038D                     	;# 
  2876  038E                     	;# 
  2877  0390                     	;# 
  2878  0391                     	;# 
  2879  0392                     	;# 
  2880  040C                     	;# 
  2881  040D                     	;# 
  2882  040E                     	;# 
  2883  040F                     	;# 
  2884  0410                     	;# 
  2885  0411                     	;# 
  2886  0416                     	;# 
  2887  0416                     	;# 
  2888  0417                     	;# 
  2889  0418                     	;# 
  2890  0418                     	;# 
  2891  0419                     	;# 
  2892  041A                     	;# 
  2893  041A                     	;# 
  2894  041B                     	;# 
  2895  041C                     	;# 
  2896  041C                     	;# 
  2897  041D                     	;# 
  2898  041E                     	;# 
  2899  041F                     	;# 
  2900  048C                     	;# 
  2901  048C                     	;# 
  2902  048D                     	;# 
  2903  048E                     	;# 
  2904  048F                     	;# 
  2905  048F                     	;# 
  2906  0490                     	;# 
  2907  0491                     	;# 
  2908  0492                     	;# 
  2909  0492                     	;# 
  2910  0493                     	;# 
  2911  0494                     	;# 
  2912  0495                     	;# 
  2913  0495                     	;# 
  2914  0496                     	;# 
  2915  0497                     	;# 
  2916  0498                     	;# 
  2917  0499                     	;# 
  2918  049A                     	;# 
  2919  049B                     	;# 
  2920  049C                     	;# 
  2921  049D                     	;# 
  2922  050C                     	;# 
  2923  050C                     	;# 
  2924  050D                     	;# 
  2925  050E                     	;# 
  2926  050F                     	;# 
  2927  050F                     	;# 
  2928  0510                     	;# 
  2929  0511                     	;# 
  2930  0512                     	;# 
  2931  0512                     	;# 
  2932  0513                     	;# 
  2933  0514                     	;# 
  2934  0515                     	;# 
  2935  0515                     	;# 
  2936  0516                     	;# 
  2937  0517                     	;# 
  2938  0518                     	;# 
  2939  0519                     	;# 
  2940  051A                     	;# 
  2941  051B                     	;# 
  2942  051C                     	;# 
  2943  051D                     	;# 
  2944  058C                     	;# 
  2945  058C                     	;# 
  2946  058D                     	;# 
  2947  058E                     	;# 
  2948  058F                     	;# 
  2949  058F                     	;# 
  2950  0590                     	;# 
  2951  0591                     	;# 
  2952  0592                     	;# 
  2953  0593                     	;# 
  2954  060C                     	;# 
  2955  060D                     	;# 
  2956  060E                     	;# 
  2957  060F                     	;# 
  2958  0610                     	;# 
  2959  0611                     	;# 
  2960  0612                     	;# 
  2961  0613                     	;# 
  2962  0614                     	;# 
  2963  0616                     	;# 
  2964  0617                     	;# 
  2965  0618                     	;# 
  2966  0619                     	;# 
  2967  061A                     	;# 
  2968  061B                     	;# 
  2969  061C                     	;# 
  2970  061D                     	;# 
  2971  061E                     	;# 
  2972  068C                     	;# 
  2973  068D                     	;# 
  2974  068E                     	;# 
  2975  068F                     	;# 
  2976  0690                     	;# 
  2977  0691                     	;# 
  2978  0692                     	;# 
  2979  0693                     	;# 
  2980  0694                     	;# 
  2981  070C                     	;# 
  2982  070D                     	;# 
  2983  070E                     	;# 
  2984  070F                     	;# 
  2985  0710                     	;# 
  2986  0711                     	;# 
  2987  0712                     	;# 
  2988  0713                     	;# 
  2989  0714                     	;# 
  2990  0716                     	;# 
  2991  0717                     	;# 
  2992  0718                     	;# 
  2993  0719                     	;# 
  2994  071A                     	;# 
  2995  071B                     	;# 
  2996  071C                     	;# 
  2997  071D                     	;# 
  2998  071E                     	;# 
  2999  0796                     	;# 
  3000  0797                     	;# 
  3001  0798                     	;# 
  3002  0799                     	;# 
  3003  079A                     	;# 
  3004  079B                     	;# 
  3005  080C                     	;# 
  3006  080D                     	;# 
  3007  080E                     	;# 
  3008  080F                     	;# 
  3009  0810                     	;# 
  3010  0811                     	;# 
  3011  0812                     	;# 
  3012  0813                     	;# 
  3013  0814                     	;# 
  3014  081A                     	;# 
  3015  081B                     	;# 
  3016  081C                     	;# 
  3017  081D                     	;# 
  3018  081E                     	;# 
  3019  081F                     	;# 
  3020  088C                     	;# 
  3021  088D                     	;# 
  3022  088E                     	;# 
  3023  088F                     	;# 
  3024  0890                     	;# 
  3025  0891                     	;# 
  3026  0892                     	;# 
  3027  0893                     	;# 
  3028  0895                     	;# 
  3029  0896                     	;# 
  3030  0897                     	;# 
  3031  0898                     	;# 
  3032  0899                     	;# 
  3033  089A                     	;# 
  3034  089B                     	;# 
  3035  090C                     	;# 
  3036  090E                     	;# 
  3037  090F                     	;# 
  3038  091F                     	;# 
  3039  091F                     	;# 
  3040  098F                     	;# 
  3041  098F                     	;# 
  3042  0990                     	;# 
  3043  0991                     	;# 
  3044  0992                     	;# 
  3045  0993                     	;# 
  3046  0994                     	;# 
  3047  0995                     	;# 
  3048  0996                     	;# 
  3049  0997                     	;# 
  3050  0E0F                     	;# 
  3051  0E10                     	;# 
  3052  0E11                     	;# 
  3053  0E12                     	;# 
  3054  0E13                     	;# 
  3055  0E14                     	;# 
  3056  0E15                     	;# 
  3057  0E16                     	;# 
  3058  0E17                     	;# 
  3059  0E18                     	;# 
  3060  0E19                     	;# 
  3061  0E1A                     	;# 
  3062  0E1B                     	;# 
  3063  0E1C                     	;# 
  3064  0E1D                     	;# 
  3065  0E1E                     	;# 
  3066  0E1F                     	;# 
  3067  0E20                     	;# 
  3068  0E21                     	;# 
  3069  0E22                     	;# 
  3070  0E23                     	;# 
  3071  0E24                     	;# 
  3072  0E25                     	;# 
  3073  0E26                     	;# 
  3074  0E27                     	;# 
  3075  0E28                     	;# 
  3076  0E29                     	;# 
  3077  0E2A                     	;# 
  3078  0E2B                     	;# 
  3079  0E2C                     	;# 
  3080  0E2D                     	;# 
  3081  0E2E                     	;# 
  3082  0E2F                     	;# 
  3083  0E30                     	;# 
  3084  0E31                     	;# 
  3085  0E32                     	;# 
  3086  0E33                     	;# 
  3087  0E34                     	;# 
  3088  0E35                     	;# 
  3089  0E36                     	;# 
  3090  0E37                     	;# 
  3091  0E8F                     	;# 
  3092  0E90                     	;# 
  3093  0E91                     	;# 
  3094  0E92                     	;# 
  3095  0E93                     	;# 
  3096  0E94                     	;# 
  3097  0E95                     	;# 
  3098  0E96                     	;# 
  3099  0E97                     	;# 
  3100  0E9C                     	;# 
  3101  0E9D                     	;# 
  3102  0E9E                     	;# 
  3103  0EA1                     	;# 
  3104  0EA2                     	;# 
  3105  0EA3                     	;# 
  3106  0EA4                     	;# 
  3107  0EA5                     	;# 
  3108  0EA9                     	;# 
  3109  0EAA                     	;# 
  3110  0EAB                     	;# 
  3111  0EAC                     	;# 
  3112  0EB1                     	;# 
  3113  0EB2                     	;# 
  3114  0EB3                     	;# 
  3115  0EB8                     	;# 
  3116  0EB9                     	;# 
  3117  0EBA                     	;# 
  3118  0EBB                     	;# 
  3119  0EBC                     	;# 
  3120  0EBD                     	;# 
  3121  0EBE                     	;# 
  3122  0EC3                     	;# 
  3123  0EC5                     	;# 
  3124  0EC6                     	;# 
  3125  0EC7                     	;# 
  3126  0EC8                     	;# 
  3127  0EC9                     	;# 
  3128  0ECA                     	;# 
  3129  0ECB                     	;# 
  3130  0ECC                     	;# 
  3131  0F10                     	;# 
  3132  0F11                     	;# 
  3133  0F12                     	;# 
  3134  0F13                     	;# 
  3135  0F14                     	;# 
  3136  0F15                     	;# 
  3137  0F16                     	;# 
  3138  0F17                     	;# 
  3139  0F18                     	;# 
  3140  0F19                     	;# 
  3141  0F1A                     	;# 
  3142  0F1B                     	;# 
  3143  0F1C                     	;# 
  3144  0F1D                     	;# 
  3145  0F1E                     	;# 
  3146  0F1F                     	;# 
  3147  0F20                     	;# 
  3148  0F21                     	;# 
  3149  0F22                     	;# 
  3150  0F23                     	;# 
  3151  0F24                     	;# 
  3152  0F25                     	;# 
  3153  0F26                     	;# 
  3154  0F27                     	;# 
  3155  0F38                     	;# 
  3156  0F39                     	;# 
  3157  0F3A                     	;# 
  3158  0F3B                     	;# 
  3159  0F3C                     	;# 
  3160  0F3D                     	;# 
  3161  0F3E                     	;# 
  3162  0F3F                     	;# 
  3163  0F40                     	;# 
  3164  0F41                     	;# 
  3165  0F43                     	;# 
  3166  0F44                     	;# 
  3167  0F45                     	;# 
  3168  0F46                     	;# 
  3169  0F47                     	;# 
  3170  0F48                     	;# 
  3171  0F49                     	;# 
  3172  0F4A                     	;# 
  3173  0F4B                     	;# 
  3174  0F4C                     	;# 
  3175  0F4E                     	;# 
  3176  0F4F                     	;# 
  3177  0F50                     	;# 
  3178  0F51                     	;# 
  3179  0F52                     	;# 
  3180  0F53                     	;# 
  3181  0F54                     	;# 
  3182  0F55                     	;# 
  3183  0F56                     	;# 
  3184  0F57                     	;# 
  3185  0F65                     	;# 
  3186  0F68                     	;# 
  3187  0F69                     	;# 
  3188  0F6A                     	;# 
  3189  0F6B                     	;# 
  3190  0FE4                     	;# 
  3191  0FE5                     	;# 
  3192  0FE6                     	;# 
  3193  0FE7                     	;# 
  3194  0FE8                     	;# 
  3195  0FE9                     	;# 
  3196  0FEA                     	;# 
  3197  0FEB                     	;# 
  3198  0FED                     	;# 
  3199  0FEE                     	;# 
  3200  0FEF                     	;# 
  3201  0000                     	;# 
  3202  0001                     	;# 
  3203  0002                     	;# 
  3204  0003                     	;# 
  3205  0004                     	;# 
  3206  0005                     	;# 
  3207  0006                     	;# 
  3208  0007                     	;# 
  3209  0008                     	;# 
  3210  0009                     	;# 
  3211  000A                     	;# 
  3212  000B                     	;# 
  3213  000C                     	;# 
  3214  000D                     	;# 
  3215  000E                     	;# 
  3216  0010                     	;# 
  3217  0011                     	;# 
  3218  0012                     	;# 
  3219  0013                     	;# 
  3220  0016                     	;# 
  3221  0017                     	;# 
  3222  0018                     	;# 
  3223  001C                     	;# 
  3224  001C                     	;# 
  3225  001D                     	;# 
  3226  001D                     	;# 
  3227  001E                     	;# 
  3228  001F                     	;# 
  3229  008C                     	;# 
  3230  008C                     	;# 
  3231  008D                     	;# 
  3232  008E                     	;# 
  3233  008E                     	;# 
  3234  008F                     	;# 
  3235  0090                     	;# 
  3236  0090                     	;# 
  3237  0091                     	;# 
  3238  0093                     	;# 
  3239  0094                     	;# 
  3240  0095                     	;# 
  3241  0096                     	;# 
  3242  0097                     	;# 
  3243  0098                     	;# 
  3244  0099                     	;# 
  3245  009A                     	;# 
  3246  009B                     	;# 
  3247  009C                     	;# 
  3248  009D                     	;# 
  3249  009E                     	;# 
  3250  010C                     	;# 
  3251  010D                     	;# 
  3252  010E                     	;# 
  3253  010E                     	;# 
  3254  010F                     	;# 
  3255  0110                     	;# 
  3256  0110                     	;# 
  3257  0111                     	;# 
  3258  0112                     	;# 
  3259  0112                     	;# 
  3260  0113                     	;# 
  3261  0114                     	;# 
  3262  0114                     	;# 
  3263  0115                     	;# 
  3264  0116                     	;# 
  3265  0116                     	;# 
  3266  0117                     	;# 
  3267  0119                     	;# 
  3268  0119                     	;# 
  3269  0119                     	;# 
  3270  011A                     	;# 
  3271  011A                     	;# 
  3272  011A                     	;# 
  3273  011B                     	;# 
  3274  011B                     	;# 
  3275  011B                     	;# 
  3276  011B                     	;# 
  3277  011B                     	;# 
  3278  011C                     	;# 
  3279  011C                     	;# 
  3280  011C                     	;# 
  3281  011D                     	;# 
  3282  011D                     	;# 
  3283  011D                     	;# 
  3284  011E                     	;# 
  3285  011E                     	;# 
  3286  011E                     	;# 
  3287  011F                     	;# 
  3288  011F                     	;# 
  3289  011F                     	;# 
  3290  011F                     	;# 
  3291  011F                     	;# 
  3292  018C                     	;# 
  3293  018D                     	;# 
  3294  018E                     	;# 
  3295  018F                     	;# 
  3296  0190                     	;# 
  3297  0191                     	;# 
  3298  0192                     	;# 
  3299  0196                     	;# 
  3300  0197                     	;# 
  3301  0198                     	;# 
  3302  0199                     	;# 
  3303  019A                     	;# 
  3304  019B                     	;# 
  3305  019C                     	;# 
  3306  020C                     	;# 
  3307  020C                     	;# 
  3308  020D                     	;# 
  3309  020E                     	;# 
  3310  020F                     	;# 
  3311  020F                     	;# 
  3312  0210                     	;# 
  3313  0210                     	;# 
  3314  0211                     	;# 
  3315  0211                     	;# 
  3316  0212                     	;# 
  3317  0212                     	;# 
  3318  0213                     	;# 
  3319  0214                     	;# 
  3320  0215                     	;# 
  3321  0215                     	;# 
  3322  0216                     	;# 
  3323  0216                     	;# 
  3324  0217                     	;# 
  3325  0217                     	;# 
  3326  0218                     	;# 
  3327  0218                     	;# 
  3328  0219                     	;# 
  3329  021A                     	;# 
  3330  021B                     	;# 
  3331  021B                     	;# 
  3332  021C                     	;# 
  3333  021C                     	;# 
  3334  021D                     	;# 
  3335  021D                     	;# 
  3336  021E                     	;# 
  3337  021F                     	;# 
  3338  028C                     	;# 
  3339  028C                     	;# 
  3340  028D                     	;# 
  3341  028D                     	;# 
  3342  028E                     	;# 
  3343  028F                     	;# 
  3344  0290                     	;# 
  3345  0290                     	;# 
  3346  0291                     	;# 
  3347  0292                     	;# 
  3348  0292                     	;# 
  3349  0293                     	;# 
  3350  0293                     	;# 
  3351  0294                     	;# 
  3352  0295                     	;# 
  3353  0296                     	;# 
  3354  0296                     	;# 
  3355  0297                     	;# 
  3356  0298                     	;# 
  3357  0298                     	;# 
  3358  0299                     	;# 
  3359  0299                     	;# 
  3360  029A                     	;# 
  3361  029B                     	;# 
  3362  029C                     	;# 
  3363  029C                     	;# 
  3364  029D                     	;# 
  3365  030C                     	;# 
  3366  030C                     	;# 
  3367  030D                     	;# 
  3368  030E                     	;# 
  3369  030F                     	;# 
  3370  0310                     	;# 
  3371  0310                     	;# 
  3372  0311                     	;# 
  3373  0312                     	;# 
  3374  0313                     	;# 
  3375  0314                     	;# 
  3376  0314                     	;# 
  3377  0315                     	;# 
  3378  0316                     	;# 
  3379  0317                     	;# 
  3380  0318                     	;# 
  3381  0318                     	;# 
  3382  0319                     	;# 
  3383  031A                     	;# 
  3384  031B                     	;# 
  3385  031C                     	;# 
  3386  031C                     	;# 
  3387  031D                     	;# 
  3388  031E                     	;# 
  3389  031F                     	;# 
  3390  038C                     	;# 
  3391  038D                     	;# 
  3392  038E                     	;# 
  3393  0390                     	;# 
  3394  0391                     	;# 
  3395  0392                     	;# 
  3396  040C                     	;# 
  3397  040D                     	;# 
  3398  040E                     	;# 
  3399  040F                     	;# 
  3400  0410                     	;# 
  3401  0411                     	;# 
  3402  0416                     	;# 
  3403  0416                     	;# 
  3404  0417                     	;# 
  3405  0418                     	;# 
  3406  0418                     	;# 
  3407  0419                     	;# 
  3408  041A                     	;# 
  3409  041A                     	;# 
  3410  041B                     	;# 
  3411  041C                     	;# 
  3412  041C                     	;# 
  3413  041D                     	;# 
  3414  041E                     	;# 
  3415  041F                     	;# 
  3416  048C                     	;# 
  3417  048C                     	;# 
  3418  048D                     	;# 
  3419  048E                     	;# 
  3420  048F                     	;# 
  3421  048F                     	;# 
  3422  0490                     	;# 
  3423  0491                     	;# 
  3424  0492                     	;# 
  3425  0492                     	;# 
  3426  0493                     	;# 
  3427  0494                     	;# 
  3428  0495                     	;# 
  3429  0495                     	;# 
  3430  0496                     	;# 
  3431  0497                     	;# 
  3432  0498                     	;# 
  3433  0499                     	;# 
  3434  049A                     	;# 
  3435  049B                     	;# 
  3436  049C                     	;# 
  3437  049D                     	;# 
  3438  050C                     	;# 
  3439  050C                     	;# 
  3440  050D                     	;# 
  3441  050E                     	;# 
  3442  050F                     	;# 
  3443  050F                     	;# 
  3444  0510                     	;# 
  3445  0511                     	;# 
  3446  0512                     	;# 
  3447  0512                     	;# 
  3448  0513                     	;# 
  3449  0514                     	;# 
  3450  0515                     	;# 
  3451  0515                     	;# 
  3452  0516                     	;# 
  3453  0517                     	;# 
  3454  0518                     	;# 
  3455  0519                     	;# 
  3456  051A                     	;# 
  3457  051B                     	;# 
  3458  051C                     	;# 
  3459  051D                     	;# 
  3460  058C                     	;# 
  3461  058C                     	;# 
  3462  058D                     	;# 
  3463  058E                     	;# 
  3464  058F                     	;# 
  3465  058F                     	;# 
  3466  0590                     	;# 
  3467  0591                     	;# 
  3468  0592                     	;# 
  3469  0593                     	;# 
  3470  060C                     	;# 
  3471  060D                     	;# 
  3472  060E                     	;# 
  3473  060F                     	;# 
  3474  0610                     	;# 
  3475  0611                     	;# 
  3476  0612                     	;# 
  3477  0613                     	;# 
  3478  0614                     	;# 
  3479  0616                     	;# 
  3480  0617                     	;# 
  3481  0618                     	;# 
  3482  0619                     	;# 
  3483  061A                     	;# 
  3484  061B                     	;# 
  3485  061C                     	;# 
  3486  061D                     	;# 
  3487  061E                     	;# 
  3488  068C                     	;# 
  3489  068D                     	;# 
  3490  068E                     	;# 
  3491  068F                     	;# 
  3492  0690                     	;# 
  3493  0691                     	;# 
  3494  0692                     	;# 
  3495  0693                     	;# 
  3496  0694                     	;# 
  3497  070C                     	;# 
  3498  070D                     	;# 
  3499  070E                     	;# 
  3500  070F                     	;# 
  3501  0710                     	;# 
  3502  0711                     	;# 
  3503  0712                     	;# 
  3504  0713                     	;# 
  3505  0714                     	;# 
  3506  0716                     	;# 
  3507  0717                     	;# 
  3508  0718                     	;# 
  3509  0719                     	;# 
  3510  071A                     	;# 
  3511  071B                     	;# 
  3512  071C                     	;# 
  3513  071D                     	;# 
  3514  071E                     	;# 
  3515  0796                     	;# 
  3516  0797                     	;# 
  3517  0798                     	;# 
  3518  0799                     	;# 
  3519  079A                     	;# 
  3520  079B                     	;# 
  3521  080C                     	;# 
  3522  080D                     	;# 
  3523  080E                     	;# 
  3524  080F                     	;# 
  3525  0810                     	;# 
  3526  0811                     	;# 
  3527  0812                     	;# 
  3528  0813                     	;# 
  3529  0814                     	;# 
  3530  081A                     	;# 
  3531  081B                     	;# 
  3532  081C                     	;# 
  3533  081D                     	;# 
  3534  081E                     	;# 
  3535  081F                     	;# 
  3536  088C                     	;# 
  3537  088D                     	;# 
  3538  088E                     	;# 
  3539  088F                     	;# 
  3540  0890                     	;# 
  3541  0891                     	;# 
  3542  0892                     	;# 
  3543  0893                     	;# 
  3544  0895                     	;# 
  3545  0896                     	;# 
  3546  0897                     	;# 
  3547  0898                     	;# 
  3548  0899                     	;# 
  3549  089A                     	;# 
  3550  089B                     	;# 
  3551  090C                     	;# 
  3552  090E                     	;# 
  3553  090F                     	;# 
  3554  091F                     	;# 
  3555  091F                     	;# 
  3556  098F                     	;# 
  3557  098F                     	;# 
  3558  0990                     	;# 
  3559  0991                     	;# 
  3560  0992                     	;# 
  3561  0993                     	;# 
  3562  0994                     	;# 
  3563  0995                     	;# 
  3564  0996                     	;# 
  3565  0997                     	;# 
  3566  0E0F                     	;# 
  3567  0E10                     	;# 
  3568  0E11                     	;# 
  3569  0E12                     	;# 
  3570  0E13                     	;# 
  3571  0E14                     	;# 
  3572  0E15                     	;# 
  3573  0E16                     	;# 
  3574  0E17                     	;# 
  3575  0E18                     	;# 
  3576  0E19                     	;# 
  3577  0E1A                     	;# 
  3578  0E1B                     	;# 
  3579  0E1C                     	;# 
  3580  0E1D                     	;# 
  3581  0E1E                     	;# 
  3582  0E1F                     	;# 
  3583  0E20                     	;# 
  3584  0E21                     	;# 
  3585  0E22                     	;# 
  3586  0E23                     	;# 
  3587  0E24                     	;# 
  3588  0E25                     	;# 
  3589  0E26                     	;# 
  3590  0E27                     	;# 
  3591  0E28                     	;# 
  3592  0E29                     	;# 
  3593  0E2A                     	;# 
  3594  0E2B                     	;# 
  3595  0E2C                     	;# 
  3596  0E2D                     	;# 
  3597  0E2E                     	;# 
  3598  0E2F                     	;# 
  3599  0E30                     	;# 
  3600  0E31                     	;# 
  3601  0E32                     	;# 
  3602  0E33                     	;# 
  3603  0E34                     	;# 
  3604  0E35                     	;# 
  3605  0E36                     	;# 
  3606  0E37                     	;# 
  3607  0E8F                     	;# 
  3608  0E90                     	;# 
  3609  0E91                     	;# 
  3610  0E92                     	;# 
  3611  0E93                     	;# 
  3612  0E94                     	;# 
  3613  0E95                     	;# 
  3614  0E96                     	;# 
  3615  0E97                     	;# 
  3616  0E9C                     	;# 
  3617  0E9D                     	;# 
  3618  0E9E                     	;# 
  3619  0EA1                     	;# 
  3620  0EA2                     	;# 
  3621  0EA3                     	;# 
  3622  0EA4                     	;# 
  3623  0EA5                     	;# 
  3624  0EA9                     	;# 
  3625  0EAA                     	;# 
  3626  0EAB                     	;# 
  3627  0EAC                     	;# 
  3628  0EB1                     	;# 
  3629  0EB2                     	;# 
  3630  0EB3                     	;# 
  3631  0EB8                     	;# 
  3632  0EB9                     	;# 
  3633  0EBA                     	;# 
  3634  0EBB                     	;# 
  3635  0EBC                     	;# 
  3636  0EBD                     	;# 
  3637  0EBE                     	;# 
  3638  0EC3                     	;# 
  3639  0EC5                     	;# 
  3640  0EC6                     	;# 
  3641  0EC7                     	;# 
  3642  0EC8                     	;# 
  3643  0EC9                     	;# 
  3644  0ECA                     	;# 
  3645  0ECB                     	;# 
  3646  0ECC                     	;# 
  3647  0F10                     	;# 
  3648  0F11                     	;# 
  3649  0F12                     	;# 
  3650  0F13                     	;# 
  3651  0F14                     	;# 
  3652  0F15                     	;# 
  3653  0F16                     	;# 
  3654  0F17                     	;# 
  3655  0F18                     	;# 
  3656  0F19                     	;# 
  3657  0F1A                     	;# 
  3658  0F1B                     	;# 
  3659  0F1C                     	;# 
  3660  0F1D                     	;# 
  3661  0F1E                     	;# 
  3662  0F1F                     	;# 
  3663  0F20                     	;# 
  3664  0F21                     	;# 
  3665  0F22                     	;# 
  3666  0F23                     	;# 
  3667  0F24                     	;# 
  3668  0F25                     	;# 
  3669  0F26                     	;# 
  3670  0F27                     	;# 
  3671  0F38                     	;# 
  3672  0F39                     	;# 
  3673  0F3A                     	;# 
  3674  0F3B                     	;# 
  3675  0F3C                     	;# 
  3676  0F3D                     	;# 
  3677  0F3E                     	;# 
  3678  0F3F                     	;# 
  3679  0F40                     	;# 
  3680  0F41                     	;# 
  3681  0F43                     	;# 
  3682  0F44                     	;# 
  3683  0F45                     	;# 
  3684  0F46                     	;# 
  3685  0F47                     	;# 
  3686  0F48                     	;# 
  3687  0F49                     	;# 
  3688  0F4A                     	;# 
  3689  0F4B                     	;# 
  3690  0F4C                     	;# 
  3691  0F4E                     	;# 
  3692  0F4F                     	;# 
  3693  0F50                     	;# 
  3694  0F51                     	;# 
  3695  0F52                     	;# 
  3696  0F53                     	;# 
  3697  0F54                     	;# 
  3698  0F55                     	;# 
  3699  0F56                     	;# 
  3700  0F57                     	;# 
  3701  0F65                     	;# 
  3702  0F68                     	;# 
  3703  0F69                     	;# 
  3704  0F6A                     	;# 
  3705  0F6B                     	;# 
  3706  0FE4                     	;# 
  3707  0FE5                     	;# 
  3708  0FE6                     	;# 
  3709  0FE7                     	;# 
  3710  0FE8                     	;# 
  3711  0FE9                     	;# 
  3712  0FEA                     	;# 
  3713  0FEB                     	;# 
  3714  0FED                     	;# 
  3715  0FEE                     	;# 
  3716  0FEF                     	;# 
  3717  0000                     	;# 
  3718  0001                     	;# 
  3719  0002                     	;# 
  3720  0003                     	;# 
  3721  0004                     	;# 
  3722  0005                     	;# 
  3723  0006                     	;# 
  3724  0007                     	;# 
  3725  0008                     	;# 
  3726  0009                     	;# 
  3727  000A                     	;# 
  3728  000B                     	;# 
  3729  000C                     	;# 
  3730  000D                     	;# 
  3731  000E                     	;# 
  3732  0010                     	;# 
  3733  0011                     	;# 
  3734  0012                     	;# 
  3735  0013                     	;# 
  3736  0016                     	;# 
  3737  0017                     	;# 
  3738  0018                     	;# 
  3739  001C                     	;# 
  3740  001C                     	;# 
  3741  001D                     	;# 
  3742  001D                     	;# 
  3743  001E                     	;# 
  3744  001F                     	;# 
  3745  008C                     	;# 
  3746  008C                     	;# 
  3747  008D                     	;# 
  3748  008E                     	;# 
  3749  008E                     	;# 
  3750  008F                     	;# 
  3751  0090                     	;# 
  3752  0090                     	;# 
  3753  0091                     	;# 
  3754  0093                     	;# 
  3755  0094                     	;# 
  3756  0095                     	;# 
  3757  0096                     	;# 
  3758  0097                     	;# 
  3759  0098                     	;# 
  3760  0099                     	;# 
  3761  009A                     	;# 
  3762  009B                     	;# 
  3763  009C                     	;# 
  3764  009D                     	;# 
  3765  009E                     	;# 
  3766  010C                     	;# 
  3767  010D                     	;# 
  3768  010E                     	;# 
  3769  010E                     	;# 
  3770  010F                     	;# 
  3771  0110                     	;# 
  3772  0110                     	;# 
  3773  0111                     	;# 
  3774  0112                     	;# 
  3775  0112                     	;# 
  3776  0113                     	;# 
  3777  0114                     	;# 
  3778  0114                     	;# 
  3779  0115                     	;# 
  3780  0116                     	;# 
  3781  0116                     	;# 
  3782  0117                     	;# 
  3783  0119                     	;# 
  3784  0119                     	;# 
  3785  0119                     	;# 
  3786  011A                     	;# 
  3787  011A                     	;# 
  3788  011A                     	;# 
  3789  011B                     	;# 
  3790  011B                     	;# 
  3791  011B                     	;# 
  3792  011B                     	;# 
  3793  011B                     	;# 
  3794  011C                     	;# 
  3795  011C                     	;# 
  3796  011C                     	;# 
  3797  011D                     	;# 
  3798  011D                     	;# 
  3799  011D                     	;# 
  3800  011E                     	;# 
  3801  011E                     	;# 
  3802  011E                     	;# 
  3803  011F                     	;# 
  3804  011F                     	;# 
  3805  011F                     	;# 
  3806  011F                     	;# 
  3807  011F                     	;# 
  3808  018C                     	;# 
  3809  018D                     	;# 
  3810  018E                     	;# 
  3811  018F                     	;# 
  3812  0190                     	;# 
  3813  0191                     	;# 
  3814  0192                     	;# 
  3815  0196                     	;# 
  3816  0197                     	;# 
  3817  0198                     	;# 
  3818  0199                     	;# 
  3819  019A                     	;# 
  3820  019B                     	;# 
  3821  019C                     	;# 
  3822  020C                     	;# 
  3823  020C                     	;# 
  3824  020D                     	;# 
  3825  020E                     	;# 
  3826  020F                     	;# 
  3827  020F                     	;# 
  3828  0210                     	;# 
  3829  0210                     	;# 
  3830  0211                     	;# 
  3831  0211                     	;# 
  3832  0212                     	;# 
  3833  0212                     	;# 
  3834  0213                     	;# 
  3835  0214                     	;# 
  3836  0215                     	;# 
  3837  0215                     	;# 
  3838  0216                     	;# 
  3839  0216                     	;# 
  3840  0217                     	;# 
  3841  0217                     	;# 
  3842  0218                     	;# 
  3843  0218                     	;# 
  3844  0219                     	;# 
  3845  021A                     	;# 
  3846  021B                     	;# 
  3847  021B                     	;# 
  3848  021C                     	;# 
  3849  021C                     	;# 
  3850  021D                     	;# 
  3851  021D                     	;# 
  3852  021E                     	;# 
  3853  021F                     	;# 
  3854  028C                     	;# 
  3855  028C                     	;# 
  3856  028D                     	;# 
  3857  028D                     	;# 
  3858  028E                     	;# 
  3859  028F                     	;# 
  3860  0290                     	;# 
  3861  0290                     	;# 
  3862  0291                     	;# 
  3863  0292                     	;# 
  3864  0292                     	;# 
  3865  0293                     	;# 
  3866  0293                     	;# 
  3867  0294                     	;# 
  3868  0295                     	;# 
  3869  0296                     	;# 
  3870  0296                     	;# 
  3871  0297                     	;# 
  3872  0298                     	;# 
  3873  0298                     	;# 
  3874  0299                     	;# 
  3875  0299                     	;# 
  3876  029A                     	;# 
  3877  029B                     	;# 
  3878  029C                     	;# 
  3879  029C                     	;# 
  3880  029D                     	;# 
  3881  030C                     	;# 
  3882  030C                     	;# 
  3883  030D                     	;# 
  3884  030E                     	;# 
  3885  030F                     	;# 
  3886  0310                     	;# 
  3887  0310                     	;# 
  3888  0311                     	;# 
  3889  0312                     	;# 
  3890  0313                     	;# 
  3891  0314                     	;# 
  3892  0314                     	;# 
  3893  0315                     	;# 
  3894  0316                     	;# 
  3895  0317                     	;# 
  3896  0318                     	;# 
  3897  0318                     	;# 
  3898  0319                     	;# 
  3899  031A                     	;# 
  3900  031B                     	;# 
  3901  031C                     	;# 
  3902  031C                     	;# 
  3903  031D                     	;# 
  3904  031E                     	;# 
  3905  031F                     	;# 
  3906  038C                     	;# 
  3907  038D                     	;# 
  3908  038E                     	;# 
  3909  0390                     	;# 
  3910  0391                     	;# 
  3911  0392                     	;# 
  3912  040C                     	;# 
  3913  040D                     	;# 
  3914  040E                     	;# 
  3915  040F                     	;# 
  3916  0410                     	;# 
  3917  0411                     	;# 
  3918  0416                     	;# 
  3919  0416                     	;# 
  3920  0417                     	;# 
  3921  0418                     	;# 
  3922  0418                     	;# 
  3923  0419                     	;# 
  3924  041A                     	;# 
  3925  041A                     	;# 
  3926  041B                     	;# 
  3927  041C                     	;# 
  3928  041C                     	;# 
  3929  041D                     	;# 
  3930  041E                     	;# 
  3931  041F                     	;# 
  3932  048C                     	;# 
  3933  048C                     	;# 
  3934  048D                     	;# 
  3935  048E                     	;# 
  3936  048F                     	;# 
  3937  048F                     	;# 
  3938  0490                     	;# 
  3939  0491                     	;# 
  3940  0492                     	;# 
  3941  0492                     	;# 
  3942  0493                     	;# 
  3943  0494                     	;# 
  3944  0495                     	;# 
  3945  0495                     	;# 
  3946  0496                     	;# 
  3947  0497                     	;# 
  3948  0498                     	;# 
  3949  0499                     	;# 
  3950  049A                     	;# 
  3951  049B                     	;# 
  3952  049C                     	;# 
  3953  049D                     	;# 
  3954  050C                     	;# 
  3955  050C                     	;# 
  3956  050D                     	;# 
  3957  050E                     	;# 
  3958  050F                     	;# 
  3959  050F                     	;# 
  3960  0510                     	;# 
  3961  0511                     	;# 
  3962  0512                     	;# 
  3963  0512                     	;# 
  3964  0513                     	;# 
  3965  0514                     	;# 
  3966  0515                     	;# 
  3967  0515                     	;# 
  3968  0516                     	;# 
  3969  0517                     	;# 
  3970  0518                     	;# 
  3971  0519                     	;# 
  3972  051A                     	;# 
  3973  051B                     	;# 
  3974  051C                     	;# 
  3975  051D                     	;# 
  3976  058C                     	;# 
  3977  058C                     	;# 
  3978  058D                     	;# 
  3979  058E                     	;# 
  3980  058F                     	;# 
  3981  058F                     	;# 
  3982  0590                     	;# 
  3983  0591                     	;# 
  3984  0592                     	;# 
  3985  0593                     	;# 
  3986  060C                     	;# 
  3987  060D                     	;# 
  3988  060E                     	;# 
  3989  060F                     	;# 
  3990  0610                     	;# 
  3991  0611                     	;# 
  3992  0612                     	;# 
  3993  0613                     	;# 
  3994  0614                     	;# 
  3995  0616                     	;# 
  3996  0617                     	;# 
  3997  0618                     	;# 
  3998  0619                     	;# 
  3999  061A                     	;# 
  4000  061B                     	;# 
  4001  061C                     	;# 
  4002  061D                     	;# 
  4003  061E                     	;# 
  4004  068C                     	;# 
  4005  068D                     	;# 
  4006  068E                     	;# 
  4007  068F                     	;# 
  4008  0690                     	;# 
  4009  0691                     	;# 
  4010  0692                     	;# 
  4011  0693                     	;# 
  4012  0694                     	;# 
  4013  070C                     	;# 
  4014  070D                     	;# 
  4015  070E                     	;# 
  4016  070F                     	;# 
  4017  0710                     	;# 
  4018  0711                     	;# 
  4019  0712                     	;# 
  4020  0713                     	;# 
  4021  0714                     	;# 
  4022  0716                     	;# 
  4023  0717                     	;# 
  4024  0718                     	;# 
  4025  0719                     	;# 
  4026  071A                     	;# 
  4027  071B                     	;# 
  4028  071C                     	;# 
  4029  071D                     	;# 
  4030  071E                     	;# 
  4031  0796                     	;# 
  4032  0797                     	;# 
  4033  0798                     	;# 
  4034  0799                     	;# 
  4035  079A                     	;# 
  4036  079B                     	;# 
  4037  080C                     	;# 
  4038  080D                     	;# 
  4039  080E                     	;# 
  4040  080F                     	;# 
  4041  0810                     	;# 
  4042  0811                     	;# 
  4043  0812                     	;# 
  4044  0813                     	;# 
  4045  0814                     	;# 
  4046  081A                     	;# 
  4047  081B                     	;# 
  4048  081C                     	;# 
  4049  081D                     	;# 
  4050  081E                     	;# 
  4051  081F                     	;# 
  4052  088C                     	;# 
  4053  088D                     	;# 
  4054  088E                     	;# 
  4055  088F                     	;# 
  4056  0890                     	;# 
  4057  0891                     	;# 
  4058  0892                     	;# 
  4059  0893                     	;# 
  4060  0895                     	;# 
  4061  0896                     	;# 
  4062  0897                     	;# 
  4063  0898                     	;# 
  4064  0899                     	;# 
  4065  089A                     	;# 
  4066  089B                     	;# 
  4067  090C                     	;# 
  4068  090E                     	;# 
  4069  090F                     	;# 
  4070  091F                     	;# 
  4071  091F                     	;# 
  4072  098F                     	;# 
  4073  098F                     	;# 
  4074  0990                     	;# 
  4075  0991                     	;# 
  4076  0992                     	;# 
  4077  0993                     	;# 
  4078  0994                     	;# 
  4079  0995                     	;# 
  4080  0996                     	;# 
  4081  0997                     	;# 
  4082  0E0F                     	;# 
  4083  0E10                     	;# 
  4084  0E11                     	;# 
  4085  0E12                     	;# 
  4086  0E13                     	;# 
  4087  0E14                     	;# 
  4088  0E15                     	;# 
  4089  0E16                     	;# 
  4090  0E17                     	;# 
  4091  0E18                     	;# 
  4092  0E19                     	;# 
  4093  0E1A                     	;# 
  4094  0E1B                     	;# 
  4095  0E1C                     	;# 
  4096  0E1D                     	;# 
  4097  0E1E                     	;# 
  4098  0E1F                     	;# 
  4099  0E20                     	;# 
  4100  0E21                     	;# 
  4101  0E22                     	;# 
  4102  0E23                     	;# 
  4103  0E24                     	;# 
  4104  0E25                     	;# 
  4105  0E26                     	;# 
  4106  0E27                     	;# 
  4107  0E28                     	;# 
  4108  0E29                     	;# 
  4109  0E2A                     	;# 
  4110  0E2B                     	;# 
  4111  0E2C                     	;# 
  4112  0E2D                     	;# 
  4113  0E2E                     	;# 
  4114  0E2F                     	;# 
  4115  0E30                     	;# 
  4116  0E31                     	;# 
  4117  0E32                     	;# 
  4118  0E33                     	;# 
  4119  0E34                     	;# 
  4120  0E35                     	;# 
  4121  0E36                     	;# 
  4122  0E37                     	;# 
  4123  0E8F                     	;# 
  4124  0E90                     	;# 
  4125  0E91                     	;# 
  4126  0E92                     	;# 
  4127  0E93                     	;# 
  4128  0E94                     	;# 
  4129  0E95                     	;# 
  4130  0E96                     	;# 
  4131  0E97                     	;# 
  4132  0E9C                     	;# 
  4133  0E9D                     	;# 
  4134  0E9E                     	;# 
  4135  0EA1                     	;# 
  4136  0EA2                     	;# 
  4137  0EA3                     	;# 
  4138  0EA4                     	;# 
  4139  0EA5                     	;# 
  4140  0EA9                     	;# 
  4141  0EAA                     	;# 
  4142  0EAB                     	;# 
  4143  0EAC                     	;# 
  4144  0EB1                     	;# 
  4145  0EB2                     	;# 
  4146  0EB3                     	;# 
  4147  0EB8                     	;# 
  4148  0EB9                     	;# 
  4149  0EBA                     	;# 
  4150  0EBB                     	;# 
  4151  0EBC                     	;# 
  4152  0EBD                     	;# 
  4153  0EBE                     	;# 
  4154  0EC3                     	;# 
  4155  0EC5                     	;# 
  4156  0EC6                     	;# 
  4157  0EC7                     	;# 
  4158  0EC8                     	;# 
  4159  0EC9                     	;# 
  4160  0ECA                     	;# 
  4161  0ECB                     	;# 
  4162  0ECC                     	;# 
  4163  0F10                     	;# 
  4164  0F11                     	;# 
  4165  0F12                     	;# 
  4166  0F13                     	;# 
  4167  0F14                     	;# 
  4168  0F15                     	;# 
  4169  0F16                     	;# 
  4170  0F17                     	;# 
  4171  0F18                     	;# 
  4172  0F19                     	;# 
  4173  0F1A                     	;# 
  4174  0F1B                     	;# 
  4175  0F1C                     	;# 
  4176  0F1D                     	;# 
  4177  0F1E                     	;# 
  4178  0F1F                     	;# 
  4179  0F20                     	;# 
  4180  0F21                     	;# 
  4181  0F22                     	;# 
  4182  0F23                     	;# 
  4183  0F24                     	;# 
  4184  0F25                     	;# 
  4185  0F26                     	;# 
  4186  0F27                     	;# 
  4187  0F38                     	;# 
  4188  0F39                     	;# 
  4189  0F3A                     	;# 
  4190  0F3B                     	;# 
  4191  0F3C                     	;# 
  4192  0F3D                     	;# 
  4193  0F3E                     	;# 
  4194  0F3F                     	;# 
  4195  0F40                     	;# 
  4196  0F41                     	;# 
  4197  0F43                     	;# 
  4198  0F44                     	;# 
  4199  0F45                     	;# 
  4200  0F46                     	;# 
  4201  0F47                     	;# 
  4202  0F48                     	;# 
  4203  0F49                     	;# 
  4204  0F4A                     	;# 
  4205  0F4B                     	;# 
  4206  0F4C                     	;# 
  4207  0F4E                     	;# 
  4208  0F4F                     	;# 
  4209  0F50                     	;# 
  4210  0F51                     	;# 
  4211  0F52                     	;# 
  4212  0F53                     	;# 
  4213  0F54                     	;# 
  4214  0F55                     	;# 
  4215  0F56                     	;# 
  4216  0F57                     	;# 
  4217  0F65                     	;# 
  4218  0F68                     	;# 
  4219  0F69                     	;# 
  4220  0F6A                     	;# 
  4221  0F6B                     	;# 
  4222  0FE4                     	;# 
  4223  0FE5                     	;# 
  4224  0FE6                     	;# 
  4225  0FE7                     	;# 
  4226  0FE8                     	;# 
  4227  0FE9                     	;# 
  4228  0FEA                     	;# 
  4229  0FEB                     	;# 
  4230  0FED                     	;# 
  4231  0FEE                     	;# 
  4232  0FEF                     	;# 
  4233  0000                     	;# 
  4234  0001                     	;# 
  4235  0002                     	;# 
  4236  0003                     	;# 
  4237  0004                     	;# 
  4238  0005                     	;# 
  4239  0006                     	;# 
  4240  0007                     	;# 
  4241  0008                     	;# 
  4242  0009                     	;# 
  4243  000A                     	;# 
  4244  000B                     	;# 
  4245  000C                     	;# 
  4246  000D                     	;# 
  4247  000E                     	;# 
  4248  0010                     	;# 
  4249  0011                     	;# 
  4250  0012                     	;# 
  4251  0013                     	;# 
  4252  0016                     	;# 
  4253  0017                     	;# 
  4254  0018                     	;# 
  4255  001C                     	;# 
  4256  001C                     	;# 
  4257  001D                     	;# 
  4258  001D                     	;# 
  4259  001E                     	;# 
  4260  001F                     	;# 
  4261  008C                     	;# 
  4262  008C                     	;# 
  4263  008D                     	;# 
  4264  008E                     	;# 
  4265  008E                     	;# 
  4266  008F                     	;# 
  4267  0090                     	;# 
  4268  0090                     	;# 
  4269  0091                     	;# 
  4270  0093                     	;# 
  4271  0094                     	;# 
  4272  0095                     	;# 
  4273  0096                     	;# 
  4274  0097                     	;# 
  4275  0098                     	;# 
  4276  0099                     	;# 
  4277  009A                     	;# 
  4278  009B                     	;# 
  4279  009C                     	;# 
  4280  009D                     	;# 
  4281  009E                     	;# 
  4282  010C                     	;# 
  4283  010D                     	;# 
  4284  010E                     	;# 
  4285  010E                     	;# 
  4286  010F                     	;# 
  4287  0110                     	;# 
  4288  0110                     	;# 
  4289  0111                     	;# 
  4290  0112                     	;# 
  4291  0112                     	;# 
  4292  0113                     	;# 
  4293  0114                     	;# 
  4294  0114                     	;# 
  4295  0115                     	;# 
  4296  0116                     	;# 
  4297  0116                     	;# 
  4298  0117                     	;# 
  4299  0119                     	;# 
  4300  0119                     	;# 
  4301  0119                     	;# 
  4302  011A                     	;# 
  4303  011A                     	;# 
  4304  011A                     	;# 
  4305  011B                     	;# 
  4306  011B                     	;# 
  4307  011B                     	;# 
  4308  011B                     	;# 
  4309  011B                     	;# 
  4310  011C                     	;# 
  4311  011C                     	;# 
  4312  011C                     	;# 
  4313  011D                     	;# 
  4314  011D                     	;# 
  4315  011D                     	;# 
  4316  011E                     	;# 
  4317  011E                     	;# 
  4318  011E                     	;# 
  4319  011F                     	;# 
  4320  011F                     	;# 
  4321  011F                     	;# 
  4322  011F                     	;# 
  4323  011F                     	;# 
  4324  018C                     	;# 
  4325  018D                     	;# 
  4326  018E                     	;# 
  4327  018F                     	;# 
  4328  0190                     	;# 
  4329  0191                     	;# 
  4330  0192                     	;# 
  4331  0196                     	;# 
  4332  0197                     	;# 
  4333  0198                     	;# 
  4334  0199                     	;# 
  4335  019A                     	;# 
  4336  019B                     	;# 
  4337  019C                     	;# 
  4338  020C                     	;# 
  4339  020C                     	;# 
  4340  020D                     	;# 
  4341  020E                     	;# 
  4342  020F                     	;# 
  4343  020F                     	;# 
  4344  0210                     	;# 
  4345  0210                     	;# 
  4346  0211                     	;# 
  4347  0211                     	;# 
  4348  0212                     	;# 
  4349  0212                     	;# 
  4350  0213                     	;# 
  4351  0214                     	;# 
  4352  0215                     	;# 
  4353  0215                     	;# 
  4354  0216                     	;# 
  4355  0216                     	;# 
  4356  0217                     	;# 
  4357  0217                     	;# 
  4358  0218                     	;# 
  4359  0218                     	;# 
  4360  0219                     	;# 
  4361  021A                     	;# 
  4362  021B                     	;# 
  4363  021B                     	;# 
  4364  021C                     	;# 
  4365  021C                     	;# 
  4366  021D                     	;# 
  4367  021D                     	;# 
  4368  021E                     	;# 
  4369  021F                     	;# 
  4370  028C                     	;# 
  4371  028C                     	;# 
  4372  028D                     	;# 
  4373  028D                     	;# 
  4374  028E                     	;# 
  4375  028F                     	;# 
  4376  0290                     	;# 
  4377  0290                     	;# 
  4378  0291                     	;# 
  4379  0292                     	;# 
  4380  0292                     	;# 
  4381  0293                     	;# 
  4382  0293                     	;# 
  4383  0294                     	;# 
  4384  0295                     	;# 
  4385  0296                     	;# 
  4386  0296                     	;# 
  4387  0297                     	;# 
  4388  0298                     	;# 
  4389  0298                     	;# 
  4390  0299                     	;# 
  4391  0299                     	;# 
  4392  029A                     	;# 
  4393  029B                     	;# 
  4394  029C                     	;# 
  4395  029C                     	;# 
  4396  029D                     	;# 
  4397  030C                     	;# 
  4398  030C                     	;# 
  4399  030D                     	;# 
  4400  030E                     	;# 
  4401  030F                     	;# 
  4402  0310                     	;# 
  4403  0310                     	;# 
  4404  0311                     	;# 
  4405  0312                     	;# 
  4406  0313                     	;# 
  4407  0314                     	;# 
  4408  0314                     	;# 
  4409  0315                     	;# 
  4410  0316                     	;# 
  4411  0317                     	;# 
  4412  0318                     	;# 
  4413  0318                     	;# 
  4414  0319                     	;# 
  4415  031A                     	;# 
  4416  031B                     	;# 
  4417  031C                     	;# 
  4418  031C                     	;# 
  4419  031D                     	;# 
  4420  031E                     	;# 
  4421  031F                     	;# 
  4422  038C                     	;# 
  4423  038D                     	;# 
  4424  038E                     	;# 
  4425  0390                     	;# 
  4426  0391                     	;# 
  4427  0392                     	;# 
  4428  040C                     	;# 
  4429  040D                     	;# 
  4430  040E                     	;# 
  4431  040F                     	;# 
  4432  0410                     	;# 
  4433  0411                     	;# 
  4434  0416                     	;# 
  4435  0416                     	;# 
  4436  0417                     	;# 
  4437  0418                     	;# 
  4438  0418                     	;# 
  4439  0419                     	;# 
  4440  041A                     	;# 
  4441  041A                     	;# 
  4442  041B                     	;# 
  4443  041C                     	;# 
  4444  041C                     	;# 
  4445  041D                     	;# 
  4446  041E                     	;# 
  4447  041F                     	;# 
  4448  048C                     	;# 
  4449  048C                     	;# 
  4450  048D                     	;# 
  4451  048E                     	;# 
  4452  048F                     	;# 
  4453  048F                     	;# 
  4454  0490                     	;# 
  4455  0491                     	;# 
  4456  0492                     	;# 
  4457  0492                     	;# 
  4458  0493                     	;# 
  4459  0494                     	;# 
  4460  0495                     	;# 
  4461  0495                     	;# 
  4462  0496                     	;# 
  4463  0497                     	;# 
  4464  0498                     	;# 
  4465  0499                     	;# 
  4466  049A                     	;# 
  4467  049B                     	;# 
  4468  049C                     	;# 
  4469  049D                     	;# 
  4470  050C                     	;# 
  4471  050C                     	;# 
  4472  050D                     	;# 
  4473  050E                     	;# 
  4474  050F                     	;# 
  4475  050F                     	;# 
  4476  0510                     	;# 
  4477  0511                     	;# 
  4478  0512                     	;# 
  4479  0512                     	;# 
  4480  0513                     	;# 
  4481  0514                     	;# 
  4482  0515                     	;# 
  4483  0515                     	;# 
  4484  0516                     	;# 
  4485  0517                     	;# 
  4486  0518                     	;# 
  4487  0519                     	;# 
  4488  051A                     	;# 
  4489  051B                     	;# 
  4490  051C                     	;# 
  4491  051D                     	;# 
  4492  058C                     	;# 
  4493  058C                     	;# 
  4494  058D                     	;# 
  4495  058E                     	;# 
  4496  058F                     	;# 
  4497  058F                     	;# 
  4498  0590                     	;# 
  4499  0591                     	;# 
  4500  0592                     	;# 
  4501  0593                     	;# 
  4502  060C                     	;# 
  4503  060D                     	;# 
  4504  060E                     	;# 
  4505  060F                     	;# 
  4506  0610                     	;# 
  4507  0611                     	;# 
  4508  0612                     	;# 
  4509  0613                     	;# 
  4510  0614                     	;# 
  4511  0616                     	;# 
  4512  0617                     	;# 
  4513  0618                     	;# 
  4514  0619                     	;# 
  4515  061A                     	;# 
  4516  061B                     	;# 
  4517  061C                     	;# 
  4518  061D                     	;# 
  4519  061E                     	;# 
  4520  068C                     	;# 
  4521  068D                     	;# 
  4522  068E                     	;# 
  4523  068F                     	;# 
  4524  0690                     	;# 
  4525  0691                     	;# 
  4526  0692                     	;# 
  4527  0693                     	;# 
  4528  0694                     	;# 
  4529  070C                     	;# 
  4530  070D                     	;# 
  4531  070E                     	;# 
  4532  070F                     	;# 
  4533  0710                     	;# 
  4534  0711                     	;# 
  4535  0712                     	;# 
  4536  0713                     	;# 
  4537  0714                     	;# 
  4538  0716                     	;# 
  4539  0717                     	;# 
  4540  0718                     	;# 
  4541  0719                     	;# 
  4542  071A                     	;# 
  4543  071B                     	;# 
  4544  071C                     	;# 
  4545  071D                     	;# 
  4546  071E                     	;# 
  4547  0796                     	;# 
  4548  0797                     	;# 
  4549  0798                     	;# 
  4550  0799                     	;# 
  4551  079A                     	;# 
  4552  079B                     	;# 
  4553  080C                     	;# 
  4554  080D                     	;# 
  4555  080E                     	;# 
  4556  080F                     	;# 
  4557  0810                     	;# 
  4558  0811                     	;# 
  4559  0812                     	;# 
  4560  0813                     	;# 
  4561  0814                     	;# 
  4562  081A                     	;# 
  4563  081B                     	;# 
  4564  081C                     	;# 
  4565  081D                     	;# 
  4566  081E                     	;# 
  4567  081F                     	;# 
  4568  088C                     	;# 
  4569  088D                     	;# 
  4570  088E                     	;# 
  4571  088F                     	;# 
  4572  0890                     	;# 
  4573  0891                     	;# 
  4574  0892                     	;# 
  4575  0893                     	;# 
  4576  0895                     	;# 
  4577  0896                     	;# 
  4578  0897                     	;# 
  4579  0898                     	;# 
  4580  0899                     	;# 
  4581  089A                     	;# 
  4582  089B                     	;# 
  4583  090C                     	;# 
  4584  090E                     	;# 
  4585  090F                     	;# 
  4586  091F                     	;# 
  4587  091F                     	;# 
  4588  098F                     	;# 
  4589  098F                     	;# 
  4590  0990                     	;# 
  4591  0991                     	;# 
  4592  0992                     	;# 
  4593  0993                     	;# 
  4594  0994                     	;# 
  4595  0995                     	;# 
  4596  0996                     	;# 
  4597  0997                     	;# 
  4598  0E0F                     	;# 
  4599  0E10                     	;# 
  4600  0E11                     	;# 
  4601  0E12                     	;# 
  4602  0E13                     	;# 
  4603  0E14                     	;# 
  4604  0E15                     	;# 
  4605  0E16                     	;# 
  4606  0E17                     	;# 
  4607  0E18                     	;# 
  4608  0E19                     	;# 
  4609  0E1A                     	;# 
  4610  0E1B                     	;# 
  4611  0E1C                     	;# 
  4612  0E1D                     	;# 
  4613  0E1E                     	;# 
  4614  0E1F                     	;# 
  4615  0E20                     	;# 
  4616  0E21                     	;# 
  4617  0E22                     	;# 
  4618  0E23                     	;# 
  4619  0E24                     	;# 
  4620  0E25                     	;# 
  4621  0E26                     	;# 
  4622  0E27                     	;# 
  4623  0E28                     	;# 
  4624  0E29                     	;# 
  4625  0E2A                     	;# 
  4626  0E2B                     	;# 
  4627  0E2C                     	;# 
  4628  0E2D                     	;# 
  4629  0E2E                     	;# 
  4630  0E2F                     	;# 
  4631  0E30                     	;# 
  4632  0E31                     	;# 
  4633  0E32                     	;# 
  4634  0E33                     	;# 
  4635  0E34                     	;# 
  4636  0E35                     	;# 
  4637  0E36                     	;# 
  4638  0E37                     	;# 
  4639  0E8F                     	;# 
  4640  0E90                     	;# 
  4641  0E91                     	;# 
  4642  0E92                     	;# 
  4643  0E93                     	;# 
  4644  0E94                     	;# 
  4645  0E95                     	;# 
  4646  0E96                     	;# 
  4647  0E97                     	;# 
  4648  0E9C                     	;# 
  4649  0E9D                     	;# 
  4650  0E9E                     	;# 
  4651  0EA1                     	;# 
  4652  0EA2                     	;# 
  4653  0EA3                     	;# 
  4654  0EA4                     	;# 
  4655  0EA5                     	;# 
  4656  0EA9                     	;# 
  4657  0EAA                     	;# 
  4658  0EAB                     	;# 
  4659  0EAC                     	;# 
  4660  0EB1                     	;# 
  4661  0EB2                     	;# 
  4662  0EB3                     	;# 
  4663  0EB8                     	;# 
  4664  0EB9                     	;# 
  4665  0EBA                     	;# 
  4666  0EBB                     	;# 
  4667  0EBC                     	;# 
  4668  0EBD                     	;# 
  4669  0EBE                     	;# 
  4670  0EC3                     	;# 
  4671  0EC5                     	;# 
  4672  0EC6                     	;# 
  4673  0EC7                     	;# 
  4674  0EC8                     	;# 
  4675  0EC9                     	;# 
  4676  0ECA                     	;# 
  4677  0ECB                     	;# 
  4678  0ECC                     	;# 
  4679  0F10                     	;# 
  4680  0F11                     	;# 
  4681  0F12                     	;# 
  4682  0F13                     	;# 
  4683  0F14                     	;# 
  4684  0F15                     	;# 
  4685  0F16                     	;# 
  4686  0F17                     	;# 
  4687  0F18                     	;# 
  4688  0F19                     	;# 
  4689  0F1A                     	;# 
  4690  0F1B                     	;# 
  4691  0F1C                     	;# 
  4692  0F1D                     	;# 
  4693  0F1E                     	;# 
  4694  0F1F                     	;# 
  4695  0F20                     	;# 
  4696  0F21                     	;# 
  4697  0F22                     	;# 
  4698  0F23                     	;# 
  4699  0F24                     	;# 
  4700  0F25                     	;# 
  4701  0F26                     	;# 
  4702  0F27                     	;# 
  4703  0F38                     	;# 
  4704  0F39                     	;# 
  4705  0F3A                     	;# 
  4706  0F3B                     	;# 
  4707  0F3C                     	;# 
  4708  0F3D                     	;# 
  4709  0F3E                     	;# 
  4710  0F3F                     	;# 
  4711  0F40                     	;# 
  4712  0F41                     	;# 
  4713  0F43                     	;# 
  4714  0F44                     	;# 
  4715  0F45                     	;# 
  4716  0F46                     	;# 
  4717  0F47                     	;# 
  4718  0F48                     	;# 
  4719  0F49                     	;# 
  4720  0F4A                     	;# 
  4721  0F4B                     	;# 
  4722  0F4C                     	;# 
  4723  0F4E                     	;# 
  4724  0F4F                     	;# 
  4725  0F50                     	;# 
  4726  0F51                     	;# 
  4727  0F52                     	;# 
  4728  0F53                     	;# 
  4729  0F54                     	;# 
  4730  0F55                     	;# 
  4731  0F56                     	;# 
  4732  0F57                     	;# 
  4733  0F65                     	;# 
  4734  0F68                     	;# 
  4735  0F69                     	;# 
  4736  0F6A                     	;# 
  4737  0F6B                     	;# 
  4738  0FE4                     	;# 
  4739  0FE5                     	;# 
  4740  0FE6                     	;# 
  4741  0FE7                     	;# 
  4742  0FE8                     	;# 
  4743  0FE9                     	;# 
  4744  0FEA                     	;# 
  4745  0FEB                     	;# 
  4746  0FED                     	;# 
  4747  0FEE                     	;# 
  4748  0FEF                     	;# 
  4749  0000                     	;# 
  4750  0001                     	;# 
  4751  0002                     	;# 
  4752  0003                     	;# 
  4753  0004                     	;# 
  4754  0005                     	;# 
  4755  0006                     	;# 
  4756  0007                     	;# 
  4757  0008                     	;# 
  4758  0009                     	;# 
  4759  000A                     	;# 
  4760  000B                     	;# 
  4761  000C                     	;# 
  4762  000D                     	;# 
  4763  000E                     	;# 
  4764  0010                     	;# 
  4765  0011                     	;# 
  4766  0012                     	;# 
  4767  0013                     	;# 
  4768  0016                     	;# 
  4769  0017                     	;# 
  4770  0018                     	;# 
  4771  001C                     	;# 
  4772  001C                     	;# 
  4773  001D                     	;# 
  4774  001D                     	;# 
  4775  001E                     	;# 
  4776  001F                     	;# 
  4777  008C                     	;# 
  4778  008C                     	;# 
  4779  008D                     	;# 
  4780  008E                     	;# 
  4781  008E                     	;# 
  4782  008F                     	;# 
  4783  0090                     	;# 
  4784  0090                     	;# 
  4785  0091                     	;# 
  4786  0093                     	;# 
  4787  0094                     	;# 
  4788  0095                     	;# 
  4789  0096                     	;# 
  4790  0097                     	;# 
  4791  0098                     	;# 
  4792  0099                     	;# 
  4793  009A                     	;# 
  4794  009B                     	;# 
  4795  009C                     	;# 
  4796  009D                     	;# 
  4797  009E                     	;# 
  4798  010C                     	;# 
  4799  010D                     	;# 
  4800  010E                     	;# 
  4801  010E                     	;# 
  4802  010F                     	;# 
  4803  0110                     	;# 
  4804  0110                     	;# 
  4805  0111                     	;# 
  4806  0112                     	;# 
  4807  0112                     	;# 
  4808  0113                     	;# 
  4809  0114                     	;# 
  4810  0114                     	;# 
  4811  0115                     	;# 
  4812  0116                     	;# 
  4813  0116                     	;# 
  4814  0117                     	;# 
  4815  0119                     	;# 
  4816  0119                     	;# 
  4817  0119                     	;# 
  4818  011A                     	;# 
  4819  011A                     	;# 
  4820  011A                     	;# 
  4821  011B                     	;# 
  4822  011B                     	;# 
  4823  011B                     	;# 
  4824  011B                     	;# 
  4825  011B                     	;# 
  4826  011C                     	;# 
  4827  011C                     	;# 
  4828  011C                     	;# 
  4829  011D                     	;# 
  4830  011D                     	;# 
  4831  011D                     	;# 
  4832  011E                     	;# 
  4833  011E                     	;# 
  4834  011E                     	;# 
  4835  011F                     	;# 
  4836  011F                     	;# 
  4837  011F                     	;# 
  4838  011F                     	;# 
  4839  011F                     	;# 
  4840  018C                     	;# 
  4841  018D                     	;# 
  4842  018E                     	;# 
  4843  018F                     	;# 
  4844  0190                     	;# 
  4845  0191                     	;# 
  4846  0192                     	;# 
  4847  0196                     	;# 
  4848  0197                     	;# 
  4849  0198                     	;# 
  4850  0199                     	;# 
  4851  019A                     	;# 
  4852  019B                     	;# 
  4853  019C                     	;# 
  4854  020C                     	;# 
  4855  020C                     	;# 
  4856  020D                     	;# 
  4857  020E                     	;# 
  4858  020F                     	;# 
  4859  020F                     	;# 
  4860  0210                     	;# 
  4861  0210                     	;# 
  4862  0211                     	;# 
  4863  0211                     	;# 
  4864  0212                     	;# 
  4865  0212                     	;# 
  4866  0213                     	;# 
  4867  0214                     	;# 
  4868  0215                     	;# 
  4869  0215                     	;# 
  4870  0216                     	;# 
  4871  0216                     	;# 
  4872  0217                     	;# 
  4873  0217                     	;# 
  4874  0218                     	;# 
  4875  0218                     	;# 
  4876  0219                     	;# 
  4877  021A                     	;# 
  4878  021B                     	;# 
  4879  021B                     	;# 
  4880  021C                     	;# 
  4881  021C                     	;# 
  4882  021D                     	;# 
  4883  021D                     	;# 
  4884  021E                     	;# 
  4885  021F                     	;# 
  4886  028C                     	;# 
  4887  028C                     	;# 
  4888  028D                     	;# 
  4889  028D                     	;# 
  4890  028E                     	;# 
  4891  028F                     	;# 
  4892  0290                     	;# 
  4893  0290                     	;# 
  4894  0291                     	;# 
  4895  0292                     	;# 
  4896  0292                     	;# 
  4897  0293                     	;# 
  4898  0293                     	;# 
  4899  0294                     	;# 
  4900  0295                     	;# 
  4901  0296                     	;# 
  4902  0296                     	;# 
  4903  0297                     	;# 
  4904  0298                     	;# 
  4905  0298                     	;# 
  4906  0299                     	;# 
  4907  0299                     	;# 
  4908  029A                     	;# 
  4909  029B                     	;# 
  4910  029C                     	;# 
  4911  029C                     	;# 
  4912  029D                     	;# 
  4913  030C                     	;# 
  4914  030C                     	;# 
  4915  030D                     	;# 
  4916  030E                     	;# 
  4917  030F                     	;# 
  4918  0310                     	;# 
  4919  0310                     	;# 
  4920  0311                     	;# 
  4921  0312                     	;# 
  4922  0313                     	;# 
  4923  0314                     	;# 
  4924  0314                     	;# 
  4925  0315                     	;# 
  4926  0316                     	;# 
  4927  0317                     	;# 
  4928  0318                     	;# 
  4929  0318                     	;# 
  4930  0319                     	;# 
  4931  031A                     	;# 
  4932  031B                     	;# 
  4933  031C                     	;# 
  4934  031C                     	;# 
  4935  031D                     	;# 
  4936  031E                     	;# 
  4937  031F                     	;# 
  4938  038C                     	;# 
  4939  038D                     	;# 
  4940  038E                     	;# 
  4941  0390                     	;# 
  4942  0391                     	;# 
  4943  0392                     	;# 
  4944  040C                     	;# 
  4945  040D                     	;# 
  4946  040E                     	;# 
  4947  040F                     	;# 
  4948  0410                     	;# 
  4949  0411                     	;# 
  4950  0416                     	;# 
  4951  0416                     	;# 
  4952  0417                     	;# 
  4953  0418                     	;# 
  4954  0418                     	;# 
  4955  0419                     	;# 
  4956  041A                     	;# 
  4957  041A                     	;# 
  4958  041B                     	;# 
  4959  041C                     	;# 
  4960  041C                     	;# 
  4961  041D                     	;# 
  4962  041E                     	;# 
  4963  041F                     	;# 
  4964  048C                     	;# 
  4965  048C                     	;# 
  4966  048D                     	;# 
  4967  048E                     	;# 
  4968  048F                     	;# 
  4969  048F                     	;# 
  4970  0490                     	;# 
  4971  0491                     	;# 
  4972  0492                     	;# 
  4973  0492                     	;# 
  4974  0493                     	;# 
  4975  0494                     	;# 
  4976  0495                     	;# 
  4977  0495                     	;# 
  4978  0496                     	;# 
  4979  0497                     	;# 
  4980  0498                     	;# 
  4981  0499                     	;# 
  4982  049A                     	;# 
  4983  049B                     	;# 
  4984  049C                     	;# 
  4985  049D                     	;# 
  4986  050C                     	;# 
  4987  050C                     	;# 
  4988  050D                     	;# 
  4989  050E                     	;# 
  4990  050F                     	;# 
  4991  050F                     	;# 
  4992  0510                     	;# 
  4993  0511                     	;# 
  4994  0512                     	;# 
  4995  0512                     	;# 
  4996  0513                     	;# 
  4997  0514                     	;# 
  4998  0515                     	;# 
  4999  0515                     	;# 
  5000  0516                     	;# 
  5001  0517                     	;# 
  5002  0518                     	;# 
  5003  0519                     	;# 
  5004  051A                     	;# 
  5005  051B                     	;# 
  5006  051C                     	;# 
  5007  051D                     	;# 
  5008  058C                     	;# 
  5009  058C                     	;# 
  5010  058D                     	;# 
  5011  058E                     	;# 
  5012  058F                     	;# 
  5013  058F                     	;# 
  5014  0590                     	;# 
  5015  0591                     	;# 
  5016  0592                     	;# 
  5017  0593                     	;# 
  5018  060C                     	;# 
  5019  060D                     	;# 
  5020  060E                     	;# 
  5021  060F                     	;# 
  5022  0610                     	;# 
  5023  0611                     	;# 
  5024  0612                     	;# 
  5025  0613                     	;# 
  5026  0614                     	;# 
  5027  0616                     	;# 
  5028  0617                     	;# 
  5029  0618                     	;# 
  5030  0619                     	;# 
  5031  061A                     	;# 
  5032  061B                     	;# 
  5033  061C                     	;# 
  5034  061D                     	;# 
  5035  061E                     	;# 
  5036  068C                     	;# 
  5037  068D                     	;# 
  5038  068E                     	;# 
  5039  068F                     	;# 
  5040  0690                     	;# 
  5041  0691                     	;# 
  5042  0692                     	;# 
  5043  0693                     	;# 
  5044  0694                     	;# 
  5045  070C                     	;# 
  5046  070D                     	;# 
  5047  070E                     	;# 
  5048  070F                     	;# 
  5049  0710                     	;# 
  5050  0711                     	;# 
  5051  0712                     	;# 
  5052  0713                     	;# 
  5053  0714                     	;# 
  5054  0716                     	;# 
  5055  0717                     	;# 
  5056  0718                     	;# 
  5057  0719                     	;# 
  5058  071A                     	;# 
  5059  071B                     	;# 
  5060  071C                     	;# 
  5061  071D                     	;# 
  5062  071E                     	;# 
  5063  0796                     	;# 
  5064  0797                     	;# 
  5065  0798                     	;# 
  5066  0799                     	;# 
  5067  079A                     	;# 
  5068  079B                     	;# 
  5069  080C                     	;# 
  5070  080D                     	;# 
  5071  080E                     	;# 
  5072  080F                     	;# 
  5073  0810                     	;# 
  5074  0811                     	;# 
  5075  0812                     	;# 
  5076  0813                     	;# 
  5077  0814                     	;# 
  5078  081A                     	;# 
  5079  081B                     	;# 
  5080  081C                     	;# 
  5081  081D                     	;# 
  5082  081E                     	;# 
  5083  081F                     	;# 
  5084  088C                     	;# 
  5085  088D                     	;# 
  5086  088E                     	;# 
  5087  088F                     	;# 
  5088  0890                     	;# 
  5089  0891                     	;# 
  5090  0892                     	;# 
  5091  0893                     	;# 
  5092  0895                     	;# 
  5093  0896                     	;# 
  5094  0897                     	;# 
  5095  0898                     	;# 
  5096  0899                     	;# 
  5097  089A                     	;# 
  5098  089B                     	;# 
  5099  090C                     	;# 
  5100  090E                     	;# 
  5101  090F                     	;# 
  5102  091F                     	;# 
  5103  091F                     	;# 
  5104  098F                     	;# 
  5105  098F                     	;# 
  5106  0990                     	;# 
  5107  0991                     	;# 
  5108  0992                     	;# 
  5109  0993                     	;# 
  5110  0994                     	;# 
  5111  0995                     	;# 
  5112  0996                     	;# 
  5113  0997                     	;# 
  5114  0E0F                     	;# 
  5115  0E10                     	;# 
  5116  0E11                     	;# 
  5117  0E12                     	;# 
  5118  0E13                     	;# 
  5119  0E14                     	;# 
  5120  0E15                     	;# 
  5121  0E16                     	;# 
  5122  0E17                     	;# 
  5123  0E18                     	;# 
  5124  0E19                     	;# 
  5125  0E1A                     	;# 
  5126  0E1B                     	;# 
  5127  0E1C                     	;# 
  5128  0E1D                     	;# 
  5129  0E1E                     	;# 
  5130  0E1F                     	;# 
  5131  0E20                     	;# 
  5132  0E21                     	;# 
  5133  0E22                     	;# 
  5134  0E23                     	;# 
  5135  0E24                     	;# 
  5136  0E25                     	;# 
  5137  0E26                     	;# 
  5138  0E27                     	;# 
  5139  0E28                     	;# 
  5140  0E29                     	;# 
  5141  0E2A                     	;# 
  5142  0E2B                     	;# 
  5143  0E2C                     	;# 
  5144  0E2D                     	;# 
  5145  0E2E                     	;# 
  5146  0E2F                     	;# 
  5147  0E30                     	;# 
  5148  0E31                     	;# 
  5149  0E32                     	;# 
  5150  0E33                     	;# 
  5151  0E34                     	;# 
  5152  0E35                     	;# 
  5153  0E36                     	;# 
  5154  0E37                     	;# 
  5155  0E8F                     	;# 
  5156  0E90                     	;# 
  5157  0E91                     	;# 
  5158  0E92                     	;# 
  5159  0E93                     	;# 
  5160  0E94                     	;# 
  5161  0E95                     	;# 
  5162  0E96                     	;# 
  5163  0E97                     	;# 
  5164  0E9C                     	;# 
  5165  0E9D                     	;# 
  5166  0E9E                     	;# 
  5167  0EA1                     	;# 
  5168  0EA2                     	;# 
  5169  0EA3                     	;# 
  5170  0EA4                     	;# 
  5171  0EA5                     	;# 
  5172  0EA9                     	;# 
  5173  0EAA                     	;# 
  5174  0EAB                     	;# 
  5175  0EAC                     	;# 
  5176  0EB1                     	;# 
  5177  0EB2                     	;# 
  5178  0EB3                     	;# 
  5179  0EB8                     	;# 
  5180  0EB9                     	;# 
  5181  0EBA                     	;# 
  5182  0EBB                     	;# 
  5183  0EBC                     	;# 
  5184  0EBD                     	;# 
  5185  0EBE                     	;# 
  5186  0EC3                     	;# 
  5187  0EC5                     	;# 
  5188  0EC6                     	;# 
  5189  0EC7                     	;# 
  5190  0EC8                     	;# 
  5191  0EC9                     	;# 
  5192  0ECA                     	;# 
  5193  0ECB                     	;# 
  5194  0ECC                     	;# 
  5195  0F10                     	;# 
  5196  0F11                     	;# 
  5197  0F12                     	;# 
  5198  0F13                     	;# 
  5199  0F14                     	;# 
  5200  0F15                     	;# 
  5201  0F16                     	;# 
  5202  0F17                     	;# 
  5203  0F18                     	;# 
  5204  0F19                     	;# 
  5205  0F1A                     	;# 
  5206  0F1B                     	;# 
  5207  0F1C                     	;# 
  5208  0F1D                     	;# 
  5209  0F1E                     	;# 
  5210  0F1F                     	;# 
  5211  0F20                     	;# 
  5212  0F21                     	;# 
  5213  0F22                     	;# 
  5214  0F23                     	;# 
  5215  0F24                     	;# 
  5216  0F25                     	;# 
  5217  0F26                     	;# 
  5218  0F27                     	;# 
  5219  0F38                     	;# 
  5220  0F39                     	;# 
  5221  0F3A                     	;# 
  5222  0F3B                     	;# 
  5223  0F3C                     	;# 
  5224  0F3D                     	;# 
  5225  0F3E                     	;# 
  5226  0F3F                     	;# 
  5227  0F40                     	;# 
  5228  0F41                     	;# 
  5229  0F43                     	;# 
  5230  0F44                     	;# 
  5231  0F45                     	;# 
  5232  0F46                     	;# 
  5233  0F47                     	;# 
  5234  0F48                     	;# 
  5235  0F49                     	;# 
  5236  0F4A                     	;# 
  5237  0F4B                     	;# 
  5238  0F4C                     	;# 
  5239  0F4E                     	;# 
  5240  0F4F                     	;# 
  5241  0F50                     	;# 
  5242  0F51                     	;# 
  5243  0F52                     	;# 
  5244  0F53                     	;# 
  5245  0F54                     	;# 
  5246  0F55                     	;# 
  5247  0F56                     	;# 
  5248  0F57                     	;# 
  5249  0F65                     	;# 
  5250  0F68                     	;# 
  5251  0F69                     	;# 
  5252  0F6A                     	;# 
  5253  0F6B                     	;# 
  5254  0FE4                     	;# 
  5255  0FE5                     	;# 
  5256  0FE6                     	;# 
  5257  0FE7                     	;# 
  5258  0FE8                     	;# 
  5259  0FE9                     	;# 
  5260  0FEA                     	;# 
  5261  0FEB                     	;# 
  5262  0FED                     	;# 
  5263  0FEE                     	;# 
  5264  0FEF                     	;_samples
  5265                           
  5266                           	psect	idataBANK1
  5267  0009                     __pidataBANK1:	
  5268                           
  5269                           ;initializer for _batteryTemp
  5270  0009  342C               	retlw	44
  5271  000A  3401               	retlw	1
  5272                           
  5273                           	psect	idataBANK2
  5274  12C5                     __pidataBANK2:	
  5275                           
  5276                           ;initializer for _channels
  5277  12C5  3414               	retlw	20
  5278  12C6  3400               	retlw	0
  5279  12C7  3410               	retlw	16
  5280  12C8  3400               	retlw	0
  5281  12C9  3416               	retlw	22
  5282  12CA  3400               	retlw	0
  5283  12CB  3412               	retlw	18
  5284  12CC  3400               	retlw	0
  5285                           
  5286                           	psect	stringtext1
  5287  1000                     __pstringtext1:	
  5288  1000                     _fonts:	
  5289  1000  3400               	retlw	0
  5290  1001  3400               	retlw	0
  5291  1002  3400               	retlw	0
  5292  1003  3400               	retlw	0
  5293  1004  344E               	retlw	78
  5294  1005  3400               	retlw	0
  5295  1006  3406               	retlw	6
  5296  1007  3400               	retlw	0
  5297  1008  3406               	retlw	6
  5298  1009  34FF               	retlw	255
  5299  100A  34FF               	retlw	255
  5300  100B  34FF               	retlw	255
  5301  100C  3448               	retlw	72
  5302  100D  34D6               	retlw	214
  5303  100E  3424               	retlw	36
  5304  100F  3412               	retlw	18
  5305  1010  3408               	retlw	8
  5306  1011  3424               	retlw	36
  5307  1012  34FF               	retlw	255
  5308  1013  34FF               	retlw	255
  5309  1014  34FF               	retlw	255
  5310  1015  3400               	retlw	0
  5311  1016  3406               	retlw	6
  5312  1017  3400               	retlw	0
  5313  1018  3438               	retlw	56
  5314  1019  3444               	retlw	68
  5315  101A  3482               	retlw	130
  5316  101B  3482               	retlw	130
  5317  101C  3444               	retlw	68
  5318  101D  3438               	retlw	56
  5319  101E  3414               	retlw	20
  5320  101F  3408               	retlw	8
  5321  1020  343E               	retlw	62
  5322  1021  3410               	retlw	16
  5323  1022  3438               	retlw	56
  5324  1023  3410               	retlw	16
  5325  1024  34A0               	retlw	160
  5326  1025  3460               	retlw	96
  5327  1026  3400               	retlw	0
  5328  1027  3410               	retlw	16
  5329  1028  3410               	retlw	16
  5330  1029  3410               	retlw	16
  5331  102A  3460               	retlw	96
  5332  102B  3460               	retlw	96
  5333  102C  3400               	retlw	0
  5334  102D  3460               	retlw	96
  5335  102E  3418               	retlw	24
  5336  102F  3406               	retlw	6
  5337  1030  347C               	retlw	124
  5338  1031  3442               	retlw	66
  5339  1032  347C               	retlw	124
  5340  1033  3444               	retlw	68
  5341  1034  347E               	retlw	126
  5342  1035  3440               	retlw	64
  5343  1036  3464               	retlw	100
  5344  1037  3452               	retlw	82
  5345  1038  344C               	retlw	76
  5346  1039  344A               	retlw	74
  5347  103A  344A               	retlw	74
  5348  103B  3434               	retlw	52
  5349  103C  3438               	retlw	56
  5350  103D  3424               	retlw	36
  5351  103E  347E               	retlw	126
  5352  103F  344E               	retlw	78
  5353  1040  344A               	retlw	74
  5354  1041  3432               	retlw	50
  5355  1042  343C               	retlw	60
  5356  1043  344A               	retlw	74
  5357  1044  3432               	retlw	50
  5358  1045  3462               	retlw	98
  5359  1046  341A               	retlw	26
  5360  1047  3406               	retlw	6
  5361  1048  3476               	retlw	118
  5362  1049  344A               	retlw	74
  5363  104A  3476               	retlw	118
  5364  104B  344C               	retlw	76
  5365  104C  3452               	retlw	82
  5366  104D  343C               	retlw	60
  5367  104E  346C               	retlw	108
  5368  104F  346C               	retlw	108
  5369  1050  3400               	retlw	0
  5370  1051  34AC               	retlw	172
  5371  1052  346C               	retlw	108
  5372  1053  3400               	retlw	0
  5373  1054  3410               	retlw	16
  5374  1055  3428               	retlw	40
  5375  1056  3444               	retlw	68
  5376  1057  3428               	retlw	40
  5377  1058  3428               	retlw	40
  5378  1059  3428               	retlw	40
  5379  105A  3444               	retlw	68
  5380  105B  3428               	retlw	40
  5381  105C  3410               	retlw	16
  5382  105D  3402               	retlw	2
  5383  105E  3459               	retlw	89
  5384  105F  3406               	retlw	6
  5385  1060  34FF               	retlw	255
  5386  1061  34FF               	retlw	255
  5387  1062  34FF               	retlw	255
  5388  1063  347C               	retlw	124
  5389  1064  3412               	retlw	18
  5390  1065  347C               	retlw	124
  5391  1066  347E               	retlw	126
  5392  1067  345A               	retlw	90
  5393  1068  3434               	retlw	52
  5394  1069  343C               	retlw	60
  5395  106A  3442               	retlw	66
  5396  106B  3442               	retlw	66
  5397  106C  347E               	retlw	126
  5398  106D  3442               	retlw	66
  5399  106E  343C               	retlw	60
  5400  106F  347E               	retlw	126
  5401  1070  344A               	retlw	74
  5402  1071  3442               	retlw	66
  5403  1072  347E               	retlw	126
  5404  1073  340A               	retlw	10
  5405  1074  340A               	retlw	10
  5406  1075  343C               	retlw	60
  5407  1076  3452               	retlw	82
  5408  1077  3434               	retlw	52
  5409  1078  347E               	retlw	126
  5410  1079  3408               	retlw	8
  5411  107A  347E               	retlw	126
  5412  107B  3442               	retlw	66
  5413  107C  347E               	retlw	126
  5414  107D  3442               	retlw	66
  5415  107E  3430               	retlw	48
  5416  107F  3440               	retlw	64
  5417  1080  343E               	retlw	62
  5418  1081  347E               	retlw	126
  5419  1082  3418               	retlw	24
  5420  1083  3466               	retlw	102
  5421  1084  347E               	retlw	126
  5422  1085  3440               	retlw	64
  5423  1086  3440               	retlw	64
  5424  1087  347E               	retlw	126
  5425  1088  341C               	retlw	28
  5426  1089  347E               	retlw	126
  5427  108A  347E               	retlw	126
  5428  108B  3402               	retlw	2
  5429  108C  347E               	retlw	126
  5430  108D  343C               	retlw	60
  5431  108E  3442               	retlw	66
  5432  108F  343C               	retlw	60
  5433  1090  347E               	retlw	126
  5434  1091  3412               	retlw	18
  5435  1092  340C               	retlw	12
  5436  1093  347E               	retlw	126
  5437  1094  3462               	retlw	98
  5438  1095  34FE               	retlw	254
  5439  1096  347E               	retlw	126
  5440  1097  3432               	retlw	50
  5441  1098  344E               	retlw	78
  5442  1099  3444               	retlw	68
  5443  109A  344A               	retlw	74
  5444  109B  3432               	retlw	50
  5445  109C  3402               	retlw	2
  5446  109D  347E               	retlw	126
  5447  109E  3402               	retlw	2
  5448  109F  347E               	retlw	126
  5449  10A0  3440               	retlw	64
  5450  10A1  347E               	retlw	126
  5451  10A2  343E               	retlw	62
  5452  10A3  3440               	retlw	64
  5453  10A4  343E               	retlw	62
  5454  10A5  347E               	retlw	126
  5455  10A6  3438               	retlw	56
  5456  10A7  347E               	retlw	126
  5457  10A8  3466               	retlw	102
  5458  10A9  3418               	retlw	24
  5459  10AA  3466               	retlw	102
  5460  10AB  340E               	retlw	14
  5461  10AC  3470               	retlw	112
  5462  10AD  340E               	retlw	14
  5463  10AE  3462               	retlw	98
  5464  10AF  345A               	retlw	90
  5465  10B0  3446               	retlw	70
  5466  10B1  3400               	retlw	0
  5467  10B2  347E               	retlw	126
  5468  10B3  3442               	retlw	66
  5469  10B4  3406               	retlw	6
  5470  10B5  3418               	retlw	24
  5471  10B6  3460               	retlw	96
  5472  10B7  3442               	retlw	66
  5473  10B8  347E               	retlw	126
  5474  10B9  3400               	retlw	0
  5475  10BA  3404               	retlw	4
  5476  10BB  3402               	retlw	2
  5477  10BC  3404               	retlw	4
  5478  10BD  3440               	retlw	64
  5479  10BE  3440               	retlw	64
  5480  10BF  3440               	retlw	64
  5481  10C0  3400               	retlw	0
  5482  10C1  3402               	retlw	2
  5483  10C2  3404               	retlw	4
  5484  10C3  3474               	retlw	116
  5485  10C4  3454               	retlw	84
  5486  10C5  3478               	retlw	120
  5487  10C6  347E               	retlw	126
  5488  10C7  3448               	retlw	72
  5489  10C8  3430               	retlw	48
  5490  10C9  3430               	retlw	48
  5491  10CA  3448               	retlw	72
  5492  10CB  3448               	retlw	72
  5493  10CC  3430               	retlw	48
  5494  10CD  3448               	retlw	72
  5495  10CE  347E               	retlw	126
  5496  10CF  3438               	retlw	56
  5497  10D0  3454               	retlw	84
  5498  10D1  3458               	retlw	88
  5499  10D2  347C               	retlw	124
  5500  10D3  340A               	retlw	10
  5501  10D4  3402               	retlw	2
  5502  10D5  3498               	retlw	152
  5503  10D6  34A4               	retlw	164
  5504  10D7  347C               	retlw	124
  5505  10D8  347E               	retlw	126
  5506  10D9  3408               	retlw	8
  5507  10DA  3470               	retlw	112
  5508  10DB  3448               	retlw	72
  5509  10DC  347A               	retlw	122
  5510  10DD  3440               	retlw	64
  5511  10DE  3488               	retlw	136
  5512  10DF  34FA               	retlw	250
  5513  10E0  3400               	retlw	0
  5514  10E1  347E               	retlw	126
  5515  10E2  3418               	retlw	24
  5516  10E3  3464               	retlw	100
  5517  10E4  3442               	retlw	66
  5518  10E5  347E               	retlw	126
  5519  10E6  3440               	retlw	64
  5520  10E7  347C               	retlw	124
  5521  10E8  3438               	retlw	56
  5522  10E9  347C               	retlw	124
  5523  10EA  347C               	retlw	124
  5524  10EB  3404               	retlw	4
  5525  10EC  3478               	retlw	120
  5526  10ED  3438               	retlw	56
  5527  10EE  3444               	retlw	68
  5528  10EF  3438               	retlw	56
  5529  10F0  34FC               	retlw	252
  5530  10F1  3424               	retlw	36
  5531  10F2  3418               	retlw	24
  5532  10F3  3418               	retlw	24
  5533  10F4  3424               	retlw	36
  5534  10F5  34FC               	retlw	252
  5535  10F6  3478               	retlw	120
  5536  10F7  3404               	retlw	4
  5537  10F8  3404               	retlw	4
  5538  10F9  3448               	retlw	72
  5539  10FA  3454               	retlw	84
  5540  10FB  3424               	retlw	36
  5541  10FC  3404               	retlw	4
  5542  10FD  343E               	retlw	62
  5543  10FE  3444               	retlw	68
  5544  10FF  347C               	retlw	124
  5545  1100  3440               	retlw	64
  5546  1101  347C               	retlw	124
  5547  1102  343C               	retlw	60
  5548  1103  3440               	retlw	64
  5549  1104  343C               	retlw	60
  5550  1105  347C               	retlw	124
  5551  1106  3430               	retlw	48
  5552  1107  347C               	retlw	124
  5553  1108  346C               	retlw	108
  5554  1109  3410               	retlw	16
  5555  110A  346C               	retlw	108
  5556  110B  349C               	retlw	156
  5557  110C  34A0               	retlw	160
  5558  110D  347C               	retlw	124
  5559  110E  3464               	retlw	100
  5560  110F  3454               	retlw	84
  5561  1110  344C               	retlw	76
  5562  1111  340C               	retlw	12
  5563  1112  3412               	retlw	18
  5564  1113  340C               	retlw	12
  5565  1114  34FF               	retlw	255
  5566  1115  34FF               	retlw	255
  5567  1116  34FF               	retlw	255
  5568  1117  34FF               	retlw	255
  5569  1118  34FF               	retlw	255
  5570  1119  34FF               	retlw	255
  5571  111A  34FF               	retlw	255
  5572  111B  34FF               	retlw	255
  5573  111C  34FF               	retlw	255
  5574  111D  34FF               	retlw	255
  5575  111E  34FF               	retlw	255
  5576  111F  34FF               	retlw	255
  5577  1120  34FF               	retlw	255
  5578  1121  34FF               	retlw	255
  5579  1122  34FF               	retlw	255
  5580  1123  34FF               	retlw	255
  5581  1124  34FF               	retlw	255
  5582  1125  34FF               	retlw	255
  5583  1126  34FC               	retlw	252
  5584  1127  3440               	retlw	64
  5585  1128  347C               	retlw	124
  5586  1129  34FF               	retlw	255
  5587  112A  34FF               	retlw	255
  5588  112B  34FF               	retlw	255
  5589  112C  34FF               	retlw	255
  5590  112D  34FF               	retlw	255
  5591  112E  34FF               	retlw	255
  5592  112F                     __end_of_fonts:	
  5593                           
  5594                           	psect	stringtext2
  5595  1800                     __pstringtext2:	
  5596  1800                     log@coeff:	
  5597  1800  3400               	retlw	0
  5598  1801  3400               	retlw	0
  5599  1802  3400               	retlw	0
  5600  1803  3400               	retlw	0
  5601  1804  3480               	retlw	128
  5602  1805  343F               	retlw	63
  5603  1806  34F0               	retlw	240
  5604  1807  34FF               	retlw	255
  5605  1808  34BE               	retlw	190
  5606  1809  34E2               	retlw	226
  5607  180A  34A9               	retlw	169
  5608  180B  343E               	retlw	62
  5609  180C  3483               	retlw	131
  5610  180D  3476               	retlw	118
  5611  180E  34BE               	retlw	190
  5612  180F  34AE               	retlw	174
  5613  1810  342B               	retlw	43
  5614  1811  343E               	retlw	62
  5615  1812  343C               	retlw	60
  5616  1813  34C3               	retlw	195
  5617  1814  34BD               	retlw	189
  5618  1815  34D2               	retlw	210
  5619  1816  3413               	retlw	19
  5620  1817  343D               	retlw	61
  5621  1818  3478               	retlw	120
  5622  1819  34D3               	retlw	211
  5623  181A  34BB               	retlw	187
  5624  181B                     __end_oflog@coeff:	
  5625  0013                     _TRISC	set	19
  5626  0012                     _TRISB	set	18
  5627  0011                     _TRISA	set	17
  5628  0018                     _LATC	set	24
  5629  0017                     _LATB	set	23
  5630  0016                     _LATA	set	22
  5631  0016                     _LATAbits	set	22
  5632  0011                     _TRISAbits	set	17
  5633  00B5                     _LATA5	set	181
  5634  006A                     _RB2	set	106
  5635  005F                     _GIE	set	95
  5636  0093                     _ADCON0	set	147
  5637  009D                     _ADACQ	set	157
  5638  009C                     _ADPRE	set	156
  5639  009B                     _ADCAP	set	155
  5640  009A                     _ADREF	set	154
  5641  0098                     _ADCLK	set	152
  5642  0097                     _ADSTAT	set	151
  5643  0099                     _ADACT	set	153
  5644  0096                     _ADCON3	set	150
  5645  0095                     _ADCON2	set	149
  5646  0094                     _ADCON1	set	148
  5647  008C                     _ADRESL	set	140
  5648  008D                     _ADRESH	set	141
  5649  0093                     _ADCON0bits	set	147
  5650  009E                     _ADPCH	set	158
  5651  0113                     _ADSTPTH	set	275
  5652  0112                     _ADSTPTL	set	274
  5653  0111                     _ADUTHH	set	273
  5654  0110                     _ADUTHL	set	272
  5655  010F                     _ADLTHH	set	271
  5656  010E                     _ADLTHL	set	270
  5657  010D                     _ADRPT	set	269
  5658  021F                     _CCPTMRS1bits	set	543
  5659  0294                     _T4CONbits	set	660
  5660  0292                     _T4TMR	set	658
  5661  0293                     _T4PR	set	659
  5662  0297                     _T4RST	set	663
  5663  0295                     _T4HLT	set	661
  5664  0296                     _T4CLKCON	set	662
  5665  0294                     _T4CON	set	660
  5666  028E                     _T2CONbits	set	654
  5667  028C                     _T2TMR	set	652
  5668  028D                     _T2PR	set	653
  5669  0291                     _T2RST	set	657
  5670  028F                     _T2HLT	set	655
  5671  0290                     _T2CLKCON	set	656
  5672  028E                     _T2CON	set	654
  5673  0390                     _PWM7DCL	set	912
  5674  0391                     _PWM7DCH	set	913
  5675  0392                     _PWM7CON	set	914
  5676  038C                     _PWM6DCL	set	908
  5677  038D                     _PWM6DCH	set	909
  5678  038E                     _PWM6CON	set	910
  5679  0710                     _PIR4bits	set	1808
  5680  0716                     _PIE0bits	set	1814
  5681  0892                     _OSCTUNE	set	2194
  5682  0893                     _OSCFRQ	set	2195
  5683  0891                     _OSCEN	set	2193
  5684  088F                     _OSCCON3	set	2191
  5685  088D                     _OSCCON1	set	2189
  5686  090C                     _FVRCON	set	2316
  5687  0E8F                     _PPSLOCKbits	set	3727
  5688  0E8F                     _PPSLOCK	set	3727
  5689  0F18                     _RB0PPS	set	3864
  5690  0F17                     _RA7PPS	set	3863
  5691  0F16                     _RA6PPS	set	3862
  5692  0F4E                     _ANSELC	set	3918
  5693  0F43                     _ANSELB	set	3907
  5694  0F38                     _ANSELA	set	3896
  5695  0F65                     _WPUE	set	3941
  5696  0F4F                     _WPUC	set	3919
  5697  0F44                     _WPUB	set	3908
  5698  0F39                     _WPUA	set	3897
  5699  181B                     STR_3:	
  5700  181B  3452               	retlw	82	;'R'
  5701  181C  3465               	retlw	101	;'e'
  5702  181D  3466               	retlw	102	;'f'
  5703  181E  343A               	retlw	58	;':'
  5704  181F  3400               	retlw	0
  5705                           
  5706                           	psect	stringtext3
  5707  1820                     __pstringtext3:	
  5708  1820                     STR_2:	
  5709  1820  344F               	retlw	79	;'O'
  5710  1821  3475               	retlw	117	;'u'
  5711  1822  3474               	retlw	116	;'t'
  5712  1823  343A               	retlw	58	;':'
  5713  1824  3400               	retlw	0
  5714                           
  5715                           	psect	stringtext4
  5716  1825                     __pstringtext4:	
  5717  1825                     STR_1:	
  5718  1825  3449               	retlw	73	;'I'
  5719  1826  346E               	retlw	110	;'n'
  5720  1827  343A               	retlw	58	;':'
  5721  1828  3400               	retlw	0
  5722                           
  5723                           	psect	stringtext5
  5724  0000                     __pstringtext5:	
  5725                           
  5726                           ; #config settings
  5727  0000                     
  5728                           	psect	cinit
  5729  07BF                     start_initialization:	
  5730  07BF                     __initialization:		;BIGRAM
  5731                           
  5732                           ; Initialize objects allocated to BANK1
  5733  07BF  0021               	movlb	1	; select bank1
  5734  07C0  3180  2009  3187   	fcall	__pidataBANK1	;fetch initializer
  5735  07C3  00ED               	movwf	__pdataBANK1& (0+127)
  5736  07C4  3180  200A  3187   	fcall	__pidataBANK1+1	;fetch initializer
  5737  07C7  00EE               	movwf	(__pdataBANK1+1)& (0+127)
  5738                           
  5739                           ; Initialize objects allocated to BANK2
  5740  07C8  30C5               	movlw	low __pidataBANK2
  5741  07C9  0084               	movwf	4
  5742  07CA  3092               	movlw	(high __pidataBANK2)| (0+128)
  5743  07CB  0085               	movwf	5
  5744  07CC  0022               	movlb	2	; select bank2
  5745  07CD  0012               	moviw fsr0++
  5746  07CE  00B0               	movwf	__pdataBANK2& (0+127)
  5747  07CF  0012               	moviw fsr0++
  5748  07D0  00B1               	movwf	(__pdataBANK2+1)& (0+127)
  5749  07D1  0012               	moviw fsr0++
  5750  07D2  00B2               	movwf	(__pdataBANK2+2)& (0+127)
  5751  07D3  0012               	moviw fsr0++
  5752  07D4  00B3               	movwf	(__pdataBANK2+3)& (0+127)
  5753  07D5  0012               	moviw fsr0++
  5754  07D6  00B4               	movwf	(__pdataBANK2+4)& (0+127)
  5755  07D7  0012               	moviw fsr0++
  5756  07D8  00B5               	movwf	(__pdataBANK2+5)& (0+127)
  5757  07D9  0012               	moviw fsr0++
  5758  07DA  00B6               	movwf	(__pdataBANK2+6)& (0+127)
  5759  07DB  0012               	moviw fsr0++
  5760  07DC  00B7               	movwf	(__pdataBANK2+7)& (0+127)
  5761                           
  5762                           ; Clear objects allocated to BIGRAM
  5763  07DD  3060               	movlw	low (0+8800)
  5764  07DE  0084               	movwf	4
  5765  07DF  3022               	movlw	high (0+8800)
  5766  07E0  0085               	movwf	5
  5767  07E1  3090               	movlw	144
  5768  07E2  00FE               	movwf	btemp
  5769  07E3  3001               	movlw	1
  5770  07E4  00FF               	movwf	btemp+1
  5771  07E5  3192  22D6  3187   	fcall	clear_ram0
  5772                           
  5773                           ; Clear objects allocated to BANK1
  5774  07E8  30A0               	movlw	low __pbssBANK1
  5775  07E9  0084               	movwf	4
  5776  07EA  3000               	movlw	high __pbssBANK1
  5777  07EB  0085               	movwf	5
  5778  07EC  304D               	movlw	77
  5779  07ED  00FE               	movwf	btemp
  5780  07EE  3000               	movlw	0
  5781  07EF  00FF               	movwf	btemp+1
  5782  07F0  3192  22D6  3187   	fcall	clear_ram0
  5783                           
  5784                           ; Clear objects allocated to BANK2
  5785  07F3  3020               	movlw	low __pbssBANK2
  5786  07F4  0084               	movwf	4
  5787  07F5  3001               	movlw	high __pbssBANK2
  5788  07F6  0085               	movwf	5
  5789  07F7  3010               	movlw	16
  5790  07F8  00FE               	movwf	btemp
  5791  07F9  3000               	movlw	0
  5792  07FA  00FF               	movwf	btemp+1
  5793  07FB  3192  22D6         	fcall	clear_ram0
  5794  07FD                     end_of_initialization:	
  5795                           ;End of C runtime variable initialization code
  5796                           
  5797  07FD                     __end_of__initialization:	
  5798  07FD  0020               	movlb	0
  5799  07FE  3182  2AC5         	ljmp	_main	;jump to C main() function
  5800                           
  5801                           	psect	bssBANK1
  5802  00A0                     __pbssBANK1:	
  5803  00A0                     _Ianalogs:	
  5804  00A0                     	ds	8
  5805  00A8                     _Vanalogs:	
  5806  00A8                     	ds	8
  5807  00B0                     _voltage:	
  5808  00B0                     	ds	8
  5809  00B8                     _current:	
  5810  00B8                     	ds	8
  5811  00C0                     LCDWriteInt@F14388:	
  5812  00C0                     	ds	5
  5813  00C5                     _Vref:	
  5814  00C5                     	ds	4
  5815  00C9                     _stateCounter:	
  5816  00C9                     	ds	4
  5817  00CD                     _Iref:	
  5818  00CD                     	ds	4
  5819  00D1                     _IminCount:	
  5820  00D1                     	ds	4
  5821  00D5                     _Imin:	
  5822  00D5                     	ds	4
  5823  00D9                     _errno:	
  5824  00D9                     	ds	2
  5825  00DB                     _readButtons:	
  5826  00DB                     	ds	2
  5827  00DD                     _VHoldMode:	
  5828  00DD                     	ds	2
  5829  00DF                     _Iout:	
  5830  00DF                     	ds	2
  5831  00E1                     _Imode:	
  5832  00E1                     	ds	2
  5833  00E3                     _cc_cv:	
  5834  00E3                     	ds	2
  5835  00E5                     _batteryState:	
  5836  00E5                     	ds	2
  5837  00E7                     _sampleIndex:	
  5838  00E7                     	ds	2
  5839  00E9                     _j:	
  5840  00E9                     	ds	1
  5841  00EA                     _lastButton:	
  5842  00EA                     	ds	1
  5843  00EB                     _button:	
  5844  00EB                     	ds	1
  5845  00EC                     _x:	
  5846  00EC                     	ds	1
  5847                           
  5848                           	psect	dataBANK1
  5849  00ED                     __pdataBANK1:	
  5850  00ED                     _batteryTemp:	
  5851  00ED                     	ds	2
  5852                           
  5853                           	psect	bssBANK2
  5854  0120                     __pbssBANK2:	
  5855  0120                     _totals:	
  5856  0120                     	ds	16
  5857                           
  5858                           	psect	dataBANK2
  5859  0130                     __pdataBANK2:	
  5860  0130                     _channels:	
  5861  0130                     	ds	8
  5862                           
  5863                           	psect	clrtext
  5864  12D6                     clear_ram0:	
  5865                           ;	Called with FSR0 containing the base address, and
  5866                           ;	btemp/btemp+1 has the size to clear
  5867                           
  5868  12D6  0064               	clrwdt	;clear the watchdog before getting into this loop
  5869  12D7                     clrloop0:	
  5870  12D7  0180               	clrf	0	;clear RAM location pointed to by FSR
  5871  12D8  3101               	addfsr 0,1
  5872  12D9  3001               	movlw	1
  5873  12DA  02FE               	subwf	126,f
  5874  12DB  3000               	movlw	0
  5875  12DC  3BFF               	subwfb	127,f
  5876  12DD  087F               	movf	127,w
  5877  12DE  047E               	iorwf	126,w
  5878  12DF  1903               	btfsc	3,2
  5879  12E0  3400               	retlw	0	;all done for this memory range, return
  5880  12E1  2AD7               	goto	clrloop0	;have we reached the end yet?
  5881                           
  5882                           	psect	cstackCOMMON
  5883  0070                     __pcstackCOMMON:	
  5884  0070                     ?___ftge:	
  5885  0070                     ?_LCDWrite:	
  5886                           ; 1 bit 
  5887                           
  5888  0070                     ?_OSCILLATOR_Initialize:	
  5889                           ; 1 bytes @ 0x0
  5890                           
  5891  0070                     ??_OSCILLATOR_Initialize:	
  5892                           ; 1 bytes @ 0x0
  5893                           
  5894  0070                     ?_TMR2_Initialize:	
  5895                           ; 1 bytes @ 0x0
  5896                           
  5897  0070                     ??_TMR2_Initialize:	
  5898                           ; 1 bytes @ 0x0
  5899                           
  5900  0070                     ?_TMR4_Initialize:	
  5901                           ; 1 bytes @ 0x0
  5902                           
  5903  0070                     ??_TMR4_Initialize:	
  5904                           ; 1 bytes @ 0x0
  5905                           
  5906  0070                     ?_calculateCurrent0:	
  5907                           ; 1 bytes @ 0x0
  5908                           
  5909  0070                     ?_calculateCurrent1:	
  5910                           ; 1 bytes @ 0x0
  5911                           
  5912  0070                     ?_calculateCurrent2:	
  5913                           ; 1 bytes @ 0x0
  5914                           
  5915  0070                     ?_calculateCurrent3:	
  5916                           ; 1 bytes @ 0x0
  5917                           
  5918  0070                     ?_ADC_Initialize:	
  5919                           ; 1 bytes @ 0x0
  5920                           
  5921  0070                     ??_ADC_Initialize:	
  5922                           ; 1 bytes @ 0x0
  5923                           
  5924  0070                     ?_Init_Battery_State_Machine:	
  5925                           ; 1 bytes @ 0x0
  5926                           
  5927  0070                     ?_Battery_State_Machine:	
  5928                           ; 1 bytes @ 0x0
  5929                           
  5930  0070                     ?_cc_cv_mode:	
  5931                           ; 1 bytes @ 0x0
  5932                           
  5933  0070                     ?_readButton:	
  5934                           ; 1 bytes @ 0x0
  5935                           
  5936  0070                     ?_LCDWriteCharacter:	
  5937                           ; 1 bytes @ 0x0
  5938                           
  5939  0070                     ?_LCDClear:	
  5940                           ; 1 bytes @ 0x0
  5941                           
  5942  0070                     ?_LCDInit:	
  5943                           ; 1 bytes @ 0x0
  5944                           
  5945  0070                     ?_PIN_MANAGER_Initialize:	
  5946                           ; 1 bytes @ 0x0
  5947                           
  5948  0070                     ??_PIN_MANAGER_Initialize:	
  5949                           ; 1 bytes @ 0x0
  5950                           
  5951  0070                     ?_PWM_Initialize:	
  5952                           ; 1 bytes @ 0x0
  5953                           
  5954  0070                     ??_PWM_Initialize:	
  5955                           ; 1 bytes @ 0x0
  5956                           
  5957  0070                     ?_PWM6_LoadDutyValue:	
  5958                           ; 1 bytes @ 0x0
  5959                           
  5960  0070                     ?_PWM7_LoadDutyValue:	
  5961                           ; 1 bytes @ 0x0
  5962                           
  5963  0070                     ?_SYSTEM_Initialize:	
  5964                           ; 1 bytes @ 0x0
  5965                           
  5966  0070                     ?_main:	
  5967                           ; 1 bytes @ 0x0
  5968                           
  5969  0070                     ?_ADCRead:	
  5970                           ; 1 bytes @ 0x0
  5971                           
  5972  0070                     ?___wmul:	
  5973                           ; 2 bytes @ 0x0
  5974                           
  5975  0070                     ?___awdiv:	
  5976                           ; 2 bytes @ 0x0
  5977                           
  5978  0070                     ?___lwmod:	
  5979                           ; 2 bytes @ 0x0
  5980                           
  5981  0070                     ?___ftpack:	
  5982                           ; 2 bytes @ 0x0
  5983                           
  5984  0070                     ?_frexp:	
  5985                           ; 3 bytes @ 0x0
  5986                           
  5987  0070                     ?___aldiv:	
  5988                           ; 3 bytes @ 0x0
  5989                           
  5990  0070                     LCDWrite@data:	
  5991                           ; 4 bytes @ 0x0
  5992                           
  5993  0070                     PIN_MANAGER_Initialize@state:	
  5994                           ; 1 bytes @ 0x0
  5995                           
  5996  0070                     PWM6_LoadDutyValue@dutyCycle6:	
  5997                           ; 1 bytes @ 0x0
  5998                           
  5999  0070                     PWM7_LoadDutyValue@dutyCycle7:	
  6000                           ; 2 bytes @ 0x0
  6001                           
  6002  0070                     ___wmul@multiplier:	
  6003                           ; 2 bytes @ 0x0
  6004                           
  6005  0070                     ___awdiv@divisor:	
  6006                           ; 2 bytes @ 0x0
  6007                           
  6008  0070                     ___lwmod@divisor:	
  6009                           ; 2 bytes @ 0x0
  6010                           
  6011  0070                     ___ftpack@arg:	
  6012                           ; 2 bytes @ 0x0
  6013                           
  6014  0070                     ___ftge@ff1:	
  6015                           ; 3 bytes @ 0x0
  6016                           
  6017  0070                     frexp@value:	
  6018                           ; 3 bytes @ 0x0
  6019                           
  6020  0070                     ___aldiv@divisor:	
  6021                           ; 3 bytes @ 0x0
  6022                           
  6023                           
  6024                           ; 4 bytes @ 0x0
  6025  0070                     	ds	1
  6026  0071                     ??_LCDWrite:	
  6027                           
  6028                           ; 1 bytes @ 0x1
  6029  0071                     	ds	1
  6030  0072                     ??_PWM6_LoadDutyValue:	
  6031  0072                     ??_PWM7_LoadDutyValue:	
  6032                           ; 1 bytes @ 0x2
  6033                           
  6034  0072                     LCDWrite@data_or_command:	
  6035                           ; 1 bytes @ 0x2
  6036                           
  6037  0072                     ___wmul@multiplicand:	
  6038                           ; 1 bytes @ 0x2
  6039                           
  6040  0072                     ___awdiv@dividend:	
  6041                           ; 2 bytes @ 0x2
  6042                           
  6043  0072                     ___lwmod@dividend:	
  6044                           ; 2 bytes @ 0x2
  6045                           
  6046                           
  6047                           ; 2 bytes @ 0x2
  6048  0072                     	ds	1
  6049  0073                     ??_ADCRead:	
  6050  0073                     ADCRead@channel:	
  6051                           ; 1 bytes @ 0x3
  6052                           
  6053  0073                     LCDWrite@d:	
  6054                           ; 1 bytes @ 0x3
  6055                           
  6056  0073                     ___ftpack@exp:	
  6057                           ; 1 bytes @ 0x3
  6058                           
  6059  0073                     frexp@eptr:	
  6060                           ; 1 bytes @ 0x3
  6061                           
  6062  0073                     ___ftge@ff2:	
  6063                           ; 1 bytes @ 0x3
  6064                           
  6065                           
  6066                           ; 3 bytes @ 0x3
  6067  0073                     	ds	1
  6068  0074                     ??_frexp:	
  6069  0074                     ??_readButton:	
  6070                           ; 1 bytes @ 0x4
  6071                           
  6072  0074                     ??___wmul:	
  6073                           ; 1 bytes @ 0x4
  6074                           
  6075  0074                     ??___awdiv:	
  6076                           ; 1 bytes @ 0x4
  6077                           
  6078  0074                     ??___lwmod:	
  6079                           ; 1 bytes @ 0x4
  6080                           
  6081  0074                     LCDWrite@i:	
  6082                           ; 1 bytes @ 0x4
  6083                           
  6084  0074                     ___ftpack@sign:	
  6085                           ; 1 bytes @ 0x4
  6086                           
  6087  0074                     ___wmul@product:	
  6088                           ; 1 bytes @ 0x4
  6089                           
  6090  0074                     ___aldiv@dividend:	
  6091                           ; 2 bytes @ 0x4
  6092                           
  6093                           
  6094                           ; 4 bytes @ 0x4
  6095  0074                     	ds	1
  6096  0075                     ??___ftpack:	
  6097  0075                     ?_gotoXY:	
  6098                           ; 1 bytes @ 0x5
  6099                           
  6100  0075                     ??_LCDInit:	
  6101                           ; 1 bytes @ 0x5
  6102                           
  6103  0075                     gotoXY@y:	
  6104                           ; 1 bytes @ 0x5
  6105                           
  6106  0075                     ___awdiv@counter:	
  6107                           ; 1 bytes @ 0x5
  6108                           
  6109  0075                     ___lwmod@counter:	
  6110                           ; 1 bytes @ 0x5
  6111                           
  6112                           
  6113                           ; 1 bytes @ 0x5
  6114  0075                     	ds	1
  6115  0076                     ??_gotoXY:	
  6116  0076                     ??_LCDWriteCharacter:	
  6117                           ; 1 bytes @ 0x6
  6118                           
  6119  0076                     ??___ftge:	
  6120                           ; 1 bytes @ 0x6
  6121                           
  6122  0076                     ___awdiv@sign:	
  6123                           ; 1 bytes @ 0x6
  6124                           
  6125                           
  6126                           ; 1 bytes @ 0x6
  6127  0076                     	ds	1
  6128  0077                     gotoXY@x:	
  6129  0077                     ___awdiv@quotient:	
  6130                           ; 1 bytes @ 0x7
  6131                           
  6132                           
  6133                           ; 2 bytes @ 0x7
  6134  0077                     	ds	1
  6135  0078                     ??_LCDClear:	
  6136  0078                     ??___aldiv:	
  6137                           ; 1 bytes @ 0x8
  6138                           
  6139  0078                     ?___awtoft:	
  6140                           ; 1 bytes @ 0x8
  6141                           
  6142  0078                     ___awtoft@c:	
  6143                           ; 3 bytes @ 0x8
  6144                           
  6145                           
  6146                           ; 2 bytes @ 0x8
  6147  0078                     	ds	1
  6148  0079                     LCDWriteCharacter@character:	
  6149  0079                     readIAnalog@analog_channel:	
  6150                           ; 1 bytes @ 0x9
  6151                           
  6152  0079                     LCDClear@index:	
  6153                           ; 2 bytes @ 0x9
  6154                           
  6155                           
  6156                           ; 2 bytes @ 0x9
  6157  0079                     	ds	1
  6158  007A                     LCDWriteCharacter@base:	
  6159                           
  6160                           ; 2 bytes @ 0xA
  6161  007A                     	ds	1
  6162  007B                     ??___awtoft:	
  6163  007B                     readIAnalog@value:	
  6164                           ; 1 bytes @ 0xB
  6165                           
  6166                           
  6167                           ; 2 bytes @ 0xB
  6168  007B                     	ds	1
  6169  007C                     ?_LCDWriteString:	
  6170  007C                     LCDWriteString@characters:	
  6171                           ; 1 bytes @ 0xC
  6172                           
  6173                           
  6174                           ; 2 bytes @ 0xC
  6175  007C                     	ds	1
  6176  007D                     ___awtoft@sign:	
  6177                           
  6178                           ; 1 bytes @ 0xD
  6179  007D                     	ds	1
  6180  007E                     ??_eval_poly:	
  6181  007E                     ??_tempCalc:	
  6182                           ; 1 bytes @ 0xE
  6183                           
  6184  007E                     ??___ftsub:	
  6185                           ; 1 bytes @ 0xE
  6186                           
  6187                           
  6188                           	psect	cstackBANK0
  6189  0020                     __pcstackBANK0:	
  6190                           ; 1 bytes @ 0xE
  6191                           
  6192  0020                     ??_LCDWriteString:	
  6193  0020                     ?_LCDWriteInt:	
  6194                           ; 1 bytes @ 0x0
  6195                           
  6196  0020                     ?___ftdiv:	
  6197                           ; 1 bytes @ 0x0
  6198                           
  6199  0020                     ?___ftmul:	
  6200                           ; 3 bytes @ 0x0
  6201                           
  6202  0020                     ___aldiv@counter:	
  6203                           ; 3 bytes @ 0x0
  6204                           
  6205  0020                     LCDWriteInt@value:	
  6206                           ; 1 bytes @ 0x0
  6207                           
  6208  0020                     ___ftdiv@f2:	
  6209                           ; 2 bytes @ 0x0
  6210                           
  6211  0020                     ___ftmul@f1:	
  6212                           ; 3 bytes @ 0x0
  6213                           
  6214                           
  6215                           ; 3 bytes @ 0x0
  6216  0020                     	ds	1
  6217  0021                     ___aldiv@sign:	
  6218                           
  6219                           ; 1 bytes @ 0x1
  6220  0021                     	ds	1
  6221  0022                     LCDWriteInt@fieldLength:	
  6222  0022                     ___aldiv@quotient:	
  6223                           ; 1 bytes @ 0x2
  6224                           
  6225                           
  6226                           ; 4 bytes @ 0x2
  6227  0022                     	ds	1
  6228  0023                     LCDWriteInt@numPlaces:	
  6229  0023                     ___ftdiv@f1:	
  6230                           ; 1 bytes @ 0x3
  6231                           
  6232  0023                     ___ftmul@f2:	
  6233                           ; 3 bytes @ 0x3
  6234                           
  6235                           
  6236                           ; 3 bytes @ 0x3
  6237  0023                     	ds	1
  6238  0024                     LCDWriteInt@sign:	
  6239                           
  6240                           ; 1 bytes @ 0x4
  6241  0024                     	ds	1
  6242  0025                     ??_LCDWriteInt:	
  6243                           
  6244                           ; 1 bytes @ 0x5
  6245  0025                     	ds	1
  6246  0026                     ??___ftdiv:	
  6247  0026                     ??___ftmul:	
  6248                           ; 1 bytes @ 0x6
  6249                           
  6250  0026                     ?_readIAnalog:	
  6251                           ; 1 bytes @ 0x6
  6252                           
  6253  0026                     readIAnalog@channel:	
  6254                           ; 2 bytes @ 0x6
  6255                           
  6256                           
  6257                           ; 2 bytes @ 0x6
  6258  0026                     	ds	2
  6259  0028                     ??_readIAnalog:	
  6260                           
  6261                           ; 1 bytes @ 0x8
  6262  0028                     	ds	1
  6263  0029                     LCDWriteInt@str:	
  6264                           
  6265                           ; 5 bytes @ 0x9
  6266  0029                     	ds	1
  6267  002A                     ___ftdiv@cntr:	
  6268  002A                     ___ftmul@exp:	
  6269                           ; 1 bytes @ 0xA
  6270                           
  6271                           
  6272                           ; 1 bytes @ 0xA
  6273  002A                     	ds	1
  6274  002B                     ___ftdiv@f3:	
  6275  002B                     ___ftmul@f3_as_product:	
  6276                           ; 3 bytes @ 0xB
  6277                           
  6278                           
  6279                           ; 3 bytes @ 0xB
  6280  002B                     	ds	3
  6281  002E                     LCDWriteInt@j:	
  6282  002E                     ___ftdiv@exp:	
  6283                           ; 1 bytes @ 0xE
  6284                           
  6285  002E                     ___ftmul@cntr:	
  6286                           ; 1 bytes @ 0xE
  6287                           
  6288                           
  6289                           ; 1 bytes @ 0xE
  6290  002E                     	ds	1
  6291  002F                     LCDWriteInt@i:	
  6292  002F                     ___ftdiv@sign:	
  6293                           ; 1 bytes @ 0xF
  6294                           
  6295  002F                     ___ftmul@sign:	
  6296                           ; 1 bytes @ 0xF
  6297                           
  6298                           
  6299                           ; 1 bytes @ 0xF
  6300  002F                     	ds	1
  6301  0030                     ?___ftadd:	
  6302  0030                     ?___fttol:	
  6303                           ; 3 bytes @ 0x10
  6304                           
  6305  0030                     ___ftadd@f1:	
  6306                           ; 4 bytes @ 0x10
  6307                           
  6308  0030                     ___fttol@f1:	
  6309                           ; 3 bytes @ 0x10
  6310                           
  6311                           
  6312                           ; 3 bytes @ 0x10
  6313  0030                     	ds	3
  6314  0033                     ___ftadd@f2:	
  6315                           
  6316                           ; 3 bytes @ 0x13
  6317  0033                     	ds	1
  6318  0034                     ??___fttol:	
  6319                           
  6320                           ; 1 bytes @ 0x14
  6321  0034                     	ds	2
  6322  0036                     ??___ftadd:	
  6323                           
  6324                           ; 1 bytes @ 0x16
  6325  0036                     	ds	2
  6326  0038                     ___fttol@sign1:	
  6327                           
  6328                           ; 1 bytes @ 0x18
  6329  0038                     	ds	1
  6330  0039                     ___fttol@lval:	
  6331                           
  6332                           ; 4 bytes @ 0x19
  6333  0039                     	ds	1
  6334  003A                     ___ftadd@sign:	
  6335                           
  6336                           ; 1 bytes @ 0x1A
  6337  003A                     	ds	1
  6338  003B                     ___ftadd@exp2:	
  6339                           
  6340                           ; 1 bytes @ 0x1B
  6341  003B                     	ds	1
  6342  003C                     ___ftadd@exp1:	
  6343                           
  6344                           ; 1 bytes @ 0x1C
  6345  003C                     	ds	1
  6346  003D                     ?_eval_poly:	
  6347  003D                     ?___ftsub:	
  6348                           ; 3 bytes @ 0x1D
  6349                           
  6350  003D                     ___fttol@exp1:	
  6351                           ; 3 bytes @ 0x1D
  6352                           
  6353  003D                     ___ftsub@f2:	
  6354                           ; 1 bytes @ 0x1D
  6355                           
  6356  003D                     eval_poly@x:	
  6357                           ; 3 bytes @ 0x1D
  6358                           
  6359                           
  6360                           ; 3 bytes @ 0x1D
  6361  003D                     	ds	1
  6362  003E                     ??_calculateCurrent0:	
  6363  003E                     ??_calculateCurrent1:	
  6364                           ; 1 bytes @ 0x1E
  6365                           
  6366  003E                     ??_calculateCurrent2:	
  6367                           ; 1 bytes @ 0x1E
  6368                           
  6369  003E                     ??_calculateCurrent3:	
  6370                           ; 1 bytes @ 0x1E
  6371                           
  6372  003E                     ??_Init_Battery_State_Machine:	
  6373                           ; 1 bytes @ 0x1E
  6374                           
  6375  003E                     ??_Battery_State_Machine:	
  6376                           ; 1 bytes @ 0x1E
  6377                           
  6378  003E                     ??_cc_cv_mode:	
  6379                           ; 1 bytes @ 0x1E
  6380                           
  6381                           
  6382                           ; 1 bytes @ 0x1E
  6383  003E                     	ds	2
  6384  0040                     eval_poly@d:	
  6385  0040                     ___ftsub@f1:	
  6386                           ; 2 bytes @ 0x20
  6387                           
  6388                           
  6389                           ; 3 bytes @ 0x20
  6390  0040                     	ds	2
  6391  0042                     Init_Battery_State_Machine@z:	
  6392  0042                     eval_poly@n:	
  6393                           ; 1 bytes @ 0x22
  6394                           
  6395                           
  6396                           ; 2 bytes @ 0x22
  6397  0042                     	ds	1
  6398  0043                     ??_SYSTEM_Initialize:	
  6399  0043                     Battery_State_Machine@z:	
  6400                           ; 1 bytes @ 0x23
  6401                           
  6402                           
  6403                           ; 1 bytes @ 0x23
  6404  0043                     	ds	1
  6405  0044                     eval_poly@res:	
  6406                           
  6407                           ; 3 bytes @ 0x24
  6408  0044                     	ds	1
  6409  0045                     cc_cv_mode@z:	
  6410                           
  6411                           ; 1 bytes @ 0x25
  6412  0045                     	ds	2
  6413  0047                     ?_log:	
  6414  0047                     log@x:	
  6415                           ; 3 bytes @ 0x27
  6416                           
  6417                           
  6418                           ; 3 bytes @ 0x27
  6419  0047                     	ds	3
  6420  004A                     ??_log:	
  6421                           
  6422                           ; 1 bytes @ 0x2A
  6423  004A                     	ds	1
  6424  004B                     log@exponent:	
  6425                           
  6426                           ; 2 bytes @ 0x2B
  6427  004B                     	ds	2
  6428  004D                     ?_tempCalc:	
  6429  004D                     tempCalc@analogValue:	
  6430                           ; 2 bytes @ 0x2D
  6431                           
  6432                           
  6433                           ; 2 bytes @ 0x2D
  6434  004D                     	ds	2
  6435  004F                     tempCalc@R:	
  6436                           
  6437                           ; 3 bytes @ 0x2F
  6438  004F                     	ds	3
  6439  0052                     _tempCalc$1187:	
  6440                           
  6441                           ; 3 bytes @ 0x32
  6442  0052                     	ds	3
  6443  0055                     tempCalc@steinhart:	
  6444                           
  6445                           ; 3 bytes @ 0x35
  6446  0055                     	ds	3
  6447  0058                     ??_main:	
  6448                           
  6449                           ; 1 bytes @ 0x38
  6450  0058                     	ds	2
  6451  005A                     main@efficiency:	
  6452                           
  6453                           ; 3 bytes @ 0x3A
  6454  005A                     	ds	3
  6455  005D                     main@IOutTotal:	
  6456                           
  6457                           ; 2 bytes @ 0x3D
  6458  005D                     	ds	2
  6459  005F                     main@faultCount:	
  6460                           
  6461                           ; 2 bytes @ 0x3F
  6462  005F                     	ds	2
  6463  0061                     main@faultNotReset:	
  6464                           
  6465                           ; 2 bytes @ 0x41
  6466  0061                     	ds	2
  6467  0063                     main@slowLoop:	
  6468                           
  6469                           ; 1 bytes @ 0x43
  6470  0063                     	ds	1
  6471  0064                     main@displayRefresh:	
  6472                           
  6473                           ; 1 bytes @ 0x44
  6474  0064                     	ds	1
  6475  0065                     main@MPPT0:	
  6476                           
  6477                           ; 2 bytes @ 0x45
  6478  0065                     	ds	2
  6479  0067                     main@MPPT1:	
  6480                           
  6481                           ; 2 bytes @ 0x47
  6482  0067                     	ds	2
  6483  0069                     main@menuButton:	
  6484                           
  6485                           ; 1 bytes @ 0x49
  6486  0069                     	ds	1
  6487  006A                     main@j:	
  6488                           
  6489                           ; 1 bytes @ 0x4A
  6490  006A                     	ds	1
  6491  006B                     main@dutyCycle6:	
  6492                           
  6493                           ; 2 bytes @ 0x4B
  6494  006B                     	ds	2
  6495  006D                     main@dutyCycle7:	
  6496                           
  6497                           ; 2 bytes @ 0x4D
  6498  006D                     	ds	2
  6499                           
  6500                           	psect	maintext
  6501  02C5                     __pmaintext:	
  6502 ;;
  6503 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  6504 ;;
  6505 ;; *************** function _main *****************
  6506 ;; Defined at:
  6507 ;;		line 42 in file "main.c"
  6508 ;; Parameters:    Size  Location     Type
  6509 ;;		None
  6510 ;; Auto vars:     Size  Location     Type
  6511 ;;  efficiency      3   58[BANK0 ] float 
  6512 ;;  dutyCycle7      2   77[BANK0 ] unsigned int 
  6513 ;;  dutyCycle6      2   75[BANK0 ] unsigned int 
  6514 ;;  MPPT1           2   71[BANK0 ] int 
  6515 ;;  MPPT0           2   69[BANK0 ] int 
  6516 ;;  faultNotRese    2   65[BANK0 ] unsigned int 
  6517 ;;  faultCount      2   63[BANK0 ] unsigned int 
  6518 ;;  IOutTotal       2   61[BANK0 ] int 
  6519 ;;  j               1   74[BANK0 ] unsigned char 
  6520 ;;  menuButton      1   73[BANK0 ] unsigned char 
  6521 ;;  displayRefre    1   68[BANK0 ] unsigned char 
  6522 ;;  slowLoop        1   67[BANK0 ] unsigned char 
  6523 ;; Return value:  Size  Location     Type
  6524 ;;                  1    wreg      void 
  6525 ;; Registers used:
  6526 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6527 ;; Tracked objects:
  6528 ;;		On entry : B1F/0
  6529 ;;		On exit  : 0/0
  6530 ;;		Unchanged: 0/0
  6531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6533 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6534 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6535 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6536 ;;Total ram usage:       23 bytes
  6537 ;; Hardware stack levels required when called:    5
  6538 ;; This function calls:
  6539 ;;		_ADCRead
  6540 ;;		_Battery_State_Machine
  6541 ;;		_LCDClear
  6542 ;;		_LCDInit
  6543 ;;		_LCDWriteCharacter
  6544 ;;		_LCDWriteInt
  6545 ;;		_LCDWriteString
  6546 ;;		_PWM6_LoadDutyValue
  6547 ;;		_PWM7_LoadDutyValue
  6548 ;;		_SYSTEM_Initialize
  6549 ;;		___awtoft
  6550 ;;		___ftdiv
  6551 ;;		___fttol
  6552 ;;		_calculateCurrent0
  6553 ;;		_calculateCurrent1
  6554 ;;		_calculateCurrent2
  6555 ;;		_calculateCurrent3
  6556 ;;		_cc_cv_mode
  6557 ;;		_gotoXY
  6558 ;;		_readButton
  6559 ;;		_readIAnalog
  6560 ;;		_tempCalc
  6561 ;; This function is called by:
  6562 ;;		Startup code after reset
  6563 ;; This function uses a non-reentrant model
  6564 ;;
  6565                           
  6566                           
  6567                           ;psect for function _main
  6568  02C5                     _main:	
  6569                           
  6570                           ;main.c: 44: int16_t MPPT0 = 1525;
  6571                           
  6572                           ;incstack = 0
  6573                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6574  02C5  30F5               	movlw	245
  6575  02C6  0020               	movlb	0	; select bank0
  6576  02C7  00E5               	movwf	main@MPPT0
  6577  02C8  3005               	movlw	5
  6578  02C9  00E6               	movwf	main@MPPT0+1
  6579                           
  6580                           ;main.c: 45: int16_t MPPT1 = 1525;
  6581  02CA  30F5               	movlw	245
  6582  02CB  00E7               	movwf	main@MPPT1
  6583  02CC  3005               	movlw	5
  6584  02CD  00E8               	movwf	main@MPPT1+1
  6585                           
  6586                           ;main.c: 47: uint16_t dutyCycle6 = 1023;
  6587  02CE  30FF               	movlw	255
  6588  02CF  00EB               	movwf	main@dutyCycle6
  6589  02D0  3003               	movlw	3
  6590  02D1  00EC               	movwf	main@dutyCycle6+1
  6591                           
  6592                           ;main.c: 48: uint16_t dutyCycle7 = 1023;
  6593  02D2  30FF               	movlw	255
  6594  02D3  00ED               	movwf	main@dutyCycle7
  6595  02D4  3003               	movlw	3
  6596  02D5  00EE               	movwf	main@dutyCycle7+1
  6597                           
  6598                           ;main.c: 50: int16_t IOutTotal = 0;
  6599  02D6  01DD               	clrf	main@IOutTotal
  6600  02D7  01DE               	clrf	main@IOutTotal+1
  6601                           
  6602                           ;main.c: 51: uint8_t j = 0;
  6603  02D8  01EA               	clrf	main@j
  6604                           
  6605                           ;main.c: 52: uint8_t slowLoop = 200;
  6606  02D9  30C8               	movlw	200
  6607  02DA  00D8               	movwf	??_main
  6608  02DB  0858               	movf	??_main,w
  6609  02DC  00E3               	movwf	main@slowLoop
  6610                           
  6611                           ;main.c: 53: uint8_t displayRefresh = 0;
  6612  02DD  01E4               	clrf	main@displayRefresh
  6613                           
  6614                           ;main.c: 54: float efficiency = 0;
  6615  02DE  3000               	movlw	0
  6616  02DF  00DA               	movwf	main@efficiency
  6617  02E0  3000               	movlw	0
  6618  02E1  00DB               	movwf	main@efficiency+1
  6619  02E2  3000               	movlw	0
  6620  02E3  00DC               	movwf	main@efficiency+2
  6621                           
  6622                           ;main.c: 55: extern int8_t Imode[2];
  6623                           ;main.c: 56: extern int16_t Vref[2];
  6624                           ;main.c: 57: extern int16_t Iref[2];
  6625                           ;main.c: 58: uint8_t menuButton = 0;
  6626  02E4  01E9               	clrf	main@menuButton
  6627                           
  6628                           ;main.c: 59: uint16_t faultCount = 0;
  6629  02E5  01DF               	clrf	main@faultCount
  6630  02E6  01E0               	clrf	main@faultCount+1
  6631                           
  6632                           ;main.c: 60: uint16_t faultNotReset = 0;
  6633  02E7  01E1               	clrf	main@faultNotReset
  6634  02E8  01E2               	clrf	main@faultNotReset+1
  6635                           
  6636                           ;main.c: 61: extern int8_t VHoldMode[2];
  6637                           ;main.c: 62: extern uint8_t batteryState[2];
  6638                           ;main.c: 64: extern uint16_t IminCount[2];
  6639                           ;main.c: 67: SYSTEM_Initialize();
  6640  02E9  3194  24B0  3182   	fcall	_SYSTEM_Initialize
  6641                           
  6642                           ;main.c: 69: LCDClear();
  6643  02EC  3194  2418  3182   	fcall	_LCDClear
  6644  02EF                     l3110:	
  6645                           ;main.c: 71: void calculateCurrent0(void);
  6646                           ;main.c: 72: void calculateCurrent1(void);
  6647                           ;main.c: 73: void calculateCurrent2(void);
  6648                           ;main.c: 74: void calculateCurrent3(void);
  6649                           ;main.c: 88: while (1)
  6650                           
  6651                           
  6652                           ;main.c: 89: {
  6653                           ;main.c: 90: if(!(RB2))
  6654  02EF  0020               	movlb	0	; select bank0
  6655  02F0  190D               	btfsc	13,2	;volatile
  6656  02F1  2B02               	goto	l3118
  6657                           
  6658                           ;main.c: 91: {
  6659                           ;main.c: 92: LATA5=0;
  6660  02F2  1296               	bcf	22,5	;volatile
  6661                           
  6662                           ;main.c: 93: _delay((unsigned long)((400)*(32000000/4000000.0)));
  6663  02F3  3005               	movlw	5
  6664  02F4  0020               	movlb	0	; select bank0
  6665  02F5  00D8               	movwf	??_main
  6666  02F6  3026               	movlw	38
  6667  02F7                     u3947:	
  6668  02F7  0B89               	decfsz	9,f
  6669  02F8  2AF7               	goto	u3947
  6670  02F9  0BD8               	decfsz	??_main,f
  6671  02FA  2AF7               	goto	u3947
  6672  02FB  0000               	nop
  6673                           
  6674                           ;main.c: 94: faultCount+=1;
  6675  02FC  3001               	movlw	1
  6676  02FD  0020               	movlb	0	; select bank0
  6677  02FE  07DF               	addwf	main@faultCount,f
  6678  02FF  3000               	movlw	0
  6679  0300  3DE0               	addwfc	main@faultCount+1,f
  6680                           
  6681                           ;main.c: 95: LATA5=1;
  6682  0301  1696               	bsf	22,5	;volatile
  6683  0302                     l3118:	
  6684                           
  6685                           ;main.c: 96: }
  6686                           ;main.c: 97: for(j=0;j<4;j++) Ianalogs[j]=readIAnalog(j);
  6687  0302  01EA               	clrf	main@j
  6688  0303  3004               	movlw	4
  6689  0304  026A               	subwf	main@j,w
  6690  0305  1803               	btfsc	3,0
  6691  0306  2B22               	goto	l3130
  6692  0307                     l3124:	
  6693  0307  086A               	movf	main@j,w
  6694  0308  00D8               	movwf	??_main
  6695  0309  01D9               	clrf	??_main+1
  6696  030A  0858               	movf	??_main,w
  6697  030B  00A6               	movwf	readIAnalog@channel
  6698  030C  0859               	movf	??_main+1,w
  6699  030D  00A7               	movwf	readIAnalog@channel+1
  6700  030E  318D  2565  3182   	fcall	_readIAnalog
  6701  0311  0020               	movlb	0	; select bank0
  6702  0312  356A               	lslf	main@j,w
  6703  0313  3EA0               	addlw	(low (_Ianalogs| 0))& (0+255)
  6704  0314  0086               	movwf	6
  6705  0315  0187               	clrf	7
  6706  0316  0826               	movf	?_readIAnalog,w
  6707  0317  3FC0               	movwi [0]fsr1
  6708  0318  0827               	movf	?_readIAnalog+1,w
  6709  0319  3FC1               	movwi [1]fsr1
  6710  031A  3001               	movlw	1
  6711  031B  00D8               	movwf	??_main
  6712  031C  0858               	movf	??_main,w
  6713  031D  07EA               	addwf	main@j,f
  6714  031E  3004               	movlw	4
  6715  031F  026A               	subwf	main@j,w
  6716  0320  1C03               	skipc
  6717  0321  2B07               	goto	l3124
  6718  0322                     l3130:	
  6719                           
  6720                           ;main.c: 99: Vanalogs[0]=ADCRead(21);
  6721  0322  3015               	movlw	21
  6722  0323  3193  233A  3182   	fcall	_ADCRead
  6723  0326  0871               	movf	?_ADCRead+1,w
  6724  0327  0021               	movlb	1	; select bank1
  6725  0328  00A9               	movwf	(_Vanalogs+1)^(0+128)
  6726  0329  0870               	movf	?_ADCRead,w
  6727  032A  00A8               	movwf	_Vanalogs^(0+128)
  6728                           
  6729                           ;main.c: 101: Vanalogs[1]=ADCRead(17);
  6730  032B  3011               	movlw	17
  6731  032C  3193  233A  3182   	fcall	_ADCRead
  6732  032F  0871               	movf	?_ADCRead+1,w
  6733  0330  0021               	movlb	1	; select bank1
  6734  0331  00AB               	movwf	((_Vanalogs+1)^(0+128)+2)
  6735  0332  0870               	movf	?_ADCRead,w
  6736  0333  00AA               	movwf	(_Vanalogs^(0+128)+2)
  6737                           
  6738                           ;main.c: 103: Vanalogs[2]=ADCRead(23);
  6739  0334  3017               	movlw	23
  6740  0335  3193  233A  3182   	fcall	_ADCRead
  6741  0338  0871               	movf	?_ADCRead+1,w
  6742  0339  0021               	movlb	1	; select bank1
  6743  033A  00AD               	movwf	((_Vanalogs+1)^(0+128)+4)
  6744  033B  0870               	movf	?_ADCRead,w
  6745  033C  00AC               	movwf	(_Vanalogs^(0+128)+4)
  6746                           
  6747                           ;main.c: 105: Vanalogs[3]=ADCRead(19);
  6748  033D  3013               	movlw	19
  6749  033E  3193  233A  3182   	fcall	_ADCRead
  6750  0341  0871               	movf	?_ADCRead+1,w
  6751  0342  0021               	movlb	1	; select bank1
  6752  0343  00AF               	movwf	((_Vanalogs+1)^(0+128)+6)
  6753  0344  0870               	movf	?_ADCRead,w
  6754  0345  00AE               	movwf	(_Vanalogs^(0+128)+6)
  6755                           
  6756                           ;main.c: 107: if(!(RB2))faultNotReset+=1;
  6757  0346  0020               	movlb	0	; select bank0
  6758  0347  190D               	btfsc	13,2	;volatile
  6759  0348  2B4D               	goto	l3136
  6760  0349  3001               	movlw	1
  6761  034A  07E1               	addwf	main@faultNotReset,f
  6762  034B  3000               	movlw	0
  6763  034C  3DE2               	addwfc	main@faultNotReset+1,f
  6764  034D                     l3136:	
  6765                           
  6766                           ;main.c: 109: voltage[0]=(int16_t)(Vanalogs[0]/.5448);
  6767  034D  0021               	movlb	1	; select bank1
  6768  034E  0829               	movf	(_Vanalogs+1)^(0+128),w
  6769  034F  00F9               	movwf	___awtoft@c+1
  6770  0350  0828               	movf	_Vanalogs^(0+128),w
  6771  0351  00F8               	movwf	___awtoft@c
  6772  0352  3193  23D3  3182   	fcall	___awtoft
  6773  0355  0878               	movf	?___awtoft,w
  6774  0356  0020               	movlb	0	; select bank0
  6775  0357  00A3               	movwf	___ftdiv@f1
  6776  0358  0879               	movf	?___awtoft+1,w
  6777  0359  00A4               	movwf	___ftdiv@f1+1
  6778  035A  087A               	movf	?___awtoft+2,w
  6779  035B  00A5               	movwf	___ftdiv@f1+2
  6780  035C  3078               	movlw	120
  6781  035D  00A0               	movwf	___ftdiv@f2
  6782  035E  300B               	movlw	11
  6783  035F  00A1               	movwf	___ftdiv@f2+1
  6784  0360  303F               	movlw	63
  6785  0361  00A2               	movwf	___ftdiv@f2+2
  6786  0362  3189  21B8  3182   	fcall	___ftdiv
  6787  0365  0020               	movlb	0	; select bank0
  6788  0366  0820               	movf	?___ftdiv,w
  6789  0367  00B0               	movwf	___fttol@f1
  6790  0368  0821               	movf	?___ftdiv+1,w
  6791  0369  00B1               	movwf	___fttol@f1+1
  6792  036A  0822               	movf	?___ftdiv+2,w
  6793  036B  00B2               	movwf	___fttol@f1+2
  6794  036C  3189  2131  3182   	fcall	___fttol
  6795  036F  0020               	movlb	0	; select bank0
  6796  0370  0831               	movf	?___fttol+1,w
  6797  0371  0021               	movlb	1	; select bank1
  6798  0372  00B1               	movwf	(_voltage+1)^(0+128)
  6799  0373  0020               	movlb	0	; select bank0
  6800  0374  0830               	movf	?___fttol,w
  6801  0375  0021               	movlb	1	; select bank1
  6802  0376  00B0               	movwf	_voltage^(0+128)
  6803                           
  6804                           ;main.c: 112: voltage[1]=(int16_t)(Vanalogs[1]/.5448);
  6805  0377  082B               	movf	((_Vanalogs+1)^(0+128)+2),w
  6806  0378  00F9               	movwf	___awtoft@c+1
  6807  0379  082A               	movf	(_Vanalogs^(0+128)+2),w
  6808  037A  00F8               	movwf	___awtoft@c
  6809  037B  3193  23D3  3182   	fcall	___awtoft
  6810  037E  0878               	movf	?___awtoft,w
  6811  037F  0020               	movlb	0	; select bank0
  6812  0380  00A3               	movwf	___ftdiv@f1
  6813  0381  0879               	movf	?___awtoft+1,w
  6814  0382  00A4               	movwf	___ftdiv@f1+1
  6815  0383  087A               	movf	?___awtoft+2,w
  6816  0384  00A5               	movwf	___ftdiv@f1+2
  6817  0385  3078               	movlw	120
  6818  0386  00A0               	movwf	___ftdiv@f2
  6819  0387  300B               	movlw	11
  6820  0388  00A1               	movwf	___ftdiv@f2+1
  6821  0389  303F               	movlw	63
  6822  038A  00A2               	movwf	___ftdiv@f2+2
  6823  038B  3189  21B8  3182   	fcall	___ftdiv
  6824  038E  0020               	movlb	0	; select bank0
  6825  038F  0820               	movf	?___ftdiv,w
  6826  0390  00B0               	movwf	___fttol@f1
  6827  0391  0821               	movf	?___ftdiv+1,w
  6828  0392  00B1               	movwf	___fttol@f1+1
  6829  0393  0822               	movf	?___ftdiv+2,w
  6830  0394  00B2               	movwf	___fttol@f1+2
  6831  0395  3189  2131  3182   	fcall	___fttol
  6832  0398  0020               	movlb	0	; select bank0
  6833  0399  0831               	movf	?___fttol+1,w
  6834  039A  0021               	movlb	1	; select bank1
  6835  039B  00B3               	movwf	((_voltage+1)^(0+128)+2)
  6836  039C  0020               	movlb	0	; select bank0
  6837  039D  0830               	movf	?___fttol,w
  6838  039E  0021               	movlb	1	; select bank1
  6839  039F  00B2               	movwf	(_voltage^(0+128)+2)
  6840                           
  6841                           ;main.c: 114: voltage[2]=(int16_t)(Vanalogs[2]/.405775);
  6842  03A0  082D               	movf	((_Vanalogs+1)^(0+128)+4),w
  6843  03A1  00F9               	movwf	___awtoft@c+1
  6844  03A2  082C               	movf	(_Vanalogs^(0+128)+4),w
  6845  03A3  00F8               	movwf	___awtoft@c
  6846  03A4  3193  23D3  3182   	fcall	___awtoft
  6847  03A7  0878               	movf	?___awtoft,w
  6848  03A8  0020               	movlb	0	; select bank0
  6849  03A9  00A3               	movwf	___ftdiv@f1
  6850  03AA  0879               	movf	?___awtoft+1,w
  6851  03AB  00A4               	movwf	___ftdiv@f1+1
  6852  03AC  087A               	movf	?___awtoft+2,w
  6853  03AD  00A5               	movwf	___ftdiv@f1+2
  6854  03AE  30C2               	movlw	194
  6855  03AF  00A0               	movwf	___ftdiv@f2
  6856  03B0  30CF               	movlw	207
  6857  03B1  00A1               	movwf	___ftdiv@f2+1
  6858  03B2  303E               	movlw	62
  6859  03B3  00A2               	movwf	___ftdiv@f2+2
  6860  03B4  3189  21B8  3182   	fcall	___ftdiv
  6861  03B7  0020               	movlb	0	; select bank0
  6862  03B8  0820               	movf	?___ftdiv,w
  6863  03B9  00B0               	movwf	___fttol@f1
  6864  03BA  0821               	movf	?___ftdiv+1,w
  6865  03BB  00B1               	movwf	___fttol@f1+1
  6866  03BC  0822               	movf	?___ftdiv+2,w
  6867  03BD  00B2               	movwf	___fttol@f1+2
  6868  03BE  3189  2131  3182   	fcall	___fttol
  6869  03C1  0020               	movlb	0	; select bank0
  6870  03C2  0831               	movf	?___fttol+1,w
  6871  03C3  0021               	movlb	1	; select bank1
  6872  03C4  00B5               	movwf	((_voltage+1)^(0+128)+4)
  6873  03C5  0020               	movlb	0	; select bank0
  6874  03C6  0830               	movf	?___fttol,w
  6875  03C7  0021               	movlb	1	; select bank1
  6876  03C8  00B4               	movwf	(_voltage^(0+128)+4)
  6877                           
  6878                           ;main.c: 116: voltage[3]=(int16_t)(Vanalogs[3]/.406788);
  6879  03C9  082F               	movf	((_Vanalogs+1)^(0+128)+6),w
  6880  03CA  00F9               	movwf	___awtoft@c+1
  6881  03CB  082E               	movf	(_Vanalogs^(0+128)+6),w
  6882  03CC  00F8               	movwf	___awtoft@c
  6883  03CD  3193  23D3  3182   	fcall	___awtoft
  6884  03D0  0878               	movf	?___awtoft,w
  6885  03D1  0020               	movlb	0	; select bank0
  6886  03D2  00A3               	movwf	___ftdiv@f1
  6887  03D3  0879               	movf	?___awtoft+1,w
  6888  03D4  00A4               	movwf	___ftdiv@f1+1
  6889  03D5  087A               	movf	?___awtoft+2,w
  6890  03D6  00A5               	movwf	___ftdiv@f1+2
  6891  03D7  3047               	movlw	71
  6892  03D8  00A0               	movwf	___ftdiv@f2
  6893  03D9  30D0               	movlw	208
  6894  03DA  00A1               	movwf	___ftdiv@f2+1
  6895  03DB  303E               	movlw	62
  6896  03DC  00A2               	movwf	___ftdiv@f2+2
  6897  03DD  3189  21B8  3182   	fcall	___ftdiv
  6898  03E0  0020               	movlb	0	; select bank0
  6899  03E1  0820               	movf	?___ftdiv,w
  6900  03E2  00B0               	movwf	___fttol@f1
  6901  03E3  0821               	movf	?___ftdiv+1,w
  6902  03E4  00B1               	movwf	___fttol@f1+1
  6903  03E5  0822               	movf	?___ftdiv+2,w
  6904  03E6  00B2               	movwf	___fttol@f1+2
  6905  03E7  3189  2131  3182   	fcall	___fttol
  6906  03EA  0020               	movlb	0	; select bank0
  6907  03EB  0831               	movf	?___fttol+1,w
  6908  03EC  0021               	movlb	1	; select bank1
  6909  03ED  00B7               	movwf	((_voltage+1)^(0+128)+6)
  6910  03EE  0020               	movlb	0	; select bank0
  6911  03EF  0830               	movf	?___fttol,w
  6912  03F0  0021               	movlb	1	; select bank1
  6913  03F1  00B6               	movwf	(_voltage^(0+128)+6)
  6914                           
  6915                           ;main.c: 118: calculateCurrent0();
  6916  03F2  3195  2561  3182   	fcall	_calculateCurrent0
  6917                           
  6918                           ;main.c: 120: calculateCurrent1();
  6919  03F5  3195  25A6  3182   	fcall	_calculateCurrent1
  6920                           
  6921                           ;main.c: 122: calculateCurrent2();
  6922  03F8  3195  25EB  3182   	fcall	_calculateCurrent2
  6923                           
  6924                           ;main.c: 124: calculateCurrent3();
  6925  03FB  3180  200B  3182   	fcall	_calculateCurrent3
  6926                           
  6927                           ;main.c: 126: if(Imode[0])
  6928  03FE  0021               	movlb	1	; select bank1
  6929  03FF  0861               	movf	_Imode^(0+128),w
  6930  0400  1903               	btfsc	3,2
  6931  0401  2C20               	goto	l3166
  6932                           
  6933                           ;main.c: 127: {
  6934                           ;main.c: 128: if(voltage[2]<MPPT0)
  6935  0402  0835               	movf	((_voltage+1)^(0+128)+4),w
  6936  0403  3A80               	xorlw	128
  6937  0404  0020               	movlb	0	; select bank0
  6938  0405  00D8               	movwf	??_main
  6939  0406  0866               	movf	main@MPPT0+1,w
  6940  0407  3A80               	xorlw	128
  6941  0408  0258               	subwf	??_main,w
  6942  0409  1D03               	skipz
  6943  040A  2C0E               	goto	u3695
  6944  040B  0865               	movf	main@MPPT0,w
  6945  040C  0021               	movlb	1	; select bank1
  6946  040D  0234               	subwf	(_voltage^(0+128)+4),w
  6947  040E                     u3695:	
  6948  040E  1C03               	btfss	3,0
  6949  040F  2C31               	goto	L1
  6950                           
  6951                           ;main.c: 135: else if(voltage[2]>MPPT0)
  6952                           
  6953                           ;main.c: 133: }
  6954                           ;main.c: 134: }
  6955                           
  6956                           ;main.c: 131: {
  6957                           ;main.c: 132: dutyCycle6+=1;
  6958                           
  6959                           ;main.c: 129: {
  6960                           ;main.c: 130: if(dutyCycle6<1023)
  6961  0410  0020               	movlb	0	; select bank0
  6962  0411  0866               	movf	main@MPPT0+1,w
  6963  0412  3A80               	xorlw	128
  6964  0413  00D8               	movwf	??_main
  6965  0414  0021               	movlb	1	; select bank1
  6966  0415  0835               	movf	((_voltage+1)^(0+128)+4),w
  6967  0416  3A80               	xorlw	128
  6968  0417  0020               	movlb	0	; select bank0
  6969  0418  0258               	subwf	??_main,w
  6970  0419  1D03               	skipz
  6971  041A  2C4D               	goto	u3755
  6972  041B  0021               	movlb	1	; select bank1
  6973  041C  0834               	movf	(_voltage^(0+128)+4),w
  6974  041D  0020               	movlb	0	; select bank0
  6975  041E  0265               	subwf	main@MPPT0,w
  6976  041F  2C4D               	goto	u3755
  6977  0420                     l3166:	
  6978                           ;main.c: 143: }
  6979                           
  6980                           ;main.c: 140: }
  6981                           ;main.c: 141: }
  6982                           
  6983                           ;main.c: 138: {
  6984                           ;main.c: 139: dutyCycle6-=1;
  6985                           
  6986                           ;main.c: 136: {
  6987                           ;main.c: 137: if(dutyCycle6>0)
  6988                           
  6989                           
  6990                           ;main.c: 144: else
  6991                           ;main.c: 145: {
  6992                           ;main.c: 146: if(voltage[0]>(int16_t)Vref[0])
  6993  0420  0021               	movlb	1	; select bank1
  6994  0421  0846               	movf	(_Vref+1)^(0+128),w
  6995  0422  3A80               	xorlw	128
  6996  0423  0020               	movlb	0	; select bank0
  6997  0424  00D8               	movwf	??_main
  6998  0425  0021               	movlb	1	; select bank1
  6999  0426  0831               	movf	(_voltage+1)^(0+128),w
  7000  0427  3A80               	xorlw	128
  7001  0428  0020               	movlb	0	; select bank0
  7002  0429  0258               	subwf	??_main,w
  7003  042A  1D03               	skipz
  7004  042B  2C2F               	goto	u3735
  7005  042C  0021               	movlb	1	; select bank1
  7006  042D  0830               	movf	_voltage^(0+128),w
  7007  042E  0245               	subwf	_Vref^(0+128),w
  7008  042F                     u3735:	
  7009  042F  1803               	skipnc
  7010  0430  2C3E               	goto	l3172
  7011  0431                     L1:	
  7012                           
  7013                           ;main.c: 147: {
  7014                           ;main.c: 148: if(dutyCycle6<1023) dutyCycle6+=1;
  7015  0431  3003               	movlw	3
  7016  0432  0020               	movlb	0	; select bank0
  7017  0433  026C               	subwf	main@dutyCycle6+1,w
  7018  0434  30FF               	movlw	255
  7019  0435  1903               	skipnz
  7020  0436  026B               	subwf	main@dutyCycle6,w
  7021  0437  1803               	skipnc
  7022  0438  2C58               	goto	l3178
  7023  0439  3001               	movlw	1
  7024  043A  07EB               	addwf	main@dutyCycle6,f
  7025  043B  3000               	movlw	0
  7026  043C  3DEC               	addwfc	main@dutyCycle6+1,f
  7027                           
  7028                           ;main.c: 149: }
  7029  043D  2C58               	goto	l3178
  7030  043E                     l3172:	
  7031                           
  7032                           ;main.c: 150: else if(voltage[0]<(int16_t)Vref[0])
  7033  043E  0021               	movlb	1	; select bank1
  7034  043F  0831               	movf	(_voltage+1)^(0+128),w
  7035  0440  3A80               	xorlw	128
  7036  0441  0020               	movlb	0	; select bank0
  7037  0442  00D8               	movwf	??_main
  7038  0443  0021               	movlb	1	; select bank1
  7039  0444  0846               	movf	(_Vref+1)^(0+128),w
  7040  0445  3A80               	xorlw	128
  7041  0446  0020               	movlb	0	; select bank0
  7042  0447  0258               	subwf	??_main,w
  7043  0448  1D03               	skipz
  7044  0449  2C4D               	goto	u3755
  7045  044A  0021               	movlb	1	; select bank1
  7046  044B  0845               	movf	_Vref^(0+128),w
  7047  044C  0230               	subwf	_voltage^(0+128),w
  7048  044D                     u3755:	
  7049  044D  1803               	skipnc
  7050  044E  2C58               	goto	l3178
  7051                           
  7052                           ;main.c: 151: {
  7053                           ;main.c: 152: if(dutyCycle6>0) dutyCycle6-=1;;
  7054  044F  0020               	movlb	0	; select bank0
  7055  0450  086B               	movf	main@dutyCycle6,w
  7056  0451  046C               	iorwf	main@dutyCycle6+1,w
  7057  0452  1903               	btfsc	3,2
  7058  0453  2C58               	goto	l3178
  7059  0454  3001               	movlw	1
  7060  0455  02EB               	subwf	main@dutyCycle6,f
  7061  0456  3000               	movlw	0
  7062  0457  3BEC               	subwfb	main@dutyCycle6+1,f
  7063  0458                     l3178:	
  7064                           ;main.c: 153: }
  7065                           
  7066                           
  7067                           ;main.c: 155: }
  7068                           ;main.c: 157: if(Imode[1])
  7069  0458  0021               	movlb	1	; select bank1
  7070  0459  0862               	movf	(_Imode^(0+128)+1),w
  7071  045A  1903               	btfsc	3,2
  7072  045B  2C6B               	goto	l3190
  7073                           
  7074                           ;main.c: 158: {
  7075                           ;main.c: 159: if(voltage[3]<MPPT1)
  7076  045C  0837               	movf	((_voltage+1)^(0+128)+6),w
  7077  045D  3A80               	xorlw	128
  7078  045E  0020               	movlb	0	; select bank0
  7079  045F  00D8               	movwf	??_main
  7080  0460  0868               	movf	main@MPPT1+1,w
  7081  0461  3A80               	xorlw	128
  7082  0462  0258               	subwf	??_main,w
  7083  0463  1D03               	skipz
  7084  0464  2C68               	goto	u3785
  7085  0465  0867               	movf	main@MPPT1,w
  7086  0466  0021               	movlb	1	; select bank1
  7087  0467  0236               	subwf	(_voltage^(0+128)+6),w
  7088  0468                     u3785:	
  7089  0468  1C03               	btfss	3,0
  7090  0469  2C7C               	goto	L2
  7091                           
  7092                           ;main.c: 164: }
  7093                           ;main.c: 165: }
  7094                           
  7095                           ;main.c: 162: {
  7096                           ;main.c: 163: dutyCycle7+=1;
  7097                           
  7098                           ;main.c: 160: {
  7099                           ;main.c: 161: if(dutyCycle7<1023)
  7100  046A  2C9A               	goto	L3
  7101  046B                     l3190:	
  7102                           ;main.c: 169: }
  7103                           ;main.c: 170: }
  7104                           
  7105                           ;main.c: 167: {
  7106                           ;main.c: 168: dutyCycle7-=1;
  7107                           
  7108                           ;main.c: 166: else if(dutyCycle7>0)
  7109                           
  7110                           
  7111                           ;main.c: 171: else
  7112                           ;main.c: 172: {
  7113                           ;main.c: 173: if(voltage[1]>(int16_t)Vref[1])
  7114  046B  0021               	movlb	1	; select bank1
  7115  046C  0848               	movf	((_Vref+1)^(0+128)+2),w
  7116  046D  3A80               	xorlw	128
  7117  046E  0020               	movlb	0	; select bank0
  7118  046F  00D8               	movwf	??_main
  7119  0470  0021               	movlb	1	; select bank1
  7120  0471  0833               	movf	((_voltage+1)^(0+128)+2),w
  7121  0472  3A80               	xorlw	128
  7122  0473  0020               	movlb	0	; select bank0
  7123  0474  0258               	subwf	??_main,w
  7124  0475  1D03               	skipz
  7125  0476  2C7A               	goto	u3815
  7126  0477  0021               	movlb	1	; select bank1
  7127  0478  0832               	movf	(_voltage^(0+128)+2),w
  7128  0479  0247               	subwf	(_Vref^(0+128)+2),w
  7129  047A                     u3815:	
  7130  047A  1803               	skipnc
  7131  047B  2C89               	goto	l3196
  7132  047C                     L2:	
  7133                           
  7134                           ;main.c: 174: {
  7135                           ;main.c: 175: if(dutyCycle7<1023) dutyCycle7+=1;
  7136  047C  3003               	movlw	3
  7137  047D  0020               	movlb	0	; select bank0
  7138  047E  026E               	subwf	main@dutyCycle7+1,w
  7139  047F  30FF               	movlw	255
  7140  0480  1903               	skipnz
  7141  0481  026D               	subwf	main@dutyCycle7,w
  7142  0482  1803               	skipnc
  7143  0483  2CA3               	goto	l3202
  7144  0484  3001               	movlw	1
  7145  0485  07ED               	addwf	main@dutyCycle7,f
  7146  0486  3000               	movlw	0
  7147  0487  3DEE               	addwfc	main@dutyCycle7+1,f
  7148                           
  7149                           ;main.c: 176: }
  7150  0488  2CA3               	goto	l3202
  7151  0489                     l3196:	
  7152                           
  7153                           ;main.c: 177: else if(voltage[1]<(int16_t)Vref[1])
  7154  0489  0021               	movlb	1	; select bank1
  7155  048A  0833               	movf	((_voltage+1)^(0+128)+2),w
  7156  048B  3A80               	xorlw	128
  7157  048C  0020               	movlb	0	; select bank0
  7158  048D  00D8               	movwf	??_main
  7159  048E  0021               	movlb	1	; select bank1
  7160  048F  0848               	movf	((_Vref+1)^(0+128)+2),w
  7161  0490  3A80               	xorlw	128
  7162  0491  0020               	movlb	0	; select bank0
  7163  0492  0258               	subwf	??_main,w
  7164  0493  1D03               	skipz
  7165  0494  2C98               	goto	u3835
  7166  0495  0021               	movlb	1	; select bank1
  7167  0496  0847               	movf	(_Vref^(0+128)+2),w
  7168  0497  0232               	subwf	(_voltage^(0+128)+2),w
  7169  0498                     u3835:	
  7170  0498  1803               	skipnc
  7171  0499  2CA3               	goto	l3202
  7172  049A                     L3:	
  7173                           
  7174                           ;main.c: 178: {
  7175                           ;main.c: 179: if(dutyCycle7>0) dutyCycle7-=1;;
  7176  049A  0020               	movlb	0	; select bank0
  7177  049B  086D               	movf	main@dutyCycle7,w
  7178  049C  046E               	iorwf	main@dutyCycle7+1,w
  7179  049D  1903               	btfsc	3,2
  7180  049E  2CA3               	goto	l3202
  7181  049F  3001               	movlw	1
  7182  04A0  02ED               	subwf	main@dutyCycle7,f
  7183  04A1  3000               	movlw	0
  7184  04A2  3BEE               	subwfb	main@dutyCycle7+1,f
  7185  04A3                     l3202:	
  7186                           ;main.c: 180: }
  7187                           
  7188                           
  7189                           ;main.c: 182: }
  7190                           ;main.c: 184: slowLoop+=1;
  7191  04A3  3001               	movlw	1
  7192  04A4  0020               	movlb	0	; select bank0
  7193  04A5  00D8               	movwf	??_main
  7194  04A6  0858               	movf	??_main,w
  7195  04A7  07E3               	addwf	main@slowLoop,f
  7196                           
  7197                           ;main.c: 187: PWM6_LoadDutyValue(dutyCycle6);
  7198  04A8  086C               	movf	main@dutyCycle6+1,w
  7199  04A9  00F1               	movwf	PWM6_LoadDutyValue@dutyCycle6+1
  7200  04AA  086B               	movf	main@dutyCycle6,w
  7201  04AB  00F0               	movwf	PWM6_LoadDutyValue@dutyCycle6
  7202  04AC  3193  234F  3182   	fcall	_PWM6_LoadDutyValue
  7203                           
  7204                           ;main.c: 188: PWM7_LoadDutyValue(dutyCycle7);
  7205  04AF  0020               	movlb	0	; select bank0
  7206  04B0  086E               	movf	main@dutyCycle7+1,w
  7207  04B1  00F1               	movwf	PWM7_LoadDutyValue@dutyCycle7+1
  7208  04B2  086D               	movf	main@dutyCycle7,w
  7209  04B3  00F0               	movwf	PWM7_LoadDutyValue@dutyCycle7
  7210  04B4  3193  2365  3182   	fcall	_PWM7_LoadDutyValue
  7211                           
  7212                           ;main.c: 190: menuButton = readButton();
  7213  04B7  3188  202D  3182   	fcall	_readButton
  7214  04BA  0020               	movlb	0	; select bank0
  7215  04BB  00D8               	movwf	??_main
  7216  04BC  0858               	movf	??_main,w
  7217  04BD  00E9               	movwf	main@menuButton
  7218                           
  7219                           ;main.c: 191: if(menuButton == 2) if(MPPT1>1375)MPPT1-=1;
  7220  04BE  3002               	movlw	2
  7221  04BF  0669               	xorwf	main@menuButton,w
  7222  04C0  1D03               	btfss	3,2
  7223  04C1  2CD2               	goto	l3216
  7224  04C2  0868               	movf	main@MPPT1+1,w
  7225  04C3  3A80               	xorlw	128
  7226  04C4  00D8               	movwf	??_main
  7227  04C5  3085               	movlw	133
  7228  04C6  0258               	subwf	??_main,w
  7229  04C7  1D03               	skipz
  7230  04C8  2CCB               	goto	u3865
  7231  04C9  3060               	movlw	96
  7232  04CA  0267               	subwf	main@MPPT1,w
  7233  04CB                     u3865:	
  7234  04CB  1C03               	skipc
  7235  04CC  2CD2               	goto	l3216
  7236  04CD  30FF               	movlw	255
  7237  04CE  0020               	movlb	0	; select bank0
  7238  04CF  07E7               	addwf	main@MPPT1,f
  7239  04D0  30FF               	movlw	255
  7240  04D1  3DE8               	addwfc	main@MPPT1+1,f
  7241  04D2                     l3216:	
  7242                           
  7243                           ;main.c: 192: if(menuButton == 3)if(MPPT1<2200)MPPT1+=1;
  7244  04D2  3003               	movlw	3
  7245  04D3  0020               	movlb	0	; select bank0
  7246  04D4  0669               	xorwf	main@menuButton,w
  7247  04D5  1D03               	btfss	3,2
  7248  04D6  2CE7               	goto	l3222
  7249  04D7  0868               	movf	main@MPPT1+1,w
  7250  04D8  3A80               	xorlw	128
  7251  04D9  00D8               	movwf	??_main
  7252  04DA  3088               	movlw	136
  7253  04DB  0258               	subwf	??_main,w
  7254  04DC  1D03               	skipz
  7255  04DD  2CE0               	goto	u3885
  7256  04DE  3098               	movlw	152
  7257  04DF  0267               	subwf	main@MPPT1,w
  7258  04E0                     u3885:	
  7259  04E0  1803               	skipnc
  7260  04E1  2CE7               	goto	l3222
  7261  04E2  3001               	movlw	1
  7262  04E3  0020               	movlb	0	; select bank0
  7263  04E4  07E7               	addwf	main@MPPT1,f
  7264  04E5  3000               	movlw	0
  7265  04E6  3DE8               	addwfc	main@MPPT1+1,f
  7266  04E7                     l3222:	
  7267                           
  7268                           ;main.c: 193: if(menuButton == 1)LCDInit();
  7269  04E7  0020               	movlb	0	; select bank0
  7270  04E8  0369               	decf	main@menuButton,w
  7271  04E9  1D03               	btfss	3,2
  7272  04EA  2CEE               	goto	l3226
  7273  04EB  3194  2475  3182   	fcall	_LCDInit
  7274  04EE                     l3226:	
  7275                           
  7276                           ;main.c: 197: if(slowLoop>250)
  7277  04EE  30FB               	movlw	251
  7278  04EF  0020               	movlb	0	; select bank0
  7279  04F0  0263               	subwf	main@slowLoop,w
  7280  04F1  1C03               	skipc
  7281  04F2  2AEF               	goto	l3110
  7282                           
  7283                           ;main.c: 198: {
  7284                           ;main.c: 200: IOutTotal=current[0]+current[1];
  7285  04F3  0021               	movlb	1	; select bank1
  7286  04F4  0838               	movf	_current^(0+128),w
  7287  04F5  073A               	addwf	(_current^(0+128)+2),w
  7288  04F6  0020               	movlb	0	; select bank0
  7289  04F7  00DD               	movwf	main@IOutTotal
  7290  04F8  0021               	movlb	1	; select bank1
  7291  04F9  0839               	movf	(_current+1)^(0+128),w
  7292  04FA  3D3B               	addwfc	((_current+1)^(0+128)+2),w
  7293  04FB  0020               	movlb	0	; select bank0
  7294  04FC  00DE               	movwf	main@IOutTotal+1
  7295                           
  7296                           ;main.c: 220: ADREF = 0x00;
  7297  04FD  0021               	movlb	1	; select bank1
  7298  04FE  019A               	clrf	26	;volatile
  7299                           
  7300                           ;main.c: 221: batteryTemp=tempCalc(ADCRead(9));
  7301  04FF  3009               	movlw	9
  7302  0500  3193  233A  3182   	fcall	_ADCRead
  7303  0503  0871               	movf	?_ADCRead+1,w
  7304  0504  0020               	movlb	0	; select bank0
  7305  0505  00CE               	movwf	tempCalc@analogValue+1
  7306  0506  0870               	movf	?_ADCRead,w
  7307  0507  00CD               	movwf	tempCalc@analogValue
  7308  0508  318C  247E  3182   	fcall	_tempCalc
  7309  050B  0020               	movlb	0	; select bank0
  7310  050C  084E               	movf	?_tempCalc+1,w
  7311  050D  0021               	movlb	1	; select bank1
  7312  050E  00EE               	movwf	(_batteryTemp+1)^(0+128)
  7313  050F  0020               	movlb	0	; select bank0
  7314  0510  084D               	movf	?_tempCalc,w
  7315  0511  0021               	movlb	1	; select bank1
  7316  0512  00ED               	movwf	_batteryTemp^(0+128)
  7317                           
  7318                           ;main.c: 222: ADREF = 0x03;
  7319  0513  3003               	movlw	3
  7320  0514  009A               	movwf	26	;volatile
  7321                           
  7322                           ;main.c: 224: displayRefresh+=1;
  7323  0515  3001               	movlw	1
  7324  0516  0020               	movlb	0	; select bank0
  7325  0517  00D8               	movwf	??_main
  7326  0518  0858               	movf	??_main,w
  7327  0519  07E4               	addwf	main@displayRefresh,f
  7328                           
  7329                           ;main.c: 225: if(displayRefresh>80)
  7330  051A  3051               	movlw	81
  7331  051B  0264               	subwf	main@displayRefresh,w
  7332  051C  1C03               	skipc
  7333  051D  2D23               	goto	l3244
  7334                           
  7335                           ;main.c: 226: {
  7336                           ;main.c: 227: LCDClear();
  7337  051E  3194  2418  3182   	fcall	_LCDClear
  7338                           
  7339                           ;main.c: 228: displayRefresh=0;
  7340  0521  0020               	movlb	0	; select bank0
  7341  0522  01E4               	clrf	main@displayRefresh
  7342  0523                     l3244:	
  7343                           
  7344                           ;main.c: 230: }
  7345                           ;main.c: 231: Battery_State_Machine(0);
  7346  0523  3000               	movlw	0
  7347  0524  3181  2146  3182   	fcall	_Battery_State_Machine
  7348                           
  7349                           ;main.c: 232: Battery_State_Machine(1);
  7350  0527  3001               	movlw	1
  7351  0528  3181  2146  3182   	fcall	_Battery_State_Machine
  7352                           
  7353                           ;main.c: 235: { gotoXY(0,0); LCDWriteString("In:");};
  7354  052B  01F5               	clrf	gotoXY@y
  7355  052C  3000               	movlw	0
  7356  052D  3192  22FE  3182   	fcall	_gotoXY
  7357  0530  3025               	movlw	low (STR_1| (0+32768))
  7358  0531  00FC               	movwf	LCDWriteString@characters
  7359  0532  3098               	movlw	high (STR_1| (0+32768))
  7360  0533  00FD               	movwf	LCDWriteString@characters+1
  7361  0534  3193  2311  3182   	fcall	_LCDWriteString
  7362                           
  7363                           ;main.c: 236: { gotoXY(26,0); LCDWriteString("Out:");};
  7364  0537  01F5               	clrf	gotoXY@y
  7365  0538  301A               	movlw	26
  7366  0539  3192  22FE  3182   	fcall	_gotoXY
  7367  053C  3020               	movlw	low (STR_2| (0+32768))
  7368  053D  00FC               	movwf	LCDWriteString@characters
  7369  053E  3098               	movlw	high (STR_2| (0+32768))
  7370  053F  00FD               	movwf	LCDWriteString@characters+1
  7371  0540  3193  2311  3182   	fcall	_LCDWriteString
  7372                           
  7373                           ;main.c: 237: { gotoXY(52,0); LCDWriteString("Ref:");};
  7374  0543  01F5               	clrf	gotoXY@y
  7375  0544  3034               	movlw	52
  7376  0545  3192  22FE  3182   	fcall	_gotoXY
  7377  0548  301B               	movlw	low (STR_3| (0+32768))
  7378  0549  00FC               	movwf	LCDWriteString@characters
  7379  054A  3098               	movlw	high (STR_3| (0+32768))
  7380  054B  00FD               	movwf	LCDWriteString@characters+1
  7381  054C  3193  2311  3182   	fcall	_LCDWriteString
  7382                           
  7383                           ;main.c: 239: { gotoXY(0,1); LCDWriteInt(voltage[2],4, 2, 0);};
  7384  054F  01F5               	clrf	gotoXY@y
  7385  0550  0AF5               	incf	gotoXY@y,f
  7386  0551  3000               	movlw	0
  7387  0552  3192  22FE  3182   	fcall	_gotoXY
  7388  0555  0021               	movlb	1	; select bank1
  7389  0556  0835               	movf	((_voltage+1)^(0+128)+4),w
  7390  0557  0020               	movlb	0	; select bank0
  7391  0558  00A1               	movwf	LCDWriteInt@value+1
  7392  0559  0021               	movlb	1	; select bank1
  7393  055A  0834               	movf	(_voltage^(0+128)+4),w
  7394  055B  0020               	movlb	0	; select bank0
  7395  055C  00A0               	movwf	LCDWriteInt@value
  7396  055D  3004               	movlw	4
  7397  055E  00D8               	movwf	??_main
  7398  055F  0858               	movf	??_main,w
  7399  0560  00A2               	movwf	LCDWriteInt@fieldLength
  7400  0561  3002               	movlw	2
  7401  0562  00D9               	movwf	??_main+1
  7402  0563  0859               	movf	??_main+1,w
  7403  0564  00A3               	movwf	LCDWriteInt@numPlaces
  7404  0565  01A4               	clrf	LCDWriteInt@sign
  7405  0566  318B  23C5  3182   	fcall	_LCDWriteInt
  7406                           
  7407                           ;main.c: 240: LCDWriteCharacter('V');
  7408  0569  3056               	movlw	86
  7409  056A  3196  2681  3182   	fcall	_LCDWriteCharacter
  7410                           
  7411                           ;main.c: 242: { gotoXY(26,1); LCDWriteInt(voltage[0],4, 2, 0);};
  7412  056D  01F5               	clrf	gotoXY@y
  7413  056E  0AF5               	incf	gotoXY@y,f
  7414  056F  301A               	movlw	26
  7415  0570  3192  22FE  3182   	fcall	_gotoXY
  7416  0573  0021               	movlb	1	; select bank1
  7417  0574  0831               	movf	(_voltage+1)^(0+128),w
  7418  0575  0020               	movlb	0	; select bank0
  7419  0576  00A1               	movwf	LCDWriteInt@value+1
  7420  0577  0021               	movlb	1	; select bank1
  7421  0578  0830               	movf	_voltage^(0+128),w
  7422  0579  0020               	movlb	0	; select bank0
  7423  057A  00A0               	movwf	LCDWriteInt@value
  7424  057B  3004               	movlw	4
  7425  057C  00D8               	movwf	??_main
  7426  057D  0858               	movf	??_main,w
  7427  057E  00A2               	movwf	LCDWriteInt@fieldLength
  7428  057F  3002               	movlw	2
  7429  0580  00D9               	movwf	??_main+1
  7430  0581  0859               	movf	??_main+1,w
  7431  0582  00A3               	movwf	LCDWriteInt@numPlaces
  7432  0583  01A4               	clrf	LCDWriteInt@sign
  7433  0584  318B  23C5  3182   	fcall	_LCDWriteInt
  7434                           
  7435                           ;main.c: 243: LCDWriteCharacter('V');
  7436  0587  3056               	movlw	86
  7437  0588  3196  2681  3182   	fcall	_LCDWriteCharacter
  7438                           
  7439                           ;main.c: 245: { gotoXY(52,1); LCDWriteInt(Vref[0],4, 2, 0);};
  7440  058B  01F5               	clrf	gotoXY@y
  7441  058C  0AF5               	incf	gotoXY@y,f
  7442  058D  3034               	movlw	52
  7443  058E  3192  22FE  3182   	fcall	_gotoXY
  7444  0591  0021               	movlb	1	; select bank1
  7445  0592  0846               	movf	(_Vref+1)^(0+128),w
  7446  0593  0020               	movlb	0	; select bank0
  7447  0594  00A1               	movwf	LCDWriteInt@value+1
  7448  0595  0021               	movlb	1	; select bank1
  7449  0596  0845               	movf	_Vref^(0+128),w
  7450  0597  0020               	movlb	0	; select bank0
  7451  0598  00A0               	movwf	LCDWriteInt@value
  7452  0599  3004               	movlw	4
  7453  059A  00D8               	movwf	??_main
  7454  059B  0858               	movf	??_main,w
  7455  059C  00A2               	movwf	LCDWriteInt@fieldLength
  7456  059D  3002               	movlw	2
  7457  059E  00D9               	movwf	??_main+1
  7458  059F  0859               	movf	??_main+1,w
  7459  05A0  00A3               	movwf	LCDWriteInt@numPlaces
  7460  05A1  01A4               	clrf	LCDWriteInt@sign
  7461  05A2  318B  23C5  3182   	fcall	_LCDWriteInt
  7462                           
  7463                           ;main.c: 246: LCDWriteCharacter('V');
  7464  05A5  3056               	movlw	86
  7465  05A6  3196  2681  3182   	fcall	_LCDWriteCharacter
  7466                           
  7467                           ;main.c: 248: { gotoXY(80,1); LCDWriteInt(Imode[0],1, 0, 0);};
  7468  05A9  01F5               	clrf	gotoXY@y
  7469  05AA  0AF5               	incf	gotoXY@y,f
  7470  05AB  3050               	movlw	80
  7471  05AC  3192  22FE  3182   	fcall	_gotoXY
  7472  05AF  0021               	movlb	1	; select bank1
  7473  05B0  0861               	movf	_Imode^(0+128),w
  7474  05B1  0020               	movlb	0	; select bank0
  7475  05B2  00A0               	movwf	LCDWriteInt@value
  7476  05B3  01A1               	clrf	LCDWriteInt@value+1
  7477  05B4  1BA0               	btfsc	LCDWriteInt@value,7
  7478  05B5  03A1               	decf	LCDWriteInt@value+1,f
  7479  05B6  01A2               	clrf	LCDWriteInt@fieldLength
  7480  05B7  0AA2               	incf	LCDWriteInt@fieldLength,f
  7481  05B8  01A3               	clrf	LCDWriteInt@numPlaces
  7482  05B9  01A4               	clrf	LCDWriteInt@sign
  7483  05BA  318B  23C5  3182   	fcall	_LCDWriteInt
  7484                           
  7485                           ;main.c: 250: { gotoXY(0,2); LCDWriteInt(current[2],3, 1, 0);};
  7486  05BD  3002               	movlw	2
  7487  05BE  0020               	movlb	0	; select bank0
  7488  05BF  00D8               	movwf	??_main
  7489  05C0  0858               	movf	??_main,w
  7490  05C1  00F5               	movwf	gotoXY@y
  7491  05C2  3000               	movlw	0
  7492  05C3  3192  22FE  3182   	fcall	_gotoXY
  7493  05C6  0021               	movlb	1	; select bank1
  7494  05C7  083D               	movf	((_current+1)^(0+128)+4),w
  7495  05C8  0020               	movlb	0	; select bank0
  7496  05C9  00A1               	movwf	LCDWriteInt@value+1
  7497  05CA  0021               	movlb	1	; select bank1
  7498  05CB  083C               	movf	(_current^(0+128)+4),w
  7499  05CC  0020               	movlb	0	; select bank0
  7500  05CD  00A0               	movwf	LCDWriteInt@value
  7501  05CE  3003               	movlw	3
  7502  05CF  00D8               	movwf	??_main
  7503  05D0  0858               	movf	??_main,w
  7504  05D1  00A2               	movwf	LCDWriteInt@fieldLength
  7505  05D2  01A3               	clrf	LCDWriteInt@numPlaces
  7506  05D3  0AA3               	incf	LCDWriteInt@numPlaces,f
  7507  05D4  01A4               	clrf	LCDWriteInt@sign
  7508  05D5  318B  23C5  3182   	fcall	_LCDWriteInt
  7509                           
  7510                           ;main.c: 252: LCDWriteCharacter('A');
  7511  05D8  3041               	movlw	65
  7512  05D9  3196  2681  3182   	fcall	_LCDWriteCharacter
  7513                           
  7514                           ;main.c: 254: { gotoXY(26,2); LCDWriteInt(current[0],3, 1, 0);};
  7515  05DC  3002               	movlw	2
  7516  05DD  0020               	movlb	0	; select bank0
  7517  05DE  00D8               	movwf	??_main
  7518  05DF  0858               	movf	??_main,w
  7519  05E0  00F5               	movwf	gotoXY@y
  7520  05E1  301A               	movlw	26
  7521  05E2  3192  22FE  3182   	fcall	_gotoXY
  7522  05E5  0021               	movlb	1	; select bank1
  7523  05E6  0839               	movf	(_current+1)^(0+128),w
  7524  05E7  0020               	movlb	0	; select bank0
  7525  05E8  00A1               	movwf	LCDWriteInt@value+1
  7526  05E9  0021               	movlb	1	; select bank1
  7527  05EA  0838               	movf	_current^(0+128),w
  7528  05EB  0020               	movlb	0	; select bank0
  7529  05EC  00A0               	movwf	LCDWriteInt@value
  7530  05ED  3003               	movlw	3
  7531  05EE  00D8               	movwf	??_main
  7532  05EF  0858               	movf	??_main,w
  7533  05F0  00A2               	movwf	LCDWriteInt@fieldLength
  7534  05F1  01A3               	clrf	LCDWriteInt@numPlaces
  7535  05F2  0AA3               	incf	LCDWriteInt@numPlaces,f
  7536  05F3  01A4               	clrf	LCDWriteInt@sign
  7537  05F4  318B  23C5  3182   	fcall	_LCDWriteInt
  7538                           
  7539                           ;main.c: 256: LCDWriteCharacter('A');
  7540  05F7  3041               	movlw	65
  7541  05F8  3196  2681  3182   	fcall	_LCDWriteCharacter
  7542                           
  7543                           ;main.c: 258: { gotoXY(52,2); LCDWriteInt(Iref[0],3, 1, 0);};
  7544  05FB  3002               	movlw	2
  7545  05FC  0020               	movlb	0	; select bank0
  7546  05FD  00D8               	movwf	??_main
  7547  05FE  0858               	movf	??_main,w
  7548  05FF  00F5               	movwf	gotoXY@y
  7549  0600  3034               	movlw	52
  7550  0601  3192  22FE  3182   	fcall	_gotoXY
  7551  0604  0021               	movlb	1	; select bank1
  7552  0605  084E               	movf	(_Iref+1)^(0+128),w
  7553  0606  0020               	movlb	0	; select bank0
  7554  0607  00A1               	movwf	LCDWriteInt@value+1
  7555  0608  0021               	movlb	1	; select bank1
  7556  0609  084D               	movf	_Iref^(0+128),w
  7557  060A  0020               	movlb	0	; select bank0
  7558  060B  00A0               	movwf	LCDWriteInt@value
  7559  060C  3003               	movlw	3
  7560  060D  00D8               	movwf	??_main
  7561  060E  0858               	movf	??_main,w
  7562  060F  00A2               	movwf	LCDWriteInt@fieldLength
  7563  0610  01A3               	clrf	LCDWriteInt@numPlaces
  7564  0611  0AA3               	incf	LCDWriteInt@numPlaces,f
  7565  0612  01A4               	clrf	LCDWriteInt@sign
  7566  0613  318B  23C5  3182   	fcall	_LCDWriteInt
  7567                           
  7568                           ;main.c: 259: LCDWriteCharacter('A');
  7569  0616  3041               	movlw	65
  7570  0617  3196  2681  3182   	fcall	_LCDWriteCharacter
  7571                           
  7572                           ;main.c: 261: { gotoXY(80,2); LCDWriteInt(batteryState[0],1, 0, 0);};
  7573  061A  3002               	movlw	2
  7574  061B  0020               	movlb	0	; select bank0
  7575  061C  00D8               	movwf	??_main
  7576  061D  0858               	movf	??_main,w
  7577  061E  00F5               	movwf	gotoXY@y
  7578  061F  3050               	movlw	80
  7579  0620  3192  22FE  3182   	fcall	_gotoXY
  7580  0623  0021               	movlb	1	; select bank1
  7581  0624  0865               	movf	_batteryState^(0+128),w
  7582  0625  0020               	movlb	0	; select bank0
  7583  0626  00D8               	movwf	??_main
  7584  0627  01D9               	clrf	??_main+1
  7585  0628  0858               	movf	??_main,w
  7586  0629  00A0               	movwf	LCDWriteInt@value
  7587  062A  0859               	movf	??_main+1,w
  7588  062B  00A1               	movwf	LCDWriteInt@value+1
  7589  062C  01A2               	clrf	LCDWriteInt@fieldLength
  7590  062D  0AA2               	incf	LCDWriteInt@fieldLength,f
  7591  062E  01A3               	clrf	LCDWriteInt@numPlaces
  7592  062F  01A4               	clrf	LCDWriteInt@sign
  7593  0630  318B  23C5  3182   	fcall	_LCDWriteInt
  7594                           
  7595                           ;main.c: 263: { gotoXY(0,3); LCDWriteInt(voltage[3],4, 2, 0);};
  7596  0633  3003               	movlw	3
  7597  0634  0020               	movlb	0	; select bank0
  7598  0635  00D8               	movwf	??_main
  7599  0636  0858               	movf	??_main,w
  7600  0637  00F5               	movwf	gotoXY@y
  7601  0638  3000               	movlw	0
  7602  0639  3192  22FE  3182   	fcall	_gotoXY
  7603  063C  0021               	movlb	1	; select bank1
  7604  063D  0837               	movf	((_voltage+1)^(0+128)+6),w
  7605  063E  0020               	movlb	0	; select bank0
  7606  063F  00A1               	movwf	LCDWriteInt@value+1
  7607  0640  0021               	movlb	1	; select bank1
  7608  0641  0836               	movf	(_voltage^(0+128)+6),w
  7609  0642  0020               	movlb	0	; select bank0
  7610  0643  00A0               	movwf	LCDWriteInt@value
  7611  0644  3004               	movlw	4
  7612  0645  00D8               	movwf	??_main
  7613  0646  0858               	movf	??_main,w
  7614  0647  00A2               	movwf	LCDWriteInt@fieldLength
  7615  0648  3002               	movlw	2
  7616  0649  00D9               	movwf	??_main+1
  7617  064A  0859               	movf	??_main+1,w
  7618  064B  00A3               	movwf	LCDWriteInt@numPlaces
  7619  064C  01A4               	clrf	LCDWriteInt@sign
  7620  064D  318B  23C5  3182   	fcall	_LCDWriteInt
  7621                           
  7622                           ;main.c: 264: LCDWriteCharacter('V');
  7623  0650  3056               	movlw	86
  7624  0651  3196  2681  3182   	fcall	_LCDWriteCharacter
  7625                           
  7626                           ;main.c: 266: { gotoXY(26,3); LCDWriteInt(voltage[1],4, 2, 0);};
  7627  0654  3003               	movlw	3
  7628  0655  0020               	movlb	0	; select bank0
  7629  0656  00D8               	movwf	??_main
  7630  0657  0858               	movf	??_main,w
  7631  0658  00F5               	movwf	gotoXY@y
  7632  0659  301A               	movlw	26
  7633  065A  3192  22FE  3182   	fcall	_gotoXY
  7634  065D  0021               	movlb	1	; select bank1
  7635  065E  0833               	movf	((_voltage+1)^(0+128)+2),w
  7636  065F  0020               	movlb	0	; select bank0
  7637  0660  00A1               	movwf	LCDWriteInt@value+1
  7638  0661  0021               	movlb	1	; select bank1
  7639  0662  0832               	movf	(_voltage^(0+128)+2),w
  7640  0663  0020               	movlb	0	; select bank0
  7641  0664  00A0               	movwf	LCDWriteInt@value
  7642  0665  3004               	movlw	4
  7643  0666  00D8               	movwf	??_main
  7644  0667  0858               	movf	??_main,w
  7645  0668  00A2               	movwf	LCDWriteInt@fieldLength
  7646  0669  3002               	movlw	2
  7647  066A  00D9               	movwf	??_main+1
  7648  066B  0859               	movf	??_main+1,w
  7649  066C  00A3               	movwf	LCDWriteInt@numPlaces
  7650  066D  01A4               	clrf	LCDWriteInt@sign
  7651  066E  318B  23C5  3182   	fcall	_LCDWriteInt
  7652                           
  7653                           ;main.c: 268: LCDWriteCharacter('V');
  7654  0671  3056               	movlw	86
  7655  0672  3196  2681  3182   	fcall	_LCDWriteCharacter
  7656                           
  7657                           ;main.c: 270: { gotoXY(52,3); LCDWriteInt(Vref[1],4, 2, 0);};
  7658  0675  3003               	movlw	3
  7659  0676  0020               	movlb	0	; select bank0
  7660  0677  00D8               	movwf	??_main
  7661  0678  0858               	movf	??_main,w
  7662  0679  00F5               	movwf	gotoXY@y
  7663  067A  3034               	movlw	52
  7664  067B  3192  22FE  3182   	fcall	_gotoXY
  7665  067E  0021               	movlb	1	; select bank1
  7666  067F  0848               	movf	((_Vref+1)^(0+128)+2),w
  7667  0680  0020               	movlb	0	; select bank0
  7668  0681  00A1               	movwf	LCDWriteInt@value+1
  7669  0682  0021               	movlb	1	; select bank1
  7670  0683  0847               	movf	(_Vref^(0+128)+2),w
  7671  0684  0020               	movlb	0	; select bank0
  7672  0685  00A0               	movwf	LCDWriteInt@value
  7673  0686  3004               	movlw	4
  7674  0687  00D8               	movwf	??_main
  7675  0688  0858               	movf	??_main,w
  7676  0689  00A2               	movwf	LCDWriteInt@fieldLength
  7677  068A  3002               	movlw	2
  7678  068B  00D9               	movwf	??_main+1
  7679  068C  0859               	movf	??_main+1,w
  7680  068D  00A3               	movwf	LCDWriteInt@numPlaces
  7681  068E  01A4               	clrf	LCDWriteInt@sign
  7682  068F  318B  23C5  3182   	fcall	_LCDWriteInt
  7683                           
  7684                           ;main.c: 271: LCDWriteCharacter('V');
  7685  0692  3056               	movlw	86
  7686  0693  3196  2681  3182   	fcall	_LCDWriteCharacter
  7687                           
  7688                           ;main.c: 273: { gotoXY(80,3); LCDWriteInt(Imode[1],1, 0, 0);};
  7689  0696  3003               	movlw	3
  7690  0697  0020               	movlb	0	; select bank0
  7691  0698  00D8               	movwf	??_main
  7692  0699  0858               	movf	??_main,w
  7693  069A  00F5               	movwf	gotoXY@y
  7694  069B  3050               	movlw	80
  7695  069C  3192  22FE  3182   	fcall	_gotoXY
  7696  069F  0021               	movlb	1	; select bank1
  7697  06A0  0862               	movf	(_Imode^(0+128)+1),w
  7698  06A1  0020               	movlb	0	; select bank0
  7699  06A2  00A0               	movwf	LCDWriteInt@value
  7700  06A3  01A1               	clrf	LCDWriteInt@value+1
  7701  06A4  1BA0               	btfsc	LCDWriteInt@value,7
  7702  06A5  03A1               	decf	LCDWriteInt@value+1,f
  7703  06A6  01A2               	clrf	LCDWriteInt@fieldLength
  7704  06A7  0AA2               	incf	LCDWriteInt@fieldLength,f
  7705  06A8  01A3               	clrf	LCDWriteInt@numPlaces
  7706  06A9  01A4               	clrf	LCDWriteInt@sign
  7707  06AA  318B  23C5  3182   	fcall	_LCDWriteInt
  7708                           
  7709                           ;main.c: 275: { gotoXY(0,4); LCDWriteInt(current[3],3, 1, 0);};
  7710  06AD  3004               	movlw	4
  7711  06AE  0020               	movlb	0	; select bank0
  7712  06AF  00D8               	movwf	??_main
  7713  06B0  0858               	movf	??_main,w
  7714  06B1  00F5               	movwf	gotoXY@y
  7715  06B2  3000               	movlw	0
  7716  06B3  3192  22FE  3182   	fcall	_gotoXY
  7717  06B6  0021               	movlb	1	; select bank1
  7718  06B7  083F               	movf	((_current+1)^(0+128)+6),w
  7719  06B8  0020               	movlb	0	; select bank0
  7720  06B9  00A1               	movwf	LCDWriteInt@value+1
  7721  06BA  0021               	movlb	1	; select bank1
  7722  06BB  083E               	movf	(_current^(0+128)+6),w
  7723  06BC  0020               	movlb	0	; select bank0
  7724  06BD  00A0               	movwf	LCDWriteInt@value
  7725  06BE  3003               	movlw	3
  7726  06BF  00D8               	movwf	??_main
  7727  06C0  0858               	movf	??_main,w
  7728  06C1  00A2               	movwf	LCDWriteInt@fieldLength
  7729  06C2  01A3               	clrf	LCDWriteInt@numPlaces
  7730  06C3  0AA3               	incf	LCDWriteInt@numPlaces,f
  7731  06C4  01A4               	clrf	LCDWriteInt@sign
  7732  06C5  318B  23C5  3182   	fcall	_LCDWriteInt
  7733                           
  7734                           ;main.c: 277: LCDWriteCharacter('A');
  7735  06C8  3041               	movlw	65
  7736  06C9  3196  2681  3182   	fcall	_LCDWriteCharacter
  7737                           
  7738                           ;main.c: 279: { gotoXY(26,4); LCDWriteInt(current[1],3, 1, 0);};
  7739  06CC  3004               	movlw	4
  7740  06CD  0020               	movlb	0	; select bank0
  7741  06CE  00D8               	movwf	??_main
  7742  06CF  0858               	movf	??_main,w
  7743  06D0  00F5               	movwf	gotoXY@y
  7744  06D1  301A               	movlw	26
  7745  06D2  3192  22FE  3182   	fcall	_gotoXY
  7746  06D5  0021               	movlb	1	; select bank1
  7747  06D6  083B               	movf	((_current+1)^(0+128)+2),w
  7748  06D7  0020               	movlb	0	; select bank0
  7749  06D8  00A1               	movwf	LCDWriteInt@value+1
  7750  06D9  0021               	movlb	1	; select bank1
  7751  06DA  083A               	movf	(_current^(0+128)+2),w
  7752  06DB  0020               	movlb	0	; select bank0
  7753  06DC  00A0               	movwf	LCDWriteInt@value
  7754  06DD  3003               	movlw	3
  7755  06DE  00D8               	movwf	??_main
  7756  06DF  0858               	movf	??_main,w
  7757  06E0  00A2               	movwf	LCDWriteInt@fieldLength
  7758  06E1  01A3               	clrf	LCDWriteInt@numPlaces
  7759  06E2  0AA3               	incf	LCDWriteInt@numPlaces,f
  7760  06E3  01A4               	clrf	LCDWriteInt@sign
  7761  06E4  318B  23C5  3182   	fcall	_LCDWriteInt
  7762                           
  7763                           ;main.c: 281: LCDWriteCharacter('A');
  7764  06E7  3041               	movlw	65
  7765  06E8  3196  2681  3182   	fcall	_LCDWriteCharacter
  7766                           
  7767                           ;main.c: 283: { gotoXY(52,4); LCDWriteInt(Iref[1],3, 1, 0);};
  7768  06EB  3004               	movlw	4
  7769  06EC  0020               	movlb	0	; select bank0
  7770  06ED  00D8               	movwf	??_main
  7771  06EE  0858               	movf	??_main,w
  7772  06EF  00F5               	movwf	gotoXY@y
  7773  06F0  3034               	movlw	52
  7774  06F1  3192  22FE  3182   	fcall	_gotoXY
  7775  06F4  0021               	movlb	1	; select bank1
  7776  06F5  0850               	movf	((_Iref+1)^(0+128)+2),w
  7777  06F6  0020               	movlb	0	; select bank0
  7778  06F7  00A1               	movwf	LCDWriteInt@value+1
  7779  06F8  0021               	movlb	1	; select bank1
  7780  06F9  084F               	movf	(_Iref^(0+128)+2),w
  7781  06FA  0020               	movlb	0	; select bank0
  7782  06FB  00A0               	movwf	LCDWriteInt@value
  7783  06FC  3003               	movlw	3
  7784  06FD  00D8               	movwf	??_main
  7785  06FE  0858               	movf	??_main,w
  7786  06FF  00A2               	movwf	LCDWriteInt@fieldLength
  7787  0700  01A3               	clrf	LCDWriteInt@numPlaces
  7788  0701  0AA3               	incf	LCDWriteInt@numPlaces,f
  7789  0702  01A4               	clrf	LCDWriteInt@sign
  7790  0703  318B  23C5  3182   	fcall	_LCDWriteInt
  7791                           
  7792                           ;main.c: 284: LCDWriteCharacter('A');
  7793  0706  3041               	movlw	65
  7794  0707  3196  2681  3182   	fcall	_LCDWriteCharacter
  7795                           
  7796                           ;main.c: 286: { gotoXY(80,4); LCDWriteInt(batteryState[1],1, 0, 0);};
  7797  070A  3004               	movlw	4
  7798  070B  0020               	movlb	0	; select bank0
  7799  070C  00D8               	movwf	??_main
  7800  070D  0858               	movf	??_main,w
  7801  070E  00F5               	movwf	gotoXY@y
  7802  070F  3050               	movlw	80
  7803  0710  3192  22FE  3182   	fcall	_gotoXY
  7804  0713  0021               	movlb	1	; select bank1
  7805  0714  0866               	movf	(_batteryState^(0+128)+1),w
  7806  0715  0020               	movlb	0	; select bank0
  7807  0716  00D8               	movwf	??_main
  7808  0717  01D9               	clrf	??_main+1
  7809  0718  0858               	movf	??_main,w
  7810  0719  00A0               	movwf	LCDWriteInt@value
  7811  071A  0859               	movf	??_main+1,w
  7812  071B  00A1               	movwf	LCDWriteInt@value+1
  7813  071C  01A2               	clrf	LCDWriteInt@fieldLength
  7814  071D  0AA2               	incf	LCDWriteInt@fieldLength,f
  7815  071E  01A3               	clrf	LCDWriteInt@numPlaces
  7816  071F  01A4               	clrf	LCDWriteInt@sign
  7817  0720  318B  23C5  3182   	fcall	_LCDWriteInt
  7818                           
  7819                           ;main.c: 290: { gotoXY(0,5); LCDWriteInt(dutyCycle6,4, 0, 0);};
  7820  0723  3005               	movlw	5
  7821  0724  0020               	movlb	0	; select bank0
  7822  0725  00D8               	movwf	??_main
  7823  0726  0858               	movf	??_main,w
  7824  0727  00F5               	movwf	gotoXY@y
  7825  0728  3000               	movlw	0
  7826  0729  3192  22FE  3182   	fcall	_gotoXY
  7827  072C  0020               	movlb	0	; select bank0
  7828  072D  086C               	movf	main@dutyCycle6+1,w
  7829  072E  00A1               	movwf	LCDWriteInt@value+1
  7830  072F  086B               	movf	main@dutyCycle6,w
  7831  0730  00A0               	movwf	LCDWriteInt@value
  7832  0731  3004               	movlw	4
  7833  0732  00D8               	movwf	??_main
  7834  0733  0858               	movf	??_main,w
  7835  0734  00A2               	movwf	LCDWriteInt@fieldLength
  7836  0735  01A3               	clrf	LCDWriteInt@numPlaces
  7837  0736  01A4               	clrf	LCDWriteInt@sign
  7838  0737  318B  23C5  3182   	fcall	_LCDWriteInt
  7839                           
  7840                           ;main.c: 291: { gotoXY(18,5); LCDWriteInt(VHoldMode[0],1, 0, 0);};
  7841  073A  3005               	movlw	5
  7842  073B  0020               	movlb	0	; select bank0
  7843  073C  00D8               	movwf	??_main
  7844  073D  0858               	movf	??_main,w
  7845  073E  00F5               	movwf	gotoXY@y
  7846  073F  3012               	movlw	18
  7847  0740  3192  22FE  3182   	fcall	_gotoXY
  7848  0743  0021               	movlb	1	; select bank1
  7849  0744  085D               	movf	_VHoldMode^(0+128),w
  7850  0745  0020               	movlb	0	; select bank0
  7851  0746  00A0               	movwf	LCDWriteInt@value
  7852  0747  01A1               	clrf	LCDWriteInt@value+1
  7853  0748  1BA0               	btfsc	LCDWriteInt@value,7
  7854  0749  03A1               	decf	LCDWriteInt@value+1,f
  7855  074A  01A2               	clrf	LCDWriteInt@fieldLength
  7856  074B  0AA2               	incf	LCDWriteInt@fieldLength,f
  7857  074C  01A3               	clrf	LCDWriteInt@numPlaces
  7858  074D  01A4               	clrf	LCDWriteInt@sign
  7859  074E  318B  23C5  3182   	fcall	_LCDWriteInt
  7860                           
  7861                           ;main.c: 292: LCDWriteCharacter(' ');
  7862  0751  3020               	movlw	32
  7863  0752  3196  2681  3182   	fcall	_LCDWriteCharacter
  7864                           
  7865                           ;main.c: 293: { gotoXY(28,5); LCDWriteInt(dutyCycle7,4, 0, 0);};
  7866  0755  3005               	movlw	5
  7867  0756  0020               	movlb	0	; select bank0
  7868  0757  00D8               	movwf	??_main
  7869  0758  0858               	movf	??_main,w
  7870  0759  00F5               	movwf	gotoXY@y
  7871  075A  301C               	movlw	28
  7872  075B  3192  22FE  3182   	fcall	_gotoXY
  7873  075E  0020               	movlb	0	; select bank0
  7874  075F  086E               	movf	main@dutyCycle7+1,w
  7875  0760  00A1               	movwf	LCDWriteInt@value+1
  7876  0761  086D               	movf	main@dutyCycle7,w
  7877  0762  00A0               	movwf	LCDWriteInt@value
  7878  0763  3004               	movlw	4
  7879  0764  00D8               	movwf	??_main
  7880  0765  0858               	movf	??_main,w
  7881  0766  00A2               	movwf	LCDWriteInt@fieldLength
  7882  0767  01A3               	clrf	LCDWriteInt@numPlaces
  7883  0768  01A4               	clrf	LCDWriteInt@sign
  7884  0769  318B  23C5  3182   	fcall	_LCDWriteInt
  7885                           
  7886                           ;main.c: 294: { gotoXY(46,5); LCDWriteInt(VHoldMode[1],1, 0, 0);};
  7887  076C  3005               	movlw	5
  7888  076D  0020               	movlb	0	; select bank0
  7889  076E  00D8               	movwf	??_main
  7890  076F  0858               	movf	??_main,w
  7891  0770  00F5               	movwf	gotoXY@y
  7892  0771  302E               	movlw	46
  7893  0772  3192  22FE  3182   	fcall	_gotoXY
  7894  0775  0021               	movlb	1	; select bank1
  7895  0776  085E               	movf	(_VHoldMode^(0+128)+1),w
  7896  0777  0020               	movlb	0	; select bank0
  7897  0778  00A0               	movwf	LCDWriteInt@value
  7898  0779  01A1               	clrf	LCDWriteInt@value+1
  7899  077A  1BA0               	btfsc	LCDWriteInt@value,7
  7900  077B  03A1               	decf	LCDWriteInt@value+1,f
  7901  077C  01A2               	clrf	LCDWriteInt@fieldLength
  7902  077D  0AA2               	incf	LCDWriteInt@fieldLength,f
  7903  077E  01A3               	clrf	LCDWriteInt@numPlaces
  7904  077F  01A4               	clrf	LCDWriteInt@sign
  7905  0780  318B  23C5  3182   	fcall	_LCDWriteInt
  7906                           
  7907                           ;main.c: 295: LCDWriteCharacter(' ');
  7908  0783  3020               	movlw	32
  7909  0784  3196  2681  3182   	fcall	_LCDWriteCharacter
  7910                           
  7911                           ;main.c: 296: { gotoXY(56,5); LCDWriteInt(batteryTemp,3, 1, 0);};
  7912  0787  3005               	movlw	5
  7913  0788  0020               	movlb	0	; select bank0
  7914  0789  00D8               	movwf	??_main
  7915  078A  0858               	movf	??_main,w
  7916  078B  00F5               	movwf	gotoXY@y
  7917  078C  3038               	movlw	56
  7918  078D  3192  22FE  3182   	fcall	_gotoXY
  7919  0790  0021               	movlb	1	; select bank1
  7920  0791  086E               	movf	(_batteryTemp+1)^(0+128),w
  7921  0792  0020               	movlb	0	; select bank0
  7922  0793  00A1               	movwf	LCDWriteInt@value+1
  7923  0794  0021               	movlb	1	; select bank1
  7924  0795  086D               	movf	_batteryTemp^(0+128),w
  7925  0796  0020               	movlb	0	; select bank0
  7926  0797  00A0               	movwf	LCDWriteInt@value
  7927  0798  3003               	movlw	3
  7928  0799  00D8               	movwf	??_main
  7929  079A  0858               	movf	??_main,w
  7930  079B  00A2               	movwf	LCDWriteInt@fieldLength
  7931  079C  01A3               	clrf	LCDWriteInt@numPlaces
  7932  079D  0AA3               	incf	LCDWriteInt@numPlaces,f
  7933  079E  01A4               	clrf	LCDWriteInt@sign
  7934  079F  318B  23C5  3182   	fcall	_LCDWriteInt
  7935                           
  7936                           ;main.c: 297: LCDWriteCharacter(123);
  7937  07A2  307B               	movlw	123
  7938  07A3  3196  2681  3182   	fcall	_LCDWriteCharacter
  7939                           
  7940                           ;main.c: 298: LCDWriteCharacter('C');
  7941  07A6  3043               	movlw	67
  7942  07A7  3196  2681  3182   	fcall	_LCDWriteCharacter
  7943                           
  7944                           ;main.c: 368: if(batteryState[0] > FINISHED)
  7945  07AA  3003               	movlw	3
  7946  07AB  0021               	movlb	1	; select bank1
  7947  07AC  0265               	subwf	_batteryState^(0+128),w
  7948  07AD  1C03               	skipc
  7949  07AE  2FB3               	goto	l3380
  7950                           
  7951                           ;main.c: 369: {
  7952                           ;main.c: 370: cc_cv_mode(0);
  7953  07AF  3000               	movlw	0
  7954  07B0  318E  26B1  3182   	fcall	_cc_cv_mode
  7955  07B3                     l3380:	
  7956                           
  7957                           ;main.c: 371: }
  7958                           ;main.c: 372: if(batteryState[1] > FINISHED)
  7959  07B3  3003               	movlw	3
  7960  07B4  0021               	movlb	1	; select bank1
  7961  07B5  0266               	subwf	(_batteryState^(0+128)+1),w
  7962  07B6  1C03               	skipc
  7963  07B7  2FBC               	goto	l3384
  7964                           
  7965                           ;main.c: 373: {
  7966                           ;main.c: 374: cc_cv_mode(1);
  7967  07B8  3001               	movlw	1
  7968  07B9  318E  26B1  3182   	fcall	_cc_cv_mode
  7969  07BC                     l3384:	
  7970                           
  7971                           ;main.c: 375: }
  7972                           ;main.c: 376: slowLoop=0;
  7973  07BC  0020               	movlb	0	; select bank0
  7974  07BD  01E3               	clrf	main@slowLoop
  7975  07BE  2AEF               	goto	l3110
  7976  07BF                     __end_of_main:	
  7977                           
  7978                           	psect	text1
  7979  0C7E                     __ptext1:	
  7980 ;; *************** function _tempCalc *****************
  7981 ;; Defined at:
  7982 ;;		line 4 in file "tempCalc.c"
  7983 ;; Parameters:    Size  Location     Type
  7984 ;;  analogValue     2   45[BANK0 ] int 
  7985 ;; Auto vars:     Size  Location     Type
  7986 ;;  steinhart       3   53[BANK0 ] float 
  7987 ;;  R               3   47[BANK0 ] float 
  7988 ;; Return value:  Size  Location     Type
  7989 ;;                  2   45[BANK0 ] int 
  7990 ;; Registers used:
  7991 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7992 ;; Tracked objects:
  7993 ;;		On entry : 0/0
  7994 ;;		On exit  : 0/0
  7995 ;;		Unchanged: 0/0
  7996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7997 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7998 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8000 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8001 ;;Total ram usage:       11 bytes
  8002 ;; Hardware stack levels used:    1
  8003 ;; Hardware stack levels required when called:    4
  8004 ;; This function calls:
  8005 ;;		___awtoft
  8006 ;;		___ftadd
  8007 ;;		___ftdiv
  8008 ;;		___ftmul
  8009 ;;		___ftsub
  8010 ;;		___fttol
  8011 ;;		_log
  8012 ;; This function is called by:
  8013 ;;		_main
  8014 ;; This function uses a non-reentrant model
  8015 ;;
  8016                           
  8017                           
  8018                           ;psect for function _tempCalc
  8019  0C7E                     _tempCalc:	
  8020                           
  8021                           ;tempCalc.c: 6: float R, steinhart;
  8022                           ;tempCalc.c: 8: R=10030/(1023/(float)analogValue-1);
  8023                           
  8024                           ;incstack = 0
  8025                           ; Regs used in _tempCalc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8026  0C7E  3000               	movlw	0
  8027  0C7F  0020               	movlb	0	; select bank0
  8028  0C80  00B0               	movwf	___ftadd@f1
  8029  0C81  3080               	movlw	128
  8030  0C82  00B1               	movwf	___ftadd@f1+1
  8031  0C83  30BF               	movlw	191
  8032  0C84  00B2               	movwf	___ftadd@f1+2
  8033  0C85  084E               	movf	tempCalc@analogValue+1,w
  8034  0C86  00F9               	movwf	___awtoft@c+1
  8035  0C87  084D               	movf	tempCalc@analogValue,w
  8036  0C88  00F8               	movwf	___awtoft@c
  8037  0C89  3193  23D3  318C   	fcall	___awtoft
  8038  0C8C  0878               	movf	?___awtoft,w
  8039  0C8D  0020               	movlb	0	; select bank0
  8040  0C8E  00A0               	movwf	___ftdiv@f2
  8041  0C8F  0879               	movf	?___awtoft+1,w
  8042  0C90  00A1               	movwf	___ftdiv@f2+1
  8043  0C91  087A               	movf	?___awtoft+2,w
  8044  0C92  00A2               	movwf	___ftdiv@f2+2
  8045  0C93  30C0               	movlw	192
  8046  0C94  00A3               	movwf	___ftdiv@f1
  8047  0C95  307F               	movlw	127
  8048  0C96  00A4               	movwf	___ftdiv@f1+1
  8049  0C97  3044               	movlw	68
  8050  0C98  00A5               	movwf	___ftdiv@f1+2
  8051  0C99  3189  21B8  318C   	fcall	___ftdiv
  8052  0C9C  0020               	movlb	0	; select bank0
  8053  0C9D  0820               	movf	?___ftdiv,w
  8054  0C9E  00B3               	movwf	___ftadd@f2
  8055  0C9F  0821               	movf	?___ftdiv+1,w
  8056  0CA0  00B4               	movwf	___ftadd@f2+1
  8057  0CA1  0822               	movf	?___ftdiv+2,w
  8058  0CA2  00B5               	movwf	___ftadd@f2+2
  8059  0CA3  3180  2050  318C   	fcall	___ftadd
  8060  0CA6  0020               	movlb	0	; select bank0
  8061  0CA7  0830               	movf	?___ftadd,w
  8062  0CA8  00D2               	movwf	_tempCalc$1187
  8063  0CA9  0831               	movf	?___ftadd+1,w
  8064  0CAA  00D3               	movwf	_tempCalc$1187+1
  8065  0CAB  0832               	movf	?___ftadd+2,w
  8066  0CAC  00D4               	movwf	_tempCalc$1187+2
  8067                           
  8068                           ;tempCalc.c: 6: float R, steinhart;
  8069                           ;tempCalc.c: 8: R=10030/(1023/(float)analogValue-1);
  8070  0CAD  0852               	movf	_tempCalc$1187,w
  8071  0CAE  00A0               	movwf	___ftdiv@f2
  8072  0CAF  0853               	movf	_tempCalc$1187+1,w
  8073  0CB0  00A1               	movwf	___ftdiv@f2+1
  8074  0CB1  0854               	movf	_tempCalc$1187+2,w
  8075  0CB2  00A2               	movwf	___ftdiv@f2+2
  8076  0CB3  30B8               	movlw	184
  8077  0CB4  00A3               	movwf	___ftdiv@f1
  8078  0CB5  301C               	movlw	28
  8079  0CB6  00A4               	movwf	___ftdiv@f1+1
  8080  0CB7  3046               	movlw	70
  8081  0CB8  00A5               	movwf	___ftdiv@f1+2
  8082  0CB9  3189  21B8  318C   	fcall	___ftdiv
  8083  0CBC  0020               	movlb	0	; select bank0
  8084  0CBD  0820               	movf	?___ftdiv,w
  8085  0CBE  00CF               	movwf	tempCalc@R
  8086  0CBF  0821               	movf	?___ftdiv+1,w
  8087  0CC0  00D0               	movwf	tempCalc@R+1
  8088  0CC1  0822               	movf	?___ftdiv+2,w
  8089  0CC2  00D1               	movwf	tempCalc@R+2
  8090                           
  8091                           ;tempCalc.c: 10: steinhart=R/10010;
  8092  0CC3  3068               	movlw	104
  8093  0CC4  00A0               	movwf	___ftdiv@f2
  8094  0CC5  301C               	movlw	28
  8095  0CC6  00A1               	movwf	___ftdiv@f2+1
  8096  0CC7  3046               	movlw	70
  8097  0CC8  00A2               	movwf	___ftdiv@f2+2
  8098  0CC9  084F               	movf	tempCalc@R,w
  8099  0CCA  00A3               	movwf	___ftdiv@f1
  8100  0CCB  0850               	movf	tempCalc@R+1,w
  8101  0CCC  00A4               	movwf	___ftdiv@f1+1
  8102  0CCD  0851               	movf	tempCalc@R+2,w
  8103  0CCE  00A5               	movwf	___ftdiv@f1+2
  8104  0CCF  3189  21B8  318C   	fcall	___ftdiv
  8105  0CD2  0020               	movlb	0	; select bank0
  8106  0CD3  0820               	movf	?___ftdiv,w
  8107  0CD4  00D5               	movwf	tempCalc@steinhart
  8108  0CD5  0821               	movf	?___ftdiv+1,w
  8109  0CD6  00D6               	movwf	tempCalc@steinhart+1
  8110  0CD7  0822               	movf	?___ftdiv+2,w
  8111  0CD8  00D7               	movwf	tempCalc@steinhart+2
  8112                           
  8113                           ;tempCalc.c: 11: steinhart=log(steinhart);
  8114  0CD9  0855               	movf	tempCalc@steinhart,w
  8115  0CDA  00C7               	movwf	log@x
  8116  0CDB  0856               	movf	tempCalc@steinhart+1,w
  8117  0CDC  00C8               	movwf	log@x+1
  8118  0CDD  0857               	movf	tempCalc@steinhart+2,w
  8119  0CDE  00C9               	movwf	log@x+2
  8120  0CDF  318A  2261  318C   	fcall	_log
  8121  0CE2  0020               	movlb	0	; select bank0
  8122  0CE3  0847               	movf	?_log,w
  8123  0CE4  00D5               	movwf	tempCalc@steinhart
  8124  0CE5  0848               	movf	?_log+1,w
  8125  0CE6  00D6               	movwf	tempCalc@steinhart+1
  8126  0CE7  0849               	movf	?_log+2,w
  8127  0CE8  00D7               	movwf	tempCalc@steinhart+2
  8128                           
  8129                           ;tempCalc.c: 12: steinhart/=3795.3;
  8130  0CE9  3035               	movlw	53
  8131  0CEA  00A0               	movwf	___ftdiv@f2
  8132  0CEB  306D               	movlw	109
  8133  0CEC  00A1               	movwf	___ftdiv@f2+1
  8134  0CED  3045               	movlw	69
  8135  0CEE  00A2               	movwf	___ftdiv@f2+2
  8136  0CEF  0855               	movf	tempCalc@steinhart,w
  8137  0CF0  00A3               	movwf	___ftdiv@f1
  8138  0CF1  0856               	movf	tempCalc@steinhart+1,w
  8139  0CF2  00A4               	movwf	___ftdiv@f1+1
  8140  0CF3  0857               	movf	tempCalc@steinhart+2,w
  8141  0CF4  00A5               	movwf	___ftdiv@f1+2
  8142  0CF5  3189  21B8  318C   	fcall	___ftdiv
  8143  0CF8  0020               	movlb	0	; select bank0
  8144  0CF9  0820               	movf	?___ftdiv,w
  8145  0CFA  00D5               	movwf	tempCalc@steinhart
  8146  0CFB  0821               	movf	?___ftdiv+1,w
  8147  0CFC  00D6               	movwf	tempCalc@steinhart+1
  8148  0CFD  0822               	movf	?___ftdiv+2,w
  8149  0CFE  00D7               	movwf	tempCalc@steinhart+2
  8150                           
  8151                           ;tempCalc.c: 16: steinhart+=1.0/(25+273.15);
  8152  0CFF  30CF               	movlw	207
  8153  0D00  00B0               	movwf	___ftadd@f1
  8154  0D01  305B               	movlw	91
  8155  0D02  00B1               	movwf	___ftadd@f1+1
  8156  0D03  303B               	movlw	59
  8157  0D04  00B2               	movwf	___ftadd@f1+2
  8158  0D05  0855               	movf	tempCalc@steinhart,w
  8159  0D06  00B3               	movwf	___ftadd@f2
  8160  0D07  0856               	movf	tempCalc@steinhart+1,w
  8161  0D08  00B4               	movwf	___ftadd@f2+1
  8162  0D09  0857               	movf	tempCalc@steinhart+2,w
  8163  0D0A  00B5               	movwf	___ftadd@f2+2
  8164  0D0B  3180  2050  318C   	fcall	___ftadd
  8165  0D0E  0020               	movlb	0	; select bank0
  8166  0D0F  0830               	movf	?___ftadd,w
  8167  0D10  00D5               	movwf	tempCalc@steinhart
  8168  0D11  0831               	movf	?___ftadd+1,w
  8169  0D12  00D6               	movwf	tempCalc@steinhart+1
  8170  0D13  0832               	movf	?___ftadd+2,w
  8171  0D14  00D7               	movwf	tempCalc@steinhart+2
  8172                           
  8173                           ;tempCalc.c: 17: steinhart=1.0/steinhart;
  8174  0D15  0855               	movf	tempCalc@steinhart,w
  8175  0D16  00A0               	movwf	___ftdiv@f2
  8176  0D17  0856               	movf	tempCalc@steinhart+1,w
  8177  0D18  00A1               	movwf	___ftdiv@f2+1
  8178  0D19  0857               	movf	tempCalc@steinhart+2,w
  8179  0D1A  00A2               	movwf	___ftdiv@f2+2
  8180  0D1B  3000               	movlw	0
  8181  0D1C  00A3               	movwf	___ftdiv@f1
  8182  0D1D  3080               	movlw	128
  8183  0D1E  00A4               	movwf	___ftdiv@f1+1
  8184  0D1F  303F               	movlw	63
  8185  0D20  00A5               	movwf	___ftdiv@f1+2
  8186  0D21  3189  21B8  318C   	fcall	___ftdiv
  8187  0D24  0020               	movlb	0	; select bank0
  8188  0D25  0820               	movf	?___ftdiv,w
  8189  0D26  00D5               	movwf	tempCalc@steinhart
  8190  0D27  0821               	movf	?___ftdiv+1,w
  8191  0D28  00D6               	movwf	tempCalc@steinhart+1
  8192  0D29  0822               	movf	?___ftdiv+2,w
  8193  0D2A  00D7               	movwf	tempCalc@steinhart+2
  8194                           
  8195                           ;tempCalc.c: 18: steinhart-=273.15;
  8196  0D2B  3093               	movlw	147
  8197  0D2C  00BD               	movwf	___ftsub@f2
  8198  0D2D  3088               	movlw	136
  8199  0D2E  00BE               	movwf	___ftsub@f2+1
  8200  0D2F  3043               	movlw	67
  8201  0D30  00BF               	movwf	___ftsub@f2+2
  8202  0D31  0855               	movf	tempCalc@steinhart,w
  8203  0D32  00C0               	movwf	___ftsub@f1
  8204  0D33  0856               	movf	tempCalc@steinhart+1,w
  8205  0D34  00C1               	movwf	___ftsub@f1+1
  8206  0D35  0857               	movf	tempCalc@steinhart+2,w
  8207  0D36  00C2               	movwf	___ftsub@f1+2
  8208  0D37  3193  2396  318C   	fcall	___ftsub
  8209  0D3A  0020               	movlb	0	; select bank0
  8210  0D3B  083D               	movf	?___ftsub,w
  8211  0D3C  00D5               	movwf	tempCalc@steinhart
  8212  0D3D  083E               	movf	?___ftsub+1,w
  8213  0D3E  00D6               	movwf	tempCalc@steinhart+1
  8214  0D3F  083F               	movf	?___ftsub+2,w
  8215  0D40  00D7               	movwf	tempCalc@steinhart+2
  8216                           
  8217                           ;tempCalc.c: 20: steinhart*=10;
  8218  0D41  3000               	movlw	0
  8219  0D42  00A0               	movwf	___ftmul@f1
  8220  0D43  3020               	movlw	32
  8221  0D44  00A1               	movwf	___ftmul@f1+1
  8222  0D45  3041               	movlw	65
  8223  0D46  00A2               	movwf	___ftmul@f1+2
  8224  0D47  0855               	movf	tempCalc@steinhart,w
  8225  0D48  00A3               	movwf	___ftmul@f2
  8226  0D49  0856               	movf	tempCalc@steinhart+1,w
  8227  0D4A  00A4               	movwf	___ftmul@f2+1
  8228  0D4B  0857               	movf	tempCalc@steinhart+2,w
  8229  0D4C  00A5               	movwf	___ftmul@f2+2
  8230  0D4D  318B  2311  318C   	fcall	___ftmul
  8231  0D50  0020               	movlb	0	; select bank0
  8232  0D51  0820               	movf	?___ftmul,w
  8233  0D52  00D5               	movwf	tempCalc@steinhart
  8234  0D53  0821               	movf	?___ftmul+1,w
  8235  0D54  00D6               	movwf	tempCalc@steinhart+1
  8236  0D55  0822               	movf	?___ftmul+2,w
  8237  0D56  00D7               	movwf	tempCalc@steinhart+2
  8238                           
  8239                           ;tempCalc.c: 24: return (int16_t)steinhart;
  8240  0D57  0855               	movf	tempCalc@steinhart,w
  8241  0D58  00B0               	movwf	___fttol@f1
  8242  0D59  0856               	movf	tempCalc@steinhart+1,w
  8243  0D5A  00B1               	movwf	___fttol@f1+1
  8244  0D5B  0857               	movf	tempCalc@steinhart+2,w
  8245  0D5C  00B2               	movwf	___fttol@f1+2
  8246  0D5D  3189  2131         	fcall	___fttol
  8247  0D5F  0020               	movlb	0	; select bank0
  8248  0D60  0831               	movf	?___fttol+1,w
  8249  0D61  00CE               	movwf	?_tempCalc+1
  8250  0D62  0830               	movf	?___fttol,w
  8251  0D63  00CD               	movwf	?_tempCalc
  8252  0D64  0008               	return
  8253  0D65                     __end_of_tempCalc:	
  8254                           
  8255                           	psect	text2
  8256  0A61                     __ptext2:	
  8257 ;; *************** function _log *****************
  8258 ;; Defined at:
  8259 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
  8260 ;; Parameters:    Size  Location     Type
  8261 ;;  x               3   39[BANK0 ] int 
  8262 ;; Auto vars:     Size  Location     Type
  8263 ;;  exponent        2   43[BANK0 ] int 
  8264 ;; Return value:  Size  Location     Type
  8265 ;;                  3   39[BANK0 ] int 
  8266 ;; Registers used:
  8267 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8268 ;; Tracked objects:
  8269 ;;		On entry : 0/0
  8270 ;;		On exit  : 0/0
  8271 ;;		Unchanged: 0/0
  8272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8273 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8274 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8275 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8276 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8277 ;;Total ram usage:        6 bytes
  8278 ;; Hardware stack levels used:    1
  8279 ;; Hardware stack levels required when called:    3
  8280 ;; This function calls:
  8281 ;;		___awtoft
  8282 ;;		___ftadd
  8283 ;;		___ftge
  8284 ;;		___ftmul
  8285 ;;		_eval_poly
  8286 ;;		_frexp
  8287 ;; This function is called by:
  8288 ;;		_tempCalc
  8289 ;; This function uses a non-reentrant model
  8290 ;;
  8291                           
  8292                           
  8293                           ;psect for function _log
  8294  0A61                     _log:	
  8295                           
  8296                           ;incstack = 0
  8297                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8298  0A61  0020               	movlb	0	; select bank0
  8299  0A62  0847               	movf	log@x,w
  8300  0A63  00F0               	movwf	___ftge@ff1
  8301  0A64  0848               	movf	log@x+1,w
  8302  0A65  00F1               	movwf	___ftge@ff1+1
  8303  0A66  0849               	movf	log@x+2,w
  8304  0A67  00F2               	movwf	___ftge@ff1+2
  8305  0A68  3000               	movlw	0
  8306  0A69  00F3               	movwf	___ftge@ff2
  8307  0A6A  3000               	movlw	0
  8308  0A6B  00F4               	movwf	___ftge@ff2+1
  8309  0A6C  3000               	movlw	0
  8310  0A6D  00F5               	movwf	___ftge@ff2+2
  8311  0A6E  3194  24EB  318A   	fcall	___ftge
  8312  0A71  1803               	btfsc	3,0
  8313  0A72  2A80               	goto	l2670
  8314  0A73  3021               	movlw	33
  8315  0A74  0021               	movlb	1	; select bank1
  8316  0A75  00D9               	movwf	_errno^(0+128)
  8317  0A76  3000               	movlw	0
  8318  0A77  00DA               	movwf	(_errno^(0+128)+1)
  8319  0A78  3000               	movlw	0
  8320  0A79  0020               	movlb	0	; select bank0
  8321  0A7A  00C7               	movwf	?_log
  8322  0A7B  3000               	movlw	0
  8323  0A7C  00C8               	movwf	?_log+1
  8324  0A7D  3000               	movlw	0
  8325  0A7E  00C9               	movwf	?_log+2
  8326  0A7F  0008               	return
  8327  0A80                     l2670:	
  8328  0A80  0020               	movlb	0	; select bank0
  8329  0A81  0849               	movf	log@x+2,w
  8330  0A82  0448               	iorwf	log@x+1,w
  8331  0A83  0447               	iorwf	log@x,w
  8332  0A84  1D03               	skipz
  8333  0A85  2A93               	goto	l2676
  8334  0A86  3022               	movlw	34
  8335  0A87  0021               	movlb	1	; select bank1
  8336  0A88  00D9               	movwf	_errno^(0+128)
  8337  0A89  3000               	movlw	0
  8338  0A8A  00DA               	movwf	(_errno^(0+128)+1)
  8339  0A8B  3000               	movlw	0
  8340  0A8C  0020               	movlb	0	; select bank0
  8341  0A8D  00C7               	movwf	?_log
  8342  0A8E  3000               	movlw	0
  8343  0A8F  00C8               	movwf	?_log+1
  8344  0A90  3000               	movlw	0
  8345  0A91  00C9               	movwf	?_log+2
  8346  0A92  0008               	return
  8347  0A93                     l2676:	
  8348  0A93  3000               	movlw	0
  8349  0A94  00B0               	movwf	___ftadd@f1
  8350  0A95  3080               	movlw	128
  8351  0A96  00B1               	movwf	___ftadd@f1+1
  8352  0A97  30BF               	movlw	191
  8353  0A98  00B2               	movwf	___ftadd@f1+2
  8354  0A99  3000               	movlw	0
  8355  0A9A  00A0               	movwf	___ftmul@f1
  8356  0A9B  3000               	movlw	0
  8357  0A9C  00A1               	movwf	___ftmul@f1+1
  8358  0A9D  3040               	movlw	64
  8359  0A9E  00A2               	movwf	___ftmul@f1+2
  8360  0A9F  304B               	movlw	(low (log@exponent| 0))& (0+255)
  8361  0AA0  00CA               	movwf	??_log
  8362  0AA1  084A               	movf	??_log,w
  8363  0AA2  00F3               	movwf	frexp@eptr
  8364  0AA3  0847               	movf	log@x,w
  8365  0AA4  00F0               	movwf	frexp@value
  8366  0AA5  0848               	movf	log@x+1,w
  8367  0AA6  00F1               	movwf	frexp@value+1
  8368  0AA7  0849               	movf	log@x+2,w
  8369  0AA8  00F2               	movwf	frexp@value+2
  8370  0AA9  3195  2526  318A   	fcall	_frexp
  8371  0AAC  0870               	movf	?_frexp,w
  8372  0AAD  0020               	movlb	0	; select bank0
  8373  0AAE  00A3               	movwf	___ftmul@f2
  8374  0AAF  0871               	movf	?_frexp+1,w
  8375  0AB0  00A4               	movwf	___ftmul@f2+1
  8376  0AB1  0872               	movf	?_frexp+2,w
  8377  0AB2  00A5               	movwf	___ftmul@f2+2
  8378  0AB3  318B  2311  318A   	fcall	___ftmul
  8379  0AB6  0020               	movlb	0	; select bank0
  8380  0AB7  0820               	movf	?___ftmul,w
  8381  0AB8  00B3               	movwf	___ftadd@f2
  8382  0AB9  0821               	movf	?___ftmul+1,w
  8383  0ABA  00B4               	movwf	___ftadd@f2+1
  8384  0ABB  0822               	movf	?___ftmul+2,w
  8385  0ABC  00B5               	movwf	___ftadd@f2+2
  8386  0ABD  3180  2050  318A   	fcall	___ftadd
  8387  0AC0  0020               	movlb	0	; select bank0
  8388  0AC1  0830               	movf	?___ftadd,w
  8389  0AC2  00C7               	movwf	log@x
  8390  0AC3  0831               	movf	?___ftadd+1,w
  8391  0AC4  00C8               	movwf	log@x+1
  8392  0AC5  0832               	movf	?___ftadd+2,w
  8393  0AC6  00C9               	movwf	log@x+2
  8394  0AC7  30FF               	movlw	255
  8395  0AC8  07CB               	addwf	log@exponent,f
  8396  0AC9  30FF               	movlw	255
  8397  0ACA  3DCC               	addwfc	log@exponent+1,f
  8398  0ACB  0847               	movf	log@x,w
  8399  0ACC  00BD               	movwf	eval_poly@x
  8400  0ACD  0848               	movf	log@x+1,w
  8401  0ACE  00BE               	movwf	eval_poly@x+1
  8402  0ACF  0849               	movf	log@x+2,w
  8403  0AD0  00BF               	movwf	eval_poly@x+2
  8404  0AD1  3000               	movlw	low (log@coeff| (0+32768))
  8405  0AD2  00C0               	movwf	eval_poly@d
  8406  0AD3  3098               	movlw	high (log@coeff| (0+32768))
  8407  0AD4  00C1               	movwf	eval_poly@d+1
  8408  0AD5  3008               	movlw	8
  8409  0AD6  00C2               	movwf	eval_poly@n
  8410  0AD7  3000               	movlw	0
  8411  0AD8  00C3               	movwf	eval_poly@n+1
  8412  0AD9  3196  26D5  318A   	fcall	_eval_poly
  8413  0ADC  0020               	movlb	0	; select bank0
  8414  0ADD  083D               	movf	?_eval_poly,w
  8415  0ADE  00C7               	movwf	log@x
  8416  0ADF  083E               	movf	?_eval_poly+1,w
  8417  0AE0  00C8               	movwf	log@x+1
  8418  0AE1  083F               	movf	?_eval_poly+2,w
  8419  0AE2  00C9               	movwf	log@x+2
  8420  0AE3  0847               	movf	log@x,w
  8421  0AE4  00B0               	movwf	___ftadd@f1
  8422  0AE5  0848               	movf	log@x+1,w
  8423  0AE6  00B1               	movwf	___ftadd@f1+1
  8424  0AE7  0849               	movf	log@x+2,w
  8425  0AE8  00B2               	movwf	___ftadd@f1+2
  8426  0AE9  3072               	movlw	114
  8427  0AEA  00A0               	movwf	___ftmul@f1
  8428  0AEB  3031               	movlw	49
  8429  0AEC  00A1               	movwf	___ftmul@f1+1
  8430  0AED  303F               	movlw	63
  8431  0AEE  00A2               	movwf	___ftmul@f1+2
  8432  0AEF  084C               	movf	log@exponent+1,w
  8433  0AF0  00F9               	movwf	___awtoft@c+1
  8434  0AF1  084B               	movf	log@exponent,w
  8435  0AF2  00F8               	movwf	___awtoft@c
  8436  0AF3  3193  23D3  318A   	fcall	___awtoft
  8437  0AF6  0878               	movf	?___awtoft,w
  8438  0AF7  0020               	movlb	0	; select bank0
  8439  0AF8  00A3               	movwf	___ftmul@f2
  8440  0AF9  0879               	movf	?___awtoft+1,w
  8441  0AFA  00A4               	movwf	___ftmul@f2+1
  8442  0AFB  087A               	movf	?___awtoft+2,w
  8443  0AFC  00A5               	movwf	___ftmul@f2+2
  8444  0AFD  318B  2311  318A   	fcall	___ftmul
  8445  0B00  0020               	movlb	0	; select bank0
  8446  0B01  0820               	movf	?___ftmul,w
  8447  0B02  00B3               	movwf	___ftadd@f2
  8448  0B03  0821               	movf	?___ftmul+1,w
  8449  0B04  00B4               	movwf	___ftadd@f2+1
  8450  0B05  0822               	movf	?___ftmul+2,w
  8451  0B06  00B5               	movwf	___ftadd@f2+2
  8452  0B07  3180  2050         	fcall	___ftadd
  8453  0B09  0020               	movlb	0	; select bank0
  8454  0B0A  0830               	movf	?___ftadd,w
  8455  0B0B  00C7               	movwf	?_log
  8456  0B0C  0831               	movf	?___ftadd+1,w
  8457  0B0D  00C8               	movwf	?_log+1
  8458  0B0E  0832               	movf	?___ftadd+2,w
  8459  0B0F  00C9               	movwf	?_log+2
  8460  0B10  0008               	return
  8461  0B11                     __end_of_log:	
  8462                           
  8463                           	psect	text3
  8464  1526                     __ptext3:	
  8465 ;; *************** function _frexp *****************
  8466 ;; Defined at:
  8467 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  8468 ;; Parameters:    Size  Location     Type
  8469 ;;  value           3    0[COMMON] int 
  8470 ;;  eptr            1    3[COMMON] PTR int 
  8471 ;;		 -> log@exponent(2), 
  8472 ;; Auto vars:     Size  Location     Type
  8473 ;;		None
  8474 ;; Return value:  Size  Location     Type
  8475 ;;                  3    0[COMMON] PTR int 
  8476 ;; Registers used:
  8477 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8478 ;; Tracked objects:
  8479 ;;		On entry : 0/0
  8480 ;;		On exit  : 0/0
  8481 ;;		Unchanged: 0/0
  8482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8483 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8485 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8486 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8487 ;;Total ram usage:        6 bytes
  8488 ;; Hardware stack levels used:    1
  8489 ;; This function calls:
  8490 ;;		Nothing
  8491 ;; This function is called by:
  8492 ;;		_log
  8493 ;; This function uses a non-reentrant model
  8494 ;;
  8495                           
  8496                           
  8497                           ;psect for function _frexp
  8498  1526                     _frexp:	
  8499                           
  8500                           ;incstack = 0
  8501                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  8502  1526  0872               	movf	frexp@value+2,w
  8503  1527  0471               	iorwf	frexp@value+1,w
  8504  1528  0470               	iorwf	frexp@value,w
  8505  1529  1D03               	skipz
  8506  152A  2D38               	goto	l2470
  8507  152B  0873               	movf	frexp@eptr,w
  8508  152C  0086               	movwf	6
  8509  152D  0187               	clrf	7
  8510  152E  3000               	movlw	0
  8511  152F  3FC0               	movwi [0]fsr1
  8512  1530  3FC1               	movwi [1]fsr1
  8513  1531  3000               	movlw	0
  8514  1532  00F0               	movwf	?_frexp
  8515  1533  3000               	movlw	0
  8516  1534  00F1               	movwf	?_frexp+1
  8517  1535  3000               	movlw	0
  8518  1536  00F2               	movwf	?_frexp+2
  8519  1537  0008               	return
  8520  1538                     l2470:	
  8521  1538  0872               	movf	frexp@value+2,w
  8522  1539  397F               	andlw	127
  8523  153A  00F4               	movwf	??_frexp
  8524  153B  01F5               	clrf	??_frexp+1
  8525  153C  35F4               	lslf	??_frexp,f
  8526  153D  0DF5               	rlf	??_frexp+1,f
  8527  153E  0873               	movf	frexp@eptr,w
  8528  153F  0086               	movwf	6
  8529  1540  0187               	clrf	7
  8530  1541  0874               	movf	??_frexp,w
  8531  1542  3FC0               	movwi [0]fsr1
  8532  1543  0875               	movf	??_frexp+1,w
  8533  1544  3FC1               	movwi [1]fsr1
  8534  1545  0D71               	rlf	frexp@value+1,w
  8535  1546  0D71               	rlf	frexp@value+1,w
  8536  1547  3901               	andlw	1
  8537  1548  00F4               	movwf	??_frexp
  8538  1549  01F5               	clrf	??_frexp+1
  8539  154A  0873               	movf	frexp@eptr,w
  8540  154B  0086               	movwf	6
  8541  154C  0187               	clrf	7
  8542  154D  0874               	movf	??_frexp,w
  8543  154E  0481               	iorwf	1,f
  8544  154F  3141               	addfsr 1,1
  8545  1550  0875               	movf	??_frexp+1,w
  8546  1551  0481               	iorwf	1,f
  8547  1552  0873               	movf	frexp@eptr,w
  8548  1553  0086               	movwf	6
  8549  1554  0187               	clrf	7
  8550  1555  3082               	movlw	130
  8551  1556  0781               	addwf	1,f
  8552  1557  3141               	addfsr 1,1
  8553  1558  30FF               	movlw	255
  8554  1559  3D81               	addwfc	1,f
  8555  155A  317F               	addfsr 1,-1
  8556  155B  0872               	movf	frexp@value+2,w
  8557  155C  3980               	andlw	-128
  8558  155D  383F               	iorlw	63
  8559  155E  00F2               	movwf	frexp@value+2
  8560  155F  13F1               	bcf	frexp@value+1,7
  8561  1560  0008               	return
  8562  1561                     __end_of_frexp:	
  8563                           
  8564                           	psect	text4
  8565  16D5                     __ptext4:	
  8566 ;; *************** function _eval_poly *****************
  8567 ;; Defined at:
  8568 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  8569 ;; Parameters:    Size  Location     Type
  8570 ;;  x               3   29[BANK0 ] PTR int 
  8571 ;;  d               2   32[BANK0 ] PTR const 
  8572 ;;		 -> log@coeff(27), 
  8573 ;;  n               2   34[BANK0 ] int 
  8574 ;; Auto vars:     Size  Location     Type
  8575 ;;  res             3   36[BANK0 ] int 
  8576 ;; Return value:  Size  Location     Type
  8577 ;;                  3   29[BANK0 ] int 
  8578 ;; Registers used:
  8579 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8580 ;; Tracked objects:
  8581 ;;		On entry : 0/0
  8582 ;;		On exit  : 0/0
  8583 ;;		Unchanged: 0/0
  8584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8585 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8586 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8588 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8589 ;;Total ram usage:       10 bytes
  8590 ;; Hardware stack levels used:    1
  8591 ;; Hardware stack levels required when called:    2
  8592 ;; This function calls:
  8593 ;;		___ftadd
  8594 ;;		___ftmul
  8595 ;;		___wmul
  8596 ;; This function is called by:
  8597 ;;		_log
  8598 ;; This function uses a non-reentrant model
  8599 ;;
  8600                           
  8601                           
  8602                           ;psect for function _eval_poly
  8603  16D5                     _eval_poly:	
  8604                           
  8605                           ;incstack = 0
  8606                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8607  16D5  0020               	movlb	0	; select bank0
  8608  16D6  0843               	movf	eval_poly@n+1,w
  8609  16D7  00F1               	movwf	___wmul@multiplier+1
  8610  16D8  0842               	movf	eval_poly@n,w
  8611  16D9  00F0               	movwf	___wmul@multiplier
  8612  16DA  3003               	movlw	3
  8613  16DB  00F2               	movwf	___wmul@multiplicand
  8614  16DC  3000               	movlw	0
  8615  16DD  00F3               	movwf	___wmul@multiplicand+1
  8616  16DE  3193  237B  3196   	fcall	___wmul
  8617  16E1  0020               	movlb	0	; select bank0
  8618  16E2  0840               	movf	eval_poly@d,w
  8619  16E3  0770               	addwf	?___wmul,w
  8620  16E4  0084               	movwf	4
  8621  16E5  0841               	movf	eval_poly@d+1,w
  8622  16E6  3D71               	addwfc	?___wmul+1,w
  8623  16E7  0085               	movwf	5
  8624  16E8  3F00               	moviw [0]fsr0
  8625  16E9  00C4               	movwf	eval_poly@res
  8626  16EA  3F01               	moviw [1]fsr0
  8627  16EB  00C5               	movwf	eval_poly@res+1
  8628  16EC  3F02               	moviw [2]fsr0
  8629  16ED                     L4:	
  8630  16ED  00C6               	movwf	eval_poly@res+2
  8631  16EE  0842               	movf	eval_poly@n,w
  8632  16EF  0443               	iorwf	eval_poly@n+1,w
  8633  16F0  1903               	btfsc	3,2
  8634  16F1  2F2E               	goto	l2488
  8635  16F2  30FF               	movlw	255
  8636  16F3  07C2               	addwf	eval_poly@n,f
  8637  16F4  30FF               	movlw	255
  8638  16F5  3DC3               	addwfc	eval_poly@n+1,f
  8639  16F6  0843               	movf	eval_poly@n+1,w
  8640  16F7  00F1               	movwf	___wmul@multiplier+1
  8641  16F8  0842               	movf	eval_poly@n,w
  8642  16F9  00F0               	movwf	___wmul@multiplier
  8643  16FA  3003               	movlw	3
  8644  16FB  00F2               	movwf	___wmul@multiplicand
  8645  16FC  3000               	movlw	0
  8646  16FD  00F3               	movwf	___wmul@multiplicand+1
  8647  16FE  3193  237B  3196   	fcall	___wmul
  8648  1701  0020               	movlb	0	; select bank0
  8649  1702  0840               	movf	eval_poly@d,w
  8650  1703  0770               	addwf	?___wmul,w
  8651  1704  0084               	movwf	4
  8652  1705  0841               	movf	eval_poly@d+1,w
  8653  1706  3D71               	addwfc	?___wmul+1,w
  8654  1707  0085               	movwf	5
  8655  1708  3F00               	moviw [0]fsr0
  8656  1709  00B0               	movwf	___ftadd@f1
  8657  170A  3F01               	moviw [1]fsr0
  8658  170B  00B1               	movwf	___ftadd@f1+1
  8659  170C  3F02               	moviw [2]fsr0
  8660  170D  00B2               	movwf	___ftadd@f1+2
  8661  170E  0844               	movf	eval_poly@res,w
  8662  170F  00A0               	movwf	___ftmul@f1
  8663  1710  0845               	movf	eval_poly@res+1,w
  8664  1711  00A1               	movwf	___ftmul@f1+1
  8665  1712  0846               	movf	eval_poly@res+2,w
  8666  1713  00A2               	movwf	___ftmul@f1+2
  8667  1714  083D               	movf	eval_poly@x,w
  8668  1715  00A3               	movwf	___ftmul@f2
  8669  1716  083E               	movf	eval_poly@x+1,w
  8670  1717  00A4               	movwf	___ftmul@f2+1
  8671  1718  083F               	movf	eval_poly@x+2,w
  8672  1719  00A5               	movwf	___ftmul@f2+2
  8673  171A  318B  2311  3196   	fcall	___ftmul
  8674  171D  0020               	movlb	0	; select bank0
  8675  171E  0820               	movf	?___ftmul,w
  8676  171F  00B3               	movwf	___ftadd@f2
  8677  1720  0821               	movf	?___ftmul+1,w
  8678  1721  00B4               	movwf	___ftadd@f2+1
  8679  1722  0822               	movf	?___ftmul+2,w
  8680  1723  00B5               	movwf	___ftadd@f2+2
  8681  1724  3180  2050  3196   	fcall	___ftadd
  8682  1727  0020               	movlb	0	; select bank0
  8683  1728  0830               	movf	?___ftadd,w
  8684  1729  00C4               	movwf	eval_poly@res
  8685  172A  0831               	movf	?___ftadd+1,w
  8686  172B  00C5               	movwf	eval_poly@res+1
  8687  172C  0832               	movf	?___ftadd+2,w
  8688  172D  2EED               	goto	L4
  8689  172E                     l2488:	
  8690  172E  0844               	movf	eval_poly@res,w
  8691  172F  00BD               	movwf	?_eval_poly
  8692  1730  0845               	movf	eval_poly@res+1,w
  8693  1731  00BE               	movwf	?_eval_poly+1
  8694  1732  0846               	movf	eval_poly@res+2,w
  8695  1733  00BF               	movwf	?_eval_poly+2
  8696  1734  0008               	return
  8697  1735                     __end_of_eval_poly:	
  8698                           
  8699                           	psect	text5
  8700  14EB                     __ptext5:	
  8701 ;; *************** function ___ftge *****************
  8702 ;; Defined at:
  8703 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  8704 ;; Parameters:    Size  Location     Type
  8705 ;;  ff1             3    0[COMMON] float 
  8706 ;;  ff2             3    3[COMMON] float 
  8707 ;; Auto vars:     Size  Location     Type
  8708 ;;		None
  8709 ;; Return value:  Size  Location     Type
  8710 ;;		None               void
  8711 ;; Registers used:
  8712 ;;		wreg, status,2, status,0
  8713 ;; Tracked objects:
  8714 ;;		On entry : 0/0
  8715 ;;		On exit  : 0/0
  8716 ;;		Unchanged: 0/0
  8717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8718 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8720 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8721 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8722 ;;Total ram usage:        9 bytes
  8723 ;; Hardware stack levels used:    1
  8724 ;; This function calls:
  8725 ;;		Nothing
  8726 ;; This function is called by:
  8727 ;;		_log
  8728 ;; This function uses a non-reentrant model
  8729 ;;
  8730                           
  8731                           
  8732                           ;psect for function ___ftge
  8733  14EB                     ___ftge:	
  8734                           
  8735                           ;incstack = 0
  8736                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8737  14EB  1FF2               	btfss	___ftge@ff1+2,7
  8738  14EC  2D01               	goto	l2404
  8739  14ED  0970               	comf	___ftge@ff1,w
  8740  14EE  00F6               	movwf	??___ftge
  8741  14EF  0971               	comf	___ftge@ff1+1,w
  8742  14F0  00F7               	movwf	??___ftge+1
  8743  14F1  0972               	comf	___ftge@ff1+2,w
  8744  14F2  00F8               	movwf	??___ftge+2
  8745  14F3  0AF6               	incf	??___ftge,f
  8746  14F4  1903               	skipnz
  8747  14F5  0AF7               	incf	??___ftge+1,f
  8748  14F6  1903               	skipnz
  8749  14F7  0AF8               	incf	??___ftge+2,f
  8750  14F8  3000               	movlw	0
  8751  14F9  0776               	addwf	??___ftge,w
  8752  14FA  00F0               	movwf	___ftge@ff1
  8753  14FB  3000               	movlw	0
  8754  14FC  3D77               	addwfc	??___ftge+1,w
  8755  14FD  00F1               	movwf	___ftge@ff1+1
  8756  14FE  3080               	movlw	128
  8757  14FF  3D78               	addwfc	??___ftge+2,w
  8758  1500  00F2               	movwf	___ftge@ff1+2
  8759  1501                     l2404:	
  8760  1501  1FF5               	btfss	___ftge@ff2+2,7
  8761  1502  2D17               	goto	l2408
  8762  1503  0973               	comf	___ftge@ff2,w
  8763  1504  00F6               	movwf	??___ftge
  8764  1505  0974               	comf	___ftge@ff2+1,w
  8765  1506  00F7               	movwf	??___ftge+1
  8766  1507  0975               	comf	___ftge@ff2+2,w
  8767  1508  00F8               	movwf	??___ftge+2
  8768  1509  0AF6               	incf	??___ftge,f
  8769  150A  1903               	skipnz
  8770  150B  0AF7               	incf	??___ftge+1,f
  8771  150C  1903               	skipnz
  8772  150D  0AF8               	incf	??___ftge+2,f
  8773  150E  3000               	movlw	0
  8774  150F  0776               	addwf	??___ftge,w
  8775  1510  00F3               	movwf	___ftge@ff2
  8776  1511  3000               	movlw	0
  8777  1512  3D77               	addwfc	??___ftge+1,w
  8778  1513  00F4               	movwf	___ftge@ff2+1
  8779  1514  3080               	movlw	128
  8780  1515  3D78               	addwfc	??___ftge+2,w
  8781  1516  00F5               	movwf	___ftge@ff2+2
  8782  1517                     l2408:	
  8783  1517  3080               	movlw	128
  8784  1518  06F2               	xorwf	___ftge@ff1+2,f
  8785  1519  3080               	movlw	128
  8786  151A  06F5               	xorwf	___ftge@ff2+2,f
  8787  151B  0875               	movf	___ftge@ff2+2,w
  8788  151C  0272               	subwf	___ftge@ff1+2,w
  8789  151D  1D03               	skipz
  8790  151E  0008               	return
  8791  151F  0874               	movf	___ftge@ff2+1,w
  8792  1520  0271               	subwf	___ftge@ff1+1,w
  8793  1521  1D03               	skipz
  8794  1522  0008               	return
  8795  1523  0873               	movf	___ftge@ff2,w
  8796  1524  0270               	subwf	___ftge@ff1,w
  8797  1525  0008               	return
  8798  1526                     __end_of___ftge:	
  8799                           
  8800                           	psect	text6
  8801  1396                     __ptext6:	
  8802 ;; *************** function ___ftsub *****************
  8803 ;; Defined at:
  8804 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  8805 ;; Parameters:    Size  Location     Type
  8806 ;;  f2              3   29[BANK0 ] float 
  8807 ;;  f1              3   32[BANK0 ] float 
  8808 ;; Auto vars:     Size  Location     Type
  8809 ;;		None
  8810 ;; Return value:  Size  Location     Type
  8811 ;;                  3   29[BANK0 ] float 
  8812 ;; Registers used:
  8813 ;;		wreg, status,2, status,0, pclath, cstack
  8814 ;; Tracked objects:
  8815 ;;		On entry : 0/0
  8816 ;;		On exit  : 0/0
  8817 ;;		Unchanged: 0/0
  8818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8819 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8822 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8823 ;;Total ram usage:        6 bytes
  8824 ;; Hardware stack levels used:    1
  8825 ;; Hardware stack levels required when called:    2
  8826 ;; This function calls:
  8827 ;;		___ftadd
  8828 ;; This function is called by:
  8829 ;;		_tempCalc
  8830 ;; This function uses a non-reentrant model
  8831 ;;
  8832                           
  8833                           
  8834                           ;psect for function ___ftsub
  8835  1396                     ___ftsub:	
  8836                           
  8837                           ;incstack = 0
  8838                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  8839  1396  0020               	movlb	0	; select bank0
  8840  1397  083F               	movf	___ftsub@f2+2,w
  8841  1398  043E               	iorwf	___ftsub@f2+1,w
  8842  1399  043D               	iorwf	___ftsub@f2,w
  8843  139A  1903               	skipnz
  8844  139B  2B9E               	goto	l2816
  8845  139C  3080               	movlw	128
  8846  139D  06BF               	xorwf	___ftsub@f2+2,f
  8847  139E                     l2816:	
  8848  139E  0840               	movf	___ftsub@f1,w
  8849  139F  00B0               	movwf	___ftadd@f1
  8850  13A0  0841               	movf	___ftsub@f1+1,w
  8851  13A1  00B1               	movwf	___ftadd@f1+1
  8852  13A2  0842               	movf	___ftsub@f1+2,w
  8853  13A3  00B2               	movwf	___ftadd@f1+2
  8854  13A4  083D               	movf	___ftsub@f2,w
  8855  13A5  00B3               	movwf	___ftadd@f2
  8856  13A6  083E               	movf	___ftsub@f2+1,w
  8857  13A7  00B4               	movwf	___ftadd@f2+1
  8858  13A8  083F               	movf	___ftsub@f2+2,w
  8859  13A9  00B5               	movwf	___ftadd@f2+2
  8860  13AA  3180  2050         	fcall	___ftadd
  8861  13AC  0020               	movlb	0	; select bank0
  8862  13AD  0830               	movf	?___ftadd,w
  8863  13AE  00BD               	movwf	?___ftsub
  8864  13AF  0831               	movf	?___ftadd+1,w
  8865  13B0  00BE               	movwf	?___ftsub+1
  8866  13B1  0832               	movf	?___ftadd+2,w
  8867  13B2  00BF               	movwf	?___ftsub+2
  8868  13B3  0008               	return
  8869  13B4                     __end_of___ftsub:	
  8870                           
  8871                           	psect	text7
  8872  0050                     __ptext7:	
  8873 ;; *************** function ___ftadd *****************
  8874 ;; Defined at:
  8875 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  8876 ;; Parameters:    Size  Location     Type
  8877 ;;  f1              3   16[BANK0 ] float 
  8878 ;;  f2              3   19[BANK0 ] float 
  8879 ;; Auto vars:     Size  Location     Type
  8880 ;;  exp1            1   28[BANK0 ] unsigned char 
  8881 ;;  exp2            1   27[BANK0 ] unsigned char 
  8882 ;;  sign            1   26[BANK0 ] unsigned char 
  8883 ;; Return value:  Size  Location     Type
  8884 ;;                  3   16[BANK0 ] float 
  8885 ;; Registers used:
  8886 ;;		wreg, status,2, status,0, pclath, cstack
  8887 ;; Tracked objects:
  8888 ;;		On entry : 0/0
  8889 ;;		On exit  : 0/0
  8890 ;;		Unchanged: 0/0
  8891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8892 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8893 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8894 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8895 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8896 ;;Total ram usage:       13 bytes
  8897 ;; Hardware stack levels used:    1
  8898 ;; Hardware stack levels required when called:    1
  8899 ;; This function calls:
  8900 ;;		___ftpack
  8901 ;; This function is called by:
  8902 ;;		_tempCalc
  8903 ;;		___ftsub
  8904 ;;		_log
  8905 ;;		_eval_poly
  8906 ;; This function uses a non-reentrant model
  8907 ;;
  8908                           
  8909                           
  8910                           ;psect for function ___ftadd
  8911  0050                     ___ftadd:	
  8912                           
  8913                           ;incstack = 0
  8914                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8915  0050  0020               	movlb	0	; select bank0
  8916  0051  0830               	movf	___ftadd@f1,w
  8917  0052  00B6               	movwf	??___ftadd
  8918  0053  0831               	movf	___ftadd@f1+1,w
  8919  0054  00B7               	movwf	??___ftadd+1
  8920  0055  0832               	movf	___ftadd@f1+2,w
  8921  0056  00B8               	movwf	??___ftadd+2
  8922  0057  1003               	clrc
  8923  0058  0D37               	rlf	??___ftadd+1,w
  8924  0059  0D38               	rlf	??___ftadd+2,w
  8925  005A  00B9               	movwf	??___ftadd+3
  8926  005B  0839               	movf	??___ftadd+3,w
  8927  005C  00BC               	movwf	___ftadd@exp1
  8928  005D  0833               	movf	___ftadd@f2,w
  8929  005E  00B6               	movwf	??___ftadd
  8930  005F  0834               	movf	___ftadd@f2+1,w
  8931  0060  00B7               	movwf	??___ftadd+1
  8932  0061  0835               	movf	___ftadd@f2+2,w
  8933  0062  00B8               	movwf	??___ftadd+2
  8934  0063  1003               	clrc
  8935  0064  0D37               	rlf	??___ftadd+1,w
  8936  0065  0D38               	rlf	??___ftadd+2,w
  8937  0066  00B9               	movwf	??___ftadd+3
  8938  0067  0839               	movf	??___ftadd+3,w
  8939  0068  00BB               	movwf	___ftadd@exp2
  8940  0069  083C               	movf	___ftadd@exp1,w
  8941  006A  1903               	btfsc	3,2
  8942  006B  2878               	goto	l2272
  8943  006C  083B               	movf	___ftadd@exp2,w
  8944  006D  023C               	subwf	___ftadd@exp1,w
  8945  006E  1803               	skipnc
  8946  006F  287F               	goto	l2276
  8947  0070  033C               	decf	___ftadd@exp1,w
  8948  0071  3AFF               	xorlw	255
  8949  0072  073B               	addwf	___ftadd@exp2,w
  8950  0073  00B6               	movwf	??___ftadd
  8951  0074  3019               	movlw	25
  8952  0075  0236               	subwf	??___ftadd,w
  8953  0076  1C03               	skipc
  8954  0077  287F               	goto	l2276
  8955  0078                     l2272:	
  8956  0078  0833               	movf	___ftadd@f2,w
  8957  0079  00B0               	movwf	?___ftadd
  8958  007A  0834               	movf	___ftadd@f2+1,w
  8959  007B  00B1               	movwf	?___ftadd+1
  8960  007C  0835               	movf	___ftadd@f2+2,w
  8961  007D  00B2               	movwf	?___ftadd+2
  8962  007E  0008               	return
  8963  007F                     l2276:	
  8964  007F  083B               	movf	___ftadd@exp2,w
  8965  0080  1903               	btfsc	3,2
  8966  0081  0008               	return
  8967  0082  083C               	movf	___ftadd@exp1,w
  8968  0083  023B               	subwf	___ftadd@exp2,w
  8969  0084  1803               	skipnc
  8970  0085  288E               	goto	l2282
  8971  0086  033B               	decf	___ftadd@exp2,w
  8972  0087  3AFF               	xorlw	255
  8973  0088  073C               	addwf	___ftadd@exp1,w
  8974  0089  00B6               	movwf	??___ftadd
  8975  008A  3019               	movlw	25
  8976  008B  0236               	subwf	??___ftadd,w
  8977  008C  1803               	btfsc	3,0
  8978  008D  0008               	return
  8979  008E                     l2282:	
  8980  008E  3006               	movlw	6
  8981  008F  00B6               	movwf	??___ftadd
  8982  0090  0836               	movf	??___ftadd,w
  8983  0091  00BA               	movwf	___ftadd@sign
  8984  0092  1BB2               	btfsc	___ftadd@f1+2,7
  8985  0093  17BA               	bsf	___ftadd@sign,7
  8986  0094  1BB5               	btfsc	___ftadd@f2+2,7
  8987  0095  173A               	bsf	___ftadd@sign,6
  8988  0096  17B1               	bsf	___ftadd@f1+1,7
  8989  0097  30FF               	movlw	255
  8990  0098  05B0               	andwf	___ftadd@f1,f
  8991  0099  30FF               	movlw	255
  8992  009A  05B1               	andwf	___ftadd@f1+1,f
  8993  009B  3000               	movlw	0
  8994  009C  05B2               	andwf	___ftadd@f1+2,f
  8995  009D  17B4               	bsf	___ftadd@f2+1,7
  8996  009E  30FF               	movlw	255
  8997  009F  05B3               	andwf	___ftadd@f2,f
  8998  00A0  30FF               	movlw	255
  8999  00A1  05B4               	andwf	___ftadd@f2+1,f
  9000  00A2  3000               	movlw	0
  9001  00A3  05B5               	andwf	___ftadd@f2+2,f
  9002  00A4  083B               	movf	___ftadd@exp2,w
  9003  00A5  023C               	subwf	___ftadd@exp1,w
  9004  00A6  1803               	skipnc
  9005  00A7  28CA               	goto	l2304
  9006  00A8                     l2294:	
  9007  00A8  3001               	movlw	1
  9008  00A9                     u2265:	
  9009  00A9  35B3               	lslf	___ftadd@f2,f
  9010  00AA  0DB4               	rlf	___ftadd@f2+1,f
  9011  00AB  0DB5               	rlf	___ftadd@f2+2,f
  9012  00AC  0B89               	decfsz	9,f
  9013  00AD  28A9               	goto	u2265
  9014  00AE  3001               	movlw	1
  9015  00AF  02BB               	subwf	___ftadd@exp2,f
  9016  00B0  083B               	movf	___ftadd@exp2,w
  9017  00B1  063C               	xorwf	___ftadd@exp1,w
  9018  00B2  1903               	skipnz
  9019  00B3  28C5               	goto	l2302
  9020  00B4  3001               	movlw	1
  9021  00B5  02BA               	subwf	___ftadd@sign,f
  9022  00B6  083A               	movf	___ftadd@sign,w
  9023  00B7  3907               	andlw	7
  9024  00B8  1903               	btfsc	3,2
  9025  00B9  28C5               	goto	l2302
  9026  00BA  28A8               	goto	l2294
  9027  00BB                     l2300:	
  9028  00BB  3001               	movlw	1
  9029  00BC                     u2295:	
  9030  00BC  36B2               	lsrf	___ftadd@f1+2,f
  9031  00BD  0CB1               	rrf	___ftadd@f1+1,f
  9032  00BE  0CB0               	rrf	___ftadd@f1,f
  9033  00BF  0B89               	decfsz	9,f
  9034  00C0  28BC               	goto	u2295
  9035  00C1  3001               	movlw	1
  9036  00C2  00B6               	movwf	??___ftadd
  9037  00C3  0836               	movf	??___ftadd,w
  9038  00C4  07BC               	addwf	___ftadd@exp1,f
  9039  00C5                     l2302:	
  9040  00C5  083C               	movf	___ftadd@exp1,w
  9041  00C6  063B               	xorwf	___ftadd@exp2,w
  9042  00C7  1903               	btfsc	3,2
  9043  00C8  28EF               	goto	l774
  9044  00C9  28BB               	goto	l2300
  9045  00CA                     l2304:	
  9046  00CA  083C               	movf	___ftadd@exp1,w
  9047  00CB  023B               	subwf	___ftadd@exp2,w
  9048  00CC  1803               	skipnc
  9049  00CD  28EF               	goto	l774
  9050  00CE                     l2306:	
  9051  00CE  3001               	movlw	1
  9052  00CF                     u2325:	
  9053  00CF  35B0               	lslf	___ftadd@f1,f
  9054  00D0  0DB1               	rlf	___ftadd@f1+1,f
  9055  00D1  0DB2               	rlf	___ftadd@f1+2,f
  9056  00D2  0B89               	decfsz	9,f
  9057  00D3  28CF               	goto	u2325
  9058  00D4  3001               	movlw	1
  9059  00D5  02BC               	subwf	___ftadd@exp1,f
  9060  00D6  083B               	movf	___ftadd@exp2,w
  9061  00D7  063C               	xorwf	___ftadd@exp1,w
  9062  00D8  1903               	skipnz
  9063  00D9  28EB               	goto	l2314
  9064  00DA  3001               	movlw	1
  9065  00DB  02BA               	subwf	___ftadd@sign,f
  9066  00DC  083A               	movf	___ftadd@sign,w
  9067  00DD  3907               	andlw	7
  9068  00DE  1903               	btfsc	3,2
  9069  00DF  28EB               	goto	l2314
  9070  00E0  28CE               	goto	l2306
  9071  00E1                     l2312:	
  9072  00E1  3001               	movlw	1
  9073  00E2                     u2355:	
  9074  00E2  36B5               	lsrf	___ftadd@f2+2,f
  9075  00E3  0CB4               	rrf	___ftadd@f2+1,f
  9076  00E4  0CB3               	rrf	___ftadd@f2,f
  9077  00E5  0B89               	decfsz	9,f
  9078  00E6  28E2               	goto	u2355
  9079  00E7  3001               	movlw	1
  9080  00E8  00B6               	movwf	??___ftadd
  9081  00E9  0836               	movf	??___ftadd,w
  9082  00EA  07BB               	addwf	___ftadd@exp2,f
  9083  00EB                     l2314:	
  9084  00EB  083C               	movf	___ftadd@exp1,w
  9085  00EC  063B               	xorwf	___ftadd@exp2,w
  9086  00ED  1D03               	skipz
  9087  00EE  28E1               	goto	l2312
  9088  00EF                     l774:	
  9089  00EF  1FBA               	btfss	___ftadd@sign,7
  9090  00F0  2901               	goto	l2318
  9091  00F1  30FF               	movlw	255
  9092  00F2  06B0               	xorwf	___ftadd@f1,f
  9093  00F3  30FF               	movlw	255
  9094  00F4  06B1               	xorwf	___ftadd@f1+1,f
  9095  00F5  30FF               	movlw	255
  9096  00F6  06B2               	xorwf	___ftadd@f1+2,f
  9097  00F7  3001               	movlw	1
  9098  00F8  07B0               	addwf	___ftadd@f1,f
  9099  00F9  3000               	movlw	0
  9100  00FA  1803               	skipnc
  9101  00FB  3001               	movlw	1
  9102  00FC  07B1               	addwf	___ftadd@f1+1,f
  9103  00FD  3000               	movlw	0
  9104  00FE  1803               	skipnc
  9105  00FF  3001               	movlw	1
  9106  0100  07B2               	addwf	___ftadd@f1+2,f
  9107  0101                     l2318:	
  9108  0101  1F3A               	btfss	___ftadd@sign,6
  9109  0102  2913               	goto	l2322
  9110  0103  30FF               	movlw	255
  9111  0104  06B3               	xorwf	___ftadd@f2,f
  9112  0105  30FF               	movlw	255
  9113  0106  06B4               	xorwf	___ftadd@f2+1,f
  9114  0107  30FF               	movlw	255
  9115  0108  06B5               	xorwf	___ftadd@f2+2,f
  9116  0109  3001               	movlw	1
  9117  010A  07B3               	addwf	___ftadd@f2,f
  9118  010B  3000               	movlw	0
  9119  010C  1803               	skipnc
  9120  010D  3001               	movlw	1
  9121  010E  07B4               	addwf	___ftadd@f2+1,f
  9122  010F  3000               	movlw	0
  9123  0110  1803               	skipnc
  9124  0111  3001               	movlw	1
  9125  0112  07B5               	addwf	___ftadd@f2+2,f
  9126  0113                     l2322:	
  9127  0113  01BA               	clrf	___ftadd@sign
  9128  0114  0830               	movf	___ftadd@f1,w
  9129  0115  07B3               	addwf	___ftadd@f2,f
  9130  0116  0831               	movf	___ftadd@f1+1,w
  9131  0117  3DB4               	addwfc	___ftadd@f2+1,f
  9132  0118  0832               	movf	___ftadd@f1+2,w
  9133  0119  3DB5               	addwfc	___ftadd@f2+2,f
  9134  011A  1FB5               	btfss	___ftadd@f2+2,7
  9135  011B  292E               	goto	l2332
  9136  011C  30FF               	movlw	255
  9137  011D  06B3               	xorwf	___ftadd@f2,f
  9138  011E  30FF               	movlw	255
  9139  011F  06B4               	xorwf	___ftadd@f2+1,f
  9140  0120  30FF               	movlw	255
  9141  0121  06B5               	xorwf	___ftadd@f2+2,f
  9142  0122  3001               	movlw	1
  9143  0123  07B3               	addwf	___ftadd@f2,f
  9144  0124  3000               	movlw	0
  9145  0125  1803               	skipnc
  9146  0126  3001               	movlw	1
  9147  0127  07B4               	addwf	___ftadd@f2+1,f
  9148  0128  3000               	movlw	0
  9149  0129  1803               	skipnc
  9150  012A  3001               	movlw	1
  9151  012B  07B5               	addwf	___ftadd@f2+2,f
  9152  012C  01BA               	clrf	___ftadd@sign
  9153  012D  0ABA               	incf	___ftadd@sign,f
  9154  012E                     l2332:	
  9155  012E  0833               	movf	___ftadd@f2,w
  9156  012F  00F0               	movwf	___ftpack@arg
  9157  0130  0834               	movf	___ftadd@f2+1,w
  9158  0131  00F1               	movwf	___ftpack@arg+1
  9159  0132  0835               	movf	___ftadd@f2+2,w
  9160  0133  00F2               	movwf	___ftpack@arg+2
  9161  0134  083C               	movf	___ftadd@exp1,w
  9162  0135  00B6               	movwf	??___ftadd
  9163  0136  0836               	movf	??___ftadd,w
  9164  0137  00F3               	movwf	___ftpack@exp
  9165  0138  083A               	movf	___ftadd@sign,w
  9166  0139  00B7               	movwf	??___ftadd+1
  9167  013A  0837               	movf	??___ftadd+1,w
  9168  013B  00F4               	movwf	___ftpack@sign
  9169  013C  3197  2735         	fcall	___ftpack
  9170  013E  0870               	movf	?___ftpack,w
  9171  013F  0020               	movlb	0	; select bank0
  9172  0140  00B0               	movwf	?___ftadd
  9173  0141  0871               	movf	?___ftpack+1,w
  9174  0142  00B1               	movwf	?___ftadd+1
  9175  0143  0872               	movf	?___ftpack+2,w
  9176  0144  00B2               	movwf	?___ftadd+2
  9177  0145  0008               	return
  9178  0146                     __end_of___ftadd:	
  9179                           
  9180                           	psect	text8
  9181  0D65                     __ptext8:	
  9182 ;; *************** function _readIAnalog *****************
  9183 ;; Defined at:
  9184 ;;		line 77 in file "adc.c"
  9185 ;; Parameters:    Size  Location     Type
  9186 ;;  channel         2    6[BANK0 ] unsigned int 
  9187 ;; Auto vars:     Size  Location     Type
  9188 ;;  value           2   11[COMMON] int 
  9189 ;;  analog_chann    2    9[COMMON] unsigned int 
  9190 ;; Return value:  Size  Location     Type
  9191 ;;                  2    6[BANK0 ] int 
  9192 ;; Registers used:
  9193 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9194 ;; Tracked objects:
  9195 ;;		On entry : 0/0
  9196 ;;		On exit  : 0/0
  9197 ;;		Unchanged: 0/0
  9198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9199 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9200 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9201 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9202 ;;      Totals:         4      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9203 ;;Total ram usage:       24 bytes
  9204 ;; Hardware stack levels used:    1
  9205 ;; Hardware stack levels required when called:    1
  9206 ;; This function calls:
  9207 ;;		_ADCRead
  9208 ;;		___aldiv
  9209 ;;		___wmul
  9210 ;; This function is called by:
  9211 ;;		_main
  9212 ;; This function uses a non-reentrant model
  9213 ;;
  9214                           
  9215                           
  9216                           ;psect for function _readIAnalog
  9217  0D65                     _readIAnalog:	
  9218                           
  9219                           ;adc.c: 79: int16_t value;
  9220                           ;adc.c: 81: uint16_t analog_channel = channels[channel];
  9221                           
  9222                           ;incstack = 0
  9223                           ; Regs used in _readIAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9224  0D65  0020               	movlb	0	; select bank0
  9225  0D66  3526               	lslf	readIAnalog@channel,w
  9226  0D67  3E30               	addlw	(low (_channels| (0+256)))& (0+255)
  9227  0D68  0086               	movwf	6
  9228  0D69  3001               	movlw	1	; select bank2/3
  9229  0D6A  0087               	movwf	7
  9230  0D6B  3F40               	moviw [0]fsr1
  9231  0D6C  00F9               	movwf	readIAnalog@analog_channel
  9232  0D6D  3F41               	moviw [1]fsr1
  9233  0D6E  00FA               	movwf	readIAnalog@analog_channel+1
  9234                           
  9235                           ;adc.c: 83: value = ADCRead(analog_channel);
  9236  0D6F  0879               	movf	readIAnalog@analog_channel,w
  9237  0D70  3193  233A  318D   	fcall	_ADCRead
  9238  0D73  0871               	movf	?_ADCRead+1,w
  9239  0D74  00FC               	movwf	readIAnalog@value+1
  9240  0D75  0870               	movf	?_ADCRead,w
  9241  0D76  00FB               	movwf	readIAnalog@value
  9242                           
  9243                           ;adc.c: 85: totals[channel] = totals[channel]-samples[channel][sampleIndex];
  9244  0D77  0020               	movlb	0	; select bank0
  9245  0D78  0826               	movf	readIAnalog@channel,w
  9246  0D79  00A8               	movwf	??_readIAnalog
  9247  0D7A  3001               	movlw	1
  9248  0D7B                     u3115:	
  9249  0D7B  35A8               	lslf	??_readIAnalog,f
  9250  0D7C  3EFF               	addlw	-1
  9251  0D7D  1D03               	skipz
  9252  0D7E  2D7B               	goto	u3115
  9253  0D7F  3528               	lslf	??_readIAnalog,w
  9254  0D80  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9255  0D81  0086               	movwf	6
  9256  0D82  3001               	movlw	1	; select bank2/3
  9257  0D83  0087               	movwf	7
  9258  0D84  3F40               	moviw [0]fsr1
  9259  0D85  00A9               	movwf	??_readIAnalog+1
  9260  0D86  3F41               	moviw [1]fsr1
  9261  0D87  00AA               	movwf	??_readIAnalog+2
  9262  0D88  3F42               	moviw [2]fsr1
  9263  0D89  00AB               	movwf	??_readIAnalog+3
  9264  0D8A  3F43               	moviw [3]fsr1
  9265  0D8B  00AC               	movwf	??_readIAnalog+4
  9266  0D8C  0021               	movlb	1	; select bank1
  9267  0D8D  0868               	movf	(_sampleIndex+1)^(0+128),w
  9268  0D8E  0020               	movlb	0	; select bank0
  9269  0D8F  00AE               	movwf	??_readIAnalog+6
  9270  0D90  0021               	movlb	1	; select bank1
  9271  0D91  0867               	movf	_sampleIndex^(0+128),w
  9272  0D92  0020               	movlb	0	; select bank0
  9273  0D93  00AD               	movwf	??_readIAnalog+5
  9274  0D94  35AD               	lslf	??_readIAnalog+5,f
  9275  0D95  0DAE               	rlf	??_readIAnalog+6,f
  9276  0D96  0827               	movf	readIAnalog@channel+1,w
  9277  0D97  00F1               	movwf	___wmul@multiplier+1
  9278  0D98  0826               	movf	readIAnalog@channel,w
  9279  0D99  00F0               	movwf	___wmul@multiplier
  9280  0D9A  3064               	movlw	100
  9281  0D9B  00F2               	movwf	___wmul@multiplicand
  9282  0D9C  3000               	movlw	0
  9283  0D9D  00F3               	movwf	___wmul@multiplicand+1
  9284  0D9E  3193  237B  318D   	fcall	___wmul
  9285  0DA1  3060               	movlw	96
  9286  0DA2  0020               	movlb	0	; select bank0
  9287  0DA3  00AF               	movwf	??_readIAnalog+7
  9288  0DA4  3022               	movlw	34
  9289  0DA5  00B0               	movwf	??_readIAnalog+8
  9290  0DA6  0870               	movf	?___wmul,w
  9291  0DA7  072F               	addwf	??_readIAnalog+7,w
  9292  0DA8  00B1               	movwf	??_readIAnalog+9
  9293  0DA9  0871               	movf	?___wmul+1,w
  9294  0DAA  3D30               	addwfc	??_readIAnalog+8,w
  9295  0DAB  00B2               	movwf	??_readIAnalog+10
  9296  0DAC  082D               	movf	??_readIAnalog+5,w
  9297  0DAD  0731               	addwf	??_readIAnalog+9,w
  9298  0DAE  0086               	movwf	6
  9299  0DAF  082E               	movf	??_readIAnalog+6,w
  9300  0DB0  3D32               	addwfc	??_readIAnalog+10,w
  9301  0DB1  0087               	movwf	7
  9302  0DB2  3F40               	moviw [0]fsr1
  9303  0DB3  00B3               	movwf	??_readIAnalog+11
  9304  0DB4  3F41               	moviw [1]fsr1
  9305  0DB5  00B4               	movwf	??_readIAnalog+12
  9306  0DB6  0833               	movf	??_readIAnalog+11,w
  9307  0DB7  00B5               	movwf	??_readIAnalog+13
  9308  0DB8  0834               	movf	??_readIAnalog+12,w
  9309  0DB9  00B6               	movwf	??_readIAnalog+14
  9310  0DBA  3000               	movlw	0
  9311  0DBB  1BB6               	btfsc	??_readIAnalog+14,7
  9312  0DBC  30FF               	movlw	255
  9313  0DBD  00B7               	movwf	??_readIAnalog+15
  9314  0DBE  00B8               	movwf	??_readIAnalog+16
  9315  0DBF  09B5               	comf	??_readIAnalog+13,f
  9316  0DC0  09B6               	comf	??_readIAnalog+14,f
  9317  0DC1  09B7               	comf	??_readIAnalog+15,f
  9318  0DC2  09B8               	comf	??_readIAnalog+16,f
  9319  0DC3  0AB5               	incf	??_readIAnalog+13,f
  9320  0DC4  1903               	skipnz
  9321  0DC5  0AB6               	incf	??_readIAnalog+14,f
  9322  0DC6  1903               	skipnz
  9323  0DC7  0AB7               	incf	??_readIAnalog+15,f
  9324  0DC8  1903               	skipnz
  9325  0DC9  0AB8               	incf	??_readIAnalog+16,f
  9326  0DCA  0835               	movf	??_readIAnalog+13,w
  9327  0DCB  07A9               	addwf	??_readIAnalog+1,f
  9328  0DCC  0836               	movf	??_readIAnalog+14,w
  9329  0DCD  3DAA               	addwfc	??_readIAnalog+2,f
  9330  0DCE  0837               	movf	??_readIAnalog+15,w
  9331  0DCF  3DAB               	addwfc	??_readIAnalog+3,f
  9332  0DD0  0838               	movf	??_readIAnalog+16,w
  9333  0DD1  3DAC               	addwfc	??_readIAnalog+4,f
  9334  0DD2  0826               	movf	readIAnalog@channel,w
  9335  0DD3  00B9               	movwf	??_readIAnalog+17
  9336  0DD4  3001               	movlw	1
  9337  0DD5                     u3125:	
  9338  0DD5  35B9               	lslf	??_readIAnalog+17,f
  9339  0DD6  3EFF               	addlw	-1
  9340  0DD7  1D03               	skipz
  9341  0DD8  2DD5               	goto	u3125
  9342  0DD9  3539               	lslf	??_readIAnalog+17,w
  9343  0DDA  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9344  0DDB  0086               	movwf	6
  9345  0DDC  3001               	movlw	1	; select bank2/3
  9346  0DDD  0087               	movwf	7
  9347  0DDE  0829               	movf	??_readIAnalog+1,w
  9348  0DDF  3FC0               	movwi [0]fsr1
  9349  0DE0  082A               	movf	??_readIAnalog+2,w
  9350  0DE1  3FC1               	movwi [1]fsr1
  9351  0DE2  082B               	movf	??_readIAnalog+3,w
  9352  0DE3  3FC2               	movwi [2]fsr1
  9353  0DE4  082C               	movf	??_readIAnalog+4,w
  9354  0DE5  3FC3               	movwi [3]fsr1
  9355                           
  9356                           ;adc.c: 87: samples[channel][sampleIndex] = value;
  9357  0DE6  0021               	movlb	1	; select bank1
  9358  0DE7  0868               	movf	(_sampleIndex+1)^(0+128),w
  9359  0DE8  0020               	movlb	0	; select bank0
  9360  0DE9  00A9               	movwf	??_readIAnalog+1
  9361  0DEA  0021               	movlb	1	; select bank1
  9362  0DEB  0867               	movf	_sampleIndex^(0+128),w
  9363  0DEC  0020               	movlb	0	; select bank0
  9364  0DED  00A8               	movwf	??_readIAnalog
  9365  0DEE  35A8               	lslf	??_readIAnalog,f
  9366  0DEF  0DA9               	rlf	??_readIAnalog+1,f
  9367  0DF0  0827               	movf	readIAnalog@channel+1,w
  9368  0DF1  00F1               	movwf	___wmul@multiplier+1
  9369  0DF2  0826               	movf	readIAnalog@channel,w
  9370  0DF3  00F0               	movwf	___wmul@multiplier
  9371  0DF4  3064               	movlw	100
  9372  0DF5  00F2               	movwf	___wmul@multiplicand
  9373  0DF6  3000               	movlw	0
  9374  0DF7  00F3               	movwf	___wmul@multiplicand+1
  9375  0DF8  3193  237B  318D   	fcall	___wmul
  9376  0DFB  3060               	movlw	96
  9377  0DFC  0020               	movlb	0	; select bank0
  9378  0DFD  00AA               	movwf	??_readIAnalog+2
  9379  0DFE  3022               	movlw	34
  9380  0DFF  00AB               	movwf	??_readIAnalog+3
  9381  0E00  0870               	movf	?___wmul,w
  9382  0E01  072A               	addwf	??_readIAnalog+2,w
  9383  0E02  00AC               	movwf	??_readIAnalog+4
  9384  0E03  0871               	movf	?___wmul+1,w
  9385  0E04  3D2B               	addwfc	??_readIAnalog+3,w
  9386  0E05  00AD               	movwf	??_readIAnalog+5
  9387  0E06  0828               	movf	??_readIAnalog,w
  9388  0E07  072C               	addwf	??_readIAnalog+4,w
  9389  0E08  0086               	movwf	6
  9390  0E09  0829               	movf	??_readIAnalog+1,w
  9391  0E0A  3D2D               	addwfc	??_readIAnalog+5,w
  9392  0E0B  0087               	movwf	7
  9393  0E0C  087B               	movf	readIAnalog@value,w
  9394  0E0D  3FC0               	movwi [0]fsr1
  9395  0E0E  087C               	movf	readIAnalog@value+1,w
  9396  0E0F  3FC1               	movwi [1]fsr1
  9397                           
  9398                           ;adc.c: 89: totals[channel] = totals[channel]+samples[channel][sampleIndex];
  9399  0E10  0826               	movf	readIAnalog@channel,w
  9400  0E11  00A8               	movwf	??_readIAnalog
  9401  0E12  3001               	movlw	1
  9402  0E13                     u3135:	
  9403  0E13  35A8               	lslf	??_readIAnalog,f
  9404  0E14  3EFF               	addlw	-1
  9405  0E15  1D03               	skipz
  9406  0E16  2E13               	goto	u3135
  9407  0E17  3528               	lslf	??_readIAnalog,w
  9408  0E18  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9409  0E19  0086               	movwf	6
  9410  0E1A  3001               	movlw	1	; select bank2/3
  9411  0E1B  0087               	movwf	7
  9412  0E1C  3F40               	moviw [0]fsr1
  9413  0E1D  00A9               	movwf	??_readIAnalog+1
  9414  0E1E  3F41               	moviw [1]fsr1
  9415  0E1F  00AA               	movwf	??_readIAnalog+2
  9416  0E20  3F42               	moviw [2]fsr1
  9417  0E21  00AB               	movwf	??_readIAnalog+3
  9418  0E22  3F43               	moviw [3]fsr1
  9419  0E23  00AC               	movwf	??_readIAnalog+4
  9420  0E24  0021               	movlb	1	; select bank1
  9421  0E25  0868               	movf	(_sampleIndex+1)^(0+128),w
  9422  0E26  0020               	movlb	0	; select bank0
  9423  0E27  00AE               	movwf	??_readIAnalog+6
  9424  0E28  0021               	movlb	1	; select bank1
  9425  0E29  0867               	movf	_sampleIndex^(0+128),w
  9426  0E2A  0020               	movlb	0	; select bank0
  9427  0E2B  00AD               	movwf	??_readIAnalog+5
  9428  0E2C  35AD               	lslf	??_readIAnalog+5,f
  9429  0E2D  0DAE               	rlf	??_readIAnalog+6,f
  9430  0E2E  0827               	movf	readIAnalog@channel+1,w
  9431  0E2F  00F1               	movwf	___wmul@multiplier+1
  9432  0E30  0826               	movf	readIAnalog@channel,w
  9433  0E31  00F0               	movwf	___wmul@multiplier
  9434  0E32  3064               	movlw	100
  9435  0E33  00F2               	movwf	___wmul@multiplicand
  9436  0E34  3000               	movlw	0
  9437  0E35  00F3               	movwf	___wmul@multiplicand+1
  9438  0E36  3193  237B  318D   	fcall	___wmul
  9439  0E39  3060               	movlw	96
  9440  0E3A  0020               	movlb	0	; select bank0
  9441  0E3B  00AF               	movwf	??_readIAnalog+7
  9442  0E3C  3022               	movlw	34
  9443  0E3D  00B0               	movwf	??_readIAnalog+8
  9444  0E3E  0870               	movf	?___wmul,w
  9445  0E3F  072F               	addwf	??_readIAnalog+7,w
  9446  0E40  00B1               	movwf	??_readIAnalog+9
  9447  0E41  0871               	movf	?___wmul+1,w
  9448  0E42  3D30               	addwfc	??_readIAnalog+8,w
  9449  0E43  00B2               	movwf	??_readIAnalog+10
  9450  0E44  082D               	movf	??_readIAnalog+5,w
  9451  0E45  0731               	addwf	??_readIAnalog+9,w
  9452  0E46  0086               	movwf	6
  9453  0E47  082E               	movf	??_readIAnalog+6,w
  9454  0E48  3D32               	addwfc	??_readIAnalog+10,w
  9455  0E49  0087               	movwf	7
  9456  0E4A  3F40               	moviw [0]fsr1
  9457  0E4B  00B3               	movwf	??_readIAnalog+11
  9458  0E4C  3F41               	moviw [1]fsr1
  9459  0E4D  00B4               	movwf	??_readIAnalog+12
  9460  0E4E  0833               	movf	??_readIAnalog+11,w
  9461  0E4F  00B5               	movwf	??_readIAnalog+13
  9462  0E50  0834               	movf	??_readIAnalog+12,w
  9463  0E51  00B6               	movwf	??_readIAnalog+14
  9464  0E52  3000               	movlw	0
  9465  0E53  1BB6               	btfsc	??_readIAnalog+14,7
  9466  0E54  30FF               	movlw	255
  9467  0E55  00B7               	movwf	??_readIAnalog+15
  9468  0E56  00B8               	movwf	??_readIAnalog+16
  9469  0E57  0835               	movf	??_readIAnalog+13,w
  9470  0E58  07A9               	addwf	??_readIAnalog+1,f
  9471  0E59  0836               	movf	??_readIAnalog+14,w
  9472  0E5A  3DAA               	addwfc	??_readIAnalog+2,f
  9473  0E5B  0837               	movf	??_readIAnalog+15,w
  9474  0E5C  3DAB               	addwfc	??_readIAnalog+3,f
  9475  0E5D  0838               	movf	??_readIAnalog+16,w
  9476  0E5E  3DAC               	addwfc	??_readIAnalog+4,f
  9477  0E5F  0826               	movf	readIAnalog@channel,w
  9478  0E60  00B9               	movwf	??_readIAnalog+17
  9479  0E61  3001               	movlw	1
  9480  0E62                     u3145:	
  9481  0E62  35B9               	lslf	??_readIAnalog+17,f
  9482  0E63  3EFF               	addlw	-1
  9483  0E64  1D03               	skipz
  9484  0E65  2E62               	goto	u3145
  9485  0E66  3539               	lslf	??_readIAnalog+17,w
  9486  0E67  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9487  0E68  0086               	movwf	6
  9488  0E69  3001               	movlw	1	; select bank2/3
  9489  0E6A  0087               	movwf	7
  9490  0E6B  0829               	movf	??_readIAnalog+1,w
  9491  0E6C  3FC0               	movwi [0]fsr1
  9492  0E6D  082A               	movf	??_readIAnalog+2,w
  9493  0E6E  3FC1               	movwi [1]fsr1
  9494  0E6F  082B               	movf	??_readIAnalog+3,w
  9495  0E70  3FC2               	movwi [2]fsr1
  9496  0E71  082C               	movf	??_readIAnalog+4,w
  9497  0E72  3FC3               	movwi [3]fsr1
  9498                           
  9499                           ;adc.c: 91: if(channel>=(4-1))
  9500  0E73  3000               	movlw	0
  9501  0E74  0227               	subwf	readIAnalog@channel+1,w
  9502  0E75  3003               	movlw	3
  9503  0E76  1903               	skipnz
  9504  0E77  0226               	subwf	readIAnalog@channel,w
  9505  0E78  1C03               	skipc
  9506  0E79  2E88               	goto	l2856
  9507                           
  9508                           ;adc.c: 92: {
  9509                           ;adc.c: 93: sampleIndex+=1;
  9510  0E7A  3001               	movlw	1
  9511  0E7B  0021               	movlb	1	; select bank1
  9512  0E7C  07E7               	addwf	_sampleIndex^(0+128),f
  9513  0E7D  3000               	movlw	0
  9514  0E7E  3DE8               	addwfc	(_sampleIndex+1)^(0+128),f
  9515                           
  9516                           ;adc.c: 94: if(sampleIndex >= 50)sampleIndex = 0;
  9517  0E7F  3000               	movlw	0
  9518  0E80  0268               	subwf	(_sampleIndex+1)^(0+128),w
  9519  0E81  3032               	movlw	50
  9520  0E82  1903               	skipnz
  9521  0E83  0267               	subwf	_sampleIndex^(0+128),w
  9522  0E84  1C03               	skipc
  9523  0E85  2E88               	goto	l2856
  9524  0E86  01E7               	clrf	_sampleIndex^(0+128)
  9525  0E87  01E8               	clrf	(_sampleIndex+1)^(0+128)
  9526  0E88                     l2856:	
  9527                           
  9528                           ;adc.c: 95: }
  9529                           ;adc.c: 97: value = totals[channel]/50;
  9530  0E88  3000               	movlw	0
  9531  0E89  00F3               	movwf	___aldiv@divisor+3
  9532  0E8A  3000               	movlw	0
  9533  0E8B  00F2               	movwf	___aldiv@divisor+2
  9534  0E8C  3000               	movlw	0
  9535  0E8D  00F1               	movwf	___aldiv@divisor+1
  9536  0E8E  3032               	movlw	50
  9537  0E8F  00F0               	movwf	___aldiv@divisor
  9538  0E90  0020               	movlb	0	; select bank0
  9539  0E91  0826               	movf	readIAnalog@channel,w
  9540  0E92  00A8               	movwf	??_readIAnalog
  9541  0E93  3001               	movlw	1
  9542  0E94                     u3175:	
  9543  0E94  35A8               	lslf	??_readIAnalog,f
  9544  0E95  3EFF               	addlw	-1
  9545  0E96  1D03               	skipz
  9546  0E97  2E94               	goto	u3175
  9547  0E98  3528               	lslf	??_readIAnalog,w
  9548  0E99  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9549  0E9A  0086               	movwf	6
  9550  0E9B  3001               	movlw	1	; select bank2/3
  9551  0E9C  0087               	movwf	7
  9552  0E9D  3F40               	moviw [0]fsr1
  9553  0E9E  00F4               	movwf	___aldiv@dividend
  9554  0E9F  3F41               	moviw [1]fsr1
  9555  0EA0  00F5               	movwf	___aldiv@dividend+1
  9556  0EA1  3F42               	moviw [2]fsr1
  9557  0EA2  00F6               	movwf	___aldiv@dividend+2
  9558  0EA3  3F43               	moviw [3]fsr1
  9559  0EA4  00F7               	movwf	___aldiv@dividend+3
  9560  0EA5  3188  20AF         	fcall	___aldiv
  9561  0EA7  0871               	movf	?___aldiv+1,w
  9562  0EA8  00FC               	movwf	readIAnalog@value+1
  9563  0EA9  0870               	movf	?___aldiv,w
  9564  0EAA  00FB               	movwf	readIAnalog@value
  9565                           
  9566                           ;adc.c: 99: return value;
  9567  0EAB  087C               	movf	readIAnalog@value+1,w
  9568  0EAC  0020               	movlb	0	; select bank0
  9569  0EAD  00A7               	movwf	?_readIAnalog+1
  9570  0EAE  087B               	movf	readIAnalog@value,w
  9571  0EAF  00A6               	movwf	?_readIAnalog
  9572  0EB0  0008               	return
  9573  0EB1                     __end_of_readIAnalog:	
  9574                           
  9575                           	psect	text9
  9576  08AF                     __ptext9:	
  9577 ;; *************** function ___aldiv *****************
  9578 ;; Defined at:
  9579 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  9580 ;; Parameters:    Size  Location     Type
  9581 ;;  divisor         4    0[COMMON] long 
  9582 ;;  dividend        4    4[COMMON] long 
  9583 ;; Auto vars:     Size  Location     Type
  9584 ;;  quotient        4    2[BANK0 ] long 
  9585 ;;  sign            1    1[BANK0 ] unsigned char 
  9586 ;;  counter         1    0[BANK0 ] unsigned char 
  9587 ;; Return value:  Size  Location     Type
  9588 ;;                  4    0[COMMON] long 
  9589 ;; Registers used:
  9590 ;;		wreg, status,2, status,0
  9591 ;; Tracked objects:
  9592 ;;		On entry : 0/0
  9593 ;;		On exit  : 0/0
  9594 ;;		Unchanged: 0/0
  9595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9596 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9597 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9598 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9599 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9600 ;;Total ram usage:       15 bytes
  9601 ;; Hardware stack levels used:    1
  9602 ;; This function calls:
  9603 ;;		Nothing
  9604 ;; This function is called by:
  9605 ;;		_readIAnalog
  9606 ;; This function uses a non-reentrant model
  9607 ;;
  9608                           
  9609                           
  9610                           ;psect for function ___aldiv
  9611  08AF                     ___aldiv:	
  9612                           
  9613                           ;incstack = 0
  9614                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9615  08AF  0020               	movlb	0	; select bank0
  9616  08B0  01A1               	clrf	___aldiv@sign
  9617  08B1  1FF3               	btfss	___aldiv@divisor+3,7
  9618  08B2  28C0               	goto	l637
  9619  08B3  09F0               	comf	___aldiv@divisor,f
  9620  08B4  09F1               	comf	___aldiv@divisor+1,f
  9621  08B5  09F2               	comf	___aldiv@divisor+2,f
  9622  08B6  09F3               	comf	___aldiv@divisor+3,f
  9623  08B7  0AF0               	incf	___aldiv@divisor,f
  9624  08B8  1903               	skipnz
  9625  08B9  0AF1               	incf	___aldiv@divisor+1,f
  9626  08BA  1903               	skipnz
  9627  08BB  0AF2               	incf	___aldiv@divisor+2,f
  9628  08BC  1903               	skipnz
  9629  08BD  0AF3               	incf	___aldiv@divisor+3,f
  9630  08BE  01A1               	clrf	___aldiv@sign
  9631  08BF  0AA1               	incf	___aldiv@sign,f
  9632  08C0                     l637:	
  9633  08C0  1FF7               	btfss	___aldiv@dividend+3,7
  9634  08C1  28D1               	goto	l2696
  9635  08C2  09F4               	comf	___aldiv@dividend,f
  9636  08C3  09F5               	comf	___aldiv@dividend+1,f
  9637  08C4  09F6               	comf	___aldiv@dividend+2,f
  9638  08C5  09F7               	comf	___aldiv@dividend+3,f
  9639  08C6  0AF4               	incf	___aldiv@dividend,f
  9640  08C7  1903               	skipnz
  9641  08C8  0AF5               	incf	___aldiv@dividend+1,f
  9642  08C9  1903               	skipnz
  9643  08CA  0AF6               	incf	___aldiv@dividend+2,f
  9644  08CB  1903               	skipnz
  9645  08CC  0AF7               	incf	___aldiv@dividend+3,f
  9646  08CD  3001               	movlw	1
  9647  08CE  00F8               	movwf	??___aldiv
  9648  08CF  0878               	movf	??___aldiv,w
  9649  08D0  06A1               	xorwf	___aldiv@sign,f
  9650  08D1                     l2696:	
  9651  08D1  3000               	movlw	0
  9652  08D2  00A5               	movwf	___aldiv@quotient+3
  9653  08D3  3000               	movlw	0
  9654  08D4  00A4               	movwf	___aldiv@quotient+2
  9655  08D5  3000               	movlw	0
  9656  08D6  00A3               	movwf	___aldiv@quotient+1
  9657  08D7  3000               	movlw	0
  9658  08D8  00A2               	movwf	___aldiv@quotient
  9659  08D9  0873               	movf	___aldiv@divisor+3,w
  9660  08DA  0472               	iorwf	___aldiv@divisor+2,w
  9661  08DB  0471               	iorwf	___aldiv@divisor+1,w
  9662  08DC  0470               	iorwf	___aldiv@divisor,w
  9663  08DD  1903               	skipnz
  9664  08DE  291A               	goto	l2718
  9665  08DF  01A0               	clrf	___aldiv@counter
  9666  08E0  0AA0               	incf	___aldiv@counter,f
  9667  08E1                     l2704:	
  9668  08E1  1BF3               	btfsc	___aldiv@divisor+3,7
  9669  08E2  28EF               	goto	l2706
  9670  08E3  3001               	movlw	1
  9671  08E4                     u2795:	
  9672  08E4  35F0               	lslf	___aldiv@divisor,f
  9673  08E5  0DF1               	rlf	___aldiv@divisor+1,f
  9674  08E6  0DF2               	rlf	___aldiv@divisor+2,f
  9675  08E7  0DF3               	rlf	___aldiv@divisor+3,f
  9676  08E8  0B89               	decfsz	9,f
  9677  08E9  28E4               	goto	u2795
  9678  08EA  3001               	movlw	1
  9679  08EB  00F8               	movwf	??___aldiv
  9680  08EC  0878               	movf	??___aldiv,w
  9681  08ED  07A0               	addwf	___aldiv@counter,f
  9682  08EE  28E1               	goto	l2704
  9683  08EF                     l2706:	
  9684  08EF  3001               	movlw	1
  9685  08F0                     u2815:	
  9686  08F0  35A2               	lslf	___aldiv@quotient,f
  9687  08F1  0DA3               	rlf	___aldiv@quotient+1,f
  9688  08F2  0DA4               	rlf	___aldiv@quotient+2,f
  9689  08F3  0DA5               	rlf	___aldiv@quotient+3,f
  9690  08F4  0B89               	decfsz	9,f
  9691  08F5  28F0               	goto	u2815
  9692  08F6  0873               	movf	___aldiv@divisor+3,w
  9693  08F7  0277               	subwf	___aldiv@dividend+3,w
  9694  08F8  1D03               	skipz
  9695  08F9  2904               	goto	u2825
  9696  08FA  0872               	movf	___aldiv@divisor+2,w
  9697  08FB  0276               	subwf	___aldiv@dividend+2,w
  9698  08FC  1D03               	skipz
  9699  08FD  2904               	goto	u2825
  9700  08FE  0871               	movf	___aldiv@divisor+1,w
  9701  08FF  0275               	subwf	___aldiv@dividend+1,w
  9702  0900  1D03               	skipz
  9703  0901  2904               	goto	u2825
  9704  0902  0870               	movf	___aldiv@divisor,w
  9705  0903  0274               	subwf	___aldiv@dividend,w
  9706  0904                     u2825:	
  9707  0904  1C03               	skipc
  9708  0905  290F               	goto	l2714
  9709  0906  0870               	movf	___aldiv@divisor,w
  9710  0907  02F4               	subwf	___aldiv@dividend,f
  9711  0908  0871               	movf	___aldiv@divisor+1,w
  9712  0909  3BF5               	subwfb	___aldiv@dividend+1,f
  9713  090A  0872               	movf	___aldiv@divisor+2,w
  9714  090B  3BF6               	subwfb	___aldiv@dividend+2,f
  9715  090C  0873               	movf	___aldiv@divisor+3,w
  9716  090D  3BF7               	subwfb	___aldiv@dividend+3,f
  9717  090E  1422               	bsf	___aldiv@quotient,0
  9718  090F                     l2714:	
  9719  090F  3001               	movlw	1
  9720  0910                     u2835:	
  9721  0910  36F3               	lsrf	___aldiv@divisor+3,f
  9722  0911  0CF2               	rrf	___aldiv@divisor+2,f
  9723  0912  0CF1               	rrf	___aldiv@divisor+1,f
  9724  0913  0CF0               	rrf	___aldiv@divisor,f
  9725  0914  0B89               	decfsz	9,f
  9726  0915  2910               	goto	u2835
  9727  0916  3001               	movlw	1
  9728  0917  02A0               	subwf	___aldiv@counter,f
  9729  0918  1D03               	btfss	3,2
  9730  0919  28EF               	goto	l2706
  9731  091A                     l2718:	
  9732  091A  0821               	movf	___aldiv@sign,w
  9733  091B  1903               	btfsc	3,2
  9734  091C  2928               	goto	l2722
  9735  091D  09A2               	comf	___aldiv@quotient,f
  9736  091E  09A3               	comf	___aldiv@quotient+1,f
  9737  091F  09A4               	comf	___aldiv@quotient+2,f
  9738  0920  09A5               	comf	___aldiv@quotient+3,f
  9739  0921  0AA2               	incf	___aldiv@quotient,f
  9740  0922  1903               	skipnz
  9741  0923  0AA3               	incf	___aldiv@quotient+1,f
  9742  0924  1903               	skipnz
  9743  0925  0AA4               	incf	___aldiv@quotient+2,f
  9744  0926  1903               	skipnz
  9745  0927  0AA5               	incf	___aldiv@quotient+3,f
  9746  0928                     l2722:	
  9747  0928  0825               	movf	___aldiv@quotient+3,w
  9748  0929  00F3               	movwf	?___aldiv+3
  9749  092A  0824               	movf	___aldiv@quotient+2,w
  9750  092B  00F2               	movwf	?___aldiv+2
  9751  092C  0823               	movf	___aldiv@quotient+1,w
  9752  092D  00F1               	movwf	?___aldiv+1
  9753  092E  0822               	movf	___aldiv@quotient,w
  9754  092F  00F0               	movwf	?___aldiv
  9755  0930  0008               	return
  9756  0931                     __end_of___aldiv:	
  9757                           
  9758                           	psect	text10
  9759  082D                     __ptext10:	
  9760 ;; *************** function _readButton *****************
  9761 ;; Defined at:
  9762 ;;		line 9 in file "buttons.c"
  9763 ;; Parameters:    Size  Location     Type
  9764 ;;		None
  9765 ;; Auto vars:     Size  Location     Type
  9766 ;;		None
  9767 ;; Return value:  Size  Location     Type
  9768 ;;                  1    wreg      unsigned char 
  9769 ;; Registers used:
  9770 ;;		wreg, status,2, status,0, pclath, cstack
  9771 ;; Tracked objects:
  9772 ;;		On entry : 0/0
  9773 ;;		On exit  : 0/0
  9774 ;;		Unchanged: 0/0
  9775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9778 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9779 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9780 ;;Total ram usage:        2 bytes
  9781 ;; Hardware stack levels used:    1
  9782 ;; Hardware stack levels required when called:    1
  9783 ;; This function calls:
  9784 ;;		_ADCRead
  9785 ;; This function is called by:
  9786 ;;		_main
  9787 ;; This function uses a non-reentrant model
  9788 ;;
  9789                           
  9790                           
  9791                           ;psect for function _readButton
  9792  082D                     _readButton:	
  9793                           
  9794                           ;buttons.c: 11: readButtons = ADCRead(11);
  9795                           
  9796                           ;incstack = 0
  9797                           ; Regs used in _readButton: [wreg+status,2+status,0+pclath+cstack]
  9798  082D  300B               	movlw	11
  9799  082E  3193  233A  3188   	fcall	_ADCRead
  9800  0831  0871               	movf	?_ADCRead+1,w
  9801  0832  0021               	movlb	1	; select bank1
  9802  0833  00DC               	movwf	(_readButtons+1)^(0+128)
  9803  0834  0870               	movf	?_ADCRead,w
  9804  0835  00DB               	movwf	_readButtons^(0+128)
  9805                           
  9806                           ;buttons.c: 13: if(readButtons >= 425 && readButtons < 485)
  9807  0836  085C               	movf	(_readButtons+1)^(0+128),w
  9808  0837  3A80               	xorlw	128
  9809  0838  00F4               	movwf	??_readButton
  9810  0839  3081               	movlw	129
  9811  083A  0274               	subwf	??_readButton,w
  9812  083B  1D03               	skipz
  9813  083C  283F               	goto	u3395
  9814  083D  30A9               	movlw	169
  9815  083E  025B               	subwf	_readButtons^(0+128),w
  9816  083F                     u3395:	
  9817  083F  1C03               	skipc
  9818  0840  2851               	goto	l2944
  9819  0841  0021               	movlb	1	; select bank1
  9820  0842  085C               	movf	(_readButtons+1)^(0+128),w
  9821  0843  3A80               	xorlw	128
  9822  0844  00F4               	movwf	??_readButton
  9823  0845  3081               	movlw	129
  9824  0846  0274               	subwf	??_readButton,w
  9825  0847  1D03               	skipz
  9826  0848  284B               	goto	u3405
  9827  0849  30E5               	movlw	229
  9828  084A  025B               	subwf	_readButtons^(0+128),w
  9829  084B                     u3405:	
  9830  084B  1803               	skipnc
  9831  084C  2851               	goto	l2944
  9832                           
  9833                           ;buttons.c: 14: {
  9834                           ;buttons.c: 15: button = 1;
  9835  084D  0021               	movlb	1	; select bank1
  9836  084E  01EB               	clrf	_button^(0+128)
  9837  084F  0AEB               	incf	_button^(0+128),f
  9838                           
  9839                           ;buttons.c: 16: }
  9840  0850  287F               	goto	l2956
  9841  0851                     l2944:	
  9842                           
  9843                           ;buttons.c: 18: else if(readButtons >= 615 && readButtons < 690)
  9844  0851  0021               	movlb	1	; select bank1
  9845  0852  085C               	movf	(_readButtons+1)^(0+128),w
  9846  0853  3A80               	xorlw	128
  9847  0854  00F4               	movwf	??_readButton
  9848  0855  3082               	movlw	130
  9849  0856  0274               	subwf	??_readButton,w
  9850  0857  1D03               	skipz
  9851  0858  285B               	goto	u3415
  9852  0859  3067               	movlw	103
  9853  085A  025B               	subwf	_readButtons^(0+128),w
  9854  085B                     u3415:	
  9855  085B  1C03               	skipc
  9856  085C  286B               	goto	l2950
  9857  085D  0021               	movlb	1	; select bank1
  9858  085E  085C               	movf	(_readButtons+1)^(0+128),w
  9859  085F  3A80               	xorlw	128
  9860  0860  00F4               	movwf	??_readButton
  9861  0861  3082               	movlw	130
  9862  0862  0274               	subwf	??_readButton,w
  9863  0863  1D03               	skipz
  9864  0864  2867               	goto	u3425
  9865  0865  30B2               	movlw	178
  9866  0866  025B               	subwf	_readButtons^(0+128),w
  9867  0867                     u3425:	
  9868  0867  1803               	skipnc
  9869  0868  286B               	goto	l2950
  9870                           
  9871                           ;buttons.c: 19: {
  9872                           ;buttons.c: 20: button = 2;
  9873  0869  3002               	movlw	2
  9874  086A  2878               	goto	L6
  9875  086B                     l2950:	
  9876                           ;buttons.c: 21: }
  9877                           
  9878                           
  9879                           ;buttons.c: 23: else if(readButtons > 800)
  9880  086B  0021               	movlb	1	; select bank1
  9881  086C  085C               	movf	(_readButtons+1)^(0+128),w
  9882  086D  3A80               	xorlw	128
  9883  086E  00F4               	movwf	??_readButton
  9884  086F  3083               	movlw	131
  9885  0870  0274               	subwf	??_readButton,w
  9886  0871  1D03               	skipz
  9887  0872  2875               	goto	u3435
  9888  0873  3021               	movlw	33
  9889  0874  025B               	subwf	_readButtons^(0+128),w
  9890  0875                     u3435:	
  9891  0875  1C03               	skipc
  9892  0876  287D               	goto	l2954
  9893                           
  9894                           ;buttons.c: 24: {
  9895                           ;buttons.c: 25: button = 3;
  9896  0877  3003               	movlw	3
  9897  0878                     L6:	
  9898  0878  00F4               	movwf	??_readButton
  9899  0879  0874               	movf	??_readButton,w
  9900  087A  0021               	movlb	1	; select bank1
  9901  087B  00EB               	movwf	_button^(0+128)
  9902                           
  9903                           ;buttons.c: 26: }
  9904  087C  287F               	goto	l2956
  9905  087D                     l2954:	
  9906                           
  9907                           ;buttons.c: 28: else
  9908                           ;buttons.c: 29: {
  9909                           ;buttons.c: 30: button = 0;
  9910  087D  0021               	movlb	1	; select bank1
  9911  087E  01EB               	clrf	_button^(0+128)
  9912  087F                     l2956:	
  9913                           
  9914                           ;buttons.c: 31: }
  9915                           ;buttons.c: 33: if (button != 0)
  9916  087F  086B               	movf	_button^(0+128),w
  9917  0880  1903               	btfsc	3,2
  9918  0881  28AC               	goto	l2976
  9919                           
  9920                           ;buttons.c: 34: {
  9921                           ;buttons.c: 35: if (button != lastButton)
  9922  0882  086B               	movf	_button^(0+128),w
  9923  0883  066A               	xorwf	_lastButton^(0+128),w
  9924  0884  1903               	skipnz
  9925  0885  288B               	goto	l2964
  9926                           
  9927                           ;buttons.c: 36: {
  9928                           ;buttons.c: 37: lastButton = button;
  9929  0886  086B               	movf	_button^(0+128),w
  9930  0887  00F4               	movwf	??_readButton
  9931  0888  0874               	movf	??_readButton,w
  9932  0889  00EA               	movwf	_lastButton^(0+128)
  9933  088A  28AC               	goto	l2976
  9934  088B                     l2964:	
  9935                           ;buttons.c: 39: }
  9936                           
  9937                           ;buttons.c: 38: j = 0;
  9938                           
  9939                           
  9940                           ;buttons.c: 40: else
  9941                           ;buttons.c: 41: {
  9942                           ;buttons.c: 42: j += 1;
  9943  088B  3001               	movlw	1
  9944  088C  00F4               	movwf	??_readButton
  9945  088D  0874               	movf	??_readButton,w
  9946  088E  07E9               	addwf	_j^(0+128),f
  9947                           
  9948                           ;buttons.c: 44: if(j == 1)
  9949  088F  0369               	decf	_j^(0+128),w
  9950  0890  1D03               	btfss	3,2
  9951  0891  2894               	goto	l2970
  9952                           
  9953                           ;buttons.c: 45: {
  9954                           ;buttons.c: 46: return (lastButton);
  9955  0892  086A               	movf	_lastButton^(0+128),w
  9956  0893  0008               	return
  9957  0894                     l2970:	
  9958                           
  9959                           ;buttons.c: 47: }
  9960                           ;buttons.c: 49: if (j >10)
  9961  0894  0869               	movf	_j^(0+128),w
  9962  0895  3A80               	xorlw	128
  9963  0896  3E75               	addlw	-139
  9964  0897  1C03               	skipc
  9965  0898  28AD               	goto	l2978
  9966                           
  9967                           ;buttons.c: 50: {
  9968                           ;buttons.c: 51: _delay((unsigned long)((25)*(32000000/4000.0)));
  9969  0899  3002               	movlw	2
  9970  089A  00F5               	movwf	??_readButton+1
  9971  089B  3004               	movlw	4
  9972  089C  00F4               	movwf	??_readButton
  9973  089D  30BA               	movlw	186
  9974  089E                     u3957:	
  9975  089E  0B89               	decfsz	9,f
  9976  089F  289E               	goto	u3957
  9977  08A0  0BF4               	decfsz	??_readButton,f
  9978  08A1  289E               	goto	u3957
  9979  08A2  0BF5               	decfsz	??_readButton+1,f
  9980  08A3  289E               	goto	u3957
  9981  08A4  3200               	nop2
  9982                           
  9983                           ;buttons.c: 52: j = 10;
  9984  08A5  300A               	movlw	10
  9985  08A6  00F4               	movwf	??_readButton
  9986  08A7  0874               	movf	??_readButton,w
  9987  08A8  0021               	movlb	1	; select bank1
  9988  08A9  00E9               	movwf	_j^(0+128)
  9989                           
  9990                           ;buttons.c: 53: return (lastButton);
  9991  08AA  086A               	movf	_lastButton^(0+128),w
  9992  08AB  0008               	return
  9993  08AC                     l2976:	
  9994                           ;buttons.c: 54: }
  9995                           ;buttons.c: 55: }
  9996                           ;buttons.c: 56: goto end;
  9997                           
  9998                           
  9999                           ;buttons.c: 57: }
 10000                           ;buttons.c: 59: j = 0;
 10001  08AC  01E9               	clrf	_j^(0+128)
 10002  08AD                     l2978:	
 10003                           ;buttons.c: 61: end:
 10004                           
 10005                           
 10006                           ;buttons.c: 63: return (0);
 10007  08AD  3000               	movlw	0
 10008  08AE  0008               	return
 10009  08AF                     __end_of_readButton:	
 10010                           
 10011                           	psect	text11
 10012  133A                     __ptext11:	
 10013 ;; *************** function _ADCRead *****************
 10014 ;; Defined at:
 10015 ;;		line 21 in file "adc.c"
 10016 ;; Parameters:    Size  Location     Type
 10017 ;;  channel         1    wreg     enum E14259
 10018 ;; Auto vars:     Size  Location     Type
 10019 ;;  channel         1    3[COMMON] enum E14259
 10020 ;; Return value:  Size  Location     Type
 10021 ;;                  2    0[COMMON] int 
 10022 ;; Registers used:
 10023 ;;		wreg
 10024 ;; Tracked objects:
 10025 ;;		On entry : 0/0
 10026 ;;		On exit  : 0/0
 10027 ;;		Unchanged: 0/0
 10028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10029 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10030 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10032 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10033 ;;Total ram usage:        4 bytes
 10034 ;; Hardware stack levels used:    1
 10035 ;; This function calls:
 10036 ;;		Nothing
 10037 ;; This function is called by:
 10038 ;;		_readIAnalog
 10039 ;;		_readButton
 10040 ;;		_main
 10041 ;; This function uses a non-reentrant model
 10042 ;;
 10043                           
 10044                           
 10045                           ;psect for function _ADCRead
 10046  133A                     _ADCRead:	
 10047                           
 10048                           ;incstack = 0
 10049                           ; Regs used in _ADCRead: [wreg]
 10050                           ;ADCRead@channel stored from wreg
 10051  133A  00F3               	movwf	ADCRead@channel
 10052                           
 10053                           ;adc.c: 23: ADPCH = channel_VSS;
 10054  133B  303C               	movlw	60
 10055  133C  0021               	movlb	1	; select bank1
 10056  133D  009E               	movwf	30	;volatile
 10057                           
 10058                           ;adc.c: 25: ADCON0bits.ADON = 1;
 10059  133E  1793               	bsf	19,7	;volatile
 10060                           
 10061                           ;adc.c: 27: ADCON0bits.ADCONT = 0;
 10062  133F  1313               	bcf	19,6	;volatile
 10063                           
 10064                           ;adc.c: 29: ADCON0bits.ADGO = 1;
 10065  1340  1413               	bsf	19,0	;volatile
 10066  1341                     l57:	
 10067                           ;adc.c: 32: {
 10068                           
 10069                           ;adc.c: 31: while(ADCON0bits.ADGO)
 10070                           
 10071  1341  1813               	btfsc	19,0	;volatile
 10072  1342  2B41               	goto	l57
 10073                           
 10074                           ;adc.c: 33: }
 10075                           ;adc.c: 35: ADPCH = channel;
 10076  1343  0873               	movf	ADCRead@channel,w
 10077  1344  009E               	movwf	30	;volatile
 10078                           
 10079                           ;adc.c: 37: ADCON0bits.ADON = 1;
 10080  1345  1793               	bsf	19,7	;volatile
 10081                           
 10082                           ;adc.c: 39: ADCON0bits.ADCONT = 0;
 10083  1346  1313               	bcf	19,6	;volatile
 10084                           
 10085                           ;adc.c: 41: ADCON0bits.ADGO = 1;
 10086  1347  1413               	bsf	19,0	;volatile
 10087  1348                     l60:	
 10088                           ;adc.c: 44: {
 10089                           
 10090                           ;adc.c: 43: while(ADCON0bits.ADGO)
 10091                           
 10092  1348  1813               	btfsc	19,0	;volatile
 10093  1349  2B48               	goto	l60
 10094                           
 10095                           ;adc.c: 45: }
 10096                           ;adc.c: 47: return ((ADRESH<<8)+ADRESL);
 10097  134A  080D               	movf	13,w	;volatile
 10098  134B  00F1               	movwf	?_ADCRead+1
 10099  134C  080C               	movf	12,w	;volatile
 10100  134D  00F0               	movwf	?_ADCRead
 10101  134E  0008               	return
 10102  134F                     __end_of_ADCRead:	
 10103                           
 10104                           	psect	text12
 10105  0EB1                     __ptext12:	
 10106 ;; *************** function _cc_cv_mode *****************
 10107 ;; Defined at:
 10108 ;;		line 83 in file "battery_charger.c"
 10109 ;; Parameters:    Size  Location     Type
 10110 ;;  z               1    wreg     unsigned char 
 10111 ;; Auto vars:     Size  Location     Type
 10112 ;;  z               1   37[BANK0 ] unsigned char 
 10113 ;; Return value:  Size  Location     Type
 10114 ;;                  1    wreg      void 
 10115 ;; Registers used:
 10116 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10117 ;; Tracked objects:
 10118 ;;		On entry : 0/0
 10119 ;;		On exit  : 0/0
 10120 ;;		Unchanged: 0/0
 10121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10123 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10124 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10125 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10126 ;;Total ram usage:        8 bytes
 10127 ;; Hardware stack levels used:    1
 10128 ;; Hardware stack levels required when called:    2
 10129 ;; This function calls:
 10130 ;;		___awtoft
 10131 ;;		___ftmul
 10132 ;;		___fttol
 10133 ;; This function is called by:
 10134 ;;		_main
 10135 ;; This function uses a non-reentrant model
 10136 ;;
 10137                           
 10138                           
 10139                           ;psect for function _cc_cv_mode
 10140  0EB1                     _cc_cv_mode:	
 10141                           
 10142                           ;incstack = 0
 10143                           ; Regs used in _cc_cv_mode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10144                           ;cc_cv_mode@z stored from wreg
 10145  0EB1  0020               	movlb	0	; select bank0
 10146  0EB2  00C5               	movwf	cc_cv_mode@z
 10147                           
 10148                           ;battery_charger.c: 85: if(voltage[z]>=Vref[z])
 10149  0EB3  3545               	lslf	cc_cv_mode@z,w
 10150  0EB4  3EC5               	addlw	(low (_Vref| 0))& (0+255)
 10151  0EB5  0086               	movwf	6
 10152  0EB6  0187               	clrf	7
 10153  0EB7  3F40               	moviw [0]fsr1
 10154  0EB8  00BE               	movwf	??_cc_cv_mode
 10155  0EB9  3F41               	moviw [1]fsr1
 10156  0EBA  00BF               	movwf	??_cc_cv_mode+1
 10157  0EBB  3545               	lslf	cc_cv_mode@z,w
 10158  0EBC  3EB0               	addlw	(low (_voltage| 0))& (0+255)
 10159  0EBD  0086               	movwf	6
 10160  0EBE  0187               	clrf	7
 10161  0EBF  3F40               	moviw [0]fsr1
 10162  0EC0  00C0               	movwf	??_cc_cv_mode+2
 10163  0EC1  3F41               	moviw [1]fsr1
 10164  0EC2  00C1               	movwf	??_cc_cv_mode+3
 10165  0EC3  0841               	movf	??_cc_cv_mode+3,w
 10166  0EC4  3A80               	xorlw	128
 10167  0EC5  00C2               	movwf	??_cc_cv_mode+4
 10168  0EC6  083F               	movf	??_cc_cv_mode+1,w
 10169  0EC7  3A80               	xorlw	128
 10170  0EC8  0242               	subwf	??_cc_cv_mode+4,w
 10171  0EC9  1D03               	skipz
 10172  0ECA  2ECD               	goto	u3295
 10173  0ECB  083E               	movf	??_cc_cv_mode,w
 10174  0ECC  0240               	subwf	??_cc_cv_mode+2,w
 10175  0ECD                     u3295:	
 10176  0ECD  1C03               	skipc
 10177  0ECE  2F0D               	goto	l2920
 10178                           
 10179                           ;battery_charger.c: 86: {
 10180                           ;battery_charger.c: 87: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 10181  0ECF  0020               	movlb	0	; select bank0
 10182  0ED0  0845               	movf	cc_cv_mode@z,w
 10183  0ED1  3EDD               	addlw	(low (_VHoldMode| 0))& (0+255)
 10184  0ED2  0086               	movwf	6
 10185  0ED3  0187               	clrf	7
 10186  0ED4  0801               	movf	1,w
 10187  0ED5  3A80               	xorlw	128
 10188  0ED6  3E77               	addlw	-137
 10189  0ED7  1803               	skipnc
 10190  0ED8  2EE1               	goto	l127
 10191  0ED9  3001               	movlw	1
 10192  0EDA  00BE               	movwf	??_cc_cv_mode
 10193  0EDB  0845               	movf	cc_cv_mode@z,w
 10194  0EDC  3EDD               	addlw	(low (_VHoldMode| 0))& (0+255)
 10195  0EDD  0086               	movwf	6
 10196  0EDE  0187               	clrf	7
 10197  0EDF  083E               	movf	??_cc_cv_mode,w
 10198  0EE0  0781               	addwf	1,f
 10199  0EE1                     l127:	
 10200                           
 10201                           ;battery_charger.c: 88: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 10202  0EE1  0845               	movf	cc_cv_mode@z,w
 10203  0EE2  3EDD               	addlw	(low (_VHoldMode| 0))& (0+255)
 10204  0EE3  0086               	movwf	6
 10205  0EE4  0187               	clrf	7
 10206  0EE5  0801               	movf	1,w
 10207  0EE6  3A80               	xorlw	128
 10208  0EE7  3E77               	addlw	-137
 10209  0EE8  1803               	skipnc
 10210  0EE9  2EF2               	goto	l128
 10211  0EEA  3001               	movlw	1
 10212  0EEB  00BE               	movwf	??_cc_cv_mode
 10213  0EEC  0845               	movf	cc_cv_mode@z,w
 10214  0EED  3EDD               	addlw	(low (_VHoldMode| 0))& (0+255)
 10215  0EEE  0086               	movwf	6
 10216  0EEF  0187               	clrf	7
 10217  0EF0  083E               	movf	??_cc_cv_mode,w
 10218  0EF1  0781               	addwf	1,f
 10219  0EF2                     l128:	
 10220                           
 10221                           ;battery_charger.c: 90: if(cc_cv[z])
 10222  0EF2  0845               	movf	cc_cv_mode@z,w
 10223  0EF3  3EE3               	addlw	(low (_cc_cv| 0))& (0+255)
 10224  0EF4  0086               	movwf	6
 10225  0EF5  0187               	clrf	7
 10226  0EF6  0801               	movf	1,w
 10227  0EF7  1903               	btfsc	3,2
 10228  0EF8  2F00               	goto	l2916
 10229                           
 10230                           ;battery_charger.c: 91: {
 10231                           ;battery_charger.c: 92: cc_cv[z]-=1;
 10232  0EF9  0845               	movf	cc_cv_mode@z,w
 10233  0EFA  3EE3               	addlw	(low (_cc_cv| 0))& (0+255)
 10234  0EFB  0086               	movwf	6
 10235  0EFC  0187               	clrf	7
 10236  0EFD  3001               	movlw	1
 10237  0EFE  0281               	subwf	1,f
 10238                           
 10239                           ;battery_charger.c: 93: }
 10240  0EFF  2F3D               	goto	l132
 10241  0F00                     l2916:	
 10242                           
 10243                           ;battery_charger.c: 94: else
 10244                           ;battery_charger.c: 95: {
 10245                           ;battery_charger.c: 96: if(Imode[z])
 10246  0F00  0845               	movf	cc_cv_mode@z,w
 10247  0F01  3EE1               	addlw	(low (_Imode| 0))& (0+255)
 10248  0F02  0086               	movwf	6
 10249  0F03  0187               	clrf	7
 10250  0F04  0801               	movf	1,w
 10251  0F05  1903               	btfsc	3,2
 10252  0F06  2F3D               	goto	l132
 10253                           
 10254                           ;battery_charger.c: 97: {
 10255                           ;battery_charger.c: 98: Imode[z]=0;
 10256  0F07  0845               	movf	cc_cv_mode@z,w
 10257  0F08  3EE1               	addlw	(low (_Imode| 0))& (0+255)
 10258  0F09  0086               	movwf	6
 10259  0F0A  0187               	clrf	7
 10260  0F0B  0181               	clrf	1
 10261                           
 10262                           ;battery_charger.c: 99: }
 10263                           ;battery_charger.c: 100: }
 10264                           ;battery_charger.c: 101: }
 10265  0F0C  2F3D               	goto	l132
 10266  0F0D                     l2920:	
 10267                           
 10268                           ;battery_charger.c: 102: else
 10269                           ;battery_charger.c: 103: {
 10270                           ;battery_charger.c: 104: VHoldMode[z]-=1;
 10271  0F0D  30FF               	movlw	255
 10272  0F0E  0020               	movlb	0	; select bank0
 10273  0F0F  00BE               	movwf	??_cc_cv_mode
 10274  0F10  0845               	movf	cc_cv_mode@z,w
 10275  0F11  3EDD               	addlw	(low (_VHoldMode| 0))& (0+255)
 10276  0F12  0086               	movwf	6
 10277  0F13  0187               	clrf	7
 10278  0F14  083E               	movf	??_cc_cv_mode,w
 10279  0F15  0781               	addwf	1,f
 10280                           
 10281                           ;battery_charger.c: 105: if(VHoldMode[z]<(9*-1))
 10282  0F16  0845               	movf	cc_cv_mode@z,w
 10283  0F17  3EDD               	addlw	(low (_VHoldMode| 0))& (0+255)
 10284  0F18  0086               	movwf	6
 10285  0F19  0187               	clrf	7
 10286  0F1A  0801               	movf	1,w
 10287  0F1B  3A80               	xorlw	128
 10288  0F1C  3E89               	addlw	137
 10289  0F1D  1803               	skipnc
 10290  0F1E  2F3D               	goto	l132
 10291                           
 10292                           ;battery_charger.c: 106: {
 10293                           ;battery_charger.c: 107: batteryState[z]=CHARGE;
 10294  0F1F  3004               	movlw	4
 10295  0F20  00BE               	movwf	??_cc_cv_mode
 10296  0F21  0845               	movf	cc_cv_mode@z,w
 10297  0F22  3EE5               	addlw	(low (_batteryState| 0))& (0+255)
 10298  0F23  0086               	movwf	6
 10299  0F24  0187               	clrf	7
 10300  0F25  083E               	movf	??_cc_cv_mode,w
 10301  0F26  0081               	movwf	1
 10302                           
 10303                           ;battery_charger.c: 108: Imode[z]=1;
 10304  0F27  0845               	movf	cc_cv_mode@z,w
 10305  0F28  3EE1               	addlw	(low (_Imode| 0))& (0+255)
 10306  0F29  0086               	movwf	6
 10307  0F2A  0187               	clrf	7
 10308  0F2B  0181               	clrf	1
 10309  0F2C  0A81               	incf	1,f
 10310                           
 10311                           ;battery_charger.c: 109: cc_cv[z]=(9*2);
 10312  0F2D  3012               	movlw	18
 10313  0F2E  00BE               	movwf	??_cc_cv_mode
 10314  0F2F  0845               	movf	cc_cv_mode@z,w
 10315  0F30  3EE3               	addlw	(low (_cc_cv| 0))& (0+255)
 10316  0F31  0086               	movwf	6
 10317  0F32  0187               	clrf	7
 10318  0F33  083E               	movf	??_cc_cv_mode,w
 10319  0F34  0081               	movwf	1
 10320                           
 10321                           ;battery_charger.c: 110: VHoldMode[z]=(9*-1);
 10322  0F35  30F7               	movlw	247
 10323  0F36  00BE               	movwf	??_cc_cv_mode
 10324  0F37  0845               	movf	cc_cv_mode@z,w
 10325  0F38  3EDD               	addlw	(low (_VHoldMode| 0))& (0+255)
 10326  0F39  0086               	movwf	6
 10327  0F3A  0187               	clrf	7
 10328  0F3B  083E               	movf	??_cc_cv_mode,w
 10329  0F3C  0081               	movwf	1
 10330  0F3D                     l132:	
 10331                           
 10332                           ;battery_charger.c: 111: }
 10333                           ;battery_charger.c: 112: }
 10334                           ;battery_charger.c: 114: if(current[z]>Iref[z])
 10335  0F3D  3545               	lslf	cc_cv_mode@z,w
 10336  0F3E  3EB8               	addlw	(low (_current| 0))& (0+255)
 10337  0F3F  0086               	movwf	6
 10338  0F40  0187               	clrf	7
 10339  0F41  3F40               	moviw [0]fsr1
 10340  0F42  00BE               	movwf	??_cc_cv_mode
 10341  0F43  3F41               	moviw [1]fsr1
 10342  0F44  00BF               	movwf	??_cc_cv_mode+1
 10343  0F45  3545               	lslf	cc_cv_mode@z,w
 10344  0F46  3ECD               	addlw	(low (_Iref| 0))& (0+255)
 10345  0F47  0086               	movwf	6
 10346  0F48  0187               	clrf	7
 10347  0F49  3F40               	moviw [0]fsr1
 10348  0F4A  00C0               	movwf	??_cc_cv_mode+2
 10349  0F4B  3F41               	moviw [1]fsr1
 10350  0F4C  00C1               	movwf	??_cc_cv_mode+3
 10351  0F4D  0841               	movf	??_cc_cv_mode+3,w
 10352  0F4E  3A80               	xorlw	128
 10353  0F4F  00C2               	movwf	??_cc_cv_mode+4
 10354  0F50  083F               	movf	??_cc_cv_mode+1,w
 10355  0F51  3A80               	xorlw	128
 10356  0F52  0242               	subwf	??_cc_cv_mode+4,w
 10357  0F53  1D03               	skipz
 10358  0F54  2F57               	goto	u3355
 10359  0F55  083E               	movf	??_cc_cv_mode,w
 10360  0F56  0240               	subwf	??_cc_cv_mode+2,w
 10361  0F57                     u3355:	
 10362  0F57  1803               	skipnc
 10363  0F58  0008               	return
 10364                           
 10365                           ;battery_charger.c: 115: {
 10366                           ;battery_charger.c: 116: if(!(Imode[z]))
 10367  0F59  0020               	movlb	0	; select bank0
 10368  0F5A  0845               	movf	cc_cv_mode@z,w
 10369  0F5B  3EE1               	addlw	(low (_Imode| 0))& (0+255)
 10370  0F5C  0086               	movwf	6
 10371  0F5D  0187               	clrf	7
 10372  0F5E  0801               	movf	1,w
 10373  0F5F  1D03               	btfss	3,2
 10374  0F60  0008               	return
 10375                           
 10376                           ;battery_charger.c: 117: {
 10377                           ;battery_charger.c: 118: if(batteryState[z]==FLOAT)
 10378  0F61  0845               	movf	cc_cv_mode@z,w
 10379  0F62  3EE5               	addlw	(low (_batteryState| 0))& (0+255)
 10380  0F63  0086               	movwf	6
 10381  0F64  0187               	clrf	7
 10382  0F65  3005               	movlw	5
 10383  0F66  0601               	xorwf	1,w
 10384  0F67  1D03               	btfss	3,2
 10385  0F68  0008               	return
 10386                           
 10387                           ;battery_charger.c: 119: {
 10388                           ;battery_charger.c: 120: if(voltage[z]<1350+(int16_t)((250-batteryTemp)*.24)-70)
 10389  0F69  0021               	movlb	1	; select bank1
 10390  0F6A  096D               	comf	_batteryTemp^(0+128),w
 10391  0F6B  0020               	movlb	0	; select bank0
 10392  0F6C  00BE               	movwf	??_cc_cv_mode
 10393  0F6D  0021               	movlb	1	; select bank1
 10394  0F6E  096E               	comf	(_batteryTemp+1)^(0+128),w
 10395  0F6F  0020               	movlb	0	; select bank0
 10396  0F70  00BF               	movwf	??_cc_cv_mode+1
 10397  0F71  0ABE               	incf	??_cc_cv_mode,f
 10398  0F72  1903               	skipnz
 10399  0F73  0ABF               	incf	??_cc_cv_mode+1,f
 10400  0F74  083E               	movf	??_cc_cv_mode,w
 10401  0F75  3EFA               	addlw	250
 10402  0F76  00F8               	movwf	___awtoft@c
 10403  0F77  3000               	movlw	0
 10404  0F78  3D3F               	addwfc	??_cc_cv_mode+1,w
 10405  0F79  00F9               	movwf	___awtoft@c+1
 10406  0F7A  3193  23D3  318E   	fcall	___awtoft
 10407  0F7D  0878               	movf	?___awtoft,w
 10408  0F7E  0020               	movlb	0	; select bank0
 10409  0F7F  00A3               	movwf	___ftmul@f2
 10410  0F80  0879               	movf	?___awtoft+1,w
 10411  0F81  00A4               	movwf	___ftmul@f2+1
 10412  0F82  087A               	movf	?___awtoft+2,w
 10413  0F83  00A5               	movwf	___ftmul@f2+2
 10414  0F84  30C3               	movlw	195
 10415  0F85  00A0               	movwf	___ftmul@f1
 10416  0F86  3075               	movlw	117
 10417  0F87  00A1               	movwf	___ftmul@f1+1
 10418  0F88  303E               	movlw	62
 10419  0F89  00A2               	movwf	___ftmul@f1+2
 10420  0F8A  318B  2311  318E   	fcall	___ftmul
 10421  0F8D  0020               	movlb	0	; select bank0
 10422  0F8E  0820               	movf	?___ftmul,w
 10423  0F8F  00B0               	movwf	___fttol@f1
 10424  0F90  0821               	movf	?___ftmul+1,w
 10425  0F91  00B1               	movwf	___fttol@f1+1
 10426  0F92  0822               	movf	?___ftmul+2,w
 10427  0F93  00B2               	movwf	___fttol@f1+2
 10428  0F94  3189  2131  318E   	fcall	___fttol
 10429  0F97  0020               	movlb	0	; select bank0
 10430  0F98  0830               	movf	?___fttol,w
 10431  0F99  3E00               	addlw	0
 10432  0F9A  00C0               	movwf	??_cc_cv_mode+2
 10433  0F9B  3005               	movlw	5
 10434  0F9C  3D31               	addwfc	?___fttol+1,w
 10435  0F9D  00C1               	movwf	??_cc_cv_mode+3
 10436  0F9E  3545               	lslf	cc_cv_mode@z,w
 10437  0F9F  3EB0               	addlw	(low (_voltage| 0))& (0+255)
 10438  0FA0  0086               	movwf	6
 10439  0FA1  0187               	clrf	7
 10440  0FA2  3F40               	moviw [0]fsr1
 10441  0FA3  00C2               	movwf	??_cc_cv_mode+4
 10442  0FA4  3F41               	moviw [1]fsr1
 10443  0FA5  00C3               	movwf	??_cc_cv_mode+5
 10444  0FA6  0843               	movf	??_cc_cv_mode+5,w
 10445  0FA7  3A80               	xorlw	128
 10446  0FA8  00C4               	movwf	??_cc_cv_mode+6
 10447  0FA9  0841               	movf	??_cc_cv_mode+3,w
 10448  0FAA  3A80               	xorlw	128
 10449  0FAB  0244               	subwf	??_cc_cv_mode+6,w
 10450  0FAC  1D03               	skipz
 10451  0FAD  2FB0               	goto	u3385
 10452  0FAE  0840               	movf	??_cc_cv_mode+2,w
 10453  0FAF  0242               	subwf	??_cc_cv_mode+4,w
 10454  0FB0                     u3385:	
 10455  0FB0  1803               	skipnc
 10456  0FB1  0008               	return
 10457                           
 10458                           ;battery_charger.c: 121: {
 10459                           ;battery_charger.c: 122: batteryState[z]=CHARGE;
 10460  0FB2  3004               	movlw	4
 10461  0FB3  0020               	movlb	0	; select bank0
 10462  0FB4  00BE               	movwf	??_cc_cv_mode
 10463  0FB5  0845               	movf	cc_cv_mode@z,w
 10464  0FB6  3EE5               	addlw	(low (_batteryState| 0))& (0+255)
 10465  0FB7  0086               	movwf	6
 10466  0FB8  0187               	clrf	7
 10467  0FB9  083E               	movf	??_cc_cv_mode,w
 10468  0FBA  0081               	movwf	1
 10469                           
 10470                           ;battery_charger.c: 123: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 10471  0FBB  0021               	movlb	1	; select bank1
 10472  0FBC  096D               	comf	_batteryTemp^(0+128),w
 10473  0FBD  0020               	movlb	0	; select bank0
 10474  0FBE  00BE               	movwf	??_cc_cv_mode
 10475  0FBF  0021               	movlb	1	; select bank1
 10476  0FC0  096E               	comf	(_batteryTemp+1)^(0+128),w
 10477  0FC1  0020               	movlb	0	; select bank0
 10478  0FC2  00BF               	movwf	??_cc_cv_mode+1
 10479  0FC3  0ABE               	incf	??_cc_cv_mode,f
 10480  0FC4  1903               	skipnz
 10481  0FC5  0ABF               	incf	??_cc_cv_mode+1,f
 10482  0FC6  083E               	movf	??_cc_cv_mode,w
 10483  0FC7  3EFA               	addlw	250
 10484  0FC8  00F8               	movwf	___awtoft@c
 10485  0FC9  3000               	movlw	0
 10486  0FCA  3D3F               	addwfc	??_cc_cv_mode+1,w
 10487  0FCB  00F9               	movwf	___awtoft@c+1
 10488  0FCC  3193  23D3  318E   	fcall	___awtoft
 10489  0FCF  0878               	movf	?___awtoft,w
 10490  0FD0  0020               	movlb	0	; select bank0
 10491  0FD1  00A3               	movwf	___ftmul@f2
 10492  0FD2  0879               	movf	?___awtoft+1,w
 10493  0FD3  00A4               	movwf	___ftmul@f2+1
 10494  0FD4  087A               	movf	?___awtoft+2,w
 10495  0FD5  00A5               	movwf	___ftmul@f2+2
 10496  0FD6  30C3               	movlw	195
 10497  0FD7  00A0               	movwf	___ftmul@f1
 10498  0FD8  3075               	movlw	117
 10499  0FD9  00A1               	movwf	___ftmul@f1+1
 10500  0FDA  303E               	movlw	62
 10501  0FDB  00A2               	movwf	___ftmul@f1+2
 10502  0FDC  318B  2311  318E   	fcall	___ftmul
 10503  0FDF  0020               	movlb	0	; select bank0
 10504  0FE0  0820               	movf	?___ftmul,w
 10505  0FE1  00B0               	movwf	___fttol@f1
 10506  0FE2  0821               	movf	?___ftmul+1,w
 10507  0FE3  00B1               	movwf	___fttol@f1+1
 10508  0FE4  0822               	movf	?___ftmul+2,w
 10509  0FE5  00B2               	movwf	___fttol@f1+2
 10510  0FE6  3189  2131         	fcall	___fttol
 10511  0FE8  0020               	movlb	0	; select bank0
 10512  0FE9  0830               	movf	?___fttol,w
 10513  0FEA  3E91               	addlw	145
 10514  0FEB  00C0               	movwf	??_cc_cv_mode+2
 10515  0FEC  3005               	movlw	5
 10516  0FED  3D31               	addwfc	?___fttol+1,w
 10517  0FEE  00C1               	movwf	??_cc_cv_mode+3
 10518  0FEF  3545               	lslf	cc_cv_mode@z,w
 10519  0FF0  3EC5               	addlw	(low (_Vref| 0))& (0+255)
 10520  0FF1  0086               	movwf	6
 10521  0FF2  0187               	clrf	7
 10522  0FF3  0840               	movf	??_cc_cv_mode+2,w
 10523  0FF4  3FC0               	movwi [0]fsr1
 10524  0FF5  0841               	movf	??_cc_cv_mode+3,w
 10525  0FF6  3FC1               	movwi [1]fsr1
 10526                           
 10527                           ;battery_charger.c: 124: Iref[z]=35;
 10528  0FF7  3545               	lslf	cc_cv_mode@z,w
 10529  0FF8  3ECD               	addlw	(low (_Iref| 0))& (0+255)
 10530  0FF9  0086               	movwf	6
 10531  0FFA  0187               	clrf	7
 10532  0FFB  3023               	movlw	35
 10533  0FFC  3FC0               	movwi [0]fsr1
 10534  0FFD  3000               	movlw	0
 10535  0FFE  3FC1               	movwi [1]fsr1
 10536  0FFF  0008               	return
 10537  1000                     __end_of_cc_cv_mode:	
 10538                           
 10539                           	psect	text13
 10540  000B                     __ptext13:	
 10541 ;; *************** function _calculateCurrent3 *****************
 10542 ;; Defined at:
 10543 ;;		line 421 in file "main.c"
 10544 ;; Parameters:    Size  Location     Type
 10545 ;;		None
 10546 ;; Auto vars:     Size  Location     Type
 10547 ;;		None
 10548 ;; Return value:  Size  Location     Type
 10549 ;;                  1    wreg      void 
 10550 ;; Registers used:
 10551 ;;		wreg, status,2, status,0, pclath, cstack
 10552 ;; Tracked objects:
 10553 ;;		On entry : 0/0
 10554 ;;		On exit  : 0/0
 10555 ;;		Unchanged: 0/0
 10556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10559 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10560 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10561 ;;Total ram usage:        3 bytes
 10562 ;; Hardware stack levels used:    1
 10563 ;; Hardware stack levels required when called:    2
 10564 ;; This function calls:
 10565 ;;		___awtoft
 10566 ;;		___ftdiv
 10567 ;;		___fttol
 10568 ;; This function is called by:
 10569 ;;		_main
 10570 ;; This function uses a non-reentrant model
 10571 ;;
 10572                           
 10573                           
 10574                           ;psect for function _calculateCurrent3
 10575  000B                     _calculateCurrent3:	
 10576                           
 10577                           ;main.c: 423: if(Ianalogs[3]-545<=0)
 10578                           
 10579                           ;incstack = 0
 10580                           ; Regs used in _calculateCurrent3: [wreg+status,2+status,0+pclath+cstack]
 10581  000B  0021               	movlb	1	; select bank1
 10582  000C  0826               	movf	(_Ianalogs^(0+128)+6),w
 10583  000D  3EDF               	addlw	223
 10584  000E  0020               	movlb	0	; select bank0
 10585  000F  00BE               	movwf	??_calculateCurrent3
 10586  0010  30FD               	movlw	253
 10587  0011  0021               	movlb	1	; select bank1
 10588  0012  3D27               	addwfc	((_Ianalogs+1)^(0+128)+6),w
 10589  0013  0020               	movlb	0	; select bank0
 10590  0014  00BF               	movwf	??_calculateCurrent3+1
 10591  0015  083F               	movf	??_calculateCurrent3+1,w
 10592  0016  3A80               	xorlw	128
 10593  0017  00C0               	movwf	??_calculateCurrent3+2
 10594  0018  3080               	movlw	128
 10595  0019  0240               	subwf	??_calculateCurrent3+2,w
 10596  001A  1D03               	skipz
 10597  001B  281E               	goto	u3635
 10598  001C  3001               	movlw	1
 10599  001D  023E               	subwf	??_calculateCurrent3,w
 10600  001E                     u3635:	
 10601  001E  1803               	skipnc
 10602  001F  2824               	goto	l3094
 10603                           
 10604                           ;main.c: 424: {
 10605                           ;main.c: 425: current[3]=0;
 10606  0020  0021               	movlb	1	; select bank1
 10607  0021  01BE               	clrf	(_current^(0+128)+6)
 10608  0022  01BF               	clrf	((_current+1)^(0+128)+6)
 10609                           
 10610                           ;main.c: 426: }
 10611  0023  0008               	return
 10612  0024                     l3094:	
 10613                           
 10614                           ;main.c: 427: else
 10615                           ;main.c: 428: {
 10616                           ;main.c: 429: current[3]=(int16_t)((Ianalogs[3]-545)/2.4);
 10617  0024  0021               	movlb	1	; select bank1
 10618  0025  0826               	movf	(_Ianalogs^(0+128)+6),w
 10619  0026  3EDF               	addlw	223
 10620  0027  00F8               	movwf	___awtoft@c
 10621  0028  30FD               	movlw	253
 10622  0029  3D27               	addwfc	((_Ianalogs+1)^(0+128)+6),w
 10623  002A  00F9               	movwf	___awtoft@c+1
 10624  002B  3193  23D3  3180   	fcall	___awtoft
 10625  002E  0878               	movf	?___awtoft,w
 10626  002F  0020               	movlb	0	; select bank0
 10627  0030  00A3               	movwf	___ftdiv@f1
 10628  0031  0879               	movf	?___awtoft+1,w
 10629  0032  00A4               	movwf	___ftdiv@f1+1
 10630  0033  087A               	movf	?___awtoft+2,w
 10631  0034  00A5               	movwf	___ftdiv@f1+2
 10632  0035  309A               	movlw	154
 10633  0036  00A0               	movwf	___ftdiv@f2
 10634  0037  3019               	movlw	25
 10635  0038  00A1               	movwf	___ftdiv@f2+1
 10636  0039  3040               	movlw	64
 10637  003A  00A2               	movwf	___ftdiv@f2+2
 10638  003B  3189  21B8  3180   	fcall	___ftdiv
 10639  003E  0020               	movlb	0	; select bank0
 10640  003F  0820               	movf	?___ftdiv,w
 10641  0040  00B0               	movwf	___fttol@f1
 10642  0041  0821               	movf	?___ftdiv+1,w
 10643  0042  00B1               	movwf	___fttol@f1+1
 10644  0043  0822               	movf	?___ftdiv+2,w
 10645  0044  00B2               	movwf	___fttol@f1+2
 10646  0045  3189  2131         	fcall	___fttol
 10647  0047  0020               	movlb	0	; select bank0
 10648  0048  0831               	movf	?___fttol+1,w
 10649  0049  0021               	movlb	1	; select bank1
 10650  004A  00BF               	movwf	((_current+1)^(0+128)+6)
 10651  004B  0020               	movlb	0	; select bank0
 10652  004C  0830               	movf	?___fttol,w
 10653  004D  0021               	movlb	1	; select bank1
 10654  004E  00BE               	movwf	(_current^(0+128)+6)
 10655  004F  0008               	return
 10656  0050                     __end_of_calculateCurrent3:	
 10657                           
 10658                           	psect	text14
 10659  15EB                     __ptext14:	
 10660 ;; *************** function _calculateCurrent2 *****************
 10661 ;; Defined at:
 10662 ;;		line 408 in file "main.c"
 10663 ;; Parameters:    Size  Location     Type
 10664 ;;		None
 10665 ;; Auto vars:     Size  Location     Type
 10666 ;;		None
 10667 ;; Return value:  Size  Location     Type
 10668 ;;                  1    wreg      void 
 10669 ;; Registers used:
 10670 ;;		wreg, status,2, status,0, pclath, cstack
 10671 ;; Tracked objects:
 10672 ;;		On entry : 0/0
 10673 ;;		On exit  : 0/0
 10674 ;;		Unchanged: 0/0
 10675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10678 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10679 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10680 ;;Total ram usage:        3 bytes
 10681 ;; Hardware stack levels used:    1
 10682 ;; Hardware stack levels required when called:    2
 10683 ;; This function calls:
 10684 ;;		___awtoft
 10685 ;;		___ftdiv
 10686 ;;		___fttol
 10687 ;; This function is called by:
 10688 ;;		_main
 10689 ;; This function uses a non-reentrant model
 10690 ;;
 10691                           
 10692                           
 10693                           ;psect for function _calculateCurrent2
 10694  15EB                     _calculateCurrent2:	
 10695                           
 10696                           ;main.c: 410: if(Ianalogs[2]-535<=0)
 10697                           
 10698                           ;incstack = 0
 10699                           ; Regs used in _calculateCurrent2: [wreg+status,2+status,0+pclath+cstack]
 10700  15EB  0021               	movlb	1	; select bank1
 10701  15EC  0824               	movf	(_Ianalogs^(0+128)+4),w
 10702  15ED  3EE9               	addlw	233
 10703  15EE  0020               	movlb	0	; select bank0
 10704  15EF  00BE               	movwf	??_calculateCurrent2
 10705  15F0  30FD               	movlw	253
 10706  15F1  0021               	movlb	1	; select bank1
 10707  15F2  3D25               	addwfc	((_Ianalogs+1)^(0+128)+4),w
 10708  15F3  0020               	movlb	0	; select bank0
 10709  15F4  00BF               	movwf	??_calculateCurrent2+1
 10710  15F5  083F               	movf	??_calculateCurrent2+1,w
 10711  15F6  3A80               	xorlw	128
 10712  15F7  00C0               	movwf	??_calculateCurrent2+2
 10713  15F8  3080               	movlw	128
 10714  15F9  0240               	subwf	??_calculateCurrent2+2,w
 10715  15FA  1D03               	skipz
 10716  15FB  2DFE               	goto	u3625
 10717  15FC  3001               	movlw	1
 10718  15FD  023E               	subwf	??_calculateCurrent2,w
 10719  15FE                     u3625:	
 10720  15FE  1803               	skipnc
 10721  15FF  2E04               	goto	l3088
 10722                           
 10723                           ;main.c: 411: {
 10724                           ;main.c: 412: current[2]=0;
 10725  1600  0021               	movlb	1	; select bank1
 10726  1601  01BC               	clrf	(_current^(0+128)+4)
 10727  1602  01BD               	clrf	((_current+1)^(0+128)+4)
 10728                           
 10729                           ;main.c: 413: }
 10730  1603  0008               	return
 10731  1604                     l3088:	
 10732                           
 10733                           ;main.c: 414: else
 10734                           ;main.c: 415: {
 10735                           ;main.c: 417: current[2]=(int16_t)((Ianalogs[2]-535)/2.82);
 10736  1604  0021               	movlb	1	; select bank1
 10737  1605  0824               	movf	(_Ianalogs^(0+128)+4),w
 10738  1606  3EE9               	addlw	233
 10739  1607  00F8               	movwf	___awtoft@c
 10740  1608  30FD               	movlw	253
 10741  1609  3D25               	addwfc	((_Ianalogs+1)^(0+128)+4),w
 10742  160A  00F9               	movwf	___awtoft@c+1
 10743  160B  3193  23D3  3195   	fcall	___awtoft
 10744  160E  0878               	movf	?___awtoft,w
 10745  160F  0020               	movlb	0	; select bank0
 10746  1610  00A3               	movwf	___ftdiv@f1
 10747  1611  0879               	movf	?___awtoft+1,w
 10748  1612  00A4               	movwf	___ftdiv@f1+1
 10749  1613  087A               	movf	?___awtoft+2,w
 10750  1614  00A5               	movwf	___ftdiv@f1+2
 10751  1615  307B               	movlw	123
 10752  1616  00A0               	movwf	___ftdiv@f2
 10753  1617  3034               	movlw	52
 10754  1618  00A1               	movwf	___ftdiv@f2+1
 10755  1619  3040               	movlw	64
 10756  161A  00A2               	movwf	___ftdiv@f2+2
 10757  161B  3189  21B8  3195   	fcall	___ftdiv
 10758  161E  0020               	movlb	0	; select bank0
 10759  161F  0820               	movf	?___ftdiv,w
 10760  1620  00B0               	movwf	___fttol@f1
 10761  1621  0821               	movf	?___ftdiv+1,w
 10762  1622  00B1               	movwf	___fttol@f1+1
 10763  1623  0822               	movf	?___ftdiv+2,w
 10764  1624  00B2               	movwf	___fttol@f1+2
 10765  1625  3189  2131         	fcall	___fttol
 10766  1627  0020               	movlb	0	; select bank0
 10767  1628  0831               	movf	?___fttol+1,w
 10768  1629  0021               	movlb	1	; select bank1
 10769  162A  00BD               	movwf	((_current+1)^(0+128)+4)
 10770  162B  0020               	movlb	0	; select bank0
 10771  162C  0830               	movf	?___fttol,w
 10772  162D  0021               	movlb	1	; select bank1
 10773  162E  00BC               	movwf	(_current^(0+128)+4)
 10774  162F  0008               	return
 10775  1630                     __end_of_calculateCurrent2:	
 10776                           
 10777                           	psect	text15
 10778  15A6                     __ptext15:	
 10779 ;; *************** function _calculateCurrent1 *****************
 10780 ;; Defined at:
 10781 ;;		line 395 in file "main.c"
 10782 ;; Parameters:    Size  Location     Type
 10783 ;;		None
 10784 ;; Auto vars:     Size  Location     Type
 10785 ;;		None
 10786 ;; Return value:  Size  Location     Type
 10787 ;;                  1    wreg      void 
 10788 ;; Registers used:
 10789 ;;		wreg, status,2, status,0, pclath, cstack
 10790 ;; Tracked objects:
 10791 ;;		On entry : 0/0
 10792 ;;		On exit  : 0/0
 10793 ;;		Unchanged: 0/0
 10794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10797 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10798 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10799 ;;Total ram usage:        3 bytes
 10800 ;; Hardware stack levels used:    1
 10801 ;; Hardware stack levels required when called:    2
 10802 ;; This function calls:
 10803 ;;		___awtoft
 10804 ;;		___ftdiv
 10805 ;;		___fttol
 10806 ;; This function is called by:
 10807 ;;		_main
 10808 ;; This function uses a non-reentrant model
 10809 ;;
 10810                           
 10811                           
 10812                           ;psect for function _calculateCurrent1
 10813  15A6                     _calculateCurrent1:	
 10814                           
 10815                           ;main.c: 397: if(Ianalogs[1]-545<=0)
 10816                           
 10817                           ;incstack = 0
 10818                           ; Regs used in _calculateCurrent1: [wreg+status,2+status,0+pclath+cstack]
 10819  15A6  0021               	movlb	1	; select bank1
 10820  15A7  0822               	movf	(_Ianalogs^(0+128)+2),w
 10821  15A8  3EDF               	addlw	223
 10822  15A9  0020               	movlb	0	; select bank0
 10823  15AA  00BE               	movwf	??_calculateCurrent1
 10824  15AB  30FD               	movlw	253
 10825  15AC  0021               	movlb	1	; select bank1
 10826  15AD  3D23               	addwfc	((_Ianalogs+1)^(0+128)+2),w
 10827  15AE  0020               	movlb	0	; select bank0
 10828  15AF  00BF               	movwf	??_calculateCurrent1+1
 10829  15B0  083F               	movf	??_calculateCurrent1+1,w
 10830  15B1  3A80               	xorlw	128
 10831  15B2  00C0               	movwf	??_calculateCurrent1+2
 10832  15B3  3080               	movlw	128
 10833  15B4  0240               	subwf	??_calculateCurrent1+2,w
 10834  15B5  1D03               	skipz
 10835  15B6  2DB9               	goto	u3615
 10836  15B7  3001               	movlw	1
 10837  15B8  023E               	subwf	??_calculateCurrent1,w
 10838  15B9                     u3615:	
 10839  15B9  1803               	skipnc
 10840  15BA  2DBF               	goto	l3082
 10841                           
 10842                           ;main.c: 398: {
 10843                           ;main.c: 399: current[1]=0;
 10844  15BB  0021               	movlb	1	; select bank1
 10845  15BC  01BA               	clrf	(_current^(0+128)+2)
 10846  15BD  01BB               	clrf	((_current+1)^(0+128)+2)
 10847                           
 10848                           ;main.c: 400: }
 10849  15BE  0008               	return
 10850  15BF                     l3082:	
 10851                           
 10852                           ;main.c: 401: else
 10853                           ;main.c: 402: {
 10854                           ;main.c: 404: current[1]=(int16_t)((Ianalogs[1]-545)/1.2);
 10855  15BF  0021               	movlb	1	; select bank1
 10856  15C0  0822               	movf	(_Ianalogs^(0+128)+2),w
 10857  15C1  3EDF               	addlw	223
 10858  15C2  00F8               	movwf	___awtoft@c
 10859  15C3  30FD               	movlw	253
 10860  15C4  3D23               	addwfc	((_Ianalogs+1)^(0+128)+2),w
 10861  15C5  00F9               	movwf	___awtoft@c+1
 10862  15C6  3193  23D3  3195   	fcall	___awtoft
 10863  15C9  0878               	movf	?___awtoft,w
 10864  15CA  0020               	movlb	0	; select bank0
 10865  15CB  00A3               	movwf	___ftdiv@f1
 10866  15CC  0879               	movf	?___awtoft+1,w
 10867  15CD  00A4               	movwf	___ftdiv@f1+1
 10868  15CE  087A               	movf	?___awtoft+2,w
 10869  15CF  00A5               	movwf	___ftdiv@f1+2
 10870  15D0  309A               	movlw	154
 10871  15D1  00A0               	movwf	___ftdiv@f2
 10872  15D2  3099               	movlw	153
 10873  15D3  00A1               	movwf	___ftdiv@f2+1
 10874  15D4  303F               	movlw	63
 10875  15D5  00A2               	movwf	___ftdiv@f2+2
 10876  15D6  3189  21B8  3195   	fcall	___ftdiv
 10877  15D9  0020               	movlb	0	; select bank0
 10878  15DA  0820               	movf	?___ftdiv,w
 10879  15DB  00B0               	movwf	___fttol@f1
 10880  15DC  0821               	movf	?___ftdiv+1,w
 10881  15DD  00B1               	movwf	___fttol@f1+1
 10882  15DE  0822               	movf	?___ftdiv+2,w
 10883  15DF  00B2               	movwf	___fttol@f1+2
 10884  15E0  3189  2131         	fcall	___fttol
 10885  15E2  0020               	movlb	0	; select bank0
 10886  15E3  0831               	movf	?___fttol+1,w
 10887  15E4  0021               	movlb	1	; select bank1
 10888  15E5  00BB               	movwf	((_current+1)^(0+128)+2)
 10889  15E6  0020               	movlb	0	; select bank0
 10890  15E7  0830               	movf	?___fttol,w
 10891  15E8  0021               	movlb	1	; select bank1
 10892  15E9  00BA               	movwf	(_current^(0+128)+2)
 10893  15EA  0008               	return
 10894  15EB                     __end_of_calculateCurrent1:	
 10895                           
 10896                           	psect	text16
 10897  1561                     __ptext16:	
 10898 ;; *************** function _calculateCurrent0 *****************
 10899 ;; Defined at:
 10900 ;;		line 382 in file "main.c"
 10901 ;; Parameters:    Size  Location     Type
 10902 ;;		None
 10903 ;; Auto vars:     Size  Location     Type
 10904 ;;		None
 10905 ;; Return value:  Size  Location     Type
 10906 ;;                  1    wreg      void 
 10907 ;; Registers used:
 10908 ;;		wreg, status,2, status,0, pclath, cstack
 10909 ;; Tracked objects:
 10910 ;;		On entry : 0/0
 10911 ;;		On exit  : 0/0
 10912 ;;		Unchanged: 0/0
 10913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10916 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10917 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10918 ;;Total ram usage:        3 bytes
 10919 ;; Hardware stack levels used:    1
 10920 ;; Hardware stack levels required when called:    2
 10921 ;; This function calls:
 10922 ;;		___awtoft
 10923 ;;		___ftdiv
 10924 ;;		___fttol
 10925 ;; This function is called by:
 10926 ;;		_main
 10927 ;; This function uses a non-reentrant model
 10928 ;;
 10929                           
 10930                           
 10931                           ;psect for function _calculateCurrent0
 10932  1561                     _calculateCurrent0:	
 10933                           
 10934                           ;main.c: 384: if(Ianalogs[0]-545<=0)
 10935                           
 10936                           ;incstack = 0
 10937                           ; Regs used in _calculateCurrent0: [wreg+status,2+status,0+pclath+cstack]
 10938  1561  0021               	movlb	1	; select bank1
 10939  1562  0820               	movf	_Ianalogs^(0+128),w
 10940  1563  3EDF               	addlw	223
 10941  1564  0020               	movlb	0	; select bank0
 10942  1565  00BE               	movwf	??_calculateCurrent0
 10943  1566  30FD               	movlw	253
 10944  1567  0021               	movlb	1	; select bank1
 10945  1568  3D21               	addwfc	(_Ianalogs+1)^(0+128),w
 10946  1569  0020               	movlb	0	; select bank0
 10947  156A  00BF               	movwf	??_calculateCurrent0+1
 10948  156B  083F               	movf	??_calculateCurrent0+1,w
 10949  156C  3A80               	xorlw	128
 10950  156D  00C0               	movwf	??_calculateCurrent0+2
 10951  156E  3080               	movlw	128
 10952  156F  0240               	subwf	??_calculateCurrent0+2,w
 10953  1570  1D03               	skipz
 10954  1571  2D74               	goto	u3605
 10955  1572  3001               	movlw	1
 10956  1573  023E               	subwf	??_calculateCurrent0,w
 10957  1574                     u3605:	
 10958  1574  1803               	skipnc
 10959  1575  2D7A               	goto	l3076
 10960                           
 10961                           ;main.c: 385: {
 10962                           ;main.c: 386: current[0]=0;
 10963  1576  0021               	movlb	1	; select bank1
 10964  1577  01B8               	clrf	_current^(0+128)
 10965  1578  01B9               	clrf	(_current+1)^(0+128)
 10966                           
 10967                           ;main.c: 387: }
 10968  1579  0008               	return
 10969  157A                     l3076:	
 10970                           
 10971                           ;main.c: 388: else
 10972                           ;main.c: 389: {
 10973                           ;main.c: 390: current[0]=(int16_t)((Ianalogs[0]-545)/2.92);
 10974  157A  0021               	movlb	1	; select bank1
 10975  157B  0820               	movf	_Ianalogs^(0+128),w
 10976  157C  3EDF               	addlw	223
 10977  157D  00F8               	movwf	___awtoft@c
 10978  157E  30FD               	movlw	253
 10979  157F  3D21               	addwfc	(_Ianalogs+1)^(0+128),w
 10980  1580  00F9               	movwf	___awtoft@c+1
 10981  1581  3193  23D3  3195   	fcall	___awtoft
 10982  1584  0878               	movf	?___awtoft,w
 10983  1585  0020               	movlb	0	; select bank0
 10984  1586  00A3               	movwf	___ftdiv@f1
 10985  1587  0879               	movf	?___awtoft+1,w
 10986  1588  00A4               	movwf	___ftdiv@f1+1
 10987  1589  087A               	movf	?___awtoft+2,w
 10988  158A  00A5               	movwf	___ftdiv@f1+2
 10989  158B  30E1               	movlw	225
 10990  158C  00A0               	movwf	___ftdiv@f2
 10991  158D  303A               	movlw	58
 10992  158E  00A1               	movwf	___ftdiv@f2+1
 10993  158F  3040               	movlw	64
 10994  1590  00A2               	movwf	___ftdiv@f2+2
 10995  1591  3189  21B8  3195   	fcall	___ftdiv
 10996  1594  0020               	movlb	0	; select bank0
 10997  1595  0820               	movf	?___ftdiv,w
 10998  1596  00B0               	movwf	___fttol@f1
 10999  1597  0821               	movf	?___ftdiv+1,w
 11000  1598  00B1               	movwf	___fttol@f1+1
 11001  1599  0822               	movf	?___ftdiv+2,w
 11002  159A  00B2               	movwf	___fttol@f1+2
 11003  159B  3189  2131         	fcall	___fttol
 11004  159D  0020               	movlb	0	; select bank0
 11005  159E  0831               	movf	?___fttol+1,w
 11006  159F  0021               	movlb	1	; select bank1
 11007  15A0  00B9               	movwf	(_current+1)^(0+128)
 11008  15A1  0020               	movlb	0	; select bank0
 11009  15A2  0830               	movf	?___fttol,w
 11010  15A3  0021               	movlb	1	; select bank1
 11011  15A4  00B8               	movwf	_current^(0+128)
 11012  15A5  0008               	return
 11013  15A6                     __end_of_calculateCurrent0:	
 11014                           
 11015                           	psect	text17
 11016  09B8                     __ptext17:	
 11017 ;; *************** function ___ftdiv *****************
 11018 ;; Defined at:
 11019 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 11020 ;; Parameters:    Size  Location     Type
 11021 ;;  f2              3    0[BANK0 ] float 
 11022 ;;  f1              3    3[BANK0 ] float 
 11023 ;; Auto vars:     Size  Location     Type
 11024 ;;  f3              3   11[BANK0 ] float 
 11025 ;;  sign            1   15[BANK0 ] unsigned char 
 11026 ;;  exp             1   14[BANK0 ] unsigned char 
 11027 ;;  cntr            1   10[BANK0 ] unsigned char 
 11028 ;; Return value:  Size  Location     Type
 11029 ;;                  3    0[BANK0 ] float 
 11030 ;; Registers used:
 11031 ;;		wreg, status,2, status,0, pclath, cstack
 11032 ;; Tracked objects:
 11033 ;;		On entry : 0/0
 11034 ;;		On exit  : 0/0
 11035 ;;		Unchanged: 0/0
 11036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11037 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11038 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11039 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11040 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11041 ;;Total ram usage:       16 bytes
 11042 ;; Hardware stack levels used:    1
 11043 ;; Hardware stack levels required when called:    1
 11044 ;; This function calls:
 11045 ;;		___ftpack
 11046 ;; This function is called by:
 11047 ;;		_tempCalc
 11048 ;;		_main
 11049 ;;		_calculateCurrent0
 11050 ;;		_calculateCurrent1
 11051 ;;		_calculateCurrent2
 11052 ;;		_calculateCurrent3
 11053 ;; This function uses a non-reentrant model
 11054 ;;
 11055                           
 11056                           
 11057                           ;psect for function ___ftdiv
 11058  09B8                     ___ftdiv:	
 11059                           
 11060                           ;incstack = 0
 11061                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 11062  09B8  0020               	movlb	0	; select bank0
 11063  09B9  0823               	movf	___ftdiv@f1,w
 11064  09BA  00A6               	movwf	??___ftdiv
 11065  09BB  0824               	movf	___ftdiv@f1+1,w
 11066  09BC  00A7               	movwf	??___ftdiv+1
 11067  09BD  0825               	movf	___ftdiv@f1+2,w
 11068  09BE  00A8               	movwf	??___ftdiv+2
 11069  09BF  1003               	clrc
 11070  09C0  0D27               	rlf	??___ftdiv+1,w
 11071  09C1  0D28               	rlf	??___ftdiv+2,w
 11072  09C2  00A9               	movwf	??___ftdiv+3
 11073  09C3  0829               	movf	??___ftdiv+3,w
 11074  09C4  00AE               	movwf	___ftdiv@exp
 11075  09C5  082E               	movf	___ftdiv@exp,w
 11076  09C6  1D03               	btfss	3,2
 11077  09C7  29CF               	goto	l2776
 11078  09C8  3000               	movlw	0
 11079  09C9  00A0               	movwf	?___ftdiv
 11080  09CA  3000               	movlw	0
 11081  09CB  00A1               	movwf	?___ftdiv+1
 11082  09CC  3000               	movlw	0
 11083  09CD  00A2               	movwf	?___ftdiv+2
 11084  09CE  0008               	return
 11085  09CF                     l2776:	
 11086  09CF  0820               	movf	___ftdiv@f2,w
 11087  09D0  00A6               	movwf	??___ftdiv
 11088  09D1  0821               	movf	___ftdiv@f2+1,w
 11089  09D2  00A7               	movwf	??___ftdiv+1
 11090  09D3  0822               	movf	___ftdiv@f2+2,w
 11091  09D4  00A8               	movwf	??___ftdiv+2
 11092  09D5  1003               	clrc
 11093  09D6  0D27               	rlf	??___ftdiv+1,w
 11094  09D7  0D28               	rlf	??___ftdiv+2,w
 11095  09D8  00A9               	movwf	??___ftdiv+3
 11096  09D9  0829               	movf	??___ftdiv+3,w
 11097  09DA  00AF               	movwf	___ftdiv@sign
 11098  09DB  082F               	movf	___ftdiv@sign,w
 11099  09DC  1D03               	btfss	3,2
 11100  09DD  29E5               	goto	l2782
 11101  09DE  3000               	movlw	0
 11102  09DF  00A0               	movwf	?___ftdiv
 11103  09E0  3000               	movlw	0
 11104  09E1  00A1               	movwf	?___ftdiv+1
 11105  09E2  3000               	movlw	0
 11106  09E3  00A2               	movwf	?___ftdiv+2
 11107  09E4  0008               	return
 11108  09E5                     l2782:	
 11109  09E5  3000               	movlw	0
 11110  09E6  00AB               	movwf	___ftdiv@f3
 11111  09E7  3000               	movlw	0
 11112  09E8  00AC               	movwf	___ftdiv@f3+1
 11113  09E9  3000               	movlw	0
 11114  09EA  00AD               	movwf	___ftdiv@f3+2
 11115  09EB  3089               	movlw	137
 11116  09EC  072F               	addwf	___ftdiv@sign,w
 11117  09ED  00A6               	movwf	??___ftdiv
 11118  09EE  0826               	movf	??___ftdiv,w
 11119  09EF  02AE               	subwf	___ftdiv@exp,f
 11120  09F0  0823               	movf	___ftdiv@f1,w
 11121  09F1  00A6               	movwf	??___ftdiv
 11122  09F2  0824               	movf	___ftdiv@f1+1,w
 11123  09F3  00A7               	movwf	??___ftdiv+1
 11124  09F4  0825               	movf	___ftdiv@f1+2,w
 11125  09F5  00A8               	movwf	??___ftdiv+2
 11126  09F6  3010               	movlw	16
 11127  09F7                     u2985:	
 11128  09F7  36A8               	lsrf	??___ftdiv+2,f
 11129  09F8  0CA7               	rrf	??___ftdiv+1,f
 11130  09F9  0CA6               	rrf	??___ftdiv,f
 11131  09FA  0B89               	decfsz	9,f
 11132  09FB  29F7               	goto	u2985
 11133  09FC  0826               	movf	??___ftdiv,w
 11134  09FD  00A9               	movwf	??___ftdiv+3
 11135  09FE  0829               	movf	??___ftdiv+3,w
 11136  09FF  00AF               	movwf	___ftdiv@sign
 11137  0A00  0820               	movf	___ftdiv@f2,w
 11138  0A01  00A6               	movwf	??___ftdiv
 11139  0A02  0821               	movf	___ftdiv@f2+1,w
 11140  0A03  00A7               	movwf	??___ftdiv+1
 11141  0A04  0822               	movf	___ftdiv@f2+2,w
 11142  0A05  00A8               	movwf	??___ftdiv+2
 11143  0A06  3010               	movlw	16
 11144  0A07                     u2995:	
 11145  0A07  36A8               	lsrf	??___ftdiv+2,f
 11146  0A08  0CA7               	rrf	??___ftdiv+1,f
 11147  0A09  0CA6               	rrf	??___ftdiv,f
 11148  0A0A  0B89               	decfsz	9,f
 11149  0A0B  2A07               	goto	u2995
 11150  0A0C  0826               	movf	??___ftdiv,w
 11151  0A0D  00A9               	movwf	??___ftdiv+3
 11152  0A0E  0829               	movf	??___ftdiv+3,w
 11153  0A0F  06AF               	xorwf	___ftdiv@sign,f
 11154  0A10  3080               	movlw	128
 11155  0A11  00A6               	movwf	??___ftdiv
 11156  0A12  0826               	movf	??___ftdiv,w
 11157  0A13  05AF               	andwf	___ftdiv@sign,f
 11158  0A14  17A4               	bsf	___ftdiv@f1+1,7
 11159  0A15  30FF               	movlw	255
 11160  0A16  05A3               	andwf	___ftdiv@f1,f
 11161  0A17  30FF               	movlw	255
 11162  0A18  05A4               	andwf	___ftdiv@f1+1,f
 11163  0A19  3000               	movlw	0
 11164  0A1A  05A5               	andwf	___ftdiv@f1+2,f
 11165  0A1B  17A1               	bsf	___ftdiv@f2+1,7
 11166  0A1C  30FF               	movlw	255
 11167  0A1D  05A0               	andwf	___ftdiv@f2,f
 11168  0A1E  30FF               	movlw	255
 11169  0A1F  05A1               	andwf	___ftdiv@f2+1,f
 11170  0A20  3000               	movlw	0
 11171  0A21  05A2               	andwf	___ftdiv@f2+2,f
 11172  0A22  3018               	movlw	24
 11173  0A23  00A6               	movwf	??___ftdiv
 11174  0A24  0826               	movf	??___ftdiv,w
 11175  0A25  00AA               	movwf	___ftdiv@cntr
 11176  0A26                     l2796:	
 11177  0A26  3001               	movlw	1
 11178  0A27                     u3005:	
 11179  0A27  35AB               	lslf	___ftdiv@f3,f
 11180  0A28  0DAC               	rlf	___ftdiv@f3+1,f
 11181  0A29  0DAD               	rlf	___ftdiv@f3+2,f
 11182  0A2A  0B89               	decfsz	9,f
 11183  0A2B  2A27               	goto	u3005
 11184  0A2C  0822               	movf	___ftdiv@f2+2,w
 11185  0A2D  0225               	subwf	___ftdiv@f1+2,w
 11186  0A2E  1D03               	skipz
 11187  0A2F  2A36               	goto	u3015
 11188  0A30  0821               	movf	___ftdiv@f2+1,w
 11189  0A31  0224               	subwf	___ftdiv@f1+1,w
 11190  0A32  1D03               	skipz
 11191  0A33  2A36               	goto	u3015
 11192  0A34  0820               	movf	___ftdiv@f2,w
 11193  0A35  0223               	subwf	___ftdiv@f1,w
 11194  0A36                     u3015:	
 11195  0A36  1C03               	skipc
 11196  0A37  2A3F               	goto	l2804
 11197  0A38  0820               	movf	___ftdiv@f2,w
 11198  0A39  02A3               	subwf	___ftdiv@f1,f
 11199  0A3A  0821               	movf	___ftdiv@f2+1,w
 11200  0A3B  3BA4               	subwfb	___ftdiv@f1+1,f
 11201  0A3C  0822               	movf	___ftdiv@f2+2,w
 11202  0A3D  3BA5               	subwfb	___ftdiv@f1+2,f
 11203  0A3E  142B               	bsf	___ftdiv@f3,0
 11204  0A3F                     l2804:	
 11205  0A3F  3001               	movlw	1
 11206  0A40                     u3025:	
 11207  0A40  35A3               	lslf	___ftdiv@f1,f
 11208  0A41  0DA4               	rlf	___ftdiv@f1+1,f
 11209  0A42  0DA5               	rlf	___ftdiv@f1+2,f
 11210  0A43  0B89               	decfsz	9,f
 11211  0A44  2A40               	goto	u3025
 11212  0A45  3001               	movlw	1
 11213  0A46  02AA               	subwf	___ftdiv@cntr,f
 11214  0A47  1D03               	btfss	3,2
 11215  0A48  2A26               	goto	l2796
 11216  0A49  082B               	movf	___ftdiv@f3,w
 11217  0A4A  00F0               	movwf	___ftpack@arg
 11218  0A4B  082C               	movf	___ftdiv@f3+1,w
 11219  0A4C  00F1               	movwf	___ftpack@arg+1
 11220  0A4D  082D               	movf	___ftdiv@f3+2,w
 11221  0A4E  00F2               	movwf	___ftpack@arg+2
 11222  0A4F  082E               	movf	___ftdiv@exp,w
 11223  0A50  00A6               	movwf	??___ftdiv
 11224  0A51  0826               	movf	??___ftdiv,w
 11225  0A52  00F3               	movwf	___ftpack@exp
 11226  0A53  082F               	movf	___ftdiv@sign,w
 11227  0A54  00A7               	movwf	??___ftdiv+1
 11228  0A55  0827               	movf	??___ftdiv+1,w
 11229  0A56  00F4               	movwf	___ftpack@sign
 11230  0A57  3197  2735         	fcall	___ftpack
 11231  0A59  0870               	movf	?___ftpack,w
 11232  0A5A  0020               	movlb	0	; select bank0
 11233  0A5B  00A0               	movwf	?___ftdiv
 11234  0A5C  0871               	movf	?___ftpack+1,w
 11235  0A5D  00A1               	movwf	?___ftdiv+1
 11236  0A5E  0872               	movf	?___ftpack+2,w
 11237  0A5F  00A2               	movwf	?___ftdiv+2
 11238  0A60  0008               	return
 11239  0A61                     __end_of___ftdiv:	
 11240                           
 11241                           	psect	text18
 11242  14B0                     __ptext18:	
 11243 ;; *************** function _SYSTEM_Initialize *****************
 11244 ;; Defined at:
 11245 ;;		line 71 in file "system.c"
 11246 ;; Parameters:    Size  Location     Type
 11247 ;;		None
 11248 ;; Auto vars:     Size  Location     Type
 11249 ;;		None
 11250 ;; Return value:  Size  Location     Type
 11251 ;;                  1    wreg      void 
 11252 ;; Registers used:
 11253 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11254 ;; Tracked objects:
 11255 ;;		On entry : 0/0
 11256 ;;		On exit  : 0/0
 11257 ;;		Unchanged: 0/0
 11258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11261 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11262 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11263 ;;Total ram usage:        2 bytes
 11264 ;; Hardware stack levels used:    1
 11265 ;; Hardware stack levels required when called:    3
 11266 ;; This function calls:
 11267 ;;		_ADC_Initialize
 11268 ;;		_Init_Battery_State_Machine
 11269 ;;		_LCDClear
 11270 ;;		_LCDInit
 11271 ;;		_OSCILLATOR_Initialize
 11272 ;;		_PIN_MANAGER_Initialize
 11273 ;;		_PWM_Initialize
 11274 ;;		_TMR2_Initialize
 11275 ;;		_TMR4_Initialize
 11276 ;; This function is called by:
 11277 ;;		_main
 11278 ;; This function uses a non-reentrant model
 11279 ;;
 11280                           
 11281                           
 11282                           ;psect for function _SYSTEM_Initialize
 11283  14B0                     _SYSTEM_Initialize:	
 11284                           
 11285                           ;system.c: 73: PIN_MANAGER_Initialize();
 11286                           
 11287                           ;incstack = 0
 11288                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11289  14B0  3194  243E  3194   	fcall	_PIN_MANAGER_Initialize
 11290                           
 11291                           ;system.c: 74: OSCILLATOR_Initialize();
 11292  14B3  3192  22CD  3194   	fcall	_OSCILLATOR_Initialize
 11293                           
 11294                           ;system.c: 76: ADC_Initialize();
 11295  14B6  3193  23B4  3194   	fcall	_ADC_Initialize
 11296                           
 11297                           ;system.c: 77: PWM_Initialize();
 11298  14B9  3193  2325  3194   	fcall	_PWM_Initialize
 11299                           
 11300                           ;system.c: 79: TMR2_Initialize();
 11301  14BC  3192  22E2  3194   	fcall	_TMR2_Initialize
 11302                           
 11303                           ;system.c: 80: TMR4_Initialize();
 11304  14BF  3192  22F0  3194   	fcall	_TMR4_Initialize
 11305                           
 11306                           ;system.c: 81: Init_Battery_State_Machine(0);
 11307  14C2  3000               	movlw	0
 11308  14C3  3197  2799  3194   	fcall	_Init_Battery_State_Machine
 11309                           
 11310                           ;system.c: 82: Init_Battery_State_Machine(1);
 11311  14C6  3001               	movlw	1
 11312  14C7  3197  2799  3194   	fcall	_Init_Battery_State_Machine
 11313                           
 11314                           ;system.c: 83: LCDInit();
 11315  14CA  3194  2475  3194   	fcall	_LCDInit
 11316                           
 11317                           ;system.c: 84: _delay((unsigned long)((200)*(32000000/4000.0)));
 11318  14CD  3009               	movlw	9
 11319  14CE  0020               	movlb	0	; select bank0
 11320  14CF  00C4               	movwf	??_SYSTEM_Initialize+1
 11321  14D0  301E               	movlw	30
 11322  14D1  00C3               	movwf	??_SYSTEM_Initialize
 11323  14D2  30E4               	movlw	228
 11324  14D3                     u3967:	
 11325  14D3  0B89               	decfsz	9,f
 11326  14D4  2CD3               	goto	u3967
 11327  14D5  0BC3               	decfsz	??_SYSTEM_Initialize,f
 11328  14D6  2CD3               	goto	u3967
 11329  14D7  0BC4               	decfsz	??_SYSTEM_Initialize+1,f
 11330  14D8  2CD3               	goto	u3967
 11331  14D9  0000               	nop
 11332                           
 11333                           ;system.c: 85: LCDClear();
 11334  14DA  3194  2418  3194   	fcall	_LCDClear
 11335                           
 11336                           ;system.c: 86: _delay((unsigned long)((200)*(32000000/4000.0)));
 11337  14DD  3009               	movlw	9
 11338  14DE  0020               	movlb	0	; select bank0
 11339  14DF  00C4               	movwf	??_SYSTEM_Initialize+1
 11340  14E0  301E               	movlw	30
 11341  14E1  00C3               	movwf	??_SYSTEM_Initialize
 11342  14E2  30E4               	movlw	228
 11343  14E3                     u3977:	
 11344  14E3  0B89               	decfsz	9,f
 11345  14E4  2CE3               	goto	u3977
 11346  14E5  0BC3               	decfsz	??_SYSTEM_Initialize,f
 11347  14E6  2CE3               	goto	u3977
 11348  14E7  0BC4               	decfsz	??_SYSTEM_Initialize+1,f
 11349  14E8  2CE3               	goto	u3977
 11350  14E9  0000               	nop
 11351  14EA  0008               	return
 11352  14EB                     __end_of_SYSTEM_Initialize:	
 11353                           
 11354                           	psect	text19
 11355  12F0                     __ptext19:	
 11356 ;; *************** function _TMR4_Initialize *****************
 11357 ;; Defined at:
 11358 ;;		line 25 in file "tmr.c"
 11359 ;; Parameters:    Size  Location     Type
 11360 ;;		None
 11361 ;; Auto vars:     Size  Location     Type
 11362 ;;		None
 11363 ;; Return value:  Size  Location     Type
 11364 ;;                  1    wreg      void 
 11365 ;; Registers used:
 11366 ;;		wreg, status,2
 11367 ;; Tracked objects:
 11368 ;;		On entry : 0/0
 11369 ;;		On exit  : 0/0
 11370 ;;		Unchanged: 0/0
 11371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11376 ;;Total ram usage:        0 bytes
 11377 ;; Hardware stack levels used:    1
 11378 ;; This function calls:
 11379 ;;		Nothing
 11380 ;; This function is called by:
 11381 ;;		_SYSTEM_Initialize
 11382 ;; This function uses a non-reentrant model
 11383 ;;
 11384                           
 11385                           
 11386                           ;psect for function _TMR4_Initialize
 11387  12F0                     _TMR4_Initialize:	
 11388                           
 11389                           ;tmr.c: 27: T4CON = 0x00;
 11390                           
 11391                           ;incstack = 0
 11392                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
 11393  12F0  0025               	movlb	5	; select bank5
 11394  12F1  0194               	clrf	20	;volatile
 11395                           
 11396                           ;tmr.c: 29: T4CLKCON = 0x01;
 11397  12F2  3001               	movlw	1
 11398  12F3  0096               	movwf	22	;volatile
 11399                           
 11400                           ;tmr.c: 31: T4HLT = 0x00;
 11401  12F4  0195               	clrf	21	;volatile
 11402                           
 11403                           ;tmr.c: 33: T4RST = 0x00;
 11404  12F5  0197               	clrf	23	;volatile
 11405                           
 11406                           ;tmr.c: 35: T4PR = 0xFE;
 11407  12F6  30FE               	movlw	254
 11408  12F7  0093               	movwf	19	;volatile
 11409                           
 11410                           ;tmr.c: 39: T4TMR = 0x00;
 11411  12F8  0192               	clrf	18	;volatile
 11412                           
 11413                           ;tmr.c: 41: PIR4bits.TMR4IF = 0;
 11414  12F9  002E               	movlb	14	; select bank14
 11415  12FA  1190               	bcf	16,3	;volatile
 11416                           
 11417                           ;tmr.c: 43: T4CONbits.TMR4ON = 1;
 11418  12FB  0025               	movlb	5	; select bank5
 11419  12FC  1794               	bsf	20,7	;volatile
 11420  12FD  0008               	return
 11421  12FE                     __end_of_TMR4_Initialize:	
 11422                           
 11423                           	psect	text20
 11424  12E2                     __ptext20:	
 11425 ;; *************** function _TMR2_Initialize *****************
 11426 ;; Defined at:
 11427 ;;		line 3 in file "tmr.c"
 11428 ;; Parameters:    Size  Location     Type
 11429 ;;		None
 11430 ;; Auto vars:     Size  Location     Type
 11431 ;;		None
 11432 ;; Return value:  Size  Location     Type
 11433 ;;                  1    wreg      void 
 11434 ;; Registers used:
 11435 ;;		wreg, status,2
 11436 ;; Tracked objects:
 11437 ;;		On entry : 0/0
 11438 ;;		On exit  : 0/0
 11439 ;;		Unchanged: 0/0
 11440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11445 ;;Total ram usage:        0 bytes
 11446 ;; Hardware stack levels used:    1
 11447 ;; This function calls:
 11448 ;;		Nothing
 11449 ;; This function is called by:
 11450 ;;		_SYSTEM_Initialize
 11451 ;; This function uses a non-reentrant model
 11452 ;;
 11453                           
 11454                           
 11455                           ;psect for function _TMR2_Initialize
 11456  12E2                     _TMR2_Initialize:	
 11457                           
 11458                           ;tmr.c: 5: T2CON = 0x00;
 11459                           
 11460                           ;incstack = 0
 11461                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 11462  12E2  0025               	movlb	5	; select bank5
 11463  12E3  018E               	clrf	14	;volatile
 11464                           
 11465                           ;tmr.c: 7: T2CLKCON = 0x01;
 11466  12E4  3001               	movlw	1
 11467  12E5  0090               	movwf	16	;volatile
 11468                           
 11469                           ;tmr.c: 9: T2HLT = 0x00;
 11470  12E6  018F               	clrf	15	;volatile
 11471                           
 11472                           ;tmr.c: 11: T2RST = 0x00;
 11473  12E7  0191               	clrf	17	;volatile
 11474                           
 11475                           ;tmr.c: 13: T2PR = 0xFE;
 11476  12E8  30FE               	movlw	254
 11477  12E9  008D               	movwf	13	;volatile
 11478                           
 11479                           ;tmr.c: 18: T2TMR = 0x00;
 11480  12EA  018C               	clrf	12	;volatile
 11481                           
 11482                           ;tmr.c: 20: PIR4bits.TMR2IF = 0;
 11483  12EB  002E               	movlb	14	; select bank14
 11484  12EC  1090               	bcf	16,1	;volatile
 11485                           
 11486                           ;tmr.c: 22: T2CONbits.TMR2ON = 1;
 11487  12ED  0025               	movlb	5	; select bank5
 11488  12EE  178E               	bsf	14,7	;volatile
 11489  12EF  0008               	return
 11490  12F0                     __end_of_TMR2_Initialize:	
 11491                           
 11492                           	psect	text21
 11493  1325                     __ptext21:	
 11494 ;; *************** function _PWM_Initialize *****************
 11495 ;; Defined at:
 11496 ;;		line 3 in file "pwm.c"
 11497 ;; Parameters:    Size  Location     Type
 11498 ;;		None
 11499 ;; Auto vars:     Size  Location     Type
 11500 ;;		None
 11501 ;; Return value:  Size  Location     Type
 11502 ;;                  1    wreg      void 
 11503 ;; Registers used:
 11504 ;;		wreg, status,2, status,0
 11505 ;; Tracked objects:
 11506 ;;		On entry : 0/0
 11507 ;;		On exit  : 0/0
 11508 ;;		Unchanged: 0/0
 11509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11514 ;;Total ram usage:        0 bytes
 11515 ;; Hardware stack levels used:    1
 11516 ;; This function calls:
 11517 ;;		Nothing
 11518 ;; This function is called by:
 11519 ;;		_SYSTEM_Initialize
 11520 ;; This function uses a non-reentrant model
 11521 ;;
 11522                           
 11523                           
 11524                           ;psect for function _PWM_Initialize
 11525  1325                     _PWM_Initialize:	
 11526                           
 11527                           ;pwm.c: 5: PWM6CON = 0x80;
 11528                           
 11529                           ;incstack = 0
 11530                           ; Regs used in _PWM_Initialize: [wreg+status,2+status,0]
 11531  1325  3080               	movlw	128
 11532  1326  0027               	movlb	7	; select bank7
 11533  1327  008E               	movwf	14	;volatile
 11534                           
 11535                           ;pwm.c: 7: PWM6DCH = 0x00;
 11536  1328  018D               	clrf	13	;volatile
 11537                           
 11538                           ;pwm.c: 9: PWM6DCL = 0x00;
 11539  1329  018C               	clrf	12	;volatile
 11540                           
 11541                           ;pwm.c: 11: CCPTMRS1bits.P6TSEL = 0x01;
 11542  132A  0024               	movlb	4	; select bank4
 11543  132B  081F               	movf	31,w	;volatile
 11544  132C  39F3               	andlw	-13
 11545  132D  3804               	iorlw	4
 11546  132E  009F               	movwf	31	;volatile
 11547                           
 11548                           ;pwm.c: 14: PWM7CON = 0x80;
 11549  132F  3080               	movlw	128
 11550  1330  0027               	movlb	7	; select bank7
 11551  1331  0092               	movwf	18	;volatile
 11552                           
 11553                           ;pwm.c: 16: PWM7DCH = 0x00;
 11554  1332  0191               	clrf	17	;volatile
 11555                           
 11556                           ;pwm.c: 18: PWM7DCL = 0x00;
 11557  1333  0190               	clrf	16	;volatile
 11558                           
 11559                           ;pwm.c: 20: CCPTMRS1bits.P7TSEL = 0x02;
 11560  1334  0024               	movlb	4	; select bank4
 11561  1335  081F               	movf	31,w	;volatile
 11562  1336  39CF               	andlw	-49
 11563  1337  3820               	iorlw	32
 11564  1338  009F               	movwf	31	;volatile
 11565  1339  0008               	return
 11566  133A                     __end_of_PWM_Initialize:	
 11567                           
 11568                           	psect	text22
 11569  143E                     __ptext22:	
 11570 ;; *************** function _PIN_MANAGER_Initialize *****************
 11571 ;; Defined at:
 11572 ;;		line 5 in file "pin_manager.c"
 11573 ;; Parameters:    Size  Location     Type
 11574 ;;		None
 11575 ;; Auto vars:     Size  Location     Type
 11576 ;;  state           1    0[COMMON] char 
 11577 ;; Return value:  Size  Location     Type
 11578 ;;                  1    wreg      void 
 11579 ;; Registers used:
 11580 ;;		wreg, status,2
 11581 ;; Tracked objects:
 11582 ;;		On entry : 0/0
 11583 ;;		On exit  : 0/0
 11584 ;;		Unchanged: 0/0
 11585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11587 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11589 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11590 ;;Total ram usage:        1 bytes
 11591 ;; Hardware stack levels used:    1
 11592 ;; This function calls:
 11593 ;;		Nothing
 11594 ;; This function is called by:
 11595 ;;		_SYSTEM_Initialize
 11596 ;; This function uses a non-reentrant model
 11597 ;;
 11598                           
 11599                           
 11600                           ;psect for function _PIN_MANAGER_Initialize
 11601  143E                     _PIN_MANAGER_Initialize:	
 11602                           
 11603                           ;pin_manager.c: 7: LATA = 0x20;
 11604                           
 11605                           ;incstack = 0
 11606                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 11607  143E  3020               	movlw	32
 11608  143F  0020               	movlb	0	; select bank0
 11609  1440  0096               	movwf	22	;volatile
 11610                           
 11611                           ;pin_manager.c: 8: LATB = 0x00;
 11612  1441  0197               	clrf	23	;volatile
 11613                           
 11614                           ;pin_manager.c: 9: LATC = 0x00;
 11615  1442  0198               	clrf	24	;volatile
 11616                           
 11617                           ;pin_manager.c: 11: WPUA = 0x00;
 11618  1443  003E               	movlb	30	; select bank30
 11619  1444  01B9               	clrf	57	;volatile
 11620                           
 11621                           ;pin_manager.c: 12: WPUB = 0x00;
 11622  1445  01C4               	clrf	68	;volatile
 11623                           
 11624                           ;pin_manager.c: 13: WPUC = 0x00;
 11625  1446  01CF               	clrf	79	;volatile
 11626                           
 11627                           ;pin_manager.c: 14: WPUE = 0x8;
 11628  1447  3008               	movlw	8
 11629  1448  00E5               	movwf	101	;volatile
 11630                           
 11631                           ;pin_manager.c: 16: TRISA = 0x00;
 11632  1449  0020               	movlb	0	; select bank0
 11633  144A  0191               	clrf	17	;volatile
 11634                           
 11635                           ;pin_manager.c: 17: TRISB = 0x0E;
 11636  144B  300E               	movlw	14
 11637  144C  0092               	movwf	18	;volatile
 11638                           
 11639                           ;pin_manager.c: 18: TRISC = 0xFF;
 11640  144D  30FF               	movlw	255
 11641  144E  0093               	movwf	19	;volatile
 11642                           
 11643                           ;pin_manager.c: 20: ANSELA = 0x00;
 11644  144F  003E               	movlb	30	; select bank30
 11645  1450  01B8               	clrf	56	;volatile
 11646                           
 11647                           ;pin_manager.c: 21: ANSELB = 0x0A;
 11648  1451  300A               	movlw	10
 11649  1452  00C3               	movwf	67	;volatile
 11650                           
 11651                           ;pin_manager.c: 22: ANSELC = 0xFF;
 11652  1453  30FF               	movlw	255
 11653  1454  00CE               	movwf	78	;volatile
 11654                           
 11655                           ;pin_manager.c: 25: PIE0bits.IOCIE = 0;
 11656  1455  002E               	movlb	14	; select bank14
 11657  1456  1216               	bcf	22,4	;volatile
 11658                           
 11659                           ;pin_manager.c: 26: int8_t state = GIE;
 11660  1457  3000               	movlw	0
 11661  1458  1B8B               	btfsc	11,7	;volatile
 11662  1459  3001               	movlw	1
 11663  145A  00F0               	movwf	PIN_MANAGER_Initialize@state
 11664                           
 11665                           ;pin_manager.c: 27: GIE = 0;
 11666  145B  138B               	bcf	11,7	;volatile
 11667                           
 11668                           ;pin_manager.c: 28: PPSLOCK = 0x55;
 11669  145C  3055               	movlw	85
 11670  145D  003D               	movlb	29	; select bank29
 11671  145E  008F               	movwf	15	;volsfr
 11672                           
 11673                           ;pin_manager.c: 29: PPSLOCK = 0xAA;
 11674  145F  30AA               	movlw	170
 11675  1460  008F               	movwf	15	;volsfr
 11676                           
 11677                           ;pin_manager.c: 30: PPSLOCKbits.PPSLOCKED = 0x00;
 11678  1461  100F               	bcf	15,0	;volsfr
 11679                           
 11680                           ;pin_manager.c: 32: RA6PPS = 0x0E;
 11681  1462  300E               	movlw	14
 11682  1463  003E               	movlb	30	; select bank30
 11683  1464  0096               	movwf	22	;volatile
 11684                           
 11685                           ;pin_manager.c: 33: RA7PPS = 0x0F;
 11686  1465  300F               	movlw	15
 11687  1466  0097               	movwf	23	;volatile
 11688                           
 11689                           ;pin_manager.c: 34: RB0PPS = 0x09;
 11690  1467  3009               	movlw	9
 11691  1468  0098               	movwf	24	;volatile
 11692                           
 11693                           ;pin_manager.c: 35: PPSLOCK = 0x55;
 11694  1469  3055               	movlw	85
 11695  146A  003D               	movlb	29	; select bank29
 11696  146B  008F               	movwf	15	;volsfr
 11697                           
 11698                           ;pin_manager.c: 36: PPSLOCK = 0xAA;
 11699  146C  30AA               	movlw	170
 11700  146D  008F               	movwf	15	;volsfr
 11701                           
 11702                           ;pin_manager.c: 37: PPSLOCKbits.PPSLOCKED = 0x01;
 11703  146E  140F               	bsf	15,0	;volsfr
 11704                           
 11705                           ;pin_manager.c: 38: GIE = state;
 11706  146F  1C70               	btfss	PIN_MANAGER_Initialize@state,0
 11707  1470  2C73               	goto	u2720
 11708  1471  178B               	bsf	11,7	;volatile
 11709  1472  0008               	return
 11710  1473                     u2720:	
 11711  1473  138B               	bcf	11,7	;volatile
 11712  1474  0008               	return
 11713  1475                     __end_of_PIN_MANAGER_Initialize:	
 11714                           
 11715                           	psect	text23
 11716  12CD                     __ptext23:	
 11717 ;; *************** function _OSCILLATOR_Initialize *****************
 11718 ;; Defined at:
 11719 ;;		line 89 in file "system.c"
 11720 ;; Parameters:    Size  Location     Type
 11721 ;;		None
 11722 ;; Auto vars:     Size  Location     Type
 11723 ;;		None
 11724 ;; Return value:  Size  Location     Type
 11725 ;;                  1    wreg      void 
 11726 ;; Registers used:
 11727 ;;		wreg, status,2
 11728 ;; Tracked objects:
 11729 ;;		On entry : 0/0
 11730 ;;		On exit  : 0/0
 11731 ;;		Unchanged: 0/0
 11732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11736 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11737 ;;Total ram usage:        0 bytes
 11738 ;; Hardware stack levels used:    1
 11739 ;; This function calls:
 11740 ;;		Nothing
 11741 ;; This function is called by:
 11742 ;;		_SYSTEM_Initialize
 11743 ;; This function uses a non-reentrant model
 11744 ;;
 11745                           
 11746                           
 11747                           ;psect for function _OSCILLATOR_Initialize
 11748  12CD                     _OSCILLATOR_Initialize:	
 11749                           
 11750                           ;system.c: 91: OSCCON1 = 0x60;
 11751                           
 11752                           ;incstack = 0
 11753                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 11754  12CD  3060               	movlw	96
 11755  12CE  0031               	movlb	17	; select bank17
 11756  12CF  008D               	movwf	13	;volatile
 11757                           
 11758                           ;system.c: 92: OSCCON3 = 0x00;
 11759  12D0  018F               	clrf	15	;volatile
 11760                           
 11761                           ;system.c: 93: OSCEN = 0x00;
 11762  12D1  0191               	clrf	17	;volatile
 11763                           
 11764                           ;system.c: 94: OSCFRQ = 0x06;
 11765  12D2  3006               	movlw	6
 11766  12D3  0093               	movwf	19	;volatile
 11767                           
 11768                           ;system.c: 95: OSCTUNE = 0x00;
 11769  12D4  0192               	clrf	18	;volatile
 11770  12D5  0008               	return
 11771  12D6                     __end_of_OSCILLATOR_Initialize:	
 11772                           
 11773                           	psect	text24
 11774  1475                     __ptext24:	
 11775 ;; *************** function _LCDInit *****************
 11776 ;; Defined at:
 11777 ;;		line 247 in file "lcd.c"
 11778 ;; Parameters:    Size  Location     Type
 11779 ;;		None
 11780 ;; Auto vars:     Size  Location     Type
 11781 ;;		None
 11782 ;; Return value:  Size  Location     Type
 11783 ;;                  1    wreg      void 
 11784 ;; Registers used:
 11785 ;;		wreg, status,2, status,0, pclath, cstack
 11786 ;; Tracked objects:
 11787 ;;		On entry : 0/0
 11788 ;;		On exit  : 0/0
 11789 ;;		Unchanged: 0/0
 11790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11793 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11794 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11795 ;;Total ram usage:        1 bytes
 11796 ;; Hardware stack levels used:    1
 11797 ;; Hardware stack levels required when called:    1
 11798 ;; This function calls:
 11799 ;;		_LCDWrite
 11800 ;; This function is called by:
 11801 ;;		_SYSTEM_Initialize
 11802 ;;		_main
 11803 ;; This function uses a non-reentrant model
 11804 ;;
 11805                           
 11806                           
 11807                           ;psect for function _LCDInit
 11808  1475                     _LCDInit:	
 11809                           
 11810                           ;lcd.c: 249: TRISAbits.TRISA0 = 0;
 11811                           
 11812                           ;incstack = 0
 11813                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
 11814  1475  0020               	movlb	0	; select bank0
 11815  1476  1011               	bcf	17,0	;volatile
 11816                           
 11817                           ;lcd.c: 250: TRISAbits.TRISA1 = 0;
 11818  1477  1091               	bcf	17,1	;volatile
 11819                           
 11820                           ;lcd.c: 251: TRISAbits.TRISA2 = 0;
 11821  1478  1111               	bcf	17,2	;volatile
 11822                           
 11823                           ;lcd.c: 252: TRISAbits.TRISA3 = 0;
 11824  1479  1191               	bcf	17,3	;volatile
 11825                           
 11826                           ;lcd.c: 253: TRISAbits.TRISA4 = 0;
 11827  147A  1211               	bcf	17,4	;volatile
 11828                           
 11829                           ;lcd.c: 254: LATAbits.LATA3 = 0;
 11830  147B  1196               	bcf	22,3	;volatile
 11831                           
 11832                           ;lcd.c: 255: LATAbits.LATA4 = 0;
 11833  147C  1216               	bcf	22,4	;volatile
 11834                           
 11835                           ;lcd.c: 256: LATAbits.LATA2 = 0;
 11836  147D  1116               	bcf	22,2	;volatile
 11837                           
 11838                           ;lcd.c: 257: LATAbits.LATA0 = 0;
 11839  147E  1016               	bcf	22,0	;volatile
 11840                           
 11841                           ;lcd.c: 259: LATAbits.LATA0 = 1;
 11842  147F  1416               	bsf	22,0	;volatile
 11843                           
 11844                           ;lcd.c: 261: LCDWrite(0, 0x21);
 11845  1480  3021               	movlw	33
 11846  1481  00F5               	movwf	??_LCDInit
 11847  1482  0875               	movf	??_LCDInit,w
 11848  1483  00F0               	movwf	LCDWrite@data
 11849  1484  3000               	movlw	0
 11850  1485  3193  23F3  3194   	fcall	_LCDWrite
 11851                           
 11852                           ;lcd.c: 269: LCDWrite(0, 0XB9);
 11853  1488  30B9               	movlw	185
 11854  1489  00F5               	movwf	??_LCDInit
 11855  148A  0875               	movf	??_LCDInit,w
 11856  148B  00F0               	movwf	LCDWrite@data
 11857  148C  3000               	movlw	0
 11858  148D  3193  23F3  3194   	fcall	_LCDWrite
 11859                           
 11860                           ;lcd.c: 271: LCDWrite(0, 0x04);
 11861  1490  3004               	movlw	4
 11862  1491  00F5               	movwf	??_LCDInit
 11863  1492  0875               	movf	??_LCDInit,w
 11864  1493  00F0               	movwf	LCDWrite@data
 11865  1494  3000               	movlw	0
 11866  1495  3193  23F3  3194   	fcall	_LCDWrite
 11867                           
 11868                           ;lcd.c: 273: LCDWrite(0, 0x14);
 11869  1498  3014               	movlw	20
 11870  1499  00F5               	movwf	??_LCDInit
 11871  149A  0875               	movf	??_LCDInit,w
 11872  149B  00F0               	movwf	LCDWrite@data
 11873  149C  3000               	movlw	0
 11874  149D  3193  23F3  3194   	fcall	_LCDWrite
 11875                           
 11876                           ;lcd.c: 275: LCDWrite(0, 0x20);
 11877  14A0  3020               	movlw	32
 11878  14A1  00F5               	movwf	??_LCDInit
 11879  14A2  0875               	movf	??_LCDInit,w
 11880  14A3  00F0               	movwf	LCDWrite@data
 11881  14A4  3000               	movlw	0
 11882  14A5  3193  23F3  3194   	fcall	_LCDWrite
 11883                           
 11884                           ;lcd.c: 277: LCDWrite(0, 0x0C);
 11885  14A8  300C               	movlw	12
 11886  14A9  00F5               	movwf	??_LCDInit
 11887  14AA  0875               	movf	??_LCDInit,w
 11888  14AB  00F0               	movwf	LCDWrite@data
 11889  14AC  3000               	movlw	0
 11890  14AD  3193  23F3         	fcall	_LCDWrite
 11891  14AF  0008               	return
 11892  14B0                     __end_of_LCDInit:	
 11893                           
 11894                           	psect	text25
 11895  1418                     __ptext25:	
 11896 ;; *************** function _LCDClear *****************
 11897 ;; Defined at:
 11898 ;;		line 182 in file "lcd.c"
 11899 ;; Parameters:    Size  Location     Type
 11900 ;;		None
 11901 ;; Auto vars:     Size  Location     Type
 11902 ;;  index           2    9[COMMON] int 
 11903 ;; Return value:  Size  Location     Type
 11904 ;;                  1    wreg      void 
 11905 ;; Registers used:
 11906 ;;		wreg, status,2, status,0, pclath, cstack
 11907 ;; Tracked objects:
 11908 ;;		On entry : 0/0
 11909 ;;		On exit  : 0/0
 11910 ;;		Unchanged: 0/0
 11911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11913 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11914 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11915 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11916 ;;Total ram usage:        3 bytes
 11917 ;; Hardware stack levels used:    1
 11918 ;; Hardware stack levels required when called:    2
 11919 ;; This function calls:
 11920 ;;		_LCDWrite
 11921 ;;		_gotoXY
 11922 ;; This function is called by:
 11923 ;;		_SYSTEM_Initialize
 11924 ;;		_main
 11925 ;; This function uses a non-reentrant model
 11926 ;;
 11927                           
 11928                           
 11929                           ;psect for function _LCDClear
 11930  1418                     _LCDClear:	
 11931                           
 11932                           ;lcd.c: 184: int index;
 11933                           ;lcd.c: 185: for (index = 0 ; index < (84 * 48 / 8) ; index++)
 11934                           
 11935                           ;incstack = 0
 11936                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
 11937  1418  01F9               	clrf	LCDClear@index
 11938  1419  01FA               	clrf	LCDClear@index+1
 11939  141A  087A               	movf	LCDClear@index+1,w
 11940  141B  3A80               	xorlw	128
 11941  141C  00F8               	movwf	??_LCDClear
 11942  141D  3081               	movlw	129
 11943  141E  0278               	subwf	??_LCDClear,w
 11944  141F  1D03               	skipz
 11945  1420  2C23               	goto	u2705
 11946  1421  30F8               	movlw	248
 11947  1422  0279               	subwf	LCDClear@index,w
 11948  1423                     u2705:	
 11949  1423  1803               	btfsc	3,0
 11950  1424  2C39               	goto	l2574
 11951  1425                     l2568:	
 11952                           
 11953                           ;lcd.c: 186: LCDWrite(1, 0x00);
 11954  1425  01F0               	clrf	LCDWrite@data
 11955  1426  3001               	movlw	1
 11956  1427  3193  23F3  3194   	fcall	_LCDWrite
 11957  142A  3001               	movlw	1
 11958  142B  07F9               	addwf	LCDClear@index,f
 11959  142C  3000               	movlw	0
 11960  142D  3DFA               	addwfc	LCDClear@index+1,f
 11961  142E  087A               	movf	LCDClear@index+1,w
 11962  142F  3A80               	xorlw	128
 11963  1430  00F8               	movwf	??_LCDClear
 11964  1431  3081               	movlw	129
 11965  1432  0278               	subwf	??_LCDClear,w
 11966  1433  1D03               	skipz
 11967  1434  2C37               	goto	u2715
 11968  1435  30F8               	movlw	248
 11969  1436  0279               	subwf	LCDClear@index,w
 11970  1437                     u2715:	
 11971  1437  1C03               	skipc
 11972  1438  2C25               	goto	l2568
 11973  1439                     l2574:	
 11974                           
 11975                           ;lcd.c: 187: gotoXY(0, 0);
 11976  1439  01F5               	clrf	gotoXY@y
 11977  143A  3000               	movlw	0
 11978  143B  3192  22FE         	fcall	_gotoXY
 11979  143D  0008               	return
 11980  143E                     __end_of_LCDClear:	
 11981                           
 11982                           	psect	text26
 11983  12FE                     __ptext26:	
 11984 ;; *************** function _gotoXY *****************
 11985 ;; Defined at:
 11986 ;;		line 124 in file "lcd.c"
 11987 ;; Parameters:    Size  Location     Type
 11988 ;;  x               1    wreg     unsigned char 
 11989 ;;  y               1    5[COMMON] unsigned char 
 11990 ;; Auto vars:     Size  Location     Type
 11991 ;;  x               1    7[COMMON] unsigned char 
 11992 ;; Return value:  Size  Location     Type
 11993 ;;                  1    wreg      void 
 11994 ;; Registers used:
 11995 ;;		wreg, status,2, status,0, pclath, cstack
 11996 ;; Tracked objects:
 11997 ;;		On entry : 0/0
 11998 ;;		On exit  : 0/0
 11999 ;;		Unchanged: 0/0
 12000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12001 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12002 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12003 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12004 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12005 ;;Total ram usage:        3 bytes
 12006 ;; Hardware stack levels used:    1
 12007 ;; Hardware stack levels required when called:    1
 12008 ;; This function calls:
 12009 ;;		_LCDWrite
 12010 ;; This function is called by:
 12011 ;;		_LCDClear
 12012 ;;		_main
 12013 ;; This function uses a non-reentrant model
 12014 ;;
 12015                           
 12016                           
 12017                           ;psect for function _gotoXY
 12018  12FE                     _gotoXY:	
 12019                           
 12020                           ;incstack = 0
 12021                           ; Regs used in _gotoXY: [wreg+status,2+status,0+pclath+cstack]
 12022                           ;gotoXY@x stored from wreg
 12023  12FE  00F7               	movwf	gotoXY@x
 12024                           
 12025                           ;lcd.c: 126: LCDWrite(0,(uint8_t)(0x80 | x));
 12026  12FF  0877               	movf	gotoXY@x,w
 12027  1300  3880               	iorlw	128
 12028  1301  00F6               	movwf	??_gotoXY
 12029  1302  0876               	movf	??_gotoXY,w
 12030  1303  00F0               	movwf	LCDWrite@data
 12031  1304  3000               	movlw	0
 12032  1305  3193  23F3  3192   	fcall	_LCDWrite
 12033                           
 12034                           ;lcd.c: 127: LCDWrite(0,(uint8_t)(0x40 | y));
 12035  1308  0875               	movf	gotoXY@y,w
 12036  1309  3840               	iorlw	64
 12037  130A  00F6               	movwf	??_gotoXY
 12038  130B  0876               	movf	??_gotoXY,w
 12039  130C  00F0               	movwf	LCDWrite@data
 12040  130D  3000               	movlw	0
 12041  130E  3193  23F3         	fcall	_LCDWrite
 12042  1310  0008               	return
 12043  1311                     __end_of_gotoXY:	
 12044                           
 12045                           	psect	text27
 12046  1799                     __ptext27:	
 12047 ;; *************** function _Init_Battery_State_Machine *****************
 12048 ;; Defined at:
 12049 ;;		line 18 in file "battery_charger.c"
 12050 ;; Parameters:    Size  Location     Type
 12051 ;;  z               1    wreg     unsigned char 
 12052 ;; Auto vars:     Size  Location     Type
 12053 ;;  z               1   34[BANK0 ] unsigned char 
 12054 ;; Return value:  Size  Location     Type
 12055 ;;                  1    wreg      void 
 12056 ;; Registers used:
 12057 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12058 ;; Tracked objects:
 12059 ;;		On entry : 0/0
 12060 ;;		On exit  : 0/0
 12061 ;;		Unchanged: 0/0
 12062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12064 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12065 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12066 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12067 ;;Total ram usage:        5 bytes
 12068 ;; Hardware stack levels used:    1
 12069 ;; Hardware stack levels required when called:    2
 12070 ;; This function calls:
 12071 ;;		___awtoft
 12072 ;;		___ftmul
 12073 ;;		___fttol
 12074 ;; This function is called by:
 12075 ;;		_SYSTEM_Initialize
 12076 ;; This function uses a non-reentrant model
 12077 ;;
 12078                           
 12079                           
 12080                           ;psect for function _Init_Battery_State_Machine
 12081  1799                     _Init_Battery_State_Machine:	
 12082                           
 12083                           ;incstack = 0
 12084                           ; Regs used in _Init_Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12085                           ;Init_Battery_State_Machine@z stored from wreg
 12086  1799  0020               	movlb	0	; select bank0
 12087  179A  00C2               	movwf	Init_Battery_State_Machine@z
 12088                           
 12089                           ;battery_charger.c: 20: batteryState[z] =PRECHARGE;
 12090  179B  3003               	movlw	3
 12091  179C  00BE               	movwf	??_Init_Battery_State_Machine
 12092  179D  0842               	movf	Init_Battery_State_Machine@z,w
 12093  179E  3EE5               	addlw	(low (_batteryState| 0))& (0+255)
 12094  179F  0086               	movwf	6
 12095  17A0  0187               	clrf	7
 12096  17A1  083E               	movf	??_Init_Battery_State_Machine,w
 12097  17A2  0081               	movwf	1
 12098                           
 12099                           ;battery_charger.c: 21: stateCounter[z] =5;
 12100  17A3  3542               	lslf	Init_Battery_State_Machine@z,w
 12101  17A4  3EC9               	addlw	(low (_stateCounter| 0))& (0+255)
 12102  17A5  0086               	movwf	6
 12103  17A6  0187               	clrf	7
 12104  17A7  3005               	movlw	5
 12105  17A8  3FC0               	movwi [0]fsr1
 12106  17A9  3000               	movlw	0
 12107  17AA  3FC1               	movwi [1]fsr1
 12108                           
 12109                           ;battery_charger.c: 22: Iref[z] =10;
 12110  17AB  3542               	lslf	Init_Battery_State_Machine@z,w
 12111  17AC  3ECD               	addlw	(low (_Iref| 0))& (0+255)
 12112  17AD  0086               	movwf	6
 12113  17AE  0187               	clrf	7
 12114  17AF  300A               	movlw	10
 12115  17B0  3FC0               	movwi [0]fsr1
 12116  17B1  3000               	movlw	0
 12117  17B2  3FC1               	movwi [1]fsr1
 12118                           
 12119                           ;battery_charger.c: 23: Vref[z] =1425+(int16_t)((250-batteryTemp)*.24);
 12120  17B3  0021               	movlb	1	; select bank1
 12121  17B4  096D               	comf	_batteryTemp^(0+128),w
 12122  17B5  0020               	movlb	0	; select bank0
 12123  17B6  00BE               	movwf	??_Init_Battery_State_Machine
 12124  17B7  0021               	movlb	1	; select bank1
 12125  17B8  096E               	comf	(_batteryTemp+1)^(0+128),w
 12126  17B9  0020               	movlb	0	; select bank0
 12127  17BA  00BF               	movwf	??_Init_Battery_State_Machine+1
 12128  17BB  0ABE               	incf	??_Init_Battery_State_Machine,f
 12129  17BC  1903               	skipnz
 12130  17BD  0ABF               	incf	??_Init_Battery_State_Machine+1,f
 12131  17BE  083E               	movf	??_Init_Battery_State_Machine,w
 12132  17BF  3EFA               	addlw	250
 12133  17C0  00F8               	movwf	___awtoft@c
 12134  17C1  3000               	movlw	0
 12135  17C2  3D3F               	addwfc	??_Init_Battery_State_Machine+1,w
 12136  17C3  00F9               	movwf	___awtoft@c+1
 12137  17C4  3193  23D3  3197   	fcall	___awtoft
 12138  17C7  0878               	movf	?___awtoft,w
 12139  17C8  0020               	movlb	0	; select bank0
 12140  17C9  00A3               	movwf	___ftmul@f2
 12141  17CA  0879               	movf	?___awtoft+1,w
 12142  17CB  00A4               	movwf	___ftmul@f2+1
 12143  17CC  087A               	movf	?___awtoft+2,w
 12144  17CD  00A5               	movwf	___ftmul@f2+2
 12145  17CE  30C3               	movlw	195
 12146  17CF  00A0               	movwf	___ftmul@f1
 12147  17D0  3075               	movlw	117
 12148  17D1  00A1               	movwf	___ftmul@f1+1
 12149  17D2  303E               	movlw	62
 12150  17D3  00A2               	movwf	___ftmul@f1+2
 12151  17D4  318B  2311  3197   	fcall	___ftmul
 12152  17D7  0020               	movlb	0	; select bank0
 12153  17D8  0820               	movf	?___ftmul,w
 12154  17D9  00B0               	movwf	___fttol@f1
 12155  17DA  0821               	movf	?___ftmul+1,w
 12156  17DB  00B1               	movwf	___fttol@f1+1
 12157  17DC  0822               	movf	?___ftmul+2,w
 12158  17DD  00B2               	movwf	___fttol@f1+2
 12159  17DE  3189  2131         	fcall	___fttol
 12160  17E0  0020               	movlb	0	; select bank0
 12161  17E1  0830               	movf	?___fttol,w
 12162  17E2  3E91               	addlw	145
 12163  17E3  00C0               	movwf	??_Init_Battery_State_Machine+2
 12164  17E4  3005               	movlw	5
 12165  17E5  3D31               	addwfc	?___fttol+1,w
 12166  17E6  00C1               	movwf	??_Init_Battery_State_Machine+3
 12167  17E7  3542               	lslf	Init_Battery_State_Machine@z,w
 12168  17E8  3EC5               	addlw	(low (_Vref| 0))& (0+255)
 12169  17E9  0086               	movwf	6
 12170  17EA  0187               	clrf	7
 12171  17EB  0840               	movf	??_Init_Battery_State_Machine+2,w
 12172  17EC  3FC0               	movwi [0]fsr1
 12173  17ED  0841               	movf	??_Init_Battery_State_Machine+3,w
 12174  17EE  3FC1               	movwi [1]fsr1
 12175                           
 12176                           ;battery_charger.c: 24: Imin[z] =15;
 12177  17EF  3542               	lslf	Init_Battery_State_Machine@z,w
 12178  17F0  3ED5               	addlw	(low (_Imin| 0))& (0+255)
 12179  17F1  0086               	movwf	6
 12180  17F2  0187               	clrf	7
 12181  17F3  300F               	movlw	15
 12182  17F4  3FC0               	movwi [0]fsr1
 12183  17F5  3000               	movlw	0
 12184  17F6  3FC1               	movwi [1]fsr1
 12185                           
 12186                           ;battery_charger.c: 25: IminCount[z] = 600;
 12187  17F7  3542               	lslf	Init_Battery_State_Machine@z,w
 12188  17F8  3ED1               	addlw	(low (_IminCount| 0))& (0+255)
 12189  17F9  0086               	movwf	6
 12190  17FA  0187               	clrf	7
 12191  17FB  3058               	movlw	88
 12192  17FC  3FC0               	movwi [0]fsr1
 12193  17FD  3002               	movlw	2
 12194  17FE  3FC1               	movwi [1]fsr1
 12195  17FF  0008               	return
 12196  1800                     __end_of_Init_Battery_State_Machine:	
 12197                           
 12198                           	psect	text28
 12199  13B4                     __ptext28:	
 12200 ;; *************** function _ADC_Initialize *****************
 12201 ;; Defined at:
 12202 ;;		line 111 in file "adc.c"
 12203 ;; Parameters:    Size  Location     Type
 12204 ;;		None
 12205 ;; Auto vars:     Size  Location     Type
 12206 ;;		None
 12207 ;; Return value:  Size  Location     Type
 12208 ;;                  1    wreg      void 
 12209 ;; Registers used:
 12210 ;;		wreg, status,2
 12211 ;; Tracked objects:
 12212 ;;		On entry : 0/0
 12213 ;;		On exit  : 0/0
 12214 ;;		Unchanged: 0/0
 12215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12220 ;;Total ram usage:        0 bytes
 12221 ;; Hardware stack levels used:    1
 12222 ;; This function calls:
 12223 ;;		Nothing
 12224 ;; This function is called by:
 12225 ;;		_SYSTEM_Initialize
 12226 ;; This function uses a non-reentrant model
 12227 ;;
 12228                           
 12229                           
 12230                           ;psect for function _ADC_Initialize
 12231  13B4                     _ADC_Initialize:	
 12232                           
 12233                           ;adc.c: 113: ADCON1 = 0x00;
 12234                           
 12235                           ;incstack = 0
 12236                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 12237  13B4  0021               	movlb	1	; select bank1
 12238  13B5  0194               	clrf	20	;volatile
 12239                           
 12240                           ;adc.c: 115: ADCON2 = 0x00;
 12241  13B6  0195               	clrf	21	;volatile
 12242                           
 12243                           ;adc.c: 117: ADCON3 = 0x00;
 12244  13B7  0196               	clrf	22	;volatile
 12245                           
 12246                           ;adc.c: 119: ADACT = 0x00;
 12247  13B8  0199               	clrf	25	;volatile
 12248                           
 12249                           ;adc.c: 121: ADSTAT = 0x00;
 12250  13B9  0197               	clrf	23	;volatile
 12251                           
 12252                           ;adc.c: 123: FVRCON = 0b11000011;
 12253  13BA  30C3               	movlw	195
 12254  13BB  0032               	movlb	18	; select bank18
 12255  13BC  008C               	movwf	12	;volatile
 12256                           
 12257                           ;adc.c: 124: ADCLK = 0x3F;
 12258  13BD  303F               	movlw	63
 12259  13BE  0021               	movlb	1	; select bank1
 12260  13BF  0098               	movwf	24	;volatile
 12261                           
 12262                           ;adc.c: 131: ADREF = 0x03;
 12263  13C0  3003               	movlw	3
 12264  13C1  009A               	movwf	26	;volatile
 12265                           
 12266                           ;adc.c: 134: ADCAP = 0x00;
 12267  13C2  019B               	clrf	27	;volatile
 12268                           
 12269                           ;adc.c: 137: ADPRE = 0x07;
 12270  13C3  3007               	movlw	7
 12271  13C4  009C               	movwf	28	;volatile
 12272                           
 12273                           ;adc.c: 139: ADACQ = 0x00;
 12274  13C5  019D               	clrf	29	;volatile
 12275                           
 12276                           ;adc.c: 141: ADPCH = 0x00;
 12277  13C6  019E               	clrf	30	;volatile
 12278                           
 12279                           ;adc.c: 143: ADRPT = 0x00;
 12280  13C7  0022               	movlb	2	; select bank2
 12281  13C8  018D               	clrf	13	;volatile
 12282                           
 12283                           ;adc.c: 145: ADLTHL = 0x00;
 12284  13C9  018E               	clrf	14	;volatile
 12285                           
 12286                           ;adc.c: 147: ADLTHH = 0x00;
 12287  13CA  018F               	clrf	15	;volatile
 12288                           
 12289                           ;adc.c: 149: ADUTHL = 0x00;
 12290  13CB  0190               	clrf	16	;volatile
 12291                           
 12292                           ;adc.c: 151: ADUTHH = 0x00;
 12293  13CC  0191               	clrf	17	;volatile
 12294                           
 12295                           ;adc.c: 153: ADSTPTL = 0x00;
 12296  13CD  0192               	clrf	18	;volatile
 12297                           
 12298                           ;adc.c: 155: ADSTPTH = 0x00;
 12299  13CE  0193               	clrf	19	;volatile
 12300                           
 12301                           ;adc.c: 157: ADCON0 = 0x84;
 12302  13CF  3084               	movlw	132
 12303  13D0  0021               	movlb	1	; select bank1
 12304  13D1  0093               	movwf	19	;volatile
 12305  13D2  0008               	return
 12306  13D3                     __end_of_ADC_Initialize:	
 12307                           
 12308                           	psect	text29
 12309  1365                     __ptext29:	
 12310 ;; *************** function _PWM7_LoadDutyValue *****************
 12311 ;; Defined at:
 12312 ;;		line 37 in file "pwm.c"
 12313 ;; Parameters:    Size  Location     Type
 12314 ;;  dutyCycle7      2    0[COMMON] unsigned int 
 12315 ;; Auto vars:     Size  Location     Type
 12316 ;;		None
 12317 ;; Return value:  Size  Location     Type
 12318 ;;                  1    wreg      void 
 12319 ;; Registers used:
 12320 ;;		wreg, status,2, status,0
 12321 ;; Tracked objects:
 12322 ;;		On entry : 0/0
 12323 ;;		On exit  : 0/0
 12324 ;;		Unchanged: 0/0
 12325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12326 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12328 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12329 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12330 ;;Total ram usage:        4 bytes
 12331 ;; Hardware stack levels used:    1
 12332 ;; This function calls:
 12333 ;;		Nothing
 12334 ;; This function is called by:
 12335 ;;		_main
 12336 ;; This function uses a non-reentrant model
 12337 ;;
 12338                           
 12339                           
 12340                           ;psect for function _PWM7_LoadDutyValue
 12341  1365                     _PWM7_LoadDutyValue:	
 12342                           
 12343                           ;pwm.c: 39: PWM7DCH = (dutyCycle7 & 0x03FC)>>2;
 12344                           
 12345                           ;incstack = 0
 12346                           ; Regs used in _PWM7_LoadDutyValue: [wreg+status,2+status,0]
 12347  1365  0871               	movf	PWM7_LoadDutyValue@dutyCycle7+1,w
 12348  1366  00F3               	movwf	??_PWM7_LoadDutyValue+1
 12349  1367  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 12350  1368  00F2               	movwf	??_PWM7_LoadDutyValue
 12351  1369  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 12352  136A  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 12353  136B  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 12354  136C  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 12355  136D  0872               	movf	??_PWM7_LoadDutyValue,w
 12356  136E  0027               	movlb	7	; select bank7
 12357  136F  0091               	movwf	17	;volatile
 12358                           
 12359                           ;pwm.c: 41: PWM7DCL = (dutyCycle7 & 0x0003)<<6;
 12360  1370  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 12361  1371  3903               	andlw	3
 12362  1372  00F2               	movwf	??_PWM7_LoadDutyValue
 12363  1373  3005               	movlw	5
 12364  1374                     u3595:	
 12365  1374  35F2               	lslf	??_PWM7_LoadDutyValue,f
 12366  1375  3EFF               	addlw	-1
 12367  1376  1D03               	skipz
 12368  1377  2B74               	goto	u3595
 12369  1378  3572               	lslf	??_PWM7_LoadDutyValue,w
 12370  1379  0090               	movwf	16	;volatile
 12371  137A  0008               	return
 12372  137B                     __end_of_PWM7_LoadDutyValue:	
 12373                           
 12374                           	psect	text30
 12375  134F                     __ptext30:	
 12376 ;; *************** function _PWM6_LoadDutyValue *****************
 12377 ;; Defined at:
 12378 ;;		line 30 in file "pwm.c"
 12379 ;; Parameters:    Size  Location     Type
 12380 ;;  dutyCycle6      2    0[COMMON] unsigned int 
 12381 ;; Auto vars:     Size  Location     Type
 12382 ;;		None
 12383 ;; Return value:  Size  Location     Type
 12384 ;;                  1    wreg      void 
 12385 ;; Registers used:
 12386 ;;		wreg, status,2, status,0
 12387 ;; Tracked objects:
 12388 ;;		On entry : 0/0
 12389 ;;		On exit  : 0/0
 12390 ;;		Unchanged: 0/0
 12391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12392 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12394 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12395 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12396 ;;Total ram usage:        4 bytes
 12397 ;; Hardware stack levels used:    1
 12398 ;; This function calls:
 12399 ;;		Nothing
 12400 ;; This function is called by:
 12401 ;;		_main
 12402 ;; This function uses a non-reentrant model
 12403 ;;
 12404                           
 12405                           
 12406                           ;psect for function _PWM6_LoadDutyValue
 12407  134F                     _PWM6_LoadDutyValue:	
 12408                           
 12409                           ;pwm.c: 32: PWM6DCH = (dutyCycle6 & 0x03FC)>>2;
 12410                           
 12411                           ;incstack = 0
 12412                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 12413  134F  0871               	movf	PWM6_LoadDutyValue@dutyCycle6+1,w
 12414  1350  00F3               	movwf	??_PWM6_LoadDutyValue+1
 12415  1351  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 12416  1352  00F2               	movwf	??_PWM6_LoadDutyValue
 12417  1353  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 12418  1354  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 12419  1355  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 12420  1356  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 12421  1357  0872               	movf	??_PWM6_LoadDutyValue,w
 12422  1358  0027               	movlb	7	; select bank7
 12423  1359  008D               	movwf	13	;volatile
 12424                           
 12425                           ;pwm.c: 34: PWM6DCL = (dutyCycle6 & 0x0003)<<6;
 12426  135A  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 12427  135B  3903               	andlw	3
 12428  135C  00F2               	movwf	??_PWM6_LoadDutyValue
 12429  135D  3005               	movlw	5
 12430  135E                     u3585:	
 12431  135E  35F2               	lslf	??_PWM6_LoadDutyValue,f
 12432  135F  3EFF               	addlw	-1
 12433  1360  1D03               	skipz
 12434  1361  2B5E               	goto	u3585
 12435  1362  3572               	lslf	??_PWM6_LoadDutyValue,w
 12436  1363  008C               	movwf	12	;volatile
 12437  1364  0008               	return
 12438  1365                     __end_of_PWM6_LoadDutyValue:	
 12439                           
 12440                           	psect	text31
 12441  1311                     __ptext31:	
 12442 ;; *************** function _LCDWriteString *****************
 12443 ;; Defined at:
 12444 ;;		line 176 in file "lcd.c"
 12445 ;; Parameters:    Size  Location     Type
 12446 ;;  characters      2   12[COMMON] PTR const unsigned char 
 12447 ;;		 -> STR_3(5), STR_2(5), STR_1(4), 
 12448 ;; Auto vars:     Size  Location     Type
 12449 ;;		None
 12450 ;; Return value:  Size  Location     Type
 12451 ;;                  1    wreg      void 
 12452 ;; Registers used:
 12453 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12454 ;; Tracked objects:
 12455 ;;		On entry : 0/0
 12456 ;;		On exit  : 0/0
 12457 ;;		Unchanged: 0/0
 12458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12459 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12461 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12462 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12463 ;;Total ram usage:        3 bytes
 12464 ;; Hardware stack levels used:    1
 12465 ;; Hardware stack levels required when called:    2
 12466 ;; This function calls:
 12467 ;;		_LCDWriteCharacter
 12468 ;; This function is called by:
 12469 ;;		_main
 12470 ;; This function uses a non-reentrant model
 12471 ;;
 12472                           
 12473                           
 12474                           ;psect for function _LCDWriteString
 12475  1311                     _LCDWriteString:	
 12476  1311                     l2988:	
 12477                           ;lcd.c: 178: while (*characters)
 12478                           
 12479                           ;incstack = 0
 12480                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12481                           
 12482  1311  087C               	movf	LCDWriteString@characters,w
 12483  1312  0084               	movwf	4
 12484  1313  087D               	movf	LCDWriteString@characters+1,w
 12485  1314  0085               	movwf	5
 12486  1315  0012               	moviw fsr0++
 12487  1316  1903               	btfsc	3,2
 12488  1317  0008               	return
 12489                           
 12490                           ;lcd.c: 179: LCDWriteCharacter(*characters++);
 12491  1318  087C               	movf	LCDWriteString@characters,w
 12492  1319  0084               	movwf	4
 12493  131A  087D               	movf	LCDWriteString@characters+1,w
 12494  131B  0085               	movwf	5
 12495  131C  0800               	movf	0,w	;code access
 12496  131D  3196  2681  3193   	fcall	_LCDWriteCharacter
 12497  1320  3001               	movlw	1
 12498  1321  07FC               	addwf	LCDWriteString@characters,f
 12499  1322  3000               	movlw	0
 12500  1323  3DFD               	addwfc	LCDWriteString@characters+1,f
 12501  1324  2B11               	goto	l2988
 12502  1325                     __end_of_LCDWriteString:	
 12503                           
 12504                           	psect	text32
 12505  0BC5                     __ptext32:	
 12506 ;; *************** function _LCDWriteInt *****************
 12507 ;; Defined at:
 12508 ;;		line 190 in file "lcd.c"
 12509 ;; Parameters:    Size  Location     Type
 12510 ;;  value           2    0[BANK0 ] int 
 12511 ;;  fieldLength     1    2[BANK0 ] char 
 12512 ;;  numPlaces       1    3[BANK0 ] unsigned char 
 12513 ;;  sign            1    4[BANK0 ] unsigned char 
 12514 ;; Auto vars:     Size  Location     Type
 12515 ;;  str             5    9[BANK0 ] unsigned char [5]
 12516 ;;  i               1   15[BANK0 ] unsigned char 
 12517 ;;  j               1   14[BANK0 ] unsigned char 
 12518 ;; Return value:  Size  Location     Type
 12519 ;;                  1    wreg      void 
 12520 ;; Registers used:
 12521 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12522 ;; Tracked objects:
 12523 ;;		On entry : 0/0
 12524 ;;		On exit  : 0/0
 12525 ;;		Unchanged: 0/0
 12526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12527 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12528 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12529 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12530 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12531 ;;Total ram usage:       16 bytes
 12532 ;; Hardware stack levels used:    1
 12533 ;; Hardware stack levels required when called:    2
 12534 ;; This function calls:
 12535 ;;		_LCDWriteCharacter
 12536 ;;		___awdiv
 12537 ;;		___lwmod
 12538 ;; This function is called by:
 12539 ;;		_main
 12540 ;; This function uses a non-reentrant model
 12541 ;;
 12542                           
 12543                           
 12544                           ;psect for function _LCDWriteInt
 12545  0BC5                     _LCDWriteInt:	
 12546                           
 12547                           ;lcd.c: 192: uint8_t str[5]={0,0,0,0,0};
 12548                           
 12549                           ;incstack = 0
 12550                           ; Regs used in _LCDWriteInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12551  0BC5  30C0               	movlw	low LCDWriteInt@F14388
 12552  0BC6  0086               	movwf	6
 12553  0BC7  3000               	movlw	high LCDWriteInt@F14388
 12554  0BC8  0087               	movwf	7
 12555  0BC9  3029               	movlw	low LCDWriteInt@str
 12556  0BCA  0084               	movwf	4
 12557  0BCB  3000               	movlw	high LCDWriteInt@str
 12558  0BCC  0085               	movwf	5
 12559  0BCD  3005               	movlw	5
 12560  0BCE  0020               	movlb	0	; select bank0
 12561  0BCF  00A5               	movwf	??_LCDWriteInt
 12562  0BD0                     u3490:	
 12563  0BD0  0016               	moviw fsr1++
 12564  0BD1  001A               	movwi fsr0++
 12565  0BD2  0BA5               	decfsz	??_LCDWriteInt,f
 12566  0BD3  2BD0               	goto	u3490
 12567                           
 12568                           ;lcd.c: 193: uint8_t i=4,j=0;
 12569  0BD4  3004               	movlw	4
 12570  0BD5  00A5               	movwf	??_LCDWriteInt
 12571  0BD6  0825               	movf	??_LCDWriteInt,w
 12572  0BD7  00AF               	movwf	LCDWriteInt@i
 12573  0BD8  01AE               	clrf	LCDWriteInt@j
 12574                           
 12575                           ;lcd.c: 195: if(value<0)
 12576  0BD9  1FA1               	btfss	LCDWriteInt@value+1,7
 12577  0BDA  2BE6               	goto	l3002
 12578                           
 12579                           ;lcd.c: 196: {
 12580                           ;lcd.c: 197: LCDWriteCharacter('-');
 12581  0BDB  302D               	movlw	45
 12582  0BDC  3196  2681  318B   	fcall	_LCDWriteCharacter
 12583                           
 12584                           ;lcd.c: 198: value=value*-1;
 12585  0BDF  0020               	movlb	0	; select bank0
 12586  0BE0  09A0               	comf	LCDWriteInt@value,f
 12587  0BE1  09A1               	comf	LCDWriteInt@value+1,f
 12588  0BE2  0AA0               	incf	LCDWriteInt@value,f
 12589  0BE3  1903               	skipnz
 12590  0BE4  0AA1               	incf	LCDWriteInt@value+1,f
 12591                           
 12592                           ;lcd.c: 199: }
 12593  0BE5  2BED               	goto	l3012
 12594  0BE6                     l3002:	
 12595                           
 12596                           ;lcd.c: 201: else
 12597                           ;lcd.c: 202: {
 12598                           ;lcd.c: 203: if(sign == 1)
 12599  0BE6  0324               	decf	LCDWriteInt@sign,w
 12600  0BE7  1D03               	btfss	3,2
 12601  0BE8  2BED               	goto	l3012
 12602                           
 12603                           ;lcd.c: 204: {
 12604                           ;lcd.c: 205: LCDWriteCharacter('+');
 12605  0BE9  302B               	movlw	43
 12606  0BEA  3196  2681  318B   	fcall	_LCDWriteCharacter
 12607  0BED                     l3012:	
 12608                           ;lcd.c: 206: }
 12609                           ;lcd.c: 207: }
 12610                           ;lcd.c: 209: while(value)
 12611                           
 12612  0BED  0020               	movlb	0	; select bank0
 12613  0BEE  0820               	movf	LCDWriteInt@value,w
 12614  0BEF  0421               	iorwf	LCDWriteInt@value+1,w
 12615  0BF0  1903               	btfsc	3,2
 12616  0BF1  2C1A               	goto	l3014
 12617                           
 12618                           ;lcd.c: 210: {
 12619                           ;lcd.c: 211: str[i]=(uint16_t)value%10;
 12620  0BF2  300A               	movlw	10
 12621  0BF3  00F0               	movwf	___lwmod@divisor
 12622  0BF4  3000               	movlw	0
 12623  0BF5  00F1               	movwf	___lwmod@divisor+1
 12624  0BF6  0020               	movlb	0	; select bank0
 12625  0BF7  0821               	movf	LCDWriteInt@value+1,w
 12626  0BF8  00F3               	movwf	___lwmod@dividend+1
 12627  0BF9  0820               	movf	LCDWriteInt@value,w
 12628  0BFA  00F2               	movwf	___lwmod@dividend
 12629  0BFB  3188  2001  318B   	fcall	___lwmod
 12630  0BFE  0870               	movf	?___lwmod,w
 12631  0BFF  0020               	movlb	0	; select bank0
 12632  0C00  00A5               	movwf	??_LCDWriteInt
 12633  0C01  082F               	movf	LCDWriteInt@i,w
 12634  0C02  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 12635  0C03  0086               	movwf	6
 12636  0C04  0187               	clrf	7
 12637  0C05  0825               	movf	??_LCDWriteInt,w
 12638  0C06  0081               	movwf	1
 12639                           
 12640                           ;lcd.c: 212: value=value/10;
 12641  0C07  300A               	movlw	10
 12642  0C08  00F0               	movwf	___awdiv@divisor
 12643  0C09  3000               	movlw	0
 12644  0C0A  00F1               	movwf	___awdiv@divisor+1
 12645  0C0B  0821               	movf	LCDWriteInt@value+1,w
 12646  0C0C  00F3               	movwf	___awdiv@dividend+1
 12647  0C0D  0820               	movf	LCDWriteInt@value,w
 12648  0C0E  00F2               	movwf	___awdiv@dividend
 12649  0C0F  3196  2630  318B   	fcall	___awdiv
 12650  0C12  0871               	movf	?___awdiv+1,w
 12651  0C13  0020               	movlb	0	; select bank0
 12652  0C14  00A1               	movwf	LCDWriteInt@value+1
 12653  0C15  0870               	movf	?___awdiv,w
 12654  0C16  00A0               	movwf	LCDWriteInt@value
 12655                           
 12656                           ;lcd.c: 213: i--;
 12657  0C17  3001               	movlw	1
 12658  0C18  02AF               	subwf	LCDWriteInt@i,f
 12659  0C19  2BED               	goto	l3012
 12660  0C1A                     l3014:	
 12661                           
 12662                           ;lcd.c: 214: }
 12663                           ;lcd.c: 215: if(fieldLength==-1)
 12664  0C1A  0A22               	incf	LCDWriteInt@fieldLength,w
 12665  0C1B  1903               	btfsc	3,2
 12666  0C1C  2C22               	goto	l3020
 12667  0C1D  2C2A               	goto	l3022
 12668  0C1E                     l3018:	
 12669                           ;lcd.c: 216: {
 12670                           ;lcd.c: 217: while(str[j]==0)
 12671                           
 12672                           
 12673                           ;lcd.c: 218: {
 12674                           ;lcd.c: 219: j++;
 12675  0C1E  3001               	movlw	1
 12676  0C1F  00A5               	movwf	??_LCDWriteInt
 12677  0C20  0825               	movf	??_LCDWriteInt,w
 12678  0C21  07AE               	addwf	LCDWriteInt@j,f
 12679  0C22                     l3020:	
 12680  0C22  082E               	movf	LCDWriteInt@j,w
 12681  0C23  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 12682  0C24  0086               	movwf	6
 12683  0C25  0187               	clrf	7
 12684  0C26  0801               	movf	1,w
 12685  0C27  1D03               	btfss	3,2
 12686  0C28  2C30               	goto	l3024
 12687  0C29  2C1E               	goto	l3018
 12688  0C2A                     l3022:	
 12689                           ;lcd.c: 220: }
 12690                           ;lcd.c: 221: }
 12691                           
 12692                           
 12693                           ;lcd.c: 222: else
 12694                           ;lcd.c: 223: {
 12695                           ;lcd.c: 224: j=(uint8_t)(5-fieldLength);
 12696  0C2A  0322               	decf	LCDWriteInt@fieldLength,w
 12697  0C2B  3AFF               	xorlw	255
 12698  0C2C  3E05               	addlw	5
 12699  0C2D  00A5               	movwf	??_LCDWriteInt
 12700  0C2E  0825               	movf	??_LCDWriteInt,w
 12701  0C2F  00AE               	movwf	LCDWriteInt@j
 12702  0C30                     l3024:	
 12703                           
 12704                           ;lcd.c: 225: }
 12705                           ;lcd.c: 227: for(i=j;i<(5-numPlaces);i++)
 12706  0C30  082E               	movf	LCDWriteInt@j,w
 12707  0C31  00A5               	movwf	??_LCDWriteInt
 12708  0C32  0825               	movf	??_LCDWriteInt,w
 12709  0C33  00AF               	movwf	LCDWriteInt@i
 12710  0C34                     l3030:	
 12711  0C34  0823               	movf	LCDWriteInt@numPlaces,w
 12712  0C35  00A5               	movwf	??_LCDWriteInt
 12713  0C36  01A6               	clrf	??_LCDWriteInt+1
 12714  0C37  09A5               	comf	??_LCDWriteInt,f
 12715  0C38  09A6               	comf	??_LCDWriteInt+1,f
 12716  0C39  0AA5               	incf	??_LCDWriteInt,f
 12717  0C3A  1903               	skipnz
 12718  0C3B  0AA6               	incf	??_LCDWriteInt+1,f
 12719  0C3C  0825               	movf	??_LCDWriteInt,w
 12720  0C3D  3E05               	addlw	5
 12721  0C3E  00A7               	movwf	??_LCDWriteInt+2
 12722  0C3F  3000               	movlw	0
 12723  0C40  3D26               	addwfc	??_LCDWriteInt+1,w
 12724  0C41  00A8               	movwf	??_LCDWriteInt+3
 12725  0C42  0828               	movf	??_LCDWriteInt+3,w
 12726  0C43  3A80               	xorlw	128
 12727  0C44  3C80               	sublw	128
 12728  0C45  1D03               	skipz
 12729  0C46  2C49               	goto	u3555
 12730  0C47  0827               	movf	??_LCDWriteInt+2,w
 12731  0C48  022F               	subwf	LCDWriteInt@i,w
 12732  0C49                     u3555:	
 12733  0C49  1803               	btfsc	3,0
 12734  0C4A  2C5B               	goto	l3032
 12735                           
 12736                           ;lcd.c: 228: {
 12737                           ;lcd.c: 229: LCDWriteCharacter((uint8_t)(48+str[i]));
 12738  0C4B  0020               	movlb	0	; select bank0
 12739  0C4C  082F               	movf	LCDWriteInt@i,w
 12740  0C4D  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 12741  0C4E  0086               	movwf	6
 12742  0C4F  0187               	clrf	7
 12743  0C50  0801               	movf	1,w
 12744  0C51  3E30               	addlw	48
 12745  0C52  3196  2681  318B   	fcall	_LCDWriteCharacter
 12746  0C55  3001               	movlw	1
 12747  0C56  0020               	movlb	0	; select bank0
 12748  0C57  00A5               	movwf	??_LCDWriteInt
 12749  0C58  0825               	movf	??_LCDWriteInt,w
 12750  0C59  07AF               	addwf	LCDWriteInt@i,f
 12751  0C5A  2C34               	goto	l3030
 12752  0C5B                     l3032:	
 12753                           
 12754                           ;lcd.c: 230: }
 12755                           ;lcd.c: 232: if(numPlaces == 1)
 12756  0C5B  0020               	movlb	0	; select bank0
 12757  0C5C  0323               	decf	LCDWriteInt@numPlaces,w
 12758  0C5D  1D03               	btfss	3,2
 12759  0C5E  2C69               	goto	l3036
 12760                           
 12761                           ;lcd.c: 233: {
 12762                           ;lcd.c: 234: LCDWriteCharacter(46);
 12763  0C5F  302E               	movlw	46
 12764  0C60  3196  2681  318B   	fcall	_LCDWriteCharacter
 12765                           
 12766                           ;lcd.c: 235: LCDWriteCharacter ((uint8_t)(48+str[4]));
 12767  0C63  0020               	movlb	0	; select bank0
 12768  0C64  082D               	movf	LCDWriteInt@str+4,w
 12769  0C65  3E30               	addlw	48
 12770  0C66  3196  2681  318B   	fcall	_LCDWriteCharacter
 12771  0C69                     l3036:	
 12772                           
 12773                           ;lcd.c: 236: }
 12774                           ;lcd.c: 238: if(numPlaces == 2)
 12775  0C69  3002               	movlw	2
 12776  0C6A  0020               	movlb	0	; select bank0
 12777  0C6B  0623               	xorwf	LCDWriteInt@numPlaces,w
 12778  0C6C  1D03               	btfss	3,2
 12779  0C6D  0008               	return
 12780                           
 12781                           ;lcd.c: 239: {
 12782                           ;lcd.c: 240: LCDWriteCharacter(46);
 12783  0C6E  302E               	movlw	46
 12784  0C6F  3196  2681  318B   	fcall	_LCDWriteCharacter
 12785                           
 12786                           ;lcd.c: 241: LCDWriteCharacter((uint8_t)(48+str[3]));
 12787  0C72  0020               	movlb	0	; select bank0
 12788  0C73  082C               	movf	LCDWriteInt@str+3,w
 12789  0C74  3E30               	addlw	48
 12790  0C75  3196  2681  318B   	fcall	_LCDWriteCharacter
 12791                           
 12792                           ;lcd.c: 242: LCDWriteCharacter((uint8_t)(48+str[4]));
 12793  0C78  0020               	movlb	0	; select bank0
 12794  0C79  082D               	movf	LCDWriteInt@str+4,w
 12795  0C7A  3E30               	addlw	48
 12796  0C7B  3196  2681         	fcall	_LCDWriteCharacter
 12797  0C7D  0008               	return
 12798  0C7E                     __end_of_LCDWriteInt:	
 12799                           
 12800                           	psect	text33
 12801  0801                     __ptext33:	
 12802 ;; *************** function ___lwmod *****************
 12803 ;; Defined at:
 12804 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 12805 ;; Parameters:    Size  Location     Type
 12806 ;;  divisor         2    0[COMMON] unsigned int 
 12807 ;;  dividend        2    2[COMMON] unsigned int 
 12808 ;; Auto vars:     Size  Location     Type
 12809 ;;  counter         1    5[COMMON] unsigned char 
 12810 ;; Return value:  Size  Location     Type
 12811 ;;                  2    0[COMMON] unsigned int 
 12812 ;; Registers used:
 12813 ;;		wreg, status,2, status,0
 12814 ;; Tracked objects:
 12815 ;;		On entry : 0/0
 12816 ;;		On exit  : 0/0
 12817 ;;		Unchanged: 0/0
 12818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12819 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12820 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12821 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12822 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12823 ;;Total ram usage:        6 bytes
 12824 ;; Hardware stack levels used:    1
 12825 ;; This function calls:
 12826 ;;		Nothing
 12827 ;; This function is called by:
 12828 ;;		_LCDWriteInt
 12829 ;; This function uses a non-reentrant model
 12830 ;;
 12831                           
 12832                           
 12833                           ;psect for function ___lwmod
 12834  0801                     ___lwmod:	
 12835                           
 12836                           ;incstack = 0
 12837                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 12838  0801  0870               	movf	___lwmod@divisor,w
 12839  0802  0471               	iorwf	___lwmod@divisor+1,w
 12840  0803  1903               	btfsc	3,2
 12841  0804  2828               	goto	l2838
 12842  0805  01F5               	clrf	___lwmod@counter
 12843  0806  0AF5               	incf	___lwmod@counter,f
 12844  0807                     l2828:	
 12845  0807  1BF1               	btfsc	___lwmod@divisor+1,7
 12846  0808  2813               	goto	l2830
 12847  0809  3001               	movlw	1
 12848  080A                     u3065:	
 12849  080A  35F0               	lslf	___lwmod@divisor,f
 12850  080B  0DF1               	rlf	___lwmod@divisor+1,f
 12851  080C  0B89               	decfsz	9,f
 12852  080D  280A               	goto	u3065
 12853  080E  3001               	movlw	1
 12854  080F  00F4               	movwf	??___lwmod
 12855  0810  0874               	movf	??___lwmod,w
 12856  0811  07F5               	addwf	___lwmod@counter,f
 12857  0812  2807               	goto	l2828
 12858  0813                     l2830:	
 12859  0813  0871               	movf	___lwmod@divisor+1,w
 12860  0814  0273               	subwf	___lwmod@dividend+1,w
 12861  0815  1D03               	skipz
 12862  0816  2819               	goto	u3085
 12863  0817  0870               	movf	___lwmod@divisor,w
 12864  0818  0272               	subwf	___lwmod@dividend,w
 12865  0819                     u3085:	
 12866  0819  1C03               	skipc
 12867  081A  281F               	goto	l2834
 12868  081B  0870               	movf	___lwmod@divisor,w
 12869  081C  02F2               	subwf	___lwmod@dividend,f
 12870  081D  0871               	movf	___lwmod@divisor+1,w
 12871  081E  3BF3               	subwfb	___lwmod@dividend+1,f
 12872  081F                     l2834:	
 12873  081F  3001               	movlw	1
 12874  0820                     u3095:	
 12875  0820  36F1               	lsrf	___lwmod@divisor+1,f
 12876  0821  0CF0               	rrf	___lwmod@divisor,f
 12877  0822  0B89               	decfsz	9,f
 12878  0823  2820               	goto	u3095
 12879  0824  3001               	movlw	1
 12880  0825  02F5               	subwf	___lwmod@counter,f
 12881  0826  1D03               	btfss	3,2
 12882  0827  2813               	goto	l2830
 12883  0828                     l2838:	
 12884  0828  0873               	movf	___lwmod@dividend+1,w
 12885  0829  00F1               	movwf	?___lwmod+1
 12886  082A  0872               	movf	___lwmod@dividend,w
 12887  082B  00F0               	movwf	?___lwmod
 12888  082C  0008               	return
 12889  082D                     __end_of___lwmod:	
 12890                           
 12891                           	psect	text34
 12892  1630                     __ptext34:	
 12893 ;; *************** function ___awdiv *****************
 12894 ;; Defined at:
 12895 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 12896 ;; Parameters:    Size  Location     Type
 12897 ;;  divisor         2    0[COMMON] int 
 12898 ;;  dividend        2    2[COMMON] int 
 12899 ;; Auto vars:     Size  Location     Type
 12900 ;;  quotient        2    7[COMMON] int 
 12901 ;;  sign            1    6[COMMON] unsigned char 
 12902 ;;  counter         1    5[COMMON] unsigned char 
 12903 ;; Return value:  Size  Location     Type
 12904 ;;                  2    0[COMMON] int 
 12905 ;; Registers used:
 12906 ;;		wreg, status,2, status,0
 12907 ;; Tracked objects:
 12908 ;;		On entry : 0/0
 12909 ;;		On exit  : 0/0
 12910 ;;		Unchanged: 0/0
 12911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12912 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12913 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12914 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12915 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12916 ;;Total ram usage:        9 bytes
 12917 ;; Hardware stack levels used:    1
 12918 ;; This function calls:
 12919 ;;		Nothing
 12920 ;; This function is called by:
 12921 ;;		_LCDWriteInt
 12922 ;; This function uses a non-reentrant model
 12923 ;;
 12924                           
 12925                           
 12926                           ;psect for function ___awdiv
 12927  1630                     ___awdiv:	
 12928                           
 12929                           ;incstack = 0
 12930                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 12931  1630  01F6               	clrf	___awdiv@sign
 12932  1631  1FF1               	btfss	___awdiv@divisor+1,7
 12933  1632  2E3A               	goto	l2734
 12934  1633  09F0               	comf	___awdiv@divisor,f
 12935  1634  09F1               	comf	___awdiv@divisor+1,f
 12936  1635  0AF0               	incf	___awdiv@divisor,f
 12937  1636  1903               	skipnz
 12938  1637  0AF1               	incf	___awdiv@divisor+1,f
 12939  1638  01F6               	clrf	___awdiv@sign
 12940  1639  0AF6               	incf	___awdiv@sign,f
 12941  163A                     l2734:	
 12942  163A  1FF3               	btfss	___awdiv@dividend+1,7
 12943  163B  2E45               	goto	l2740
 12944  163C  09F2               	comf	___awdiv@dividend,f
 12945  163D  09F3               	comf	___awdiv@dividend+1,f
 12946  163E  0AF2               	incf	___awdiv@dividend,f
 12947  163F  1903               	skipnz
 12948  1640  0AF3               	incf	___awdiv@dividend+1,f
 12949  1641  3001               	movlw	1
 12950  1642  00F4               	movwf	??___awdiv
 12951  1643  0874               	movf	??___awdiv,w
 12952  1644  06F6               	xorwf	___awdiv@sign,f
 12953  1645                     l2740:	
 12954  1645  01F7               	clrf	___awdiv@quotient
 12955  1646  01F8               	clrf	___awdiv@quotient+1
 12956  1647  0870               	movf	___awdiv@divisor,w
 12957  1648  0471               	iorwf	___awdiv@divisor+1,w
 12958  1649  1903               	btfsc	3,2
 12959  164A  2E74               	goto	l2762
 12960  164B  01F5               	clrf	___awdiv@counter
 12961  164C  0AF5               	incf	___awdiv@counter,f
 12962  164D                     l2750:	
 12963  164D  1BF1               	btfsc	___awdiv@divisor+1,7
 12964  164E  2E59               	goto	l2752
 12965  164F  3001               	movlw	1
 12966  1650                     u2895:	
 12967  1650  35F0               	lslf	___awdiv@divisor,f
 12968  1651  0DF1               	rlf	___awdiv@divisor+1,f
 12969  1652  0B89               	decfsz	9,f
 12970  1653  2E50               	goto	u2895
 12971  1654  3001               	movlw	1
 12972  1655  00F4               	movwf	??___awdiv
 12973  1656  0874               	movf	??___awdiv,w
 12974  1657  07F5               	addwf	___awdiv@counter,f
 12975  1658  2E4D               	goto	l2750
 12976  1659                     l2752:	
 12977  1659  3001               	movlw	1
 12978  165A                     u2915:	
 12979  165A  35F7               	lslf	___awdiv@quotient,f
 12980  165B  0DF8               	rlf	___awdiv@quotient+1,f
 12981  165C  0B89               	decfsz	9,f
 12982  165D  2E5A               	goto	u2915
 12983  165E  0871               	movf	___awdiv@divisor+1,w
 12984  165F  0273               	subwf	___awdiv@dividend+1,w
 12985  1660  1D03               	skipz
 12986  1661  2E64               	goto	u2925
 12987  1662  0870               	movf	___awdiv@divisor,w
 12988  1663  0272               	subwf	___awdiv@dividend,w
 12989  1664                     u2925:	
 12990  1664  1C03               	skipc
 12991  1665  2E6B               	goto	l2758
 12992  1666  0870               	movf	___awdiv@divisor,w
 12993  1667  02F2               	subwf	___awdiv@dividend,f
 12994  1668  0871               	movf	___awdiv@divisor+1,w
 12995  1669  3BF3               	subwfb	___awdiv@dividend+1,f
 12996  166A  1477               	bsf	___awdiv@quotient,0
 12997  166B                     l2758:	
 12998  166B  3001               	movlw	1
 12999  166C                     u2935:	
 13000  166C  36F1               	lsrf	___awdiv@divisor+1,f
 13001  166D  0CF0               	rrf	___awdiv@divisor,f
 13002  166E  0B89               	decfsz	9,f
 13003  166F  2E6C               	goto	u2935
 13004  1670  3001               	movlw	1
 13005  1671  02F5               	subwf	___awdiv@counter,f
 13006  1672  1D03               	btfss	3,2
 13007  1673  2E59               	goto	l2752
 13008  1674                     l2762:	
 13009  1674  0876               	movf	___awdiv@sign,w
 13010  1675  1903               	btfsc	3,2
 13011  1676  2E7C               	goto	l2766
 13012  1677  09F7               	comf	___awdiv@quotient,f
 13013  1678  09F8               	comf	___awdiv@quotient+1,f
 13014  1679  0AF7               	incf	___awdiv@quotient,f
 13015  167A  1903               	skipnz
 13016  167B  0AF8               	incf	___awdiv@quotient+1,f
 13017  167C                     l2766:	
 13018  167C  0878               	movf	___awdiv@quotient+1,w
 13019  167D  00F1               	movwf	?___awdiv+1
 13020  167E  0877               	movf	___awdiv@quotient,w
 13021  167F  00F0               	movwf	?___awdiv
 13022  1680  0008               	return
 13023  1681                     __end_of___awdiv:	
 13024                           
 13025                           	psect	text35
 13026  1681                     __ptext35:	
 13027 ;; *************** function _LCDWriteCharacter *****************
 13028 ;; Defined at:
 13029 ;;		line 140 in file "lcd.c"
 13030 ;; Parameters:    Size  Location     Type
 13031 ;;  character       1    wreg     const unsigned char 
 13032 ;; Auto vars:     Size  Location     Type
 13033 ;;  character       1    9[COMMON] const unsigned char 
 13034 ;;  base            2   10[COMMON] unsigned int 
 13035 ;; Return value:  Size  Location     Type
 13036 ;;                  1    wreg      void 
 13037 ;; Registers used:
 13038 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13039 ;; Tracked objects:
 13040 ;;		On entry : 0/0
 13041 ;;		On exit  : 0/0
 13042 ;;		Unchanged: 0/0
 13043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13045 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13046 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13047 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13048 ;;Total ram usage:        6 bytes
 13049 ;; Hardware stack levels used:    1
 13050 ;; Hardware stack levels required when called:    1
 13051 ;; This function calls:
 13052 ;;		_LCDWrite
 13053 ;;		___wmul
 13054 ;; This function is called by:
 13055 ;;		_LCDWriteString
 13056 ;;		_LCDWriteInt
 13057 ;;		_main
 13058 ;; This function uses a non-reentrant model
 13059 ;;
 13060                           
 13061                           
 13062                           ;psect for function _LCDWriteCharacter
 13063  1681                     _LCDWriteCharacter:	
 13064                           
 13065                           ;incstack = 0
 13066                           ; Regs used in _LCDWriteCharacter: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13067                           ;LCDWriteCharacter@character stored from wreg
 13068  1681  00F9               	movwf	LCDWriteCharacter@character
 13069                           
 13070                           ;lcd.c: 142: uint16_t base;
 13071                           ;lcd.c: 143: base = character - 0x20;
 13072  1682  0879               	movf	LCDWriteCharacter@character,w
 13073  1683  3EE0               	addlw	224
 13074  1684  00FA               	movwf	LCDWriteCharacter@base
 13075  1685  30FF               	movlw	255
 13076  1686  1803               	skipnc
 13077  1687  3000               	movlw	0
 13078  1688  00FB               	movwf	LCDWriteCharacter@base+1
 13079                           
 13080                           ;lcd.c: 144: base *= 3;
 13081  1689  3003               	movlw	3
 13082  168A  00F0               	movwf	___wmul@multiplier
 13083  168B  3000               	movlw	0
 13084  168C  00F1               	movwf	___wmul@multiplier+1
 13085  168D  087B               	movf	LCDWriteCharacter@base+1,w
 13086  168E  00F3               	movwf	___wmul@multiplicand+1
 13087  168F  087A               	movf	LCDWriteCharacter@base,w
 13088  1690  00F2               	movwf	___wmul@multiplicand
 13089  1691  3193  237B  3196   	fcall	___wmul
 13090  1694  0871               	movf	?___wmul+1,w
 13091  1695  00FB               	movwf	LCDWriteCharacter@base+1
 13092  1696  0870               	movf	?___wmul,w
 13093  1697  00FA               	movwf	LCDWriteCharacter@base
 13094                           
 13095                           ;lcd.c: 145: LCDWrite(1,fonts[base]);
 13096  1698  087B               	movf	LCDWriteCharacter@base+1,w
 13097  1699  0085               	movwf	5
 13098  169A  087A               	movf	LCDWriteCharacter@base,w
 13099  169B  0084               	movwf	4
 13100  169C  3000               	movlw	low (_fonts| (0+32768))
 13101  169D  0784               	addwf	4,f
 13102  169E  3090               	movlw	high (_fonts| (0+32768))
 13103  169F  3D85               	addwfc	5,f
 13104  16A0  0800               	movf	0,w	;code access
 13105  16A1  00F6               	movwf	??_LCDWriteCharacter
 13106  16A2  0876               	movf	??_LCDWriteCharacter,w
 13107  16A3  00F0               	movwf	LCDWrite@data
 13108  16A4  3001               	movlw	1
 13109  16A5  3193  23F3  3196   	fcall	_LCDWrite
 13110                           
 13111                           ;lcd.c: 146: LCDWrite(1,fonts[base + 1]);
 13112  16A8  087A               	movf	LCDWriteCharacter@base,w
 13113  16A9  3E01               	addlw	1
 13114  16AA  00F6               	movwf	??_LCDWriteCharacter
 13115  16AB  3000               	movlw	0
 13116  16AC  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 13117  16AD  00F7               	movwf	??_LCDWriteCharacter+1
 13118  16AE  3000               	movlw	low (_fonts| (0+32768))
 13119  16AF  0776               	addwf	??_LCDWriteCharacter,w
 13120  16B0  0084               	movwf	4
 13121  16B1  3090               	movlw	high (_fonts| (0+32768))
 13122  16B2  3D77               	addwfc	??_LCDWriteCharacter+1,w
 13123  16B3  0085               	movwf	5
 13124  16B4  0800               	movf	0,w	;code access
 13125  16B5  00F8               	movwf	??_LCDWriteCharacter+2
 13126  16B6  0878               	movf	??_LCDWriteCharacter+2,w
 13127  16B7  00F0               	movwf	LCDWrite@data
 13128  16B8  3001               	movlw	1
 13129  16B9  3193  23F3  3196   	fcall	_LCDWrite
 13130                           
 13131                           ;lcd.c: 147: LCDWrite(1,fonts[base + 2]);
 13132  16BC  087A               	movf	LCDWriteCharacter@base,w
 13133  16BD  3E02               	addlw	2
 13134  16BE  00F6               	movwf	??_LCDWriteCharacter
 13135  16BF  3000               	movlw	0
 13136  16C0  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 13137  16C1  00F7               	movwf	??_LCDWriteCharacter+1
 13138  16C2  3000               	movlw	low (_fonts| (0+32768))
 13139  16C3  0776               	addwf	??_LCDWriteCharacter,w
 13140  16C4  0084               	movwf	4
 13141  16C5  3090               	movlw	high (_fonts| (0+32768))
 13142  16C6  3D77               	addwfc	??_LCDWriteCharacter+1,w
 13143  16C7  0085               	movwf	5
 13144  16C8  0800               	movf	0,w	;code access
 13145  16C9  00F8               	movwf	??_LCDWriteCharacter+2
 13146  16CA  0878               	movf	??_LCDWriteCharacter+2,w
 13147  16CB  00F0               	movwf	LCDWrite@data
 13148  16CC  3001               	movlw	1
 13149  16CD  3193  23F3  3196   	fcall	_LCDWrite
 13150                           
 13151                           ;lcd.c: 148: LCDWrite(1, 0x00);
 13152  16D0  01F0               	clrf	LCDWrite@data
 13153  16D1  3001               	movlw	1
 13154  16D2  3193  23F3         	fcall	_LCDWrite
 13155  16D4  0008               	return
 13156  16D5                     __end_of_LCDWriteCharacter:	
 13157                           
 13158                           	psect	text36
 13159  137B                     __ptext36:	
 13160 ;; *************** function ___wmul *****************
 13161 ;; Defined at:
 13162 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 13163 ;; Parameters:    Size  Location     Type
 13164 ;;  multiplier      2    0[COMMON] unsigned int 
 13165 ;;  multiplicand    2    2[COMMON] unsigned int 
 13166 ;; Auto vars:     Size  Location     Type
 13167 ;;  product         2    4[COMMON] unsigned int 
 13168 ;; Return value:  Size  Location     Type
 13169 ;;                  2    0[COMMON] unsigned int 
 13170 ;; Registers used:
 13171 ;;		wreg, status,2, status,0
 13172 ;; Tracked objects:
 13173 ;;		On entry : 0/0
 13174 ;;		On exit  : 0/0
 13175 ;;		Unchanged: 0/0
 13176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13177 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13178 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13180 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13181 ;;Total ram usage:        6 bytes
 13182 ;; Hardware stack levels used:    1
 13183 ;; This function calls:
 13184 ;;		Nothing
 13185 ;; This function is called by:
 13186 ;;		_readIAnalog
 13187 ;;		_LCDWriteCharacter
 13188 ;;		_eval_poly
 13189 ;; This function uses a non-reentrant model
 13190 ;;
 13191                           
 13192                           
 13193                           ;psect for function ___wmul
 13194  137B                     ___wmul:	
 13195                           
 13196                           ;incstack = 0
 13197                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 13198  137B  01F4               	clrf	___wmul@product
 13199  137C  01F5               	clrf	___wmul@product+1
 13200  137D                     l2254:	
 13201  137D  1C70               	btfss	___wmul@multiplier,0
 13202  137E  2B83               	goto	l582
 13203  137F  0872               	movf	___wmul@multiplicand,w
 13204  1380  07F4               	addwf	___wmul@product,f
 13205  1381  0873               	movf	___wmul@multiplicand+1,w
 13206  1382  3DF5               	addwfc	___wmul@product+1,f
 13207  1383                     l582:	
 13208  1383  3001               	movlw	1
 13209  1384                     u2145:	
 13210  1384  35F2               	lslf	___wmul@multiplicand,f
 13211  1385  0DF3               	rlf	___wmul@multiplicand+1,f
 13212  1386  0B89               	decfsz	9,f
 13213  1387  2B84               	goto	u2145
 13214  1388  3001               	movlw	1
 13215  1389                     u2155:	
 13216  1389  36F1               	lsrf	___wmul@multiplier+1,f
 13217  138A  0CF0               	rrf	___wmul@multiplier,f
 13218  138B  0B89               	decfsz	9,f
 13219  138C  2B89               	goto	u2155
 13220  138D  0870               	movf	___wmul@multiplier,w
 13221  138E  0471               	iorwf	___wmul@multiplier+1,w
 13222  138F  1D03               	btfss	3,2
 13223  1390  2B7D               	goto	l2254
 13224  1391  0875               	movf	___wmul@product+1,w
 13225  1392  00F1               	movwf	?___wmul+1
 13226  1393  0874               	movf	___wmul@product,w
 13227  1394  00F0               	movwf	?___wmul
 13228  1395  0008               	return
 13229  1396                     __end_of___wmul:	
 13230                           
 13231                           	psect	text37
 13232  13F3                     __ptext37:	
 13233 ;; *************** function _LCDWrite *****************
 13234 ;; Defined at:
 13235 ;;		line 281 in file "lcd.c"
 13236 ;; Parameters:    Size  Location     Type
 13237 ;;  data_or_comm    1    wreg     unsigned char 
 13238 ;;  data            1    0[COMMON] unsigned char 
 13239 ;; Auto vars:     Size  Location     Type
 13240 ;;  data_or_comm    1    2[COMMON] unsigned char 
 13241 ;;  i               1    4[COMMON] unsigned char 
 13242 ;;  d               1    3[COMMON] unsigned char 
 13243 ;; Return value:  Size  Location     Type
 13244 ;;                  1    wreg      void 
 13245 ;; Registers used:
 13246 ;;		wreg, status,2, status,0
 13247 ;; Tracked objects:
 13248 ;;		On entry : 0/0
 13249 ;;		On exit  : 0/0
 13250 ;;		Unchanged: 0/0
 13251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13252 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13253 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13254 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13255 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13256 ;;Total ram usage:        5 bytes
 13257 ;; Hardware stack levels used:    1
 13258 ;; This function calls:
 13259 ;;		Nothing
 13260 ;; This function is called by:
 13261 ;;		_gotoXY
 13262 ;;		_LCDWriteCharacter
 13263 ;;		_LCDClear
 13264 ;;		_LCDInit
 13265 ;; This function uses a non-reentrant model
 13266 ;;
 13267                           
 13268                           
 13269                           ;psect for function _LCDWrite
 13270  13F3                     _LCDWrite:	
 13271                           
 13272                           ;incstack = 0
 13273                           ; Regs used in _LCDWrite: [wreg+status,2+status,0]
 13274                           ;LCDWrite@data_or_command stored from wreg
 13275  13F3  00F2               	movwf	LCDWrite@data_or_command
 13276                           
 13277                           ;lcd.c: 283: uint8_t i,d;
 13278                           ;lcd.c: 285: d=data;
 13279  13F4  0870               	movf	LCDWrite@data,w
 13280  13F5  00F1               	movwf	??_LCDWrite
 13281  13F6  0871               	movf	??_LCDWrite,w
 13282  13F7  00F3               	movwf	LCDWrite@d
 13283                           
 13284                           ;lcd.c: 287: if(data_or_command == 0)
 13285  13F8  0872               	movf	LCDWrite@data_or_command,w
 13286  13F9  1D03               	btfss	3,2
 13287  13FA  2BFE               	goto	l217
 13288                           
 13289                           ;lcd.c: 288: {
 13290                           ;lcd.c: 289: LATAbits.LATA2 = 0;
 13291  13FB  0020               	movlb	0	; select bank0
 13292  13FC  1116               	bcf	22,2	;volatile
 13293                           
 13294                           ;lcd.c: 290: }
 13295  13FD  2C00               	goto	l218
 13296  13FE                     l217:	
 13297                           
 13298                           ;lcd.c: 291: else
 13299                           ;lcd.c: 292: {
 13300                           ;lcd.c: 293: LATAbits.LATA2 = 1;
 13301  13FE  0020               	movlb	0	; select bank0
 13302  13FF  1516               	bsf	22,2	;volatile
 13303  1400                     l218:	
 13304                           
 13305                           ;lcd.c: 294: }
 13306                           ;lcd.c: 296: LATAbits.LATA1 = 0;
 13307  1400  1096               	bcf	22,1	;volatile
 13308                           
 13309                           ;lcd.c: 298: for(i=0;i<8;i++)
 13310  1401  01F4               	clrf	LCDWrite@i
 13311  1402  3008               	movlw	8
 13312  1403  0274               	subwf	LCDWrite@i,w
 13313  1404  1803               	btfsc	3,0
 13314  1405  2C16               	goto	l220
 13315  1406                     l219:	
 13316                           
 13317                           ;lcd.c: 299: {
 13318                           ;lcd.c: 300: LATAbits.LATA3 = 0;
 13319  1406  1196               	bcf	22,3	;volatile
 13320                           
 13321                           ;lcd.c: 302: if(d&0x80)
 13322  1407  1FF3               	btfss	LCDWrite@d,7
 13323  1408  2C0A               	goto	l221
 13324                           
 13325                           ;lcd.c: 303: {
 13326                           ;lcd.c: 304: LATAbits.LATA3 = 1;
 13327  1409  1596               	bsf	22,3	;volatile
 13328  140A                     l221:	
 13329                           
 13330                           ;lcd.c: 305: }
 13331                           ;lcd.c: 307: LATAbits.LATA4 = 1;
 13332  140A  1616               	bsf	22,4	;volatile
 13333                           
 13334                           ;lcd.c: 309: d<<=1;
 13335  140B  1003               	clrc
 13336  140C  0DF3               	rlf	LCDWrite@d,f
 13337                           
 13338                           ;lcd.c: 311: LATAbits.LATA4=0;
 13339  140D  1216               	bcf	22,4	;volatile
 13340  140E  3001               	movlw	1
 13341  140F  00F1               	movwf	??_LCDWrite
 13342  1410  0871               	movf	??_LCDWrite,w
 13343  1411  07F4               	addwf	LCDWrite@i,f
 13344  1412  3008               	movlw	8
 13345  1413  0274               	subwf	LCDWrite@i,w
 13346  1414  1C03               	skipc
 13347  1415  2C06               	goto	l219
 13348  1416                     l220:	
 13349                           
 13350                           ;lcd.c: 312: }
 13351                           ;lcd.c: 314: LATAbits.LATA1 = 1;
 13352  1416  1496               	bsf	22,1	;volatile
 13353  1417  0008               	return
 13354  1418                     __end_of_LCDWrite:	
 13355                           
 13356                           	psect	text38
 13357  0146                     __ptext38:	
 13358 ;; *************** function _Battery_State_Machine *****************
 13359 ;; Defined at:
 13360 ;;		line 28 in file "battery_charger.c"
 13361 ;; Parameters:    Size  Location     Type
 13362 ;;  z               1    wreg     unsigned char 
 13363 ;; Auto vars:     Size  Location     Type
 13364 ;;  z               1   35[BANK0 ] unsigned char 
 13365 ;; Return value:  Size  Location     Type
 13366 ;;                  1    wreg      void 
 13367 ;; Registers used:
 13368 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13369 ;; Tracked objects:
 13370 ;;		On entry : 0/0
 13371 ;;		On exit  : 0/0
 13372 ;;		Unchanged: 0/0
 13373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13375 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13376 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13377 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13378 ;;Total ram usage:        6 bytes
 13379 ;; Hardware stack levels used:    1
 13380 ;; Hardware stack levels required when called:    2
 13381 ;; This function calls:
 13382 ;;		___awtoft
 13383 ;;		___ftmul
 13384 ;;		___fttol
 13385 ;; This function is called by:
 13386 ;;		_main
 13387 ;; This function uses a non-reentrant model
 13388 ;;
 13389                           
 13390                           
 13391                           ;psect for function _Battery_State_Machine
 13392  0146                     _Battery_State_Machine:	
 13393                           
 13394                           ;incstack = 0
 13395                           ; Regs used in _Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13396                           ;Battery_State_Machine@z stored from wreg
 13397  0146  0020               	movlb	0	; select bank0
 13398  0147  00C3               	movwf	Battery_State_Machine@z
 13399                           
 13400                           ;battery_charger.c: 30: if(batteryState[z]==PRECHARGE)
 13401  0148  0843               	movf	Battery_State_Machine@z,w
 13402  0149  3EE5               	addlw	(low (_batteryState| 0))& (0+255)
 13403  014A  0086               	movwf	6
 13404  014B  0187               	clrf	7
 13405  014C  3003               	movlw	3
 13406  014D  0601               	xorwf	1,w
 13407  014E  1D03               	btfss	3,2
 13408  014F  299D               	goto	l2874
 13409                           
 13410                           ;battery_charger.c: 31: {
 13411                           ;battery_charger.c: 32: if(voltage[z]<1075)
 13412  0150  3543               	lslf	Battery_State_Machine@z,w
 13413  0151  3EB0               	addlw	(low (_voltage| 0))& (0+255)
 13414  0152  0086               	movwf	6
 13415  0153  0187               	clrf	7
 13416  0154  3F40               	moviw [0]fsr1
 13417  0155  00BE               	movwf	??_Battery_State_Machine
 13418  0156  3F41               	moviw [1]fsr1
 13419  0157  00BF               	movwf	??_Battery_State_Machine+1
 13420  0158  083F               	movf	??_Battery_State_Machine+1,w
 13421  0159  3A80               	xorlw	128
 13422  015A  00C0               	movwf	??_Battery_State_Machine+2
 13423  015B  3084               	movlw	132
 13424  015C  0240               	subwf	??_Battery_State_Machine+2,w
 13425  015D  1D03               	skipz
 13426  015E  2961               	goto	u3195
 13427  015F  3033               	movlw	51
 13428  0160  023E               	subwf	??_Battery_State_Machine,w
 13429  0161                     u3195:	
 13430  0161  1803               	skipnc
 13431  0162  298B               	goto	l2872
 13432                           
 13433                           ;battery_charger.c: 33: {
 13434                           ;battery_charger.c: 34: if(stateCounter[z]>0)
 13435  0163  0020               	movlb	0	; select bank0
 13436  0164  3543               	lslf	Battery_State_Machine@z,w
 13437  0165  3EC9               	addlw	(low (_stateCounter| 0))& (0+255)
 13438  0166  0086               	movwf	6
 13439  0167  0187               	clrf	7
 13440  0168  3F40               	moviw [0]fsr1
 13441  0169  00BE               	movwf	??_Battery_State_Machine
 13442  016A  3F41               	moviw [1]fsr1
 13443  016B  00BF               	movwf	??_Battery_State_Machine+1
 13444  016C  083F               	movf	??_Battery_State_Machine+1,w
 13445  016D  3A80               	xorlw	128
 13446  016E  00C0               	movwf	??_Battery_State_Machine+2
 13447  016F  3080               	movlw	128
 13448  0170  0240               	subwf	??_Battery_State_Machine+2,w
 13449  0171  1D03               	skipz
 13450  0172  2975               	goto	u3205
 13451  0173  3001               	movlw	1
 13452  0174  023E               	subwf	??_Battery_State_Machine,w
 13453  0175                     u3205:	
 13454  0175  1C03               	skipc
 13455  0176  2983               	goto	l2870
 13456                           
 13457                           ;battery_charger.c: 35: {
 13458                           ;battery_charger.c: 36: stateCounter[z]-=1;
 13459  0177  0020               	movlb	0	; select bank0
 13460  0178  3543               	lslf	Battery_State_Machine@z,w
 13461  0179  3EC9               	addlw	(low (_stateCounter| 0))& (0+255)
 13462  017A  0086               	movwf	6
 13463  017B  0187               	clrf	7
 13464  017C  30FF               	movlw	255
 13465  017D  0781               	addwf	1,f
 13466  017E  3141               	addfsr 1,1
 13467  017F  30FF               	movlw	255
 13468  0180  3D81               	addwfc	1,f
 13469  0181  317F               	addfsr 1,-1
 13470                           
 13471                           ;battery_charger.c: 37: }
 13472  0182  0008               	return
 13473  0183                     l2870:	
 13474                           
 13475                           ;battery_charger.c: 38: else
 13476                           ;battery_charger.c: 39: {
 13477                           ;battery_charger.c: 40: batteryState[z]=FAULT;
 13478  0183  0020               	movlb	0	; select bank0
 13479  0184  0843               	movf	Battery_State_Machine@z,w
 13480  0185  3EE5               	addlw	(low (_batteryState| 0))& (0+255)
 13481  0186  0086               	movwf	6
 13482  0187  0187               	clrf	7
 13483  0188  0181               	clrf	1
 13484  0189  0A81               	incf	1,f
 13485                           
 13486                           ;battery_charger.c: 41: }
 13487                           ;battery_charger.c: 42: }
 13488  018A  0008               	return
 13489  018B                     l2872:	
 13490                           
 13491                           ;battery_charger.c: 43: else
 13492                           ;battery_charger.c: 44: {
 13493                           ;battery_charger.c: 45: batteryState[z]=CHARGE;
 13494  018B  3004               	movlw	4
 13495  018C  0020               	movlb	0	; select bank0
 13496  018D  00BE               	movwf	??_Battery_State_Machine
 13497  018E  0843               	movf	Battery_State_Machine@z,w
 13498  018F  3EE5               	addlw	(low (_batteryState| 0))& (0+255)
 13499  0190  0086               	movwf	6
 13500  0191  0187               	clrf	7
 13501  0192  083E               	movf	??_Battery_State_Machine,w
 13502  0193  0081               	movwf	1
 13503                           
 13504                           ;battery_charger.c: 46: Iref[z]=35;
 13505  0194  3543               	lslf	Battery_State_Machine@z,w
 13506  0195  3ECD               	addlw	(low (_Iref| 0))& (0+255)
 13507  0196  0086               	movwf	6
 13508  0197  0187               	clrf	7
 13509  0198  3023               	movlw	35
 13510  0199  3FC0               	movwi [0]fsr1
 13511  019A  3000               	movlw	0
 13512  019B  3FC1               	movwi [1]fsr1
 13513                           
 13514                           ;battery_charger.c: 47: }
 13515                           ;battery_charger.c: 48: }
 13516  019C  0008               	return
 13517  019D                     l2874:	
 13518                           
 13519                           ;battery_charger.c: 49: else if(batteryState[z]==CHARGE)
 13520  019D  0843               	movf	Battery_State_Machine@z,w
 13521  019E  3EE5               	addlw	(low (_batteryState| 0))& (0+255)
 13522  019F  0086               	movwf	6
 13523  01A0  0187               	clrf	7
 13524  01A1  3004               	movlw	4
 13525  01A2  0601               	xorwf	1,w
 13526  01A3  1D03               	btfss	3,2
 13527  01A4  2A63               	goto	l2894
 13528                           
 13529                           ;battery_charger.c: 50: {
 13530                           ;battery_charger.c: 51: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 13531  01A5  0021               	movlb	1	; select bank1
 13532  01A6  096D               	comf	_batteryTemp^(0+128),w
 13533  01A7  0020               	movlb	0	; select bank0
 13534  01A8  00BE               	movwf	??_Battery_State_Machine
 13535  01A9  0021               	movlb	1	; select bank1
 13536  01AA  096E               	comf	(_batteryTemp+1)^(0+128),w
 13537  01AB  0020               	movlb	0	; select bank0
 13538  01AC  00BF               	movwf	??_Battery_State_Machine+1
 13539  01AD  0ABE               	incf	??_Battery_State_Machine,f
 13540  01AE  1903               	skipnz
 13541  01AF  0ABF               	incf	??_Battery_State_Machine+1,f
 13542  01B0  083E               	movf	??_Battery_State_Machine,w
 13543  01B1  3EFA               	addlw	250
 13544  01B2  00F8               	movwf	___awtoft@c
 13545  01B3  3000               	movlw	0
 13546  01B4  3D3F               	addwfc	??_Battery_State_Machine+1,w
 13547  01B5  00F9               	movwf	___awtoft@c+1
 13548  01B6  3193  23D3  3181   	fcall	___awtoft
 13549  01B9  0878               	movf	?___awtoft,w
 13550  01BA  0020               	movlb	0	; select bank0
 13551  01BB  00A3               	movwf	___ftmul@f2
 13552  01BC  0879               	movf	?___awtoft+1,w
 13553  01BD  00A4               	movwf	___ftmul@f2+1
 13554  01BE  087A               	movf	?___awtoft+2,w
 13555  01BF  00A5               	movwf	___ftmul@f2+2
 13556  01C0  30C3               	movlw	195
 13557  01C1  00A0               	movwf	___ftmul@f1
 13558  01C2  3075               	movlw	117
 13559  01C3  00A1               	movwf	___ftmul@f1+1
 13560  01C4  303E               	movlw	62
 13561  01C5  00A2               	movwf	___ftmul@f1+2
 13562  01C6  318B  2311  3181   	fcall	___ftmul
 13563  01C9  0020               	movlb	0	; select bank0
 13564  01CA  0820               	movf	?___ftmul,w
 13565  01CB  00B0               	movwf	___fttol@f1
 13566  01CC  0821               	movf	?___ftmul+1,w
 13567  01CD  00B1               	movwf	___fttol@f1+1
 13568  01CE  0822               	movf	?___ftmul+2,w
 13569  01CF  00B2               	movwf	___fttol@f1+2
 13570  01D0  3189  2131  3181   	fcall	___fttol
 13571  01D3  0020               	movlb	0	; select bank0
 13572  01D4  0830               	movf	?___fttol,w
 13573  01D5  3E91               	addlw	145
 13574  01D6  00C0               	movwf	??_Battery_State_Machine+2
 13575  01D7  3005               	movlw	5
 13576  01D8  3D31               	addwfc	?___fttol+1,w
 13577  01D9  00C1               	movwf	??_Battery_State_Machine+3
 13578  01DA  3543               	lslf	Battery_State_Machine@z,w
 13579  01DB  3EC5               	addlw	(low (_Vref| 0))& (0+255)
 13580  01DC  0086               	movwf	6
 13581  01DD  0187               	clrf	7
 13582  01DE  0840               	movf	??_Battery_State_Machine+2,w
 13583  01DF  3FC0               	movwi [0]fsr1
 13584  01E0  0841               	movf	??_Battery_State_Machine+3,w
 13585  01E1  3FC1               	movwi [1]fsr1
 13586                           
 13587                           ;battery_charger.c: 52: if(!(Imode[z]))
 13588  01E2  0843               	movf	Battery_State_Machine@z,w
 13589  01E3  3EE1               	addlw	(low (_Imode| 0))& (0+255)
 13590  01E4  0086               	movwf	6
 13591  01E5  0187               	clrf	7
 13592  01E6  0801               	movf	1,w
 13593  01E7  1D03               	btfss	3,2
 13594  01E8  2A4A               	goto	l2890
 13595                           
 13596                           ;battery_charger.c: 53: {
 13597                           ;battery_charger.c: 54: if(current[z] < Imin[z])
 13598  01E9  3543               	lslf	Battery_State_Machine@z,w
 13599  01EA  3ED5               	addlw	(low (_Imin| 0))& (0+255)
 13600  01EB  0086               	movwf	6
 13601  01EC  0187               	clrf	7
 13602  01ED  3F40               	moviw [0]fsr1
 13603  01EE  00BE               	movwf	??_Battery_State_Machine
 13604  01EF  3F41               	moviw [1]fsr1
 13605  01F0  00BF               	movwf	??_Battery_State_Machine+1
 13606  01F1  3543               	lslf	Battery_State_Machine@z,w
 13607  01F2  3EB8               	addlw	(low (_current| 0))& (0+255)
 13608  01F3  0086               	movwf	6
 13609  01F4  0187               	clrf	7
 13610  01F5  3F40               	moviw [0]fsr1
 13611  01F6  00C0               	movwf	??_Battery_State_Machine+2
 13612  01F7  3F41               	moviw [1]fsr1
 13613  01F8  00C1               	movwf	??_Battery_State_Machine+3
 13614  01F9  0841               	movf	??_Battery_State_Machine+3,w
 13615  01FA  3A80               	xorlw	128
 13616  01FB  00C2               	movwf	??_Battery_State_Machine+4
 13617  01FC  083F               	movf	??_Battery_State_Machine+1,w
 13618  01FD  3A80               	xorlw	128
 13619  01FE  0242               	subwf	??_Battery_State_Machine+4,w
 13620  01FF  1D03               	skipz
 13621  0200  2A03               	goto	u3235
 13622  0201  083E               	movf	??_Battery_State_Machine,w
 13623  0202  0240               	subwf	??_Battery_State_Machine+2,w
 13624  0203                     u3235:	
 13625  0203  1803               	skipnc
 13626  0204  2A30               	goto	l2886
 13627                           
 13628                           ;battery_charger.c: 55: {
 13629                           ;battery_charger.c: 56: IminCount[z]-=2;
 13630  0205  0020               	movlb	0	; select bank0
 13631  0206  3543               	lslf	Battery_State_Machine@z,w
 13632  0207  3ED1               	addlw	(low (_IminCount| 0))& (0+255)
 13633  0208  0086               	movwf	6
 13634  0209  0187               	clrf	7
 13635  020A  3002               	movlw	2
 13636  020B  0281               	subwf	1,f
 13637  020C  3141               	addfsr 1,1
 13638  020D  3000               	movlw	0
 13639  020E  3B81               	subwfb	1,f
 13640  020F  317F               	addfsr 1,-1
 13641                           
 13642                           ;battery_charger.c: 57: if(IminCount[z]<10)
 13643  0210  3543               	lslf	Battery_State_Machine@z,w
 13644  0211  3ED1               	addlw	(low (_IminCount| 0))& (0+255)
 13645  0212  0086               	movwf	6
 13646  0213  0187               	clrf	7
 13647  0214  3F40               	moviw [0]fsr1
 13648  0215  00BE               	movwf	??_Battery_State_Machine
 13649  0216  3F41               	moviw [1]fsr1
 13650  0217  00BF               	movwf	??_Battery_State_Machine+1
 13651  0218  3000               	movlw	0
 13652  0219  023F               	subwf	??_Battery_State_Machine+1,w
 13653  021A  300A               	movlw	10
 13654  021B  1903               	skipnz
 13655  021C  023E               	subwf	??_Battery_State_Machine,w
 13656  021D  1803               	skipnc
 13657  021E  0008               	return
 13658                           
 13659                           ;battery_charger.c: 58: {
 13660                           ;battery_charger.c: 59: batteryState[z] = FLOAT;
 13661  021F  3005               	movlw	5
 13662  0220  00BE               	movwf	??_Battery_State_Machine
 13663  0221  0843               	movf	Battery_State_Machine@z,w
 13664  0222  3EE5               	addlw	(low (_batteryState| 0))& (0+255)
 13665  0223  0086               	movwf	6
 13666  0224  0187               	clrf	7
 13667  0225  083E               	movf	??_Battery_State_Machine,w
 13668  0226  0081               	movwf	1
 13669                           
 13670                           ;battery_charger.c: 60: IminCount[z]=10;
 13671  0227  3543               	lslf	Battery_State_Machine@z,w
 13672  0228  3ED1               	addlw	(low (_IminCount| 0))& (0+255)
 13673  0229  0086               	movwf	6
 13674  022A  0187               	clrf	7
 13675  022B  300A               	movlw	10
 13676  022C  3FC0               	movwi [0]fsr1
 13677  022D  3000               	movlw	0
 13678  022E  3FC1               	movwi [1]fsr1
 13679                           
 13680                           ;battery_charger.c: 61: }
 13681                           ;battery_charger.c: 62: }
 13682  022F  0008               	return
 13683  0230                     l2886:	
 13684                           
 13685                           ;battery_charger.c: 63: else
 13686                           ;battery_charger.c: 64: {
 13687                           ;battery_charger.c: 65: if(IminCount[z]<600)IminCount[z]+=1;
 13688  0230  0020               	movlb	0	; select bank0
 13689  0231  3543               	lslf	Battery_State_Machine@z,w
 13690  0232  3ED1               	addlw	(low (_IminCount| 0))& (0+255)
 13691  0233  0086               	movwf	6
 13692  0234  0187               	clrf	7
 13693  0235  3F40               	moviw [0]fsr1
 13694  0236  00BE               	movwf	??_Battery_State_Machine
 13695  0237  3F41               	moviw [1]fsr1
 13696  0238  00BF               	movwf	??_Battery_State_Machine+1
 13697  0239  3002               	movlw	2
 13698  023A  023F               	subwf	??_Battery_State_Machine+1,w
 13699  023B  3058               	movlw	88
 13700  023C  1903               	skipnz
 13701  023D  023E               	subwf	??_Battery_State_Machine,w
 13702  023E  1803               	skipnc
 13703  023F  0008               	return
 13704  0240  3543               	lslf	Battery_State_Machine@z,w
 13705  0241  3ED1               	addlw	(low (_IminCount| 0))& (0+255)
 13706  0242  0086               	movwf	6
 13707  0243  0187               	clrf	7
 13708  0244  3001               	movlw	1
 13709  0245  0781               	addwf	1,f
 13710  0246  3141               	addfsr 1,1
 13711  0247  1803               	skipnc
 13712  0248  0A81               	incf	1,f
 13713                           
 13714                           ;battery_charger.c: 66: }
 13715                           ;battery_charger.c: 67: }
 13716  0249  0008               	return
 13717  024A                     l2890:	
 13718                           
 13719                           ;battery_charger.c: 68: else if(IminCount[z]<600)IminCount[z]+=1;
 13720  024A  3543               	lslf	Battery_State_Machine@z,w
 13721  024B  3ED1               	addlw	(low (_IminCount| 0))& (0+255)
 13722  024C  0086               	movwf	6
 13723  024D  0187               	clrf	7
 13724  024E  3F40               	moviw [0]fsr1
 13725  024F  00BE               	movwf	??_Battery_State_Machine
 13726  0250  3F41               	moviw [1]fsr1
 13727  0251  00BF               	movwf	??_Battery_State_Machine+1
 13728  0252  3002               	movlw	2
 13729  0253  023F               	subwf	??_Battery_State_Machine+1,w
 13730  0254  3058               	movlw	88
 13731  0255  1903               	skipnz
 13732  0256  023E               	subwf	??_Battery_State_Machine,w
 13733  0257  1803               	skipnc
 13734  0258  0008               	return
 13735  0259  3543               	lslf	Battery_State_Machine@z,w
 13736  025A  3ED1               	addlw	(low (_IminCount| 0))& (0+255)
 13737  025B  0086               	movwf	6
 13738  025C  0187               	clrf	7
 13739  025D  3001               	movlw	1
 13740  025E  0781               	addwf	1,f
 13741  025F  3141               	addfsr 1,1
 13742  0260  1803               	skipnc
 13743  0261  0A81               	incf	1,f
 13744                           
 13745                           ;battery_charger.c: 69: }
 13746  0262  0008               	return
 13747  0263                     l2894:	
 13748                           
 13749                           ;battery_charger.c: 70: else if(batteryState[z] == FLOAT)
 13750  0263  0843               	movf	Battery_State_Machine@z,w
 13751  0264  3EE5               	addlw	(low (_batteryState| 0))& (0+255)
 13752  0265  0086               	movwf	6
 13753  0266  0187               	clrf	7
 13754  0267  3005               	movlw	5
 13755  0268  0601               	xorwf	1,w
 13756  0269  1D03               	btfss	3,2
 13757  026A  2AB5               	goto	l2902
 13758                           
 13759                           ;battery_charger.c: 71: {
 13760                           ;battery_charger.c: 72: Vref[z]=1350+(int16_t)((250-batteryTemp)*.24);
 13761  026B  0021               	movlb	1	; select bank1
 13762  026C  096D               	comf	_batteryTemp^(0+128),w
 13763  026D  0020               	movlb	0	; select bank0
 13764  026E  00BE               	movwf	??_Battery_State_Machine
 13765  026F  0021               	movlb	1	; select bank1
 13766  0270  096E               	comf	(_batteryTemp+1)^(0+128),w
 13767  0271  0020               	movlb	0	; select bank0
 13768  0272  00BF               	movwf	??_Battery_State_Machine+1
 13769  0273  0ABE               	incf	??_Battery_State_Machine,f
 13770  0274  1903               	skipnz
 13771  0275  0ABF               	incf	??_Battery_State_Machine+1,f
 13772  0276  083E               	movf	??_Battery_State_Machine,w
 13773  0277  3EFA               	addlw	250
 13774  0278  00F8               	movwf	___awtoft@c
 13775  0279  3000               	movlw	0
 13776  027A  3D3F               	addwfc	??_Battery_State_Machine+1,w
 13777  027B  00F9               	movwf	___awtoft@c+1
 13778  027C  3193  23D3  3181   	fcall	___awtoft
 13779  027F  0878               	movf	?___awtoft,w
 13780  0280  0020               	movlb	0	; select bank0
 13781  0281  00A3               	movwf	___ftmul@f2
 13782  0282  0879               	movf	?___awtoft+1,w
 13783  0283  00A4               	movwf	___ftmul@f2+1
 13784  0284  087A               	movf	?___awtoft+2,w
 13785  0285  00A5               	movwf	___ftmul@f2+2
 13786  0286  30C3               	movlw	195
 13787  0287  00A0               	movwf	___ftmul@f1
 13788  0288  3075               	movlw	117
 13789  0289  00A1               	movwf	___ftmul@f1+1
 13790  028A  303E               	movlw	62
 13791  028B  00A2               	movwf	___ftmul@f1+2
 13792  028C  318B  2311  3181   	fcall	___ftmul
 13793  028F  0020               	movlb	0	; select bank0
 13794  0290  0820               	movf	?___ftmul,w
 13795  0291  00B0               	movwf	___fttol@f1
 13796  0292  0821               	movf	?___ftmul+1,w
 13797  0293  00B1               	movwf	___fttol@f1+1
 13798  0294  0822               	movf	?___ftmul+2,w
 13799  0295  00B2               	movwf	___fttol@f1+2
 13800  0296  3189  2131         	fcall	___fttol
 13801  0298  0020               	movlb	0	; select bank0
 13802  0299  0830               	movf	?___fttol,w
 13803  029A  3E46               	addlw	70
 13804  029B  00C0               	movwf	??_Battery_State_Machine+2
 13805  029C  3005               	movlw	5
 13806  029D  3D31               	addwfc	?___fttol+1,w
 13807  029E  00C1               	movwf	??_Battery_State_Machine+3
 13808  029F  3543               	lslf	Battery_State_Machine@z,w
 13809  02A0  3EC5               	addlw	(low (_Vref| 0))& (0+255)
 13810  02A1  0086               	movwf	6
 13811  02A2  0187               	clrf	7
 13812  02A3  0840               	movf	??_Battery_State_Machine+2,w
 13813  02A4  3FC0               	movwi [0]fsr1
 13814  02A5  0841               	movf	??_Battery_State_Machine+3,w
 13815  02A6  3FC1               	movwi [1]fsr1
 13816                           
 13817                           ;battery_charger.c: 73: Iref[z]=15;
 13818  02A7  3543               	lslf	Battery_State_Machine@z,w
 13819  02A8  3ECD               	addlw	(low (_Iref| 0))& (0+255)
 13820  02A9  0086               	movwf	6
 13821  02AA  0187               	clrf	7
 13822  02AB  300F               	movlw	15
 13823  02AC  3FC0               	movwi [0]fsr1
 13824  02AD  3000               	movlw	0
 13825  02AE  3FC1               	movwi [1]fsr1
 13826                           
 13827                           ;battery_charger.c: 74: Imode[z]=0;
 13828  02AF  0843               	movf	Battery_State_Machine@z,w
 13829  02B0  3EE1               	addlw	(low (_Imode| 0))& (0+255)
 13830  02B1  0086               	movwf	6
 13831  02B2  0187               	clrf	7
 13832  02B3  0181               	clrf	1
 13833                           
 13834                           ;battery_charger.c: 75: }
 13835  02B4  0008               	return
 13836  02B5                     l2902:	
 13837                           
 13838                           ;battery_charger.c: 76: else
 13839                           ;battery_charger.c: 77: if(batteryState[z] == FAULT)
 13840  02B5  0843               	movf	Battery_State_Machine@z,w
 13841  02B6  3EE5               	addlw	(low (_batteryState| 0))& (0+255)
 13842  02B7  0086               	movwf	6
 13843  02B8  0187               	clrf	7
 13844  02B9  0301               	decf	1,w
 13845  02BA  1D03               	btfss	3,2
 13846  02BB  0008               	return
 13847                           
 13848                           ;battery_charger.c: 78: {
 13849                           ;battery_charger.c: 79: batteryState[z]=PRECHARGE;
 13850  02BC  3003               	movlw	3
 13851  02BD  00BE               	movwf	??_Battery_State_Machine
 13852  02BE  0843               	movf	Battery_State_Machine@z,w
 13853  02BF  3EE5               	addlw	(low (_batteryState| 0))& (0+255)
 13854  02C0  0086               	movwf	6
 13855  02C1  0187               	clrf	7
 13856  02C2  083E               	movf	??_Battery_State_Machine,w
 13857  02C3  0081               	movwf	1
 13858  02C4  0008               	return
 13859  02C5                     __end_of_Battery_State_Machine:	
 13860                           
 13861                           	psect	text39
 13862  0931                     __ptext39:	
 13863 ;; *************** function ___fttol *****************
 13864 ;; Defined at:
 13865 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 13866 ;; Parameters:    Size  Location     Type
 13867 ;;  f1              3   16[BANK0 ] float 
 13868 ;; Auto vars:     Size  Location     Type
 13869 ;;  lval            4   25[BANK0 ] unsigned long 
 13870 ;;  exp1            1   29[BANK0 ] unsigned char 
 13871 ;;  sign1           1   24[BANK0 ] unsigned char 
 13872 ;; Return value:  Size  Location     Type
 13873 ;;                  4   16[BANK0 ] long 
 13874 ;; Registers used:
 13875 ;;		wreg, status,2, status,0
 13876 ;; Tracked objects:
 13877 ;;		On entry : 0/0
 13878 ;;		On exit  : 0/0
 13879 ;;		Unchanged: 0/0
 13880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13881 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13882 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13883 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13884 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13885 ;;Total ram usage:       14 bytes
 13886 ;; Hardware stack levels used:    1
 13887 ;; This function calls:
 13888 ;;		Nothing
 13889 ;; This function is called by:
 13890 ;;		_tempCalc
 13891 ;;		_main
 13892 ;;		_calculateCurrent0
 13893 ;;		_calculateCurrent1
 13894 ;;		_calculateCurrent2
 13895 ;;		_calculateCurrent3
 13896 ;;		_Init_Battery_State_Machine
 13897 ;;		_Battery_State_Machine
 13898 ;;		_cc_cv_mode
 13899 ;; This function uses a non-reentrant model
 13900 ;;
 13901                           
 13902                           
 13903                           ;psect for function ___fttol
 13904  0931                     ___fttol:	
 13905                           
 13906                           ;incstack = 0
 13907                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13908  0931  0020               	movlb	0	; select bank0
 13909  0932  0830               	movf	___fttol@f1,w
 13910  0933  00B4               	movwf	??___fttol
 13911  0934  0831               	movf	___fttol@f1+1,w
 13912  0935  00B5               	movwf	??___fttol+1
 13913  0936  0832               	movf	___fttol@f1+2,w
 13914  0937  00B6               	movwf	??___fttol+2
 13915  0938  1003               	clrc
 13916  0939  0D35               	rlf	??___fttol+1,w
 13917  093A  0D36               	rlf	??___fttol+2,w
 13918  093B  00B7               	movwf	??___fttol+3
 13919  093C  0837               	movf	??___fttol+3,w
 13920  093D  00BD               	movwf	___fttol@exp1
 13921  093E  083D               	movf	___fttol@exp1,w
 13922  093F  1D03               	btfss	3,2
 13923  0940  294A               	goto	l2426
 13924  0941  3000               	movlw	0
 13925  0942  00B3               	movwf	?___fttol+3
 13926  0943  3000               	movlw	0
 13927  0944  00B2               	movwf	?___fttol+2
 13928  0945  3000               	movlw	0
 13929  0946  00B1               	movwf	?___fttol+1
 13930  0947  3000               	movlw	0
 13931  0948  00B0               	movwf	?___fttol
 13932  0949  0008               	return
 13933  094A                     l2426:	
 13934  094A  0830               	movf	___fttol@f1,w
 13935  094B  00B4               	movwf	??___fttol
 13936  094C  0831               	movf	___fttol@f1+1,w
 13937  094D  00B5               	movwf	??___fttol+1
 13938  094E  0832               	movf	___fttol@f1+2,w
 13939  094F  00B6               	movwf	??___fttol+2
 13940  0950  3017               	movlw	23
 13941  0951                     u2575:	
 13942  0951  36B6               	lsrf	??___fttol+2,f
 13943  0952  0CB5               	rrf	??___fttol+1,f
 13944  0953  0CB4               	rrf	??___fttol,f
 13945  0954  0B89               	decfsz	9,f
 13946  0955  2951               	goto	u2575
 13947  0956  0834               	movf	??___fttol,w
 13948  0957  00B7               	movwf	??___fttol+3
 13949  0958  0837               	movf	??___fttol+3,w
 13950  0959  00B8               	movwf	___fttol@sign1
 13951  095A  17B1               	bsf	___fttol@f1+1,7
 13952  095B  30FF               	movlw	255
 13953  095C  05B0               	andwf	___fttol@f1,f
 13954  095D  30FF               	movlw	255
 13955  095E  05B1               	andwf	___fttol@f1+1,f
 13956  095F  3000               	movlw	0
 13957  0960  05B2               	andwf	___fttol@f1+2,f
 13958  0961  0830               	movf	___fttol@f1,w
 13959  0962  00B9               	movwf	___fttol@lval
 13960  0963  0831               	movf	___fttol@f1+1,w
 13961  0964  00BA               	movwf	___fttol@lval+1
 13962  0965  0832               	movf	___fttol@f1+2,w
 13963  0966  00BB               	movwf	___fttol@lval+2
 13964  0967  01BC               	clrf	___fttol@lval+3
 13965  0968  308E               	movlw	142
 13966  0969  02BD               	subwf	___fttol@exp1,f
 13967  096A  1FBD               	btfss	___fttol@exp1,7
 13968  096B  2988               	goto	l2446
 13969  096C  083D               	movf	___fttol@exp1,w
 13970  096D  3A80               	xorlw	128
 13971  096E  3E8F               	addlw	143
 13972  096F  1803               	skipnc
 13973  0970  297A               	goto	l2444
 13974  0971  3000               	movlw	0
 13975  0972  00B3               	movwf	?___fttol+3
 13976  0973  3000               	movlw	0
 13977  0974  00B2               	movwf	?___fttol+2
 13978  0975  3000               	movlw	0
 13979  0976  00B1               	movwf	?___fttol+1
 13980  0977  3000               	movlw	0
 13981  0978  00B0               	movwf	?___fttol
 13982  0979  0008               	return
 13983  097A                     l2444:	
 13984  097A  3001               	movlw	1
 13985  097B                     u2605:	
 13986  097B  36BC               	lsrf	___fttol@lval+3,f
 13987  097C  0CBB               	rrf	___fttol@lval+2,f
 13988  097D  0CBA               	rrf	___fttol@lval+1,f
 13989  097E  0CB9               	rrf	___fttol@lval,f
 13990  097F  0B89               	decfsz	9,f
 13991  0980  297B               	goto	u2605
 13992  0981  3001               	movlw	1
 13993  0982  00B4               	movwf	??___fttol
 13994  0983  0834               	movf	??___fttol,w
 13995  0984  07BD               	addwf	___fttol@exp1,f
 13996  0985  1903               	btfsc	3,2
 13997  0986  29A1               	goto	l2454
 13998  0987  297A               	goto	l2444
 13999  0988                     l2446:	
 14000  0988  3018               	movlw	24
 14001  0989  023D               	subwf	___fttol@exp1,w
 14002  098A  1C03               	skipc
 14003  098B  299E               	goto	l834
 14004  098C  3000               	movlw	0
 14005  098D  00B3               	movwf	?___fttol+3
 14006  098E  3000               	movlw	0
 14007  098F  00B2               	movwf	?___fttol+2
 14008  0990  3000               	movlw	0
 14009  0991  00B1               	movwf	?___fttol+1
 14010  0992  3000               	movlw	0
 14011  0993  00B0               	movwf	?___fttol
 14012  0994  0008               	return
 14013  0995                     l2452:	
 14014  0995  3001               	movlw	1
 14015  0996                     u2635:	
 14016  0996  35B9               	lslf	___fttol@lval,f
 14017  0997  0DBA               	rlf	___fttol@lval+1,f
 14018  0998  0DBB               	rlf	___fttol@lval+2,f
 14019  0999  0DBC               	rlf	___fttol@lval+3,f
 14020  099A  0B89               	decfsz	9,f
 14021  099B  2996               	goto	u2635
 14022  099C  3001               	movlw	1
 14023  099D  02BD               	subwf	___fttol@exp1,f
 14024  099E                     l834:	
 14025  099E  083D               	movf	___fttol@exp1,w
 14026  099F  1D03               	btfss	3,2
 14027  09A0  2995               	goto	l2452
 14028  09A1                     l2454:	
 14029  09A1  0838               	movf	___fttol@sign1,w
 14030  09A2  1903               	btfsc	3,2
 14031  09A3  29AF               	goto	l2458
 14032  09A4  09B9               	comf	___fttol@lval,f
 14033  09A5  09BA               	comf	___fttol@lval+1,f
 14034  09A6  09BB               	comf	___fttol@lval+2,f
 14035  09A7  09BC               	comf	___fttol@lval+3,f
 14036  09A8  0AB9               	incf	___fttol@lval,f
 14037  09A9  1903               	skipnz
 14038  09AA  0ABA               	incf	___fttol@lval+1,f
 14039  09AB  1903               	skipnz
 14040  09AC  0ABB               	incf	___fttol@lval+2,f
 14041  09AD  1903               	skipnz
 14042  09AE  0ABC               	incf	___fttol@lval+3,f
 14043  09AF                     l2458:	
 14044  09AF  083C               	movf	___fttol@lval+3,w
 14045  09B0  00B3               	movwf	?___fttol+3
 14046  09B1  083B               	movf	___fttol@lval+2,w
 14047  09B2  00B2               	movwf	?___fttol+2
 14048  09B3  083A               	movf	___fttol@lval+1,w
 14049  09B4  00B1               	movwf	?___fttol+1
 14050  09B5  0839               	movf	___fttol@lval,w
 14051  09B6  00B0               	movwf	?___fttol
 14052  09B7  0008               	return
 14053  09B8                     __end_of___fttol:	
 14054                           
 14055                           	psect	text40
 14056  0B11                     __ptext40:	
 14057 ;; *************** function ___ftmul *****************
 14058 ;; Defined at:
 14059 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 14060 ;; Parameters:    Size  Location     Type
 14061 ;;  f1              3    0[BANK0 ] float 
 14062 ;;  f2              3    3[BANK0 ] float 
 14063 ;; Auto vars:     Size  Location     Type
 14064 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
 14065 ;;  sign            1   15[BANK0 ] unsigned char 
 14066 ;;  cntr            1   14[BANK0 ] unsigned char 
 14067 ;;  exp             1   10[BANK0 ] unsigned char 
 14068 ;; Return value:  Size  Location     Type
 14069 ;;                  3    0[BANK0 ] float 
 14070 ;; Registers used:
 14071 ;;		wreg, status,2, status,0, pclath, cstack
 14072 ;; Tracked objects:
 14073 ;;		On entry : 0/0
 14074 ;;		On exit  : 0/0
 14075 ;;		Unchanged: 0/0
 14076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14077 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14078 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14079 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14080 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14081 ;;Total ram usage:       16 bytes
 14082 ;; Hardware stack levels used:    1
 14083 ;; Hardware stack levels required when called:    1
 14084 ;; This function calls:
 14085 ;;		___ftpack
 14086 ;; This function is called by:
 14087 ;;		_Init_Battery_State_Machine
 14088 ;;		_Battery_State_Machine
 14089 ;;		_cc_cv_mode
 14090 ;;		_tempCalc
 14091 ;;		_log
 14092 ;;		_eval_poly
 14093 ;; This function uses a non-reentrant model
 14094 ;;
 14095                           
 14096                           
 14097                           ;psect for function ___ftmul
 14098  0B11                     ___ftmul:	
 14099                           
 14100                           ;incstack = 0
 14101                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14102  0B11  0020               	movlb	0	; select bank0
 14103  0B12  0820               	movf	___ftmul@f1,w
 14104  0B13  00A6               	movwf	??___ftmul
 14105  0B14  0821               	movf	___ftmul@f1+1,w
 14106  0B15  00A7               	movwf	??___ftmul+1
 14107  0B16  0822               	movf	___ftmul@f1+2,w
 14108  0B17  00A8               	movwf	??___ftmul+2
 14109  0B18  1003               	clrc
 14110  0B19  0D27               	rlf	??___ftmul+1,w
 14111  0B1A  0D28               	rlf	??___ftmul+2,w
 14112  0B1B  00A9               	movwf	??___ftmul+3
 14113  0B1C  0829               	movf	??___ftmul+3,w
 14114  0B1D  00AA               	movwf	___ftmul@exp
 14115  0B1E  082A               	movf	___ftmul@exp,w
 14116  0B1F  1D03               	btfss	3,2
 14117  0B20  2B28               	goto	l2342
 14118  0B21  3000               	movlw	0
 14119  0B22  00A0               	movwf	?___ftmul
 14120  0B23  3000               	movlw	0
 14121  0B24  00A1               	movwf	?___ftmul+1
 14122  0B25  3000               	movlw	0
 14123  0B26  00A2               	movwf	?___ftmul+2
 14124  0B27  0008               	return
 14125  0B28                     l2342:	
 14126  0B28  0823               	movf	___ftmul@f2,w
 14127  0B29  00A6               	movwf	??___ftmul
 14128  0B2A  0824               	movf	___ftmul@f2+1,w
 14129  0B2B  00A7               	movwf	??___ftmul+1
 14130  0B2C  0825               	movf	___ftmul@f2+2,w
 14131  0B2D  00A8               	movwf	??___ftmul+2
 14132  0B2E  1003               	clrc
 14133  0B2F  0D27               	rlf	??___ftmul+1,w
 14134  0B30  0D28               	rlf	??___ftmul+2,w
 14135  0B31  00A9               	movwf	??___ftmul+3
 14136  0B32  0829               	movf	??___ftmul+3,w
 14137  0B33  00AF               	movwf	___ftmul@sign
 14138  0B34  082F               	movf	___ftmul@sign,w
 14139  0B35  1D03               	btfss	3,2
 14140  0B36  2B3E               	goto	l2348
 14141  0B37  3000               	movlw	0
 14142  0B38  00A0               	movwf	?___ftmul
 14143  0B39  3000               	movlw	0
 14144  0B3A  00A1               	movwf	?___ftmul+1
 14145  0B3B  3000               	movlw	0
 14146  0B3C  00A2               	movwf	?___ftmul+2
 14147  0B3D  0008               	return
 14148  0B3E                     l2348:	
 14149  0B3E  082F               	movf	___ftmul@sign,w
 14150  0B3F  3E7B               	addlw	123
 14151  0B40  00A6               	movwf	??___ftmul
 14152  0B41  0826               	movf	??___ftmul,w
 14153  0B42  07AA               	addwf	___ftmul@exp,f
 14154  0B43  0820               	movf	___ftmul@f1,w
 14155  0B44  00A6               	movwf	??___ftmul
 14156  0B45  0821               	movf	___ftmul@f1+1,w
 14157  0B46  00A7               	movwf	??___ftmul+1
 14158  0B47  0822               	movf	___ftmul@f1+2,w
 14159  0B48  00A8               	movwf	??___ftmul+2
 14160  0B49  3010               	movlw	16
 14161  0B4A                     u2425:	
 14162  0B4A  36A8               	lsrf	??___ftmul+2,f
 14163  0B4B  0CA7               	rrf	??___ftmul+1,f
 14164  0B4C  0CA6               	rrf	??___ftmul,f
 14165  0B4D  0B89               	decfsz	9,f
 14166  0B4E  2B4A               	goto	u2425
 14167  0B4F  0826               	movf	??___ftmul,w
 14168  0B50  00A9               	movwf	??___ftmul+3
 14169  0B51  0829               	movf	??___ftmul+3,w
 14170  0B52  00AF               	movwf	___ftmul@sign
 14171  0B53  0823               	movf	___ftmul@f2,w
 14172  0B54  00A6               	movwf	??___ftmul
 14173  0B55  0824               	movf	___ftmul@f2+1,w
 14174  0B56  00A7               	movwf	??___ftmul+1
 14175  0B57  0825               	movf	___ftmul@f2+2,w
 14176  0B58  00A8               	movwf	??___ftmul+2
 14177  0B59  3010               	movlw	16
 14178  0B5A                     u2435:	
 14179  0B5A  36A8               	lsrf	??___ftmul+2,f
 14180  0B5B  0CA7               	rrf	??___ftmul+1,f
 14181  0B5C  0CA6               	rrf	??___ftmul,f
 14182  0B5D  0B89               	decfsz	9,f
 14183  0B5E  2B5A               	goto	u2435
 14184  0B5F  0826               	movf	??___ftmul,w
 14185  0B60  00A9               	movwf	??___ftmul+3
 14186  0B61  0829               	movf	??___ftmul+3,w
 14187  0B62  06AF               	xorwf	___ftmul@sign,f
 14188  0B63  3080               	movlw	128
 14189  0B64  00A6               	movwf	??___ftmul
 14190  0B65  0826               	movf	??___ftmul,w
 14191  0B66  05AF               	andwf	___ftmul@sign,f
 14192  0B67  17A1               	bsf	___ftmul@f1+1,7
 14193  0B68  17A4               	bsf	___ftmul@f2+1,7
 14194  0B69  30FF               	movlw	255
 14195  0B6A  05A3               	andwf	___ftmul@f2,f
 14196  0B6B  30FF               	movlw	255
 14197  0B6C  05A4               	andwf	___ftmul@f2+1,f
 14198  0B6D  3000               	movlw	0
 14199  0B6E  05A5               	andwf	___ftmul@f2+2,f
 14200  0B6F  3000               	movlw	0
 14201  0B70  00AB               	movwf	___ftmul@f3_as_product
 14202  0B71  3000               	movlw	0
 14203  0B72  00AC               	movwf	___ftmul@f3_as_product+1
 14204  0B73  3000               	movlw	0
 14205  0B74  00AD               	movwf	___ftmul@f3_as_product+2
 14206  0B75  3007               	movlw	7
 14207  0B76  00A6               	movwf	??___ftmul
 14208  0B77  0826               	movf	??___ftmul,w
 14209  0B78  00AE               	movwf	___ftmul@cntr
 14210  0B79                     l2360:	
 14211  0B79  1C20               	btfss	___ftmul@f1,0
 14212  0B7A  2B81               	goto	l2364
 14213  0B7B  0823               	movf	___ftmul@f2,w
 14214  0B7C  07AB               	addwf	___ftmul@f3_as_product,f
 14215  0B7D  0824               	movf	___ftmul@f2+1,w
 14216  0B7E  3DAC               	addwfc	___ftmul@f3_as_product+1,f
 14217  0B7F  0825               	movf	___ftmul@f2+2,w
 14218  0B80  3DAD               	addwfc	___ftmul@f3_as_product+2,f
 14219  0B81                     l2364:	
 14220  0B81  3001               	movlw	1
 14221  0B82                     u2455:	
 14222  0B82  36A2               	lsrf	___ftmul@f1+2,f
 14223  0B83  0CA1               	rrf	___ftmul@f1+1,f
 14224  0B84  0CA0               	rrf	___ftmul@f1,f
 14225  0B85  0B89               	decfsz	9,f
 14226  0B86  2B82               	goto	u2455
 14227  0B87  3001               	movlw	1
 14228  0B88                     u2465:	
 14229  0B88  35A3               	lslf	___ftmul@f2,f
 14230  0B89  0DA4               	rlf	___ftmul@f2+1,f
 14231  0B8A  0DA5               	rlf	___ftmul@f2+2,f
 14232  0B8B  0B89               	decfsz	9,f
 14233  0B8C  2B88               	goto	u2465
 14234  0B8D  3001               	movlw	1
 14235  0B8E  02AE               	subwf	___ftmul@cntr,f
 14236  0B8F  1D03               	btfss	3,2
 14237  0B90  2B79               	goto	l2360
 14238  0B91  3009               	movlw	9
 14239  0B92  00A6               	movwf	??___ftmul
 14240  0B93  0826               	movf	??___ftmul,w
 14241  0B94  00AE               	movwf	___ftmul@cntr
 14242  0B95                     l2372:	
 14243  0B95  1C20               	btfss	___ftmul@f1,0
 14244  0B96  2B9D               	goto	l2376
 14245  0B97  0823               	movf	___ftmul@f2,w
 14246  0B98  07AB               	addwf	___ftmul@f3_as_product,f
 14247  0B99  0824               	movf	___ftmul@f2+1,w
 14248  0B9A  3DAC               	addwfc	___ftmul@f3_as_product+1,f
 14249  0B9B  0825               	movf	___ftmul@f2+2,w
 14250  0B9C  3DAD               	addwfc	___ftmul@f3_as_product+2,f
 14251  0B9D                     l2376:	
 14252  0B9D  3001               	movlw	1
 14253  0B9E                     u2495:	
 14254  0B9E  36A2               	lsrf	___ftmul@f1+2,f
 14255  0B9F  0CA1               	rrf	___ftmul@f1+1,f
 14256  0BA0  0CA0               	rrf	___ftmul@f1,f
 14257  0BA1  0B89               	decfsz	9,f
 14258  0BA2  2B9E               	goto	u2495
 14259  0BA3  3001               	movlw	1
 14260  0BA4                     u2505:	
 14261  0BA4  36AD               	lsrf	___ftmul@f3_as_product+2,f
 14262  0BA5  0CAC               	rrf	___ftmul@f3_as_product+1,f
 14263  0BA6  0CAB               	rrf	___ftmul@f3_as_product,f
 14264  0BA7  0B89               	decfsz	9,f
 14265  0BA8  2BA4               	goto	u2505
 14266  0BA9  3001               	movlw	1
 14267  0BAA  02AE               	subwf	___ftmul@cntr,f
 14268  0BAB  1D03               	btfss	3,2
 14269  0BAC  2B95               	goto	l2372
 14270  0BAD  082B               	movf	___ftmul@f3_as_product,w
 14271  0BAE  00F0               	movwf	___ftpack@arg
 14272  0BAF  082C               	movf	___ftmul@f3_as_product+1,w
 14273  0BB0  00F1               	movwf	___ftpack@arg+1
 14274  0BB1  082D               	movf	___ftmul@f3_as_product+2,w
 14275  0BB2  00F2               	movwf	___ftpack@arg+2
 14276  0BB3  082A               	movf	___ftmul@exp,w
 14277  0BB4  00A6               	movwf	??___ftmul
 14278  0BB5  0826               	movf	??___ftmul,w
 14279  0BB6  00F3               	movwf	___ftpack@exp
 14280  0BB7  082F               	movf	___ftmul@sign,w
 14281  0BB8  00A7               	movwf	??___ftmul+1
 14282  0BB9  0827               	movf	??___ftmul+1,w
 14283  0BBA  00F4               	movwf	___ftpack@sign
 14284  0BBB  3197  2735         	fcall	___ftpack
 14285  0BBD  0870               	movf	?___ftpack,w
 14286  0BBE  0020               	movlb	0	; select bank0
 14287  0BBF  00A0               	movwf	?___ftmul
 14288  0BC0  0871               	movf	?___ftpack+1,w
 14289  0BC1  00A1               	movwf	?___ftmul+1
 14290  0BC2  0872               	movf	?___ftpack+2,w
 14291  0BC3  00A2               	movwf	?___ftmul+2
 14292  0BC4  0008               	return
 14293  0BC5                     __end_of___ftmul:	
 14294                           
 14295                           	psect	text41
 14296  13D3                     __ptext41:	
 14297 ;; *************** function ___awtoft *****************
 14298 ;; Defined at:
 14299 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 14300 ;; Parameters:    Size  Location     Type
 14301 ;;  c               2    8[COMMON] int 
 14302 ;; Auto vars:     Size  Location     Type
 14303 ;;  sign            1   13[COMMON] unsigned char 
 14304 ;; Return value:  Size  Location     Type
 14305 ;;                  3    8[COMMON] float 
 14306 ;; Registers used:
 14307 ;;		wreg, status,2, status,0, pclath, cstack
 14308 ;; Tracked objects:
 14309 ;;		On entry : 0/0
 14310 ;;		On exit  : 0/0
 14311 ;;		Unchanged: 0/0
 14312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14313 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14314 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14315 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14316 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14317 ;;Total ram usage:        6 bytes
 14318 ;; Hardware stack levels used:    1
 14319 ;; Hardware stack levels required when called:    1
 14320 ;; This function calls:
 14321 ;;		___ftpack
 14322 ;; This function is called by:
 14323 ;;		_Init_Battery_State_Machine
 14324 ;;		_Battery_State_Machine
 14325 ;;		_cc_cv_mode
 14326 ;;		_tempCalc
 14327 ;;		_main
 14328 ;;		_calculateCurrent0
 14329 ;;		_calculateCurrent1
 14330 ;;		_calculateCurrent2
 14331 ;;		_calculateCurrent3
 14332 ;;		_log
 14333 ;; This function uses a non-reentrant model
 14334 ;;
 14335                           
 14336                           
 14337                           ;psect for function ___awtoft
 14338  13D3                     ___awtoft:	
 14339                           
 14340                           ;incstack = 0
 14341                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14342  13D3  01FD               	clrf	___awtoft@sign
 14343  13D4  1FF9               	btfss	___awtoft@c+1,7
 14344  13D5  2BDD               	goto	l2396
 14345  13D6  09F8               	comf	___awtoft@c,f
 14346  13D7  09F9               	comf	___awtoft@c+1,f
 14347  13D8  0AF8               	incf	___awtoft@c,f
 14348  13D9  1903               	skipnz
 14349  13DA  0AF9               	incf	___awtoft@c+1,f
 14350  13DB  01FD               	clrf	___awtoft@sign
 14351  13DC  0AFD               	incf	___awtoft@sign,f
 14352  13DD                     l2396:	
 14353  13DD  0878               	movf	___awtoft@c,w
 14354  13DE  00F0               	movwf	___ftpack@arg
 14355  13DF  0879               	movf	___awtoft@c+1,w
 14356  13E0  00F1               	movwf	___ftpack@arg+1
 14357  13E1  01F2               	clrf	___ftpack@arg+2
 14358  13E2  308E               	movlw	142
 14359  13E3  00FB               	movwf	??___awtoft
 14360  13E4  087B               	movf	??___awtoft,w
 14361  13E5  00F3               	movwf	___ftpack@exp
 14362  13E6  087D               	movf	___awtoft@sign,w
 14363  13E7  00FC               	movwf	??___awtoft+1
 14364  13E8  087C               	movf	??___awtoft+1,w
 14365  13E9  00F4               	movwf	___ftpack@sign
 14366  13EA  3197  2735         	fcall	___ftpack
 14367  13EC  0870               	movf	?___ftpack,w
 14368  13ED  00F8               	movwf	?___awtoft
 14369  13EE  0871               	movf	?___ftpack+1,w
 14370  13EF  00F9               	movwf	?___awtoft+1
 14371  13F0  0872               	movf	?___ftpack+2,w
 14372  13F1  00FA               	movwf	?___awtoft+2
 14373  13F2  0008               	return
 14374  13F3                     __end_of___awtoft:	
 14375                           
 14376                           	psect	text42
 14377  1735                     __ptext42:	
 14378 ;; *************** function ___ftpack *****************
 14379 ;; Defined at:
 14380 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 14381 ;; Parameters:    Size  Location     Type
 14382 ;;  arg             3    0[COMMON] unsigned um
 14383 ;;  exp             1    3[COMMON] unsigned char 
 14384 ;;  sign            1    4[COMMON] unsigned char 
 14385 ;; Auto vars:     Size  Location     Type
 14386 ;;		None
 14387 ;; Return value:  Size  Location     Type
 14388 ;;                  3    0[COMMON] float 
 14389 ;; Registers used:
 14390 ;;		wreg, status,2, status,0
 14391 ;; Tracked objects:
 14392 ;;		On entry : 0/0
 14393 ;;		On exit  : 0/0
 14394 ;;		Unchanged: 0/0
 14395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14396 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14398 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14399 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14400 ;;Total ram usage:        8 bytes
 14401 ;; Hardware stack levels used:    1
 14402 ;; This function calls:
 14403 ;;		Nothing
 14404 ;; This function is called by:
 14405 ;;		___awtoft
 14406 ;;		___ftadd
 14407 ;;		___ftdiv
 14408 ;;		___ftmul
 14409 ;; This function uses a non-reentrant model
 14410 ;;
 14411                           
 14412                           
 14413                           ;psect for function ___ftpack
 14414  1735                     ___ftpack:	
 14415                           
 14416                           ;incstack = 0
 14417                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14418  1735  0873               	movf	___ftpack@exp,w
 14419  1736  1903               	btfsc	3,2
 14420  1737  2F3D               	goto	l2202
 14421  1738  0872               	movf	___ftpack@arg+2,w
 14422  1739  0471               	iorwf	___ftpack@arg+1,w
 14423  173A  0470               	iorwf	___ftpack@arg,w
 14424  173B  1D03               	skipz
 14425  173C  2F4E               	goto	l2208
 14426  173D                     l2202:	
 14427  173D  3000               	movlw	0
 14428  173E  00F0               	movwf	?___ftpack
 14429  173F  3000               	movlw	0
 14430  1740  00F1               	movwf	?___ftpack+1
 14431  1741  3000               	movlw	0
 14432  1742  00F2               	movwf	?___ftpack+2
 14433  1743  0008               	return
 14434  1744                     l2206:	
 14435  1744  3001               	movlw	1
 14436  1745  00F5               	movwf	??___ftpack
 14437  1746  0875               	movf	??___ftpack,w
 14438  1747  07F3               	addwf	___ftpack@exp,f
 14439  1748  3001               	movlw	1
 14440  1749                     u1995:	
 14441  1749  36F2               	lsrf	___ftpack@arg+2,f
 14442  174A  0CF1               	rrf	___ftpack@arg+1,f
 14443  174B  0CF0               	rrf	___ftpack@arg,f
 14444  174C  0B89               	decfsz	9,f
 14445  174D  2F49               	goto	u1995
 14446  174E                     l2208:	
 14447  174E  30FE               	movlw	254
 14448  174F  0572               	andwf	___ftpack@arg+2,w
 14449  1750  1903               	btfsc	3,2
 14450  1751  2F67               	goto	l743
 14451  1752  2F44               	goto	l2206
 14452  1753                     l2210:	
 14453  1753  3001               	movlw	1
 14454  1754  00F5               	movwf	??___ftpack
 14455  1755  0875               	movf	??___ftpack,w
 14456  1756  07F3               	addwf	___ftpack@exp,f
 14457  1757  3001               	movlw	1
 14458  1758  07F0               	addwf	___ftpack@arg,f
 14459  1759  3000               	movlw	0
 14460  175A  1803               	skipnc
 14461  175B  3001               	movlw	1
 14462  175C  07F1               	addwf	___ftpack@arg+1,f
 14463  175D  3000               	movlw	0
 14464  175E  1803               	skipnc
 14465  175F  3001               	movlw	1
 14466  1760  07F2               	addwf	___ftpack@arg+2,f
 14467  1761  3001               	movlw	1
 14468  1762                     u2015:	
 14469  1762  36F2               	lsrf	___ftpack@arg+2,f
 14470  1763  0CF1               	rrf	___ftpack@arg+1,f
 14471  1764  0CF0               	rrf	___ftpack@arg,f
 14472  1765  0B89               	decfsz	9,f
 14473  1766  2F62               	goto	u2015
 14474  1767                     l743:	
 14475  1767  30FF               	movlw	255
 14476  1768  0572               	andwf	___ftpack@arg+2,w
 14477  1769  1903               	btfsc	3,2
 14478  176A  2F74               	goto	l2218
 14479  176B  2F53               	goto	l2210
 14480  176C                     l2216:	
 14481  176C  3001               	movlw	1
 14482  176D  02F3               	subwf	___ftpack@exp,f
 14483  176E  3001               	movlw	1
 14484  176F                     u2035:	
 14485  176F  35F0               	lslf	___ftpack@arg,f
 14486  1770  0DF1               	rlf	___ftpack@arg+1,f
 14487  1771  0DF2               	rlf	___ftpack@arg+2,f
 14488  1772  0B89               	decfsz	9,f
 14489  1773  2F6F               	goto	u2035
 14490  1774                     l2218:	
 14491  1774  1BF1               	btfsc	___ftpack@arg+1,7
 14492  1775  2F7A               	goto	l750
 14493  1776  3002               	movlw	2
 14494  1777  0273               	subwf	___ftpack@exp,w
 14495  1778  1803               	skipnc
 14496  1779  2F6C               	goto	l2216
 14497  177A                     l750:	
 14498  177A  1873               	btfsc	___ftpack@exp,0
 14499  177B  2F82               	goto	l751
 14500  177C  30FF               	movlw	255
 14501  177D  05F0               	andwf	___ftpack@arg,f
 14502  177E  307F               	movlw	127
 14503  177F  05F1               	andwf	___ftpack@arg+1,f
 14504  1780  30FF               	movlw	255
 14505  1781  05F2               	andwf	___ftpack@arg+2,f
 14506  1782                     l751:	
 14507  1782  1003               	clrc
 14508  1783  0CF3               	rrf	___ftpack@exp,f
 14509  1784  0873               	movf	___ftpack@exp,w
 14510  1785  00F5               	movwf	??___ftpack
 14511  1786  01F6               	clrf	??___ftpack+1
 14512  1787  01F7               	clrf	??___ftpack+2
 14513  1788  3010               	movlw	16
 14514  1789                     u2075:	
 14515  1789  35F5               	lslf	??___ftpack,f
 14516  178A  0DF6               	rlf	??___ftpack+1,f
 14517  178B  0DF7               	rlf	??___ftpack+2,f
 14518  178C  0B89               	decfsz	9,f
 14519  178D  2F89               	goto	u2075
 14520  178E  0875               	movf	??___ftpack,w
 14521  178F  04F0               	iorwf	___ftpack@arg,f
 14522  1790  0876               	movf	??___ftpack+1,w
 14523  1791  04F1               	iorwf	___ftpack@arg+1,f
 14524  1792  0877               	movf	??___ftpack+2,w
 14525  1793  04F2               	iorwf	___ftpack@arg+2,f
 14526  1794  0874               	movf	___ftpack@sign,w
 14527  1795  1903               	btfsc	3,2
 14528  1796  0008               	return
 14529  1797  17F2               	bsf	___ftpack@arg+2,7
 14530  1798  0008               	return
 14531  1799                     __end_of___ftpack:	
 14532  007E                     btemp	set	126	;btemp
 14533  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    330
    Data        10
    BSS         93
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     79      79
    BANK1            80      0      79
    BANK2            80      0      24
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            48      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    LCDWriteString@characters	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _main->_LCDWriteString
    _main->___awtoft
    _tempCalc->___awtoft
    _log->___awtoft
    ___ftadd->___awtoft
    _readIAnalog->___aldiv
    _readButton->_ADCRead
    _cc_cv_mode->___awtoft
    _calculateCurrent3->___awtoft
    _calculateCurrent2->___awtoft
    _calculateCurrent1->___awtoft
    _calculateCurrent0->___awtoft
    ___ftdiv->___awtoft
    _LCDInit->_LCDWrite
    _LCDClear->_gotoXY
    _gotoXY->_LCDWrite
    _Init_Battery_State_Machine->___awtoft
    _LCDWriteString->_LCDWriteCharacter
    _LCDWriteInt->_LCDWriteCharacter
    _LCDWriteCharacter->___wmul
    _Battery_State_Machine->___awtoft
    ___fttol->___awtoft
    ___ftmul->___awtoft
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_tempCalc
    _tempCalc->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftadd->___ftmul
    _readIAnalog->___aldiv
    _cc_cv_mode->___fttol
    _calculateCurrent3->___fttol
    _calculateCurrent2->___fttol
    _calculateCurrent1->___fttol
    _calculateCurrent0->___fttol
    _SYSTEM_Initialize->_Init_Battery_State_Machine
    _Init_Battery_State_Machine->___fttol
    _Battery_State_Machine->___fttol
    ___fttol->___ftdiv
    ___fttol->___ftmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0  110462
                                             56 BANK0     23    23      0
                            _ADCRead
              _Battery_State_Machine
                           _LCDClear
                            _LCDInit
                  _LCDWriteCharacter
                        _LCDWriteInt
                     _LCDWriteString
                 _PWM6_LoadDutyValue
                 _PWM7_LoadDutyValue
                  _SYSTEM_Initialize
                           ___awtoft
                            ___ftdiv
                            ___fttol
                  _calculateCurrent0
                  _calculateCurrent1
                  _calculateCurrent2
                  _calculateCurrent3
                         _cc_cv_mode
                             _gotoXY
                         _readButton
                        _readIAnalog
                           _tempCalc
 ---------------------------------------------------------------------------------
 (1) _tempCalc                                            11     9      2   33648
                                             45 BANK0     11     9      2
                            _ADCRead (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                            ___fttol
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   17068
                                             39 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     330
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           10     3      7    7315
                                             29 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     322
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3356
                                             29 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3183
                                             16 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (1) _readIAnalog                                         24    22      2    1498
                                              9 COMMON     4     4      0
                                              6 BANK0     20    18      2
                            _ADCRead
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     406
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _readButton                                           2     2      0      22
                                              4 COMMON     2     2      0
                            _ADCRead
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     1      3      22
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _cc_cv_mode                                           8     8      0    6922
                                             30 BANK0      8     8      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent3                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent2                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent1                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent0                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3365
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    2     2      0   10373
                                             35 BANK0      2     2      0
                     _ADC_Initialize
         _Init_Battery_State_Machine
                           _LCDClear
                            _LCDInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PWM_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              1     1      0     803
                                              5 COMMON     1     1      0
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             3     3      0    3021
                                              8 COMMON     3     3      0
                           _LCDWrite
                             _gotoXY
 ---------------------------------------------------------------------------------
 (1) _gotoXY                                               3     2      1    2172
                                              5 COMMON     3     2      1
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _Init_Battery_State_Machine                           5     5      0    6526
                                             30 BANK0      5     5      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM7_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM6_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCDWriteString                                       3     1      2    1847
                                             12 COMMON     2     0      2
                                              0 BANK0      1     1      0
                  _LCDWriteCharacter
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         16    11      5    7267
                                              0 BANK0     16    11      5
                  _LCDWriteCharacter
                            ___awdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     406
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _LCDWriteCharacter                                    6     6      0    1643
                                              6 COMMON     6     6      0
                           _LCDWrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     728
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _LCDWrite                                             5     4      1     803
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _Battery_State_Machine                                6     6      0    6966
                                             30 BANK0      6     6      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     734
                                             16 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    3067
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2593
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1707
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _Battery_State_Machine
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _LCDClear
     _LCDWrite
     _gotoXY
       _LCDWrite
   _LCDInit
     _LCDWrite
   _LCDWriteCharacter
     _LCDWrite
     ___wmul
   _LCDWriteInt
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
     ___awdiv
     ___lwmod
   _LCDWriteString
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
   _PWM6_LoadDutyValue
   _PWM7_LoadDutyValue
   _SYSTEM_Initialize
     _ADC_Initialize
     _Init_Battery_State_Machine
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
     _LCDClear
       _LCDWrite
       _gotoXY
         _LCDWrite
     _LCDInit
       _LCDWrite
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM_Initialize
     _TMR2_Initialize
     _TMR4_Initialize
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___ftpack (ARG)
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
   _calculateCurrent0
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent1
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent2
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent3
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _cc_cv_mode
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _gotoXY
     _LCDWrite
   _readButton
     _ADCRead
   _readIAnalog
     _ADCRead
     ___aldiv
     ___wmul
   _tempCalc
     _ADCRead (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___fttol (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _log (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul
       _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      18       9       30.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               30      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      C4      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      C4      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Aug 09 17:07:22 2018

                       _stateCounter 00C9                                    _j 00E9  
                                  _x 00EC               LCDWriteInt@fieldLength 0022  
            __size_of_PWM_Initialize 0015                          __CFG_CP$OFF 0000  
                                 l60 1348                                   l57 1341  
                       ___awdiv@sign 0076                  ___wmul@multiplicand 0072  
        __size_of_PWM6_LoadDutyValue 0016                         ___ftadd@exp1 003C  
                       ___ftadd@exp2 003B                          __CFG_LVP$ON 0000  
                       ___ftadd@sign 003A                                  l220 1416  
                                l132 0F3D                                  l221 140A  
                                l127 0EE1                                  l128 0EF2  
                                l217 13FE                                  l218 1400  
                                l219 1406                        LCDClear@index 0079  
                                l637 08C0                                  l750 177A  
                                l582 1383                                  l751 1782  
                                l743 1767                                  l834 099E  
                                l774 00EF                                  _GIE 005F  
                                _RB2 006A                         __CFG_CPD$OFF 0000  
                                _log 0A61                      __end_of_ADCRead 134F  
                    _TMR2_Initialize 12E2                         __CFG_BORV$LO 0000  
                                wreg 0009                      __end_of_LCDInit 14B0  
                       ?_LCDWriteInt 0020                         __CFG_ZCD$OFF 0000  
                       ___ftdiv@cntr 002A                         ___ftdiv@sign 002F  
                               l2210 1753                                 l2202 173D  
                               l3002 0BE6                                 l3020 0C22  
                               l3012 0BED                                 l2300 00BB  
                               l2206 1744                                 l3030 0C34  
                               l3022 0C2A                                 l3014 0C1A  
                               l2302 00C5                                 l3110 02EF  
                               l2216 176C                                 l2208 174E  
                               l3032 0C5B                                 l3024 0C30  
                               l2312 00E1                                 l2304 00CA  
                               l2218 1774                                 l3018 0C1E  
                               l2322 0113                                 l2314 00EB  
                               l2306 00CE                                 l3202 04A3  
                               l3130 0322                                 l3036 0C69  
                               l2332 012E                                 l2404 1501  
                               l3124 0307                                 l2342 0B28  
                               l2254 137D                                 l2318 0101  
                               l3222 04E7                                 l3118 0302  
                               l2360 0B79                                 l2272 0078  
                               l2408 1517                                 l3216 04D2  
                               l3136 034D                                 l2426 094A  
                               l3082 15BF                                 l2282 008E  
                               l3226 04EE                                 l2372 0B95  
                               l2364 0B81                                 l2348 0B3E  
                               l2452 0995                                 l2444 097A  
                               l3076 157A                                 l2276 007F  
                               l3244 0523                                 l3172 043E  
                               l2454 09A1                                 l2446 0988  
                               l3094 0024                                 l2294 00A8  
                               l2470 1538                                 l3190 046B  
                               l3166 0420                                 l2376 0B9D  
                               l3088 1604                                 l2704 08E1  
                               l2458 09AF                                 l2722 0928  
                               l2714 090F                                 l2706 08EF  
                               l3178 0458                                 l2396 13DD  
                               l2740 1645                                 l2804 0A3F  
                               l3380 07B3                                 l3196 0489  
                               l2902 02B5                                 l2750 164D  
                               l2734 163A                                 l2830 0813  
                               l2574 1439                                 l2718 091A  
                               l2670 0A80                                 l2752 1659  
                               l2568 1425                                 l2920 0F0D  
                               l2816 139E                                 l2488 172E  
                               l3384 07BC                                 l2762 1674  
                               l2834 081F                                 l2828 0807  
                               l2916 0F00                                 l2676 0A93  
                               l2870 0183                                 l2766 167C  
                               l2758 166B                                 l2838 0828  
                               l2782 09E5                                 l2950 086B  
                               l2872 018B                                 l2776 09CF  
                               l2944 0851                                 l2696 08D1  
                               l2856 0E88                                 l2890 024A  
                               l2874 019D                                 l2970 0894  
                               l2954 087D                                 l2796 0A26  
                               l2964 088B                                 l2956 087F  
                               l2886 0230                                 l2894 0263  
                               l2976 08AC                                 l2978 08AD  
                               l2988 1311                                 ?_log 0047  
                               STR_1 1825                                 STR_2 1820  
                               STR_3 181B                                 u2015 1762  
                               u2035 176F                                 u3005 0A27  
                               _LATA 0016                                 _LATB 0017  
                               u3015 0A36                                 _LATC 0018  
                               u2145 1384                                 u3025 0A40  
                               u2075 1789                                 u2155 1389  
                               u3115 0D7B                                 u3205 0175  
                               u3125 0DD5                                 u2325 00CF  
                               u3135 0E13                                 u2505 0BA4  
                               u2425 0B4A                                 u3065 080A  
                               u3145 0E62                                 u2265 00A9  
                               _T2PR 028D                                 u2435 0B5A  
                               u3235 0203                                 u2355 00E2  
                               u2605 097B                                 u3085 0819  
                               u3405 084B                                 u2455 0B82  
                               u3095 0820                                 u3415 085B  
                               u3175 0E94                                 u2295 00BC  
                               u2720 1473                                 u2465 0B88  
                               u2705 1423                                 u3425 0867  
                               _T4PR 0293                                 u2635 0996  
                               u3195 0161                                 u2715 1437  
                               u3355 0F57                                 u3435 0875  
                               u3605 1574                                 u2495 0B9E  
                               u2575 0951                                 u3615 15B9  
                               u3295 0ECD                                 u2815 08F0  
                               u3625 15FE                                 u3385 0FB0  
                               u2825 0904                                 u3490 0BD0  
                               u2915 165A                                 u3555 0C49  
                               u3635 001E                                 u3395 083F  
                               u2835 0910                                 u2925 1664  
                               u2935 166C                                 u3815 047A  
                               u3735 042F                                 u3585 135E  
                               u1995 1749                                 u3595 1374  
                               u2795 08E4                                 u3835 0498  
                               u3755 044D                                 u2895 1650  
                               u3695 040E                                 u2985 09F7  
                               u3865 04CB                                 u3785 0468  
                               u2995 0A07                                 u3947 02F7  
                               u3957 089E                                 u3885 04E0  
                               u3967 14D3                                 u3977 14E3  
                tempCalc@analogValue 004D                                 _WPUA 0F39  
                               _WPUB 0F44                                 _WPUC 0F4F  
                               _WPUE 0F65                                 _Imin 00D5  
                               _Iref 00CD                                 _Iout 00DF  
                       __CFG_WRT$OFF 0000                        __CFG_FCMEN$ON 0000  
                               _Vref 00C5                                 _main 02C5  
                       ___ftpack@arg 0070                         ___ftpack@exp 0073  
                               fsr0h 0005                                 fsr1h 0007  
                               indf0 0000                                 fsr0l 0004  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E                                 log@x 0047  
                       ?_readIAnalog 0026                        __CFG_BOREN$ON 0000  
                               start 0002                        __CFG_CSWEN$ON 0000  
                      __CFG_MCLRE$ON 0000                         ___ftmul@cntr 002E  
                       ___ftmul@sign 002F                     __end_of_LCDClear 143E  
                       ___fttol@exp1 003D                                ??_log 004A  
                       ___fttol@lval 0039  __size_of_Init_Battery_State_Machine 0067  
     __size_of_OSCILLATOR_Initialize 0009                     __end_of_LCDWrite 1418  
      __end_of_OSCILLATOR_Initialize 12D6                      __end_of___aldiv 0931  
                              _ADACQ 009D                                _ADACT 0099  
                              _ADCAP 009B                                ?_main 0070  
                              _ADCLK 0098                                _ADPCH 009E  
                              _ADREF 009A                      __end_of___awdiv 1681  
                              _ADPRE 009C                      __end_of___ftadd 0146  
                      __CFG_WDTE$OFF 0000                                _ADRPT 010D  
                    __end_of___ftdiv 0A61                      __end_of___ftmul 0BC5  
                    ___awdiv@divisor 0070                      __end_of___ftsub 13B4  
                    __end_of___fttol 09B8                                _T2CON 028E  
                              _LATA5 00B5                                _T4CON 0294  
                              _T2HLT 028F                                _T4HLT 0295  
                              _T2TMR 028C                                _T2RST 0291  
                    __end_of___lwmod 082D                                _T4TMR 0292  
                              _T4RST 0297                      ___awdiv@counter 0075  
                              _OSCEN 0891                                _TRISA 0011  
                              _TRISB 0012                                _TRISC 0013  
                    _TMR4_Initialize 12F0                                _Imode 00E1  
             ?_Battery_State_Machine 0070                                _cc_cv 00E3  
                      ___awtoft@sign 007D                                _frexp 1526  
                              _fonts 1000                                _errno 00D9  
                      ___ftpack@sign 0074                                main@j 006A  
                       main@slowLoop 0063                                status 0003  
                              wtemp0 007E                      __initialization 07BF  
                        log@exponent 004B                         __end_of_main 07BF  
            __end_of_TMR2_Initialize 12F0                            ??_ADCRead 0073  
                             ??_main 0058                        ___fttol@sign1 0038  
                          ??_LCDInit 0075               Battery_State_Machine@z 0043  
            LCDWrite@data_or_command 0072                               _ADCON0 0093  
                             _ADCON1 0094                               _ADCON2 0095  
                             _ADCON3 0096                               ?_frexp 0070  
                             _ADLTHH 010F                               _ADLTHL 010E  
                             _ADRESH 008D                               _ADRESL 008C  
                             _ADSTAT 0097                               _ADUTHH 0111  
                   ___awdiv@dividend 0072                               _ADUTHL 0110  
                   __end_of___awtoft 13F3                               _ANSELA 0F38  
                             _ANSELB 0F43                               _ANSELC 0F4E  
                   __end_of___ftpack 1799                               _RB0PPS 0F18  
                             _RA6PPS 0F16                               _RA7PPS 0F17  
                     __CFG_WDTCCS$SC 0000                               _FVRCON 090C  
                             _OSCFRQ 0893                       __CFG_PWRTE$OFF 0000  
                     _LCDWriteString 1311                         _CCPTMRS1bits 021F  
                             ___ftge 14EB                            ??___aldiv 0078  
                             ___wmul 137B                            ??___awdiv 0074  
                          ??___ftadd 0036                       __CFG_STVREN$ON 0000  
                     _PWM_Initialize 1325                            ??___ftdiv 0026  
                          ??___ftmul 0026                            ??___ftsub 007E  
                          ??___fttol 0034                            ??___lwmod 0074  
                             _gotoXY 12FE                               _button 00EB  
            __end_of_TMR4_Initialize 12FE                     ___awdiv@quotient 0077  
                             _totals 0120                ___ftmul@f3_as_product 002B  
                   __end_of_tempCalc 0D65                         LCDWrite@data 0070  
                       LCDWriteInt@i 002F                         LCDWriteInt@j 002E  
                          ?_LCDClear 0070                    _SYSTEM_Initialize 14B0  
               __size_of_LCDWriteInt 00B9                     __end_oflog@coeff 181B  
            __end_of__initialization 07FD                           ___ftadd@f1 0030  
                         ___ftadd@f2 0033                           ___ftge@ff1 0070  
                         ___ftge@ff2 0073                            ?_LCDWrite 0070  
                 ?_SYSTEM_Initialize 0070               __end_of_LCDWriteString 1325  
                       eval_poly@res 0044                           ___ftdiv@f1 0023  
                         ___ftdiv@f2 0020                           ___ftdiv@f3 002B  
                         ___awtoft@c 0078                           ___ftmul@f1 0020  
                         ___ftmul@f2 0023               __end_of_PWM_Initialize 133A  
               __size_of_readIAnalog 014C                           ___ftsub@f1 0040  
                         ___ftsub@f2 003D                           ___fttol@f1 0030  
                     __pcstackCOMMON 0070                         __pidataBANK1 0009  
                       __pidataBANK2 12C5                  ??_SYSTEM_Initialize 0043  
                      __end_of_frexp 1561                        __end_of_fonts 112F  
                          LCDWrite@d 0073                            LCDWrite@i 0074  
                   ?_TMR2_Initialize 0070                           _cc_cv_mode 0EB1  
        __size_of_PWM7_LoadDutyValue 0016                       main@efficiency 005A  
                  LCDWriteInt@F14388 00C0                    _calculateCurrent0 1561  
                  _calculateCurrent1 15A6                    _calculateCurrent2 15EB  
                  _calculateCurrent3 000B                              ??_frexp 0074  
          __end_of_SYSTEM_Initialize 14EB                           __pbssBANK1 00A0  
                         __pbssBANK2 0120                   ?_calculateCurrent0 0070  
                 ?_calculateCurrent1 0070                   ?_calculateCurrent2 0070  
                 ?_calculateCurrent3 0070                         _batteryState 00E5  
                 __size_of_eval_poly 0060                           ??_LCDClear 0078  
                     main@faultCount 005F                           ??_LCDWrite 0071  
                    ?_LCDWriteString 007C                  ??_calculateCurrent0 003E  
                ??_calculateCurrent1 003E                  ??_calculateCurrent2 003E  
                ??_calculateCurrent3 003E                      ?_PWM_Initialize 0070  
                         __pmaintext 02C5                              ?___ftge 0070  
                            ?___wmul 0070                      __CFG_PPS1WAY$ON 0000  
         __end_of_PWM6_LoadDutyValue 1365                              ?_gotoXY 0075  
                            _ADCRead 133A                     ?_TMR4_Initialize 0070  
                          ?___awtoft 0078                            ?___ftpack 0070  
                            _ADSTPTH 0113                              _ADSTPTL 0112  
           __CFG_SCANE$not_available 0000                  __CFG_RSTOSC$HFINT32 0000  
            __size_of_ADC_Initialize 001F              ??_Battery_State_Machine 003E  
                            _LCDInit 1475            __end_of_calculateCurrent0 15A6  
          __end_of_calculateCurrent1 15EB            __end_of_calculateCurrent2 1630  
          __end_of_calculateCurrent3 0050                              _OSCCON1 088D  
                            _OSCCON3 088F                              _OSCTUNE 0892  
                            _PWM6DCH 038D                              _PWM6DCL 038C  
                            _PWM7DCH 0391                              _PWM7DCL 0390  
                            _PWM6CON 038E                              _PWM7CON 0392  
                            _PPSLOCK 0E8F                       main@menuButton 0069  
                     main@dutyCycle6 006B                       main@dutyCycle7 006D  
                         _lastButton 00EA                            ?_tempCalc 004D  
                            ___aldiv 08AF                      __size_of___ftge 003B  
                            ___awdiv 1630                              ___ftadd 0050  
                         _readButton 082D                              ___ftdiv 09B8  
                    __size_of___wmul 001B                              ___ftmul 0B11  
                            ___ftsub 1396                              ___fttol 0931  
                 main@displayRefresh 0064                              ___lwmod 0801  
                    __size_of_gotoXY 0013                           ??___awtoft 007B  
                         ??___ftpack 0075                    __end_of_eval_poly 1735  
                            __ptext1 0C7E                              __ptext2 0A61  
                            __ptext3 1526                              __ptext4 16D5  
                            __ptext5 14EB                              __ptext6 1396  
                            __ptext7 0050                              __ptext8 0D65  
                            __ptext9 08AF                          ?_cc_cv_mode 0070  
              _OSCILLATOR_Initialize 12CD                            _T2CONbits 028E  
                            _current 00B8                         __size_of_log 00B0  
                     ADCRead@channel 0073                     ___aldiv@dividend 0074  
                          _T4CONbits 0294             ??_PIN_MANAGER_Initialize 0070  
                            _samples 2260           __size_of_SYSTEM_Initialize 003B  
                            clrloop0 12D7                              _voltage 00B0  
       ??_Init_Battery_State_Machine 003E                 end_of_initialization 07FD  
              LCDWriteCharacter@base 007A                              gotoXY@x 0077  
                            gotoXY@y 0075                           ??_tempCalc 007E  
                   ___aldiv@quotient 0022                    _LCDWriteCharacter 1681  
              __CFG_WDTCPS$WDTCPS_31 0000                   ?_LCDWriteCharacter 0070  
         __size_of_calculateCurrent0 0045           __size_of_calculateCurrent1 0045  
         __size_of_calculateCurrent2 0045           __size_of_calculateCurrent3 0045  
                          _TRISAbits 0011                  ??_LCDWriteCharacter 0076  
                   __CFG_FEXTOSC$OFF 0000                          ___ftdiv@exp 002E  
                __size_of_cc_cv_mode 014F                    __size_of_LCDClear 0026  
         LCDWriteCharacter@character 0079                    __size_of_LCDWrite 0025  
                        ___ftmul@exp 002A            __end_of_LCDWriteCharacter 16D5  
                        ?_readButton 0070            readIAnalog@analog_channel 0079  
                     __end_of___ftge 1526                            _VHoldMode 00DD  
                     __end_of___wmul 1396                       _ADC_Initialize 13B4  
                     __end_of_gotoXY 1311               ?_OSCILLATOR_Initialize 0070  
                          _IminCount 00D1                  start_initialization 07BF  
                         eval_poly@d 0040                           eval_poly@n 0042  
                         eval_poly@x 003D                    main@faultNotReset 0061  
    __size_of_PIN_MANAGER_Initialize 0037                          __end_of_log 0B11  
                      ??_LCDWriteInt 0025                     ??_LCDWriteString 0020  
                         frexp@value 0070                     ??_PWM_Initialize 0070  
                      ??_readIAnalog 0028                     __CFG_LPBOREN$OFF 0000  
                           ??___ftge 0076                    tempCalc@steinhart 0055  
                           ??___wmul 0074               __end_of_ADC_Initialize 13D3  
                      _tempCalc$1187 0052                          __pdataBANK1 00ED  
                        __pdataBANK2 0130           __end_of_PWM7_LoadDutyValue 137B  
                           ??_gotoXY 0076                             ?_ADCRead 0070  
       PWM7_LoadDutyValue@dutyCycle7 0070                    __size_of___awtoft 0020  
                           ?_LCDInit 0070                    __size_of___ftpack 0064  
                        __pbssBIGRAM 2260       __size_of_Battery_State_Machine 017F  
      __end_of_Battery_State_Machine 02C5                            ___latbits 0002  
                      __pcstackBANK0 0020                   _PWM6_LoadDutyValue 134F  
           __size_of_TMR2_Initialize 000E   __end_of_Init_Battery_State_Machine 1800  
         _Init_Battery_State_Machine 1799                  __size_of_readButton 0082  
                ?_PWM6_LoadDutyValue 0070                  __end_of_LCDWriteInt 0C7E  
                        _batteryTemp 00ED               _PIN_MANAGER_Initialize 143E  
         __size_of_LCDWriteCharacter 0054                             ?___aldiv 0070  
                __end_of_readIAnalog 0EB1                    __size_of_tempCalc 00E7  
                           ?___awdiv 0070                             ?___ftadd 0030  
                           ?___ftdiv 0020                             ?___ftmul 0020  
                           ?___ftsub 003D                             ?___fttol 0030  
                   LCDWriteInt@value 0020                             ?___lwmod 0070  
                    ?_ADC_Initialize 0070                 ??_PWM6_LoadDutyValue 0072  
                       ??_cc_cv_mode 003E                            _eval_poly 16D5  
           __size_of_TMR4_Initialize 000E                       __size_of_frexp 003B  
                           _T2CLKCON 0290                             _T4CLKCON 0296  
                        cc_cv_mode@z 0045                             _LCDClear 1418  
                    ___aldiv@divisor 0070                      ___aldiv@counter 0020  
                     ___wmul@product 0074                             _LATAbits 0016  
                           _LCDWrite 13F3                            clear_ram0 12D6  
                           _PIE0bits 0716                   __end_of_cc_cv_mode 1000  
                           _PIR4bits 0710                     readIAnalog@value 007B  
                          main@MPPT0 0065                            main@MPPT1 0067  
                   __size_of_ADCRead 0015                           _ADCON0bits 0093  
                  ___wmul@multiplier 0070                           ?_eval_poly 003D  
                   __size_of_LCDInit 003B                             _Ianalogs 00A0  
                        _LCDWriteInt 0BC5          Init_Battery_State_Machine@z 0042  
                  ??_TMR2_Initialize 0070                          _readIAnalog 0D65  
                          frexp@eptr 0073                             _Vanalogs 00A8  
                       ??_readButton 0074              ??_OSCILLATOR_Initialize 0070  
               LCDWriteInt@numPlaces 0023                     __size_of___aldiv 0082  
                   __size_of___awdiv 0051                     __size_of___ftadd 00F6  
                   __size_of___ftdiv 00A9                     __size_of___ftmul 00B4  
                   __size_of___ftsub 001E                     __size_of___fttol 0087  
                   __size_of___lwmod 002C                          _readButtons 00DB  
                           ___awtoft 13D3                             ___ftpack 1735  
                           _channels 0130                             __ptext10 082D  
                           __ptext11 133A                             __ptext20 12E2  
                           __ptext12 0EB1                             __ptext21 1325  
                           __ptext13 000B                             __ptext30 134F  
                           __ptext22 143E                             __ptext14 15EB  
                           __ptext31 1311                             __ptext23 12CD  
                           __ptext15 15A6                             __ptext40 0B11  
                           __ptext32 0BC5                             __ptext24 1475  
                           __ptext16 1561                             __ptext41 13D3  
                           __ptext33 0801                             __ptext25 1418  
                           __ptext17 09B8                             __ptext42 1735  
                           __ptext34 1630                             __ptext26 12FE  
                           __ptext18 14B0                             __ptext35 1681  
                           __ptext27 1799                             __ptext19 12F0  
                           __ptext36 137B                             __ptext28 13B4  
                           __ptext37 13F3                             __ptext29 1365  
                           __ptext38 0146                             __ptext39 0931  
                    LCDWriteInt@sign 0024                            tempCalc@R 004F  
                 __end_of_readButton 08AF                    ??_TMR4_Initialize 0070  
                      __size_of_main 04FA                 __CFG_WDTCWS$WDTCWS_7 0000  
                           _tempCalc 0C7E          PIN_MANAGER_Initialize@state 0070  
                           log@coeff 1800                          ??_eval_poly 007E  
                        _sampleIndex 00E7                   _PWM7_LoadDutyValue 1365  
        ?_Init_Battery_State_Machine 0070                     ___lwmod@dividend 0072  
                     LCDWriteInt@str 0029              ?_PIN_MANAGER_Initialize 0070  
                ?_PWM7_LoadDutyValue 0070                    __CFG_CLKOUTEN$OFF 0000  
                        _PPSLOCKbits 0E8F                     ??_ADC_Initialize 0070  
       PWM6_LoadDutyValue@dutyCycle6 0070                        __pstringtext1 1000  
                      __pstringtext2 1800                        __pstringtext3 1820  
                      __pstringtext4 1825                        __pstringtext5 0000  
               ??_PWM7_LoadDutyValue 0072                      ___lwmod@divisor 0070  
                    ___lwmod@counter 0075             LCDWriteString@characters 007C  
                       ___aldiv@sign 0021                   readIAnalog@channel 0026  
              _Battery_State_Machine 0146       __end_of_PIN_MANAGER_Initialize 1475  
                      main@IOutTotal 005D              __size_of_LCDWriteString 0014  
